[
  {
    "_id": "662342e3dde8ed798d2ed52b",
    "number": 2666,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2666) **Quality Gate passed**  \nIssues  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [3 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2666&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/accepted-16px.png '') [0 Accepted issues](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2666&metric=new_accepted_issues&view=list)\n\nMeasures  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2666&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/no-data-16px.png '') No data about Coverage  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2666&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2666)\n\n"
    ],
    "commit_messages": [
      "Add missing void for OrderDao::prepareOrderFromCart in index.adoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662342e4dde8ed798d2ed52c",
    "number": 2664,
    "body": "Closes #2660",
    "head_branch": "oracle12",
    "is_a_fork": true,
    "comments": [
      "I see there is a problem with the new module - \"japicmp\" plugin can't find version 3.45.1 , which is the most recent \"jdbi\" tag\r\nBut this is because \"jdb2-oracle12\" seems not to be tagged at the same time with main \"jdbi\" repo.\r\nAnd even when I try to create the version for me locally \"japicmp\" complains now about version \"3.45.0\", because even such tag exists, maybe it was not build or pushed to maven central. The latest version there is \"3.44.1\"\r\n\r\nI'm trying to sort out this for me locally.\r\n\r\nBest regards, Stoyan\r\n",
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2664) **Quality Gate passed**  \nIssues  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [2 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2664&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/accepted-16px.png '') [0 Accepted issues](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2664&metric=new_accepted_issues&view=list)\n\nMeasures  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2664&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/no-data-16px.png '') No data about Coverage  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2664&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2664)\n\n",
      "Thank you for contributing this! @hgschmie , do you have a sec to look into the `japicmp` problems? Or maybe this is something we can just ignore and will be fixed after we make a release.",
      "Actually, I am going to try to backdate a release jar for the new artifact and see if the job will pick that up.",
      "I tried to get the build working today.\r\nI got as far as the container not becoming ready. The logs show:\r\n\r\n```\r\nSession altered.\r\n\r\n   CREATE USER test IDENTIFIED BY \"test\" QUOTA UNLIMITED ON USERS\r\n*\r\nERROR at line 1:\r\nORA-01109: database not open\r\n```\r\n\r\nI didn't figure out how to fix this. I tried updating to latest testcontainers version with no change.",
      "Hi @stevenschlansker \r\n\r\nI merged some commit, which came after my changes, in the \"oracle12\" branch and pushed to the MR. This started a new build (as my plan was).\r\n\r\nAnd yes, I see the same message there: https://github.com/jdbi/jdbi/actions/runs/8990130231/job/24694783402?pr=2664\r\n\r\n   CREATE USER test IDENTIFIED BY \"test\" QUOTA UNLIMITED ON USERS\r\n*\r\nERROR at line 1:\r\nORA-01109: database not open\r\n\r\nNo idea at the moment why GitHub pipeline fails so miserably.\r\nI know, that it sounds pathetic, but I tested on2 different computers (one native Linux and one WSL) ... all runs fine.\r\nI will have a look again. And I don't think it is related to the Java code. I suspect it is setup / environment related.\r\n\r\nBest Regards, Stoyan",
      "Hi @stevenschlansker,\r\n\r\nSeems the pipeline is trying to run all 4 oracle test classes in parallel. But this creates 4 docker testcontainers at the same time. \r\nThis is slow, in fact they interfere with each other. I extended  the start-up timeout to 10 minutes (only to test). And ... it run out of disk space (have a look in the last build logs)\r\n\r\n```\r\n./23_Test Oracle versions (21-slim-faststart).txt:2024-05-08T20:28:32.0430409Z ##[warning]You are running out of disk space. The runner will stop working when the machine runs out of disk space. Free space left: 45 MB\r\n::::\r\n./24_Test Oracle versions (18-slim-faststart).txt:2024-05-08T20:29:00.6337597Z ##[warning]You are running out of disk space. The runner will stop working when the machine runs out of disk space. Free space left: 33 MB\r\n\r\n```\r\nI will check how to request from the pipeline to run the tests sequentially.\r\n\r\nBest Regards,\r\nStoyan",
      "Hi @stevenschlansker ,\nCan you please re-start the workflow? I fixed the problem with oracle12 testcontainers, but it failed again. And I see no relation between the problems and my changes.\nBest regards, Stoyan.\n",
      "Yeah, I'll take a look tonight or this weekend. Thank you for your persistence here.",
      "Hi @stevenschlansker,\r\n\r\nVery strange, it seems pipeline is not stable. Each build fails at different step. And steps, which were fine before, are failing now. While others, which failed last build are now ok. None of them are related to my changes :)\r\n\r\nI will give one more try.\r\n\r\nBest Regards,\r\nStoyan",
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2664) **Quality Gate passed**  \nIssues  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [1 New issue](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2664&resolved=false&sinceLeakPeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/accepted-16px.png '') [0 Accepted issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2664&resolutions=WONTFIX)\n\nMeasures  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2664&resolved=false&sinceLeakPeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/no-data-16px.png '') No data about Coverage  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2664&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2664)\n\n",
      "Hi @stevenschlansker \r\nFinally, got a successful build. Maybe today is my lucky day.\r\nNot much changed, only some Sonar issues.  But pipeline failed before not because of them.\r\nI hope now it can be merged.\r\nBest Regards, Stoyan\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662342e5dde8ed798d2ed52d",
    "number": 2658,
    "body": null,
    "head_branch": "cif-warn",
    "is_a_fork": false,
    "comments": [
      "Please retry analysis of this Pull-Request directly on SonarCloud",
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2658) **Quality Gate passed**  \nIssues  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2658&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/accepted-16px.png '') [0 Accepted issues](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2658&metric=new_accepted_issues&view=list)\n\nMeasures  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2658&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/no-data-16px.png '') No data about Coverage  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2658&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2658)\n\n"
    ],
    "commit_messages": [
      "ConstructorInstanceFactory: clean up some warnings and flatten stack a bit"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662342e6dde8ed798d2ed52e",
    "number": 2657,
    "body": "This is the weak hashmap version of #2650 just for viz. The benchmarks are posted in that pr. \r\nlmk which one you prefer. I can push this back to the original pr branch. Happy to do anything, code changes, more benchmarks, etc. - including just waiting for the jdk fix:)",
    "head_branch": "cache_types_weakhm",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2657) **Quality Gate passed**  \nIssues  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [4 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2657&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/accepted-16px.png '') [0 Accepted issues](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2657&metric=new_accepted_issues&view=list)\n\nMeasures  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2657&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/no-data-16px.png '') No data about Coverage  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2657&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2657)\n\n",
      "Here's the jdk pr that fixes the issue: https://github.com/openjdk/jdk/pull/17070"
    ],
    "commit_messages": [
      "Use ConstructorBenchmark in main method"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662342e7dde8ed798d2ed52f",
    "number": 2653,
    "body": "### What happened？\nThere are 1 security vulnerabilities found in org.postgresql:postgresql 42.7.1\n- [CVE-2024-1597](https://www.oscs1024.com/hd/CVE-2024-1597)\n\n\n### What did I do？\nUpgrade org.postgresql:postgresql from 42.7.1 to 42.7.2 for vulnerability fix\n\n### What did you expect to happen？\nIdeally, no insecure libs should be used.\n\n### How can we automate the detection of these types of issues?\nBy using the [GitHub Actions](https://github.com/murphysecurity/actions) configurations provided by murphysec, we can conduct automatic code security checks in our CI pipeline.\n\n### The specification of the pull request\n[PR Specification](https://www.oscs1024.com/docs/pr-specification/) from OSCS",
    "head_branch": "oscs_fix_cnkn5c8au51ramiph0n0",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2653) **Quality Gate passed**  \nIssues  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2653&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/accepted-16px.png '') [0 Accepted issues](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2653&metric=new_accepted_issues&view=list)\n\nMeasures  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2653&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/no-data-16px.png '') No data about Coverage  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2653&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2653)\n\n"
    ],
    "commit_messages": [
      "update org.postgresql:postgresql 42.7.1 to 42.7.2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662342e8dde8ed798d2ed530",
    "number": 2650,
    "body": "Cache types to avoid expensive calculations in ConstructorInstanceFactory.\r\nFollowing up on suggestions from #2648.\r\n\r\nThe constructor lookup should be quick: `hashCode` is class name and `equals` compares parameters using object equality.",
    "head_branch": "cache_types",
    "is_a_fork": true,
    "comments": [
      "Looks good. Lmk when you move it from draft to ready. ",
      "Updated, lmk if it's good to go whenever you have a chance, thanks!",
      "This is a broader change than the scope that you're trying to accomplish here, but I think the performance would be even better if we construct and cache a `MethodHandle` that invokes the constructor or factory method.",
      "One last thought: it would be nice if we could see the improvement in a benchmark in `benchmarks/`. I think the improvement is clear enough from reading that this is not strictly required, but I think it's a good habit for us to get into to prove the benefit of such changes through repeatable benchmarks.",
      "Updated, will run the benchmarks on the commit before the record constructor workaround, before the this commit and then after this commit and post the results to the pr. Thanks for all the ideas!",
      "Just working through the ci failures, will update.",
      "Update: added a commit to cache the types and method handle in the instance factory.\r\nAlso found that the constructor benchmark was invoking a different benchmark, first commit. Should that be a separate small pr?\r\n\r\nI'm running the `benchmarks.jar` locally, taking a few hours but I will post the results when it's done:)",
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2650) **Quality Gate passed**  \nIssues  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [3 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2650&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/accepted-16px.png '') [0 Accepted issues](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2650&metric=new_accepted_issues&view=list)\n\nMeasures  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2650&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/no-data-16px.png '') No data about Coverage  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2650&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2650)\n\n",
      "Here are the benchmarks:\r\n\r\nBenchmark with the code in this pr:\r\n```\r\n# Run complete. Total time: 06:05:25\r\nBenchmark                                                              Mode  Cnt       Score      Error   Units\r\nBeanBindingBenchmark.batchJdbc                                        thrpt   20       7.111 ±    0.059   ops/s\r\nBeanBindingBenchmark.batchJdbiBean                                    thrpt   20       6.709 ±    0.082   ops/s\r\nBeanBindingBenchmark.batchJdbiMap                                     thrpt   20       5.218 ±    0.175   ops/s\r\nBeanBindingBenchmark.batchJdbiNamed                                   thrpt   20       5.427 ±    0.160   ops/s\r\nBeanBindingBenchmark.batchJdbiPositional                              thrpt   20       4.993 ±    0.057   ops/s\r\nBeanBindingBenchmark.oneJdbc                                          thrpt   20      20.670 ±    0.268   ops/s\r\nBeanBindingBenchmark.oneJdbi                                          thrpt   20      10.243 ±    0.180   ops/s\r\nQualifiersBenchmark.eq0To0                                            thrpt   20      13.877 ±    0.942  ops/us\r\nQualifiersBenchmark.eq1To1                                            thrpt   20      11.909 ±    0.849  ops/us\r\nQualifiersBenchmark.eq2To2                                            thrpt   20       9.382 ±    0.565  ops/us\r\nQualifiersBenchmark.eq3To3                                            thrpt   20       5.645 ±    0.156  ops/us\r\nQualifiersBenchmark.eq4To4                                            thrpt   20       2.845 ±    0.106  ops/us\r\nQualifiersBenchmark.mapQualifiedBean                                  thrpt   20       0.079 ±    0.001  ops/us\r\nQualifiersBenchmark.mapUnqualifiedBean                                thrpt   20       0.079 ±    0.001  ops/us\r\nQualifiersBenchmark.neq1To0                                           thrpt   20      13.196 ±    1.113  ops/us\r\nQualifiersBenchmark.neq1To1                                           thrpt   20      10.560 ±    1.215  ops/us\r\nQualifiersBenchmark.neq2To2                                           thrpt   20       9.995 ±    1.002  ops/us\r\nQualifiersBenchmark.neq3To3                                           thrpt   20       7.693 ±    1.142  ops/us\r\nQualifiersBenchmark.neq4To4                                           thrpt   20       4.058 ±    0.735  ops/us\r\nQualifiersBenchmark.qualifiedType0                                    thrpt   20      29.724 ±    0.196  ops/us\r\nQualifiersBenchmark.qualifiedType1                                    thrpt   20      29.700 ±    0.123  ops/us\r\nQualifiersBenchmark.qualifiedType2                                    thrpt   20      29.737 ±    0.040  ops/us\r\nQualifiersBenchmark.qualifiedType3                                    thrpt   20      29.560 ±    0.306  ops/us\r\nQualifiersBenchmark.qualifiedType4                                    thrpt   20      29.628 ±    0.179  ops/us\r\nsqlobject.H2SqlObjectV3Benchmark.attach                               thrpt   40      46.903 ±    0.236  ops/ms\r\nsqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean     thrpt   40     128.309 ±    1.116  ops/ms\r\nsqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyValues       thrpt   40     140.087 ±    0.577  ops/ms\r\nsqlobject.H2SqlObjectV3Benchmark.fluentSelectOne                      thrpt   40     172.081 ±    0.337  ops/ms\r\nsqlobject.H2SqlObjectV3Benchmark.sqlobjectInsertGeneratedKeyBindBean  thrpt   40     127.652 ±    0.507  ops/ms\r\nsqlobject.H2SqlObjectV3Benchmark.sqlobjectInsertGeneratedKeyValues    thrpt   40     129.491 ±    1.264  ops/ms\r\nsqlobject.H2SqlObjectV3Benchmark.sqlobjectInsertRowCountBindBean      thrpt   40     141.870 ±    1.145  ops/ms\r\nsqlobject.H2SqlObjectV3Benchmark.sqlobjectInsertRowCountValues        thrpt   40     146.427 ±    0.599  ops/ms\r\nsqlobject.H2SqlObjectV3Benchmark.sqlobjectSelectOne                   thrpt   40     151.959 ±    1.535  ops/ms\r\nsqlobject.PGSqlObjectV3Benchmark.attach                               thrpt   40      38.193 ±    0.195  ops/ms\r\nsqlobject.PGSqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean     thrpt   40      12.775 ±    0.133  ops/ms\r\nsqlobject.PGSqlObjectV3Benchmark.fluentInsertGeneratedKeyValues       thrpt   40      12.724 ±    0.235  ops/ms\r\nsqlobject.PGSqlObjectV3Benchmark.fluentSelectOne                      thrpt   40      19.649 ±    0.227  ops/ms\r\nsqlobject.PGSqlObjectV3Benchmark.sqlobjectInsertGeneratedKeyBindBean  thrpt   40      12.785 ±    0.324  ops/ms\r\nsqlobject.PGSqlObjectV3Benchmark.sqlobjectInsertGeneratedKeyValues    thrpt   40      12.879 ±    0.244  ops/ms\r\nsqlobject.PGSqlObjectV3Benchmark.sqlobjectInsertRowCountBindBean      thrpt   40      15.132 ±    0.283  ops/ms\r\nsqlobject.PGSqlObjectV3Benchmark.sqlobjectInsertRowCountValues        thrpt   40      15.145 ±    0.432  ops/ms\r\nsqlobject.PGSqlObjectV3Benchmark.sqlobjectSelectOne                   thrpt   40      18.895 ±    0.254  ops/ms\r\nsqlobject.SqlObjectOperationBenchmark.classRegistered                 thrpt   40       3.446 ±    0.026  ops/ms\r\nsqlobject.SqlObjectOperationBenchmark.jdbiRegistered                  thrpt   40       3.572 ±    0.022  ops/ms\r\nsqlobject.SqlObjectOperationBenchmark.methodRegistered                thrpt   40       3.475 ±    0.023  ops/ms\r\nCaseInsensitiveStringEqualsBenchmark.collatorEqualsCopy                avgt    5      19.548 ±    0.153   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.collatorEqualsOther               avgt    5     456.382 ±   31.551   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.collatorEqualsRandomCase          avgt    5    3229.864 ±   22.291   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.equalsIgnoreCaseCopy              avgt    5      10.959 ±    0.159   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.equalsIgnoreCaseOther             avgt    5       5.506 ±    0.133   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.equalsIgnoreCaseRandomCase        avgt    5      14.551 ±    0.132   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.stringEquals                      avgt    5       3.754 ±    0.036   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.stringNotEquals                   avgt    5       3.035 ±    0.073   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.toLowerCaseEqualsCopy             avgt    5      39.229 ±    0.104   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.toLowerCaseEqualsOther            avgt    5      32.375 ±    0.185   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.toLowerCaseEqualsRandomCase       avgt    5      41.720 ±    0.087   ns/op\r\nConstructorBenchmark.constructorMhInvoke                               avgt   20       7.037 ±    0.009   ns/op\r\nConstructorBenchmark.constructorMhInvokeArgs                           avgt   20     119.362 ±    1.702   ns/op\r\nConstructorBenchmark.constructorMhInvokeExact                          avgt   20       2.731 ±    0.010   ns/op\r\nConstructorBenchmark.constructorMhInvokeExactAsType                    avgt   20       2.736 ±    0.006   ns/op\r\nConstructorBenchmark.constructorNonfinalMhInvokeExact                  avgt   20       7.274 ±    0.024   ns/op\r\nConstructorBenchmark.jcuCheckedCreate                                  avgt   20    1199.505 ±   43.661   ns/op\r\nConstructorBenchmark.jcuFindInstantiate                                avgt   20      21.109 ±    0.065   ns/op\r\nEnumMapperBenchmark.mapByExactName                                     avgt    5  264623.009 ± 2022.845   ns/op\r\nEnumMapperBenchmark.mapByOrdinal                                       avgt    5  225109.150 ± 2120.965   ns/op\r\nEnumMapperBenchmark.mapByRandomCaseName                                avgt    5  283579.587 ± 2092.028   ns/op\r\n```\r\n\r\nBenchmark for the weak hashmap version of this pr:\r\n```\r\n# Run complete. Total time: 06:05:27\r\nBenchmark                                                              Mode  Cnt       Score      Error   Units\r\nBeanBindingBenchmark.batchJdbc                                        thrpt   20       7.148 ±    0.073   ops/s\r\nBeanBindingBenchmark.batchJdbiBean                                    thrpt   20       6.726 ±    0.109   ops/s\r\nBeanBindingBenchmark.batchJdbiMap                                     thrpt   20       5.319 ±    0.061   ops/s\r\nBeanBindingBenchmark.batchJdbiNamed                                   thrpt   20       5.197 ±    0.117   ops/s\r\nBeanBindingBenchmark.batchJdbiPositional                              thrpt   20       4.996 ±    0.056   ops/s\r\nBeanBindingBenchmark.oneJdbc                                          thrpt   20      20.750 ±    0.295   ops/s\r\nBeanBindingBenchmark.oneJdbi                                          thrpt   20      10.359 ±    0.117   ops/s\r\nQualifiersBenchmark.eq0To0                                            thrpt   20      12.563 ±    1.002  ops/us\r\nQualifiersBenchmark.eq1To1                                            thrpt   20      11.341 ±    0.786  ops/us\r\nQualifiersBenchmark.eq2To2                                            thrpt   20      10.160 ±    0.572  ops/us\r\nQualifiersBenchmark.eq3To3                                            thrpt   20       5.715 ±    0.158  ops/us\r\nQualifiersBenchmark.eq4To4                                            thrpt   20       2.942 ±    0.176  ops/us\r\nQualifiersBenchmark.mapQualifiedBean                                  thrpt   20       0.078 ±    0.001  ops/us\r\nQualifiersBenchmark.mapUnqualifiedBean                                thrpt   20       0.079 ±    0.001  ops/us\r\nQualifiersBenchmark.neq1To0                                           thrpt   20      14.417 ±    0.047  ops/us\r\nQualifiersBenchmark.neq1To1                                           thrpt   20       9.973 ±    0.066  ops/us\r\nQualifiersBenchmark.neq2To2                                           thrpt   20       9.574 ±    1.145  ops/us\r\nQualifiersBenchmark.neq3To3                                           thrpt   20       8.543 ±    0.731  ops/us\r\nQualifiersBenchmark.neq4To4                                           thrpt   20       3.619 ±    0.625  ops/us\r\nQualifiersBenchmark.qualifiedType0                                    thrpt   20      29.733 ±    0.058  ops/us\r\nQualifiersBenchmark.qualifiedType1                                    thrpt   20      29.752 ±    0.040  ops/us\r\nQualifiersBenchmark.qualifiedType2                                    thrpt   20      29.768 ±    0.033  ops/us\r\nQualifiersBenchmark.qualifiedType3                                    thrpt   20      29.729 ±    0.046  ops/us\r\nQualifiersBenchmark.qualifiedType4                                    thrpt   20      29.730 ±    0.050  ops/us\r\nsqlobject.H2SqlObjectV3Benchmark.attach                               thrpt   40      47.138 ±    0.033  ops/ms\r\nsqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean     thrpt   40     128.458 ±    0.826  ops/ms\r\nsqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyValues       thrpt   40     139.702 ±    0.393  ops/ms\r\nsqlobject.H2SqlObjectV3Benchmark.fluentSelectOne                      thrpt   40     172.776 ±    0.638  ops/ms\r\nsqlobject.H2SqlObjectV3Benchmark.sqlobjectInsertGeneratedKeyBindBean  thrpt   40     126.185 ±    0.873  ops/ms\r\nsqlobject.H2SqlObjectV3Benchmark.sqlobjectInsertGeneratedKeyValues    thrpt   40     128.793 ±    1.106  ops/ms\r\nsqlobject.H2SqlObjectV3Benchmark.sqlobjectInsertRowCountBindBean      thrpt   40     142.768 ±    0.851  ops/ms\r\nsqlobject.H2SqlObjectV3Benchmark.sqlobjectInsertRowCountValues        thrpt   40     145.498 ±    1.890  ops/ms\r\nsqlobject.H2SqlObjectV3Benchmark.sqlobjectSelectOne                   thrpt   40     149.694 ±    1.044  ops/ms\r\nsqlobject.PGSqlObjectV3Benchmark.attach                               thrpt   40      38.282 ±    0.193  ops/ms\r\nsqlobject.PGSqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean     thrpt   40      12.741 ±    0.311  ops/ms\r\nsqlobject.PGSqlObjectV3Benchmark.fluentInsertGeneratedKeyValues       thrpt   40      13.114 ±    0.252  ops/ms\r\nsqlobject.PGSqlObjectV3Benchmark.fluentSelectOne                      thrpt   40      19.229 ±    0.333  ops/ms\r\nsqlobject.PGSqlObjectV3Benchmark.sqlobjectInsertGeneratedKeyBindBean  thrpt   40      12.810 ±    0.235  ops/ms\r\nsqlobject.PGSqlObjectV3Benchmark.sqlobjectInsertGeneratedKeyValues    thrpt   40      12.664 ±    0.157  ops/ms\r\nsqlobject.PGSqlObjectV3Benchmark.sqlobjectInsertRowCountBindBean      thrpt   40      14.555 ±    0.473  ops/ms\r\nsqlobject.PGSqlObjectV3Benchmark.sqlobjectInsertRowCountValues        thrpt   40      14.677 ±    0.407  ops/ms\r\nsqlobject.PGSqlObjectV3Benchmark.sqlobjectSelectOne                   thrpt   40      18.681 ±    0.219  ops/ms\r\nsqlobject.SqlObjectOperationBenchmark.classRegistered                 thrpt   40       3.459 ±    0.023  ops/ms\r\nsqlobject.SqlObjectOperationBenchmark.jdbiRegistered                  thrpt   40       3.579 ±    0.026  ops/ms\r\nsqlobject.SqlObjectOperationBenchmark.methodRegistered                thrpt   40       3.461 ±    0.024  ops/ms\r\nCaseInsensitiveStringEqualsBenchmark.collatorEqualsCopy                avgt    5      19.627 ±    0.343   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.collatorEqualsOther               avgt    5     458.300 ±   29.416   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.collatorEqualsRandomCase          avgt    5    3201.441 ±   29.365   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.equalsIgnoreCaseCopy              avgt    5      10.964 ±    0.052   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.equalsIgnoreCaseOther             avgt    5       5.495 ±    0.177   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.equalsIgnoreCaseRandomCase        avgt    5      16.808 ±   12.281   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.stringEquals                      avgt    5       3.756 ±    0.021   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.stringNotEquals                   avgt    5       3.034 ±    0.050   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.toLowerCaseEqualsCopy             avgt    5      40.137 ±    0.067   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.toLowerCaseEqualsOther            avgt    5      24.571 ±    0.078   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.toLowerCaseEqualsRandomCase       avgt    5      36.714 ±    0.137   ns/op\r\nConstructorBenchmark.constructorMhInvoke                               avgt   20       7.164 ±    0.159   ns/op\r\nConstructorBenchmark.constructorMhInvokeArgs                           avgt   20     119.366 ±    1.628   ns/op\r\nConstructorBenchmark.constructorMhInvokeExact                          avgt   20       2.743 ±    0.016   ns/op\r\nConstructorBenchmark.constructorMhInvokeExactAsType                    avgt   20       2.740 ±    0.006   ns/op\r\nConstructorBenchmark.constructorNonfinalMhInvokeExact                  avgt   20       7.287 ±    0.043   ns/op\r\nConstructorBenchmark.jcuCheckedCreate                                  avgt   20    1141.730 ±    5.817   ns/op\r\nConstructorBenchmark.jcuFindInstantiate                                avgt   20      21.124 ±    0.068   ns/op\r\nEnumMapperBenchmark.mapByExactName                                     avgt    5  266533.012 ±  692.077   ns/op\r\nEnumMapperBenchmark.mapByOrdinal                                       avgt    5  224933.755 ± 2743.701   ns/op\r\nEnumMapperBenchmark.mapByRandomCaseName                                avgt    5  284308.595 ± 1817.295   ns/op\r\n```\r\n\r\nBenchmark before the record constructor pr:\r\n```\r\n# Run complete. Total time: 06:05:26\r\nBenchmark                                                              Mode  Cnt       Score      Error   Units\r\nBeanBindingBenchmark.batchJdbc                                        thrpt   20       7.115 ±    0.093   ops/s\r\nBeanBindingBenchmark.batchJdbiBean                                    thrpt   20       6.752 ±    0.110   ops/s\r\nBeanBindingBenchmark.batchJdbiMap                                     thrpt   20       5.105 ±    0.062   ops/s\r\nBeanBindingBenchmark.batchJdbiNamed                                   thrpt   20       5.322 ±    0.129   ops/s\r\nBeanBindingBenchmark.batchJdbiPositional                              thrpt   20       4.956 ±    0.040   ops/s\r\nBeanBindingBenchmark.oneJdbc                                          thrpt   20      20.865 ±    0.241   ops/s\r\nBeanBindingBenchmark.oneJdbi                                          thrpt   20      10.244 ±    0.065   ops/s\r\nQualifiersBenchmark.eq0To0                                            thrpt   20      13.850 ±    1.071  ops/us\r\nQualifiersBenchmark.eq1To1                                            thrpt   20      12.857 ±    0.072  ops/us\r\nQualifiersBenchmark.eq2To2                                            thrpt   20       9.787 ±    0.706  ops/us\r\nQualifiersBenchmark.eq3To3                                            thrpt   20       5.553 ±    0.173  ops/us\r\nQualifiersBenchmark.eq4To4                                            thrpt   20       2.728 ±    0.201  ops/us\r\nQualifiersBenchmark.mapQualifiedBean                                  thrpt   20       0.078 ±    0.001  ops/us\r\nQualifiersBenchmark.mapUnqualifiedBean                                thrpt   20       0.078 ±    0.001  ops/us\r\nQualifiersBenchmark.neq1To0                                           thrpt   20      13.143 ±    1.159  ops/us\r\nQualifiersBenchmark.neq1To1                                           thrpt   20       9.991 ±    0.023  ops/us\r\nQualifiersBenchmark.neq2To2                                           thrpt   20       9.816 ±    0.146  ops/us\r\nQualifiersBenchmark.neq3To3                                           thrpt   20       7.941 ±    1.334  ops/us\r\nQualifiersBenchmark.neq4To4                                           thrpt   20       3.931 ±    0.690  ops/us\r\nQualifiersBenchmark.qualifiedType0                                    thrpt   20      27.341 ±    3.671  ops/us\r\nQualifiersBenchmark.qualifiedType1                                    thrpt   20      29.658 ±    0.235  ops/us\r\nQualifiersBenchmark.qualifiedType2                                    thrpt   20      29.772 ±    0.203  ops/us\r\nQualifiersBenchmark.qualifiedType3                                    thrpt   20      29.748 ±    0.039  ops/us\r\nQualifiersBenchmark.qualifiedType4                                    thrpt   20      29.680 ±    0.085  ops/us\r\nsqlobject.H2SqlObjectV3Benchmark.attach                               thrpt   40      46.982 ±    0.158  ops/ms\r\nsqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean     thrpt   40     128.415 ±    1.119  ops/ms\r\nsqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyValues       thrpt   40     140.853 ±    0.581  ops/ms\r\nsqlobject.H2SqlObjectV3Benchmark.fluentSelectOne                      thrpt   40     171.517 ±    1.176  ops/ms\r\nsqlobject.H2SqlObjectV3Benchmark.sqlobjectInsertGeneratedKeyBindBean  thrpt   40     127.278 ±    0.513  ops/ms\r\nsqlobject.H2SqlObjectV3Benchmark.sqlobjectInsertGeneratedKeyValues    thrpt   40     128.034 ±    0.719  ops/ms\r\nsqlobject.H2SqlObjectV3Benchmark.sqlobjectInsertRowCountBindBean      thrpt   40     142.122 ±    1.059  ops/ms\r\nsqlobject.H2SqlObjectV3Benchmark.sqlobjectInsertRowCountValues        thrpt   40     146.135 ±    1.120  ops/ms\r\nsqlobject.H2SqlObjectV3Benchmark.sqlobjectSelectOne                   thrpt   40     152.841 ±    1.246  ops/ms\r\nsqlobject.PGSqlObjectV3Benchmark.attach                               thrpt   40      38.234 ±    0.101  ops/ms\r\nsqlobject.PGSqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean     thrpt   40      12.130 ±    0.121  ops/ms\r\nsqlobject.PGSqlObjectV3Benchmark.fluentInsertGeneratedKeyValues       thrpt   40      12.722 ±    0.094  ops/ms\r\nsqlobject.PGSqlObjectV3Benchmark.fluentSelectOne                      thrpt   40      19.680 ±    0.286  ops/ms\r\nsqlobject.PGSqlObjectV3Benchmark.sqlobjectInsertGeneratedKeyBindBean  thrpt   40      12.379 ±    0.234  ops/ms\r\nsqlobject.PGSqlObjectV3Benchmark.sqlobjectInsertGeneratedKeyValues    thrpt   40      13.135 ±    0.203  ops/ms\r\nsqlobject.PGSqlObjectV3Benchmark.sqlobjectInsertRowCountBindBean      thrpt   40      14.837 ±    0.251  ops/ms\r\nsqlobject.PGSqlObjectV3Benchmark.sqlobjectInsertRowCountValues        thrpt   40      14.841 ±    0.421  ops/ms\r\nsqlobject.PGSqlObjectV3Benchmark.sqlobjectSelectOne                   thrpt   40      18.915 ±    0.190  ops/ms\r\nsqlobject.SqlObjectOperationBenchmark.classRegistered                 thrpt   40       3.473 ±    0.023  ops/ms\r\nsqlobject.SqlObjectOperationBenchmark.jdbiRegistered                  thrpt   40       3.575 ±    0.025  ops/ms\r\nsqlobject.SqlObjectOperationBenchmark.methodRegistered                thrpt   40       3.456 ±    0.024  ops/ms\r\nCaseInsensitiveStringEqualsBenchmark.collatorEqualsCopy                avgt    5      19.665 ±    0.281   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.collatorEqualsOther               avgt    5     459.826 ±   37.153   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.collatorEqualsRandomCase          avgt    5    3218.389 ±   57.404   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.equalsIgnoreCaseCopy              avgt    5      10.963 ±    0.052   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.equalsIgnoreCaseOther             avgt    5       5.535 ±    0.067   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.equalsIgnoreCaseRandomCase        avgt    5      13.270 ±    0.098   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.stringEquals                      avgt    5       3.769 ±    0.050   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.stringNotEquals                   avgt    5       3.037 ±    0.058   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.toLowerCaseEqualsCopy             avgt    5      40.020 ±    0.414   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.toLowerCaseEqualsOther            avgt    5      25.335 ±    0.029   ns/op\r\nCaseInsensitiveStringEqualsBenchmark.toLowerCaseEqualsRandomCase       avgt    5      44.283 ±    0.130   ns/op\r\nConstructorBenchmark.constructorMhInvoke                               avgt   20       7.023 ±    0.015   ns/op\r\nConstructorBenchmark.constructorMhInvokeArgs                           avgt   20     119.567 ±    1.698   ns/op\r\nConstructorBenchmark.constructorMhInvokeExact                          avgt   20       2.750 ±    0.008   ns/op\r\nConstructorBenchmark.constructorMhInvokeExactAsType                    avgt   20       2.742 ±    0.006   ns/op\r\nConstructorBenchmark.constructorNonfinalMhInvokeExact                  avgt   20       7.305 ±    0.015   ns/op\r\nConstructorBenchmark.jcuCheckedCreate                                  avgt   20    1172.895 ±   22.343   ns/op\r\nConstructorBenchmark.jcuFindInstantiate                                avgt   20      21.321 ±    0.250   ns/op\r\nEnumMapperBenchmark.mapByExactName                                     avgt    5  262803.903 ± 1495.791   ns/op\r\nEnumMapperBenchmark.mapByOrdinal                                       avgt    5  224438.235 ±  585.365   ns/op\r\nEnumMapperBenchmark.mapByRandomCaseName                                avgt    5  313518.257 ± 2739.219   ns/op\r\n```\r\n",
      "lmk if you prefer this version or the weak hashmap version (static cache w synchronized weak hashmap). This version caches the method handle and types directly in the instance factory.",
      "Merging #2657 . Thanks!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662342e9dde8ed798d2ed531",
    "number": 2648,
    "body": "Get paramater types for records from RecordComponent. Record constructors lose generic type information. This is due to https://bugs.openjdk.org/browse/JDK-8320575.",
    "head_branch": "handle_record_constructors",
    "is_a_fork": true,
    "comments": [
      "Hi @elonazoulay! Thank you for submitting a PR for Jdbi! Please be aware that we still fully support JDK11, so any patch needs to compile and work with JDK11+. Afaik, the isRecord() method is JDK21+. ",
      "Context:\r\nConstructors for record classes lose generic type information due to the jdk 21 bug mentioned above. Instead, get the type information from the record component.\r\nThe jdbi target jdk was updated to 17 since `java.lang.Class.isRecord()` and `getRecordComponents()` were introduced in java 16.\r\n\r\nIf you would like to keep the target jdk at 11 this can still be done:\r\nCandidate for a record class is that all constructor and declared field parameters and `getType()` match.\r\nIf `parameter[i].getParametrizedType()` is an instance of `Class<?>` but `field[i].getGenericType()` is an instance of `ParametrizedType` then this implies the parameters types should be obtained via the fields.\r\n\r\nHappy to do either way, whatever works. Also I will add tests: locally I was using h2 database to test, will get more familiar with how tests are done (this is my first pr to jdbi).",
      "> Hi @elonazoulay! Thank you for submitting a PR for Jdbi! Please be aware that we still fully support JDK11, so any patch needs to compile and work with JDK11+. Afaik, the isRecord() method is JDK21+.\r\n\r\nHey @hgschmie! :) Sure, I can try the alternative approach above. Another idea: should I submit as a contrib RowMapperFactory that has `targetJdk` set to `21`?  If everything needs to support jdk11, I can go with the other idea, whatever works. Thanks!",
      "Updated - lmk if this approach is ok.",
      "Looks like Checkstyle is not happy:\r\n```\r\n[INFO] There are 4 errors reported by Checkstyle 10.12.7 with policy/checkstyle.xml ruleset.\r\nError:  src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorInstanceFactory.java:[41,5] (blocks) LeftCurly: '{' at column 5 should be on the previous line.\r\nError:  src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorInstanceFactory.java:[56,5] (blocks) LeftCurly: '{' at column 5 should be on the previous line.\r\nError:  src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorInstanceFactory.java:[72,68] (whitespace) OperatorWrap: '&&' should be on a new line.\r\nError:  src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorInstanceFactory.java:[81,5] (blocks) LeftCurly: '{' at column 5 should be on the previous line.\r\n```",
      "> Oh, and some tests would be nice.\r\n\r\nI was able to test locally using java21 and record classes (using the h2 jdbi extension). Should I create a separate module that uses targetjdk of 21 and put tests there? lmk, I can do that, or anything else you suggest.\r\n",
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2648) **Quality Gate passed**  \nIssues  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2648&resolved=false&inNewCodePeriod=true)\n\nMeasures  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2648&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/no-data-16px.png '') No data about Coverage  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2648&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2648)\n\n",
      "> Unfortunate that this is necessary. This can be backed out after the bug is fixed upstream, right? Maybe leave a comment to that effect?\r\n> \r\n> thank you for the contribution :)\r\n\r\nyep, I added a comment in the code to back out when the issue is resolved. Thanks for the review!",
      "For unit tests, is adding some general tests that run with the \"current\" jdk good enough, since we test with Java 21 in CI? Or do we need to set the target jdk explicitly to 21 to get this behavior?",
      "> For unit tests, is adding some general tests that run with the \"current\" jdk good enough, since we test with Java 21 in CI? Or do we need to set the target jdk explicitly to 21 to get this behavior?\r\n\r\nI was able to add tests to simulate the behavior: created a constructor with raw types. lmk if that works.",
      "Thanks for the review! This will allow us to get onto jdk21, really helpful. I'll keep an eye on the jdk issue and submit an anti-pr that will revert this one (except for the tests) :)",
      "@elonazoulay  thank you so much for the patch and tests! wohoo!\r\n\r\nWhat worries me a bit is that there are some assumptions that may or may not be true:\r\n\r\nThe \"isGenericInformationLost\" assumes that\r\n- c'tor parameters and field count are the same\r\n- parameter order and field order are the same\r\n- parameter name and field name are the same\r\n\r\nI guess that this matches the current implementation of records; is this set in stone (spec) somewhere or is that just heuristics.\r\n\r\nAssuming that this matches, computing this information is expensive and done every time a record is constructed. That may lead to surprising performance impacts. Would it be possible to cache this information? \r\n\r\nMinor nit: `Note: this can be removed...` - \"this\" is all the added code. I doubt we can ever remove it because there will always be people with older revisions of Java 21 that would see a regression if we remove that in a future version. Maybe move the static methods into a small, package private helper (e.g. Jdk8320575Helper) or so? \r\n\r\nGenerally speaking, I think that change is useful but it may have some unexpected impact on performance, especially when it is not actually needed (e.g. a record with no generic fields). Some benchmarking may be useful. This can most likely be alleviated with caching (which could even be just a static map, as the information will never change once computed.\r\n\r\nAnother approach, which would be fantastic (IMHO) would be to add a JDK 21 version of the ConstructorMapper in a multi-version jar. But I understand that we have not actually shipped a multi-version jar (yet), and PMD seems to be stalled in 7.0-rc4-hell, so we can not move source code compat to JDK 21 for some modules (because PMD 6 chokes on Java 21 classes). \r\n\r\nanyway, ship it. Until we release the next versions, we can always benchmark it and figure out the impact.\r\n\r\n\r\n\r\n\r\n\r\n",
      "I do think once the JDK is fixed, we can revert this. If users choose to not upgrade the JDK and suffer bugs at that point, that is their choice.",
      "I will try the caching approach and see if I can put some benchmarks up as well. The fix is supposed to be backported to jdk21, I can try to special case it to the broken versions (including jdk22 - fix is targeted for jdk23) and then move it to the multi version jar. I will confirm about the constraints for record classes as well, will be interesting to find all this out. Thanks!",
      "@stevenschlansker:\r\n~Oracle released build  21.0.6-oracle resolving the root cause https://bugs.openjdk.org/browse/JDK-8334608.  New PR  with reversal could be tested.~   **Not released until Jan 2025 my bad**\r\nOpen source builds of v21 are yet to backport see https://github.com/openjdk/jdk21u-dev/pull/1026"
    ],
    "commit_messages": [
      "Handle constructing record classes\n\nGet paramater types for records from declared fields.\nRecord constructors lose generic type information.\nThis is due to https://bugs.openjdk.org/browse/JDK-8320575."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662342eadde8ed798d2ed532",
    "number": 2644,
    "body": null,
    "head_branch": "no-japicmp-on-verify",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2644) **Quality Gate passed**  \nIssues  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2644&resolved=false&inNewCodePeriod=true)\n\nMeasures  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2644&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/no-data-16px.png '') No data about Coverage  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/no-data-16px.png '') No data about Duplication  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2644)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2644 from hgschmie/no-japicmp-on-verify\n\nskip japicmp when checking reproducible build"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662342ebdde8ed798d2ed533",
    "number": 2643,
    "body": "Otherwise, the \"require java 21\" is not actually enforced when building\nthe release.\n",
    "head_branch": "enforce-java21",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2643) **Quality Gate passed**  \nIssues  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2643&resolved=false&inNewCodePeriod=true)\n\nMeasures  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2643&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/no-data-16px.png '') No data about Coverage  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2643&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2643)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2643 from hgschmie/enforce-java21\n\nEnsure that release build runs the enforcer"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662342ecdde8ed798d2ed534",
    "number": 2642,
    "body": "Otherwise they are not signed by the gpg plugin for a release and\nthe release fails.\n",
    "head_branch": "sbom-in-package",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2642) **Quality Gate passed**  \nIssues  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2642&resolved=false&inNewCodePeriod=true)\n\nMeasures  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2642&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/no-data-16px.png '') No data about Coverage  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2642&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2642)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2642 from hgschmie/sbom-in-package\n\ncreate sbom files in package phase"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662342eddde8ed798d2ed535",
    "number": 2639,
    "body": null,
    "head_branch": "makefile-typo",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2639) **Quality Gate passed**  \nIssues  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2639&resolved=false&inNewCodePeriod=true)\n\nMeasures  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2639&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/no-data-16px.png '') No data about Coverage  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2639&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2639)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2639 from hgschmie/makefile-typo\n\nmakefile typo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662342eedde8ed798d2ed536",
    "number": 2638,
    "body": null,
    "head_branch": "disable-db2-on-non-x86",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2638) **Quality Gate passed**  \nIssues  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2638&resolved=false&inNewCodePeriod=true)\n\nMeasures  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2638&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/no-data-16px.png '') No data about Coverage  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2638&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2638)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2638 from hgschmie/disable-db2-on-non-x86\n\ndisable DB2 on non-x86"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662342efdde8ed798d2ed537",
    "number": 2637,
    "body": "- bring freemarker docs to the level of string template docs\n- clarify annotations for both string template and freemarker\n- add more tests (same tests as for string template)\n",
    "head_branch": "investigate-2605",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2637) **Quality Gate passed**  \nIssues  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2637&resolved=false&inNewCodePeriod=true)\n\nMeasures  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2637&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/no-data-16px.png '') No data about Coverage  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2637&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2637)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2637 from hgschmie/investigate-2605\n\nUpdate freemarker and string template docs"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662342f0dde8ed798d2ed538",
    "number": 2636,
    "body": "Addresses the questions in #2623 with sample code.\n",
    "head_branch": "investigate-2623",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2636) **Quality Gate passed**  \nIssues  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2636&resolved=false&inNewCodePeriod=true)\n\nMeasures  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2636&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/no-data-16px.png '') No data about Coverage  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2636&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2636)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2636 from hgschmie/investigate-2623\n\nSample code for Multimap and generics"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662342f1dde8ed798d2ed539",
    "number": 2635,
    "body": "@jpallas pointed out in #2633 that our documentation about nesting\ncallbacks with managed handles is incomplete and confusing.\n\nAdd a chapter about nested callback, call out the limitations, add\nreferences to the managed handle and managed transaction chapters.\n",
    "head_branch": "issue-2633-doc-update",
    "is_a_fork": true,
    "comments": [
      "@jpallas LMK if this the level of documentation that works for you. I still would be interested in possible lockup / error scenarios.",
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2635) **Quality Gate passed**  \nIssues  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2635&resolved=false&inNewCodePeriod=true)\n\nMeasures  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2635&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/no-data-16px.png '') No data about Coverage  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/no-data-16px.png '') No data about Duplication  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2635)\n\n",
      "This is a really helpful improvement.  Thank you!  The only suggestion I have is to make some mention of handle reuse in the Javadoc for these methods.  IDEs will display Javadoc but don't know about the external documentation."
    ],
    "commit_messages": [
      "Merge pull request #2635 from hgschmie/issue-2633-doc-update\n\nAdd additional documentation for nested callbacks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662342f2dde8ed798d2ed53a",
    "number": 2634,
    "body": "Allow setting the timeout for shutting down the JdbiTestContainersExtension. This addresses the\nissue that the database may shut down before init scripts are completely executed which results\nin spurious error messages.\n\nAddresses #2629\n",
    "head_branch": "issue-2629",
    "is_a_fork": true,
    "comments": [
      "@stoyants This is an alternative change to #2632. I am reluctant to call it a fix because there is nothing broken, just some spurious messages. Calling\r\n\r\n```java\r\n@RegisterExtension\r\n    JdbiExtension extension = JdbiTestcontainersExtension.instance(...)\r\n        .setShutdownWaitTimeInSeconds(0);\r\n```\r\n\r\nhas the same effect as the proposed change that adds the mutex.\r\n\r\nPlease let me know if that works for you. However, the messages from the connection pool where it complains that a connection \"is broken\" because either the server shut down or the client was interrupted will not change, as those are thrown from within the pool code.\r\n\r\n",
      "@hgschmie Thanks for spending time on this issue.\r\nPity, I can't find such method \"setShutdownWaitTimeInSeconds(int)\" neither in JdbiExtension, nor in OracleContainer.\r\nBut I did some tests and they show that in fact container is fine, I can establish a new connection to the Oracle even after test are over and the exceptions get thrown.\r\n\r\nI also did some tests on the same computer, but under \"vanilla\" Linux - exception was thrown only once in 50 runs.\r\n\r\nI'm still \"hunting\" it. For the moment  my theory is that \"executor.shutdownNow();\"  causes \"java.io.InterruptedIOException: Socket read interrupted\"\r\n\r\nLook, the problem does not deserve so much of your time. I can take back the Pull Request (close it) if you prefer.\r\nBut please don't close the issue, I will work on it. If I find anything new or have some new idea, will share it here.\r\n\r\nBest regards, Stoyan",
      "Well, yes, the `setShutdownWaitTimeInSeconds` is what we will have, once that PR goes in. :-) \r\n\r\nIf you want to try it out, do a `gh pr checkout 2634` in the project, then build the tree.",
      "> Please let me know if that works for you. However, the messages from the connection pool where it complains that a connection \"is broken\" because either the server shut down or the client was interrupted will not change, as those are thrown from within the pool code.\r\n\r\nI want to push back against this being seen as not-a-bug. The code should correctly tear down its resources, which includes making sure that the connection pool is terminated before the database is shut down. Unless I'm mistaken, this used to work very reliably before we introduced all the extension and testcontainers abstractions, so it would be nice to at least maintain \"no spurious errors\" as a goal.\r\n\r\nI will try to review this later today.",
      "> > Please let me know if that works for you. However, the messages from the connection pool where it complains that a connection \"is broken\" because either the server shut down or the client was interrupted will not change, as those are thrown from within the pool code.\r\n> \r\n> I want to push back against this being seen as not-a-bug. The code should correctly tear down its resources, which includes making sure that the connection pool is terminated before the database is shut down. Unless I'm mistaken, this used to work very reliably before we introduced all the extension and testcontainers abstractions, so it would be nice to at least maintain \"no spurious errors\" as a goal.\r\n> \r\n\r\nUnderstandably. However, the testcontainer code has always worked that way. \r\n\r\nWhen we shut down the testcontainer extension and terminate the TestcontainersDatabaseInformationSupplier, we do two things:\r\n- we set the \"closed\" bit so the database supplier thread will exit the next time it goes through its loop\r\n- we call \"executor.shutDownNow()\" which interrupts all threads, especially the database supplier thread.\r\n\r\nThen the code will wait for the countdown latch being counted down which is the thread signalling that it exited.\r\n\r\nNow one of two things happens:\r\n\r\n*Either*\r\n\r\nThe interrupt makes it all the way through, e.g. to a client that is sitting in an I/O wait because it waits for a response from the database. In that case, e.g. oracle throws a `java.io.InterruptedIOException: Socket read interrupted` which results in a `java.sql.SQLRecoverableException: ORA-18730: Interrupted IO error.: Socket read interrupted`. That would not be a problem, except that the connection pool that we use will catch this exception in its proxy statement code and loudly complain about it:\r\n\r\n```\r\n[database-schema-creator] WARN com.zaxxer.hikari.pool.ProxyConnection - jdbi-template-pool (*.*) - Connection oracle.jdbc.driver.T4CConnection@4886b6bd marked as broken because of SQLSTATE(08006), ErrorCode(18730)\r\njava.sql.SQLRecoverableException: ORA-18730: Interrupted IO error.: Socket read interrupted\r\n```\r\n\r\nThe annoying part is that the pool catches the exception, logs the stack trace on WARN level and then rethrows it. So even if we expect and suppress logging on our side, the connection pool will still log it - https://github.com/brettwooldridge/HikariCP/issues/2172\r\n\r\n*OR* \r\n\r\nthe client keeps waiting (the interrupt gets lost or something) so at some point, the wait for the countdown latch times out, there is a \r\n\r\n```\r\n[WARN} Could not shut down database creation thread within 10 seconds\r\n```\r\n\r\nlog message and then the main thread continues on to the testcontainer extension, shuts that down at which point the client will lose connection to the server and probably log another error.\r\n\r\n----\r\n\r\nIf you are willing to take some performance penalty for the sake of 'this needs to not log a spurious \"we are shutting down, please ignore\" exception' (this is *NOT* a bug. There is no error condition or anything. This is a distributed system shutting down forcefully (which is what the `executor.shutDownNow()` is). There is *NOTHING WRONG* or any test failure or anything).\r\n\r\nThe database creator thread will sit in I/O in various situations:\r\n- when executing a database command to the server\r\n- when trying to put the next database information object into the synchronous queue\r\n\r\nThe first situation is fine, those commands will finish at some point and the thread will leave IOWait. So the shutdown/await combo work (there needs to be a `if (closed.get()) break;` between the `executeStatements(...)` and the `nextSchema.put(...)` but that is simple.\r\n\r\nHowever, if the thread sits in the `nextSchema.put(...)`, it will wait forever until another test takes the database info object from the queue. And there are no more tests because we are shutting down. So the thread needs to be interrupted. We could retain the `Future<?>` returned from the `submit` to the pool and then cancel the future, but that has the same effect as the `shutDownNow()` - it interrupts the thread and everything described above will happen the same way. \r\n\r\n\r\nUsing the mutex makes no difference. In fact, what would happen is that the database creator thread would take the mutex, then execute its database creation commands (which may run a long time) and *refuse* (because it blocks the thread that is trying to shut down the database creator thread on the mutex) to exit earlier, again leading to long, uncontrollable hangs. And interrupting it, will cause the same warn messages to crop up.\r\n\r\nThis code has been used forever (its lineage goes back to the otj-pg code through the embedded pg code, see https://github.com/hgschmie/pg-embedded/blob/master/src/main/java/de/softwareforge/testing/postgres/embedded/DatabaseManager.java#L214-L218). The reason why this is not visible here is because the connection pool (or lack thereof) does not log the interrupted exceptions. HikariCP is trying to be helpful here by logging a condition as \"WARN\" that is expected. If I could suppress it, I would simply add code to make it invisible. But https://github.com/brettwooldridge/HikariCP/issues/2171 is blocking this. \r\n\r\nSo this boils down to: We could change the code to look like this:\r\n\r\n```java\r\nprivate volatile Future<?> threadFuture = null;\r\n\r\nvoid start(DataSource dataSource) {\r\n        this.dataSource = dataSource;\r\n        this.threadFuture = this.executor.submit(this);\r\n    }\r\n\r\n    @Override\r\n    public void close() {\r\n        LOG.info(\"Shutdown initiated...\");\r\n        if (!this.closed.getAndSet(true)) {\r\n            executor.shutdown();\r\n            if (threadFuture != null) {\r\n                threadFuture.cancel(true);\r\n            }\r\n            try {\r\n                if (!(executor.awaitTermination(... ) && stopped.await(...))) {\r\n                    LOG.warn(\"Could not shut down database creation thread\");\r\n                }\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n            LOG.info(\"Shutdown completed.\");\r\n        }\r\n    }\r\n```\r\n\r\nThis works, but I can still trivially get this (from mysql):\r\n\r\n```\r\n[database-schema-creator] WARN com.zaxxer.hikari.pool.ProxyConnection - jdbi-template-pool (*.*) - Connection com.mysql.cj.jdbc.ConnectionImpl@54067fdc marked as broken because of SQLSTATE(08S01), ErrorCode(0)\r\ncom.mysql.cj.jdbc.exceptions.CommunicationsException: Communications link failure\r\n\r\nThe last packet successfully received from the server was 149 milliseconds ago. The last packet sent successfully to the server was 156 milliseconds ago.\r\n```\r\n\r\nby exceeding the deadline in the \"awaitTermination\" and \"await\". `DO SLEEP(...)` in MySQL helps me debugging this. :-)  \r\n\r\n\r\nI am not sure, what you would do. I am open to any suggestions, but as this is not even a problem (it is just a spurious log line), I feel the easiest is to change our slf4j logging setup to suppress the `com.zaxxer.hikari.pool.ProxyConnection` warn messages...\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "@hgschmie \r\n\r\nFirst, please forget what I said some time ago, that exceptions pop-up, because the database container is shutdown. It is shutdown, but later and it is fine. Container side is not involved at all here. It is only the client (JDBI code + Hikari CP + Oracle JDBC). With a small effort I can make the exceptions pop-up in the middle of the tests, just repeat the fast test, which also shows, that we have to exclude the \"container is shutdown too early\" hypothesis.\r\n\r\nSecond, a general observation - because of the infinite loop in run() method of \"database-schema-creator\" when \"close()\" is invoked it will find the thread wither waiting on \"nextSchema.put(..)\" or in \"executeStatements(...)\". The former happen \"nearly always\"  and is well handled, but later happen also, like in my case, it is not handled and some JDBC drivers don't accept it very well.\r\n\r\n> - we set the \"closed\" bit so the database supplier thread will exit the next time it goes through its loop\r\n> - we call \"executor.shutDownNow()\" which interrupts all threads, especially the database supplier thread.\r\n\r\nYes, this is exactly what happen. But it is a little bit like a policeman waiting just behind the speed limit sign to issue you a ticket. I mean, we say \"you are requested to stop\" and then immediately initiate the shutdown process, not giving any chance to the thread, creating the next schema to finish grecefully.\r\n\r\nThe problem is that Oracle JDBC is very \"sensitive\" to interruptions. They (literally) have a code like:\r\n```java\r\n... if (Thread.interrupted()) {\r\n\tthrow new InterruptedIOException(\"Socket read interrupted\");\r\n}\r\n```\r\nAnd seems that \"shutdownNow()\" is doing exactly this - it sends interrupt to the Thread.\r\n\r\nThen Oracle JDBC catch, log and re-throw - no way to stop them.\r\nThe same happen in HikariCP - catch, log and re-throw - no way to stop them. (I saw the request to HikariCP)\r\nWe can catch and supress the Exception, but it will hide only 1 of 3 logs.\r\n\r\nOne thing we all agree is to have \"if (closed.get()) break;\" in \"executeStatements(...)\"\r\nBut we have to avoid calling \"shutdownNow()\" while in \"stmt.executeUpdate(statement)\"\r\n\r\nI see at least 2 options:\r\n1. just give some time to the \"database-schema-creator\" thread to notice close request:\r\n```java\r\n        if (!this.closed.getAndSet(true)) {\r\n            try {TimeUnit.SECONDS.sleep(1);} catch (InterruptedException e) {Thread.currentThread().interrupt();}\r\n            executor.shutdownNow();\r\n```\r\nThe problem here is that it has to wait, even when not necessary. And it never knows is the wait long enough.\r\n\r\n2. use the mutex, but with timeout (tryLock instead of lock) - if it can wait 10 seconds after shutdownNow(), it should be fine to wait 1 second before it - usualy the second is not used, few milliseconds are enough, but to be on the safe side.\r\n```java\r\n    public void close() {\r\n        LOG.info(\"Shutdown initiated...\");\r\n        if (!this.closed.getAndSet(true)) {\r\n            try {\r\n                if (!mutex.tryLock(1, TimeUnit.SECONDS)) {\r\n                    LOG.warn(\"Could not stop database creation statements within 1 second\");\r\n                }\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n            executor.shutdownNow();\r\n            try {\r\n                if (!stopped.await(10, TimeUnit.SECONDS)) {\r\n                    LOG.warn(\"Could not shut down database creation thread within 10 seconds\");\r\n                }\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n            LOG.info(\"Shutdown completed.\");\r\n        }\r\n    }\r\n```\r\nFunny enough, processing the Exception (logging) can take much longer (up to a second) then waiting for the statement to finish gracefully (less than 200 milliseconds).\r\n\r\nI have updated the PR with the above version.\r\n\r\nI tried to keep the change small, maybe what @hgschmie is suggesting will also work, but it seems a bigger change, with more unknown parameters.\r\n",
      "@hgschmie and @stevenschlansker \r\nI think this issue (#2634) and (#2632) are not related at all. The name of the issue, which I open #2632 is wrong and misleading - it should be \"Prevent 'database-schema-creator'  to be shutdown while schema creation statements are still executed\"\r\nShould I change the name?\r\n\r\nAnd also, just to confirm, that I've tested with \".setShutdownWaitTimeInSeconds(0)\", but it is not solving the problem (as the problem is not there)\r\n\r\nBest Regards, Stoyan",
      "> @hgschmie\r\n> \r\n> First, please forget what I said some time ago, that exceptions pop-up, because the database container is shutdown. It is shutdown, but later and it is fine. Container side is not involved at all here. It is only the client (JDBI code + Hikari CP + Oracle JDBC). With a small effort I can make the exceptions pop-up in the middle of the tests, just repeat the fast test, which also shows, that we have to exclude the \"container is shutdown too early\" hypothesis.\r\n\r\nCorrect. As I wrote above, it is one of two conditions:\r\n\r\n- interrupting the client while it sits in I/O Wait through the `excecutor.shutDownNow()` or `Future.cancel()`\r\n- timing out on the countdown latch await, thus logging a warning and shutting down the test container extension\r\n\r\nThe first one is much more common and most likely what you observe.\r\n\r\n\r\n> Second, a general observation - because of the infinite loop in run() method of \"database-schema-creator\" when \"close()\" is invoked it will find the thread wither waiting on \"nextSchema.put(..)\" or in \"executeStatements(...)\". The former happen \"nearly always\" and is well handled, but later happen also, like in my case, it is not handled and some JDBC drivers don't accept it very well.\r\n\r\nAnd that is where we disagree. All JDBC drivers handle it well (they receive an interrupt, they cease to do I/O wait and unblock the thread (by throwing an interrupted exception or some other exception). *That is the correct behavior to an exceptional event*. What is not handled well is the drivers (and the connection pool for that matter) spout all sorts of nonsense into the log files. This is the job of the caller who receives the exception, not the code that throws it.\r\n\r\nThis is part of where Java gets its bad rep. \"Overreporting\" standard operating conditions. There is this assumption that 'every exception is bad and signals an error'. Nothing could be further from the truth. Most code bases throw exceptions all the time. They get caught, handled, life goes on. In this case, both the driver and the connection pool feel the need to log a perfectly normal condition when shutting down infrastructure. Sucks IMHO but no reason to worry about it or go to great length \"to avoid it\".\r\n\r\nInterrupting another thread is a normal operation in concurrent code. I don't understand why there would be a need to build these machinery which (best case scenario) does not change anything or (worst case scenario) leads to very long all the way to infinite hangs.\r\n\r\nCan you explain more why you feel so strongly about this? Is there some driving need or is that just the urge of \"my log files should never contain any exception under any circumstance\"?\r\n\r\n> Yes, this is exactly what happen. But it is a little bit like a policeman waiting just behind the speed limit sign to issue you a ticket. I mean, we say \"you are requested to stop\" and then immediately initiate the shutdown process, not giving any chance to the thread, creating the next schema to finish grecefully.\r\n\r\nThere is no need for graceful shutdown. If crashing the server would be faster, we should crash it. This is all about performance for unit tests. We don't preserve state, nuking and paving over is a fine strategy here.\r\n\r\n> The problem is that Oracle JDBC is very \"sensitive\" to interruptions. They (literally) have a code like:\r\n> \r\n> ```java\r\n> ... if (Thread.interrupted()) {\r\n> \tthrow new InterruptedIOException(\"Socket read interrupted\");\r\n> }\r\n> ```\r\n\r\nIt is not a problem. That is what I am trying to explain. What the driver does *is the right thing to do*. Logging that exception on the way to the caller who will catch it and deal with which creates unnecessary noise is the problem.\r\n\r\n\r\n> And seems that \"shutdownNow()\" is doing exactly this - it sends interrupt to the Thread.\r\n\r\nYes. It is *literally* its job. see https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/concurrent/ExecutorService.html#shutdownNow()\r\n\r\n> Then Oracle JDBC catch, log and re-throw - no way to stop them. The same happen in HikariCP - catch, log and re-throw - no way to stop them. (I saw the request to HikariCP) We can catch and supress the Exception, but it will hide only 1 of 3 logs.\r\n\r\nSo why bother? \r\n\r\n> \r\n> One thing we all agree is to have \"if (closed.get()) break;\" in \"executeStatements(...)\" But we have to avoid calling \"shutdownNow()\" while in \"stmt.executeUpdate(statement)\"\r\n\r\nWhy do you say \"we have to\" ? \r\n\r\n> \r\n> I see at least 2 options:\r\n> \r\n> 1. just give some time to the \"database-schema-creator\" thread to notice close request:\r\n> \r\n> ```java\r\n>         if (!this.closed.getAndSet(true)) {\r\n>             try {TimeUnit.SECONDS.sleep(1);} catch (InterruptedException e) {Thread.currentThread().interrupt();}\r\n>             executor.shutdownNow();\r\n\r\nAdding arbitrary sleeps never solves anything. If you sleep one second, something that takes two seconds will cause a problem. So you sleep two seconds, now something that takes three seconds is the problem. And so on. That is what the synchronization primitives are for. That the driver (and the pool) chose to log a normal condition is unfortunate but I still see no reason to make any code changes.\r\n\r\n> 2. use the mutex, but with timeout (tryLock instead of lock) - if it can wait 10 seconds after shutdownNow(), it should be fine to wait 1 second before it - usualy the second is not used, few milliseconds are enough, but to be on the safe side.\r\n\r\nSo we introduce another synchronization mechanism on top of the two we already have (the countdown latch and Thread.interrupt())? \r\n\r\nI am at my end here. Unless there is a compelling reason beyond \"any exception is bad and needs to be avoided\", I see no reason to change code that works fine. I will work with the Hikari folks to be able to get rid of the exception logging in the pool code and for the driver, my recommendation is to tune the log level here (the oracle driver actually has quite a bit of infrastructure to tune the logging in specific situations). \r\n\r\n",
      "I reworked the code a bit and I think this is a workable solution:\r\n\r\n- set the closed flag\r\n- initiate excutor shutdown\r\n- see if there is a database pending (so the creator thread sits in the put operation)\r\n- if no, wait for the latch to count down. If the creation operation ends within the allotted timeout (or unlimited if it was set to zero), fine. The thread has finished, all good.\r\n\r\n- otherwise, do shutDownNow. The thread would be either sitting in the put or has already exited (because the close flag was set), wait again (this time logging a possible warning)\r\n\r\n\r\nI think that is the best best that I can come up with. This should allow of a configurable time to finish possible database creation scripts without interrupting but also allows fast shutdown for databases that don't need it. \r\n\r\nNote, that the *only* way to avoid exceptions is to do \r\n```java\r\nJdbiExtension extension = JdbiTestcontainersExtension.setShutdownWaitTimeInSeconds(0)\r\n    .instance(getDbContainer())\r\n    ...\r\n```\r\n(setting the shutdown time to \"infinite\") Otherwise, there are always scenarios where the shutting down the threadpool will interrupt the creator thread. But this can also cause infinite hangs in unit tests, something that we *will* avoid by default. If a caller chooses to do so, they do at their own risk. \r\n\r\n",
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2634) **Quality Gate passed**  \nIssues  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed.svg '') [0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2634&resolved=false&inNewCodePeriod=true)\n\nMeasures  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed.svg '') [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2634&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/no-data.svg '') No data about Coverage  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed.svg '') [0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2634&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2634)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2634 from hgschmie/issue-2629\n\nMake jdbi testcontainers shutdown configurable"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662342f3dde8ed798d2ed53b",
    "number": 2632,
    "body": null,
    "head_branch": "issue/2629",
    "is_a_fork": true,
    "comments": [
      "@hgschmie \r\nI created a simple test, which shows how OJDBC reacts on thread interruption: https://github.com/stoyants/ojdbc-test\r\nIt is only 2 files, pom.xml and one test class, and uses testcontainers + ojdbc, but no HikariCP or JDBI.\r\nUpon execution test will generate nearly the same log as I got before in jdbi3-oracle12.\r\n\r\nBest Regards, Stoyan",
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2632) **Quality Gate passed**  \nIssues  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2632&resolved=false&inNewCodePeriod=true)\n\nMeasures  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2632&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/no-data-16px.png '') No data about Coverage  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2632&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2632)\n\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662342f4dde8ed798d2ed53c",
    "number": 2631,
    "body": "There is actually no need to run that plugin on every build.\n",
    "head_branch": "sbom-on-release-only",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2631) **Quality Gate passed**  \nIssues  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2631&resolved=false&inNewCodePeriod=true)\n\nMeasures  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2631&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/no-data-16px.png '') No data about Coverage  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2631&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2631)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2631 from hgschmie/sbom-on-release-only\n\nOnly create SBOM files for releases"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662342f5dde8ed798d2ed53d",
    "number": 2630,
    "body": "- Update to BasePOM 59\r\n- bump inline plugin to 1.4.0\r\n- add necessary properties to support reproducible builds\r\n",
    "head_branch": "test-reproducible",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2630) **Quality Gate passed**  \nIssues  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2630&resolved=false&inNewCodePeriod=true)\n\nMeasures  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2630&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/no-data-16px.png '') No data about Coverage  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2630&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2630)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2630 from hgschmie/test-reproducible\n\nBasePOM update + reproducible build"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662342f6dde8ed798d2ed53e",
    "number": 2628,
    "body": null,
    "head_branch": "definition-super-types",
    "is_a_fork": false,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2628) **Quality Gate passed**  \nIssues  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2628&resolved=false&inNewCodePeriod=true)\n\nMeasures  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2628&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/no-data-16px.png '') No data about Coverage  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2628&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2628)\n\n"
    ],
    "commit_messages": [
      "New `@Definition` feature also supports definitions from supertypes"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662342f7dde8ed798d2ed53f",
    "number": 2627,
    "body": "Start shipping SBOM files for Jdbi, using the https://cyclonedx.org/\nspecification.\n\nThis makes us a better citizen for various security related tools.\n\nResolves #2588\n",
    "head_branch": "cyclonedx-sbom",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2627) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2627&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2627&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2627&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2627)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2627 from hgschmie/cyclonedx-sbom\n\nCreate CycloneDX SBOM files"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662342f8dde8ed798d2ed540",
    "number": 2626,
    "body": "Clarify how to write custom testcontainer database support.\n\nCloses #2573\n",
    "head_branch": "testcontainer-docs",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2626) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2626&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2626&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2626&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2626)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2626 from hgschmie/testcontainer-docs\n\nUpdate testcontainer docs"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662342f9dde8ed798d2ed541",
    "number": 2625,
    "body": "DB2 Testcontainer setup.\r\nA test fetching blob as \"byte[]\" added.",
    "head_branch": "testcontainers-db2",
    "is_a_fork": true,
    "comments": [
      "@stevenschlansker Sorry, missed this one with the license. Now is fixed.",
      "```\r\n Caused by: java.lang.IllegalStateException: Failed to verify that image 'icr.io/db2_community/db2:11.5.9.0' is a compatible substitute for 'ibmcom/db2'. This generally means that you are trying to use an image that Testcontainers has not been designed to use. If this is deliberate, and if you are confident that the image is compatible, you should declare compatibility in code using the `asCompatibleSubstituteFor` method. For example:\r\n   DockerImageName myImage = DockerImageName.parse(\"icr.io/db2_community/db2:11.5.9.0\").asCompatibleSubstituteFor(\"ibmcom/db2\");\r\nand then use `myImage` instead.\r\n\tat org.testcontainers.utility.DockerImageName.assertCompatibleWith(DockerImageName.java:279)\r\n\tat org.testcontainers.containers.Db2Container.<init>(Db2Container.java:45)\r\n\tat org.jdbi.v3.testing.junit5.tc.DB2JdbiTestContainersExtensionTest.<clinit>(DB2JdbiTestContainersExtensionTest.java:32)\r\n\t... 17 more\r\n```\r\n\r\nHm.",
      "@stevenschlansker \r\nIndeed, \"Hm\" :( \r\nNever seen this before, while testing localy.\r\nI will have a look tomorrow.\r\nSorry for this, everything was realy running slow, but smoothly, on my machine.",
      "Thanks, there is no hurry! Maybe @hgschmie  has seen this sort of thing before, I have never developed with Testcontainers myself.",
      "@stevenschlansker \r\nI just double checked, it runs without any problems in my environment. (WSL Ubuntu under Windows 10 on Intel CPU)\r\n[This log](https://github.com/jdbi/jdbi/actions/runs/7796040931/job/21259986944?pr=2625#step:5:3551) also shows successful execution of the tests.\r\nI'm happy to add suggested `.asCompatibleSubstituteFor(\"ibmcom/db2\")`, but am also sceptical that it will solve the problem you got.\r\nCan you give me some hint about the environment where do you get this exception? (OS, CPU, Docker)\r\nI was suspecting that it might be Mac-related and I have to add `@EnabledOnOs(architectures = {\"x86_64\"})`, but IBM claims in this document [Installing the Db2 Community Edition Docker image on macOS systems](https://www.ibm.com/docs/en/db2/11.5?topic=system-macos) that their Comunity Edition is available for MacOS as well.\r\nAlso, \"testcontaners\" support both docker repos:\r\n![image](https://github.com/jdbi/jdbi/assets/17534482/2f9d26c9-40c1-4817-99e1-a1936caa520b)\r\n\r\n\r\n ",
      "@stevenschlansker \r\nI just noticed something else, in your stacktrace \"assertCompatibleWith\" invocatino is at line 45 of Db2Container.java.\r\nIs it (somehow) possible that you  are useing \"testconatiners\" in version older than 1.19.0?\r\nBecause the support of the new IBM repo, was introduced only in version 1.19.0\r\n```\r\ncommit 9e8b18b72d9c8e61e737840b2db69fcceb9c2d2e\r\nAuthor: Eddú Meléndez Gonzales <eddu.melendez@gmail.com>\r\nDate:   Fri Aug 4 11:15:17 2023 -0600\r\n\r\n    Support icr.io/db2_community/db2 as a compatible image (#7397)\r\n\r\n    `ibmcom/db2` is deprecated. New image location is `icr.io/db2_community/db2`\r\n\r\n```",
      "Thanks, the environment with the failure is the CI: https://github.com/jdbi/jdbi/actions/runs/7796040931/job/21259987695?pr=2625",
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2625) **Quality Gate passed**  \nIssues  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2625&resolved=false&inNewCodePeriod=true)\n\nMeasures  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2625&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/no-data-16px.png '') No data about Coverage  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2625&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2625)\n\n",
      "@stevenschlansker Yes, I see. GitHub CI/CD pipeline forces older testcontainers version (because of \"mysql\"). I was able to reproduce the problem with the older version.  And I set the suggested setting for backward compatibility, it runs fine for me now. I hope it will be fine also in GitHub CI.",
      "@hgschmie , here is an example where we already run into confusing bugs with old testcontainers :) I hope we can only support the latest version soon.\r\n\r\n@stoyants , thank you for tracking this down, and for the contribution.",
      "Will be able to look at this later.",
      "Wohoo, DB2! :-) Thank you @stoyants!\r\n\r\n@stevenschlansker I hear you. We need to accept that we have users that can not upgrade all the time, so if we want to support features that are only available in a specific version of e.g. tc, we need a conditional. \r\n\r\nGlad that it worked out in this case. Again, wohoo DB2. :-) ",
      "(btw, adding this to the docs (index.adoc, release notes) would be great. Otherwise I will do it next time I am working on docs."
    ],
    "commit_messages": [
      "docker image set backward compatible with the older testcontainers version"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662342fadde8ed798d2ed542",
    "number": 2621,
    "body": null,
    "head_branch": "sqlobject-definition",
    "is_a_fork": false,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2621) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2621&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2621&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2621&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2621)\n\n",
      "Given that we already have a `@Define` annotation, I am not a huge fan of the name. \r\n\r\nAlso, this needs to be documented, please add some documentation (more than one sentence) to the index.adoc\r\n",
      "Do you have a suggestion for a better name? It's intentionally similar since it has the same effect under the hood.\r\nI did add documentation, including limitations and an example use case.\r\n",
      "I left this as `@Beta` so if we come up with a better name I'm all ears. I thought of `@DefineConstant` or `@DefineAttribute` but neither of them felt compellingly better to me."
    ],
    "commit_messages": [
      "SqlObject: add `@Definition` annotation for defining computed constants"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662342fbdde8ed798d2ed543",
    "number": 2620,
    "body": null,
    "head_branch": "scs-spring-6",
    "is_a_fork": false,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2620) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2620&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2620&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \nNo data about Duplication  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2620)\n\n",
      "Not sure what went wrong here, but this was merged in."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662342fcdde8ed798d2ed544",
    "number": 2616,
    "body": "- Update to basepom 58\n- Introduce japicmp for API diffing\n",
    "head_branch": "japicmp",
    "is_a_fork": true,
    "comments": [
      "Resolves #2590 ",
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2616) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2616&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2616&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2616&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2616)\n\n",
      "Is that a general download failure? What error do you see?\r\n",
      "Hi @hgschmie, this occurred behind a network proxy and with a Nexus artifact manager in between in the office today. Most probably this can be ignored ..."
    ],
    "commit_messages": [
      "Merge pull request #2616 from hgschmie/japicmp\n\nIntroduce japicmp for API diffing"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662342fddde8ed798d2ed545",
    "number": 2615,
    "body": null,
    "head_branch": "basepom-58",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2615) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2615&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2615&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2615&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2615)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2615 from hgschmie/basepom-58\n\nUpdate to basepom 58"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662342fedde8ed798d2ed546",
    "number": 2614,
    "body": null,
    "head_branch": "setup-java",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2614) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2614&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2614&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2614&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2614)\n\n",
      "we have many pipelines. that is how github actions are configured. I don't think there is a good way to unify this. TBH, this was a single command: `rg 'setup-java' .github | perl -pi -e 's|setup-java\\@v3|setup-java\\@v4|g' ` :-) \r\n"
    ],
    "commit_messages": [
      "Merge pull request #2614 from hgschmie/setup-java\n\nupdate setup-java action version"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662342ffdde8ed798d2ed547",
    "number": 2612,
    "body": "tc 1.19.4 contains the mysql fix for mysql 8.3.x\nderby 1.16 runs on JDK 17+ only\n",
    "head_branch": "versions-fix",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2612) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2612&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2612&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2612&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2612)\n\n",
      "it's the same BTW with derby. We *could* upgrade to 1.17 and just run the test when Java 21 is used. Right now, we run the test when 17+ is used (and stick with 1.16) because we support compiling the codebase with 17 and 21. Once we drop 17 for compilation, we can upgrade derby.\r\n\r\nI also resolved the dependabot issue, we are not actually using the LDAP piece that was in the CVE. "
    ],
    "commit_messages": [
      "Merge pull request #2612 from hgschmie/versions-fix\n\nUpdate testcontainers and derby"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234300dde8ed798d2ed548",
    "number": 2611,
    "body": null,
    "head_branch": "mysql-fix",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2611) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2611&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2611&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2611&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2611)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2611 from hgschmie/mysql-fix\n\nFix the MySQL integration test failures because of testcontainers#8131"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234301dde8ed798d2ed549",
    "number": 2610,
    "body": "Fixes #2582",
    "head_branch": "geantyref-1.3.15",
    "is_a_fork": false,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2610) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2610&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2610&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2610&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2610)\n\n",
      "ref: https://github.com/leangen/geantyref/issues/20"
    ],
    "commit_messages": [
      "Update to GeantyRef 1.3.15\n\nFixes #2582"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234302dde8ed798d2ed54a",
    "number": 2609,
    "body": "Fixes #2607",
    "head_branch": "field-mapper-static",
    "is_a_fork": false,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2609) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2609&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2609&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2609&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2609)\n\n"
    ],
    "commit_messages": [
      "FieldMapper: skip static fields\n\nFixes #2607"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234303dde8ed798d2ed54b",
    "number": 2608,
    "body": null,
    "head_branch": "missing-source-dirs",
    "is_a_fork": false,
    "comments": [
      "Oh, I added the `.txt` to avoid the license checker warning. Maybe `.keepme` is exempt from license checker already?",
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2608) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2608&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2608&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \nNo data about Duplication  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2608)\n\n"
    ],
    "commit_messages": [
      "kotlin: Add empty missing Java source dirs to prevent warnings"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234304dde8ed798d2ed54c",
    "number": 2606,
    "body": "Here is a short summary:\r\n* AssertJ version can be bumped to \"3.25.1\" Hopefully then CI will not fail even without exclusion of \"guava\", because guava version is upgraded to \"33.0.0-jre\" (the same like jdbi)\r\n* HikariCP stop using slf4j-api 2.0.0 since they stop support of Java 8, so no need to exclude it\r\n* Changes in \"kotlin\" and \"kotlin-sqlobject\" are recommended by https://kotlinlang.org/docs/maven.html#compile-kotlin-only-source-code\r\n* Creation of \"uberjar\" in \"beanchmark\" faces the problem of \"merging\" of artefacts like \"module-info.class\", \"MANIFEST.MF\", etc. and is no way perfect. Now the conflicting once are excluded and it is not any worse (or better) than before. But at least multiple warnings are gone.\r\n\r\nAbout remaining warnings:\r\n* Another warning can be avoided if \"<exclude>**/*.MockMaker</exclude>\" is added to the respective pom.xml in \"basepom\" module.\r\n* There are few warning because of disabled test.\r\n* And one warning in \"spring5\" is caused by missing \"jsr305\", but as far as I understand \"jdbi\" is trying to avoit this library.\r\n* There are few more warning coming from \"kotlin\" modules which I can try to remove.",
    "head_branch": "maven-cleanup",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2606) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2606&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2606&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2606&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2606)\n\n",
      "So it turns out the Kotlin source dir changes are not needed. I backed those out. We do it this way:\r\nhttps://github.com/jdbi/jdbi/blob/master/internal/build/pom.xml#L1084-L1102",
      "> So it turns out the Kotlin source dir changes are not needed. I backed those out. \r\n\r\nWithout them the following warnings will \"come back\" (only in \"install\" profile, not in \"slow-tests\"):\r\n\r\n[WARNING] Source root doesn't exist: src/main/java \r\n\r\nBoth in \"kotlin\" and \"kotlin-sqlobject\" modules. They constitute currently ca. 50% of all warnings :)\r\n\r\nThe \"kotlin\" documentation recommends these settings especially in the case when module has only \"kotlin\" sources and no \"java\" sources. Which is the case in \"jdbi\" modules.\r\n\r\nI tested also the \"slow-tests\" in my local environment. All seems fine. I have no idea why CI failed, but I doubt that these changes was the reason. Seems to me, that mysql container started very slowly and the test timed-out.\r\n\r\nBest Regards, Stoyan\r\n\r\n",
      "I think @hgschmie looked into this before and Maven made it hard to do dynamic configuration of kotlin source dirs and also not warn on java source dirs. I wonder if we just create the missing source directories with a `.keep` if that is enough.",
      "Yes, the mysql test failure is not related - we are investigating that separately.",
      "I think the simplest fix might be to just create the missing source dirs as empty:\r\nhttps://github.com/jdbi/jdbi/pull/2608"
    ],
    "commit_messages": [
      "maven build warnings cleanup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234305dde8ed798d2ed54d",
    "number": 2604,
    "body": "Add CI flows that run all tests with different timezone and locale\n\n- Asia/Colombo was chosen because it has a 5:30 offset\n- tr_TR was chosen because it has letters that have no capitalization\n\naddresses #2598\n",
    "head_branch": "run-different-locales",
    "is_a_fork": true,
    "comments": [
      "> MySQLJdbiTestContainersExtensionTest » ContainerLaunch Container startup failed for image mysql:latest\r\n\r\nThat sucks :/",
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2604) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2604&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2604&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2604&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2604)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2604 from hgschmie/run-different-locales\n\nRun CI tests with different timezone and locale"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234306dde8ed798d2ed54e",
    "number": 2603,
    "body": "Fix situation where an exception in `Connection#commit()` still called `commit()`.\n\nFixes #2595\n",
    "head_branch": "commit-throws-still-commits",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2603) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2603&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2603&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2603&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2603)\n\n"
    ],
    "commit_messages": [
      "Ensure that failure while calling commit does not call commit anyway\n\nWhen the commit() operation fails, explicitly call rollback.\n\nFixes #2595"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234307dde8ed798d2ed54f",
    "number": 2600,
    "body": "Roll the current integration test modules into a single e2e (end-to-end) test suite.\n\n- Absorbs the integration-testing, lombok, mysql and java17 modules.\n- Raise the minimum version to compile jdbi to Java 17.\n",
    "head_branch": "e2e",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2600) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2600&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2600&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2600&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2600)\n\n",
      "> No one outside jdbi should ever use this, right? Assuming so, LGTM\r\n\r\nyes, it is the internal test suite. I tend to add tests to investigate issues to it. It has proliferated to a number of modules and this is pulling back into a single module again."
    ],
    "commit_messages": [
      "Merge pull request #2600 from hgschmie/e2e\n\ne2e test suite"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234308dde8ed798d2ed550",
    "number": 2599,
    "body": "See #2592",
    "head_branch": "outparam-doc",
    "is_a_fork": false,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2599) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2599&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2599&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2599&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2599)\n\n"
    ],
    "commit_messages": [
      "Improve OutParameters docs\n\nSee #2592"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234309dde8ed798d2ed551",
    "number": 2597,
    "body": null,
    "head_branch": "java21-test-vt",
    "is_a_fork": false,
    "comments": [
      "Ok, I wrote a test that doesn't work to debug deadlocks further.",
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2597) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2597&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2597&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2597&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2597)\n\n",
      "Hi @mhib , I merged your commit into this branch and tried to test again, but unfortunately tests still seem to fail :(\r\nJava 23 is supposed to improve the situation here a lot, so maybe once that is released we try again. Or it could be a bug in the test...",
      "@stevenschlansker I think the version here https://github.com/jdbi/jdbi/pull/2597/files#diff-1f18cd26f02a0543d14b3bb7e8dd6865025ea30fc77da79dd9fbda3757f8b663R21 should be bumped to `3.45.4-SNAPSHOT` to match version from core's `pom.xml`. Without it old, `synchronized` version of `MemoizingSupplier` is being used.",
      "🤦  thank you...",
      "Excellent, tests pass now! Thanks!",
      "requires https://github.com/jdbi/jdbi/pull/2691",
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2597) **Quality Gate passed**  \nIssues  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2597&issueStatuses=OPEN,CONFIRMED&sinceLeakPeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/accepted-16px.png '') [0 Accepted issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2597&issueStatuses=ACCEPTED)\n\nMeasures  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2597&issueStatuses=OPEN,CONFIRMED&sinceLeakPeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0.0% Coverage on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2597&metric=new_coverage&view=list)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2597&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2597)\n\n",
      "Released hopefully for real this time as 3.45.4"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623430adde8ed798d2ed552",
    "number": 2596,
    "body": "Right now if you run this test in e.g. PST, it fails due to zone offset, which is a known issue with pg TIMESTAMP type\r\n\r\nfix is to use TIMESTAMPTZ",
    "head_branch": "pg-tz",
    "is_a_fork": false,
    "comments": [
      "Example failure:\r\n\r\n```\r\njava.lang.AssertionError: \r\nExpecting CopyOnWriteArrayList:\r\n  [1970-01-01T08:00:00Z,\r\n    2024-01-11T05:05:46.255Z,\r\n    1901-12-14T04:45:52Z,\r\n    2038-01-19T11:14:07Z,\r\n    1583-01-01T08:00:00Z,\r\n    +10000-01-01T07:59:59Z]\r\nto contain:\r\n  [1970-01-01T00:00:00Z,\r\n    2024-01-10T21:05:46.255Z,\r\n    1901-12-13T20:45:52Z,\r\n    2038-01-19T03:14:07Z,\r\n    1583-01-01T00:00:00Z,\r\n    9999-12-31T23:59:59Z]\r\nbut could not find the following element(s):\r\n  [1970-01-01T00:00:00Z,\r\n    2024-01-10T21:05:46.255Z,\r\n    1901-12-13T20:45:52Z,\r\n    2038-01-19T03:14:07Z,\r\n    1583-01-01T00:00:00Z,\r\n    9999-12-31T23:59:59Z]\r\n\r\n\tat org.jdbi.v3.postgres.TestSqlArrays.testInstantCopyOnWriteArrayList(TestSqlArrays.java:238)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\r\n\r\n```",
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2596) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2596&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2596&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2596&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2596)\n\n",
      "\r\nThanks a lot for the fix. This test was bugging me for some time.\r\n:thumbsup:\r\nI'm not a reviewer, but if I would have an opportunity, I will vote with both my hands.\r\n\r\nBest Regards, Stoyan",
      "@stoyants if you find any other weirdly broken tests, please feel free to file an issue. hopefully this one is fixed :)"
    ],
    "commit_messages": [
      "TestSqlArrays: make independent of timezone\n\nRight now if you run this test in e.g. PST, it fails due to\nzone offset, which is a known issue with pg TIMESTAMP type\n\nfix is to use TIMESTAMPTZ"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623430bdde8ed798d2ed553",
    "number": 2595,
    "body": "I think this might have crept in with the transaction handling rewrite - even if `commit()` always throws, Jdbi will accidentally (?) commit due to skipping `rollback` before `setAutoCommit(false)`\r\nThis behavior is pretty surprising to me -- wdyt @hgschmie?",
    "head_branch": "commit-throws-still-commits",
    "is_a_fork": false,
    "comments": [
      "The test is great but it will break the build. We should keep it here and add a fix to the branch. I might find some time tomorrow in the afternoon to look at this. ",
      "I am not proposing to merge this until we figure out how to fix the behavior, or (unlikely) if this is failure actually correct.",
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2595) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2595&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2595&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2595&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2595)\n\n",
      "So I have a potential fix but that currently breaks the TestTransactionsAutoCommit test. Need to think more about this."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623430cdde8ed798d2ed554",
    "number": 2593,
    "body": "A possible path to get rid of the byte-buddy agent entirely.\r\nDepends on: #2595 \r\nFixes: #2549\r\nFixes: #2506 (while this does not remove all tests, the remaining ones I think are reasonably well justified)\r\nReplaces: #2569 ",
    "head_branch": "mockito-proxy",
    "is_a_fork": false,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2593) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2593&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2593&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2593&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2593)\n\n"
    ],
    "commit_messages": [
      "Switch Mockito to proxy-only mode and disable byte-buddy agent\n\nAlternative approach to 22-ea"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623430ddde8ed798d2ed555",
    "number": 2586,
    "body": null,
    "head_branch": "makefile-fix",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2586) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2586&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2586&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \nNo data about Duplication  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2586)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2586 from hgschmie/makefile-fix\n\nmakefile fix"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623430edde8ed798d2ed556",
    "number": 2583,
    "body": null,
    "head_branch": "github-actions-update",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2583) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2583&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2583&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \nNo data about Duplication  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2583)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2583 from hgschmie/github-actions-update\n\nupdate checkout action"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623430fdde8ed798d2ed557",
    "number": 2580,
    "body": "- fix workflow checkout version\n- bump maven wrapper to 3.9.6\n- basepom 57\n",
    "head_branch": "basepom-57",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2580) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2580&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2580&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2580&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2580)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2580 from hgschmie/basepom-57\n\nSome housekeeping tasks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234310dde8ed798d2ed558",
    "number": 2579,
    "body": "- oracle jdk location changed (again)\n- links to JDK now are prefixed with the JPMS module.\n",
    "head_branch": "doc-fix",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2579) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2579&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2579&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2579&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2579)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2579 from hgschmie/doc-fix\n\nUpdate jdk links"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234311dde8ed798d2ed559",
    "number": 2577,
    "body": null,
    "head_branch": "version-updates",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2577) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2577&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2577&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2577&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2577)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2577 from hgschmie/version-updates\n\nversion updates"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234313dde8ed798d2ed55a",
    "number": 2576,
    "body": "Fully support JDBC drivers that return stored procedure results as a\nResultSet. Allow mixing standard out parameters with ResultSet.\n\nAlso support returning values from OutParameters.\n",
    "head_branch": "support-call-resultset",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2576) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2576&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2576&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2576&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2576)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2576 from hgschmie/support-call-resultset\n\nSupport ResultSet from stored procedures"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234314dde8ed798d2ed55b",
    "number": 2575,
    "body": "At least the MS SQL testcontainer throws a lot of angry errors if the thread is\njust shut down and then the pools are terminated. Add a little bit of collaboration between\nthe caller and the creation thread to avoid those exceptions.\n",
    "head_branch": "testcontainer-shutdown",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2575) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2575&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2575&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2575&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2575)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2575 from hgschmie/testcontainer-shutdown\n\nRework the shutdown logic for the creation thread"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234315dde8ed798d2ed55c",
    "number": 2574,
    "body": "Testcontainers now supports MS SQLServer, so we should support it, too.\n",
    "head_branch": "ms-sql-support",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2574) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2574&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2574&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2574&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2574)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2574 from hgschmie/ms-sql-support\n\nAdd support for MS SQLServer"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234316dde8ed798d2ed55d",
    "number": 2571,
    "body": "- Support null for bean, pojo, field, and method binding\n- tests from issue 2564\n",
    "head_branch": "investigate-2564",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2571) **Quality Gate passed**  \nThe SonarCloud Quality Gate passed, but some issues were introduced.\n\n[1 New issue](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2571&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2571&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2571&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2571)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2571 from hgschmie/investigate-2564\n\ninvestigate 2564"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234317dde8ed798d2ed55e",
    "number": 2570,
    "body": "- Support null for bean, pojo, field, and method binding\n- Clarify handle uses for sql objects\n",
    "head_branch": "investigate-2497",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2570) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2570&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2570&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2570&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2570)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2570 from hgschmie/investigate-2497\n\ninvestigate 2497"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234318dde8ed798d2ed55f",
    "number": 2569,
    "body": "Revisit the mockito setup (this can be improved once\nhttps://github.com/mockito/mockito/pull/3137 has landed and was\nreleased with mockito). For now, we add the bytebuddy agent directly.\n\nAlso update spotbugs and junit, which is needed to pass build under\nJava 22-ea.\n",
    "head_branch": "mockito-revisited",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2569) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2569&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2569&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2569&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2569)\n\n",
      "Fixes #2549 ",
      "I have spent a bit more time looking into this, and I think we can avoid needing bytebuddy agent at all (and therefore avoid needing to do all the pom dance here to bring it in for 22-ea).\r\n\r\nSee #2593 ",
      "I'll close this for now since we have 22-ea working without the agent altogether."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234319dde8ed798d2ed560",
    "number": 2568,
    "body": "- Add row support for vavr `Option`\n- Support wrapping row types into java `Optional`\n",
    "head_branch": "fix-issue-2558",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2568) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2568&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2568&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2568&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2568)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2568 from hgschmie/fix-issue-2558\n\nSupport nesting row types in vavr `Option` and java `Optional`"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623431adde8ed798d2ed561",
    "number": 2567,
    "body": "Instead of throwing a NPE, do nothing. This allows for calling\nthe various Jdbi methods (and the annotations for sqlobject) to deal\nwith null objects.\n\nWhile this is a behavior change, it is acceptable as callers had to\nwrap this in `if (bean != null) { ...` conditionals and had to skip\nbinding for null values. Now the code does skip null values directly.\n",
    "head_branch": "fix-issue-2562",
    "is_a_fork": true,
    "comments": [
      "This addresses #2562 ",
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2567) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2567&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2567&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2567&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2567)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2567 from hgschmie/fix-issue-2562\n\nSupport null for bean, pojo, field, and method binding"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623431bdde8ed798d2ed562",
    "number": 2565,
    "body": "I just started familiarising myself with the codebase.\r\n[Remove all mockito tests](https://github.com/jdbi/jdbi/issues/2506) seemed like a good starting point\r\n\r\nThe changes replace mocks with h2 connections. May be dumb idea. But I will refactor as my understanding grows. \r\n\r\n`make tests` was failing for me. \r\n\r\nI had to comment out `postgres/src/test/java/org/jdbi/v3/postgres/TestSqlArrays.java` just to make sure my change works.\r\nI restored the class after my test.\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2565) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2565&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2565&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \nNo data about Duplication  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2565)\n\n",
      "pushed  a commit to fix the below \r\n\r\nError:  /home/runner/work/jdbi/jdbi/core/src/test/java/org/jdbi/v3/core/TestPlugins.java:24:1: 'org.assertj.core.api.Assertions.assertThat' should be separated from previous imports. [ImportOrder]\r\n"
    ],
    "commit_messages": [
      "code style fix: import statement changed in TestPlugins"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623431cdde8ed798d2ed563",
    "number": 2561,
    "body": null,
    "head_branch": "list-set-wording",
    "is_a_fork": false,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2561) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2561&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2561&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \nNo data about Duplication  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2561)\n\n"
    ],
    "commit_messages": [
      "Fix some ResultIterable docs wording"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623431ddde8ed798d2ed564",
    "number": 2560,
    "body": null,
    "head_branch": "geantryref",
    "is_a_fork": false,
    "comments": [
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2560) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2560&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2560&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \nNo data about Duplication  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2560)\n\n"
    ],
    "commit_messages": [
      "typo: geantryref"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623431edde8ed798d2ed565",
    "number": 2559,
    "body": "Turns out that MySQL and Oracle simply have differing ideas on what a\nstatement in a script should be. Oracle needs the trailing semicolons,\nMySQL throws syntax errors (when using the\nrewriteBatchedStatements=true setting, otherwise it reports a much\nsaner \"cannot issue select statements with update\" type of error\nmessage.\n\nAdded a switch that retains the default behavior but can be flipped\nto allow the error case described in #2554 to work.\n\nReported by @IrinaTerlizhenko, thank you for this!\n",
    "head_branch": "trailing-semicolon-switch",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2559)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2559&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2559&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2559&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2559&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2559&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2559&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2559&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2559&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2559&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2559&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2559&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2559&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2559) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2559&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2559&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2559 from hgschmie/trailing-semicolon-switch\n\nMake trailing semicolons in scripts configurable"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623431fdde8ed798d2ed566",
    "number": 2553,
    "body": "some blurb about sponsoring and the FOSS fund.\n",
    "head_branch": "funding",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2553)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2553&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2553&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2553&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2553&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2553&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2553&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2553&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2553&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2553&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2553&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2553&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2553&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2553) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2553&metric=duplicated_lines_density&view=list) No Duplication information\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2553 from hgschmie/funding\n\nAdd Spotify FOSS 2023 and Tidelift information"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234320dde8ed798d2ed567",
    "number": 2552,
    "body": "PR Overview:\r\n_________________________________________________________________________________________________________\r\nThis PR fixes the flaky/non-deterministic behavior of the following test:\r\n\r\n[org.jdbi.v3.core.mapper.reflect.BeanMapperMockTest#shouldThrowOnPropertyTypeWithoutRegisteredMapper](https://github.com/njain2208/jdbi/blob/f1548d3ca12f3b82a91a9c4f740915f03fd6e45c/core/src/test/java/org/jdbi/v3/core/mapper/reflect/BeanMapperMockTest.java#L231-L240)\r\n\r\nTest Overview:\r\n_________________________________________________________________________________________________________\r\nThe error in the test is a result of using unnecessary stubbings in the test code. Unnecessary stubbings can clutter the code and make it less maintainable.\r\n\r\nThis flakiness was identified by the [nondex tool](https://github.com/TestingResearchIllinois/NonDex) created by the researchers of UIUC.\r\n\r\nYou can reproduce the issue by running the following commands:\r\n\r\n```\r\nmvn install -pl katharsis-core -am -DskipTests\r\nmvn test -pl katharsis-core  -Dtest=io.katharsis.legacy.queryParams.DefaultQueryParamsConverterTest#testIncludeRelationsMultipleSame\r\nmvn -pl katharsis-core edu.illinois:index-maven-plugin:2.1.1:nondex -Dtest=io.katharsis.legacy.queryParams.DefaultQueryParamsConverterTest#testIncludeRelationsMultipleSame\r\n```\r\n\r\nFix:\r\n_________________________________________________________________________________________________________\r\nTo fix the issue I decided to make the stubbing linenient. \r\n\r\nhttps://github.com/njain2208/jdbi/blob/f923a7c407164508446508b2c2cfac4760a6f2a6/core/src/test/java/org/jdbi/v3/core/mapper/reflect/BeanMapperMockTest.java#L232-L240",
    "head_branch": "njain2208-fix-flaky-2",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2552)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2552&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2552&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2552&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2552&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2552&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2552&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2552&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2552&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2552&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2552&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2552&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2552&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2552) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2552&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2552&metric=new_duplicated_lines_density&view=list)\n\n",
      "Hi @njain2208,\r\n\r\nThank you for sending a PR to the Jdbi project. We usually do not apply \"we ran a tool and it found an issue\" PRs; especially for Mocks, the right solution is \"remove the mock\", not sprinkle \"lenient()\" over the code. \r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234321dde8ed798d2ed568",
    "number": 2551,
    "body": "PR Overview:\r\n_________________________________________________________________________________________________________\r\nThis PR fixes the flaky/non-deterministic behavior of the following test because it assumes the ordering.\r\n\r\n[org.jdbi.v3.core.internal.IterableLikeTest#testSetToIterator ](https://github.com/jdbi/jdbi/blob/f1548d3ca12f3b82a91a9c4f740915f03fd6e45c/core/src/test/java/org/jdbi/v3/core/internal/IterableLikeTest.java#L105)\r\n\r\nTest Overview:\r\n_________________________________________________________________________________________________________\r\nIn the above test, the set has been initialized as a HashSet which is non-deterministic in nature. It doesn't return the elements in the order in which they are stored.\r\n\r\nThis flakiness was identified by the [nondex tool](https://github.com/TestingResearchIllinois/NonDex) created by the researchers of UIUC.\r\n\r\n```\r\nERROR]   IterableLikeTest.testSetToIterator:112 \r\nActual and expected have the same elements but not in the same order, at index 0 actual element was:\r\n  \"2\"\r\nwhereas expected element was:\r\n  \"1\"\r\n```\r\n\r\nYou can reproduce the issue by running the following commands:\r\n\r\n```\r\nmvn install -pl  core  -am -DskipTests\r\nmvn test -pl core  -Dtest=org.jdbi.v3.core.internal.IterableLikeTest#testSetToIterator \r\nmvn -pl core edu.illinois:index-maven-plugin:2.1.1:nondex -Dtest=org.jdbi.v3.core.internal.IterableLikeTest#testSetToIterator \r\n```\r\n\r\nFix:\r\n_________________________________________________________________________________________________________\r\nTo fix the issue I have changed the HashSet with LinkedHashSet which is deterministic in nature.\r\n\r\nhttps://github.com/njain2208/jdbi/blob/e750efe826aaaed937cc98c87c27e30c08ce9b45/core/src/test/java/org/jdbi/v3/core/internal/IterableLikeTest.java#L101-L104",
    "head_branch": "njain2208-fix-flaky-1",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2551)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2551&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2551&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2551&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2551&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2551&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2551&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2551&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2551&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2551&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2551&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2551&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2551&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2551) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2551&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2551&metric=new_duplicated_lines_density&view=list)\n\n",
      "Hi @njain2208,\r\n\r\nThank you for sending a PR to the Jdbi project. We usually do not apply \"we ran a tool and it found an issue\" PRs; especially for Mocks, the right solution is \"remove the mock\".\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234322dde8ed798d2ed569",
    "number": 2548,
    "body": "Turns out, this has never worked before. To work with SqlObjects,\nthe argument factory needs to implement ArgumentFactory.Preparable,\notherwise another factory (in this case one that accepts anything\niterable) would take precedence.\n\nRewrite the factory to support Preparable, add unit tests suggested\nby @diversit.\n\nFixes #2529\n",
    "head_branch": "fix-2529",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2548)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2548&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2548&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2548&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2548&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2548&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2548&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2548&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2548&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2548&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2548&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2548&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2548&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2548) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2548&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2548&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2548 from hgschmie/fix-2529\n\nFix vavr arguments for sqlobjects"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234323dde8ed798d2ed56a",
    "number": 2547,
    "body": "Script parsing raises its ugly head again. Again. Allow for `END;`\nas it is used within MySQL scripts.\n\nFixes #2535\n",
    "head_branch": "fix-2535",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2547)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2547&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2547&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2547&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2547&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2547&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2547&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2547&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2547&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2547&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2547&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2547&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2547&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2547) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2547&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2547&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2547 from hgschmie/fix-2535\n\nFix script parsing for END with semicolon"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234324dde8ed798d2ed56b",
    "number": 2545,
    "body": null,
    "head_branch": "format-fix",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2545)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2545&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2545&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2545&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2545&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2545&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2545&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2545&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2545&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2545&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2545&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2545&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2545&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2545) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2545&metric=duplicated_lines_density&view=list) No Duplication information\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2545 from hgschmie/format-fix\n\nfix formatting"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234325dde8ed798d2ed56c",
    "number": 2544,
    "body": "- reduced use of reflection\r\n- documented usage\r\n- fixed minor bug\r\n\r\nAs English in not my first language, please check spelling and grammar.\r\nMade some improvements as suggested by @stevenschlansker\r\n\r\n(I fudged my rebase, so I decided to make a new branch instead)",
    "head_branch": "jdbi-repositories_improvements",
    "is_a_fork": true,
    "comments": [
      "I will take a look at the review comments",
      "LMK when you are done; I am planning to do a 3.42.0 release (the Kotlin coroutine stuff and the spring improvements are sufficient for a new release) now that the tests are stable again.",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2544)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2544&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2544&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2544&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2544&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2544&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2544&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2544&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2544&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2544&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2544&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2544&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2544&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2544) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2544&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2544&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2544 from xfredk/jdbi-repositories_improvements\n\nImprovements on spring Jdbi repositories"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234326dde8ed798d2ed56d",
    "number": 2543,
    "body": "Allows using Jdbi objects (handles and extension objects) with kotlin\ncoroutines. Objects can be shared between coroutines (even across threads)\nas long as the caller can guarantee that not multiple coroutines use them\nat the same time.\n",
    "head_branch": "handle-coroutines",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2543)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2543&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2543&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2543&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2543&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2543&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2543&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2543&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2543&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2543&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2543&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2543&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2543&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2543) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2543&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2543&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2543 from jdbi/handle-coroutines\n\nSupport Kotlin coroutines"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234327dde8ed798d2ed56e",
    "number": 2542,
    "body": "Record which thread uses a handle or cleanable; record the information\nand display it in case of leaks.\n",
    "head_branch": "leak-checker-improvements",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2542)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2542&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2542&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2542&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2542&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2542&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2542&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2542&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2542&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2542&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2542&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2542&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2542&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2542) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2542&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2542&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2542 from hgschmie/leak-checker-improvements\n\nleak checker improvements"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234328dde8ed798d2ed56f",
    "number": 2541,
    "body": "There is a really obscure (and usually already fatal) error condition\nwhere during handle creation, the connection object becomes no longer\nviable (e.g. the database crashes, the connection gets closed). In that\ncase, either `transactionHandler.specialize()` or\n`transactionHandler.isInTransaction()` will throw a SQLException (or a\nruntime exception) and the cleanup handler for the connection is never\nadded. Technically, the handle will there leak the connection (which is\nalready non-viable because it caused the exception in the first\nplace). This fix moves the cleanup before calling the methods which will\nensure that the connection will be cleaned up in every situation.\n\nThis may change user visible behavior slightly; instead of a\nSQLException, it is possible that now a `ConnectionException` with the\nroot exception attached is now observed. This is unlikely but possible.\n",
    "head_branch": "handle-fix",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed.svg 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2541)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug.svg 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2541&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.svg 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2541&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2541&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability.svg 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2541&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.svg 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2541&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2541&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot.svg 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2541&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.svg 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2541&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2541&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell.svg 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2541&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.svg 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2541&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2541&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo.svg 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2541) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3.svg '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2541&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2541&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2541 from hgschmie/handle-fix\n\nCorrectness fix for Handle"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234329dde8ed798d2ed570",
    "number": 2540,
    "body": "Fix all the flaky multithreaded tests\n\nIn a multithreaded environment, it was possible that a thread received\nthe connection from another thread:\n\n* thread 1 calls \"lastConnection = DriverManager.getConnection(...)\n* thread 2 calls \"lastConnection = DriverManager.getConnection(...)\n* thread 1 returns \"lastConnection\" which holds the object from thread 2\n* thread 2 returns \"lastConncetion\" which holds the object from thread 2\n\n=> leak checker reports \"handle already added\"\n=> threads see \"ClosedConnection\" errors even though they never closed\n   the connection\n\nThis explains all the problems with the tests. :-)\n\nFix the logic for lastConnection to never share the returned connection,\nadd some explanation what this was intended for.\n\nThis PR also reverts all the test code that was added to figure this out.\n",
    "head_branch": "full-test-fix",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2540)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2540&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2540&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2540&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2540&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2540&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2540&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2540&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2540&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2540&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2540&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2540&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2540&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2540) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2540&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2540&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2540 from hgschmie/full-test-fix\n\nFix flaky tests"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623432adde8ed798d2ed571",
    "number": 2539,
    "body": "This branch is not for merging!\n\nTrying to find out why our builds got so flaky.\n",
    "head_branch": "flaky-test-investigation",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2539)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2539&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2539&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2539&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2539&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2539&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2539&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2539&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2539&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2539&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2539&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2539&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2539&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2539) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2539&metric=duplicated_lines_density&view=list) No Duplication information\n\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623432bdde8ed798d2ed572",
    "number": 2538,
    "body": "- reduced use of reflection\r\n- documented usage\r\n- fixed minor bug",
    "head_branch": "jdbi-repositories-improvements",
    "is_a_fork": true,
    "comments": [
      "As English in not my first language, please check spelling and grammar.\r\nMade some improvements as suggested by @stevenschlansker",
      "Hi,\r\n\r\nI pushed a fix for the flaky tests; could you plz rebase on top of the current master? This should turn all the tests green. :-) ",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2538)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2538&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2538&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2538&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2538&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2538&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2538&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2538&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2538&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2538&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2538&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2538&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2538&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2538) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2538&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2538&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623432cdde8ed798d2ed573",
    "number": 2537,
    "body": "Fix two tests that are suspects in causing build errors.\n",
    "head_branch": "fix-tests",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2537)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2537&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2537&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2537&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2537&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2537&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2537&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2537&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2537&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2537&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2537&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2537&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2537&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2537) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2537&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2537&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623432ddde8ed798d2ed574",
    "number": 2536,
    "body": "Allows using Jdbi objects (handles and extension objects) with kotlin\ncoroutines. Objects can be shared between coroutines (even across threads)\nas long as the caller can guarantee that not multiple coroutines use them\nat the same time.\n",
    "head_branch": "handle-coroutines",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2536)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2536&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2536&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2536&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2536&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2536&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2536&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2536&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2536&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2536&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2536&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2536&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2536&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2536) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2536&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2536&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623432edde8ed798d2ed575",
    "number": 2534,
    "body": null,
    "head_branch": "merge-2528",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2534)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2534&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2534&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2534&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2534&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2534&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2534&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2534&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2534&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2534&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2534&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2534&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2534&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2534) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2534&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2534&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "release notes #2528"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623432fdde8ed798d2ed576",
    "number": 2533,
    "body": "this conflicts with spring-aop, which is coming in from #2528\r\nwe don't need these annotations in the docs either way.",
    "head_branch": "docs-no-aop",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2533)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2533&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2533&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2533&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2533&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2533&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2533&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2533&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2533&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2533&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2533&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2533&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2533&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2533) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2533&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2533&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge branch 'docs-no-aop' into spring-jdbi-repositories"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234330dde8ed798d2ed577",
    "number": 2531,
    "body": "debugging the various ci failures for jdbi-noop-cache integration test.",
    "head_branch": "upload-error-logs",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2531)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2531&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2531&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2531&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2531&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2531&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2531&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2531&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2531&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2531&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2531&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2531&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2531&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2531) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2531&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2531&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2531 from hgschmie/upload-error-logs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234331dde8ed798d2ed578",
    "number": 2530,
    "body": "something in java 21 has changed and the test keeps failing.\n",
    "head_branch": "fix-deadlock-test",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2530)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2530&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2530&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2530&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2530&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2530&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2530&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2530&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2530&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2530&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2530&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2530&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2530&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2530) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2530&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2530&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2530 from hgschmie/fix-deadlock-test\n\nfix flaky test"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234332dde8ed798d2ed579",
    "number": 2528,
    "body": "I wrote some code that scans for sql-object interfaces annotated with @JdbiRepository. These interfaces can be automatically detected by spring and used for autowiring in spring applications. These beans work seamlessly with spring transactions.\r\n\r\nPoints of notice:\r\n- I changed the JdbiUtil class in a non-backward compatible way! This was because (I think) the original had a bug.\r\n- I added two dependencies to the project:\r\n- - a dependency to jdbi3-sqlobject (The main point of this change)\r\n- - a dependency to spring-context (To enable the detection and processing of the annotations)\r\n\r\nI considered making a separate project but thought it was close enough to put it in the spring5 project",
    "head_branch": "spring-jdbi-repositories",
    "is_a_fork": true,
    "comments": [
      "Hi @xfredk!\r\n\r\nThank you for your PR to the Jdbi project! I triggered the CI scripts and I will review in a bit.",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2528)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2528&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2528&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2528&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2528&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2528&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2528&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2528&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2528&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2528&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2528&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2528&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2528&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2528) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2528&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2528&metric=new_duplicated_lines_density&view=list)\n\n",
      "De code analysis detected duplication of classes, but I do not know how to solve this problem. (Apparantely spring aop, a transitive dependency of spring context, copied some aopalliance classes into their jar)",
      "Yes, apparently spring-aop copied the aopalliance classes into their jar. That's annoying.",
      "@xfredk , it would be nice to add a little bit about this new feature into the docs if you have time."
    ],
    "commit_messages": [
      "Merge branch 'docs-no-aop' into spring-jdbi-repositories"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234334dde8ed798d2ed57a",
    "number": 2525,
    "body": "Turn off the final few \"I need to get docker going\" tests in the testing module\n",
    "head_branch": "more-slow",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2525)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2525&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2525&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2525&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2525&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2525&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2525&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2525&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2525&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2525&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2525&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2525&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2525&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2525) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2525&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2525&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2525 from hgschmie/more-slow\n\nFix JUnit 4 slow test skipping"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234334dde8ed798d2ed57b",
    "number": 2524,
    "body": "Support Kotlin coroutines\r\n\r\nAllows using Jdbi objects (handles and extension objects) with kotlin coroutines. Objects can be shared between coroutines (even across threads) as long as the caller can guarantee that not multiple coroutines use them at the same time.",
    "head_branch": "handle-coroutines",
    "is_a_fork": true,
    "comments": [
      "@anderssv Feedback very much welcome. I am not exactly a Kotlin person so I kind of puzzled this together with some docs, common sense and trial-and-error. This could benefit from review / feedback from people that actually use Jdbi with Kotlin.",
      "This addresses #2522 ",
      "keep this in draft until we have hashed out #2523 and I figured out the sporadically failing tests.",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2524)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2524&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2524&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2524&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2524&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2524&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2524&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2524&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2524&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2524&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2524&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2524&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2524&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2524) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2524&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2524&metric=new_duplicated_lines_density&view=list)\n\n",
      "Awesome work guys! Sorry I didn't see the request for input earlier. I have only a rudimentary understanding of Coroutines myself, but on the surface it looks good to me. \r\n\r\nMay I suggest popping by the Kotlin Slack and see if anyone in the coroutines channel has any input? :)"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234335dde8ed798d2ed57c",
    "number": 2523,
    "body": "Pull the thread local into a pluggable object. This will open the path\nto more sophisticated ways of managing handles across different execution\npaths than just \"by thread\". This is most interesting right now for Kotlin\ncoroutines but also future structured concurrency will benefit from this.\n\nThis is a core piece of Jdbi, so basically every test checks whether this\nchange breaks anything. So there are no explicit tests.\n",
    "head_branch": "handle-supplier-holder",
    "is_a_fork": true,
    "comments": [
      "> This seems fine, except that it would be very nice to find a way to hide the `getHandleScope` api as not public.\r\n\r\nI can not see a way to do that in a way that will work with the Kotlin extensions. it is an embedded object in the Jdbi instance and it needs to be exposed to the kotlin coroutine machinery somehow. ",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2523)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2523&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2523&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2523&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2523&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2523&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2523&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2523&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2523&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2523&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2523&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2523&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2523&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2523) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2523&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2523&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2523 from hgschmie/handle-supplier-holder\n\nRefactor HandleSupplier management"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234337dde8ed798d2ed57d",
    "number": 2521,
    "body": "Test code for issue #2508. Needs #2567 merged first.",
    "head_branch": "issue2508",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2521)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2521&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2521&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2521&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2521&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2521&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2521&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2521&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2521&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2521&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2521&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2521&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2521&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2521) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2521&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2521&metric=new_duplicated_lines_density&view=list)\n\n",
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2521) **Quality Gate passed**  \nKudos, no new issues were introduced!\n\n[0 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2521&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2521&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2521&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2521)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2521 from hgschmie/issue2508\n\ntest for issue 2508"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234337dde8ed798d2ed57e",
    "number": 2520,
    "body": "This hopefully addresses all the issues raised in #2481, #2499 and finally #2510.\n\nThe case of the trailing '-' is not solvable without a trailing\ndelimiter. There is not enough information to decide whether\n`:foo-bar` is \"identifier 'foo-bar'\" or \"identifier 'foo' minus bar\".\n\nThis PR drops the '-' again as a valid character in a parameter or\nbinding (sorry if you added it; but then again this was only added in\n3.41.1). The dot (`.`) is still supported as a valid character in a\nbinding or parameter name. It always was for the parameters but not\nfor a binding (this caused the original #2481 issue).\n",
    "head_branch": "lexer-fixes",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2520)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2520&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2520&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2520&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2520&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2520&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2520&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2520&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2520&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2520&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2520&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2520&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2520&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2520) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2520&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2520&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2520 from hgschmie/lexer-fixes\n\nAnother round of lexer fixes"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234338dde8ed798d2ed57f",
    "number": 2519,
    "body": null,
    "head_branch": "update-deps",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2519)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2519&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2519&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2519&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2519&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2519&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2519&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2519&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2519&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2519&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2519&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2519&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2519&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2519) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2519&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2519&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2519 from hgschmie/update-deps\n\nupdate pg-embedded and inline plugin"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234339dde8ed798d2ed580",
    "number": 2517,
    "body": null,
    "head_branch": "maven-395",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2517)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2517&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2517&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2517&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2517&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2517&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2517&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2517&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2517&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2517&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2517&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2517&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2517&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2517) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2517&metric=duplicated_lines_density&view=list) No Duplication information\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2517 from hgschmie/maven-395\n\nbump maven wrapper to 3.9.5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623433adde8ed798d2ed581",
    "number": 2516,
    "body": null,
    "head_branch": "security-policy-draft",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2516)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2516&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2516&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2516&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2516&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2516&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2516&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2516&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2516&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2516&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2516&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2516&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2516&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2516) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2516&metric=duplicated_lines_density&view=list) No Duplication information\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2516 from jdbi/security-policy-draft\n\nCreate SECURITY.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623433bdde8ed798d2ed582",
    "number": 2514,
    "body": null,
    "head_branch": "basepom-56",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2514)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2514&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2514&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2514&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2514&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2514&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2514&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2514&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2514&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2514&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2514&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2514&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2514&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2514) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2514&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2514&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "basepom 56 (#2514)\n\nbasepom 56"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623433cdde8ed798d2ed583",
    "number": 2513,
    "body": null,
    "head_branch": "version-updates",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2513)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2513&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2513&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2513&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2513&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2513&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2513&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2513&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2513&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2513&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2513&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2513&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2513&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2513) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2513&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2513&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "dependency updates (#2513)\n\ndependency updates"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623433ddde8ed798d2ed584",
    "number": 2512,
    "body": null,
    "head_branch": "temurin-21",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2512)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2512&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2512&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2512&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2512&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2512&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2512&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2512&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2512&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2512&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2512&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2512&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2512&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2512) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2512&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2512&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "build with Java 21 LTS by default (#2512)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623433edde8ed798d2ed585",
    "number": 2511,
    "body": "Hi,\r\nPR fixes issue #2363\r\n\r\n",
    "head_branch": "fix-detekt-deprecation-warnings",
    "is_a_fork": true,
    "comments": [
      "Hi @lwach-allegro!\r\n\r\nThank you so much for your contribution to Jdbi. I triggered the CI and if it checks out I will merge it. ",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2511)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2511&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2511&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2511&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2511&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2511&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2511&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2511&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2511&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2511&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2511&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2511&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2511&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2511) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2511&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2511&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Fix detekt deprecation warnings #2363 (#2511)\n\nFix detekt deprecation warnings #2363\r\n\r\n---------\r\n\r\nCo-authored-by: Henning P. Schmiedehausen <henning@schmiedehausen.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623433fdde8ed798d2ed586",
    "number": 2509,
    "body": "Similar to `Consumer<...>` arguments, a function argument consumes the\r\nresults of a SQL query. The return value from applying the function is\r\nreturned by the SQL object method. This is especially useful for\r\ncollecting and managing streaming data as the function is called while\r\nthe database connection is live.",
    "head_branch": "function-arguments",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2509)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2509&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2509&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2509&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2509&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2509&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2509&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2509&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2509&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2509&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2509&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2509&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2509&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2509) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2509&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2509&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2509 from hgschmie/function-arguments\n\nAdd support for function arguments"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234340dde8ed798d2ed587",
    "number": 2507,
    "body": "- warning about annotation processing without `-proc:full`\n- warning about dynamic byte code agent loading (fix is only temporary,\n  JDK 23 will most likely permanently disable dynamic byte code loading\n",
    "head_branch": "java21-fix",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2507)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2507&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2507&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2507&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2507&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2507&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2507&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2507&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2507&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2507&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2507&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2507&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2507&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2507) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2507&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2507&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2507 from hgschmie/java21-fix\n\nSilence Java 21 warnings"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234341dde8ed798d2ed588",
    "number": 2505,
    "body": "Add missing javadoc for setter, reword docs to state that the default\nis the JDBC default value, not some driver value.\n\nClarifies #2477\n",
    "head_branch": "clarify-coalesce-null-primitives",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2505)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2505&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2505&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2505&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2505&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2505&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2505&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2505&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2505&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2505&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2505&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2505&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2505&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2505) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2505&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2505&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2505 from hgschmie/clarify-coalesce-null-primitives\n\nClarify primitive value coalescing"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234342dde8ed798d2ed589",
    "number": 2503,
    "body": "The otj project released a version that supports JPMS so we can\nundeprecate our otj support.\n\nUndoes #2487\n",
    "head_branch": "undeprecate-otj",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2503)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2503&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2503&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2503&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2503&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2503&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2503&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2503&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2503&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2503&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2503&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2503&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2503&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2503) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2503&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2503&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2503 from hgschmie/undeprecate-otj\n\nUndeprecate otj"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234344dde8ed798d2ed58a",
    "number": 2502,
    "body": "1.5 has been deprecated and will be removed.\n",
    "head_branch": "deprecate-kotlin-15",
    "is_a_fork": true,
    "comments": [
      "planning to merge that post 3.41.3 as part of 3.42.0",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2502)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2502&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2502&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2502&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2502&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2502&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2502&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2502&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2502&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2502&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2502&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2502&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2502&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2502) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2502&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2502&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2502 from hgschmie/deprecate-kotlin-15\n\nSwitch to kotlin 1.6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234345dde8ed798d2ed58b",
    "number": 2501,
    "body": null,
    "head_branch": "version-updates",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2501)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2501&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2501&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2501&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2501&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2501&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2501&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2501&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2501&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2501&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2501&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2501&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2501&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2501) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2501&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2501&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2501 from hgschmie/version-updates\n\nUpdate dependency versions"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234346dde8ed798d2ed58c",
    "number": 2500,
    "body": null,
    "head_branch": "dependabot-26",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2500)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2500&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2500&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2500&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2500&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2500&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2500&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2500&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2500&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2500&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2500&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2500&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2500&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2500) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2500&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2500&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2500 from hgschmie/dependabot-26\n\nAddress dependabot #26 (commons-compress)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234347dde8ed798d2ed58d",
    "number": 2499,
    "body": "A regression was highlighted that the change in 3.41.2 swallowed `-`\ncharacters at the end of named parameters and break expressions such\nas `:foo->>'stuff'`.\n\n- Rework the grammar to not support `-` as the last character.\n- Align the HashStatementLexer to the ColonStatementLexer\n- Add tests\n\nThis addresses https://github.com/jdbi/jdbi/pull/2481#issuecomment-1717075251\n",
    "head_branch": "regression-2481",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2499)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2499&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2499&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2499&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2499&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2499&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2499&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2499&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2499&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2499&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2499&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2499&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2499&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2499) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2499&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2499&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2499 from hgschmie/regression-2481\n\nFix regression for #2481"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234348dde8ed798d2ed58e",
    "number": 2498,
    "body": "Rework the postgres json tests to use templates. Also an excuse to use `DynamicTest`. :-)",
    "head_branch": "revamp-json-tests",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2498)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2498&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2498&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2498&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2498&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2498&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2498&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2498&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2498&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2498&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2498&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2498&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2498&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2498) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2498&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2498&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2498 from hgschmie/revamp-json-tests\n\nrevamp json tests"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234349dde8ed798d2ed58f",
    "number": 2496,
    "body": "The PR adds references to the annotation `@DatabaseValue` from #1558 in the reference documentation. The annotation is a really neat feature but currently not mentioned in the reference documentation.",
    "head_branch": "database-value-documentation",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2496)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2496&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2496&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2496&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2496&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2496&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2496&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2496&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2496&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2496&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2496&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2496&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2496&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2496) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2496&metric=duplicated_lines_density&view=list) No Duplication information\n\n",
      "Hi @hpoettker!\r\n\r\nThank you for your contribution to Jdbi!"
    ],
    "commit_messages": [
      "Merge pull request #2496 from hpoettker/database-value-documentation\n\nAdd reference to `@DatabaseValue` to the documentation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623434adde8ed798d2ed590",
    "number": 2495,
    "body": null,
    "head_branch": "fix-lombok",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2495)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2495&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2495&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2495&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2495&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2495&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2495&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2495&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2495&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2495&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2495&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2495&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2495&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2495) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2495&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2495&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2495 from hgschmie/fix-lombok\n\nlombok fixed their Java 21 support"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623434bdde8ed798d2ed591",
    "number": 2493,
    "body": "Move the container tests under a \"slow\" tag and activate only in\nCI.\n",
    "head_branch": "slow-tests",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed.svg 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2493)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug.svg 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2493&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.svg 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2493&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2493&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability.svg 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2493&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.svg 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2493&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2493&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot.svg 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2493&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.svg 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2493&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2493&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell.svg 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2493&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.svg 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2493&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2493&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo.svg 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2493) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3.svg '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2493&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2493&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2493 from hgschmie/slow-tests\n\nConfigure slow tests with tags"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623434cdde8ed798d2ed592",
    "number": 2492,
    "body": "If a handle is by default using autocommit == false, then transactions\ncould be commited (or rolled back) without having to call\nHandle#begin() first. This broke in 3.41.1.\n\nRestore the old behavior. Fixes #2491\n",
    "head_branch": "fix-2491",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2492)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2492&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2492&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2492&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2492&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2492&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2492&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2492&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2492&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2492&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2492&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2492&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2492&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2492) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2492&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2492&metric=new_duplicated_lines_density&view=list)\n\n",
      "well, not sure how to answer that. But up until 3.41.1, you could turn autocommit off on a connection, pile a bunch of statements onto it and then call `Handle#commit()`. You probably *shouldn't* but it still worked. \r\n\r\nWhat the change does is basically looking at the commit state of the connection when the transaction handler is created and if it has autocommit already turned off, it moves the state machine \"one state further\". So the handler is in the same state if you opened it with a connection that has auto-commit turned off as with a regular (autocommit on) + `Handle#begin()`. \r\n\r\nI still think it is a cornercase that the user stumbled upon and if it hadn't worked in the past, I would not make that change. I also think it is benign for \"regular\" use one can call begin multiple times. "
    ],
    "commit_messages": [
      "Merge pull request #2492 from hgschmie/fix-2491\n\nFix transactions for non-autocommitting handles"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623434ddde8ed798d2ed593",
    "number": 2489,
    "body": null,
    "head_branch": "build-tweaks",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2489)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2489&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2489&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2489&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2489&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2489&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2489&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2489&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2489&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2489&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2489&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2489&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2489&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2489) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2489&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2489&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2489 from hgschmie/build-tweaks\n\nremove some cruft from the build"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623434edde8ed798d2ed594",
    "number": 2488,
    "body": "Currently does not create an artifact, just runs tests.\n\nTests are disabled by default (because they use testcontainers which is\nslow).\n\nRun tests with `mvn -Dbasepom.test.skip=false -pl :jdbi3-mysql clean test`\n",
    "head_branch": "mysql-support",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2488)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2488&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2488&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2488&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2488&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2488&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2488&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2488&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2488&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2488&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2488&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2488&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2488&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2488) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2488&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2488&metric=new_duplicated_lines_density&view=list)\n\n",
      "related to #2402 (tests run are related to the queries in question) and #2415"
    ],
    "commit_messages": [
      "Merge pull request #2488 from hgschmie/mysql-support\n\nStart a mysql module"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623434fdde8ed798d2ed595",
    "number": 2487,
    "body": "The OtjPostgres project ships its artifact as an automatic module with\nfilename based module name. It is strongly discouraged to ship any JPMS\nenabled project that depends on automatic modules with filename based\nmodule names. We have reached out to the OtjPostgres project and\nproposed a change that would fix this.\n\nIf they ship a version that fixes this before we are ready to move to\nfull JPMS support, we will un-deprecate this class, otherwise it will be\nremoved with our switch to JPMS.\n",
    "head_branch": "deprecate-otj",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2487)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2487&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2487&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2487&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2487&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2487&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2487&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2487&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2487&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2487&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2487&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2487&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2487&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2487) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2487&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2487&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2487 from hgschmie/deprecate-otj\n\ndeprecated otj-postgres support"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234350dde8ed798d2ed596",
    "number": 2486,
    "body": "Use aggregate goal, don't build a doc javadoc jar\n",
    "head_branch": "use-aggregate-javadoc",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2486)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2486&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2486&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2486&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2486&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2486&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2486&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2486&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2486&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2486&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2486&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2486&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2486&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2486) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2486&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2486&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2486 from hgschmie/use-aggregate-javadoc\n\njavadocs for jdbi.org site"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234351dde8ed798d2ed597",
    "number": 2484,
    "body": "- adds tests for different spring versions\n- test multiple testcontainers versions\n",
    "head_branch": "dep-updates",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2484)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2484&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2484&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2484&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2484&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2484&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2484&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2484&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2484&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2484&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2484&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2484&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2484&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2484) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2484&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2484&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2484 from hgschmie/dep-updates\n\nDependency updates"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234352dde8ed798d2ed598",
    "number": 2483,
    "body": null,
    "head_branch": "kotlin-upgrades",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2483)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2483&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2483&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2483&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2483&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2483&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2483&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2483&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2483&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2483&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2483&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2483&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2483&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2483) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2483&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2483&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2483 from hgschmie/kotlin-upgrades\n\nBump kotlin tooling versions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234353dde8ed798d2ed599",
    "number": 2482,
    "body": "Use a post-3.5.1 maven-javadoc-plugin with MJAVADOC-769 and\nMJAVADOC-770 fixes applied.\n",
    "head_branch": "javadoc-post-351",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2482)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2482&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2482&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2482&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2482&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2482&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2482&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2482&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2482&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2482&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2482&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2482&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2482&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2482) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2482&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2482&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2482 from hgschmie/javadoc-post-351\n\nFix javadoc generation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234354dde8ed798d2ed59a",
    "number": 2481,
    "body": "Fixes #2471\n",
    "head_branch": "issue-2471",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2481)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2481&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2481&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2481&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2481&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2481&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2481&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2481&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2481&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2481&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2481&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2481&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2481&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2481) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2481&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2481&metric=new_duplicated_lines_density&view=list)\n\n",
      "Hey! I think this PR just destroyed reading input parameter json (jdbi version 3.41.1):\r\n```\r\n:data->>'field'\r\n```\r\nresulting in an error `Missing named parameter 'data-' in binding:...`. Wrapping the param helps though:\r\n```\r\n(:data)->>'field'\r\n```\r\nIs it intentional?\r\n",
      "Thank you for reporting this regression. @hgschmie , do we need to revert this change?",
      "Or, maybe it would be sufficient to allow `-` only when it is followed by more alphabetic characters, so that `->` and `-3` are unambiguously operators not names.",
      "@gokristian https://github.com/jdbi/jdbi/pull/2499 should fix this. I plan to release a 3.41.3 around this regression.",
      "I changed the grammar to match the old version and not accept `-` at the end. To be able to differentiate between \"next character is alphanumeric or not\", this requires lookahead which can probably be done by the lexer but I don't know exactly how. :-) ",
      "@gokristian again, thank you for reporting the regression. Please try with 3.41.3, this fixes the problem.",
      "@hgschmie No problem, thank you for fixing it. 3.41.3 works great with param json field accessor! "
    ],
    "commit_messages": [
      "Merge pull request #2481 from hgschmie/issue-2471\n\nSupport '.' and '-' as characters in named parameters"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234355dde8ed798d2ed59b",
    "number": 2480,
    "body": "Run tests like the version testing; don't run all the checkers\n",
    "head_branch": "pg-workflow",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2480)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2480&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2480&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2480&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2480&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2480&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2480&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2480&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2480&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2480&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2480&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2480&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2480&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2480) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2480&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2480&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2480 from hgschmie/pg-workflow\n\nless work in pg tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234356dde8ed798d2ed59c",
    "number": 2479,
    "body": "Fixes #2478",
    "head_branch": "handle-afterCommit-throws",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2479)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2479&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2479&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2479&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2479&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2479&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2479&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2479&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2479&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2479&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2479&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2479&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2479&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2479) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2479&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2479&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Use a state machine for transaction handler\n\nreplace the three booleans with a simple state machine:\n\n1) \"OUTSIDE_TRANSACTION\" -- begin(Handle) --> \"AFTER_BEGIN\".\n   Idempotent operation, can be called many times.\n\n2) \"AFTER_BEGIN\" -- inTransaction(Handle) --> \"OUTSIDE_TRANSACTION\".\n    Wraps the SQL operation, executes it and then commits or rolls back.\n    Goes through an intermediate state \"IN_TRANSACTION\" that only exists\n    between the begin of the SQL operation and commit/rollback\n\n3) \"AFTER_BEGIN\" | \"IN_TRANSACTION\" -- commit(Handle) | rollback(Handle) --> \"OUTSIDE_TRANSACTION\".\n   Either operation move the state back to the initial state and restore the auto commit state.\n   Calling rollback() after commit() has no effect."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234357dde8ed798d2ed59d",
    "number": 2476,
    "body": null,
    "head_branch": "graalvm-ci",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2476)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2476&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2476&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2476&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2476&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2476&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2476&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2476&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2476&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2476&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2476&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2476&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2476&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2476) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2476&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2476&metric=new_duplicated_lines_density&view=list)\n\n",
      "Have you actually gotten this to work? I get\r\n\r\n```\r\nFailures (1):\r\n  JUnit Jupiter\r\n    => java.lang.NoSuchMethodError: java.lang.invoke.MethodHandle.close()\r\n       org.junit.jupiter.engine.descriptor.AbstractExtensionContext.<clinit>(AbstractExtensionContext.java:43)\r\n       java.base@17.0.6/java.lang.Class.ensureInitialized(DynamicHub.java:528)\r\n```\r\n",
      "No, I got stuck there for now. I will take another look at some point.",
      "Any progress on this? Thanks.",
      "Hi @Eng-Fouad , sorry I did not look any more yet. I did try the suggested junit configuration tweaks but still ran into the NoSuchMethodError above, and didn't really have the tools to understand what went wrong.\r\nI will take a look again at some point but cannot promise urgency. Please feel free to take the current work and experiment and see if you can make it work.\r\n\r\nWe will get this working eventually.",
      "I rebased the branch and adopted the latest version of the native plugin. Let's see how the build does.",
      "Ok, the good news is the newer Graal and plugin versions seem to make development a lot easier.",
      "Now I am stuck on getting `Mockito` to work.\r\n\r\n```\r\n  JUnit Jupiter:TestArgumentsRegistry:testWaffleLong()\r\n    MethodSource [className = 'org.jdbi.v3.core.argument.TestArgumentsRegistry', methodName = 'testWaffleLong', methodParameterTypes = '']\r\n    => org.graalvm.nativeimage.MissingReflectionRegistrationError: The program tried to reflectively access the proxy class inheriting [org.mockito.plugins.MockMaker] without it being registered for runtime reflection. Add [org.mockito.plugins.MockMaker] to the dynamic-proxy metadata to solve this problem. Note: The order of interfaces used to create proxies matters. See https://www.graalvm.org/latest/reference-manual/native-image/metadata/#dynamic-proxy for help.\r\n       org.graalvm.nativeimage.builder/com.oracle.svm.core.reflect.MissingReflectionRegistrationUtils.forProxy(MissingReflectionRegistrationUtils.java:89)\r\n       org.graalvm.nativeimage.builder/com.oracle.svm.core.reflect.proxy.DynamicProxySupport.getProxyClass(DynamicProxySupport.java:176)\r\n       java.base@21.0.1/java.lang.reflect.Proxy.getProxyConstructor(Proxy.java:47)\r\n       java.base@21.0.1/java.lang.reflect.Proxy.newProxyInstance(Proxy.java:1034)\r\n       org.mockito.internal.configuration.plugins.PluginLoader.loadPlugin(PluginLoader.java:77)\r\n       [...]\r\n       Suppressed: java.lang.NullPointerException\r\n         org.mockito.junit.jupiter.MockitoExtension.afterEach(MockitoExtension.java:190)\r\n         [...]\r\n```\r\n\r\nI thought the metadata repository would take care of making Mockito work:\r\n\r\n```\r\n[INFO] Downloaded GraalVM reachability metadata repository from file:/home/steven/.m2/repository/org/graalvm/buildtools/graalvm-reachability-metadata/0.9.28/graalvm-reachability-metadata-0.9.28-repository.zip\r\n[INFO] [graalvm reachability metadata repository for org.mockito:mockito-core:5.7.0]: Configuration directory not found. Trying latest version.\r\n[INFO] [graalvm reachability metadata repository for org.mockito:mockito-core:5.7.0]: Configuration directory is org.mockito/mockito-core/4.8.1\r\n```",
      "> Now I am stuck on getting `Mockito` to work.\r\n> \r\n> ```\r\n>   JUnit Jupiter:TestArgumentsRegistry:testWaffleLong()\r\n>     MethodSource [className = 'org.jdbi.v3.core.argument.TestArgumentsRegistry', methodName = 'testWaffleLong', methodParameterTypes = '']\r\n>     => org.graalvm.nativeimage.MissingReflectionRegistrationError: The program tried to reflectively access the proxy class inheriting [org.mockito.plugins.MockMaker] without it being registered for runtime reflection. Add [org.mockito.plugins.MockMaker] to the dynamic-proxy metadata to solve this problem. Note: The order of interfaces used to create proxies matters. See https://www.graalvm.org/latest/reference-manual/native-image/metadata/#dynamic-proxy for help.\r\n>        org.graalvm.nativeimage.builder/com.oracle.svm.core.reflect.MissingReflectionRegistrationUtils.forProxy(MissingReflectionRegistrationUtils.java:89)\r\n>        org.graalvm.nativeimage.builder/com.oracle.svm.core.reflect.proxy.DynamicProxySupport.getProxyClass(DynamicProxySupport.java:176)\r\n>        java.base@21.0.1/java.lang.reflect.Proxy.getProxyConstructor(Proxy.java:47)\r\n>        java.base@21.0.1/java.lang.reflect.Proxy.newProxyInstance(Proxy.java:1034)\r\n>        org.mockito.internal.configuration.plugins.PluginLoader.loadPlugin(PluginLoader.java:77)\r\n>        [...]\r\n>        Suppressed: java.lang.NullPointerException\r\n>          org.mockito.junit.jupiter.MockitoExtension.afterEach(MockitoExtension.java:190)\r\n>          [...]\r\n> ```\r\n> \r\n> I thought the metadata repository would take care of making Mockito work:\r\n> \r\n> ```\r\n> [INFO] Downloaded GraalVM reachability metadata repository from file:/home/steven/.m2/repository/org/graalvm/buildtools/graalvm-reachability-metadata/0.9.28/graalvm-reachability-metadata-0.9.28-repository.zip\r\n> [INFO] [graalvm reachability metadata repository for org.mockito:mockito-core:5.7.0]: Configuration directory not found. Trying latest version.\r\n> [INFO] [graalvm reachability metadata repository for org.mockito:mockito-core:5.7.0]: Configuration directory is org.mockito/mockito-core/4.8.1\r\n> ```\r\n\r\nIt looks [Metadata for Mockito](https://github.com/oracle/graalvm-reachability-metadata/tree/master/metadata/org.mockito/mockito-core/4.8.1) does not include `proxy-config.json`. Try to add it [manually](https://www.graalvm.org/jdk17/reference-manual/native-image/guides/configure-dynamic-proxies/):\r\n\r\nproxy-config.json:\r\n```\r\n[{\"interfaces\":[\"org.mockito.plugins.MockMaker\"]}]\r\n```\r\n\r\nThen use either `-H:DynamicProxyConfigurationFiles=proxy-config.json` or `-H:DynamicProxyConfigurationResources=proxy-config.json`.",
      "So, by enabling the agent experimental predefined classes, the proxy starts working.\r\nHowever then I run into:\r\n```\r\n========================================================================================================================\r\nGraalVM Native Image: Generating 'native-tests' (executable)...\r\n========================================================================================================================\r\n[1/8] Initializing...\r\n                                                                                    (0.0s @ 0.14GB)\r\nError: More than one predefined class with the same name provided: org.mockito.codegen.Connection$MockitoMock$a3lier1op99200N\r\n```\r\n",
      "I filed: https://github.com/mockito/mockito/issues/3183",
      "Some minor progress here - by reducing Mockito usage to only interfaces, and disabling codegen and using Proxy mocks instead, the \"more than one class\" problem goes away and instead I get some test failures instead. Still more digging needed though.",
      "We now removed all uses of the bytebuddy agent and Mockito only runs with pure JVM proxies in mainline. Rebased on top of that, running the build again...",
      "```\r\nFailures (3):\r\n  JUnit Jupiter:ConstructorMapperTest:allColumnsOfNullableNestedObjectAbsent()\r\n    MethodSource [className = 'org.jdbi.v3.core.mapper.reflect.ConstructorMapperTest', methodName = 'allColumnsOfNullableNestedObjectAbsent', methodParameterTypes = '']\r\n    => java.lang.IllegalArgumentException: Instance factory 'org.jdbi.v3.core.mapper.reflect.ConstructorMapperTest$NullableNestedBean(java.lang.String,org.jdbi.v3.core.mapper.reflect.ConstructorMapperTest$NullableParameterBean)' parameter '[nested]' has no matching columns in the result set. Verify that the Java compiler is configured to emit parameter names, that your result set has the columns expected, annotate the parameter names explicitly with @ColumnName, or annotate nullable parameters as @Nullable\r\n       org.jdbi.v3.core.mapper.reflect.ConstructorMapper.createSpecializedRowMapper(ConstructorMapper.java:268)\r\n       org.jdbi.v3.core.mapper.reflect.ConstructorMapper.specialize(ConstructorMapper.java:189)\r\n       org.jdbi.v3.core.result.internal.ResultSetResultIterator.<init>(ResultSetResultIterator.java:54)\r\n       org.jdbi.v3.core.result.internal.ResultSetResultIterable.iterator(ResultSetResultIterable.java:51)\r\n       org.jdbi.v3.core.result.ResultIterable.one(ResultIterable.java:171)\r\n       org.jdbi.v3.core.mapper.reflect.ConstructorMapperTest.selectOne(ConstructorMapperTest.java:56)\r\n       org.jdbi.v3.core.mapper.reflect.ConstructorMapperTest.allColumnsOfNullableNestedObjectAbsent(ConstructorMapperTest.java:241)\r\n       java.base@21.0.1/java.lang.reflect.Method.invoke(Method.java:580)\r\n       java.base@21.0.1/java.util.ArrayList.forEach(ArrayList.java:1596)\r\n       java.base@21.0.1/java.util.ArrayList.forEach(ArrayList.java:1596)\r\n  JUnit Jupiter:ConstructorMapperTest:testNullableParameterAbsent()\r\n    MethodSource [className = 'org.jdbi.v3.core.mapper.reflect.ConstructorMapperTest', methodName = 'testNullableParameterAbsent', methodParameterTypes = '']\r\n    => java.lang.IllegalArgumentException: Instance factory 'org.jdbi.v3.core.mapper.reflect.ConstructorMapperTest$NullableParameterBean(java.lang.String,int)' parameter '[s]' has no matching columns in the result set. Verify that the Java compiler is configured to emit parameter names, that your result set has the columns expected, annotate the parameter names explicitly with @ColumnName, or annotate nullable parameters as @Nullable\r\n       org.jdbi.v3.core.mapper.reflect.ConstructorMapper.createSpecializedRowMapper(ConstructorMapper.java:268)\r\n       org.jdbi.v3.core.mapper.reflect.ConstructorMapper.specialize(ConstructorMapper.java:189)\r\n       org.jdbi.v3.core.result.internal.ResultSetResultIterator.<init>(ResultSetResultIterator.java:54)\r\n       org.jdbi.v3.core.result.internal.ResultSetResultIterable.iterator(ResultSetResultIterable.java:51)\r\n       org.jdbi.v3.core.result.ResultIterable.one(ResultIterable.java:171)\r\n       org.jdbi.v3.core.mapper.reflect.ConstructorMapperTest.selectOne(ConstructorMapperTest.java:56)\r\n       org.jdbi.v3.core.mapper.reflect.ConstructorMapperTest.testNullableParameterAbsent(ConstructorMapperTest.java:121)\r\n       java.base@21.0.1/java.lang.reflect.Method.invoke(Method.java:580)\r\n       java.base@21.0.1/java.util.ArrayList.forEach(ArrayList.java:1596)\r\n       java.base@21.0.1/java.util.ArrayList.forEach(ArrayList.java:1596)\r\n  JUnit Jupiter:ConstructorMapperTest:nullableNestedNullableParameterAbsent()\r\n    MethodSource [className = 'org.jdbi.v3.core.mapper.reflect.ConstructorMapperTest', methodName = 'nullableNestedNullableParameterAbsent', methodParameterTypes = '']\r\n    => java.lang.IllegalArgumentException: Instance factory 'org.jdbi.v3.core.mapper.reflect.ConstructorMapperTest$NullableParameterBean(java.lang.String,int)' parameter '[s]' has no matching columns in the result set. Verify that the Java compiler is configured to emit parameter names, that your result set has the columns expected, annotate the parameter names explicitly with @ColumnName, or annotate nullable parameters as @Nullable\r\n       org.jdbi.v3.core.mapper.reflect.ConstructorMapper.createSpecializedRowMapper(ConstructorMapper.java:268)\r\n       org.jdbi.v3.core.mapper.reflect.ConstructorMapper.createSpecializedRowMapper(ConstructorMapper.java:247)\r\n       org.jdbi.v3.core.mapper.reflect.ConstructorMapper.specialize(ConstructorMapper.java:189)\r\n       org.jdbi.v3.core.result.internal.ResultSetResultIterator.<init>(ResultSetResultIterator.java:54)\r\n       org.jdbi.v3.core.result.internal.ResultSetResultIterable.iterator(ResultSetResultIterable.java:51)\r\n       org.jdbi.v3.core.result.ResultIterable.one(ResultIterable.java:171)\r\n       org.jdbi.v3.core.mapper.reflect.ConstructorMapperTest.selectOne(ConstructorMapperTest.java:56)\r\n       org.jdbi.v3.core.mapper.reflect.ConstructorMapperTest.nullableNestedNullableParameterAbsent(ConstructorMapperTest.java:232)\r\n       java.base@21.0.1/java.lang.reflect.Method.invoke(Method.java:580)\r\n       java.base@21.0.1/java.util.ArrayList.forEach(ArrayList.java:1596)\r\n       [...]\r\n```\r\n\r\nI guess some reflection metadata is being lost, despite using the agent.",
      "> ```\r\n> Failures (3):\r\n>   JUnit Jupiter:ConstructorMapperTest:allColumnsOfNullableNestedObjectAbsent()\r\n>     MethodSource [className = 'org.jdbi.v3.core.mapper.reflect.ConstructorMapperTest', methodName = 'allColumnsOfNullableNestedObjectAbsent', methodParameterTypes = '']\r\n>     => java.lang.IllegalArgumentException: Instance factory 'org.jdbi.v3.core.mapper.reflect.ConstructorMapperTest$NullableNestedBean(java.lang.String,org.jdbi.v3.core.mapper.reflect.ConstructorMapperTest$NullableParameterBean)' parameter '[nested]' has no matching columns in the result set. Verify that the Java compiler is configured to emit parameter names, that your result set has the columns expected, annotate the parameter names explicitly with @ColumnName, or annotate nullable parameters as @Nullable\r\n>        org.jdbi.v3.core.mapper.reflect.ConstructorMapper.createSpecializedRowMapper(ConstructorMapper.java:268)\r\n>        org.jdbi.v3.core.mapper.reflect.ConstructorMapper.specialize(ConstructorMapper.java:189)\r\n>        org.jdbi.v3.core.result.internal.ResultSetResultIterator.<init>(ResultSetResultIterator.java:54)\r\n>        org.jdbi.v3.core.result.internal.ResultSetResultIterable.iterator(ResultSetResultIterable.java:51)\r\n>        org.jdbi.v3.core.result.ResultIterable.one(ResultIterable.java:171)\r\n>        org.jdbi.v3.core.mapper.reflect.ConstructorMapperTest.selectOne(ConstructorMapperTest.java:56)\r\n>        org.jdbi.v3.core.mapper.reflect.ConstructorMapperTest.allColumnsOfNullableNestedObjectAbsent(ConstructorMapperTest.java:241)\r\n>        java.base@21.0.1/java.lang.reflect.Method.invoke(Method.java:580)\r\n>        java.base@21.0.1/java.util.ArrayList.forEach(ArrayList.java:1596)\r\n>        java.base@21.0.1/java.util.ArrayList.forEach(ArrayList.java:1596)\r\n>   JUnit Jupiter:ConstructorMapperTest:testNullableParameterAbsent()\r\n>     MethodSource [className = 'org.jdbi.v3.core.mapper.reflect.ConstructorMapperTest', methodName = 'testNullableParameterAbsent', methodParameterTypes = '']\r\n>     => java.lang.IllegalArgumentException: Instance factory 'org.jdbi.v3.core.mapper.reflect.ConstructorMapperTest$NullableParameterBean(java.lang.String,int)' parameter '[s]' has no matching columns in the result set. Verify that the Java compiler is configured to emit parameter names, that your result set has the columns expected, annotate the parameter names explicitly with @ColumnName, or annotate nullable parameters as @Nullable\r\n>        org.jdbi.v3.core.mapper.reflect.ConstructorMapper.createSpecializedRowMapper(ConstructorMapper.java:268)\r\n>        org.jdbi.v3.core.mapper.reflect.ConstructorMapper.specialize(ConstructorMapper.java:189)\r\n>        org.jdbi.v3.core.result.internal.ResultSetResultIterator.<init>(ResultSetResultIterator.java:54)\r\n>        org.jdbi.v3.core.result.internal.ResultSetResultIterable.iterator(ResultSetResultIterable.java:51)\r\n>        org.jdbi.v3.core.result.ResultIterable.one(ResultIterable.java:171)\r\n>        org.jdbi.v3.core.mapper.reflect.ConstructorMapperTest.selectOne(ConstructorMapperTest.java:56)\r\n>        org.jdbi.v3.core.mapper.reflect.ConstructorMapperTest.testNullableParameterAbsent(ConstructorMapperTest.java:121)\r\n>        java.base@21.0.1/java.lang.reflect.Method.invoke(Method.java:580)\r\n>        java.base@21.0.1/java.util.ArrayList.forEach(ArrayList.java:1596)\r\n>        java.base@21.0.1/java.util.ArrayList.forEach(ArrayList.java:1596)\r\n>   JUnit Jupiter:ConstructorMapperTest:nullableNestedNullableParameterAbsent()\r\n>     MethodSource [className = 'org.jdbi.v3.core.mapper.reflect.ConstructorMapperTest', methodName = 'nullableNestedNullableParameterAbsent', methodParameterTypes = '']\r\n>     => java.lang.IllegalArgumentException: Instance factory 'org.jdbi.v3.core.mapper.reflect.ConstructorMapperTest$NullableParameterBean(java.lang.String,int)' parameter '[s]' has no matching columns in the result set. Verify that the Java compiler is configured to emit parameter names, that your result set has the columns expected, annotate the parameter names explicitly with @ColumnName, or annotate nullable parameters as @Nullable\r\n>        org.jdbi.v3.core.mapper.reflect.ConstructorMapper.createSpecializedRowMapper(ConstructorMapper.java:268)\r\n>        org.jdbi.v3.core.mapper.reflect.ConstructorMapper.createSpecializedRowMapper(ConstructorMapper.java:247)\r\n>        org.jdbi.v3.core.mapper.reflect.ConstructorMapper.specialize(ConstructorMapper.java:189)\r\n>        org.jdbi.v3.core.result.internal.ResultSetResultIterator.<init>(ResultSetResultIterator.java:54)\r\n>        org.jdbi.v3.core.result.internal.ResultSetResultIterable.iterator(ResultSetResultIterable.java:51)\r\n>        org.jdbi.v3.core.result.ResultIterable.one(ResultIterable.java:171)\r\n>        org.jdbi.v3.core.mapper.reflect.ConstructorMapperTest.selectOne(ConstructorMapperTest.java:56)\r\n>        org.jdbi.v3.core.mapper.reflect.ConstructorMapperTest.nullableNestedNullableParameterAbsent(ConstructorMapperTest.java:232)\r\n>        java.base@21.0.1/java.lang.reflect.Method.invoke(Method.java:580)\r\n>        java.base@21.0.1/java.util.ArrayList.forEach(ArrayList.java:1596)\r\n>        [...]\r\n> ```\r\n> \r\n> I guess some reflection metadata is being lost, despite using the agent.\r\n\r\nAccording to [GraalVM maven plugin docs](https://graalvm.github.io/native-build-tools/latest/maven-plugin.html#agent-support-running-application):\r\n\r\n> Executing your application with the agent is more involved and requires you to configure a separate mojo execution which allows forking the Java process.\r\n\r\nAlso:\r\n\r\n> The agent generates the native configuration files in subdirectories of target/native/agent-output. Although those files will be automatically used if you run your build with the agent enabled, you should consider reviewing the generated files and adding them to your sources instead.\r\n\r\nSo the sole purpose of the agent is to help generating the native metadata configurations (i.e. `refelct-config.json`, `proxy-config.json`, etc.) which can then be included when compiling the app to native.\r\n\r\nHow about creating the native metadata configuration files manually? See this [gist](https://gist.github.com/Eng-Fouad/7b5925481dd391fcc74487a68484b987). In addition to the classes mentioned in the gist, we need to include all classes (in tests) that are being constructed/accessed by reflection. For example, the following beans need to be registered in `reflect-config`:\r\n\r\nhttps://github.com/jdbi/jdbi/blob/5a33a0fa036d47920deba8cc0e1aa00312b90036/core/src/test/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapperTest.java#L42-L47\r\n\r\nFor reference, see how they maintain `reflect-config.json` files in Netty project: https://github.com/search?q=repo%3Anetty%2Fnetty%20reflect-config.json&type=code\r\nFor Spring project, it seems they build configuration files dynamically by code: https://github.com/spring-projects/spring-framework/blob/main/spring-core/src/main/java/org/springframework/aot/nativex/NativeConfigurationWriter.java#L80",
      "> How about creating the native metadata configuration files manually?\r\n\r\nThe main reason is that it is a pain in the ass to get right, for something that a human really \"shouldn't\" have to write, and there are many hundreds of test cases :)\r\nPlus, then we have to manually maintain it going forward, for every test we write that uses SqlObject.\r\nI was hoping the agent would at least get me a starting point that ran the test code. I'll try to manually write one at some point. Hopefully what the agent comes up with is at least close :)",
      "Thanks for the reference to the Netty config - theirs is very short, so I can see how it's not too big of a deal to maintain. Ours is probably going to be much longer, because we have a ton of random types both in main and test that we access via reflection.",
      "> Thanks for the reference to the Netty config - theirs is very short, so I can see how it's not too big of a deal to maintain. Ours is probably going to be much longer, because we have a ton of random types both in main and test that we access via reflection.\r\n\r\nProbably it is better to create/maintain configs for main sources manually, and use the agent for test sources only.",
      "Ok, I have a bit more information on the test failures. It looks like a constructor parameter for a test case `@Nullable String s` loses its annotation and looks like `String s` in native-image, which means Jdbi thinks it should be required. Not sure yet if this is something the agent missed, or if it is a deeper bug in constructor parameter annotation handling.",
      "I looked through the `reflect-config.json` syntax and didn't see anything about including or excluding annotations. So, I guess the agent cannot generate config around this. Therefore this is a Graal bug?",
      "Interesting, I extracted the code in question into a sample project to have a reproducer, and it works there ???",
      "Ok, so I think the problem is somehow introduced from the jdbi parent pom. When I inherit from our Jdbi build pom, the test fails. When I inline the native-image configuration and depend on basepom, skipping jdbi build configuration, the test passes.",
      "I think this is a native-image bug.\r\nI filed https://github.com/graalvm/native-build-tools/issues/562",
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2476) **Quality Gate passed**  \nThe SonarCloud Quality Gate passed, but some issues were introduced.\n\n[1 New issue](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2476&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2476&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2476&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2476)\n\n",
      "Ok, I added a workaround to the issue I filed above, which we cannot merge, but should get us moving forward to the next problem for now at least.\r\n\r\nAnd...\r\n\r\n```\r\nError: Classes that should be initialized at run time got initialized during image building:\r\n org.junit.jupiter.api.condition.JRE was unintentionally initialized at build time. To see why org.junit.jupiter.api.condition.JRE got initialized use --trace-class-initialization=org.junit.jupiter.api.condition.JRE\r\nTo see how the classes got initialized, use --trace-class-initialization=org.junit.jupiter.api.condition.JRE\r\n```\r\n\r\n🤔 I'll have to come back to this later",
      "> Ok, I added a workaround to the issue I filed above, which we cannot merge, but should get us moving forward to the next problem for now at least.\n> \n> \n> \n> And...\n> \n> \n> \n> ```\n> \n> Error: Classes that should be initialized at run time got initialized during image building:\n> \n>  org.junit.jupiter.api.condition.JRE was unintentionally initialized at build time. To see why org.junit.jupiter.api.condition.JRE got initialized use --trace-class-initialization=org.junit.jupiter.api.condition.JRE\n> \n> To see how the classes got initialized, use --trace-class-initialization=org.junit.jupiter.api.condition.JRE\n> \n> ```\n> \n> \n> \n> 🤔 I'll have to come back to this later\n\nIs this relevant? [the release notes of JUnit 5.10.0](https://junit.org/junit5/docs/current/release-notes/index.html#deprecations-and-breaking-changes):\n\n> Building native images with GraalVM now requires configuring the build arg --initialize-at-build-time=org.junit.platform.launcher.core.LauncherConfig and --initialize-at-build-time=org.junit.jupiter.engine.config.InstantiatingConfigurationParameterConverter.",
      "It could be! I don't get why `core` module would work OK but `testing` wouldn't, but I'll give that a try next time I have a moment to look at this.",
      "> It could be! I don't get why `core` module would work OK but `testing` wouldn't, but I'll give that a try next time I have a moment to look at this.\r\n\r\n\r\n\r\n> It could be! I don't get why `core` module would work OK but `testing` wouldn't, but I'll give that a try next time I have a moment to look at this.\r\n\r\n`native-maven-plugin` got new updates, maybe it would help:\r\n\r\n```\r\n<dep.plugin.native.version>0.10.3</dep.plugin.native.version>\r\n<dep.junit5.version>5.10.0</dep.junit5.version>\r\n```",
      "Cool, on to a new problem -\r\nhttps://github.com/graalvm/native-build-tools/issues/541",
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2476) **Quality Gate passed**  \nIssues  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [2 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2476&issueStatuses=OPEN,CONFIRMED&sinceLeakPeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/accepted-16px.png '') [0 Accepted issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2476&issueStatuses=ACCEPTED)\n\nMeasures  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2476&issueStatuses=OPEN,CONFIRMED&sinceLeakPeriod=true)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0.0% Coverage on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2476&metric=new_coverage&view=list)  \n![](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/passed-16px.png '') [0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2476&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2476)\n\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234358dde8ed798d2ed59e",
    "number": 2473,
    "body": "Some small fixes that came out of the JPMS work\n\n- don't add `basepom.it.skip` to maven modules that have integration\n  tests, add it globally.\n- have the core artifact declare a dep on checker-qual (which is\n  ignored by the dep plugin so it never showed as a bug and is an\n  optional provided dep. This was found by the JPMS work).\n- move version for gson-java8 to the build pom\n- change the way we add JPMS automatic named modules, don't use\n  the .jdbi-parent files any longer; only check and enforce for\n  jar artifacts. Activate the automatic module name by checking\n  for module-info.java file.\n",
    "head_branch": "pom-fixes",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2473)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2473&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2473&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2473&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2473&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2473&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2473&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2473&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2473&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2473&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2473&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2473&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2473&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2473) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2473&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2473&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2473 from hgschmie/pom-fixes\n\npom fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234359dde8ed798d2ed59f",
    "number": 2472,
    "body": null,
    "head_branch": "pipeline-fixes",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2472)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2472&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2472&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2472&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2472&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2472&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2472&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2472&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2472&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2472&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2472&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2472&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2472&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2472) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2472&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2472&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2472 from hgschmie/pipeline-fixes\n\nminor pipeline fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623435adde8ed798d2ed5a0",
    "number": 2470,
    "body": "*THIS IS NOT FOR THE FAINT OF HEART*\n\nAdd full JPMS module support using the moditect jpms tooling.\n\nAdds an integration test suite that integration-tests all generated jars using their\nown unit tests.\n\nThis is at best lightly tested and probably requires a lot of additional works\n\n- Main jars are modularized using the moditect jpms tooling\n- Test jars are non-modularized\n\nPlease test. good luck. ;-)\n\nSee also #2453 / @SentryMan\n",
    "head_branch": "jpms",
    "is_a_fork": true,
    "comments": [
      "the only thing I can really say is you should define a proper module-info file and have moditect pick it up(much easier to read than XML). [see this](https://github.com/javalin/javalin/pull/1923/files)",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2470)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2470&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2470&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2470&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2470&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2470&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2470&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2470&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2470&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2470&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2470&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2470&resolved=false&types=CODE_SMELL) [8 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2470&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2470) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2470&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2470&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623435bdde8ed798d2ed5a1",
    "number": 2469,
    "body": null,
    "head_branch": "sysprop-fix",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2469)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2469&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2469&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2469&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2469&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2469&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2469&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2469&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2469&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2469&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2469&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2469&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2469&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2469) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2469&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2469&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2469 from hgschmie/sysprop-fix\n\nremove deprecated setting"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623435cdde8ed798d2ed5a2",
    "number": 2468,
    "body": null,
    "head_branch": "build-fix",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2468)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2468&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2468&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2468&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2468&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2468&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2468&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2468&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2468&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2468&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2468&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2468&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2468&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2468) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2468&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2468&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2468 from hgschmie/build-fix\n\nsome minor build fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623435ddde8ed798d2ed5a3",
    "number": 2466,
    "body": null,
    "head_branch": "basepom-55",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2466)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2466&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2466&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2466&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2466&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2466&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2466&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2466&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2466&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2466&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2466&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2466&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2466&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2466) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2466&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2466&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2466 from hgschmie/basepom-55\n\nbump basepom to 55"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623435edde8ed798d2ed5a4",
    "number": 2465,
    "body": null,
    "head_branch": "maven-3.9.4",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2465)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2465&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2465&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2465&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2465&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2465&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2465&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2465&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2465&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2465&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2465&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2465&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2465&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2465) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2465&metric=duplicated_lines_density&view=list) No Duplication information\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2465 from jdbi/maven-3.9.4\n\nupdate wrapper to 3.9.4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623435fdde8ed798d2ed5a5",
    "number": 2464,
    "body": null,
    "head_branch": "21-ea",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2464)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2464&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2464&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2464&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2464&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2464&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2464&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2464&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2464&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2464&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2464&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2464&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2464&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2464) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2464&metric=duplicated_lines_density&view=list) No Duplication information\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2464 from hgschmie/21-ea\n\nupdate JDKs for CI testing, use kotlin 1.9.0 release"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234360dde8ed798d2ed5a6",
    "number": 2463,
    "body": "Follow up to #2448\r\n\r\nI'm not sure how to test the JavaDoc links. Please double check.",
    "head_branch": "jordanz/documentation-for-handle-callback-decorator",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2463)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2463&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2463&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2463&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2463&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2463&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2463&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2463&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2463&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2463&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2463&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2463&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2463&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2463) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2463&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2463&metric=new_duplicated_lines_density&view=list)\n\n",
      "Thank you so much! I appreciate the extra effort. I plan to cut a 3.41.0-rc1 today (once @stevenschlansker has approved #2462) so you can update your code.",
      "If you use intellij, install the asciidoc plugin and add this in the configuration (Languages&Frameworks -> AsciiDoc):\r\n\r\n<img width=\"600\" alt=\"Screenshot 2023-08-10 at 08 51 55\" src=\"https://github.com/jdbi/jdbi/assets/39495/7501c0f6-bf20-4395-9da2-3aa7bb810e71\">\r\n\r\nThen you can click the links in the asciidoc document.\r\n",
      "I cut a 3.41.0-rc1 release which should hit central soon. As this change is a major part of this release, please test with the 3.41.0-rc1 and lmk if that works for you. Unfortunately you may need to do some minor code changes (rename Handler -> HandleCallbackDecorator). "
    ],
    "commit_messages": [
      "Merge pull request #2463 from Randgalt/jordanz/documentation-for-handle-callback-decorator\n\nAdd documentation for HandleCallbackDecorator"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234361dde8ed798d2ed5a7",
    "number": 2462,
    "body": null,
    "head_branch": "dep-updates",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2462)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2462&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2462&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2462&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2462&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2462&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2462&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2462&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2462&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2462&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2462&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2462&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2462&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2462) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2462&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2462&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2462 from hgschmie/dep-updates\n\nUpdate dependencies and plugins"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234362dde8ed798d2ed5a8",
    "number": 2461,
    "body": "- fix pom sort problem\n- update release notes\n",
    "head_branch": "pom-and-doc-fix",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2461)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2461&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2461&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2461&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2461&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2461&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2461&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2461&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2461&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2461&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2461&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2461&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2461&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2461) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2461&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2461&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2461 from hgschmie/pom-and-doc-fix\n\npom and doc fix"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234363dde8ed798d2ed5a9",
    "number": 2460,
    "body": "- Rename \"Handler\" to \"HandleCallbackDecorator\". \"Handler\" is a way too generic name and there is potential for confusion with \"Handle\" which is a main concept in Jdbi while this change introduces a minor feature.\r\n- Mark the added code with `@Alpha` annotation, as the API should not have been set in stone.",
    "head_branch": "rework-handle-callback-decorator",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2460)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2460&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2460&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2460&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2460&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2460&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2460&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2460&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2460&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2460&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2460&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2460&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2460&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2460) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2460&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2460&metric=new_duplicated_lines_density&view=list)\n\n",
      "TBH, I am pretty unhappy that #2448 was merged right before the 3.40.0 release and then immediately released. This PR marks the code as `@Alpha` (it should have been alpha to begin with IMHO).\r\n\r\nIt is not clear to me what that code is intended to accomplish. \r\n\r\nThe way I see it, the code can do one of two things:\r\n\r\nOne use case is to select an alternate HandleCallback instead of the one supplied. That is similar to one test where within the decorator, the code tests and does not return the HandleCallback passed in but an alternate version. This is IMHO much simpler accomplished by doing\r\n\r\n```java\r\nvar handleCallback = someCondition()\r\n    ? handleCallback1\r\n    : handleCallback2;\r\n\r\nvar result = jdbi.withHandle(handleCallback);\r\n```\r\n\r\nThe other use case is that the decorator is used to modify the handle:\r\n\r\n```java\r\n    var decorator = new HandleCallbackDecorator() {\r\n        @Override\r\n        public <R, X extends Exception> HandleCallback<R, X> decorate(HandleCallback<R, X> callback) {\r\n            return handle -> {\r\n                handle.setReadOnly(true); // this is the handle modification code\r\n                return callback.withHandle(handle);\r\n            };\r\n        }\r\n    };\r\n\r\n    jdbi.setHandleCallbackDecorator(decorator);\r\n\r\n    jdbi.withHandle(...); // handle here will always be read-only\r\n```\r\n\r\nThis seems to be a very complicated way to do this. The same effect can be accomplished today by doing\r\n\r\n```java\r\n    var plugin = new JdbiPlugin() {\r\n        @Override\r\n        public Handle customizeHandle(Handle handle) throws SQLException {\r\n            handle.setReadOnly(true);\r\n            return handle;\r\n        }\r\n    };\r\n\r\n    jdbi.installPlugin(plugin);\r\n```\r\n\r\nwhich is as global as the registered HandleCallbackDecorator (all handles will pass through the `customizeHandle` method) and accomplished the same effect.\r\n\r\nThe feature is undocumented (no examples, no adding to index.adoc). This is destined to be another of the myriad of undocumented features that were added at some time or another for a very specific use case without documentation and in a year or so, no one remembers why.\r\n\r\n@Randgalt could you elaborate what you are trying to do? I read the description about `Specialized behavior can be added for an app's entire JDBI usage without project devs needing to do anything special. This is very useful when introducing protocols such as custom retry behavior, custom connection management,[...]` and I would like to understand what specific thing can not be done with a Jdbi plugin and needs this specific decoration of the handle callback? \r\n\r\nAlso, it would be good if you could contribute some documentation and examples beyond the test.\r\n\r\n\r\n\r\n\r\n",
      "We are working with a database, CRDB, that has some unfortunate edge cases. The TL;DR is that our connection pool can get poisoned with invalid connections that cannot be discovered without making a query with the connection. Inside of a transaction this is not a problem as we have a custom JDBI `TransactionHandler` that allows us to notice this event and substitute a good connection for the bad one and then retry the entire operation. In non-transactions, however, we have no opportunity to do this. \r\n\r\n> This is IMHO much simpler accomplished by doing\r\n\r\nThis requires changes at every call site. The change I submitted makes it possible to hook every instance of withHandle/useHandle just as we do with the `TransactionHandler`. Going through our code and wrapping every call to `useHandle` is a non-starter. Note: we need to substitute a good connection and then retry the handler/operation.\r\n\r\nI hope this helps.",
      "Thanks for the explanation. There is a chance that you are actually be hit by #2446. \r\n\r\nFrom you explanation and the quote, are you actually replacing the HandleCallback or are you augmenting (wrapping) it? Is this something that is related to the handle or the connection?\r\n\r\nIt would be great to see some (abstract) code example. It might be possible to solve your issues with a Jdbi Plugin; there is not a lot that you can do with that callback decorator that can not be done with a plugin. And as your do this on a per-jdbi basis, registering such a plugin with the jdbi instance should be possible.\r\n\r\n\r\n",
      "> Thanks for the explanation. There is a chance that you are actually be hit by https://github.com/jdbi/jdbi/issues/2446.\r\n\r\nI don't think this affects us. We actually wrap all connections returned by our Connection pool so that we can manage them manually as needed.\r\n\r\n> It would be great to see some (abstract) code example. It might be possible to solve your issues with a Jdbi Plugin;\r\n\r\nI can't publish our internal code but here is a sketch that shows something of what we're wanting to do.\r\n\r\n```java\r\npublic class ExampleJdbiPlugin\r\n        implements JdbiPlugin, Handler\r\n{\r\n    private final int maxRetries;\r\n\r\n    public ExampleJdbiPlugin(int maxRetries)\r\n    {\r\n        this.maxRetries = maxRetries;\r\n    }\r\n\r\n    @Override\r\n    public void customizeJdbi(Jdbi jdbi)\r\n    {\r\n        jdbi.setHandler(this);\r\n    }\r\n\r\n    @Override\r\n    public <R, X extends Exception> HandleCallback<R, X> decorate(HandleCallback<R, X> callback)\r\n    {\r\n        return handle -> {\r\n            try {\r\n                if (handle.getConnection().getAutoCommit()) {\r\n                    return withRetry(handle, callback);\r\n                }\r\n            }\r\n            catch (SQLException e) {\r\n                throw new ConnectionException(e);\r\n            }\r\n            return callback.withHandle(handle);\r\n        };\r\n    }\r\n\r\n    private <R, X extends Exception> R withRetry(Handle handle, HandleCallback<R, X> callback)\r\n            throws X\r\n    {\r\n        int attempts = 1 + maxRetries;\r\n\r\n        Deque<X> failures = new ArrayDeque<>();\r\n        while (true) {\r\n            try {\r\n                return callback.withHandle(handle);\r\n            }\r\n            catch (Exception last) {\r\n                X x = (X) last;\r\n\r\n                failures.addLast(x);\r\n\r\n                if (!isBadConnectionError(x)) {\r\n                    throwAll(failures);\r\n                }\r\n\r\n                attempts -= 1;\r\n                if (attempts <= 0) {\r\n                    throwAll(failures);\r\n                }\r\n\r\n                fixBadConnection(handle);\r\n            }\r\n        }\r\n    }\r\n}\r\n```",
      "Thanks for the example, this is useful. It would be good to contribute some documentation (e.g for chapter 14 or chapter 19) about the callback so that this feature is properly documented.\r\n\r\n",
      "https://github.com/jdbi/jdbi/pull/2463"
    ],
    "commit_messages": [
      "Merge pull request #2460 from hgschmie/rework-handle-callback-decorator\n\nRevise the HandleCallback decorator code"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234364dde8ed798d2ed5aa",
    "number": 2459,
    "body": "method reference avoids needing to suppress a warning",
    "head_branch": "unnecessary-lambda",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2459)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2459&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2459&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2459&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2459&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2459&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2459&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2459&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2459&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2459&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2459&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2459&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2459&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2459) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2459&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2459&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "JdbiInterceptionChainHolder: remove unnecessary lambda"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234365dde8ed798d2ed5ab",
    "number": 2458,
    "body": "Even if the init code in Jdbi or Handle fails, ensure that we don't leak connections.\r\n\r\nFixes #2446",
    "head_branch": "fix-issue-2446",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2458)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2458&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2458&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2458&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2458&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2458&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2458&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2458&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2458&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2458&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2458&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2458&resolved=false&types=CODE_SMELL) [2 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2458&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2458) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2458&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2458&metric=new_duplicated_lines_density&view=list)\n\n",
      "@kristoffSC, do you want to verify this proposed change fixes the connection leak for you?",
      "> @kristoffSC, do you want to verify this proposed change fixes the connection leak for you?\r\n\r\n@hgschmie @stevenschlansker \r\nI confirm that this PR fixes https://github.com/jdbi/jdbi/issues/2446\r\n\r\nIs there any estimate date for new release?\r\nThanks."
    ],
    "commit_messages": [
      "Merge pull request #2458 from hgschmie/fix-issue-2446\n\nEnsure that the connection is always closed"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234366dde8ed798d2ed5ac",
    "number": 2457,
    "body": null,
    "head_branch": "extension-unsafe-cast",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2457)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2457&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2457&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2457&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2457&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2457&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2457&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2457&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2457&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2457&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2457&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2457&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2457&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2457) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2457&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2457&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Fix some unsafe casts in doc examples"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234367dde8ed798d2ed5ad",
    "number": 2456,
    "body": "As discussed in #2408, we should prefer the `jakarta` annotations, but that's not what actually got committed here. So clean that up",
    "head_branch": "scs-jakarta-annos",
    "is_a_fork": false,
    "comments": [
      "actually never mind, it seems I have unlearned on how to read diffs. :-) All good. The exclusion block would still be good.",
      "Why should we add a dependency ignore to the checker plugin? It passes the plugin checks fine right now.\r\nI'll merge this and we can always tweak the build in a followup.",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2456)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2456&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2456&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2456&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2456&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2456&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2456&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2456&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2456&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2456&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2456&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2456&resolved=false&types=CODE_SMELL) [2 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2456&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2456) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2456&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2456&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Actually remove findbugs annotations\n\nAs discussed in #2408, we should prefer the `jakarta` annotations,\nbut that's not what actually got committed here. So clean that up"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234368dde8ed798d2ed5ae",
    "number": 2453,
    "body": "Fixes #2368 \r\n\r\n- Adds `module-info` to most modules",
    "head_branch": "module-time",
    "is_a_fork": true,
    "comments": [
      "well it worked on my local ¯\\\\_(ツ)_/¯ ",
      "> How do we test that the resulting modules work? Is that a new integration test?\r\n\r\npresumably the existing tests would work that out",
      "Ah it seems make run-tests doesn't fully compile everything",
      "it seems due to this peculiar \r\n```\r\n        <dependency>\r\n            <groupId>org.jdbi</groupId>\r\n            <artifactId>jdbi3-core</artifactId>\r\n            <classifier>tests</classifier>\r\n            <scope>test</scope>\r\n        </dependency>\r\n```\r\nthing, a couple modules can't get modularized since the classes within are not exported.",
      "You should be able to run `make install` to build and check everything.",
      "right now it seems I'll have to duplicate the classes in the core src/test and put them in the corresponding modules",
      "Could they be factored out into a reusable module? It'd be nice to avoid having to duplicate classes.",
      "So I've made a separate module for the test classes, but it seems the other ones cannot detect it\r\n\r\n```\r\n Could not resolve dependencies for project org.jdbi:jdbi3-caffeine-cache:jar:3.40.1-SNAPSHOT: The following artifacts could not be resolved: org.jdbi:jdbi3-core-test:jar:3.40.1-SNAPSHOT (absent): Could not find artifact org.jdbi:jdbi3-core-test:jar:3.40.1-SNAPSHOT in snapshots-repo (https://oss.sonatype.org/content/repositories/snapshots) -\r\n```",
      "First: Thank you for starting this! We need to modularize Jdbi fully if only for the javadocs. :-)\r\n\r\nYou seem to have encountered all the problems that I found as well when trying to do so. Here is what I tried:\r\n\r\n- opening internal packages only to other jdbi modules\r\n- opening some of the test packages separate from the main packages\r\n- introducing different identifiers for the test jars\r\n\r\nThere is additional confusion with \"maven module\" vs \"JPMS module\" in all of the Maven documentation and the idea of \"test vs. compile\" is something that basically does not exist for maven. Having separate module-info for the test and the main jar is cool, but it requires separate identifiers.\r\n\r\nJPMS tooling is generally immature (six years after JPMS came out!) and a lot of manual work is required.\r\n\r\nHappy to collaborate on this. Few comments: run `make` in the main folder shows you all the options in the make driven build. There are additional docs in the CONTRIBUTING.md file in the root folder. \r\n\r\n`make run-tests` only runs the tests. Someone (@stevenschlansker :-) ) asked to split \"run-tests\" (only running tests) and \"tests\" (compiling and running tests) because they kept doing \"make tests\" and complained that the tests were not compiled....\r\n\r\nThe gold standard to testing a change is to do \"make install run-tests\", same as the ci does (it does it in two steps for separate JDKs for building and testing).",
      "from a JPMS perspective, I figured out how to get it all working, the main issue I have now is getting the reusable test maven module to be detected by the other maven modules. When I duplicate the classes manually it works, but it's pretty unsightly.\r\n\r\nI get this on cli. (jdbi3-core-test is something I added)\r\n```\r\nCould not find artifact org.jdbi:jdbi3-core-test:jar:3.40.1-SNAPSHOT in snapshots-repo (https://oss.sonatype.org/content/repositories/snapshots) -\r\n```",
      "> Having separate module-info for the test and the main jar is cool, but it requires separate identifiers.\r\n\r\nwait you can do that now?",
      "in any case, I find myself a little stumped by the separate test module bit not being found, shall I just duplicate the classes to make it work",
      "@SentryMan , I don't feel great about merging it with duplicated classes, but if you keep the duplication in its own commit, then we can make forward progress and get everything else working. Once this is ready to merge, we can decide if we go with duplicated classes or figure out how to fix it otherwise.",
      "it seems then that the prereq for this change is replacing all instances of\r\n```xml\r\n        <dependency>\r\n            <groupId>org.jdbi</groupId>\r\n            <artifactId>jdbi3-core</artifactId>\r\n            <classifier>tests</classifier>\r\n            <scope>test</scope>\r\n        </dependency>\r\n```\r\nwith a dedicated module. If you can show me the steps of how to add a jdbi maven module I can do it. (I tried adding a new module to the root pom.xml but no dice)",
      "The easiest way to add a new module is to clone an existing one. For example, you might `mkdir core-testing && cp core/pom.xml core-testing/`. Then, edit the pom to update everything, and then add `<module>core-testing</module>` to the `/pom.xml`",
      "> The easiest way to add a new module is to clone an existing one. For example, you might `mkdir core-testing && cp core/pom.xml core-testing/`. Then, edit the pom to update everything, and then add `<module>core-testing</module>` to the `/pom.xml`\r\n\r\ndoesn't work.\r\n\r\n",
      "SonarCloud Quality Gate failed.&nbsp; &nbsp; [![Quality Gate failed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/failed-16px.png 'Quality Gate failed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2453)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2453&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2453&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2453&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2453&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2453&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2453&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2453&resolved=false&types=SECURITY_HOTSPOT) [![E](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/E-16px.png 'E')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2453&resolved=false&types=SECURITY_HOTSPOT) [3 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2453&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2453&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2453&resolved=false&types=CODE_SMELL) [12 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2453&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2453) No Coverage information  \n[![5.2%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/10-16px.png '5.2%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2453&metric=new_duplicated_lines_density&view=list) [5.2% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2453&metric=new_duplicated_lines_density&view=list)\n\n\n\n![idea](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/light_bulb-16px.png 'idea') Catch issues before they fail your Quality Gate with our IDE extension ![sonarlint](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/sonarlint-16px.png 'sonarlint') [SonarLint](https://www.sonarsource.com/products/sonarlint/features/connected-mode/?referrer=sonarcloud-welcome)",
      "What error do you get? That is how I have done it in the past.",
      "```\r\nFailed to execute goal on project jdbi3-caffeine-cache: \r\nCould not resolve dependencies for project org.jdbi:jdbi3-caffeine-cache:jar:3.40.1-SNAPSHOT:\r\nThe following artifacts could not be resolved: org.jdbi:jdbi3-core-test:jar:3.40.1-SNAPSHOT (absent): \r\nCould not find artifact org.jdbi:jdbi3-core-test:jar:3.40.1-SNAPSHOT in snapshots-repo \r\n(https://oss.sonatype.org/content/repositories/snapshots) -> [Help 1]\r\n```\r\nwhen I try to use the new module I get this",
      "What command did you run, and from what directory? Either you need to build the whole project from the root, so that the module is included in the reactor build, or you need to run `mvn install` on your new module to put it in your local maven repo.",
      "![image](https://github.com/jdbi/jdbi/assets/32279667/41f4d207-4da9-44ae-a8e9-e28030785a5b)\r\n",
      "Strange. I will check out your branch and try myself...",
      "Hi @SentryMan , the problem is that the artifact you are trying to look for (`org.jdbi:jdbi3-core-test:jar:3.40.1-SNAPSHOT`) is not the same as the new module you added (`org.jdbi.internal:jdbi3-core-test:jar:3.40.1-SNAPSHOT`)\r\n\r\nIn the newly created `core-test/pom.xml`, there is no `groupId` declared, so it inherits it from the `<parent>`. This new module should be internal, so just update your dependency to add the `.internal` to the groupId and hopefully it works.",
      "knew it was something small that I missed",
      "some stuff that I looked at / might be interesting:\r\n\r\n- https://stackoverflow.com/questions/53477690/properly-implementing-java-modules-in-a-maven-build-with-inter-module-test-depen\r\n- sample code from that SO: https://github.com/jhenriquez418/java-cross-module-testing\r\n- the moditect tooling: https://github.com/moditect/moditect\r\n\r\n",
      "Ah yeah, turns out having a dedicated test module complicates things a bit with the dependencies ",
      "Hey @SentryMan. I summarized our current state of things with modules here: https://github.com/jdbi/jdbi/blob/master/JPMS-SUPPORT.md\r\n\r\nI am slowly trying to work the tool chain up to support real modules in the code base. There is a lot of work to be done before we can go fully modularized, especially around testing and javadocs.",
      "duplicating all the test files will surely work, but it's pretty unsightly."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234369dde8ed798d2ed5af",
    "number": 2451,
    "body": "Right now, we check if a connection is closed before closing it.\r\n\r\nHowever, this isn't good enough: even if the server closed the connection, we might have borrowed this from a pool, which needs to know we've returned it.\r\n\r\nConnection.close is specified to no-op if called more than once, so it's safe to just do it regardless.\r\n\r\nFixes #2446",
    "head_branch": "cleanup-conn-close",
    "is_a_fork": false,
    "comments": [
      "This might need a bit more thinking,. It is one of these \"damned if I do, damned if I don't\" situation because of the plethora of drivers. The check exists because there are a number of drivers that throw a \"ConnectionAlreadyClosedException\" if calling Connection#close on a closed connection (yes, it's against the spec, but but ...).  Making the close unconditional might pop up more errors in more popular paths.\r\n\r\nThe isAlive check was ported over in the 3.35.0 rewrite from the previous code. \r\n\r\nI can take a closer look at the change over the weekend when I am no longer in an airport departure lounge, please hold off merging till then. \r\n\r\nThe bug report worries me. It implies that there are connection pools that report a connection \"dead\" (IAW closed) while still holding onto the actual database driver connection. This would be a pool bug. ",
      "No urgency to merge this.\r\n\r\nThrowing a `ConnectionAlreadyClosedException` is explicitly violating the spec. Can you be more specific about which driver(s) do this?\r\n\r\nI think it is understandable that if the pool leases a connection, it expects it to be returned, even if the database server asynchronously-closes the connection. Maybe there is a pool bug but I am not as sure as you are.",
      "If drivers violating the spec is a problem, we can catch and ignore the thrown exception. Checking the connection `isValid` isn't a proper way to avoid this anyway, since it leaves open a race where the connection is closed behind your back between the valid check and doing the close.",
      "Hi,\r\nThanks for looking at this, I'm an author of that [bug report](https://github.com/jdbi/jdbi/issues/2446).\r\n\r\nRegarding:\r\n> It implies that there are connection pools that report a connection \"dead\" (IAW closed) while still holding onto the actual database driver connection. This would be a pool bug.\r\n\r\nvs\r\n> I think it is understandable that if the pool leases a connection, it expects it to be returned\r\n\r\nI think that the latter is more accurate for my bug report.\r\nThe bottom line is that jdbi will not return borrowed object to the pool. It's up to the pool what should be done with such object.\r\n\r\nIn my case, the connection was never returned to the pool. The pool can have \"health\" checks while creating, borrowing or returning object to the pool but in this case this would not work since connection was closed after it was acquired from the pool and before `Cleanable` was registered on the Handle object which happens in jdbi. \r\n",
      "> If drivers violating the spec is a problem, we can catch and ignore the thrown exception. Checking the connection `isValid` isn't a proper way to avoid this anyway, since it leaves open a race where the connection is closed behind your back between the valid check and doing the close.\r\n\r\nYeah, but by doing so, we now penalize all the code that behaves correctly (reporting the connection as dead when it is dead). Catching the exception is expensive.\r\n\r\nThis seems to be a case where we should just have a config switch. If the underlying pool/thing requires an unconditional close, you can set a flag and we force that.",
      "> Hi, Thanks for looking at this, I'm an author of that [bug report](https://github.com/jdbi/jdbi/issues/2446).\r\n> \r\n> Regarding:\r\n> \r\n> > It implies that there are connection pools that report a connection \"dead\" (IAW closed) while still holding onto the actual database driver connection. This would be a pool bug.\r\n> \r\n> vs\r\n> \r\n> > I think it is understandable that if the pool leases a connection, it expects it to be returned\r\n> \r\n> I think that the latter is more accurate for my bug report. The bottom line is that jdbi will not return borrowed object to the pool. It's up to the pool what should be done with such object.\r\n> \r\n> In my case, the connection was never returned to the pool. The pool can have \"health\" checks while creating, borrowing or returning object to the pool but in this case this would not work since connection was closed after it was acquired from the pool and before `Cleanable` was registered on the Handle object which happens in jdbi.\r\n\r\nThank you for the explanation but that is then a pool bug. We call \"checkConnectionLive()\" which needs to return `true` so that we close the connection. This code calls `Connection#isClosed()` which is explicitly defined as `A connection is closed if the method close has been called on it or if certain fatal errors have occurred. This method is guaranteed to return true only when it is called after the method Connection.close has been called.`. So the pool connection returned \"I am closed, no need to do anything\", which then was not correct. This is not a Jdbi bug, but a pool bug.\r\n\r\nIs there a specific pool library that shows that behavior? (please don't say \"c3p0\"). \r\n",
      "Hi @hgschmie \r\n> Thank you for the explanation but that is then a pool bug. We call \"checkConnectionLive()\" which needs to return `true` so that we close the connection. This code calls `Connection#isClosed()` which is explicitly defined as `A connection is closed if the method close has been called on it or if certain fatal errors have occurred. This method is guaranteed to return true only when it is called after the method Connection.close has been called.`. So the pool connection returned \"I am closed, no need to do anything\", which then was not correct. This is not a Jdbi bug, but a pool bug.\r\n\r\nNot sure if I can agree with that this is pool bug. Originally bug report was about connection closing, but after further investigation I believe that there is an issue with exception handling in `org.jdbi.v3.core.Jdbi::open()`. the bug report was updated. I believe that its up to the client code (JDBI code) to make sure or at least try to return borrowed object to the pool in any case. Please see my comment here for details: https://github.com/jdbi/jdbi/pull/2451#discussion_r1286715734\r\n\r\n> Is there a specific pool library that shows that behavior? (please don't say \"c3p0\").\r\nI'm using `org.apache.commons.dbcp2.PoolingDataSource` wrapping `org.apache.commons.pool2.impl.GenericObjectPool`\r\nMy JDBI setup looks like this:\r\n\r\n```\r\nBasicDataSource dataSource = new BasicDataSource();\r\n    dataSource.setUrl(container.getJdbcUrl());\r\n    dataSource.setPassword(\"password\");\r\n    dataSource.setUsername(\"user\");\r\n    dataSource.setMinIdle(2);\r\n    dataSource.setMaxIdle(4);\r\n    dataSource.setMaxTotal(6);\r\n\r\n    this.jdbi = Jdbi.create(dataSource)\r\n        .installPlugin(new SqlObjectPlugin())\r\n        .installPlugin(new PostgresPlugin());\r\n```\r\n",
      "> Yeah, but by doing so, we now penalize all the code that behaves correctly (reporting the connection as dead when it is dead). Catching the exception is expensive.\r\n\r\nI think this is the other way around: the current code penalizes all code that behaves correctly, because calling `isClosed` does a lot of work (in Pg, it will require a server roundtrip), and we can always safely close without that roundtrip. The Pg code is careful that calling close() a second time is very cheap. If there are other concrete databases that behave differently, we can talk about that, but we need a specific example else we should go with the spec which says \"don't use isClosed since it is not a reliable test; close is safe to call multiple times\". They specifically call out not to rely on it.\r\n\r\nThrowing an exception on duplicate close is forbidden by spec, so it will not happen, so it has no cost. Unless there's a specific case of a driver that incorrectly does this.\r\n\r\n> This seems to be a case where we should just have a config switch. If the underlying pool/thing requires an unconditional close, you can set a flag and we force that.\r\n\r\nIf we have a specific database where this is needed, we can add it. I don't think we should pre-emptively add configuration in contradiction to the JDBC spec without a specific reason. That just adds complexity.\r\n\r\nI agree with Kristoff that we have a potential leak in `Jdbi.open`, if e.g. a plugin `customizeConnection` throws, we never return the Handle nor close the Connection.",
      "The changes you pushed over mine undoes the cleanup of resources. So I restored that.\r\n\r\nI wrote two tests: one to show the leak when customization fails, and one to show the leak when isClosed throws. Both tests fail in master today, and pass with this fix.",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2451)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2451&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2451&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2451&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2451&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2451&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2451&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2451&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2451&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2451&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2451&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2451&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2451&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2451) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2451&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2451&metric=new_duplicated_lines_density&view=list)\n\n",
      "closed in favor of #2458 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623436adde8ed798d2ed5b0",
    "number": 2450,
    "body": "* Release branch no longer necessary - the push of commits and tags is manual already\r\n* Mailing list deprioritized, use GitHub release discussion instead",
    "head_branch": "scs-release-simplify",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2450)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2450&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2450&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2450&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2450&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2450&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2450&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2450&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2450&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2450&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2450&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2450&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2450&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2450) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2450&metric=duplicated_lines_density&view=list) No Duplication information\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2450 from jdbi/scs-release-simplify\n\nSimplify release steps"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623436bdde8ed798d2ed5b1",
    "number": 2449,
    "body": "We need a way to clear the cached BoundLocalTransactionHandler. We copied LocalTransactionHandler to do this so it would be nice if the library version had a reset() method.",
    "head_branch": "jordanz/add-reset-to-local-transaction-handle",
    "is_a_fork": true,
    "comments": [
      "Hi @Randgalt , no problem with adding this method, but could you please briefly explain why you need it? The bound handlers should be cleaned up when the `Handle` instance is garbage collected, since they are in a `WeakHashMap`.",
      "> Hi @Randgalt , no problem with adding this method, but could you please briefly explain why you need it? The bound handlers should be cleaned up when the `Handle` instance is garbage collected, since they are in a `WeakHashMap`.\r\n\r\nThe DB we use, managed Cockroach, has some issues. The worst of these is that when one of their nodes goes down it can poison our Hikari cache. Before Hikari does its periodic validation of connections it hands out what is, in reality, a bad connection. We have a TransactionHandler that is able to capture these bad connections and we have code that substitutes the Connection underneath the JDBI Handle (we wrap all JDBC connections that we give to JDBI). The only problem with this hack is that the internal `BoundLocalTransactionHandler` is no longer usable as it has bad state. So, we've duplicated `LocalTransactionHandler` to add the `reset()` method that's in this PR.\r\n\r\nWe can continue to use our `LocalTransactionHandler` copy but would prefer to use the library version with this change.",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2449)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2449&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2449&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2449&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2449&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2449&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2449&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2449&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2449&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2449&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2449&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2449&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2449&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2449) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2449&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2449&metric=new_duplicated_lines_density&view=list)\n\n",
      "Wow, this makes Cockroach sound really broken. I'm glad we didn't start to use it. This sounds like a pretty bad hack but the cost to Jdbi is not very large, so I guess it is OK to include this.",
      "It's a good tool but it has a lot of quirks and we've spent a lot of time learning how to work around them.",
      "Also, we'd really appreciate you looking at: https://github.com/jdbi/jdbi/pull/2448",
      "Thank you"
    ],
    "commit_messages": [
      "Add reset() method to LocalTransactionHandler\n\nWe need a way to clear the cached BoundLocalTransactionHandler. We\ncopied LocalTransactionHandler to do this so it would be nice if\nthe library version had a reset() method."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623436cdde8ed798d2ed5b2",
    "number": 2448,
    "body": "Currently, it is very simple to add global custom handling for\r\ntransaction callbacks using JDBI's `TransactionHandler`. \r\nSpecialized behavior can be added for an app's entire JDBI usage\r\nwithout project devs needing to do anything special. This is very\r\nuseful when introducing protocols such as custom retry behavior,\r\ncustom connection management, etc.\r\n\r\nIntroduce new interface that is an analog of `TransactionHandler`\r\nbut for all callbacks, not just transactions. This interface,\r\n`Handler` is used to invoke the callback passed to JDBI's\r\n`useHandle`, `withHandle`, `inTransaction` and `withTransaction`.\r\nThis gives users a chance to global patch callbacks for all\r\nJDBI uses not just transactions.\r\n",
    "head_branch": "jordanz/support-custom-callback-handlers",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2448)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2448&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2448&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2448&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2448&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2448&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2448&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2448&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2448&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2448&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2448&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2448&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2448&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2448) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2448&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2448&metric=new_duplicated_lines_density&view=list)\n\n",
      "Thank you!!!",
      "We'd appreciate a release when you can. Thank you in advance.",
      "@Randgalt , released in 3.40.0"
    ],
    "commit_messages": [
      "Support custom callback handlers\n\nIntroduce new interface that is an analog of `TransactionHandler`\nbut for all callbacks, not just transactions. This interface,\n`Handler` is used to invoke the callback passed to JDBI's\n`useHandle`, `withHandle`, `inTransaction` and `withTransaction`.\nThis gives users a chance to global patch callbacks for all\nJDBI uses not just transactions."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623436ddde8ed798d2ed5b3",
    "number": 2444,
    "body": null,
    "head_branch": "operations-benchmark",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2444)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2444&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2444&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2444&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2444&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2444&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2444&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2444&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2444&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2444&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2444&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2444&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2444&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2444) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2444&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2444&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2444 from hgschmie/operations-benchmark\n\noperations benchmark"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623436fdde8ed798d2ed5b4",
    "number": 2443,
    "body": null,
    "head_branch": "jackson-version",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2443)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2443&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2443&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2443&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2443&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2443&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2443&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2443&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2443&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2443&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2443&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2443&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2443&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2443) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2443&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2443&metric=new_duplicated_lines_density&view=list)\n\n",
      "dependabot did not flag it. I only saw it in the sonatype vuln report. We might want to upgrade past 2.12 (which is no longer the stable branch) at some point. "
    ],
    "commit_messages": [
      "Merge pull request #2443 from hgschmie/jackson-version\n\nupdate jackson version b/c CVE"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234370dde8ed798d2ed5b5",
    "number": 2442,
    "body": null,
    "head_branch": "master-fix",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2442)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2442&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2442&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2442&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2442&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2442&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2442&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2442&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2442&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2442&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2442&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2442&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2442&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2442) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2442&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2442&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2442 from hgschmie/master-fix\n\nfix red master branch. oops"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234371dde8ed798d2ed5b6",
    "number": 2441,
    "body": "this needs review",
    "head_branch": "classutil-methodhandle",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2441)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2441&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2441&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2441&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2441&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2441&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2441&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2441&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2441&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2441&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2441&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2441&resolved=false&types=CODE_SMELL) [3 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2441&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2441) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2441&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2441&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2441 from hgschmie/classutil-methodhandle\n\nUsing method handle invokeExact for object creation"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234372dde8ed798d2ed5b7",
    "number": 2440,
    "body": "We call Unchecked three times, and this ends up adding a number of stack frames in the debugger or profiler any time you are looking at an ondemand sqlobject\r\n\r\nThis fights back just a little bit against ever-deepening stack traces, and makes the logic easier to read too without the distracting Unchecked signatures in the middle",
    "head_branch": "ondemand-flatten",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2440)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2440&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2440&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2440&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2440&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2440&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2440&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2440&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2440&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2440&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2440&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2440&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2440&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2440) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2440&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2440&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "OnDemandExtensions.createProxy: Replace streams usage with simpler flat code"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234373dde8ed798d2ed5b8",
    "number": 2439,
    "body": "Right now, every time you call attach or onDemand we repeatedly lookup the class and methods we use to construct them. Now, hold a cache of the lookups so we can re-use them.",
    "head_branch": "generator-ctor-mh",
    "is_a_fork": false,
    "comments": [
      "this should benefit from #2441 as well.",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2439)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2439&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2439&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2439&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2439&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2439&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2439&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2439&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2439&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2439&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2439&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2439&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2439&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2439) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2439&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2439&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2439 from jdbi/generator-ctor-mh\n\nGenerator: improve performance of creating instances"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234374dde8ed798d2ed5b9",
    "number": 2438,
    "body": "Make this package private, should have been that way from day one.\n",
    "head_branch": "package-private-gsof",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2438)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2438&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2438&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2438&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2438&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2438&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2438&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2438&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2438&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2438&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2438&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2438&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2438&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2438) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2438&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2438&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "GeneratorSqlObjectFactory is not a public API\n\nMake this package private, should have been that way from day one."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234375dde8ed798d2ed5ba",
    "number": 2437,
    "body": null,
    "head_branch": "sqlobject-constant-methods",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2437)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2437&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2437&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2437&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2437&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2437&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2437&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2437&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2437&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2437&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2437&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2437&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2437&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2437) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2437&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2437&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "AbstractSqlObjectFactory: extract constants"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234376dde8ed798d2ed5bb",
    "number": 2436,
    "body": "rather than re-creating it each time\r\n\r\nInspecting methods is relatively expensive and they don't change.",
    "head_branch": "mapto-reuse-returner",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2436)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2436&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2436&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2436&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2436&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2436&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2436&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2436&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2436&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2436&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2436&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2436&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2436&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2436) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2436&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2436&metric=new_duplicated_lines_density&view=list)\n\n",
      "Yes, I did."
    ],
    "commit_messages": [
      "MapToFactory: reuse a single ResultReturner, rather than re-creating it each time"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234377dde8ed798d2ed5bc",
    "number": 2433,
    "body": "Fixes #2427\r\n\r\nReplaces #2429 ",
    "head_branch": "classutil-methodhandle",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2433)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2433&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2433&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2433&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2433&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2433&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2433&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2433&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2433&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2433&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2433&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2433&resolved=false&types=CODE_SMELL) [2 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2433&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2433) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2433&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2433&metric=new_duplicated_lines_density&view=list)\n\n",
      "Superseded by #2441"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234378dde8ed798d2ed5bd",
    "number": 2432,
    "body": "```\r\nBenchmark                                            Mode  Cnt   Score   Error  Units\r\nConstructorBenchmark.constructorMhInvoke             avgt    5   4.490 ± 0.037  ns/op\r\nConstructorBenchmark.constructorMhInvokeArgs         avgt    5  68.264 ± 0.939  ns/op\r\nConstructorBenchmark.constructorMhInvokeExact        avgt    5   2.021 ± 0.179  ns/op\r\nConstructorBenchmark.constructorMhInvokeExactAsType  avgt    5   2.001 ± 0.114  ns/op\r\nConstructorBenchmark.jcuCheckedCreate                avgt    5  14.965 ± 1.086  ns/op\r\nConstructorBenchmark.jcuFindInstantiate              avgt    5  32.425 ± 1.115  ns/op\r\nConstructorBenchmark.jcuFindInstantiateWithCache     avgt    5  18.645 ± 0.207  ns/op\r\n```\r\n\r\n(the last one is not a different benchmark, but the result of re-running with #2431 merged in.",
    "head_branch": "ctor-bm",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2432)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2432&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2432&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2432&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2432&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2432&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2432&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2432&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2432&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2432&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2432&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2432&resolved=false&types=CODE_SMELL) [1 Code Smell](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2432&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2432) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2432&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2432&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Add some simple construction benchmarks to show MH performance"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234379dde8ed798d2ed5be",
    "number": 2431,
    "body": "This ensures that each c'tor is discovered only once and then\nretrieved from a cache.\n\nAlternative approach to #2427\n",
    "head_branch": "ctor-cache",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2431)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2431&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2431&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2431&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2431&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2431&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2431&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2431&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2431&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2431&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2431&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2431&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2431&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2431) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2431&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2431&metric=new_duplicated_lines_density&view=list)\n\n",
      "I created a benchmark in #2432 which demonstrates that while caching the discovered constructors helps by about a factor of 2x, it is still 10x slower than the code that was there before:\r\n\r\n```\r\nConstructorBenchmark.constructorMhInvokeExact        avgt    5   2.021 ± 0.179  ns/op\r\nConstructorBenchmark.jcuFindInstantiate              avgt    5  32.425 ± 1.115  ns/op\r\nConstructorBenchmark.jcuFindInstantiateWithCache     avgt    5  18.645 ± 0.207  ns/op\r\n```",
      "Superseded by #2441 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623437adde8ed798d2ed5bf",
    "number": 2430,
    "body": null,
    "head_branch": "remove-alpha",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2430)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2430&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2430&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2430&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2430&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2430&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2430&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2430&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2430&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2430&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2430&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2430&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2430&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2430) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2430&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2430&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2430 from hgschmie/remove-alpha\n\nremove superflous alpha annotations"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623437bdde8ed798d2ed5c0",
    "number": 2429,
    "body": "\r\nFixes #2427",
    "head_branch": "reflect-mh",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2429)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2429&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2429&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2429&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2429&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2429&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2429&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2429&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2429&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2429&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2429&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2429&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2429&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2429) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2429&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2429&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623437cdde8ed798d2ed5c1",
    "number": 2428,
    "body": "fixes https://github.com/jdbi/jdbi/security/dependabot/25",
    "head_branch": "scs-h2-2.220",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2428)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2428&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2428&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2428&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2428&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2428&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2428&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2428&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2428&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2428&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2428&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2428&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2428&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2428) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2428&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2428&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "h2 2.2.220\n\nfixes https://github.com/jdbi/jdbi/security/dependabot/25"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623437ddde8ed798d2ed5c2",
    "number": 2425,
    "body": "Centralize c'tor lookup algorithms and object instantiation, choose\nc'tor explicitly, not by try-and-exception.\n\nRemoves a large amount of reflection-related code from all over core\nand sqlobject.\n",
    "head_branch": "remove-nomethodfoundexceptions",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2425)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2425&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2425&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2425&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2425&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2425&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2425&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2425&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2425&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2425&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2425&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2425&resolved=false&types=CODE_SMELL) [4 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2425&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2425) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2425&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2425&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2425 from hgschmie/remove-nomethodfoundexceptions\n\nMake object creation more efficient"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623437edde8ed798d2ed5c3",
    "number": 2424,
    "body": "Apply the patterns from #2416 to all the remaining configurers.\n",
    "head_branch": "remaining-extension-configurer",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed.svg 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2424)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug.svg 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2424&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.svg 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2424&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2424&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability.svg 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2424&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.svg 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2424&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2424&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot.svg 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2424&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.svg 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2424&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2424&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell.svg 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2424&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.svg 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2424&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2424&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo.svg 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2424) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3.svg '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2424&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2424&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2424 from hgschmie/remaining-extension-configurer\n\nUpdate the remaining ExtensionConfigurer"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623437fdde8ed798d2ed5c4",
    "number": 2423,
    "body": null,
    "head_branch": "scs-generator-object-methods-test",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2423)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2423&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2423&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2423&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2423&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2423&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2423&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2423&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2423&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2423&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2423&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2423&resolved=false&types=CODE_SMELL) [2 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2423&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2423) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2423&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2423&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "generator: add tests covering Object method overrides"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234380dde8ed798d2ed5c5",
    "number": 2422,
    "body": null,
    "head_branch": "apache-resolver-test",
    "is_a_fork": true,
    "comments": [
      "DO NOT MERGE!. This is a test for our persistent CI failures with maven 3.9.x",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2422)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2422&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2422&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2422&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2422&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2422&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2422&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2422&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2422&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2422&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2422&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2422&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2422&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2422) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2422&metric=duplicated_lines_density&view=list) No Duplication information\n\n",
      "closing this"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234381dde8ed798d2ed5c6",
    "number": 2421,
    "body": "- upgrade to maven 3.9.3\n- silence long standing asciidoctor warning\n",
    "head_branch": "maven-3.9.3",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2421)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2421&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2421&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2421&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2421&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2421&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2421&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2421&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2421&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2421&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2421&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2421&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2421&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2421) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2421&metric=duplicated_lines_density&view=list) No Duplication information\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2421 from hgschmie/maven-3.9.3\n\nBuild updates"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234382dde8ed798d2ed5c7",
    "number": 2420,
    "body": "for arguments and column mappers\r\n\r\nThis allows type lookup and object reader / writer to be reused",
    "head_branch": "json-bind-type",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2420)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2420&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2420&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2420&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2420&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2420&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2420&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2420&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2420&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2420&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2420&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2420&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2420&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2420) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2420&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2420&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Json plugin: do json type resolution during prepare stage for arguments and column mappers\n\nThis allows type lookup and object reader / writer to be reused"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234383dde8ed798d2ed5c8",
    "number": 2419,
    "body": "running type resolution is relatively expensive",
    "head_branch": "customizing-statement-handler-parameter-type",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2419)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2419&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2419&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2419&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2419&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2419&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2419&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2419&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2419&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2419&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2419&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2419&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2419&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2419) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2419&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2419&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "CustomizingStatementHandler: re-use parameter type\n\nrunning type resolution is relatively expensive"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234384dde8ed798d2ed5c9",
    "number": 2418,
    "body": "If a mapper factory can report a type that it supports (the inferred\nfactories and the static `...of()` mappers do as well), only invalidate\na single cache entry, not the whole cache.\n\nThis preserves elements that have been registered on the handle or the\njdbi ifself when using with sqlobject @RegisterColumnMapper and\n@RegisterRowMapper annotations\n\nSelf-rolled factories can implement the `getType()` method on the\nRowMapper and ColumnMapper interfaces to benefit from this as well.\n",
    "head_branch": "smart-cache",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2418)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2418&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2418&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2418&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2418&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2418&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2418&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2418&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2418&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2418&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2418&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2418&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2418&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2418) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2418&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2418&metric=new_duplicated_lines_density&view=list)\n\n",
      "Not really effective, shelving this for now"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234385dde8ed798d2ed5ca",
    "number": 2417,
    "body": null,
    "head_branch": "handle-doc-not",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2417)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2417&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2417&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2417&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2417&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2417&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2417&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2417&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2417&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2417&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2417&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2417&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2417&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2417) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2417&metric=duplicated_lines_density&view=list) No Duplication information\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2417 from jdbi/handle-doc-not\n\nRemove stray 'not' from Handle docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234386dde8ed798d2ed5cb",
    "number": 2416,
    "body": "Allow config customizers that do not need the config object itself to\ncreate internal state at metadata creation time and cache that state as\npart of the extension type metadata. This moves the creation of a\nclass (and potentially other expensive operations) away from the\ninvocation of extension methods.\n",
    "head_branch": "sqlobject-performance",
    "is_a_fork": true,
    "comments": [
      "any chance you can test this before merging it? I want to make sure it actually has benefits.",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2416)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2416&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2416&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2416&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2416&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2416&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2416&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2416&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2416&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2416&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2416&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2416&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2416&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2416) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2416&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2416&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2416 from hgschmie/sqlobject-performance\n\nImprove config customizer performance"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234387dde8ed798d2ed5cc",
    "number": 2414,
    "body": "fixes #2413",
    "head_branch": "extension-method-metadata",
    "is_a_fork": false,
    "comments": [
      "Turns out that there is actually a lot of stupidity in the original code. An interface can not override any method from Object (because ... rules). So all of the tests can go away, because we only create the metadata for interfaces.\r\n",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2414)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2414&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2414&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2414&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2414&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2414&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2414&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2414&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2414&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2414&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2414&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2414&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2414&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2414) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2414&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2414&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2414 from jdbi/extension-method-metadata\n\nmove method reflection from ExtensionFactoryDelegate to ExtensionMetadata"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234388dde8ed798d2ed5cd",
    "number": 2410,
    "body": null,
    "head_branch": "jdbi-config-cache-stats",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2410)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2410&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2410&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2410&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2410&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2410&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2410&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2410&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2410&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2410&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2410&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2410&resolved=false&types=CODE_SMELL) [1 Code Smell](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2410&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2410) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2410&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2410&metric=new_duplicated_lines_density&view=list)\n\n",
      "## [![Quality Gate Passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px.png 'Quality Gate Passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2410) **Quality Gate passed**  \nThe SonarCloud Quality Gate passed, but some issues were introduced.\n\n[2 New issues](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2410&resolved=false&inNewCodePeriod=true)  \n[0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2410&resolved=false&inNewCodePeriod=true)  \nNo data about Coverage  \n[0.0% Duplication on New Code](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2410&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2410)\n\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234389dde8ed798d2ed5ce",
    "number": 2409,
    "body": "- \"tests\" and \"run-tests\" goal are unambigous\n- documentation in CONTRIBUTING\n- add release-docs goal\n",
    "head_branch": "make-test-fix",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2409)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2409&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2409&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2409&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2409&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2409&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2409&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2409&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2409&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2409&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2409&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2409&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2409&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2409) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2409&metric=duplicated_lines_density&view=list) No Duplication information\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2409 from hgschmie/make-test-fix\n\nClarify the various make commands"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623438adde8ed798d2ed5cf",
    "number": 2408,
    "body": "The findbugs jsr305 annotations jar uses annotations in the\njavax.annotation namespace, which causes problems with JPMS.\n\nRemove the annotations from the code base. The Jdbi code itself\ntransitions to error prone and spotbugs.\n\nFor code that uses Jdbi (and all tests), a new\nannotation (org.jdbi.v3.core.mapper.reflect.Nullable) is introduced as\nall candidates either do not have Runtime retention (spotbugs,\njetbrains), have problems with JPMS (jsr305), are very\nspecialized (spring) or obscure (checker framework).\n",
    "head_branch": "kill-jsr305",
    "is_a_fork": true,
    "comments": [
      "replaced custom annotation with jakarta.",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2408)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2408&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2408&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2408&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2408&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2408&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2408&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2408&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2408&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2408&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2408&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2408&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2408&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2408) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2408&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2408&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2408 from hgschmie/kill-jsr305\n\nRemove JSR 305 annotations"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623438bdde8ed798d2ed5d0",
    "number": 2407,
    "body": null,
    "head_branch": "scs-register-cache",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2407)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2407&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2407&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2407&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2407&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2407&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2407&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2407&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2407&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2407&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2407&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2407&resolved=false&types=CODE_SMELL) [4 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2407&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2407) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2407&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2407&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623438cdde8ed798d2ed5d1",
    "number": 2405,
    "body": null,
    "head_branch": "nodocker",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2405)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2405&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2405&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2405&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2405&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2405&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2405&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2405&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2405&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2405&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2405&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2405&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2405&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2405) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2405&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2405&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2405 from hgschmie/nodocker\n\nfix pom validation error for missing default value"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623438ddde8ed798d2ed5d2",
    "number": 2404,
    "body": "Ensure that the binding is set correctly for both c'tors.\n",
    "head_branch": "prepared-batch-fix",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2404)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2404&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2404&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2404&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2404&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2404&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2404&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2404&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2404&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2404&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2404&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2404&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2404&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2404) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2404&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2404&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2404 from hgschmie/prepared-batch-fix\n\nPreparedBatch c'tor fix"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623438edde8ed798d2ed5d3",
    "number": 2403,
    "body": "This showed up as an allocation hotspot in our app since finding mappers is one of the most common Jdbi ops",
    "head_branch": "mapper-no-stream",
    "is_a_fork": false,
    "comments": [
      "what surprises me still is that this becomes a hotspot. the actual operations should be expensive only once and then served from the cache. Are you by any chance using `@RegisterRowMapper` or `@RegisterColumnMapper` annotations? *Any* newly registered mapper trashes the cache and in that case, you would re-register the mapper all the time for each operations. You would be much better off registering them once (ideally with the Jdbi) and then leverage the cache. \r\n\r\nI wonder if the right fix would be to make cache invalidation smarter (registering a mapper only invalidates the cache entry for that type). \r\n",
      "I agree, this indicates something is clearing the cache unexpectedly. I'll try to trace that down as a followup. We don't dynamically register any types.\r\n\r\nIt is hard to make the cache invalidation smarter since the factories are allowed to inspect a `Type` and decide if they will map it or not. There is no way to enumerate all types that a factory might map. In fact, doing so might not be possible - what about a mapper that matches nearly any type, like a json mapper.",
      "I think you're right that something else is wrong - we see the cache cleared repeatedly for a statically declared `@RegisterColumnMapper` annotation\r\n\r\n```\r\n\tat org.jdbi.v3.core.mapper.RowMappers.register(RowMappers.java:125)\r\n\tat org.jdbi.v3.sqlobject.config.internal.RegisterConstructorMapperImpl.configure(RegisterConstructorMapperImpl.java:33)\r\n\tat org.jdbi.v3.core.extension.SimpleExtensionConfigurer.configureForType(SimpleExtensionConfigurer.java:31)\r\n\tat org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.lambda$forExtensionType$0(UseAnnotationConfigCustomizerFactory.java:41)\r\n\tat org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.lambda$buildConfigCustomizer$4(UseAnnotationConfigCustomizerFactory.java:63)\r\n\tat org.jdbi.v3.core.config.internal.ConfigCustomizerChain.lambda$customize$0(ConfigCustomizerChain.java:47)\r\n\tat java.base/java.lang.Iterable.forEach(Iterable.java:75)\r\n\tat org.jdbi.v3.core.config.internal.ConfigCustomizerChain.customize(ConfigCustomizerChain.java:47)\r\n\tat org.jdbi.v3.core.extension.ExtensionMetadata.createInstanceConfiguration(ExtensionMetadata.java:84)\r\n\tat org.jdbi.v3.core.extension.ExtensionFactoryDelegate.attach(ExtensionFactoryDelegate.java:111)\r\n\tat org.jdbi.v3.core.extension.Extensions.lambda$findFor$0(Extensions.java:177)\r\n\tat java.base/java.util.Optional.map(Optional.java:260)\r\n\tat org.jdbi.v3.core.extension.Extensions.findFor(Extensions.java:177)\r\n\tat org.jdbi.v3.core.Handle.attach(Handle.java:871)\r\n\tat com.paywholesail.components.kafka.dblink.KafkaDbLinkConfiguration.link(KafkaDbLinkConfiguration.java:49)\r\n```",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2403)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2403&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2403&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2403&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2403&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2403&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2403&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2403&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2403&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2403&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2403&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2403&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2403&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2403) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2403&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2403&metric=new_duplicated_lines_density&view=list)\n\n",
      "I will go ahead with this change, since it should help cases where you cannot re-use the mapper registrations.\r\nI am still following up on why mapper re-use doesn't work in the first place and will have test cases soon."
    ],
    "commit_messages": [
      "RowMapper, ColumnMapper.findFor: reduce Stream usage in hot path\n\nThis showed up as an allocation hotspot in our app since finding mappers is one of the most common Jdbi ops"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623438fdde8ed798d2ed5d4",
    "number": 2400,
    "body": "- upgrade pipelines for jdk11\n- remove jdk8 build kludges\n",
    "head_branch": "migrate-jdk11",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2400)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2400&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2400&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2400&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2400&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2400&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2400&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2400&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2400&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2400&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2400&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2400&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2400&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2400) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2400&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2400&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2400 from hgschmie/migrate-jdk11\n\nmigrate jdk11"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234390dde8ed798d2ed5d5",
    "number": 2397,
    "body": "  - promoted from `@Beta` to stable (no functional changes, some minor doc reformatting and additions)\n    - `JdbiProperty`, `DatabaseValue`, `PropagateNull`, `GenerateSqlObject`  annotations\n    - `NamedArgumentFinder`, `SetObjectArgumentFactory`, `GetObjectColumnMapperFactory`, `GenericMapMapperFactory`, `RowViewMapper`\n    - `MapMappers` configuration object\n    - `ConfigCache` functionality\n    - `SqlStatementCustomizer#warm()` and `SqlStatementParameterCustomizer#warm()`\n    - template engines\n    - moshi json support\n\n  - promoted from `@Alpha` to `@Beta` (no functional changes, doc cleanups)\n    - Codec functionality\n    - `BaseStatement#attachToHandleForCleanup()`\n    - PostGIS support\n",
    "head_branch": "alpha-beta",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed.svg 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2397)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug.svg 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2397&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.svg 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2397&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2397&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability.svg 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2397&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.svg 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2397&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2397&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot.svg 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2397&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.svg 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2397&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2397&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell.svg 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2397&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.svg 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2397&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2397&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo.svg 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2397) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3.svg '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2397&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2397&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2397 from hgschmie/alpha-beta\n\nalpha/beta promotions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234391dde8ed798d2ed5d6",
    "number": 2396,
    "body": "Ensure that this works just fine. :-)\n",
    "head_branch": "issue-2389",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2396)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2396&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2396&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2396&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2396&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2396&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2396&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2396&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2396&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2396&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2396&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2396&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2396&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2396) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2396&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2396&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2396 from hgschmie/issue-2389\n\nAdd a unit test for issue 2395"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234392dde8ed798d2ed5d7",
    "number": 2394,
    "body": "- converted the procedure tests in TestCallable to postgres\n- enabled the disabled tests (pg has outparameters)\n- investigated #1813 (and added a test)\n\nTurns out that do not correctly return null values for outparameters\n(we always return the default value if an out parameter is null). Fix\nthat by calling #wasNull() on the statement. Add a test.\n",
    "head_branch": "call-null-return",
    "is_a_fork": true,
    "comments": [
      "@stevenschlansker this warrants some cursory glance, it is obviously correct but it changes behavior slightly. ",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2394)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2394&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2394&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2394&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2394&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2394&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2394&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2394&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2394&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2394&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2394&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2394&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2394&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2394) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2394&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2394&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2394 from hgschmie/call-null-return\n\nFix null return values for outparameters"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234393dde8ed798d2ed5d8",
    "number": 2393,
    "body": null,
    "head_branch": "guava-cve",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2393)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2393&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2393&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2393&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2393&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2393&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2393&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2393&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2393&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2393&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2393&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2393&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2393&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2393) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2393&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2393&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2393 from hgschmie/guava-cve\n\nupdate guava for CVE-2023-2976"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234394dde8ed798d2ed5d9",
    "number": 2392,
    "body": null,
    "head_branch": "test-issue-1389",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2392)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2392&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2392&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2392&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2392&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2392&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2392&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2392&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2392&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2392&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2392&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2392&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2392&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2392) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2392&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2392&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2392 from hgschmie/test-issue-1389\n\nAdd unit test for issue #1389"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234395dde8ed798d2ed5da",
    "number": 2389,
    "body": "Current lombok does not compile with JDK 21\n",
    "head_branch": "no-lombok-jdk21",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2389)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2389&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2389&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2389&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2389&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2389&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2389&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2389&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2389&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2389&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2389&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2389&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2389&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2389) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2389&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2389&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2389 from hgschmie/no-lombok-jdk21\n\nTurn off lombok for jdk 21"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234396dde8ed798d2ed5db",
    "number": 2388,
    "body": "Also add a test for RegisterCollectorFactory\n",
    "head_branch": "register-collector-docs",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2388)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2388&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2388&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2388&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2388&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2388&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2388&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2388&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2388&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2388&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2388&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2388&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2388&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2388) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2388&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2388&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2388 from hgschmie/register-collector-docs\n\nfix docs for register collector"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234397dde8ed798d2ed5dc",
    "number": 2387,
    "body": null,
    "head_branch": "sonar-issues",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2387)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2387&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2387&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2387&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2387&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2387&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2387&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2387&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2387&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2387&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2387&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2387&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2387&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2387) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2387&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2387&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2387 from hgschmie/sonar-issues\n\nfix potential NPE"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234398dde8ed798d2ed5dd",
    "number": 2386,
    "body": null,
    "head_branch": "sonar-issues",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2386)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2386&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2386&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2386&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2386&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2386&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2386&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2386&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2386&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2386&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2386&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2386&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2386&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2386) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2386&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2386&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2386 from hgschmie/sonar-issues\n\nFix sonar reported bugs and critical issues"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234399dde8ed798d2ed5de",
    "number": 2385,
    "body": null,
    "head_branch": "more-small-stuff",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2385 from jdbi/more-small-stuff\n\nbring sonar project name back"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623439adde8ed798d2ed5df",
    "number": 2384,
    "body": null,
    "head_branch": "sonar-pr",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2384 from hgschmie/sonar-pr\n\nget PR analysis back into sonar ui"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623439bdde8ed798d2ed5e0",
    "number": 2383,
    "body": null,
    "head_branch": "sonar-pr",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623439cdde8ed798d2ed5e1",
    "number": 2382,
    "body": null,
    "head_branch": "more-small-stuff",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2382)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2382&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2382&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2382&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2382&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2382&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2382&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2382&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2382&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2382&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2382&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2382&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2382&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2382&metric=coverage&view=list) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2382&metric=duplicated_lines_density&view=list) No Duplication information\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2382 from hgschmie/more-small-stuff\n\nMore small stuff"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623439ddde8ed798d2ed5e2",
    "number": 2381,
    "body": null,
    "head_branch": "sonar-codesmells",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2381 from hgschmie/sonar-codesmells\n\nfix sonar flagged code smells"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623439edde8ed798d2ed5e3",
    "number": 2380,
    "body": null,
    "head_branch": "fix-sonar-cache",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2380 from hgschmie/fix-sonar-cache\n\nreally cache the sonar tree"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623439fdde8ed798d2ed5e4",
    "number": 2379,
    "body": null,
    "head_branch": "sonar-codesmells",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343a0dde8ed798d2ed5e5",
    "number": 2378,
    "body": null,
    "head_branch": "sonar-changes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "move sonar to style action (#2378)\n\nRemove auto-build for sonarcloud\r\n\r\nMove to an action in the style workflow. Use SONAR_TOKEN secret to authenticate."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343a1dde8ed798d2ed5e6",
    "number": 2377,
    "body": "I took the PR and hopefully got it over the finish line with a test and some simple docs.\r\nBonus fix: try to use the Collector's declared element type, so that you may collect into things that aren't `Iterable`s.\r\n\r\nFixes #2357\r\n",
    "head_branch": "registercollector",
    "is_a_fork": false,
    "comments": [
      "cc @TheRealRyGuy",
      "thank you so much, have had no time lately \n\nmy only thought that I was hopefully gonna get around to - would it be better to use a CollectorSupplier kind of class in the annotation? \nAllows for shorthand Collector.of and Collectors usage, while still allowing for Collector inheritance, feels better for QoL",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2377)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2377&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2377&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2377&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2377&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2377&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2377&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2377&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2377&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2377&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2377&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2377&resolved=false&types=CODE_SMELL) [2 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2377&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2377) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2377&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2377&metric=new_duplicated_lines_density&view=list)\n\n",
      "I will merge this and then fix the docs."
    ],
    "commit_messages": [
      "Implement @RegisterCollector with tests and short doc (#2377)\n\nimpl annotation based collector registry\r\n\r\n---------\r\n\r\nCo-authored-by: TheRealRyGuy <git@ryguy.me>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343a2dde8ed798d2ed5e7",
    "number": 2376,
    "body": "Control failure modes for extension objects with misconfigured methods.\r\n\r\nAddresses #2359",
    "head_branch": "failfast",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed.svg 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2376)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug.svg 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2376&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.svg 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2376&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2376&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability.svg 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2376&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.svg 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2376&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2376&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot.svg 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2376&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.svg 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2376&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2376&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell.svg 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2376&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.svg 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2376&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2376&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo.svg 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2376) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3.svg '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2376&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2376&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2376 from hgschmie/failfast\n\nAdd `failFast` flag to Extensions"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343a3dde8ed798d2ed5e8",
    "number": 2375,
    "body": null,
    "head_branch": "code-fixes",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2375)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2375&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2375&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2375&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2375&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2375&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2375&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2375&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2375&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2375&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2375&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2375&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2375&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2375) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2375&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2375&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2375 from hgschmie/code-fixes\n\nsmall style fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343a4dde8ed798d2ed5e9",
    "number": 2373,
    "body": "@stevenschlansker  This works for releasing. We can not change the namespace identifier (that one is hardcoded in maven), but we can change the schema location. This turns off the warnings in various IDEs. :-) ",
    "head_branch": "https-schema-location",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2373)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2373&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2373&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2373&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2373&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2373&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2373&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2373&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2373&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2373&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2373&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2373&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2373&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2373) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2373&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2373&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2373 from hgschmie/https-schema-location\n\nadd https schema location"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343a6dde8ed798d2ed5ea",
    "number": 2372,
    "body": null,
    "head_branch": "xsd-fix",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2372)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2372&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2372&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2372&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2372&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2372&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2372&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2372&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2372&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2372&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2372&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2372&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2372&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2372) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2372&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2372&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2372 from hgschmie/xsd-fix\n\nfix XML headers"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343a7dde8ed798d2ed5eb",
    "number": 2370,
    "body": "Sadly, this seems to break the release plugin. Reverting.",
    "head_branch": "revert-https",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2370)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2370&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2370&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2370&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2370&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2370&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2370&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2370&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2370&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2370&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2370&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2370&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2370&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2370) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2370&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2370&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2370 from hgschmie/revert-https\n\nRevert https URIs in POMs"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343a8dde8ed798d2ed5ec",
    "number": 2369,
    "body": null,
    "head_branch": "basepom-54",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2369)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2369&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2369&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2369&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2369&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2369&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2369&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2369&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2369&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2369&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2369&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2369&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2369&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2369) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2369&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2369&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2369 from hgschmie/basepom-54\n\nbasepom 54"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343a9dde8ed798d2ed5ed",
    "number": 2367,
    "body": "- antlr to 4.13.0\r\n\r\n- asciidoctor to 2.2.4\r\n- asciidoctorj-diagram to 2.2.8",
    "head_branch": "plugin-updates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2367 from hgschmie/plugin-updates\n\nMore updates"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343aadde8ed798d2ed5ee",
    "number": 2366,
    "body": "### What happened？\nThere are 1 security vulnerabilities found in org.xerial:sqlite-jdbc 3.41.2.1\n- [CVE-2023-32697](https://www.oscs1024.com/hd/CVE-2023-32697)\n\n\n### What did I do？\nUpgrade org.xerial:sqlite-jdbc from 3.41.2.1 to 3.41.2.2 for vulnerability fix\n\n### What did you expect to happen？\nIdeally, no insecure libs should be used.\n\n### The specification of the pull request\n[PR Specification](https://www.oscs1024.com/docs/pr-specification/) from OSCS",
    "head_branch": "oscs_fix_chne2e8au51qt1nt0idg",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2366)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2366&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2366&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2366&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2366&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2366&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2366&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2366&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2366&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2366&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2366&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2366&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2366&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2366) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2366&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2366&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "update org.xerial:sqlite-jdbc 3.41.2.1 to 3.41.2.2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343abdde8ed798d2ed5ef",
    "number": 2364,
    "body": "- flatten to 1.5.0\r\n- inline to 1.1.0",
    "head_branch": "inline-plugin-update",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2364)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2364&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2364&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2364&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2364&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2364&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2364&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2364&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2364&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2364&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2364&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2364&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2364&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2364) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2364&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2364&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2364 from hgschmie/inline-plugin-update\n\nupdate plugin versions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343acdde8ed798d2ed5f0",
    "number": 2362,
    "body": null,
    "head_branch": "guice-release",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2362)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2362&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2362&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2362&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2362&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2362&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2362&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2362&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2362&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2362&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2362&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2362&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2362&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2362) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2362&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2362&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2362 from hgschmie/guice-release\n\ntest against guice release versions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343addde8ed798d2ed5f1",
    "number": 2361,
    "body": null,
    "head_branch": "pg-embedded-5.0",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2361)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2361&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2361&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2361&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2361&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2361&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2361&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2361&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2361&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2361&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2361&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2361&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2361&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2361) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2361&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2361&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2361 from hgschmie/pg-embedded-5.0\n\nupdate pg-embedded to 5.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343aedde8ed798d2ed5f2",
    "number": 2357,
    "body": "Adds an annotation call to `JdbiCollectors#registerCollector(Type, Collector)`, allowing for QoL complex collectors as an alternative to making a `CollectorFactory` for use in interface DAOs. \r\nThis could probably use some tests though",
    "head_branch": "registercollector",
    "is_a_fork": true,
    "comments": [
      "Hi @TheRealRyGuy,\r\n\r\nThank you for opening a PR with the Jdbi project. This seems a useful addition to our code base. As you pointed out, it would be good to have some tests (and also add some documentation). I will see if I can address this later this week.",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2357)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2357&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2357&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2357&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2357&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2357&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2357&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2357&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2357&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2357&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2357&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2357&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2357&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2357) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2357&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2357&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343afdde8ed798d2ed5f3",
    "number": 2354,
    "body": null,
    "head_branch": "build-fix",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2354)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2354&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2354&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2354&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2354&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2354&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2354&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2354&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2354&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2354&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2354&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2354&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2354&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2354) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2354&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2354&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2354 from hgschmie/build-fix\n\nRemove duplicate plugin execution"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343b0dde8ed798d2ed5f4",
    "number": 2353,
    "body": null,
    "head_branch": "basepom-53",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2353)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2353&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2353&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2353&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2353&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2353&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2353&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2353&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2353&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2353&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2353&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2353&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2353&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2353) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2353&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2353&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2353 from hgschmie/basepom-53\n\nupdate to basepom 53"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343b1dde8ed798d2ed5f5",
    "number": 2352,
    "body": null,
    "head_branch": "build-system-rejiggle",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2352)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2352&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2352&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2352&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2352&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2352&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2352&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2352&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2352&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2352&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2352&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2352&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2352&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2352) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2352&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2352&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2352 from hgschmie/build-system-rejiggle\n\nBuild system rejiggle"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343b2dde8ed798d2ed5f6",
    "number": 2351,
    "body": "Restore the pre-3.38.0 behavior where errors during warming were only thrown when a method was called for the first time. The 3.38.0 changes made warming up much more aggressive which resulted in errors being reported for extension methods that were not in use (but present on the extension class).\r\n\r\nAdd some clarification to the error messages as well. \r\n\r\nThis addresses #2342 ",
    "head_branch": "issue-2342",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2351)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2351&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2351&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2351&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2351&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2351&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2351&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2351&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2351&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2351&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2351&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2351&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2351&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2351) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2351&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2351&metric=new_duplicated_lines_density&view=list)\n\n",
      "We could; it would just be another knob that needs documenting. I will add a task for it."
    ],
    "commit_messages": [
      "Merge pull request #2351 from hgschmie/issue-2342\n\nIgnore unknown mappers when warming DAO classes"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343b3dde8ed798d2ed5f7",
    "number": 2349,
    "body": null,
    "head_branch": "guice-jakarta",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2349)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2349&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2349&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2349&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2349&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2349&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2349&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2349&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2349&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2349&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2349&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2349&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2349&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2349) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2349&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2349&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2349 from hgschmie/guice-jakarta\n\nAdd support for guice 7.x (jakarta.inject)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343b4dde8ed798d2ed5f8",
    "number": 2348,
    "body": null,
    "head_branch": "kotlin-version-test",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2348)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2348&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2348&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2348&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2348&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2348&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2348&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2348&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2348&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2348&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2348&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2348&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2348&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2348) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2348&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2348&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2348 from hgschmie/kotlin-version-test\n\nUpdate test pipelines for version checks\r\n\r\nActually detects a problem with the vavr code, document it and do not test 1.0.0-alpha-4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343b5dde8ed798d2ed5f9",
    "number": 2345,
    "body": "build changes:\r\n\r\n- test newer dependency versions in CI tests\r\n- test new guice versions in CI tests\r\n\r\ninternal dependencies:\r\n\r\n- jmh to 1.36 (from 1.32)\r\n- antlr to 4.12.0 (from 4.10.1)\r\n- assertj to 3.24.2 (from 3.23.1)\r\n- checkerframework to 3.34.0 (from 3.15.0)\r\n- commons-compress to 1.23.0 (from 1.21)\r\n- derby to 10.16.1.1 (from 10.15.2.0)\r\n- freebuilder to 2.8.0 (from 2.7.0)\r\n- junit to 5.9.3 (from 5.9.1)\r\n- lombok to 1.18.26 (from 1.18.24)\r\n- mockito to 4.11.0 (from 4.2.0)\r\n- sortpom 3.2.1 (from 3.2.0)\r\n- testcontainer 1.18.0 (from 1.17.6)\r\n- testcontainer database updates\r\n\r\ncode dependencies:\r\n\r\n- caffeine to 3.1.6 (from 3.0.3)\r\n- freemarker to 2.3.23 (from 2.3.31)\r\n- guava to 31.1-jre (from 30.1.1-jre)\r\n- postgresql to 42.6.0 (from 42.5.1)\r\n- sqlite to 3.41.2.1 (from 3.36.0.1)\r\n\r\nkotlin changes:\r\n\r\n- set trailing comma for kotlin to false (ktlint changed default)\r\n- detekt to 1.22.0 (from 1.21.0-RC2)\r\n- dokka to 1.8.10 (from 1.7.10)\r\n- use kotlin 1.8.21 compiler (from 1.7.10)\r\n- ktlint 1.16.0 (from 1.15.1)\r\n\r\ndocumentation:\r\n\r\n- asciidoctor and asciidoctorj updates",
    "head_branch": "version-updates",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2345)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2345&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2345&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2345&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2345&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2345&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2345&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2345&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2345&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2345&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2345&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2345&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2345&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2345) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2345&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2345&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Dependency and build upgrades (#2345)\n\nbuild changes:\r\n\r\n- test newer dependency versions in CI tests\r\n- test new guice versions in CI tests\r\n\r\ninternal dependencies:\r\n\r\n- jmh to 1.36 (from 1.32)\r\n- antlr to 4.12.0 (from 4.10.1)\r\n- assertj to 3.24.2 (from 3.23.1)\r\n- checkerframework to 3.34.0 (from 3.15.0)\r\n- commons-compress to 1.23.0 (from 1.21)\r\n- freebuilder to 2.8.0 (from 2.7.0)\r\n- junit to 5.9.3 (from 5.9.1)\r\n- lombok to 1.18.26 (from 1.18.24)\r\n- mockito to 4.11.0 (from 4.2.0)\r\n- sortpom 3.2.1 (from 3.2.0)\r\n- testcontainer 1.18.0 (from 1.17.6)\r\n- testcontainer database updates\r\n\r\ncode dependencies:\r\n\r\n- caffeine to 3.1.6 (from 3.0.3)\r\n- freemarker to 2.3.23 (from 2.3.31)\r\n- guava to 31.1-jre (from 30.1.1-jre)\r\n- postgresql to 42.6.0 (from 42.5.1)\r\n- sqlite to 3.41.2.1 (from 3.36.0.1)\r\n\r\nkotlin changes:\r\n\r\n- set trailing comma for kotlin to false (ktlint changed default)\r\n- detekt to 1.22.0 (from 1.21.0-RC2)\r\n- dokka to 1.8.10 (from 1.7.10)\r\n- use kotlin 1.8.21 compiler (from 1.7.10)\r\n- ktlint 1.16.0 (from 1.15.1)\r\n\r\ndocumentation:\r\n\r\n- asciidoctor and asciidoctorj updates"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343b6dde8ed798d2ed5fa",
    "number": 2344,
    "body": "Fixes #2343",
    "head_branch": "intxn-restore-isolation",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2344)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2344&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2344&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2344&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2344&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2344&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2344&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2344&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2344&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2344&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2344&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2344&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2344&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2344) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2344&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2344&metric=new_duplicated_lines_density&view=list)\n\n",
      "Do you have a suggestion for a better name? ",
      "No. :-) `TemporaryTransactionLevelChangeFactoryProviderSupplier` sounds too enterprisey to me. :-)  \r\n\r\nLet's ship what we have. "
    ],
    "commit_messages": [
      "Handle.inTransaction: improve exception when isolation restore fails\n\nFixes #2343"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343b7dde8ed798d2ed5fb",
    "number": 2341,
    "body": "Fixes #2336",
    "head_branch": "spring-chm",
    "is_a_fork": false,
    "comments": [
      "Right, unless I am missing something, this is quite different. The copy on write map is useful with mostly immutable config where the most common operation is copying the map. In this case we never copy, we are just adding and removing elements to a single static collection, which is a better fit for a normal concurrent map. On May 3, 2023, at 6:40 PM, Henning Schmiedehausen ***@***.***> wrote:﻿\n@hgschmie commented on this pull request.\n\n\n\nIn spring5/src/main/java/org/jdbi/v3/spring5/JdbiUtil.java:\n>  import org.springframework.transaction.support.TransactionSynchronizationManager;\n \n /**\n  * Utility for working with Jdbi and Spring transaction bound resources\n  */\n public class JdbiUtil {\n-    private static final Set<Handle> TRANSACTIONAL_HANDLES = new HashSet<>();\n+    private static final Set<Handle> TRANSACTIONAL_HANDLES = Collections.newSetFromMap(new ConcurrentHashMap<>());\n\nI am cool with this, but we did use CopyOnWriteSet in other places where concurrency was required.\n\n—Reply to this email directly, view it on GitHub, or unsubscribe.You are receiving this because you authored the thread.Message ID: ***@***.***>",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2341)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2341&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2341&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2341&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2341&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2341&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2341&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2341&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2341&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2341&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2341&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2341&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2341&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2341) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2341&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2341&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "JdbiUtil: use concurrent data structure to store static state\n\nFixes #2336"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343b8dde8ed798d2ed5fc",
    "number": 2338,
    "body": null,
    "head_branch": "config-test",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2338)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2338&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2338&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2338&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2338&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2338&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2338&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2338&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2338&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2338&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2338&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2338&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2338&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2338) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2338&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2338&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2338 from hgschmie/config-test\n\nUnit test for config registry behavior"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343b9dde8ed798d2ed5fd",
    "number": 2337,
    "body": "document that bindList is not working well with batches. addresses #2335",
    "head_branch": "issue-2335",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2337)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2337&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2337&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2337&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2337&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2337&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2337&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2337&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2337&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2337&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2337&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2337&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2337&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2337) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2337&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2337&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2337 from hgschmie/issue-2335\n\nAdd documentation for bindList"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343badde8ed798d2ed5fe",
    "number": 2332,
    "body": null,
    "head_branch": "collection-docs",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2332)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2332&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2332&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2332&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2332&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2332&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2332&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2332&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2332&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2332&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2332&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2332&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2332&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2332) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2332&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2332&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2332 from hgschmie/collection-docs\n\ndocument new collection methods"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343bbdde8ed798d2ed5ff",
    "number": 2331,
    "body": "new `collectToMap()`, `toCollection()`, `collectInto()`, `collectIntoList()`, `collectIntoSet()` collect methods.\r\n\r\nThis should fully address #2262\r\n",
    "head_branch": "issue-2262-henning",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2331)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2331&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2331&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2331&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2331&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2331&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2331&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2331&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2331&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2331&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2331&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2331&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2331&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2331) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2331&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2331&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2331 from hgschmie/issue-2262-henning\n\nAdd new methods to result iterable"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343bddde8ed798d2ed600",
    "number": 2330,
    "body": " to make cloning mapper and argument registries faster",
    "head_branch": "cow-map",
    "is_a_fork": false,
    "comments": [
      "> What worries me with this change is that the configuration is explicitly multithread safe and this class is most likely not.\r\n> \r\n> I would like to see a few tests that test multithreading.\r\n\r\n`concurrent. atomic. AtomicReference is a class designed to update variables in a thread-safe way.`\r\n\r\nMore worried about performance. But why aren't we using ConcurrentHashMap ? Then we could have avoided all this AtomicReference stuff ?  EDIT: Oh we did use ConcurrentHashMap before, and now we suddenly stopped using it in the the new class. I think we should continue using ConcurrentHashMap inside the new wrapper class. The implementation would be a lot simpler and easier to read and understand.",
      "Generally, it is not possible to show something is thread safe through unit tests. I am happy to explain or test any specific concerns you have with the code, but \"test it to show it is multithread-safe\" is not really a solvable problem, at least not with the effort I can commit here.\r\n\r\n> More worried about performance. But why aren't we using ConcurrentHashMap ? Then we could have avoided all this AtomicReference stuff ? EDIT: Oh we did use ConcurrentHashMap before, and now we suddenly stopped using it in the the new class. I think we should continue using ConcurrentHashMap inside the new wrapper class. The implementation would be a lot simpler and easier to read and understand.\r\n\r\nYes, the point of this change is that right now we are spending the majority of our time (as measured in production in my work app) copying ConcurrentHashMap around. The semantics of Jdbi configuration is that each layer inherits the configuration from its creator (Jdbi -> Handle -> Statement) but further changes are private and do not back-propagate.\r\nPreviously we had to eagerly copy each ConcurrentHashMap in case someone further down might change the configuration.\r\nNow, we use a CopyOnWriteMap (which I wish was in JDK but there is no built-in impl) so that when we clone configurations we do not actually have to copy all the maps and nodes until a re-configuration happens (which is almost never).\r\n\r\nDoes that help? I don't think moving back to ConcurrentHashMap would let me reach my goal of not having to eagerly copy maps on config-clone, but if I missed anything about your suggestion please let me know.",
      "> I don't think moving back to ConcurrentHashMap would let me reach my goal of not having to eagerly copy maps on config-clone, but if I missed anything about your suggestion please let me know.\r\n\r\nI just think there is a simpler way. I might not have understood the reasoning behind the AtomicReference and stuff from the get go, but I do now. However, I'm trying to suggest things that make the code less \"noisy\". For ex this implementation of CopyOnWriteHashMap is much more simpler and more readable https://github.com/djasonpenney/jersey-1.x/blob/2442996200a96989beb76c34e449aeb40a49ced4/jersey-client/src/main/java/com/sun/jersey/client/impl/CopyOnWriteHashMap.java ... instead of always copying, you make a copy only when the instance is cloned, or in this case when you construct a copyonwrite from another copyonwrite, or when you construct a copyonwrite with an existing map (since you want to leave the original map untouched). Is this class from jersey not what we want ? \r\n\r\nNot trying to make noise or anything. I just recently starting to poke into jdbi again after some years away from it, and if my comments is garbage please ignore them :D ",
      "Thanks for pointing me at the class from Jersey. I wasn't aware of this one, but I do not think it is correctly multi-threaded. For example, I think there is a race in e.g. the `put` method. Imagine this interleaving: T1 calls put(...), which calls copy(), which does the `compareAndSet`, and is then preempted. T2 comes along, and calls put(...), which calls copy(), which thinks the map has _already been copied_ (due to T1's incomplete work). It then calls put on a _shared_ map. Then, T1 wakes back up, and completes the copy method. In this case T2 would modify a shared, non-thread-safe map that other users expect to be immutable.\r\n\r\nThis is part of why my implementation runs all modifications through an AtomicReference update cycle. The bug sneaks in because of unsynchronized mutation of _multiple_ fields in concert (`requiresCopyOnWrite` and `core`). By running all updates through a single volatile variable, there's no possibility to slice the work in half - it either completes totally or does not.\r\n\r\nLet me know if you think my analysis isn't correct.",
      "The copyonwritemap from jersey is great, except that it is GPL (and now that we looked at it, we are actually \"tainted\"). But it is a straightforward implementation of the map semantics along the lines of CoWSet and CoWList",
      "@stevenschlansker  - https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/utils/CopyOnWriteMap.java\r\n\r\nthat has a compatible license, maybe just copy that?",
      "I would be comfortable just using the map from kafka. ",
      "I think the Kafka CopyOnWriteMap is also incorrectly implemented. It implements `ConcurrentMap` which implements the default e.g. `Map.computeIfAbsent`. These default implementations are explicitly marked as not thread safe, and required to re-implement if you implement `ConcurrentMap`, but Kafka makes no attempt to actually provide a correct implementation.\r\n\r\nHere is a specific failure I see possible with the Kafka impl:\r\nT1 calls computeIfAbsent(\"a\", \"1\")\r\n-> T1 calls get(\"a\") and observes `null`\r\nT2 calls put(\"a\", \"2\"), and stores.\r\n-> T1 calls put(\"a\", \"1\") and overwrites T2's value\r\n\r\nNow, the map contains {\"a\": \"1\"} which is not consistent with any serial execution. The only valid serial-execution result is {\"a\":\"2\"} - either T1 completes first, writing 1, which is then replaced by 2. Or, T2 completes first, putting 2, then T1 is a no-op.\r\n\r\nRather disappointing for a project that I would have thought would do better...",
      "I filed https://issues.apache.org/jira/browse/KAFKA-14942 to at least let the Kafka team know about the potential shortcomings in their map implementation.",
      "If the `AtomicReference` use really is a dealbreaker, it looks like this could be inlined using `AtomicReferenceFieldUpdater`. ",
      "I updated the code to avoid the unnecessary `AtomicReference` wrapping. The code is a bit uglier now, but it avoids an extra indirection.",
      "I was at least somewhat wrong about the Kafka implementation. It actually uses default methods from computeIfAbsent, which do use a retry-loop.\r\nRegardless, the implementation here should perform better, as it has a shallow copy constructor and it does not need any locking at all.",
      "I'm very unsure about this. And I feel like a turd bringing it up. But can you show me an example of what this PR is going to solve ? \"to make cloning mapper and argument registries faster\" is not enough for me to understand, since I literally just \"jumped\" into the conversation.\r\n\r\nSo, basically, we have several options to go with:\r\n\r\n1. AtomicReference with nesting (😷)\r\n2. AtomicReferenceFieldUpdater, with volatile \"unused\" map field and raw generics (😷)\r\n3. volatile map with synchronisation on write operations (Kafka version) (🤧)\r\n4. volatile core map with volatile view map (jersey version, mix of both safe and optimised read and copy on write) ✅ \r\n\r\nUsing ideas is not a problem with GPL. but copying code is. Plus this javaee/jersey-1.x is both archived and insanely old (8 years) and copyright notice isn't updated (now it's 2010-2015).  I would argue it's possible to use (reimplement) the jerseys version, but it's not good enough for us (I presume). I would make sure it always copy on write instead of using the atomicboolean, cutting down a bit on the amount of code and the amount of cognitive overhead. We are basically only \"tainted\" by old and archived GPL code, if we avoid looking at any possible newer version of this file wherever it went after the archival.\r\n\r\nWhat do you think?\r\n\r\nPS. I checked out the code to investigate this now, so I have actually looked at and played with the code.",
      "Im toying with the idea of using a combination of several of the ideas, just give me some time and I can come up with an idea for it, maybe. And why do we make all these extra classes when we could just wrap the map in unmodifiableMap? it does make sure the map is unmodifiable.  ",
      "```java\r\npackage org.jdbi.v3.core.internal;\r\n\r\nimport java.util.*;\r\nimport java.util.concurrent.atomic.AtomicReference;\r\nimport java.util.function.Consumer;\r\n\r\npublic class CopyOnWriteHashMapV2<K,V> implements Map<K,V> {\r\n    private volatile AtomicReference<Map<K,V>> core;\r\n\r\n    private volatile Map<K,V> view;\r\n\r\n    public CopyOnWriteHashMapV2() {\r\n        core = new AtomicReference<>(new HashMap<>());\r\n        view = null;\r\n    }\r\n\r\n    public CopyOnWriteHashMapV2(Map<K,V> that) { // possibly use same constructor argument as current code and use instance of check\r\n        core = new AtomicReference<>(new HashMap<>(that));\r\n        view = null;\r\n    }\r\n\r\n\r\n    public CopyOnWriteHashMapV2(CopyOnWriteHashMapV2<K,V> that) { // possibly use same constructor argument as current code and use instance of check\r\n        core = new AtomicReference<>(that.core.get());\r\n        view = null;\r\n    }\r\n\r\n    @Override\r\n    public int size() {\r\n        return core.get().size();\r\n    }\r\n\r\n    @Override\r\n    public boolean isEmpty() {\r\n        return core.get().isEmpty();\r\n    }\r\n\r\n    @Override\r\n    public boolean containsKey(Object key) {\r\n        return core.get().containsKey(key);\r\n    }\r\n\r\n    @Override\r\n    public boolean containsValue(Object value) {\r\n        return core.get().containsValue(value);\r\n    }\r\n\r\n    @Override\r\n    public V get(Object key) {\r\n        return core.get().get(key);\r\n    }\r\n\r\n    @Override\r\n    public V put(K key, V value) {\r\n        V oldValue = get(key);\r\n        copyAndUpdate(map -> map.put(key, value));\r\n        // we return the old value, not the value we inserted\r\n        return oldValue;\r\n    }\r\n\r\n    @Override\r\n    public V remove(Object key) {\r\n        if (!containsKey(key)) {\r\n            return null;\r\n        }\r\n        V oldValue = get(key);\r\n        copyAndUpdate(map -> map.remove(key));\r\n        // we return the old value, not the value we removed\r\n        return oldValue;\r\n    }\r\n\r\n    @Override\r\n    public void putAll(Map<? extends K, ? extends V> t) {\r\n        copyAndUpdate(map -> map.putAll(t));\r\n    }\r\n\r\n    @Override\r\n    public void clear() {\r\n        core.set(new HashMap<>());\r\n        view = null;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        return core.get().equals(obj);\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return core.get().hashCode();\r\n    }\r\n\r\n    @Override\r\n    public Set<K> keySet() {\r\n        return getView().keySet();\r\n    }\r\n\r\n    @Override\r\n    public Collection<V> values() {\r\n        return getView().values();\r\n    }\r\n\r\n    @Override\r\n    public Set<Entry<K,V>> entrySet() {\r\n        return getView().entrySet();\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return core.toString();\r\n    }\r\n\r\n    private Map<K, V> getView() {\r\n        Map<K, V> result = view;\r\n        if (result == null) {\r\n            result = Collections.unmodifiableMap(core.get());\r\n            view = result;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private void copyAndUpdate(Consumer<Map<K, V>> updater) {\r\n        core.getAndUpdate(old -> {\r\n            Map<K, V> copy = new HashMap<>(old);\r\n            updater.accept(copy);\r\n            return copy;\r\n        });\r\n        view = null;\r\n    }\r\n}\r\n```",
      "the suggestion above is terser and more read optimised. And it will always copy on write. And it will implement put and remove correctly. even if the returned value from said functions might be \"out of date\", its more correct than to return the current value.",
      "Let's discuss this and if this doesn't taste good, we don't go for it right. Im just trying to suggest a better solution, but if my version of \"better way\" isn't better at all, we just drop it :) ",
      "Tests passed with my example code above. We don't need to implement replaceAll , since entrySet, that is used by default in replaceAll, is immutable. So any mutation on entries won't work. However, since we are in java, we can still manipulate the value objects directly, which will reflect in the map, sadly. But that's just how java works. To avoid that we would need to clone every value before returning it in an entry set, and we can't enforce Cloneable on generic type V ;) ",
      "Personally, I am not convinced that we should taking on implementing a hashmap (I would have just taken the implementation from kafka and be done) and I would prefer a simpler structure with immutable data structures (and then documentation what others should do), but I am ok with having this and shipping it to improve performance.",
      "> I'm very unsure about this. And I feel like a turd bringing it up. But can you show me an example of what this PR is going to solve ? \"to make cloning mapper and argument registries faster\" is not enough for me to understand, since I literally just \"jumped\" into the conversation.\r\n\r\nNo problem @jarlah, it is always good to make sure we are solving a real problem. The specific case that is being solved here is right now every time you open a statement, we make a deep copy of the jdbi config tree. This showed up in our production performance profiling as the single hottest object allocation site, as well as a very hot code path, to do this deep copying. A specific bad case is the `PojoTypes` class, which remembers a user-provided set of classes, keeps its data in a CHM today. In order to make a \"child\" `PojoTypes` which has the same initial condition but is independent going forward, we must copy the CHM element by element, which is O(n). In our case, N is starting to get into dozens, and when you run many requests per second it shows up on top of our profiler.\r\n\r\nI appreciate that you like the Jersey approach, but I think it is inherently much more dangerous than other approaches, because it uses three unsynchronized fields together to maintain state. Since `core`, `view`, and `requiresCopyOnWrite` are all mutated without external synchronization, we must assume that any mutation in the code is _non-atomic_. Specifically,\r\n```\r\n    private void copy() {\r\n        if (requiresCopyOnWrite.compareAndSet(true, false)) {\r\n            core = new HashMap<K, V>(core);\r\n            view = null;\r\n        }\r\n    }\r\n```\r\nlooks quite problematic. Since this is not synchronized, we must assume that any other thread might observe a state where e.g. `requiresCopyOnWrite` has already been cleared, but the actual map copy has not happened yet.\r\nIn order for this to be safe, either all writes must hold an exclusive lock, or we must prove to ourselves that any partial completion of this method is just as safe as full completion. That's where the potential race comes in around e.g. `computeIfAbsent`. Here's another place I think there is a problem, that remains even if you rewrite to get rid of `requiresCopyOnWrite`:\r\n```\r\n    private Map<K, V> getView() {\r\n        Map<K, V> result = view; // volatile read\r\n        if (result == null) {\r\n            result = Collections.unmodifiableMap(core);\r\n            view = result; // volatile write\r\n        }\r\n```\r\nHere, it is possible for the core and view writes to ping pong. Imagine `getView` starts and reads view as null, so starts to set `view`. It reads `core`, and wraps it in an `unmodifiableMap`. Now, a competing write comes in and as such calls `copy`. The copy is made, the change is made at time T2, and view is cleared to `null`. Now, the original `getView` resumes, and stores the _old map from T1_ into `view`, leading to stale reads until the next update operation comes by.\r\n\r\nBasically, I think if you want to do this lock-free, you should aim to have all writes go through a single volatile variable. Any coordinated mutation is hard to prove correct.\r\n\r\nI think your updated code is vulnerable to the same race: both `getView` and `copyAndUpdate` mutate multiple volatile variables without external synchronization. So if two threads ping-pong between `getView` and `copyAndUpdate`, you can end up storing a stale `core` into `view`.\r\n\r\n> even if the returned value from said functions might be \"out of date\", its more correct than to return the current value.\r\n\r\nThis is not true, unfortunately, and my coworker actually just ran into this! Some of the map operations specify specifically returning the _old_ value. I think you actually cover this in your code, so I am not 100% clear on what you meant here.",
      "> Personally, I am not convinced that we should taking on implementing a hashmap \r\n\r\n@hgschmie , totally agree, but unfortunately this is not something that comes with the standard libraries. The Kafka implementation is okay, but given how much work I have been doing to eliminate locking in our hot paths, it seemed unfortunate to go right back to having a core datastructure wrapped in a big lock. The updater approach is really not that bad once you understand the primitives used (there are really only two, \"volatile read of current state\", and \"update state and return (old|new) state\".\r\n\r\nI have been toying with the idea of trying to contribute this to the JDK, but I am not sure how fruitful that process would be.",
      "> Im ok to to ship this, but, I don't understand the need for SetEntryEntrySet, SetEntryIterator and SetEntrySpliterator. Which is basically ripped out of the java collections api just for this new class. Instead, make an immutable copy of the map and just call the respective functions on on the immutable copy.\r\n\r\n@jarlah , fair point, I can just return `Collections.unmodifiableMap(get()).entrySet()` and the extra classes go away. I made this change. (it'll push after tests complete)",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2330)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2330&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2330&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2330&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2330&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2330&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2330&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2330&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2330&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2330&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2330&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2330&resolved=false&types=CODE_SMELL) [26 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2330&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2330) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2330&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2330&metric=new_duplicated_lines_density&view=list)\n\n",
      "@stevenschlansker I just looked at the original AtomicReference implementation again, and I must sadly admit that it would look nicer using AtomicReference. I'll admit that the code might have been drowned by the extra complexity from the extra classes 🙈 You decide. But if you don't use any other classes, and use AtomicReference, the stuff is golden. But we can also go with the current approach of course. Im just worried its basically same as going for an AtomicReference 🙈 But, no one is going to look at this code anymore anyway, if it works 🤷‍♂️ ",
      "I agree it would look nicer, but it comes at the cost of an extra indirection. Since I already did the work to inline it, let's go with this. If there's problems, we can revisit again, maybe taking Henning's idea to have truly immutable copies at the expense of ditching the jdk collections implementations.",
      "In the future, with value types, the AtomicReference might get inlined. But that's not in the present, yet.",
      "hi, I am not in favor of adding complicated fundamental data structures such as this to Jdbi.\r\nIs the anticipated gain in performance worth the cost of\r\n- extra complexity?\r\n- increased barrier to entry for new or less experienced contributors?\r\n- additional maintenance burden?\r\n\r\nIs there a general merit or is this merely satisfying a narrow use case?\r\nHas before / after been profiled?",
      "Yes, I am fully convinced some change is necessary here. This might not be the change we eventually settle on, but our production application was allocating gigabytes per second of garbage due simply to copying these maps over and over again. We have run our production app with these changes for a few days now, and the GC is totally idle now instead of being on fire under heavy load."
    ],
    "commit_messages": [
      "Performance: introduce CopyOnWriteHashMap to make cloning mapper and argument registries faster"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343bedde8ed798d2ed601",
    "number": 2329,
    "body": null,
    "head_branch": "cow-perf",
    "is_a_fork": false,
    "comments": [
      "Is that documented somewhere? I can't see it in the javadocs.\r\n\r\nI was thinking more along the lines of creating all collection objects as immutable and then share it between the copies. Whenever a collection is modified, we would swap out the object that is modified. basically make the fields mutable but the objects immutable.\r\n\r\n```java\r\nclass Foo {\r\n    private Set<XXX> xxx = SomeImmutableSet.of();\r\n\r\n    Foo(Foo that) {\r\n        this.xxx = that.xxx;\r\n    }\r\n\r\n    Foo addXXX(XXX xxx) {\r\n        this.xxx = this.xxx.builder().add(xxx).build();\r\n        return this;\r\n    }\r\n}\r\n````\r\n\r\nThis makes the often used operation (copy) cheap and fast and makes the less often used operation (modify the collection) slow. \r\n\r\nAs we don't have guava in the core (and don't want to), we would need something with a similar pattern. ",
      "No, I don't see it documented anywhere, but both JDK implementations (at least as of 20) do a runtime check for their own type and fast-path it.\r\n\r\nIsn't your suggestion to implement copy-on-write ourselves almost the same as just using the JDK implementation, relying on the fast-copy constructor? I am not seeing how it is different.",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2329)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2329&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2329&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2329&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2329&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2329&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2329&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2329&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2329&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2329&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2329&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2329&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2329&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2329) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2329&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2329&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Performance: CopyOnWriteArray(List,Set) have fast-path shallow copy constructors"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343bfdde8ed798d2ed602",
    "number": 2328,
    "body": "We support Consumer<Stream<T>> and Consumer<Iterator<T>> already",
    "head_branch": "consumer-iterable",
    "is_a_fork": true,
    "comments": [
      "Iterable, unlike Iterator or Stream, expects to be able to produce results more than once. So this oversight is at least somewhat intentional, since we cannot really fulfill Iterable's contract.",
      "The PR implementation supports calling Iterable#iterator() multiple times just fine. It does cache the result in memory though (in a linked list). This could be implemented as a single-shot iterator, see https://stackoverflow.com/questions/15781739/is-there-any-official-contract-for-the-iterable-interface-with-respect-to-multip for some discussion.\r\n\r\nThere seems to be no official \"must be able to call this multiple times\" documentation, just implicit. And it can be mitigated with documentation (see https://docs.oracle.com/javase/7/docs/api/java/nio/file/DirectoryStream.html)\r\n\r\n",
      "single shot iterable PoC:\r\n\r\n```java\r\nstatic class ConsumeIterableResultReturner extends ConsumerResultReturner {\r\n\r\n        ConsumeIterableResultReturner(int consumerIndex, QualifiedType<?> elementType) {\r\n            super(consumerIndex, elementType);\r\n        }\r\n\r\n        @SuppressWarnings(\"unchecked\")\r\n        @Override\r\n        protected void accept(Stream<?> stream, @SuppressWarnings(\"rawtypes\") Consumer consumer) {\r\n            try {\r\n                consumer.accept((Iterable) stream::iterator);\r\n            } finally {\r\n                stream.close();\r\n            }\r\n        }\r\n    }```",
      "this would behave exactly like the DirectoryStream thing. Biggest advantage is that the memory use for the iterable would be the same as for iterator and stream. Otherwise, it will cache everything in memory (which may surprise people). ",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2328)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2328&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2328&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2328&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2328&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2328&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2328&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2328&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2328&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2328&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2328&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2328&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2328&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2328) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2328&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2328&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2328 from hgschmie/consumer-iterable\n\nSupport Consumer<Iterable<T>>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343c0dde8ed798d2ed603",
    "number": 2327,
    "body": "Make sure that there can not be multiple consumer arguments for a SQL object method.",
    "head_branch": "enforce-single-consumer",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2327)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2327&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2327&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2327&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2327&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2327&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2327&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2327&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2327&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2327&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2327&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2327&resolved=false&types=CODE_SMELL) [1 Code Smell](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2327&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2327) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2327&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2327&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2327 from hgschmie/enforce-single-consumer\n\nEnforce single Consumer argument"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343c1dde8ed798d2ed604",
    "number": 2325,
    "body": null,
    "head_branch": "spring-again",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2325)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2325&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2325&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2325&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2325&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2325&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2325&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2325&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2325&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2325&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2325&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2325&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2325&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2325) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2325&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2325&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2325 from hgschmie/spring-again\n\nguess what broke again"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343c2dde8ed798d2ed605",
    "number": 2324,
    "body": "- upgrade maven wrapper to 3.9.x\r\n- remove all the hacks that pre-3.9 required\r\n- allow releasing without docker",
    "head_branch": "build-system-3.9",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2324)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2324&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2324&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2324&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2324&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2324&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2324&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2324&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2324&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2324&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2324&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2324&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2324&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2324) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2324&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2324&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2324 from hgschmie/build-system-3.9\n\nUpdates to the build system"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343c3dde8ed798d2ed606",
    "number": 2323,
    "body": null,
    "head_branch": "scs-singleton-freemarker",
    "is_a_fork": false,
    "comments": [
      "Lgtm",
      "Please retry analysis of this Pull-Request directly on [SonarCloud](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2323).",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2323)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2323&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2323&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2323&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2323&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2323&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2323&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2323&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2323&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2323&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2323&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2323&resolved=false&types=CODE_SMELL) [1 Code Smell](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2323&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2323) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2323&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2323&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "FreemarkerEngine: singleton instance so caching works"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343c4dde8ed798d2ed607",
    "number": 2322,
    "body": null,
    "head_branch": "more-docs",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2322)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2322&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2322&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2322&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2322&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2322&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2322&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2322&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2322&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2322&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2322&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2322&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2322&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2322) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2322&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2322&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2322 from hgschmie/more-docs\n\nSQL Object documentation updates"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343c5dde8ed798d2ed608",
    "number": 2321,
    "body": null,
    "head_branch": "scs-cleanup-types",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2321)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2321&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2321&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2321&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2321&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2321&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2321&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2321&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2321&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2321&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2321&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2321&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2321&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2321) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2321&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2321&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2321 from jdbi/scs-cleanup-types\n\nClean up #2306"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343c6dde8ed798d2ed609",
    "number": 2320,
    "body": "This is the first piece to address #2262\r\n\r\n- ResultIterable#set()\r\n- ResultIterable#collectToMap(keyFunction, valueFunction)\r\n\r\n- add test suite\r\n- some code reshuffling",
    "head_branch": "issue-2262",
    "is_a_fork": true,
    "comments": [
      "these are the pieces of #2303 that we agree upon. ",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2320)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2320&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2320&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2320&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2320&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2320&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2320&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2320&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2320&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2320&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2320&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2320&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2320&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2320) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2320&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2320&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2320 from hgschmie/issue-2262\n\nProvide collect methods on ResultIterable"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343c7dde8ed798d2ed60a",
    "number": 2319,
    "body": null,
    "head_branch": "st-version",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2319)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2319&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2319&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2319&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2319&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2319&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2319&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2319&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2319&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2319&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2319&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2319&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2319&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2319) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2319&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2319&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2319 from hgschmie/st-version\n\nstring template 4.3.4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343c8dde8ed798d2ed60b",
    "number": 2317,
    "body": "Resolves #2309",
    "head_branch": "issue-2309",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2317)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2317&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2317&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2317&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2317&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2317&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2317&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2317&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2317&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2317&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2317&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2317&resolved=false&types=CODE_SMELL) [2 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2317&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2317) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2317&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2317&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2317 from hgschmie/issue-2309\n\nRemove @Beta annotation from CaseStrategy"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343c9dde8ed798d2ed60c",
    "number": 2316,
    "body": "fixes #2310",
    "head_branch": "issue-2310",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2316)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2316&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2316&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2316&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2316&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2316&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2316&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2316&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2316&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2316&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2316&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2316&resolved=false&types=CODE_SMELL) [1 Code Smell](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2316&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2316) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2316&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2316&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2316 from hgschmie/issue-2310\n\nRefactor the AccessibleObjectStrategy for reflection mappers"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343cadde8ed798d2ed60d",
    "number": 2315,
    "body": null,
    "head_branch": "spring-again",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2315)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2315&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2315&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2315&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2315&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2315&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2315&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2315&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2315&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2315&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2315&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2315&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2315&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2315) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2315&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2315&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2315 from hgschmie/spring-again\n\nupdate spring dependency"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343cbdde8ed798d2ed60e",
    "number": 2314,
    "body": "Make the StatementExceptions#setMessageRendering and getMessageRendering methods operate on Function objects, not the MessageRendering implementations. This allows users to plug in their own implementations, not limit them to the provided implementations",
    "head_branch": "issue-2311",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2314)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2314&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2314&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2314&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2314&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2314&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2314&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2314&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2314&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2314&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2314&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2314&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2314&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2314) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2314&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2314&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2314 from hgschmie/issue-2311\n\nAllow user defined message rendering"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343ccdde8ed798d2ed60f",
    "number": 2313,
    "body": "- Bunch of small rewrites to remove warts\r\n- test suite for all extension framework specific pieces\r\n- 1,000 lines of documentation. And a pretty picture!",
    "head_branch": "option-docs",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2313)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2313&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2313&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2313&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2313&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2313&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2313&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2313&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2313&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2313&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2313&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2313&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2313&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2313) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2313&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2313&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2313 from hgschmie/option-docs\n\nDocumentation for extension framework"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343cddde8ed798d2ed610",
    "number": 2312,
    "body": "documents all user visible configuration switches, reformats Jdbi Config chapter, regroups some of the smaller documentation items.\r\n\r\nTODO - add a table with all the registries",
    "head_branch": "option-docs",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2312)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2312&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2312&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2312&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2312&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2312&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2312&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2312&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2312&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2312&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2312&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2312&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2312&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2312) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2312&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2312&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2312 from hgschmie/option-docs\n\nAdds more documentation for configuration"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343cedde8ed798d2ed611",
    "number": 2307,
    "body": "The nexus staging plugin has a bug preventing us from using it (https://issues.sonatype.org/browse/NEXUS-38262). Use the deploy plugin from basepom instead.",
    "head_branch": "use-deploy-profile",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2307)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2307&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2307&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2307&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2307&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2307&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2307&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2307&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2307&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2307&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2307&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2307&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2307&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2307) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2307&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2307&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2307 from hgschmie/use-deploy-profile\n\nUse deploy profile, not nexus staging"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343cfdde8ed798d2ed612",
    "number": 2306,
    "body": "Port the code from geantryref.TypeToken#extractType for classes passed into GenericType.\r\n\r\nFixes #2305",
    "head_branch": "generic-fix",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2306)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2306&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2306&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2306&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2306&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2306&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2306&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2306&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2306&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2306&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2306&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2306&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2306&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2306) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2306&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2306&metric=new_duplicated_lines_density&view=list)\n\n",
      "This is a straight port of the code in TypeToken#extractType in geantryref. If the type is not a naked class, it falls back to the existing code. ",
      "Hey there 👋\r\nAs I commented on the related GeantyRef issue, what you're seeing is actually the expected behavior. But it sounds like you could use a new method that tolerates partially resolved types (see [my comment](https://github.com/leangen/geantyref/issues/16#issuecomment-1510384728) there for more details). If that's correct, I can add it to GeantyRef.\r\n\r\nAs a side note, in [your current code](https://github.com/hgschmie/jdbi/blob/a53d152527e7faa4e91553a0625235024b2da862/core/src/main/java/org/jdbi/v3/core/generic/GenericTypes.java#L109), since you're dealing with `Type`s only, you don't have to bother with `getAnnotatedSuperclass`. It's enough to do:\r\n\r\n```java\r\nParameterizedType superType = (ParameterizedType) getClass().getGenericSuperclass();\r\nreturn superType.getActualTypeArguments()[0];\r\n```",
      "Thank you for the update! I simplified the code a bit in #2321\r\nIf you think other users would also enjoy this functionality and would like to add such a method we'd love to use it, but can live with the situation as it is."
    ],
    "commit_messages": [
      "Merge pull request #2306 from hgschmie/generic-fix\n\nFix GenericType resolution in parameterized classes"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343d0dde8ed798d2ed613",
    "number": 2304,
    "body": "\r\n\r\nFixes #1556",
    "head_branch": "st4-err",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2304)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2304&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2304&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2304&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2304&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2304&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2304&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2304&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2304&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2304&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2304&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2304&resolved=false&types=CODE_SMELL) [2 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2304&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2304) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2304&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2304&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "st4 4.3.4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343d1dde8ed798d2ed614",
    "number": 2303,
    "body": "Fixes #2262",
    "head_branch": "result-iterable-collect",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2303)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2303&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2303&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2303&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2303&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2303&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2303&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2303&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2303&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2303&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2303&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2303&resolved=false&types=CODE_SMELL) [2 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2303&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2303) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2303&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2303&metric=new_duplicated_lines_density&view=list)\n\n",
      "I basically wrote the changes while writing the code review. This is what it would look like: https://github.com/jdbi/jdbi/compare/master...hgschmie:jdbi:result-iterable-collect",
      "I can't reply to your large comment block inline.\r\n```\r\ndefault <R extends Collection<? super T>> R collectInto(Type containerType)\r\n```\r\nI had this originally, but it is not good API, as the return type loses the element type and only gives you the raw container type back.\r\n\r\nThe odd split up of methods, and the `null` special case, are there to preserve interface compatibility. I can clean it up but that would be a source and binary incompatible change, since we would be changing a public interface.",
      "can we maybe clean this out; add the uncontroversial pieces and then iterate on the others? \r\n\r\nMaybe we can add `.listToCollector()` and `.setToCollector()` which explicitly use the registry and leave `.list()` and `.set()` with the default implementations? I can come up with a number of possible solutions. I don't feel good \"retrofitting\" the collector registry on top of `.list()` which is one of our heaviest used methods.",
      "with some more testing:\r\n- the collector registry does not support different collectors for generic types, this does not work:\r\n```java\r\n        handle.registerCollector(new GenericType<List<String>>.class, Collectors.toCollection(LinkedList::new));\r\n        handle.registerCollector(new GenericType<List<Integer>>.class, Collectors.toCollection(ArrayList::new));\r\n[...]\r\n        List<Integer> foo = query.mapTo(Integer.class).list();\r\n        List<String> bar = query2.mapTo(String.class).list();\r\n```\r\n\r\nboth of the lists are either array list or linked list. So the actual lookup is always `List<Object>` from the registry. Kind of a bummer. \r\n\r\nI updated the proposal (https://github.com/jdbi/jdbi/compare/master...hgschmie:jdbi:result-iterable-collect) with `collectIntoList` and `collectIntoSet` (and added a bunch of unit tests). \r\n\r\n",
      "closed in favor of #2331 ",
      "I guess my work on making the concrete type of lists and sets customizable will not make it.  Too bad, being able to request e.g. ImmutableList everywhere seemed like a nice feature to have."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343d2dde8ed798d2ed615",
    "number": 2301,
    "body": null,
    "head_branch": "ci-updates",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2301)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2301&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2301&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2301&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2301&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2301&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2301&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2301&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2301&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2301&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2301&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2301&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2301&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2301) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2301&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2301&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2301 from hgschmie/ci-updates\n\nsome version updates for ci scripts"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343d3dde8ed798d2ed616",
    "number": 2300,
    "body": "Turns out that this actually makes using the jdbi bom in spring projects harder.\r\n\r\nFixes #2295",
    "head_branch": "springy",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2300)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2300&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2300&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2300&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2300&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2300&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2300&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2300&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2300&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2300&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2300&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2300&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2300&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2300) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2300&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2300&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2300 from hgschmie/springy\n\nRemove spring-jcl exclusion from bom"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343d4dde8ed798d2ed617",
    "number": 2299,
    "body": null,
    "head_branch": "ignore-doc-files",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2299)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2299&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2299&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2299&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2299&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2299&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2299&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2299&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2299&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2299&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2299&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2299&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2299&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2299) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2299&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2299&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2299 from hgschmie/ignore-doc-files\n\nignore README and .github"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343d5dde8ed798d2ed618",
    "number": 2298,
    "body": null,
    "head_branch": "doc-updates",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2298)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2298&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2298&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2298&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2298&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2298&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2298&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2298&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2298&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2298&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2298&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2298&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2298&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2298) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2298&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2298&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2298 from hgschmie/doc-updates\n\nfix some doc deploy quirks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343d6dde8ed798d2ed619",
    "number": 2297,
    "body": null,
    "head_branch": "doc-updates",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2297)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2297&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2297&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2297&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2297&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2297&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2297&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2297&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2297&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2297&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2297&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2297&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2297&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2297) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2297&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2297&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2297 from hgschmie/doc-updates"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343d7dde8ed798d2ed61a",
    "number": 2296,
    "body": null,
    "head_branch": "doc-updates",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2296)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2296&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2296&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2296&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2296&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2296&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2296&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2296&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2296&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2296&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2296&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2296&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2296&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2296) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2296&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2296&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2296 from hgschmie/doc-updates\n\ndoc updates"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343d8dde8ed798d2ed61b",
    "number": 2294,
    "body": "Allows all statements to be attached to their handle by default and cleaned up when the handle closes.\r\n\r\nAddresses #2293.\r\n\r\n@jodastephen would that work for your use case?",
    "head_branch": "issue-2293",
    "is_a_fork": true,
    "comments": [
      "@stevenschlansker any opinion?\r\n",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2294)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2294&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2294&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2294&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2294&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2294&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2294&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2294&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2294&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2294&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2294&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2294&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2294&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2294) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2294&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2294&metric=new_duplicated_lines_density&view=list)\n\n",
      "Seems reasonable enough."
    ],
    "commit_messages": [
      "Merge pull request #2294 from hgschmie/issue-2293\n\nAdds `setAttachAllStatementsForCleanup` flag"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343d9dde8ed798d2ed61c",
    "number": 2291,
    "body": "- deprecate all sqlobject and kotlin-sqlobject classes that now have an equivalent in core / extension\r\n- replace ConfiguringAnnotation with UseExtensionConfigurer\r\n- replace HandlerFactory with ExtensionHandlerFactory\r\n- replace Configurer with ExtensionConfigurer\r\n- replace SqlOperation with UseExtensionHandler\r\n- replace Handler with ExtensionHandler\r\n- replace SqlMethodDecoratingAnnotation with ExtensionCustomizer\r\n\r\nUseStringSubstitutorTemplateEngine, UseFreemarkerEngine, UseFreemarkerSqlLocator can now be used without sqlobject",
    "head_branch": "rewrite-sqlobject",
    "is_a_fork": true,
    "comments": [
      "When we remove the deprecated code, we will lose ~ 1,300 lines of code",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2291)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2291&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2291&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2291&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2291&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2291&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2291&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2291&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2291&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2291&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2291&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2291&resolved=false&types=CODE_SMELL) [10 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2291&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2291) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2291&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2291&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2291 from hgschmie/rewrite-sqlobject\n\nMove SQLobject onto the new extension framework"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343dadde8ed798d2ed61d",
    "number": 2288,
    "body": null,
    "head_branch": "basepom-52",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2288)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2288&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2288&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2288&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2288&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2288&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2288&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2288&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2288&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2288&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2288&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2288&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2288&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2288) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2288&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2288&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2288 from hgschmie/basepom-52\n\nbasepom 52"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343dbdde8ed798d2ed61e",
    "number": 2287,
    "body": "Addresses PR comments from previously merged PR.\r\n- Use {jdkdocs} instead of full path\r\n- Use h2Extension instead of jdbc string",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2287)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2287&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2287&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2287&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2287&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2287&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2287&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2287&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2287&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2287&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2287&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2287&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2287&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2287) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2287&metric=duplicated_lines_density&view=list) No Duplication information\n\n",
      "Thank you! I really appreciate you addressing the comments."
    ],
    "commit_messages": [
      "Use jdkdocs and test extension (#2287)\n\nUpdate docs and test code for JdbiExecutor\r\n\r\n---------\r\n\r\nCo-authored-by: leblonk <leblonk@github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343dcdde8ed798d2ed61f",
    "number": 2285,
    "body": "The current extension framework is relatively simple. It supports attaching an extension interface which looks up a factory that then has the responsibility of either looking up an implementation class or create a proxy to execute code for each method.\r\n\r\nDue to that simple structure, there are a number of inconsistencies, especially around the extension context and wrapping each method from an interface.\r\n\r\nThe main reason for this is that most of the interesting functionality for the extension code is not actually in the core/extension package but in sqlobject. Extension is little more than just a scaffold that was designed with sqlobject in mind.\r\n\r\nThere is nothing wrong with this. However, it is possible to move a lot of the \"interesting\" functionality from the sqlobject code into the core package without losing backwards compatibility and then making it possible to implement additional  functionality using extensions.\r\n\r\n## How SQL Objects works\r\n\r\nSQL Objects uses three concepts:\r\n\r\n* Handlers. These are code pieces that are executed when an extension method is called. This is the code for SQLUpdate, SQLQuery etc.\r\n* HandlerDecorators. These code pieces change the behavior of a handler. Transactions are implemented as a decorator.\r\n* Configurers. These code pieces add or change the configuration for a method before it is called. This configuration is then spliced into the Handle through the ExtensionContext so that all code that runs within the Handler method uses that modified configuration. Configurers are used for the \"Use...\" annotations.\r\n\r\nNone of these concepts is SQLObject specific. This is generic code that can be used for any extension. But by being split out of the core and part of the sqlobject module, it is not available to any other extension or has to be copied and pasted.\r\n\r\n## Rewriting the extension framework\r\n\r\nWhile the change looks big, it is mostly moving existing code around and cleaning it up. It introduces three new concepts to the core:\r\n\r\n### ExtensionHandler\r\n\r\n`ExtensionHandler` - This is equivalent to the SqlObject Handler class.\r\n\r\n`ExtensionHandler.Factory` - SqlObject HandlerFactory, but with the `accepts / build` pattern.\r\n\r\n`@UseExtensionHandler` annotation - equivalent to `@SqlOperation`. It also provides an `id` attribute to allow multiple extensions to differentiate between `@UseExtensionHandler` instances intended for them or for another extension.\r\n\r\n### ExtensionHandlerCustomizer\r\n\r\n`ExtensionHandlerCustomizer` - This is the equivalent of the SqlObject `HandleDecorator`\r\n\r\n`@UseExtensionCustomizer` - This is the equivalent of the SqlObject `@SqlMethodDecoratingAnnotation` annotation.\r\n\r\n`@ExtensionCustomizationOrder` - This is the equivalent of the SqlObject `@DecoratorOrder` annotation.\r\n\r\n### ExtensionConfigurer\r\n\r\n`ExtensionConfigurer` - This is the equivalent of SqlObject `Configurer`. Literally.\r\n\r\n`ConfigCustomizer`           - This is an explicit interface where the\r\nSqlObject code uses `Consumer<ConfigRegistry>`. We are not consuming the\r\nregistry, but customizing it. Makes code more readable.\r\n\r\n`ConfigCustomizerFactory`    - A factory class that creates a collection\r\nof `ConfigCustomizer` elements for an extension type or an extension\r\ntype method. That concept existed sprawled out in the\r\n`SqlObjectInitData` class but was not pluggable and hardcoded to the\r\n`Configurer` interface.\r\n\r\n`@UseExtensionCustomizer` - This is the equivalent of the SqlObject `@ConfiguringAnnotation`\r\n\r\n## Major changes to existing classes\r\n\r\n`ExtensionFactory` gets a lot of new things, all of them with defaults that match the current code.\r\n* a set of flags to control extension factory behavior\r\n* bunch of getters for custom ExtensionHandlerFactories, ExtensionHandlerCustomizers and ExtensionConfigurerFactories\r\n\r\nThe `Extensions` configuration gets some new things:\r\n* methods to register ExtensionHandlerFactories, ExtensionHandlerCustomizers and ExtensionConfigurerFactories globally\r\n* a method to retrieve metadata for a given extension type\r\n\r\n## Major additions\r\n\r\n`ExtensionHandlerInvoker` takes the role of `InContextInvoker`. All invokers are managed by the `ExtensionMetadata` class\r\n\r\n`ExtensionMetadata` takes the role of `SqlObjectInitData`. It contains all of the discovered functionality from an extension type. It builds a map of `ExtensionHandler` objects that can be wrapped into an `ExtensionInvoker` with all customizers and configurers added. Those `ExtensionInvoker` classes are called through the Proxy when a method is invoked.\r\n\r\n`ExtensionFactoryDelegate` wraps the functionality of the old SqlObjectFactory code. It may simply delegate to the actual factory generated object or create the map of ExtensionHandlers with corresponding ExtensionHandlerInvokers and wrap them into a proxy object.\r\n\r\nSimilar to the SqlObject code, a number of \"glue\"\r\n`ExtensionHandlerFactory` instances are used to create method handlers that are not managed by the extension specific code:\r\n\r\n* bridge methods\r\n* interface default methods\r\n* direct method invocations if the factory provides an actual object to attach to",
    "head_branch": "extension-framework-rewrite",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2285)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2285&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2285&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2285&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2285&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2285&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2285&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2285&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2285&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2285&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2285&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2285&resolved=false&types=CODE_SMELL) [1 Code Smell](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2285&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2285) No Coverage information  \n[![0.5%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.5%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2285&metric=new_duplicated_lines_density&view=list) [0.5% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2285&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Rewrite of the core extension framework (#2285)\n\n* Rewrite of the core extension framework\r\n\r\nThe current extension framework is relatively simple. It supports\r\nattaching an extension interface which looks up a factory that then\r\nhas the responsibility of either looking up an implementation class or\r\ncreate a proxy to execute code for each method.\r\n\r\nDue to that simple structure, there are a number of inconsistencies,\r\nespecially around the extension context and wrapping each method from\r\nan interface.\r\n\r\nThe main reason for this is that most of the interesting functionality\r\nfor the extension code is not actually in the core/extension package\r\nbut in sqlobject. Extension is little more than just a scaffold that\r\nwas designed with sqlobject in mind.\r\n\r\nThere is nothing wrong with this. However, it is possible to move a\r\nlot of the \"interesting\" functionality from the sqlobject code into\r\nthe core package without losing backwards compatibility and then\r\nmaking it possible to implement additional functionality using\r\nextensions.\r\n\r\nSQL Objects uses three concepts:\r\n\r\n* Handlers. These are code pieces that are executed when an extension\r\n  method is called. This is the code for SQLUpdate, SQLQuery etc.\r\n* HandlerDecorators. These code pieces change the behavior of a\r\n  handler. Transactions are implemented as a decorator.\r\n* Configurers. These code pieces add or change the configuration for a\r\n  method before it is called. This configuration is then spliced into\r\n  the Handle through the ExtensionContext so that all code that runs\r\n  within the Handler method uses that modified\r\n  configuration. Configurers are used for the \"Use...\" annotations.\r\n\r\nNone of these concepts is SQLObject specific. This is generic code\r\nthat can be used for any extension. But by being split out of the core\r\nand part of the sqlobject module, it is not available to any other\r\nextension or has to be copied and pasted.\r\n\r\nWhile the change looks big, it is mostly moving existing code around\r\nand cleaning it up. It introduces three new concepts to the core:\r\n\r\n`ExtensionHandler` - This is equivalent to the SqlObject Handler\r\nclass.\r\n\r\n`ExtensionHandler.Factory` - SqlObject HandlerFactory, but with the\r\n`accepts / build` pattern.\r\n\r\n`@UseExtensionHandler` annotation - equivalent to `@SqlOperation`. It\r\nalso provides an `id` attribute to allow multiple extensions to\r\ndifferentiate between `@UseExtensionHandler` instances intended for\r\nthem or for another extension.\r\n\r\n`ExtensionHandlerCustomizer` - This is the equivalent of the SqlObject\r\n`HandleDecorator`\r\n\r\n`@UseExtensionCustomizer` - This is the equivalent of the SqlObject\r\n`@SqlMethodDecoratingAnnotation` annotation.\r\n\r\n`@ExtensionCustomizationOrder` - This is the equivalent of the\r\nSqlObject `@DecoratorOrder` annotation.\r\n\r\n`ExtensionConfigurer` - This is the equivalent of SqlObject\r\n`Configurer`. Literally.\r\n\r\n`ConfigCustomizer` - This is an explicit interface where the SqlObject\r\ncode uses `Consumer<ConfigRegistry>`. We are not consuming the\r\nregistry, but customizing it. Makes code more readable.\r\n\r\n`ConfigCustomizerFactory` - A factory class that creates a collection\r\nof `ConfigCustomizer` elements for an extension type or an extension\r\ntype method. That concept existed sprawled out in the\r\n`SqlObjectInitData` class but was not pluggable and hardcoded to the\r\n`Configurer` interface.\r\n\r\n`@UseExtensionCustomizer` - This is the equivalent of the SqlObject\r\n`@ConfiguringAnnotation`\r\n\r\n`ExtensionFactory` gets a lot of new things, all of them with defaults\r\nthat match the current code.\r\n* a set of flags to control extension factory behavior\r\n* bunch of getters for custom ExtensionHandlerFactories,\r\n  ExtensionHandlerCustomizers and ExtensionConfigurerFactories\r\n\r\nThe `Extensions` configuration gets some new things:\r\n* methods to register ExtensionHandlerFactories,\r\n  ExtensionHandlerCustomizers and ExtensionConfigurerFactories\r\n  globally\r\n* a method to retrieve metadata for a given extension type\r\n\r\n`ExtensionHandlerInvoker` takes the role of `InContextInvoker`. All\r\ninvokers are managed by the `ExtensionMetadata` class\r\n\r\n`ExtensionMetadata` takes the role of `SqlObjectInitData`. It contains\r\nall of the discovered functionality from an extension type. It builds\r\na map of `ExtensionHandler` objects that can be wrapped into an\r\n`ExtensionInvoker` with all customizers and configurers added. Those\r\n`ExtensionInvoker` classes are called through the Proxy when a method\r\nis invoked.\r\n\r\n`ExtensionFactoryDelegate` wraps the functionality of the old\r\nSqlObjectFactory code. It may simply delegate to the actual factory\r\ngenerated object or create the map of ExtensionHandlers with\r\ncorresponding ExtensionHandlerInvokers and wrap them into a proxy\r\nobject.\r\n\r\nSimilar to the SqlObject code, a number of \"glue\"\r\n`ExtensionHandlerFactory` instances are used to create method handlers\r\nthat are not managed by the extension specific code:\r\n\r\n* bridge methods\r\n* interface default methods\r\n* direct method invocations if the factory provides an actual object to attach to"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343dddde8ed798d2ed620",
    "number": 2284,
    "body": "Initial docs on JdbiExecutor.\r\n\r\nI'm not sure if this is the best location for this (4.4 under 4. Core API Concepts), so please let me know if there's a better option. Also, should there be more expansion on why this is needed in async applications (I'm kind of presuming the reader of this chapter is familiar with async)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2284)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2284&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2284&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2284&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2284&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2284&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2284&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2284&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2284&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2284&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2284&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2284&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2284&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2284) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2284&metric=duplicated_lines_density&view=list) No Duplication information\n\n",
      "Let's stick with section 4 then"
    ],
    "commit_messages": [
      "JdbiExecutor documentation"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343dedde8ed798d2ed621",
    "number": 2283,
    "body": "Move the memoizing supplier inside the InContextInvoker, allowing callers to just hold an instance that wraps a supplier, not a supplier that creates an instance. As all parameters for the supplier are locked down at creation time anyway, this makes no difference but replaces various Supplier<InContextInvoker> fields that need get() methods with simpler code.",
    "head_branch": "rework-incontext-invoker",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2283)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2283&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2283&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2283&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2283&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2283&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2283&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2283&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2283&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2283&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2283&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2283&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2283&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2283) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2283&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2283&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2283 from hgschmie/rework-incontext-invoker\n\nRemove visible supplier for InContextInvoker"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343dfdde8ed798d2ed622",
    "number": 2282,
    "body": "Generated classes always implement SqlObject, but if the interface from which they were created does not, they actually call a non-existent handler that throws a NPE. Adding the method unconditionally allows this call to succeed. It also removes the WithHandleMethodHandlerFactory that is no longer needed.",
    "head_branch": "remmove-withhandle-factory",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2282)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2282&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2282&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2282&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2282&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2282&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2282&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2282&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2282&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2282&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2282&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2282&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2282&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2282) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2282&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2282&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2282 from hgschmie/remmove-withhandle-factory\n\nadd withHandle unconditionally as a method handler"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343e0dde8ed798d2ed623",
    "number": 2280,
    "body": "This comes from having seen jdbi used in async services. The common pattern is to use jdbi like this:\r\n\r\n```java\r\nCompletionStage<String> doSelect() {\r\n  return CompletableFuture.supplyAsync(() -> {\r\n      return jdbi.withHandle(h ->\r\n        h.createQuery(....\r\n    }, executor);\r\n}\r\n```\r\n\r\nThis turns out to be very error prone (especially with multiple contributors), because each call to the database requires this exact boilerplate to surround the call. Easy to forget to pass in the executor, exceptions have to be handled. etc. Some of these errors don't show in tests either, only in prod, because the database call is executed on the wrong threadpool, which only shows up under load.\r\n\r\nHaving a class like this JdbiExecutor to pass around, instead of Jdbi, eliminates most possibilities of using things wrong, which in turn eliminates risk. Same code now looks like:\r\n\r\n```java\r\nCompletionStage<String> doSelect() {\r\n  return jdbiExecutor.withHandle(h ->\r\n    h.createQuery(....\r\n  );\r\n}\r\n```\r\n\r\nWould like to add this as a standard feature of jdbi.\r\n\r\nIn the end, it's just a very thin wrapper on top of the Jdbi class, but it eliminates a class of errors in Jdbi usage in async services",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Hi @leblonk! Thank you for opening a PR with the JDBI team. \r\n\r\nI looked through the tests and you run those with a single threaded executor. I know there are some thread locals deep within Jdbi, so it would be good to try this change using an executor where the different stages are executed by multiple threads to see whether the state is preserved correctly.\r\n\r\nThe Handle is ultimately not a multi-thread safe object; it is reasonably safe if only one thread at a time uses it. ",
      "It looks like each Handle is acquired, operated on, and then closed from within the same executor-executed action. So, as long as the user does not further pass the Handle off to a different thread, I don't think it should be a problem here.",
      "@hgschmie although it's unlikely, as @stevenschlansker pointed out, I added a test nonetheless, just in case.  ",
      "Generally looks good; some minor nits:\r\n\r\n- Please mark everything as `@Alpha` or `@Beta`. I let you decide what is appropriate. But I want the option to change this without being locked into public API compatibility on the very first attempt\r\n- We have too many \"handle\", \"handler\" or similar named classes and interfaces already. When we introduce this, it needs to use the same patterns and naming conventions as the rest of the code (\"with\" and \"use\")\r\n- make the two callback interfaces public and not nested interfaces. ",
      "an alternate route that @stevenschlansker and I briefly discussed was to abandon the custom handler completely and just use a `org.jdbi.v3.core.internal.exceptions.CheckedFunction`. That would work for me as well.\r\n\r\nAgain, thank you for contributing this. I think this will be useful and we should merge that PR. ",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2280)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2280&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2280&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2280&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2280&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2280&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2280&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2280&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2280&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2280&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2280&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2280&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2280&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2280) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2280&metric=duplicated_lines_density&view=list) No Duplication information\n\n",
      "Added the beta label (not alpha, since I have used similar for several years successfully)",
      "@leblonk Thank you, this looks really good now. I will be merging it once the CI passes. \r\n\r\nIt would be good to get some docs for this as well so that users can take advantage of it. "
    ],
    "commit_messages": [
      "Merge pull request #2280 from leblonk/master\n\nAdd a wrapper to allow Jdbi in async services\r\n\r\nImplements the CompletionStage interface to use Jdbi with the JDK CompletableFuture framework.\r\n\r\n---------\r\n\r\nCo-authored-by: leblonk <leblonk@github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343e2dde8ed798d2ed624",
    "number": 2278,
    "body": "- make execution more robust, use init() method\r\n- don't fail on IOException, makes it possible to debug generated code\r\n- resolve static method fields at build time, no need for the thread local anymore\r\n- omit object creation if arrays are empty",
    "head_branch": "generator-work",
    "is_a_fork": true,
    "comments": [
      "this is pretty much new code that writes files similar to the old sql object source files. It is best reviewed side-by-side, not unified (it is pretty unreadable unified). \r\n\r\nThe code will no longer support implementations built with generators pre-3.38.0; this can be restored (it is the code in GeneratorSqlObjectFactory and SqlObjectInitData that would need to stay) if asked for. I would prefer a clean break but happy to do that in 3.39.0\r\n\r\nthe new classes are much smaller and still pass all the tests. It would be good to give it some real world testing, not just the few simple tests here. \r\n",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2278)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2278&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2278&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2278&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2278&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2278&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2278&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2278&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2278&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2278&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2278&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2278&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2278&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2278) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2278&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2278&metric=new_duplicated_lines_density&view=list)\n\n",
      "Main reason why I want a clean break is that I plan to change the InContextInvoker so that it can be pulled \"up\" to get the \"invokeInContext\" out of the handle supplier. That will *definitely* break backwards compatibility to classes generated with the old generator. I can hold off on that until past 3.38 but right now, that is  a hindrance. :-) ",
      "@stevenschlansker @sman-81 planning to move forward with this. Review would still be appreciated, but this is open for a week now."
    ],
    "commit_messages": [
      "Merge pull request #2278 from hgschmie/generator-work\n\nRewrite the SqlObject code generator"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343e3dde8ed798d2ed625",
    "number": 2276,
    "body": "Revapi and revapi-maven-plugin can be found here: https://revapi.org/\r\n\r\n- Main revapi configuration and versions defined in `jdbi3-build-parent`\r\n- Maven profile 'revapi' defined in `jdbi3-build-parent`, goal `revapi:check`\r\n- Maven profile 'revapi-report' defined in jdbi3-build-parent, goal revapi:report\r\n- Modules not to be checked may set property `jdbi.check.skip-revapi=true` (e.g. modules for internal or testing use)\r\n- Modules for which violations should not fail the build should set property `jdbi.check.fail-revapi=false`\r\n\r\nRevapi compares the project to the most recent release (e.g. 3.37.1-SNAPSHOT to 3.37.0) looking for violations of semantic versioning rules. The ruleset can be relaxed by configuration.\r\n\r\nViolations found by revapi can be explicitly ignored.\r\nI've done this in modules `core` and `freemarker` by example (they would have otherwise failed, would revert this of course before merging into master). **Update:** Configuration now rolled back\r\n\r\nTo other failing modules I've added `jdbi.check.fail-revapi=false`.  **Update:** Configuration now rolled back\r\n\r\nTo see the problems look for 'revapi' in the build output, in particular for string 'API problems found' and onwards (examples below).\r\n\r\n## Maven command line\r\n`mvn clean install -P revapi,fast -D no-docker`\r\n\r\nThis takes a little over 2 minutes on my lame Ubuntu laptop as opposed to 1:20 min without revapi. So it does add overhead but less than one would expect.\r\n\r\n## Maven command line to create and view revapi reports\r\n```\r\nmvn clean install -P revapi-report,fast -D no-docker\r\nfind . -name revapi-report.html -exec firefox {} \\;\r\n```\r\n\r\n## Build output / no compatibility problems\r\n```\r\n[INFO] --- revapi-maven-plugin:0.15.0:check (default) @ jdbi3-core ---\r\nDownloading from nexus: http://nexus-swe.baag:8081/nexus/content/groups/public/org/jdbi/jdbi3-core/maven-metadata.xml\r\nDownloaded from nexus: http://nexus-swe.baag:8081/nexus/content/groups/public/org/jdbi/jdbi3-core/maven-metadata.xml (3.0 kB at 5.7 kB/s)\r\n[INFO] Comparing [org.jdbi:jdbi3-core:jar:3.37.0] against [org.jdbi:jdbi3-core:jar:3.37.1-SNAPSHOT] (including their transitive dependencies).\r\n[INFO] API checks completed without failures.\r\n```\r\n\r\n## Build output / with compatibility problems\r\n\r\n```\r\n[INFO] --- revapi-maven-plugin:0.15.0:check (default) @ jdbi3-jpa ---\r\nDownloading from nexus: http://nexus-swe.baag:8081/nexus/content/groups/public/org/jdbi/jdbi3-jpa/maven-metadata.xml\r\nDownloaded from nexus: http://nexus-swe.baag:8081/nexus/content/groups/public/org/jdbi/jdbi3-jpa/maven-metadata.xml (3.6 kB at 10 kB/s)\r\n[INFO] Comparing [org.jdbi:jdbi3-jpa:jar:3.37.0] against [org.jdbi:jdbi3-jpa:jar:3.37.1-SNAPSHOT] (including their transitive dependencies).\r\n[INFO] API problems found.\r\n[INFO] If you're using the semver-ignore extension, update your module's version to one compatible with the current changes (e.g. mvn package revapi:update-versions). If you want to explicitly ignore these changes or provide justifications for them, add the xml snippets to your Revapi configuration for the \"revapi.differences\" extension.\r\n\r\n```",
    "head_branch": "sman-81-revapi",
    "is_a_fork": true,
    "comments": [
      "Thanks for your feedback @hgschmie \r\n\r\n>     * we should not turn testing on or off for separate modules. We should test all modules\r\n\r\nWhat is the benefit from having revapi checks on internal and testing modules?\r\nNoone would be interested in the findings. So they can be skipped.\r\n\r\n>     * there are actual ignored differences in the core pom enumerated, this adds 70 lines for a single plugin and I assume that is not the end. THis makes me very uncomfortable. Why is that needed?\r\n\r\nThis is for demonstration only and will never get into master. Such ignored differences become obsolete after the release such changed API. Please see the initial comments of my PR above.\r\n\r\n>     * there are freemarker classes in the freemarker pom. Can't we just limit to org.jdbi and ignore changes in everything else?\r\n\r\nThat's worth investigating and should be supported by the plugin.\r\n\r\n> This is a pretty big PR for a basic function of \"pull the previous version, run a diff\".\r\n\r\nThe plugin is not part of the build cycle but is defined as Maven profile. I don't think its that intrusive :)\r\nSince Maven site not something the project seems to use, I chose `revapi:check` over a site report (`revapi:report`).\r\n\r\n3.37.0 -> 3.37.1 has a lot of API changes. So I suppose the timing of showcasing revapi just now was unfortunate.\r\n\r\nI am still fuzzy about what we want from revapi. Following semver fully cannot be it. The major version is effectively locked at 3. If we still want to permit code changes that would require a new major according to semver, we have to relax the usage of semver and possibly also the configuration of revapi.\r\n\r\n\r\n",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2276)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2276&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2276&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2276&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2276&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2276&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2276&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2276&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2276&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2276&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2276&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2276&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2276&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2276) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2276&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2276&metric=new_duplicated_lines_density&view=list)\n\n",
      "Just rebased this PR to master again.\r\n\r\nThis PR adds revapi capabilities in a non-intrusive way (using a Maven profile to be activated in order to run checks).\r\n\r\nWe've talked about this on Slack and feedback was positive. However we have not really reached a decision.\r\n@hgschmie @stevenschlansker Gentlemen, do we want revapi in the project or not? I am fine either way :)\r\n",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2276)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2276&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2276&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2276&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2276&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2276&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2276&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2276&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2276&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2276&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2276&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2276&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2276&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2276) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2276&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2276&metric=new_duplicated_lines_density&view=list)\n\n",
      "I am in general supportive of having stronger checks, but I don't really have experience with revapi specifically to make a decision one way or the other. The build has gotten a lot more complex recently, so my ask would be that if we bring this in for the long term, we automate enough that it does not add more manual steps to the build release process.  I defer to Henning for the rest.",
      "See also #920 ",
      "We shipped japicmp as part of the 3.44.0 release, which makes this PR redundant."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343e4dde8ed798d2ed626",
    "number": 2275,
    "body": "Remove a thread deadlock when expunging under heavy multithread pressure.\r\n\r\nFixes #2274",
    "head_branch": "issue-2274",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2275)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2275&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2275&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2275&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2275&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2275&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2275&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2275&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2275&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2275&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2275&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2275&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2275&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2275) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2275&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2275&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2275 from hgschmie/issue-2274\n\nFix Deadlock in DefaultJdbiCache"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343e5dde8ed798d2ed627",
    "number": 2271,
    "body": "There is a random helper in Handlers, move that to a core class and use it across the codebase.",
    "head_branch": "class-utils-refactor",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2271)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2271&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2271&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2271&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2271&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2271&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2271&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2271&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2271&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2271&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2271&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2271&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2271&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2271) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2271&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2271&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2271 from hgschmie/class-utils-refactor\n\nRefactor method lookup methods"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343e6dde8ed798d2ed628",
    "number": 2270,
    "body": null,
    "head_branch": "remove-cache-hit",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2270)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2270&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2270&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2270&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2270&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2270&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2270&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2270&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2270&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2270&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2270&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2270&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2270&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2270) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2270&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2270&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2270 from hgschmie/remove-cache-hit\n\nremove cache hit for concrete methods"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343e7dde8ed798d2ed629",
    "number": 2269,
    "body": "- Simplify code, make more readable.\r\n\r\n- Remove anonymous implementation of InContextInvoker, use a concrete class.",
    "head_branch": "invoker-context-work",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2269)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2269&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2269&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2269&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2269&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2269&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2269&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2269&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2269&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2269&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2269&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2269&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2269&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2269) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2269&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2269&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2269 from hgschmie/invoker-context-work\n\nClean up extension context and invoker"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343e8dde8ed798d2ed62a",
    "number": 2268,
    "body": "Starting to reduce the code sprawl around HandleSupplier. Remove the convoluted back and forth between the invokeInContext methods that no user can actually get right and the only implementations are in Jdbi anyway.",
    "head_branch": "handle-supplier-work",
    "is_a_fork": true,
    "comments": [
      "This is the first in a number of smaller PRs that rework the convoluted extension / handlesupplier and ultimately sqlobject logic. I try to split it into smaller pieces that are digestible. Feedback wanted!",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2268)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2268&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2268&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2268&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2268&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2268&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2268&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2268&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2268&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2268&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2268&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2268&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2268&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2268) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2268&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2268&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2268 from hgschmie/handle-supplier-work\n\nFactor out common code in HandleSupplier"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343e9dde8ed798d2ed62b",
    "number": 2267,
    "body": "The default postgres version (13) does not have a native arm64 build for modern macos. Select a version that is supported so that native code is run (and not rosetta translated x86_64).\r\n\r\nBuilding on a M<x> mac may also need to apply the changes to SHMMAX\r\ndescribed here: https://dansketcher.com/2021/03/30/shmmax-error-on-big-sur/",
    "head_branch": "macos-arm-fix",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2267)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2267&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2267&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2267&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2267&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2267&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2267&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2267&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2267&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2267&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2267&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2267&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2267&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2267) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2267&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2267&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2267 from hgschmie/macos-arm-fix\n\nUse native pg on macos arm64"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343eadde8ed798d2ed62c",
    "number": 2266,
    "body": "- factor all the Generator specific code into GeneratorSqlObjectFactory, a new ExtensionFactory that deals specifically with the generated classes.\r\n- strip all code that is not specific to the SqlObject Proxy extensions out of SqlObjectFactory\r\n- register both factories in SqlObjectModule, so no user visible changes\r\n- remove the specific code for generated classes (initData and lookupMethod) out of the SqlObjectInitData, this is now in the generator factory. Leave deprecated stubs in place for old, non-compiled classes. Those stubs will go away\r\n- move the threadlocal that holds the init data into the generator factory\r\n- move all init code for SqlObjectInitData into the class itself\r\n- move duplicate superTypes code also into JdbiClassUtils\r\n\r\nEven if the work stops here, this is a big improvement to make the SqlObject code actually understandable. The code is not that complicated, it was just split in very complicated ways and hard to follow. The PR splits it into three major pieces:\r\n\r\n- everything that deals with the Proxy SqlObjects\r\n- everything that deals with the generated SqlObjects\r\n- everything that initializes the SqlObjectInitData object and its cache\r\n\r\nWhen this is done, it should be possible to address the whole `invokeInContext` stuff on the HandleSupplier, the plan is to move this out of the handle supplier and into a wrapper around the method invocations itself, which would then allow things like annotations on default methods. Still a work in progress.",
    "head_branch": "handle-supplier-refactor",
    "is_a_fork": true,
    "comments": [
      "@stevenschlansker, as a major user of the generator, this would really benefit from some real world testing. I don't think this PR broke the generator and the generated code and all the tests pass, but the test suite is pretty light when it comes to the generator.",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2266)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2266&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2266&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2266&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2266&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2266&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2266&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2266&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2266&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2266&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2266&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2266&resolved=false&types=CODE_SMELL) [2 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2266&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2266) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2266&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2266&metric=new_duplicated_lines_density&view=list)\n\n",
      "The test suite is light, but does have pretty good coverage of a lot of different cases. Will let you know if I see any problems."
    ],
    "commit_messages": [
      "Merge pull request #2266 from hgschmie/handle-supplier-refactor\n\nSqlObject Factory rewrite"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343ebdde8ed798d2ed62d",
    "number": 2265,
    "body": "https://github.com/jdbi/jdbi/issues/2264\r\n* Updated Caffeine dependency version to eliminate Gradle conflict",
    "head_branch": "2264-Update-Caffeine",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2265)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2265&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2265&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2265&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2265&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2265&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2265&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2265&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2265&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2265&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2265&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2265&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2265&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2265) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2265&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2265&metric=new_duplicated_lines_density&view=list)\n\n",
      "Thanks!",
      "Hi @alkamo,\r\n\r\nThank you for opening an issue with the Jdbi project. \r\n\r\nAre you sure that this is needed? Wouldn't it be enough to version-manage the dependency in your project? We are trying to keep the lowest version possible as baseline and have a number of tests to ensure that we run with later versions as well.\r\n\r\nUpgrading this version will ripple through all projects that use Jdbi and may cause conflicts down the line.\r\n\r\nAs this is a problem with gradle and the gradle build process, I would assume that adding a version requirement to your build file of caffeine 3.1.x should suffice. I am not sure that there is a need to change this version globally. ",
      "There are correctness bugs that are fixed in the later releases. Also, caffeine is used by jdbi itself, so there is some incentive to keep it up to date. If a user uses the caffeine cache but doesn't otherwise use caffeine in their project, they should get the latest version without having to manage it themselves preferably.",
      "> If a user uses the caffeine cache but doesn't otherwise use caffeine in their project, they should get the latest version without having to manage it themselves preferably.\r\n\r\nNow I'm wondering if something else is going on here because I'm **not** using caffeine cache. I'm seeing caffeine pulled in as a dependency of _jdbi3-core_. Below is the dependency graph that Gradle reports.\r\n\r\nLooking at the JDBI code, I can't see any reason why this would happen.\r\n```\r\n\r\n+--- org.jdbi:jdbi3-core:3.36.0\r\n|    +--- org.slf4j:slf4j-api:1.7.36\r\n|    +--- io.leangen.geantyref:geantyref:1.3.13\r\n|    \\--- com.github.ben-manes.caffeine:caffeine:3.0.3\r\n|         +--- org.checkerframework:checker-qual:3.27.0\r\n|         +--- com.google.errorprone:error_prone_annotations:2.16\r\n|         +--- com.fasterxml.jackson:jackson-bom:2.14.1 (c)\r\n|         \\--- org.apache.httpcomponents:httpclient:4.5.13 (c)\r\n```",
      "I think I might have found the reason: the published POM for jdbi3-core (at mvnrepository.com) differs from the one found at  /core/pom.xml and does include caffeine. I'm not familiar enough with Maven builds to know why this is or what to do about it, but it seems like that is unintentional?",
      "the release pom for 3.36.0 at mvnrepo points at central, so it is the same as the central pom.\r\nthe 3.36.0 tagged release pom is the same as the one on the central repo.\r\n\r\nThe current head no longer contains caffeine in core, because the next (not yet released) version refactors the code to no longer require it. But that is independent of the 3.36.0 release and very intentional. The v3.36.0 tag contains the dependency.\r\n\r\nThe gradle dependency tree looks incorrect. core depends on caffeine in 3.36.0, but caffeine 3.0.3 only depends on checker framework and error prone (see https://repo1.maven.org/maven2/com/github/ben-manes/caffeine/caffeine/3.0.3/caffeine-3.0.3.pom) but the tree shows jackson-bom (!?!) of all things and a http client. \r\n\r\nI think it is most likely that the gradle module file (https://repo1.maven.org/maven2/com/github/ben-manes/caffeine/caffeine/3.0.3/caffeine-3.0.3.module) is interfering with this. ",
      "can you try to simply version manage the dependency version to 3.1.2? I don't really understand how gradle resolves dependencies (and https://docs.gradle.org/current/userguide/dependency_capability_conflict.html#sub:selecting-between-candidates was not helpful), so this would be the equivalent of adding\r\n\r\n```xml\r\n<dependencyManagement>\r\n  <dependencies>\r\n    <dependency>\r\n      <groupId>com.github.ben-manes.caffeine</groupId>\r\n      <artifactId>caffeine</artifactId>\r\n      <version>3.1.2</version>\r\n    </dependency>\r\n  </dependencies>\r\n</dependencyManagement>\r\n```\r\n\r\nto your gradle build. This should solve your problem. ",
      "it might be something like\r\n\r\n```groovy\r\ndependencies {\r\n    constraints {\r\n        implementation('com.github.ben-manes.caffeine:caffeine:3.1.2') {\r\n            because 'build problems'\r\n        }\r\n}\r\n```\r\n\r\nor so. Don't take my word for it.",
      "> The gradle dependency tree looks incorrect. core depends on caffeine in 3.36.0, but caffeine 3.0.3 only depends on checker framework and error prone\r\n\r\nYou caught me. To avoid confusing things, I had edited the dependency tree to show 3.0.3 to show the dependency from jdbi-3-core, not realizing that the caffeine dependencies had changed. The real one was from where I forced the upgrade to 3.1.2 and looked like this:\r\n\r\n```\r\n+--- org.jdbi:jdbi3-core:3.36.0\r\n|    +--- org.slf4j:slf4j-api:1.7.36\r\n|    +--- io.leangen.geantyref:geantyref:1.3.13\r\n|    \\--- com.github.ben-manes.caffeine:caffeine:3.0.3 -> 3.1.2\r\n|         +--- org.checkerframework:checker-qual:3.27.0\r\n|         +--- com.google.errorprone:error_prone_annotations:2.16\r\n|         +--- com.fasterxml.jackson:jackson-bom:2.14.1 (c)\r\n|         \\--- org.apache.httpcomponents:httpclient:4.5.13 (c)\r\n```\r\n\r\nSo, yes managing the dependency manually works. Since it looks like the next version of JDBI will remove that dependency altogether I will likely just wait to update until that version is released."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343ecdde8ed798d2ed62e",
    "number": 2263,
    "body": null,
    "head_branch": "map-entry-test",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2263)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2263&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2263&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2263&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2263&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2263&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2263&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2263&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2263&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2263&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2263&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2263&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2263&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2263) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2263&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2263&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2263 from hgschmie/map-entry-test\n\ntest for Map.Entry mapper"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343eddde8ed798d2ed62f",
    "number": 2261,
    "body": null,
    "head_branch": "more-tests",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2261)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2261&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2261&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2261&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2261&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2261&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2261&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2261&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2261&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2261&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2261&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2261&resolved=false&types=CODE_SMELL) [1 Code Smell](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2261&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2261) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2261&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2261&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2261 from hgschmie/more-tests\n\nMore tests"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343eedde8ed798d2ed630",
    "number": 2260,
    "body": "If a column contained a null geometry the registered Geometry ColumnMapper (from PostGISCodec) would throw a NPE while trying to convert the null value to a byte array. \r\n\r\nIf a null value is now processed by the ColumnMapper, a null value is returned",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2260)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2260&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2260&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2260&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2260&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2260&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2260&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2260&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2260&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2260&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2260&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2260&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2260&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2260) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2260&metric=duplicated_lines_density&view=list) No Duplication information\n\n"
    ],
    "commit_messages": [
      "Add null safety to PostGISCodec\n\nIf a column contained a null geometry the registered Geometry ColumnMapper would throw a NPE while trying to convert the null value to a byte array. If a null value is now processed by the ColumnMapper a null value is returned"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343efdde8ed798d2ed631",
    "number": 2259,
    "body": null,
    "head_branch": "small-changes",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2259)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2259&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2259&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2259&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2259&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2259&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2259&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2259&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2259&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2259&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2259&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2259&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2259&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2259) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2259&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2259&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2259 from hgschmie/small-changes\n\nSmall changes"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343f0dde8ed798d2ed632",
    "number": 2258,
    "body": null,
    "head_branch": "iterator-stream-testsuite",
    "is_a_fork": true,
    "comments": [
      "70ish test cases covering all combinations of streams, iterators, attach, onDemand and extensions. ",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2258)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2258&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2258&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2258&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2258&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2258&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2258&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2258&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2258&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2258&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2258&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2258&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2258&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2258) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2258&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2258&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2258 from hgschmie/iterator-stream-testsuite\n\nAdd stream and iterator test suite"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343f1dde8ed798d2ed633",
    "number": 2257,
    "body": "Installing this cache module turns off caching for SQL statements and parsed SQL. This is useful for debugging and testing.",
    "head_branch": "add-noop-cache",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2257)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2257&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2257&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2257&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2257&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2257&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2257&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2257&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2257&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2257&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2257&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2257&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2257&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2257) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2257&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2257&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2257 from hgschmie/add-noop-cache\n\nnoop cache implementation"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343f2dde8ed798d2ed634",
    "number": 2256,
    "body": "Using caffeine for the internal caches. Installing the caffeine module replaces the internal caches with a caffeine implementation.",
    "head_branch": "add-caffeine-cache",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2256)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2256&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2256&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2256&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2256&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2256&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2256&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2256&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2256&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2256&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2256&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2256&resolved=false&types=CODE_SMELL) [2 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2256&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2256) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2256&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2256&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2256 from hgschmie/add-caffeine-cache\n\ncaffeine cache plugin using caffeine cache"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343f3dde8ed798d2ed635",
    "number": 2254,
    "body": "- Harmonize formatting of sql statements in developer documentation\r\n  (Sql keywords in upper, user objects in lower-case)\r\n- Fix additional indentation discrepancies",
    "head_branch": "sman-81-format-code-samples2",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2254)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2254&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2254&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2254&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2254&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2254&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2254&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2254&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2254&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2254&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2254&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2254&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2254&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2254) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2254&metric=duplicated_lines_density&view=list) No Duplication information\n\n"
    ],
    "commit_messages": [
      "Improve formatting in developer documentation (#2254)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343f4dde8ed798d2ed636",
    "number": 2253,
    "body": "Review code samples in developer documentation for correct syntax and compliance with our code style rules (eat our own dog food).\r\nCosmetics really, but I did spot a few missing semi-colons and parenthesis.\r\nConsistency and readability has improved IMO.",
    "head_branch": "sman-81-format-code-samples",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2253)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2253&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2253&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2253&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2253&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2253&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2253&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2253&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2253&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2253&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2253&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2253&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2253&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2253) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2253&metric=duplicated_lines_density&view=list) No Duplication information\n\n"
    ],
    "commit_messages": [
      "Review code samples for syntax and code style (#2253)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343f5dde8ed798d2ed637",
    "number": 2252,
    "body": "Document that the abstract build method must return an argument instance. Align the implementation of build() and prepare().\r\n\r\nAddresses #2249",
    "head_branch": "abstract-argument",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2252)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2252&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2252&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2252&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2252&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2252&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2252&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2252&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2252&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2252&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2252&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2252&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2252&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2252) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2252&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2252&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2252 from hgschmie/abstract-argument\n\nClarify the logic for AbstractArgumentFactory."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343f6dde8ed798d2ed638",
    "number": 2251,
    "body": "An attempt to hunt down typos and idiosyncrasies in `index.adoc` (to avoid single typo PRs)",
    "head_branch": "sman-81-orthography-stuff",
    "is_a_fork": true,
    "comments": [
      "Thanks for your feedback @hgschmie\r\nPR updated (squashed and force-pushed)",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2251)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2251&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2251&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2251&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2251&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2251&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2251&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2251&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2251&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2251&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2251&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2251&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2251&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2251) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2251&metric=duplicated_lines_density&view=list) No Duplication information\n\n",
      "![image](https://user-images.githubusercontent.com/39495/211944034-b046b4de-6bd3-4a8e-bda5-73e7e6bb15b6.png)\r\n",
      "![git-merge](https://user-images.githubusercontent.com/1314640/212014673-1497b7ad-f651-4cd1-a0ec-297dff47c03d.gif)\r\n"
    ],
    "commit_messages": [
      "Spell-check Jdbi documentation (#2251)\n\nSpell-check Jdbi documentation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343f7dde8ed798d2ed639",
    "number": 2250,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2250)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2250&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2250&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2250&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2250&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2250&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2250&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2250&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2250&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2250&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2250&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2250&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2250&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2250) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2250&metric=duplicated_lines_density&view=list) No Duplication information\n\n"
    ],
    "commit_messages": [
      "Fixed typo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343f8dde8ed798d2ed63a",
    "number": 2249,
    "body": null,
    "head_branch": "sman-81-optional-of-nullable",
    "is_a_fork": true,
    "comments": [
      "@hgschmie thanks for your comment.\r\n\r\n`innerBuild` is called twice. Previously `innerBuild` returned an `Optional` that could never be empty (`Optional.of`). Therefore the first call site `innerBuild(value, config).orElseThrow(..)` can never throw `UnableToCreateStatementException`. This is a bug.\r\n\r\nI let `innerBuild` return an `Optional.ofNullable`, so it can be empty and the exception can fire as intended by the original author of the code.\r\nThis change requires that `build(Type, Object, ConfigRegistry)` is updated to not change its behaviour. I chose an `UnableToCreateStatementException` over `NullPointerException` to resemble the behaviour of `prepare`.\r\n\r\nA quick word why I found this: I find `Optional.of` to be a misnomer and frequent source of bugs. An _Optional_ should allow `null` really. It only does so by calling the non-intuitive factory `Optional.ofNullable`.\r\n",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2249)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2249&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2249&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2249&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2249&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2249&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2249&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2249&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2249&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2249&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2249&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2249&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2249&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2249) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2249&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2249&metric=new_duplicated_lines_density&view=list)\n\n",
      "That whole thing is gnarly. \r\n\r\n- if we are cool with `build((T) value, config)` returning null, then the change to use `Optional.ofNullable` is fine, but then we should lose the `if (!arg.isPresent()) { throw new UnableToCreateStatementException(...` error. Because, we are fine with build returning null and therefore the `build(Type type, Object value, ConfigRegistry config)` method returning Optional.empty is ok as well.\r\n- if we are *not* cool with `build((T) value, config)` returning null, *then* we should error out right at the place where that method returns. which is inside `innerBuild`. \r\n\r\nThe `Optional.of(value -> innerBuild().orElseThrow())` is IMHO a red herring and actually an artifact of someone wanting to write code in a functional style and then getting lost in the intricacies of unwinding the various Optionals. Well, Java is not Haskell after all. \r\n\r\na) we should not be cool with `build((T) value, config)` returning null. That means, we do not have an argument to bind the value here. So that is an error. So we should error out in the inner build.\r\nb) erroring out in the innerBuild means that the method will *always* return an Argument or throw an exception. So we don't need an optional to return because there is always a value.\r\nc) if innerBuild always returns a value, there is no need anymore for `orElseThrow`\r\n\r\nI would argue that this should look like this:\r\n\r\n```diff\r\ndiff --git a/core/src/main/java/org/jdbi/v3/core/argument/AbstractArgumentFactory.java b/core/src/main/java/org/jdbi/v3/core/argument/AbstractArgumentFactory.java\r\nindex 0acf2ad52..d4f69e8b4 100644\r\n--- a/core/src/main/java/org/jdbi/v3/core/argument/AbstractArgumentFactory.java\r\n+++ b/core/src/main/java/org/jdbi/v3/core/argument/AbstractArgumentFactory.java\r\n@@ -80,8 +80,7 @@ public abstract class AbstractArgumentFactory<T> implements ArgumentFactory.Prep\r\n     @Override\r\n     public Optional<Function<Object, Argument>> prepare(Type type, ConfigRegistry config) {\r\n         return isInstance.test(type, null)\r\n-                ? Optional.of(value -> innerBuild(value, config)\r\n-                        .orElseThrow(() -> new UnableToCreateStatementException(\"Prepared argument \" + value + \" of type \" + type + \" failed to bind\")))\r\n+                ? Optional.of(value -> innerBuild(type, value, config))\r\n                 : Optional.empty();\r\n     }\r\n\r\n@@ -92,17 +91,21 @@ public abstract class AbstractArgumentFactory<T> implements ArgumentFactory.Prep\r\n\r\n     @Override\r\n     public final Optional<Argument> build(Type type, Object value, ConfigRegistry config) {\r\n-        if (!isInstance.test(type, value)) {\r\n-            return Optional.empty();\r\n-        }\r\n-        return innerBuild(value, config);\r\n+        return isInstance.test(type, value)\r\n+                ? Optional.of(innerBuild(type, value, config))\r\n+                : Optional.empty();\r\n     }\r\n\r\n     @SuppressWarnings(\"unchecked\")\r\n-    private Optional<Argument> innerBuild(Object value, ConfigRegistry config) {\r\n-        return Optional.of(value == null\r\n-                ? new NullArgument(sqlType)\r\n-                : build((T) value, config));\r\n+    private Argument innerBuild(Type type, Object value, ConfigRegistry config) {\r\n+        if (value == null) {\r\n+            return new NullArgument(sqlType);\r\n+        }\r\n+        Argument argument = build ((T) value, config);\r\n+        if (argument == null) {\r\n+            throw new UnableToCreateStatementException(\"Prepared argument \" + value + \" of type \" + type + \" failed to build\");\r\n+        }\r\n+        return argument;\r\n     }\r\n\r\n     /**\r\n```\r\n  \r\nand now the `prepare` and `build` methods align very nicely, which they are suppose to do (because one is just a curried version of the other even though we got the argument order wrong).\r\n\r\nMy rant for this post is   `build` calls `innerBuild` calls `build`. Seriously people what were you smoking? Can I have some?\r\n\r\n",
      "We should also update the documentation of the `protected abstract Argument build(T value, ConfigRegistry config);` method that it must not return null. We currently have 24 implementations (15 in code, 9 in tests) and none returns null. So this is possible for outside implementations (I guess that is how you stumbled upon this) but should not be allowed.\r\n",
      "> My rant for this post is build calls innerBuild calls build. Seriously people what were you smoking? Can I have some?\r\n\r\nI also had to read over this part a few times :)\r\n\r\nHi @hgschmie\r\nI'm not even close to your level of insight, so it would be cool if you took over this issue if you don't mind (commit to this PR directly or close it and fix it in master, it's really up to you). Thanks!\r\n",
      "not sure about \"the level of insight\". :-) It is basically asking \"what is that piece of code supposed to do\" and then be willing to look at code and ask \"why does it do that?\". Once you lose the Optional from innerBuild, the structure becomes visible. \r\n\r\nHappy to push that change for review. Out of curiosity: How did you find this problem? Do you have a custom argument factory that returns null on the implemented build method? ",
      "> Out of curiosity: How did you find this problem? Do you have a custom argument factory that returns null on the implemented build method?\r\n\r\nI reviewed usages of `Optional.of`. I find `Optional.of` to be a misnomer and frequent source of bugs. An Optional should allow null really. It only does so by calling the non-intuitive factory `Optional.ofNullable`.",
      "Superseded by pr #2252 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343f9dde8ed798d2ed63b",
    "number": 2248,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2248)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2248&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2248&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2248&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2248&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2248&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2248&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2248&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2248&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2248&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2248&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2248&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2248&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2248) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2248&metric=duplicated_lines_density&view=list) No Duplication information\n\n"
    ],
    "commit_messages": [
      "Fix sqlite-jdbc link"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343fadde8ed798d2ed63c",
    "number": 2246,
    "body": "- factor out the direct dependency on caffeine\r\n- introduce a generic cache interface in core/cache\r\n\r\n- implementation with caffeine, installing the module restores the old behavior\r\n- implementation with Guava cache\r\n- no op implementation for testing\r\n\r\nPR looks larger than it actually is, changes are in core/src, everything else is either required housekeeping or new code",
    "head_branch": "local-generic-caches",
    "is_a_fork": true,
    "comments": [
      "I will leave the guava implementation out, I hear your concerns, we can keep this aside for now (or maintain it as experimental outside the main implementation). ",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2246)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2246&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2246&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2246&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2246&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2246&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2246&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2246&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2246&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2246&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2246&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2246&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2246&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2246) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2246&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2246&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2246 from hgschmie/local-generic-caches\n\nRemove caffeine dependency from core"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343fbdde8ed798d2ed63d",
    "number": 2245,
    "body": "Needs to turn off TestClassWithoutTestCases, see #2244",
    "head_branch": "basepom-51",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2245)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2245&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2245&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2245&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2245&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2245&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2245&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2245&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2245&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2245&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2245&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2245&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2245&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2245) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2245&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2245&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2245 from hgschmie/basepom-51\n\nUpdate to basepom 51"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343fcdde8ed798d2ed63e",
    "number": 2243,
    "body": "no need to push this to central. ",
    "head_branch": "dont-deploy-internal",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2243)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2243&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2243&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2243&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2243&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2243&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2243&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2243&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2243&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2243&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2243&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2243&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2243&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2243) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2243&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2243&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2243 from hgschmie/dont-deploy-internal\n\ndo not deploy the internal build pom"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343fddde8ed798d2ed63f",
    "number": 2242,
    "body": null,
    "head_branch": "geantyref-1.3.14",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2242)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2242&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2242&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2242&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2242&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2242&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2242&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2242&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2242&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2242&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2242&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2242&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2242&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2242) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2242&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2242&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "geantyref 1.3.14"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662343fedde8ed798d2ed640",
    "number": 2241,
    "body": "The generic named class \"JdbiCache\" is actually a very special cache class that is used to cache specific configuration information and configuration metadata. Rename the interface and its related config class to \"ConfigCache\" and \"ConfigCaches\".\r\n\r\nThis is user visible as the \"JdbiCaches\" element is technically part of the public API. However it is marked as @Beta so we could rename it.\r\n\r\n\"JdbiCache\" is never used in a public API except on the methods of the \"JdbiCaches\" method.",
    "head_branch": "configcaches",
    "is_a_fork": true,
    "comments": [
      "I want to rename this to allow creating a more generic \"Cache\" thing in Jdbi to get rid of the caffeine dependency. @stevenschlansker  @sman-81  please weigh in. ",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2241)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2241&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2241&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2241&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2241&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2241&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2241&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2241&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2241&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2241&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2241&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2241&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2241&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2241) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2241&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2241&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2241 from hgschmie/configcaches\n\nRename JdbiCache to ConfigCache"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662343ffdde8ed798d2ed641",
    "number": 2239,
    "body": null,
    "head_branch": "sman-81-2238-JdbiConfig-thread-safety",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2239)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2239&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2239&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2239&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2239&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2239&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2239&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2239&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2239&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2239&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2239&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2239&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2239&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2239) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2239&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2239&metric=new_duplicated_lines_density&view=list)\n\n",
      "I think these changes are not necessary and don't change anything. Unless there is a test that proves that there is really a way to force a ConcurrentModificationException (and that is entirely possible; I am not that smart after all), I think this is just change for the sake of making that one field final which actually introduces problems. I like the atomic swap that is there today and I think we should keep it."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234400dde8ed798d2ed642",
    "number": 2237,
    "body": "Fixes #2236 ",
    "head_branch": "2236",
    "is_a_fork": true,
    "comments": [
      "yes, it is. I would have approved the changes but the build is failing. ",
      "Thanks for y'all's patience. Got `make install` working locally\r\n\r\n(Incidentally, I had to run `mvn license:format` to get around a `Some files do not have the expected license header` error 🤷 )",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2237)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2237&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2237&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2237&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2237&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2237&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2237&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2237&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2237&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2237&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2237&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2237&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2237&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2237) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2237&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2237&metric=new_duplicated_lines_density&view=list)\n\n",
      "We good to go @hgschmie ?"
    ],
    "commit_messages": [
      "Make PojoTypes thread-safe (#2237)\n\n* Make PojoTypes thread-safe by using ConcurrentHashMap\r\n\r\nCo-authored-by: Nathan Petryk"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234401dde8ed798d2ed643",
    "number": 2235,
    "body": "- use -fn (fail never) instead of -fae (builds all the way through)\r\n- use -Pfast\r\n- add missing invoker:install to make tests",
    "head_branch": "build-tweaks",
    "is_a_fork": true,
    "comments": [
      "Why would we want to \"fail never\"? It is important for the build to fail if there is an error.",
      "it will still not build any modules that are in error or their descendants. but it will build all the modules that are not affected by a specific error so it will give us a wider footprint of things built. \r\n\r\nThere is a longer debate here: https://stackoverflow.com/questions/4174696/making-maven-run-all-tests-even-when-some-fail\r\n\r\nMain difference is that if module B depends on module A, and module A has failing tests, then module B is not built or tested with -fae but with -fn. There are some pros and cons to this.\r\n\r\n",
      "One of the comments:\r\n\r\n> I just tested the option --fail-never. Maven will not fail the build even if there are compile errors. If I use this option on Jenkins, the build looks successful even if it has lots of compile errors. \r\n\r\nThis is exactly what I am concerned about. This sounds like a bad thing.",
      "I removed all the `-fn` and kept the other changes",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2235)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2235&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2235&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2235&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2235&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2235&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2235&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2235&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2235&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2235&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2235&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2235&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2235&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2235) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2235&metric=duplicated_lines_density&view=list) No Duplication information\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2235 from hgschmie/build-tweaks\n\nSome build tweaks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234402dde8ed798d2ed644",
    "number": 2233,
    "body": "Let's face it: The Jdbi developers are PostgreSQL fanboys. Our tests run on PostgreSQL, we have three flavors of PostgreSQL testing and in general, if we have to grab a non-in-memory database, we use ... PostgreSQL. The only exception so far is ... Oracle of all things.\r\n\r\nThis PR adds full support to all databases that are provided by the testcontainers.org project and offers similar convenience (running multiple test methods on the same database instance) as the Postgres based test framework offers.\r\n\r\nIt supports (and runs test for!) MySQL, MariaDB, TiDB, PostgreSQL (with sub-flavors such as PostGIS and TimescaleDB), CockroachDB, YugabyteDB, ClickHouse, Oracle XE, and TrinoDB out of the box and any other testcontainer supported database can easily be configured and used. ",
    "head_branch": "testcontainers",
    "is_a_fork": true,
    "comments": [
      "Primary goal for this PR is to widen the tent to others using local database testing. It opens a path to more modules like jdbi3-postgres or jdbi3-sqlite by allowing to run tests against the actual databases; something we could not do before. ",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2233)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2233&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2233&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2233&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2233&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2233&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2233&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2233&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2233&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2233&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2233&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2233&resolved=false&types=CODE_SMELL) [1 Code Smell](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2233&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2233) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2233&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2233&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2233 from hgschmie/testcontainers\n\nAdd support for jdbc databases in testcontainers"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234403dde8ed798d2ed645",
    "number": 2230,
    "body": null,
    "head_branch": "support-static-jdbiextension",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2230)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2230&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2230&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2230&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2230&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2230&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2230&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2230&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2230&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2230&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2230&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2230&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2230&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2230) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2230&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2230&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2230 from hgschmie/support-static-jdbiextension\n\nfix exception message for JdbiExtension"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234404dde8ed798d2ed646",
    "number": 2229,
    "body": "This creates a single instance that is used for all tests in a test class.\r\n\r\nThere are situations where this is desireable to have the same test database for all tests. Support this by implementing the BeforeAll and AfterAll JUnit5 APIs.",
    "head_branch": "support-static-jdbiextension",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2229)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2229&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2229&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2229&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2229&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2229&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2229&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2229&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2229&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2229&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2229&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2229&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2229&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2229) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2229&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2229&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2229 from hgschmie/support-static-jdbiextension\n\nSupport static @RegisterExtension for JdbiExtension"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234405dde8ed798d2ed647",
    "number": 2228,
    "body": "- Unify the methods returning ResultProducer<ResultBearing>\r\n- expose createResultBearing which can be used in other places to create ResultSet objects (e.g. in the Oracle code)\r\n\r\nFixes #2222",
    "head_branch": "returning-alignment",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2228)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2228&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2228&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2228&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2228&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2228&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2228&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2228&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2228&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2228&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2228&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2228&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2228&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2228) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2228&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2228&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2228 from hgschmie/returning-alignment\n\nRefactor ResultProducers"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234406dde8ed798d2ed648",
    "number": 2227,
    "body": "- descriptions, names\r\n- license, developer\r\n- update Contributors file",
    "head_branch": "small_fixes",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2227)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2227&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2227&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2227&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2227&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2227&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2227&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2227&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2227&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2227&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2227&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2227&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2227&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2227) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2227&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2227&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2227 from hgschmie/small_fixes\n\nClean up the poms"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234407dde8ed798d2ed649",
    "number": 2223,
    "body": "add some tests for records",
    "head_branch": "modern-java",
    "is_a_fork": true,
    "comments": [
      "this is intended to go in after 3.35.0 release",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2223)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2223&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2223&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2223&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2223&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2223&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2223&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2223&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2223&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2223&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2223&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2223&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2223&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2223) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2223&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2223&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2223 from hgschmie/modern-java\n\nStart a new, java 17+ module"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234408dde8ed798d2ed64a",
    "number": 2219,
    "body": null,
    "head_branch": "dependabot",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2219)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2219&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2219&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2219&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2219&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2219&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2219&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2219&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2219&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2219&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2219&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2219&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2219&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2219) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2219&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2219&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2219 from hgschmie/dependabot"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234409dde8ed798d2ed64b",
    "number": 2218,
    "body": "- allow two open lines, not just one. Got bitten many times; like two lines for visual separation\r\n- remove HiddenField check",
    "head_branch": "checkstyle",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2218)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2218&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2218&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2218&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2218&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2218&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2218&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2218&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2218&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2218&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2218&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2218&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2218&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2218) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2218&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2218&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2218 from hgschmie/checkstyle\n\nRFC - checkstyle changes"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623440adde8ed798d2ed64c",
    "number": 2217,
    "body": "Only allow exact Consumer<Stream<T>> and Consumer<Iterator<T>> argument types, add reasonable error messages.\r\n\r\nAdd a minor correctness change for the consumers (close the stream right after stream/iterator callback ends).\r\n\r\nAdd a bunch of tests",
    "head_branch": "iterator-fix",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2217)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2217&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2217&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2217&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2217&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2217&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2217&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2217&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2217&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2217&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2217&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2217&resolved=false&types=CODE_SMELL) [3 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2217&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2217) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2217&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2217&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2217 from hgschmie/iterator-fix\n\nEnforce exact signatures for consumer arguments"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623440bdde8ed798d2ed64d",
    "number": 2215,
    "body": "Support any database JDBC URL for Junit 5 testing.",
    "head_branch": "more-extensions",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2215)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2215&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2215&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2215&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2215&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2215&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2215&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2215&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2215&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2215&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2215&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2215&resolved=false&types=CODE_SMELL) [2 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2215&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2215) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2215&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2215&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2215 from hgschmie/more-extensions\n\nAdd generic JDBC support for testing"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623440cdde8ed798d2ed64e",
    "number": 2214,
    "body": null,
    "head_branch": "testing-docs",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2214)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2214&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2214&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2214&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2214&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2214&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2214&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2214&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2214&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2214&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2214&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2214&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2214&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2214) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2214&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2214&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2214 from hgschmie/testing-docs\n\nupdate testing docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623440ddde8ed798d2ed64f",
    "number": 2212,
    "body": "Add constructor for H2 options, add methods to set username and password.",
    "head_branch": "jdbi-extension",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2212)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2212&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2212&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2212&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2212&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2212&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2212&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2212&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2212&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2212&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2212&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2212&resolved=false&types=CODE_SMELL) [1 Code Smell](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2212&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2212) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2212&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2212&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2212 from hgschmie/jdbi-extension\n\nSupport options, user and password for H2"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623440edde8ed798d2ed650",
    "number": 2211,
    "body": "Addresses #2208.\r\n\r\n- Run multiple tests against a managed database.\r\n- Run CI with multiple flyway versions to ensure compatibility.",
    "head_branch": "issue-2208",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2211)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2211&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2211&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2211&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2211&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2211&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2211&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2211&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2211&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2211&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2211&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2211&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2211&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2211) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2211&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2211&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2211 from hgschmie/issue-2208\n\nAdd tests for flyway versions and H2"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623440fdde8ed798d2ed651",
    "number": 2209,
    "body": "Review the terminal operations on ResultBearing, fix a few small problems and a resource leak with the stream() method.",
    "head_branch": "row-reducer",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2209)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2209&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2209&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2209&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2209&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2209&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2209&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2209&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2209&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2209&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2209&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2209&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2209&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2209) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2209&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2209&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2209 from hgschmie/row-reducer\n\nReview the resource management for ResultSetScanner and friends"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234410dde8ed798d2ed652",
    "number": 2207,
    "body": "Skip most of the execution if there are no cleanables.",
    "head_branch": "statementcontext-close",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2207)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2207&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2207&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2207&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2207&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2207&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2207&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2207&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2207&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2207&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2207&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2207&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2207&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2207) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2207&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2207&metric=new_duplicated_lines_density&view=list)\n\n",
      "Is it ever actually possible to benefit from this improvement? It seems that any statement context that ever executed a query or produced any result would have at least one cleanable."
    ],
    "commit_messages": [
      "Merge pull request #2207 from hgschmie/statementcontext-close\n\nPerformance fix for StatementContext#close"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234411dde8ed798d2ed653",
    "number": 2206,
    "body": "Increase test coverage for\r\n\r\n- row reduction with cleanup by the statement or the stream itself\r\n- batch returning keys from insert statement",
    "head_branch": "add-unit-tests",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2206)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2206&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2206&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2206&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2206&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2206&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2206&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2206&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2206&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2206&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2206&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2206&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2206&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2206) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2206&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2206&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2206 from hgschmie/add-unit-tests\n\n Add some unit tests"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234412dde8ed798d2ed654",
    "number": 2205,
    "body": "No code changes.",
    "head_branch": "small-fixes",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2205)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2205&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2205&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2205&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2205&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2205&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2205&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2205&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2205&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2205&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2205&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2205&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2205&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2205) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2205&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2205&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2205 from hgschmie/small-fixes\n\nsome renames and javadoc updates"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234413dde8ed798d2ed655",
    "number": 2204,
    "body": null,
    "head_branch": "more-renames",
    "is_a_fork": true,
    "comments": [
      "just parameter renames, no logic changes",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2204)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2204&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2204&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2204&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2204&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2204&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2204&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2204&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2204&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2204&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2204&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2204&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2204&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2204) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2204&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2204&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2204 from hgschmie/more-renames\n\nMore parameter renames to make code readable"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234414dde8ed798d2ed656",
    "number": 2201,
    "body": null,
    "head_branch": "docs-wip",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2201)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2201&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2201&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2201&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2201&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2201&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2201&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2201&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2201&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2201&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2201&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2201&resolved=false&types=CODE_SMELL) [6 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2201&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2201) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2201&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2201&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2201 from hgschmie/docs-wip\n\nAdd docs for resource management"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234415dde8ed798d2ed657",
    "number": 2200,
    "body": null,
    "head_branch": "doc-updates",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2200)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2200&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2200&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2200&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2200&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2200&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2200&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2200&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2200&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2200&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2200&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2200&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2200&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2200) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2200&metric=duplicated_lines_density&view=list) No Duplication information\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2200 from hgschmie/doc-updates\n\ndoc updates"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234416dde8ed798d2ed658",
    "number": 2199,
    "body": "- deprecate misnamed `setTransactionIsolation` method, add `setTransactionIsolationLevel` to the handle\r\n- deprecate misnamed `release` method, add `releaseSavepoint` to the handle\r\n- add missing `isInTransaction` method to `Transactional`, bringing it to par to the handle set of methods",
    "head_branch": "update-handle-and-transactional",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed.svg 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2199)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug.svg 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2199&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.svg 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2199&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2199&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability.svg 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2199&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.svg 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2199&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2199&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot.svg 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2199&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.svg 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2199&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2199&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell.svg 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2199&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.svg 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2199&resolved=false&types=CODE_SMELL) [3 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2199&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo.svg 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2199) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3.svg '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2199&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2199&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2199 from hgschmie/update-handle-and-transactional\n\nMethod updates on Handle and Transactional"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234417dde8ed798d2ed659",
    "number": 2198,
    "body": "Flyway changed the default value of cleanDisabled to false in V9.\r\n\r\nSet the value explicitly from cleanAfter. Also add a setter that allows other values than \"true\" and \"more true\".\r\n\r\nFixes #2197",
    "head_branch": "junit4-flyway-fix",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2198)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2198&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2198&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2198&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2198&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2198&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2198&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2198&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2198&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2198&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2198&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2198&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2198&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2198) No Coverage information  \n[![1.5%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '1.5%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2198&metric=new_duplicated_lines_density&view=list) [1.5% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2198&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2198 from hgschmie/junit4-flyway-fix\n\nBackport #2179 for Junit4"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234418dde8ed798d2ed65a",
    "number": 2195,
    "body": null,
    "head_branch": "transaction-docs",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2195)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2195&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2195&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2195&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2195&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2195&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2195&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2195&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2195&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2195&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2195&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2195&resolved=false&types=CODE_SMELL) [1 Code Smell](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2195&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2195) No Coverage information  \n[![1.5%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '1.5%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2195&metric=new_duplicated_lines_density&view=list) [1.5% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2195&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2195 from hgschmie/transaction-docs\n\nmore docs"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234419dde8ed798d2ed65b",
    "number": 2194,
    "body": "- add useful toString() method output to the proxies\r\n- rework the methodhandler code for the sqlobject proxy\r\n- some minor readability changes (variable names etc.)",
    "head_branch": "some-proxy-love",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2194)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2194&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2194&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2194&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2194&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2194&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2194&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2194&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2194&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2194&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2194&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2194&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2194&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2194) No Coverage information  \n[![1.6%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '1.6%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2194&metric=new_duplicated_lines_density&view=list) [1.6% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2194&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2194 from hgschmie/some-proxy-love\n\nMake proxy code more readable"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623441adde8ed798d2ed65c",
    "number": 2193,
    "body": "Replaces #2017\r\ncc @paladin235",
    "head_branch": "constructor-accessible",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2193)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2193&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2193&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2193&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2193&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2193&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2193&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2193&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2193&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2193&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2193&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2193&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2193&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2193) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2193&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2193&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "FieldMapper: make constructor accessible, make accessibility strategy configurable (#2193)\n\nFieldMapper accessibility improvements\r\n\r\n- allow FieldMappers to set accessibility of c'tors as well\r\n- add strategy configuration to manage accessibility\r\n- add tests\r\n\r\nCo-authored-by: Daniel Pierce <dpierce@phdata.io>\r\nCo-authored-by: Henning P. Schmiedehausen <henning@schmiedehausen.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623441bdde8ed798d2ed65d",
    "number": 2192,
    "body": "Fixes #2169",
    "head_branch": "consume-stream",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2192)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2192&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2192&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2192&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2192&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2192&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2192&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2192&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2192&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2192&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2192&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2192&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2192&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2192) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2192&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2192&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2192 from jdbi/consume-stream\n\nSqlObject Consumer: accept Stream, Iterator consumer types"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623441cdde8ed798d2ed65e",
    "number": 2191,
    "body": null,
    "head_branch": "handle-supplier-field-renames",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2191)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2191&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2191&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2191&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2191&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2191&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2191&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2191&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2191&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2191&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2191&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2191&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2191&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2191) No Coverage information  \n[![1.9%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '1.9%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2191&metric=new_duplicated_lines_density&view=list) [1.9% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2191&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2191 from hgschmie/handle-supplier-field-renames\n\nUse 'handleSupplier' consistently"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623441ddde8ed798d2ed65f",
    "number": 2190,
    "body": "With the existing code, it is impossible to inspect a memoizer instance for the value that it contains which makes debugging really hard.\r\n\r\nReplace the current code with the memoizer from Guava.",
    "head_branch": "memoizer-change",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2190)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2190&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2190&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2190&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2190&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2190&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2190&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2190&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2190&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2190&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2190&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2190&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2190&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2190) No Coverage information  \n[![1.9%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '1.9%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2190&metric=new_duplicated_lines_density&view=list) [1.9% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2190&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2190 from hgschmie/memoizer-change\n\nUse inspectable code for the memoizer"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623441edde8ed798d2ed660",
    "number": 2189,
    "body": null,
    "head_branch": "transaction-demo",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2189)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2189&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2189&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2189&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2189&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2189&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2189&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2189&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2189&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2189&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2189&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2189&resolved=false&types=CODE_SMELL) [7 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2189&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2189) No Coverage information  \n[![1.6%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '1.6%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2189&metric=new_duplicated_lines_density&view=list) [1.6% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2189&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2189 from hgschmie/transaction-demo\n\nadd some tests to demo transactions"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623441fdde8ed798d2ed661",
    "number": 2188,
    "body": "adding the github discussions, retire IRC. :-) ",
    "head_branch": "docs",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2188)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2188&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2188&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2188&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2188&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2188&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2188&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2188&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2188&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2188&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2188&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2188&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2188&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2188) No Coverage information  \n[![2.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '2.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2188&metric=new_duplicated_lines_density&view=list) [2.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2188&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2188 from hgschmie/docs\n\nUpdate contribution and contact links"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234420dde8ed798d2ed662",
    "number": 2187,
    "body": "Turns out, we are not shipping a metric ton of javadocs that are supposed to be published. Fix that.",
    "head_branch": "javadoc-fix",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2187)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2187&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2187&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2187&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2187&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2187&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2187&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2187&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2187&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2187&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2187&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2187&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2187&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2187) No Coverage information  \n[![2.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '2.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2187&metric=new_duplicated_lines_density&view=list) [2.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2187&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2187 from hgschmie/javadoc-fix\n\nFix generated javadocs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234422dde8ed798d2ed663",
    "number": 2185,
    "body": null,
    "head_branch": "docs",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2185)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2185&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2185&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2185&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2185&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2185&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2185&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2185&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2185&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2185&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2185&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2185&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2185&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2185) No Coverage information  \n[![2.1%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '2.1%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2185&metric=new_duplicated_lines_density&view=list) [2.1% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2185&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2185 from hgschmie/docs\n\nMore Docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234423dde8ed798d2ed664",
    "number": 2184,
    "body": null,
    "head_branch": "version-upgrade",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2184)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2184&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2184&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2184&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2184&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2184&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2184&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2184&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2184&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2184&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2184&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2184&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2184&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2184) No Coverage information  \n[![2.1%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '2.1%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2184&metric=new_duplicated_lines_density&view=list) [2.1% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2184&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2184 from hgschmie/version-upgrade\n\nversion upgrades"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234424dde8ed798d2ed665",
    "number": 2183,
    "body": "rewrite a bit to make more accessible and easier to digest.",
    "head_branch": "docs",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2183)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2183&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2183&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2183&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2183&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2183&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2183&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2183&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2183&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2183&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2183&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2183&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2183&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2183) No Coverage information  \n[![2.1%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '2.1%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2183&metric=new_duplicated_lines_density&view=list) [2.1% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2183&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2183 from hgschmie/docs\n\nDocs"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234425dde8ed798d2ed666",
    "number": 2182,
    "body": "This was hidden by the handle threadlocal and started popping up once they were removed.",
    "head_branch": "concurrent-fix",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2182)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2182&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2182&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2182&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2182&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2182&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2182&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2182&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2182&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2182&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2182&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2182&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2182&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2182) No Coverage information  \n[![2.1%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '2.1%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2182&metric=new_duplicated_lines_density&view=list) [2.1% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2182&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2182 from hgschmie/concurrent-fix\n\nFix bad concurrent test in stringtemplate4"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234426dde8ed798d2ed667",
    "number": 2181,
    "body": null,
    "head_branch": "flyway-fix",
    "is_a_fork": true,
    "comments": [
      "the `hiddenField` checkstyle thing is somewhat annoying...",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2181)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2181&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2181&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2181&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2181&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2181&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2181&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2181&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2181&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2181&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2181&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2181&resolved=false&types=CODE_SMELL) [1 Code Smell](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2181&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2181) No Coverage information  \n[![2.1%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '2.1%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2181&metric=new_duplicated_lines_density&view=list) [2.1% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2181&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2181 from hgschmie/flyway-fix\n\nfix cleanAfter() method, add changelog"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234427dde8ed798d2ed668",
    "number": 2179,
    "body": "In Flyway V9 they made the default value of `cleanDisabled` to `false`. This breaks jdbi's `JdbiFlywayMigration` because it's `cleanAfter` property is always true. Interestingly there is a setter that only allows making it true even though its default value is true.\r\n\r\nAnother solution to this PR is just setting `cleanDisabled` to always be true.",
    "head_branch": "fix/flyway-9",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2179)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2179&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2179&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2179&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2179&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2179&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2179&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2179&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2179&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2179&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2179&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2179&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2179&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2179) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2179&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2179&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2179 from broccolai/fix/flyway-9\n\nfix(testing/junit5): renable cleaning in flyway configuration"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234428dde8ed798d2ed669",
    "number": 2178,
    "body": "Remove the convoluted thread local code in the handle, replace with a simple stack structure in the handle suppliers. This also gets rid of the undocumented and needlessly complicated Invocations class.",
    "head_branch": "handle-thread-locals",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2178)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2178&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2178&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2178&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2178&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2178&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2178&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2178&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2178&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2178&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2178&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2178&resolved=false&types=CODE_SMELL) [1 Code Smell](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2178&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2178) No Coverage information  \n[![2.3%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '2.3%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2178&metric=new_duplicated_lines_density&view=list) [2.3% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2178&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2178 from hgschmie/handle-thread-locals\n\nReplace handle thread locals"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234429dde8ed798d2ed66a",
    "number": 2177,
    "body": null,
    "head_branch": "handle-supplier-renames",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2177)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2177&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2177&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2177&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2177&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2177&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2177&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2177&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2177&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2177&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2177&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2177&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2177&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2177) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2177&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2177&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2177 from hgschmie/handle-supplier-renames\n\nCall HandleSuppliers 'handleSupplier'"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623442adde8ed798d2ed66b",
    "number": 2176,
    "body": "This code is needlessly complex, it stores an init value in a thread local so it can be picked up through a static initializer method. Using the Invocations class makes this code next to unreadable so unwind this.",
    "head_branch": "sqlobjectinit",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2176)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2176&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2176&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2176&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2176&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2176&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2176&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2176&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2176&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2176&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2176&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2176&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2176&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2176) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2176&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2176&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2176 from hgschmie/sqlobjectinit\n\nRemove invocations execution"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623442bdde8ed798d2ed66c",
    "number": 2175,
    "body": null,
    "head_branch": "handle-rewrite",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2175)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2175&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2175&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2175&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2175&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2175&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2175&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2175&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2175&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2175&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2175&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2175&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2175&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2175) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2175&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2175&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2175 from hgschmie/handle-rewrite\n\nRemove redundant parameter from Handle c'tor"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623442cdde8ed798d2ed66d",
    "number": 2174,
    "body": null,
    "head_branch": "basepom-50",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2174)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2174&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2174&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2174&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2174&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2174&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2174&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2174&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2174&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2174&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2174&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2174&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2174&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2174) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2174&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2174&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2174 from hgschmie/basepom-50\n\nbasepom 50"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623442ddde8ed798d2ed66e",
    "number": 2173,
    "body": "Those are the leak checkers for the core tests and the testing test support module. They are activated by default and track whether all Handles are closed correctly and all cleanable objects get released. ",
    "head_branch": "leak-checker",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed.svg 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2173)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug.svg 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2173&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.svg 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2173&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2173&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability.svg 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2173&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.svg 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2173&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2173&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot.svg 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2173&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.svg 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2173&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2173&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell.svg 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2173&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.svg 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2173&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2173&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo.svg 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2173) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3.svg '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2173&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2173&metric=new_duplicated_lines_density&view=list)\n\n",
      "incorporated the feedback from the wip PR. "
    ],
    "commit_messages": [
      "Merge pull request #2173 from hgschmie/leak-checker\n\nAdd leak checkers"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623442edde8ed798d2ed66f",
    "number": 2172,
    "body": null,
    "head_branch": "handle-docs",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2172)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2172&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2172&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2172&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2172&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2172&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2172&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2172&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2172&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2172&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2172&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2172&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2172&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2172) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2172&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2172&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2172 from hgschmie/handle-docs\n\ndoc fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623442fdde8ed798d2ed670",
    "number": 2171,
    "body": "    - close the internal batch statement inside the script statement\r\n    - attach all generated statements to the handle. They will be cleaned when the handle is cleaned up",
    "head_branch": "leak-fix",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2171)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2171&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2171&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2171&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2171&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2171&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2171&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2171&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2171&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2171&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2171&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2171&resolved=false&types=CODE_SMELL) [1 Code Smell](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2171&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2171) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2171&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2171&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2171 from hgschmie/leak-fix\n\nFix resource leaks in script and sqlobject"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234430dde8ed798d2ed671",
    "number": 2170,
    "body": "Allow registration of cleanables, unwind the connection closing through a separate cleanable.",
    "head_branch": "handle-rewrite",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2170)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2170&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2170&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2170&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2170&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2170&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2170&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2170&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2170&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2170&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2170&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2170&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2170&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2170) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2170&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2170&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2170 from hgschmie/handle-rewrite\n\nRewrite handle in cleanable style"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234431dde8ed798d2ed672",
    "number": 2168,
    "body": null,
    "head_branch": "more-test-fixes",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2168)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2168&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2168&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2168&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2168&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2168&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2168&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2168&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2168&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2168&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2168&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2168&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2168&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2168) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2168&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2168&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2168 from hgschmie/more-test-fixes\n\nmore test fixes"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234432dde8ed798d2ed673",
    "number": 2167,
    "body": "Fix resource leaks in all our tests. This is mostly adding handle closing, doing t-w-r for some queries where the results are not fully consumed, use the shared handle instead of creating a new handle etc.\r\n\r\nFixes are very mechanic, there is not much to review. ",
    "head_branch": "test-fixes",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2167)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2167&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2167&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2167&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2167&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2167&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2167&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2167&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2167&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2167&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2167&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2167&resolved=false&types=CODE_SMELL) [19 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2167&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2167) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2167&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2167&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2167 from hgschmie/test-fixes\n\nTest fixes"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234433dde8ed798d2ed674",
    "number": 2166,
    "body": null,
    "head_branch": "sman-81-remove-dupd-versions",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2166)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2166&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2166&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2166&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2166&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2166&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2166&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2166&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2166&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2166&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2166&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2166&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2166&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2166) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2166&metric=duplicated_lines_density&view=list) No Duplication information\n\n",
      "> This needs to be rebased before it can be reviewed. There are additional commits on the PR that should not be here.\r\n\r\nThanks for the heads up. Now it's fine :)"
    ],
    "commit_messages": [
      "Merge pull request #2166 from sman-81/sman-81-remove-dupd-versions\n\nRemove pom versions that are equal to parent pom versions (avoiding warnings)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234434dde8ed798d2ed675",
    "number": 2165,
    "body": "- move IDE files into a more obvious place\r\n- add intellij code style\r\n- reword the CONTRIBUTING document to be a bit more welcoming",
    "head_branch": "ide",
    "is_a_fork": true,
    "comments": [
      "@stevenschlansker @sman-81 ",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2165)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2165&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2165&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2165&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2165&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2165&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2165&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2165&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2165&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2165&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2165&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2165&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2165&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2165) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2165&metric=duplicated_lines_density&view=list) No Duplication information\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2165 from hgschmie/ide\n\nUpdate contributing document and IDE support"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234435dde8ed798d2ed676",
    "number": 2163,
    "body": "Just a minor typo fix I've noticed while reading the documentation.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2163)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2163&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2163&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2163&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2163&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2163&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2163&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2163&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2163&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2163&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2163&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2163&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2163&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2163) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2163&metric=duplicated_lines_density&view=list) No Duplication information\n\n"
    ],
    "commit_messages": [
      "fix freebuilder link"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234436dde8ed798d2ed677",
    "number": 2162,
    "body": null,
    "head_branch": "core-leakchecker",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2162)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2162&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2162&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2162&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2162&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2162&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2162&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2162&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2162&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2162&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2162&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2162&resolved=false&types=CODE_SMELL) [17 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2162&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2162) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2162&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2162&metric=new_duplicated_lines_density&view=list)\n\n",
      "work in progress"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234437dde8ed798d2ed678",
    "number": 2161,
    "body": "Remove a single-use interface that works just as well with a lambda.",
    "head_branch": "remove-closer",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2161)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2161&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2161&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2161&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2161&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2161&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2161&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2161&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2161&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2161&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2161&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2161&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2161&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2161) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2161&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2161&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2161 from hgschmie/remove-closer\n\nReplace ConnectionCloser with Cleanable"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234438dde8ed798d2ed679",
    "number": 2160,
    "body": "Adding two new listeners to register events that happen on the StatementContext and the Handle. This enables adding leak checking code to the testing framework.\r\n\r\nThis will also be useful for other use cases (e.g. logging, resource tracking)",
    "head_branch": "listeners",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2160)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2160&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2160&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2160&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2160&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2160&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2160&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2160&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2160&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2160&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2160&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2160&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2160&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2160) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2160&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2160&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2160 from hgschmie/listeners\n\nAdding Lifecycle listeners to StatementContext and Handle"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234439dde8ed798d2ed67a",
    "number": 2158,
    "body": "- Consistent calling of close for statements created by the builder\r\n- Explicit close methods for PreparedStatement and regular Statement",
    "head_branch": "statement-builder",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2158)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2158&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2158&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2158&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2158&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2158&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2158&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2158&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2158&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2158&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2158&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2158&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2158&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2158) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2158&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2158&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2158 from hgschmie/statement-builder\n\nCleanup StatementBuilder usage"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623443adde8ed798d2ed67b",
    "number": 2157,
    "body": "Fixes #1998\r\n\r\nsee https://www.postgresql.org/docs/current/datatype-net-types.html\r\n\r\nWhile JDBI had an `InetArgumentFactory` an `InetColumnMapper` was strangely missing.\r\nEnhanced the unit test from insert-only to insert/select and update/select and testing with null.",
    "head_branch": "sman-81-bug-1998",
    "is_a_fork": true,
    "comments": [
      "Is this even needed? There is a factory in core that provides both Column and SingleColumnRow mappers for InetAddress",
      "PR title renamed from `Configure column mapper for Postgres's inet type to Java InetAddress`.",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2157)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2157&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2157&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2157&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2157&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2157&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2157&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2157&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2157&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2157&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2157&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2157&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2157&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2157) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2157&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2157&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2157 from sman-81/sman-81-bug-1998\n\nEnhance TestInetAddress* unit tests"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623443bdde8ed798d2ed67c",
    "number": 2156,
    "body": "Let the regular cleanup deal with closing the statement for exceptions.",
    "head_branch": "cleanup-exception",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2156)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2156&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2156&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2156&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2156&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2156&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2156&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2156&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2156&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2156&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2156&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2156&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2156&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2156) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2156&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2156&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2156 from hgschmie/cleanup-exception\n\nDo not close statement for exception"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623443cdde8ed798d2ed67d",
    "number": 2155,
    "body": "- Metadata must be closed, otherwise it will leak StatementContext objects.\r\n- ensure that a Script, when closed, releases its wrapped Batch.",
    "head_branch": "metadata-leaks",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2155)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2155&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2155&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2155&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2155&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2155&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2155&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2155&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2155&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2155&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2155&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2155&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2155&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2155) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2155&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2155&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2155 from hgschmie/metadata-leaks\n\nFix resource leaks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623443ddde8ed798d2ed67e",
    "number": 2154,
    "body": "this is only a passthru for getContext().addCleanable() and provides no value. As this is an internal method, we can just remove it.\r\n\r\nUse getContext().addCleanable() directly.",
    "head_branch": "remove-add-cleanable",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2154)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2154&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2154&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2154&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2154&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2154&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2154&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2154&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2154&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2154&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2154&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2154&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2154&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2154) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2154&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2154&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2154 from hgschmie/remove-add-cleanable\n\nremove BaseStatement#addCleanable"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623443edde8ed798d2ed67f",
    "number": 2153,
    "body": "We are sorely missing specific resource tracking for our tests. Add some code that allows us to do so.",
    "head_branch": "resource-tracking",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2153)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2153&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2153&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2153&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2153&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2153&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2153&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2153&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2153&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2153&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2153&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2153&resolved=false&types=CODE_SMELL) [17 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2153&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2153) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2153&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2153&metric=new_duplicated_lines_density&view=list)\n\n",
      "This was a work in progress. "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623443fdde8ed798d2ed680",
    "number": 2152,
    "body": null,
    "head_branch": "more-doc-fixes",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2152)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2152&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2152&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2152&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2152&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2152&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2152&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2152&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2152&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2152&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2152&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2152&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2152&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2152) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2152&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2152&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2152 from hgschmie/more-doc-fixes\n\nmore doc fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234440dde8ed798d2ed681",
    "number": 2151,
    "body": "Fixes #2150",
    "head_branch": "resolve-conflict",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2151)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2151&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2151&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2151&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2151&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2151&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2151&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2151&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2151&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2151&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2151&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2151&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2151&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2151) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2151&metric=duplicated_lines_density&view=list) No Duplication information\n\n"
    ],
    "commit_messages": [
      "Remove Git gunk\n\nFixes #2150"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234441dde8ed798d2ed682",
    "number": 2149,
    "body": null,
    "head_branch": "hsqldb-2.7.1",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2149)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2149&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2149&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2149&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2149&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2149&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2149&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2149&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2149&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2149&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2149&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2149&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2149&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2149) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2149&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2149&metric=new_duplicated_lines_density&view=list)\n\n",
      "there is no 2.7.1 on central. It is supposed to come out today but I don't see  it here: https://central.sonatype.dev/artifact/org.hsqldb/hsqldb/2.7.0\r\n\r\nIf this is driven out of a dependabot alert, can we link those here?  (https://github.com/jdbi/jdbi/security/dependabot/16)",
      "Ah, I did not realize you could link them. I don't seem to be able to comment or otherwise modify the Dependabot alert in any way other than dismissing.\r\n\r\nYes, that's why I tried to upgrade - but still no artifact to upgrade to..."
    ],
    "commit_messages": [
      "hsqldb 2.7.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234442dde8ed798d2ed683",
    "number": 2147,
    "body": null,
    "head_branch": "clean-exceptions",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2147)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2147&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2147&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2147&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2147&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2147&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2147&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2147&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2147&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2147&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2147&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2147&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2147&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2147) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2147&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2147&metric=new_duplicated_lines_density&view=list)\n\n",
      "this fix is incomplete. "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234443dde8ed798d2ed684",
    "number": 2146,
    "body": "Inspired by #2119",
    "head_branch": "with-iter",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2146)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2146&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2146&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2146&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2146&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2146&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2146&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2146&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2146&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2146&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2146&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2146&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2146&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2146) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2146&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2146&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Add ResultIterable.withIterator and useIterator\n\nInspired by #2119"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234444dde8ed798d2ed685",
    "number": 2145,
    "body": "This is a followup to #2123 - I don't understand why a public static helper method is preferable to simply using the existing close method.\r\n\r\nEven if we choose to ditch Closeable, if there is any cleanup to do, the close method seems like the natural place.\r\nI do not intend to start an edit war, but why is the current state preferable to the simpler place we were at before?",
    "head_branch": "cleanup-close",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2145)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2145&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2145&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2145&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2145&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2145&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2145&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2145&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2145&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2145&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2145&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2145&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2145&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2145) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2145&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2145&metric=new_duplicated_lines_density&view=list)\n\n",
      "I am fine with this. I am not actually convinced that we want to remove Closeable. There is precedent in the JDK (Stream) that things that are closeable do not *need* to be closed. "
    ],
    "commit_messages": [
      "BaseStatement: why do we need a helper method for close()?"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234445dde8ed798d2ed686",
    "number": 2144,
    "body": "Finally got around to reverse-engineering Eclipse formatter settings from our Checkstyle ruleset and existing codebase.\r\nThink I got it (mostly) right.\r\nLuckily the Eclipse formatter configuration file can be used in IDEA as well.",
    "head_branch": "sman-81-eclipse-formatter",
    "is_a_fork": true,
    "comments": [
      "Hi @stevenschlansker\r\n\r\ntrue :)\r\n\r\nWhat I did to test: format some jdbi source files, run Checkstyle/PMD, amend the formatter, repeat.",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2144)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2144&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2144&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2144&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2144&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2144&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2144&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2144&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2144&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2144&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2144&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2144&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2144&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2144) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2144&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2144&metric=new_duplicated_lines_density&view=list)\n\n",
      "Hi @stevenschlansker could you merge this PR?",
      "Thanks!"
    ],
    "commit_messages": [
      "Add Eclipse Code Formatter configuration and instructions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234446dde8ed798d2ed687",
    "number": 2143,
    "body": "- Add rule Indentation (check correct indentation in sources) making rule RegexpSinglelineJava 'Indent of 6 spaces is suspicious' redundant\r\n- Add rule FileTabCharacter (disallow tab chars in sources) making rule RegexpSinglelineJava 'Line contains leading tabs' redundant\r\n- Remove RegexpSinglelineJava rule that checks for JUnit 4 usage \"@Test.expected\"\r\n\r\nBtw, rule RegexpSinglelineJava 'Multiple consecutive space characters' raises false positives in string contents such as `String str = \"x  x\";`. Kind of hard to fix by way of regex only. There are however currently no cases, so no real issue.",
    "head_branch": "sman-81-tighten-checkstyle",
    "is_a_fork": true,
    "comments": [
      "there are now some checkstyle errors in the CI, so something is now checking different than before.",
      "> there are now some checkstyle errors in the CI, so something is now checking different than before.\r\n\r\nHi @hgschmie, these were introduced by your commit \"Fix resource leaks in script and sqlobject\" (214adffa372cf96af9abb6c46a09652b5669b859) on Nov-4 and my subsequent rebase to master.\r\nThe updated Checkstyle configuration looks for incorrect indentation.",
      "I am not opposed to this; but I want is to be able to \"format in intellij\" and not fight the code formatter. Is there a risk that this might happen?",
      "> I am not opposed to this; but I want is to be able to \"format in intellij\" and not fight the code formatter. Is there a risk that this might happen?\r\n\r\nI cannot give a guarantee it won't happen, Henning :) Tighter checks require more discipline. The ruleset we have in place and are fine-tuning with this PR is a sound and balanced compromise IMO, also thanks to your valuable feedback which I really appreciate.\r\n",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2143)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2143&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2143&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2143&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2143&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2143&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2143&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2143&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2143&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2143&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2143&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2143&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2143&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2143) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2143&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2143&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Tighten Checkstyle ruleset (#2143)\n\n- Add rule Indentation (check correct indentation in sources) making rule RegexpSinglelineJava 'Indent of 6 spaces is suspicious' redundant\r\n- Add rule FileTabCharacter (disallow tab chars in sources) making rule RegexpSinglelineJava 'Line contains leading tabs' redundant\r\n- Remove RegexpSinglelineJava rule that checks for JUnit 4 usage \"@Test.expected\"\r\n- FYI: rule RegexpSinglelineJava 'Multiple consecutive space characters' may raise false positives in string contents"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234447dde8ed798d2ed688",
    "number": 2142,
    "body": null,
    "head_branch": "sman-81-contributing-doc",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2142)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2142&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2142&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2142&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2142&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2142&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2142&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2142&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2142&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2142&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2142&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2142&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2142&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2142) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2142&metric=duplicated_lines_density&view=list) No Duplication information\n\n"
    ],
    "commit_messages": [
      "Update technical info in contributing page"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234448dde8ed798d2ed689",
    "number": 2141,
    "body": null,
    "head_branch": "closeable-fix",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2141)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2141&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2141&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2141&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2141&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2141&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2141&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2141&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2141&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2141&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2141&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2141&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2141&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2141) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2141&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2141&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2141 from hgschmie/closeable-fix\n\nstyle fix"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234449dde8ed798d2ed68a",
    "number": 2140,
    "body": null,
    "head_branch": "doc-fixes",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2140)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2140&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2140&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2140&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2140&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2140&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2140&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2140&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2140&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2140&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2140&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2140&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2140&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2140) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2140&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2140&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2140 from hgschmie/doc-fixes\n\nsome minor doc fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623444adde8ed798d2ed68b",
    "number": 2139,
    "body": "https://www.cvedetails.com/cve-details.php?t=1&cve_id=CVE-2022-42889",
    "head_branch": "sman-81-bump-commons-text",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2139)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2139&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2139&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2139&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2139&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2139&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2139&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2139&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2139&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2139&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2139&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2139&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2139&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2139) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2139&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2139&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2139 from sman-81/sman-81-bump-commons-text\n\nBump commons-text version to 1.10.0 to address CVE-2022-42889"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623444bdde8ed798d2ed68c",
    "number": 2138,
    "body": "This PR adds Maven profile 'fast' to the internal build parent POM.\r\nThe profile is intended to build the project while skipping all time-consuming steps such as test execution, pmd, checkstyle, javadoc, etc. It is of course not active by default.",
    "head_branch": "sman-81-maven-profile-fast",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2138)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2138&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2138&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2138&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2138&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2138&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2138&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2138&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2138&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2138&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2138&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2138&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2138&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2138) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2138&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2138&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Add Maven profile 'fast' to build the project while skipping several time-consuming steps"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623444cdde8ed798d2ed68d",
    "number": 2137,
    "body": null,
    "head_branch": "sman-81-maven-defaultgoal",
    "is_a_fork": true,
    "comments": [
      "> [..] I do think it's useful to be explicit about what you want Maven to do\r\n\r\nI agree. The explicitness comes through the very well crafted POM of this project. The defaultGoal is for convenience, but also carries the message 'this is the build command to invoke'.\r\n\r\n",
      "I am actually hoping to steer people towards \"make install\" as the default goal. At some point, we want to switch from `./mvnw clean install` to `mvnd clean install` to use the maven daemon. ",
      "> I am actually hoping to steer people towards \"make install\" as the default goal.\r\n\r\nI've never heard of a 'make' goal :)\r\n\r\n`mvnw` and `mvnd` should honor the defaultGoal just the same as it is defined in the POM.\r\n\r\n",
      "no, not a \"make\" goal. There is a Makefile in the root of the tree and you can use it to execute most build goals.",
      "> no, not a \"make\" goal. There is a Makefile in the root of the tree and you can use it to execute most build goals.\r\n\r\nWill check that out. Thanks!",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2137)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2137&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2137&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2137&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2137&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2137&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2137&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2137&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2137&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2137&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2137&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2137&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2137&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2137) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2137&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2137&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2137 from sman-81/sman-81-maven-defaultgoal\n\nAdd Maven defaultGoal to support invocation of builds with only 'mvn'"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623444ddde8ed798d2ed68e",
    "number": 2136,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2136)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2136&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2136&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2136&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2136&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2136&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2136&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2136&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2136&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2136&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2136&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2136&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2136&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2136) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2136&metric=duplicated_lines_density&view=list) No Duplication information\n\n"
    ],
    "commit_messages": [
      "fix: Examples link points directly to it's README.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623444edde8ed798d2ed68f",
    "number": 2135,
    "body": "to show directory name of module in Maven builds\r\ne.g. \"Building jdbi3 BOM...\" becomes \"Building jdbi3 BOM (jdbi3-bom)...\"\r\nThis way it becomes more obvious which subdirectory to cd into to fix the build of a failing module etc.\r\n\r\n\r\n",
    "head_branch": "sman-81-add-artifactId-to-name",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2135)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2135&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2135&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2135&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2135&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2135&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2135&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2135&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2135&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2135&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2135&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2135&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2135&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2135) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2135&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2135&metric=new_duplicated_lines_density&view=list)\n\n",
      "I am not objecting to this, but the value is limited. We have modules that are multiple subdirectories deep (anything in internal) and the build just shows like this:\r\n```\r\n[INFO] jdbi3 - internal - policy (jdbi3-policy) ........... SUCCESS [  4.171 s]\r\n[INFO] jdbi3 - internal - build parent (jdbi3-build-parent) SUCCESS [  1.427 s]\r\n[INFO] jdbi3 Parent (jdbi3-parent) ........................ SUCCESS [  0.058 s]\r\n[INFO] jdbi3 - internal - parent (jdbi3-internal-parent) .. SUCCESS [  0.098 s]\r\n[INFO] jdbi3 BOM (jdbi3-bom) .............................. SUCCESS [  0.211 s]\r\n[INFO] jdbi3 Core (jdbi3-core) ............................ SUCCESS [ 10.941 s]\r\n[INFO] jdbi3 Test Helpers (jdbi3-testing) ................. SUCCESS [  1.277 s]\r\n[INFO] jdbi3 Guava Integration (jdbi3-guava) .............. SUCCESS [  1.406 s]\r\n[INFO] jdbi3 SqlObject (jdbi3-sqlobject) .................. SUCCESS [  2.537 s]\r\n[INFO] jdbi3 json (jdbi3-json) ............................ SUCCESS [  1.269 s]\r\n[INFO] jdbi3 Postgres (jdbi3-postgres) .................... SUCCESS [  1.771 s]\r\n[INFO] jdbi3 example code (jdbi3-examples) ................ SUCCESS [  1.075 s]\r\n[INFO] jdbi3 jdbi3-stringtemplate4 integration ............ SUCCESS [  1.662 s]\r\n[INFO] jdbi3 jdbi3-commons-text integration ............... SUCCESS [  1.424 s]\r\n[INFO] jdbi3 lombok (jdbi3-lombok) ........................ SUCCESS [  1.238 s]\r\n[INFO] jdbi3 Freemarker integration (jdbi3-freemarker) .... SUCCESS [  1.791 s]\r\n[INFO] jdbi3 gson2 (jdbi3-gson2) .......................... SUCCESS [  1.357 s]\r\n[INFO] jdbi3 moshi (jdbi3-moshi) .......................... SUCCESS [  1.586 s]\r\n[INFO] jdbi3 Guice Integration (jdbi3-guice) .............. SUCCESS [  2.796 s]\r\n[INFO] jdbi3 jackson2 (jdbi3-jackson2) .................... SUCCESS [  2.628 s]\r\n[INFO] jdbi3 Joda-Time Integration (jdbi3-jodatime2) ...... SUCCESS [  0.982 s]\r\n[INFO] jdbi3 JPA Integration (jdbi3-jpa) .................. SUCCESS [  1.397 s]\r\n[INFO] jdbi3 PostGIS (jdbi3-postgis) ...................... SUCCESS [  1.748 s]\r\n[INFO] jdbi3 Spring 5 (jdbi3-spring5) ..................... SUCCESS [  1.013 s]\r\n[INFO] jdbi3 sqlite (jdbi3-sqlite) ........................ SUCCESS [  0.960 s]\r\n[INFO] jdbi3 Vavr Integration (jdbi3-vavr) ................ SUCCESS [  1.697 s]\r\n[INFO] jdbi3 Kotlin plugin (jdbi3-kotlin) ................. SUCCESS [ 20.085 s]\r\n[INFO] jdbi3 jdbi3-kotlin-sqlobject plugin ................ SUCCESS [  3.444 s]\r\n[INFO] jdbi3 documentation (jdbi3-docs) ................... SUCCESS [  9.290 s]\r\n[INFO] jdbi3 noparameters tests (jdbi3-noparameters) ...... SUCCESS [  1.470 s]\r\n[INFO] jdbi3 Generator (jdbi3-generator) .................. SUCCESS [  1.476 s]\r\n[INFO] jdbi3 benchmarks (jdbi3-benchmark) ................. SUCCESS [  7.077 s]\r\n```\r\n\r\nThe output of the build is obviously intended for human consumption so having the artifact ids has value. \r\n",
      "(It also seems somewhat uneven, e.g. stringtemplate4, commons-text, kotlin-sqlobject look different than all the others)",
      "> (It also seems somewhat uneven, e.g. stringtemplate4, commons-text, kotlin-sqlobject look different than all the others)\r\n\r\nMaven formats this output to line length 79. Overly long artifact names such as `jdbi3 Apache Commons Text integration` push the `SUCCESS [ .. s]` part out to the right.\r\n\r\nI'll close this PR. It doesn't add much value."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234450dde8ed798d2ed690",
    "number": 2134,
    "body": "- Substitute all JUnit5 assertions by AssertJ (assertj-core) i.e. `assertEquals`/`assertNull`/`assertTrue` become `assertThat`\r\n- Bump JUnit version from 5.8.2 to 5.9.1\r\n- ~~Remove scarcely used dependency on `org.assertj:assertj-guava` by rewriting asserts using `assertj-core`~~\r\n- ~~Introduce test base class `JdbiBaseTest` which extends `JdbiAssertions` which extends AssertJ Assertions~~\r\n- ~~Bump SLF4J version from 1.7.32 to 1.7.36~~\r\n\r\nNote: jdbi3-testing depends on jdbi3-core, therefore jdbi3-core should not currently use testing (avoid circular dependency). This is something we might want to refactor going forward.",
    "head_branch": "sman-81-unit-test-refactoring",
    "is_a_fork": true,
    "comments": [
      "There is some value in this PR (updating some versions and dependencies). Replacing all the different tests is a labor of love, having done the Junit4 -> Junit5 transition I really appreciate that work. Some are improving the tests (e.g. `assertThat(someOptional.get()).isTrue()` to `assertThat(someOptional).isTrue()` ), for some others I don't really see the value (`assertEquals(\"\", something)` -> `assertThat(something).isBlank()`) but I don't mind the change. \r\n\r\nSplitting these things into a number of smaller PRs would be good. ",
      "> I do not want to delve into the \"extends AbstractTestBase\" hell that is inevitable once some \"test base class\" is introduced. I think we have about zero tests that extend a base class unless that inheritance is a fundamental concept that is tested.\r\n> \r\n> That is not what inheritance is intended for. If we factor out code, we do so in helper classes and use those helpers in the tests.\r\n\r\nOne idea behind a test base class is for it to contain common testing behaviour such as the test begin / test end logging. How would this be achieved this without inheritance?\r\nAlso, by extending Assertions these become part of the tests' namespace and are available without static imports. The test extends AssertJ Assertions not JUnit5 Assertions. All of the tests have been updated to use only AssertJ, while before the mix of JUnit / AssertJ was more or less random.",
      "First of all thanks for your feedback @hgschmie.\r\n\r\n> There is some value in this PR (updating some versions and dependencies). Replacing all the different tests is a labor of love, having done the Junit4 -> Junit5 transition I really appreciate that work. Some are improving the tests (e.g. `assertThat(someOptional.get()).isTrue()` to `assertThat(someOptional).isTrue()` ), for some others I don't really see the value (`assertEquals(\"\", something)` -> `assertThat(something).isBlank()`) but I don't mind the change.\r\n\r\nThe changes make tests somewhat cleaner and easier to read IMO by using only AssertJ and fluent style where possible. I should note that this is a purely technical update without any effect on test coverage or functionality.\r\nIt fixes all remaining 'SonarCloud Quality Gate' code smells that I was aware of. This brings the project to zero code smells. It also solves the oddity in `TestScript.testOracleScriptWithBeginEndBlock` where Java 9 API `String.chars()` had slipped in.\r\n\r\nI read from your comments that you don't like the AbstractTestBase and extends Assertions thing much which I understand and am fine with. I'll go ahead and remove these parts from the PR. Then shall we take another look?",
      "> First of all thanks for your feedback @hgschmie.\r\n> \r\n> > There is some value in this PR (updating some versions and dependencies). Replacing all the different tests is a labor of love, having done the Junit4 -> Junit5 transition I really appreciate that work. Some are improving the tests (e.g. `assertThat(someOptional.get()).isTrue()` to `assertThat(someOptional).isTrue()` ), for some others I don't really see the value (`assertEquals(\"\", something)` -> `assertThat(something).isBlank()`) but I don't mind the change.\r\n> \r\n> The changes make tests somewhat cleaner and easier to read IMO by using only AssertJ and fluent style where possible. I should note that this is a purely technical update without any effect on test coverage or functionality. It fixes all remaining 'SonarCloud Quality Gate' code smells that I was aware of. This brings the project to zero code smells. It also solves the oddity in `TestScript.testOracleScriptWithBeginEndBlock` where Java 9 API `String.chars()` had slipped in.\r\n> \r\n> I read from your comments that you don't like the AbstractTestBase and extends Assertions thing much which I understand and am fine with. I'll go ahead and remove these parts from the PR. Then shall we take another look?\r\n\r\nYes, definitely. Thank you for doing this work. \r\n",
      "Pull request updated and rebased.",
      "Hi Henning (@hgschmie)\r\nplease take another look at this PR. I just rebased it to master. It can be merged without conflicts.\r\nHave a great week!",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2134)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2134&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2134&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2134&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2134&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2134&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2134&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2134&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2134&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2134&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2134&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2134&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2134&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2134) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2134&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2134&metric=new_duplicated_lines_density&view=list)\n\n",
      "Hi @hgschmie, all your requested changes implemented, commited and rebased!",
      "Thank you for doing all this work. Tests are super-important but are often considered a chore. "
    ],
    "commit_messages": [
      "Merge pull request #2134 from sman-81/sman-81-unit-test-refactoring\n\nUnit Test Refactoring"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234451dde8ed798d2ed691",
    "number": 2133,
    "body": null,
    "head_branch": "typo",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2133)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2133&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2133&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2133&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2133&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2133&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2133&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2133&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2133&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2133&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2133&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2133&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2133&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2133) No Coverage information  \n[![0.8%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.8%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2133&metric=new_duplicated_lines_density&view=list) [0.8% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2133&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2133 from hgschmie/typo\n\nfix typo"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234452dde8ed798d2ed692",
    "number": 2132,
    "body": "Make the sortpom plugin format the empty xml tags the same way that the release plugin does.",
    "head_branch": "sortpom-peace",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2132)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2132&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2132&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2132&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2132&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2132&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2132&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2132&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2132&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2132&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2132&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2132&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2132&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2132) No Coverage information  \n[![0.8%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.8%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2132&metric=new_duplicated_lines_density&view=list) [0.8% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2132&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2132 from hgschmie/sortpom-peace\n\nSettle reformatting wars"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234453dde8ed798d2ed693",
    "number": 2131,
    "body": null,
    "head_branch": "revisit-858",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2131)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2131&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2131&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2131&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2131&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2131&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2131&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2131&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2131&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2131&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2131&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2131&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2131&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2131) No Coverage information  \n[![0.8%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.8%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2131&metric=new_duplicated_lines_density&view=list) [0.8% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2131&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2131 from hgschmie/revisit-858\n\nSome kotlin changes"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234454dde8ed798d2ed694",
    "number": 2130,
    "body": null,
    "head_branch": "skip-check-sortpom",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2130)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2130&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2130&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2130&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2130&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2130&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2130&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2130&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2130&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2130&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2130&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2130&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2130&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2130) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2130&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2130&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2130 from hgschmie/skip-check-sortpom\n\nturn off sortpom if checks are skipped"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234455dde8ed798d2ed695",
    "number": 2129,
    "body": "This allows you to skip binding, same as you can skip mapping, on reflectively discovered properties.\r\nIn our use case, we have a helper method that returns a non-bindable type that we just want Jdbi to ignore.\r\n\r\nI changed the meaning from the negative (unmappable) to the positive, otherwise you end up with double negatives (unmappable = false)\r\n\r\nA `@JdbiIgnore` would be nice to have, but is technically redundant. WDYT?",
    "head_branch": "jdbi-ignore",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2129)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2129&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2129&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2129&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2129&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2129&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2129&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2129&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2129&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2129&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2129&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2129&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2129&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2129) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2129&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2129&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Replace Unmappable with JdbiProperty for skipping binding / mapping"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234456dde8ed798d2ed696",
    "number": 2128,
    "body": "Fixes #2127.\r\n\r\nWe should be able to output generated code for any supported releases >= 8. Considering the bytecode we output for the artifact (i.e. the processor, not the generated code) is always Java 8 or newer as of writing, this will not be an issue.\r\n\r\nWe return the latest supported version for javac instead of the lowest version we expect to support, because javac will print warnings in that case. This breaks -Werror builds on versions higher than this is made to support (i.e. Java 9+ as of writing).\r\n\r\nLegal note: this code is submitted under the applicable licence(s) (Apache 2.0, Jan 2004) with the ownership retained as Spotify AB.",
    "head_branch": "issue-2127",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2128)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2128&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2128&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2128&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2128&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2128&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2128&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2128&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2128&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2128&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2128&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2128&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2128&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2128) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2128&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2128&metric=new_duplicated_lines_density&view=list)\n\n",
      "Hi @Proximyst! Thank you for contributing to the JDBI project! The PR looks good to me; I kicked off the CI builds, if they pass I will merge this.",
      "@Proximyst is the `Legal note: this code is submitted under the applicable licence(s) (Apache 2.0, Jan 2004) with the ownership retained as Spotify AB.` needed for you to contribute to the project? While we do not collect CLAs, we might need at some point, so this implies that you are allowed to grant us a license similar to the one laid out in https://www.apache.org/licenses/icla.pdf (the Apache contributor license agreement). ",
      "@hgschmie Needed and needed... it needs to be made clear that the company owns the code, but that we open for use in all the clauses that the licence lays out.\r\n\r\nI'm more than happy to look into what you (the JDBI org) and I need to do to get a CLA signed, if you folks prefer that?",
      "I think we are good. This git thread suffices for me. "
    ],
    "commit_messages": [
      "Merge pull request #2128 from Proximyst/issue-2127\n\nfix(generator): return latest supported SourceVersion instead of 8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234457dde8ed798d2ed697",
    "number": 2126,
    "body": "It seems that using lombok crashes the compiler in some IDEs. Factor the lombok code into a separate module so that core still compiles in such IDEs.\r\n\r\nThe lombok module is tests-only, so it does not ship any artifacts.",
    "head_branch": "lombok-code",
    "is_a_fork": true,
    "comments": [
      "not super-excited but if it makes Eclipse happy... Or maybe use IntelliJ? :-) ",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2126)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2126&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2126&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2126&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2126&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2126&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2126&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2126&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2126&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2126&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2126&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2126&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2126&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2126) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2126&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2126&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2126 from hgschmie/lombok-code\n\nFactor lombok code into its own module"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234458dde8ed798d2ed698",
    "number": 2125,
    "body": "Illustrates how to solve the #2083 issue",
    "head_branch": "investigate-2083",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2125)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2125&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2125&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2125&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2125&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2125&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2125&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2125&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2125&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2125&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2125&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2125&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2125&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2125) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2125&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2125&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2125 from hgschmie/investigate-2083\n\nUnit test to demonstrate boolean mappings"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234459dde8ed798d2ed699",
    "number": 2124,
    "body": null,
    "head_branch": "format-fix",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2124)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2124&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2124&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2124&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2124&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2124&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2124&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2124&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2124&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2124&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2124&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2124&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2124&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2124) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2124&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2124&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2124 from hgschmie/format-fix\n\nlittle whitespace reformat"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623445adde8ed798d2ed69a",
    "number": 2123,
    "body": "Interestingly enough, there are only very few changes required to make BaseStatement not implement Closable. And the places are few and all internal.\r\n\r\nAs we have never actually published that the various SqlStatement things are closable (and basically no one ever should have to deal with them directly anyway), it should be possible to make this change without causing too much scare amongst JDBI users. Or not?\r\n\r\nDiscussion wanted!\r\n\r\n@hjohn would that change help your evaluation? I can follow your arguments and I am not actually sure why BaseStatement extends Closable. I don't think it is really needed. :-) ",
    "head_branch": "closable-stuff",
    "is_a_fork": true,
    "comments": [
      "The change indeed looks far simpler than I could have hoped, perhaps `Closeable` was only used because it was a convenient interface with a `close` method. As for my evaluation (if that really matters), I would definitely reconsider as I think JDBI is still exactly what I've been looking for.",
      "> The change indeed looks far simpler than I could have hoped, perhaps `Closeable` was only used because it was a convenient interface with a `close` method. As for my evaluation (if that really matters), I would definitely reconsider as I think JDBI is still exactly what I've been looking for.\r\n\r\nI think it is unfortunate that there are some checkers that now consider anything that implements \"Closeable\" as sacrosanct and requiring try-with-resources. Actually, this is what AutoCloseable is about. I believe we used that as a convenient marker interface for a close() method. Unwinding this is not hard, the question for us is more whether we can do this (and break backwards compatibility with something that most likely no one is actually using). Until someone shows up with a use-case. ",
      "> > The change indeed looks far simpler than I could have hoped, perhaps `Closeable` was only used because it was a convenient interface with a `close` method. As for my evaluation (if that really matters), I would definitely reconsider as I think JDBI is still exactly what I've been looking for.\r\n> \r\n> I think it is unfortunate that there are some checkers that now consider anything that implements \"Closeable\" as sacrosanct and requiring try-with-resources. Actually, this is what AutoCloseable is about. I believe we used that as a convenient marker interface for a close() method. Unwinding this is not hard, the question for us is more whether we can do this (and break backwards compatibility with something that most likely no one is actually using). Until someone shows up with a use-case.\r\n\r\nWell, it is hard to blame the checkers. `Closeable` (introduces in Java 1.5) was retrofitted in Java 1.7 to extend `AutoCloseable`, so in effect it is now an `AutoCloseable`.  The only difference between the two now is that one throws an `IOException` while the other throws the generic exception.\r\n\r\nAnd you're right, it is not a strictly backwards compatible change, if someone is currently using try with resources on the `Update` returned (it wouldn't compile anymore as `Update` isn't `AutoCloseable` anymore). It doesn't make sense to do it, but it was possible.\r\n\r\n     try (Update u = jdbi.createUpdate(\"<sql>\")) {  // <-- compile error here\r\n          u.execute();\r\n     }",
      "agreed but before 1.7, \"Closeable\" implied \"has a close() method\". Checkers started to aggressively change that semantic to \"needs to be closed\". ",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2123)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2123&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2123&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2123&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2123&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2123&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2123&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2123&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2123&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2123&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2123&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2123&resolved=false&types=CODE_SMELL) [1 Code Smell](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2123&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2123) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2123&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2123&metric=new_duplicated_lines_density&view=list)\n\n",
      "I have changed the scope of the commit for now to just clean up the code but leave the interface in place. I am planning to write some docs and then we can revisit whether we want to remove the interface or not. I am very much leaning towards removing it once we have documented what we expect users to do. "
    ],
    "commit_messages": [
      "Merge pull request #2123 from hgschmie/closable-stuff\n\nRefactor the code underlying the close() method in the BaseStatement to allow removal of the Closable interface if we choose to do so."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623445bdde8ed798d2ed69b",
    "number": 2122,
    "body": "Those probably should not have been there in the first place.",
    "head_branch": "redundant-handle",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2122)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2122&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2122&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2122&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2122&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2122&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2122&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2122&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2122&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2122&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2122&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2122&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2122&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2122) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2122&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2122&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2122 from hgschmie/redundant-handle\n\nRemove handle references from the BaseStatement subclasses"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623445cdde8ed798d2ed69c",
    "number": 2121,
    "body": "- #of(CharSequence ...) can never be null, drop the null check\r\n- #of(Collection<CharSequence>) should be of(Iterable<? extends CharSequence>)\r\n\r\nThese changes are backwards incompatible; this is ok as Sql is still marked as @Beta.",
    "head_branch": "sql-improvement",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2121)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2121&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2121&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2121&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2121&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2121&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2121&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2121&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2121&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2121&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2121&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2121&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2121&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2121) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2121&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2121&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2121 from hgschmie/sql-improvement\n\nSome improvements to the Sql wrapper"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623445ddde8ed798d2ed69d",
    "number": 2120,
    "body": "Clarify that the various methods that take strings are not deprecated but it is preferred to use the CharSequence equivalents if possible.\r\n\r\nWe will *never* remove the String methods as rewriting existing code to use the CharSequence methods would imply that every call with a simple String either needs to be cast to CharSequence or wrapped into Sql (which is still in beta). Either option is very questionable.\r\n\r\nRestore the docs makes them useful when popping up in an IDE.",
    "head_branch": "charsequence-docs",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2120)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2120&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2120&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2120&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2120&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2120&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2120&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2120&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2120&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2120&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2120&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2120&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2120&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2120) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2120&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2120&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2120 from hgschmie/charsequence-docs\n\nJavadoc updates"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623445edde8ed798d2ed69e",
    "number": 2118,
    "body": "#2016 seems to be fixed (@The-Funk)",
    "head_branch": "investigate-2016",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2118)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2118&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2118&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2118&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2118&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2118&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2118&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2118&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2118&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2118&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2118&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2118&resolved=false&types=CODE_SMELL) [1 Code Smell](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2118&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2118) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2118&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2118&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2118 from hgschmie/investigate-2016\n\nadd unit test to confirm 2016 is fixed"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623445fdde8ed798d2ed69f",
    "number": 2117,
    "body": "This fixes #2026\r\n\r\n@stevenschlansker @qualidafial, please review. This seems to work but I want more eyeballs.\r\n\r\n@peteruhnak",
    "head_branch": "investigate-2026",
    "is_a_fork": true,
    "comments": [
      "Thanks for the fix! Unfortunately literally today I left the company where I needed this... so I can no longer verify it.",
      "@peteruhnak Thanks for getting back to us. Good luck on your new venture, hope you will take JDBI with you there. :-) ",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2117)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2117&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2117&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2117&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2117&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2117&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2117&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2117&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2117&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2117&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2117&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2117&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2117&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2117) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2117&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2117&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2117 from hgschmie/investigate-2026\n\nEnsure that for non-class arguments, we check for possible supertype matches"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234460dde8ed798d2ed6a0",
    "number": 2116,
    "body": "Extend the SqlArrayType class to provide information for the element type of the backing array. Use a byte[] for bytea arrays, fall back to Object otherwise.\r\n\r\n@pingw33n, could you check whether this works for you? Looking at the code, it now uses the binary data format. \r\n\r\nI did not want to add this to the 3.33.0 release b/c it requires a minor (default method) change to a public API.",
    "head_branch": "bytea-binary-fix",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2116)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2116&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2116&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2116&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2116&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2116&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2116&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2116&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2116&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2116&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2116&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2116&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2116&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2116) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2116&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2116&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2116 from hgschmie/bytea-binary-fix\n\nAlternate fix for Issue 2109"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234461dde8ed798d2ed6a1",
    "number": 2113,
    "body": "Add an explicit array type that creates the postgres internal BYTEA format so that the driver is willing to write arrays. Fixes #2109, workaround for the problem in https://github.com/pgjdbc/pgjdbc/issues/2630\r\n\r\n@pingw33n, if would help me if you can test if this would solve your problem.",
    "head_branch": "postgres-bytea",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2113)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2113&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2113&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2113&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2113&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2113&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2113&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2113&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2113&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2113&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2113&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2113&resolved=false&types=CODE_SMELL) [4 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2113&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2113) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2113&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2113&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2113 from hgschmie/postgres-bytea\n\nSupport Postgres BYTEA as array type"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234462dde8ed798d2ed6a2",
    "number": 2112,
    "body": null,
    "head_branch": "java-19",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2112)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2112&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2112&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2112&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2112&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2112&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2112&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2112&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2112&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2112&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2112&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2112&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2112&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2112) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2112&metric=duplicated_lines_density&view=list) No Duplication information\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2112 from hgschmie/java-19\n\nbuild with java 19"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234463dde8ed798d2ed6a3",
    "number": 2110,
    "body": "Closes #2114 #2110 #2078 #1968",
    "head_branch": "bindbean_multi_type_batch",
    "is_a_fork": true,
    "comments": [
      "@hgschmie @stevenschlansker Seems like CI failed due unrelated reason.",
      "@hgschmie Updated this PR to be a general fix for the issues.\r\n\r\nBenchmarks (done on MacBook M1 Pro, 16G RAM):\r\n\r\nmaster:\r\n```\r\nBenchmark                                  Mode  Cnt   Score   Error  Units\r\nBeanBindingBenchmark.batchJdbc            thrpt    5  12.507 ± 0.707  ops/s\r\nBeanBindingBenchmark.batchJdbiBean        thrpt    5  12.614 ± 0.782  ops/s\r\nBeanBindingBenchmark.batchJdbiMap         thrpt    5   9.499 ± 0.492  ops/s\r\nBeanBindingBenchmark.batchJdbiNamed       thrpt    5   9.478 ± 1.121  ops/s\r\nBeanBindingBenchmark.batchJdbiPositional  thrpt    5   8.074 ± 0.518  ops/s\r\nBeanBindingBenchmark.oneJdbc              thrpt    5  37.886 ± 1.665  ops/s\r\nBeanBindingBenchmark.oneJdbi              thrpt    5  22.739 ± 0.190  ops/s\r\n```\r\n\r\nThis PR:\r\n```\r\nBenchmark                                  Mode  Cnt   Score   Error  Units\r\nBeanBindingBenchmark.batchJdbc            thrpt    5  12.592 ± 0.488  ops/s\r\nBeanBindingBenchmark.batchJdbiBean        thrpt    5   9.311 ± 0.213  ops/s\r\nBeanBindingBenchmark.batchJdbiMap         thrpt    5   7.692 ± 0.246  ops/s\r\nBeanBindingBenchmark.batchJdbiNamed       thrpt    5   8.748 ± 0.348  ops/s\r\nBeanBindingBenchmark.batchJdbiPositional  thrpt    5   9.779 ± 0.671  ops/s\r\nBeanBindingBenchmark.oneJdbc              thrpt    5  42.860 ± 2.479  ops/s\r\nBeanBindingBenchmark.oneJdbi              thrpt    5  21.851 ± 0.390  ops/s\r\n```\r\n\r\nThis PR without support for non-uniform batch entries (just the refactoring):\r\n```\r\nBenchmark                                  Mode  Cnt   Score   Error  Units\r\nBeanBindingBenchmark.batchJdbc            thrpt    5  11.418 ± 0.518  ops/s\r\nBeanBindingBenchmark.batchJdbiBean        thrpt    5  12.099 ± 0.617  ops/s\r\nBeanBindingBenchmark.batchJdbiMap         thrpt    5   9.369 ± 0.422  ops/s\r\nBeanBindingBenchmark.batchJdbiNamed       thrpt    5   9.987 ± 0.871  ops/s\r\nBeanBindingBenchmark.batchJdbiPositional  thrpt    5   8.920 ± 0.442  ops/s\r\nBeanBindingBenchmark.oneJdbc              thrpt    5  37.719 ± 0.382  ops/s\r\nBeanBindingBenchmark.oneJdbi              thrpt    5  22.761 ± 0.361  ops/s\r\n```\r\n\r\nThis PR, Postgres 14.5\r\n```\r\nBenchmark                                  Mode  Cnt  Score   Error  Units\r\nBeanBindingBenchmark.batchJdbc            thrpt    5  1.724 ± 0.378  ops/s\r\nBeanBindingBenchmark.batchJdbiBean        thrpt    5  1.869 ± 0.070  ops/s\r\nBeanBindingBenchmark.batchJdbiMap         thrpt    5  1.754 ± 0.083  ops/s\r\nBeanBindingBenchmark.batchJdbiNamed       thrpt    5  1.859 ± 0.071  ops/s\r\nBeanBindingBenchmark.batchJdbiPositional  thrpt    5   8.400 ± 0.685  ops/s\r\nBeanBindingBenchmark.oneJdbc              thrpt    5  0.160 ± 0.016  ops/s\r\nBeanBindingBenchmark.oneJdbi              thrpt    5  0.143 ± 0.038  ops/s\r\n```\r\n\r\nThis PR, Postgres 14.5, 200000 batch\r\n```\r\nBenchmark                                  Mode  Cnt  Score   Error  Units\r\nBeanBindingBenchmark.batchJdbc            thrpt    5  0.430 ± 0.276  ops/s\r\nBeanBindingBenchmark.batchJdbiBean        thrpt    5  0.436 ± 0.063  ops/s\r\nBeanBindingBenchmark.batchJdbiMap         thrpt    5  0.385 ± 0.049  ops/s\r\nBeanBindingBenchmark.batchJdbiNamed       thrpt    5  0.423 ± 0.038  ops/s\r\nBeanBindingBenchmark.batchJdbiPositional  thrpt    5  0.413 ± 0.042  ops/s\r\nBeanBindingBenchmark.oneJdbc              thrpt    5  0.163 ± 0.007  ops/s\r\nBeanBindingBenchmark.oneJdbi              thrpt    5  0.160 ± 0.004  ops/s\r\n```\r\n\r\nMy comments/thoughts:\r\n- This PR makes `batchJdbiBean` slower 35%, `batchJdbiNamed` slower 8%.\r\n- As seen in the benchmarks against Postgres, in real world setup it's unlikely the bottleneck would be in JDBI. And where it would matter (e.g. in setup with distributed DB) JDBI probably won't fit at all. Also it would be possible to expose configuration option to enable strictly-typed batches.\r\n- It works by computing cache key for each batch entry from arguments in `Bindings`. The caching will still break if different `NamedArgumentFinder` sets are used in different batch entries. Could be improved via `getNames()`.\r\n- Even without the fix I think the refactoring part would be useful improvement to the codebase since it removes code duplication and makes it more readable.\r\n- This PR still needs clean up.",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2110)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2110&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2110&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2110&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2110&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2110&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2110&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2110&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2110&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2110&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2110&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2110&resolved=false&types=CODE_SMELL) [8 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2110&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2110) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2110&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2110&metric=new_duplicated_lines_density&view=list)\n\n",
      "Closing, still tracked in #2390."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234464dde8ed798d2ed6a4",
    "number": 2108,
    "body": null,
    "head_branch": "no-author-tags",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2108)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2108&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2108&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2108&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2108&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2108&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2108&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2108&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2108&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2108&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2108&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2108&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2108&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2108) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2108&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2108&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2108 from hgschmie/no-author-tags\n\nJDBI does not use author tags"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234465dde8ed798d2ed6a5",
    "number": 2107,
    "body": "Work on the column matchers / bean mappers. These changes pass all the unit tests, but it would be good to do a bit more \"real world\" tests, especially in various use cases. There are some inevitable bugs. ",
    "head_branch": "bean-fix",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2107)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2107&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2107&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2107&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2107&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2107&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2107&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2107&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2107&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2107&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2107&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2107&resolved=false&types=CODE_SMELL) [4 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2107&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2107) No Coverage information  \n[![0.1%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.1%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2107&metric=new_duplicated_lines_density&view=list) [0.1% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2107&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2107 from hgschmie/bean-fix\n\nRework the Bean prefix / property matching logic"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234466dde8ed798d2ed6a6",
    "number": 2106,
    "body": null,
    "head_branch": "bom-updates",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2106)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2106&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2106&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2106&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2106&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2106&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2106&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2106&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2106&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2106&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2106&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2106&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2106&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2106) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2106&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2106&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2106 from hgschmie/bom-updates\n\nUse bom for the JDBI build itself"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234467dde8ed798d2ed6a7",
    "number": 2104,
    "body": null,
    "head_branch": "locale-fix",
    "is_a_fork": true,
    "comments": [
      "Should we make the Locale configurable? I remember that we have at least one user who relies on French locale working (we had a regression before).",
      "locale for things like column name lower/uppercasing? This is interesting. Right now, we have a mix of \"Locale.ROOT\" and not using a locale. The only place that I can see where this is deliberate is the CaseStrategy and I am not sure how consistent we are using this.\r\n\r\n",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2104)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2104&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2104&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2104&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2104&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2104&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2104&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2104&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2104&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2104&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2104&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2104&resolved=false&types=CODE_SMELL) [1 Code Smell](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2104&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2104) No Coverage information  \n[![0.7%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.7%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2104&metric=new_duplicated_lines_density&view=list) [0.7% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2104&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2104 from hgschmie/locale-fix"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234468dde8ed798d2ed6a8",
    "number": 2103,
    "body": "As all of the mappers deal with mapping data onto beans (which they use the setters for), they should also prefer the annotations found on the setter over the annotations on the getter.\r\n\r\nThis PR also splits the very unwieldy and confusing BeanMapperTest into three separate tests, one focusing on general bean mapper properties, one for the PropagateNullable tests and one for Nested tests.",
    "head_branch": "fix-annotation-order",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2103)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2103&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2103&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2103&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2103&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2103&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2103&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2103&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2103&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2103&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2103&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2103&resolved=false&types=CODE_SMELL) [3 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2103&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2103) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2103&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2103&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2103 from hgschmie/fix-annotation-order\n\nprefer setter annotations over getter annotations"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234469dde8ed798d2ed6a9",
    "number": 2101,
    "body": null,
    "head_branch": "suppress-internal-kotlin",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2101)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2101&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2101&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2101&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2101&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2101&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2101&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2101&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2101&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2101&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2101&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2101&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2101&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2101) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2101&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2101&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2101 from hgschmie/suppress-internal-kotlin\n\nsuppress internal kotlin packages in the docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623446adde8ed798d2ed6aa",
    "number": 2099,
    "body": null,
    "head_branch": "pg-42.5.0",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2099)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2099&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2099&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2099&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2099&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2099&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2099&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2099&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2099&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2099&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2099&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2099&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2099&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2099) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2099&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2099&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Postgres driver 42.5.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623446bdde8ed798d2ed6ab",
    "number": 2097,
    "body": null,
    "head_branch": "fix-jdk8-excludes",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2097)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2097&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2097&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2097&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2097&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2097&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2097&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2097&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2097&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2097&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2097&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2097&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2097&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2097) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2097&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2097&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2097 from hgschmie/fix-jdk8-excludes\n\nfix jdk8 exclude profiles"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623446cdde8ed798d2ed6ac",
    "number": 2096,
    "body": null,
    "head_branch": "fix-integration-test",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2096)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2096&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2096&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2096&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2096&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2096&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2096&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2096&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2096&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2096&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2096&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2096&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2096&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2096) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2096&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2096&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2096 from hgschmie/fix-integration-test\n\nfix failing integration test"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623446ddde8ed798d2ed6ad",
    "number": 2095,
    "body": null,
    "head_branch": "plugin-updates",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2095)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2095&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2095&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2095&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2095&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2095&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2095&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2095&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2095&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2095&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2095&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2095&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2095&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2095) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2095&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2095&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2095 from hgschmie/plugin-updates\n\nupdate plugin versions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623446edde8ed798d2ed6ae",
    "number": 2094,
    "body": null,
    "head_branch": "missed-pom-reference",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2094)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2094&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2094&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2094&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2094&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2094&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2094&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2094&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2094&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2094&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2094&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2094&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2094&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2094) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2094&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2094&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2094 from hgschmie/missed-pom-reference\n\nfix omitted relative path in sub-projects"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623446fdde8ed798d2ed6af",
    "number": 2093,
    "body": "Also fix a bunch of newly flagged issues.",
    "head_branch": "kotlin-plugin-updates",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2093)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2093&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2093&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2093&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2093&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2093&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2093&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2093&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2093&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2093&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2093&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2093&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2093&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2093) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2093&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2093&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2093 from hgschmie/kotlin-plugin-updates\n\nUpdate ktlint and detekt"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234470dde8ed798d2ed6b0",
    "number": 2092,
    "body": "replace the various spread out shell scripts for github actions, documentation deployment etc. with a central makefile. ",
    "head_branch": "cd-docs",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2092)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2092&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2092&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2092&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2092&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2092&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2092&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2092&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2092&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2092&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2092&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2092&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2092&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2092) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2092&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2092&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2092 from hgschmie/cd-docs\n\nreplace all shell scripts with a makefile"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234471dde8ed798d2ed6b1",
    "number": 2091,
    "body": "apply the \"recommended_2008_06\" sort order policy to the project.",
    "head_branch": "sortpom-update",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2091)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2091&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2091&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2091&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2091&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2091&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2091&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2091&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2091&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2091&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2091&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2091&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2091&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2091) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2091&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2091&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2091 from hgschmie/sortpom-update\n\nupdate sortpom plugin"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234472dde8ed798d2ed6b2",
    "number": 2090,
    "body": null,
    "head_branch": "doc-fix",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2090)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2090&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2090&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2090&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2090&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2090&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2090&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2090&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2090&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2090&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2090&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2090&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2090&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2090) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2090&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2090&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2090 from hgschmie/doc-fix\n\nminor doc fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234473dde8ed798d2ed6b3",
    "number": 2089,
    "body": null,
    "head_branch": "gh-action-updates",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2089)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2089&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2089&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2089&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2089&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2089&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2089&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2089&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2089&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2089&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2089&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2089&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2089&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2089) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2089&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2089&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2089 from hgschmie/gh-action-updates\n\nupdate gh action configs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234474dde8ed798d2ed6b4",
    "number": 2088,
    "body": "- bump to basepom 49\r\n- bump mvnw wrapper version to latest (3.8.6)\r\n- exclude jdbi2 docs on the site from exclusion, remove all jdbi2 pieces\r\n  from the doc build\r\n- remove some old plugin configuration that is covered by basepom 49\r\n- rename jmh version property to match other version properties\r\n- add version property for asciidoctor plugin",
    "head_branch": "build-housekeeping",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2088)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2088&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2088&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2088&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2088&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2088&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2088&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2088&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2088&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2088&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2088&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2088&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2088&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2088) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2088&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2088&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2088 from hgschmie/build-housekeeping\n\nDo some build system house cleaning"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234475dde8ed798d2ed6b5",
    "number": 2081,
    "body": null,
    "head_branch": "security",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2081)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2081&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2081&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2081&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2081&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2081&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2081&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2081&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2081&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2081&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2081&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2081&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2081&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2081) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2081&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2081&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2081 from hgschmie/security\n\nupdate pg driver due to security advisory"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234476dde8ed798d2ed6b6",
    "number": 2080,
    "body": null,
    "head_branch": "basepom-47",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2080)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2080&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2080&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2080&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2080&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2080&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2080&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2080&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2080&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2080&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2080&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2080&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2080&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2080) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2080&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2080&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2080 from hgschmie/basepom-47\n\nbump to basepom 47"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234477dde8ed798d2ed6b7",
    "number": 2079,
    "body": "Hi, \r\nI created a possible fix for https://github.com/jdbi/jdbi/issues/2078 and added more test cases.\r\nFeel free to reach out to me if there is something missing.\r\nBest regards\r\nMarkus Ritter",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2079)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2079&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2079&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2079&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2079&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2079&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2079&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2079&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2079&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2079&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2079&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2079&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2079&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2079) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2079&metric=duplicated_lines_density&view=list) No Duplication information\n\n",
      "just making sure that this is not slipping through the cracks: This is the same issue as #1968 and there are tests in #1991 for this. The problem is unfortunately not trivial to fix because JDBI allows batches to have non-uniform rows which wreaks havoc with cached argument binders. But not caching the argument binders will kill all the performance gains that the caching gives us.\r\n\r\nThis fix, while it address the \"null, then non-null\" use cases for some columns, is not a general fix.",
      "Yes, I think this is currently the most important problem in Jdbi to fix. Unfortunately I haven't seen a solution I love yet.\r\nI have considered whether as a stop-gap we might include a configuration option to select between \"fast and strict\" (no flexibility on argument type) and \"slow but forgiving\" (the classic behavior) so users may select the choice appropriate for their use.\r\n\r\nOf course, finding the general solution would be much preferred. I am on vacation for two weeks though (Hello from Switzerland!) and will consider it more when I return :)",
      "Hi\r\nThanks for your effort. At least the fix I made works for our usecases 😁 Please let me know if I can support you. \r\nBest regards ",
      "Closing, still tracked in #2390."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234478dde8ed798d2ed6b8",
    "number": 2077,
    "body": "Fixes #2040. This needs some discussion as this increases the number of\r\ncalls to the #createForParameter of all ParameterCustomizerFactory\r\nimplementations.\r\n\r\nThis is because warm()'ing the SqlStatementCustomizers will call this in\r\naddition to the regular #apply() calls from the BoundStatementCustomizer\r\nin the CustomizingStatementHandler.",
    "head_branch": "issue-2040",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2077)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2077&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2077&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2077&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2077&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2077&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2077&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2077&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2077&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2077&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2077&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2077&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2077&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2077) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2077&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2077&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2077 from hgschmie/issue-2040\n\nFix warm() calls for SqlStatementCustomizer"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234479dde8ed798d2ed6b9",
    "number": 2076,
    "body": null,
    "head_branch": "kotlin-compatibility",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2076)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2076&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2076&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2076&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2076&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2076&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2076&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2076&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2076&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2076&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2076&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2076&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2076&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2076) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2076&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2076&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2076 from hgschmie/kotlin-compatibility\n\nKotlin compile to 1.5 compatibility"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623447adde8ed798d2ed6ba",
    "number": 2075,
    "body": null,
    "head_branch": "custom-sql-array-example",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2075)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2075&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2075&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2075&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2075&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2075&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2075&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2075&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2075&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2075&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2075&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2075&resolved=false&types=CODE_SMELL) [2 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2075&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2075) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2075&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2075&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2075 from hgschmie/custom-sql-array-example\n\nAdd new example for custom sql array types"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623447cdde8ed798d2ed6bb",
    "number": 2074,
    "body": "Support for Postgres PostGIS extension. Based on code by @bchapuis",
    "head_branch": "postgis-support",
    "is_a_fork": true,
    "comments": [
      "@bchapuis, please review",
      "@hgschmie Thanks a lot for your help and for the changes, the dedicated module looks good! As mentionned in #2072, I'd love to appear in the commit history for this contribution. I can either cherry pick your last commit in my fork, or you can add me as a co-author in your commit. Either way is fine for me, let me know what you prefer.\r\n\r\n```\r\nCo-Authored-By: Bertil Chapuis <bchapuis@gmail.com>\r\n```",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2074)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2074&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2074&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2074&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2074&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2074&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2074&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2074&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2074&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2074&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2074&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2074&resolved=false&types=CODE_SMELL) [1 Code Smell](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2074&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2074) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2074&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2074&metric=new_duplicated_lines_density&view=list)\n\n",
      "I added you as co-author (and you show up in the commit history). We really appreciate the contribution. "
    ],
    "commit_messages": [
      "Merge pull request #2074 from hgschmie/postgis-support\n\nAdd JTS PostGIS data type support"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623447ddde8ed798d2ed6bc",
    "number": 2073,
    "body": null,
    "head_branch": "examples",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2073)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2073&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2073&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2073&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2073&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2073&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2073&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2073&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2073&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2073&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2073&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2073&resolved=false&types=CODE_SMELL) [2 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2073&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2073) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2073&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2073&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2073 from hgschmie/examples\n\nadd new examples module"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623447edde8ed798d2ed6bd",
    "number": 2072,
    "body": "This PR adds support for postgis and map geospatial data types to JTS data types.\r\n\r\nAs this is my first contribution to JDBI, I would love to get feedbacks:\r\n- Does the plugin fits in the postgres module or should I create a new postgis module?\r\n- Should the factory and mapper class be moved at the level of the package?\r\n- How to test postgis without testcontainers as the setup is slighly different from postgres?\r\n- Anything else that raises eyebrows.\r\n\r\nThanks a lot for maintaining JDBI.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Hi @bchapuis  !\r\n\r\nThank you for contributing to JDBI! Your code is generally sound but you did a lot of work that was not necessary. :-) \r\n\r\nI cleaned up the code in #2074 (and also made the test work and pass with our normal test framework). Please review and let me know if that works for your use case.\r\n",
      "@hgschmie Thanks a lot for your feedback, it simplifies things a lot! Do you mind if we merge this PR instead of #2074? I cherry picked your changes, added you as a co-author and force pushed. I'd prefer to appear in the commit history than in the git comment. ;)",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2072)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2072&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2072&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2072&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2072&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2072&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2072&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2072&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2072&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2072&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2072&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2072&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2072&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2072) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2072&metric=duplicated_lines_density&view=list) No Duplication information\n\n",
      "merged as #2074 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623447fdde8ed798d2ed6be",
    "number": 2070,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Fix #2071",
      "Hi @Eng-Fouad, \r\n\r\nThank you for trying out JDBI on GraalVM and submitting patches to the project! We really appreciate it. \r\n\r\nI have to admit that I am a bit conflicted with this PR. I am very excited about GraalVM and having JDBI run on it. On the other hand, lambdas (and in this case method handles) are such a fundamental part of Java since Java 8 that I feel replacing or doing workarounds for the sake of supporting GraalVM is questionable. I wish there were a good timeline for GraalVM when they support this (the stack overflow post seems to imply it) so that we could say to hold off until a version of GraalVM that supports lambdas has been released. \r\n\r\nI feel this warrants more discussion before we apply or reject this PR. Others should chime in here as well.",
      "Thank you @hgschmie for looking into this PR. Regarding GraalVM timeline to support lambda classes, I couldn't find any related tasks in their [project page](https://github.com/oracle/graal/projects/2). I opened a new issue for that: oracle/graal#4753 \r\n\r\n> lambdas (and in this case method handles) are such a fundamental part of Java since Java 8 that I feel replacing or doing workarounds for the sake of supporting GraalVM is questionable\r\n\r\nLambda can be used normally in GraalVM native image. It's just the reflection part where GraalVM does not support it yet. I believe the proposed solution doesn't really change anything in the code other than giving stable name to the class that will be reflectively accessed by Caffeine library.",
      "My bad, I found the related task: oracle/graal#2990",
      "it seems that they keep moving this from milestone to milestone. I agree that having a stable name would solve those problems. \r\n\r\n@stevenschlansker @qualidafial  opinions?",
      "I agree that Graal needs to fully support Java without needing to make changes to all the various ecosystem libraries.\r\nHowever, if this is the only case in Jdbi where it breaks, and accepting this patch allows it to work, I think we could make a compromise here and accept the patch.",
      "Before accepting this PR, let me double check and test it with Quarkus native image. Thanks.",
      "I had to explicitly add the method `loadAll()` to the new class to make it work in native image:\r\n\r\n    final class SqlParserCacheLoader implements CacheLoader<String, ParsedSql> {\r\n        @Override\r\n        public ParsedSql load(String key) {\r\n            return internalParse(key);\r\n        }\r\n\r\n        @Override\r\n        public Map<String, ParsedSql> loadAll(Iterable<? extends String> keys) throws Exception {\r\n            return CacheLoader.super.loadAll(keys);\r\n        }\r\n    }",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2070)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2070&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2070&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2070&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2070&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2070&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2070&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2070&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2070&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2070&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2070&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2070&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2070&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2070) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2070&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2070&metric=new_duplicated_lines_density&view=list)\n\n",
      "It turns out that no modifications are needed in JDBI. The solution is to include the default method `CacheLoader.loadAll` into `reflection-config.json`:\r\n\r\n    {\"name\":\"com.github.benmanes.caffeine.cache.CacheLoader\",\"methods\":[{\"name\":\"loadAll\",\"parameterTypes\":[\"java.lang.Iterable\"]}]}\r\n\r\nSorry for the mistake. I am closing this PR.",
      "I am glad it ends up working for you with no changes! Let us know how your Graal-Native + Jdbi experience is, I think others are excited to use it as well"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234480dde8ed798d2ed6bf",
    "number": 2069,
    "body": "Add `executePreparedBatch` to supersede `executeAndReturnGeneratedKeys`,\r\nwhich allows access to the modified row count after execution. Also add\r\na convenience method to the iterable that allows splitting up the list\r\nof results into per-batch sets.\r\n\r\nAddresses the problems described in #2060\r\n\r\nBased on a proposal by @doppelrittberger (Markus Ritter)",
    "head_branch": "issue-2060",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2069)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2069&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2069&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2069&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2069&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2069&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2069&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2069&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2069&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2069&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2069&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2069&resolved=false&types=CODE_SMELL) [1 Code Smell](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2069&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2069) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2069&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2069&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Batch ops should give access to modified row count (#2069)\n\nAdd `executePreparedBatch` to supersede `executeAndReturnGeneratedKeys`,\r\nwhich allows access to the modified row count after execution. Also add\r\na convenience method to the iterable that allows splitting up the list\r\nof results into per-batch sets.\r\n\r\nAddresses the problems described in #2060\r\n\r\nBased on a proposal by @doppelrittberger (Markus Ritter)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234481dde8ed798d2ed6c0",
    "number": 2068,
    "body": "Check connection status in handle.close()\r\n\r\nEnsure that the handle will tolerate a closed connection when close()\r\nis called. If the database connection gets closed between the last\r\noperation finishing successfully and the handle being closed, checking\r\nthe autocommit status will cause an exception to be thrown that is\r\nuser-visible but not actionable. Check the connection state before\r\nexecuting any operation on the database connection.\r\n\r\nFixes #2065",
    "head_branch": "issue-2065",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2068)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2068&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2068&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2068&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2068&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2068&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2068&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2068&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2068&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2068&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2068&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2068&resolved=false&types=CODE_SMELL) [1 Code Smell](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2068&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2068) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2068&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2068&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Fix issue 2065 (#2068)\n\nCheck connection status in handle.close()\r\n\r\nEnsure that the handle will tolerate a closed connection when close()\r\nis called. If the database connection gets closed between the last\r\noperation finishing successfully and the handle being closed, checking\r\nthe autocommit status will cause an exception to be thrown that is\r\nuser-visible but not actionable. Check the connection state before\r\nexecuting any operation on the database connection.\r\n\r\nFixes #2065"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234482dde8ed798d2ed6c1",
    "number": 2067,
    "body": "Test with custom registered array type for postgres. See #2062",
    "head_branch": "instant-array",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2067)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2067&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2067&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2067&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2067&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2067&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2067&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2067&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2067&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2067&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2067&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2067&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2067&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2067) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2067&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2067&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2067 from hgschmie/instant-array\n\nAdd sample code for using timestamp[] pg data type"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234483dde8ed798d2ed6c2",
    "number": 2064,
    "body": null,
    "head_branch": "kotlin-1.7",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2064)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2064&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2064&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2064&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2064&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2064&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2064&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2064&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2064&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2064&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2064&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2064&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2064&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2064) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2064&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2064&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2064 from hgschmie/kotlin-1.7\n\nuse kotlin 1.7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234484dde8ed798d2ed6c3",
    "number": 2063,
    "body": null,
    "head_branch": "basepom-46",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2063)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2063&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2063&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2063&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2063&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2063&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2063&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2063&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2063&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2063&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2063&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2063&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2063&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2063) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2063&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2063&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2063 from hgschmie/basepom-46\n\nupdate to basepom 46"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234485dde8ed798d2ed6c4",
    "number": 2061,
    "body": "Hi, \r\nI created a MR based on https://github.com/jdbi/jdbi/issues/2060. It solves at least my use case but feel free to let me know if I need to change something.\r\nBest regards\r\nMarkus",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2061)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2061&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2061&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2061&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2061&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2061&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2061&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2061&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2061&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2061&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2061&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2061&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2061&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2061) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2061&metric=duplicated_lines_density&view=list) No Duplication information\n\n",
      "Please check out #2069.",
      "Hi. This looks really impressing and solves my use case as well. Thanks for the effort 👍 ",
      "Addressed by #2069 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234486dde8ed798d2ed6c5",
    "number": 2057,
    "body": "This small pull request adds support for bound parameters of type `CharSequence` in prepared statements.\r\nSuch parameters are to be treated same as `String`.",
    "head_branch": "sman-81-jdbi-bound-parm-charsequence",
    "is_a_fork": true,
    "comments": [
      "good morning @stevenschlansker \r\nI'll look into adding a test case to this PR.",
      "Hi @stevenschlansker,\r\nI found a more versatile solution for `CharSequence` support in parameters and added tests.\r\n`EssentialsArgumentFactory` only works on the explicit type. A (low-priority) factory that handles parameters that implement `CharSequence` and that are not handled by a more specific or user-defined factory is what we would want.\r\nI have squashed and force pushed the update.\r\nPlease take a look - thanks.",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2057)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2057&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2057&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2057&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2057&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2057&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2057&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2057&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2057&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2057&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2057&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2057&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2057&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2057) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2057&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2057&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Prepared statements: Introduce factory to handle parameters that implement CharSequence"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234487dde8ed798d2ed6c6",
    "number": 2056,
    "body": "- Add method `ResultIterable#filter` to apply a filter (predicate) to a result iterable without use of streams.\r\n  Similarities with `ResultIterable#map` extracted into class `ResultIteratorDelegate`\r\n- Add enhanced `ResultIterable#forEachWithCount`, an enhanced forEach method that returns the iteration/record count\r\n- Add unit tests",
    "head_branch": "sman-81-jdbi-resultiterable",
    "is_a_fork": true,
    "comments": [
      "Hi @sman-81 , could you share a bit about what use case you expect for these new features? In particular, we avoid doing `filter` in Java code, since the predicate cannot be lifted up to the database.\r\nAnd, if you want to do more in-Java processing, we would encourage you to `.stream()` the results, and then you get much more powerful / flexible processing \"for free\" without Jdbi modifications.",
      "Hi @stevenschlansker,\r\n\r\nthanks for your feedback!\r\n\r\nWe avoid switching to `Stream` for 'intermediate' operations and stay within the `ResultIterable` type to perform custom, value-added 'terminal' operations such as `forEachWithCount`.\r\nFrequently working with resultsets and Jdbi one will do `forEach` to iterate over the resultset (doing this does not use Stream API).\r\nAlong the same lines, the `map`, `findOne`, `first`, `findFirst` methods, which all have existed for a long time, do not use Stream API. My new `filter` method works along those lines.\r\n\r\n> In particular, we avoid doing filter in Java code, since the predicate cannot be lifted up to the database.\r\n\r\nWhat do you mean?\r\n`filter` could be done in most if not all dbms using WHERE.\r\nSimilarly `map` could be done inside db using built-in functions.\r\n\r\nYet, having both in JDBI serves a very good purpose, as it allows you to keep a db simple and shift more complex processing to Java.\r\n",
      "Hi @stevenschlansker,\r\n\r\nHope this finds you well :)\r\nI am rather excited about the positive impact of this PR.\r\nCould you kindly get back to me on my above comments?\r\n\r\nCheers, Markus",
      "And sorry for the delay @sman-81 , I have been on vacation 🌴 ",
      "Your feedback incorporated and pr updated.",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2056)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2056&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2056&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2056&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2056&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2056&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2056&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2056&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2056&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2056&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2056&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2056&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2056&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2056) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2056&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2056&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge remote-tracking branch 'sman81/sman-81-jdbi-resultiterable'"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234488dde8ed798d2ed6c7",
    "number": 2055,
    "body": null,
    "head_branch": "master-cd",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2055)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2055&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2055&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2055&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2055&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2055&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2055&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2055&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2055&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2055&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2055&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2055&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2055&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2055) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2055&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2055&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2055 from hgschmie/master-cd\n\ndeploy snapshot on every merged PR"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234489dde8ed798d2ed6c8",
    "number": 2054,
    "body": null,
    "head_branch": "docker-notes",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2054)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2054&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2054&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2054&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2054&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2054&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2054&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2054&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2054&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2054&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2054&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2054&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2054&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2054) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2054&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2054&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2054 from hgschmie/docker-notes\n\nadd notes about docker use when building jdbi"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623448adde8ed798d2ed6c9",
    "number": 2053,
    "body": "Reshuffle the build inheritance to allow external modules (well,\r\njdbi3-oracle12) to be built in line with the main build tree.\r\n\r\nAdds a README that explains the layout and how it works.",
    "head_branch": "new-build-layout",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2053)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2053&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2053&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2053&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2053&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2053&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2053&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2053&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2053&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2053&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2053&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2053&resolved=false&types=CODE_SMELL) [3 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2053&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2053) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2053&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2053&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2053 from hgschmie/new-build-layout\n\nAllow external modules to use jdbi build setup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623448bdde8ed798d2ed6ca",
    "number": 2052,
    "body": "The OTJ Postgres Plugin has switched to testcontainers which in turn\r\nrequires a local docker environment to build the code base.\r\n\r\nAdd a check for docker availability for all OTJ related tests.",
    "head_branch": "no-docker",
    "is_a_fork": true,
    "comments": [
      "@stevenschlansker Please review. This should fix #2050 by turning off docker.\r\n\r\nHowever, testcontainers *should* support podman, can you check https://stackoverflow.com/questions/71549856/testcontainers-with-podman-in-java-tests to see whether it is possible for you to activate the docker socket. I looked at the testcontainer code and it should support it. \r\n\r\nPlz comment here.",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2052)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2052&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2052&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2052&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2052&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2052&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2052&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2052&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2052&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2052&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2052&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2052&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2052&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2052) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2052&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2052&metric=new_duplicated_lines_density&view=list)\n\n",
      "I am able to run fine with Podman configured to expose the Docker socket (after fiddling with selinux, of course...)\r\n\r\nMy only concern with adding assumptions is that if the CI configuration breaks, we might end up running releases without ever running these tests since they would silently skip.",
      "abandoned in favor of #2054"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623448cdde8ed798d2ed6cb",
    "number": 2051,
    "body": "This PR fixes issue #2021 (JDBI incorrectly splits statements for Oracle SQL script) by enhancing classes `SqlScriptLexer` and `SqlScriptParser` to correctly deal with `BEGIN…END` blocks in sql scripts.\r\n\r\nIt also adds a JUnit test (`testOracleScriptWithBeginEndBlock`) based on the failing script received from the original bug reporter (amended for better coverage).",
    "head_branch": "sman-81-jdbi#2021-sql-script-parsing",
    "is_a_fork": true,
    "comments": [
      "Hi there, could one of the maintainers kindly take a look at this PR and approve it?",
      "Sorry for the delay @sman-81 , I was on vacation 🚢 \r\nI think the test failure is a false positive. I left some comments for consideration.",
      "> Sorry for the delay @sman-81 , I was on vacation\r\n\r\nThanks for the feedback @stevenschlansker and welcome back from a well-deserved vacation ;)\r\nyou know PR authors can be eager beavers 😂\r\nI have incorporated your recommendations and force-pushed the update.\r\n\r\n",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2051)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2051&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2051&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2051&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2051&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2051&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2051&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2051&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2051&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2051&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2051&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2051&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2051&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2051) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2051&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2051&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "SqlScriptLexer/SqlScriptParser: Enhance to properly deal with BEGIN...END blocks in sql scripts\n\nAdd JUnit test testOracleScriptWithBeginEndBlock\n\nAdd test script received by bug reporter (amended)\n\nClarify JavaDoc\n\nFixes #2021\n\nIncorporate pr feedback by Steven Schlansker"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623448ddde8ed798d2ed6cc",
    "number": 2049,
    "body": "for use with @UseTemplateEngine",
    "head_branch": "no-template-engine",
    "is_a_fork": false,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2049)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2049&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2049&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2049&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2049&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2049&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2049&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2049&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2049&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2049&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2049&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2049&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2049&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2049) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2049&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2049&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "TemplateEngine: move constant NOP to a new class NoTemplateEngine for use with @UseTemplateEngine"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623448edde8ed798d2ed6cd",
    "number": 2048,
    "body": "A tiny fix that removes redundant private member `String sql` from class `Script`.",
    "head_branch": "sman-81-jdbi-remove-sql-member",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2048)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2048&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2048&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2048&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2048&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2048&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2048&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2048&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2048&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2048&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2048&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2048&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2048&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2048) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2048&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2048&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Remove redundant member String sql from Script"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623448fdde8ed798d2ed6ce",
    "number": 2047,
    "body": "This pull request enhances jdbi to allow `CharSequence` rather than `String` when passing sql statements to the library\r\ne.g.\r\n    `public Query(Handle handle, String sql)`\r\nbecomes\r\n    `public Query(Handle handle, CharSequence sql)`\r\n\r\nIt also adds class `org.jdbi.v3.core.Sql` to write easy-to-read inline sql statements while Java multi-line strings (from Java 15) are not yet available.\r\n",
    "head_branch": "sman-81-jdbi-charsequence",
    "is_a_fork": true,
    "comments": [
      "Hi @sman-81 , thanks for suggesting this change. I'm a little worried that changing the method signature might break binary compatibility.\r\n\r\nI see you add a `Sql` convenience class for multi-line inline SQL convenience.\r\nHave you considered using the new Java text blocks feature, which does much the same thing, but in a more general way?\r\n\r\n```java\r\nvar mySql = \"\"\"\r\n    SELECT *\r\n    FROM mytable\r\n    ...\r\n\"\"\";\r\n```",
      "Hi @stevenschlansker,\r\nthanks for your feedback!\r\n\r\n> [...] I'm a little worried that changing the method signature might break binary compatibility.\r\n\r\nAs `String` implements `CharSequence`, it is a (I guess we could call it) 'widening' and fully compatible change to the api. The same was done in Apache commons-lang some time back without further ado.\r\n\r\n> I see you add a `Sql` convenience class for multi-line inline SQL convenience. Have you considered using the new Java text blocks feature, which does much the same thing, but in a more general way?\r\n\r\nabsolutely right, class `Sql` is purely for convenience and to demonstrate the usefulness of `CharSequence`. Java multi-line strings have not been introduced until Java 15+ and won't yet be available to a majority of projects that make use of jdbi and other great libraries.\r\nWe could move the class into a _util_ package, but I was hesitant to create new packages in jdbi.\r\nWhat do you think?\r\ncheers",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2047)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2047&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2047&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2047&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2047&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2047&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2047&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2047&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2047&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2047&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2047&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2047&resolved=false&types=CODE_SMELL) [2 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2047&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2047) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2047&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2047&metric=new_duplicated_lines_density&view=list)\n\n",
      "Good morning @stevenschlansker, just rebased this PR to `master`. Saw you released yesterday, nice ;)",
      "@sman-81 , I still think changing the method parameter types is likely to be a problem. I am surprised that it had no compatibility concerns with Apache Commons 3. I'm no expert on the subject, but per https://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.4.14 I would think changing `render(String)` to `render(CharSequence)` would be treated as deleting the old one and adding the new one, breaking any users of Jdbi until they recompile.\r\n\r\nDo you think I missed something, or maybe Apache Commons did something special? I did a brief search but didn't find anything about their transition.\r\n\r\nI think the most surefire way to preserve compatibility, as ugly as it is, is to retain the existing `String` method signatures and have them delegate to the `CharSequence` methods as appropriate using explicit casts.  Like:\r\n\r\n```java\r\npublic Query select(String sql, ...) {\r\n    return select((CharSequence) sql, ...);\r\n}\r\n```\r\n",
      "I have rebased this pr to master.",
      "> @sman-81 , I still think changing the method parameter types is likely to be a problem. I am surprised that it had no compatibility concerns with Apache Commons 3. I'm no expert on the subject, but per https://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.4.14 I would think changing `render(String)` to `render(CharSequence)` would be treated as deleting the old one and adding the new one, breaking any users of Jdbi until they recompile.\r\n> \r\n> Do you think I missed something, or maybe Apache Commons did something special? I did a brief search but didn't find anything about their transition.\r\n\r\nHi @stevenschlansker\r\nwhile the changes are compile-time compatible, you are correct that the changes indeed **break binary compatibility**.\r\nI just confirmed with a small sample project.\r\nUsers of Jdbi will get `java.lang.NoSuchMethodError` until they rebuild.\r\n\r\nI dug a little into the history of [Apache commons-lang3](https://search.maven.org/artifact/org.apache.commons/commons-lang3). The switch to CharSequence was done very early on and was already part of the initial [3.0](https://search.maven.org/artifact/org.apache.commons/commons-lang3/3.0/jar) released in 2011 (after 'forking' from the original commons-lang:commons-lang).\r\nFound the ticket, too: [LANG-510](https://issues.apache.org/jira/browse/LANG-510) 🙂",
      "I am not in favor of adding delegate methods, as it would be so many of them and clutter the code.\r\nIs the only way forward to apply this PR in a 'bigger' release?\r\nThis being said, will there be a major any time soon? There is only one major of jdbi (3.0.0). The version increments have been all minor (2nd digit) with an occasional patch (3rd digit).",
      "Unfortunately, I don't think we can break binary compatibility here.  Too many people link against Jdbi and String is a common data type. Users will be very confused and frustrated when they get NoSuchMethodErrors that disappear only when you recompile the same source code.\r\n\r\nI am not aware of a better solution than adding delegate methods, but I am totally happy to hear about any ideas you might have!\r\n\r\nJdbi is pretty stable and there is no 4.x release planned at this time. When that does happen, we'd have the opportunity to remove these admittedly ugly delegate methods.",
      "Hi there Steven (@stevenschlansker)\r\n> Unfortunately, I don't think we can break binary compatibility here. [...]\r\n\r\nI agree :(\r\n\r\n> I am not aware of a better solution than adding delegate methods, but I am totally happy to hear about any ideas you might have!\r\n\r\nThe delegates are certainly a solution. We could introduce them and mark them deprecated for removal, then remove them at a later time (a few versions down the road).\r\n\r\n> Jdbi is pretty stable and there is no 4.x release planned at this time. When that does happen, we'd have the opportunity to remove these admittedly ugly delegate methods.\r\n\r\nWell, the major version x (as in x.y.z) is effectively used up by the name of the project and its artifact name. One could argue that the minor version y then becomes the actual major version, and that breaking changes are permitted in minor versions.",
      "✅ rebased to master",
      "Seems our Postgres 9.6 tests are flaky :( Retrying to get a clean run.",
      "I appreciate your point about the artifact name. Regardless of semver rules, I don't think we should break this - so in order for this change to go through, we will need to add the ugly delegate methods, or find another solution to not break compatibility. I am sorry if this isn't your preferred choice but we simply can't break the binary compatibility in this way at this time :)",
      "✅ rebased to master",
      "Hi @stevenschlansker \r\n\r\nintroduction of delegate methods won't work either due to `@FunctionalInterface` such as `TemplateEngine` :(\r\n\r\nI will reduce the PR to use `CharSequence` in those places only where we can reap the most merit.",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2047)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2047&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2047&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2047&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2047&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2047&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2047&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2047&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2047&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2047&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2047&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2047&resolved=false&types=CODE_SMELL) [3 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2047&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2047) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2047&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2047&metric=new_duplicated_lines_density&view=list)\n\n",
      "Hello @stevenschlansker,\r\n\r\nI have just finished condensing this PR to its essential core (few required delegates introduced).\r\n\r\nPlease take a look when you have a spare moment.\r\nHave a good week-end.",
      "Hello @stevenschlansker please take another look when you have a moment. It would be nice to complete this PR."
    ],
    "commit_messages": [
      "CharSequence support for Sql statements (#2047)\n- Allow CharSequence rather than String to pass sql statements to the library.\n- Add class org.jdbi.v3.core.Sql to write easy-to-read inline sql statements."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234490dde8ed798d2ed6cf",
    "number": 2046,
    "body": null,
    "head_branch": "minor-fixes",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2046)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2046&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2046&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2046&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2046&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2046&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2046&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2046&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2046&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2046&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2046&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2046&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2046&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2046) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2046&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2046&metric=new_duplicated_lines_density&view=list)\n\n",
      "This pull request **fixes 1 alert** when merging eb5cdff66cf33e398caec38646fba10e62fe75e5 into e134cc380e7f60ca528b8248b157758fae6b5d6b - [view on LGTM.com](https://lgtm.com/projects/g/jdbi/jdbi/rev/pr-6e9372fd38581e004ac4300bd11515fa770f8526)\n\n**fixed alerts:**\n\n* 1 for Spurious Javadoc @param tags"
    ],
    "commit_messages": [
      "Merge pull request #2046 from hgschmie/minor-fixes\n\nMinor fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234491dde8ed798d2ed6d0",
    "number": 2045,
    "body": "New and exciting vulnerabilities have been found in spring framework\r\nand so we now require \"latest and greatest\" to keep up with these\r\nissues.",
    "head_branch": "spring-again",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2045)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2045&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2045&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2045&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2045&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2045&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2045&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2045&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2045&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2045&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2045&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2045&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2045&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2045) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2045&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2045&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2045 from hgschmie/spring-again\n\nUpdate spring framework to 5.3.20"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234492dde8ed798d2ed6d1",
    "number": 2044,
    "body": null,
    "head_branch": "minor-fixes",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2044)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2044&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2044&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2044&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2044&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2044&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2044&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2044&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2044&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2044&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2044&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2044&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2044&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2044) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2044&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2044&metric=new_duplicated_lines_density&view=list)\n\n",
      "This pull request **introduces 1 alert** when merging f2eb8dc4dccba41ffe546b2afdf0e95e19009488 into ed5f7daeca2588256e66f7003a0ef4029af100dd - [view on LGTM.com](https://lgtm.com/projects/g/jdbi/jdbi/rev/pr-7554053f32febe3e2561d2f18dad532f325840c2)\n\n**new alerts:**\n\n* 1 for Spurious Javadoc @param tags"
    ],
    "commit_messages": [
      "Merge pull request #2044 from hgschmie/minor-fixes\n\nsome minor fixes based on sonarqube"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234493dde8ed798d2ed6d2",
    "number": 2043,
    "body": null,
    "head_branch": "bugfixes",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2043)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2043&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2043&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2043&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2043&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2043&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2043&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2043&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2043&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2043&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2043&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2043&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2043&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2043) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2043&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2043&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2043 from hgschmie/bugfixes\n\nfix bugs flagged by sonarqube"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234494dde8ed798d2ed6d3",
    "number": 2042,
    "body": "Closes #2041",
    "head_branch": "jordanz/add-target-to-sql-locator",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2042)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2042&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2042&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2042&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2042&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2042&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2042&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2042&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2042&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2042&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2042&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2042&resolved=false&types=CODE_SMELL) [1 Code Smell](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2042&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2042) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2042&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2042&metric=new_duplicated_lines_density&view=list)\n\n",
      "hey @hgschmie - it turns out I don't need this after all - sorry for the noise. However, I'm happy to bring it to completion if you think it's useful. Otherwise I'll close.",
      "Hey @Randgalt. Either works for me. Curious: What would you have used the target for?",
      "> Hey @Randgalt. Either works for me. Curious: What would you have used the target for?\r\n\r\nI'm writing a pagination plugin. The queries will have a parameter that specifies the page size and the method return object will collect the page. Something like:\r\n\r\n```\r\n@PaginatedQuery(\"....\")\r\nPaginatedResult listWithPagination(..., Pagination pagination);\r\n```\r\n\r\n`PaginatedResult` is a custom collector via `CollectorFactory`. The problem was that `PaginatedResult` needs to know the values in the `Pagination` parameter and I was having trouble figuring out how to do that. I was thinking that I might be able to use the Target instance to hold these values. But it turns out that I can use JDBI's config mechanism. It's still a bit of a hack but it works. Ideally, customized instances like `CollectorFactory` and `RowMapper`, etc. could access the method parameters/arguments. Maybe there already is a way?",
      "I'm not sure I understand what the value of having access to `target` is. It'll just be a proxy instance, right? You can already inspect any available class metadata via the `Method` parameter.\r\n\r\nSince it sounds like the original use case for this PR doesn't actually need it, I'd prefer to have some concrete idea of what the new `target` parameter would be useful for, before merging this in. Or maybe we can just close it for now until we have a concrete need again.",
      "Ah, having access to the method parameters could make sense. But I don't think having access to the proxy object helps you in that direction.",
      "I was going to stuff the value into the target - but it's no longer needed."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234495dde8ed798d2ed6d4",
    "number": 2039,
    "body": null,
    "head_branch": "test-fixes",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2039)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2039&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2039&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2039&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2039&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2039&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2039&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2039&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2039&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2039&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2039&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2039&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2039&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2039) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2039&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2039&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Test fixes, found by sonarqube (#2039)\n\nTest fixes, found by sonarqube"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234496dde8ed798d2ed6d5",
    "number": 2038,
    "body": null,
    "head_branch": "license",
    "is_a_fork": true,
    "comments": [
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2038)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2038&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2038&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2038&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2038&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2038&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2038&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2038&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2038&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2038&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2038&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2038&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2038&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2038) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2038&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2038&metric=new_duplicated_lines_density&view=list)\n\n"
    ],
    "commit_messages": [
      "Merge pull request #2038 from hgschmie/license\n\nadd missing license headers"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234497dde8ed798d2ed6d6",
    "number": 2037,
    "body": null,
    "head_branch": "package",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2037 from hgschmie/package\n\nreplace package.html"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234498dde8ed798d2ed6d7",
    "number": 2036,
    "body": null,
    "head_branch": "version-updates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2036 from hgschmie/version-updates\n\nsome deps have newer versions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234499dde8ed798d2ed6d8",
    "number": 2035,
    "body": "This fixes the property-helper plugin issues.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2035 from hgschmie/master\n\nbasepom 45"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623449adde8ed798d2ed6d9",
    "number": 2034,
    "body": "Fixes #1906",
    "head_branch": "attr-parse-1906",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2034 from jdbi/attr-parse-1906\n\nDefineStatementLexer: improve backslash escape in quotes handling"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623449bdde8ed798d2ed6da",
    "number": 2033,
    "body": null,
    "head_branch": "spring-5.3.18",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Spring 5.3.18 fixes CVE-2022-22965"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623449cdde8ed798d2ed6db",
    "number": 2032,
    "body": null,
    "head_branch": "gson-2.9.0",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "GSON 2.9.0 fixes CVE-2022-25647"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623449ddde8ed798d2ed6dc",
    "number": 2031,
    "body": null,
    "head_branch": "antlr-4.10.1",
    "is_a_fork": false,
    "comments": [
      "Guava failures look unrelated to this PR. Damn the torpedoes, full speed ahead...",
      "Guava failures look unrelated to this PR. Damn the torpedoes, full speed ahead..."
    ],
    "commit_messages": [
      "ANTLr 4.10.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623449edde8ed798d2ed6dd",
    "number": 2030,
    "body": "This fixes crashes on MacOS Monterey which prevented from\r\nreleasing. Ironically, it still built fine on the CI.\r\n\r\nOT jumped the shark (well, the whale) and switched from a fully embedded\r\nmodel to testcontainer which slows down the tests further.",
    "head_branch": "ojt-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2030 from hgschmie/ojt-fix\n\nUpdate otj-pg-embedded to 1.0.1"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623449fdde8ed798d2ed6de",
    "number": 2029,
    "body": "Removes the warning about SecurityManager deprecation on JDK17.",
    "head_branch": "spotbugs-47",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2029 from hgschmie/spotbugs-47\n\nUpdate to spotbugs 4.7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344a0dde8ed798d2ed6df",
    "number": 2028,
    "body": null,
    "head_branch": "flatten-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2028 from hgschmie/flatten-update\n\nresolve dependencyManagement section of flattened pom"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344a1dde8ed798d2ed6e0",
    "number": 2027,
    "body": "Use a property (similar to jackson) which gets resolved at release time, otherwise the BOM causes problems when imported into other projects.",
    "head_branch": "bom-with-versions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2027 from hgschmie/bom-with-versions\n\nRemove project.version from the BOM"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344a2dde8ed798d2ed6e1",
    "number": 2025,
    "body": null,
    "head_branch": "https",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2025 from hgschmie/https\n\nreplace http with https"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344a3dde8ed798d2ed6e2",
    "number": 2023,
    "body": null,
    "head_branch": "kotlin-changes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2023 from hgschmie/kotlin-changes\n\nKotlin changes"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662344a4dde8ed798d2ed6e3",
    "number": 2022,
    "body": "- basepom 44 to allow full JDK 17 compatibility\r\n- workarounds for MDEP-791/MDEP-804\r\n- kotlin 1.6.21, detekt 1.20.0, ktlint 1.13.1\r\n- remove formatting plugin for detekt, it is now optional (same as ktlint)",
    "head_branch": "basepom-44",
    "is_a_fork": true,
    "comments": [
      "Nice"
    ],
    "commit_messages": [
      "Merge pull request #2022 from hgschmie/basepom-44\n\nBuild updates"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344a5dde8ed798d2ed6e4",
    "number": 2020,
    "body": "This pull request contains a number of Java language migration updates.\r\nAll changes are non-functional. They aim to improve code quality and make use of new Java language features.\r\n\r\n- use Java functional primitives (instead of Guava's)\r\n- use statement lambdas, use method references where possible\r\n- avoid unnecessary boxing\r\n- use Objects.equals\r\n- use diamond operator without explicit type where permitted\r\n- fix raw usage of parametrized classes\r\n\r\nTests are green.",
    "head_branch": "sman-81-jdbi-java-lang-migration",
    "is_a_fork": true,
    "comments": [
      "First, thank you for that PR! Most changes are cosmetic; I appreciate that this makes our code base more idiomatic Java 8+ code. \r\n\r\nI glanced at the test changes; those all seem good. I wrote a couple of comments on the actual code, again all seems fine. I will try to get the LGTM tests to finish (they crashed halfway through, which seems independent of the actual PR) and merge later today.\r\n\r\nDid you hand-make those changes or did you use some tool? I know of people that use the modernizer plugin (https://github.com/gaul/modernizer-maven-plugin) but I had very mixed results with it.",
      "> First, thank you for that PR! Most changes are cosmetic; I appreciate that this makes our code base more idiomatic Java 8+ code.\r\n> \r\n...\r\n> \r\n> Did you hand-make those changes or did you use some tool? I know of people that use the modernizer plugin (https://github.com/gaul/modernizer-maven-plugin) but I had very mixed results with it.\r\n\r\nThank you very much for your feedback!\r\nThough I mostly use Eclipse, I have the habit of checking my projects using the `Code > Inspect Code` feature of IDEA.\r\nThis feature is really well done and offers great pointers and insights, even though some of the refactorings most be applied with caution...\r\nIntelliJ IDEA 2021.2.3 Community Edition is what I have here at the moment, great software free or charge ;)\r\n\r\nThis analysis is in addition to compiler warnings, spotbugs, pmd, checkstyle, all of which you have in place in jdbi.",
      "Hi @hgschmie, @stevenschlansker\r\nall above checks are green and the commit has no conflicts with master.\r\nWould you like me to make any amendments?\r\nor could you merge this PR?",
      "sorry, got distracted. merged.",
      "Changes look OK to me",
      "Thanks for merging."
    ],
    "commit_messages": [
      "Merge pull request #2020 from sman-81/sman-81-jdbi-java-lang-migration\n\nJava language migration updates"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344a6dde8ed798d2ed6e5",
    "number": 2019,
    "body": "The addition of this method will greatly help in troubleshooting and error-handling of queries, updates, prepared batches and other subclasses of `SqlStatement`.",
    "head_branch": "sman-81-jdbi-SqlStatement-toString",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add toString method that outputs sql and bindings"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344a7dde8ed798d2ed6e6",
    "number": 2017,
    "body": "Currently, the FieldMapper requires the default constructor be public in order to instantiate a new instance prior to setting the fields. The FieldMapper already allows private fields to be set via reflection, so it makes sense that it should work with private constructors as well. \r\n\r\nMaking a constructor private provides the benefit of preventing its use outside of reflective mapping.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "I am pretty opposed to that change because it will become difficult in later java versions. java 9 starts to warn, java 17 deprecates the whole AccessibleObject.",
      "So, this stuff is pretty confusing, but my understanding is that the `isAccessible` method is deprecated but that `setAccessible` isn't actually deprecated. What is deprecated is using it _across modules_ to a module that doesn't explicitly open deep reflection to Jdbi.\r\n\r\nSo users that move to modulepath would then find that they cannot see private fields / constructors unless they add `opens` directives - but classpath would continue to work much the same as before.\r\n\r\nI also think that it makes sense to align the behavior - either FieldMapper should work with `private` or it should not. If I were building this class today, I would forbid any private access at all. But it already works with fields, so I think that's a fairly compelling reason to also allow it with constructors.\r\n\r\n@hgschmie Do you have a reference on where the `setAccessible` method is intended to be deprecated? I wasn't able to find one.",
      "My personal opinion: It should be aligned so private fields and private ctors work, or only public in both cases. But FieldMapper should have a config setting to disable access to private APIs at all. It should only ever call setAccessible when it needs to enable access to private stuffs (not only in FieldMapper, also other mappers). \r\nAs of JDBI 3.x the default may be enabled, but later versions it should for sure be disabled. This cuased major pain with security critical application where (now deprecated) SecurityManager is used to prevent access to private APIs also in classpath applications.",
      "Thank you for the suggestion @uschindler . I agree, making it configurable and potentially changing the default later would be a good path. ",
      "I glanced at the docs and it seems only the c'tor is deprecated. The changes to accessibility rules in Java 9+ break private field access for anything anyway (unless you open your module to jdbi). \r\n\r\nI feel we should look to the future and not support private fields and c'tors (it requires runtime setup across modules and will be a source of confusion and error reports. At the very least we need to throw exceptions that clearly state what the problem is (and how to resolve it, which requires handling InaccessibleObjectException) (the current code throws `new IllegalArgumentException(format(\"A type, %s, was mapped which was not instantiable\", type.getName()), e)` which is probably not helpful (\"... I upgraded from Java 8 to Java 11 and now JDBI is broken with that error...\") \r\n\r\nI feel this is a place where we need to rework the access logic for both c'tor and field to differ for Java 8 and Java 9+ (multi-version code). The current change simply calls \"setAccessible\". \r\n\r\nOn a personal note, I am not a big fan of the test. We have similar code where we actually set up a database table and a real result set mapper (e.g. the bean mapper) and then exercise the real code paths and not drive it out of mocks. I would very much prefer this over the \"mock everything somehow\" style. If that is needed to test this specific piece of code, it needs to be refactored to be more test friendly.\r\n\r\n\r\n\r\n\r\n\r\n",
      "@hgschmie The tests in this change are a copy of your existing FieldMapper tests, but with a modification to map to a class with a private constructor. ",
      "> I feel we should look to the future and not support private fields and c'tors\r\n\r\n The Java 9+ docs for [Constructor.setAccessible(boolean)](https://docs.oracle.com/javase/9/docs/api/java/lang/reflect/Constructor.html#setAccessible-boolean-) state that you can call this method on classes in the same module as the calling class.\r\n\r\nIf I am creating my own Java library or application, I can use `setAccessible(true)` on any class in my own module. Creating immutable classes with `private` fields and a `private` constructor is often desirable for various reasons. Giving Jdbi users the ability to create instances of these immutable classes is useful. \r\n\r\nDisabling mapping for private fields would be a breaking change, and would also make it difficult to create immutable objects with Jdbi. \r\n\r\nThe concern that this would cause issues for users trying to use FieldMapper to map to classes with private fields or constructors outside their own module is legitimate, but how frequently would this actually occur? I don't recall a time I've ever used reflective mapping on classes outside the codebase I'm working on.\r\n\r\nFieldMapper could be opened for extension, which would allow user's to create a custom FieldMapper and set accessibility as they wish, which would avoid the need to open their modules to Jdbi.",
      "The problem is if JDBI is a module in your app. JDBI as caller can't make a class in your module accessible.",
      "> The problem is if JDBI is a module in your app. JDBI as caller can't make a class in your module accessible.\r\n\r\nYes, I forgot to add the important part that FieldMapper could be opened for extension. I edited my above comment and added that just before your comment. This allows users to create a FieldMapper in their own module that sets accessibility as desired. \r\n\r\nAlternatively, you could provide some interface for users to provide a callback which can set accessibility. This also avoids opening the module to Jdbi.",
      "We'd already talked about making it configurable. Instead of calling `setAccessible`, we could provide an extension point, possibly a `Consumer<AccessibleObject>`. The default could continue to call `setAccessible` as today, with an eye toward changing that default in the future. Other options would include doing nothing (the future default) or providing your own class that calls `setAccessible` from within your own module, instead of from the scope of Jdbi.\r\n\r\nAh, this is in fact pretty similar to what you just suggested. So I suppose this is simply agreeing with your comment :)",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=jdbi_jdbi&pullRequest=2017)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2017&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2017&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2017&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2017&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2017&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2017&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2017&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2017&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=jdbi_jdbi&pullRequest=2017&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2017&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2017&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=jdbi_jdbi&pullRequest=2017&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2017) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=jdbi_jdbi&pullRequest=2017&metric=duplicated_lines_density&view=list) No Duplication information\n\n",
      "@paladin235 , I have rebased your PR and updated it to have a configurable strategy. See #2193 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344a8dde8ed798d2ed6e7",
    "number": 2015,
    "body": "Because the backtick is inside a word, the rendered output was not correct (see http://jdbi.org/#_immutables).",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix markup\n\nBecause the backtick is inside a word, the rendered output was not correct (see http://jdbi.org/#_immutables)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344a9dde8ed798d2ed6e8",
    "number": 2010,
    "body": "found when building site documentation",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2010 from hgschmie/master\n\nadd antlr for javadoc generation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344aadde8ed798d2ed6e9",
    "number": 2009,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Hi. Thank you for this PR and making our documentation more welcoming. "
    ],
    "commit_messages": [
      "Merge pull request #2009 from maffe/patch-1\n\nRemove swearing"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344abdde8ed798d2ed6ea",
    "number": 2008,
    "body": "Run all core tests using the inlined jar.",
    "head_branch": "inline-integration-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2008 from hgschmie/inline-integration-test\n\nAdd integration tests for inlined jar"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344acdde8ed798d2ed6eb",
    "number": 2007,
    "body": null,
    "head_branch": "pg-version",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2007 from hgschmie/pg-version\n\nupdate pg-embedded version"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344addde8ed798d2ed6ec",
    "number": 2006,
    "body": "Inline the dependency into the core jar. This removes the long\r\nstanding problem that jdbi creates version conflicts when used in\r\nprojects that also use antlr4 and that use a different runtime\r\nversion. Unfortunately antlr insists on a strong relationship between\r\nthe generated classes for the grammar and the runtime.\r\n\r\nInlining this dependency makes allows JDBI users to choose their antlr\r\nversion arbitrarily as JDBI will use its private version.",
    "head_branch": "inline-antlr",
    "is_a_fork": true,
    "comments": [
      "Fixes #1798 "
    ],
    "commit_messages": [
      "Merge pull request #2006 from hgschmie/inline-antlr\n\nRemove antlr4-runtime dependency"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344afdde8ed798d2ed6ed",
    "number": 2005,
    "body": null,
    "head_branch": "basepom-43",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2005 from hgschmie/basepom-43\n\nupdate to basepom 43"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344b0dde8ed798d2ed6ee",
    "number": 2004,
    "body": null,
    "head_branch": "lgtm-null-suppression",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2004 from hgschmie/lgtm-null-suppression\n\ntest lgtm suppression"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344b1dde8ed798d2ed6ef",
    "number": 2003,
    "body": null,
    "head_branch": "dependabot-updates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2003 from hgschmie/dependabot-updates\n\nfix some dependabot flagged issues"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344b2dde8ed798d2ed6f0",
    "number": 2002,
    "body": null,
    "head_branch": "lgtm",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2002 from hgschmie/lgtm\n\nadd lgtm config file"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344b3dde8ed798d2ed6f1",
    "number": 2000,
    "body": "The NPE issue (https://github.com/jdbi/jdbi/issues/1961) during logging has already come up but the fix (https://github.com/jdbi/jdbi/commit/00172225de8f2feb165c5832d382620391d0217e) only addressed the NPE for `logException` and not for `logAfterExecution`.\r\n\r\nI extracted getting the SQL string from the `StatementContext` into a helper method. I opted for not using an Optional and rather use a conditional.\r\n\r\nThere were no tests for `Slf4JSqlLogger` so I added some that reproduced the issue. I opted to not write a comprehensive test suite to keep the pull request more focused.",
    "head_branch": "fix-slf4jsqllogger",
    "is_a_fork": true,
    "comments": [
      "I fixed the unused import error. What else do you need to get this merged? ",
      "Thanks @tmichel , released as 3.27.2"
    ],
    "commit_messages": [
      "Fix NPE for Slf4JSqlLogger#logAfterExecution\n\nStatementContext for Batch does not have ParsedSql. Both\nlogAfterExecution and logException checks whether\nStatementContext#getParsedSql returns null or not to avoid an NPE."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344b4dde8ed798d2ed6f2",
    "number": 1997,
    "body": "This is a highly experimental build that inlines the antlr4-runtime into the jdbi3-core plugin. \r\n\r\nThe build passes all the tests but might need a bit more baking before we could mainline this. If you want to try it out, check out this branch, build locally and then build your service / application etc. using the -SNAPSHOT jars. Please report any errors etc. here. \r\n\r\nSee https://github.com/basepom/inline-maven-plugin for more information about the inline plugin.",
    "head_branch": "inliner",
    "is_a_fork": true,
    "comments": [
      "Looks reasonable enough. I'll try to run some tests on this when I get a chance.",
      "superseded by #2006 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344b5dde8ed798d2ed6f3",
    "number": 1994,
    "body": null,
    "head_branch": "otj-pg-rc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344b6dde8ed798d2ed6f4",
    "number": 1993,
    "body": "Fixes #1967 . When SQLBatchHandler is used in conjuction with SerializableTransactionRunner (retry on failure), subsequent retry has the binding for PreparedBatch cleared. Therefore, make a copy of the binding arguments before executing and this ensures the binding's are not cleared.\r\n\r\n",
    "head_branch": "retry-handler-fix",
    "is_a_fork": true,
    "comments": [
      "Thank you so much for contributing this @sudharsannr ! I've enabled checks and left a couple of minor comments to fix. We should be able to integrate and release this shortly after all checks and comments pass."
    ],
    "commit_messages": [
      "Rename sharedArgs to argsArray as it's initialized everytime"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344b7dde8ed798d2ed6f5",
    "number": 1991,
    "body": "all of these tests should pass. But they don't. They fail with exotic errors such as\r\n\r\n```\r\norg.jdbi.v3.core.statement.UnableToCreateStatementException: No argument factory registered for 'User:2' of qualified type org.jdbi.v3.core.argument.ObjectArgument [statement:\"INSERT INTO something (id, name) VALUES(:id, :name)\", arguments:{positional:{}, named:{name:User:2,id:2}, finder:[]}]\r\n        at org.jdbi.v3.core.statement.TestBatchProblems.testNonUniformBatchInsertsWithArguments(TestBatchProblems.java:136)\r\n```\r\n\r\n```\r\njava.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Integer (java.lang.String and java.lang.Integer are in module java.base of loader 'bootstrap')\r\n        at org.jdbi.v3.core.statement.TestBatchProblems.testNonUniformBatchInserts(TestBatchProblems.java:113)```",
    "head_branch": "batch-stuff",
    "is_a_fork": true,
    "comments": [
      "Closing, still tracked in #2390."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344b8dde8ed798d2ed6f6",
    "number": 1990,
    "body": "Fixes #1987",
    "head_branch": "fix-1987",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove bad argument optimization for prepared batches\n\nThis fixes #1987."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344b9dde8ed798d2ed6f7",
    "number": 1989,
    "body": null,
    "head_branch": "arg-binding-test-1987",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344badde8ed798d2ed6f8",
    "number": 1988,
    "body": "Fixes #1987\r\nReverts #1983",
    "head_branch": "arg-binding-fail-1987",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344bbdde8ed798d2ed6f9",
    "number": 1986,
    "body": null,
    "head_branch": "txn-callback-nested",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Transaction callbacks: move from Handles to Handle, so nested transactions work correctly"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662344bcdde8ed798d2ed6fa",
    "number": 1985,
    "body": "All the error fixes found by the lift.sonatype.org detectors.",
    "head_branch": "lift-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1985 from hgschmie/lift-fixes\n\nVarious fixes found by the checkers on lift.sonatype.org"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662344bddde8ed798d2ed6fb",
    "number": 1984,
    "body": "Get rid of the blank \"hasNext()\" call, clarify the logic and factor\r\nout the anonymous inner class into a method local inner class (yes,\r\nsuch a thing exists).",
    "head_branch": "sql-batch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1984 from hgschmie/sql-batch\n\nRework the SqlBatchHandler"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344bedde8ed798d2ed6fc",
    "number": 1983,
    "body": null,
    "head_branch": "argumentbinder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1983 from hgschmie/argumentbinder\n\nDo some optimization work around the argument binder code"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662344bfdde8ed798d2ed6fd",
    "number": 1982,
    "body": "There is a minor correctness issue if a caller would register an\r\ninstance configurer that does not return itself but e.g. a modified\r\ncopy of the registry. This was actually found by error prone.",
    "head_branch": "instance-configurer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1982 from hgschmie/instance-configurer\n\nUse instance configured ConfigRegistry correctly"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344c0dde8ed798d2ed6fe",
    "number": 1981,
    "body": null,
    "head_branch": "lift-tweaking",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344c1dde8ed798d2ed6ff",
    "number": 1980,
    "body": null,
    "head_branch": "dev-builds-with-11",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1980 from hgschmie/dev-builds-with-11\n\nAllow dev build with 11 again, enforce 17 for releases"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344c2dde8ed798d2ed700",
    "number": 1978,
    "body": null,
    "head_branch": "update-1977",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Change annotation target for kotlin annotations\n\nUse `CLASS` instead of `TYPE`, thus allowing these annotations to be present\r\non interfaces as well.\r\n\r\nFix issue #1971\r\n\r\nCo-authored-by: Uziel Sulkies <uziel@next-insurance.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662344c3dde8ed798d2ed701",
    "number": 1977,
    "body": "This change is aimed to fix the issue https://github.com/jdbi/jdbi/issues/1971\r\n\r\n`AnnotationTarget.CLASS` includes interfaces, while `AnnotationTarget.TYPE` does not.\r\n\r\nAdded a test that would fail if the RegisterKotlinMappers for Dao interfaces will break.",
    "head_branch": "fix_register_kotlin_mappers",
    "is_a_fork": true,
    "comments": [
      "Thank you for the PR! ",
      "Merged as #1978 (also fix the other annotation)"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344c4dde8ed798d2ed702",
    "number": 1975,
    "body": null,
    "head_branch": "version-workflows",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add version checks for jdbi dependencies  (#1975)\n\n- test antlr runtimes to ensure that jdbi works with different antlr versions\r\n- test guava versions from the current supported one forward\r\n- test immutables versions from the current supported one forward\r\n- test jackson2 versions from the current supported one forward\r\n- test joda-time versions from the current supported one forward\r\n- test vavr versions from the current supported one forward"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344c5dde8ed798d2ed703",
    "number": 1974,
    "body": null,
    "head_branch": "lift",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1974 from hgschmie/lift\n\nmake lift use jdk11"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344c6dde8ed798d2ed704",
    "number": 1973,
    "body": null,
    "head_branch": "kotlin-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1973 from hgschmie/kotlin-update\n\nUpdate to released kotlin 1.6"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344c7dde8ed798d2ed705",
    "number": 1972,
    "body": null,
    "head_branch": "dep-updates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update dependency versions (#1972)\n\nUpdates build and test tooling versions\r\nSome minor refactoring."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344c8dde8ed798d2ed706",
    "number": 1970,
    "body": "h2 1.x has some security problems, replace it otherwise we will get tons\r\nof \"security warnings\"",
    "head_branch": "h2-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1970 from hgschmie/h2-update"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344c9dde8ed798d2ed707",
    "number": 1969,
    "body": "Run integration tests with pg 9.6 - 14",
    "head_branch": "pg-embed-4.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1969 from hgschmie/pg-embed-4.1\n\nUpdate to pg-embedded 4.1"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344cadde8ed798d2ed708",
    "number": 1966,
    "body": null,
    "head_branch": "use-txn-exn-test",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add a useTransaction test case #1960"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344cbdde8ed798d2ed709",
    "number": 1965,
    "body": "Fixes #1961",
    "head_branch": "log-null-parsed-sql",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Slf4JSqlLogger: avoid NPE when used with Script\n\nFixes #1961"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344ccdde8ed798d2ed70a",
    "number": 1964,
    "body": null,
    "head_branch": "transaction-callbacks",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Handle: add new onCommit and onRollback transactional callbacks"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662344cddde8ed798d2ed70b",
    "number": 1962,
    "body": "Use latest released code for pg-embedded",
    "head_branch": "pg-embedded-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1962 from hgschmie/pg-embedded-4\n\nUpdate to pg-embedded 4.0"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344cedde8ed798d2ed70c",
    "number": 1959,
    "body": "until we actually see rows \r\nfixes #1955",
    "head_branch": "constructormapper-empty-generated-keys",
    "is_a_fork": false,
    "comments": [
      "@hgschmie , the jdk8 tests are failing:\r\n```\r\n[INFO] Running org.jdbi.v3.core.mapper.reflect.ConstructorMapperPgTest\r\nError:  Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0 s <<< FAILURE! - in org.jdbi.v3.core.mapper.reflect.ConstructorMapperPgTest\r\nError:  org.jdbi.v3.core.mapper.reflect.ConstructorMapperPgTest  Time elapsed: 0 s  <<< ERROR!\r\njava.lang.UnsupportedClassVersionError: de/softwareforge/testing/postgres/junit5/EmbeddedPgExtension has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0\r\n```\r\n\r\nAny ideas?\r\n",
      "yes, you need an exclusion to the pom in the jdk8 profile\r\n"
    ],
    "commit_messages": [
      "ConstructorMapper: defer throwing exception about missing columns until we actually see rows (#1955)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344cfdde8ed798d2ed70d",
    "number": 1958,
    "body": "Fixes #1956",
    "head_branch": "batch-result-doc",
    "is_a_fork": false,
    "comments": [
      "maybe add a link to https://docs.oracle.com/en/java/javase/17/docs/api/java.sql/java/sql/Statement.html#executeBatch() and highlight that each return value matches what is written there (>0 means rows but there are some special values).",
      "Yeah, I have a link to that Statement as an `@see` which should be automatically xref'ed in Javadoc or IDE."
    ],
    "commit_messages": [
      "Batch: clarify execute() int[] result might be weird values like -2\n\nFixes #1956"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662344d0dde8ed798d2ed70e",
    "number": 1957,
    "body": "This allows you to actually bind a @Json String which users intuitively expect to be able to do.\r\nFixes #1953",
    "head_branch": "encoded-json",
    "is_a_fork": false,
    "comments": [
      "the \"changed 35 files\" scared me quite a bit until I realized that it includes all the pom 3.24.1 -> 3.25.0 changes. It would be good to do that separately.",
      "stevenschlansker commented:\nSure, I can cherry-pick that in to master",
      "stevenschlansker commented:\nI made the update since it changes api",
      "stevenschlansker commented:\nRebased."
    ],
    "commit_messages": [
      "Json: rework inner @Json String binding to be @EncodedJson String\n\nThis allows you to actually bind a @Json String\nFixes #1953"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662344d1dde8ed798d2ed70f",
    "number": 1954,
    "body": null,
    "head_branch": "doc-1874",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "docs #1874"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344d2dde8ed798d2ed710",
    "number": 1952,
    "body": "- code highlighter is an attribute for asciidoctor (https://docs.asciidoctor.org/asciidoc/latest/attributes/document-attributes-ref/#source-highlighting-and-formatting-attributes)\r\n- scm-publish checkout directory attribute (http://maven.apache.org/plugins/maven-scm-publish-plugin/publish-scm-mojo.html#checkoutDirectory)",
    "head_branch": "doc-pom",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1952 from hgschmie/doc-pom\n\nfix doc pom problems"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344d3dde8ed798d2ed711",
    "number": 1950,
    "body": null,
    "head_branch": "forkme",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1950 from hgschmie/forkme\n\nadd a 'fork me on github' banner to the docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344d4dde8ed798d2ed712",
    "number": 1949,
    "body": "* Run ktlint and detekt checkers on the kotlin classes\r\n* add custom detekt configuration\r\n* reformat all Kotlin code to match ktlint and detekt rules\r\n",
    "head_branch": "kotlin-rennovate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1949 from hgschmie/kotlin-rennovate\n\n* Run ktlint and detekt checkers on the kotlin classes\r\n* add custom detekt configuration\r\n* reformat all Kotlin code to match ktlint and detekt rules"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662344d5dde8ed798d2ed713",
    "number": 1948,
    "body": null,
    "head_branch": "checkstyle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1948 from hgschmie/checkstyle\n\nremove workaround for checkstyle, fixed upstream"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344d6dde8ed798d2ed714",
    "number": 1947,
    "body": null,
    "head_branch": "basepom-42",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1947 from hgschmie/basepom-42\n\nupdate to basepom 42"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344d7dde8ed798d2ed715",
    "number": 1945,
    "body": "This fixes the problems described in #1944 by changing the inference for mappers without a type information. By default, this uses inference to  find a generic type parameter and use that. This does not work for the Kotlin mappers as they all implement `RowMapper<Object>`. The fix registers an interceptor that uses information in the KotlinMapper to register them correctly. ",
    "head_branch": "investigate-1944",
    "is_a_fork": true,
    "comments": [
      "I am not entirely clear why we need this new interceptor chain concept. I had thought this could be implemented as a classic RowMapperFactory et al - they take a Type and are given an opportunity to make a Mapper, which looks very close to the signature of the new interceptor chain concept.",
      "The challenge is that in the current `RowMappers` etc. there is this method hardcoded: (https://github.com/jdbi/jdbi/blob/master/core/src/main/java/org/jdbi/v3/core/mapper/RowMappers.java#L63-L65)\r\n\r\n```java\r\npublic RowMappers register(RowMapper<?> mapper) {\r\n        return this.register(new InferredRowMapperFactory(mapper));\r\n    }\r\n```\r\n\r\nso any caller of `registerRowMappers(RowMapper<?> mapper)` end up here. What the code does is some dark-grey magic to infer the type of the type parameter in `... implements RowMapper<Stuff>` to be `Stuff`.\r\n\r\nNow, for the Kotlin code, every time someone registers `KotlinMapper(KotlinType::class.java)`, they assume that this magic works and yields `KotlinType`. It does not. KotlinMapper implements `RowMapper<Object>`, so the InferredRowMapperFactory always finds `Object` for the inferred type. So it never matches when the actual type is requested and the mapper is never used. That is the core of the problem.\r\n\r\nFor Kotlin (or any other special case where the mappers implement another type but the one they are supposed to be used for) to work, this mapping from type -> `InferredRowMapperFactory` needs to be ... well ... intercepted and handled by a different factory. Hence the interceptor code. The `KotlinPlugin` now registers a new RowMapperFactory (that determines whether it should return KotlinMapper in a different way) and every call to `registerRowMapper(KotlinMapper)` now ends up on that new factory. So existing code works unchanged and the bug is fixed. \r\n\r\nWe could make the mapper for inference pluggable, but I would bet dollars for donuts that the next bug report will be \"module \"a\" that registers an inference mapper and module \"b\" that register an inference mapper do not work nicely together. So I just changed the thing wholesale. :-) ",
      "Another choice would be to instead encourage users to register a `KotlinMapperFactory` with a list of types, which then returns a `KotlinMapper`. This would change the public api slightly, but would remove the need to add a new nontrivial feature to the mapper logic, which is already ridiculously hard to follow...\r\n\r\nIf you think being compatible with old code is worth introducing this complexity, I have no objection, just wanted to push back a bit on making a new interface that works almost exactly the same as the old interface but a bit different.",
      "I hate breaking backwards compatibility. If we don't support this, we force kotlin users to use Jdbi different than java users. Whether the interceptor framework (three small classes) is overkill, I can not really judge but I feel that being able to open up that hard dependency (hardcoded class in the RowMappers etc. classes) is important. The alternative (IMHO) would be to deprecate the \"register and detect the type by magic\" method calls. "
    ],
    "commit_messages": [
      "Merge pull request #1945 from hgschmie/investigate-1944\n\nFix for #1944"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662344d8dde8ed798d2ed716",
    "number": 1943,
    "body": "Quiet suppresses failure messages too",
    "head_branch": "less-quiet",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make Maven CI less quiet\n\nQuiet suppresses failure messages too"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344d9dde8ed798d2ed717",
    "number": 1942,
    "body": null,
    "head_branch": "scs-test",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344dadde8ed798d2ed718",
    "number": 1941,
    "body": "test, ignore",
    "head_branch": "bind-batch-null",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344dbdde8ed798d2ed719",
    "number": 1940,
    "body": "Fixes #1901",
    "head_branch": "bind-batch-null",
    "is_a_fork": false,
    "comments": [
      "Yeah, the `instanceof` check is weird. I am not sure what else to do though, there are two \"nulls\" to handle: Java `null` and a SQL typed null `NullArgument` and the latter is public API, so we have to handle it when converting mixed primitives and boxed nulls.\r\n\r\nThere's already tests covering this the `IllegalArgumentException` thrown, this change isn't introducing it, so I don't think additional tests are needed there. I can add a test for the single bind case."
    ],
    "commit_messages": [
      "Primitives argument factory: also check for NullArgument\n\nFixes #1901"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344dcdde8ed798d2ed71a",
    "number": 1939,
    "body": "Fixes #1914",
    "head_branch": "generic-bean-property-type",
    "is_a_fork": false,
    "comments": [
      "The failing test seems to be a bug in GeAnTyRef: https://github.com/leangen/geantyref/issues/12",
      "@stevenschlansker Fixed the GeantyRef bug in v1.3.12, so I hope that unblocks you here.\r\nBtw, there's a few currently private methods for expanding `Class`es into `ParameterizedType`s. If you'd find use in any of it being made public, just ping me. Cheers."
    ],
    "commit_messages": [
      "Resolve generic types on bean property arguments when the bean itself is generic\n\nFixes #1914"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344dedde8ed798d2ed71b",
    "number": 1938,
    "body": "> cvc-complex-type.3.2.2: Attribute 'combine.children' is not allowed to appear in element 'configuration'.",
    "head_branch": "remove-invalid-attr",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix xml validation error\n\ncvc-complex-type.3.2.2: Attribute 'combine.children' is not allowed to appear in element 'configuration'."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344dfdde8ed798d2ed71c",
    "number": 1937,
    "body": null,
    "head_branch": "m2e-build-dir",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "m2e: set separate output dir so Maven and Eclipse don't fight"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344e0dde8ed798d2ed71d",
    "number": 1936,
    "body": "\r\nFixes #1915",
    "head_branch": "disable-preparable",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add Arguments.setPreparedArgumentsEnabled to disable new prepared arguments feature\n\nFixes #1915"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662344e1dde8ed798d2ed71e",
    "number": 1934,
    "body": "Migrate sqlobject and guava to junit5.",
    "head_branch": "junit5-sqlobject",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1934 from hgschmie/junit5-sqlobject\n\nMerge the JUnit 5 changes, switching all tests to JUnit 5"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662344e2dde8ed798d2ed71f",
    "number": 1932,
    "body": "- run all kotlin tests with junit5\r\n- fix raw generics for new test extensions\r\n- update doc tests",
    "head_branch": "kotlin-junit5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1932 from hgschmie/kotlin-junit5\n\nMore Junit 5 migration"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344e3dde8ed798d2ed720",
    "number": 1930,
    "body": "Fixes jdbi/jdbi#1878",
    "head_branch": "fix_deprecated_annotations",
    "is_a_fork": true,
    "comments": [
      "Hi,\r\n\r\nThank you for contributing this PR! ",
      "Can you add `hacktoberfest-accepted` label before merging, please?"
    ],
    "commit_messages": [
      "Fix deprecated annotations (#1930)\n\nFix deprecated annotations for Kotlin"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662344e4dde8ed798d2ed721",
    "number": 1929,
    "body": "First of all, thanks for the library.\r\n\r\nThe idea of this PR comes from analyzing an internal system with JFR/JMC. I can see that the `Pattern` object that results from `removeUnderscores` seems to be created frequently. Below is a 5 minute sample of the system:\r\n![image](https://user-images.githubusercontent.com/2695819/137394971-e5cf924d-2b10-4e94-926e-f2cadcc43967.png)\r\n\r\n\r\nThis should reduce the `Pattern` object creation, reducing the overall impact in GC.",
    "head_branch": "snake-case-rx",
    "is_a_fork": true,
    "comments": [
      "I'm seeing controversial results on a preliminary benchmark. Don't want to risk introducing a performance regression. ",
      "jmh actually proved me wrong. Interesting.\r\n[Results in this gist](https://gist.github.com/hkupty/d2d7de79b31e5f29e35cd28fa64c83a7)",
      "I think this is because `String.replace(String, String)` is actually doing literal char replacement, not Pattern replacement. When I look at the source code for JDK17 I don't see a Pattern call at all. What JDK do you use to test? Maybe upgrading your JDK would fix this performance issue better.",
      "That makes sense... The service is running in jdk8 in prod, while the JMH test was run using the latest jdk (found out now that you pointed out that the local jdk version is newer)."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344e5dde8ed798d2ed722",
    "number": 1928,
    "body": null,
    "head_branch": "remove-16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1928 from hgschmie/remove-16\n\nremove non-LTS JDKs, use temurin instead of adopt"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344e6dde8ed798d2ed723",
    "number": 1927,
    "body": "some minor tweaks to pass current PMD and spotbugs tests",
    "head_branch": "basepom-41",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1927 from hgschmie/basepom-41\n\nUpdate to basepom-41"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344e7dde8ed798d2ed724",
    "number": 1926,
    "body": "Also lays the groundwork (replacing rules with extensions) to upgrade\r\nall other parts quickly.",
    "head_branch": "junit5-core-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Rewrite core tests to use junit5 (#1926)\n\n* Rewrite core tests to use junit5\r\n\r\nAlso lays the groundwork (replacing rules with extensions) to upgrade\r\nall other parts quickly."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662344e8dde8ed798d2ed725",
    "number": 1925,
    "body": null,
    "head_branch": "fix-illegal-access",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1925 from hgschmie/fix-illegal-access\n\nremove all illegal access modifiers, allows build with Java 17"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344e9dde8ed798d2ed726",
    "number": 1924,
    "body": "After having run out of credits once too much, replace all the travis\r\nscripts with Github actions (one for CI, one for docs and one for\r\nstyle checking)",
    "head_branch": "gh-actions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Replace travis CI with Github actions\n\nAfter having run out of credits once too much, replace all the travis\nscripts with Github actions (one for CI, one for docs and one for\nstyle checking)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344eadde8ed798d2ed727",
    "number": 1922,
    "body": null,
    "head_branch": "fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix unused imports in TestInheritedAnnotations"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344ebdde8ed798d2ed728",
    "number": 1921,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "update release notes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344ecdde8ed798d2ed729",
    "number": 1920,
    "body": null,
    "head_branch": "annotations",
    "is_a_fork": true,
    "comments": [
      "Hi @electrum! Thank you for the PR!"
    ],
    "commit_messages": [
      "Fix annotation inheritance for non-direct supertypes"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344eddde8ed798d2ed72a",
    "number": 1919,
    "body": null,
    "head_branch": "doc-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1919 from hgschmie/doc-update\n\nupdate guice docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344eedde8ed798d2ed72b",
    "number": 1918,
    "body": null,
    "head_branch": "guice-tweaks-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "move constants around to reduce number of imports"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344efdde8ed798d2ed72c",
    "number": 1916,
    "body": "Fixes #1878 ",
    "head_branch": "1878",
    "is_a_fork": true,
    "comments": [
      "Hi @Swastyy! Thank you for sending a PR! However, it seems that the CI flagged this as an error. Have you tried compiling locally? If yes, can you let me know whether it passes or not.\r\n\r\nWe have a number of notes on how to contribute to jdbi on this page: https://github.com/jdbi/jdbi/blob/master/CONTRIBUTING.md ",
      "> Hi @Swastyy! Thank you for sending a PR! However, it seems that the CI flagged this as an error. Have you tried compiling locally? If yes, can you let me know whether it passes or not.\r\n> \r\n> We have a number of notes on how to contribute to jdbi on this page: https://github.com/jdbi/jdbi/blob/master/CONTRIBUTING.md\r\n\r\nHi @hgschmie , I see there is another PR created for this issue(#1930 ), I was busy these days and wasn't able to review. I will work on another issue in that case."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344f0dde8ed798d2ed72d",
    "number": 1912,
    "body": "- javadoc fixes and clarifications\r\n- replace InternalOptionalCustomizerProvider with a generic provider for loose bindings\r\n- add importBindingLoosely() methods to AbstractJdbiConfigurationModule\r\n- add createKey() methods to AbstractJdbiConfigurationModule\r\n- add default \"no op\" GuiceJdbiCustomizer\r\n\r\nGuice is \"experimental\" for a reason. I want to use 3.22.x to stabilize it and then maybe declare it beta going forward in 3.23 and stable a bit later.",
    "head_branch": "guice-tweaking",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1912 from hgschmie/guice-tweaking\n\nSome tweaks to the guice module."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662344f1dde8ed798d2ed72e",
    "number": 1910,
    "body": "old url is unreachable",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix HikariCP url\n\nold url is unreachable"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344f2dde8ed798d2ed72f",
    "number": 1907,
    "body": "The old badge image URL redirects to `api.travis-ci.com`, so I've used that instead.\r\nThe old badge URL redirects to `/github/jdbi/jdbi`, instead of just `/jdbi/jdbi`, so I've used the former instead.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Update Travis CI badge URL from `travis-ci.org` to `travis-ci.com`\n\nThe old badge image URL redirects to `api.travis-ci.com`, so I've used that instead.\r\nThe old badge URL redirects to `/github/jdbi/jdbi`, instead of just `/jdbi/jdbi`, so I've used the former instead."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344f3dde8ed798d2ed730",
    "number": 1905,
    "body": "",
    "head_branch": "doc-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1905 from hgschmie/doc-fix\n\nfix weird documentation timestamp"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344f4dde8ed798d2ed731",
    "number": 1904,
    "body": "Fixes the javadoc /undefined/ bug when generating documentation.",
    "head_branch": "enforce-post-11-for-build",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1904 from hgschmie/enforce-post-11-for-build\n\nenforce post-11 JDK for building"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344f5dde8ed798d2ed732",
    "number": 1903,
    "body": "- needs to downgrade checkstyle to 8.43 b/c checkstyle/checkstyle #10355\r\n- turns off agressive EI_EXPOSE_REP and EI_EXPOSE_REP2 rules in\r\n  spotbugs 4.3.0",
    "head_branch": "basepom-40",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update to basepom-40 (#1903)\n\n- needs to downgrade checkstyle to 8.43 b/c checkstyle/checkstyle #10355\r\n- turns off agressive EI_EXPOSE_REP and EI_EXPOSE_REP2 rules in\r\n  spotbugs 4.3.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344f6dde8ed798d2ed733",
    "number": 1902,
    "body": "The SQL type `INTEGER` often (always?) maps to integer types which are only 32 bits (4 bytes) long while `BIGINT` maps to integer types which are 64 bits (8 bytes) long.\r\n\r\nConsidering this, mapping the Java types `long` and `Long` to the SQL type `BIGINT` instead of `INTEGER` seems to make more sense.\r\n\r\nThis is also consistent with the handling of `OptionalLong` in Jdbi:\r\nhttps://github.com/jdbi/jdbi/blob/ee22bb85a6971737181a4b231cce4dbd55de8734/core/src/main/java/org/jdbi/v3/core/argument/OptionalArgumentFactory.java#L38-L44\r\n\r\nFWIW, this is motivated by a bug we discovered in CockroachDB when sending `NULL` values in a prepared statement which were sent as `NULL::INT4` by Jdbi 3.20.1 instead of `NULL::INT8` for a column declared as `INT8`:\r\nhttps://github.com/cockroachdb/cockroach/issues/67605",
    "head_branch": "map-long-arguments-to-bigint",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Map `long` and `Long` arguments to `BIGINT`\n\nThe SQL type `INTEGER` often (always?) maps to integer types which are only 32 bits (4 bytes) long while `BIGINT` maps to integer types which are 64 bits (8 bytes) long.\n\nConsidering this, mapping `long` and `Long` to `BIGINT` instead of `INTEGER` seems to make more sense.\n\nFWIW, this is motivated by a bug we discovered in CockroachDB when sending `NULL` values which were sent as `NULL::INT4` by Jdbi 3.20.1 instead of `NULL::INT8` for a column declared as `INT8`.\nhttps://github.com/cockroachdb/cockroach/issues/67605"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344f7dde8ed798d2ed734",
    "number": 1900,
    "body": "",
    "head_branch": "asciidoc-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1900 from hgschmie/asciidoc-fix\n\nasciidoc syntax fix"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344f8dde8ed798d2ed735",
    "number": 1899,
    "body": "Update docs to highlight that ClasspathSqlLocator may parse and strip\r\ncomments.\r\n\r\nRelated to #1898.",
    "head_branch": "use-classpath-locator-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1899 from hgschmie/use-classpath-locator-docs\n\nClarify comment parsing for ClasspathSqlLocator"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344f9dde8ed798d2ed736",
    "number": 1897,
    "body": "Turns out this becomes really annoying anywhere but within eclipse.\r\n\r\nMove everything under a profile that only activates if the project\r\nbuilds under eclipse. This seems to work (I have installed eclipse for\r\nthe first time in > three years and after installing a few\r\nplugins (most notably m2e-apt), this works. Feedback from real eclipse\r\nusers obviously wanted.",
    "head_branch": "eclipse-profile",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1897 from hgschmie/eclipse-profile\n\nMassage the eclipse lifecycle plugin"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344fadde8ed798d2ed737",
    "number": 1896,
    "body": "there was still a lot of cruft in there. :-) ",
    "head_branch": "more-build-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1896 from hgschmie/more-build-fixes\n\nMore build fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662344fbdde8ed798d2ed738",
    "number": 1895,
    "body": "clean up annotation processors\r\nremove eclipse plugin warning",
    "head_branch": "build-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1895 from hgschmie/build-fixes\n\nBuild fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344fcdde8ed798d2ed739",
    "number": 1894,
    "body": "dependencies:\r\n\r\nspring5 to 5.3.8\r\nguava to 30.1.1-jre\r\nantlr runtime to 4.9.2\r\ncaffeine to 3.0.3\r\nfreebuilder to 2.7.0\r\nimmutables to 2.8.8\r\njackson2 to 2.10.5 (latest 2.10)\r\njetbrains annotations to 21.0.1\r\nkotlin to 1.5.20\r\nslf4j to 1.7.30\r\nmoshi to 1.12.0\r\ngson to 2.8.7\r\nvavr to 0.9.3 (latest 0.9.x)\r\n\r\nexclude checkerframework-qual as a dependency everywhere (only contains annotations)\r\n\r\ntools:\r\n\r\ndokka to 1.4.32\r\njunit to 4.13.2\r\nmockito to 3.11.2\r\nassert4j-core to 3.20.2\r\nassert4j-guava to 3.4.0\r\npostgres driver to 4.2.22\r\nhsqldb to 2.6.0\r\notj-pg-embedded to 0.13.4\r\nflyway to 7.11\r\njavapoet to 1.13.0\r\njmh to 1.32",
    "head_branch": "dependency-updates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1894 from hgschmie/dependency-updates\n\nUpdate a ton of libraries"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344fddde8ed798d2ed73a",
    "number": 1893,
    "body": "",
    "head_branch": "doc-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1893 from hgschmie/doc-fix\n\nfix apidoc search"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344fedde8ed798d2ed73b",
    "number": 1892,
    "body": "",
    "head_branch": "kotlin-doc-fixes",
    "is_a_fork": true,
    "comments": [
      "Thanks for fixing this.  I do think there was a reason `publish-docs` was a `-D` property and not switched on with `-P` profile selection, which is that doing `-Ppublish-docs` inhibits all other profiles. Without toolchains, maybe this is not a big deal, but could be surprising if any new profiles are added later.",
      "the profile activation is tricky and the inhibiting happens if you have multiple profiles next to each other and one has \"activeByDefault\".  The docs read somewhat opaque: \"This profile will automatically be active for all builds unless another profile in the same POM is activated using one of the previously described methods. All profiles that are active by default are automatically deactivated when a profile in the POM is activated on the command line or through its activation config.\"\r\n\r\nWhat it means is that this applies to all profiles in the same pom only and as soon as another profile is activated, all profiles that have \"activeByDefault\" in it get disabled. \r\n\r\nAnother weird mavenism.\r\n\r\nI tested this with the code in #1894, which introduces a profile that is only activated when running on JDK8:\r\n\r\n```\r\n❯ mvn -pl :jdbi3-docs help:active-profiles\r\n[INFO] Scanning for projects...\r\n[INFO]\r\n[INFO] ------------------------< org.jdbi:jdbi3-docs >-------------------------\r\n[INFO] Building jdbi3 documentation 3.20.2-SNAPSHOT\r\n[INFO] --------------------------------[ jar ]---------------------------------\r\n[INFO]\r\n[INFO] --- maven-help-plugin:3.2.0:active-profiles (default-cli) @ jdbi3-docs ---\r\n[INFO]\r\nActive Profiles for Project 'org.jdbi:jdbi3-docs:jar:3.20.2-SNAPSHOT':\r\n\r\nThe following profiles are active:\r\n\r\n - jdk8 (source: org.jdbi:jdbi3-parent:3.20.2-SNAPSHOT)\r\n```\r\n\r\n```\r\n❯ mvn -Ppublish-docs -pl :jdbi3-docs help:active-profiles\r\n[INFO] Scanning for projects...\r\n[INFO]\r\n[INFO] ------------------------< org.jdbi:jdbi3-docs >-------------------------\r\n[INFO] Building jdbi3 documentation 3.20.2-SNAPSHOT\r\n[INFO] --------------------------------[ jar ]---------------------------------\r\n[INFO]\r\n[INFO] --- maven-help-plugin:3.2.0:active-profiles (default-cli) @ jdbi3-docs ---\r\n[INFO]\r\nActive Profiles for Project 'org.jdbi:jdbi3-docs:jar:3.20.2-SNAPSHOT':\r\n\r\nThe following profiles are active:\r\n\r\n - publish-docs (source: org.jdbi:jdbi3-docs:3.20.2-SNAPSHOT)\r\n - jdk8 (source: org.jdbi:jdbi3-parent:3.20.2-SNAPSHOT)\r\n```\r\n\r\nIt works as expected (and does not deactivate any other active profile). I can see how there are some interactions with the toolchain but I am pretty confident that this works. \r\n"
    ],
    "commit_messages": [
      "Merge pull request #1892 from hgschmie/kotlin-doc-fixes\n\nfix doc build, deploy kotlin docs again"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662344ffdde8ed798d2ed73c",
    "number": 1891,
    "body": "This is at least related to templating, so it should be a subsection of templating, not a full second level bullet item in its own right.",
    "head_branch": "reorg-csl-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1891 from hgschmie/reorg-csl-doc\n\nMove classpath sql locator section"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234500dde8ed798d2ed73d",
    "number": 1889,
    "body": "Allows accessing any method in the Database metadata either through a ResultBearing or simple values.",
    "head_branch": "metadata",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1889 from hgschmie/metadata\n\nAdd Database metadata access through the handle"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234501dde8ed798d2ed73e",
    "number": 1888,
    "body": "Provide integration for JDBI with the Guice DI framework.",
    "head_branch": "guice",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1888 from hgschmie/guice\n\nGuice integration"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234502dde8ed798d2ed73f",
    "number": 1887,
    "body": "",
    "head_branch": "basepom-39",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1887 from hgschmie/basepom-39\n\nUse basepom 39"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234503dde8ed798d2ed740",
    "number": 1885,
    "body": "Getting started with Jdbi and found a typo in the docs. Hope this is the correct way to create PRs.",
    "head_branch": "fix-typo-requied",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "fix typo (#1885)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234504dde8ed798d2ed741",
    "number": 1883,
    "body": "Provide integration for JDBI with the Guice DI framework.\r\n\r\nThis is an initial PR to start a discussion. There is documentation required which is still missing.",
    "head_branch": "guice",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234505dde8ed798d2ed742",
    "number": 1882,
    "body": "",
    "head_branch": "cvs-dependency-fixes",
    "is_a_fork": true,
    "comments": [
      "closed in favor of #1894 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234506dde8ed798d2ed743",
    "number": 1876,
    "body": "",
    "head_branch": "unchecked-return-null",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Unchecked Sneaky: improve code flow analysis by not returning spurious null"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234507dde8ed798d2ed744",
    "number": 1875,
    "body": "The postgres plugin binds some hstore related things unqualified for legacy reasons.\r\nThis interferes with custom bindings. This change makes the legacy bindings configurable.\r\n\r\nBy default they are still enabled (backwards compatible).",
    "head_branch": "postgres-legacy-bindings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make legacy bindings configurable. (#1875)\n\nMake unqualified bindings configurable.\r\n\r\nThe postgres plugin binds some hstore related things unqualified for legacy reasons.\r\nThis interferes with custom bindings. This change makes the legacy bindings configurable.\r\n\r\nBy default they are still enabled (backwards compatible)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234508dde8ed798d2ed745",
    "number": 1871,
    "body": "Fixes #1870",
    "head_branch": "remove-spring4-property",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove vestigial spring4 property\n\nFixes #1870"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234509dde8ed798d2ed746",
    "number": 1869,
    "body": "",
    "head_branch": "kotlin-1.5.0",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "kotlin 1.5.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623450adde8ed798d2ed747",
    "number": 1868,
    "body": "",
    "head_branch": "caffeine-302",
    "is_a_fork": false,
    "comments": [
      "hello, caffeine is used exactly for what? already seen some answers in some closed issues that he is not using to cache queries? caffeine is our main lib cache, my question is will there be any problems using this same version that comes with jdbi to cache queries? we use spring boot ",
      "Caffeine strictly follows semver and we try to be very conscientious about backwards compatibility. The changes visible between 2.x and 3.x are quite minor and both are maintained. In jdbi's case either version works. If you use the Spring Cache abstraction then that is fully backwards compatible. Very few users should be impacted by version changes and those fixes are relatively trivial.\r\n\r\nThis bump is a patch version so there are no API changes, only implementation improvements.",
      "Hi @GeorgeSalu , there's a lot of work Jdbi does behind the scenes based on the types and SQL you use:\r\nparsing SQL text, re-using created argument and column mappers for the same Type over and over again, things like that.\r\n\r\nPreviously we used built in JDK Maps to do this, but if you generate new SQL or types dynamically (or expect class unloading to work), a map with a hard reference is essentially a memory leak.  We wanted to stay with built in JDK types if we could, but solutions like WeakHashMap ended up not being a good fit, so we fell back to using Caffeine as a relatively lightweight cache with an expiry mechanism.  In \"normal\" usage you should never expire any data, but large or specialty applications might have to choose between caching for performance and cache memory usage."
    ],
    "commit_messages": [
      "caffeine 3.0.2 with complete Unsafe removal"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623450bdde8ed798d2ed748",
    "number": 1866,
    "body": "Fixes #1864 more thoroughly",
    "head_branch": "spring5-bom",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add spring5 to the bom\n\nFixes #1864 more thoroughly"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623450cdde8ed798d2ed749",
    "number": 1865,
    "body": "Fixes #1864",
    "head_branch": "deploy-spring5",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Actually deploy Spring5 artifacts\n\nFixes #1864"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623450ddde8ed798d2ed74a",
    "number": 1863,
    "body": "Allow creation-time initialization of row and column mappers. Also\r\nmake the config registry available to the factory methods on the\r\ncodec interface.",
    "head_branch": "mapper-init",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add one-time init methods to row and column mappers (#1863)\n\nAdd one-time init methods to row and column mappers\r\n\r\nAllow creation-time initialization of row and column mappers. Also\r\nmake the config registry available to the factory methods on the\r\ncodec interface."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623450edde8ed798d2ed74b",
    "number": 1862,
    "body": "",
    "head_branch": "asciidoctor-2.1.0",
    "is_a_fork": false,
    "comments": [
      "verified built docs look sane."
    ],
    "commit_messages": [
      "asciidoctor 2.1.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623450fdde8ed798d2ed74c",
    "number": 1861,
    "body": "Updates the BindList docs to reflect the sql update operation",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "@crackerplace Thank you for contributing!"
    ],
    "commit_messages": [
      "Merge pull request #1861 from crackerplace/master\n\nUpdate docs to reflect bindlist update query"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234510dde8ed798d2ed74d",
    "number": 1857,
    "body": "Fixes #1856",
    "head_branch": "slf4j-case",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Correct case in docs link\n\nFixes #1856"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234511dde8ed798d2ed74e",
    "number": 1855,
    "body": "\r\nHopefully clears up #1853",
    "head_branch": "java8-caffeine-compat",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Also call out Spring4 deprecation a bit more prominently"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234512dde8ed798d2ed74f",
    "number": 1852,
    "body": "",
    "head_branch": "mvnw",
    "is_a_fork": true,
    "comments": [
      "Hm.  We will then be responsible for managing the Maven version -- for example, the version `3.6.3` you propose to embed is vulnerable to CVE-2021-26291.\r\n\r\nI never really understood the appeal of the wrapper programs, it requires checking in a random jar and incomprehensible shell scripts, and everyone who develops on Jdbi will need to have Java + Maven set up anyway.  I'm not necessarily opposed to it but was there some reason to push it through?",
      "Basically you don't pay attention to that JAR file and the shell scripts 🤣\r\n\r\nI think this is a good to have, so you don't really need to know the version of Maven you need to work with. The wrapper script takes care of all of that.\r\n\r\nBy the way, this approach is going to be part of the official Maven distribution any time \"soon\", so I guess the setup is going to be like that anyway.",
      "This is an answer to the \"ugh, I need to install build tool <X>\" to try this out. Other technologies (and other build tools such as gradle) popularized the approach of \"I bring a command line tool, nothing needs to be installed\" approach.\r\n\r\nAs @x80486 mentioned, this is the direction into which maven will go anyway; it may require maven 4 to be released first, though.\r\n\r\nThe \"cryptic shell scripts and jar file\" are auto-generated by the takari wrapper plugin."
    ],
    "commit_messages": [
      "Merge pull request #1852 from hgschmie/mvnw\n\nadd mvnw for builds without maven installed"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234514dde8ed798d2ed750",
    "number": 1851,
    "body": "Fixes #1836.\r\nFixes #1837.",
    "head_branch": "promote-beta-to-stable",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Promote JSON, Jackson, Gson, and Postgres LOB APIs to stable"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234515dde8ed798d2ed751",
    "number": 1850,
    "body": "Fixes #1834",
    "head_branch": "remove-spring4",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1850 from jdbi/remove-spring4\n\nNuke Spring 4, which is EOL"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234516dde8ed798d2ed752",
    "number": 1849,
    "body": "",
    "head_branch": "remove-dokka-profile",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Try removing jdk filtering on kotlin dokka run"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234517dde8ed798d2ed753",
    "number": 1848,
    "body": "",
    "head_branch": "doc-pom-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "sort properties in the pom (#1848)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234518dde8ed798d2ed754",
    "number": 1847,
    "body": "Fixes #1838",
    "head_branch": "beta-removal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge remote-tracking branch 'hgschmie/beta-removal'"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234519dde8ed798d2ed755",
    "number": 1846,
    "body": "",
    "head_branch": "jdbicodec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "update docs and test"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623451adde8ed798d2ed756",
    "number": 1845,
    "body": "",
    "head_branch": "kotlin",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "use released kotlin version (#1845)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623451bdde8ed798d2ed757",
    "number": 1844,
    "body": "",
    "head_branch": "alpha-doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Note @Alpha in the docs (#1844)\n\nCo-authored-by: Henning Schmiedehausen <henning@schmiedehausen.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623451cdde8ed798d2ed758",
    "number": 1843,
    "body": "",
    "head_branch": "spring4-eol",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Spring4 EOL (#1843)\n\n* Nuke spring5 delegates\r\n* Mark Spring 4 as EOL, move all tests to Spring 5\r\n* Document spring4 -> spring5"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623451ddde8ed798d2ed759",
    "number": 1842,
    "body": "",
    "head_branch": "alpha",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add a new Alpha annotation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623451edde8ed798d2ed75a",
    "number": 1840,
    "body": "A codec is a replacement for registering an argument and a column\r\nmapper for a type. It is responsible for serializing a typed value\r\ninto a database column and creating a type from a database column.",
    "head_branch": "jdbicodec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge remote-tracking branch 'hgschmie/jdbicodec'"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623451fdde8ed798d2ed75b",
    "number": 1835,
    "body": "",
    "head_branch": "geantyref-1.3.11",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "update geantyref to 1.3.11"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234520dde8ed798d2ed75c",
    "number": 1833,
    "body": "",
    "head_branch": "spring-up",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update Spring baseline with jdk16 fixes"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234521dde8ed798d2ed75d",
    "number": 1831,
    "body": "",
    "head_branch": "spotbugs-4.2.2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234522dde8ed798d2ed75e",
    "number": 1830,
    "body": "",
    "head_branch": "fail-javadoc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix javadoc errors"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234523dde8ed798d2ed75f",
    "number": 1829,
    "body": "Fixes #1799",
    "head_branch": "rollback-only-txn",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add a new RollbackOnlyTransactionHandler\n\nFixes #1799"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234524dde8ed798d2ed760",
    "number": 1828,
    "body": "Fixes #1815",
    "head_branch": "slf4j-sql-log",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add a simple Slf4J SQL statement logger\n\nFixes #1815"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234525dde8ed798d2ed761",
    "number": 1827,
    "body": "Fixes #1818",
    "head_branch": "doc-stmt-close",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add some documentation about result lifecycle\n\nFixes #1818"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234526dde8ed798d2ed762",
    "number": 1826,
    "body": "jdk 15 is dead, long live jdk 16",
    "head_branch": "openjdk16",
    "is_a_fork": false,
    "comments": [
      "the build script still builds with 14 (and the README says so as well). If we remove 15 and replace with 16, the README also needs to be updated.",
      "Blocked by https://youtrack.jetbrains.com/issue/KT-44624",
      "https://github.com/spring-projects/spring-framework/issues/26770",
      "Kotlin 1.5.0-RC fixes KT-44624\r\non to the next one...\r\n```\r\n[ERROR] Failed to execute goal org.asciidoctor:asciidoctor-maven-plugin:1.5.3:process-asciidoc (output-html) on project jdbi3-docs: \r\nExecution output-html of goal org.asciidoctor:asciidoctor-maven-plugin:1.5.3:process-asciidoc failed: \r\n(LoadError) load error: jruby/java/java_ext/java.lang -- \r\njava.lang.reflect.InaccessibleObjectException: Unable to make protected native java.lang.Object java.lang.Object.clone() throws java.lang.CloneNotSupportedException accessible: \r\nmodule java.base does not \"opens java.lang\" to unnamed module @1f8d25db -> [Help 1]\r\n```",
      "Nice!  #1862 fixed that.  Now we are good to go as soon as Kotlin 1.5.0 is released :)",
      "Kotlin 1.5.0 is out! :rocket: "
    ],
    "commit_messages": [
      "build with jdk16"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234527dde8ed798d2ed763",
    "number": 1825,
    "body": "Fixes #1824 ",
    "head_branch": "caffeine-301",
    "is_a_fork": false,
    "comments": [
      "seems that this is blocked on updating build jdk in #1823 "
    ],
    "commit_messages": [
      "Add some doc notes regarding java 8 compatibility"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234528dde8ed798d2ed764",
    "number": 1823,
    "body": "This change requires a JDK 9+ to build JDBI. With JDK8 being obsolete\r\nfor a long time and JDK11 being replaced by 17 in the fall as the LTS,\r\nit would be good to update the toolchain to use a more current JDK.\r\n\r\nThis still compiles the jar to be JDK8 compatible (this is actually\r\neasier with newer compilers than with the old toolchains thing).\r\n\r\nAlso updates Kotlin to use the 1.5.0-M2 release",
    "head_branch": "new-toolchain",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "New toolchain for building JDBI (#1823)\n\n* Change build to use post-8 JDKs\r\n\r\nThis change requires a JDK 9+ to build JDBI. With JDK8 being obsolete\r\nfor a long time and JDK11 being replaced by 17 in the fall as the LTS,\r\nit would be good to update the toolchain to use a more current JDK.\r\n\r\nThis still compiles the jar to be JDK8 compatible (this is actually\r\neasier with newer compilers than with the old toolchains thing).\r\n\r\nAlso updates Kotlin to use the 1.5.0-M2 release"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234529dde8ed798d2ed765",
    "number": 1821,
    "body": "",
    "head_branch": "license-types",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add missing file types for license plugin"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623452adde8ed798d2ed766",
    "number": 1820,
    "body": "",
    "head_branch": "provider-change",
    "is_a_fork": true,
    "comments": [
      "Yeah, we don't want to assemble the string on connection open every time, just in case there's a null that never should be."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623452bdde8ed798d2ed767",
    "number": 1819,
    "body": "Highlighted by newer versions of spotbugs.",
    "head_branch": "char-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "replace string with char usage.\n\nHighlighted by newer versions of spotbugs."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623452cdde8ed798d2ed768",
    "number": 1817,
    "body": "Fixes #1814",
    "head_branch": "st-escape-doc",
    "is_a_fork": false,
    "comments": [
      "I guess the placement answers the question if this only happens with the StringTemplate module installed."
    ],
    "commit_messages": [
      "Add some documentation about escaping ST templates\n\nFixes #1814"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623452ddde8ed798d2ed769",
    "number": 1816,
    "body": "Pull common array type configuration with SQL standard names up to base SqlArraytypes\r\nThey can always be overridden anyway\r\n\r\nFixes #1802",
    "head_branch": "register-boolean-array",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Register boolean array types\n\nPull common array type configuration with SQL standard names up to base SqlArraytypes\nThey can always be overridden anyway\n\nFixes #1802"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623452edde8ed798d2ed76a",
    "number": 1809,
    "body": "Hi folks!\r\n\r\nI'm not sure if this PR is big enough to justify merge so I'll understand if it's rejected. Having said that I felt it would be great to have [Moshi](https://github.com/square/moshi), one of the fastest json parsers for JVM, support in jdbi and in maven central. I mimicked what's done in Gson2 plugin since their API is fairly similar.\r\n\r\nThanks!",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge remote-tracking branch 'unoexperto/master'"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623452fdde8ed798d2ed76b",
    "number": 1805,
    "body": "",
    "head_branch": "conn-factory-npe",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Handle open: check ConnectionFactory return for null values eagerly"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234530dde8ed798d2ed76c",
    "number": 1801,
    "body": "",
    "head_branch": "flyway-7.3.2",
    "is_a_fork": true,
    "comments": [
      "Motivation for this update, please?",
      "I moved it all the way up to latest, 7.7.2"
    ],
    "commit_messages": [
      "flyway 7.3.2"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234531dde8ed798d2ed76d",
    "number": 1800,
    "body": "\r\nhttps://docs.github.com/en/free-pro-team@latest/actions",
    "head_branch": "github-actions-ci",
    "is_a_fork": true,
    "comments": [
      "Hi @sullis, thanks for the interest - can you explain a bit more about why we should make this change?  Currently Jdbi uses Travis which seems to work ok -- I don't think we want to have two separate CI systems to maintain.  But maybe I'm missing something.  Thanks!",
      "Travis-ci.org is shutting down. You now have to [request build minutes for open source projects](https://www.travis-ci.com/plans) which has a bit of a long process from what I have heard. GitHub Actions still have unlimited builds for open source. Also travis-ci was acquired by a private equity firm so it is uncertain how much build time they will continue giving. \r\n\r\nThis is the reason you might want to move to GitHub Actions and maybe drop travis-ci.",
      "Indeed, I see the impending warning on Travis's site.  Thanks for proposing this, we might need to switch indeed.",
      "This looks like a good starting point, but there is some work to be done to complete it.  We have a number of parts of the build that only execute conditionally and we should port or redesign that logic to work in the new GitHub Actions setup.",
      "For the moment Travis has given us sufficient build credits. Just for simplicity's sake we'll keep that running for a bit, but if they start trying to extract money from us or make us talk to them repeatedly then I think this is still the next thing to try.",
      "The Travis security f-up is another nail in the coffin... thankfully we don't have any secrets!",
      "Reference:  TravisCI\n\nhttps://arstechnica.com/information-technology/2021/09/travis-ci-flaw-exposed-secrets-for-thousands-of-open-source-projects/\n\n",
      "Superseded by #1924 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234532dde8ed798d2ed76e",
    "number": 1796,
    "body": "Extend the lexer grammars used to parse statements for colon\r\nparameters, hash parameters, and attribute definitions to\r\nrecognize single-line comments starting with `--` and `//`.\r\nAs a result, placeholders within comments will remain\r\nuntouched when pre-processing statements.\r\n\r\nhttps://github.com/jdbi/jdbi/issues/1712",
    "head_branch": "fix-1712",
    "is_a_fork": true,
    "comments": [
      "There's no realistic and supportable situation where something that looks like an inline comment in a query is actually not an inline comment, right guys?\r\n\r\nEdit: perhaps add a test that e.g. string literals with comment markers inside them are still parsed as strings? Not sure if one exists already.",
      "> There's no realistic and supportable situation where something that looks like an inline comment in a query is actually not an inline comment, right guys?\r\n> \r\n> Edit: perhaps add a test that e.g. string literals with comment markers inside them are still parsed as strings?\r\n\r\nI've added a `testCommentCharsInQuotes` to the parameter parsing tests. For the `DefinedAttributeTemplateEngine`, I've added a test to ensure that comment chars within angle brackets aren't recognized as such. Not entirely sure though, if that makes sense. What do you think?\r\n\r\nBTW: `TestColonPrefixSqlParser` contains two tests with similar names that are apparently testing the same thing: `testHashInColumnNameOkay` and `testHashInColumnNameWorks`. Shall I remove one of them - within this change or in a separate one?",
      "Great test cases!",
      "Duplicate test removed in 8648c1c56"
    ],
    "commit_messages": [
      "Skip parsing parameters in single-line comments\n\nExtend the lexer grammars used to parse statements for colon\nparameters, hash parameters, and attribute definitions to\nrecognize single-line comments starting with `--` and `//`.\nAs a result, placeholders within comments will remain\nuntouched when pre-processing statements.\n\nhttps://github.com/jdbi/jdbi/issues/1712"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234533dde8ed798d2ed76f",
    "number": 1793,
    "body": null,
    "head_branch": "antlr49",
    "is_a_fork": true,
    "comments": [
      "Is there a particular reason to upgrade, or just keeping things up to date?",
      "I was about to file an issue to consider shading `antlr-runtime`. We get this spam message printed multiple times in Presto since we use a newer version:\r\n```\r\nANTLR Tool version 4.7.2 used for code generation does not match the current runtime version 4.8\r\n```\r\nGiven that the generator version needs to exactly match the runtime version, shading seems best, otherwise all usages of ANTLR in a project's dependency closure would need to be the same.\r\n\r\nAt least for now, I can solve this by updating both projects to use the latest version of ANTLR. Given the current release frequency of ANTLR being every 6-12 months, maybe this is good enough.",
      "Is there a reason you don't just manage both the generator and runtime in presto's pom?  Jdbi is happy to run against 4.7 or 4.9, it just needs to be consistent, as far as I know.  This should only happen if you depend on a specific version of the generator, but let the runtime version \"float\", which is inherently risky to taking a version you didn't expect from a transitive dependency.  (One of Maven's sharper edges...)\r\n\r\nJdbi upgrading to 4.9 is nice but it would break anyone who expects to continue running against 4.7 or 4.8, so we try not to just bump version numbers for no reason.  I doubt too many people care to keep the old version in this case, though, so we can probably just accept this change.\r\n\r\nTo me, not shading is a feature - if you shade, it's impossible to bring in bugfixes using `dependencyManagement`.  For example the shaded `cglib` broke horribly when Java 9 came out, and there was no fix except to rebuild Jdbi.\r\n\r\nBut if you really want shaded jars, maybe we can distribute both regular non-shaded jars and shaded jars... we can follow up on a separate ticket regarding that.",
      "For Presto’s own usage of ANTLR, we use the same version of the generator and runtime.\r\n\r\nThe problem is the generated code in Jdbi — that version needs to match our runtime version but is out of our control (since Jdbi was already built using the older version). I don’t see a good solution given the tight coupling in ANTLR.",
      "Oh, I see.  I didn't realize the generated code depended on the runtime version, that sucks.  Maybe shading in *just* the antlr library is the right solution...",
      "FYI, the check for that is here: https://github.com/antlr/antlr4/blob/master/runtime/Java/src/org/antlr/v4/runtime/RuntimeMetaData.java",
      "The generated `org.jdbi.v3.core.internal.lexer.ColonStatementLexer` has this call:\r\n```java\r\nstatic { RuntimeMetaData.checkVersion(\"4.7.2\", RuntimeMetaData.VERSION); }\r\n",
      "Opened #1798 to track this"
    ],
    "commit_messages": [
      "Update to ANTLR 4.9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234534dde8ed798d2ed770",
    "number": 1788,
    "body": "Also registers more array types out of the box, and fixes Generator implementations that _don't_ implement `SqlObject`.\r\n\r\nHopefully fixes #1784",
    "head_branch": "field-method-generic-types",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Object Field/Method arguments: use generic type to capture things like List<T>\n\nHopefully fixes #1784"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234535dde8ed798d2ed771",
    "number": 1787,
    "body": "Allow `Collector<CharSequence, …, …>` to be used after applying a `RowMapper<String>`, for example:\r\n`query.map((rs, ctx) -> \"ID: \" + rs.getInt(\"id\")).collect(Collectors.joining(\"\\n\"));`",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Please add a test case to serve as an example :)",
      "Thanks!"
    ],
    "commit_messages": [
      "Update TestResultIterable.java\n\nAdd test for ResultIterable.collect(Collector<? super T, ?, R> collector)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234536dde8ed798d2ed772",
    "number": 1781,
    "body": "",
    "head_branch": "junit-4.13.1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "latest junit 4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234537dde8ed798d2ed773",
    "number": 1779,
    "body": "Fixes #1776",
    "head_branch": "templateengine-cache",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "TemplateEngine: use size-limited Caffeine cache so we don't keep an unbounded number of templates\n\nFixes #1776"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234538dde8ed798d2ed774",
    "number": 1778,
    "body": null,
    "head_branch": "bind-pojo-by-type",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "@BindPojo: support binding Pojo<T> properties of type T"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234539dde8ed798d2ed775",
    "number": 1777,
    "body": "",
    "head_branch": "bind-pojo-by-type",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623453adde8ed798d2ed776",
    "number": 1775,
    "body": "Fixes #1774 ",
    "head_branch": "decorate-sqlobject-type",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623453bdde8ed798d2ed777",
    "number": 1773,
    "body": "it used to not work, but it works now :)",
    "head_branch": "checks-all-jdks",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Enable build checks on all jdk levels again!"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623453cdde8ed798d2ed778",
    "number": 1772,
    "body": "this causes a LinkageError in multi-classloader environments:\r\n\r\n```\r\nCaused by: java.lang.LinkageError: loader constraint violation:\r\n  when resolving method 'void org.jdbi.v3.core.argument.Arguments.<init>(org.jdbi.v3.core.config.ConfigRegistry)'\r\n  the class loader 'bootstrap' of the current class, java/lang/Object, and the class loader\r\n  com.paywholesail.components.testutil.IntegrationRuleClassLoader @7b222230 for the method's defining class,\r\n  org/jdbi/v3/core/argument/Arguments, have different Class objects for the type org/jdbi/v3/core/config/ConfigRegistry\r\n  used in the signature (java.lang.Object is in module java.base of loader 'bootstrap';\r\n  org.jdbi.v3.core.argument.Arguments is in unnamed module of loader\r\n  com.paywholesail.components.testutil.IntegrationRuleClassLoader @7b222230, parent loader 'platform')\r\n```",
    "head_branch": "mh-nonpublic-lookup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "JdbiConfig: MethodHandle lookup cannot be public since it loads user code\n\nthis causes a LinkageError:\n\n```\nCaused by: java.lang.LinkageError: loader constraint violation:\n  when resolving method 'void org.jdbi.v3.core.argument.Arguments.<init>(org.jdbi.v3.core.config.ConfigRegistry)'\n  the class loader 'bootstrap' of the current class, java/lang/Object, and the class loader\n  com.paywholesail.components.testutil.IntegrationRuleClassLoader @7b222230 for the method's defining class,\n  org/jdbi/v3/core/argument/Arguments, have different Class objects for the type org/jdbi/v3/core/config/ConfigRegistry\n  used in the signature (java.lang.Object is in module java.base of loader 'bootstrap';\n  org.jdbi.v3.core.argument.Arguments is in unnamed module of loader\n  com.paywholesail.components.testutil.IntegrationRuleClassLoader @7b222230, parent loader 'platform')\n```"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623453ddde8ed798d2ed779",
    "number": 1768,
    "body": "see #1765",
    "head_branch": "bind-uuid-uri",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "3.15.0-SNAPSHOT"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623453edde8ed798d2ed77a",
    "number": 1767,
    "body": "This avoids needing to re-build argument preparers, collectors, and RowMapper / ColumnMappers on every method invocation for a pretty significant speed boost",
    "head_branch": "sqlobject-warmup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "SqlObject: warm up argument bindings and return / collected types on first method call\n\nThis avoids needing to re-build argument preparers, collectors, and RowMapper / ColumnMappers on every new dao instance"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623453fdde8ed798d2ed77b",
    "number": 1766,
    "body": "Once we're done constructing it, hold it in a JdbiCache for later use to save re-computation effort\r\nWhen on Java 10+, use `Collectors.toUnmodifiableSet()` as it's much more performant than `Collections.unmodifiableSet(HashSet(...))`\r\n\r\nSignificantly faster and replaces both #1751 and #1755 as they're no longer needed.",
    "head_branch": "qualified-type-cache",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix NPE in AnnotationFactory proxy annotation equals"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234540dde8ed798d2ed77c",
    "number": 1763,
    "body": "",
    "head_branch": "jdk15",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "TestJsr310, MockClock: avoid nanosecond system clock, databases truncate to micros"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234541dde8ed798d2ed77d",
    "number": 1762,
    "body": "Fixes #1761",
    "head_branch": "batch-insert-null",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Batch insert: fix inserting constant 'null'\n\nFixes #1761"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234542dde8ed798d2ed77e",
    "number": 1757,
    "body": "In particular, the `Mappers` class relies on first checking row mappers then column mappers - it has to exhaust every row mapper to not find any before trying a column mapper.",
    "head_branch": "mapper-negative-cache",
    "is_a_fork": false,
    "comments": [
      "Looks like the same weird build error as my PR"
    ],
    "commit_messages": [
      "*Mappers: cache misses as well as hits"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234543dde8ed798d2ed77f",
    "number": 1756,
    "body": "",
    "head_branch": "travis-14",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "PMD"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234544dde8ed798d2ed780",
    "number": 1755,
    "body": "suggestion for #1751 \r\n\r\nIMO separating these concerns feels less tangly, easier on the mind, even if it is a bit more code. I think it's also quite well optimized for performance as originally intended.",
    "head_branch": "qualified-set-factories-split",
    "is_a_fork": false,
    "comments": [
      "I don't know what the kotlin error is about...",
      "Did you have a chance to compare performance before / after / vs my change?",
      "No, sorry. I can try to do that tomorrow if you don't do it. My focus was on code simplicity, I just tried to avoid doing anything that would be an obvious step backward in performance.",
      "Before refactor:\r\n```\r\nBenchmark                                     Mode  Cnt      Score      Error  Units\r\nQualifiersBenchmark.getQualifiersAnnotated    avgt    5    225.286 ±   17.535  ns/op\r\nQualifiersBenchmark.getQualifiersUnannotated  avgt    5    135.407 ±    6.985  ns/op\r\nQualifiersBenchmark.mapQualifiedBean          avgt    5  32375.018 ± 1512.807  ns/op\r\nQualifiersBenchmark.mapUnqualifiedBean        avgt    5  34898.519 ± 7136.024  ns/op\r\n```\r\n\r\nAfter refactor:\r\n```\r\nBenchmark                                     Mode  Cnt      Score      Error  Units\r\nQualifiersBenchmark.getQualifiersAnnotated    avgt    5    222.257 ±   10.369  ns/op\r\nQualifiersBenchmark.getQualifiersUnannotated  avgt    5    140.961 ±   10.855  ns/op\r\nQualifiersBenchmark.mapQualifiedBean          avgt    5  32894.482 ± 2735.528  ns/op\r\nQualifiersBenchmark.mapUnqualifiedBean        avgt    5  32898.203 ± 2078.309  ns/op\r\n```\r\n\r\nSeems to me the difference is within the margin of error and in the order of 1% both up and down, so arguably no performance difference? :)",
      "Unfortunately I don't think the QualifiersBenchmark actually covers this refactoring - you'll notice it changes argument factory code, while the qualifier benchmark only tests the Qualifiers code itself.",
      "Edit: I think I get what you mean, but the code in the equality method didn't really change compared to your branch.",
      "I tried to make some comparisons but even running for 2h the results were inconclusive.\r\nI guess I'll save this for last, get the rest merged in, then re-test and re-profile.",
      "replaced by #1766"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234545dde8ed798d2ed781",
    "number": 1754,
    "body": "annotation and stream usage, so cache it\r\n\r\n~20% improvement on H2 sqlobject insert bean benchmark",
    "head_branch": "annotation-sql-locator-cache",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "AnnotationSqlLocator: computation is surprisingly expensive due to annotation and stream usage, so cache it\n~20% improvement on H2 sqlobject insert bean benchmark"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234546dde8ed798d2ed782",
    "number": 1753,
    "body": "and then using invokeExact\r\n\r\nsmaller but still measurable ~5% improvement",
    "head_branch": "mh-astype",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Bean / Pojo Properties: level up our MethodHandle usage by fixing asType and then using invokeExact\n\nsmaller but still measurable ~5% improvement"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234547dde8ed798d2ed783",
    "number": 1752,
    "body": "also, reduce some Streams usage in the hot path\r\n~20% improvement on H2.fluentSelectOne",
    "head_branch": "argument-optimize",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Arguments: don't prePrepare types, it's too expensive in the common case\n\n~20% improvement on H2.fluentSelectOne"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234548dde8ed798d2ed784",
    "number": 1751,
    "body": "~15% optimization on H2.fluentSelectOne",
    "head_branch": "qualified-set-factories",
    "is_a_fork": false,
    "comments": [
      "Replaced by #1766"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234549dde8ed798d2ed785",
    "number": 1750,
    "body": "~ 20% increase in H2.fluentSelectOne benchmark",
    "head_branch": "config-factory-memoize",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "ConfigRegistry: use new MethodHandle lookup and memoize supplier\n\n~ 20% increase in H2.fluentSelectOne benchmark"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623454adde8ed798d2ed786",
    "number": 1749,
    "body": "jmh 1.25\r\n\r\nInspired by #1732 \r\n\r\nCurrently, it looks like there's a significant bottleneck in creating copies of `ConfigRegistry` for every statement made.",
    "head_branch": "benchmark-v2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Import V2 vs V3 benchmark for both fluent and sqlobject\njmh 1.25"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623454bdde8ed798d2ed787",
    "number": 1748,
    "body": "",
    "head_branch": "h2-rule-pool-dispose",
    "is_a_fork": false,
    "comments": [
      "Let the record show I'd approve this PR if github still had the button enabled :p",
      "Thanks!\n\nOn Sat, Sep 12, 2020 at 4:01 AM leaumar <notifications@github.com> wrote:\n\n> Let the record show I'd approve this PR if github still had the button\n> enabled :p\n>\n> —\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/jdbi/jdbi/pull/1748#issuecomment-691470078>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAA7QSKXSVGOG6UH635X3VLSFNIHZANCNFSM4RI3PL2Q>\n> .\n>\n"
    ],
    "commit_messages": [
      "H2 db rule: dispose of opened pool when finished"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623454cdde8ed798d2ed788",
    "number": 1746,
    "body": "Fixes typo in JDBI2 sql object docs",
    "head_branch": "fix-docs-typo",
    "is_a_fork": true,
    "comments": [
      "Thanks!  Surprised anyone still uses v2 : ]"
    ],
    "commit_messages": [
      "Fix sql object docs typo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623454ddde8ed798d2ed789",
    "number": 1744,
    "body": "Fixes #1732 (hopefully?)",
    "head_branch": "qaf-ppt-once",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "QualifiedArgumentFactory$Preparable: only compute prePreparedTypes once"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623454edde8ed798d2ed78a",
    "number": 1742,
    "body": "When running Jdbi from a thread pool that has a unexpected thread context class loader, AnnotationFactory fails:\r\n\r\n```\r\nCaused by: java.lang.IllegalArgumentException: org.jdbi.v3.json.Json referenced from a method is not visible from class loader\r\nat java.lang.reflect.Proxy$ProxyBuilder.ensureVisible (Proxy.java:867)\r\nat java.lang.reflect.Proxy$ProxyBuilder.validateProxyInterfaces (Proxy.java:690)\r\nat java.lang.reflect.Proxy$ProxyBuilder.<init> (Proxy.java:636)\r\nat java.lang.reflect.Proxy$ProxyBuilder.<init> (Proxy.java:644)\r\nat java.lang.reflect.Proxy.lambda$getProxyConstructor$0 (Proxy.java:424)\r\nat jdk.internal.loader.AbstractClassLoaderValue$Memoizer.get (AbstractClassLoaderValue.java:329)\r\nat jdk.internal.loader.AbstractClassLoaderValue.extractValue (AbstractClassLoaderValue.java:277)\r\nat jdk.internal.loader.AbstractClassLoaderValue.computeIfAbsent (AbstractClassLoaderValue.java:218)\r\nat java.lang.reflect.Proxy.getProxyConstructor (Proxy.java:422)\r\nat java.lang.reflect.Proxy.newProxyInstance (Proxy.java:1015)\r\nat org.jdbi.v3.core.internal.AnnotationFactory.create (AnnotationFactory.java:57)\r\nat org.jdbi.v3.core.internal.AnnotationFactory.create (AnnotationFactory.java:38)\r\nat java.util.stream.ReferencePipeline$3$1.accept (ReferencePipeline.java:195)\r\nat java.util.Spliterators$ArraySpliterator.forEachRemaining (Spliterators.java:948)\r\nat java.util.stream.AbstractPipeline.copyInto (AbstractPipeline.java:484)\r\nat java.util.stream.AbstractPipeline.wrapAndCopyInto (AbstractPipeline.java:474)\r\nat java.util.stream.ReduceOps$ReduceOp.evaluateSequential (ReduceOps.java:913)\r\nat java.util.stream.AbstractPipeline.evaluate (AbstractPipeline.java:234)\r\nat java.util.stream.ReferencePipeline.collect (ReferencePipeline.java:578)\r\nat org.jdbi.v3.core.qualifier.QualifiedType.with (QualifiedType.java:102)\r\n```\r\nI think this should be better behavior in the presence of multiple classloaders that can't see each other but share thread pools... (!!!)",
    "head_branch": "annotation-cl",
    "is_a_fork": false,
    "comments": [
      "Thanks for the review!"
    ],
    "commit_messages": [
      "AnnotationFactory: prefer class's ClassLoader to TCCL"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623454fdde8ed798d2ed78b",
    "number": 1740,
    "body": "Removes localConfig thread-local before discarding the reference.\r\n\r\nThe JDK ThreadLocal implementation uses weak references, which persist until garbage collector actually removes the objects. Therefore Tomcat leak detector discovers these thread-local objects and gives unnecessary warnings.\r\n\r\n> SEVERE [main] org.apache.catalina.loader.WebappClassLoaderBase.checkThreadLocalMapForLeaks The web application [test] created a ThreadLocal with key of type [java.lang.ThreadLocal.SuppliedThreadLocal] (value [java.lang.ThreadLocal$SuppliedThreadLocal@4f5125ed]) and a value of type [org.jdbi.v3.core.config.ConfigRegistry] (value [org.jdbi.v3.core.config.ConfigRegistry@6a69f138]) but failed to remove it when the web application was stopped. Threads are going to be renewed over time to try and avoid a probable memory leak.\r\n\r\nWhile there is no actual leak, investigating such noise wastes time and adding `localConfig.remove()` call avoids these warnings.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Avoid tomcat warnings about thread-local leak.\n\nRemoves localConfig thread-local before discarding the reference.\nThe JDK ThreadLocal implementation uses weak references, which persist\nuntil garbage collector actually removes the objects. Therefore Tomcat\nleak detector discovers these thread-local objects and gives\nunnecessary warnings."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234550dde8ed798d2ed78c",
    "number": 1739,
    "body": "see #1733",
    "head_branch": "disable-txn-checks",
    "is_a_fork": false,
    "comments": [
      "Closed due to lack of interest."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234551dde8ed798d2ed78d",
    "number": 1730,
    "body": "This fixes the issue by ignoring any property that doesn't have a way of setting itself.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix checkstyle violation."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234552dde8ed798d2ed78e",
    "number": 1727,
    "body": "https://github.blog/2020-06-01-keep-all-your-packages-up-to-date-with-dependabot/",
    "head_branch": "dependabot2",
    "is_a_fork": true,
    "comments": [
      "Personally, I want to. I've started doing it in private projects and I've been pushing the topic at work. Evergreening is good in the long run because it reduces dependency divergence and pulls people off legacy (even my evergreened projects still transitively get saddled up with unsupported legacy via nevergreen deps and their build warnings). The alternative I see everywhere of everyone picking $current_version at project init and then never updating certainly doesn't sit well with me.\r\n\r\nProblem is, we have downstream users and the ones that are nevergreen/legacy or mostly use nevergreen deps (like current jdbi) would then likely be dismayed by the increased friction. Of course, the opposite is true for downstreams that evergreen, and dep divergence will always exist anyway so one might as well aim for divergence in a good direction at least.\r\n\r\nIt may just be the push that finally gets nevergreens on the evergreen train too: when the burden of evolving along becomes smaller than clinging to stability/staleness. That's pretty much how all innovation happens, something has to make way for a new thing, just like the new generation of audio/video/image codecs trying to displace last gen.\r\n\r\nPerhaps we can roll with this on jdbi4? There's no better time than a major release for policy changes.\r\n\r\nPS: just my opinion",
      "Thank you for the suggestion.  Automatic dependency tracking makes great sense for assembled software that ships an executable.\r\nHowever, `jdbi` is a library meant to be consumed by application distributors.  Our version declarations are \"this is the minimum API jdbi can link to\" not \"this is the version you should deploy your app with\".\r\nUnfortunately upgrading without due cause can cause extreme difficulty for users: Guava in particular has been a thorn in the past.\r\n\r\nWe won't be adopting automatic updates at this time, but if there's specific issues in our dependencies that need upgrading, we're always happy to consider specific PRs."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234553dde8ed798d2ed78f",
    "number": 1725,
    "body": "Adding another instance where Freebuilder documentation should be a sibling of Immutables.",
    "head_branch": "document-free-builders",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add additional note around Freebuilder support duplicating Immutables note."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234554dde8ed798d2ed790",
    "number": 1724,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "If you have legit criticisms, we'd be glad to hear them explained. :)",
      "Both the declarative and the fluent APIs of JDBI are unmitigated disasters, compounded by the lack of string interpolation in Java. \r\nThere are no options available to make the binding of the SQL queries type-safe.\r\n\r\nIf you want to use the object mapping (BeanMapper) of JDBI with any database without losing your sanity you have to abandon snake_case naming in your database and switch to Java `camelCase`. \r\n\r\nI have to use this library at my work every day and I am getting very frustrated by the lack of expressiveness and any assistance to catch the errors at compile-time.\r\n\r\nThe documentation is very incomplete, especially for JDBI 2. \r\nCan you recommend me a better way to build type-safe SQL queries for Java?",
      "Hi @Dominik3011 I'm sorry you had such a poor experience.\r\n\r\nI do agree that lack of documentation was a serious issue in Jdbi 2 days.  You may notice that with Jdbi 3 (the mainline for 3 years now) one of the main features we added was documentation.\r\nI am sorry that Jdbi 2 never got the documentation it deserved, but as a volunteer-only project, we have long ended \"support\" for the old major version.\r\n\r\nAdditionally, jdbi3 introduced support for `snake_case` vs `camelCase` mapping, and in fact using annotations to drive your own arbitrary names if desired.\r\n\r\nRegarding the lack of type safety, Jdbi is \"type safe\" in some respects - with a cooperating database, like Postgres, you could never accidentally store a `CustomObject` into a `int` field.  But you are correct that the SQL syntax is not checked at compile time.  My go-to solution for this is extensive unit testing: if you have a quick test that runs each statement at least once, it is a lot harder to accidentally break things and frustrate yourself and your team.  I would love to have a \"type safe SQL\" construction but it's not entirely clear to me how we could implement that in the constraints of the Java language as it stands today.\r\n\r\nI am sure you would have a more positive experience if you moved on to Jdbi 3, in which we've spent a lot of effort improving documentation, error messages, and otherwise \"sawing off the edges\".  We would love to help you and your team get upgraded if you want to engage constructively, but venting in this manner isn't a good use of anyone's time."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234555dde8ed798d2ed791",
    "number": 1723,
    "body": "This adds documentation, which is _very_ close to the Immutables documentation, for the Freebuilder implementation that I recent added.",
    "head_branch": "document-free-builders",
    "is_a_fork": true,
    "comments": [
      "It seems like these changes have not been released (http://jdbi.org/#_immutables). Do you have an ETA on updating the public docs? Thanks!",
      "@pgr0ss , done as 3.14.2 release, sorry for the delay!"
    ],
    "commit_messages": [
      "Adds documentation for Freebuilder support docs website."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234556dde8ed798d2ed792",
    "number": 1722,
    "body": "Found this bug while trying use this new API released in 3.14.0 in our production app. My implementation did not correctly lookup the builder class in FreeBuilder classes that are not inner classes. This was missed because all the classes in the tests were defined within the test class itself, mea culpa.\r\n\r\n",
    "head_branch": "fix_unnested_freebuilders",
    "is_a_fork": true,
    "comments": [
      "Released as `3.14.1`"
    ],
    "commit_messages": [
      "Properly look up Builder classes for FreeBuilder classes that are not inner classes."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234557dde8ed798d2ed793",
    "number": 1721,
    "body": "Fixes #1686",
    "head_branch": "array-multiple-binding",
    "is_a_fork": false,
    "comments": [
      "Ok, I made the test a lot shorter."
    ],
    "commit_messages": [
      "Array: fix repeated binding of Iterable types\n\nFixes #1686"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234558dde8ed798d2ed794",
    "number": 1719,
    "body": "Almost all of the ~30 JdbiConfig classes follow the same nice pattern with a copy constructor and standard encapsulation. Just these 4 bad apples don't.",
    "head_branch": "config-pattern",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fixup deviations from copy-constructor config pattern"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234559dde8ed798d2ed795",
    "number": 1718,
    "body": "These TODOs point to an old idea of mine that, if we even implement it, will have to wait for a long future anyway, and we don't need these TODOs scattered around to be reminded of the idea.",
    "head_branch": "dead-todos",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "remove moot todos"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623455adde8ed798d2ed796",
    "number": 1717,
    "body": "Fixes #1679",
    "head_branch": "txn-doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Correct transaction docs\n\nFixes #1679"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623455bdde8ed798d2ed797",
    "number": 1716,
    "body": "Fixes #1677",
    "head_branch": "update-one",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update: add `one` helper method\n\nFixes #1677"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623455cdde8ed798d2ed798",
    "number": 1715,
    "body": "Fixes #1709",
    "head_branch": "result-ctx",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623455ddde8ed798d2ed799",
    "number": 1714,
    "body": "Unfortunately this is a (small) breaking change.\r\nBut it's clearly an error, and totally breaks using Jdbi on the modulepath, so it's gotta get fixed.\r\n\r\nFixes #1696",
    "head_branch": "registerkotlin-package",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix package declaration for RegisterKotlinMappers\n\nFixes #1696"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623455edde8ed798d2ed79a",
    "number": 1713,
    "body": "This supersedes #1705 and is intended to be a production ready implementation.\r\n\r\nSome interesting things to note:\r\n\r\n1. FreeBuilder and Immutables use the same properties factory. They only differ in the lookups for value and builder classes. Modifiable uses its own properties factory now.\r\n2. This test https://github.com/jdbi/jdbi/blob/948dbed26f588ad2edf70064f073bf295d3105dd/core/src/test/java/org/jdbi/v3/core/mapper/ImmutablesTest.java#L298-L313 appears to only be working on master b/c Immutables defines the `answer(int)` method even though the spec only has the getter method listed. The lookup of builder setter methods didn't correctly find `setAnswer(int)`. Because FreeBuilder does not create the `answer` method when the spec includes the getter form, the builderSetter lookup failed.\r\n\r\nPlease let me know if there are other things you'd like to see in this PR. I've got some time carved out at work to invest in this, so I'm very motivated to get it into master.",
    "head_branch": "implement_free_builders",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add additional test coverage to FreeBuilder implementation."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623455fdde8ed798d2ed79b",
    "number": 1711,
    "body": "https://github.com/jdbi/jdbi/issues/1706",
    "head_branch": "pg-lob",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Postgres: add simple LargeObject CRUD support\n\nhttps://github.com/jdbi/jdbi/issues/1706"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234560dde8ed798d2ed79c",
    "number": 1705,
    "body": "This is a proof of concept for adding FreeBuilder support to JDBI3 in line with the existing Immutables support. In fact, for the most part, it is implemented with a very slightly modified version of the Immutables code.\r\n\r\nObviously, this is in need of a great deal more polish, but I wanted to open this proof of concept PR to verify if this is a feature the maintainers are interested in adding to the library.",
    "head_branch": "add_freebuilder_support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234561dde8ed798d2ed79d",
    "number": 1704,
    "body": "https://github.com/jdbi/jdbi/pull/1661 allows Immutables property to be annotated with `@ColumnName`, but it requires the setter name to be either the exact getter name, or `set` + column name. None of the two works for the following common scenario:\r\n\r\n```java\r\n    @Value.Immutable\r\n    public interface GetterWithColumnName {\r\n        @ColumnName(\"some_foo_column\")\r\n        int getFoo();\r\n    }\r\n```\r\n\r\nFor the example above, the setter must be named `getFoo` or `setsome_foo_column`, both are kinda awkward and not directly supported by Immutables.\r\n\r\nThis PR addresses it by trying to extract the default Immutables setter name from the getter name.\r\n\r\nAlso a couple of minor cleanups, such as removing the obsolete `SuppressWarnings`.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Support Immutables getter methods with @ColumnName\n\nhttps://github.com/jdbi/jdbi/pull/1661 allows Immutables property to be annotated\nwith @ColumnName, but it requires the setter name to be either the exact getter\nname, or \"set\" + column name. None of the two works for the following common scenario:\n\n```\n    @Value.Immutable\n    public interface GetterWithColumnName {\n        @ColumnName(\"some_foo_column\")\n        int getFoo();\n    }\n```\n\nFor the example above, the setter must be named \"getFoo\" or \"setsome_foo_column\",\nboth are kinda awkward and not directly supported by Immutables.\n\nThis PR addresses it by trying to extract the default Immutables setter name from\nthe getter name.\n\nAlso a couple of minor cleanups, such as removing the obsolete SuppressWarnings."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234562dde8ed798d2ed79e",
    "number": 1702,
    "body": "It's not always possible to use the reified type versions of these extensions (because you're passed a `KClass` instance, for example). In such a case, one must ordinarily use the standard java versions of `onDemand` and `attach`, like so:\r\n\r\n```\r\nval sqlObject = jdbi.onDemand(kclass.java)\r\n```\r\n\r\nAs a small convenience, I've added the obvious extensions, which can be used like this:\r\n\r\n```\r\nval sqlObject = jdbi.onDemand(kclass)\r\n```",
    "head_branch": "kotlin",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add sqlobject extension functions taking KClass arguments."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234563dde8ed798d2ed79f",
    "number": 1698,
    "body": "specializes binds the transaction logic to a Handle, removing use of concurrent maps and thread locals.  should increase efficiency and remove the possibility to leak memory like:\r\nFixes #1697 ",
    "head_branch": "transactionhandler-specialize",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "TransactionHandler: allow specializing to Handle\n\nthis fixes memory leak reported as #1697"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234565dde8ed798d2ed7a0",
    "number": 1694,
    "body": "the fewer IDE warnings, the better :)",
    "head_branch": "dupe",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "remove duplicate dependency"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234566dde8ed798d2ed7a1",
    "number": 1691,
    "body": "Another stab at #1675",
    "head_branch": "strict-null-primitives-deux",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Re-prepare factories on each copy of Arguments, so that they can get updated configuration"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234567dde8ed798d2ed7a2",
    "number": 1690,
    "body": "fix #1689 ",
    "head_branch": "use-kotlin-default-for-null-columns",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use kotlin default for null columns (#1690)\n\n#1689 use default value for non-nullable params\r\nAuthored-by: Ethan Johnson <ethan.johnson@apexcapitalcorp.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234568dde8ed798d2ed7a3",
    "number": 1675,
    "body": "I.e. `.bindByType(\"foo\", null, int.class)` becomes illegal if opted in. I recommend reviewing commit per commit since a method rename is involved.",
    "head_branch": "strict-null-primitives",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234569dde8ed798d2ed7a4",
    "number": 1667,
    "body": "",
    "head_branch": "kotlinpropertyarguments-tostring",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "#1652 useful toString for KotlinPropertyArguments"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623456adde8ed798d2ed7a5",
    "number": 1665,
    "body": "it seems to be more reliable regarding figuring out base types in case of incomplete wildcards.\r\n\r\nFixes #1646",
    "head_branch": "enum-generic-return-type",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Properties: use getExactReturnType instead of resolving the type as it seems to be more reliable\n\nFixes #1646"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623456bdde8ed798d2ed7a6",
    "number": 1664,
    "body": "fixes #1656",
    "head_branch": "bom-no-parent",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "bom: don't inherit parent\n\nfixes #1656"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623456cdde8ed798d2ed7a7",
    "number": 1663,
    "body": "last java 8 compatible release - more upgrades will need fixes especially to dokka",
    "head_branch": "basepom-31",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "basepom 31"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623456ddde8ed798d2ed7a8",
    "number": 1662,
    "body": "fixes #1658",
    "head_branch": "max-cache-size",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "CachingSqlParser: default limit 1000 statements\n\nfixes #1658"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623456edde8ed798d2ed7a9",
    "number": 1661,
    "body": "",
    "head_branch": "immutables-column-name",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Immutables: fix finding of setter when you override @ColumnName"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623456fdde8ed798d2ed7aa",
    "number": 1660,
    "body": "This is a fiirst attempt at bringing the r2dbc-client into the jdbi project as per https://github.com/jdbi/jdbi/issues/1454\r\n\r\nThis is still a WIP and the intent is to get a discussion going around how this might look rather than merge it in it's current form.\r\n\r\nFor now it is more or less a copy of the existing r2dbc-client with minimal changes, git history should be pulled over from the r2dbc-client project too.\r\n\r\nThe main changes from the existing client are:\r\n\r\n- Package renamed from io.r2dbc.client -> org.jdbi.v3.r2dbc\r\n- Various changes to styling etc. to satisfy the checks enforcing the jdbi conventions\r\n- dependency updates\r\n- Removal of Changelog generator file in the test/util\r\n\r\nI've tried to keep the changes as separate from the jdbi project as much as possible, with only miinor changes to the parent pom.\r\n\r\nThe r2dbc pom.xml file will need some cleaning up, I've simply commented out most of the old r2dbc project specific stuff for now, but likely that will all be deleted\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234570dde8ed798d2ed7ab",
    "number": 1657,
    "body": "Hey folks,\r\n\r\nsince we work a lot with postgres and are experimenting with json, I revisited the plugins after using jdbi a lot with the \"stringtype=unspecified\" hack.\r\n\r\nI am happy to see that there are json plugins which seem to work nicely with postgres.\r\n\r\nOne caveat I found reading the docs is that the SQLObject API reads a lot nicer than the fluent API. Since I work mostly with the latter, I was pondering if there is a way to achieve a similarly nice user experience as with the `ConstructorMapper` class. \r\n\r\n```\r\nh.registerRowMapper(ConstructorMapper.of(MyType.class))\r\n  .createQuery(...)\r\n  ....\r\n```\r\n\r\nI came up with the following draft, which would probably require moving the existing Argumentfactory of the postgres plugin to the json plugin (which may be a \"hack\" atm anyway, see `PostgresPlugin` class.\r\n\r\nI am willing to work on this, if of interest, but I could use some hint on how to best implement the RowMapper(-factory?) for the jsonmapper \r\n",
    "head_branch": "json-mapper-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234571dde8ed798d2ed7ac",
    "number": 1655,
    "body": "Editorconfig rules are resolved nearest-to-file-first, but bubble down all the way from the filesystem root (or wherever `root=true`). It's a thing to put editorconfig in your filesystem root for elementary defaults you want to apply everywhere, until overridden inside folders that contextually \"know better\", i.e. project rules.\r\n\r\nTLDR: if we don't care about an editorconfig rule, we shouldn't prevent the user's own setting for it from being applied.",
    "head_branch": "edconf",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "limiting editorconfig resolution isnt useful"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234572dde8ed798d2ed7ad",
    "number": 1649,
    "body": "",
    "head_branch": "ioc-doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Simple DI pattern"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234573dde8ed798d2ed7ae",
    "number": 1648,
    "body": "Fixes #1642",
    "head_branch": "bean-get-method-with-params-1642",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "BindBean: ignore getter methods with parameters\n\nFixes #1642"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234574dde8ed798d2ed7af",
    "number": 1641,
    "body": "…ormat argument.",
    "head_branch": "StatementExceptions_MessageRendering_PARAMTERS_add_missing_String_format_argument",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "StatementExceptions.MessageRendering.PARAMETERS: Add missing String#format argument."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234575dde8ed798d2ed7b0",
    "number": 1639,
    "body": "Flyway 6.1.1 is the latest version.\r\nIt doesn't break any test, and it will do good to users who already use this latest versions in their projects.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bump flyway version to latest"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234576dde8ed798d2ed7b1",
    "number": 1638,
    "body": "",
    "head_branch": "jackson-2.10.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "jackson 2.10.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234577dde8ed798d2ed7b2",
    "number": 1637,
    "body": "",
    "head_branch": "kotlin-1.3.61",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "kotlin 1.3.61"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234578dde8ed798d2ed7b3",
    "number": 1634,
    "body": "1fdb5a32a4044e33f6f20a32ddd78887f2796b4f removed the validation entirely, this PR restores the validation (but more performantly) and adds the test for it.",
    "head_branch": "check-enumstring-chars",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Code review #1634"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234579dde8ed798d2ed7b4",
    "number": 1633,
    "body": "it doesn't behave like you expect\r\n\r\nFixes #1632 ",
    "head_branch": "isenum",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Enum types: don't use isEnum, check assignability instead\n\nit doesn't behave like you expect"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623457adde8ed798d2ed7b5",
    "number": 1630,
    "body": "Move to the new fluent configuration for Flyway as the classic configuration is being deprecated in `Flyway 6.x.x` (see https://github.com/flyway/flyway/issues/2218) and makes `jdbi3-testing` fail if projects use Flyway `6.0.0+`.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use the new fluent configuration for Flyway\n\nMove to the new fluent configuration for Flyway as the classic\nconfiguration is being deprecated in Flyway 6.x.x"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623457bdde8ed798d2ed7b6",
    "number": 1627,
    "body": "Just a small update in documentation suggesting developers to use  `@BindKotlin`, `bindKotlin()` and `KotlinMapper` for kotlin classes.\r\n\r\nMotivation for this PR:\r\nI am using JDBI for a project and was using a data class which has a Boolean property whose name starts with `is` and somehow JDBI was not able to find the named argument parameter when i used `BindBean()` annotation.\r\nBelow example explains the motivation for this PR\r\n\r\nExample:\r\n```\r\ndata class Bar(\r\n    val isFooBar: Boolean\r\n)\r\n\r\n@SqlBatch(\"\"\"\r\nINSERT INTO <tablename> (\r\n    `is_foo_bar`\r\n) VALUES (\r\n    :bar.isFooBar\r\n)\r\nfun insertFoo(@BindBean(\"bar\") fooList: List<Bar>)\r\n\"\"\")\r\n```\r\n\r\nIf we execute the above query it fails on finding the parameter by name `isFooBar` however `:bar.fooBar` works.\r\n\r\nSolution to above was replacing `@BindBean` with `@BindKotlin`",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update documentation for kotlin\n\nAdded a note for suggesting developers to use kotlin bind annotations and methods when using a kotlin class."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623457cdde8ed798d2ed7b7",
    "number": 1626,
    "body": "I found an issue where certain interval values would be off by a microsecond when converted to a duration by jdbi. This PR fixes the issue.\r\n\r\nAlso, this is my first time contributing to this project, please let me know if I need to do anything differently, Thanks ",
    "head_branch": "duration_floating_point_math",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Parentheses. Use BigDecimal for floating point math in DurationArgumentFactory"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623457ddde8ed798d2ed7b8",
    "number": 1622,
    "body": "",
    "head_branch": "prepared-not-prepareable",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623457edde8ed798d2ed7b9",
    "number": 1616,
    "body": "",
    "head_branch": "basepom-version-29",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "upgrade to [basepom] version 29"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623457fdde8ed798d2ed7ba",
    "number": 1615,
    "body": "Bump the dependency  `org.postgresql:postgresql` to `4.2.8`. For the currently used version `4.2.4` a vulnerability is reported by https://github.com/jeremylong/DependencyCheck.",
    "head_branch": "bump-postgresql-to-42_2_8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "bump org.postgresql:postgresql to 4.2.8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234580dde8ed798d2ed7bb",
    "number": 1612,
    "body": "",
    "head_branch": "immutables-column-name",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Immutables: support using `@ColumnName` on Immutables properties"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234581dde8ed798d2ed7bc",
    "number": 1611,
    "body": "Things ain't so good right now\r\n```\r\nBenchmark                                  Mode  Cnt   Score   Error  Units\r\nBeanBindingBenchmark.batchJdbc            thrpt    5  22.338 ± 2.203  ops/s\r\nBeanBindingBenchmark.batchJdbiBean        thrpt    5   1.225 ± 0.097  ops/s\r\nBeanBindingBenchmark.batchJdbiMap         thrpt    5   1.931 ± 0.244  ops/s\r\nBeanBindingBenchmark.batchJdbiNamed       thrpt    5   1.933 ± 0.146  ops/s\r\nBeanBindingBenchmark.batchJdbiPositional  thrpt    5   1.817 ± 0.178  ops/s\r\n\r\nBeanBindingBenchmark.oneJdbc              thrpt    5  40.092 ± 2.037  ops/s\r\nBeanBindingBenchmark.oneJdbi              thrpt    5   0.761 ± 0.030  ops/s\r\n```",
    "head_branch": "bindbean-benchmark",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Import simple bean binding benchmark"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234582dde8ed798d2ed7bd",
    "number": 1609,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix for #1608 (Argument with SQL Object) (#1609)\n\nTrivial ArgumentFactory to support Argument in SQL Object"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234583dde8ed798d2ed7be",
    "number": 1607,
    "body": "from\r\n```\r\nBenchmark                                  Mode  Cnt   Score   Error  Units\r\nBeanBindingBenchmark.batchJdbc            thrpt    5  22.338 ± 2.203  ops/s\r\nBeanBindingBenchmark.batchJdbiBean        thrpt    5   1.225 ± 0.097  ops/s\r\nBeanBindingBenchmark.batchJdbiMap         thrpt    5   1.931 ± 0.244  ops/s\r\nBeanBindingBenchmark.batchJdbiNamed       thrpt    5   1.933 ± 0.146  ops/s\r\nBeanBindingBenchmark.batchJdbiPositional  thrpt    5   1.817 ± 0.178  ops/s\r\n\r\nBeanBindingBenchmark.oneJdbc              thrpt    5  40.092 ± 2.037  ops/s\r\nBeanBindingBenchmark.oneJdbi              thrpt    5   0.761 ± 0.030  ops/s\r\n```\r\n\r\nto\r\n```\r\nBenchmark                                  Mode  Cnt   Score   Error  Units\r\nBeanBindingBenchmark.batchJdbc            thrpt    5  25.705 ± 3.563  ops/s\r\nBeanBindingBenchmark.batchJdbiBean        thrpt    5  13.661 ± 1.808  ops/s\r\nBeanBindingBenchmark.batchJdbiMap         thrpt    5   8.933 ± 1.956  ops/s\r\nBeanBindingBenchmark.batchJdbiNamed       thrpt    5  11.945 ± 2.075  ops/s\r\nBeanBindingBenchmark.batchJdbiPositional  thrpt    5  10.477 ± 1.130  ops/s\r\n\r\nBeanBindingBenchmark.oneJdbc              thrpt    5  43.571 ± 3.520  ops/s\r\nBeanBindingBenchmark.oneJdbi              thrpt    5  15.637 ± 1.170  ops/s\r\n```",
    "head_branch": "bindbean-bench",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "code review, thanks @Alexey1Gavrilov"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234584dde8ed798d2ed7bf",
    "number": 1603,
    "body": "Old feature written by @arteam , updated where needed and refactored. Turns EnumSets into bitstrings like `01001` (meaning enum constants 1 and 4 are present, the rest are absent). I presume postgres has special support for such strings, otherwise this might as well go in core, but I personally don't think it's useful enough for that.\r\n\r\nI'm not sure if we maybe want a Qualifier on this or anything, for backward compatibility. We don't currently have any kind of EnumSet integration though (aside from the Collector, so you need `@SingleValue` for this), and user-written EnumSet features will still be registed later and probably take precedence anyway.\r\n\r\nNot gonna push to merge this, I was just going through dead git branches to clean up and found a feature I wanted to give a fair chance at being merged.",
    "head_branch": "enum_sets",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "release note"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234585dde8ed798d2ed7c0",
    "number": 1601,
    "body": "Works around https://github.com/pgjdbc/pgjdbc/issues/1563\r\n\r\nFixes #1600",
    "head_branch": "pg-double-array",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Test and fix binding Postgres double arrays\nWorks around https://github.com/pgjdbc/pgjdbc/issues/1563\n\nFixes #1600"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234586dde8ed798d2ed7c1",
    "number": 1599,
    "body": "WIP on some thoughts on #1597",
    "head_branch": "qualified-review",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234587dde8ed798d2ed7c2",
    "number": 1598,
    "body": "Fixes #1584",
    "head_branch": "kotlin-propagatenull",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "KotlinMapper: handle @PropagateNull\n\nFixes #1584"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234588dde8ed798d2ed7c3",
    "number": 1597,
    "body": "`core` can qualify a call with any annotation, but `sqlobject` requires `@Qualifier`, which cannot be added to external annotations. `@Qualified` fills that functional gap:\r\n`@Qualified(NonNull.class) String getNonNullString();`",
    "head_branch": "qualified",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234589dde8ed798d2ed7c4",
    "number": 1596,
    "body": "Seems that this was fixed, but I wrote a test case so we can close the issue.\r\n\r\nFixes #1482",
    "head_branch": "kotlin-bind-array",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add test case binding Kotlin List<Enum>\n\nFixes #1482"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623458adde8ed798d2ed7c5",
    "number": 1595,
    "body": "Fixes #1222",
    "head_branch": "freemarker-config",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Freemarker: allow customizing configuration\n\nFixes #1222"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623458bdde8ed798d2ed7c6",
    "number": 1594,
    "body": "Fixes #1274",
    "head_branch": "bind-array",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "SqlStatement: add bindArray convenience methods\n\nFixes #1274"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623458cdde8ed798d2ed7c7",
    "number": 1593,
    "body": "Fixes #974",
    "head_branch": "primitive-doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Better documentation about primitives\n\nFixes #974"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623458ddde8ed798d2ed7c8",
    "number": 1592,
    "body": "Add test returning multiple result sets from a Postgres stored function\r\nCloses our oldest outstanding issue!!! :cake: \r\n\r\nFixes #1392\r\nFixes #76",
    "head_branch": "call-invoke-consume",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "SqlCall: OutParameters processing in Consumer or Function callback\n\nAdd test showing multiple result sets from Postgres\n\nFixes #1392\nFixes #76"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623458edde8ed798d2ed7c9",
    "number": 1591,
    "body": "KotlinSqlObjectPlugin installs SqlObjectPlugin\r\n\r\nFixes #1495",
    "head_branch": "kotlin-sqlobject-install",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Change most JdbiPlugins to be single-install\nKotlinSqlObjectPlugin installs SqlObjectPlugin\n\nFixes #1495"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623458fdde8ed798d2ed7ca",
    "number": 1590,
    "body": "",
    "head_branch": "kotlin-up",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Improve SqlObject method error messaging and upgrade Kotlin"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234590dde8ed798d2ed7cb",
    "number": 1589,
    "body": "Fixes #1576",
    "head_branch": "sqlloc-strip-comments",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "ClasspathSqlLocator: allow configuring comment parsing and deprecate static api\n\nFixes #1576"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234592dde8ed798d2ed7cc",
    "number": 1588,
    "body": "Fixes #1528\r\n\r\nWe can worry about minimizing the size later, rather than continue to have this problem persist.",
    "head_branch": "statement-cache",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge branch 'master' into statement-cache"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234593dde8ed798d2ed7cd",
    "number": 1583,
    "body": "We forgot to expose this to users, they can't currently register their own qualified factories.\r\n\r\nApparently this introduces some ambiguity on existing calls (separate commit), despite `Type` and `QualifiedType` being pretty distinct from each other...",
    "head_branch": "register-qualified",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "ambiguous api change?"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234594dde8ed798d2ed7ce",
    "number": 1582,
    "body": "f3409bc5ecf0cf33f2911fe7ece0c50a738ebb60 finally fixed the build for this on travis ❤️ ",
    "head_branch": "spring5",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "update"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234595dde8ed798d2ed7cf",
    "number": 1581,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed package name and added link in Javadoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234596dde8ed798d2ed7d0",
    "number": 1580,
    "body": "additions to #1579",
    "head_branch": "pr-refactor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "comply with SqlObject doc"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234597dde8ed798d2ed7d1",
    "number": 1579,
    "body": "This fixes up two long-standing problems:\r\n* onDemand does not play well with CreateSqlObject\r\n* SqlObject.withHandle (and Transactional.withTransaction) has surprisingly useless behavior when called outside an onDemand scope since it immediately operates on a closed handle.\r\n\r\nFixes #1011",
    "head_branch": "test-ondemand-failures",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234598dde8ed798d2ed7d2",
    "number": 1578,
    "body": "fixes multiple CVEs",
    "head_branch": "jackson-2.9.9.20190807",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "xenial / openjdk8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234599dde8ed798d2ed7d3",
    "number": 1573,
    "body": "Implemented the EmptyHandling enum in core, leaving out the deprecated value and redesigning the new API to accept an interface (making the enum a convenience, not a restriction).",
    "head_branch": "1572-bind-empty-list",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix test cases that now work"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623459adde8ed798d2ed7d4",
    "number": 1571,
    "body": "See https://github.com/jdbi/jdbi/pull/1563#discussion_r308813666 and #1566",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1571 from maffe/patch-1\n\nTest for #1566"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623459bdde8ed798d2ed7d5",
    "number": 1570,
    "body": "so they don't lookup the mapper every row\r\nalso, since the factory's configuration is constant, we stash it in an enum to only have it once.",
    "head_branch": "optional-specialize",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "OptionalMapperFactory: specialize created OptionalMappers so they don't lookup the mapper every row"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623459cdde8ed798d2ed7d6",
    "number": 1569,
    "body": "Note that previously, the batch (per jdbc) would still be closed with the Handle.\r\nBut of course we can do better.\r\n\r\nFixes #1567",
    "head_branch": "batch-close",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1569 from jdbi/batch-close\n\nPreparedBatch.execute() closes context"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623459ddde8ed798d2ed7d7",
    "number": 1568,
    "body": "I bumped into this when using `@SqlScript` with a resources file - `getRenderedSql()` returns null which causes an NPE and masks the proper exception (very confusing)",
    "head_branch": "fix-limit-npe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1568 from spmason/fix-limit-npe\n\nStatementExceptions: Deal with null RenderedSql"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623459edde8ed798d2ed7d8",
    "number": 1566,
    "body": "Now, both DatabaseValue and name are compared case-sensitively, then insensitively.  DatabaseValue is used preferentially and name only if it's not annotated.",
    "head_branch": "enum-dbval-cr",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1566 from jdbi/enum-dbval-cr\n\nCode review followup from #1563"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623459fdde8ed798d2ed7d9",
    "number": 1565,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typo in chapter Method Decorating Annotations"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345a0dde8ed798d2ed7da",
    "number": 1563,
    "body": "Fixes #1561 ",
    "head_branch": "maffe-enum",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Code review"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345a1dde8ed798d2ed7db",
    "number": 1562,
    "body": "This reverts commit d3cf8ebc330a8a6e8dbbdd02f9d890f3d18df720.\r\n\r\n2.9.9.1 is apparently not available in Maven Central -- all the builds started failing with this commit, pushed to master.\r\n\r\ncc @brianm do you know what happened to this release?\r\nhttps://travis-ci.org/jdbi/jdbi/builds/561463779",
    "head_branch": "revert-jackson",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1562 from jdbi/revert-jackson\n\nRevert \"Address CVE-2019-12814\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345a2dde8ed798d2ed7dc",
    "number": 1561,
    "body": "As requested in #1558",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345a3dde8ed798d2ed7dd",
    "number": 1560,
    "body": "",
    "head_branch": "jackson-cve-update",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345a4dde8ed798d2ed7de",
    "number": 1559,
    "body": "See https://validator.w3.org/checklink?uri=http%3A%2F%2Fjdbi.org",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1559 from maffe/patch-1\n\nFixed some links"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345a5dde8ed798d2ed7df",
    "number": 1555,
    "body": "Fixes #1553",
    "head_branch": "definelist-npe",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1555 from jdbi/definelist-npe\n\n@DefineList NPE with test"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345a6dde8ed798d2ed7e0",
    "number": 1554,
    "body": "I think it's important to make it clear to a casual reader of the logs that a logged statement was truncated. Due to the nature of SQL statemenets, this may not immediately be obvious, for example a statement cut off (at the `|`) like this: \"`SELECT ... FROM ...| WHERE ...`\" would still be a valid SQL statement.\r\n\r\nAdding a \"`[...]`\" to the end of the Statement if anything is cut off makes this more evident.\r\n\r\nThe following test case statements demonstrate the result. I didn't think those were worth adding to the PR as code:\r\n\r\n```\r\nString exception = \"This is a very very long exception that I use for testing\";\r\n\r\nassertEquals(\"[...]\",\r\n\t\tStatementExceptions.limit(exception, 0));\r\nassertEquals(\"This is a [...]\",\r\n\t\tStatementExceptions.limit(exception, 10));\r\nassertEquals(\"This is a very very [...]\",\r\n\t\tStatementExceptions.limit(exception, 20));\r\nassertEquals(\"This is a very very long exception that I use for testin[...]\",\r\n\t\tStatementExceptions.limit(exception, 56));\r\nassertEquals(\"This is a very very long exception that I use for testing\",\r\n\t\tStatementExceptions.limit(exception, 57));\r\nassertEquals(\"This is a very very long exception that I use for testing\",\r\n\t\tStatementExceptions.limit(exception, 60));\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add unit tests to verify behaviour of StatementExceptions.limit"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345a7dde8ed798d2ed7e1",
    "number": 1553,
    "body": "fix: NPE if @DefineList annotated parameter is supplied with an ImmutableList, see https://docs.oracle.com/javase/8/docs/api/java/util/List.html#contains-java.lang.Object-",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345a8dde8ed798d2ed7e2",
    "number": 1551,
    "body": "This PR contains minor fixups I've gathered left and right over time, of beauty flaws that bothered me every time I saw them.\r\n\r\nMicro spring cleaning :)",
    "head_branch": "boyscouting",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345a9dde8ed798d2ed7e3",
    "number": 1549,
    "body": "fixes #1270 \r\n\r\nI've been wanting to patch this since day 1 of using Jdbi because I don't like stray/default values sneaking into my resultsets as a result of a bug producing nulls where there shouldn't be any... It doesn't really make sense to just assume one wants a null to become an arbitrary-ish value when explicitly working with types that don't support nulls.",
    "head_branch": "1270-primitive-null",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1549 from jdbi/1270-primitive-null\n\nLet user configure if db null => java primitive default value or exception"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345aadde8ed798d2ed7e4",
    "number": 1548,
    "body": "Light-hearted idea I had as a fun concept, but I could see it having value for users who like declarative approaches, and to serve as an example of qualified factories.\r\n\r\nIf the `NonnullMapper` idea is shot down, we should at least salvage the API changes so users can actually start using qualified mappers and arguments...\r\n\r\nOne of the new `register` methods created an API ambiguity:\r\n![image](https://user-images.githubusercontent.com/3950300/59983071-71db6d80-961b-11e9-86f0-3b99daa8a113.png)\r\nChanging this to what it should be (`registerArgument(new HStoreArgumentFactory())`) causes test failures. Smells like a fishy design to me but I'm tapped out to tackle it for the moment.",
    "head_branch": "poc-nonnull",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345abdde8ed798d2ed7e5",
    "number": 1544,
    "body": "Fixes #1532",
    "head_branch": "stmt-exc-message-shorten",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1544 from jdbi/stmt-exc-message-shorten\n\nAllow configuring StatementException message generation"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345acdde8ed798d2ed7e6",
    "number": 1543,
    "body": "Replaces #1535 \r\nFixes #1404",
    "head_branch": "propagate-null",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "handle PropagateNull properties first, clean up zipped arrays into a little struct"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345addde8ed798d2ed7e7",
    "number": 1542,
    "body": "Fixes #1538",
    "head_branch": "immutables-is-prefix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1542 from jdbi/immutables-is-prefix\n\nImprove Immutables property detection of `is` prefixes"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345aedde8ed798d2ed7e8",
    "number": 1541,
    "body": "This mirrors the behavior of normal `Batch`, and eliminates an error case\r\nthat is already otherwise correctly handled (by returning a no-element ResultBearing.)",
    "head_branch": "empty-batch",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "PreparedBatch: allow empty batches\n\nThis mirrors the behavior of normal `Batch`, and eliminates an error case\nthat is already otherwise correctly handled (by returning a no-element ResultBearing.)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345afdde8ed798d2ed7e9",
    "number": 1540,
    "body": "",
    "head_branch": "travis-trusty",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1540 from jdbi/travis-trusty\n\nTravis: use `trusty` environment since the now-default `xenial` doesn't do `openjdk8`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345b0dde8ed798d2ed7ea",
    "number": 1535,
    "body": "Adds a new annotation called PropagateNull as a possible solution to nested null objects as in #1404. I initially attempted to use a wrapper that maps the underlying mapper, but this was cumbersome because of the weird result for the column names in any annotations that operated on the parent context. Moving the annotation to the child allows access to parameters in specialize0 and significantly simplifies the code changes. \r\n\r\nI also added the ugly wasNull check and primitive checks to allow propagating null for an entire object if a primitive mapped value is null. Happy to see any changes from contributors if the approach is generally agreed upon.",
    "head_branch": "propagate-null",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345b1dde8ed798d2ed7eb",
    "number": 1531,
    "body": "also avoids NPE when trying to call a builder's setter when mapping reference types that are nullable in the db but nonnull with a default in Immutables-land.",
    "head_branch": "immutables-primitive-default",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "GenericTypes.box; QualifiedType.mapType cleanup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345b2dde8ed798d2ed7ec",
    "number": 1530,
    "body": "",
    "head_branch": "result-iterable-map-private-final",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Follow up: make field `private final` in mapping iterator"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345b3dde8ed798d2ed7ed",
    "number": 1529,
    "body": "Fixes #1527 ",
    "head_branch": "result-iterable-map",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1529 from jdbi/result-iterable-map\n\nAdd ResultIterable<T>.map(Function<T, U>) method"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345b4dde8ed798d2ed7ee",
    "number": 1526,
    "body": "",
    "head_branch": "jdbi-3.8.2-release",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1526 from jdbi/jdbi-3.8.2-release\n\nJdbi 3.8.2 release"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345b5dde8ed798d2ed7ef",
    "number": 1525,
    "body": "Instead of relying on internal cache, the in-built parsers are able to utilize the global JdbiCaches to cache their parsed queries.\r\n\r\nSee discussion at https://github.com/jdbi/jdbi/issues/1523",
    "head_branch": "parsers-use-jdbi-caches",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1525 from bezmax/parsers-use-jdbi-caches\n\nParsers use JdbiCaches instead of internal cache"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345b6dde8ed798d2ed7f0",
    "number": 1524,
    "body": "This recently added test's secondary concerns were a bit too literally taken from the use case to be of any use in a test.",
    "head_branch": "test-meaningfulness",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "make test code more meaningful"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345b7dde8ed798d2ed7f1",
    "number": 1522,
    "body": "",
    "head_branch": "gson2-bom",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1522 from jdbi/gson2-bom\n\nManage jdbi3-gson2 in bom"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345b8dde8ed798d2ed7f2",
    "number": 1521,
    "body": "",
    "head_branch": "jdbi-3.8.1-release",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1521 from jdbi/jdbi-3.8.1-release\n\nJdbi 3.8.1 release"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345b9dde8ed798d2ed7f3",
    "number": 1520,
    "body": "Fixes #1519 by requiring `#comment` token to have a non-`>` character after the `#` character. Adds a test to make sure that comments continue to work while the JSON operator now starts to function.\r\n\r\nPostgres JSON operators are described at https://www.postgresql.org/docs/11/functions-json.html",
    "head_branch": "support-postgres-json-operators",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1520 from haykinson/support-postgres-json-operators\n\nSupport postgres JSON operators"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345bbdde8ed798d2ed7f4",
    "number": 1518,
    "body": "#1516 inspired me to do this. I think forbidding shadowing reduces the possibility of confusion. Having 2 distinct variables with essentially the same name within any given context is a dangerous enough concept on its own.\r\n\r\nThe cleanup revealed a few cases of odd design that I fixed collaterally, like some objects passing their own fields to their own instance methods for no reason. The \"special\" changes are in separate commits, the rest are basically renames. I'm very much open to ideas for better names for any of them, I've lacked the contextual knowledge for a lot of them.\r\n\r\nI checked and found only a single backward-incompatible change, see below.",
    "head_branch": "forbid-shadowing",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fixes after rebase and review"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345bcdde8ed798d2ed7f5",
    "number": 1517,
    "body": "fixes #1516 \r\n\r\nI'm not sure what the comment on the field was all about, but git says it's from 2007 so I'm not tempted to assign too much importance to it. Did not read the class in detail though, so I'm not sure if I may have subtly violated something here or not.",
    "head_branch": "1516-sqlbatch-customizer-null",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1517 from jdbi/1516-sqlbatch-customizer-null\n\nAvoid SqlBatch customizer null argument"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345bddde8ed798d2ed7f6",
    "number": 1515,
    "body": "The details of this PR has been discussed in the following Bug report .\r\n\r\nFixes #1513\r\n\r\n",
    "head_branch": "doc-error-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1515 from ekanshdubey/doc-error-fix\n\n Documentation error fix for ResultBearing.reduceResultSet()"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345bedde8ed798d2ed7f7",
    "number": 1514,
    "body": "A header needs to have a space after the hash, or Github doesn't render it right.",
    "head_branch": "release-notes-header-markdown",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1514 from jdbi/release-notes-header-markdown\n\nFix header markdown in release notes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345bfdde8ed798d2ed7f8",
    "number": 1511,
    "body": "- `one() : T` - throws if zero or multiple rows returned\r\n- `findOne() : Optional<T>` - throws if multiple rows returned\r\n- `first() : T` - throws if zero rows returned\r\n- Deprecate `findOnly()` in favor of `one()`\r\n\r\nFixes #1498",
    "head_branch": "result-iterable-single-row-methods",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1511 from jdbi/result-iterable-single-row-methods\n\nAdd new ResultIterable<T> methods for single row results"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345c0dde8ed798d2ed7f9",
    "number": 1509,
    "body": "",
    "head_branch": "register-many-immutables",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1509 from jdbi/register-many-immutables\n\nConvenience methods for registering many Immutables types"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345c1dde8ed798d2ed7fa",
    "number": 1508,
    "body": "We allow you to use RowView in reducing and collecting operations but mapping is conspicuously absent ",
    "head_branch": "row-view-map",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "RowViewMapper: high-level map operation over RowView"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345c2dde8ed798d2ed7fb",
    "number": 1506,
    "body": "Related to #1207. Adds tests on `KotlinMapper` for `var` vs `val` properties--I was unable to reproduce the problem reported with `var` properties.\r\n\r\nAlso added docs clarifying that `@ColumnName` only applies to mapping, not parameter binding, and outlined which mappers respect the annotation.",
    "head_branch": "column-name-docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1506 from jdbi/column-name-docs\n\nAdd docs and tests for @ColumnName annotation"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345c3dde8ed798d2ed7fc",
    "number": 1505,
    "body": "",
    "head_branch": "oracledb-leftovers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1505 from jdbi/oracledb-leftovers\n\nRemove leftover scaffolding from oracledb testing"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345c4dde8ed798d2ed7fd",
    "number": 1504,
    "body": "End user applications should bring their own Postgres driver, not rely on a transitive dependency through our plugin.  And it breaks servlet environments if you accidentally load the driver twice, once in a parent classloader and once in a child classloader.\r\n\r\nFixes #1503",
    "head_branch": "postgres-provided",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1504 from jdbi/postgres-provided\n\nMark postgres driver jar as provided"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345c5dde8ed798d2ed7fe",
    "number": 1502,
    "body": "",
    "head_branch": "jdk12",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1502 from jdbi/jdk12\n\noraclejdk9 EOL -> openjdk13"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345c6dde8ed798d2ed7ff",
    "number": 1501,
    "body": "Fixes #812",
    "head_branch": "amn",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1501 from jdbi/amn\n\nAdd a simple Automatic-Module-Name"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345c7dde8ed798d2ed800",
    "number": 1500,
    "body": "Fixes #1497\r\n\r\ncc @pennello ",
    "head_branch": "inconsistency",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1500 from jdbi/inconsistency\n\nDetect ambiguous interface multiple inheritance"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345c8dde8ed798d2ed801",
    "number": 1499,
    "body": "",
    "head_branch": "docs-edit",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1499 from jdbi/docs-edit\n\ndoc edits for latest release"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345c9dde8ed798d2ed802",
    "number": 1496,
    "body": "",
    "head_branch": "unmappable-no-col",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1496 from jdbi/unmappable-no-col\n\nUnmappable: require you to remove column from query; release notes fixup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345cadde8ed798d2ed803",
    "number": 1492,
    "body": "I have a hunch that this is at least one reason we get transient concurrent close errors.",
    "head_branch": "st-test-concurrency",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1492 from jdbi/st-test-concurrency\n\nStringTemplate: fix test to properly shut down executor and actually look at the results"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345cbdde8ed798d2ed804",
    "number": 1491,
    "body": "Looks like a regression of https://github.com/joel-costigliola/assertj-guava/issues/33\r\n\r\nFixes #1489",
    "head_branch": "assertj-guava-321",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1491 from jdbi/assertj-guava-321\n\nassertj-guava: update to avoid ranged dependency on assertj-core"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345ccdde8ed798d2ed805",
    "number": 1490,
    "body": "",
    "head_branch": "null-null-null",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1490 from jdbi/null-null-null\n\nJson support: map sql 'null' to and from json 'null'"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345cddde8ed798d2ed806",
    "number": 1488,
    "body": "Fixes #1487 \r\n\r\n@jdbi/contributors This will require a discussion.\r\n\r\nIn a nutshell, the use of a whitelist in our literal definition (rather than just `.` to match any character) causes a `NoViableAltException` for any SQL using non-latin object names.\r\n\r\nThis PR opens up the definition of a literal to include any text that is not part of a comment, quoted text, or parameter marker.\r\n\r\nI had to disable several tests to get the build to pass, and I think we should consider removing them or porting them to a higher level:\r\n\r\n* `TestColonGrammar` is over-testing the grammar definition. The existing tests expect a block of literal characters to be parsed into a single \"literal\" string, but the new grammar treats each character as a separate \"literal.\" It doesn't actually matter, provided the parser doesn't mess with enquoted blocks, and successfully identifies parameter markers. I suggest we take the SQL strings in this test case, and use them to create higher-level tests in `TestColonPrefixSqlParser`, and only test that the right SQL got generated with the expected parameters.\r\n* `TestColonPrefixSqlParser` and `TestHashPrefixSqlParser` both have a test named `testBailsOutOnInvalidInput` which expects an exception for SQL strings where the parameter prefix character (`:` or `#`) is followed by a non-identifier character. I would suggest that this doesn't matter. We should just treat `:` or `#` as a literal if it is not followed by identifier characters.\r\n\r\nThis should get rid of most (if not all) `NoViableAltException`s in Jdbi.",
    "head_branch": "no-viable-alt",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1488 from jdbi/no-viable-alt\n\nLoosen grammar definitions to treat any non-comment or -parameter as a literal"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345cedde8ed798d2ed807",
    "number": 1486,
    "body": "",
    "head_branch": "json-view",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1486 from jdbi/json-view\n\nAdd simple support for Jackson `@JsonView`"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345cfdde8ed798d2ed808",
    "number": 1485,
    "body": "This PR simply documents that for Kotlin ResultSet mapping helpers to work, the Kotlin compiler's JVM target version must be 1.8 instead of the default 1.6.  ",
    "head_branch": "document-kotlin-compiler-target",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1485 from rigoleto/document-kotlin-compiler-target\n\nDocument Kotlin compiler target version needed for ResultSet mapping"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345d0dde8ed798d2ed809",
    "number": 1484,
    "body": "Partial solution for #1382.\r\n\r\nNested calls on the same thread to any combination of these methods will share the same handle:\r\n\r\n* `Jdbi.withHandle()`\r\n* `Jdbi.useHandle()`\r\n* `Jdbi.withExtension()`\r\n* `Jdbi.useExtension()`\r\n* `Jdbi.inTransaction()`\r\n* `Jdbi.useTransaction()`\r\n* Any method of an object obtained from `Jdbi.onDemand()`\r\n\r\nFixes #1350 by allowing nested `inTransaction` / `useTransaction` calls (on `Jdbi` or `Handle`) under the same transaction isolation rules currently in force for the `@Transaction` annotation.\r\n\r\nTODO\r\n\r\n* [x] Update release notes\r\n* [x] Refactor threadlocal in Jdbi to store HandleSupplier instead of Handle, to play nice with extensions\r\n* [x] Add tests for on-demand as the outer method call\r\n* [x] Add tests for other combinations of nested calls from above list\r\n* [x] Move nested transaction handling from SQL Object's `TransactionDecorator` into `Handle.inTransaction` in core.",
    "head_branch": "threadlocal-handles",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Address code review comments"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345d1dde8ed798d2ed80a",
    "number": 1481,
    "body": "Fixes #1103",
    "head_branch": "config-chm",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1481 from jdbi/config-chm\n\nReplace synchronized WeakHashMap with ConcurrentHashMap"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345d2dde8ed798d2ed80b",
    "number": 1480,
    "body": "Upgrade antlr-runtime to 3.5.2, which corrects the dependencies to no longer\r\ndrag in `stringtemplate` and `antlr` as `compile` scoped dependencies.\r\n\r\nWhen combined with #1479 and #1335, we have no shade-worthy dependencies left!\r\nThe only strong dependencies are on `antlr-runtime`, `geantyref`, and `slf4j-api`.\r\nFixes #1332",
    "head_branch": "remove-shade",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1480 from jdbi/remove-shade\n\nRemove shading once and for all."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345d3dde8ed798d2ed80c",
    "number": 1479,
    "body": "Use either weak ClassLoader maps or new JdbiCache, which implements\r\na shared cache per Jdbi instance\r\n\r\nFixes #1453",
    "head_branch": "jdbi-cache",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1479 from jdbi/jdbi-cache\n\nRemove ExpiringMap dependency; introduce JdbiCache"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345d4dde8ed798d2ed80d",
    "number": 1478,
    "body": "Fixes #1477 \r\n\r\n* Add `EnumSqlArrayTypeFactory`, which respects the `Enums.enumStrategy` configuration property.\r\n* Register the above factory out-of-the-box\r\n* Remove redundant use of optionals in EnumMapperFactory private methods\r\n* Move EnumMapperFactory to an `enums.internal` package\r\n* Upgrade assertj-core dependency version, which was failing the build",
    "head_branch": "enum-sql-array-type-factory",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1478 from jdbi/enum-sql-array-type-factory\n\nSupport binding of Java enums to SQL arrays out of the box"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345d5dde8ed798d2ed80e",
    "number": 1476,
    "body": "see #1474 ",
    "head_branch": "suppress-finally-exception",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "suppress exception if Statement close method raises"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345d7dde8ed798d2ed80f",
    "number": 1475,
    "body": "Fixes #1473 ",
    "head_branch": "resolve-generic-sql-object-parameters",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix #1473: resolve generic SQL object method parameters in the context of the SQL object type"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345d8dde8ed798d2ed810",
    "number": 1472,
    "body": "Eclipse's `ecj` is unhappy with the `EnumSet::add` of a wildcard type and causes an error.\r\nFactoring it out into a named type `E` and making the return type `Collector<E` gives it just enough more information to make it happy.",
    "head_branch": "eclipse-enum",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "EnumSetCollectorFactory: ecj compile fix\n\nEclipse's `ecj` is unhappy with the `EnumSet::add` of a wildcard type and causes an error.\nFactoring it out into a named type `E` seems to make it happier."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345d9dde8ed798d2ed811",
    "number": 1471,
    "body": "",
    "head_branch": "#1295-kotlin-constructors",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix #1295"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345dadde8ed798d2ed812",
    "number": 1469,
    "body": "Immutables helpfully transcribes `byte[]` to `byte...` on the builder methods, which causes `MethodHandles.unreflect` to create an unexpected _varargs argument collector_ method handle.  This ends up leading to a super confusing\r\n\r\n```\r\njava.lang.ClassCastException: [B cannot be cast to java.lang.Number\r\n\tat sun.invoke.util.ValueConversions.primitiveConversion(ValueConversions.java:242)\r\n\tat sun.invoke.util.ValueConversions.unboxByte(ValueConversions.java:85)\r\n\tat org.jdbi.v3.core.internal.exceptions.Unchecked.lambda$5(Unchecked.java:86)\r\n\tat org.jdbi.v3.core.mapper.ImmutablesTest.testUnreflect(ImmutablesTest.java:205)\r\n```\r\n\r\nwhen the reflection machinery attempts to unbox a `byte[]`.",
    "head_branch": "immutables-bytearr",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1469 from jdbi/immutables-bytearr\n\nFix Immutables byte[] properties"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345dbdde8ed798d2ed813",
    "number": 1468,
    "body": "this should introduce a build failure until #1465 is merged",
    "head_branch": "appease-the-french",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1468 from jdbi/appease-the-french\n\nChange one of the Travis builds to `fr_FR` so we don't inadvertently introduce locale deps"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345dcdde8ed798d2ed814",
    "number": 1466,
    "body": "'TestJavaTime' in the PostgreSQL module fails on Windows but works on\r\nLinux. I think this is caused by the embedded Postgres being used, anyone have an input on this?\r\n\r\nExample failing test output:\r\n```\r\norg.junit.ComparisonFailure: \r\nExpected :2019-02-18T18:06:07.957086900Z\r\nActual   :2019-02-18T18:06:07.957087Z\r\n```\r\n\r\nEDIT: By the way the tests will randomly pass/fail.",
    "head_branch": "update-assertj-3.12",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1466 from FredDeschenes/update-assertj-3.12\n\nUpdate to AssertJ 3.12"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345dddde8ed798d2ed815",
    "number": 1465,
    "body": "Fixes #1464",
    "head_branch": "jdbi-1464-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1465 from FredDeschenes/jdbi-1464-fix\n\nFixed platform-dependent test"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345dedde8ed798d2ed816",
    "number": 1461,
    "body": "",
    "head_branch": "property-annotation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1461 from jdbi/property-annotation\n\nadd `@Unmappable` to disable property mapping of read-only properties like `@Value.Derived`"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345dfdde8ed798d2ed817",
    "number": 1460,
    "body": "fixes #1459 ",
    "head_branch": "1459-vavr",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Test actual null type"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345e0dde8ed798d2ed818",
    "number": 1458,
    "body": "Of 150–160 tests using `H2DatabaseRule`, only 93 actually use the legacy `something` table it automatically creates.\r\n\r\nThis PR isolates the creation of the table to a `withSomething()` config method, makes it opt-in so the current and any new tests built on it will explicitly depend on it, and existing tests that don't depend on it no longer cause it to be created.\r\n\r\nA `DatabaseRule`'s job is to set up a connection, not to spawn cookie cutter test materials. Half the time it goes unused since a good test is encapsulated and manages its own setup, and it can influence test writers to write their tests to suit the existing table rather than letting the test data takes its own natural form (e.g. different datatypes or more expressive names). For this reason I've marked the method `@Deprecated`, but it's a soft preference so if someone _really_ objects I'm ok with leaving it open to guiltless use.\r\n\r\nScratch 1 `TODO` off the list 😃 ",
    "head_branch": "h2-legacy-something",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1458 from jdbi/h2-legacy-something\n\nIsolate H2DatabaseRule legacy table creation"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345e1dde8ed798d2ed819",
    "number": 1457,
    "body": "If you remove the type arg, you'll see that mapping happens according to the `getClass()` type of the value, regardless of the type specified in our API call. Since gson offers passing the type as an arg, we should do so, as users will expect it.",
    "head_branch": "gson-type-arg",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1457 from jdbi/gson-type-arg\n\npass the type arg to gson for serialization"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345e2dde8ed798d2ed81a",
    "number": 1456,
    "body": "This modifies JDBI's `JacksonJsonMapper` so that generic types are passed to `ObjectMapper`.\r\n\r\nAllows serializing Jackson polymorphic types when the base type is specified as a generic argument. E.g., `Foo<Bar>` where `Bar` has `JsonTypeInfo` annotation. Otherwise Jackson will see this type as simply `Foo` and will not be aware of the `JsonTypeInfo` on the contained type. ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add named parameter in jackson test"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345e3dde8ed798d2ed81b",
    "number": 1455,
    "body": "",
    "head_branch": "dnb-getconn",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "DefineNamedBindings: check getConnction works (e.g. sql array uses it)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345e4dde8ed798d2ed81c",
    "number": 1452,
    "body": "This allows setting it project-wide via the SqlObjects config (like for AnnotationSqlLocator) without having to copy the code in the project (as the locate function was private).\r\n\r\nNot sure if some things should be renamed as this can get confusing with the other ClasspathSqlLocator in jdbi3-core.",
    "head_branch": "easier-classpath-locator-config",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Split SqlObject classpath locator to it's own class (#1452)\n\n* Split classpath SQL locator to it's own class\r\n\r\nThis allows setting it project-wide via the SqlObjects config."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345e5dde8ed798d2ed81d",
    "number": 1450,
    "body": "",
    "head_branch": "row-view-qualified-columns",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "RowView: add support for columns with QualifiedType"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345e6dde8ed798d2ed81e",
    "number": 1449,
    "body": "POC to discuss around, related to the discussion about LocalDate timezones and generally more vendor-specific support in Jdbi.\r\n\r\nfixes #1446 ",
    "head_branch": "getsetobject",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1449 from jdbi/getsetobject\n\ngetObject/setObject factories for LocalDate et al"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345e7dde8ed798d2ed81f",
    "number": 1448,
    "body": "![image](https://user-images.githubusercontent.com/3950300/52267126-84892a80-2938-11e9-9a9b-0d83bc4523f7.png)\r\n",
    "head_branch": "definenamed-refactor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1448 from jdbi/definenamed-refactor\n\nPost-merge refactor #1443"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345e8dde8ed798d2ed820",
    "number": 1447,
    "body": "Fixes #1433 \r\n@EmmaSimon, let us know if you have suggestions, or if this is helpful :smile_cat: ",
    "head_branch": "ha-docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1447 from jdbi/ha-docs\n\nBasic high availability docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345e9dde8ed798d2ed821",
    "number": 1445,
    "body": "Just an idea I had to \"complete\" the qualtyp api. We support `with`ing with `Annotation...`, `Class<Annotation>...`, and `Collection<Annotation>`, so we should logically also support `Collection<Class<Annotation>>` for those times when you have a `Set` of qualifier classes and the like. Users shouldn't have to reduce highlevel collections to arrays or know about `AnnotationFactory`.\r\n\r\nThe problem is the type erasure across method overloads, so if we really wanna be able to support more than 1 thing we need to name methods differently based on their arguments.\r\n\r\nI'm open to name changes and other thoughts.",
    "head_branch": "qualified-api",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "support collection<class<>>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345eadde8ed798d2ed822",
    "number": 1444,
    "body": "Fixes #1440 \r\nThis is a small source breaking change.  It should not be a binary incompatible change -- checked exceptions are compiler fiction -- but if anyone calls `JdbiPlugin` methods themselves (why would they??) they may now have to handle it.",
    "head_branch": "plugin-throw",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1444 from jdbi/plugin-throw\n\nJdbiPlugin throws SqlException"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345ebdde8ed798d2ed823",
    "number": 1443,
    "body": "Fixes #1416 ",
    "head_branch": "dnb-stmt",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1443 from jdbi/dnb-stmt\n\nDefineNamedBindings: use a proxy Statement rather than inspecting for `NullArgument`"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345ecdde8ed798d2ed824",
    "number": 1442,
    "body": "#1388 is a breadcrumb trail to legacy fallback code that I remove with this. The bad behavior could be triggered by an empty sql file (as opposed to a missing file according to #1388 , probably using an old version of the code).\r\n\r\nPart of the fix is a refactor of the lookup logic, which was irregularly speckled with external concerns... I think the result is better structured and easier to understand.",
    "head_branch": "1388-locator",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1442 from jdbi/1388-locator\n\nFix remnant legacy related to #1388"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345eddde8ed798d2ed825",
    "number": 1441,
    "body": "fixes #1388",
    "head_branch": "1388-locator",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345eedde8ed798d2ed826",
    "number": 1439,
    "body": "> I don't know why this was ever added in the first place\r\n\r\n— Steven, 1 post below, 10 minutes from now\r\n\r\n^^",
    "head_branch": "remove-messageformat",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1439 from jdbi/remove-messageformat\n\nKeep using String.format instead of MessageFormat"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345efdde8ed798d2ed827",
    "number": 1438,
    "body": "see `publish-docs.sh`",
    "head_branch": "publish-docs-script",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "windows script"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345f0dde8ed798d2ed828",
    "number": 1437,
    "body": "we actually only need the ConfigRegistry instead, and that lets us move\r\na fair amount of work out of the lambdas in the json handling, which should be a minor performance improvement",
    "head_branch": "json-ctx",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1437 from jdbi/json-ctx\n\njson: remove use of StatementContext, simplify mapper / argument lambdas"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345f1dde8ed798d2ed829",
    "number": 1432,
    "body": "This simple fix improves enum mapping performance.  Previously, the cache was not effective because the mapper is re-created for every jdbi operation you do.\r\n\r\nBefore:\r\nhttps://gist.github.com/stevenschlansker/afc65d80f895fa1000f6e383d16cc2bc\r\n```\r\nEnumBenchmark.mapEnumCaseInsensitive         thrpt    5   2424.413 ± 108.752  ops/s\r\nEnumBenchmark.mapEnumCaseSensitive thrpt 5 12461.018 ± 302.860 ops/s\r\n```\r\n\r\nAfter:\r\nhttps://gist.github.com/stevenschlansker/b7769735ce3205f017f2ae5cf398f933\r\n```\r\nEnumBenchmark.mapEnumCaseInsensitive         thrpt    5  10364.923 ± 426.301  ops/s\r\nEnumBenchmark.mapEnumCaseSensitive thrpt 5 13975.079 ± 544.881 ops/s\r\n```\r\n\r\nSo in this microbenchmark, expanding the scope of the cache almost eliminates the performance penalty to using loosely cased enums, and in fact makes the fast case even faster.\r\n\r\nUnfortunately this PR will conflict with #1427 but it can probably be folded in fairly easily.",
    "head_branch": "enum-caching",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix enum case insensitive matching to actually work"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345f2dde8ed798d2ed82a",
    "number": 1431,
    "body": "I wanted to quantify the penalty for using enums case insensitively, so I wrote a basic benchmark.  I tested it against the code in `master` (roughly 3.6.0) versus the latest version of #1427 \r\n\r\nFull results\r\nmaster: https://gist.github.com/stevenschlansker/afc65d80f895fa1000f6e383d16cc2bc\r\n#1427: https://gist.github.com/stevenschlansker/c9baae77be3775868a88474074e04999\r\n\r\nShort version: there's a dramatic performance regression in microbenchmark both in the case-insensitive compare as well as the normal case sensitive compare.\r\n\r\nBefore:\r\n```\r\nEnumBenchmark.mapEnumCaseInsensitive         thrpt    5   2424.413 ± 108.752  ops/s\r\nEnumBenchmark.mapEnumCaseSensitive thrpt 5 12461.018 ± 302.860 ops/s\r\n```\r\n\r\nAfter:\r\n```\r\nEnumBenchmark.mapEnumCaseInsensitive         thrpt    5   335.997 ±  57.533  ops/s\r\nEnumBenchmark.mapEnumCaseSensitive thrpt 5 6441.229 ± 117.578 ops/s\r\n```\r\n\r\nWhile microbenchmark performance isn't the only criteria we're going by, I think it's worth investigating such a dramatic regression.",
    "head_branch": "enum-bench",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1431 from jdbi/enum-bench\n\nbenchmark: Enum mapping case sensitivity"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345f3dde8ed798d2ed82b",
    "number": 1430,
    "body": "fixes #1418 \r\nfixes #1421 \r\n\r\nmoved StatementContext docs to advanced, moved Templating docs down below more critical things like result mapping",
    "head_branch": "config-docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1430 from jdbi/config-docs\n\nbasic user configuration docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345f4dde8ed798d2ed82c",
    "number": 1429,
    "body": "javadocs are currently not being built, see https://github.com/jdbi/jdbi.github.io/issues/5\r\njavadocs don't build on jdk11 currently so toolchain it to jdk8 for now, and clean up some transitional profile stuff that isn't needed now that jdk9 is dead.",
    "head_branch": "doc-fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1429 from jdbi/doc-fix\n\nfix javadoc building"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345f5dde8ed798d2ed82d",
    "number": 1428,
    "body": "Hello @jdbi Team :)\r\n\r\nThis is to address https://github.com/jdbi/jdbi/issues/1418#issuecomment-455789697.",
    "head_branch": "patch-1418",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Unused bindings hint in exception message, refs #1418"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345f6dde8ed798d2ed82e",
    "number": 1427,
    "body": "@qualidafial 's approach to fix #1273 fix #1354 fix #1197 \r\n\r\nCreates 2 qualified factories, `QualifiedEnumArgumentFactory` and `QualifiedEnumMapperFactory`,both handling all 3 strategies. Shares a lot of identical code with the other PR (annotations, tests, etc) and has some minor differences like how `Enums` represents its options (enum vs classes) that can be swapped around later.\r\n\r\nThe point of these PRs is for you two to decide on which architecture you wanna roll with. Finer details can come later. I'm mildly in favor of @qualidafial 's approach but I'm perfectly fine with either one.",
    "head_branch": "#1273-matt",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1427 from jdbi/#1273-matt\n\nenum handling @ qualidafial"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345f7dde8ed798d2ed82f",
    "number": 1426,
    "body": "@stevenschlansker 's approach to fix #1273 fix #1354 fix #1197\r\n\r\nCreates an argument+mapper abstraction `EnumStrategy` implemented by the 2 strategies, and a front handler `Unqualified ` that delegates unqualified enums to one of them. Shares a lot of identical code with the other PR (annotations, tests, etc) and has some minor differences like how `Enums` represents its options (enum vs classes) that can be swapped around later.\r\n\r\nThe point of these PRs is for you two to decide on which architecture you wanna roll with. Finer details can come later. I'm mildly in favor of @qualidafial 's approach but I'm perfectly fine with either one.",
    "head_branch": "#1273-steven",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345f8dde8ed798d2ed830",
    "number": 1425,
    "body": "Hi guys,\r\nthis is my take on issue https://github.com/jdbi/jdbi/issues/602",
    "head_branch": "postgres-custom-types",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add support for postgres custom types (#1425)\n\nadd support for postgres custom types"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345f9dde8ed798d2ed831",
    "number": 1424,
    "body": "Found a small typo 🥇 ",
    "head_branch": "fix-documentation-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typo in Javadoc (#1424)\n\n* Fix typo in documentation\r\n\r\n* Remove unnecessary import"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345fadde8ed798d2ed832",
    "number": 1423,
    "body": "fixes #1422\r\n\r\nAdd 1ms of margin to the assertions in case travis is having a fast day, because the subject offsetdatetime at offset +2 gets sorted after the test-end offsetdatetime in zulu if it has the same time component.",
    "head_branch": "#1422",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1423 from jdbi/#1422\n\nfix #1422"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345fbdde8ed798d2ed833",
    "number": 1420,
    "body": "",
    "head_branch": "jdbi-3.6.0-release",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1420 from jdbi/jdbi-3.6.0-release\n\nJdbi 3.6.0 release"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345fcdde8ed798d2ed834",
    "number": 1419,
    "body": "From #1418 \r\n\r\n@sarxos, hopefully you will find this useful?",
    "head_branch": "sqlobject-unusedbinding",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1419 from jdbi/sqlobject-unusedbinding\n\nAdd `@AllowUnusedBindings` sqlobject customizer"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662345fddde8ed798d2ed835",
    "number": 1417,
    "body": "this saves about 30% build time on travis!",
    "head_branch": "travis-zoom",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1417 from jdbi/travis-zoom\n\nbuild: don't run `mvn verify` twice"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662345fedde8ed798d2ed836",
    "number": 1415,
    "body": "Fixes #1413 ",
    "head_branch": "dokka-ci",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "build: dokka skips non-doc Travis same as javadoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234600dde8ed798d2ed837",
    "number": 1412,
    "body": "",
    "head_branch": "embedded-pg",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1412 from jdbi/embedded-pg\n\nlatest otj-pg-embedded"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234601dde8ed798d2ed838",
    "number": 1411,
    "body": "Fixes #1405 \r\nFixes #1406 ",
    "head_branch": "error-txn",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1411 from jdbi/error-txn\n\nFix handle close + transaction handling errors"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234602dde8ed798d2ed839",
    "number": 1410,
    "body": "this moves some additional things, e.g. license checking, to style validation and out of test",
    "head_branch": "skip-extended",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1410 from jdbi/skip-extended\n\nbuild: ci-test now uses `skip-all`"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234603dde8ed798d2ed83a",
    "number": 1409,
    "body": "This class probably should never have existed",
    "head_branch": "npe-arg",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1409 from jdbi/npe-arg\n\nRemove LoggableToStringOrNPEArgument"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234604dde8ed798d2ed83b",
    "number": 1408,
    "body": "Fold functionality back into fewer files, factor out common logic",
    "head_branch": "enum-take-2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234605dde8ed798d2ed83c",
    "number": 1407,
    "body": "",
    "head_branch": "#1312-document-qualifiedtype",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1407 from jdbi/#1312-document-qualifiedtype\n\nWIP: document qualified types"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234606dde8ed798d2ed83d",
    "number": 1403,
    "body": "This is intended to be a reasonable compromise between Eclipse and IntelliJ standards.  Enforcing import order adds some pain but reduces diff churn due to fighting IDEs and IMO the benefits outweigh the unfortunate cost.",
    "head_branch": "import-order",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1403 from jdbi/import-order\n\ncheckstyle: Import order"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234607dde8ed798d2ed83e",
    "number": 1402,
    "body": "A number of bugs have been fixed, and a couple of new rules to exclude, and failures to fix...",
    "head_branch": "update-pmd",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1402 from jdbi/update-pmd\n\nLatest PMD, rules fixups."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234608dde8ed798d2ed83f",
    "number": 1401,
    "body": "",
    "head_branch": "#1357-lombok-tests",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234609dde8ed798d2ed840",
    "number": 1400,
    "body": "#1398 ",
    "head_branch": "favicon",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "explicit private docinfo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623460adde8ed798d2ed841",
    "number": 1399,
    "body": "This simplifies contributor setup instructions by removing the need to set `maven.multiModuleProjectDirectory` and instead using maven dependency references to an artifact we inject into plugin dependencies.",
    "head_branch": "policy",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1399 from jdbi/policy\n\nbuild: cleanup orphaned files, move config into `policy` module"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623460bdde8ed798d2ed842",
    "number": 1398,
    "body": "Everybody deserves to look nice :)\r\n\r\n![image](https://user-images.githubusercontent.com/3950300/50993224-67b82d80-1519-11e9-8ed3-07d5e0bf3bf2.png)\r\n\r\nasciidoctor needs to see a doctor:\r\n\r\n![image](https://user-images.githubusercontent.com/3950300/50993275-87e7ec80-1519-11e9-8387-95e4c1ab625b.png)\r\n",
    "head_branch": "favicon",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1398 from jdbi/favicon\n\njdbi.org favicon"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623460cdde8ed798d2ed843",
    "number": 1397,
    "body": "Creating PR to ensure branch is retained by Github after I delete it.",
    "head_branch": "row-reducer-with-updates-and-batches",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623460ddde8ed798d2ed844",
    "number": 1396,
    "body": "fixes #1395 ",
    "head_branch": "polish-qualtype",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1396 from jdbi/polish-qualtype\n\nPolish QualifiedType and related code"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623460edde8ed798d2ed845",
    "number": 1394,
    "body": "",
    "head_branch": "square-logo",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1394 from jdbi/square-logo\n\nAdd square logo suitable for use with services that make you crop logos to square"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623460fdde8ed798d2ed846",
    "number": 1393,
    "body": "Followup from #1384 since I never got a chance to review it.\r\n\r\nReduce a bit of the editorialization, make a new `Cookbook` section to start stashing \"recipes\"\r\nAlso make it clear that this is a *jdbc* limitation, not a SqlParser limitation.",
    "head_branch": "like-fixup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Cleanup #1384\n\nReduce a bit of the editorialization, make a new `Cookbook` section to start stashing \"recipes\"\nAlso make it clear that this is a *jdbc* limitation, not a SqlParser limitation."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234610dde8ed798d2ed847",
    "number": 1391,
    "body": "Fixes #1387 \r\n\r\nNote that this change attempts to be conservative -- we only change lexing rules that happen *after* we already see a leading `[`, and simply ignore anything that looks like a slice.  I've verified that it is not valid syntax (parse error) to try to bind a parameter into an array slice, so there isn't any ambiguity as to whether `[:2]` is a open ended slice or a named parameter slice, as the latter is a Postgres syntax error.",
    "head_branch": "slice-parse",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234611dde8ed798d2ed848",
    "number": 1390,
    "body": "fixes #1389 IMO. @toadzky got any input on this?\r\n\r\nWill need some more work to make it backward compatible. I'm thinking of a boolean flag `parseParentheses` (default false) that can be passed in by constructor and setter.\r\n\r\nThis change makes parameters more usable by allowing you to embed them inside an expression that would otherwise parse wrongly, like `#[var]::UUID`, where the parameter would be interpreted as being named `var::UUID` instead of just `var`.\r\n\r\nI think it would be neat to add `$` as a supported marker character to have a nice set of 3, and give each marker its own different set of optional parentheses: `:()`, `#[]`, and `${}`, to suit different styles and have totally different characters to support as much unknown syntax as possible.\r\n\r\nOn-hold because it needs discussion.",
    "head_branch": "#1389-interpret-enclosed-params",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234612dde8ed798d2ed849",
    "number": 1386,
    "body": "fixes #1038 ",
    "head_branch": "#1038-null-byte-arrays",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1386 from jdbi/#1038-null-byte-arrays\n\nfix null byte array typing"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234613dde8ed798d2ed84a",
    "number": 1385,
    "body": "There is a security issue with jackson prior to 2.8.11.1",
    "head_branch": "jackson-security-update",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "goto 2.9.8 because of publishing gap"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234614dde8ed798d2ed84b",
    "number": 1384,
    "body": "fixes #969 ",
    "head_branch": "#969-like-clauses",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1384 from jdbi/#969-like-clauses\n\nDocument LIKE clauses"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234615dde8ed798d2ed84c",
    "number": 1381,
    "body": "Fixes #1364 ",
    "head_branch": "lombok-doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add doc section for making Jdbi and Lombok play nice together"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234616dde8ed798d2ed84d",
    "number": 1380,
    "body": "",
    "head_branch": "autoloading-note",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "autoloading note"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234617dde8ed798d2ed84e",
    "number": 1379,
    "body": "fixes #1372",
    "head_branch": "#1372-serviceloader-manifests",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1379 from jdbi/#1372-serviceloader-manifests\n\nadd missing sqlite serviceloader manifest"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234618dde8ed798d2ed84f",
    "number": 1378,
    "body": "fixes #1377 \r\n\r\nI haven't really considered this change from a conservative or nitpicky point of view yet, but all this really is, is making a constant for `if (list == null) list = emptyList()`, so it can't really be a problem? The only \"risk\" to this is that you leave the text representation of an empty list in the query up to the TemplateEngine, but that's what allows it to treat it as a falsy conditional in the first place.\r\n\r\n@shelocks",
    "head_branch": "#1377-bindlist-null",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1378 from jdbi/#1377-bindlist-null\n\nfix #1377: BindList conditionals with null and StringTemplate"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234619dde8ed798d2ed850",
    "number": 1376,
    "body": "fixes #163 \r\nfixes #422 \r\n\r\nEmbedded the generated v2 javadoc because there's no online copy anymore, and fixed a whole bunch of href issues in all the links in the v2 site (wrong root, bad terminator that made it try to load a directory as a resource, etc). All hail the power of regex. You can test it by just running the resources folder from an http server after extracting the zip to `apidocs`.",
    "head_branch": "#163-#422-fix-jdbi2-docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1376 from jdbi/#163-#422-fix-jdbi2-docs\n\n#163 #422 fix jdbi2 docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623461adde8ed798d2ed851",
    "number": 1375,
    "body": "I thought this section should explain _why_ users need to do something as odd as using attribute syntax to perform what the API calls a binding. Came about because  #1374 made me look at this part of the manual. Recently voiced concern about the security of using attributes comes to mind too.",
    "head_branch": "#1374-doc-addition",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1375 from jdbi/#1374-doc-addition\n\n #1374 explain BindList a bit more"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623461bdde8ed798d2ed852",
    "number": 1371,
    "body": "fixes #605",
    "head_branch": "#605-cache-sqlobject-config",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1371 from jdbi/#605-cache-sqlobject-config\n\n#605 Cache method-level configs after applying configurers"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623461cdde8ed798d2ed853",
    "number": 1370,
    "body": "For our tests, to use instead of the older mechanisms. Also includes a sanity test for the existing dbs.",
    "head_branch": "sqlite-jdbirule",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1370 from jdbi/sqlite-jdbirule\n\nSqlite jdbirule"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623461ddde8ed798d2ed854",
    "number": 1369,
    "body": "second pass at results,\r\n\r\n```\r\n# JMH version: 1.21\r\n# VM version: JDK 11.0.1, OpenJDK 64-Bit Server VM, 11.0.1+13\r\n# VM invoker: /usr/lib/jvm/java-11-openjdk-11.0.1.13-4.fc29.x86_64/bin/java\r\n# VM options: <none>\r\n# Warmup: 5 iterations, 2 s each\r\n# Measurement: 5 iterations, 5 s each\r\n# Timeout: 10 min per iteration\r\n# Threads: 1 thread, will synchronize iterations\r\n```\r\n\r\nBase qualifier benchmark, no cache:\r\n```\r\nBenchmark                                     Mode  Cnt      Score     Error  Units\r\nQualifiersBenchmark.getQualifiersAnnotated    avgt    5    218.109 ±   7.360  ns/op\r\nQualifiersBenchmark.getQualifiersUnannotated  avgt    5    141.886 ±   9.804  ns/op\r\nQualifiersBenchmark.mapQualifiedBean          avgt    5  22283.394 ± 601.425  ns/op\r\nQualifiersBenchmark.mapUnqualifiedBean        avgt    5  22025.249 ± 659.755  ns/op\r\n```\r\n\r\nBenchmark again, with added qualifier cache:\r\n```\r\nBenchmark                                     Mode  Cnt      Score      Error  Units\r\nQualifiersBenchmark.getQualifiersAnnotated    avgt    5     29.904 ±    0.754  ns/op\r\nQualifiersBenchmark.getQualifiersUnannotated  avgt    5     29.448 ±    0.610  ns/op\r\nQualifiersBenchmark.mapQualifiedBean          avgt    5  19843.370 ± 1592.108  ns/op\r\nQualifiersBenchmark.mapUnqualifiedBean        avgt    5  19739.789 ±  204.387  ns/op\r\n```\r\n\r\nLooks like there's a clear win on the micro scale.",
    "head_branch": "qual-bench",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1369 from jdbi/qual-bench\n\nQualifiers benchmarking"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623461edde8ed798d2ed855",
    "number": 1368,
    "body": "This is useful when e.g. using `bindBean` and templating to generate optional updates like\r\n\r\n`<if(name)>name = :name<endif>`\r\n\r\nwhere you want to use the same properties both as definitions and bindings",
    "head_branch": "bind-define",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1368 from jdbi/bind-define\n\nIntroduce defineBinds, which uses the bindings to create definitions for templates"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623461fdde8ed798d2ed856",
    "number": 1366,
    "body": "build fix for mystical timeout during mvn build",
    "head_branch": "revert",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Revert \"Merge pull request #1352 from jdbi/spring5\"\n\nThis reverts commit 038ee93cc424e47b21bc123d1de74c19f19bf83b\n\nfoo"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234620dde8ed798d2ed857",
    "number": 1365,
    "body": "Fixes #1363 \r\n\r\n* Add `QualifiedType.of(type, Class<? extends Annotation>...)` overloads\r\n* Add  `ResultBearing.of(type, Class<? extends Annotation>...)` overloads\r\n* Remove `Qualifiers.nVarchar()`. Just use `QualifiedType.of(String.class, NVarchar.class)` now.\r\n* Remove `PostgresQualifiers.hStore()` and `.macAddr()`. Use `HStore.class`, and `MacAddr.class` now, respectively.",
    "head_branch": "qualify-by-annotation-type",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1365 from jdbi/qualify-by-annotation-type\n\nAllow AnnotationType.class in place of @AnnotationType for zero-attribute annotation types"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234621dde8ed798d2ed858",
    "number": 1362,
    "body": "I was trying to register my own array type, and it's kinda a pain right now, as the test shows...",
    "head_branch": "array-type-factory",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1362 from jdbi/array-type-factory\n\nSqlArrayType: introduce a factory, which simplifies using it nicely"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234622dde8ed798d2ed859",
    "number": 1361,
    "body": "This is legitimate and useful, for example ST will emit\r\n`context [anonymous] 1:119 attribute id isn't defined`\r\nwhich you can avoid by defining a null value.",
    "head_branch": "define-null",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1361 from jdbi/define-null\n\nSupport defining `null` values on templates."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234623dde8ed798d2ed85a",
    "number": 1360,
    "body": "As discussed, only a minor change.\r\n\r\nInstead of _only_ assuming and writing the system timzone to the db in the generated offsetdatetime, the user now can now also configure which timezone they want it to be",
    "head_branch": "timestamped-config",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1360 from jdbi/timestamped-config\n\nTimestampedConfig to customize timezone"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234624dde8ed798d2ed85b",
    "number": 1359,
    "body": "",
    "head_branch": "sqllogger-doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1359 from jdbi/sqllogger-doc\n\noverdue sqllogger doc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234625dde8ed798d2ed85c",
    "number": 1358,
    "body": "fixes #1355\r\n\r\nHaving let the json feature sink in a bit and while implenting #1355, I realized that, to me, the current impl of the json feature doesn't seem entirely right.\r\n\r\nHow I've set it up now is this:\r\n- the `Json` module is a plugin proper now, that registers 2 factories\r\n- the jackson and gson modules simply provide a JsonMapper impl and install the JsonPlugin recursively so the user doesn't have to install both\r\n- the postgres plugin provides a special json argument because it supports special json features with different-from-default query parameter binding\r\n\r\nThe generic factories in `Json` work like this: they accept a request for any not-String `@Json T`, and use JsonMapper to convert it to/from json text. They then pass their value on to another factory of their kind, but now for either `@Json String`, or failing that, simply `String`.\r\n\r\nThis means they will act as json converters plugged into the middle of the regular flow, triggered only when the input/output is annotated `@Json` to indicate you want this conversion, and they will delegate the work with the json text to the most appropriate factory found: a specialized Json String binder/mapper (as in postgres), or the generic String handlers (for all dbs that don't do anything special with json).\r\n\r\nThoughts? I think this makes the feature much clearer and simpler. The only issue atm is how this is supposed to be used through the fluent api. I can't seem to get around needing to use the `internal` AnnotationFactory to be able to bind or map my values as QualifiedTypes with `@Json`.\r\n\r\nI would also like to see a test that confirms that this system now leads to `@Json String`s being bound and mapped differently from plain text in postgres, enabling that \"quering inside json columns\" that was mentioned, as that was largely the point of this feature to start with, if I understand correctly. I saw some json tests in the postgres module but they didn't seem to actually test the new json feature.",
    "head_branch": "separate-json-concerns",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1358 from jdbi/separate-json-concerns\n\nSeparate json concerns"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234626dde8ed798d2ed85d",
    "number": 1353,
    "body": "",
    "head_branch": "pn-test",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1353 from jdbi/pn-test\n\njackson parameter names to test scope"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234627dde8ed798d2ed85e",
    "number": 1352,
    "body": "Just needs a fix for that weird build error where travis gets hung up on maven downloading xmlunit or spring-something in the mavencentral run",
    "head_branch": "spring5",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1352 from jdbi/spring5\n\nspring5 compatibility test module"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234628dde8ed798d2ed85f",
    "number": 1351,
    "body": "To fix the `master` build...\r\n\r\nSomehow.\r\n\r\n",
    "head_branch": "revert",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Revert \"spring5 compatibility test module\"\n\nThis reverts commit be4e08dcce113a42d0e8e42f66438e82772b3db2."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234629dde8ed798d2ed860",
    "number": 1349,
    "body": "fixes #1273\r\nfixes #1197 as far as I'm concerned (I don't think the factories are needed as API)\r\nfixes #1354",
    "head_branch": "#1273",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623462adde8ed798d2ed861",
    "number": 1348,
    "body": "fixes #1279 \r\n\r\nSee tests for why this can be useful.",
    "head_branch": "#1279-clock",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623462bdde8ed798d2ed862",
    "number": 1347,
    "body": "",
    "head_branch": "pom",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "correct module name"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623462cdde8ed798d2ed863",
    "number": 1346,
    "body": "Oops, missed a case :)",
    "head_branch": "json-bind-null",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1346 from jdbi/json-bind-null\n\nfix json handling null values"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623462ddde8ed798d2ed864",
    "number": 1345,
    "body": "I've also softened the language about how queries \"usually\" are -- they really *shouldn't* use define most of the time.\r\n\r\nFixes #1315 ",
    "head_branch": "templating-warning",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1345 from jdbi/templating-warning\n\nWarn about templating security"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623462edde8ed798d2ed865",
    "number": 1344,
    "body": "eagle eye @qualidafial spotted it",
    "head_branch": "jsonimpl-type",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1344 from jdbi/jsonimpl-type\n\nCorrect JsonMapperImpl.fromJson type signature"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623462fdde8ed798d2ed866",
    "number": 1343,
    "body": "Because everyone needs a ~friend~ competitor.\r\n\r\nI think jackson vs gson is a popular enough point of debate and matter of personal choice for people that it's worth supporting both, for people who prefer one over the other. Feel free to freeze or reject, it's a copypasteplementation, so not a lot of work.",
    "head_branch": "jackson-competition",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1343 from jdbi/jackson-competition\n\njdbi3-gson ;)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234630dde8ed798d2ed867",
    "number": 1342,
    "body": "Because of #1340",
    "head_branch": "spring-compat-note",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "spring5 compatibility test module"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234632dde8ed798d2ed868",
    "number": 1341,
    "body": "",
    "head_branch": "note",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1341 from jdbi/note\n\nadd fair warning to MessageFormatTemplateEngine"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234633dde8ed798d2ed869",
    "number": 1339,
    "body": "fixes #1338",
    "head_branch": "#1338",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1339 from jdbi/#1338\n\nBetter handle txIsoLevel.UNKNOWN"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234634dde8ed798d2ed86a",
    "number": 1337,
    "body": "Mirroring the jool api, only the parts we use (and of course everyone is welcome to add more as needed), with small changes to the way sneaky throwing mechanism to make it suit our standards more (returning a dummy exception and forcing the fake return value to be thrown).\r\n\r\nOnly thing we need to discuss is the TODO in Sneaky: https://github.com/jOOQ/jOOL/issues/230\r\n\r\nOn one hand I don't think jdbi should be deciding to interfere in such things in non-reversible ways, and the InterruptedException isn't _wrapped_ so it doesn't really count as a catch-point where standards presumably dictate setting the `interrupted` flag. On the other, it seems to be standard/expected/helpful to do so anyway. ¯\\\\\\_(ツ)\\_/¯",
    "head_branch": "unchecked",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1337 from jdbi/unchecked\n\nThrowables -> Unchecked"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234635dde8ed798d2ed86b",
    "number": 1336,
    "body": "Reusable semantic exceptions > generic exceptions with a repetitive message",
    "head_branch": "utilityex",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1336 from jdbi/utilityex\n\nPet peeve: UtilityClassException"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234636dde8ed798d2ed86c",
    "number": 1335,
    "body": "https://github.com/leangen/geantyref",
    "head_branch": "geantyref",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1335 from jdbi/geantyref\n\nRemove Guava reflection code, use GeAnTyRef instead!"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234637dde8ed798d2ed86d",
    "number": 1334,
    "body": "adds `@Json` type qualifier",
    "head_branch": "jackson2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "jackson2 module"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234638dde8ed798d2ed86e",
    "number": 1333,
    "body": "",
    "head_branch": "poc-libloader",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234639dde8ed798d2ed86f",
    "number": 1332,
    "body": "Shaded dependencies:\r\n\r\n* antlr-runtime\r\n* guava\r\n* expiringmap\r\n",
    "head_branch": "shade-core-deps",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623463adde8ed798d2ed870",
    "number": 1331,
    "body": "jexl was added as a test dep to jdbi just to write a test that appears to verify it's possible to implement a statementcustomizer...\r\n\r\nThis change ditches the jexl dep (:tada:) and brings what I believe is a more informative test.",
    "head_branch": "bye-jexl",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "boot out jexl"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623463bdde8ed798d2ed871",
    "number": 1330,
    "body": "- replaced ascii arrows with unicode arrows\r\n- restructured the headings a bit to make more sense IMO\r\n- added a section on how to fix that dang build failure",
    "head_branch": "mvn",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1330 from jdbi/mvn\n\nfinally document how to enable single module mvn builds, patch up guide a bit"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623463cdde8ed798d2ed872",
    "number": 1329,
    "body": "",
    "head_branch": "contrib",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1329 from jdbi/contrib\n\ncontributor guide amendment"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623463ddde8ed798d2ed873",
    "number": 1328,
    "body": "Hi @jdbi Team,\r\n\r\nThis is a note in RELEASE_NOTES in regards to https://github.com/jdbi/jdbi/pull/1326.",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Note on ParsedSql and ParsedParameters factories"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623463edde8ed798d2ed874",
    "number": 1327,
    "body": "Release notes for https://github.com/jdbi/jdbi/pull/1316. I missed the RELEASE_NOTES file.\r\n\r\nI leave this totally up to you to decide whether this should be mentioned or not.",
    "head_branch": "findepi/master/release-notes-for-jdbiconstructor-on-static-factory-methods-2d3346",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Release notes for @JdbiConstructor on static factory methods"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623463fdde8ed798d2ed875",
    "number": 1326,
    "body": "Hello @jdbi Team :)\r\n\r\nThis change changes `ParsedSql` constructor visibility from private to protected.\r\n\r\nWhy did I change this? Let me briefly describe.\r\n\r\nWe recently migrated from JDBI v2 to v3 and we are really astonished of the number of enhancements, but while migrating the code I encountered small blocker.\r\n\r\nIn our solution I use [`SqlParser`](http://jdbi.org/#_sqlparser) to process SQL queries from annotated [SQL objects](http://jdbi.org/#_sql_objects). This processing consist of some cheap operations (e.g. prepend DAO name at the query beginning) and some pretty expensive operations (i.e. parse whole SQL and rewrite schemas found in query). Due to expensive nature of SQL parsing resultant SQL should be cached.\r\n\r\nWhat I would like to do is to cache intermediate SQL together with named parameters, e.g. have cache like this one:\r\n\r\n```\r\nintermediateSql = \"select a, b, c from {SCHEMA}.test where a > :a\", parameters = [ a ]\r\nintermediateSql = \"insert into {SCHEMA}.test (a) values (:a)\", parameters = [ a ]\r\n```\r\n\r\nAnd have custom implementation of ParsedSql which can be created by:\r\n\r\n```java\r\npublic class MyParser implements SqlParser {\r\n  public ParsedSql parse(String sql, StatementContext ctx) {\r\n    Item item = cache.computeIfAbsent(sql, s -> doExpensiveSqlParsing(s, ctx));\r\n    String intermediateSql = item.intermediateSql;\r\n    ParsedParameters parameters = item.parameters;\r\n    String finalSql = replaceAll(\"{SCHEMA}\", schema);\r\n    return new ParsedSql(finalSql, parameters);\r\n  }\r\n```\r\n\r\nSince constructor is private and because `ParsedSql` can be created only via `ParsedSql.Builder` which takes SQL in parts, the `ParsedSql` instance cannot be instantiated from fully rendered SQL and known parameters. I have to split it into parts and merge using parameters one-by-one. This is problematic because it makes `?` a magic string which cannot be used in queries (because it's used to split it).\r\n\r\nWith current solution I can only accept `?` being magic or cache `ParsedSql` objects per schema which cause the number of items in cache to raise because there is no limit for a number of applications (and thus the number of schemas located on DB server, due to multitenant environment where application databases are isolated from each other). This will cause cache to grow bigger together with a number of applications, e.g.:\r\n\r\n```\r\nselect a, b, c from app0001.test where a > :a; names = [ a ]\r\nselect a, b, c from app0002.test where a > :a; names = [ a ]\r\nselect a, b, c from app0003.test where a > :a; names = [ a ]\r\nselect a, b, c from app0004.test where a > :a; names = [ a ]\r\ninsert into app0001.test (a, b, c) values (:a, :b, :c); names = [a, b, c]\r\ninsert into app0002.test (a, b, c) values (:a, :b, :c); names = [a, b, c]\r\ninsert into app0003.test (a, b, c) values (:a, :b, :c); names = [a, b, c]\r\ninsert into app0004.test (a, b, c) values (:a, :b, :c); names = [a, b, c]\r\netc...\r\n```\r\n\r\nPlease let me know if this change (private to protected) is acceptable. The other option for me would be to have `Builder` more fluent so I can set both SQL and parameters at once, not in parts, e.g.:\r\n\r\n```java\r\nParsedSql sql = ParsedSql.builder()\r\n  .setSql(finalSql)\r\n  .setParameters(parameterNames)\r\n  .build();\r\n```",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1326 from sarxos/patch-1\n\nAllow instantiation of ParsedSql and ParsedParameters"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234640dde8ed798d2ed876",
    "number": 1325,
    "body": "Fixes #1324 ",
    "head_branch": "die-in-a-fire-oracle-db",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1325 from jdbi/die-in-a-fire-oracle-db\n\nRemove OracleDB support with extreme prejudice."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234641dde8ed798d2ed877",
    "number": 1323,
    "body": "I'm sure there was some reason it's this way in the first place, but doesn't enabling the `toolchains` profile for ci ensure we run our Travis build repeatedly using the exact same JDK?",
    "head_branch": "travis-no-toolchain",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1323 from jdbi/travis-no-toolchain\n\nDisable toolchain profile for ci to see if we can actually use our build matrix"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234642dde8ed798d2ed878",
    "number": 1322,
    "body": "I recommend reviewing this commit by commit and skipping the first 3, which are just jool copypasta and cutting...",
    "head_branch": "jool",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234643dde8ed798d2ed879",
    "number": 1321,
    "body": "The upgrade from basepom 19 to 27 inadvertently disabled javadoc during normal builds. This re-enables it during doc builds.\r\n\r\nAdditionally, I suggested moving environment variables from `.travis.yml` down into individual build scripts a while back, but these were only used to distinguish the different builds in TravisCI. I've moved them back so we can tell the test, doc, and style builds apart again.",
    "head_branch": "fix-doc-build",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1321 from jdbi/fix-doc-build\n\nFix doc build"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234644dde8ed798d2ed87a",
    "number": 1319,
    "body": "I thought this was gonna be a lot harder...",
    "head_branch": "guava",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1319 from jdbi/guava\n\nMigrate guava to libs (and set up general libs package)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234645dde8ed798d2ed87b",
    "number": 1318,
    "body": "After like a year in limbo, here it finally is.",
    "head_branch": "genericmap",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1318 from jdbi/genericmap\n\nExtend Map<String, Object> mapping to <String, V>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234646dde8ed798d2ed87c",
    "number": 1317,
    "body": "",
    "head_branch": "param",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1317 from jdbi/param\n\nforgotten release note"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234647dde8ed798d2ed87d",
    "number": 1316,
    "body": "Fixes #1314",
    "head_branch": "staticfact",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1316 from findepi/staticfact\n\nSupport @JdbiConstructor on static factory methods"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234648dde8ed798d2ed87e",
    "number": 1313,
    "body": "",
    "head_branch": "setup-warning",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "getting started warning"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234649dde8ed798d2ed87f",
    "number": 1311,
    "body": "Side-effect from an old piece of work I intend to finish sometime. We offer the ability to resolve X in <X, Y> but it's a trivial change to let the caller specify which index they want, to be able to resolve Y, Z, etc too, which is useful when working with Maps and other multi-variable types.",
    "head_branch": "findGenericParam",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1311 from jdbi/findGenericParam\n\napi: resolve any generic param index, not just 0"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623464adde8ed798d2ed880",
    "number": 1310,
    "body": "![image](https://user-images.githubusercontent.com/3950300/48655201-5e787c00-ea14-11e8-954c-4337679c4b9d.png)\r\n",
    "head_branch": "ide",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add reminder for @Beta"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623464bdde8ed798d2ed881",
    "number": 1309,
    "body": "When Object value cannot be used by the setter\r\nmethod a very generic IllegalArgumentException\r\nmessage is present. This leads to a lot of time\r\ndebugging the error. This exception message\r\nclearly calls out why the error happened.",
    "head_branch": "better-message",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1309 from prathik/better-message\n\nShow useful message when IllegalArgument is passed"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623464cdde8ed798d2ed882",
    "number": 1308,
    "body": "Fixes #1304",
    "head_branch": "connection-factory-close",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1308 from jdbi/connection-factory-close\n\nConnectionFactory: add a closeConnection with default"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623464ddde8ed798d2ed883",
    "number": 1306,
    "body": "jdbi doesn't support `@Transactional` annotation out of the box. To enable  it, we need to delegate opening and releasing connections to Spring. I've introduced `ConnectionHandler` and it's implementation for Spring",
    "head_branch": "spring-transaction",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge branch 'master' into spring-transaction"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623464edde8ed798d2ed884",
    "number": 1305,
    "body": "Previously you would have to perform a cast in your\r\nSqlStatementParameterCustomizer.apply method to get the object you knew\r\nyou were passing in. This change really only removes the need to do the\r\ncasting.\r\n\r\nMapToFactory needs to be explicitly told to use Object. Leaving the\r\ngenerics blank caused compiler errors. Seeing how it was using Object\r\nbefore no change has actually been made. It's more explicit, but that's\r\nabout it.\r\n\r\nI asked for this here: https://github.com/jdbi/jdbi/issues/1301#issuecomment-436562644\r\nThought the discussion, if there should be any, could be here instead of in a issue that has nothing to do with it really.",
    "head_branch": "add-type-to-sqlstatementparametercustomizer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623464fdde8ed798d2ed885",
    "number": 1300,
    "body": "Same deal as before but this time much simpler and smaller, with no collateral changes, and now with better organized commits ^^'",
    "head_branch": "break-up-collectors",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1300 from jdbi/break-up-collectors\n\nBreak up built-in collectors"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234650dde8ed798d2ed886",
    "number": 1299,
    "body": "Same spirit as before but this one is much, much less content than the other two, and no collateral changes ^^",
    "head_branch": "break-up-collectors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234651dde8ed798d2ed887",
    "number": 1298,
    "body": "I decided to go for the strategy that calls `setNull` if value is null (instead of throwing npe). The binding behavior when not null is identical to before.",
    "head_branch": "npe",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234652dde8ed798d2ed888",
    "number": 1297,
    "body": "",
    "head_branch": "#1296",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "amend misleading description"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234653dde8ed798d2ed889",
    "number": 1294,
    "body": "https://github.com/jdbi/jdbi/pull/1289#pullrequestreview-169080961",
    "head_branch": "catches",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "deprecate unwanted mechanism"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234654dde8ed798d2ed88a",
    "number": 1293,
    "body": "Addition to contribution guide based on remarks from dev chat, and seemingly appropriate addition to contributors list? ^^'",
    "head_branch": "readmes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "grammar"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234655dde8ed798d2ed88b",
    "number": 1292,
    "body": "You should consider updating the readme to include informations about using Jdbi with Java 11 since you now also use Java 11 for your runners",
    "head_branch": "update-readme",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234656dde8ed798d2ed88c",
    "number": 1291,
    "body": "Fixes #1283 ",
    "head_branch": "fix-#1283",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix(argument-binding): Fix error on non public class"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234657dde8ed798d2ed88d",
    "number": 1290,
    "body": "This fix is related to issue https://github.com/jdbi/jdbi/issues/1245",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1290 from Manikandan-K/master\n\nLooks good to me then. Thanks @Manikandan-K"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234658dde8ed798d2ed88e",
    "number": 1289,
    "body": "https://github.com/jdbi/jdbi/pull/1287#issuecomment-432651176",
    "head_branch": "catches",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1289 from jdbi/catches\n\nCatches"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234659dde8ed798d2ed88f",
    "number": 1288,
    "body": "Tiny leftover from #1287 ",
    "head_branch": "moot",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "moot suppresswarnings"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623465adde8ed798d2ed890",
    "number": 1287,
    "body": "LocalTransactionHandler would attempt to cast the caught Throwable to\r\nException, which would fail for non-Exception Throwables like Error.\r\n\r\nThis bug was introduced in c87c667a6d8c64795a83845b6e79cb728aa40ef6",
    "head_branch": "feature/fix-class-cast-exception-on-errors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1287 from GrahamDennis/feature/fix-class-cast-exception-on-errors\n\nFix ClassCastException on `Error` thrown by `LocalTransactionHandler`."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623465bdde8ed798d2ed891",
    "number": 1286,
    "body": "",
    "head_branch": "assertj_3_11_1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1286 from PascalSchumacher/assertj_3_11_1\n\nUpdate to AssertJ 3.11.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623465cdde8ed798d2ed892",
    "number": 1285,
    "body": "",
    "head_branch": "mockito_2_23",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1285 from PascalSchumacher/mockito_2_23\n\nUpdate mockito-core to version 2.23.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623465edde8ed798d2ed893",
    "number": 1284,
    "body": "",
    "head_branch": "commons_text_1_6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1284 from PascalSchumacher/commons_text_1_6\n\nUpdate to commons-text version 1.6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623465fdde8ed798d2ed894",
    "number": 1282,
    "body": "this PR attempts to add initial Immutables integration.  it only recognizes the default name styling and method arguments / return types for now.\r\n\r\nThis also breaks out some of the core BeanMapper reflection logic into a new `PojoProperties` interface, which intends to allow pluggable bean-like conventions.  It's explicitly still internal, though.",
    "head_branch": "immutables",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge fixup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234660dde8ed798d2ed895",
    "number": 1281,
    "body": "Missed replacing type variable `T` with actual type `Money`",
    "head_branch": "fix-money-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1281 from juggernaut/fix-money-typo\n\nFix typo in ColumnMapper section"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234661dde8ed798d2ed896",
    "number": 1280,
    "body": "Minor followup to #1268 ",
    "head_branch": "cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1280 from TheRealMarnes/cleanup\n\nCleanup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234662dde8ed798d2ed897",
    "number": 1278,
    "body": "Same deal as before :)",
    "head_branch": "break-up-arguments",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1278 from TheRealMarnes/break-up-arguments\n\n[done] Break up BuiltInArgumentFactory"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234663dde8ed798d2ed898",
    "number": 1276,
    "body": "Add the release Notes for #1265 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1276 from 28Smiles/master\n\nRelease notes for PR #1265"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234664dde8ed798d2ed899",
    "number": 1275,
    "body": "Didn't see a test for this - let me know if this is actually tested someplace else. \r\nTest binding a custom array type by implementing a `SqlArrayType` and\r\nmapping it back to a Java collection of the element type.",
    "head_branch": "add-test-for-sqlarraytype",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1275 from juggernaut/add-test-for-sqlarraytype\n\nAdd test for custom array type"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234665dde8ed798d2ed89a",
    "number": 1268,
    "body": "This PR makes no functional changes to jdbi, only breaks up and redistributes the BuiltInMapperFactory godclass into more focused, independent, manageable parts. An advantage of this is that it becomes more realistic to start adding configuration to the builtin support, like how the primitives mapping should handle nulls (throw exception or return default: `PrimitivesMapping.nullHandling` or some such). I've added a small dozen such TODOs (potential features or things that might need to be checked) that became more obvious thanks to this refactor.\r\n\r\nI intend to do the same to the other 2 BuiltIn classes, after which we can do all kinds of neat things like adding essential config parameters to all the builtin support in a clutter-free way, bundle them into an `OotbPlugin` or something to make them more cleanly installable (instead of being hardcoded into the Context system, see `ColumnMappers`), and I might be able to better implement #1177\r\n\r\nI love housekeeping :)\r\n\r\nIs this line of work welcome or am I bikeshedding?",
    "head_branch": "break-up-mappers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1268 from TheRealMarnes/break-up-mappers\n\nBreak BuiltInMapperFactory up into functional parts"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234666dde8ed798d2ed89b",
    "number": 1266,
    "body": "Simple typo fix!",
    "head_branch": "docs/bindlist-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1266 from phase/docs/bindlist-typo\n\nFix typo in BindList Documentation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234667dde8ed798d2ed89c",
    "number": 1265,
    "body": "See #1263 ",
    "head_branch": "immutable-list-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1265 from 28Smiles/immutable-list-fix\n\n#1263 Fix NPE if SqlStatement::defineList is supplied with an ImmutableList"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234668dde8ed798d2ed89d",
    "number": 1264,
    "body": "As promised in https://github.com/jdbi/jdbi/issues/1261 , I've written up some basic docs for the Sql Arrays section based on the TODOs.",
    "head_branch": "sql-array-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1264 from juggernaut/sql-array-docs\n\nSQL Array docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234669dde8ed798d2ed89e",
    "number": 1259,
    "body": "When name is bound to Option.none() in the query `select * from users\r\nwhere :name is null or name = :name`, the first clause of the `WHERE`\r\nevaluates to `null is null` which is true, so it matches _any_ row, not\r\nnecessarily a row where the name `IS NULL`.\r\n\r\nNot sure if this is what you were going for, though. If the intent was\r\nto illustrate an example with the original comment's meaning, the query\r\nshould probably be changed to something like `select * from users where\r\nname IS NOT DISTINCT FROM :name`",
    "head_branch": "vavr-option-error",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1259 from juggernaut/vavr-option-error\n\nFix misworded comment in Vavr Option example"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623466adde8ed798d2ed89f",
    "number": 1257,
    "body": " * Similar use case as https://github.com/jdbi/jdbi/pull/523\r\n * Relies on default enum mapping facilities\r\n * Includes unit test\r\n\r\nThe PR mentioned above and the old branch \"enum_sets\" were not merged because of direct ties with PostgreSQL \"varbit\" SQL type.\r\n\r\nThis PR avoids these pitfalls.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1257 from lyind/master\n\nAdd collector factory for EnumSet"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623466bdde8ed798d2ed8a0",
    "number": 1256,
    "body": "`LinkedHashMapRowReducer` is an interface",
    "head_branch": "fix-doc-implements-linkedhashmaprowreducer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1256 from juggernaut/fix-doc-implements-linkedhashmaprowreducer\n\nFix code snippet that extends LinkedHashMapRowReducer instead of implements"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623466cdde8ed798d2ed8a1",
    "number": 1255,
    "body": null,
    "head_branch": "oraclepki",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1255 from jdbi/oraclepki\n\nTest oraclepki"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623466ddde8ed798d2ed8a2",
    "number": 1252,
    "body": "Hey guys, I decided to create a new pull for the spring plugin rewrite, since #989 is already too outdated and confusing as of now, imho.\r\n\r\nI addressed the issues mentioned and lastly suggested by me in #989 and this is my current state.\r\n\r\nWhat has been done:\r\n- complete rewrite of the docs\r\n- moved/renamed the module (makes sense since its works with several major spring versions, current included)\r\n- minor fixes according to #989 \r\n- marked new APIs as Beta. note: so far only the `JdbiTemplate`/Operations class introduces a \"real\" new API which could break. I saw no point in marking its public methods as Beta since they excatly follow `Jdbi` itself. not sure...\r\n- couple of minor cleanups accoring to the build tools involved.\r\n\r\nI wanted to mention that the plugin is more or less in this version in production at my work for 6 months. So far I did not encounter any problems.\r\n\r\nWhat has to be done:\r\nI think I might need a little help to implement the `withExtension` method on `JdbiTemplate`. I thought it would be trivial, but never having used Exentions it got confusing quickly. \r\n\r\nHow would a \"lazy loaded handle\" work within a given transaciton system? Also some of the classes/methods needed for me to at least copy the code are package private etc...\r\n\r\nCould you help me out here? ",
    "head_branch": "spring-plugin-final",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623466edde8ed798d2ed8a3",
    "number": 1251,
    "body": "as it does in KotlinSqlObjectPluginTest\r\n",
    "head_branch": "issue1250",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1251 from whenceforth/issue1250\n\n#1250 update ThingDao in README to extend SqlObject"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623466fdde8ed798d2ed8a4",
    "number": 1249,
    "body": "So I loved the functionality of `@BindMethods` and `@BindBeanList` and wanted to combine the two. This pull request is for `@BindMethodsList`. The use case is simple: \r\n\r\n```java\r\nSqlQuery(\"insert into things (id, name) values <items>;\")\r\nList<Thing> saveThings(@BindMethodsList(value = \"items\", methodNames = {\"getId\", \"getName\"}) Thing... things)\r\n``` \r\n\r\nLooking for comments, questions and feedback. If this functionality already exists I apologize, I couldn't seem to find it. ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "More formatting changes"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234670dde8ed798d2ed8a5",
    "number": 1244,
    "body": "This is a little thing I've had sitting on a branch for a while now. I remember getting annoyed that there are bits and pieces of classpath traversing code everywhere for stuff like loading sql files, and the logic to build the path is reinvented every time. This utility should fit most current and future needs and is holding up well so far in unit tests.\r\n\r\nDoes it seem an interesting thing to you guys and should I migrate as much as possible ad-hoc pathing to this utility, or nah? I feel it could add some consistency, clarity, and ease to parts of the code, and replace a lot of downcasting-meaningful-objects-to-strings, like in `UseClasspathSqlLocatorImpl` where a nice reflection Method object is turned into a string for manipulation.\r\n\r\nI included a touch of portability in the parts involving Paths so that stuff like windows' special path separator won't be a problem. It's basically platform-agnostic, both in its public and private workings.",
    "head_branch": "locator",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1244 from TheRealMarnes/locator\n\n[wip refactor] reusable high-level classpath builder"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234671dde8ed798d2ed8a6",
    "number": 1243,
    "body": "",
    "head_branch": "moot-todo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1243 from TheRealMarnes/moot-todo\n\ntodos in borrowed code are meaningless to us"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234672dde8ed798d2ed8a7",
    "number": 1240,
    "body": "First time working with methodhandles...\r\n\r\nIncluded a little bit of oppurtunistic but very carefully selected refactoring. Tried to run a build locally but kept getting infrastructural errors, I think from postgres... Not exactly a new problem.",
    "head_branch": "catchup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "improve throwable handling"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234673dde8ed798d2ed8a8",
    "number": 1238,
    "body": "Also rename 'locale lower' which I think was confusing because it uses root locale (i.e. *not* locale sensitive)\r\n\r\nfollowup to https://github.com/jdbi/jdbi/commit/e418324d7c1236fb1cc957897a0e5145e55ab007#commitcomment-30452308",
    "head_branch": "strategy-unaryoperator",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "remove unneeded release note"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234674dde8ed798d2ed8a9",
    "number": 1237,
    "body": "In `LocalTransactionHandler.inTransaction()`, if the callback throws `Throwable` that does not extends `Exception`, `rollback()` will not be called and the connection can be closed with an active transaction. The behavior on open transaction when closing connection depends on JDBC driver implementation details ([doc](https://docs.oracle.com/javase/10/docs/api/java/sql/Connection.html#close())). It's better that we catch it and rollback properly in JDBI. \r\n\r\nAdditionally, during rollback, it would also be helpful if we catch `Throwable` so that we won't lose the original exception when non `Exception` is thrown during rollback.\r\n\r\ncc @electrum ",
    "head_branch": "catch-throwable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1237 from jessesleeping/catch-throwable\n\nProperly rollback transaction on failures in LocalTransactionHandler"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234675dde8ed798d2ed8aa",
    "number": 1234,
    "body": "Fixes #1232 \r\nFixes #1231 \r\n",
    "head_branch": "merge_1232",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1234 from jdbi/merge_1232\n\nAdding external PostgreSQL support and improving migration support."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234676dde8ed798d2ed8ab",
    "number": 1233,
    "body": "",
    "head_branch": "jdk11",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1233 from jdbi/jdk11\n\njdk11, basepom 27"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234677dde8ed798d2ed8ac",
    "number": 1232,
    "body": "In Support of https://github.com/jdbi/jdbi/issues/1231",
    "head_branch": "jdbirule_issue1231",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234678dde8ed798d2ed8ad",
    "number": 1229,
    "body": "rebase of #1181",
    "head_branch": "merge-1181",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Factor out MapMapper CaseStrategy"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234679dde8ed798d2ed8ae",
    "number": 1228,
    "body": "rebase of #1184",
    "head_branch": "unused-bindings-1184",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix code style #1184"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623467adde8ed798d2ed8af",
    "number": 1227,
    "body": "Fixes #1212 \r\nAlternative to #1213 \r\nPossibly fixes #1226 (@strmer15 please confirm), assuming one is using `@Nested` with prefixes.\r\n\r\nChanges:\r\n- New interface default method `ColumnNameMatcher.columnNameStartsWith(String columnName, String prefix):boolean`. Default implementation returns `columnName.startWith(prefix)` (to match existing strict checking code in reflection mappers)\r\n- `ReflectionMapperUtil.anyColumnsStartWithPrefix(columnNames, prefix, matchers):boolean`\r\n- `BeanMapper`, `FieldMapper`, and `KotlinMapper` ignore `@Nested` members if no columns match that nested element.\r\n- ConstructorMapper allows constructor parameters annotated `@Nullable` (from any package) to be absent from the result set, including nested objects, and/or individual properties of nested objects. \r\n- All mappers short-circuit nested mapping attempts if no columns begin with the nested prefix. (This is what I hope will fix #1226. \r\n\r\nTo do:\r\n* [x] Javadoc all new API, relevant behavioral changes\r\n* [x] Update developer guide.\r\n* [x] Release notes\r\n* [x] Add tests for optional nested mapping in Kotlin mapper. The combination of normal, default, and optional parameters in the Kotlin constructors makes for a wide test surface.\r\n\r\n\r\n/cc @strmer15",
    "head_branch": "optional-nested-mapping",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1227 from jdbi/optional-nested-mapping\n\nOptional nested mapping"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623467bdde8ed798d2ed8b0",
    "number": 1225,
    "body": "Addresses #1224 \r\n\r\nRethrows exceptions thrown in by a DAO instead of wrapping it in a RunTimeException.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1225 from Porter/master\n\nRethrow all Exceptions instead of wrapping them"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623467cdde8ed798d2ed8b1",
    "number": 1220,
    "body": "",
    "head_branch": "fix-build",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1220 from jdbi/fix-build\n\nUpgrade assertj-core to satisfy assertj-guava dependency"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623467ddde8ed798d2ed8b2",
    "number": 1219,
    "body": "Fixes #1218. This will make sure enums (even ones written in Kotlin)\r\nwill be mapped using built-in `EnumMapper`s.",
    "head_branch": "jdbi-1218",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1219 from FredDeschenes/jdbi-1218\n\nPrevent KotlinMapper from handling enum classes"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623467edde8ed798d2ed8b3",
    "number": 1213,
    "body": "Fixes #1212 \r\n\r\nThe ConstructorMapper, FieldMapper, and BeanMapper now all provide extra context during the specialize0() method to know whether or not a nested call is being made, and if so, to not throw an exception if no columns were mapped but rather create a row mapper that returns null, as per @qualidafial 's suggestion.\r\n\r\nThe ConstructorMapper was tricky because it throws an exception immediately upon finding an unmatched parameter; I moved the exception handling to after all the parameter mapping so that it could be ignored by nested calls if all the parameters of the nested object were unmapped.  That way, it would catch when a nested object is partially retrieved, as well as when a nested object has other nested objects.\r\n\r\nI've also added in test cases to the the mapper tests that hopefully illustrate and cover the fix.",
    "head_branch": "nested_bean_ignore",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623467fdde8ed798d2ed8b4",
    "number": 1210,
    "body": "This commit improves the JdbiFactoryBean. The getObject() method\r\nre-created the Jdbi instances each time getObject() was called.\r\nIt is better to create it once and cache it afterwards. This\r\ncould also potentially break the contract as Jdbi should be\r\na singleton (according to the isSingleton method).\r\n\r\nTo further improve it build upon the AbstractFactoryBean from\r\nSpring itself which allows to specify if it should be a singleton\r\nor not and act accordingly.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1210 from mdeinum/master\n\nImprove JdbiFactoryBean"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234680dde8ed798d2ed8b5",
    "number": 1209,
    "body": "When profiling a project using JDBI 3.4.0, I noticed that up to 25% of the samples would happen in `Preconditions#checkNotNull`.\r\n\r\nThis was due to the error message being formatted even if the reference was not null (as it is in the great majority of the calls).\r\n\r\nRunning this patch, the profiler doesn't even pick up calls to the method anymore.\r\n\r\nThe more recent versions of Guava (where I assume this file was pulled from) use this way of checking for nullability.",
    "head_branch": "preconditions-no-string-format",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1209 from alecalve/preconditions-no-string-format\n\nAvoid formatting string when not needed"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234681dde8ed798d2ed8b6",
    "number": 1206,
    "body": "Add support for @JdbiConstructor to KotlinMapper.\r\nAllow writeable fields to not be mapped to columns if they are not\r\nlate init since they will have been initialized.",
    "head_branch": "KotlinMapperImprovements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1206 from cacsar/KotlinMapperImprovements\n\nIncrease flexibility of KotlinMapper."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234683dde8ed798d2ed8b7",
    "number": 1205,
    "body": "Fixes #1117",
    "head_branch": "static-1117",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1205 from jdbi/static-1117\n\nIgnore static methods on SqlObject interfaces"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234684dde8ed798d2ed8b8",
    "number": 1200,
    "body": "implements #1193",
    "head_branch": "allow-null-valued-defined-attributes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1200 from kaandok/allow-null-valued-defined-attributes\n\nAllow null valued attribute definitions"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234685dde8ed798d2ed8b9",
    "number": 1198,
    "body": "As requested, and with a few added hints I felt were missing.",
    "head_branch": "doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1198 from TheRealMarnes/doc\n\ndevdoc additions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234686dde8ed798d2ed8ba",
    "number": 1195,
    "body": "https://mailman.cs.umd.edu/pipermail/findbugs-discuss/2016-November/004321.html\r\n\r\nTLDR findbugs project has/had 1 person with project admin rights, and he went\r\n\r\n> poof\r\n\r\nso they forked it to be able to continue work on it. AKA spotbugs.",
    "head_branch": "spotbugs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1195 from TheRealMarnes/spotbugs\n\n[done] findbugs is dead, long live spotbugs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234687dde8ed798d2ed8bb",
    "number": 1194,
    "body": "If there is only a setter method the BeanMapper can still be useful as a RowMapper for output.\r\nIn this case, the `descriptor.getReadMethod()` being `null` will cause NPE when determining the type to be mapped.\r\nThis is not necessary, as the type can then determined by parameter of the `descriptor.getWriteMethod()`.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1194 from sjoerdtalsma/patch-1\n\nFix write-only property in BeanMapper"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234688dde8ed798d2ed8bc",
    "number": 1192,
    "body": "**NOTE** This is a recreation of #1183 so that the commit history and diffs are simple and clean; this branch is created off of HEAD of master at the time of this writing so features several other fixes that were complicating a merge/rebase of the original PR.\r\n\r\nDropWizard JDBI3 library relies on the enforcer plugin to ensure that\r\nall dependencies use the same version (dependency convergence).\r\nUnfortunately, due to the versions of antlr-runtime and springtemplate\r\nused by JDBI3, this check fails.\r\n\r\nIn order to fix this issue, this commit features two changes to the\r\nparent pom.xml:\r\n\r\n1) Excluding the antlr-runtime library from the dependency declaration\r\nfor antlr's stringtemplete; the newer version of stringtemplate brings\r\nin an older version of the runtime.\r\n\r\n2) Enabling the enforcer plugin so that should such an issue happen\r\nagain, the JDBI build will fail before such an issue is released (and\r\nthus breaking projects that depend on JDBI).",
    "head_branch": "antlr_depcon_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1192 from isaki-x/antlr_depcon_fix\n\nFix for dropwizard-jdbi3 build issues (dependency convergence)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234689dde8ed798d2ed8bd",
    "number": 1191,
    "body": "Fixes #1141",
    "head_branch": "jdk9-range",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1191 from jdbi/jdk9-range\n\nFix jdk9 version declaration"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623468adde8ed798d2ed8be",
    "number": 1190,
    "body": "Fixes #1125",
    "head_branch": "statementexception-originalmessage",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1190 from jdbi/statementexception-originalmessage\n\nStatementException.getShortMessage"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623468bdde8ed798d2ed8bf",
    "number": 1189,
    "body": "This prevents any thrown exceptions from getting unexpectedly wrapped in InvocationTargetException\n\nFixes #1188",
    "head_branch": "bridge-exception-mangle",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "4.0 todo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623468cdde8ed798d2ed8c0",
    "number": 1186,
    "body": "Please see: #1183\r\n\r\nIf this is approved and merged into master, I will merge master into the branch for #1183 and these changes will disappear from that PR. This PR fixes the issues that have been plaguing a number of PRs and HEAD of master with respect to CI failures.\r\n\r\nThere are two fixes:\r\n\r\n* 0.9.17 of dokka (known issue with 0.9.16, fixed in 0.9.17)\r\n* Including maven jar plugin in managed plugins; CI was unable to find this plugin (which is supposed to be there be default, a quick search showed that when this issue is seen, including the plugin in your managed plugins fixes the error, so this what I have done)",
    "head_branch": "ci_fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1186 from isaki-x/ci_fixes\n\nFixed plugin issues with CI build."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623468ddde8ed798d2ed8c1",
    "number": 1185,
    "body": "",
    "head_branch": "the_the",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1185 from PascalSchumacher/the_the\n\nReplace \"the the\" with \"the\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623468edde8ed798d2ed8c2",
    "number": 1184,
    "body": "fixes #1175\r\n\r\nTesting showed the current code is inconsistent and doesn't cover many cases. It throws an exception when >0 arguments are provided but the query contains 0 variables. It does not throw when too many arguments are provided as long as the query defines at least 1 variable. @rjnay could work around his problem for now by changing his query to `where :id = :id<if(bool)> and id = :id<endif>`. I think this should be fixed. Shall I make a separate PR for that too when other open things have been wrapped up?",
    "head_branch": "unbound",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623468fdde8ed798d2ed8c3",
    "number": 1183,
    "body": "This PR does two things:\r\n\r\n**Enable Maven Enforcement**\r\n\r\nI have enabled two built in rules, the first is for Java version (I've set a minimum of Java 8 as the code base does utilize lambda) and the second for dependency convergence checks.\r\n\r\n**Exclude antlr-runtime for stringtemplate in Maven managed dependencies**\r\n\r\nThis seems to fix the issue where a circular dependency is introduced by requiring 3.4 of ANTLR while requiring 4.0.2 for string template.\r\n\r\nPlease see my notes here: #1182 ",
    "head_branch": "antlr_dep_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234690dde8ed798d2ed8c4",
    "number": 1181,
    "body": "This PR enables MapMapper configuration the proper way so that it works with SqlObject and follows project convention, and adds an uppercase option.\r\n\r\n100% backward compatible: if foldCase is true, LOWER is used, otherwise the new option value is used, which defaults to NOP. Users who prefer the new API would have a problem using this option in SqlObject for the time being, since they wouldn't be able to turn off foldCase. I've added an override setting for them. Tests show this.\r\n\r\n`@Beta` added where necessary, as well as `@Deprecated` so that a cleanup can be done for jdbi4.",
    "head_branch": "mapapicorr",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234691dde8ed798d2ed8c5",
    "number": 1180,
    "body": "Released to Maven Central. Publishing docs to jdbi.org momentarily..",
    "head_branch": "v3.3.0-release",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1180 from jdbi/v3.3.0-release\n\n3.3.0 release"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234692dde8ed798d2ed8c6",
    "number": 1179,
    "body": "",
    "head_branch": "testUTE",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1179 from TheRealMarnes/testUTE\n\nSmall improvement to UseTemplateEngine tests"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234693dde8ed798d2ed8c7",
    "number": 1178,
    "body": "",
    "head_branch": "beta",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1178 from TheRealMarnes/beta\n\nContributors guide for @Beta"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234694dde8ed798d2ed8c8",
    "number": 1177,
    "body": "Right now Jdbi can only map to `Map<String, Object>` in both the fluent api (`mapToMap()`) and SqlObjects (`@SqlQuery Map<String, Object> getMap();`). This saddles the user up with having to do annoying manual type converions: getting `ColumnMapper`s from the context, or doing plain casts.\r\n\r\nWith this additional factory, which is basically a refactor and slight expansion of `MapMapper`, users will be able to map to a `Map<String, V>` with full generics support. The factory will get an appropriate `ColumnMapper` for V off the context during mapping.\r\n\r\nFluent api: `.mapTo(new GenericType<Map<String, BigDecimal>>() {})` or `.mapToGenericMap(BigDecimal.class)`\r\nSqlObject: just return a `Map<String, BigDecimal>`\r\n\r\nSince mapping to `Map` is a core feature already but just lacks proper generics support, I feel this belongs in Core and not in private code.",
    "head_branch": "genericmap",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234695dde8ed798d2ed8c9",
    "number": 1176,
    "body": "Last of the \"a million superficial fixes\" PMD PRs :)\r\n\r\nI expect these last rules may include some disagreeable ones, though I did my best to avoid them. What remains will likely just stay excluded because they're controversial or not useful, or need major work to fix. There's some use of `@SuppressWarnings` because there honestly were a few legit cases where the rules needed to be relaxed a little, or I'd have to break the API and stuff.\r\n\r\nLast commit in the series is one you might very understandably object to (performance vs clarity/brevity), and accounts for a decent chunk of the very reasonable lines-changed count.",
    "head_branch": "pmd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1176 from TheRealMarnes/pmd\n\n[done] PMD #3"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234696dde8ed798d2ed8ca",
    "number": 1174,
    "body": "I came across an annoyance in my project today. SqlObject has OOTB support for turning a resultset into a (`List` of) `Map<String, Object>` like so:\r\n\r\n```\r\n@SqlQuery(\"select 1.0 as one, 2.0 as two, 3.0 as three from (values(null))\")\r\nList<Map<String, Object>> getMapList();\r\n// will be\r\n// \"one\" -> (some jdbc driver mapped object, e.g. BigDecimal in case of hsqldb),\r\n// \"two\" -> ...\r\n```\r\n\r\nBut I wanted to get my `BigDecimal`s out of that map without having to cast them, because you know, what do we have generics for? \r\n\r\n```\r\n@SqlQuery(\"select 1.0 as one, 2.0 as two, 3.0 as three from (values(null))\")\r\nList<Map<String, BigDecimal>> getMapList();\r\n```\r\n\r\nThis would be ideal. I know the values will be mappable (even directly castable) to `BigDecimal`, so jdbi should be able to extract them with the registered `BigDecimalColumnMapper`. But this does not work because `MapMapper` only responds to `Map<String, Object>` specifically.\r\n\r\nI propose we extend the functionality of `MapMapper` by moving it into a `MapMapperFactory` that resolves the `V` in `Map<String, V>` and uses a registered `ColumnMapper` on the context to neatly map the value objects, instead of returning them as `Object` in the `Map` and forcing the user to do casts.\r\n\r\nThe code I wrote for this PR needs some discussion, but it shows how easy it is to achieve. Since `MapMapper` is already Core and what I'm suggesting would be an improvement to its support for generics, not a whole different use case, I'd like to put this into Core.\r\n\r\nAs an aside, shouldn't the `foldCase` property on `MapMapper` come in a config class, like we have on `SerializableTransactionRunner`? The way it is now seems useful only for the fluent api.",
    "head_branch": "genericmap",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234697dde8ed798d2ed8cb",
    "number": 1173,
    "body": "",
    "head_branch": "pmd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234698dde8ed798d2ed8cc",
    "number": 1171,
    "body": "fixes #1170 \r\n\r\nI'm not sure this can be tested...",
    "head_branch": "timeout",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1171 from TheRealMarnes/timeout\n\n[done] Timeout"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234699dde8ed798d2ed8cd",
    "number": 1169,
    "body": "https://github.com/jdbi/jdbi/issues/1168",
    "head_branch": "annot",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1169 from TheRealMarnes/annot\n\nbeta+experimental annotations"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623469adde8ed798d2ed8ce",
    "number": 1167,
    "body": "",
    "head_branch": "contrib",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1167 from TheRealMarnes/contrib\n\ncontributing.md addition"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623469bdde8ed798d2ed8cf",
    "number": 1166,
    "body": "I'm working on a MustacheTemplateEngine module. During testing, I realized using `@UseTemplateEngine` was failing for it, as well as for StringSubTE. I revised the impl class behind it to do 2 things:\r\n- use a stream-based lookup sequence to avoid pyramid exception blocks\r\n- try to find a const `INSTANCE` in addition to constructors so TemplateEngines don't necessarily need to allow pointless instantiation and to reserve the constructor for internal use. The same idea could apply to factory methods named e.g. `of` if desired.",
    "head_branch": "useTemplateEngine",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1166 from TheRealMarnes/useTemplateEngine\n\n@UseTemplateEngine more expandable + fixes"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623469cdde8ed798d2ed8d0",
    "number": 1165,
    "body": "A few collateral fixes included, but nothing overwhelming or obscuring",
    "head_branch": "pmd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1165 from TheRealMarnes/pmd\n\nPMD #2"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623469ddde8ed798d2ed8d1",
    "number": 1164,
    "body": "",
    "head_branch": "pmd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1164 from TheRealMarnes/pmd\n\n[wip] PMD #1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623469edde8ed798d2ed8d2",
    "number": 1163,
    "body": "Proper fix for the symptom-fighting mentioned in https://github.com/jdbi/jdbi/pull/1162#discussion_r192883403\r\n\r\nDoes the jdbi team agree that empty tags in xml should be written self-closed or do we instead go with expanded empty tags (and reject this PR)? Either works for me. It just seems to me the current situation goes against general xml convention. I wonder why sortpom does that by default...\r\n\r\nI know this seems a bit silly but this is just something that should've been decided from the start, but was overlooked/swept under the rug :)",
    "head_branch": "sortpom",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1163 from TheRealMarnes/sortpom\n\nfix sortpom nuisance"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623469fdde8ed798d2ed8d3",
    "number": 1162,
    "body": "I'm no maven expert, but I believe it's universally bad form to specify inline versions anywhere but the dependencyManagement section of the parent pom, or the properties section for child poms to refer to for plugin versions.\r\n\r\nAlso moved the checkstyle plugin to what I think is a more correct location and bound it explicitly, along with pmd and sortpom, to a proper lifecycle.\r\n\r\nLike I said though, not a maven pro. Have worked with the thing for over 6 years but some of it still confuses me.",
    "head_branch": "cleanpom",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1162 from TheRealMarnes/cleanpom\n\n[housekeeping] pom checkup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346a0dde8ed798d2ed8d4",
    "number": 1161,
    "body": "Recent changes to JDBI have introduced another case where the build itself creates a modified pom. Rather than having to blow the file away after every build so I can keep merging master into my local fork, I have simply committed the post-build POM file.",
    "head_branch": "pom_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1161 from isaki-x/pom_fix\n\nAdditional pom fix for build time pom change"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346a1dde8ed798d2ed8d5",
    "number": 1160,
    "body": "See #1096 for context.\r\n\r\nWe have some situations where the same Java type should be bound or mapped differently depending on context.\r\n\r\n- Most strings can be bound with `VARCHAR`, but sometimes you need to bind with `NVARCHAR`.\r\n- Postgres has a `MACADDR` data type that can be mapped to a Java `String`, but it has to be bound with `setObject(PgObject)`.\r\n- Sometimes `Map<String, String>` refers to N key-value rows, and sometimes it refers to an `HSTORE` column from a single row (e.g. in a Postgres table).\r\n\r\nMy solution is inspired by JSR-330's `@javax.inject.Qualifier` meta-annotation. `@Qualifier` makes it possible to qualify a type so that the following \"qualified\" types are distinct:\r\n\r\n* `String`\r\n* `@NVarchar String`\r\n\r\nChanges in this branch:\r\n\r\n- New `core.qualifier` package:\r\n  - `@Qualifier` meta-annotation, for identifying annotation types that are treated as type qualifiers. Inspired by JSR-330's `@Qualifier` annotation.\r\n  - `@NVarchar` qualifying annotation for Strings stored in NVARCHAR columns.\r\n  - `QualifiedType` - represents a `java.lang.reflect.Type` with a `Set<Annotation>` of qualifying annotations.\r\n  - `Qualifiers` - utility class for working with qualifying annotations\r\n    - `nVarchar()` static method provides an `NVarchar` instance. Useful for working with `QualifiedType.of(type, qualifiers...)`, `ResultBearing.mapTo(type, qualifiers)`, etc.\r\n    - `getQualifiers(AnnotatedElement...)` method inspects a set of Java elements and returns all the annotations on those elements whose annotation types are annotated with `@Qualifier`.\r\n- `core.argument` package\r\n  - `Arguments.findFor(QualifiedType type, Object value)`\r\n  - `StatementContext.findArgumentFor(QualifiedType, Object value)`\r\n  - Built-in argument factory for `@NVarchar String` types.\r\n  - `SqlStatement.bindBean()`, `.bindMethods()`, and `.bindFields()` (as well as their SqlObject annotation counterparts) honor qualifying annotations on properties, methods, and fields, respectively.\r\n  - Qualifying annotations on an `ArgumentFactory` class are honored.\r\n- Changes to `core.mapper` package\r\n  - `ColumnMappers.register(QualifiedType, ColumnMapper<?>)`\r\n  - `ColumnMappers.findFor(QualifiedType)`\r\n  - `StatementContext.findColumnMapperFor(QualifiedType)`\r\n  - `Configurable.registerColumnMapper(QualifiedType, ColumnMapper<?>)`\r\n  - Built-in column mapper for `@NVarchar String` types.\r\n  - `BeanMapper`, `ConstructorMapper`, and `FieldMapper` honor qualifying annotations on getters/setters/setter params, constructor parameters, and fields, respectively.\r\n  - Qualifying annotations on a `ColumnMapperFactory` class are honored.\r\n  - Qualifying annotations on an inferred column mapper class are honored.\r\n- `SqlStatement` method additions:\r\n  - `bindNVarchar(String)`\r\n  - `bindByType(position, value, QualifiedType)`\r\n  - `bindByType(name, value, QualifiedType)`\r\n- Changes to `core.result` package\r\n  - `ResultBearing.mapTo(Class<T>, Annotation...)`\r\n  - `ResultBearing.mapTo(GenericType<T>, Annotation...)`\r\n  - `ResultBearing.mapTo(QualifiedType)`\r\n- SQL Object\r\n  - Honors qualifying annotations on SQL Object method (qualifier applies to return type)\r\n  - Honors qualifying annotations on SQL Object method parameters\r\n- Kotlin\r\n  - `SqlStatement.bindKotlin()` extension methods\r\n  - `KotlinMapper` honors qualifying annotations on constructor parameters and properties.\r\n- Kotlin SQL Object\r\n  - Plugin honors qualifying annotations on SQL Object methods (applies to return type) and parameters\r\n  - `@BindKotlin` annotation\r\n- JPA\r\n  - `JpaMapper` and `@BindJpa` honor qualifying annotations on fields, getters, setters, or setter params\r\n-  Postgres\r\n    - `@HStore` qualifying annotation for `Map` values stored in HSTORE columns. Binding is supported for any kind of `Map`, and mapping is supported to `Map<String, String>`.\r\n    - `@MacAddr` qualifying annotation for String values stored in MACADDR columns.\r\n    - `PostgresQualifiers` static utility class with `hStore()` and `macAddr()` methods.\r\n",
    "head_branch": "qualified-types",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1160 from jdbi/qualified-types\n\nQualified types for arguments and column mappers"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346a2dde8ed798d2ed8d6",
    "number": 1159,
    "body": "This module has no sources and pmd doesn't like that. Disable plugin execution there to get rid of the dozens of stacktraces in maven builds.",
    "head_branch": "pmd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1159 from TheRealMarnes/pmd\n\n[quick fix] pmd error in noparameters module"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346a3dde8ed798d2ed8d7",
    "number": 1158,
    "body": "_christopher nolan movie droning rumble sound_\r\n\r\nI prepared this a few days ago. Updated the pmd plugin to the latest, added it to the pom to run for all module builds. Added a ruleset that activates all rules and then disabled those that jdbi triggered. Idea is to make additional PRs enabling a few rules at a time with the corresponding code fixes and removing overlaps from checkstyle.",
    "head_branch": "pmd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1158 from TheRealMarnes/pmd\n\nPMD #0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346a4dde8ed798d2ed8d8",
    "number": 1157,
    "body": "So this is a POC I wanted to make, based on what I've done in my private project. It ties in to a discussion we previously had about avoiding presumptions about data type support in databases and saddling users up with undesired conversion behavior they'd need to weed out, as well as the `NaiveJavaTimePlugin` I was going to/asked to make, and the db-specific preconfiguration plugins that were brought up once as a desirable Jdbi feature.\r\n\r\nAt its core are the `PrimitivesPlugin`, `OptionalPrimitivesPlugin`, and `JdbcbasicsPlugin` (built on pure non-primitive jdbc-provided get/set methods, like for `String` and `java.sql` classes). This represents the very core java/sql conversions.\r\n\r\nBeside those are the `LegacyTimePlugin` (`java.util.Date` et al), and the `UnreliableJavaTimePlugin` aka `NaiveJavaTimePlugin`.\r\n\r\nWhere it gets interesting is the `meta` package. This contains the `EssentialsPlugin` with a `controversial` option, to install the core converters and optionally the unsafe ones that are de facto standards but not always desirable. All other data types are blocked out for safety.\r\n\r\nBeside that is the convenient `HsqldbPlugin`, which registers the core plugin and a special plugin that uses `getObject`/`setObject` without any types for a set of classes. Hsqldb has explicit support for doing this for some classes such as `UUID` and `java.time` instances, removing the need for any special mapping logic or fickle byte array messing. Installing this plugin tailors Jdbi to support 1:1 the same data types hsqldb supports, no more or less.\r\nThis is something I'm personally very fond of, and I think Jdbi would benefit from too. Other databases could get similar plugins, from people who are properly familiar with them and their conversion support. As you can see from the code, a structure like this makes it very easy to tailor a plugin to a database's specific type support.\r\n\r\nIt's just a POC so no tests, javadoc, or dependency version restrictions atm... I'll write tests later if this idea takes off, but I already know 99% of it will work because my private project basically contains what the HsqldbPlugin does (in less concentrated form), *with* a ton of integration tests to verify nullity and integrity.\r\n\r\nI'm a little unsure how Optional support works in jdbi atm so I just included a quick plugin for it... And for enums too while I'm at it ¯\\\\\\_(ツ)\\_/¯ I'm not saying the code is perfect or anything yet though...",
    "head_branch": "mapseppoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346a5dde8ed798d2ed8d9",
    "number": 1155,
    "body": "Fix https://github.com/jdbi/jdbi/issues/1154",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1155 from dermot-hardy/master\n\nDrop optional flag from spring dependencies in dependency management"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346a6dde8ed798d2ed8da",
    "number": 1153,
    "body": "Every time I build and install the latest JDBI3 snapshot, the build changes `core/pom.xml` so when I go to pull the latest commits, git complains that my changes to `core/pom.xml` will be overwritten. This requires me to have to `git checkout -- core/pom.xml` before every pull.\r\n\r\nI have been able to reproduce this on an Ubuntu 16.04.4LTS Sever:\r\n\r\n```\r\nApache Maven 3.3.9\r\nMaven home: /usr/share/maven\r\nJava version: 1.8.0_171, vendor: Oracle Corporation\r\nJava home: /usr/lib/jvm/java-8-openjdk-amd64/jre\r\nDefault locale: en_US, platform encoding: UTF-8\r\nOS name: \"linux\", version: \"4.4.0-127-generic\", arch: \"amd64\", family: \"unix\"\r\n```\r\n\r\nAs well as my Mac:\r\n\r\n```\r\n$ mvn --version\r\nApache Maven 3.5.3 (3383c37e1f9e9b3bc3df5050c29c8aff9f295297; 2018-02-24T14:49:05-05:00)\r\nMaven home: <redacted>/apache-maven-3.5.3\r\nJava version: 1.8.0_171, vendor: Oracle Corporation\r\nJava home: /Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/jre\r\nDefault locale: en_US, platform encoding: UTF-8\r\nOS name: \"mac os x\", version: \"10.13.4\", arch: \"x86_64\", family: \"mac\"\r\n```\r\n\r\nAs such, I have simply committed the change made by the build process so this never happens again.\r\n\r\nThanks.",
    "head_branch": "quick_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1153 from isaki-x/quick_fix\n\nFixed for POM conflict issue"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346a7dde8ed798d2ed8db",
    "number": 1152,
    "body": "Fixes #1133 \r\n\r\n/cc @Sch3lp",
    "head_branch": "jdbirule-flyway-migrations",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1152 from jdbi/jdbirule-flyway-migrations\n\nJdbiRule flyway migrations"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346a8dde8ed798d2ed8dc",
    "number": 1151,
    "body": "",
    "head_branch": "assertions_2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1151 from PascalSchumacher/assertions_2\n\nUse hasSize assertion."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346a9dde8ed798d2ed8dd",
    "number": 1150,
    "body": "",
    "head_branch": "replace_junit_assertions_with_assertj",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1150 from PascalSchumacher/replace_junit_assertions_with_assertj\n\nReplace JUnit assertions with AssertJ assertions"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346aadde8ed798d2ed8de",
    "number": 1149,
    "body": "just the release notes for my merged PRs so far... Forgot some, thought others not noteworthy, figure now basically anything user-visible is worth mentioning",
    "head_branch": "releasenotes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1149 from TheRealMarnes/releasenotes\n\nrelease notes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346abdde8ed798d2ed8df",
    "number": 1148,
    "body": "",
    "head_branch": "assertions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1148 from PascalSchumacher/assertions\n\nAssertions"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346acdde8ed798d2ed8e0",
    "number": 1147,
    "body": "",
    "head_branch": "remove_unnecessary_jexl_test_dependency",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1147 from PascalSchumacher/remove_unnecessary_jexl_test_dependency\n\nCore and StringTemplate4: Remove unused commons-jexl test dependency"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346addde8ed798d2ed8e1",
    "number": 1146,
    "body": "",
    "head_branch": "update_mockito",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1146 from PascalSchumacher/update_mockito\n\nUpdate mockito-core to version 2.18.3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346aedde8ed798d2ed8e2",
    "number": 1145,
    "body": "",
    "head_branch": "update_assertj",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1145 from PascalSchumacher/update_assertj\n\nUpdate assertj-core to version 3.10.0 and assertj-guava to version 3.2.0"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346afdde8ed798d2ed8e3",
    "number": 1144,
    "body": "@qualidafial https://github.com/jdbi/jdbi/pull/1143#pullrequestreview-124955166",
    "head_branch": "apicruft",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1144 from TheRealMarnes/apicruft\n\n[requested] move utility method out of public api"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346b0dde8ed798d2ed8e4",
    "number": 1143,
    "body": "It confused me for a second when I started using this class, and I'm the guy who wrote the whole thing, so I'm assuming it would confuse others too...",
    "head_branch": "extradoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1143 from TheRealMarnes/extradoc\n\n[doc] some extra sqllogger javadoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346b1dde8ed798d2ed8e5",
    "number": 1142,
    "body": "Inspired by something I wanted to do in my private project: log some info when SerializableTransactionRunner encounters a serialization failure, and a final time upon success.\r\n\r\n> transaction failed 1 time! retrying...\r\n> transaction failed 2 times! retrying...\r\n> transaction succeeded after 2 retries!",
    "head_branch": "uponfailure",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1142 from TheRealMarnes/uponfailure\n\n[done?] SerializableTransactionRunner onFailure/onSuccess callback"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346b2dde8ed798d2ed8e6",
    "number": 1140,
    "body": "With this class using `enum` as a singleton mechanism, IDEs tend to suggest silly things like `MessageFormatTemplateEngine.valueOf(string)` and other `Enum` methods. This is really just confusing for users.\r\n\r\nA plain static instance and private constructor will suffice. This change is non-breaking.",
    "head_branch": "enum",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1140 from TheRealMarnes/enum\n\n[API niceness] MessageFormatTemplateEngine not an enum"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346b3dde8ed798d2ed8e7",
    "number": 1139,
    "body": "",
    "head_branch": "jdbirule-flyway-migrations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1139 from Sch3lp/jdbirule-flyway-migrations\n\nAllow flyway migrations from multiple locations"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346b5dde8ed798d2ed8e8",
    "number": 1138,
    "body": "I need to have Freemarker use computer as default number format. It doesnt make sense to use thousand separators for numbers in sql. At least not implicitly. Its too much work having to always use ?c on all numbers to be used in queries.",
    "head_branch": "freemarkerConfig",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1138 from jarlah/freemarkerConfig\n\nDefault number format for Freemarker configuration"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346b5dde8ed798d2ed8e9",
    "number": 1134,
    "body": "It seems the Kotlin Mapper wasn't working correctly when trying to register the mapper for a type without using the factory:\r\n\r\neg: `jdbi.registerMapper(KotlinMapper(Entity::class.java))`\r\n\r\nThe reason for this is that the `KotlinMapper` is not parametrized and extends `RowMapper` by doing `: RowMapper<Any>`, the problem with this is that `registerMapper` will try to infer the class from the parametrized type of the mapper, and in this case it's `Any` (or `Object`), which I found out by debugging after wrestling with it for a while.\r\n\r\nIt also adds an annotation to register `KotlinMapper`s in the same way you'd register `BeanMapper` so that you can override the default mapper with a prefix:\r\n\r\n```\r\n    @SqlQuery(\"SELECT id AS c_id, name AS c_name FROM customer WHERE id=:id\")\r\n    @RegisterKotlinMapper(Customer::class, \"c_\")\r\n    fun selectCustomer(@Bind(\"id\") id: Int): Customer\r\n```\r\n\r\nWhich in that example above is not useful but it IS useful when you're working with joins. This came up as an attempt to troubleshoot: https://github.com/jdbi/jdbi/issues/1132",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1134 from gabzim/master\n\nEnables easy registration of kotlin mappers"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346b7dde8ed798d2ed8ea",
    "number": 1133,
    "body": "Also added static factory method in abstract JdbiRule for consistency.\r\n\r\nUnsure about the class name, but the class wraps the `PreparedDBRule` from the otj-pg-embedded lib.\r\n\r\nThis newly introduced rule provides the convenience of having an in memory postgres db, that gets set up with Flyway migrations according to the provided migrationLocations.\r\n\r\nExample usage:\r\n```java\r\npublic class SomeTest {\r\n   @Rule\r\n   public JdbiRule db = JdbiRule.preparedEmbeddedPostgres(\"db/migration\").withPlugins();\r\n}\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346b8dde8ed798d2ed8eb",
    "number": 1130,
    "body": "Rename `params` variable to `contact` to make the code sample valid. Also, asciidoc requires an extra backtick when it is embedded within non-whitespace characters, otherwise a backtick appears in the rendered documentation.",
    "head_branch": "fix/index-adoc-minor-changes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1130 from EthanLozano/fix/index-adoc-minor-changes\n\nFix/index adoc minor changes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346b9dde8ed798d2ed8ec",
    "number": 1129,
    "body": "Quick implementation of a regex-based non-lexing SqlParser.\r\n\r\nHas obvious risks but works great if the user watches his step accordingly. Has the advantage of being configurable, unlike the antlr SqlParsers. You gain some you lose some.\r\n\r\nNeeds some more tests, javadoc, and maybe some more implementation (I don't know yet what to do about positionals for example).\r\n\r\nIs this appealing to be fleshed out and merged or nah?",
    "head_branch": "regsql",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346badde8ed798d2ed8ed",
    "number": 1128,
    "body": "SqlParser for `$foo` placeholders. Not familiar with antlr beyond editing the existing scripts and figuring out how it works that way, so I'm not entirely sure the lexer makes perfect sense as-is (it's an edit of the Hash lexer).\r\n\r\nFound a suspicious test case `TestHashPrefixSqlParser.testCommentQuote`. Doesn't really seem to test anything of value. I suspect it needs to look more like my `TestDollarPrefixSqlParser.testCommentAndQuote` to be meaningful.",
    "head_branch": "dollar",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346bbdde8ed798d2ed8ee",
    "number": 1127,
    "body": "Statements a la `handle.createQuery(line).configure(ResultProducers.class, rp -> rp.allowNoResults(true)).mapToMap().list()` throw an exception because of mappers calling `EmptyResultSet.getMetaData`, which I've now patched to return EmptyResultSetMetaData, where `getColumnCount() == 0` is the magic bit. This fixes the use case (see tests) and shouldn't break anything.\r\n\r\nThere is the philosophical argument of throwing exceptions vs returning neutral values (for the other methods), if anyone wants to go into that, but I think it works fine as-is.",
    "head_branch": "noResults",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1127 from TheRealMarnes/noResults\n\n[done] fix for allowNoResults with mapping"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346bcdde8ed798d2ed8ef",
    "number": 1124,
    "body": "When implementing interfaces with generic types, in Java 8, the\r\nClass.getMethods() invocation will return methods with matching\r\nsignatures but different return types. This fix ensures the most\r\nspecific return type is the version chosen.\r\n\r\nThis fixes the issue brought up in #1123.",
    "head_branch": "issue-1123",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1124 from isaki-x/issue-1123\n\nAddressed duplicate methods from reflective lookup"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346bddde8ed798d2ed8f0",
    "number": 1122,
    "body": "Just an extra test for the sake of testing and usage demonstration",
    "head_branch": "doctest",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1122 from TheRealMarnes/doctest\n\n[done] extra test"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346bedde8ed798d2ed8f1",
    "number": 1118,
    "body": "…ng it ourselves.\r\n\r\nConfirmed this change fixes an error seen while trying to use FreeMarker SQL locator:\r\n\r\n```\r\n! java.lang.IllegalArgumentException: URI is not hierarchical\r\n! at java.io.File.<init>(File.java:418)\r\n! at org.jdbi.v3.freemarker.FreemarkerSqlLocator.findTemplateDirectory(FreemarkerSqlLocator.java:47)\r\n! at org.jdbi.v3.freemarker.FreemarkerSqlLocator.findTemplate(FreemarkerSqlLocator.java:54)\r\n! at org.jdbi.v3.freemarker.internal.UseFreemarkerSqlLocatorImpl.lambda$configureForType$1(UseFreemarkerSqlLocatorImpl.java:39)\r\n! at org.jdbi.v3.sqlobject.statement.internal.CustomizingStatementHandler.locateSql(CustomizingStatementHandler.java:172)\r\n```\r\n\r\nWe were calling URL, URI, File APIs to load files on the classpath, but FreeMarker already provides facilities to load templates in a much easier way.",
    "head_branch": "freemarker-uri-exception",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1118 from jdbi/freemarker-uri-exception\n\nUse FreeMarker's built-in classpath template loading instead of rolli…"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346bfdde8ed798d2ed8f2",
    "number": 1114,
    "body": "I've released 3.2.0 to central, and published latest docs to jdbi.org.",
    "head_branch": "v3.2.0-release",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1114 from jdbi/v3.2.0-release\n\nV3.2.0 release"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346c0dde8ed798d2ed8f3",
    "number": 1113,
    "body": "Sorry, stupid little defect in this test that I never realized would be possible",
    "head_branch": "fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1113 from TheRealMarnes/fix\n\n[asap!] fix test with random failures"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346c1dde8ed798d2ed8f4",
    "number": 1112,
    "body": "This adds a built-in argument factory for\nOptionalInt, OptionalLong and OptionalDouble.",
    "head_branch": "optional",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1112 from electrum/optional\n\nAdd support for binding primitive optionals"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346c2dde8ed798d2ed8f5",
    "number": 1111,
    "body": "",
    "head_branch": "tmpng.nop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1111 from TheRealMarnes/tmpng.nop\n\n[done] TemplateEngine.NOP"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346c3dde8ed798d2ed8f6",
    "number": 1110,
    "body": "Added a couple of convenience methods to get defined attributes directly from the Jdbi instance. Basically the same way the StatementContext does it.",
    "head_branch": "zikani03/1109-jdbi-attributes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346c4dde8ed798d2ed8f7",
    "number": 1108,
    "body": "Converting `LocalDate` arguments to `Timestamp` might have adverse effects, to the point of setting the wrong date in the database if local and server timezones are far enough apart.",
    "head_branch": "local-date-sql",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1108 from pazustep/local-date-sql\n\nBind `LocalDate` parameters using `setDate` instead of `setTimestamp`"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346c5dde8ed798d2ed8f8",
    "number": 1107,
    "body": "#1101\r\n\r\nFreemarker has more power than stringtemplate4. And is much more thread safe. Normally there should only be one Configuration but if they are not modified each cached template can have it's own Configuration. Template is also thread safe. \r\n\r\nMostly all tests in stringtemplate4 has been copy pasted. Technically this freemarker module works the same way as stringtemplate4 with some syntactic differences in the template sql and how they must be stored in classpath ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1107 from jarlah/master\n\nProposal for new Freemarker module"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346c6dde8ed798d2ed8f9",
    "number": 1106,
    "body": "",
    "head_branch": "test/more-json-operators",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1106 from EthanLozano/test/more-json-operators\n\nMore json operator tests"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346c7dde8ed798d2ed8fa",
    "number": 1105,
    "body": "#1101 \r\n\r\nSo I've got a TemplateEngine largely worked out.\r\n\r\nI came across `SqlParser`. It deals with string rendering so I'm wondering if I can't do something with that too.\r\n\r\nIs an SqlParser allowed to use the `StatementContext` to replace variables in the string based on the defined attributes (`define(\"key, \"value\")`) or is it supposed to work independently of the context?",
    "head_branch": "stringsub",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1105 from TheRealMarnes/stringsub\n\n[done] StringSubstitutor integration"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346c8dde8ed798d2ed8fb",
    "number": 1104,
    "body": "Fixes #1069.\r\n\r\nIncludes the tests from #1094.\r\n\r\n/cc @alwins0n @EthanLozano \r\n\r\nEdit: also refactored the tests around SQL parsers and defined attribute template engine--they were all jumbled together, so I split them into separate test classes.",
    "head_branch": "sql-parser-double-question-mark-escape",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1104 from jdbi/sql-parser-double-question-mark-escape\n\nUpdate SQL parsers to treat `??` as a literal instead of positional parameters"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346c9dde8ed798d2ed8fc",
    "number": 1102,
    "body": "Automatically tidy, ordered files > allowing arbitrary file structure\r\n\r\nHad to add a maven module, and so I noticed...",
    "head_branch": "sortpom",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1102 from TheRealMarnes/sortpom\n\n[done] sortpom"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346cadde8ed798d2ed8fd",
    "number": 1100,
    "body": "Part 2 of checkstyling",
    "head_branch": "checkstyle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1100 from TheRealMarnes/checkstyle\n\n[done?] checkstyle part 2"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346cbdde8ed798d2ed8fe",
    "number": 1099,
    "body": "Thought this could be simple and general enough to be worth including. Feel free to call it too niche to be worth bothering with though.\r\n\r\nStringSubstitutor could be used to implement the default \\<foo\\> TemplateEngine too, btw. I mean, this class is basically the generified version of it, with \\< and \\> set instead of ${ and }.\r\n\r\n![image](https://cdn.iwastesomuchtime.com/November-30-2011-11-10-09-ScreenShot20111130at8.jpg)\r\n",
    "head_branch": "strsubtemplate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346ccdde8ed798d2ed8ff",
    "number": 1098,
    "body": null,
    "head_branch": "build-scripts",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1098 from jdbi/build-scripts\n\ntidy up build scripts"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346cddde8ed798d2ed900",
    "number": 1097,
    "body": "@brianm, is this still needed, or can we nuke it?",
    "head_branch": "de-noticeify",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1097 from jdbi/de-noticeify\n\nRemove NOTICE file that doesn't seem particularly informative"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346cedde8ed798d2ed901",
    "number": 1095,
    "body": "#1089",
    "head_branch": "checkstyle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1095 from TheRealMarnes/checkstyle\n\n#1089 checkstyle"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346cfdde8ed798d2ed902",
    "number": 1094,
    "body": "Exposes the following bug with sql parsing:\r\n```\r\norg.jdbi.v3.core.statement.UnableToExecuteStatementException: Cannot mix named and positional parameters in a SQL statement: [?, ?, property]\r\n```",
    "head_branch": "test/json-operator",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346d0dde8ed798d2ed903",
    "number": 1093,
    "body": "Fixes #1069",
    "head_branch": "pg-jsonb-query",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1093 from jdbi/pg-jsonb-query\n\nAdd a test to show jsonb query '?' can be escaped as '??' and work"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346d1dde8ed798d2ed904",
    "number": 1092,
    "body": "Fixes #1083 ",
    "head_branch": "identifier-1083",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Turn the DefineStatementLexer into a filter lexer, which seems to do a kind of backtracking"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346d2dde8ed798d2ed905",
    "number": 1091,
    "body": "This is a test that exposes a reflection and/or generics error in v3.1.1. The head of master seems to have fixed the problem. But, I figure this test could be useful to make sure that generics and polymorphism work in future releases.\r\n\r\nRunning this test on v3.1.1 on jdk1.8.0_172 results in the following error:\r\n```\r\n  <testcase name=\"testRegisterGenericRowMapperAnnotationWorks\" classname=\"org.jdbi.v3.sqlobject.TestRegisteredGenericReturnAndParam\" time=\"0.218\">\r\n    <error message=\"No mapper registered for type interface java.util.List\" type=\"org.jdbi.v3.core.mapper.NoSuchMapperException\">org.jdbi.v3.core.mapper.NoSuchMapperException: No mapper registered for type interface java.util.List\r\n\tat org.jdbi.v3.sqlobject.TestRegisteredGenericReturnAndParam.testFoodToppingRestrictions(TestRegisteredGenericReturnAndParam.java:50)\r\n\tat org.jdbi.v3.sqlobject.TestRegisteredGenericReturnAndParam.testRegisterGenericRowMapperAnnotationWorks(TestRegisteredGenericReturnAndParam.java:40)\r\n</error>\r\n```\r\nThe problem seems to come up because `SqlObjectFactory.methodHandlersFor` registers two versions of the same method (one with an Object param and the second with a String param):\r\n```\r\npublic default java.util.List TestRegisteredGenericReturnAndParam$Gyro.getToppings(int,java.lang.Object)\r\n```\r\nand\r\n```\r\npublic abstract java.util.List TestRegisteredGenericReturnAndParam$Gyro.getToppings(int,java.lang.String)\r\n```\r\nWhere only the latter has a generic `returnType` in `ResultReturner.forMethod`, so `CollectedResultReturner` just returns the original collection `java.util.List` for the former.",
    "head_branch": "test/generic-param-and-return",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1091 from EthanLozano/test/generic-param-and-return\n\nTest registered DAO with generic parameter and returned collection"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346d4dde8ed798d2ed906",
    "number": 1090,
    "body": "",
    "head_branch": "st-no-concurrent-load",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1090 from jarlah/st-no-concurrent-load\n\nsuggestion on how to fix the template loading issue"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346d5dde8ed798d2ed907",
    "number": 1088,
    "body": "Fixes #1052",
    "head_branch": "st-no-concurrent-load",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346d6dde8ed798d2ed908",
    "number": 1087,
    "body": "Fixes #1082 ",
    "head_branch": "bridge-method-fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1087 from jdbi/bridge-method-fix\n\nAdd bridge method handler which delegates to target method"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346d7dde8ed798d2ed909",
    "number": 1086,
    "body": "#988\r\n\r\nI've had a look through the code. \"Fixing\" the arguments and mappers is simple enough, but I think some other `Config` classes have the same issue, there are other OOTB impls being registered by default.\r\n\r\nI think it's best to separate it all, make a \"dumb\" no-assumptions core with all the convenient impls provided separately in `Plugin`s, and pre-installed in some of the methods in `Jdbi` to keep compatibility. Separation of church and state or API and impl if you will, so we'd have a `PrimitivesPlugin`, `BuiltInCollectorsPlugin` and the like. They could all be composed into a single `JdbiDefaultsPlugin`.\r\n\r\nThoughts?",
    "head_branch": "#988",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346d8dde8ed798d2ed90a",
    "number": 1084,
    "body": "Close statement for @SqlBatch / fix #1043 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1084 from mseele/master\n\nfix #1043"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346d9dde8ed798d2ed90b",
    "number": 1081,
    "body": "#981 \r\n\r\nI'd like some input from the team about the overall design and whether I should take testing any further.\r\n\r\nI personally think the design is ok as this is basically exactly what I do in my personal project for which I opened the issue.\r\n\r\nLoggableArgument is a copy-paste from my project, where I use it in all of my custom ArgumentFactories. IIRC the BuiltInArgumentFactory already provides a usable `toString()`, so if users make sure to use LoggableArgument in their custom ArgumentFactories, every Argument should be loggable. Works fine in my project.\r\n\r\nAs for testing, I think the current tests cover everything and are sufficient even if some more combinations could be made. Writing more tests feels a bit redundant to me since most of the tested code will just be the same.\r\n\r\nI felt like deprecating TimingCollector maybe?",
    "head_branch": "#981",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1081 from TheRealMarnes/#981\n\n[done] fix #981 logging interface"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346dadde8ed798d2ed90c",
    "number": 1080,
    "body": "#999",
    "head_branch": "#999",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1080 from TheRealMarnes/#999\n\nfix #999"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346dbdde8ed798d2ed90d",
    "number": 1079,
    "body": "#1065 ",
    "head_branch": "#1065",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1079 from TheRealMarnes/#1065\n\nfix #1065"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346dcdde8ed798d2ed90e",
    "number": 1078,
    "body": "",
    "head_branch": "template",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1078 from TheRealMarnes/template\n\nminor improvement to MessageFormatTemplateEngine"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346dddde8ed798d2ed90f",
    "number": 1077,
    "body": "The top and right now only line tells git to try to determine if a file is text or binary, and if it's text, convert its line endings to the pc-native type. This is done regardless of user settings.\r\n\r\nI dislike windows' special line endings so I've disabled autocrlf on my system to be able to work with LF despite being on windows. I dislike git ever changing the content of my files anyway.\r\nHowever, this caused jdbi's mvn builds to fail on my system: checkstyle checks that files end with _the native_ line endings. Having autocrlf disabled so my files all had LF instead of CRLF caused checkstyle to go boom on every file.\r\n\r\nHaving a file like this would prevent such situations and is a good thing for project consistency, where project rules should be enforced over personal style anyway.\r\n\r\nI expect this file will need to get some more fine-grained rules by people with more knowledge of the project.\r\n\r\nThis concept is incompatible with editorconfig's `end_of_line` setting which can only be set to `lf` or `crlf`, not `native`. Since the build depends on files having native line endings, I would just remove this setting from editorconfig.\r\n\r\nMaybe some discussion needs to be had so there can be a definitive decision about line endings. It's a tricky subject that's as widely debated as spaces-vs-tabs though. Personally I think forcing native line endings is not a bad idea even though it's not my taste. Forcing lf isn't a bad idea either but I expect some people will dislike it. Files that necessarily must stay the same on all platforms (like flyway scripts, which are hashed) can be added to the gitattributes file.",
    "head_branch": "gitattributes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge branch 'master' into gitattributes"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346dedde8ed798d2ed910",
    "number": 1076,
    "body": "Added Support for using [Immutables ](https://immutables.github.io/).",
    "head_branch": "immuable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346dfdde8ed798d2ed911",
    "number": 1075,
    "body": "#1074 \r\nAdded OptionalNestedArgument Annotation to enable optional nested beans.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1075 from 28Smiles/master\n\n#1074 Added OptionalNestedArgument Annotation for Nested Beans"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346e0dde8ed798d2ed912",
    "number": 1073,
    "body": "",
    "head_branch": "editorconfig",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1073 from TheRealMarnes/editorconfig\n\neasier life for contributors: add editorconfig"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346e1dde8ed798d2ed913",
    "number": 1072,
    "body": "https://github.com/jdbi/jdbi/issues/1071",
    "head_branch": "#1071",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1072 from TheRealMarnes/#1071\n\n#1071 MessageFormatTemplateEngine"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346e2dde8ed798d2ed914",
    "number": 1067,
    "body": "Fixes #1034 ",
    "head_branch": "linked-hash-map-row-reduce-doc-bug",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1067 from jdbi/linked-hash-map-row-reduce-doc-bug\n\nFix docs that still refer to now-removed LinkedHashMapRowReducer.of() method"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346e3dde8ed798d2ed915",
    "number": 1066,
    "body": "Fixes #497.\r\n\r\n@keithbranton can you please confirm this fixes SQL Object default methods in JDK 9?",
    "head_branch": "sql-object-default-methods-jdk9",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1066 from jdbi/sql-object-default-methods-jdk9\n\nSupport SQL Object default methods in JDK9+"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346e4dde8ed798d2ed916",
    "number": 1064,
    "body": "Fixes #1063",
    "head_branch": "no-resultset",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "ResultProducers: add option to suppress exception if there's no result set\n\nFixes #1063"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346e5dde8ed798d2ed917",
    "number": 1062,
    "body": "Fixes #789",
    "head_branch": "testing-module",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "New minor because of new feature."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346e6dde8ed798d2ed918",
    "number": 1061,
    "body": "I think this is a reasonable compromise.  It'd be nice to have it\nrecognize arbitrary characters but the SQL language itself is pretty\nbiased already, and that could get confusing really fast.\n\nFixes #350",
    "head_branch": "unicode-names",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1061 from jdbi/unicode-names\n\nTest that statement parser can handle quoted unicode characters"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346e7dde8ed798d2ed919",
    "number": 1060,
    "body": "This allows you to execute multiple statements in a batch\n\nFixes #131",
    "head_branch": "sqlscripts",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1060 from jdbi/sqlscripts\n\nImplement @SqlScript"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346e8dde8ed798d2ed91a",
    "number": 1059,
    "body": "This seems to get Travis to test on jdk9.\r\nRight now it fails due to a Kotlin access error.",
    "head_branch": "jdk9",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1059 from jdbi/jdk9\n\njdk9"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346e9dde8ed798d2ed91b",
    "number": 1058,
    "body": "Some time ago, when I made a PR to document `@BindList` and `bindList`, I seem to have forgotten to close the string and method call. This is both wrong and doesn't look right in docs. Let's fix that.",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1058 from pikzen/patch-2\n\nCorrect missing characters in BindList documentation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346eadde8ed798d2ed91c",
    "number": 1055,
    "body": "When an instance of `ST` is created without an explicit group, it adds\r\nthe parsed template to `STGroup.defaultGroup`. This leads to a leak\r\neverytime a query is parsed, as it is a singleton.\r\n\r\nThis change passes a new instance of `STGroup` everytime a new instance\r\nof `ST` is created and thus allows GC to reclaim the templates.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1055 from cskr/master\n\nFix memory leak in StringTemplateEngine"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346ebdde8ed798d2ed91d",
    "number": 1053,
    "body": "Fixes #1015 \r\n\r\nHopefully OP can test this, as I don't really care to register and download IBM's JDK.  But it looks harmless to include (it only widens the lookup) and all the tests pass...",
    "head_branch": "default-public-lookup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1053 from jdbi/default-public-lookup\n\nDefaultMethodHandler: terrible no good very bad hack hack now also matches `public` on lookup"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346ecdde8ed798d2ed91e",
    "number": 1049,
    "body": "PriorityQueue support.\r\nMultimap support.\r\nUpdated docs",
    "head_branch": "vavr-plugin-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1049 from alwins0n/vavr-plugin-update\n\nVavr plugin update"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346eddde8ed798d2ed91f",
    "number": 1044,
    "body": "Fixes #1033.\r\n\r\n/cc @Mario-Eis @Gpas",
    "head_branch": "thread-local-cleanup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1044 from jdbi/thread-local-cleanup\n\nClean up thread locals with remove() on handle close"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346eedde8ed798d2ed920",
    "number": 1036,
    "body": "See #1035 (this doesn't fix anything, but adds a missing test case).",
    "head_branch": "jdbi-1035",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1036 from FredDeschenes/jdbi-1035\n\nAdd test for Kotlin SQL object `getHandle`"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346efdde8ed798d2ed921",
    "number": 1031,
    "body": "",
    "head_branch": "v3.1.0-release",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1031 from jdbi/v3.1.0-release\n\nV3.1.0 release"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346f0dde8ed798d2ed922",
    "number": 1028,
    "body": "…o v3 guide. And other cosmetic improvements to doc.\r\n\r\nFixes #970 ",
    "head_branch": "v2-to-v3-guide-improvements",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1028 from jdbi/v2-to-v3-guide-improvements\n\nDocument RegisterMapper split into Register(Row|Column)Mapper in v2 t…"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346f1dde8ed798d2ed923",
    "number": 1026,
    "body": "tag @pennello ",
    "head_branch": "typed-enum-regression",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1026 from jdbi/typed-enum-regression\n\nFix regression in typed enum support"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346f2dde8ed798d2ed924",
    "number": 1024,
    "body": "Fixes #1022 \r\n\r\n* Added method `OracleReturning.ReturnParameters.register(String name, int oracleType)`\r\n* Made `Binding` methods `addPositional`, `addNamed`, and `addNamedArgumentFinder` public. `OracleReturning` does not have access to the `SqlStatement` to bind in the usual way, however we are able to add the binding via `StatementContext.getBinding().addXyz()`.\r\n* Added new lifecycle hook `StatementCustomizer.beforeBinding()` to allow customizers to bind extra parameters before they are applied to the statement.\r\n",
    "head_branch": "oracle-returning-named-params",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1024 from jdbi/oracle-returning-named-params\n\nSupport named parameters with OracleReturning"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346f3dde8ed798d2ed925",
    "number": 1020,
    "body": "Nobody is crazy enough to care about case sensitive enum matching, right?",
    "head_branch": "enum-insensitive",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "EnumMapper: allow case insensitive mapping\n\nNobody is crazy enough to care about case sensitive enum matching, right?"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346f4dde8ed798d2ed926",
    "number": 1019,
    "body": "Got tired of those pesky `.java` everywhere.",
    "head_branch": "kclass-extensions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1019 from FredDeschenes/kclass-extensions\n\nAdd some Kotlin convenience methods"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346f5dde8ed798d2ed927",
    "number": 1014,
    "body": "Upgrade the dependency to the latest version of Guava, so we can make sure that the integration works with it.",
    "head_branch": "upgrade_guava",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346f6dde8ed798d2ed928",
    "number": 1013,
    "body": "Explain how @BindList is used, as the need to use `<binding>` might be slightly confusing at first.\r\n\r\nEdit: Related to https://github.com/jdbi/jdbi/issues/1010",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1013 from pikzen/patch-1\n\nAdd usage documentation for @BindList"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346f7dde8ed798d2ed929",
    "number": 1008,
    "body": "Fixes #1007 \r\n\r\n@stevenschlansker or @arteam, could one of you please review?",
    "head_branch": "prepared-batch-clear-bindings-on-execute",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1008 from jdbi/prepared-batch-clear-bindings-on-execute\n\nClear bindings after PreparedBatch.execute()"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346f8dde8ed798d2ed92a",
    "number": 1006,
    "body": "Fixes #996.\r\n\r\nNew API:\r\n\r\n* `RowReducer<C, R>` interface.\r\n* `LinkedHashMapRowReducer` abstract implementation to make the most common reducer use case simple.\r\n* `ResultBearing.reduceRows(RowReducer<C,R>)`\r\n* `@UseRowReducer` SQL Object annotation, supported on `@SqlQuery` methods.\r\n* `ResultBearing.collectRows(Collector<RowView,A,R>)` for good measure.\r\n\r\nI've also added / refactored tests to demonstrate usage.\r\n\r\nTODO:\r\n\r\n* [x] Still not sure about `RowReducer` method names--`createAccumulator()` in particular--blah. Edit: Settled on `container(): C`, `accumulate(C, RowView)`, and `stream(C): Stream<R>`. Renamed `A` generic parameter to `C` for \"container.\"\r\n* [x] Decide whether to support `@UseRowReducer` with `@SqlBatch`, `@SqlUpdate`. Edit: decided not to support until we have a concrete use case.\r\n  * If yes, implement it. I have a plausible implementation for both but haven't committed it.\r\n  * If no, throw an exception (the current behavior). Currently leaning toward no since I can't fathom a legitimate use case.\r\n* [x] Document reducers in developer guide.\r\n\r\nCC @rbkrabbe",
    "head_branch": "row-reducers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1006 from jdbi/row-reducers\n\nAdd row reducers"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346f9dde8ed798d2ed92b",
    "number": 1005,
    "body": "Fixes #1004 ",
    "head_branch": "stringtemplate-group-imports",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1005 from jdbi/stringtemplate-group-imports\n\nEnable import statements in String Template groups"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346fadde8ed798d2ed92c",
    "number": 1002,
    "body": "Modifications from v3.0.1, which is released to Maven Central. ",
    "head_branch": "v3.0.1-release",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1002 from jdbi/v3.0.1-release\n\n3.0.1 release"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346fbdde8ed798d2ed92d",
    "number": 1001,
    "body": "",
    "head_branch": "disable-transaction-termination-check",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1001 from jdbi/disable-transaction-termination-check\n\nAdd config option to disable transaction termination check."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346fcdde8ed798d2ed92e",
    "number": 995,
    "body": "Added plugin to support using sqlite with jdbi. \r\nFixes #994",
    "head_branch": "sqlite-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #995 from edwinnyawoli/sqlite-patch\n\nSqlite support for Jdbi"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662346fddde8ed798d2ed92f",
    "number": 989,
    "body": "This PR addresses #983 but also #987 \r\n\r\nThe idea is to follow springs conventions as closely as possible and expose a narrow interface that, similar to springs JdbcOperations, solely relies on the framework for transaction management.\r\n\r\nIf this draft is approved I will add tests and better documentation.\r\n\r\nAlso it can be considered to make `JdbiUtil` non-public.\r\n\r\nFurthermore I was thinking of supporting spring boot which uses a lot more classpath magic to even avoid writing java config",
    "head_branch": "spring-plugin-revised",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346fedde8ed798d2ed930",
    "number": 986,
    "body": "This has been pressing on my mind with recent headlines about harassment.\r\n\r\nIn the interest of keeping Jdbi a friendly, inclusive, and welcoming place, I propose we establish a project code of conduct. I don't like thinking about harassment happening within our own community, but having those rules in place would give us a principled basis on which to respond.\r\n\r\n@brianm As part of this, we will need to set up an email address `abuse@jdbi.org`, and designate a team member to receive and respond to reports. I will volunteer myself for that role if nobody else wants it.",
    "head_branch": "code-of-conduct",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #986 from jdbi/code-of-conduct\n\nEstablish a code of conduct"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662346ffdde8ed798d2ed931",
    "number": 985,
    "body": "Rewrote KotlinMapper to work like a combined 'ConstructorMapper' and\r\n'BeanMapper' (as it's what it's doing anyway). This also adds support\r\nfor '@Nested' annotations in Kotlin.\r\n\r\nStill a work in progress so don't merge right away, just creating the PR to get some feedback.\r\n\r\nTODO:\r\n- [x] Re-add support for nullable constructor parameters\r\n- [x] ~Add support for nested non-kotlin classes?~\r\n- [x] I'm pretty sure the 'shouldUseSecondOccurrenceOfColumnWhenMultipleColumnsWithSameNameArePresent' test isn't required anymore (as I'm using the reguler \"findColumnIndex\" used by other reflective mappers), can you guys confirm?",
    "head_branch": "kotlin-nested-support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #985 from FredDeschenes/kotlin-nested-support\n\nSupport '@Nested' in KotlinMapper"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234701dde8ed798d2ed932",
    "number": 982,
    "body": "See #979",
    "head_branch": "create_sql_object_docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #982 from jdbi/create_sql_object_docs\n\ndocs: Add documentation for using `@CreateSqlObject`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234702dde8ed798d2ed933",
    "number": 980,
    "body": null,
    "head_branch": "jexl",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #980 from jdbi/jexl\n\nExclude commons-logging from jexl, up otj-pg-embedded"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234703dde8ed798d2ed934",
    "number": 977,
    "body": "Fixes #975.\r\nFixes #976.\r\n\r\n@stevenschlansker or @arteam could you please review?\r\n\r\n/cc @alwins0n ",
    "head_branch": "optional-collector-refactor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #977 from jdbi/optional-collector-refactor\n\nAdd collector factories for Optional[Int|Long|Double], and Vavr Option<T>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234704dde8ed798d2ed935",
    "number": 973,
    "body": "",
    "head_branch": "fixing_st_load",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #973 from leonlee/fixing_st_load\n\nEnhancement to support loading template in multiple thread, this closes #971"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234705dde8ed798d2ed936",
    "number": 972,
    "body": "using my plugin in real world development I realized that a critical column mapper was missing - the one for `Option`.\r\n\r\nthis is the code i use to work around that, \"inspired\" by the builtin OptionalMapper",
    "head_branch": "option-column-mapper",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #972 from alwins0n/option-column-mapper\n\nadded support for option mapping"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234706dde8ed798d2ed937",
    "number": 967,
    "body": "Not ready for merge yet, asking for early feedback.\r\n\r\ntag @electrum @brianm @qualidafial @arteam \r\n\r\nAllows use of abstract classes and package-private or protected methods.\r\n\r\nSee #840",
    "head_branch": "generator",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Code review"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234707dde8ed798d2ed938",
    "number": 966,
    "body": "fixes #963\r\n\r\nalso see https://github.com/jdbi/jdbi/commit/c5fce767ff6402d5bfa3c2cc11d79304005b3984 which is morally part of this change but was pushed accidentally.",
    "head_branch": "v2-docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "tothe"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234708dde8ed798d2ed939",
    "number": 965,
    "body": "Fixes #962 ",
    "head_branch": "sql-locator-context",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #965 from jdbi/sql-locator-context\n\nAdd ConfigRegistry parameter to SqlLocator.locate()"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234709dde8ed798d2ed93a",
    "number": 961,
    "body": "I think it's safe to remove the beta disclaimer now.",
    "head_branch": "no-beta",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #961 from jdbi/no-beta\n\nRemove beta disclaimer"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623470adde8ed798d2ed93b",
    "number": 960,
    "body": "",
    "head_branch": "v3.0.0-rc2-release",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #960 from jdbi/v3.0.0-rc2-release\n\nV3.0.0 rc2 release"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623470bdde8ed798d2ed93c",
    "number": 959,
    "body": "Fixes #958 ",
    "head_branch": "bindList-without-colon",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #959 from jdbi/bindList-without-colon\n\n Make bindList work with arbitrary SqlParser implementations"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623470cdde8ed798d2ed93d",
    "number": 957,
    "body": "",
    "head_branch": "jpa-plugin-attribution",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #957 from jdbi/jpa-plugin-attribution\n\nAdd README attribution for JPA plugin"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623470ddde8ed798d2ed93e",
    "number": 956,
    "body": "Fixes #438 \r\nFixes #825 \r\n\r\n@stevenschlansker or @arteam: please review.",
    "head_branch": "sql-object-annotation-inheritance",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #956 from jdbi/sql-object-annotation-inheritance\n\nSQL Object honor annotations from supertypes."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623470edde8ed798d2ed93f",
    "number": 955,
    "body": "Fixes #947",
    "head_branch": "optional-mapper",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #955 from jdbi/optional-mapper\n\nAdd column mapper for Optional types"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623470fdde8ed798d2ed940",
    "number": 954,
    "body": "Fixes #948",
    "head_branch": "singlevalue-optional",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #954 from jdbi/singlevalue-optional\n\nDocument @SingleValue Optional<T>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234710dde8ed798d2ed941",
    "number": 953,
    "body": "Fixes #357 \r\n\r\n@stevenschlansker or @arteam: please review",
    "head_branch": "project-logo",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #953 from jdbi/project-logo\n\nAdd project logo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234711dde8ed798d2ed942",
    "number": 951,
    "body": "Fixes #949 \r\n\r\nIntroduces the `@Nested` annotation, per #949.\r\n\r\nUpdates BeanMapper, ConstructorMapper, and FieldMapper to honor the `@Nested` annotation on accessors, constructor parameters, and fields (respectively).\r\n\r\nRefactors some common elements of the three mappers out to a package private utility class.\r\n\r\nNote: With this feature, the \"strict checking\" config option of `ReflectionMappers` probably needs to be revisited. We might possibly even want to remove strict check v3 if we can't reconcile its semantics when nested properties are involved.",
    "head_branch": "nested-mappers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #951 from jdbi/nested-mappers\n\nSupport mapping of `@Nested` properties in reflection mappers."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234712dde8ed798d2ed943",
    "number": 950,
    "body": "Fixes #395.\r\nFixes #122.\r\n\r\nThis required a pretty heavy refactor of `BeanPropertyArguments`, `ObjectFieldArguments`, `ObjectMethodArguments`, and their superclasses.\r\n\r\nIn addition to the goal of supporting nested bindings, this PR:\r\n\r\n* Introduces some caching of class members / property descriptors, to speed up binding and reduce redundant introspection.\r\n* Hides some protected methods that should have been package private\r\n\r\n@stevenschlansker or @arteam would you please review?\r\n\r\nPutting this in the post v3 release milestone so we don't hold up release. If you think it's ready to go now, I'm fine with merging and including it in v3.",
    "head_branch": "nested-binding",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #950 from jdbi/nested-binding\n\nSupport binding nested properties with bindBean, bindFields, and bindMethods"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234713dde8ed798d2ed944",
    "number": 945,
    "body": "",
    "head_branch": "v3-readme",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #945 from jdbi/v3-readme\n\nUpdate README.md for v3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234714dde8ed798d2ed945",
    "number": 944,
    "body": "",
    "head_branch": "v3.0.0-rc1-release-notes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #944 from jdbi/v3.0.0-rc1-release-notes\n\nRelease notes for 3.0.0-rc1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234715dde8ed798d2ed946",
    "number": 943,
    "body": "Fixes #942. Adds vavr javadoc to generated site. I already republished the rc1 docs with this.",
    "head_branch": "doc-vavr",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #943 from jdbi/doc-vavr\n\nInclude jdbi3-vavr in generated javadoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234716dde8ed798d2ed947",
    "number": 941,
    "body": "3.0.0-rc1 released to Maven central",
    "head_branch": "v3.0.0-rc1-release",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #941 from jdbi/v3.0.0-rc1-release\n\n3.0.0-rc1 release"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234717dde8ed798d2ed948",
    "number": 940,
    "body": "Fixes #939 \r\n\r\nAlso addresses a todo to move the `-parameters` documentation to Advanced Topics section.",
    "head_branch": "doc-todos",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #940 from jdbi/doc-todos\n\nDeveloper guide cleanup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234718dde8ed798d2ed949",
    "number": 936,
    "body": "see https://groups.google.com/forum/#!topic/jdbi/nkNAruHZc5I\r\n\r\nbe less aggressive",
    "head_branch": "jdbi2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234719dde8ed798d2ed94a",
    "number": 935,
    "body": "see https://groups.google.com/forum/#!topic/jdbi/nkNAruHZc5I",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623471adde8ed798d2ed94b",
    "number": 934,
    "body": "Per comments on https://github.com/jdbi/jdbi/issues/715#issuecomment-341626077\r\n\r\n@stevenschlansker or @arteam please review",
    "head_branch": "rm-resultbearing-list",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #934 from jdbi/rm-resultbearing-list\n\nRevert addition of ResultBearing.list(): List<Map<String,Object>>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623471bdde8ed798d2ed94c",
    "number": 933,
    "body": "Fixes #715\r\nFixes #700 (confirmed no asciidoctor errors reported)",
    "head_branch": "doc-v2-v3-migration",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "v2 to v3 migration guide"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623471cdde8ed798d2ed94d",
    "number": 932,
    "body": "@stevenschlansker or @arteam, could one of you please review?",
    "head_branch": "doc-reflection-mappers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Developer guide: reflection mappers"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623471ddde8ed798d2ed94e",
    "number": 931,
    "body": "",
    "head_branch": "jdbi-vavr-doc-fixup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #931 from alwins0n/jdbi-vavr-doc-fixup\n\nfixup mapped type in docs for .list() call"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623471edde8ed798d2ed94f",
    "number": 930,
    "body": "Fixes #720.\r\n\r\n@stevenschlansker or @arteam: Could one of you please review this?",
    "head_branch": "doc-stored-proc-calls",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #930 from jdbi/doc-stored-proc-calls\n\nDeveloper guide documentation for stored procedure calls."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623471fdde8ed798d2ed950",
    "number": 928,
    "body": "Some deletes, some folding together, some commented out.\n\nSimplify serialization test case\n\nFixes #829",
    "head_branch": "todo",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Clean up lots of todos\n\nSome deletes, some folding together, some commented out.\n\nSimplify serialization test case\n\nFixes #829"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234720dde8ed798d2ed951",
    "number": 927,
    "body": "We already had a decent amount of source material so this is mostly consolidation\nand tying it together.\n\nFixes #723\nFixes #722\nFixes #718",
    "head_branch": "update-doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Clean up update, batch, prepared batch.\n\nWe already had a decent amount of source material so this is mostly consolidation\nand tying it together.\n\nFixes #723\nFixes #722\nFixes #718"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234721dde8ed798d2ed952",
    "number": 926,
    "body": "This is handy when you want only a side effect.  You could already\ndo this with Stream or Iterable's forEach, but then you end up\nowning a Closeable you don't really care for",
    "head_branch": "sqlobject-consumer",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add the abilty to have SqlObject methods accept a Consumer<T>\n\nThis is handy when you want only a side effect.  You could already\ndo this with Stream or Iterable's forEach, but then you end up\nowning a Closeable you don't really care for"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234722dde8ed798d2ed953",
    "number": 925,
    "body": "as suggested on v2 to v3 migration guide, can be useful for more dynamic languages or use cases",
    "head_branch": "the-list-bearer",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add ResultBearing#list"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234723dde8ed798d2ed954",
    "number": 924,
    "body": "Fixes #717 (in that it removes redundant todos that are already covered elsewhere)\r\n",
    "head_branch": "row-mapper-doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #924 from jdbi/row-mapper-doc\n\nDeveloper guide: row mappers and factories"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234724dde8ed798d2ed955",
    "number": 922,
    "body": "This has been released to Maven Central, and the docs updated.\r\n\r\nJust needs to be merged to master now.",
    "head_branch": "v3.0.0-beta4-release",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #922 from jdbi/v3.0.0-beta4-release\n\nJdbi v3.0.0-beta4 release"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234725dde8ed798d2ed956",
    "number": 921,
    "body": "Fixes #727.\r\nFixes #815.",
    "head_branch": "sql-call-doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Developer guide section for `@SqlCall`. Make `@OutParameter` annotation repeatable."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234726dde8ed798d2ed957",
    "number": 919,
    "body": "Fixes #918 ",
    "head_branch": "java-time-zone-id-doc-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #919 from toadzky/java-time-zone-id-doc-fix\n\nAdd `ZoneId` to the list of out-of-the-box supported types"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234727dde8ed798d2ed958",
    "number": 917,
    "body": "",
    "head_branch": "sql-query-doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Developer guide: add blurb about Optional return types from `@SqlQuery`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234728dde8ed798d2ed959",
    "number": 916,
    "body": "Fixes #915 ",
    "head_branch": "java-time-zoneid",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "register argument factory for zone id"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234729dde8ed798d2ed95a",
    "number": 914,
    "body": "Identified this design bug while reviewing #890.\r\n\r\nI can't think of a scenario where someone would want to do this, but to be on the safe side: it's possible that someone could set the map key / value column names at e.g. the Jdbi or Handle level, and need to override it back to null at the statement level (e.g. when the key or value is row-mapped instead of column-mapped).\r\n\r\nThis PR removes the null check that we put in originally.",
    "head_branch": "map-entry-mappers-clear-column-names",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #914 from jdbi/map-entry-mappers-clear-column-names\n\nAllow setting null key / value column name when mapping map entries."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623472adde8ed798d2ed95b",
    "number": 913,
    "body": "Fixes #898 ",
    "head_branch": "sql-operation-annotation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #913 from jdbi/sql-operation-annotation\n\nRename SqlMethodAnnotation to SqlOperation"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623472cdde8ed798d2ed95c",
    "number": 912,
    "body": "In v2, the `@Transaction` annotation (which has a transaction isolation attribute) didn't work on `@Sql___` method--only default methods.\r\n\r\nBy contrast `@TransactionIsolation`, did work on `@Sql___` methods. So they complemented each other.\r\n\r\nIn v3, the `@TransactionIsolation` is kind of redundant. The only thing it does that `@Transaction` doesn't is let you pass an isolation level as a method argument. I have my doubts on how often people want to use different transaction isolations for the same method.\r\n\r\nMy vote is that we remove it as redundant. If I'm wrong, we can always add it back in later.",
    "head_branch": "rm-txn-isolation-anno",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #912 from jdbi/rm-txn-isolation-anno\n\nRemove @TransactionIsolation in favor of @Transaction"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623472ddde8ed798d2ed95d",
    "number": 910,
    "body": "Fixes #905 and #902.\r\n\r\nThis add the `@BindFunctions` annotation and moves the public field bindings from `@BindBean` to their own `@BindFields` annotation.\r\n\r\nI'll update the ASCIIdoc if/when you guys are ok with the result.",
    "head_branch": "bean-functions-binding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #910 from FredDeschenes/bean-functions-binding\n\nWIP: Bean functions binding"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623472edde8ed798d2ed95e",
    "number": 909,
    "body": "This has come up as a problem before, but #890 finally brought it into focus.\r\n\r\nCurrently, `RowMappers.findFor(Type)` automatically fails over to `ColumnMappers.findFor(Type)` if no explicit row mappers are registered for a given type.\r\n\r\nThe problem is, this design makes it impossible to know for sure whether there is actually a row mapper registered for some type, or whether we are just getting a column mapper.\r\n\r\nThis is a particular problem for MapEntryMapper, since if you don't set the key or value column name, then that key or value _must_ be a row mapper.\r\n\r\nThis PR:\r\n* Removes the failover behavior from `RowMappers`, and moves it to a new `Mappers` config class\r\n* Adds new `findMapperFor(...)` methods to `StatementContext`. These complement the existing `findColumnMapperFor(...)` and `findRowMapperFor(...)` methods. The new method lacks either \"row\" or \"column\" in the name, so the idea is that the underlying mapper could be either one, whichever is registered.\r\n\r\nI've audited all the places where `RowMappers.findFor` or `StatementContext.findRowMapperFor` were called, and updated some of them to call the new methods where appropriate.",
    "head_branch": "row-mapper-findfor-refactor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #909 from jdbi/row-mapper-findfor-refactor\n\nExtract row-or-column mapper failback into its own config class"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623472fdde8ed798d2ed95f",
    "number": 908,
    "body": "Fixes #729",
    "head_branch": "sql-locator-doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Spiff up SqlLocator docs a bit"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234730dde8ed798d2ed960",
    "number": 907,
    "body": null,
    "head_branch": "type-missing-error",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #907 from jdbi/type-missing-error\n\nImprove error message thrown when a generic type cannot be inferred and you must #bindByType"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234731dde8ed798d2ed961",
    "number": 906,
    "body": "It's very easy to mistype an SQL query and use a column name instead of a naming parameters. For example, `DELETE FROM users WHERE id=id` instead of `DELETE FROM users WHERE id=:id`. Unfortunately, this query is a valid SQL query and a DBMS will happily execute it. Such mistake is very easy to make, relatively hard to catch with a unit test and can lead to a disaster in production.\r\n\r\nIt would be great if JDBI could detect situations when the user added a binding, but the query doesn't have any named parameters.",
    "head_branch": "binding_check",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #906 from jdbi/binding_check\n\nAdd a check for mistyped named parameters"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234732dde8ed798d2ed962",
    "number": 904,
    "body": "Fixes #881 ",
    "head_branch": "container-managed-txns",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #904 from jdbi/container-managed-txns\n\nMake Handle.close() play nice with container managed transactions"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234733dde8ed798d2ed963",
    "number": 903,
    "body": "Fixed #895.\r\n\r\nI added the tests to the existing \"value type factory\" tests as the actual `@BindBean` tests are using the `Something` class that's defined somewhere else and is used by a bunch of other tests (and the table is created... somewhere else, not sure how this works tbh). I can clean this up if you want.\r\n\r\nEDIT: Forgot to mention that I'll update the documentation once these changes are approved.",
    "head_branch": "bindbean-use-public-fields",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #903 from FredDeschenes/bindbean-use-public-fields\n\nUse public fields as well as getters for 'bindBean'"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234734dde8ed798d2ed964",
    "number": 901,
    "body": "",
    "head_branch": "sql-update-doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add asciidocs for `@SqlUpdate` and `@GetGeneratedKeys`."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234735dde8ed798d2ed965",
    "number": 900,
    "body": "",
    "head_branch": "docs-sql-object",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #900 from jdbi/docs-sql-object\n\nMore docs for SQL Object"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234736dde8ed798d2ed966",
    "number": 896,
    "body": "Otherwise, anyone who uses the context to print out debug information\n(say an exception) just has an empty binding which is misleading.\n\ncc @pennello",
    "head_branch": "ctx-set-binding",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "PreparedBatch: update context binding for each batch\n\nOtherwise, anyone who uses the context to print out debug information\n(say an exception) just has an empty binding which is misleading."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234737dde8ed798d2ed967",
    "number": 893,
    "body": "reported by @mikebell90",
    "head_branch": "empty-batch-add",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #893 from jdbi/empty-batch-add\n\nPreparedBatch: throw an exception if you add() a batch with no bindings at all"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234738dde8ed798d2ed968",
    "number": 892,
    "body": "Fixes #732",
    "head_branch": "result-producer-doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Basic ResultProducer and TimingCollector docs\n\nFixes #732"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234739dde8ed798d2ed969",
    "number": 891,
    "body": "The name 'mapper' is already used for a different concept\r\n\r\ncc @mikebell90\r\n\r\nFixes #889 ",
    "head_branch": "rs-scanner",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Rename ResultSetMapper to ResultSetScanner\n\nThe name 'mapper' is already used for a different concept"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623473adde8ed798d2ed96a",
    "number": 890,
    "body": "I think Vavr offers great additions for Jdbi, thats why I  created this little plugin. I hope I adhered to JDBI contributing standards - this is my first PR.",
    "head_branch": "jdbi-vavr",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #890 from alwins0n/jdbi-vavr\n\nJdbi vavr"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623473bdde8ed798d2ed96b",
    "number": 887,
    "body": "Fixes #731",
    "head_branch": "statementcontext-doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Basic StatementContext doc.\n\nFixes #731"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623473cdde8ed798d2ed96c",
    "number": 886,
    "body": "Fixes #719",
    "head_branch": "config-doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Simple Configuration documentation\n\nFixes #719"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623473ddde8ed798d2ed96d",
    "number": 885,
    "body": null,
    "head_branch": "collector-example",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add a simple Collector example.  Fixes #726"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623473edde8ed798d2ed96e",
    "number": 882,
    "body": "Fixed apidoc links to SqlParser and TemplateEngine. Tested with local build. \r\n",
    "head_branch": "apidoc_link_fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #882 from kimmoeklund/apidoc_link_fixes\n\nfixed incorrect urls in SqlParser and TemplateEngine apidoc links"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623473fdde8ed798d2ed96f",
    "number": 880,
    "body": "Additionally, remove fetchForward / Reverse hints.\r\n\r\nI was not able to find a use with a quick search,\r\nand additionally verified that none of Postgres, Oracle,\r\nMySQL, or SQLite actually support the hint.\r\n\r\nFixes #876",
    "head_branch": "forward-only",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #880 from jdbi/forward-only\n\nMake Statement processing FORWARD_ONLY by default for performance."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234740dde8ed798d2ed970",
    "number": 878,
    "body": "Addresses #875 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #878 from TigerC10/master\n\nChange StatementContext.getParsedSql() to return ParsedSql instead of String"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234741dde8ed798d2ed971",
    "number": 877,
    "body": "Addresses #872 ",
    "head_branch": "jdbi2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #877 from TigerC10/jdbi2\n\nAdding getters to Binding class"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234742dde8ed798d2ed972",
    "number": 873,
    "body": "Adding getters to the `Binding` class for #872",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234743dde8ed798d2ed973",
    "number": 871,
    "body": "Addresses #738 ",
    "head_branch": "spring4-docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #871 from jdbi/spring4-docs\n\nDeveloper guide examples for Spring 4 plugin"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234744dde8ed798d2ed974",
    "number": 869,
    "body": "While looking into #733, I realized we were duplicating work between SQL arrays and collectors.\r\n\r\nWe have a `CollectionColumnMapper` class which maps a handful of collection types for array column. We also have `GuavaMappers` which supports `ImmutableList<T>` array columns.\r\n\r\nI've refactored the above mapper into `CollectorColumnMapper`, which relies on `JdbiCollectors` registry as well as `ColumnMappers` registry, similar to how SQL Object does to resolve method return types.\r\n\r\nWith this change, registering a `CollectorFactory` for a given container type will add support for both query return types, and SQL array column mapping.\r\n\r\n@stevenschlansker or @arteam, would you please review?",
    "head_branch": "sql-array-collector-mapper",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #869 from jdbi/sql-array-collector-mapper\n\nRefactor CollectionColumnMapper into CollectorColumnMapper"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234745dde8ed798d2ed975",
    "number": 868,
    "body": "fixes #841\r\n\r\ncc @electrum ",
    "head_branch": "replicator",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234746dde8ed798d2ed976",
    "number": 867,
    "body": null,
    "head_branch": "jdbi3-name",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #867 from jdbi/jdbi3-name\n\nAlign pom <name>s so they all use 'jdbi3'"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234747dde8ed798d2ed977",
    "number": 866,
    "body": "Fixed #863 \r\n\r\n@stevenschlansker or @arteam, please review",
    "head_branch": "fix-javadoc-typo",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #866 from jdbi/fix-javadoc-typo\n\nFix bogus type reference in javadoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234748dde8ed798d2ed978",
    "number": 865,
    "body": "Addresses #864 ",
    "head_branch": "findbugs-dependencies",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #865 from jdbi/findbugs-dependencies\n\nUse `findbugs-annotations` and `jsr305` instead of `annotations` clusterjar"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234749dde8ed798d2ed979",
    "number": 862,
    "body": "Addresses #774 \r\n\r\nAdds documentation for `Map<K,V>` result types for both Core and SQL Object.\r\n\r\nAlso added two convenience methods to `Configurable`: `setMapKeyColumn(String)` and `setMapValueColumn(String)`.\r\n\r\n@stevenschlansker or @arteam, could one of you please review?",
    "head_branch": "map-collector-doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #862 from jdbi/map-collector-doc\n\nDocument how to use Map<K,V> collectors"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623474adde8ed798d2ed97a",
    "number": 861,
    "body": "Addresses #792.\r\n\r\n@stevenschlansker or @arteam, would you please review?",
    "head_branch": "kotlin-apidocs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #861 from jdbi/kotlin-apidocs\n\nProduce Kotlin-style API docs for jdbi3-kotlin, jdbi3-kotlin-sqlobject"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623474bdde8ed798d2ed97b",
    "number": 860,
    "body": "Addresses #839.\r\n\r\n@stevenschlansker or @arteam, would you please review?",
    "head_branch": "jdbi3-core-artifactid",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #860 from jdbi/jdbi3-core-artifactid\n\nRename org.jdbi:jdbi3 artifact to org.jdbi:jdbi3-core"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623474cdde8ed798d2ed97c",
    "number": 859,
    "body": "These could eventually be removed when Kotlin's type inference allows us\r\nto use the regular functions in `Jdbi`.\r\n\r\nUnfortunately I wasn't able to use overloads in the `Jdbi` class directly or name those extensions the same as the regular 'checked' ones as type inference also failed on them...",
    "head_branch": "issue-858",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #859 from FredDeschenes/issue-858\n\nAdd unchecked extensions for `Jdbi` functions (#858)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623474ddde8ed798d2ed97d",
    "number": 857,
    "body": "",
    "head_branch": "release-3.0.0-beta2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #857 from jdbi/release-3.0.0-beta2\n\nRelease 3.0.0 beta2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623474edde8ed798d2ed97e",
    "number": 854,
    "body": "Addresses #843.\r\n\r\n@arteam or @stevenschlansker: Could you please review?",
    "head_branch": "positional-no-parameter-names",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #854 from jdbi/positional-no-parameter-names\n\nFix SQL Object + Positional parameter + No -parameters compile flag"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234750dde8ed798d2ed97f",
    "number": 852,
    "body": "Addresses #847.\r\n\r\n@arteam or @stevenschlansker, would you please review?",
    "head_branch": "bind-bean-unregistered-arg-factory",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #852 from jdbi/bind-bean-unregistered-arg-factory\n\nImprove error messages when a bound bean property has no registered argument factory"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234751dde8ed798d2ed980",
    "number": 851,
    "body": null,
    "head_branch": "rewrite",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #851 from electrum/rewrite\n\nSet rewritten SQL in context for PreparedBatch"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234752dde8ed798d2ed981",
    "number": 850,
    "body": "Fixes #848",
    "head_branch": "linked-mapper",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #850 from jdbi/linked-mapper\n\nMapMapper: use LinkedHashMap to preserve column ordering"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234753dde8ed798d2ed982",
    "number": 849,
    "body": "Far from perfect, but it at least covers almost all public types and methods.  Includes small breaking change of removing `TransactionStatus` which is a pretty weird concept.",
    "head_branch": "javadoc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Code review javadoc."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234754dde8ed798d2ed983",
    "number": 846,
    "body": "…s which are independently configurable.\r\n\r\nWork in progress. Addresses #826.\r\n\r\nAPI changes:\r\n* Refactored `StatementRewriter` into `TemplateEngine` and `SqlParser`.\r\n* `TemplateEngine` accepts a SQL template string and a context, and produces a rendered SQL string.\r\n  * `DefinedAttributeStatementRewriter` is now `DefinedAttributeTemplateEngine`.\r\n  * `StringTemplateStatementRewriter` is now `StringTemplateEngine`.\r\n  * `UseStringTemplateStatementRewriter` is now `UseStringTemplateEngine`.\r\n  * Added `SqlStatements.get/setTemplateEngine`\r\n  * Added `Configurable.setTemplateEngine`\r\n  * Added `UseTemplateEngine` SQL object annotation\r\n* `SqlParser` accepts the rendered SQL statement, parses out named parameters and produces a `ParsedStatement`\r\n  * `ColonPrefixStatementRewriter` and `HashPrefixStatementRewriter` are now `ColonPrefixSqlParser` and `HashPrefixSqlParser`, respectively.\r\n  * Added `SqlStatements.get/setSqlParser`\r\n  * Added `Configurable.setSqlParser`\r\n  * Added `UseSqlParser` SQL object annotation\r\n* `ParsedStatement` contains the JDBC-ready SQL statement, and a `ParsedParameters` object\r\n* `ParsedParameters` contains the number of parameters, whether the parameters are named or position, and (for named parameters) parameter names in each position.\r\n* `InternalRewrittenStatement` was replaced by `ArgumentBinder` (which is likewise non-public).\r\n* `RewrittenStatement` removed in favor of ParsedStatement + ArgumentBinder\r\n* Removed `NoOpStatementRewriter`.\r\n\r\nTo do:\r\n* [x] Review javadoc to make sure all relevant references are updated as appropriate (e.g. referring to `SqlParser` instead of `StatementRewriter`\r\n* [x] Does `SqlParser` want a `StatementContext` parameter? (future-proofing)\r\n* [x] Add real documentation in place of asciidoc TODOs added or changed in this branch.",
    "head_branch": "statement-writer-refactor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #846 from jdbi/statement-writer-refactor\n\nRefactor StatementRewriter - split into rewriter and parser interface…"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234755dde8ed798d2ed984",
    "number": 845,
    "body": "Small fix for maven coordinates for postgres plugin in docs",
    "head_branch": "fix-postgres-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #845 from zikani03/fix-postgres-docs\n\nFix maven coordinates for postgres plugin in docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234756dde8ed798d2ed985",
    "number": 842,
    "body": "Implements #819 for `ConstructorMapper`",
    "head_branch": "constructor-properties-support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #842 from toadzky/constructor-properties-support\n\n@ConstructorProperties support"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234757dde8ed798d2ed986",
    "number": 838,
    "body": "I'm not 100% sure of this change, but it's pretty frustrating to have `query.bind(\"foo\", Collections.singleton(\"hi\"))` fail even if you register all your array argument factories.\r\n\r\ncc @strykerd",
    "head_branch": "array-guess-type",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234758dde8ed798d2ed987",
    "number": 837,
    "body": "This adds symmetry with the other create/open methods and allows\r\nreplacing `open().useHandle()` with try-with-resources.",
    "head_branch": "open-factory",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #837 from electrum/open-factory\n\nAdd convenience handle factory for ConnectionFactory"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234759dde8ed798d2ed988",
    "number": 836,
    "body": "Addresses #834 \r\n\r\n@stevenschlansker Please review",
    "head_branch": "jdbi3-bom",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #836 from jdbi/jdbi3-bom\n\nAdd jdbi3-bom artifact"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623475adde8ed798d2ed989",
    "number": 833,
    "body": null,
    "head_branch": "sqlobject-assertj",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #833 from electrum/sqlobject-assertj\n\nUse test scope for assertj for sqlobject artifact"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623475bdde8ed798d2ed98a",
    "number": 832,
    "body": "Fixes #823.\r\n\r\n@arteam or @stevenschlansker, could one of you please review?",
    "head_branch": "map-entry-mapper-config-rename",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #832 from jdbi/map-entry-mapper-config-rename\n\nRename MapEntryMapper.Config and make it a top-level class"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623475cdde8ed798d2ed98b",
    "number": 831,
    "body": "Fixes #821.\r\n\r\nThe follow annotations now accept single values per attribute (instead of an array of values):\r\n\r\n* RegisterArgumentFactory\r\n* RegisterBeanMapper\r\n* RegisterCollectorFactory\r\n* RegisterColumnMapper\r\n* RegisterColumnMapperFactory\r\n* RegisterConstructorMapper\r\n* RegisterFieldMapper\r\n* RegisterObjectArgumentFactory\r\n* RegisterRowMapper\r\n* RegisterRowMapperFactory\r\n\r\nExample: the following old-style code\r\n\r\n```java\r\n@SqlQuery\r\n@RegisterBeanMapper(value = {Article.class, Comment.class}, prefix = {\"a\", \"c\"})\r\nArticle getArticleWithComments(long id)\r\n```\r\n\r\nbecomes:\r\n\r\n```java\r\n@SqlQuery\r\n@RegisterBeanMapper(value = Article.class, prefix = \"a\")\r\n@RegisterBeanMapper(value = Comment.class, prefix = \"c\")\r\nArticle getArticleWithComments(long id)\r\n```\r\n\r\n@stevenschlansker or @arteam: Would one of you please review?\r\n\r\n",
    "head_branch": "repeatable-annotations",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #831 from jdbi/repeatable-annotations\n\nFavor repeatable annotations over array attributes"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623475ddde8ed798d2ed98c",
    "number": 828,
    "body": "Fixes #824 \r\n\r\n@stevenschlansker would you please review?",
    "head_branch": "join-row-top-level",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make JoinRow a top-level class instead of an inner class of JoinRowMapper"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623475edde8ed798d2ed98d",
    "number": 827,
    "body": "Addresses #739, #306 \r\n\r\n@stevenschlansker @arteam Could one of you please review?",
    "head_branch": "string-template-docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add StringTemplate examples to developer guide"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623475fdde8ed798d2ed98e",
    "number": 822,
    "body": "Addresses #467 ",
    "head_branch": "table-join-docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #822 from jdbi/table-join-docs\n\nDocument approaches to mapping joined tables"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234760dde8ed798d2ed98f",
    "number": 820,
    "body": "Addresses #817 ",
    "head_branch": "named-parameter-finder-context",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #820 from jdbi/named-parameter-finder-context\n\nAdd StatementContext parameter to NamedParameterFinder method."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234761dde8ed798d2ed990",
    "number": 807,
    "body": "fixes #691\r\n\r\ndo you like this approach?  it's more files, but it makes the javadoc a lot nicer.  I can finish the job if you think it's an improvement as well.",
    "head_branch": "impl-hide",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Correct typo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234762dde8ed798d2ed991",
    "number": 806,
    "body": "Fixes #736",
    "head_branch": "pg-doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #806 from jdbi/pg-doc\n\nSpruce up postgresql docs."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234763dde8ed798d2ed992",
    "number": 803,
    "body": "",
    "head_branch": "feature/transaction_javadoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #803 from reftel/feature/transaction_javadoc\n\nFix javadoc for Transaction.inTransaction"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234764dde8ed798d2ed993",
    "number": 802,
    "body": "Work in progress.\r\n\r\nSee outline at https://docs.google.com/document/d/1opv-OpOQTdYJNo5B1pKFJDrCIVT3vEBiDEQ_6nwgzRw/edit?usp=sharing\r\n\r\nStrikethrough in the outline doc means \"this is done.\"\r\n\r\nNote that I've inlined all adoc files into a single file for the moment, to make it easier to reason about the overall narrative. Once we're done changing things it will probably be appropriate to extract sections back out to their own files.\r\n\r\nTo do:\r\n\r\n* [ ] Find a different phrase than \"you can _\"",
    "head_branch": "developer-guide",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #802 from jdbi/developer-guide\n\nDeveloper guide rewrite"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234765dde8ed798d2ed994",
    "number": 801,
    "body": "Addresses #799 ",
    "head_branch": "oracle-returning-zero-based-indices",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #801 from jdbi/oracle-returning-zero-based-indices\n\nUse 0-based indices in OracleReturning.returnParameters()"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234766dde8ed798d2ed995",
    "number": 800,
    "body": "Addresses #798 ",
    "head_branch": "remove-handle-update-insert",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #800 from jdbi/remove-handle-update-insert\n\nRemove Handle.update, Handle.insert in favor of Handle.execute"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234767dde8ed798d2ed996",
    "number": 796,
    "body": "* Add release notes for 3.0.0 betas 0, 1, and 2-SNAPSHOT.\r\n* Normalize JDBI / DBI / jDBI to Jdbi.\r\n* Fix up a few `package.html` files identified as way out of date, while substituting `Jdbi` title case.\r\n\r\n",
    "head_branch": "normalize-jdbi-case",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Replace {@literal @} with &#64; since javadoc broke it :unamused:"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234768dde8ed798d2ed997",
    "number": 793,
    "body": "So I tried doing a class-by-class copy, but that quickly spiraled out of control.\r\n\r\nIn this PR, I've only copied the portions of each class that are directly used by `GenericTypes`. This increased the jar size by 44KB, as opposed to 1.4MB larger when we were shading the entire Guava JAR.\r\n\r\n:tada: \r\n\r\nOn the downside.. now we have to keep an eye on Guava and follow any bugfixes they apply.",
    "head_branch": "remove-core-guava-dependency",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #793 from jdbi/remove-core-guava-dependency\n\nCopy TypeToken implementation from Guava, remove Guava as core dependency"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234769dde8ed798d2ed998",
    "number": 791,
    "body": "The last hurdle in the way of releasing another beta: the Sonatype OSS repository wants us to generate a javadoc jar for the kotlin artifacts.\r\n\r\nLong term we should produce a kdoc which will give kotlin users a more Kotlin-idiomatic picture of the API. This PR just gets us over the release hurdle imposed by Sonatype.",
    "head_branch": "kotlin-docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #791 from jdbi/kotlin-docs\n\nGenerate javadocs for kotlin classes, release 3.0.0-beta1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623476adde8ed798d2ed999",
    "number": 788,
    "body": "",
    "head_branch": "fix-oracle-tests",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #788 from jdbi/fix-oracle-tests\n\nFix oracle tests"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623476bdde8ed798d2ed99a",
    "number": 787,
    "body": "Addresses #500.\r\n\r\nIn a nutshell: if a named parameter didn't match up with e.g. the method parameter name, JDBI would attempt to match on a positional param. This could have very unexpected results if e.g. the method arguments aren't in the same order as the query.\r\n\r\nI'm rather surprised how many of our existing tests relied on this. :grimacing: \r\n\r\nThis PR adds the following restrictions:\r\n- A SQL statement must use _either_ named parameters, or positional parameters. Using both in the same statement will throw an exception.\r\n- A statement with positional parameters will only used position-bound arguments.\r\n- A statement with named parameters will only use name-bound arguments.\r\n\r\nYou can still bind both positional and named, but the statement will only use one category of bindings or the other.",
    "head_branch": "no-mixey-named-positional-params",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #787 from jdbi/no-mixey-named-positional-params\n\nForbid mixing named and positional parameters in SQL statements."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623476cdde8ed798d2ed99b",
    "number": 786,
    "body": "Addresses #748.\r\n\r\nPutting a colon in comments used to trigger a NoViableAltException in the lexer. New tests show this is fixed in v3.\r\n\r\n@stevenschlansker or @arteam please review",
    "head_branch": "colon-in-comments",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add tests demonstrating that the lexer doesn't blow up any more when you put colons in SQL comments"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623476ddde8ed798d2ed99c",
    "number": 785,
    "body": "",
    "head_branch": "null-sql-arrays",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Save/load null in array columns instead of throwing NullPointerException"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623476edde8ed798d2ed99d",
    "number": 784,
    "body": "",
    "head_branch": "release-notes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Release notes for issue #783"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623476fdde8ed798d2ed99e",
    "number": 783,
    "body": "Fixed #781 \r\n\r\n@arteam @stevenschlansker Could one of you review this?",
    "head_branch": "v2-sql-batch-empty",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #783 from jdbi/v2-sql-batch-empty\n\n`@SqlBatch` throws `IllegalArgumentException` on an empty batch"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234770dde8ed798d2ed99f",
    "number": 782,
    "body": "Fixes #264 \r\n\r\nShading brings up the core JAR size from ~260K to ~1.4M.\r\n\r\nMost of this comes from Guava, which weighs in at 2.5M. The shade plugin's tree shaking reduces this to just the 1.1M of classes that are transitively reachable through JDBI.",
    "head_branch": "shaded-deps",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234771dde8ed798d2ed9a0",
    "number": 780,
    "body": "Refactor ParameterCustomizerFactory, SqlStatementCustomizerFactory to accept parameter type. Move reponsibility of detecting batch parameters and figuring out the parameter element type to SqlBatch.\r\n\r\nFixes #760",
    "head_branch": "sql-batch-arg-flattening",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #780 from jdbi/sql-batch-arg-flattening\n\nMake BatchHandler extract the iterable/iterator element type and pass it to the customizer factory"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234772dde8ed798d2ed9a1",
    "number": 779,
    "body": "Addresses #742 \r\n\r\n@arteam @stevenschlansker Could one of you review this?",
    "head_branch": "constructor-mapper-public-ctors",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #779 from jdbi/constructor-mapper-public-ctors\n\nAdd public constructors to ConstructorMapper"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234773dde8ed798d2ed9a2",
    "number": 778,
    "body": "Addresses #765 \r\n\r\n@arteam or @stevenschlansker could you review?",
    "head_branch": "batch-boolean-return",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #778 from jdbi/batch-boolean-return\n\nSupport boolean[] return type from `@SqlBatch` methods"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234774dde8ed798d2ed9a3",
    "number": 777,
    "body": "… have decorator behavior attached to them\r\n\r\nFixes #771 \r\n\r\nTo do:\r\n\r\n* [x] Add proof of concept tests demonstrating how third-party annotations that have nothing to do with JDBI can have behavior attached to them.",
    "head_branch": "handler-decorators-registry",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #777 from jdbi/handler-decorators-registry\n\nAdd HandlerDecorators registry, so e.g. JDBI-agnostic annotations can…"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234775dde8ed798d2ed9a4",
    "number": 776,
    "body": "…methods.\r\n\r\nFixes #767 ",
    "head_branch": "sql-object-override-methods",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #776 from jdbi/sql-object-override-methods\n\nAllow annotations on SQL Object methods that override superinterface …"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234776dde8ed798d2ed9a5",
    "number": 775,
    "body": "…d SQL objects\r\n\r\nFixed #766 ",
    "head_branch": "sql-object-factory-accepts",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #775 from jdbi/sql-object-factory-accepts\n\nSqlObjectFactory.accepts should throw only for incorrectly implemente…"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234777dde8ed798d2ed9a6",
    "number": 773,
    "body": "Fixes #299 (although customization per database vendor is not included)\r\n\r\nAlso changes default from `Types.NULL` to `Types.OTHER` because I think that's a more sensible default given the prior discussion.",
    "head_branch": "untyped-null-arg",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add configurable 'untyped null' argument"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234778dde8ed798d2ed9a7",
    "number": 772,
    "body": "Improvements to KotlinMapper:\r\n\r\n- Support a mixed model of constructor +writable  properties set after construction.\r\n- Allow to explicitly specify propery/parameter name using ColumnName annotation",
    "head_branch": "enhanced-kotlin-mapper",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #772 from WriskHQ/enhanced-kotlin-mapper\n\nImprovements to KotlinMapper"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234779dde8ed798d2ed9a8",
    "number": 769,
    "body": "Addresses #763 \r\n\r\n* Add `MapEntryMapper`, which maps rows to `Map.Entry<K,V>`. This mapper is registered out of the box.\r\n  * By default, `MapEntryMapper` maps keys and value using `RowMapper`s registered for the respective key and value types.\r\n  * `MapEntryMapper.Config.setKeyColumn` overrides the default behavior, and will load the key from the specified column, using the `ColumnMapper` registered for the key's type.\r\n  * `MapEntryMapper.Config.setValueColumn` overrides the default behavior, and will load the value from the specified column, using the `ColumnMapper` registered for the value's type.\r\n* Add a built-in collector factory, which collects various JDK `Map<K,V>` types, with an element type of `Map.Entry<K,V>`\r\n* Enhance `GuavaCollectors` to support Guava-specific `Map<K,V>` types, as well as Guava `Multimap<K,V>` types, with an element type of `Map.Entry<K,V>`\r\n* Add `@KeyColumn` and `@ValueColumn` SQL Object annotations, which call `MapEntryMapper.Config.setKeyColumn` and `.setValueColumn`, respectively.\r\n\r\nTODO\r\n* [x] Throw exception in map collectors for duplicate entries.\r\n* ~Add asciidocs demonstrating how to return maps from SQL Object methods.~ #774 \r\n* ~Add asciidocs documenting how to use GuavaPlugin, and which types it adds support for--including Map and Multimap types.~ #733 ",
    "head_branch": "map-collectors",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #769 from jdbi/map-collectors\n\nAdd collectors for Map, Multimap types"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623477adde8ed798d2ed9a9",
    "number": 764,
    "body": "Built-in argument factory in core uses wrong SQL type (`Types.VARCHAR`) with nulls. Postgres expects `Types.OTHER`.\r\n\r\nAlso added tests for array usage.",
    "head_branch": "pg-uuid-support",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #764 from jdbi/pg-uuid-support\n\nFix Postgres error when binding null UUID"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623477bdde8ed798d2ed9aa",
    "number": 762,
    "body": "",
    "head_branch": "doc-improve-intro",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #762 from jdbi/doc-improve-intro\n\nRefactor intro to show both Core and SQL Object usage."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623477cdde8ed798d2ed9ab",
    "number": 759,
    "body": "This adds kotlin support originally developed by @apatrida. @stevenschlansker: Does this look like it could be hosted in the main tree? I split the original plugin in two, the base one enhances kotlin support for fluent queries, the second adds kotlin extensions to SqlObjects. See also #282 \r\n\r\n- [x] Add README  \r\n- [x] Documentation in /docs\r\n- [x] Update to Kotlin 1.1",
    "head_branch": "kotlin",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #759 from WriskHQ/kotlin\n\nKotlin plugins for fluent queries and SqlObjects"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623477ddde8ed798d2ed9ac",
    "number": 758,
    "body": "I have adapted a test from PR #754 that verifies that a custom HandlerFactory supporting Kotlin extension methods could be added. This pull request modifies PR #756  ",
    "head_branch": "handler-factory-registry-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #758 from WriskHQ/handler-factory-registry-test\n\nAdded test to excercise custom HandlerFactory"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623477edde8ed798d2ed9ad",
    "number": 756,
    "body": "…ng strategies.\r\n\r\nI'm submitting this as an alternative to PR #754 (which would add a config property for a \"default\" method handler as an alternative to existing default method handler).\r\n\r\nHowever I believe the approach in this commit is a better choice long-term, as it allows clients to override the out-of-the-box behavior for any method,\r\nrather than only being able to swap out the \"fall-back\" method handler.\r\n\r\nThe public API changes are modest:\r\n\r\n* [BREAKING CHANGE] Change HandlerFactory to return `Optional<Handler>` instead of `Handler`\r\n* [BREAKING CHANGE] Change semantics of `@SqlMethodAnnotation`: `value()` returns a handler type instead of handler factory type.\r\n  * The handler type must have a public no-arg, (Method), or (Class, Method) constructor.\r\n* Add Handlers registry with last-registered-wins semantics like our other registries\r\n* Refactor SqlObjectFactory toi use the Handlers registry.\r\n  * Existing logic was moved out to SqlMethodHandlerFactory and DefaultMethodHandlerFactory, which are registered out of the box.\r\n\r\nTo do\r\n* [x] Needs tests to exercise custom `HandlerFactory`s that can override the default behavior\r\n\r\nCC @aharin",
    "head_branch": "handler-factory-registry",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #756 from jdbi/handler-factory-registry\n\nRefactor HandlerFactory to allow for alternative method handler mappi…"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623477fdde8ed798d2ed9ae",
    "number": 754,
    "body": "Allow to overwrite default mechanism for providing dynamic proxy handler for default methods.  \r\nThis pull request introduces DefaultHandlerFactory interface that can be customised using new configuration mechanism. The default implementation, DefaultMethodHandlerFactory builds existing DefaultMethodHandler for java default methods  \r\n\r\nThis is required for Kotlin support as kotlin default methods do not compile Java 8 default methods. See Issue #282 ",
    "head_branch": "default-handler-factory-customizer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234780dde8ed798d2ed9af",
    "number": 753,
    "body": "Allow to specify an instance of  SqlStatementCustomizerFactory  that will be used to bind parameters to SQL statements when parameters are not annotated. \r\n\r\nWhen custom SqlStatementCustomizerFactory is not specified the default Bind.Factory is used. \r\n\r\nThis is required for Kotlin support as it needs a different parameter customizer. See Issue #282 ",
    "head_branch": "default-parameter-customizer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #753 from WriskHQ/default-parameter-customizer\n\nAllow for a plugin point to supply a custom SqlObjectStatementCustomizer"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234781dde8ed798d2ed9b0",
    "number": 752,
    "body": "Fixes #749 ",
    "head_branch": "doc-v3-disclaimer",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #752 from jdbi/doc-v3-disclaimer\n\nUpdate v3 disclaimer in docs for beta"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234782dde8ed798d2ed9b1",
    "number": 751,
    "body": "* Adds navigation down left side of page (#489).\r\n* Squashes all pages together into a single doc with everything. This was the easiest way to get navigation, and I kinda like it.\r\n* Mostly left existing documentation intact. Header levels were changed to make the navigation work right.\r\n* Added scaffolding for a couple sections that came to mind that we should cover.",
    "head_branch": "doc-navigation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #751 from jdbi/doc-navigation\n\nCombine docs into single-page reference with navigation down left side."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234783dde8ed798d2ed9b2",
    "number": 747,
    "body": "Addresses #746 ",
    "head_branch": "jdbi3-fix-docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #747 from jdbi/jdbi3-fix-docs\n\nFix asciidoc errors"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234784dde8ed798d2ed9b3",
    "number": 744,
    "body": "",
    "head_branch": "jdbi3-alpha10",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #744 from jdbi/jdbi3-alpha10\n\nJDBI 3.0.0 alpha 10 release"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234785dde8ed798d2ed9b4",
    "number": 743,
    "body": "Fixes #741 \r\n\r\nBest viewed with `?w=1` in URL",
    "head_branch": "jdbi3-sql-batch-empty-npe",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #743 from jdbi/jdbi3-sql-batch-empty-npe\n\nFix NPE in @SqlBatch when batch arguments are empty"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234786dde8ed798d2ed9b5",
    "number": 714,
    "body": "Fixes bug identified in #707 ",
    "head_branch": "no-connection-on-hashcode",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #714 from jdbi/no-connection-on-hashcode\n\nDon't connect sql objects on hashCode(), equals(), or toString()"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234787dde8ed798d2ed9b6",
    "number": 713,
    "body": "I was still porting forward the work I did on #648 \r\nI am not sure how to reconcile with #711 \r\n\r\nBit rough as it was a WIP.  I can clean up if anything will end up being committed.",
    "head_branch": "param-customizer",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #713 from jdbi/param-customizer\n\nAlso adds SqlStatementParameterCustomizer"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234788dde8ed798d2ed9b7",
    "number": 711,
    "body": "~Addresses #710.~\r\n\r\n* ~Introduce SqlStatementParameterCustomizer, which is like SqlStatementCustomizer but with an arg parameter.~\r\n* ~Update SqlStatementParameterFactory.createForParameter: remove the arg parameter, and return a SqlStatementParameterCustomizer~\r\n\r\n~Note that we're not yet caching SqlStatementCustomizers or SqlStatementParameterCustomizers yet--so the part that would actually help performance is another todo. I'll add a separate ticket on the release blockers so we don't forget.~\r\n\r\n~This PR is best viewed with `?w=1` in the URL.~\r\n\r\nSince #713 merged first, this PR is now just some random code cleanup--making code patterns and variable naming consistent between SQL statement customizer factories",
    "head_branch": "jdbi3-sql-statement-parameter-customiozer",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #711 from jdbi/jdbi3-sql-statement-parameter-customiozer\n\nSQL statement customizers - code cleanup"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234789dde8ed798d2ed9b8",
    "number": 709,
    "body": "Refactors SqlStatementCustomizer per #692.\r\n\r\nBest viewed with `?w=1` in the URL to cut out whitespace noise.\r\n\r\nThis will conflict with PR #708--I'd rather merge that one first.\r\n\r\nWhat I like about this PR is that it removes a class and makes implementing a customizing annotation a little simpler.\r\n\r\nWhat I don't like is the performance implications. This loses the ability to precompute customizers at the class and method levels, which means that we have to recompute those at call time. Without a proper performance benchmark it's difficult to know whether this will make a difference.\r\n\r\nAt the parameter level, we already recompute every time at call time, so it's really no worse performance-wise than before.\r\n\r\nSo this has me wondering whether we ought to be going in the opposite direction, namely that we should pursue @stevenschlansker's idea of a `SqlStatementParameterCustomizer` at the parameter level. This way we can precompute some things at the parameter declaration level. I believe (but cannot confirm) this would have an important performance impact for batches.\r\n\r\nSo unless the team convinces me that this PR is a good idea, I'm voting -1 on this one. I just wanted to show what it ended up looking like, and give my reasoning for being against it.",
    "head_branch": "jdbi3-sql-statement-customizer-refactor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623478adde8ed798d2ed9b9",
    "number": 708,
    "body": "Addresses #694 \r\n\r\n* Remove GetGeneratedKeys.value(): Class<? extends RowMapper> in favor of @UseRowMapper\r\n* Rename GetGeneratedKeys.columnName() to value(), and change it from String to String[] (multiple column names)\r\n\r\nAfter looking into it, I got rid of the `UseRowMapper.Factory` annotation handler. It turns out that `SqlBatch` was already doing its own custom handling, and `SqlUpdate` needed to implement its own custom handling too. So I inlined it into the `SqlQuery` handler.",
    "head_branch": "jdbi3-get-generated-keys-multi-column",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #708 from jdbi/jdbi3-get-generated-keys-multi-column\n\nRefactor GetGeneratedKeys"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623478bdde8ed798d2ed9ba",
    "number": 707,
    "body": "For issue #706.",
    "head_branch": "no-connection-on-hashcode",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623478cdde8ed798d2ed9bb",
    "number": 705,
    "body": "fixes #699",
    "head_branch": "oracle-flag",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "OracleReturning: Remove BETA\n\nfixes #685"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623478ddde8ed798d2ed9bc",
    "number": 704,
    "body": "…oracle package to oracle12\r\n\r\nFixes #684, #688 ",
    "head_branch": "jdbi3-rename-some-stuff",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #704 from jdbi/jdbi3-rename-some-stuff\n\nRename OverrideStatementRewriterWith to UseStatementRewriter; rename …"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623478edde8ed798d2ed9bd",
    "number": 703,
    "body": "based on feedback on #698 by @pennello",
    "head_branch": "abstract-argument-factoryize",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Convert a couple more ArgumentFactory implementations to use AbstractArgumentFactory\n\nbased on feedback on #698 by @pennello"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623478fdde8ed798d2ed9be",
    "number": 702,
    "body": "fixes #695 \r\n\r\nI chose this over `UNSPECIFIED` because it is specified, just not by us (it's either the driver or the db)",
    "head_branch": "txn-invalid",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #702 from jdbi/txn-invalid\n\nTransactionIsolationLevel: rename INVALID to UNKNOWN."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234790dde8ed798d2ed9bf",
    "number": 701,
    "body": "Fixes #680, #681 ",
    "head_branch": "jdbi3-make-some-stuff-private",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #701 from jdbi/jdbi3-make-some-stuff-private\n\nMake some class members private that weren't meant to be API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234791dde8ed798d2ed9c0",
    "number": 698,
    "body": "Doing so, we can avoid additional checks for confirming factory to the right type and make the factories more generic-friendly.\r\n\r\nReferences #686",
    "head_branch": "period_duration_refactor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #698 from jdbi/period_duration_refactor\n\nMake Duration/Period factories inherit AbstractArgumentFactory"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234792dde8ed798d2ed9c1",
    "number": 697,
    "body": "Guava 21 is a release which requires Java 8 and provide some additional features for computability between Guava and Java 8 collection frameworks. For instance, we can reuse collectors for immutable lists and sets. They are now provided by Guava itself. Unfortunately, it looks like we can't replace the collections that collects data to Guava's Optional. Guava provides an optional collectors, but it collects\r\ndata to Java8's Optional. A pity.\r\n\r\nGuava 21 release notes: https://github.com/google/guava/wiki/Release21\r\n\r\nReference issue: #683 ",
    "head_branch": "upgrade-guava",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #697 from jdbi/upgrade-guava\n\nUpgrade to Guava 21"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234793dde8ed798d2ed9c2",
    "number": 687,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #687 from mdewilde/master\n\nJavadoc cleanup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234794dde8ed798d2ed9c3",
    "number": 675,
    "body": "Per https://github.com/jdbi/jdbi/pull/648#issuecomment-271463707:\r\n\r\n> One thing has been nagging me: I'm not sure I like putting statement-specific settings into JdbiConfig classes. In my mind, this invites users to set config at that Jdbi or Handle level that is inappropriate to share between statements, e.g. SqlStatements.setGeneratedKeysColumnNames or setConcurrentUpdatable. It may have been a mistake to move that out of StatementContext. (And I acknowledge that it was originally my suggestion--sorry for the waste of time)\r\n\r\nI think we were probably better off with `StatementContext` holding statement-specific properties instead of `SqlStatements`:\r\n* `returningGeneratedKeys`\r\n* `generatedKeysColumnNames`\r\n* `concurrentUpdatable`\r\n\r\n@arteam @stevenschlansker What do you think about this change?",
    "head_branch": "jdbi3-statement-config-in-context",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #675 from jdbi/jdbi3-statement-config-in-context\n\nMove statement-specific config from SqlStatements back into StatementContext"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234795dde8ed798d2ed9c4",
    "number": 673,
    "body": "BindListUtil: fold into IterableLike\r\nSteal the (excellent) test cases\r\n\r\n(scrapping #648 for parts)",
    "head_branch": "iterable-like",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "ReflectionArrayIterator: rename to IterableLike, since it handles more than arrays and doesn't necessarily use reflection\nBindListUtil: fold into IterableLike\nSteal the (excellent) test cases"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234796dde8ed798d2ed9c5",
    "number": 671,
    "body": "Inspired by #670. It's easy for contributors to make common mistakes when implementing an `ArgumentFactory`. We should provide a base class that does the correct checks.\r\n\r\nThis PR introduces `AbstractArgumentFactory`. To use it:\r\n* Extend the base class using a concrete parameter for `<T>`,\r\n* Provide a default constructor that calls the super constructor with the `sqlType` (used when the argument value is null), and\r\n* Override the abstract method `Argument build(T value, ConfigRegistry config)` (used when the argument value is non-null).\r\n\r\nThe resulting factory will correctly handle all argument scenarios:\r\n* If the parameter `<T>` (`expectedType`) is a class, will match the argument `type`/`value` when\r\n  * `expectedClass.isAssignableFrom(getErasedType(type))`, or `expectedClass.isInstance(value)`\r\n* If `expectedType` is a generic type, will match the argument when:\r\n  * `expectedType.equals(type)`\r\n\r\nI've only added isolated unit tests for `AbstractArgumentFactory`. I also converted a few argument factories over to extending this new base class, so the tests on those types should likewise suffice as end-to-end tests on the new base class.",
    "head_branch": "jdbi3-abstract-argument-factory",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #671 from jdbi/jdbi3-abstract-argument-factory\n\nAdd AbstractArgumentFactory to simplify argument factory implementation"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234797dde8ed798d2ed9c6",
    "number": 670,
    "body": "I believe this addresses https://github.com/jdbi/jdbi/issues/600 and https://github.com/jdbi/jdbi/issues/598.\r\n\r\ncc @stevenschlansker @rmacdonaldsmith",
    "head_branch": "issue_600_postgres_duration",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #670 from pennello/issue_600_postgres_duration\n\nAdds support for Postgres interval ↔︎ Period & Duration types."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234799dde8ed798d2ed9c7",
    "number": 669,
    "body": "Carved out from #370.\r\n\r\n* [x] Rename `Jdbi` fields and variables to `db`.\r\n* [x] Rename `DatabaseRule` fields to `dbRule` (formerly `db`)\r\n* ~Rename `JdbiPlugin.customizeJdbi()` to `customizeDb()`?~\r\n* ~Rename `DatabaseRule.getJdbi()` to `getDb()`?~\r\n* ~Rename `Jdbi` itself to `Database` or maybe `Db`?~\r\n\r\n@jdbi/contributors What does everyone think about the last three renames posed above?",
    "head_branch": "jdbi3-rename-jdbi-to-db",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #669 from jdbi/jdbi3-rename-jdbi-to-db\n\nRename Jdbi fields/variables to db, DatabaseRule fields to dbRule"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623479adde8ed798d2ed9c8",
    "number": 668,
    "body": "Fixes #91",
    "head_branch": "readonly-txn",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #668 from jdbi/readonly-txn\n\nAdd support for readOnly in Handle and @Transaction"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623479bdde8ed798d2ed9c9",
    "number": 667,
    "body": "* Rename PostgresJdbiPlugin to PostgresPlugin, to agree with other plugin names.\r\n* Add SPI file for PostgresPlugin--somehow we overlooked this one\r\n* Remove auto-service dependency in favor of manual SPI files.\r\n* Upgrade Postgres JDBC dependency to latest",
    "head_branch": "jdbi3-postgres-plugin-spi",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #667 from jdbi/jdbi3-postgres-plugin-spi\n\nMake postgres plugin an SPI plugin, plus other plugin cleanup"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623479cdde8ed798d2ed9ca",
    "number": 666,
    "body": "",
    "head_branch": "jdbi3-dump-st3",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #666 from jdbi/jdbi3-dump-st3\n\nRemove jdbi3-stringtemplate3 in favor of jdbi3-stringtemplate4"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623479ddde8ed798d2ed9cb",
    "number": 665,
    "body": "Looks like it's not so much handy after all. It's used only in one place, where we can use a singleton map. As a result, this change removes mostly dead code and promotes using the standard JDK collections instead custom ones.",
    "head_branch": "remove_handy_map_thing",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623479edde8ed798d2ed9cc",
    "number": 664,
    "body": "Provide an ability to load resources not only by a type and method, but by a direct path as well. This is useful for the users who prefer to provide the full path to a resource when loading it, so they can navigate to the resource from  code with the help of their IDE.\r\n\r\nSee #588",
    "head_branch": "expose_loading_resources",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #664 from jdbi/expose_loading_resources\n\nExpose methods for loading a resource from the classpath by its path"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623479fdde8ed798d2ed9cd",
    "number": 663,
    "body": "* Remove ArrayResultReturner in favor of ArrayCollectorFactory in core\r\n* Move rowMapperType method to CustomizingStatementHandler\r\n* Rename method parameters (bearer -> iterable)\r\n\r\nAddresses #601 (Evaluate SqlObject hardcoding of types)\r\n\r\nWe have ResultReturners hardcoded for several categories of return type.\r\n\r\nI believe each of them is appropriate at the SqlObject level, except for Array, which this PR promotes to core as ArrayResultReturner.\r\n\r\nAll the other ResultReturners fall into two categories:\r\n1. The return type is a core object that exists before the Collector comes into play, or represents the result as a whole rather than a series of elements that can be collected.\r\n2. The return type has special semantics in SqlObject, where using a collector makes no sense\r\n\r\n* `void` - specific to SqlObject, nothing to collect\r\n* `ResultIterable` - comes before the collector\r\n* `Iterator` - comes before the collector (the stream itself comes from this iterator)\r\n* `Stream` - comes before the collector\r\n* `@SingleValue` - SqlObject-specific exception that avoids using a collector",
    "head_branch": "jdbi3-sql-object-result-hardcoding",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #663 from jdbi/jdbi3-sql-object-result-hardcoding\n\nResultReturner refactor"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347a0dde8ed798d2ed9ce",
    "number": 662,
    "body": "…cation instead of in a callback\r\n\r\nFixes #660 ",
    "head_branch": "jdbi3-configurer-refactor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #662 from jdbi/jdbi3-configurer-refactor\n\nRename ConfigurerFactory to Configurer, make it modify config on invo…"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347a1dde8ed798d2ed9cf",
    "number": 661,
    "body": "Fixes #658 ",
    "head_branch": "jdbi3-coalesce-sql-statement-config",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #661 from jdbi/jdbi3-coalesce-sql-statement-config\n\nCoalesce StatementConfiguration, SqlStatements config classes"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347a2dde8ed798d2ed9d0",
    "number": 659,
    "body": "Fixes #621, #622 \r\n\r\n* Remove existing ResultBearing, but leaves implementations of the former interface intact.\r\n* Rename ResultSetIterable back to ResultBearing\r\n* Rename ResultSetIterable.withResultSet to ResultBearing.mapResultSet\r\n* Rename ResultSetCallback to ResultSetMapper\r\n* Ensure statement contexts are closed in a few more cases\r\n* Improve javadocs in a few places",
    "head_branch": "jdbi3-result-bearing-2-electric-boogaloo",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #659 from jdbi/jdbi3-result-bearing-2-electric-boogaloo\n\nRename ResultSetIterable back to ResultBearing"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347a3dde8ed798d2ed9d1",
    "number": 657,
    "body": "…lback, HandleConsumer\r\n\r\n`TransactionCallback` and `TransactionConsumer` were recently modified to take only a `Handle` argument, which is the same signature (aside from method names) as `HandleCallback` and `HandleConsumer`.\r\n\r\nThis PR removes the transaction callbacks in favor of the handle ones.\r\n\r\nAlso adds a bit of missing javadoc on `Jdbi` transaction methods.",
    "head_branch": "jdbi3-redundant-txn-callbacks",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #657 from jdbi/jdbi3-redundant-txn-callbacks\n\nRemove TransactionCallback, TransactionConsumer in favor of HandleCal…"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347a4dde8ed798d2ed9d2",
    "number": 654,
    "body": "![](http://i0.kym-cdn.com/entries/icons/original/000/000/246/copypasta.jpg)",
    "head_branch": "jdbi3-stringtemplate4",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #654 from jdbi/jdbi3-stringtemplate4\n\nAdd jdbi3-stringtemplate4 artifact."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347a5dde8ed798d2ed9d3",
    "number": 653,
    "body": "…erything else in JDBI\r\n\r\nFixes #643",
    "head_branch": "jdbi3-out-parameters-zero-based",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #653 from jdbi/jdbi3-out-parameters-zero-based\n\nOutParameters.getXyz(int) methods should use 0-based indices, like ev…"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347a6dde8ed798d2ed9d4",
    "number": 652,
    "body": "…ctory) names.",
    "head_branch": "jdbi3-rename-artifacts-no-im-serious-where-are-you-going",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #652 from jdbi/jdbi3-rename-artifacts-no-im-serious-where-are-you-going\n\nRename maven artifacts in each pom.xml, and not just the module (dire…"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347a7dde8ed798d2ed9d5",
    "number": 650,
    "body": "",
    "head_branch": "jdbi3-fix-oracle-build",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #650 from jdbi/jdbi3-fix-oracle-build\n\nFix oracle build"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347a8dde8ed798d2ed9d6",
    "number": 649,
    "body": "",
    "head_branch": "constructormapper-constructor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #649 from jdbi/constructormapper-constructor\n\nConstructorMapper: allow selection of constructor by @JdbiConstructor annotation"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347a9dde8ed798d2ed9d7",
    "number": 648,
    "body": "Turns out the main reason for the ConfigurerFactory vs StatementCustomizer is\r\nsimply because StatementCustomizer isn't quite the right abstraction.\r\n\r\nMove ConfigRegistry access up to Handler creation.  Pass it in to the customizer's\r\ncreate* methods.  This allows you to mutate it once upfront, and choose whether or\r\nnot to customize the method further.\r\n\r\nFix createForParameter signature to make more sense\r\n\r\nFixes #647",
    "head_branch": "customizer-configurer-potato-potahto",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347aadde8ed798d2ed9d8",
    "number": 642,
    "body": "BindBeanList allows you to create queries similar to:\r\n`select * from things where (key1, key2) in ((1,2),(3,4))`\r\n\r\nThis is useful to finding rows that match a list of tuples.\r\n\r\nNotes:\r\n1) I believe this is the same issue as https://groups.google.com/forum/#!topic/jdbi/AiJvndhLNk8\r\n2) There is an unsafe `Optional.get` in `SqlStatement.bindBeanList`. I'm not sure what to do if it's empty. Happy to hear suggestions.",
    "head_branch": "bind-bean-list",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #642 from gshakhn/bind-bean-list\n\nAdd support for binding multiple columns in an in clause."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347abdde8ed798d2ed9d9",
    "number": 641,
    "body": "",
    "head_branch": "jdbi3-alpha6",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #641 from jdbi/jdbi3-alpha6\n\nJDBI 3 alpha 6 release"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347acdde8ed798d2ed9da",
    "number": 640,
    "body": "Also added some documentation on `-parameters` compiler flag to `CONTRIBUTING.md`.",
    "head_branch": "jdbi3-sqlobject-primitive-return",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #640 from jdbi/jdbi3-sqlobject-primitive-return\n\nBug fix: SQL method with primitive result throws NPE if query returns no rows"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347addde8ed798d2ed9db",
    "number": 639,
    "body": "I think this is a better home for `CollectorFactory` and friends.\r\n\r\nI had to make guava depend on sqlobject, which required moving a test from sqlobject to guava to avoid a circular dependency.",
    "head_branch": "jdbi3-move-collector-to-sqlobject",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347aedde8ed798d2ed9dc",
    "number": 638,
    "body": "",
    "head_branch": "fixitfixitfixitfixitfixit",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #638 from jdbi/fixitfixitfixitfixitfixit\n\nfixitfixitfixitfixitfixit"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347afdde8ed798d2ed9dd",
    "number": 635,
    "body": "They are convenient, but they create unnecessary collaborators in the API and seem of dubious value to me.  Plus, -90 loc :)",
    "head_branch": "config-simplify",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "ConfigRegistry: inject JdbiConfig instances in case the config needs it"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347b0dde8ed798d2ed9de",
    "number": 634,
    "body": "StatementContext has StatementBuilder's information there.  Split it out into its own class.  Fixes #626 \r\n",
    "head_branch": "statement-config",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #634 from jdbi/statement-config\n\nClean up StatementContext"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347b1dde8ed798d2ed9df",
    "number": 633,
    "body": "Fixes #619 ",
    "head_branch": "jdbi3-version-named-3rd-party-artifacts",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #633 from jdbi/jdbi3-version-named-3rd-party-artifacts\n\nRename artifacts for 3rd party dependencies according to major version."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347b2dde8ed798d2ed9e0",
    "number": 632,
    "body": "Clean up some exception handling\r\n\r\nFixes #625 ",
    "head_branch": "jpa-specialize",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Implement specialize for JpaMapper\nClean up some exception handling"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347b3dde8ed798d2ed9e1",
    "number": 631,
    "body": "Fixes #628 ",
    "head_branch": "basestatement-constructors",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Simplify Statement constructor hierarchy greatly.  What a rat's nest."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347b4dde8ed798d2ed9e2",
    "number": 627,
    "body": "Fixes #607",
    "head_branch": "mixin-as-interface",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #627 from jdbi/mixin-as-interface\n\nSqlObject mixins: rework as subinterfaces with default methods"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347b6dde8ed798d2ed9e3",
    "number": 624,
    "body": "Fixes #582. See that issue description for a detailed list of changes in this PR.\r\n\r\nOnly core and sqlobject were touched in any meaningful way.\r\n\r\nI had to make a couple things public in order to allow cross-package access. After submitting the PR I'll annotate some of them directly if they require explanation.\r\n\r\nThe diff will tell you some things, but really the most important review is to check out this branch on your machine and browse the project packages, and see where things live after this PR.\r\n\r\nPlease call out any classes that you believe should go elsewhere.\r\n\r\n@arteam @stevenschlansker This is ready for review. ",
    "head_branch": "jdbi3-package-by-feature",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #624 from jdbi/jdbi3-package-by-feature\n\nPackage by feature"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347b7dde8ed798d2ed9e4",
    "number": 617,
    "body": "…ies, so access keys can't leak from build logs",
    "head_branch": "jdbi3-optional-oracle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #617 from qualidafial/jdbi3-optional-oracle\n\nLet Travis build ignore Oracle for pull requests from other repositor…"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347b8dde8ed798d2ed9e5",
    "number": 616,
    "body": "Refactor for ResultBearing(ResultProducer) -> ResultSetIterable(mapper) -> ResultIterable<T> fluent API pipeline\r\n\r\nFixes #614 (ResultIterable wants to be distinct from ResultBearing)\r\n\r\nThis PR further develops the ResultBearing / ResultProducer<R> execution stategy.\r\n\r\n* ResultProducer's `PreparedStatement` parameter changed to `Supplier<PreparedStatement>` so chained calls with lazy intermediate types like `ResultSetIterable` or `ResultIterable` can defer executing the statement until the \"terminal\" method call--like streams.\r\n* ResultProducers class with static factory methods\r\n  * returningUpdateCount() produces PreparedStatement.getUpdateCount()\r\n  * returningResults() produces ResultSetIterable over PreparedStatement.getResultSet()\r\n  * returningGeneratedKeys(String...) produces ResultSetIterable over PreparedStatement.getGeneratedKeys()\r\n* ResultSetIterable is a decorator over JDBC ResultSet with convenience methods:\r\n  * withResultSet() passes the result set to the callback and returns the callback result, while masking SQLException. This is the only abstract method--all others are written in terms of this method.\r\n  * map(), mapTo(), mapToBean(), and mapToMap() return a `ResultIterable<T>`\r\n  * reduceRows(), and reduceResultSet() were moved to this interface, and still have the same semantics\r\n  * static method `of(Supplier<ResultSet>, StatementContext)` produces a ResultSetIterable over the given result set and context.\r\n* `ResultIterable<T>`:\r\n  * Removed the reduceRows(), reduceResultSet() methods. (They're in ResultSetIterable now)\r\n  * static method `of(Supplier<ResultSet>, RowMapper<T>, StatementContext)` produces a ResultIterable over the given result set.\r\n  * static method `of(ResultIterator<T>)` produces a ResultIterable over the given iterator.\r\n* Query now implements ResultBearing and ResultSetIterable, but not `ResultIterable<T>`. This means:\r\n  * There is no generic `<T>` parameter on Query\r\n  * There is no default mapper\r\n  * Methods inherited from ResultSetIterable must be called last, after methods like e.g. setFetchSize(). In practice this means mapTo(type) must always be the second-to-last chained call, right before e.g. .list()\r\n* SQL object methods can now return a `ResultIterable<T>` instead of `Query<T>`.\r\n* Renamed DefaultMapper to MapMapper.\r\n* Changed Handle.select(String,Obj[]) to return Query. I kinda like this: handle.select(\"select * from contact where id = ?\", 1).mapTo(Contact.class).list()\r\n  * Maybe we could collapse Handle.select() and Handle.createQuery() into a single method\r\n* Removed `GeneratedKeys<T>` in favor of `ResultIterable<T>`. Methods that used to return `GeneratedKeys<T>` now return `ResultIterable<T>`.\r\n* PreparedBatch now implements ResultBearing and ResultSetIterable.\r\n  * Existing executeAndGenerateKeys methods were refactored to use the new fluent pipeline, e.g. execute(returningGeneratedKeys()).mapTo(keyType)\r\n* Refactored OracleReturning into static factory methods that produce 1) a StatementCustomizer (that registers the return parameters) and 2) a ResultProducer (which produces a ResultSetIterable for the return result set). (Fixes #610)\r\n  * Now with tests!\r\n* Update implements ResultBearing\r\n  * executeAndReturnGeneratedKeys(mapper, ...columns) now implemented as execute(returningGeneratedKeys(columns).map(mapper), so these are just convenience methods for public API now, instead of being magic.\r\n\r\nCosmetic changes:\r\n* Renamed Statement.addStatementCustomizer() to addCustomizer(), and pulled it up to BaseStatement\r\n* Made BaseStatement.addCleanable() public\r\n* ConfigRegistry: Added non-wildcard findColumnMapperFor() and findRowMapperFor() methods that accept Class<T> or GenericType<T> and return a mapper for that type.\r\n* ColumnMappers and RowMappers: added non-wildcard findFor() methods.\r\n* StatementContext: added non-wildcard findColumnMapperFor(), findRowMapperFor() methods.\r\n\r\n~An outstanding concern is that resource disposal gets a little trickier. At the moment, a ResultSet is opened in the execute(returningResultSet()) method call, and not until e.g. .mapTo(type).list() does the result set get closed.~\r\n\r\n* ~One option is to make ResultBearing produce a lazy result, which would only execute the statement on a \"terminal\" operation (like how JDK8 streams work).~\r\n* ~Another is to sandbox ResultBearing.execute(ResultProducer), e.g. by adding a ResultCallback callback, which would receive the result value and be able to perform further transformations inside the callback, and then we can clean up resource when the callback returns.~",
    "head_branch": "jdbi3-result-set-iterable",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #616 from jdbi/jdbi3-result-set-iterable\n\nRefactor fluent pipeline: ResultBearing -> ResultSetIterable -> ResultIterable<T>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347b9dde8ed798d2ed9e6",
    "number": 615,
    "body": "Added @Timestamped Statement Customizer to add current datetime as\r\nparameter for use in queries, tests included :)",
    "head_branch": "add-timestamp-customizer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #615 from zikani03/add-timestamp-customizer\n\nAdd @Timestamped annotation"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347badde8ed798d2ed9e7",
    "number": 613,
    "body": "Fixes #178",
    "head_branch": "batch-statement-builder",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #613 from jdbi/batch-statement-builder\n\nBatch and PreparedBatch: use statement builder."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347bbdde8ed798d2ed9e8",
    "number": 612,
    "body": "fixes #417",
    "head_branch": "reflection-mapper-verify",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #612 from jdbi/reflection-mapper-verify\n\n{Bean,Field}Mapper: throw if no columns match, add strict validation"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347bcdde8ed798d2ed9e9",
    "number": 611,
    "body": "had a couple more for #595 ",
    "head_branch": "result-producer-cleanup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #611 from jdbi/result-producer-cleanup\n\nResult producer cleanup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347bddde8ed798d2ed9ea",
    "number": 609,
    "body": "",
    "head_branch": "result-producer-revised",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #609 from jdbi/result-producer-revised\n\nRemove ResultProducer <T> type parameter, ResultSet method parameter."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347bedde8ed798d2ed9eb",
    "number": 608,
    "body": "…r names out of order.",
    "head_branch": "jdbi3-sql-object-exception-message",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #608 from jdbi/jdbi3-sql-object-exception-message\n\nSQL Object sanity check exception message renders method and paramete…"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347bfdde8ed798d2ed9ec",
    "number": 604,
    "body": "I'm kind of amazed I never recognized this before. The factory and handler `method` parameters were always colliding..",
    "head_branch": "jdbi3-handler-method-parameter-redundant",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #604 from jdbi/jdbi3-handler-method-parameter-redundant\n\nRemove Handler.invoke redundant parameter `method`"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347c0dde8ed798d2ed9ed",
    "number": 597,
    "body": "Fixes #416 ",
    "head_branch": "jdbi3-on-demand-transactional",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #597 from jdbi/jdbi3-on-demand-transactional\n\nThrow TransactionException if handle is closed while in a transaction."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347c1dde8ed798d2ed9ee",
    "number": 596,
    "body": "Hello, techies.\r\n\r\nLook at your binders, now back to customizers. Now back at your binders, now back to customizers.\r\n\r\nSadly, your binders aren't customizers, but if you stopped using @BindingAnnotation and switched to\r\n@SqlStatementCustomizingAnnotation, they could _smell_ like customizers.\r\n\r\nLook down, back up, where are you?\r\n\r\nYou're on a code base with the customizers your binders could smell like.\r\n\r\nWhat's in your Github notifications, back at me. I have it, it's a pull request to that refactor you love.\r\n\r\nLook again, the binders are now customizers!\r\n\r\nAnything is possible when your binders smell like customizers and not a redundant design feature.\r\n\r\nI'm on a chair.",
    "head_branch": "jdbi3-look-again-the-binders-are-now-customizers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #596 from jdbi/jdbi3-look-again-the-binders-are-now-customizers\n\nRemove BindingAnnotation in favor of SqlStatementCustomizingAnnotation"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347c2dde8ed798d2ed9ef",
    "number": 595,
    "body": "First stab at #592 ",
    "head_branch": "result-producer",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #595 from jdbi/result-producer\n\nStatementExecutor -> ResultProducer"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347c3dde8ed798d2ed9f0",
    "number": 587,
    "body": "* [x] Hide oracle module behind a profile so end-users can build JDBI out of the box, without having to set up Oracle DB in a VM, or set up the Oracle maven repository.\r\n* [x] Set up `~/.m2/settings.xml` in a secure file in TravisCI so build can talk to maven.oracle.com.\r\n* ~See if there's any way to build JDBI with a live Oracle database in TravisCI. Non-critical but would be nice.~ moving this to a separate issue\r\n* [x] Write guide on setting up for builds and unit tests with Oracle\r\n* [x] Write guide on how to create `travis-settings.xml` and `travis-settings-security.xml` from your own `~/.m2/settings[-security].xml` files.",
    "head_branch": "jdbi3-oracle",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #587 from jdbi/jdbi3-oracle\n\nMove Oracle-specific stuff to jdbi3-oracle module."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347c4dde8ed798d2ed9f1",
    "number": 586,
    "body": "",
    "head_branch": "jdbi3-alpha5",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #586 from jdbi/jdbi3-alpha5\n\n3.0.0 alpha 4 released. Advancing version to 3.0.0-alpha5-SNAPSHOT"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347c5dde8ed798d2ed9f2",
    "number": 585,
    "body": "Added method `RowMapper<T>.memoize(ResultSet, StatementContext): RowMapper<T>`.\r\n\r\nThis improves performance of mapping since the memoized mapper only scans the column names and performance column-to-(field/parameter/property) mapping and column mapper lookup once for the entire result set.\r\n\r\nAudited all StatementExecutors, and all other callers of `RowMapper.map` to ensure that the row mapper is memoized once before parsing the result set.",
    "head_branch": "jdbi3-specialized-row-mappers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #585 from jdbi/jdbi3-specialized-row-mappers\n\nSpecializing row mappers"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347c6dde8ed798d2ed9f3",
    "number": 584,
    "body": "Fixes #416 ",
    "head_branch": "txnal-ondemand",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347c7dde8ed798d2ed9f4",
    "number": 583,
    "body": "per #407, its only feature, 'setRollbackOnly', just adds a different way\r\nof doing what you can already do through other means.\r\n\r\nEither call 'handle.rollback()' and do further cleanup yourself,\r\nor throw an exception of your choice.  But there's no reason to\r\nhave a third option of \"set a flag to have us throw an exception for you\".\r\n\r\nBonus cleanup: JDBC has Savepoints.  We renamed them Checkpoints\r\nfor no apparent reason.  Let's ditch a vocab term.\r\n\r\nFixes #407\r\ncc @pennello",
    "head_branch": "nuke-txn-status",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Checkpoint -> Savepoint\n\nJDBC calls them savepoints, we don't really do anything\non top of that, so let's get rid of one piece of redundant\nterminology."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347c8dde8ed798d2ed9f5",
    "number": 581,
    "body": "Also increases use of `ReflectionArrayIterator` so you can bind e.g. `int[]` without hitting a nasty `ClassCastException`.",
    "head_branch": "batch-singlevalue-parameter",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "SqlArrayArgument: use ReflectionArrayIterator so you can bind iterator types"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347c9dde8ed798d2ed9f6",
    "number": 578,
    "body": "",
    "head_branch": "jdbi3-fix-build",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #578 from jdbi/jdbi3-fix-build\n\nFix build"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347cadde8ed798d2ed9f7",
    "number": 577,
    "body": "Fixes #575",
    "head_branch": "script-getstatements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #577 from stevenschlansker/script-getstatements\n\nExpose Script.getStatements()"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347cbdde8ed798d2ed9f8",
    "number": 576,
    "body": "Fixes #562\r\n\r\n* [x] Add `SqlStatement.bindList(String attributeName, List<?> values)`. Make the annotation use this method directly.\r\n* [x] Add `SqlStatement.defineList(String attributeName, List<?> values)`. Make the annotation use this method directly.\r\n* [x] Rename `DefineIn` to `DefineList`, and `BindIn` to `BindList`-- to steer away from the assumption that the annotations are only for `WHERE IN` clauses.\r\n* [x] Make sure the core methods have javadoc examples analagous to what's in `@BindIn`, `@DefineIn` javadoc.",
    "head_branch": "jdbi3-define-in-bind-in-core",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #576 from jdbi/jdbi3-define-in-bind-in-core\n\nPromote BindIn, DefineIn to core"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347ccdde8ed798d2ed9f9",
    "number": 574,
    "body": "Fixes #563 \r\n\r\nThis PR:\r\n* Renames `ColumnNameMappingStrategy` to `ColumnNameMatcher`\r\n* Adds config class `ReflectionMappers`, with a property to configure column name matchers.\r\n* Modify `BeanMapper`, `FieldMapper`, and `ConstructorMapper` to use `ReflectionMapper` instead of constructor parameters for configuring column name matching.\r\n* Moved all of the above together into `org.jdbi.v3.core.mapper.reflect` package.",
    "head_branch": "jdbi3-reflection-mapper-config",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #574 from jdbi/jdbi3-reflection-mapper-config\n\nMove column name mapping strategies into ReflectionMappers config type."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347cddde8ed798d2ed9fa",
    "number": 573,
    "body": "",
    "head_branch": "jdbi3-reflection-mapper-config",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347cedde8ed798d2ed9fb",
    "number": 572,
    "body": "Fixes #564",
    "head_branch": "jdbi3-clone-config",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #572 from jdbi/jdbi3-clone-config\n\nClone configs instead of chaining them"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347cfdde8ed798d2ed9fc",
    "number": 570,
    "body": "It's a little out of date.\r\n\r\nI don't want to diminish past contributions,\r\nbut we don't keep this up to date, and I feel\r\nit doesn't add much value.\r\n\r\nSo the most fair resolution seems to be to delete it :)",
    "head_branch": "remove-pom-developers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #570 from jdbi/remove-pom-developers\n\nRemove pom.xml <developers> section"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347d0dde8ed798d2ed9fd",
    "number": 569,
    "body": "There's no plugin for it so this just causes build errors.\r\nNo effect in other environments.",
    "head_branch": "eclipse-asciidoc-suppress",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #569 from jdbi/eclipse-asciidoc-suppress\n\nInstruct Eclipse to not build asciidoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347d1dde8ed798d2ed9fe",
    "number": 567,
    "body": "This makes the argument more like mappers, in that arguments now represent _types_ instead of specific _values_ of that type.\r\n\r\nIn fact it might make sense to rename them to `ArgumentMapper` or `ArgMapper` or something.\r\n\r\nChanges:\r\n* ArgumentFactory: removed value parameter. Provides arguments based on type only.\r\n* Argument: added value parameter. An instance no longer represents an argument value, but an argument type. The value is now provided to the Argument as a method parameter.\r\n\r\nTo do:\r\n* [x] Actually do the caching part\r\n* [x] Add registration for inferred argument types, like we do with concretely typed mappers.\r\n* [ ] Give the test changes a once-over to make sure the tests are still validating the same rules.\r\n* [ ] Give the whole thing a once over to make sure we actually want this.\r\n* [x] See if we can add the `<?>` to the return type on `ArgumentFactory.build()`.",
    "head_branch": "jdbi3-argument-refactor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347d2dde8ed798d2ed9ff",
    "number": 558,
    "body": "Support for handling empty collections through the `@BindIn` annotation was introduced in 823c7b7e28100bab44d29f17c2e6023ae3f46d83. However, this functionality does not work on postgresql databases - postgresql demands the \"in (null)\" syntax, and despite the fact that [BindingFactory.Binder#build attempts to solve this problem](https://github.com/jdbi/jdbi/blob/master/src/main/java/org/skife/jdbi/v2/unstable/BindIn.java#L161-L164), it falls short of setting the appropriate attributes so that [StringTemplate3StatementLocator#locate](https://github.com/jdbi/jdbi/blob/master/src/main/java/org/skife/jdbi/v2/sqlobject/stringtemplate/StringTemplate3StatementLocator.java#L258-L266) works as intended. This fix is aimed squarely at injecting a placeholder `null` value into the `in` clause, instead of just `()`.\r\n\r\nA couple of things to note:\r\n1. This is my first time contributing to this code base, so comments / criticisms are more than welcome. Is there a cleaner way to solve the problem than the way I've solved it?\r\n1. I didn't change the behavior if the input value is explicitly `null` as opposed to simply an empty collection - not entirely sure what the expected behavior is in this scenario.\r\n1. I've gone ahead and added a postgresql test that fires only in the Travis build. Not sure what the best practice around this is. This test *does* fail in the case where my code changes around `BindIn` are removed.",
    "head_branch": "fix-empty-list-support-for-postgres",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #558 from schalkwijk/fix-empty-list-support-for-postgres\n\nFix how the @BindIn annotation deals with EmptyHandling.NULL when backed by a postgresql database"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347d4dde8ed798d2eda00",
    "number": 556,
    "body": "See https://github.com/jdbi/jdbi/pull/548#discussion_r86909321 for background.\r\n\r\nThis branch is a major refactor of JDBI. This PR subsumes the work on PR #548, and generalizes the existing `ExtensionConfig` concept into `JdbiConfig`:\r\n\r\nThe former `JdbiConfig` class has been renamed to `ConfigRegistry`, and `ExtensionConfig` class has in turn been named to `JdbiConfig`.\r\n\r\n`JdbiConfig` is the base interface for all configuration types:\r\n\r\n```java\r\ninterface JdbiConfig<This extends JdbiConfig<This>> {\r\n    // allows for inheritance of configuration from parent to child configs\r\n    This createChild();\r\n}\r\n```\r\n\r\n`ConfigRegistry` keeps a cache of config objects, and creates them as needed. For this reason, all implementations of `JdbiConfig` must provide a public no-arg constructor.\r\n\r\nWhen a child object is created by JDBI, e.g. when `Jdbi.open()` opens a handle, a child config registry is created. All config objects in the child registry inherit from the corresponding config object in the parent registry.\r\n\r\nThus the configuration for a SQL statement executed by a SQL object is inherited from the SQL method, then the SQL object, then the JDBI or handle that opened the extension.\r\n\r\nOther API changes:\r\n* Moved many classes around, in pursuit of package-by-feature.\r\n* Converted all existing registries to config classes, and made them public.\r\n* Introduced `Configurable` interface, collecting all the common registration/configuration methods into the interface as default implementations. Normalized all registration method names in the process. There is also a single non-default method `getConfig()` which returns the config registry itself.\r\n* Made `Jdbi`, `Handle`, `HandleSupplier`, `BaseStatement` all implement `Configurable`, and removed now-duplicated method implementations.\r\n* Split up `MappingRegistry` into `RowMappers` and `ColumnMappers` config classes.\r\n* Split up `ArgumentRegistry` into `Arguments` and `SqlArrayTypes` config classes.\r\n* Renamed `ExtensionRegistry` to `Extensions`.\r\n* Renamed `CollectorRegistry` to `JdbiCollectors` (to avoid conflict with `java.util.stream.Collectors`)\r\n* Added `SqlStatements` config class, which holds defined attributes, statement rewriter, and timing collector.\r\n* Renamed `SqlObjectConfig` to `SqlObjects`.\r\n* Made `Cleanable` public, added public `StatementContext.addCleanable` method.\r\n* Refactored `HandleSupplier`, replacing `getExtensionMethod` and `setExtensionMethod` with `invokeInContext`, which takes an extension method, a config registry, and a task, and runs the task using that config registry and extension method on the handle.\r\n* Refactored `Handler` interface, removing `SqlObjectConfig` argument since you can get configuration out of the `HandleSupplier` now.\r\n* Renamed `JdbiPlugin.customizeDbi(Jdbi dbi)` to `customizeJdbi(Jdbi jdbi)`.\r\n* Copied over features from PR #548 as proof of concept.\r\n* Converted several annotations from `@SqlStatementCustomizingAnnotation` into `@ConfiguringAnnotation`: `@OverrideStatementRewriterWith`, `@Register*`, `@Use*SqlLocator`, `@UseStringTemplateStatementRewriter`. This makes these annotations work on all SQL Object methods, including default methods.\r\n* Made `SqlObjectFactory` not a singleton :tada:\r\n* Modified factory classes e.g. `RowMapperFactory` to accept a `ConfigRegistry` instead of a `StatementContext`. This way it's valid to create and cache a row mapper for a given type at the `Jdbi` layer, and have it reusable across different contexts.\r\n",
    "head_branch": "jdbi3-config-all-the-things",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #556 from jdbi/jdbi3-config-all-the-things\n\nMassive refactor for generic, extensible configuration support."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347d5dde8ed798d2eda01",
    "number": 555,
    "body": "Fixes #550 \r\n\r\n@stevenschlansker code review?",
    "head_branch": "jdbi3-on-demand-reentrant",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #555 from jdbi/jdbi3-on-demand-reentrant\n\nMake recursive calls to an on-demand extension reentrant."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347d6dde8ed798d2eda02",
    "number": 554,
    "body": null,
    "head_branch": "handle-cleanup-threadlocal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "BasicHandle: on close, clear ThreadLocal"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347d7dde8ed798d2eda03",
    "number": 552,
    "body": "* Add column name prefix option to BeanMapper, FieldMapper, and ConstructorMapper.\r\n* Remove BeanMapperFactory in favor of BeanMapper.of factory methods like ConstructorMapper.\r\n* Add FieldMapper.of factory methods.\r\n* Add RegisterFieldMapper SQL object annotation.\r\n\r\nFixes #532 ",
    "head_branch": "jdbi3-reflection-mappers-prefix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #552 from jdbi/jdbi3-reflection-mappers-prefix\n\nAdd column name prefix option to reflective mappers"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347d8dde8ed798d2eda04",
    "number": 548,
    "body": "Three small changes in one:\n- Support for configuring core features that aren't bound to an extension (RFC, do you like this?)\n- Use that feature to support H2 array binding, introduce a plugin to configure it\n- Add support for mapping `Set<T>` and friends\n",
    "head_branch": "set-array-arg",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347d9dde8ed798d2eda05",
    "number": 547,
    "body": "You can create custom `@BindingAnnotation`s instead.\nFixes #542\n",
    "head_branch": "bind-binder-byebye",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "`@Bind` no longer needs the option to switch binder.\n\nYou can create custom `@BindingAnnotation`s instead.\nFixes #542"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347dadde8ed798d2eda06",
    "number": 545,
    "body": "…ed. Clean up javadoc for Bind, BindIn, Define, DefineIn.\n\nFix for #529 \n",
    "head_branch": "jdbi3-bind-in-param-name",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #545 from jdbi/jdbi3-bind-in-param-name\n\nMake `@BindIn` defined attribute default to parameter name if undefin…"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347dbdde8ed798d2eda07",
    "number": 544,
    "body": "…ashMap, so class keys can be garbage-collected.\n",
    "head_branch": "class-leak",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #544 from jdbi/class-leak\n\nFix class leak: use synchronized weak hash map instead of ConcurrentH…"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347dcdde8ed798d2eda08",
    "number": 540,
    "body": "StatementExecutor: allow customization of how jdbi runs a statement\nResultBearing: change main `iterator()` interface to instead use `execute(StatementExecutor)`\nReduceRow: introduce a jdbi \"view\" over a `ResultSet`\nResultBearing: introduce `reduceRows` and `reduceResultSet`\nResultSetResultIterator: simplify interface greatly by removing unused parameters\n\nfixes #526 \n",
    "head_branch": "statement-executor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #540 from jdbi/statement-executor\n\nStatement execution - increase flexibility around reducing, improve cleanup"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347dddde8ed798d2eda09",
    "number": 539,
    "body": "fixes #517 \n",
    "head_branch": "assertj-guava",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #539 from jdbi/assertj-guava\n\nassertj-guava 3.1.0, fixes #517"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347dedde8ed798d2eda0a",
    "number": 538,
    "body": "Cleaning up some imports that were not being used.\n",
    "head_branch": "unused-imports",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #538 from icirellik/unused-imports\n\nRemove unused import statements."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347dfdde8ed798d2eda0b",
    "number": 534,
    "body": "And create a concrete implementation of it, which is package-private accessible for internal JDBI components. This allows to restrict the amount of components which can change statement context's state, but at the same time to keep a public interface which allows to read the state. This also make statement contexts more testable because the use code which interacts with statement contexts can mock the interface.\n",
    "head_branch": "concrete_implementation_statement_context",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347e0dde8ed798d2eda0c",
    "number": 533,
    "body": "Added DefineIn annotation to the jdbi repository, created TestDefineInParameter.java for unit testing it.\n\nThis is for issue #512. Continued from #528.\n",
    "head_branch": "define_in_annotation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #533 from wayfair/define_in_annotation\n\nNew @DefineIn annotation for dynamic column list definition"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347e1dde8ed798d2eda0d",
    "number": 531,
    "body": "Fixes #525\n",
    "head_branch": "boolean-return",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #531 from jdbi/boolean-return\n\nSqlObject: map to boolean, improve code structure"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347e2dde8ed798d2eda0e",
    "number": 530,
    "body": "Here's a partial pass at #526 \n\nIt's nice shorthand for the `.stream().reduce(...)` version which takes the unnecessary parallel combiner.\n",
    "head_branch": "query-accumulators",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #530 from jdbi/query-accumulators\n\nResultBearing: add reduce method, and docs"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347e3dde8ed798d2eda0f",
    "number": 528,
    "body": "Added DefineIn annotation to the jdbi repository, created TestDefineInParameter.java for unit testing it.\n\nThis is for issue #512.\n",
    "head_branch": "define_in_annotation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347e4dde8ed798d2eda10",
    "number": 527,
    "body": "Added DefineIn annotation to the jdbi repository, created TestDefineInParameter.java for unit testing it.\n\nThis is for issue #512.\n",
    "head_branch": "define_in_annotation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347e5dde8ed798d2eda11",
    "number": 523,
    "body": "This is a WIP issue for tracking support for mapping Java's enum sets to Postgres' bit strings.\n\nMotivation:\nThis feature be very useful in scenarios when the parent entity has a lot of one-to-many relationships, and as a consequence joins become painful. If the universe of possible values for the relationship is finite and low,  it could make sense to inline the relationship as a bit string (bitmap).\n",
    "head_branch": "enum_sets",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347e6dde8ed798d2eda12",
    "number": 522,
    "body": "`StatementContext` is exposed publicly from `TimingCollector`, so it makes sense to allow users to mock it to test their `TimingCollector` implementations.\n",
    "head_branch": "remove_final_from_statement_context",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #522 from jdbi/remove_final_from_statement_context\n\nRemove final modifier from StatementContext"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347e7dde8ed798d2eda13",
    "number": 521,
    "body": "",
    "head_branch": "sqlobject-doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #521 from jdbi/sqlobject-doc\n\nsqlobject doc"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347e8dde8ed798d2eda14",
    "number": 520,
    "body": "",
    "head_branch": "statement-doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Statement documentation"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347e9dde8ed798d2eda15",
    "number": 519,
    "body": "",
    "head_branch": "results-doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "results.adoc: edit for passive voice, clarify example"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347eadde8ed798d2eda16",
    "number": 516,
    "body": "Fix for #460, #461, #493.\n\nAPI changes:\n- New types:\n  - `SqlArrayType`\n  - `SqlArrayTypeFactory`\n- New registration methods methods on `Jdbi`, `Handle`, `SqlStatement`:\n\n``` java\nSelfType registerArrayType(Class<T> type, String sqlTypeName);\nSelfType registerArrayType(SqlArrayType<T> arrayType);\nSelfType registerArrayType(SqlArrayTypeFactory factory);\n```\n- Support binding any Java array or `List` parameter to an array column (provided an SQL array type is registered for the given element type)\n- Support mapping array columns to java arrays, `List`, `ArrayList`, `LinkedList`, `CopyOnWriteArrayList`, or Guava's `ImmutableList`.\n\nTo do:\n- [x] Find a better class name than `ArrayElementMapper`\n- [x] Javadoc new methods in `Jdbi`\n- [x] Javadoc new methods in `Handle`\n- [x] Javadoc new methods in `SqlStatement`\n- [x] Complete javadoc in `StatementContext.findArrayElementMapperFor`\n- [x] Add link to OpenJDK Jira issue mentioned in comments in `MappingRegistry`\n- [x] Test array arguments / mappers with different databases:\n  - [x] Postgres\n  - [ ] MS SQL\n  - [ ] Oracle XE\n  - [ ] MySQL\n  - [x] HSQLDB\n- [ ] Add documentation on how to use SQL array columns with JDBI.\n",
    "head_branch": "jdbi3-sql-arrays-for-all",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #516 from jdbi/jdbi3-sql-arrays-for-all\n\nSQL array type registry for per-vendor array types."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347ebdde8ed798d2eda17",
    "number": 515,
    "body": "Fallout from #509 -- assertJ depends on guava 20.0-rc1 (annoying!)\nWe can just hope they release before we do? _g_\n",
    "head_branch": "guava-20.0rc1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Exclude Guava from assertj-guava\n\nhttps://github.com/joel-costigliola/assertj-guava/issues/33"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347ecdde8ed798d2eda18",
    "number": 514,
    "body": "",
    "head_branch": "constructormapper-factory",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "ConstructorMapper: improve docs and naming"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347eddde8ed798d2eda19",
    "number": 513,
    "body": "`Statement` is ambiguous -- it actually returns\nan `Update` object (there is the abstract class\n`SqlStatement`, but that covers other types too).\n\nOther option would be to rename the `Update` class\nto `Statement`, but that's too close to\n`SqlStatement`.\n",
    "head_branch": "update-statement",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Rename `createStatement` to `createUpdate`\n\n`Statement` is ambiguous -- it actually returns\nan `Update` object (there is the abstract class\n`SqlStatement`, but that covers other types too).\n\nOther option would be to rename the `Update` class\nto `Statement`, but that's too close to\n`SqlStatement`."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347eedde8ed798d2eda1a",
    "number": 510,
    "body": "Currently we use `Optional` in the SqlObject API to indicate the absence of result in a response. But many developers expect that null values will map to optional absent values as well.\nUnfortunately, we don't have two different optional abstraction to represent this use cases, so we have to mix these use cases. On the pragmatic point of view, this change provides better developer experience, because developers can effectively work with nullable values inside the `SqlObjectAPI`. Also, it consistent with the logic when results are presented as plain null values.\n",
    "head_branch": "null_sql_object",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #510 from jdbi/null_sql_object\n\nMap null results to absent optional values in SqlObject API"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347efdde8ed798d2eda1b",
    "number": 509,
    "body": "AssertJ is modern testing library which allows to write test assertions\nwhich are easy to read and understand. It supports Java 8 features and\nallows to perform assertions in the chain style.\n\nThis changes adopts AssertJ as JDBI's testing library and removes\nall usages of Hamcrest assertions, which are fine, but are rather\nlimited.\n",
    "head_branch": "assertj",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #509 from jdbi/assertj\n\nMove tests to AssertJ"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347f0dde8ed798d2eda1c",
    "number": 508,
    "body": "",
    "head_branch": "jdbi3-class-maps-weak-keys",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #508 from jdbi/jdbi3-class-maps-weak-keys\n\nUse synchronized WeakHashMaps for singleton caches, so classes can be garbage collected."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347f1dde8ed798d2eda1d",
    "number": 506,
    "body": "This PR is to track progress and getting a feedback for implementing a support for Postgres' `hstore` type.\n",
    "head_branch": "hstore",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #506 from jdbi/hstore\n\n[WIP] Postgres' hstore support"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347f2dde8ed798d2eda1e",
    "number": 505,
    "body": "…d with binding or statement customizing annotations.\n\nFixes #504 \n",
    "head_branch": "jdbi3-sanity-check-sql-object-annotations",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #505 from jdbi/jdbi3-sanity-check-sql-object-annotations\n\nThrow exception if SQL object default methods/parameters are annotate…"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347f3dde8ed798d2eda1f",
    "number": 503,
    "body": "@arteam Would you mind reviewing this?\n",
    "head_branch": "jdbi3-define-parameter-name",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #503 from jdbi/jdbi3-define-parameter-name\n\nMake `@Define` default to the parameter name, if available."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347f4dde8ed798d2eda20",
    "number": 502,
    "body": "…s per declaring class, and method handles per default method handler.\n",
    "head_branch": "jdbi3-cache-method-handle-lookups",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #502 from jdbi/jdbi3-cache-method-handle-lookups\n\nDefaultMethodHandler performance: cache MethodHandles.Lookup instance…"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347f5dde8ed798d2eda21",
    "number": 501,
    "body": "- Enhance BeanPropertyArguments to support bean name prefix like `@BindBean`\n- Rename `SqlStatement.bindFromProperties()` to `.bindBean()`\n- Rename `SqlStatement.bindFromMap()` to `.bindMap()`\n- Modify `@BindBean` to use `SqlStatement.bindBean` instead of its own parallel implementation.\n  This also makes `@BindBean` bindings lazy instead of eager, which fixes issue #478\n- Modify @BindMap:\n  - Rename `BindMap.value()` to `.keys()`\n  - Rename `BindMap.prefix()` to `.value()` (to agree with `@BindBean`)\n  - Rename `BindMap.implicitKeyStringConversion()` to `.convertKeys()`\n  - Use `SqlStatement.bindMap` instead of its own parallel implementation.\n",
    "head_branch": "jdbi3-lazy-bindbean-bindmap",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #501 from jdbi/jdbi3-lazy-bindbean-bindmap\n\nUnify @BindBean and SqlStatement.bindFromProperties"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347f6dde8ed798d2eda22",
    "number": 499,
    "body": "2.0.34-beta has doesn't work with JDK9. See https://github.com/mockito/mockito/issues/355. This update should allow to us to test JDBI against early builds of JDK9.\n",
    "head_branch": "upgrade_mockito",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #499 from jdbi/upgrade_mockito\n\nUpgrade Mockito to 2.1.0-RC.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347f7dde8ed798d2eda23",
    "number": 498,
    "body": "Starting up and shutting down a Postgres instance are rather heavy operations. As a consequence of this, unit tests for the Postgres module takes a considerable amount of time (1 min). We could speed this process up, by reusing `PostgresDbRule` on the unit class level, and recreating the relevant table before every test. This should be a more fast process (~15 sec), because dropping and creating tables are relatively cheap operations.\n",
    "head_branch": "fast_postgreas_tests",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #498 from jdbi/fast_postgreas_tests\n\nReuse a Postgres instance during tests"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347f8dde8ed798d2eda24",
    "number": 491,
    "body": "…otation, default method with sql method annotations should both throw exceptions\n\nFixes #477, #488 \n",
    "head_branch": "jdbi3-sanity-check-on-attach",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #491 from jdbi/jdbi3-sanity-check-on-attach\n\nDo sanity checks on SQL object attach: non-default method with no ann…"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347f9dde8ed798d2eda25",
    "number": 487,
    "body": "",
    "head_branch": "jdbi3-bindin",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #487 from jdbi/jdbi3-bindin\n\njdbi3 BindIn: Java8-ification, merge from master"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347fadde8ed798d2eda26",
    "number": 486,
    "body": "",
    "head_branch": "something-mapper",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "SomethingMapper deduplication"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347fbdde8ed798d2eda27",
    "number": 485,
    "body": "fixes #481, @kkrgwbj could you please test this fixes your problem?\n",
    "head_branch": "snake-digit",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #485 from jdbi/snake-digit\n\nSnakeCaseColumnNameStrategy: simplify logic, handle digits in names"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347fcdde8ed798d2eda28",
    "number": 484,
    "body": "Fixes #483 \n",
    "head_branch": "defaultmapper-column-case",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #484 from hpx7/defaultmapper-column-case\n\nAdd case sensitivity option to DefaultMapper"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347fddde8ed798d2eda29",
    "number": 482,
    "body": "For the consistency sake with `H2Rule` and general naming in the project.\n",
    "head_branch": "postgres_rule_jdbi_method",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #482 from jdbi/postgres_rule_jdbi_method\n\nRename the `getDbi` method to `getJdbi` for PGDatabaseRule"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662347fedde8ed798d2eda2a",
    "number": 480,
    "body": "Fixes #476.\n\n@arteam Can you review?\n",
    "head_branch": "jdbi3-bean-field-mapper-column-name-anno",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #480 from jdbi/jdbi3-bean-field-mapper-column-name-anno\n\nMake BeanMapper, FieldMapper honor `@ColumnName` annotations"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662347ffdde8ed798d2eda2b",
    "number": 475,
    "body": "A follow up to #470.\n\nImplement equals&hashCode correctly. Also move their declaration to the end of the class, so it's easy to see test methods.\n",
    "head_branch": "improve_join_row_mapper_tests",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #475 from jdbi/improve_join_row_mapper_tests\n\nMake User and Article proper domain objects"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234800dde8ed798d2eda2c",
    "number": 474,
    "body": "https://github.com/jdbi/jdbi/issues/473\n",
    "head_branch": "bindin-arrays-473",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "support array and Iterable in BindIn"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234801dde8ed798d2eda2d",
    "number": 472,
    "body": "I updated `DBIFactoryBean` to specify a generic type so it can be used to autowire by type. I had to update the Spring dependency so picked the lowest version that provided `FactoryBean<T>`. In the newer version of Spring it's also necessary to explicitly proxy the `DataSource` used by `DBIFactoryBean` for transaction-awareness.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #472 from robfletcher/master\n\nType-safe version of DBIFactoryBean"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234802dde8ed798d2eda2e",
    "number": 470,
    "body": "even has docs!  requires #469 to be reviewed first\n",
    "head_branch": "join-row-mapper",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "JoinRowMapper initial commit"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234803dde8ed798d2eda2f",
    "number": 469,
    "body": "needed for the upcoming JoinRowMapper\n",
    "head_branch": "constructor-mapper-extra-columns",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "ConstructorMapper: ignore extra rows in the result set, for\nupcoming JoinRowMapper"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234804dde8ed798d2eda30",
    "number": 468,
    "body": "",
    "head_branch": "jdbi3-abstract-method-error-swallowed",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #468 from jdbi/jdbi3-abstract-method-error-swallowed\n\nFix AbstractMethodError being swallowed in pass-through methods."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234805dde8ed798d2eda31",
    "number": 465,
    "body": "Fixes #464.\n",
    "head_branch": "abstract-method-error-swallowed",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #465 from jdbi/abstract-method-error-swallowed\n\nFix AbstractMethodError being swallowed in pass-through methods."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234806dde8ed798d2eda32",
    "number": 463,
    "body": "Just a small refactor so that documentation is more complete.\n\nHandleSupplier used to implement Supplier<Handle> but now we just declare out own method for this, with our own JDBI-specific documentation.\n",
    "head_branch": "jdbi3-handle-supplier-doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #463 from jdbi/jdbi3-handle-supplier-doc\n\nRename HandleSupplier.get() to .getHandle(), add documentation."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234807dde8ed798d2eda33",
    "number": 462,
    "body": "…or attached methods.\n\nThis is a breakout of test improvements from #456\n",
    "head_branch": "jdbi3-test-cleanup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #462 from jdbi/jdbi3-test-cleanup\n\nDuplicate object method behavior tests, once for on-demand and once f…"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234808dde8ed798d2eda34",
    "number": 459,
    "body": "",
    "head_branch": "constructormapper-error",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #459 from jdbi/constructormapper-error\n\nImprove error messaging on ConstructorMapper"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234809dde8ed798d2eda35",
    "number": 458,
    "body": "Fixes #455 \n",
    "head_branch": "jdbi3-sqlobject-handlers-public",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #458 from jdbi/jdbi3-sqlobject-handlers-public\n\nExpose SqlObject dispatch machinery for public use"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623480adde8ed798d2eda36",
    "number": 457,
    "body": "If we have a component type, why would we override this back to varchar...\njust causes type errors in the PG driver.\n",
    "head_branch": "empty-array-type",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #457 from jdbi/empty-array-type\n\nRemove questionable array length check"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623480bdde8ed798d2eda37",
    "number": 456,
    "body": "Submitted for discussion with the team.\n\nThis PR removes CGLIB and ASM from the project. It also restricts SqlObject extensions to public interfaces only.\n\nThis was surprisingly straightforward. Only drawback I saw was that extending Cloneable in a SqlObject class stopped working, which forced me to change some tests--pretty sure we don't want our users using `clone()` in their SQL Objects any way.\n",
    "head_branch": "jdbi3-sql-object-with-proxies",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #456 from jdbi/jdbi3-sql-object-with-proxies\n\nMigrate SqlObject from CGLIB to Java Proxy implementation."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623480cdde8ed798d2eda38",
    "number": 454,
    "body": "Fixes #441 on v3 branch (rewrite of #442 to jdbi3 branch)\n",
    "head_branch": "default-method-set-context-extension-method",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #454 from jdbi/default-method-set-context-extension-method\n\nSet context extension method for default/non-abstract methods"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623480ddde8ed798d2eda39",
    "number": 453,
    "body": "This splits Travis jobs into TEST, DOCUMENTATION, and CODE STYLE.\nThe benefits are:\n1) Faster build times as jobs go in parallel\n2) More fine grained errors: error in code style would not not terminate the build\n",
    "head_branch": "split_jobs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #453 from vlsi/split_jobs\n\nSplit tests, docs, and style checks to their own Travis jobs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623480edde8ed798d2eda3a",
    "number": 452,
    "body": "It might increase \"documentation\" build time for Travis\n",
    "head_branch": "maven_opts_more_ram",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623480fdde8ed798d2eda3b",
    "number": 450,
    "body": "",
    "head_branch": "spring-refresh",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #450 from jdbi/spring-refresh\n\nSpring refresh"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234810dde8ed798d2eda3c",
    "number": 449,
    "body": "This is something we're probably going to use in our fork but just wanted to get your thoughts on it, potentially for jdbi3. The problem we run into is that people use `@BindIn` without remembering to use `@UseStringTemplate3StatementLocator`. After a bit of debugging they realize what happened and add `@UseStringTemplate3StatementLocator`, but the annotation isn't very granular (can only be applied to an entire DAO) so then some unrelated queries start failing because they contain SQL like `a < b` which the `StringTemplate3StatementLocator` requires you to escape.\n\nI was considering updating `@UseStringTemplate3StatementLocator` to target `ElementType.METHOD` as well, that way you could only annotate methods using `@BindIn` and save some headaches there. But it seems to me that this is all unnecessary if `@BindIn` added the necessary statement locator. The heuristic I'm using for this is whether the `SQLStatement` is still using the default `ClasspathStatementLocator`, if so we apply the `UseStringTemplate3StatementLocator` customizer to the `SQLStatement` using the default annotation options. Let me know what you think of this approach.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234811dde8ed798d2eda3d",
    "number": 446,
    "body": "",
    "head_branch": "inet-address",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #446 from jdbi/inet-address\n\nAdd support for mapping InetAddress to/from Postgres 'inet' type"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234812dde8ed798d2eda3e",
    "number": 445,
    "body": "depends on #444 \n",
    "head_branch": "reg-constructor-mapper",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add new @RegisterConstructorMapper annotation"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234813dde8ed798d2eda3f",
    "number": 444,
    "body": "`@GetGeneratedKeys` is going to do actual mapping, which means registering is important on `@SqlUpdate` and `@SqlBatch` as well.  So might as well just move it up.\n\nExtend the generated key mapper to use both column or row mappers, if available.\n",
    "head_branch": "ggk-mappers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Replace Arrays.asList with just making an ArrayList"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234814dde8ed798d2eda40",
    "number": 442,
    "body": "…ame classpath directories as declarative methods.\n\nAdd methods Handle.getSqlObjectType, Handle.getSqlObjectMethod, and Handle.setSqlObjectContext (sets both\nproperties at once). These values are forwarded to the StatementContext of any Query, Update, Batch, etc\nupon creation of a SQLStatement.\n\nIn v3, we may want to hoist the setting of these values to a universal Handler wrapper which gets wrapped\naround every method. In this way we set the properties once on the Handle and would not have to expose\nsetters on the StatementContext.\n",
    "head_branch": "imperative-method-locate-statement-parity",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #442 from jdbi/imperative-method-locate-statement-parity\n\nAllow imperative SQL object methods to locate SQL statements in the s…"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234815dde8ed798d2eda41",
    "number": 440,
    "body": "",
    "head_branch": "latest-basepom",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #440 from stevenschlansker/latest-basepom\n\nLatest basepom, make tests execute faster"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234816dde8ed798d2eda42",
    "number": 439,
    "body": "```\n[ERROR] Caused by: java.lang.NullPointerException\n[ERROR] at net.sf.cglib.transform.AbstractClassLoader.loadClass(AbstractClassLoader.java:59)\n[ERROR] at org.apache.maven.surefire.report.SmartStackTraceParser.getClass(SmartStackTraceParser.java:70)\n[ERROR] at org.apache.maven.surefire.report.SmartStackTraceParser.<init>(SmartStackTraceParser.java:59)\n```\n",
    "head_branch": "class-filter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #439 from stevenschlansker/class-filter\n\nAbstractClassLoader expects a non-null ClassFilter:"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234817dde8ed798d2eda43",
    "number": 437,
    "body": "Now that we use toolchains to select a jdk6, there's\nlittle reason to select jdk8.  Whether we choose 7 or 8\nwe then immediately switch to 6, so it's just redundant work.\n",
    "head_branch": "jdk-7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #437 from stevenschlansker/jdk-7\n\nRemove jdbi v2 openjdk8 build"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234818dde8ed798d2eda44",
    "number": 436,
    "body": "https://bugs.eclipse.org/bugs/show_bug.cgi?id=499197\n\nThis commit should be reverted once a fix lands upstream.\n",
    "head_branch": "ecj-wildcard-workaround",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #436 from jdbi/ecj-wildcard-workaround\n\nWork around Eclipse vs javac compiler disagreement"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234819dde8ed798d2eda45",
    "number": 435,
    "body": "Changes:\r\n- Adds tests for e.g. `@SqlBatch @GetGeneratedKeys Something[]` methods\r\n- BatchHandler: nearly complete rewrite of execution logic to be streaming, rather than buffering all results into memory\r\n- `@SingleValue`\r\n- various small cleanups\r\n\r\nThis part of the code is really ugly...",
    "head_branch": "sqlobject-more-batching",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Code review feedback"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623481adde8ed798d2eda46",
    "number": 434,
    "body": "Right now annotating an `@SqlBatch` method with `@GetGeneratedKeys` has no effect even though the `PreparedBatch` class has support for it. This PR adds very limited support, only allowing `int[]` as a return type. We've had this modification in our fork for over a year without issue. Let me know if that limitation seems reasonable and I can try to add some tests, otherwise I can try to do a more extensive refactor to add more complete support.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #434 from HubSpot/master\n\nAdd @GetGeneratedKeys support to @SqlBatch"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623481bdde8ed798d2eda47",
    "number": 433,
    "body": "fixes #432\n",
    "head_branch": "csl-assign",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #433 from jdbi/csl-assign\n\nColonStatementLexer: treat ':=' as a literal"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623481cdde8ed798d2eda48",
    "number": 431,
    "body": "Fixes #430\n",
    "head_branch": "handle-closed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #431 from stevenschlansker/handle-closed\n\nExpose Handle.isClosed"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623481ddde8ed798d2eda49",
    "number": 429,
    "body": "…s can reference other templates in a group file.\n",
    "head_branch": "jdbi3-string-template-template-references",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #429 from jdbi/jdbi3-string-template-template-references\n\nFix string template sql locator / statement rewriter so that template…"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623481edde8ed798d2eda4a",
    "number": 426,
    "body": "```\nCurrent implementation uses a WeakHashMap -- this is bad for a cache\nbecause the common case, in 'findSqlOnClasspath', uses a computed\nkey that doesn't exist outside the scope of the lookup.  So the moment\na lookup succeeds, the key is immediately thrown away, and is therefore\ncollected on the next minor GC.\n\nThis also makes the tests flaky I think.  I'm observing intermittent\nfailures on Travis.\n\nGuava solves this nicely with the Cache class, configured to expire\nafter an interval of disuse rather than relying on GC.  I wish there\nwas a lighter weight solution but I didn't see any obvious choices\nin the base JDK libraries.\n```\n",
    "head_branch": "sqllocator-cache-fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #426 from jdbi/sqllocator-cache-fix\n\nClasspathSqlLocator: Replace WeakHashMap with a 10 minute Guava Cache"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623481fdde8ed798d2eda4b",
    "number": 425,
    "body": "",
    "head_branch": "batch-docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234820dde8ed798d2eda4c",
    "number": 424,
    "body": "Previously if your batch insert has trouble with e.g. Postgres, you would see:\n\n```\njava.sql.BatchUpdateException: Batch entry 1 insert into something (id, name) values (0, 'Keith') was aborted.  Call getNextException to see the cause.\n  at org.postgresql.jdbc.BatchResultHandler.handleError(BatchResultHandler.java:136)\n```\n\nNow, you get the actual information!\n\n```\njava.sql.BatchUpdateException: Batch entry 1 insert into something (id, name) values (0, 'Keith') was aborted.  Call getNextException to see the cause.\n  at org.postgresql.jdbc.BatchResultHandler.handleError(BatchResultHandler.java:136)\nSuppressed: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"something_pkey\"\n  Detail: Key (id)=(0) already exists.\n```\n",
    "head_branch": "batch-exception",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #424 from jdbi/batch-exception\n\nBatch: rewrite SQLException.getNextException into Throwable.addSuppressed"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234821dde8ed798d2eda4d",
    "number": 423,
    "body": "It's useful in timing collectors when we want to track the time of completing of SQL queries of different methods.\n\nSee [metrics-jdbi](https://github.com/dropwizard/metrics/tree/3.2-development/metrics-jdbi) as an example.\n",
    "head_branch": "expose_sql_method",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #423 from jdbi/expose_sql_method\n\nExpose the SQL method in StatementContext"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234822dde8ed798d2eda4e",
    "number": 421,
    "body": "…tRewriter`. Modify`@UseStringTemplateSqlLocator` imply the string template rewriter.\n\nShould resolve #413 and #414.\n\n@arteam, would you review this? I used your unit tests from #413 as a starting point.\n",
    "head_branch": "string-template-statement-rewriter",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #421 from jdbi/string-template-statement-rewriter\n\nAdd `StringTemplateStatementRewriter` and `@UseStringTemplateStatemen…"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234823dde8ed798d2eda4f",
    "number": 419,
    "body": "Users often use methods which return only a single result. In this case a returned `null` indicates that a RDBMS didn't find a document which satisfies the passed arguments. But actually the returned document can be `null` itself, if it's a nullable column.\n\nWe should expect such values and return them as null/optional values to the user. Currently we throw a `NullPointerException` instead, which is a rather harsh strategy for handling nullable values.\n",
    "head_branch": "handle-null-columns",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #419 from jdbi/handle-null-columns\n\nCorrectly handle null values in a response in JDBI3"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234824dde8ed798d2eda50",
    "number": 418,
    "body": "tag @hgschmie @john9x @qualidafial\n",
    "head_branch": "statement-locator-subclass",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #418 from stevenschlansker/statement-locator-subclass\n\nAdd a test showing that subclasses of SqlObject find statements based on the subclass name, not parent class"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234825dde8ed798d2eda51",
    "number": 415,
    "body": "Hi!\n\nClasspathStatementLocator gives essential GC pressure due to many string concatenation for every query even if static SQL objects are used.\n\n```\ncache_key = '/' + mungify(ctx.getSqlObjectType().getName() + '.' + name) + \".sql\";\n```\n\nI propose to use Method object as cache key, this is completely enough for SQL objects.\n\nAnd also I propose to cache individual SQL statements for SQL object methods cause they are static.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #415 from john9x/master\n\nDecrease ClasspathStatementLocator GC pressure."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234826dde8ed798d2eda52",
    "number": 412,
    "body": "The correct representations of the at-sign(@) in XML is code `&#064;` rather than `&amp;` which correspondents to the ampersand (&) symbol .\n",
    "head_branch": "correct_at_sign",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #412 from jdbi/correct_at_sign\n\nCorrectly escape the at-sign in code examples in Javadoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234827dde8ed798d2eda53",
    "number": 411,
    "body": "Addresses issues #194, #195:\n- Make `@Transaction` combinable with sql method annotations e.g. `@SqlUpdate`, `@SqlCall`, etc.\n- Make nested calls to `@Transaction`-annotated methods result in a single transaction (instead of throwing an exception). The transaction isolation level is determined by the annotation on the outermost (first) method in the call chain.\n\n@stevenschlansker Do you have time to review this before you leave? This is a small PR.\n",
    "head_branch": "jdbi3-transaction-all-the-things",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #411 from jdbi/jdbi3-transaction-all-the-things\n\n@Transaction ALL THE THINGS"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234828dde8ed798d2eda54",
    "number": 410,
    "body": "",
    "head_branch": "jdbi3-string-template-doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #410 from jdbi/jdbi3-string-template-doc\n\nInclude jdbi3-string-template in generated javadoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234829dde8ed798d2eda55",
    "number": 409,
    "body": "Packages renamed:\n- `org.jdbi.v3` to `org.jdbi.v3.core` in `jdbi3` artifact\n- `org.jdbi.v3.pg` to `org.jdbi.v3.postgres` in `jdbi3-postgres` artifact\n- `org.jdbi.v3.unstable` to `org.jdbi.v3.sqlobject.unstable` in `jdbi3-sqlobject` artifact\n",
    "head_branch": "jdbi3-core",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #409 from jdbi/jdbi3-core\n\nRename packages to agree with artifact names"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623482adde8ed798d2eda56",
    "number": 406,
    "body": "Fixes #405 \n",
    "head_branch": "out-param-index",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #406 from stevenschlansker/out-param-index\n\n@OutParameter annotation for @SqlCall methods"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623482bdde8ed798d2eda57",
    "number": 401,
    "body": "",
    "head_branch": "jdbi3-postgres-jsr310",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #401 from jdbi/jdbi3-postgres-jsr310\n\nUse Postgres driver support for JSR-310 types"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623482cdde8ed798d2eda58",
    "number": 397,
    "body": "",
    "head_branch": "pom-clean",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #397 from jdbi/pom-clean\n\nStandardize 'jdbi' casing in poms"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623482ddde8ed798d2eda59",
    "number": 396,
    "body": "needed?\n",
    "head_branch": "travis-simplify",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623482edde8ed798d2eda5a",
    "number": 394,
    "body": "They correspondent to the SQL TIME type. `OffsetTime` has a limited usefulness, but it's included for the consistency sake.\n",
    "head_branch": "jsr310-time",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #394 from arteam/jsr310-time\n\nAdd support for JSR-310 time types"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623482fdde8ed798d2eda5b",
    "number": 393,
    "body": "This PR attempts to fix issues with converting arrays between an application and a PostgreSQL JDBC driver. \n- Arrays are covariant, so we can't convert `int[]` to `Object[]` by casting. We should do conversion manually using `java.reflect.Array` which allows to work with arrays of any type.\n- We should support boxing arrays as well as the primitive ones.\n\nUnfortunately, it seems not possible to convert between arrays and lists, because JDBI considers lists as containers. I remember, we could tweak such behavior in JDBI2 by using  the `@SingleValueResult`\nannotations, but it's gone in JDBI3.\n",
    "head_branch": "pg_arrays",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #393 from arteam/pg_arrays\n\nAdd support for Postgres arrays"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234830dde8ed798d2eda5c",
    "number": 392,
    "body": "Toolchains are useful when we compile against different JDKs or want to use a\nspecific old JDK. Since we target JDK8 in JDBI3, there is no big benefit in\nusing toolchains. In most development installations JDK8 is default and usually\nalready set in the PATH environment variable, so Maven can find it without\nspecific assistance. We only need to set-up source and target for the Java\ncompiler.\n\nAlso, avoiding using toolchains simplifies the process of contributing to JDBI,\nbecause developers don't need to add specific steps to configure the development\nenvironment and can build the project with `mvn clean install`.\n",
    "head_branch": "no_toolchains",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #392 from arteam/no_toolchains\n\nRemove Maven Toolchains"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234831dde8ed798d2eda5d",
    "number": 391,
    "body": "This PR extracts the statement locator concept out of the fluent API. Going forward the fluent API will accept only SQL.\n\n`SqlLocator` and `ClasspathSqlLocator` will live in core, but only as a convenience class for looking up SQL imperatively:\n\n```\nhandle.createQuery(ClasspathSqlLocator.findSqlOnClasspath(MyDao.class, \"findById\"))\n      .bind(\"id\", id)\n      .mapTo(Foo.class)\n      .findOnly();\n```\n\nA new artifact, `jdbi3-string-template` will host `StringTemplateSqlLocator` and the `@UseStringTemplateSqlLocator` annotation, separating out the dependency on StringTemplate.\n\nThe `SqlObject` config class will get a new `SqlLocator` configuration property, where the default locator (`AnnotationSqlLocator`, which will also live in `sqlobject`) returns the SQL in the annotation itself:\n\n```\nclass MyDao {\n  @SqlQuery(\"select * from foo where id = :id\")\n  Foo findById(long id);\n}\n```\n\nIf users want to use a different locator, they can either configure it application-wide:\n\n```\ndbi.configure(SqlObject.class, config -> {\n  config.setSqlLocator(new ClasspathSqlLocator());\n});\n\nclass MyDao {\n  Foo findById(long id);\n}\n```\n\n..or on a case-by-case basis with class or method annotations:\n\n```\n@UseClasspathSqlLocator\nclass MyDao {\n  Foo findById(long id);\n}\n```\n\nTo do:\n- [x] Introduce `locator` subpackage in core\n  - [x] Add `ClasspathSqlLocator` class\n- [x] sqlobject:\n  - [x] `SqlLocator` interface will have two arguments: extension class, and extension method.\n  - [x] Add `AnnotationSqlLocator` implementation in `sqlobject`, which returns the value in the method's `@Sql*` annotation.\n  - [x] Add a `SqlLocator` property to `SqlObject` config class, with `AnnotationSqlLocator` as the default.\n  - [x] Introduce `@SqlObjectConfiguringAnnotation` meta-annotation, where `value()` is a class that implements `SqlObjectConfigurerFactory`, which in turn creates `SqlObjectConfigurer` instances. These configurers will be applied before creating the statement (or resolving the SQL).\n  - [x] Add `@UseClasspathSqlLocator` annotation and factory.\n- [x] Introduce `jdbi3-stringtemplate` artifact\n  - [x] `StringTemplateSqlLocator` implementation\n  - [x] `@UseStringTemplateSqlLocator` implementation\n- [x] sqlobject: Resolve the SQL through the configured `SqlLocator` instead of directly from the annotation.\n- [x] Identify all existing `StatementLocator` tests, and migrate them to use the corresponding `SqlLocator` APIs.\n- [x] Remove `StatementLocator` and all implementations, and amend all classes that use them.\n- [x] Rename `SqlObject` to `SqlObjectConfig`? The shorter name seems nice but it's a bit of a misnomer.\n",
    "head_branch": "jdbi3-sql-locator",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #391 from jdbi/jdbi3-sql-locator\n\nMove StatementLocators out of fluent API"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234833dde8ed798d2eda5e",
    "number": 390,
    "body": "",
    "head_branch": "selftype-warn",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #390 from jdbi/selftype-warn\n\nSqlStatement: Remove a bunch of warning suppression by doing it once in the constructor"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234834dde8ed798d2eda5f",
    "number": 389,
    "body": "",
    "head_branch": "de-tweakify",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #389 from jdbi/de-tweakify\n\nNuke tweak subpackage"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234835dde8ed798d2eda60",
    "number": 388,
    "body": "(requires #387)\n",
    "head_branch": "argument-reorg",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update ObjectArgumentFactory to not infer Types.NULL\nand instead just not pass a type"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234836dde8ed798d2eda61",
    "number": 387,
    "body": "InferredMapperFactory -> InferredRowMapperFactory\nMove RegisteredRowMapper to a lambda on SqlStatement\n\n(requires #385)\n",
    "head_branch": "mapper-reorg",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Javadoc for inferred factories"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234837dde8ed798d2eda62",
    "number": 386,
    "body": "",
    "head_branch": "cleanable-closeable",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Simplify Cleanable by extending AutoCloseable, lambdafy"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234838dde8ed798d2eda63",
    "number": 385,
    "body": "We never really had any implementations of `Handle` other than `BasicHandle` so we can reduce our code by just removing it.\n",
    "head_branch": "handle-merge",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use Objects.requireNonNull"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234839dde8ed798d2eda64",
    "number": 384,
    "body": "",
    "head_branch": "merge-work",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #384 from jdbi/merge-work\n\nMerge master into jdbi3"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623483adde8ed798d2eda65",
    "number": 383,
    "body": "fixes #371\n",
    "head_branch": "warning-patrol",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #383 from jdbi/warning-patrol\n\nWarning Patrol"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623483bdde8ed798d2eda66",
    "number": 382,
    "body": "",
    "head_branch": "txn-doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "First pass at transaction documentation"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623483cdde8ed798d2eda67",
    "number": 378,
    "body": "Haven't been able to reproduce test hang yet with the latest plugin versions, maybe it's fixed?  _hopes_\n",
    "head_branch": "latest-basepom",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #378 from jdbi/latest-basepom\n\nLatest basepom, version management"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623483ddde8ed798d2eda68",
    "number": 377,
    "body": "Resolves #361 \n",
    "head_branch": "jdbi3-remove-override-statement-locator-with-annotation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623483edde8ed798d2eda69",
    "number": 376,
    "body": "…nto its own package in core.\n",
    "head_branch": "jdbi3-refactor-rewrite-defines",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623483fdde8ed798d2eda6a",
    "number": 368,
    "body": "undoes #332 \n",
    "head_branch": "forkforkfork",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234840dde8ed798d2eda6b",
    "number": 367,
    "body": "depends on #364 #365 #366 to avoid merge conflicts\n",
    "head_branch": "jdbiexception",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234841dde8ed798d2eda6c",
    "number": 366,
    "body": "(depends on #364 and #365 to avoid merge conflicts)\n",
    "head_branch": "sql-case",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #366 from jdbi/sql-case\n\nSQLStatement -> SqlStatement"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234842dde8ed798d2eda6d",
    "number": 365,
    "body": "(depends on #364 so as to avoid merge conflicts)\n",
    "head_branch": "fix-doc-indentation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #365 from jdbi/fix-doc-indentation\n\nFix five minute doc indentation"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234843dde8ed798d2eda6e",
    "number": 364,
    "body": "part of #353 \n",
    "head_branch": "dbi-to-jdbi",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #364 from jdbi/dbi-to-jdbi\n\nDBI -> Jdbi"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234844dde8ed798d2eda6f",
    "number": 363,
    "body": "(build will fail until #362 is merged)\n",
    "head_branch": "argument-docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix indentation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234845dde8ed798d2eda70",
    "number": 362,
    "body": "",
    "head_branch": "results-docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #362 from jdbi/results-docs\n\nFirst pass at result mapping documentation"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234846dde8ed798d2eda71",
    "number": 359,
    "body": "To Do\n- [x] Fix core javadoc\n- [x] Fix guava javadoc\n- [x] Fix jodatime javadoc\n- [x] Fix JPA javadoc\n- [x] Fix spring javadoc\n- [x] Fix sqlobject javadoc\n- [x] Include and link to javadoc in doc site build\n",
    "head_branch": "jdbi3-doc-javadoc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #359 from jdbi/jdbi3-doc-javadoc\n\nGenerate API javadocs as part of build"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234847dde8ed798d2eda72",
    "number": 358,
    "body": "",
    "head_branch": "jdbi3-doc-5-minute-tour",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #358 from jdbi/jdbi3-doc-5-minute-tour\n\nAdd 5-minute tour doc"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234848dde8ed798d2eda73",
    "number": 356,
    "body": "feel free to claim a page or make your own, if you have time.\n",
    "head_branch": "jdbi3-doc-example",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #356 from jdbi/jdbi3-doc-example\n\njdbi3 doc outline and example test"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234849dde8ed798d2eda74",
    "number": 355,
    "body": "# Work in progress\n\nTo do:\n- [x] Add support to `ColonPrefixNamedParamStatementRewriter`\n  - [x] Don't substitute `<foo>` expressions inside single or double-quotes\n- [x] Add support to `HashPrefixStatementRewriter`\n- [x] Extract tests which expect `StringTemplate3StatementLocator` to do interpolation, out into separate test classes which test the interpolation behavior out-of-the-box.\n- [x] Stop using `AngleBracketTemplateLexer` in `StringTemplate3StatementLocator`.\n",
    "head_branch": "jdbi3-interpolate-defines",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #355 from jdbi/jdbi3-interpolate-defines\n\nSupport <define> query interpolation in built-in statement rewriters."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623484adde8ed798d2eda75",
    "number": 354,
    "body": "Fixes #340 hopefully, @AlasdairBruce can you confirm?\n",
    "head_branch": "cglib-bump",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #354 from stevenschlansker/cglib-bump\n\ncglib 3.2.2, asm 5.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623484bdde8ed798d2eda76",
    "number": 349,
    "body": "also includes a `@DbName` annotation for customizing parameter and accessor names.  There are some bindings in SQLObject already but none in core...\n",
    "head_branch": "immutable-bean-mapper",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #349 from jdbi/immutable-bean-mapper\n\nIntroduce a ConstructorMapper, a row mapper for \"immutable bean\" objects"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623484cdde8ed798d2eda77",
    "number": 348,
    "body": "",
    "head_branch": "immutable-bean-mapper",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623484ddde8ed798d2eda78",
    "number": 347,
    "body": "replaces #346 \n",
    "head_branch": "jdbi3-params-parameters-tomato-tomahto",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #347 from jdbi/jdbi3-params-parameters-tomato-tomahto\n\nSQLStatement: getParams and getParameters are redundant"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623484edde8ed798d2eda79",
    "number": 346,
    "body": "",
    "head_branch": "jdbi3-params-parameters-tomato-tomahto",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623484fdde8ed798d2eda7a",
    "number": 345,
    "body": "Frustrating.\n\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id=492939\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id=493022\n",
    "head_branch": "jdbi3-eclipse-inference",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #345 from stevenschlansker/jdbi3-eclipse-inference\n\nWork around Eclipse compiler bugs due to type inference"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234850dde8ed798d2eda7b",
    "number": 343,
    "body": "Remove unused test resources files.\nMoved some test resources from core to sqlobject where they belong.\n",
    "head_branch": "jdbi3-cleanup-test-resources",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #343 from jdbi/jdbi3-cleanup-test-resources\n\nCleanup test resources"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234851dde8ed798d2eda7c",
    "number": 342,
    "body": "fixes #221\n",
    "head_branch": "jdbi3-pg",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234852dde8ed798d2eda7d",
    "number": 337,
    "body": "To Do\n- [x] Extract common fields in DBI, Handle, SQLStatement, and StatementContext into JdbiConfig class.\n- [x] Coalesce StatementContext and ConcreteStatementContext into a single, final class.\n- ~~Remove `StatementContext.sqlObjectType`, used by `ClasspathStatementLocator`. Maybe replace this with some string token. #192 seems to have been exploring this area.~~ Deferring this for statement locator refactor discussed in #192\n- [x] Remove`StatementContext.sqlObjectMethod`, used by FigureItOutRowMapper.\n",
    "head_branch": "jdbi3-refactor-registries",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #337 from jdbi/jdbi3-refactor-registries\n\nRefactor JdbiConfig from common fields of DBI, Handle, SQLStatement, StatementContext"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234853dde8ed798d2eda7e",
    "number": 335,
    "body": "",
    "head_branch": "spring-plugin-wire",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Spring -- remove unneeded ConnectionFactory, autoinstall plugins (#335)\n\n* DBI.create arg now can be lambdafieid\r\n\r\n* Spring -- if you bind JdbiPlugins, attach them to created DBIs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234854dde8ed798d2eda7f",
    "number": 332,
    "body": "The default maven-surefire-plugin `forkCount` configuration from basepom-oss is `1.0C` meaning 1 VM forked per CPU core. Build logs suggest Travis build environments provide 8 cores.\n\nThis is often a problem for our Postgres tests since they are actively creating / modifying the same table in the database. I suspect this also explains why our builds time out at the end of the test run so often.\n",
    "head_branch": "hey-surefire-fork-this",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #332 from jdbi/hey-surefire-fork-this\n\nConfigure maven-surefire-plugin forkCount to 1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234855dde8ed798d2eda80",
    "number": 331,
    "body": "",
    "head_branch": "jdbi3-jodatime",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #331 from jdbi/jdbi3-jodatime\n\nAdd jdbi3-jodatime artifact, with initial support for DateTime"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234856dde8ed798d2eda81",
    "number": 330,
    "body": "Stumbled upon this while I was reading the code.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #330 from orsenthil/patch-1\n\n[minor] - Typo in the docstring"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234857dde8ed798d2eda82",
    "number": 329,
    "body": "",
    "head_branch": "jdbi3-jsr310",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add built-in arguments and column mappers for JSR-310 types (#329)\n\nAdd built-in arguments and colummn mappers for JSR-310 types: Instant, LocalDate, LocalDateTime, OffsetDateTime, and ZonedDateTime"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234858dde8ed798d2eda83",
    "number": 328,
    "body": null,
    "head_branch": "uri-argument",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add support for URI arguments to builtin argument factory (#328)\n\n* Add support for URI arguments to builtin argument factory\r\n\r\n* Add a test for URI arguments\r\n\r\n* Warning Patrol"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234859dde8ed798d2eda84",
    "number": 327,
    "body": "Resolves issues #222, #258 \n\nTo Do\n- [x] Use the new `StatementContext.elementTypeFor` method to help integrate third-party collectors without need for `@SingleValueResult`. ~~This might even let us coalesce all the `ReturnResultThing` subclasses into a single implementation.~~\n- [x] Give Binder.bind a `parameterIndex` parameter to support bare `@Bind` annotations\n- [x] Bonus! Support returning `java.util.Optional` from SQL object methods\n- [x] Should add tests for new `Types.resolveType` method\n- [x] Throw exception on multiple elements for Optional builders (java.util and guava)\n- [x] BatchHandler take another look at streams vs nested for loops\n",
    "head_branch": "jdbi3-classmate-to-java-lang-reflect",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Migrate sqlobject from Classpath to Types class (currently backed by Guava TypeToken) (#327)\n\n* Break out CollectorFactory method into accepts, elementTypeFor, and collectorFor so sqlobject can better support custom container types\r\n\r\n* Remove items from \"planned changes\" file which have already been done, or are now moot.\r\n\r\n* Migrate sqlobject from Classpath to (currently) TypeToken-backed Types class.\r\n\r\n* Fix issue #222, using a bare @Bind annotation breaks binding\r\n\r\n* Use StatementContext.elementTypeFor(containerType) to work out the element type in ResultReturnThing. Removes @SingleValueResult annotation since it is no longer needed.\r\n\r\n* Add default java.util.Optional collector factory. Add some tests validating that SQL objects can return optionals.\r\n\r\n* Throw IllegalStateException on multiple elements in Optional collectors\r\n\r\n* Add tests for Types.resolveType(type, contextType)\r\n\r\n* MOAR STREAMS"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623485adde8ed798d2eda85",
    "number": 326,
    "body": "Resets the reused string template before parameter substitution.\n",
    "head_branch": "314-st3-locator-cache",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623485bdde8ed798d2eda86",
    "number": 325,
    "body": "Add docs, rename waffle(), demonstrate use in documentation test\n",
    "head_branch": "expose-foreman",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #325 from jdbi/expose-foreman\n\nExpose Foreman on StatementContext in JDBI 2.X"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623485ddde8ed798d2eda87",
    "number": 323,
    "body": "Fixes #321\n",
    "head_branch": "jdbi3-rowmapper",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #323 from jdbi/jdbi3-rowmapper\n\nRename ResultSetMapper to RowMapper, ResultColumnMapper to ColumnMapper"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623485edde8ed798d2eda88",
    "number": 322,
    "body": "Purports to fix #310.  Someday.  Maybe.\n\nQuick test:\n`jdbi3/docs$   mvn deploy -Dmaven.deploy.skip=true -Ppublish-docs`\n",
    "head_branch": "jdbi3-asciidoc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "first pass at jdbi3-asciidoc (#322)\n\n* WIP: first pass at jdbi3-asciidoc\r\n\r\n* Documentation generation really works better if you put stuff in src/\r\n\r\n* Add script to help publish docs (outside of normal release)\r\n\r\n* Just define the maven.deploy.skip property in pom"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623485fdde8ed798d2eda89",
    "number": 320,
    "body": "tag @devrandom\n",
    "head_branch": "314-st3-locator-cache",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #320 from jdbi/314-st3-locator-cache\n\nFix #314: @UseStringTemplate3Locator creates a new locator for every invocation"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234860dde8ed798d2eda8a",
    "number": 319,
    "body": "tag @f-aubert\n",
    "head_branch": "297-clear-params",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix #297: allow clearing of bindings in SQLStatement (#319)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234861dde8ed798d2eda8b",
    "number": 318,
    "body": "",
    "head_branch": "params-parameters-tomato-tomahto",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Cleanup: SQLStatement has redundant getParams / getParameters (#318)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234862dde8ed798d2eda8c",
    "number": 317,
    "body": "heads up @jeetah\n",
    "head_branch": "265-generated-key-objects",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #317 from stevenschlansker/265-generated-key-objects\n\nFix #265: non-numeric return types when combining @SqlUpdate with @GetGeneratedKeys"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234863dde8ed798d2eda8d",
    "number": 316,
    "body": "heads up @orangecoding\n",
    "head_branch": "281-postgres-double-colon",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234864dde8ed798d2eda8e",
    "number": 315,
    "body": "tag @vvavrychuk \n",
    "head_branch": "313-batch-endless-iterator",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #315 from stevenschlansker/313-batch-endless-iterator\n\nFix issue #313: @SqlBatch without Iterable runs forever"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234865dde8ed798d2eda8f",
    "number": 312,
    "body": "Addresses issue #290 \n\nTo do:\n- [x] ~~Remove `Transaction` callback interface in favor of `TransactionCallback`~~ Rename it to `TransactionalCallback` and move it to sqlobject where it belongs\n- [x] Add `TransactionalConsumer` and friend `Transactional.useTransaction(TransactionalConsumer)`\n- ~~See if `TransactionFailedException` can be removed~~ nah\n",
    "head_branch": "jdbi3-exception-transparency",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #312 from jdbi/jdbi3-exception-transparency\n\nException transparency in handler/callback interfaces"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234866dde8ed798d2eda90",
    "number": 311,
    "body": "Added MaxRowCountConstraint annotation to control SqlQuery result max size. \nissue #216 \n",
    "head_branch": "issue-216",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234867dde8ed798d2eda91",
    "number": 304,
    "body": "## API changes\n- Added `ExtensionFactory`, `ExtensionConfig`, `ExtensionCallback`, `ExtensionConsumer` interfaces\n- `DBI` method `open(Class)` replaced with `withExtension(Class, ExtensionCallback)` and `useExtension(Class, ExtensionConsumer)`\n- Added `DBI` methods `registerCollectorFactory(CollectorFactory)`,  `registerExtensionFactory(ExtensionFactory)`, and `configureExtension(Class<C>, Consumer<C>)`.\n- `DBI.onDemand` restrictions: only public interface types are supported for now--allows us to use proxies without bringing in third party dependencies. The handle from an on-demand extension method call is _always_ closed as the method returns, which means that SQL object methods that return iterables, streams, or other SQL objects (`@CreateSqlObject`) will throw an error when you try to access the returned value, as the handle is closed. (See #271)\n- Added method `JdbiPlugin.customizeDbi(DBI)` method. This was necessary so that extensions get installed on the DBI, making those extensions available for use with `DBI.onDemand(Class)`.\n- Added `Handle` methods `registerExtension(ExtensionFactory)` and `configureExtension(Class, Consumer)`.\n- Interface `CloseMe` removed. Extensions (including SQL objects) are no longer `AutoCloseable`. Users manage the handle resource explicitly and attach extensions to them, or use callback methods like `withExtension` to have the handle managed for them.\n\n(Comprises #295, #271)\n\nTo do:\n- [x] Finish generic `onDemand` implementation in core\n  - [x] Lazy init handle so `onDemand` extensions only create handle when they need to (`equals`, `hashCode`, `toString` being counterexamples).\n  - [x] Redirect tests to `DBI.onDemand`\n  - [x] Revise tests that assume `onDemand` extensions can provide streams or fluent iterators, to expect the opposite now.\n- [x] Replace `HandleDing` with `Supplier<Handle>`, and stop doing handle retain/release in sqlobject.\n- [x] Move static configuration in SqlObjectBuilder into config class\n- ~~Get rid of CallbackFailedException in favor of exception transparency in callback interfaces, while I'm thinking about it~~ Oh hell no\n- [x] Remove method handlers for `AutoCloseable` and friends.\n- [x] Remove CloseHandler\n- [x] GetHandle's `useHandle` and `withHandle` could be default methods, and could remove cglib handlers `UseHandleHandler` and `WithHandleHandler`\n",
    "head_branch": "jdbi3-extensions",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #304 from jdbi/jdbi3-extensions\n\nJDBI 3 Extensions"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234868dde8ed798d2eda92",
    "number": 303,
    "body": "",
    "head_branch": "jdbi3-emoji-statement-rewriter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234869dde8ed798d2eda93",
    "number": 293,
    "body": "The JDBI3 version of: https://github.com/jdbi/jdbi/pull/292\n",
    "head_branch": "jdbi3-binder-registry",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623486adde8ed798d2eda94",
    "number": 292,
    "body": "Add a chain of parameter binder factories that can provide binders, defaulting to PositionalBinder when all else fails\n\nWhen annotations do not provide binders, use a chain of parameter binding factories to find a binder, falling back to the default PositionalBinder when nothing else accepts or provides a non-null binder.\n\nThis is required for Kotlin support, since it needs to register a binder.\n",
    "head_branch": "master-binder-registry",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623486bdde8ed798d2eda95",
    "number": 291,
    "body": "When annotations do not provide binders, use a chain of parameter binding factories to find a binder, falling back to the default PositionalBinder when nothing else accepts or provides a non-null binder.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623486cdde8ed798d2eda96",
    "number": 287,
    "body": "",
    "head_branch": "pg-test-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7de39bac2d377668bcd481f53455a66130fa736d into 5c3bc955c10e7b77f4b1c325f781487f27a589e4"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623486ddde8ed798d2eda97",
    "number": 286,
    "body": "reversed expected vs. actual parameters for JUnit assertions\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623486edde8ed798d2eda98",
    "number": 285,
    "body": "",
    "head_branch": "builtin-mapper-factory",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623486fdde8ed798d2eda99",
    "number": 284,
    "body": "followup to #283 \n",
    "head_branch": "local-txn-rollback-cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #284 from stevenschlansker/local-txn-rollback-cleanup\n\nLocalTransactionHandler: cleanup exception suppression for jdbi3"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234870dde8ed798d2eda9a",
    "number": 283,
    "body": "since we are in Java 6 land.\n",
    "head_branch": "transaction-rollback-exception-swallow",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f37e8d39a7537cfbc98da5812b619701d6108d92 into a2a0382f50c53d852183e759511334086568341f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234871dde8ed798d2eda9b",
    "number": 279,
    "body": "Addresses #277\n",
    "head_branch": "remove-object-argument",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234872dde8ed798d2eda9c",
    "number": 276,
    "body": "PR for #263\n",
    "head_branch": "misc-cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7c16e29019d3f3b09f5c81bca21320070433cce3 into c61bcf03008d6d9bfeab363868c1e76e913f6431"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234873dde8ed798d2eda9d",
    "number": 275,
    "body": "",
    "head_branch": "query-stream-callbacks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234874dde8ed798d2eda9e",
    "number": 274,
    "body": "…ces for query streams.\n",
    "head_branch": "stream-try-with-resources",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234875dde8ed798d2eda9f",
    "number": 273,
    "body": "Adds a wrapper around streams returned from ResultBearing.stream() which automatically closes a stream before returning from any call a terminal operation.\n\nAlso documents requirement to explicitly close query streams. \n",
    "head_branch": "self-closing-streams",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234876dde8ed798d2edaa0",
    "number": 270,
    "body": "Spring 2.x is a rather outdated version of the framework and not supported anymore. This change upgrades the Spring dependency to the latest version 4.2.4.RELEASE.\n\nThis allows to take advantage from modern Spring features like annotation processing and the Spring JUnit test runner.\n",
    "head_branch": "upgrade_spring",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e81bbe0f33c787365e602da3ebd0bf494e4b636a into 9f5749e25a9cec5422e89a07cb53df022a993c23"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234877dde8ed798d2edaa1",
    "number": 269,
    "body": "Spring 2.x is a rather outdated version of the framework and not supported anymore. This change upgrades the Spring dependency to the latest version 4.2.4.RELEASE.\n\nThis allows to take advantage from modern Spring features like annotation processing and the Spring JUnit test runner.\n",
    "head_branch": "upgrade_spring",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234878dde8ed798d2edaa2",
    "number": 268,
    "body": "",
    "head_branch": "guava-options-support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234879dde8ed798d2edaa3",
    "number": 262,
    "body": "",
    "head_branch": "typo-copypasta",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623487adde8ed798d2edaa4",
    "number": 261,
    "body": "",
    "head_branch": "column-mapper-lambda-friendly",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623487bdde8ed798d2edaa5",
    "number": 259,
    "body": "Work in progress to address #208 \n- [x] Coalesce ArgumentFactory methods and return optional\n- [x] Coalesce ResultSetMapperFactory methods and return optional\n- [x] Coalesce ResultColumnMapperFactory methods and return optional\n- [x] Coalesce CollectorFactory methods and return optional\n- [x] Foreman.waffle returns optional\n- [x] MappingRegistry.columnMapperFor returns optional\n- [x] MappingRegistry.mapperFor returns optional\n- [x] CollectorFactoryRegistry.createCollectorFor returns optional\n- [x] StatementContext.argumentFor return optional\n- [x] StatementContext.columnMapperFor return optional\n- [x] StatementContext.collectorFor return optional\n- [x] Rename Foreman to ArgumentRegistry\n- [x] Methods that return optional should be named with `find` prefix for consistency.\n- [x] NamedArgumentFinder.find return optional\n- [x] Binding.forName/forPosition return optional, rename with `find` prefix\n- [x] Add `@FunctionalInterface` annotation as appropriate\n- [x] Make order of factory precedence consistent between all registries.\n",
    "head_branch": "coalesce-factory-methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623487cdde8ed798d2edaa6",
    "number": 257,
    "body": "Addresses #206\n",
    "head_branch": "migrate-to-mockito",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623487ddde8ed798d2edaa7",
    "number": 255,
    "body": "",
    "head_branch": "sqlobject-stream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623487edde8ed798d2edaa8",
    "number": 254,
    "body": "References to #253.\n\nSometimes it's desirable have ability to explicitly provide the names of the columns, which should returned to the client after a query execution. For example, when a row contains many columns, and many rows are returned in a batch response.\n\nJDBC provides such functionality during preparing a statement by using the form: `Connection.preparedStatement(String query, String[] columnNames)`.\n\nIf a JDBC driver supports it, it will return only specified columns in a response. For example, the official PostgreSQL driver adds a `RETURNING` clause with a list of the specified columns to a query.\n\nSee this [SO discusstion](http://stackoverflow.com/questions/34560647/pg-jdbc-appends-returning-on-prepared-batch-wtih-existing-returning-clause).\n",
    "head_branch": "prepared_batch_column_names",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623487fdde8ed798d2edaa9",
    "number": 252,
    "body": "seems to cut time of the `install` phase on Travis in half (67 -> 33 seconds) although that's a point measurement, not scientific.  saves bandwidth either way.\n",
    "head_branch": "travis-cache",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234880dde8ed798d2edaaa",
    "number": 251,
    "body": "keeps the build system the same on `master` vs `jdbi3` and perhaps is a bit of future-proofing against the inevitable JDK9.\n",
    "head_branch": "jdk8-toolchain",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 395d5c10a4adcaba52027109e19001dbdf1269d8 into e7c85586b810a7d00231764c7faa73d2c58c569f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234881dde8ed798d2edaab",
    "number": 250,
    "body": "removes a ton of public API surface, at the cost of slightly\nmore complicated tests (which are arguably better, since they actually\ntest the behavior, rather than just checking the class of an Argument subtype)\n",
    "head_branch": "builtin-simplify",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 97b376fdda2edaa516d2bbfc2ab62d833b526c30 into e0312e475712da6e554df82fbd85e9ff478e4626"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234882dde8ed798d2edaac",
    "number": 249,
    "body": "",
    "head_branch": "double-bind-works",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d6a1249ce60393e0a9bc9978983b64513079ce75 into 5ac410f90ab18722b25fff887b7c4e3422fe226d"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234883dde8ed798d2edaad",
    "number": 247,
    "body": "",
    "head_branch": "squash-checkstyle-warnings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234884dde8ed798d2edaae",
    "number": 246,
    "body": "This allows for the elimination of casting annotations in\nimplementations..\n\nAlso squashed unchecked cast warning in BindMapFactory.\n",
    "head_branch": "convert-binderfactory-to-generic-type",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234885dde8ed798d2edaaf",
    "number": 245,
    "body": "Changes BinderFactory so that it allows the specification of the\nAnnotation type via a type token.\n\nChanges the BindBean annotation such that a type can be provided as an\noverride.  This override will be used instead of the provided\nargument's type for the purpose of binding.  This allows for\nBindBeanFactory to access methods on args that are of types that are\ninaccessible to the SqlObject package.\n\nFixes #242\n",
    "head_branch": "allow-binding-beans-of-types-inaccessible-to-sqlobject-package-option-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234886dde8ed798d2edab0",
    "number": 244,
    "body": "Changes the BinderFactory interface so that the type token of the\nannotated parameter is accepted as a parameter on #build.\n\nChanges BindBeanFactory to get the value of its argument using the\nMethod of the annotated parameter's type instead of the argument's type.\nThis allows for BindBeanFactory to access methods on args that are of\ntypes that are inaccessible to the SqlObject package.  This changes the\nbehavior of the BindBeanFactory to behave in a way that is much more\nconsistent with Java's polymorphic/access mechanism.\n\nUsing BindBean with an iterable of a raw type will result in using\nObject.  This may be considered a limiting factor or a feature.\n\nFixes #242\n",
    "head_branch": "allow-binding-beans-of-types-inaccessible-to-sqlobject-package-option-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234887dde8ed798d2edab1",
    "number": 243,
    "body": "BindBeanFactory will now check the access modifier on arg's method and\nuse #setAccessible to allow it to be accessible from BindBeanFactory\nwhether or not this would typically be allowed via Reflection/ObjectAccess\nrules.\n\nThis will allow for binding a bean, that has a type that is inaccessible\noutside of its package, via one of its supertypes.\n\nAdds test case demonstrating issue.\n\nFixes #242\n",
    "head_branch": "allow-binding-beans-of-types-inaccessible-to-sqlobject-package-option-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234889dde8ed798d2edab2",
    "number": 237,
    "body": "Fixes issue #176\n",
    "head_branch": "feature/uri_and_char_mappers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623488adde8ed798d2edab3",
    "number": 235,
    "body": "## To do\n- [x] Move ArgumentFactory to TypeToken\n- [x] Ditto ResultColumnMapperFactory\n- [x] Ditto ResultSetMapperFactory\n- [x] Ditto CollectorFactory\n  - [x] Change ResultBearing.collectInto(Class<T>) to TypeToken<T>?\n- [x] Keep all the method that take Class<T>, and add a sister method that accepts TypeToken<T>\n  - [x] SQLStatement.dynamicBind\n- [x] Expose argument factory registry (Foreman) through statement context.\n- [x] Enhance existing BinderFactory implementations to take advanced of generic type information.\n- [x] Implement OptionalArgument\n- [x] Confirm ResultReturnThing is getting full generic type information\n- [x] Use Classmate GenericType<T> instead of Guava TypeToken<T>\n## Questions\n- See #258 ~~Change SQLObject from Class<T> to TypeToken<T>? Implies inspecting a possibly generified DAO class and producing methods depending on the nested parameters in the type token.~~\n- ~~Built in row mappers use TypeToken instead of Class? Implies inspecting a possibly generified bean class and projecting that type onto generic members.~~\n## Unrelated todos discovered while working on this--not until after this PR\n- See #259 ~~Rename registry methods `xyzFor` to `findXyzFor` and return an `Optional`~~\n- See #259 ~~StatementContext.columnMapperFor renamed to findColumnMapperFor, returns Optional~~\n- See #259 ~~Collapse factory `accepts` and `build` methods into a single `provide` (or otherwise named) method that returns an `Optional`.~~\n- See #259 ~~Remove generic type parameter from `ArgumentFactory`?~~\n- [x] ~~Remove generic type parameter from `CollectorFactory`?~~\n- [x] ~~Remove ResultBearing.collectInto(Class)--it's broken~~\n  - ~~We could possibly do collectInto(TypeToken<T>), but CollectorFactory would have to be verify the element type agrees with the collector result type.~~\n- [x] ~~BuiltInArgumentFactory enum encoding should use `Enum::name`~~\n- See #259 ~~Rename built in column mappers to exclude `Column` from name--it's redundant~~\n- See #263 ~~Do we need all those SQLStatement.bind(int|String, SpecificType) methods? Seems like a design smell to have these for every built in type, but users are on their own for custom types?~~\n- See #263 ~~Eradicate `foo != null ? foo.something() : somethingElse`~~\n- See #263 ~~Likewise for `if (!x) { foo(); } else { bar(); }`~~\n- See #263 ~~`dynamicBind` should just overload `bind` and put the argument type last, effectively as an optional parameter~~\n- See #263 ~~Should we get rid of ObjectArgument? SQLStatement.bind(int|String, Object)? Or maybe require users to call overloaded method with type parameter if the argument might be null~~\n  - ~~If so, should also get rid of Foreman.waffle fallback to argument of type Object. An argument factory should be provided.~~\n- See #263 ~~SqlObjectBuilderBridge: Should this be a ServiceLoader SPI instead of using reflection?~~\n- See #263 ~~SqlStatementCustomizingAnnotation should be annotated `@Target(ElementType.ANNOTATION_TYPE)`~~\n- See #263 ~~`@MapResultAsBean` is equivalent to `@RegisterMapperFactory(BeanMapperFactory.class)`. Do we need both?~~\n- See #263 ~~`@Mapper` should be a SqlStatementCustomizingAnnotation instead of magic.~~\n- ~~Should EnumColumnMapper be exploded into EnumByNameColumnMapper and EnumByOrdinalColumnMapper?~~ No, the factories are sufficient for declarative usage\n- ~~`parameter` vs `paramater`~~\n- See #263 ~~Binder.bind needs a resolved parameter type argument to address #242~~\n",
    "head_branch": "jdbi3-type-tokens",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623488bdde8ed798d2edab4",
    "number": 234,
    "body": "Necessary method is dynamically detected at runtime to support JDK6/7.\n\nThis is a backport of #190 from JDBI3.\n",
    "head_branch": "jdk8-defaultinterface",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623488cdde8ed798d2edab5",
    "number": 233,
    "body": "…type for @SqlBatch\n\nPretty much a copy-paste job based on Matteo Barbieri's work on compile-time errors for bad SqlUpdate return types.\n",
    "head_branch": "feature/wrong_batch_return_type",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623488ddde8ed798d2edab6",
    "number": 232,
    "body": "",
    "head_branch": "ggk-throw-leak-v3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623488edde8ed798d2edab7",
    "number": 231,
    "body": "Fixes #230 \nthe fix is not great... but can be fixed better for JDBI3!\n",
    "head_branch": "ggk-throw-leak",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623488fdde8ed798d2edab8",
    "number": 229,
    "body": "",
    "head_branch": "base64",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234890dde8ed798d2edab9",
    "number": 228,
    "body": "",
    "head_branch": "remove-redundant-customizers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 37051c55bf1b492e0ad7d9678ecc70a841c2a2c1 into 35f94e036bdbe646e62568a1a2bdf91d0d289af6"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234891dde8ed798d2edaba",
    "number": 227,
    "body": "The innerExecute leaves the Statement open anyway, so using callback\nstyle just adds verbosity, two interfaces, and no gain.\n",
    "head_branch": "goodbye-mungers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234892dde8ed798d2edabb",
    "number": 226,
    "body": "Improves generics.  Fixes #205\nWIP\n",
    "head_branch": "type-rework",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234893dde8ed798d2edabc",
    "number": 225,
    "body": "Fixes #72 \n@cemo does this do what you want?\n\nEDIT: ok this one needs to go on hold, it needs to consider what happens if we don't want bean mapping.  And reading into the code a bit, I think it'll require some refactoring of Query.\n",
    "head_branch": "polymorphic-sqlobject-method",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #225 from stevenschlansker/polymorphic-sqlobject-method\n\nImplement polymorphic return types for SqlObject methods"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234894dde8ed798d2edabd",
    "number": 224,
    "body": "@brianm do you remember why this was done this way?  Seems overly complicated\n",
    "head_branch": "bind-boolean",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234895dde8ed798d2edabe",
    "number": 223,
    "body": "",
    "head_branch": "plugin-customizers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2599b2e515f44b20821cb71cfa47c0bf458307de into 4c5e08f5f89a812791671e4d249dea9551d235b9"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234896dde8ed798d2edabf",
    "number": 222,
    "body": "",
    "head_branch": "bind-default-breaks-compat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234897dde8ed798d2edac0",
    "number": 220,
    "body": "Supports `@Entity`, `@MappedSuperclass`, `@Column`, and `@Transient` annotations.\n\nCopied [with permission](https://github.com/shakiba/jdbi-annotation/issues/3) from shakiba/jdbi-annotation, which is already licensed under Apache 2.0.\n",
    "head_branch": "jdbi3-jpa",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234898dde8ed798d2edac1",
    "number": 219,
    "body": "Note that this breaks SqlObjects that have a close() method that do not implement AutoCloseable\nor subinterfaces, but I think that's okay.  There's no downside to pulling in the interfaces.\n",
    "head_branch": "goodbye-close-internal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c96c1ad77dba980c425229d693773e9f5f3cfe5d into fc03e8046cb0ca26ded8d418be0c75ec22e817de"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623489adde8ed798d2edac2",
    "number": 218,
    "body": "",
    "head_branch": "sql-batch-hang",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623489bdde8ed798d2edac3",
    "number": 217,
    "body": "hi @qualidafial @brianm @arteam I am thinking about how we might make it easy to extend jdbi with a plugin like system.  Already, we have some obvious use cases -- Guava support without linking directly against Guava, SQLObject hooking into core, etc.\n\nI have made a test branch here which adds support for automatic discovery of `JdbiPlugin`s via the classpath by a `ServiceLoader`.  This is little more than an idea at this point, but there are two in-tree use cases that are already interesting --\n- Guava plugin can register itself with all DBI instances just by being present on classpath\n- `HandleTrackerDBI` used in a test case can be a composable plugin, rather than needing to subclass `DBI`\n\nWhat do you guys think of going down this direction?  I think it would be entirely optional, and the automatic registration should be used only for plugins which are transparent if not used.  For example adding support for custom types (Guava, joda-time) is OK as an automatic plugin, but replacing default transaction semantics would not be.\n\nThe diff is cluttered a bit because I converted DBI constructors to factory methods.  I'll try to annotate the interesting bits.\n",
    "head_branch": "dbi-factory",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623489cdde8ed798d2edac4",
    "number": 215,
    "body": "In JDBI 2 there is the possibilty to create proxies for SqlObject interfaces via the `DBI` and `Handle` class instances. Actually, it's very convienent and even JDBI official docs mentions this as the standard way for using the SqlObject API.\n\nThis API was removed in JDBI 3, because the JDBI core and the SQLObject API are now in different modules.\n\nThis commit adds a bridge from the JDBI core to the SQLObject API. It uses method handles to dynamically call the methods of the `SqlObjectBuilder` class. It changes some tests to show that the bridge to `SqlObjectBuilder` in the JDBI core actually works.\n\nAlso it fixes a broken link in the `SqlObjectBuilder` javadoc.\n",
    "head_branch": "sql_object_bridge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 695ff6b6d26f8b4e626e36994712c7bfd2d1a0b3 into eb196d9a4621afbf147b22818ca3fc61bcf24022"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623489ddde8ed798d2edac5",
    "number": 214,
    "body": "Fixes #203 \ntag @arteam your collector factory work is already paying off! :smile: \n",
    "head_branch": "guava",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623489edde8ed798d2edac6",
    "number": 212,
    "body": "Lets our two different bean mappers use the same underlying code to figure out SQL name <-> Java name mappings, and makes it pluggable without needing to subclass.\n\nProbably best viewed with `?w=1`\n",
    "head_branch": "property-naming-strategy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623489fdde8ed798d2edac7",
    "number": 210,
    "body": "",
    "head_branch": "copyright_cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348a0dde8ed798d2edac8",
    "number": 209,
    "body": "requires basepom/basepom#20\n",
    "head_branch": "modernizer-plugin",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348a1dde8ed798d2edac9",
    "number": 201,
    "body": "Note: This is a rebase on the JDBI 3 branch from this PR: https://github.com/jdbi/jdbi/pull/200\n\nHi,\n\nThis PR is about extending the Bean Mapper to allow automatic mappings from column names using the (very common) \"underscore\" syntax. Such functionality is also supported out-of-the-box in the BeanPropertyRowMapper (http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/BeanPropertyRowMapper.html) from Spring.\n\nIn addition, it allows to further customize the mappings with two additional protected methods (one to get the mappings related to a given property name, and another to customize the locale used for case manipulation).\n\nThis could be considered a breaking change, since setters that were not mapped before may suddenly start to be invoked. However, the potential disruptive effect seems to be low.\n\nJean\n",
    "head_branch": "bean_mapper_ext_jdbi3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348a2dde8ed798d2edaca",
    "number": 200,
    "body": "Hi,\n\nThis PR is about extending the Bean Mapper to allow automatic mappings from column names using the (very common) \"underscore\" syntax. Such functionality is also supported out-of-the-box in the BeanPropertyRowMapper (http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/BeanPropertyRowMapper.html) from Spring.\n\nIn addition, it allows to further customize the mappings with two additional protected methods (one to get the mappings related to a given property name, and another to customize the locale used for case manipulation).\n\nThis could be considered a breaking change, since setters that were not mapped before may suddenly start to be invoked. However, the potential disruptive effect seems to be low.\n\nJean\n",
    "head_branch": "bean_mapper_ext",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348a3dde8ed798d2edacb",
    "number": 199,
    "body": "Container builders are actually quite useful for collecting query results into types that are not shipped with the JDK.  For example, Google Guava's immutable collections and optional values.\n\nAlso, they are indispensable for SQLObject API, where we don't have Stream API for providing implementations of custom types.\n",
    "head_branch": "ressurect_container_builder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a6d0e5360d448456705a75ddc4e7679be9123872 into 31a5fa3a84c432dcda3c4931cec5968c43051831"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662348a4dde8ed798d2edacc",
    "number": 198,
    "body": "",
    "head_branch": "jdbi3-use-handle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6490126231e7db772daee4843ef13c918ee392f6 into 5558d36d3155bdf6d20b66517aad72ff8112b3c2"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662348a5dde8ed798d2edacd",
    "number": 197,
    "body": "Diff best viewed with `?w=1`.\n\nApplied several automatic code cleanups from IntelliJ, most notably the conversion of anonymous inner classes to lambda expressions.\n",
    "head_branch": "jdbi3-code-cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 92bb627ece55c7b701d85ae8472d46067289033a into 8a06dfb034e27732f046aaf070899aab91e68740"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662348a6dde8ed798d2edace",
    "number": 196,
    "body": "Should be fixed by #168 but let's prove it with a test case.\nCloses #75 \n",
    "head_branch": "issue-75-comment-quotes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348a7dde8ed798d2edacf",
    "number": 192,
    "body": "Change sql \"naming\" to be (Object,Object...) based instead of a String.\nThis allows for much more sophisticated naming strategies, such as using\nthe SQL Object class and the method name, or doing classpath lookups\nrelative to the passed in class, etc.\n\nIn order to keep flexibility, it is done as just objects. Ideally it\nwould be type parameterized on the sql locator, but that would require\nthe sql locator setter become a builder, plus it would make for _really_\nverbose type names, which would suck. This seems like a pragmatic\ncompromise, and fits with other dynamic aspects of jdbi.\n",
    "head_branch": "sql-naming",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348a8dde8ed798d2edad0",
    "number": 191,
    "body": "We added support for `@Bind` recognizing parameter names, now let's go even further and ditch the annotation if you don't actually need it.\n\nOpen question: should we just get rid of the default \"name by parameter index\" entirely?  This wouldn't prevent people from using positional parameters in fluent queries, but it would mean\n\n```\n@SqlUpdate(\"insert into table values(:0)\")\nvoid doSomething(int param);\n```\n\nwould need to be rewritten to\n\n```\n@SqlUpdate(\"insert into table values(:param)\")\nvoid doSomething(int param);\n```\n\nThe only reason I can see this being used would be if your code does not have parameter names enabled (which is a javac flag IIRC) but then you might as well just `@Bind(\"param\")` instead... Thoughts?\n",
    "head_branch": "sqlobject-implicit-bind",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348a9dde8ed798d2edad1",
    "number": 190,
    "body": "tag @qualidafial so that approach you linked doesn't seem to work:\n\n```\njava.lang.RuntimeException: java.lang.IllegalAccessException: no private access for invokespecial: interface org.jdbi.v3.sqlobject.TestJava8Features$Spiffy, from org.jdbi.v3.sqlobject.TestJava8Features$Spiffy/package\n    at com.google.common.base.Throwables.propagate(Throwables.java:160)\n    at org.jdbi.v3.sqlobject.PassThroughHandler.invokeDefault(PassThroughHandler.java:71)\n    at org.jdbi.v3.sqlobject.PassThroughHandler.invoke(PassThroughHandler.java:41)\n    at org.jdbi.v3.sqlobject.SqlObject.invoke(SqlObject.java:173)\n    at org.jdbi.v3.sqlobject.SqlObject$1.intercept(SqlObject.java:73)\n    at org.jdbi.v3.sqlobject.CloseInternalDoNotUseThisClass$$EnhancerByCGLIB$$bc09080d.insertAndReturn(<generated>)\n    at org.jdbi.v3.sqlobject.TestJava8Features.testDefaultMethod(TestJava8Features.java:34)\nCaused by: java.lang.IllegalAccessException: no private access for invokespecial: interface org.jdbi.v3.sqlobject.TestJava8Features$Spiffy, from org.jdbi.v3.sqlobject.TestJava8Features$Spiffy/package\n    at java.lang.invoke.MemberName.makeAccessException(MemberName.java:855)\n    at java.lang.invoke.MethodHandles$Lookup.checkSpecialCaller(MethodHandles.java:1565)\n    at java.lang.invoke.MethodHandles$Lookup.unreflectSpecial(MethodHandles.java:1224)\n    at org.jdbi.v3.sqlobject.PassThroughHandler.invokeDefault(PassThroughHandler.java:67)\n    ... 30 more\n```\n\nbut I think I got it working!\n",
    "head_branch": "sqlobject-default-method",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348abdde8ed798d2edad2",
    "number": 189,
    "body": "tag @qualidafial now the branch is on the jdbi org, not my personal repo.\n",
    "head_branch": "jdbi3",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[maven-release-plugin] prepare for next development iteration"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348acdde8ed798d2edad3",
    "number": 187,
    "body": "Travis CI kindly provides a PostgreSQL instance on their virtual machines, so we can actually add tests against PostgreSQL to the test suite.\n",
    "head_branch": "postgresql_tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348addde8ed798d2edad4",
    "number": 186,
    "body": "It looks like that returning generated keys by the  `@GetGeneratedKeys` annotation was broken by #117.\n\nThe problem is that the method `columnName` in this annotation by default returns an empty string. But the new code checks only for a null reference. As the result, we pass to a JDBC driver an array\nwith one empty string as column names in the corresponding method  `prepareStatement`.\n\nDatabase vendors handle this behavior differently. MySQL and H2 permit it,  but PostgreSQL, Oracle, and HSQLDB don't. Therefore we should not pass an empty string as a column name, because it doesn't work in major databases.\n\nWe have a test on generating keys for PostgreSQL, but it's ignored. This change adds a test for HSQDB, which shows broken behaviour.\n",
    "head_branch": "fix_generated_keys",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348aedde8ed798d2edad5",
    "number": 185,
    "body": "",
    "head_branch": "deprecate-typed-mappers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d04f2aab5f6e80953979323abf56c793511cca2f into 8e36b9c60d4a135a3e09f3ee94f505a2cc095b24"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662348afdde8ed798d2edad6",
    "number": 183,
    "body": "avoids doing redundant work in the lexer, since parsing a sql statement should be deterministic\n",
    "head_branch": "cache",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348b0dde8ed798d2edad7",
    "number": 182,
    "body": "With the introduction of the column mappers, the `PrimitivesMapperFactory` is obsolete and can be deprecated.\n\nWe can also address #154 by relying on the column mapper registry, which respects nullability of primitive wrapper types.\n\nLastly, the internal FigureItOutResultSetMapper can rely on the column mapper registry instead of embedding knowledge of type mappers.\n",
    "head_branch": "deprecate-primitives-mapper-factory",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6370422586ccd5152123cc7773e5cc07e7ac9193 into 65cc186019815204b6720907fbfa49a6479346ee"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662348b1dde8ed798d2edad8",
    "number": 181,
    "body": "Fixes #180\n",
    "head_branch": "basichandle-close",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 99d2a79978d038edf65a16576d6e12675367bffa into a1317c6a11573ab887da0e619ae73e31f534ea87"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348b2dde8ed798d2edad9",
    "number": 173,
    "body": "add constructor for spring xml config and inject like\n\n```\n<bean id=\"dbi\" class=\"org.skife.jdbi.v2.spring.DBIFactoryBean\">\n    <constructor-arg ref=\"dataSource\"/>\n</bean>\n```\n\n```\n@Resource(name = \"dbi\")\nDBI dbi;\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348b3dde8ed798d2edada",
    "number": 171,
    "body": "@stevenschlansker @brianm\n",
    "head_branch": "copyright",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348b4dde8ed798d2edadb",
    "number": 169,
    "body": "Use toolchains.xml abstraction to select build JDK. This is supported\n(but not well documented) in maven for a long time. This alleviates the\nneed for the various build profiles.\n",
    "head_branch": "toolchains",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348b5dde8ed798d2edadc",
    "number": 168,
    "body": "Currently semicolons in a script are treated as statements separators. Not all are. Semicolons in string literals are just symbols. The statement separator should be followed by a reserved\nSQL word or the end of string.\n\nThe implementation is not guaranteed to work for all cases, but should cover the most common.\n",
    "head_branch": "correct_semicolon_split",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8d6df6c6a70ef9f445509f5953ac1c7bc375a5ff into e206c5681a68a5887beaecd71781dd8584b54332"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662348b6dde8ed798d2edadd",
    "number": 167,
    "body": "We'd like to move off of Spring JdbcDaoSupport/JdbcTemplate, but one of the features that is lacking is the exception mapping capabilities.  This change looks like it accomplishes that goal and looks like, with a proper default ExceptionPolicy, it would be easliy backwards compatible\n",
    "head_branch": "pluggable-exn-handling",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348b7dde8ed798d2edade",
    "number": 166,
    "body": "- When making a call through several methods of a DAO, and more than one\n  of those methods have a @Transaction annotation, an exception is thrown\n  by certain databases (e.g. MySQL). \n- This exception, however, is not really clear and does not help to\n  detect the error.\n- Since nested transactions are not supported by JDBI at the moment,\n  throw a TransactionException with a more meaninful error message.\n\nFixes #165\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348b8dde8ed798d2edadf",
    "number": 164,
    "body": "This pull request:\n- Introduces a column-centric mapper interface: ResultColumnMapper.\n- Adds a separate column mapper registry, with methods to register column mappers in `DBI`, `Query`, and `Handle`.\n- Adds `@RegisterColumnMapper`, `@RegisterColumnMapperFactory` customizing annotations.\n- Exposes the column mapper registry for reuse by `ResultSetMapper`s: `StatementContext.columnMapperFor(Class, StatementContext)`.\n- Modifies `BeanMapper`, `ReflectionBeanMapper` to delegate to the column mapper registry for each property.\n",
    "head_branch": "bean-mapper-value-types",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 316514015afadab7d21e0a91949b5e7f2cae81b4 into e206c5681a68a5887beaecd71781dd8584b54332"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662348b9dde8ed798d2edae0",
    "number": 158,
    "body": "PR #156 introduced a regression due to Java 8 overload resolution. This change renames all `withHandle` methods that take a `HandleConsumer` to `useHandle`, and all `inTransaction` methods that take a `TransactionConsumer` to `useTransaction`, to eliminate the ambiguous overload.\n\ncc @osi\n",
    "head_branch": "rename-handleconsumer-methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348badde8ed798d2edae1",
    "number": 156,
    "body": "Using JDBI with Java 8 lambdas is great until you want a callback that doesn't return a value. You can't cast the lambda to `VoidHandleCallback` because lambdas can only be cast to interfaces. It's an annoyance, not an obstacle, but one that's bugged me often enough that I want a better experience, and it's pretty easy to add.\n\nThis change adds functional interfaces that Java 8 can infer when the lambda does not return. It does not add any Java 8 dependencies.\n\nObjections?\n",
    "head_branch": "lambda-friendly-callbacks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 437349f16174c76db12fdc09d8920755650f1a08 into 52d2c73d180aa36a26918bcfa78ed399bf4a0e31"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662348bbdde8ed798d2edae2",
    "number": 155,
    "body": "This adds support for creating result sets that are concurrent\nupdatable. This is usefull for when one needs to traverse and update a\nresult set in one query.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348bcdde8ed798d2edae3",
    "number": 151,
    "body": "When the underlying ResultIterator was empty, the HandleDing\nwasn't released.\n\nThis fixes a regression introduced by 2b4a7247aa2b773d7914809def94520bfa0655a0.\n",
    "head_branch": "IteratorResultReturnThing-leak",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348bddde8ed798d2edae4",
    "number": 149,
    "body": "Related discussion:\nhttps://groups.google.com/forum/?fromgroups#!topic/jdbi/WWoky-h23wY\nRelated issue:\nhttps://github.com/jdbi/jdbi/issues/133\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348bedde8ed798d2edae5",
    "number": 145,
    "body": "Need to exclude cglib-nodep from easymock\nManage ASM to 5.0.2 which works on Java 8, fixes #144\n",
    "head_branch": "asm-java8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348bfdde8ed798d2edae6",
    "number": 142,
    "body": "By default users of the SQLObject API must map method parameters to query arguments by specifying `@Bind` annotation with a name of the argument.\n\nThis is a standard and most reliable way. But in most cases it seems as overkill because method parameter names are often present in the same order as query arguments. We are forced to write boilerplate code to glue them.\n\nIt would be great to have facility not to specify binding names, but rely on parameter positions and let the library handle them. Something like that:\n\n``` java\ninterface SomethingDao {\n\n    @SqlQuery(\"select name from something where something_id=?\")\n    String findNameById(int i);\n\n    @SqlQuery(\"select something_id from something where name=? and code=?\")\n    Integer getIdByNameAndCode(String name, int code);\n\n    @SqlUpdate(\"insert into something(something_id, name, code) values (?, ?, ?)\")\n    void insertSomething(int id, String name, int code);\n}\n```\n\nMoreover, the Fluent API has this facility and support for it in the SQLObject API will make migration from one API to another more smooth.\n\nThis is related to #133 and #46, but in contrast with former it doesn't use any annotations and in \ncontrast with later doesn't use parameter names at all. It's not mutually exclusive with any of them, so\nthese features could also be implemented.\n",
    "head_branch": "positional_binder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge bfab21c5252aa51a25d85c0c7dbcb323ce26f7d4 into f9605849cd227bff74ee75e0bc5635aad1ff663d"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662348c0dde8ed798d2edae7",
    "number": 141,
    "body": "If a user set a parametrized type as a return type of method and didn't set @SingleValueResult then generic information is erased and JDBI will try to map only generic type.\n\nThe problem that the user doesn't have a clue about why his query doesn't work. \nHe will just get a mapper exception or null.\n\nIn this this case we could give a warning to him that he probably forgot to place an annotation to the method. This is highly useful during development, when probability of missing an annotation is very high.\n\nBecause JDBI doesn't have any logger dependency, I've chosen _java.util.logging_ as a target. Because this is message is intended only for development environment, printing to the error console should be fine.\n",
    "head_branch": "single_value_result_warning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348c1dde8ed798d2edae8",
    "number": 140,
    "body": "It's highly useful during development. In that case JDBI returns a debug statement context, where we can inspect information about a failed statement.\n\nIf the script is executed as a batch, we don't have such information and are forced to search an error manually.\n",
    "head_branch": "script_non_batch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9495748e5e098ac8a36c658a2ec5d212c7b18c54 into 1da90f4ae6f0319d5962242a6bfbf540c929a221"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662348c2dde8ed798d2edae9",
    "number": 139,
    "body": "They are highly common and it would be great if we correctly handled them.\n",
    "head_branch": "multiline_comments",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1b60b8df44c31d88efe88811431c2619f91aa798 into 02c13c9512b5488e3795e7078d5af743dd721fff"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662348c3dde8ed798d2edaea",
    "number": 138,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ea193cfad49f878d1689e5ad20e1315bb05461a3 into 6a0adf314e289fa19069cf047132a67392654a9e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348c5dde8ed798d2edaeb",
    "number": 137,
    "body": "It looks like dd1e5ac25043c27f29a2509d2e64221667b530f7 introduced a pretty serious bug in `ClasspathStatementLocator` that we found when upgrading to 2.58. It was inserting `cache_key` instead of `name`, which seems to open up the possibility of the memory leak it was trying to prevent, but more importantly `cache_key` has the FQCN of the SqlObjectType prepended. Additionally, MySQL `replace` queries were sneaking past the `looksLikeSql` check. The end result was that our queries were getting transformed from something like `REPLACE INTO table (columns) VALUES (:values)` to `com/hubspot/ExampleDao/REPLACE INTO table (columns) VALUES (:values)` which is obviously invalid\n\n@hgschmie @stevenschlansker \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348c5dde8ed798d2edaec",
    "number": 136,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 367b81e85c4f2639b25875c1efce8e703c245885 into 708919017f226dd88f478df0d43fc91dc1ece354"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348c7dde8ed798d2edaed",
    "number": 132,
    "body": "Oracle fails using PreparedBatches without this change. Any reason why it would not be correct for other databases? The tests all appear to still pass.\n",
    "head_branch": "object-null",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f8a4ad7ffe6e61cd2540e4210bceeafb523e5725 into 4c2eeb3792005beaabfc67b2f479dc2ee1dd3d22"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348c8dde8ed798d2edaee",
    "number": 130,
    "body": "Now that we left Java5 behind, how about adding the missing @Override for interfaces.\n",
    "head_branch": "override-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge bcf906028a8951188436907d967b0f9cb3372b40 into cf3a15cd015030baf2147539ab0343469447eadd"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662348c9dde8ed798d2edaef",
    "number": 129,
    "body": "",
    "head_branch": "findbugs-annotations-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5c2d5258406be0d691631cce8290d10b646b4eb5 into f5291e7fbdf1fdb4a2d1fc8209b4f86a9ce5d747"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348cadde8ed798d2edaf0",
    "number": 128,
    "body": "This also requires the included cglib to be upgraded to 3.1 but as this\ndependency is shaded into the jar it should not be a compatibility problem.\n",
    "head_branch": "basepom-8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348cbdde8ed798d2edaf1",
    "number": 127,
    "body": "Fix #106\nFindbugs-annotations is used only in one place and could be replaced by a rule in the XML annotator.\n",
    "head_branch": "delete_findbugs_annotation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348ccdde8ed798d2edaf2",
    "number": 126,
    "body": null,
    "head_branch": "close",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 916b5cd8ef6b206e7467fffbece9558fa237d76d into 5d02939a2597035c07a0916658aced29b3ba03b5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348cddde8ed798d2edaf3",
    "number": 125,
    "body": "Fixes #93\n",
    "head_branch": "locator-leak",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348cedde8ed798d2edaf4",
    "number": 124,
    "body": "Hi,\nI made the same mistake of putting SqlUpdate instead of SqlQuery... so I decided to give it a shot.\nException message seems clear to me, but it's obviously debatable :smiley: \nThanks\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348cfdde8ed798d2edaf5",
    "number": 123,
    "body": "These changes addresses the problem when the underlying database driver throws error on commit in transactional mode. Previously the auto-commit state was not restored when throwing, thus creating inconsistent connections in the pool which then typically caused connections to hang when used non-transactional. This behaviour is especially sneaky in systems with large database pools where connection auto-commit state might be compromised over a longer period, creating hanging connections which might be hard to explain. \n",
    "head_branch": "transactional-autocommit-bug",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348d0dde8ed798d2edaf6",
    "number": 121,
    "body": "When using on-demand sqlobject, two exceptions may be thrown:\n- the first one during the execution of the SQL\n- the second one when the connection is closed\n\nWhen this happens, the first exception is lost.\n\nI discovered this problem because of network errors. During the SQL execution, I get (for example) a socket read timeout. Afterwards, closing the connection will also throws an exception. In this case, the exception is misleading, and I did not immediately understood the underlying problem.\n\nIt would be simple to fix with Java7. Here with Java6, the code is dreadful. If you can think of a more elegant solution, I would be happy to fix my code!\n",
    "head_branch": "masked_exception",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge eeac11145afd20363bc85fca968d07079cafce1b into 5bf9e0e78d5e08f9ef46b0a11c606fd9d1838727"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348d1dde8ed798d2edaf7",
    "number": 120,
    "body": "I noticed that on-demand sqlobject was leaking connections when a SQL statement fails to execute. This can happen for example when there is a syntax error, a bad parameter, or an unavailable resource on the database.\n\nWhile fixing, I noticed two other potential problems. I fixed them on two separate commits.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348d2dde8ed798d2edaf8",
    "number": 119,
    "body": "Allow enum null value in BeanMapper.\nFix BeanMapperFactory to not interfere with built-in argument types.\nNew EnumArgument argument type built-in which maps any Enum value as varchar\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348d3dde8ed798d2edaf9",
    "number": 117,
    "body": "Oracle needs the name of the column that generates a key in order for `@GetGeneratedKeys` to work.\n\nThis PR makes it possible to add a `columnName` to the `@GetGeneratedKeys` annotation which will be passed on to the `PreparedStatement`.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge de10f3c3a057d6c04c937f7038f17a29281a578b into c7556dfdd86914072a33081a40ee4408749d998e"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662348d4dde8ed798d2edafa",
    "number": 116,
    "body": "Hi,\nWe recently ran into a problem with @GetGeneratedKeys and Oracle, as a result of how Oracle returns an internally generated \"row id\" (a hash of some sort) rather than the primary key columns during record insertions.\n\nOthers seemed to have ran into similar problems (with JDBI, as well as with just straight JDBC):\n1. This shows the problem in JDBI, and a proposed solution that this pull request is based on - https://groups.google.com/forum/#!msg/jdbi/5RzG8kJGLsI/o-CAOl_1NdAJ\n2. The problem is not with JDBI, but with how Oracle's JDBC driver works - http://stackoverflow.com/questions/1976625/value-from-last-inserted-row-in-db\n\nThis pull request adds an attribute \"columns\" to @GetGeneratedKeys, which affects the PreparedStatement creation in the DefaultStatementBuilder in the following way:\n1. If the \"columns\" attribute is provided, it is used to create the PreparedStatement, using the following JDBC API operation - http://docs.oracle.com/javase/7/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String,%20java.lang.String[]) (which gets us around the Oracle problem).\n2. If the \"columns\" attribute is not provided, the PreparedStatement is created in the same manner as before. \n\nThe following tests were added to verify the new behavior:\n1. TestDefaultStatementBuilder - Verifies that the appropriate calls are used to create PreparedStatements depending on how @GetGeneratedKeys is used.\n2. TestGetGeneratedKeys - Updated to includes a DAO method that inserts using @GeneratedKeys with columns. This is mainly there to make sure that explicitly specifying key columns doesn't break things in H2.\n3. TestGetGeneratedKeysWithColumns - This is a copy of TestGetGeneratedKeys, but is expected to run against an Oracle database. It is @Ignored by default, as Oracle is commercial software, and the Oracle JDBC driver cannot be included here. However, I have run this test locally, and have included instructions on enabling these tests for those interested in running them.\n",
    "head_branch": "getgeneratedkey-columns",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348d5dde8ed798d2edafb",
    "number": 115,
    "body": "Modified BeanMapper to use Reflection to set fields instead of depending on existence of setters in Beans. This helps in client code base to be cleaner without setters. I have also noticed a small performance improvement(~20%) on setting data using reflection vs beanutils.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5a41456134b7416930cab4c4fdb5d2fe90856486 into dbaddd4ee3b177c470bb8c47b0c50c19420bd2e1"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662348d6dde8ed798d2edafc",
    "number": 114,
    "body": "See issue https://github.com/brianm/jdbi/issues/113\n\nI added a new parameter \"columnName\" to the annotation GetGeneratedKeys.\nThis allows us to extract any type of generated key by column name from the returned result set.\n\nI also added a test case TestGetGeneratedKeysPostgres which demonstrates how the parameter works.\nIt's currently @Ignore because I made it for postgresql but I'll come up with a H2 equivalent soon.\n",
    "head_branch": "get-generated-keys-from-column-name",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 48eaa2aa8cb52f3be7f4b5a4b7157c98c377dd1d into af2ca6faea2747058bab8362bcc540fd7f6a6253"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348d7dde8ed798d2edafd",
    "number": 112,
    "body": "Sorry, my ignorance caused me to recreate this pull request.\n\nFixes #110. Added '#' as a valid character for identifiers when using the ColonStatementRewriter. Personally needed it to work with a legacy database's column names.\n",
    "head_branch": "allow-hash-in-column-name",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f5021e56388aa66f70ba6ba26dbf0c2f845b20fc into bbe5a0d0ccdb9533531b4f202a3bc0751cb836fb"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348d8dde8ed798d2edafe",
    "number": 111,
    "body": "Fixes #110. Added '#' as a valid character for identifiers when using the ColonStatementRewriter. Personally needed it to work with a legacy database's column names.\n",
    "head_branch": "allow-hash-in-column-name",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348d9dde8ed798d2edaff",
    "number": 109,
    "body": "Resolves #108.\n",
    "head_branch": "issue-108",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 38cd5aa9954a3b71b7bdd4c7f8ab97a42e9c08a2 into 070627d098d2cb6d4540c7a022929fcb610d03ba"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348dadde8ed798d2edb00",
    "number": 107,
    "body": "Maybe it's a quite a big change to add, but I will give a shot.\n\nThe problem this PR addresses is a complexity to perform map queries in JDBI. I think JDBI can do a lot better in this field.\n\nLet's have a simple table in a database\n\n``` sql\ninsert into something(id, name) values (1, 'keith');\ninsert into something(id, name) values (2, 'brian');\n```\n\nLet's imagine we want to load data from this table to **Map**. _Canonical_ way to make such queries is using _fold_. Something like that:\n\n``` java\nh.createQuery(\"select id, name from something\")\n                .fold(new HashMap<String, Integer>(), new Folder2<Map<String, Integer>>() {\n                    public Map<String, Integer> fold(Map<String, Integer> a, ResultSet rs, StatementContext context) throws SQLException {\n                        a.put(rs.getString(\"name\"), rs.getInt(\"id\"));\n                        return a;\n                    }\n                });\n```\n\nQuite cumbersome. A little better with _Guava_ and _Java 8_:\n\n``` java\n h.createQuery(\"select id, name from something\")\n                .fold(Maps.newHashMap(), (a, rs, context) -> {\n                    a.put(rs.getString(\"name\"), rs.getInt(\"id\"));\n                    return a;\n                });\n```\n\nAnother problem is that we don't have a strict mapping between keys and values. So, in case if we already have some mappers for complex types it's quite not natural to use it the _fold_ method.\n\nThis change proposes a fluent interface to work with map queries. Basic structure like that:\n\n``` java\nh.createMapQuery(\"select id, name from something\")\n                .mapKey(new StringMapper(\"name\"))\n                .mapValue(new IntegerMapper(\"id\"))\n                .get();\n```\n\nI believe it's more concise and more focused on the real task. \n\nRegistered mappers can be reused:\n\n``` java\nh.registerMapper(new SomethingMapper());\nh.registerMapper((index, r, ctx) -> \n        new City(r.getInt(\"city_id\"), r.getString(\"city_name\"), r.getString(\"state\")));\nh.createMapQuery(\"select u.id, u.name, u.city_id, c.name city_name, c.state \" +\n        \"from users u inner join cities c on u.city_id = c.id\")\n        .mapKeyTo(Something.class)\n        .mapValueTo(City.class)\n        .get();\n```\n\nWe can set the needed implementation of **Map** if the default **HashMap** is not sufficient.\n\n``` java\nh.createMapQuery(\"select id, name from something\")\n                .mapKey(new StringMapper(\"name\"))\n                .mapValue(new IntegerMapper(\"id\"))\n                .accumulator(Maps.newHashMapWithExpectedSize(128))\n                .get();\n```\n\nIf we want some not standard structure with keys and values, we can use _fold_ (I use more simple fold version without changing an accumulator, because it more handy for typical cases).\n\n``` java\nh.createMapQuery(\"select u.id, u.name, u.city_id, c.name city_name, c.state \" +\n        \"from users u inner join cities c on u.city_id = c.id\")\n        .mapKeyTo(Something.class)\n        .mapValueTo(City.class)\n        .fold(ArrayListMultimap.create(), (accumulator, key, value) -> \n                {accumulator.put(value, key);});\n```\n\nI've tried to make everything backward compatible, but could make mistakes. Fell free to correct me.\nThanks in advance. \n",
    "head_branch": "native_map_support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348dbdde8ed798d2edb01",
    "number": 105,
    "body": "The current @BindIn annotation is useful for when you want to use a collection of values in an IN statement, but does not allow us to further customize a complicated query.\n\nThis hit us when we tried to query for entities matching one or more of a set of free form tags (joined from an 'entity_tags' table)\n\nThis pr adds a @BindCollection annotation that makes these complicated queries possible.\n\nYou can use StringTemplate to iterate though collection items any way you want:\n\n```\nwhere\n  value like <first(values)>\n  <rest(values):{ v | OR value like <v> }>\n```\n\ntranslates roughly into:\n\n``` sql\nwhere\n  value like :v1\n  OR value like :v2\n  OR value like :v3\n```\n",
    "head_branch": "bind-collection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348dcdde8ed798d2edb02",
    "number": 104,
    "body": "merge statements are included in the SQL:2003 spec\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6ae31b37d83bc4900bd7517b11d9c6443691553b into 4cd1399971f95cb5b3a79d899db62374a590981f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348dddde8ed798d2edb03",
    "number": 101,
    "body": "Judging on the [discussion](https://groups.google.com/forum/#!topic/jdbi/ZDqnfhK758g) from the user-group it seems as useful functionality.\n\nAs I am aware H2 doesn't support key generation in a batch (relevant [issue](http://code.google.com/p/h2database/issues/detail?id=357)), but HSQLDB [does](http://sourceforge.net/p/hsqldb/bugs/1159/).\nSo I had to add the HSQLDB dependency to test this functionality. Anyway, it seems a better solution then trying to start a MySQL database in unit-tests, as Brian pointed in the discussion.\n\nI don't really like the way I've implemented this feature. Specifically, returning **Object** from **internalBatchExecute** method and then suppressing a warning from a compiler, but couldn't figure out how to generalize  **execute** method and don't create an another abstraction level. The code seems to be too coupled. \n\nI've chose the in-memory database mode in tests, because we don't need keep states between tests and maintaining a database in the memory is a lot simpler than in the disk. As we don't need many HSQLDB tests here, I think it's justified.    \n",
    "head_branch": "batch_keys",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 39f27b6208db6f32717029193a99a60873e05575 into 2c9a4c42281c9b3cf9ec4ec114c43d7c128cd046"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348dedde8ed798d2edb04",
    "number": 100,
    "body": "I believe **PrintSteam** already has an inner lock, that guards I/O operations\n\n``` java\npublic void println(String x) {\n       synchronized (this) {\n           print(x);\n           newLine();\n       }\n }\n```\n\nSo an outer lock seems unnecessary. \n",
    "head_branch": "unnecessary_sync_print_stream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 15be33a18e65436fd0f2044ae72619ed197a4aed into 133f25025a12aa18a669379d4222fa595cec5ec5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348dfdde8ed798d2edb05",
    "number": 98,
    "body": "There is a race condition in SqlObject.buildSqlObject that can return an instance of the desired DAO associated with the wrong database handle.  This occurs only when there are multiple concurrent requests to create a DAO which has not previously been created.\n\nThis pull-request fixes the race condition and adds a test to verify the fix.\n",
    "head_branch": "sqlobjectrace",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348e0dde8ed798d2edb06",
    "number": 96,
    "body": "We've been experiencing an issue in our production environment where 90% of our heap was getting filled up by the ConcurrentMap cache in ClasspathStatementLocator. \n\nI can see the need to cache named SQL statements that cause us to search the classpath, but for inline SQL, I don't see the benefit of caching the string. \n\nThere is one performance hit to this, in that every inline SQL statement will get passed through the \"looksLikeSQL\" method.  Personally, I think this is acceptable given the light-weight nature of that method. An alternative implementation (which I'm happy to provide if you don't like the implementation in this pull request), is to use an LRU cache (from Guava) instead of a ConcurrentMap so that the entries can expire after some configurable amount of time. \n",
    "head_branch": "classpathstatementlocator-memoryfix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348e1dde8ed798d2edb07",
    "number": 95,
    "body": "The default error listener simply logs a stack trace to system.err; it would definitely be useful to be able to supply a custom error listener, which would propagate errors such as invalid syntax, etc.\n\nI ran into an issue the other day where I had queries in a DAO with unmatched '<' (as in doing a date comparison) and the stringtemplate parser was choking on a missing '>' but swallowing the error and leaving me with a truncated query string instead.\n\nHere's what I would love to have as an error listener:\n\n``` java\n  public class PropagatingStringTemplateErrorListener implements StringTemplateErrorListener {\n    private static final Logger LOG = LoggerFactory.getLogger(PropagatingStringTemplateErrorListener.class);\n\n    @Override\n    public void error(String msg, Throwable e) {\n      LOG.error(msg, e);\n      throw Throwables.propagate(e);\n    }\n\n    @Override\n    public void warning(String msg) {\n      LOG.warn(msg);\n    }\n  }\n```\n\nwith this change, I could update my DAO's annotation as such:\n\n``` java\n@UseStringTemplate3StatementLocator(errorListener=PropagatingStringTemplateErrorListener.class)\n```\n\nAn alternative to this could be to have a static error listener defined in the StringTemplate3StatementLocator builder class..?\n",
    "head_branch": "custom-error-listener",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348e2dde8ed798d2edb08",
    "number": 94,
    "body": "SQLStatement.bindFromMap waffles its arguments with a \"argument.getClass()\" expected type, which fails on null values.\n\nFixes #92\n",
    "head_branch": "issue-92-null-map-arg",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348e3dde8ed798d2edb09",
    "number": 90,
    "body": "I wanted to reuse mappers already registered with DBI for complex bean mappers. So that I can have a bean mapper that can handle nearly any typed with a registered mapper.\n\nEven if this PR doesn't make its way into the main branch. I would like to hear your opinions on how to improve the design (or whether this is a bad idea :))\n",
    "head_branch": "reusable-mappers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348e4dde8ed798d2edb0a",
    "number": 88,
    "body": "If the generic objects value is not null, bind method should use the actual class of the object. This enables foreman to use custom argument factories registered by the user.\n\nThis is currently possible via the dynamicBind method of SQLStatement, but I think it is a bit verbose\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 77e23d92491eef0be2e3fc135f3e651608115cf5 into a07a5d6c918664f88110702233294d202ab69170"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662348e5dde8ed798d2edb0b",
    "number": 87,
    "body": "...oup.\n\nI added two new CTORs in StringTemplate3StatementLocator that allow to specify the superGroup, and refactor the code\nso all CTOR call the same underlying method createGroup.\n\nAdded the option to cache the StringTemplate evaluated string. By default the cache is not used and one has to enable it explicitely using setCachedEvaluatedTemplate().\nCaching StringTemplate is a little bit tricky because by default StringTemplate maintains a map of attributes and adding twice the same key in the map\nwill not replace the value but append it! So, they key associated to the cached value must take into consideration the map of attributes\nin such a way that each cached value is associated with a unique template name and map of attributes.\n\nAdded some tests to verify that both superGroup and caching works.\n\nThis patch did not modify LocatorFactory which instanciates StringTemplate3StatementLocator so unless one defined a custom factory, this should be invisible.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348e6dde8ed798d2edb0c",
    "number": 85,
    "body": "I was looking at performance issue, and while reading that code it seemed like we were missing populating the cache, so submitting a pull request.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6d1884b65df9fa8eda1f05a24cf958f1791034b7 into d455a1d09f95c1f50afab696cadd3f79be9a9d07"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348e7dde8ed798d2edb0d",
    "number": 83,
    "body": "For example, if `finalize()` is called, we don't want to check out a Connection object during GC finalization...\n\nFixes #82.\n",
    "head_branch": "finalize-sqlobject",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8ea57225fd13478e1cf1fa510f432464eb61b681 into 53c57efbbe9c5de723f1c34e15f4e79b086cf1b2"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662348e9dde8ed798d2edb0e",
    "number": 80,
    "body": "I needed to be able to do batches against a stored proc (that did inserts, so no out params).\n\nthis is a stupid-simple change that allows creation of a CallableStatement.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348eadde8ed798d2edb0f",
    "number": 79,
    "body": "Fixes the issue I described here:\n\nhttps://groups.google.com/forum/?fromgroups=#!topic/jdbi/QR7RNcUNACg\n",
    "head_branch": "2.41.4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 310828341f456d03755decb402f0e47540ffa8e6 into fb6b25842ed4f24faf0232dc6466bf8cfa6d7067"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348ebdde8ed798d2edb10",
    "number": 78,
    "body": "When compiling JDBI under JDK7+, this will explicitly use the JDK6\njar. An environment variable (JAVA6_HOME) must be set (and obviously a\nJDK6 must be installed).\n",
    "head_branch": "jdk16-build-profile",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d7e448c6ec1bd58fc5bc003aa9f1fbb4a4e87462 into d138b779b5d7129b2d71e4967949c598e6d08b57"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348ecdde8ed798d2edb11",
    "number": 77,
    "body": "When doing an @BindBean binding, the waffle code will always select\nthe ObjectArgument unless an explicit Argument was bound. This is\nactually a big deal for some databases.\n\nMake the Foreman look at the type of the object passed in (if not null)\nwhen the requested type is Object and return a more specific Argument\nif available.\n",
    "head_branch": "bind-bean-waffle-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3a09f9bbbff3921f2560a0d53670c427b75de3f0 into d138b779b5d7129b2d71e4967949c598e6d08b57"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662348eddde8ed798d2edb12",
    "number": 71,
    "body": "As title\n",
    "head_branch": "log4j-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 22b266810d052df391fda1cd7adc64cfc2fb1833 into 8658bf3d6851e534a5063820645dfdd532ecd1c6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348eedde8ed798d2edb13",
    "number": 70,
    "body": "Feature request from [D. Reinert on the mailing list](https://groups.google.com/d/topic/jdbi/nuJFiFnpMgo/discussion)\n\nIntroduce a new binding method, where `Map` entries are bound as parameters.  Has a couple of tweaks on the annotation for its behavior.\n",
    "head_branch": "bind-map",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348efdde8ed798d2edb14",
    "number": 69,
    "body": "I added a @FoldWith annotation that adds support for folding the ResultSet of the @SqlQuery annotation on sql object interfaces.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348f0dde8ed798d2edb15",
    "number": 68,
    "body": "I also added tests demonstrate the problem and fix.  I have been using these revisions in my own testing for a few weeks as such it has not seen significant use.  I hope the coding style is acceptable.  \n\nPlease let me know of any changes necessary to make the pull request acceptable.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348f1dde8ed798d2edb16",
    "number": 63,
    "body": "When handle the NullPointerException issued by the `pd.getWriteMethod`, it logs the property value, but not check the weather the value is null, and when people forget to write the setter, providing the property value is useless, what we want is the property name for the missing property.\n",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d0ae60462f71e47db436f8717c4335cd4a03b3e4 into ff50d49122f00dca733dac7cdda0beeea27bf3b1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348f2dde8ed798d2edb17",
    "number": 62,
    "body": "Issue #61: Properties that can be written but not read cause a NPE inside of BindBeanFactory.\n",
    "head_branch": "bind-bean-npe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4674618a2bfb91ef9f4dbaeddb447715b727bf9a into 6e03486d47cc11649278bf099920a73a568b296a"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348f3dde8ed798d2edb18",
    "number": 59,
    "body": "",
    "head_branch": "feature/slf4j",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2d93bc87ef4d0ebcfd5aa489b65e2d92d70f703a into bf871fe39e5bbc8a1d1a2c7886f7001802847291"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348f4dde8ed798d2edb19",
    "number": 57,
    "body": "I gave a try for enum writes. But it would be better check in detail. Basically in order to provide support org.skife.jdbi.v2.SQLStatement#bind method changed by using class of parameter type instead of static Object class.\n",
    "head_branch": "enum-write-support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348f5dde8ed798d2edb1a",
    "number": 56,
    "body": "Added support for mapping java.util.Calendar to BeanMapper,fixed null Exception!\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348f6dde8ed798d2edb1b",
    "number": 55,
    "body": "Added support for mapping java.util.Calendar to BeanMapper\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348f7dde8ed798d2edb1c",
    "number": 54,
    "body": "",
    "head_branch": "jdbc41-methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 81e508a1fea15135a2ef961ea1e18bf94940c9c2 into 2044911e35896276aca93a79cf783b7ef4414422"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662348f8dde8ed798d2edb1d",
    "number": 52,
    "body": "",
    "head_branch": "naming",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348f9dde8ed798d2edb1e",
    "number": 51,
    "body": "This adds support to BeanMapper for Enum property values.\n",
    "head_branch": "enum",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 809e331990427224d69c525b1a9d1317bfc49bef into f9ec65afae5f933d34140bf18e7e3c1e96ed0580"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348fadde8ed798d2edb1f",
    "number": 49,
    "body": "",
    "head_branch": "npe-return-thing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge cd4c82ad531a51f726675ad6a03b2ea3a62a91c6 into 02a4934b8da50543e763765292a8127885e82104"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348fbdde8ed798d2edb20",
    "number": 48,
    "body": "the idea is to be able to rebuild the query from the logs.\narguments needing binding appear as ? in the logs. \nThat change simply display the offset and/or the binding name plus its associated value.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348fcdde8ed798d2edb21",
    "number": 47,
    "body": "Added intelligent type resolving strategy for SingleValueResult. See the test cases.\n",
    "head_branch": "singleValueResult",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1cd4e368453592e4f86a4e2e3fb779a54d823662 into 4323a32e9ec7215fa4f317635f1ee751b07c87bd"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348fddde8ed798d2edb22",
    "number": 44,
    "body": "I added a loop to go over the hashmap and determine the first handler that is assignable from  the one in the map. It then adds the obtained handler and put it back in the handler map so that we don't do this again and again.\n\nI also made some changes to get rid of some warnings related to javadoc.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348fedde8ed798d2edb23",
    "number": 41,
    "body": "This is another try for snake_case support. This time it is based on strategies as suggested before. This implementation is backward compatible and might need some modifications, especially naming. \n\nAlso providing a better way for  corresponding between db and property names.  Currently JDBI is based on lowering both db column names and property names. However for `snake_case`, one can provide property db formatting strategy `IDENTICAL` and db formatting `LOWER_CAMEL` thus it reduces the cost for each request.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662348ffdde8ed798d2edb24",
    "number": 40,
    "body": "My company has been pretty interested in JDBI for use with an application we're planning on splitting out of Grails (2.1.0) eventually. When we started using it, development went rather well (tests were all passing, though it was our folly to trust the IntelliJ test runner) until came time to run the application. On our machines, we'd see InvocationTargetExceptions caused by NoClassDefFoundError exceptions. I managed to narrow it down to classloader issues.\n\nSome output we'd see (some details cut):\n\n<pre>\nMessage: java.lang.reflect.InvocationTargetException-->null\n   Line | Method\n->> 237 | create              in org.skife.jdbi.cglib.core.AbstractClassGenerator\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n|   377 | createHelper        in org.skife.jdbi.cglib.proxy.Enhancer\n|   285 | create . . . . . .  in     ''\n|    70 | buildSqlObject      in org.skife.jdbi.v2.sqlobject.SqlObject\n|    60 | open . . . . . . .  in org.skife.jdbi.v2.sqlobject.SqlObjectBuilder\n|   326 | open                in org.skife.jdbi.v2.DBI\n\nCaused by InvocationTargetException: null\n->> 384 | defineClass         in org.skife.jdbi.cglib.core.ReflectUtils\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n|   219 | create              in org.skife.jdbi.cglib.core.AbstractClassGenerator\n|   377 | createHelper . . .  in org.skife.jdbi.cglib.proxy.Enhancer\n|   285 | create              in     ''\n|    70 | buildSqlObject . .  in org.skife.jdbi.v2.sqlobject.SqlObject\n|    60 | open                in org.skife.jdbi.v2.sqlobject.SqlObjectBuilder\n|   326 | open . . . . . . .  in org.skife.jdbi.v2.DBI\n\nCaused by NoClassDefFoundError: com/fullcontact/api/cab/mysql/contactdata/ContactData\n->> 631 | defineClassCond     in java.lang.ClassLoader\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n|   615 | defineClass         in     ''\n|   384 | defineClass . . . . in org.skife.jdbi.cglib.core.ReflectUtils\n|   219 | create              in org.skife.jdbi.cglib.core.AbstractClassGenerator\n|   377 | createHelper . . .  in org.skife.jdbi.cglib.proxy.Enhancer\n|   285 | create              in     ''\n|    70 | buildSqlObject . .  in org.skife.jdbi.v2.sqlobject.SqlObject\n|    60 | open                in org.skife.jdbi.v2.sqlobject.SqlObjectBuilder\n|   326 | open . . . . . . .  in org.skife.jdbi.v2.DBI\n</pre>\n\n\nAll of the class files existed, and we even rewrote them as Java interfaces to see if that was the issue. No dice.\n\nI narrowed this down to running Grails using the internal (embedded) Tomcat or test runner. In a production environment (e.g. deployed to a Tomcat server), all of our JDBI code worked flawlessly.\n\nAt that point, I suspected a classloader issue. Grails is pretty _special_ in that not only does it subclass the traditional Groovy classloader to workaround some exceptional cases, but I believe it also wraps everything in a smart classloader to feed its code reload facility in development mode. All of this is built on top of the Spring Framework and ostensibly allows use of any nice Spring features, AspectJ weaving, AOP proxies, etc.. The development mode of Grails is potentially one of the most classloader hostile places I've worked in.\n\nToday I took a dive into the JDBI source code and managed to wrangle a fix which at least allowed us to run tests and develop locally using JDBI and Grails. That being said, it's basically an ugly hack where I used `Class.getClassLoader()` to set the classloader on the Enhancer.\n\nI don't know CGlib enough to understand the implications of this solution and would like some feedback.\n\nMy original revision of this patch passed the classloader up from DBI all the way through to SqlObject.buildSqlObject. This patch also works, but it also may have side-effects.\n",
    "head_branch": "grailsFix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5bf816ca9938a3ed9438f80d9c77f14857e3a984 into f02f2a2c62ae3d449670bfa3efb65124e8b682ed"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234900dde8ed798d2edb25",
    "number": 39,
    "body": "",
    "head_branch": "double-txn-isolation-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge abd7742b6aeac07ff69ca764c88c270a715a3dc9 into 8541f4ebcef8a9c0a774789d39dc7320e2613a23"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234901dde8ed798d2edb26",
    "number": 37,
    "body": "Current BeanMapper implementation is using lowercase property descriptor names for corresponding. This check lets BeanMapper to support camel_case without breaking existing implementations.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234902dde8ed798d2edb27",
    "number": 36,
    "body": "This test demonstrates a case where a ContainerFactory is not applied when the container doesn't implement Iterable.\n",
    "head_branch": "arrayFactory",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d0a5b6e509a781487a925095f8f8869adb3bbd31 into 8df708897330537b7ef0d060add6c29b8870031d"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234903dde8ed798d2edb28",
    "number": 35,
    "body": "This makes \"wrapping\" the pre-existing helper classes possible, so that\nyou can delegate to the prior behavior without knowing implementation details.\n",
    "head_branch": "dbi-getters",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4f24798e4ea2da8677ab94d4ded0041b0456ffdf into 2937fbe252adf85ec784eb54f1b95f07dd1a0297"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234904dde8ed798d2edb29",
    "number": 34,
    "body": "",
    "head_branch": "idbi-txn-level",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 35872d9545d9cb05d6ebb707ac7a070de8fe1d71 into 90d04524fbe0e8a3e2ac09df047bb5f13bb71d7c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234905dde8ed798d2edb2a",
    "number": 33,
    "body": "Introduce optional support for automatically re-running transactions when the database reports a serialization failure.  Minor internal reorganization to make adding support easier.\n\nFor more information regarding why this is interesting:\nhttp://www.postgresql.org/docs/9.1/interactive/transaction-iso.html#XACT-SERIALIZABLE\n",
    "head_branch": "serializable-txn-runner",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9302bb079b8ca34e7e230681a979f5da1bcfe835 into c3db4cee77ee8de7c290dcc7f6ad0fbbeedfc55a"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234907dde8ed798d2edb2b",
    "number": 31,
    "body": "You'd expect to be able to use the SqlObject from within, but if you do so it releases the handle, causing mass chaos.\nIf these constructs cannot coexist, then it should at least fail explicitly and quickly.\n",
    "head_branch": "sqlobject-withhandle-retention",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d88a22ddb956268eefdd525fd7746aeb946f33ca into aafb339268d84d79d6f118b7d54c17f2828460ab"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234908dde8ed798d2edb2c",
    "number": 30,
    "body": "If a transaction fails spectacularly, it's quite possible that\nresetting the isolation level fails as well.  The previous\nbehavior is to swallow the \"real\" cause and report the latter\nfailure, which makes diagnosing the cause rather difficult.\n",
    "head_branch": "handle-txnlevel-reset-failure",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5d3b19722b82b872fb1590708b9e597ea749f62f into c3db4cee77ee8de7c290dcc7f6ad0fbbeedfc55a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234909dde8ed798d2edb2d",
    "number": 28,
    "body": "I often use `withHandle` or `inTransaction` to perform work that doesn't return a result. These abstract classes make that code cleaner. (I have copies of them in various projects.)\n",
    "head_branch": "void",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a223f992026a9d19ff813f88d1504a2e00b1b18f into ef86dae0d2e1997fdb9130473d1b91374fdf805a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623490adde8ed798d2edb2e",
    "number": 27,
    "body": "",
    "head_branch": "idea6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 59f153b14a14f315abf8e94a79ff5e58f0678676 into 190016fa16d9928028d0a9c636b17cec60987c51"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623490bdde8ed798d2edb2f",
    "number": 25,
    "body": "I think these are a bit outdated by now :)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623490cdde8ed798d2edb30",
    "number": 24,
    "body": "For my project, I'm using a simplified version of JavaBeans.\nMy \"beans\" do not define getter/setters, but they simply specify\nproperties as public fields (or private/default/protected fields as well).\nFor this reason, I implemented a PojoMapper class.\n\nI tried to write some samples in the javadoc. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623490ddde8ed798d2edb31",
    "number": 23,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 48fda71ded4c4f108c7abb9ba914cdb4ed435aff into 4cbe6bcc34593f440627124c4e6935806d1b5080"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623490edde8ed798d2edb32",
    "number": 21,
    "body": "As it currently stands, I can't implement a Binder in Scala.  The scala compiler gets quite unhappy on account of the missing type parameter.  I haven't been able to find any workaround; adding the missing type parameter to the interface definition seems to be the only solution.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a53da13fc116bef8b124ea33bbcff7db16dd8966 into eaf74ea9eea39c2bc4dbc692998c3105ba6bda50"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623490fdde8ed798d2edb33",
    "number": 20,
    "body": "Fix typo in query docs\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8909c50bb934d3ddb9aa170f8f7f5e904ad732a7 into 750c247305eee7575c7666373e4916ce995ea443"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234910dde8ed798d2edb34",
    "number": 19,
    "body": "So we can override db field names\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ccf7db5bcd1a70edba1deeb440bbfcf6414c8a13 into 331387e042a4fb98dd2b0210792066821b5d7130"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234911dde8ed798d2edb35",
    "number": 16,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4f61c8a4d565b9e9e6a107a6d923f0fe6369b89e into 674986919179d83201439e952e7eb1d09897ce80"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234912dde8ed798d2edb36",
    "number": 15,
    "body": "Return false instead of throwing an exception.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge af3e0cfd504bbe3a5a1753c5e3bb5d8faa986975 into c2a8bc4a566a45236eb81b11200757155cb94c8a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234913dde8ed798d2edb37",
    "number": 14,
    "body": "I had some problems writing Unit tests when using the `ClasspathStatementLocator`\n\n```\npublic interface AttributeDaoJdbi extends AttributeDao {\n\n    @Override\n    @SqlQuery(\"/sql/base/attribute/select-all\")\n    @RegisterMapper(AttributeSetMapper.class)\n    public Set<Attribute> all();\n```\n\nWhen I ran the follwing test\n\n```\n    @Test\n    public void test() {\n        final DBI dbi=new DBI(dataSource);\n        final Handle h=dbi.open();\n        h.attach(AttributeDaoJdbi.class);\n\n        final AttributeDaoJdbi dao=dbi.open(AttributeDaoJdbi.class);\n\n        final Set<Attribute> attributes=dao.all();\n\n        assertNotNull(attributes);\n        assertTrue(attributes.size()>0);\n\n        dao.close();\n    }\n```\n\nthe statement locator wouldn't find the sql file `/src/main/resources/sql/base/attribute/select-all`. I'm not that familiar with the ClassLoader in Java but my guess is that the JUnit tests are run from a different thread, so that `Thread.currentThread().getContextClassLoader()` (which is used) fails to find the files via `loader.getResourceAsStream(name)` or `loader.getResourceAsStream(name +\".sql\")`\n\nI added the attached code as a workaround. I don't really like it as it seems to correct behavior that no one uses in production code. As I said I'm not an expert on ClassLoader issues so maybe somebody else else with more knowledge can have a go at this.\n",
    "head_branch": "feature/junit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234914dde8ed798d2edb38",
    "number": 13,
    "body": "After an import of the project into Eclipse, I noticed that one class uses the `@Override` annotation for implementing a method and produces an error, specifically:\n\n```\nThe method add(Object) of type ListContainerBuilder must override a superclass method   \nListContainerBuilder.java   /jdbi/src/main/java/org/skife/jdbi/v2   line 16\n```\n\nFirst it was a mystery for me why maven would still compile the sources but then I realized that the only JDK I had installed was JDK6, so I installed JDK5 and tried building the project and failed (amongst other) with the following error:\n\n```\n[ERROR] /jdbi/src/main/java/org/skife/jdbi/v2/sqlobject/SqlObject.java:[3,-1] cannot access com.fasterxml.classmate.MemberResolver\nbad class file: /Users/Shared/Local/Development/data/maven/repository/com/fasterxml/classmate/0.5.3/classmate-0.5.3.jar(com/fasterxml/classmate/MemberResolver.class)\nclass file has wrong version 50.0, should be 49.0\n```\n\nI don't know when @cowtowncoder introduced 1.6 compilation but the [0.5.3](https://github.com/cowtowncoder/java-classmate/blob/06de2c82001de6a396f3eb4b38e38957e028989b/pom.xml) release at least is compiled with Java 1.6\n\nI suggest bumping source and target level to 1.6. I attached this in the pull request for convenience.\n",
    "head_branch": "feature/java6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge dcd6d9418fa168fcb0d97599029edc0894ff9468 into 666102ec1d7c4a8f1665200e23f79837f0cc360f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234915dde8ed798d2edb39",
    "number": 12,
    "body": "Some late-night manual spellchecking. :)\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4420b66028b608b09cbb69798bbd5f0778ae5c39 into 234968ebb12fe689bd5e2dd15a45e89ee28bcc43"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234916dde8ed798d2edb3a",
    "number": 10,
    "body": "This allows `.sql` files for SQL objects which use the default `ClasspathStatementLocator` to be nested under the full class name (e.g., `src/main/resources/com/example/db/SqlObj/methodName.sql`).\n\nThis adds a new test for SQL object-specific behavior of `ClasspathStatementLocator`, and all other tests pass.\n\nIt definitely shares some behavior with `StringTemplate3StatementLocator` (i.e., `mungify` and the class-relative resource loading), but I'm not sure how you'd like to handle that.\n",
    "head_branch": "scoped-statement-locator",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge fd3d92868a0046c7f8c2b0f302afc9c57079a1ff into ec2aee81a0fe8fd99ca79d7977dc5df012caa3eb"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66234917dde8ed798d2edb3b",
    "number": 9,
    "body": "Since I've now been bit by this twice, here's a patch. When using the SqlObject API, it's easy to be careless and write @SqlQuery when one means @SqlUpdate. This manifests as an NPE from Query.java, and it's not obvious when looking at the call site what you've done wrong since the error is a bad annotation.\n\nAdding a more descriptive error message will help SqlObject API users know what the root problem is and possibly where to look.\n",
    "head_branch": "badquery",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 96f7a032470df0a935417853c16d8d251c8c5f09 into c49c2ea15a43b3065a94b728395b91335b609bf8"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234918dde8ed798d2edb3c",
    "number": 8,
    "body": "Because the path separator on windows is a backslash, the 'replaceAll' replacement argument needs to be escaped using Matcher#quoteReplacement.\n\nWhile fixing that, there's a test bug in TestSqlLogging that didn't support Windows line separators.\n\nEDIT: Turns out that \"file.separator\" doesn't work at all; the classpath lookup fails if backslashes are used. Using a literal \"/\" works both for filesystem and jar, the resource lookup code must handle the path translation.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0b7fcea8ac331d37db756e4ccb9732a80bd31503 into 8bb794ffe5400dd3d7cd62a2210c950aebdf42e4"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66234919dde8ed798d2edb3d",
    "number": 7,
    "body": "A quick and dirty fix for gh-6, adding the trifecta of handlers for SqlObject proxies.\n",
    "head_branch": "trifecta",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 293d7b9fc0313513e8287312786da8ba7cfa9a5b into 0b4724667b18b5adaa0265f80b314da90252e46b"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623491adde8ed798d2edb3e",
    "number": 5,
    "body": "Reference: http://stackoverflow.com/questions/6644265/using-java-annotations-with-java-interface-implementations-in-scala\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ad9684703a77360dd705a19b9bf52924755b8e34 into 468702b1b9ea05346e6d5bfdec70f2bec74acec3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623491bdde8ed798d2edb3f",
    "number": 3,
    "body": "This uses the Statement#getGeneratedKeys method which exists since JDBC 3.0 and seems to be supported in most current JDBC drivers (I checked Oracle since 10.1.x, Mysql, Derby).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  }
]