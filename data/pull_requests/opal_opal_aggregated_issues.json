[
  {
    "_id": "66208e8dd6ca63ac8d87e99c",
    "number": 2650,
    "body": "As of now, it only works for the compiler runner and system runner (ie. Node) but nothing prevents us to make it work for other runners in the future as well.\r\n\r\nThis aims to produce an output that is more easily digestible by modern JS bundlers and that may work better for import maps. This is also a starting point for full ESM support.\r\n\r\nThis is partially extracted from #2502 (and I intend to split #2502 into some more separate branches, to make it more digestible).",
    "head_branch": "hmdne/directory",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208e8dd6ca63ac8d87e99d",
    "number": 2649,
    "body": "```ruby\r\nclass MyClass\r\n  def method_missing(name, *args)\r\n    if name == :foo\r\n      puts \"foo called\"\r\n    else\r\n      super\r\n    end\r\n  end\r\n\r\n  def respond_to_missing?(name, *args)\r\n    name == :foo\r\n  end\r\nend\r\n\r\nMyClass.new.method(:foo).call\r\n```\r\n\r\nThis code used to raise NameError. Now it works correctly as CRuby.",
    "head_branch": "method_missing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2649 from takaram/method_missing\n\n`Object#method` supports methods invoked through `method_missing`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208e8ed6ca63ac8d87e99e",
    "number": 2648,
    "body": null,
    "head_branch": "ostruct_freeze",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2648 from takaram/ostruct_freeze\n\nSupport `OpenStruct#freeze`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208e8fd6ca63ac8d87e99f",
    "number": 2647,
    "body": "Those are mostly cosmetic changes, no need to include in changelog.",
    "head_branch": "hmdne/call_split",
    "is_a_fork": false,
    "comments": [
      "This is partially taken from #2502 to make the rebased patch smaller."
    ],
    "commit_messages": [
      "Merge pull request #2647 from opal/hmdne/call_split\n\nSplit CallNode into a couple files (and a couple of other cosmetic changes)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208e90d6ca63ac8d87e9a0",
    "number": 2646,
    "body": "And make it more visible, so that new users could find this information more easily.\r\n\r\nThanks to @AndyObtiva for suggestion.",
    "head_branch": "hmdne/docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2646 from opal/hmdne/docs\n\nSplit documentation of Native into a separate document"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208e91d6ca63ac8d87e9a1",
    "number": 2645,
    "body": "This commit creates a concept of a project, which is a concept similar to a Gem, but rather for JavaScript parts.\r\n\r\nA single Gem can contain multiple projects. A project is most often defined by adding an Opalfile file that contains an Opalfile DSL. A project is added to compilation by adding an appropriate require path or by compiling a file,\r\n\r\nAs of now, this DSL contains just two directives:\r\n- add_gem_dependency - declares that files from a given gem should be available for use by Opal's require directive\r\n- add_load_path - adds a load path. This is useful for Opal gems, so that you could specify that eg. \"opal\" directory contains Opal files and \"lib\" contains Ruby files.",
    "head_branch": "hmdne/project",
    "is_a_fork": false,
    "comments": [
      "This fixes #2545 "
    ],
    "commit_messages": [
      "Merge pull request #2645 from opal/hmdne/project\n\nOpal::Project"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208e92d6ca63ac8d87e9a2",
    "number": 2644,
    "body": "Some chore commits that won't need documenting in changelog.",
    "head_branch": "hmdne/chore",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2644 from opal/hmdne/chore\n\nChore"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208e93d6ca63ac8d87e9a3",
    "number": 2642,
    "body": "Ruby 3.3 introduced Prism parser, and it is also released as a gem.\r\nThe latest version of Prism includes `Prism::Tarnslaion::Parser`, a wrapper class to make Prism compatible with parser gem (`whitequark/parser`).\r\n\r\nThis PR tries to replace the current parser (`Parser::Ruby32`) with `Prism::Tranlation::Parser`.\r\nSince this is just an experiment, the default parser remains to be that of parser gem. Instead I added `--prism` CLI option to switch the parser.\r\n\r\nHere are some advantages with Prism:\r\n- Compile becomes faster\r\n- Parser gem-related issue (#1703) is resolved\r\n\r\nTodo:\r\n- [ ] Support using Prism in opalopal\r\n  - Prism can be run in JavaScript through wasm\r\n- [ ] Run tests with Prism\r\n\r\ncc: @kddnewton ",
    "head_branch": "prism",
    "is_a_fork": true,
    "comments": [
      "There's a small issue for opalopal as of now which regards loading of WASM modules - they can be only loaded async (at least in Chromium). I have a plan to support such workflow, but it will take some time.\r\n\r\nOther than that, before we flip the default, we will also have to check regressions in source maps."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208e94d6ca63ac8d87e9a4",
    "number": 2641,
    "body": "…ted code size",
    "head_branch": "hash_new_speed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2641 from janbiedermann/hash_new_speed\n\nImprove inline Hash creation speed and at the same time reduce genera…"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208e95d6ca63ac8d87e9a5",
    "number": 2640,
    "body": "I found some cases where JavaScript code was accidentally embeded as a normal string with `%{}`, not `%x{}`.",
    "head_branch": "fix-xstring",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2640 from takaram/fix-xstring\n\nFix several `%{}` which were intended to be `%x{}`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208e96d6ca63ac8d87e9a6",
    "number": 2639,
    "body": "This patch improves $each_ivar, with positive effects on Up! benchmark results for the env.to_s benchmark:\r\nfrom 8328.87 req/s to 13105.05 req/s, thats ~50% up. Probably has positive effects on other apps too.",
    "head_branch": "each_iinstance_variable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2639 from janbiedermann/each_iinstance_variable\n\nEach instance variable performance improvement"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208e97d6ca63ac8d87e9a7",
    "number": 2638,
    "body": "The idea is, to get performance data by not interfering with the existing tooling. So setting NODE_FLAME=true and then running rake mspec or rake performance or opal -Rnode anything.rb conveniently makes the hot spots visible.",
    "head_branch": "flame",
    "is_a_fork": true,
    "comments": [
      "But i just had the idea, to make that OPAL_FLAME and also find a similar solution for the bun and deno runners, need to investigate further",
      "Deno team is working on that: https://github.com/denoland/deno/issues/22102\r\nBun currently has nothing to offer. Lets go with NODE_FLAME for the moment.",
      "Here it's how it looks like:\r\n\r\n![image](https://github.com/opal/opal/assets/54514036/49cbd5c6-3811-4fa2-8144-e7df32a98301)\r\n"
    ],
    "commit_messages": [
      "Merge pull request #2638 from janbiedermann/flame\n\nProfiling convenience with a nice flame graph"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208e98d6ca63ac8d87e9a8",
    "number": 2635,
    "body": "Working, it may happen though, that the parent process exits before the child was able to read its javascript file. \r\nHappens with SystemRunner and its tempfile, which gets deleted when the parent exits. It will fork and then print:\r\n`Error: Cannot find module '/tmp/opal-system-runner20240202-905467-v7fj7d.js'`\r\n\r\nIn ruby, such situation will still work, because fork relies on the image in memory. In node, the original javascript file is still required when forking.\r\n\r\nThat of course is not a issue at all, if the parent process keeps running anyway.\r\n\r\nThis updates the node requires in nodejs/kernel.rb to use the modern form.",
    "head_branch": "forking",
    "is_a_fork": true,
    "comments": [
      "```\r\nif RUBY_ENGINE == 'opal'\r\nrequire 'nodejs'\r\nend\r\n\r\ndef cpu_intensive_process\r\n  puts \"Pid: #{Process.pid}\"\r\n  x = 0\r\n  1000000000.times do |i|\r\n    x = i + x\r\n  end\r\n  puts x\r\nend\r\n\r\n# either this way, may fail with the error mentioned above, if there wouldn't be the other forks below\r\n# keeping this process busy\r\nfork do\r\n  cpu_intensive_process\r\nend\r\n\r\n# or that way\r\nfork\r\ncpu_intensive_process\r\n```\r\n\r\nExample for testing"
    ],
    "commit_messages": [
      "Merge pull request #2635 from janbiedermann/forking\n\nInitial fork() support for Node"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208e99d6ca63ac8d87e9a9",
    "number": 2634,
    "body": "When running `bundle exec rake mspec_firefox` on ubuntu 23.10 with Firefox 122 installed from Snap (there is no alternative way provided out of the box) Firefox does not open the remote debugging port.\r\nFirefox fails to find the generated profile.\r\n\r\nThe firefox executable in the path, `/snap/bin/firefox` in fact is a link to the snap executable, which, when executed as firefox, mangles firefox options to provide paths from the snap directories. If a option with arg is separated by space, like `--profile /dir`, the option is somehow mistreated and not recognized. If a option with arg is connected by '=', like `--profile=/dir,` the option is recognized and correctly passed on to the real firefox-bin executable.\r\n\r\nChanging the way opts and args are passed in the patch at least makes firefox open the remote debugging port, but execution currently still fails with:\r\n`chrome://remote/content/cdp/domains/content/Runtime.sys.mjs:285:5:in 'Error: context is null (evaluate': context is null (evaluate@chrome://remote/content/cdp/domains/content/Runtime.sys.mjs:285:5 ...`\r\n\r\nThis patch also updates options and prefs to the latest ones as used by latest puppeteer.",
    "head_branch": "firefox_run",
    "is_a_fork": true,
    "comments": [
      "Btw, mspec-firefox from ci is not affected, because it installs firefox in a different way that avoids using snap.",
      "Unfortunately it is :(. It is now running for multiple hours after this patch",
      "Good things need time  ... ;)",
      "In addition snap ALWAYS reuses a existing instance, even when using `--new-instance`. Effect is, that most probably mspec firefox will fail, if the user has a firefox open or, if the mspec firefox has been started first, users firefox will fail.\r\nIt works when executing firefox-bin from the snap directly, but, BUT, there seems to be no official way via snap tooling to get the path. The fix however is easy: uninstall snap firefox, install firefox from a apt repo ... DONE! Very easy.\r\n\r\nSo the updated patch just informs the user in case of failure and in addition updates options to the latest, as used by puppeteer.",
      "failing specs are unrelated"
    ],
    "commit_messages": [
      "Merge pull request #2634 from janbiedermann/firefox_run\n\nUpdate Firefox runner because of Ubuntu/Snap problems"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208e9ad6ca63ac8d87e9aa",
    "number": 2633,
    "body": "I have a use case where Hash#key? computing hashes for a not too large Hash/Array combo takes ~ 3 seconds, for the combination if things going on 10 seconds are wasted.\r\nUsing a Map instead of Object.create(null) for $hash_ids seems to reduce that to a 11ms for Hash#key? and the combination ~100ms or so.\r\n\r\nHave not tried other use cases or anything else, let see result of the actions ...",
    "head_branch": "hash_speed",
    "is_a_fork": true,
    "comments": [
      "Something broke, needs some tuning ...",
      "The huge speedup is due to error on my side, bit a more realistic ~10% speedup remains with things fixed, for my use case, using large Hash/Array combo as key with Hash#key?",
      "Another 10% speedup by avoiding function calls",
      "Another 10%, from 10s down to 7s.\r\nUsing the native Map iterator may benefit other places in Hash too",
      "Now down to below 7 seconds from 10 for the complete use case and down to 1.5s from 3s for Hash#key?, nice."
    ],
    "commit_messages": [
      "Merge pull request #2633 from janbiedermann/hash_speed\n\nSpeed up #hash"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208e9ad6ca63ac8d87e9ab",
    "number": 2632,
    "body": "This makes us compile names like \"eql?\" into \"$eql$Q\". This would allow us to refer to each method without a need of array access operator.\r\n\r\nThis is a performance improvement experiment. Ultimately, unfortunately, mostly a failed one. But perhaps it can be taken apart.",
    "head_branch": "hmdne/jsid_no_special_chars",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208e9bd6ca63ac8d87e9ac",
    "number": 2631,
    "body": "Those were noisy while running the specs.",
    "head_branch": "elia/deprecations",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2631 from opal/elia/deprecations\n\nCleanup some warnings and deprecations"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208e9cd6ca63ac8d87e9ad",
    "number": 2627,
    "body": "Mitigation for #2625 ",
    "head_branch": "avoid-infinite-loop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2627 from takaram/avoid-infinite-loop\n\nAvoid infinite loop in test"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208e9dd6ca63ac8d87e9ae",
    "number": 2626,
    "body": null,
    "head_branch": "fix-rubocop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2626 from takaram/fix-rubocop\n\nFix rubocop"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208e9ed6ca63ac8d87e9af",
    "number": 2624,
    "body": "This PR adds some improvements on CI.\r\n\r\nCloses #2625 ",
    "head_branch": "update-ci",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2624 from takaram/update-ci\n\nImprove CI"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208e9fd6ca63ac8d87e9b0",
    "number": 2623,
    "body": null,
    "head_branch": "tmpdir",
    "is_a_fork": true,
    "comments": [
      "All fine. There are a couple of lint problems but they are problems of lint, not this PR :D. I'll work on it and merge, thanks!"
    ],
    "commit_messages": [
      "Merge pull request #2623 from janbiedermann/tmpdir\n\nAdd nodejs/tmpdir"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ea0d6ca63ac8d87e9b1",
    "number": 2622,
    "body": "no warranty, just a start\r\ndo `npm i bun -g` to try",
    "head_branch": "bun",
    "is_a_fork": true,
    "comments": [
      "There's a lint issue of `Bun` not being defined. Can you fix it? :)",
      "Done. Remaining issues are from some place else unrelated",
      "My previous comment about the Lint issues was wrong, my eyes missed the 'bun' in the lines. The term 'bun' is too short, easy to overlook."
    ],
    "commit_messages": [
      "Merge pull request #2622 from janbiedermann/bun\n\nRun on Bun"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ea1d6ca63ac8d87e9b2",
    "number": 2621,
    "body": "Required to compile Rack",
    "head_branch": "reg_n_exp",
    "is_a_fork": true,
    "comments": [
      "Other than the comment, can you add a simple test? I know encodings are a mess, but just a test to prove `n` is now accepted by Opal."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ea2d6ca63ac8d87e9b3",
    "number": 2620,
    "body": "We had a wrong logic assuming, that low surrogate comes before the high surrogate, while the reverse is true. This caused an errorneus output of `String#chars` function etc. while iterating over character that is over the BMP, that is, has a Unicode codepoint over 0xffff.\r\n\r\nThis PR has been sponsored by Ribose Inc.",
    "head_branch": "hmdne/string-chars-utf16-fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2620 from opal/hmdne/string-chars-utf16-fix\n\nString#chars: Fix iteration over out-of-BMP characters"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ea3d6ca63ac8d87e9b4",
    "number": 2619,
    "body": "No longer use `+` for string concatenation and introduce `Opal.interpolate` to handle object stringification.\r\n\r\n- Call `Object#to_s` directly, instead of depending on `Object.prototype.toString`.\r\n  - Closes #2618\r\n- Fall back to the default `Object#to_s` implementation if `Object#to_s` does not return a string.\r\n  - Closes #1068",
    "head_branch": "string_interpolation",
    "is_a_fork": true,
    "comments": [
      "There's a consistent slight performance regression (~3% on AsciiDoctor). This involves use of `Array.map` I believe. Let me try to correct that.",
      "Also, from my other experience, kinda counterintuitively `\"abc\"+\"abc\"` is more performant than `[\"abc\", \"abc\"].join(\"\")`",
      "I have attempted various ideas, but from my tests, this one is the best for performance. We'll likely merge it the next review window (next Thursday).\r\n\r\nCongratulations on your consistent work of getting us closer to MRI, one step at a time, @takaram :D"
    ],
    "commit_messages": [
      "Merge pull request #2619 from takaram/string_interpolation\n\nImprove string interpolation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ea4d6ca63ac8d87e9b5",
    "number": 2617,
    "body": "As of now, there are a couple of places we can't use-strictify, like String or Marshal.",
    "head_branch": "hmdne/use-strict",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2617 from opal/hmdne/use-strict\n\nUse strict in much more places in corelib."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ea5d6ca63ac8d87e9b6",
    "number": 2613,
    "body": "Before we have merged a Hash->Map patchset, `Hash#to_n` used to return a JS object, then it returned Map. `#to_n` is an API of the `native` library, so it is called by the unwrapping part. Let's suppose a sample JS library, that is often called like this inside JS:\r\n\r\n```js\r\ncombomizer.enhance(\"feature\", { fast: true })\r\n```\r\n\r\nThis sample is very similar to how Ruby kwargs work, or at least used to, or still work this way in Opal. Such a code was represented in Opal this way:\r\n\r\n```ruby\r\ncombomizer = Native(`js_combomizer`)\r\ncombomizer.enhance(\"feature\", fast: true)\r\n```\r\n\r\nOr... without kwargs, the second line becomes:\r\n\r\n```ruby\r\ncombomizer.enhance(\"feature\", {fast: true})\r\n```\r\n\r\nAfter the Hash->Map patchset, this code has changed its behavior, now passing hash as a Map, which is breaking compatibility assumptions. From what I know, Map is very rarely used in JS and the JS libraries can be assumed to never expect a Map, but a JS Object.\r\n\r\nThis commit restores previous behavior of `Hash#to_n` returning a JS object, like before.\r\n\r\nThanks to Jean-Eric Godard (@jeezs) for reporting this bug.",
    "head_branch": "hmdne/hash-to-obj",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2613 from opal/hmdne/hash-to-obj\n\nCompat regression fix: `Hash#to_n` should return a JS object"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ea6d6ca63ac8d87e9b7",
    "number": 2612,
    "body": "Before this patch, we have noticed that NBSP characters are stripped by those methods which is not what MRI does.\r\n\r\nThose methods now fully follow MRI's behavior.\r\n\r\nThis fixes #2611\r\n\r\nThis PR has been sponsored by Ribose Inc.",
    "head_branch": "hmdne/strip",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2612 from opal/hmdne/strip\n\n`String#{r,l,}strip`: Make them work like in MRI"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ea7d6ca63ac8d87e9b8",
    "number": 2610,
    "body": "A little known thing about JavaScript is that it uses UTF-16\r\nencoding for its strings. But to leverage full extent of UTF-16\r\nsupport, one must use correct functions, otherwise we are left\r\nwith not supported over-the-BMP characters, like now ubiquitous\r\nemoji.\r\n\r\nThis commit also makes most regexps use Unicode mode. Due to the\r\nUnicode mode regexps being more strict, we now really need a half\r\na decent transpiler. That's also what it adds and using that\r\nsituation, we also add support for POSIX character classes, which\r\nare quire often used in Ruby, but aren't there in JS, so we simulate\r\nthem with Unicode character classes.\r\n\r\nAs a side effect, this made us support value omission for hashes\r\nwhen compiling with Opal in JS (eg. when using `eval`). Since all\r\nthe MSpec tests do this, we pass the tests now.\r\n\r\nWe also add a proper support for multiline regular expressions.\r\nSemantics between how multiline works in Ruby and JS is very big,\r\nas in, those are basically two different features. This commit\r\naims to reconcile those two features in the most straightforward\r\nway. This commit introduces quite proper handling of all \"\\A\",\r\n\"\\z\", \"$\", \"^\". It is our opinion, that a regexp will contain\r\nonly one set of those in which case things will work correctly.\r\nIf not, then we launch a warning.\r\n\r\nRegexps are now annotated if needed. This means, that if a certain\r\nregexp has been transpiled and the transpilation result differs,\r\nthe copy of the original Regexp will be preserved, so that further\r\nmanipulations on that Regexp, for instance `Regexp.union`, will\r\nwork on an original Regexp.\r\n\r\nThis PR has been sponsored by Ribose Inc.",
    "head_branch": "hmdne/utf16",
    "is_a_fork": false,
    "comments": [
      "The performance impact must be investigated.",
      "The third iteration of this patch fixes a problem where a regexp like `[^a]` would be treated as containing `^` assertion.",
      "This has been superseded by https://github.com/opal/opal/pull/2710 (now merged)."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ea8d6ca63ac8d87e9b9",
    "number": 2609,
    "body": "In particular, this has been found whenever codebase uses freeze a lot, for instance opal compiled by opal.\r\n\r\nIn addition, this fixes a possible performance problem of codebases that use `instance_variables` method.",
    "head_branch": "hmdne/perf-reg",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2609 from opal/hmdne/perf-reg\n\nFix a performance regression introduced by freezing support."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ea9d6ca63ac8d87e9ba",
    "number": 2607,
    "body": "This PR is sponsored by Ribose Inc.",
    "head_branch": "hmdne/yaml",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208eaad6ca63ac8d87e9bb",
    "number": 2606,
    "body": "Closes #2312",
    "head_branch": "underscore_args",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2606 from takaram/underscore_args\n\nAssign correct values to underscore parameters"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208eaad6ca63ac8d87e9bc",
    "number": 2605,
    "body": "`Kernel.printf` can take an IO object as its first argument.\r\n\r\nSee https://docs.ruby-lang.org/en/3.2/Kernel.html#method-i-printf",
    "head_branch": "printf_io",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2605 from takaram/printf_io\n\nSupport an IO argument of `Kernel.printf`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208eabd6ca63ac8d87e9bd",
    "number": 2603,
    "body": null,
    "head_branch": "freeze_clone",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2603 from janbiedermann/freeze_clone\n\n`Hash#clone` must freeze clone if original is frozen, but `Hash#dup` must not"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208eacd6ca63ac8d87e9be",
    "number": 2602,
    "body": "`Array#each` and other methods which apply the given block to each element should iterate over all elements including ones newly inserted by the block during the iteration.",
    "head_branch": "array_loop_methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2602 from takaram/array_loop_methods\n\nArray methods should handle elements inserted during the iteration"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208eadd6ca63ac8d87e9bf",
    "number": 2601,
    "body": "This pull request is sponsored by Ribose Inc.",
    "head_branch": "hmdne/cgi",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2601 from opal/hmdne/cgi\n\nCGI::Util: implement a couple additional methods"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208eaed6ca63ac8d87e9c0",
    "number": 2600,
    "body": "Avoid `Array.prototype.indexOf`, which does linear search.\r\n\r\nThis improves performance of `Module#instance_methods` and `Object#methods` much.\r\n\r\n```console\r\n$ # on master\r\n$ time bin/opal -e '2000.times { String.instance_methods }'\r\n\r\nreal    0m3.197s\r\nuser    0m2.642s\r\nsys     0m0.217s\r\n$ time bin/opal -e '2000.times { \"\".methods }'\r\n\r\nreal    0m3.217s\r\nuser    0m2.639s\r\nsys     0m0.247s\r\n\r\n$ # on this branch\r\n$ time bin/opal -e '2000.times { String.instance_methods }'\r\n\r\nreal    0m1.367s\r\nuser    0m0.995s\r\nsys     0m0.175s\r\n$ time bin/opal -e '2000.times { \"\".methods }'\r\n\r\nreal    0m1.371s\r\nuser    0m1.039s\r\nsys     0m0.126s",
    "head_branch": "optimize_instance_methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2600 from takaram/optimize_instance_methods\n\nOptimize `Opal.instance_methods`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208eafd6ca63ac8d87e9c1",
    "number": 2598,
    "body": "These four methods are very similar, but bit different.This PR makes these methods more compatible with CRuby.",
    "head_branch": "range_include",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2598 from takaram/range_include\n\nImprove `Range#include?`/`member?`/`cover?`/`===`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208eb0d6ca63ac8d87e9c2",
    "number": 2597,
    "body": "Reuse the same options object in the $prop helper, this should help performance by reducing object allocation.",
    "head_branch": "elia/reuse-prop-object",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2597 from opal/elia/reuse-prop-object\n\nOptimize the `$prop` helper"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208eb1d6ca63ac8d87e9c3",
    "number": 2596,
    "body": "`self < foo` will not necessarily return boolean (e.g. `Module#<` may return nil), so we cannot skip `$truthy`.",
    "head_branch": "nil-check-for-self-comparison",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2596 from takaram/nil-check-for-self-comparison\n\nDo not skip `$truthy` when lhs is self"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208eb2d6ca63ac8d87e9c4",
    "number": 2595,
    "body": null,
    "head_branch": "hmdne/loop-opt",
    "is_a_fork": false,
    "comments": [
      "This will work in most cases, but there is an edge case:\r\n\r\n```console\r\n$ bin/opal -e 'loop(&-> { return })'\r\n\r\n/tmp/opal-system-runner20231004-47362-rqbq0f.js:5473\r\n        } else { throw $err; }\r\n                 ^\r\n{\r\n  '$thrower_type': 'return',\r\n  '$throw': [Function: $throw],\r\n  is_orphan: false,\r\n  '$v': klass {\r\n    '$$id': 4,\r\n    apply: [Function (anonymous)],\r\n    call: [Function (anonymous)],\r\n    '$$frozen': true,\r\n    '$$comparable': false\r\n  }\r\n}\r\n```\r\n\r\nActually this problem was there (for all `yield` calls) until v1.8.0.alpha1 and fixed in #2591.",
      "Thanks for the heads up! In fact, when doing the closure tracking part, I ensured that such an expression would simply compile to `return nil`, I guess I will have to revisit that part.",
      "This can be fixed by `Proc#call`.\r\nHowever, considering there are many `block()` calls in corelib codes, maybe it's better to make lambda function handle the thrower  by itself rather than fixing this patch."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208eb3d6ca63ac8d87e9c5",
    "number": 2594,
    "body": null,
    "head_branch": "hmdne/nice-nil",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208eb4d6ca63ac8d87e9c6",
    "number": 2593,
    "body": "This PR fixes several things about `Module#define_method`.\r\n\r\n- Methods defined by `define_method` with UnboundMethod accept a block \r\n  - Closes #2574\r\n- `define_method` tries to convert the first argument to String using `to_str`\r\n  - `Module#remove_method` and `Module#undef_method` share the same logic\r\n- `define_method` ignores the block when the second argument is passed\r\n- `define_method` raises TypeError if the passed method's owner is the receiver's child or unrelated class",
    "head_branch": "define_method",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2593 from takaram/define_method\n\nMake `Module#define_method` more compatible with CRuby"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208eb5d6ca63ac8d87e9c7",
    "number": 2592,
    "body": "This should improve performance a little, so that we don't have to reparse the backtrace for exceptions when we don't need it.",
    "head_branch": "hmdne/dynamic-backtrace",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2592 from opal/hmdne/dynamic-backtrace\n\nCompute `$@` dynamically"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208eb6d6ca63ac8d87e9c8",
    "number": 2591,
    "body": "Orphaned `Proc` objects will throw `LocalJumpError` on return or break.\r\nSee https://ruby-doc.org/3.2.2/Proc.html#class-Proc-label-Orphaned+Proc\r\n\r\nSome related bugs are fixed too.",
    "head_branch": "local_jump_error",
    "is_a_fork": true,
    "comments": [
      "This PR caused a significant failure at some codebase I'm working on (namely - https://github.com/plurimath-js/plurimath-js ). I will give more info when I get to debug it."
    ],
    "commit_messages": [
      "Merge pull request #2591 from takaram/local_jump_error\n\nUnexpected return/break should raise LocalJumpError"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208eb7d6ca63ac8d87e9c9",
    "number": 2590,
    "body": "* Fix MSpec INVERT_RUNNING_MODE\r\n* Update MSpec specs\r\n* Fix smoke test regarding Opal-RSpec 1.1",
    "head_branch": "hmdne/chore",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2590 from opal/hmdne/chore\n\nChore"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208eb8d6ca63ac8d87e9ca",
    "number": 2589,
    "body": "tiny improvement",
    "head_branch": "literal_speed",
    "is_a_fork": true,
    "comments": [
      "![grafik](https://github.com/opal/opal/assets/30776880/35a95814-fc2d-4908-a067-6c7af779ae92)\r\n\r\nTry the same with assignment, how we use it",
      "![grafik](https://github.com/opal/opal/assets/30776880/88c838f8-de66-4c65-a5e7-9034d7090ca3)\r\n\r\nNot so tiny at all"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208eb9d6ca63ac8d87e9cb",
    "number": 2586,
    "body": null,
    "head_branch": "build_bridge_with_ropes",
    "is_a_fork": true,
    "comments": [
      "Also, take a look at the prior work on this matter:\r\n\r\nhttps://github.com/opal/opal/pull/2344",
      "So the last patch makes bridge for subclasses work and no longer cuts of the prototype chain\r\n```\r\nclass A { a() {return 'a'}}\r\nclass B extends A { b(){return 'b'}}\r\nclass C extends B { c(){return 'c'}}\r\nOpal.klass(Opal.Kernel, C, 'C')\r\n\r\nd = Opal.Kernel.C.$new()\r\nd.c() -> 'c' - worked before\r\nd.b() -> 'b'  - before b() was gone, now works\r\nd.a() -> 'a' - before a() was gone, now works\r\n```\r\nThere are still issues though\r\n\r\n",
      "At this stage the following works:\r\n```ruby\r\nrequire 'engine'\r\n# Engine now allow access to globalThis, so in the browser for example\r\nEngine.history.length # -> 2\r\n```\r\nmanually in the browser console in js:\r\n```\r\nEngine.$send('history').$send('length') // -> 2\r\n```\r\n#send is required, because method_missing is used",
      "further works:\r\n```\r\nrequire 'engine'\r\nEngine.history.class.name # -> Engine::History\r\n\r\na = Engine::ArrayBuffer.new()\r\na.class.name # -> Engine::ArrayBuffer\r\n```\r\nthe last one in js:\r\n```\r\nOpal.Engine.$const_get('ArrayBuffer').$new().$class().$name() // -> 'Engine::ArrayBuffer'\r\n```\r\n",
      "I kind of fail to understand what Opal::Engine does. Is it yet another wrapping solution? Wouldn't it be a better idea to split that to another PR?",
      "Possibly, its handy for testing things, as its the goal to have automatic, easy and compact access to JS APIs and values. Once everything is working i may make that another PR or not, we will see",
      "For correctness when using Engine for testing the bridges proeprties must be accessed by [], eg:\r\n```\r\nEngine[:history]\r\nEngine[:history][:length]\r\nEngine[:history].back\r\n```\r\nMay work more or less, anymway\r\nContinuing from here ... "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ebad6ca63ac8d87e9cc",
    "number": 2585,
    "body": "I just found a typo and fixed it.\r\nWithout this PR, below script gives a different result from CRuby, which seems to be a rare case.\r\n\r\n```ruby\r\nclass Foo\r\n  attr_reader :n\r\n\r\n  def initialize(n)\r\n    @n = n\r\n  end\r\n\r\n  def hash\r\n    @n % 10\r\n  end\r\n\r\n  def eql?(other)\r\n    @n == other.n\r\n  end\r\nend\r\n\r\nobj1 = Foo.new(1)\r\nobj2 = Foo.new(11)\r\nobj3 = Foo.new(11)\r\n\r\nhash = {}\r\nhash[obj1] = 'obj1'\r\nhash[obj2] = 'obj2'\r\nhash[obj3] = 'obj3'\r\n\r\np hash[obj3]\r\n```\r\n\r\n- Result\r\n  - CRuby: `\"obj3\"`\r\n  - Opal (master): `\"obj2\"`",
    "head_branch": "fix-hash_put-typo",
    "is_a_fork": true,
    "comments": [
      "@janbiedermann can you take a look?",
      "(btw. smoke-test fail is expected, opal-rspec 1.1.0.alpha1 is only compatible with Ruby >= 3.1)"
    ],
    "commit_messages": [
      "Merge pull request #2585 from takaram/fix-hash_put-typo\n\nFix typo in `Opal.hash_put`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ebbd6ca63ac8d87e9cd",
    "number": 2584,
    "body": "Fixes #2583, introduced in #2481\r\n\r\nWould it be possible for this fix to be back-ported, for a 1.7.4 release?",
    "head_branch": "jsid-cache-map",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2584 from michaeljb/jsid-cache-map\n\n Use a Map instead of a POJO for the jsid_cache"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ebbd6ca63ac8d87e9ce",
    "number": 2582,
    "body": "This is a followup to opal/opal#2576. The idea is to ensure that `#hash` return integers, as Ruby does. We use a very lightweight hashing algorithm we have created for this purpose, called `Opal32` which should most of the time return unique values.",
    "head_branch": "hmdne/integer-hash",
    "is_a_fork": false,
    "comments": [
      "The updated changeset keeps the previous version of a Map of Strings/Floats, but only for calls on `#__id__`. Hash now correctly computes a hash for each type. `#__id__` needs uniqueness though.\r\n\r\nPerhaps a solution could be to use WeakMap with wrapped values. It would be great to benchmark that somehow, but unfortunately WeakMap does not seem to be inspectable.\r\n\r\ncc: @elia @takaram ",
      "@hmdne even if weakmap is not inspectable we can assess its performance from outside, especially if we can generate lots of objects and trigger garbage collection programmatically. That would ensure we can understand both the performance profile and the memory footprint. "
    ],
    "commit_messages": [
      "Merge pull request #2582 from opal/hmdne/integer-hash\n\n`#hash` now returns integers"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ebcd6ca63ac8d87e9cf",
    "number": 2581,
    "body": "This fixes an issue with an upcoming patch to Opal-RSpec. In particular, embedding JSON in a `<script>` tag is not foolproof, as it may contain a string literal containing `</script>` ending the script tag prematurely.",
    "head_branch": "hmdne/chrome-runner-script-maps",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2581 from opal/hmdne/chrome-runner-script-maps\n\nChrome runner fix: support code that contains `</script>`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ebdd6ca63ac8d87e9d0",
    "number": 2580,
    "body": "## Changes\r\n* Removed the duplicated word `will` from the last sentence of `Running tests` section, which's inside `README.md` file.\r\n   \r\n   **Note:** The `README.md` noted above is the one inside Repo Root Folder, On the `master` Branch, which can be view by [clicking here](https://github.com/opal/opal/blob/master/README.md).\r\n\r\n* Made the `Automated runs` Sub-section of `Running test` have the same Heading Level as `MSpec` and `RSpec` Sub-sections, which's Level 3 Heading (###). And moved `Automated runs` to be the last Sub-section of `Running tests` Section, to make the Flow of Reading more \"digestible\" to New-Readers of opal.\r\n\r\n\r\n## Screenshot(s)\r\n![image](https://github.com/opal/opal/assets/70659536/82544c8d-1e36-4edd-9e0e-8c902721fdf7)\r\n*Picture1: A screenshot to provide some context*\r\n\r\n-----\r\n\r\n![image](https://github.com/opal/opal/assets/70659536/31e0c3b1-9a69-42bd-828e-b491e9b67c92)\r\n*Picture2: A screenshot showcasing the changes effect to `README.md` file.*",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Also may I ask a question before reviewing and/or merging this PR\r\n... Is this intended? or is it by accident?\r\n![image](https://github.com/opal/opal/assets/70659536/6009ddcb-cccf-4481-8e88-8c2af898f9a7)\r\nShouldn't these have the same Heading Levels, which looks like Level 3 (###) for every Sub-section of `Running tests`\r\nLike `MSpec` and `RSpec`...\r\n\r\nIf so (Made it Level 4 (####) by accident), I'll change it to Level 3 and force push the new changes.\r\n+Adding all the necessary changes to the Commit Message Body, and the PR Message as well.",
      "> If so (Made it Level 4 (####) by accident), I'll change it to Level 3 and force push the new changes.\r\n> +Adding all the necessary changes to the Commit Message Body, and the PR Message as well.\r\n\r\nI think it could have been intentional, giving less relevance to the guard-file section than the mspec section, but if it looks odd to you (as a fresh readme reader) I'd be happy to change it. After all this should favor newcomers! ",
      "If the new changes, which I've amended/force-pushed, are not good enough/not welcomed, Please provide why so we could understand the \"problem\" at hand in `README.md` and come up with a good solution.\r\nI'll try and reply as soon as I could 👍 ",
      "Thanks! Let's merge it :D",
      "Glad I could help 🤍 "
    ],
    "commit_messages": [
      "Merge pull request #2580 from og-mrk/patch-1\n\nFix Typo in `Running tests` Section of `README.md` File"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ebed6ca63ac8d87e9d1",
    "number": 2579,
    "body": "Makes PromiseV2 more compatible with PromiseV1",
    "head_branch": "promise_always",
    "is_a_fork": true,
    "comments": [
      "Things i would still like to do (soon):\r\n- mark the other private methods private\r\n- make V2 work in c-Ruby\r\n- make it isomorphically available in lib, not necessarily required, but would be nice\r\n- \"refactor\" for codeclimate",
      ">make V2 work in c-Ruby\r\n\r\nWell... I'm afraid we would need to use V1 not V2, but both are mostly compatible (we are finding incompatibilities just now).\r\n\r\n>make it isomorphically available in lib\r\n\r\nCreating an isomorphic core is a great idea. But - I'd say, we would want to rename it to Opal::Promise perhaps."
    ],
    "commit_messages": [
      "Merge pull request #2579 from janbiedermann/promise_always\n\nPass value in PromiseV2#always just like PromiseV1#always does it"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ebfd6ca63ac8d87e9d2",
    "number": 2578,
    "body": "Lowercase all response headers beause in `rack` 3.0 _response header keys can no longer include uppercase characters._\r\n\r\n```\r\n> $ bundle exec rackup\r\nBundler is using a binstub that was created for a different gem (rackup).\r\nYou should run `bundle binstub rack` to work around a system/bundle conflict.\r\n[2023-09-10 15:44:27] INFO  WEBrick 1.8.1\r\n[2023-09-10 15:44:27] INFO  ruby 3.2.2 (2023-03-30) [arm64-darwin22]\r\n[2023-09-10 15:44:27] INFO  WEBrick::HTTPServer#start: pid=16933 port=9292\r\nRack::Lint::LintError: uppercase character in header name: Content-Type (Rack::Lint::LintError)\r\n  /Users/wilson/.asdf/installs/ruby/3.2.2/lib/ruby/gems/3.2.0/gems/rack-3.0.8/lib/rack/lint.rb:653:in `block in check_headers'\r\n  /Users/wilson/.asdf/installs/ruby/3.2.2/lib/ruby/gems/3.2.0/gems/rack-3.0.8/lib/rack/lint.rb:637:in `each'\r\n  /Users/wilson/.asdf/installs/ruby/3.2.2/lib/ruby/gems/3.2.0/gems/rack-3.0.8/lib/rack/lint.rb:637:in `check_headers'\r\n  /Users/wilson/.asdf/installs/ruby/3.2.2/lib/ruby/gems/3.2.0/gems/rack-3.0.8/lib/rack/lint.rb:73:in `response'\r\n  /Users/wilson/.asdf/installs/ruby/3.2.2/lib/ruby/gems/3.2.0/gems/rack-3.0.8/lib/rack/lint.rb:35:in `call'\r\n  /Users/wilson/.asdf/installs/ruby/3.2.2/lib/ruby/gems/3.2.0/gems/rack-3.0.8/lib/rack/show_exceptions.rb:27:in `call'\r\n  /Users/wilson/.asdf/installs/ruby/3.2.2/lib/ruby/gems/3.2.0/gems/rack-3.0.8/lib/rack/common_logger.rb:43:in `call'\r\n  /Users/wilson/.asdf/installs/ruby/3.2.2/lib/ruby/gems/3.2.0/gems/rack-3.0.8/lib/rack/content_length.rb:20:in `call'\r\n  /Users/wilson/.asdf/installs/ruby/3.2.2/lib/ruby/gems/3.2.0/gems/rackup-2.1.0/lib/rackup/handler/webrick.rb:111:in `service'\r\n  /Users/wilson/.asdf/installs/ruby/3.2.2/lib/ruby/gems/3.2.0/gems/webrick-1.8.1/lib/webrick/httpserver.rb:140:in `service'\r\n  /Users/wilson/.asdf/installs/ruby/3.2.2/lib/ruby/gems/3.2.0/gems/webrick-1.8.1/lib/webrick/httpserver.rb:96:in `run'\r\n  /Users/wilson/.asdf/installs/ruby/3.2.2/lib/ruby/gems/3.2.0/gems/webrick-1.8.1/lib/webrick/server.rb:310:in `block in start_thread'\r\n::1 - - [10/Sep/2023:15:44:35 +0700] \"GET / HTTP/1.1\" 500 63466 0.0115\r\nRack::Lint::LintError: uppercase character in header name: Content-Type (Rack::Lint::LintError)\r\n  /Users/wilson/.asdf/installs/ruby/3.2.2/lib/ruby/gems/3.2.0/gems/rack-3.0.8/lib/rack/lint.rb:653:in `block in check_headers'\r\n  /Users/wilson/.asdf/installs/ruby/3.2.2/lib/ruby/gems/3.2.0/gems/rack-3.0.8/lib/rack/lint.rb:637:in `each'\r\n  /Users/wilson/.asdf/installs/ruby/3.2.2/lib/ruby/gems/3.2.0/gems/rack-3.0.8/lib/rack/lint.rb:637:in `check_headers'\r\n  /Users/wilson/.asdf/installs/ruby/3.2.2/lib/ruby/gems/3.2.0/gems/rack-3.0.8/lib/rack/lint.rb:73:in `response'\r\n  /Users/wilson/.asdf/installs/ruby/3.2.2/lib/ruby/gems/3.2.0/gems/rack-3.0.8/lib/rack/lint.rb:35:in `call'\r\n  /Users/wilson/.asdf/installs/ruby/3.2.2/lib/ruby/gems/3.2.0/gems/rack-3.0.8/lib/rack/show_exceptions.rb:27:in `call'\r\n  /Users/wilson/.asdf/installs/ruby/3.2.2/lib/ruby/gems/3.2.0/gems/rack-3.0.8/lib/rack/common_logger.rb:43:in `call'\r\n  /Users/wilson/.asdf/installs/ruby/3.2.2/lib/ruby/gems/3.2.0/gems/rack-3.0.8/lib/rack/content_length.rb:20:in `call'\r\n  /Users/wilson/.asdf/installs/ruby/3.2.2/lib/ruby/gems/3.2.0/gems/rackup-2.1.0/lib/rackup/handler/webrick.rb:111:in `service'\r\n  /Users/wilson/.asdf/installs/ruby/3.2.2/lib/ruby/gems/3.2.0/gems/webrick-1.8.1/lib/webrick/httpserver.rb:140:in `service'\r\n  /Users/wilson/.asdf/installs/ruby/3.2.2/lib/ruby/gems/3.2.0/gems/webrick-1.8.1/lib/webrick/httpserver.rb:96:in `run'\r\n  /Users/wilson/.asdf/installs/ruby/3.2.2/lib/ruby/gems/3.2.0/gems/webrick-1.8.1/lib/webrick/server.rb:310:in `block in start_thread'\r\n::1 - - [10/Sep/2023:15:44:35 +0700] \"GET /favicon.ico HTTP/1.1\" 500 62556 0.0219\r\n```\r\n\r\nhttps://github.com/rack/rack/blob/main/UPGRADE-GUIDE.md#rack-2--rack-3-compatibility",
    "head_branch": "rack-3.0-compatibility",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2578 from wilsonsilva/rack-3.0-compatibility\n\nLowercase response headers for rack 3.0 compatibility"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ec0d6ca63ac8d87e9d3",
    "number": 2577,
    "body": "The \"Nebulab\" sponsor logo image is broken, use [this](https://github.com/solidusio/solidus/blob/main/README.md?plain=1#L46C13-L46C106) instead.\r\n\r\n**Before**\r\n<img width=\"315\" alt=\"Screenshot 2023-09-08 at 10 53 00\" src=\"https://github.com/opal/opal/assets/4095923/4bb2616c-2136-4134-b0d6-bf09473b6284\">\r\n\r\n**After**\r\n<img width=\"317\" alt=\"Screenshot 2023-09-08 at 10 52 49\" src=\"https://github.com/opal/opal/assets/4095923/f20ac3d5-8cb0-4cd3-8ae3-b014e99df68a\">\r\n\r\nCheck it [here](https://github.com/opal/opal/blob/8c15a3cc24d4b1b7d241723e7abf5636778555fa/README.md#sponsored-contributions)\r\n",
    "head_branch": "joseph/fix-readme-nebulab-logo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2577 from josephschito/joseph/fix-readme-nebulab-logo\n\nFix \"Nebulab\" sponsor logo in readme"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ec1d6ca63ac8d87e9d4",
    "number": 2576,
    "body": "Closes #2257 ",
    "head_branch": "string-object_id",
    "is_a_fork": true,
    "comments": [
      "That's a very cool idea, but there are also wrapped Strings to be concerned about. The `#__id__` method should correspond to unique objects and wrapped Strings are unique (they may contain info about encoding, let's say). So for wrapped strings this could be just delegated to the default implementation, since they are mutable objects, unlike string literals (except for the non-strict mode, but we don't really want to care about it anymore).\r\n\r\nAlso, for the non-wrapped strings, we could use WeakMap, as this will facilitate garbage collection.",
      "> So for wrapped strings this could be just delegated to the default implementation\r\n\r\nThank you, I changed the code.\r\n\r\n> for the non-wrapped strings, we could use WeakMap\r\n\r\nUnfortunately, WeakMap doesn't accept primitive strings as keys.\r\nI agree that we should allow strings be garbege collected, but I need to investigate how I can realize that.",
      "Thanks! Well, if we can't use WeakMap, that likely means that string literals are never GC'ed. But let me take it from there, as I have an idea of changing `#hash` implementation throughout the codebase to also return Integers."
    ],
    "commit_messages": [
      "Merge pull request #2576 from takaram/string-object_id\n\nFix `String#object_id`, `String#__id__`, `String#hash`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ec2d6ca63ac8d87e9d5",
    "number": 2575,
    "body": "Also I'm removing the whole instanceof and valueOf check, since apparently it's not required anymore",
    "head_branch": "perf_2nd_Stage",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ec3d6ca63ac8d87e9d6",
    "number": 2573,
    "body": "Ref: #2144\r\n\r\nThis PR will explore ways to gradually move to new API that sets method keys using JavaScript symbols and make that API available before we do the full migration.",
    "head_branch": "hmdne/small-sym",
    "is_a_fork": false,
    "comments": [
      "```\r\n Comparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 4.536 (+25.22%) -> 4.490 (+24.91%) (change: -1.01%)\r\n                      Run time: 1.224 (+8.87%) -> 1.223 (+36.85%) (change: -0.02%)\r\n                   Bundle size: 4625.64 kB -> 4718.50 kB (change: +2.01%)\r\n          Minified bundle size: 990.33 kB -> 1074.65 kB (change: +8.51%)\r\n            Mangled & minified: 698.46 kB -> 687.68 kB (change: -1.54%)\r\n```\r\n\r\nThe performance is almost the same (even though we haven't introduced real Symbols yet). Bundle size increase for minified is expected."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ec4d6ca63ac8d87e9d7",
    "number": 2572,
    "body": "`Module#clone` and `Module#dup` had been defined, but it virtually didn't work since methods defined on the module were not copied.\r\n`Class#clone` and `Class#dup` had been returning `Module` instead of `Class`.\r\n\r\nThis PR implements `Module#clone`, `Module#dup`, `Class#clone` and `Clone#dup`.\r\n\r\nNote that this PR still doesn't support cloning bridged classes. e.g. `String.clone.new` raises an exception.",
    "head_branch": "module_clone",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2572 from takaram/module_clone\n\nFix Module#clone/dup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ec5d6ca63ac8d87e9d8",
    "number": 2571,
    "body": null,
    "head_branch": "hash_rehash_optimization",
    "is_a_fork": true,
    "comments": [
      "So synthecially measuring this line, this patch improves execution time for this line by ~120% for the common case, but here on github, this patch shows a slight negative overall effect in our benchmarks. What can i say ... "
    ],
    "commit_messages": [
      "Merge pull request #2571 from janbiedermann/hash_rehash_optimization\n\nHash#rehash - optimize for the common case, no hash collision, avoid calling $slice"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ec6d6ca63ac8d87e9d9",
    "number": 2570,
    "body": "Small changes, no need to refer to them in the changelog.",
    "head_branch": "hmdne/chore",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2570 from opal/hmdne/chore\n\nChore"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ec7d6ca63ac8d87e9da",
    "number": 2569,
    "body": "- use common constants\r\n- implement Date::_parse\r\n- use that for Date and DateTime::parse\r\n- add a few more formats\r\n- makes 27 more specs work\r\n\r\nStill to do:\r\n- add time formats to ::_parse\r\n- move _parse code to Time and attach to Opal.date_time_parse (because Time is loaded first and also can use it for Time::parse)\r\n- use Opal.date_time_parse from Date::_parse\r\n- also attach constants to Opal\r\n- also see https://rubyreferences.github.io/rubychanges/3.2.html#timenew-can-parse-a-string\r\n\r\nBonus, optional maybe todo, would be nice to have:\r\n- implement #cwyear  ",
    "head_branch": "yyyymmdd",
    "is_a_fork": true,
    "comments": [
      "I have rebased it on top of `master`, then ran `bundle exec rubocop -a` to fix the remaining lint errors. Ensure you mark it as ready for review once it is :D",
      "Thanks, it still needs some time until i have time to continue working on it"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ec8d6ca63ac8d87e9db",
    "number": 2568,
    "body": "Building on #2567 and Fixing #2514 ",
    "head_branch": "object_kwargs",
    "is_a_fork": true,
    "comments": [
      "This unifies Hash compilation by always using `(new Map())` in variations, depending on entries.\r\nThis also in a way allows Hashes with String objects as keys, if somehow inserted by JS, Hash#rehash must be called.\r\nIf object keys are generated by the compiler, it `$hash_rehash(new Map([', ']))` rehashes.",
      "```\r\nCompile time: 4.796 (+20.75%) -> 4.391 (+22.14%) (change: -8.44%)\r\n                      Run time: 1.326 (+7.66%) -> 1.280 (+31.78%) (change: -3.44%)\r\n                   Bundle size: 4640.89 kB -> 4616.75 kB (change: -0.52%)\r\n          Minified bundle size: 998.81 kB -> 988.40 kB (change: -1.04%)\r\n            Mangled & minified: 703.92 kB -> 697.24 kB (change: -0.95%)\r\n```\r\nStill looking good"
    ],
    "commit_messages": [
      "Merge pull request #2568 from janbiedermann/object_kwargs\n\nHash < `Map` V3 and support for Object kwargs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ec9d6ca63ac8d87e9dc",
    "number": 2567,
    "body": "Building on V2 #2563 , but there where 2 issues in general when using `Hash < Map`, one issue is, that keys of a Map are references and the second issue are hash collisions, where previously buckets where used as linked list of items with the same hash.\r\n\r\nHowever, if two different objects have the same hash, they still have different references, so we can use that together with the \"keys are references\" feature of Map and use the objects as keys directly.\r\n\r\nNow of course they would become unreachable, so we also use a $$keys Map internally, on demand, to map hash_keys of objects to the actual objects that are used as keys, basically mapping hash_keys to references, this way keeping objects reachable.\r\n\r\nSo we can directly map keys to values, no more buckets are needed.\r\n\r\nThis further simplifies Hash code overall.\r\n\r\nPrimitives \"string\", \"number\" and \"symbol\" (must be global) are directly used as keys.\r\n\r\nNow with this a ruby Hash can be exchanged with a Javascript Map freely, those primitive types above are directly accessible, like in V2, but now also objects as keys are directly accessible from JS ... by reference.\r\n\r\nNot sure how JS is supposed to have a reference to Opal Ruby objects or the other way around, how practical that is, if it ever gets used that way, but it works.\r\n\r\nIf a Hash is passed to JS, modified by JS and received back from JS, and it has Object keys added or modified by JS, calling Hash#rehash may be advisable to keep Objects accessible, but also may fail, if a JS object used as key doesn't have a .$hash() function.\r\n\r\nIn other words, if a Opal Ruby Hash is passed to JS, within JS as Map it behaves like Hash#compare_by_identity",
    "head_branch": "hash_map_version_3",
    "is_a_fork": true,
    "comments": [
      "```\r\nCompile time: 4.723 (+23.87%) -> 4.487 (+34.14%) (change: -5.00%)\r\n                      Run time: 1.409 (+6.54%) -> 1.380 (+35.46%) (change: -2.06%)\r\n                   Bundle size: 4640.89 kB -> 4618.10 kB (change: -0.49%)\r\n          Minified bundle size: 998.81 kB -> 988.38 kB (change: -1.04%)\r\n            Mangled & minified: 703.92 kB -> 697.18 kB (change: -0.96%)\r\n```\r\nLooking good\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ecad6ca63ac8d87e9dd",
    "number": 2566,
    "body": "Could not find specs for it in spec/ruby",
    "head_branch": "cgi",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2566 from janbiedermann/cgi\n\nAdd CGI::Util#(un)escapeURIComponent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ecbd6ca63ac8d87e9de",
    "number": 2565,
    "body": "in a few places\r\n\r\nAlso initialize doesnt need to splice if length is 0, faster",
    "head_branch": "fix_array_limits",
    "is_a_fork": true,
    "comments": [
      "Looks like it has a positive effect on the compiler too:\r\n```\r\nCompile time: 4.550 (+26.76%) -> 4.311 (+21.89%) (change: -5.25%)\r\n    Run time: 1.329 (+11.89%) -> 1.327 (+33.74%) (change: -0.14%)\r\n```"
    ],
    "commit_messages": [
      "Merge pull request #2565 from janbiedermann/fix_array_limits\n\nImprove `Array.push()` performance when pushing many items"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208eccd6ca63ac8d87e9df",
    "number": 2564,
    "body": "This PR explores using null as nil\r\n\r\nThe idea is to keep the Opal.nil object as method receiver, but otherwise use null.\r\nWhenever a method is send to null, it will be diverted to Opal.nil instead.\r\n\r\nJavascript operators that may be helpful in this endavour: `??`, `??=`, `?.`\r\n\r\n@hmdne raised concern, that this may conflict with the great symbolization.\r\n\r\nAlso its not clear, if this will work at all, however, using null as nil would be of major advantage when interacting with javascript libraries, as nil has proven to be major troublemaker, not understood by JS, and null not well understood by Ruby world.\r\n\r\nWalking slowly and using tiny steps here ... ",
    "head_branch": "null_as_nil",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ecdd6ca63ac8d87e9e0",
    "number": 2563,
    "body": "based on #2562\r\n\r\nLets see, if there is performance to gain from using Map ...",
    "head_branch": "hash_map_version_2",
    "is_a_fork": true,
    "comments": [
      "```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 5.769 (+23.35%) -> 5.692 (+18.59%) (change: -1.32%)\r\n                      Run time: 2.013 (+7.74%) -> 1.967 (+28.49%) (change: -2.30%)\r\n                   Bundle size: 4640.89 kB -> 4621.20 kB (change: -0.42%)\r\n          Minified bundle size: 998.81 kB -> 989.06 kB (change: -0.98%)\r\n            Mangled & minified: 703.92 kB -> 694.75 kB (change: -1.30%)\r\n```\r\nA bit faster, there may be some room for optimizations here and there.",
      "Now there is a literal Hash mode, for typeof \"string\", \"number\" and global \"symbol\" keys, which uses Hash < Map itself, the JS Map, literally, for key and values. This makes `$hash2()` obsolete, replaced by `(new Map())`\r\n\r\nIf a object is passed as key, Hash is transformed to object mode, which uses a self.$$buckets array for buckets and uses the map  as `key_hash => bucket list` store, well just as the $$map before.\r\n\r\nThe good news is, in literal Mode a JS Map is interchangable with a Ruby Hash, although #freeze is not honored by JS.\r\n\r\nThe bad news, in object mode, interchanging a JS Map with a Hash is mostly useless, as before, and 30 specs are still failing for no reason, apparently ;).\r\n",
      "```\r\n                  Compile time: 4.649 (+18.10%) -> 4.553 (+15.33%) (change: -2.05%)\r\n                      Run time: 1.393 (+5.69%) -> 1.358 (+7.82%) (change: -2.54%)\r\n                   Bundle size: 4640.89 kB -> 4628.17 kB (change: -0.27%)\r\n          Minified bundle size: 998.81 kB -> 990.23 kB (change: -0.86%)\r\n            Mangled & minified: 703.92 kB -> 698.44 kB (change: -0.78%)\r\n```\r\nPerformance and asset size look good.\r\n",
      "There is a performance trade off here. Performance is gained because of using literal Map for kwargs ans Hashes with simple keys, but at the same time performance is lost when iterating through entries, because arrays for entries or copies of $$bucket are created each time, more often than before. See the introduced $hash_each() helper.",
      "closing in favour of #2567"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208eced6ca63ac8d87e9e1",
    "number": 2562,
    "body": "After the positive experience of #2561 this PR explores if the $$smap optimization of Hash is still justified.\r\n\r\nIt removes the $$smap completely, having one less Object.create(null), saving time and memory.\r\n\r\nAlso the code having less branches and smaller functions, may allow modern JS engines to optimize better and overall produce better results.\r\n\r\nIn addition this PR serves as guidance how to maybe implement Hash < Map in a better way than #2559 does, basically then using self as $$map while keeping $$keys.",
    "head_branch": "hash_without_smap",
    "is_a_fork": true,
    "comments": [
      "Now look at that:\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 4.472 (+20.06%) -> 4.290 (+24.87%) (change: -4.06%)\r\n                      Run time: 1.305 (+7.84%) -> 1.299 (+21.72%) (change: -0.49%)\r\n                   Bundle size: 4640.89 kB -> 4657.63 kB (change: +0.36%)\r\n          Minified bundle size: 998.81 kB -> 1016.60 kB (change: +1.78%)\r\n            Mangled & minified: 703.92 kB -> 722.13 kB (change: +2.59%)\r\n```\r\nIts even faster!\r\n\r\nWell, on github that is, it may be flawed, please somebody run on your own machine, to verify and report. Thanks.\r\n(my machines shows equal results, but also it has problems with throttling due to summer heat, producing unreliable results)",
      "closing in favour of #2567"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ecfd6ca63ac8d87e9e2",
    "number": 2561,
    "body": "This makes $hash2 ~23% faster, likewise $hash_init.\r\nAlso benefits general Hash performance for the common case using string keys.\r\nI measured no penalty for object keys.\r\n\r\nThis is a experiment, meant as companion for #2558 , compensating the penalty of using Object.create(null) consistently everywhere for Hash $$map and $$smap.\r\n",
    "head_branch": "hash_map_on_demand",
    "is_a_fork": true,
    "comments": [
      "There is a quirk though https://github.com/opal/opal/blob/0976f9e33ae1961f211564ec86a43f3ff4f4b103/opal/corelib/runtime.js#L2312\r\n\r\nkeeping it for now, will resolve in #2558 when ready",
      "No longer experimental instead ready. Applications with heavy usage of `$hash2` or `hash_init` with `$$is_string` keys should benefit, kwargs usage for example.\r\n\r\nActually the Compiler itself would be such application that benefits:\r\nGithub: Compile time: 4.849 (+22.29%) -> 4.455 (+29.00%) (change: -8.12%)",
      "closing in favour of #2567"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ecfd6ca63ac8d87e9e3",
    "number": 2560,
    "body": null,
    "head_branch": "my_sweet_16_perf_optimization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2560 from merceroncode/my_sweet_16_perf_optimization\n\n`String`: Optimize `split`, `start_with`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ed0d6ca63ac8d87e9e4",
    "number": 2559,
    "body": "use Javascript Map class as Opal Hash\r\n\r\ncurrently partially working",
    "head_branch": "use_map_as_hash",
    "is_a_fork": true,
    "comments": [
      "Why use Map?\r\n- keeps order of assignment like Hash\r\n- can use any js type/object as key, like Hash\r\n- is in some cases even faster than JS Objects\r\n- for sure faster than maintaining 2 Objects and a Array, what Hash currently does internally\r\n- saves some code, as all the code for maintaining 2 Objects and a Array can go\r\n- no value vs prototype issues (Object.create(null))",
      "I was working on a similar patchset. One thing to note is that...\r\n\r\nRuby hash has 2 modes:\r\n- compare_by_identity - `#__id__` semantics (this I think may be close to what JS does)\r\n- default - `#hash` and `#eql?` semantics for Hash (internally Ruby creates a number of buckets keyed by `#hash` and additionally checks `#eql?`)\r\n\r\nThis patchset would break both of those semantics. Question is if that's OK for us.",
      "And another problem is the \"key by reference\"-issue:\r\n```\r\nm.set([1], 2)\r\nm.get([1]) => undefined\r\n\r\na = [1]\r\nm.set(a, 2)\r\nm.get(a) => [1]\r\n```\r\n\r\nstill needs a workaround for that.",
      "So non literal Hash key access may be slow, as it walks through keys comparing them. That unfortunately includes JS Symbol and others, so these may need conversion to a literal, as future optimization if JS Symbol is used as Ruby Symbol or something else.",
      "Ruby Hash specs test for certain implementation details, that, using Map as bridged Class, are not necessary to be implemented and executed. Implementing them would even hurt performance. Anyway, Hash < Map is possible, can be made to work, would probably work well enough, saves some code, but because of missing spec compliance i will pause this attempt and look for another way.",
      "Closing in favour of #2563 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ed1d6ca63ac8d87e9e5",
    "number": 2558,
    "body": "As $$smap is mostly a Object.create(null) and it is completely in control of Opal it can be assumed, that all its props are \"own\", so checking for existence with typeof $$smap[prop] === \"undefined\" should be sufficient and multiple times faster than using $has_own.\r\n\r\nThere is one place, where regular Objects are used for $$smap, that is, when the compiler creates a $hash2 creating a regular {} inline object from context.\r\n\r\nLets see the effect first ...",
    "head_branch": "typeof_instead_of_has_own",
    "is_a_fork": true,
    "comments": [
      "i previously messed up $$smap and $$map",
      "```\r\nbundle exec opal --dynamic-require ignore --missing-require ignore -ropal/platform -gbenchmark-ips -rbenchmark/ips -A benchmark-ips/bm_hash_get.rb\r\nWarming up --------------------------------------\r\n         old_version   172.296k i/100ms\r\n         new_version   177.152k i/100ms\r\nCalculating -------------------------------------\r\n         old_version      5.488M (± 3.3%) i/s -     27.395M in   4.998200s\r\n         new_version      6.040M (± 4.5%) i/s -     30.116M in   4.998255s\r\n\r\nComparison:\r\n         new_version:  6040384.6 i/s\r\n         old_version:  5487952.3 i/s - 1.10x  slower\r\n```\r\n~10% win for $hash_get, simple case",
      "```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 3.374 (+29.47%) -> 3.283 (+30.52%) (change: -2.70%)\r\n                      Run time: 1.341 (+3.50%) -> 1.335 (+8.68%) (change: -0.41%)\r\n                   Bundle size: 4640.89 kB -> 4641.12 kB (change: +0.00%)\r\n          Minified bundle size: 998.81 kB -> 998.81 kB (change: -0.00%)\r\n            Mangled & minified: 703.92 kB -> 703.98 kB (change: +0.01%)\r\n```\r\nOverall it shows a slight gain.",
      "Summary:\r\n- Hash access can be 10% faster\r\n- consistent use of null prototype objects nullifies overall performance gain for asciidoctor",
      "Now showing a tiny overall gain for asciidoctor",
      "Closing this in favour of #2561 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ed2d6ca63ac8d87e9e6",
    "number": 2557,
    "body": "no point using Object.create with null as arg, as it only returns a empty object, which can be inlined, no function call needed, faster",
    "head_branch": "dont_create_objects",
    "is_a_fork": true,
    "comments": [
      "according to the benchmark report, that failed, unless something went wrong\r\naccording to my synthetic benchmarks run locally, it should be faster\r\n\r\nneed to investigate",
      "ips for $hash2 shows a benefit for hash creation:\r\n```\r\nWarming up --------------------------------------\r\n             old_way   166.073k i/100ms\r\n             new_way   171.379k i/100ms\r\nCalculating -------------------------------------\r\n             old_way      4.942M (± 3.5%) i/s -    157.935M in  32.003285s\r\n             new_way      5.263M (± 5.8%) i/s -    167.780M in  32.021167s\r\n```",
      "Ok, benefit became visible, however, i understand now, that Object.create(null) is used to get clear Objects {}, because Opal modifies the Object prototype. This may safe some memory, but using {} is faster anyway.\r\nIll experiment a bit more, maybe can have both benefits.",
      "For the record\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 4.797 (+23.29%) -> 4.776 (+32.43%) (change: -0.44%)\r\n                      Run time: 1.379 (+12.84%) -> 1.365 (+36.10%) (change: -1.00%)\r\n                   Bundle size: 4640.89 kB -> 4640.45 kB (change: -0.01%)\r\n          Minified bundle size: 998.81 kB -> 998.62 kB (change: -0.02%)\r\n            Mangled & minified: 703.92 kB -> 703.73 kB (change: -0.03%)\r\n```",
      "No, i was wrong, Opal does not modify the prototype of {}.",
      "Talking with @hmdne , the trade off is between object creation vs property access, here the property access:\r\n```\r\nWarming up --------------------------------------\r\n             old_way   184.811k i/100ms\r\n             new_way   183.579k i/100ms\r\nCalculating -------------------------------------\r\n             old_way      6.085M (± 3.6%) i/s -    194.421M in  31.994209s\r\n             new_way      5.708M (± 3.8%) i/s -    182.478M in  32.021663s\r\n```\r\nproperty access for Objects created with .create(null) is faster, because there is no prototype to check",
      "Another way to create Objects inline without prototype would be to use `{ __proto__: null }`\r\nHowever benchmarks show:\r\n```\r\n.create(null)          55 Mio. ops/s ± 3.62%\r\n{}                    505 Mio. ops/s ± 4.65%\r\n{ __proto__: null }    31 Mio. ops/s ± 2.87%\r\n```",
      "So with this PR i confirmed, that using Object.create(null) at places overall is currently the best solution"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ed3d6ca63ac8d87e9e7",
    "number": 2556,
    "body": "This is so that we don't need to capture the stacktrace each time we want to use Ruby semantics of closures.\r\n\r\nThis should make Asciidoctor work ~15% faster.\r\n\r\nAuthored by: @merceroncode ",
    "head_branch": "hmdne/thrower-obj",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2556 from opal/hmdne/thrower-obj\n\nClosure: Generate a JS object, not an Error"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ed4d6ca63ac8d87e9e8",
    "number": 2555,
    "body": null,
    "head_branch": "hmdne/use-slice-more",
    "is_a_fork": false,
    "comments": [
      "But what if we would use $slice... less?",
      "Performance gains are consistent with what I have on my local machine:\r\n\r\n```\r\n                  Compile time: 2.039 (+57.63%) -> 1.757 (+44.66%) (change: -13.87%)\r\n                      Run time: 1.132 (+5.91%) -> 1.117 (+8.89%) (change: -1.37%)\r\n                   Bundle size: 4641.68 kB -> 4640.88 kB (change: -0.02%)\r\n          Minified bundle size: 999.02 kB -> 998.81 kB (change: -0.02%)\r\n            Mangled & minified: 704.10 kB -> 703.92 kB (change: -0.03%)\r\n",
      "Love it"
    ],
    "commit_messages": [
      "Merge pull request #2555 from opal/hmdne/use-slice-more\n\nUse $slice more in corelib for possible performance gains"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ed5d6ca63ac8d87e9e9",
    "number": 2554,
    "body": "Rubocop now does the reverse...\r\n\r\nNo need to add anything to CHANGELOG.\r\n\r\nReverts opal/opal#2549",
    "head_branch": "revert-2549-hmdne/rubocop-fixes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2554 from opal/revert-2549-hmdne/rubocop-fixes\n\nRevert \"Rubocop fix\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ed6d6ca63ac8d87e9ea",
    "number": 2553,
    "body": "How does including/prepending a module work in Opal in short - we create a new JavaScript \"class\" so to speak, called an `iclass`. We copy the methods from a module to that `iclass` and then we inject that `iclass` into the prototype chain.\r\n\r\nUnfortunately, before this commit, if a method was removed from a module, an iclass wouldn't get updated.\r\n\r\nThis was needed for Flexmock to work under Opal. I believe this will also allow us to make RSpec-Mocks to pass a lot more tests in Opal-RSpec.\r\n\r\nI am particularly excited about this fix :D\r\n\r\nThis PR has been sponsored by Ribose Inc. ref: plurimath/plurimath#159",
    "head_branch": "hmdne/iclass-remove-method",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2553 from opal/hmdne/iclass-remove-method\n\niclass: Propagate removal of method from including/prepending modules."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ed7d6ca63ac8d87e9eb",
    "number": 2552,
    "body": "This matches MRI behavior more closely and lets me run one of the libraries that depends on it dropping a Ruby exception.\r\n\r\nThis PR has been sponsored by Ribose Inc. ref: plurimath/plurimath#159",
    "head_branch": "hmdne/regexp-escape",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2552 from opal/hmdne/regexp-escape\n\nRegexp.escape: Cast to String or drop exception."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ed8d6ca63ac8d87e9ec",
    "number": 2551,
    "body": "Due to the course of time, nodejs/yaml has broken. This PR:\r\n- restores the functionality\r\n- adds a YAML.load method\r\n- adds minitest tests, so it wouldn't break again\r\n\r\nThis PR has been sponsored by Ribose Inc. ref: plurimath/plurimath#159",
    "head_branch": "hmdne/fix-nodejs-yaml",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2551 from opal/hmdne/fix-nodejs-yaml\n\nnodejs/yaml: restore functionality"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ed9d6ca63ac8d87e9ed",
    "number": 2550,
    "body": "This aims to improve performance of math-heavy procedures.\r\n\r\nBefore this commit, a code like `2 + 2` was compiled to `$rb_add(2,2)`\r\n\r\nNow, it's compiled to `(2+2)`.\r\n\r\nIn addition, this supports scope-aware local variables and constants.",
    "head_branch": "hmdne/type-inferrence",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208edad6ca63ac8d87e9ee",
    "number": 2549,
    "body": "Due to a rubocop upgrade, there was a warning that made our CI red.",
    "head_branch": "hmdne/rubocop-fixes",
    "is_a_fork": false,
    "comments": [
      "Merging this. No need to add anything to UNRELEASED."
    ],
    "commit_messages": [
      "Merge pull request #2549 from opal/hmdne/rubocop-fixes\n\nRubocop fix"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208edbd6ca63ac8d87e9ef",
    "number": 2548,
    "body": "There are many syntax errors in RubySpec when ran in reverse, while there shouldn't be (they should be catchable errors) - at least since Node 17.\r\n\r\nThis fixes #2523",
    "head_branch": "hmdne/fix-2523",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2548 from opal/hmdne/fix-2523\n\nRegexp: Compile more nodes as $regexp."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208edcd6ca63ac8d87e9f0",
    "number": 2547,
    "body": "The rationale behind this is that JavaScript compressors can sometimes reduce a number of function arguments therefore changing `block.length`.\r\n\r\nThis is important for yield1/yieldX, because it changes block call semantics.\r\n\r\nThis fixes #2525",
    "head_branch": "hmdne/yield-arity",
    "is_a_fork": false,
    "comments": [
      "This is unfortunately incorrect."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208eddd6ca63ac8d87e9f1",
    "number": 2546,
    "body": "This commit introduces a function `descends_from_bridged_class(klass)` to check if a class or any of its ancestors is a bridged class. During the allocation of a new class, the `descends_from_bridged_class()` function is now used to determine if the new class is a descendant of a bridged class, and if so, it ensures the original JavaScript constructor is correctly called. This enables more accurate and robust handling of class hierarchies involving bridged classes.\r\n\r\nThis problem has manifested in Firefox which didn't capture stacktraces for RuntimeError, but did so for StandardError.\r\n\r\nThis fixes #2540",
    "head_branch": "hmdne/bridged-descendants",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2546 from opal/hmdne/bridged-descendants\n\nBridging: call original constructor for subclasses of level larger than 1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208eded6ca63ac8d87e9f2",
    "number": 2544,
    "body": "Closes #1599",
    "head_branch": "fix-string-split",
    "is_a_fork": true,
    "comments": [
      "Wow, this is great :D \r\n\r\n(Don't worry about a failing lint, it is due to Rubocop upgrade)"
    ],
    "commit_messages": [
      "Merge pull request #2544 from takaram/fix-string-split\n\nFix String#split with limit and capturing regexp"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208edfd6ca63ac8d87e9f3",
    "number": 2543,
    "body": "For now, it's enabled by default. But if it's not specified and there are backticks in the code, it will issue a warning.\r\n\r\nIn Opal 2.0 we will switch the default to disabled.\r\n\r\nThe rationale is simple: we aim to be as compatible with Ruby as possible. This will give us a big headstart into being able to compile various existing Ruby libraries for NodeJS. Now, if there are backticks, the code must be ported, because backticks with usual Ruby semantics compile to invalid JavaScript. Yet still, for NodeJS we do implement ```Kernel#` ```, so this code may work out of the box.\r\n\r\nOn the other hand, there is a lot of Opal-dependent code, but compared to above - people who wrote that code know that Opal exists. So, with proper guidance, they should be able to migrate their code by adding a magic comment.",
    "head_branch": "hmdne/compat-backtick",
    "is_a_fork": false,
    "comments": [
      "The lint failure is due to Rubocop upgrade I suppose."
    ],
    "commit_messages": [
      "Merge pull request #2543 from opal/hmdne/compat-backtick\n\n[compat] Add an option to enable x-string compilation to JS"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208edfd6ca63ac8d87e9f4",
    "number": 2542,
    "body": "This manifested itself by parser (if compiled with Opal) dropping a minus sign on integers if there is encoding set (eg. by adding some UTF-8 characters to input).\r\n\r\nThis fixes #2539",
    "head_branch": "hmdne/fix-2539",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2542 from opal/hmdne/fix-2539\n\nFix switch with Object-wrapped values"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ee0d6ca63ac8d87e9f5",
    "number": 2541,
    "body": "I will expand the description later on.",
    "head_branch": "hmdne/chatgpt4",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2541 from opal/hmdne/chatgpt4\n\nChatGPT4 experiment for Opal coding"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ee1d6ca63ac8d87e9f6",
    "number": 2537,
    "body": "This (`next`) is a development branch of 2.0 to which we should direct our pull requests.\r\n\r\nAs of now, we are in development of Opal 1.8 (`master`), which is meant to be a deprecation-warning release. A rule of thumb is, if you want to break compatibility, you should whenever possible push one pull request to `master` and one to `next` - `master` warns about impending consequences, `next` breaks compatibility.\r\n\r\nAnother rule of thumb is, that we should provide a way to stay compatible with both versions.\r\n\r\nIf Opal 2.0 is not ready[define readiness] by the time Opal 1.8 is released, we will start Opal 1.9 development. If it is, we will merge this branch into `master` and focus on preparing the 2.0 release.\r\n\r\nThis branch is special, as it SHOULD NOT be force-pushed, it will contain occasional merges from `master`.",
    "head_branch": "next",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2537 from opal/next\n\n[NEXT] Opal 2.0 development branch"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ee2d6ca63ac8d87e9f7",
    "number": 2536,
    "body": "⚠️ This is just an experiment ⚠️ \r\n\r\nThis should make other bridging easier and things more consistent in native objects.",
    "head_branch": "elia/object-basic-object",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ee3d6ca63ac8d87e9f8",
    "number": 2535,
    "body": "Make it compatible with ruby-lsp.\r\n\r\nAll the new \"offenses\" are put in the todo list for future consideration.",
    "head_branch": "elia/rubocop",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2535 from opal/elia/rubocop\n\nUpdate rubocop"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ee4d6ca63ac8d87e9f9",
    "number": 2534,
    "body": "![image](https://user-images.githubusercontent.com/30776880/236860699-450bdc4a-f647-40cb-bfee-dc3701990a3a.png)\r\n\r\nKinda working in Chrome Browsers",
    "head_branch": "source_map_for_eval",
    "is_a_fork": true,
    "comments": [
      "![image](https://user-images.githubusercontent.com/30776880/236867111-3f6d8faf-82e4-4b4d-ac73-9b82777a4c19.png)\r\nAlso works in Firefox 112"
    ],
    "commit_messages": [
      "Merge pull request #2534 from janbiedermann/source_map_for_eval\n\nSourceMap support for Kernel#eval"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ee5d6ca63ac8d87e9fa",
    "number": 2533,
    "body": "This PR improves performance of `Array#intersect?` and `Array#intersection`.\r\n\r\n### Array#intersect?\r\nIt returns true immediately when first common element is found instead of calculating the whole of intersection.\r\nThis is what CRuby (and probably most other implementations) do.\r\n\r\n### Array#intersection\r\nThese two intersection method calls give identical results, but former is significantly slow on current master.\r\n```ruby\r\nlarge_array = (1..10000).to_a\r\nlarge_array.intersection(large_array, [1]) # slow\r\nlarge_array.intersection([1], large_array) # fast\r\n```\r\nIt is now optimized with this PR.",
    "head_branch": "improve_array_intersect",
    "is_a_fork": true,
    "comments": [
      "@elia \r\nThank you for your review!\r\nI'm sorry for the delay. I didn't notice the reply."
    ],
    "commit_messages": [
      "Merge pull request #2533 from takaram/improve_array_intersect\n\nImprove performance of Array#intersect? and intersection"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ee6d6ca63ac8d87e9fb",
    "number": 2532,
    "body": "Support keyword argument `exception` of `Kernel#.Float`.\r\n\r\nRDoc: https://ruby-doc.org/3.2.1/Kernel.html#method-i-Float",
    "head_branch": "fix_kernel_float_option",
    "is_a_fork": true,
    "comments": [
      "@elia Could you rerun failed actions? They seems to fail `bundle install`. 😢 ",
      "This is just a macos failure and not related to Opal or your patches. Unfortunately it persists when rerun.",
      "Thank you merging!"
    ],
    "commit_messages": [
      "Merge pull request #2532 from ysakasin/fix_kernel_float_option\n\nFix Kernel#.Float with `exception:` option"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ee7d6ca63ac8d87e9fc",
    "number": 2531,
    "body": "Support keyword argument `exception` of `Kernel#.Integer`.\r\n\r\nRDoc: https://ruby-doc.org/3.2.1/Kernel.html#method-i-Integer",
    "head_branch": "fix_kernel_integer_option",
    "is_a_fork": true,
    "comments": [
      "Thank you merging!"
    ],
    "commit_messages": [
      "Merge pull request #2531 from ysakasin/fix_kernel_integer_option\n\nFix Kernel#.Integer with `exception:` option"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ee8d6ca63ac8d87e9fd",
    "number": 2530,
    "body": "Result of `Array#sample` is biased as shown below.\r\nThis PR fixes it.\r\n\r\n### Test script\r\n```rb\r\nn = 2\r\narray = [0, 1, 2]\r\nh = array.permutation(n).map { [_1, 0] }.to_h\r\n\r\np 100000.times.map { array.sample(n) }.tally(h)\r\n```\r\n\r\n### Result\r\n#### n = 2\r\n```\r\n{[0, 1]=>22253, [0, 2]=>11210, [1, 0]=>22379, [1, 2]=>11014, [2, 0]=>10970, [2, 1]=>22174}\r\n```\r\n#### n = 3\r\n```\r\n{[0, 1, 2]=>14988, [0, 2, 1]=>18262, [1, 0, 2]=>18453, [1, 2, 0]=>18645, [2, 0, 1]=>14864, [2, 1, 0]=>14788}\r\n```\r\nNote that the implemetation employs [Fisher–Yates shuffle](https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle) algorithm.",
    "head_branch": "improve_array_sample",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2530 from takaram/improve_array_sample\n\nFix Array#sample randomness"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ee9d6ca63ac8d87e9fe",
    "number": 2529,
    "body": "which previously returned truthy regardless of the dir being writeable or not, resulting in `dir_writable?(Dir.home, '.cache', 'opal')` being always true, even for non-login user (with $HOME set to /nonexistent)",
    "head_branch": "fix_dir_writable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2529 from dan42/fix_dir_writable\n\nFix for Opal::Cache::FileCache.dir_writable?"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208eead6ca63ac8d87e9ff",
    "number": 2528,
    "body": "These changes should fix the issue with connecting to the chrome runner.\r\n\r\nThis is the error message:\r\n```\r\n<js:/home/runner/work/opal/opal/lib/opal/cli_runners/node_modules/chrome-remote-interface/lib/chrome.js>:48:23:in `defaultTarget': No inspectable targets (Exception)\r\n\tfrom <js:/home/runner/work/opal/opal/lib/opal/cli_runners/node_modules/chrome-remote-interface/lib/chrome.js>:193:28:in `_fetchDebuggerURL'\r\n\tfrom node:internal/process/task_queues:95:5:in `processTicksAndRejections'\r\n\tfrom <js:/home/runner/work/opal/opal/lib/opal/cli_runners/node_modules/chrome-remote-interface/lib/chrome.js>:140:25:in `_start'\r\n```\r\n\r\nI based my changes on this comment from the repo: https://github.com/cyrus-and/chrome-remote-interface/issues/445#issuecomment-761773141\r\n\r\nTesting locally, this seems to fix the main issue with CDP. However I am still seeing 2 errors in mspec:\r\n```\r\n1)\r\nDateTime#to_date maintains the same julian day regardless of local time or zone FAILED\r\nExpected 2456286 == 2456285\r\nto be truthy but was false\r\n\r\n2)\r\nTime#wday returns an integer representing the day of the week, 0..6, with Sunday being 0 FAILED\r\nExpected 3 == 4\r\nto be truthy but was false\r\n```\r\n\r\nMaybe it's an issue with my local config?\r\n\r\nThanks,\r\n\r\nBrandon",
    "head_branch": "fix-cdp-connection",
    "is_a_fork": true,
    "comments": [
      "This issue has been recently a problem on our CI, I have confirmed it locally too. Thank you for your hard work on debugging this issue!\r\n\r\nRegarding the MSpec errors, those are related to the timezone and we have had many failures like that in the past :("
    ],
    "commit_messages": [
      "Merge pull request #2528 from bgastelo/fix-cdp-connection\n\nFix Chrome CDP interface connection"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208eebd6ca63ac8d87ea00",
    "number": 2527,
    "body": "While setting up the Chrome runner for opal-rspec, I came across this error message with the builder:\r\n\r\n```\r\n# bundle exec rake\r\nrake aborted!\r\nEncoding::UndefinedConversionError: \"\\xFD\" from ASCII-8BIT to UTF-8\r\n/usr/local/bundle/gems/opal-1.7.2/lib/opal/builder_scheduler/prefork.rb:170:in `write'\r\n/usr/local/bundle/gems/opal-1.7.2/lib/opal/builder_scheduler/prefork.rb:170:in `send_message'\r\n/usr/local/bundle/gems/opal-1.7.2/lib/opal/builder_scheduler/prefork.rb:195:in `send'\r\n/usr/local/bundle/gems/opal-1.7.2/lib/opal/builder_scheduler/prefork.rb:270:in `block (2 levels) in prefork_reactor'\r\n/usr/local/bundle/gems/opal-1.7.2/lib/opal/builder_scheduler/prefork.rb:262:in `each'\r\n/usr/local/bundle/gems/opal-1.7.2/lib/opal/builder_scheduler/prefork.rb:262:in `block in prefork_reactor'\r\n/usr/local/bundle/gems/opal-1.7.2/lib/opal/builder_scheduler/prefork.rb:259:in `loop'\r\n/usr/local/bundle/gems/opal-1.7.2/lib/opal/builder_scheduler/prefork.rb:259:in `prefork_reactor'\r\n/usr/local/bundle/gems/opal-1.7.2/lib/opal/builder_scheduler/prefork.rb:17:in `process_requires'\r\n/usr/local/bundle/gems/opal-1.7.2/lib/opal/builder.rb:216:in `process_requires'\r\n/usr/local/bundle/gems/opal-1.7.2/lib/opal/builder.rb:107:in `build_str'\r\n/usr/local/bundle/gems/opal-1.7.2/lib/opal/builder.rb:92:in `build'\r\n/usr/local/bundle/gems/opal-1.7.2/lib/opal/cli.rb:135:in `block in create_builder'\r\n/usr/local/bundle/gems/opal-1.7.2/lib/opal/cli.rb:135:in `each'\r\n/usr/local/bundle/gems/opal-1.7.2/lib/opal/cli.rb:135:in `create_builder'\r\n/usr/local/bundle/gems/opal-1.7.2/lib/opal/cli.rb:94:in `block in run'\r\n/usr/local/bundle/gems/opal-1.7.2/lib/opal/cli_runners/chrome.rb:31:in `initialize'\r\n/usr/local/bundle/gems/opal-1.7.2/lib/opal/cli_runners/chrome.rb:19:in `new'\r\n/usr/local/bundle/gems/opal-1.7.2/lib/opal/cli_runners/chrome.rb:19:in `call'\r\n/usr/local/bundle/gems/opal-1.7.2/lib/opal/cli.rb:96:in `run'\r\n/usr/local/bundle/gems/opal-rspec-1.0.0/lib/opal/rspec/runner.rb:141:in `run'\r\n/usr/src/app/Rakefile:12:in `block in <top (required)>'\r\n/usr/local/bundle/gems/rake-13.0.6/exe/rake:27:in `<top (required)>'\r\n/usr/local/bin/bundle:23:in `load'\r\n/usr/local/bin/bundle:23:in `<main>'\r\nTasks: TOP => default\r\n(See full trace by running task with --trace)\r\n```\r\n\r\nSince the code is using Marshal to pass data through the IO pipe, it expects to be in the ASCII-8BIT encoding. It would make sense then that we set `binmode` on the IO pipes so that they don't get confused with the string encoding.\r\n\r\nSorry for not including any tests, since I'm having trouble figuring out exactly what input causes it. It seems to work sometimes with a simple example, but loading more files causes it to crash? I'm not too sure.\r\n\r\nI have an example repo here: https://github.com/bgastelo/example-opal-rspec-async where it is occurring. I've stepped through my debugger but I must be missing what causes it.\r\n\r\nThis is my first PR, so let me know if there is anything I can do to update my PR.\r\n\r\nThanks,\r\n\r\nBrandon",
    "head_branch": "fix-marshal-io-encoding",
    "is_a_fork": true,
    "comments": [
      "Thanks! Encoding is always a tricky thing to get right... :("
    ],
    "commit_messages": [
      "Merge pull request #2527 from bgastelo/fix-marshal-io-encoding\n\nEnable binmode for IO pipes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208eecd6ca63ac8d87ea01",
    "number": 2526,
    "body": "Opal fails to `eval` string literals with parser gem v3.2.1.\r\n\r\n```console\r\n$ opal -r opal-parser -e 'puts Parser::VERSION; puts eval %(\"foo\")'\r\n3.2.1.0\r\n(eval):in `\"foo\"': undefined method `source' for nil (SyntaxError)\r\n        from parser/lexer/literal.rb:253:50:in `clear_buffer'\r\n        from parser/lexer/literal.rb:84:7:in `initialize'\r\n        from <internal:corelib/class.rb>:43:1:in `Class_new$2'\r\n        from parser/lexer-strings.rb:5010:41:in `push_literal'\r\n        from parser/lexer-F1.rb:10275:17:in `advance'\r\n        from parser/base.rb:252:21:in `next_token'\r\n        from racc/parser.rb:293:34:in `$$1'\r\n        from <internal:corelib/kernel.rb>:774:5:in `Kernel_catch$17'\r\n        from racc/parser.rb:288:7:in `__send__'\r\n        from <internal:corelib/basic_object.rb>:40:1:in `__send__'\r\n        from racc/parser.rb:264:7:in `do_parse'\r\n        from parser/base.rb:190:7:in `undefined'\r\n        from parser/base.rb:187:7:in `parse'\r\n        from opal/parser/default_config.rb:32:18:in `parse'\r\n        from parser/base.rb:238:15:in `undefined'\r\n        from parser/base.rb:234:7:in `tokenize'\r\n        from opal/compiler.rb:284:64:in `$$3'\r\n        from opal/compiler.rb:365:7:in `re_raise_with_location'\r\n        from opal/compiler.rb:284:32:in `parse'\r\n        from opal/compiler.rb:270:7:in `compile'\r\n        from opal/compiler.rb:27:34:in `<top (required)>'\r\n        from opal-parser.rb:40:1:in `eval'\r\n        from -e:1:28:in `undefined'\r\n        from -e:1:1:in `null'\r\n        from node:internal/modules/cjs/loader:1165:14:in `Module._compile'\r\n        from node:internal/modules/cjs/loader:1219:10:in `Module._extensions..js'\r\n        from node:internal/modules/cjs/loader:1043:32:in `Module.load'\r\n        from node:internal/modules/cjs/loader:878:12:in `Module._load'\r\n        from node:internal/modules/run_main:81:12:in `executeUserEntryPoint'\r\n        from node:internal/main/run_main_module:22:47:in `undefined'\r\n(eval):in `\"foo\"': undefined method `source' for nil (NoMethodError)\r\n        from parser/lexer/literal.rb:253:50:in `clear_buffer'\r\n        from parser/lexer/literal.rb:84:7:in `initialize'\r\n        from <internal:corelib/class.rb>:43:1:in `Class_new$2'\r\n        from parser/lexer-strings.rb:5010:41:in `push_literal'\r\n        from parser/lexer-F1.rb:10275:17:in `advance'\r\n        from parser/base.rb:252:21:in `next_token'\r\n        from racc/parser.rb:293:34:in `$$1'\r\n        from <internal:corelib/kernel.rb>:774:5:in `Kernel_catch$17'\r\n        from racc/parser.rb:288:7:in `__send__'\r\n        from <internal:corelib/basic_object.rb>:40:1:in `__send__'\r\n        from racc/parser.rb:264:7:in `do_parse'\r\n        from parser/base.rb:190:7:in `undefined'\r\n        from parser/base.rb:187:7:in `parse'\r\n        from opal/parser/default_config.rb:32:18:in `parse'\r\n        from parser/base.rb:238:15:in `undefined'\r\n        from parser/base.rb:234:7:in `tokenize'\r\n        from opal/compiler.rb:284:64:in `$$3'\r\n        from opal/compiler.rb:365:7:in `re_raise_with_location'\r\n        from opal/compiler.rb:284:32:in `parse'\r\n        from opal/compiler.rb:270:7:in `compile'\r\n        from opal/compiler.rb:27:34:in `<top (required)>'\r\n        from opal-parser.rb:40:1:in `eval'\r\n        from -e:1:28:in `undefined'\r\n        from -e:1:1:in `null'\r\n        from node:internal/modules/cjs/loader:1165:14:in `Module._compile'\r\n        from node:internal/modules/cjs/loader:1219:10:in `Module._extensions..js'\r\n        from node:internal/modules/cjs/loader:1043:32:in `Module.load'\r\n        from node:internal/modules/cjs/loader:878:12:in `Module._load'\r\n        from node:internal/modules/run_main:81:12:in `executeUserEntryPoint'\r\n        from node:internal/main/run_main_module:22:47:in `undefined\r\n```\r\n\r\nIt works if you add `gem 'parser', '3.2.0'` to your Gemfile.\r\n\r\n```console\r\n$ opal -r opal-parser -e 'puts Parser::VERSION; puts eval %(\"foo\")'\r\n3.2.0.0\r\nfoo\r\n```\r\n\r\nThis PR fixes the issue.",
    "head_branch": "fix-eval",
    "is_a_fork": true,
    "comments": [
      "Thanks! We've got this bug reported on our Slack channel yesterday. We will do a final review and merge it on Thursday.",
      "FYI: [This change](https://github.com/whitequark/parser/pull/905/files#diff-894f90ef5e566bf82a7b031fd82df1aece88eaac96cae6483feba8c020a63761R200-R201) in parser affected opal's parser patch.",
      "Thank you very much for this patch! 🙏 "
    ],
    "commit_messages": [
      "Merge pull request #2526 from takaram/fix-eval\n\nFix eval with parser gem v3.2.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208eecd6ca63ac8d87ea02",
    "number": 2524,
    "body": "This is so that we may later introduce a Ruby-WASM compatible JS module, but also so that we will be able to introduce a wider API around Opal::Raw.",
    "head_branch": "hmdne/rename-js-to-js-raw",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2524 from opal/hmdne/rename-js-to-js-raw\n\n[compat] Rename JS to Opal::Raw"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208eedd6ca63ac8d87ea03",
    "number": 2522,
    "body": null,
    "head_branch": "fix_link_to_getting_started_doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2522 from janbiedermann/fix_link_to_getting_started_doc\n\nFix link to getting started doc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208eeed6ca63ac8d87ea04",
    "number": 2521,
    "body": "Makes `1.singleton_class` or `class << 1; end` raise TypeError instead of Exception.",
    "head_branch": "number-singleton-class",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2521 from takaram/number-singleton-class\n\nDisallow to define a singleton class for Number"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208eefd6ca63ac8d87ea05",
    "number": 2520,
    "body": "Was lacking a spec and was broken during a recent refactoring.",
    "head_branch": "elia/fix-debug-source-map",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2520 from opal/elia/fix-debug-source-map\n\nFix the `--debug-source-map`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ef0d6ca63ac8d87ea06",
    "number": 2519,
    "body": "This PR adds a missing link reference definition and removed an unused one in [docs/compiler](https://opalrb.com/docs/guides/v1.7.1/compiler).",
    "head_branch": "fix-compiler-docs-link",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2519 from vzvu3k6k/fix-compiler-docs-link\n\nFix links in docs/compiler.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ef1d6ca63ac8d87ea07",
    "number": 2518,
    "body": "- Stop relying on ARGF for switching from file to stdin\r\n- Ensure ARGV is maintained if eval strings are provided\r\n- Ingest the full ARGV and extract the file/stdin/evals internally\r\n- Fixes https://github.com/opal/opal/issues/2504",
    "head_branch": "elia/fix-argv-argf",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2518 from opal/elia/fix-argv-argf\n\nFix the handling of ARGV for the opal executable"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ef2d6ca63ac8d87ea08",
    "number": 2516,
    "body": "This fixes #2505 in particular, but also gives us a deterministic order, so that we may compare two files built with a Prefork scheduler reliably.\r\n",
    "head_branch": "hmdne/prefork-order-fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2516 from opal/hmdne/prefork-order-fix\n\nPrefork: output processed files in a correct, deterministic order"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ef3d6ca63ac8d87ea09",
    "number": 2515,
    "body": "The small fix from #2489 broke CDN, especially `binding.irb`.",
    "head_branch": "hmdne/fix-rake-dist",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2515 from opal/hmdne/fix-rake-dist\n\nFix rake dist (CDN)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ef4d6ca63ac8d87ea0a",
    "number": 2513,
    "body": "depends on #2512, #2511, #2508, #2506",
    "head_branch": "lets_go_on_safari",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2513 from janbiedermann/lets_go_on_safari\n\nAdd safari runner, run specs by default on safari, macos"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ef5d6ca63ac8d87ea0b",
    "number": 2512,
    "body": "Will be required by safari runner",
    "head_branch": "mspec_opal_compatibility",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2512 from janbiedermann/mspec_opal_compatibility\n\nmspec_opal: Avoid lookbehind Regexp for compatibility with various javascript engines"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ef6d6ca63ac8d87ea0c",
    "number": 2511,
    "body": null,
    "head_branch": "regexp_compat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2511 from janbiedermann/regexp_compat\n\nTrick Safari/WebKit parser to execute code with literal lookbehind RegExp"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ef7d6ca63ac8d87ea0d",
    "number": 2510,
    "body": "- Avoid relying on the `OriginalARGV` global var for communication between parts of the project\r\n- Use `File.read` when possible to allow macOS read fresh data from the FS",
    "head_branch": "elia/fix-file-read",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2510 from opal/elia/fix-file-read\n\nFix file reading for macOS"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ef8d6ca63ac8d87ea0e",
    "number": 2509,
    "body": "A couple of QoL improvements like CTRL-C support and a configuration change that will make Listen not ignore files if they're in a directory named `tmp`.",
    "head_branch": "elia/fix-watch",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2509 from opal/elia/fix-watch\n\nFix `--watch` ignoring some directories (e.g. `tmp`)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ef9d6ca63ac8d87ea0f",
    "number": 2508,
    "body": "May add `spec/filters/platform/#{platform}/*.rb` files\r\n\r\nWill be required by safari runner and #2507",
    "head_branch": "platform_filters",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2508 from janbiedermann/platform_filters\n\nPlatform specific spec filters"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208efad6ca63ac8d87ea10",
    "number": 2507,
    "body": "depending on #2506 for a clean run",
    "head_branch": "foxy_specy",
    "is_a_fork": true,
    "comments": [
      "Merge after #2508 and #2506"
    ],
    "commit_messages": [
      "Merge pull request #2507 from janbiedermann/foxy_specy\n\nRun Firefox specs by default"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208efbd6ca63ac8d87ea11",
    "number": 2506,
    "body": "Fixes spec:\r\n```\r\n1)\r\nDateTime.parse(.) parses YYYY.MM.DD into a DateTime object FAILED\r\nExpected NaN == 2007\r\nto be truthy but was false\r\n```\r\non Firefox",
    "head_branch": "foxy_time",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2506 from janbiedermann/foxy_time\n\nMake Date/Time.parse on Firefox more compatible with Chrome and Ruby"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208efcd6ca63ac8d87ea12",
    "number": 2503,
    "body": "I believe this is needed for proper Delegator support and a couple more things.\r\n\r\nThis patchset also includes a couple of other related improvements.",
    "head_branch": "hmdne/privacy",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208efdd6ca63ac8d87ea13",
    "number": 2502,
    "body": "This is split from #2485",
    "head_branch": "hmdne/compiler-runner-rework-p2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208efed6ca63ac8d87ea14",
    "number": 2501,
    "body": "I split this from #2500, because this part needs further examination",
    "head_branch": "hmdne/opal-32-p2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208efed6ca63ac8d87ea15",
    "number": 2500,
    "body": null,
    "head_branch": "hmdne/opal-32",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2500 from opal/hmdne/opal-32\n\nRuby 3.2 support branch"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208effd6ca63ac8d87ea16",
    "number": 2499,
    "body": "Some various optimizations regarding argument passing - performance-wise and bundle-size-wise",
    "head_branch": "hmdne/opt-argpass",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2499 from opal/hmdne/opt-argpass\n\nOptimize argument passing"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f00d6ca63ac8d87ea17",
    "number": 2497,
    "body": "Part 4/6 of https://github.com/opal/opal/pull/2461",
    "head_branch": "hmdne/benchrunner/rake-changes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2497 from opal/hmdne/benchrunner/rake-changes\n\nbench&runners: Testing: Get runners dynamically, disable unavailable runners"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f01d6ca63ac8d87ea18",
    "number": 2496,
    "body": "Part 6/6 of #2461 \r\n\r\nThis fixes #2157",
    "head_branch": "hmdne/benchrunner/benchmark",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2496 from opal/hmdne/benchrunner/benchmark\n\nbench&runners: Implement benchmarking with benchmark_driver, update HACKING doc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f02d6ca63ac8d87ea19",
    "number": 2495,
    "body": "This is a fixup to #2492",
    "head_branch": "hmdne/benchrunner/deno-formatter",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2495 from opal/hmdne/benchrunner/deno-formatter\n\nbench&runner: Deno: MSpec: use a NodeJS formatter"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f03d6ca63ac8d87ea1a",
    "number": 2494,
    "body": "Part 3/6 #2461",
    "head_branch": "hmdne/benchrunner/generic-headless-browser",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2494 from opal/hmdne/benchrunner/generic-headless-browser\n\nbench&runners: Make headless Chrome platform a generic headless browser platform"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f04d6ca63ac8d87ea1b",
    "number": 2492,
    "body": "Part 2/6 of #2461",
    "head_branch": "hmdne/benchrunner/deno",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2492 from opal/hmdne/benchrunner/deno\n\nbench&runners: Preliminary support for Deno"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f05d6ca63ac8d87ea1c",
    "number": 2491,
    "body": "Part 5/6 of #2461",
    "head_branch": "hmdne/benchrunner/new-runners",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2491 from opal/hmdne/benchrunner/new-runners\n\nbench&runners: Add Firefox runner, update Chrome runner, headless doc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f06d6ca63ac8d87ea1d",
    "number": 2490,
    "body": "Part 1/6 of #2461",
    "head_branch": "hmdne/benchrunner/update-node-modules",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2490 from opal/hmdne/benchrunner/update-node-modules\n\nbench&runners: Update chrome-remote-interface node modules"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f07d6ca63ac8d87ea1e",
    "number": 2489,
    "body": "Most importantly - opal/full wasn't built before and some CDN users want that working.",
    "head_branch": "hmdne/dist-build-opal-variants",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2489 from opal/hmdne/dist-build-opal-variants\n\ndist: Build also opal variants"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f08d6ca63ac8d87ea1f",
    "number": 2487,
    "body": null,
    "head_branch": "hmdne/fix-ci",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2487 from opal/hmdne/fix-ci\n\nRequire an older version of Psych, due to CI failure"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f09d6ca63ac8d87ea20",
    "number": 2486,
    "body": null,
    "head_branch": "hmdne/mspec-update",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2486 from opal/hmdne/mspec-update\n\nMSpec update"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f0ad6ca63ac8d87ea21",
    "number": 2485,
    "body": "1. NodeJS: `File.symlink`\r\n2. Rearrange the CLI options (so `opal --help` makes more sense)\r\n3. Add `--output` and `--watch` support\r\n\r\nThe patchset is mostly ready for review, but in the end it will also include a couple more features :)",
    "head_branch": "hmdne/compiler-runner-rework",
    "is_a_fork": false,
    "comments": [
      "The --directory option (in the next commit once I clean it up):\r\n\r\n```\r\n[user@localhost opal]# bin/opal --directory -ce 'p 123' -o _tx\r\n[user@localhost opal]# node _tx/\r\n123\r\n[user@localhost opal]# rm -rf _tx\r\n[user@localhost opal]# bin/opal --esm --directory -ce 'p 123' -o _tx\r\n[user@localhost opal]# node _tx/index.mjs \r\n123\r\n[user@localhost opal]# chromium-freeworld --no-sandbox --allow-file-access-from-files _tx/index.html\r\n(outputs 123 in web console)\r\n```\r\n\r\n```\r\n[user@localhost opal]# tree _tx\r\n_tx\r\n├── corelib\r\n│   ├── array.mjs\r\n│   ├── basic_object.mjs\r\n│   ├── binding.mjs\r\n│   ├── boolean.mjs\r\n│   ├── class.mjs\r\n│   ├── comparable.mjs\r\n│   ├── complex\r\n│   │   └── base.mjs\r\n│   ├── complex.mjs\r\n│   ├── constants.mjs\r\n│   ├── dir.mjs\r\n│   ├── enumerable.mjs\r\n│   ├── enumerator\r\n│   │   ├── arithmetic_sequence.mjs\r\n│   │   ├── chain.mjs\r\n│   │   ├── generator.mjs\r\n│   │   ├── lazy.mjs\r\n│   │   └── yielder.mjs\r\n│   ├── enumerator.mjs\r\n│   ├── error\r\n│   │   └── errno.mjs\r\n│   ├── error.mjs\r\n│   ├── file.mjs\r\n│   ├── hash.mjs\r\n│   ├── helpers.mjs\r\n│   ├── io.mjs\r\n│   ├── irb.mjs\r\n│   ├── kernel\r\n│   │   └── format.mjs\r\n│   ├── kernel.mjs\r\n│   ├── main.mjs\r\n│   ├── math.mjs\r\n│   ├── method.mjs\r\n│   ├── module.mjs\r\n│   ├── nil.mjs\r\n│   ├── number.mjs\r\n│   ├── numeric.mjs\r\n│   ├── process\r\n│   │   └── base.mjs\r\n│   ├── process.mjs\r\n│   ├── proc.mjs\r\n│   ├── random\r\n│   │   ├── formatter.mjs\r\n│   │   └── mersenne_twister.mjs\r\n│   ├── random.mjs\r\n│   ├── range.mjs\r\n│   ├── rational\r\n│   │   └── base.mjs\r\n│   ├── rational.mjs\r\n│   ├── regexp.mjs\r\n│   ├── runtime.mjs\r\n│   ├── string\r\n│   │   └── encoding.mjs\r\n│   ├── string.mjs\r\n│   ├── struct.mjs\r\n│   ├── time.mjs\r\n│   ├── unsupported.mjs\r\n│   └── variables.mjs\r\n├── -e.mjs\r\n├── (exit).mjs\r\n├── index.html\r\n├── index.mjs\r\n├── opal\r\n│   ├── base.mjs\r\n│   ├── mini.mjs\r\n│   └── regexp_anchors.mjs\r\n└── opal.mjs\r\n\r\n10 directories, 58 files\r\n[user@localhost opal]# \r\n",
      "@janbiedermann this may be useful for you as well - this format may be better suited for input to `esbuild` - I remember it had problems with index (combined) maps - those are file maps, each file has an individual map for itself",
      "The directory part is split to another PR"
    ],
    "commit_messages": [
      "Merge pull request #2485 from opal/hmdne/compiler-runner-rework\n\nCompiler runner rework (mainly: --watch)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f0bd6ca63ac8d87ea22",
    "number": 2484,
    "body": "This makes the exception stack work correctly also for errors raised in runtime, but they will also gracefully degrade when things aren't loaded yet.\r\n\r\nThis fixes #1371",
    "head_branch": "hmdne/unthrow-runtime",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2484 from opal/hmdne/unthrow-runtime\n\nRemove throws from runtime"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f0cd6ca63ac8d87ea23",
    "number": 2483,
    "body": null,
    "head_branch": "hmdne/closure-tracking-switch",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f0dd6ca63ac8d87ea24",
    "number": 2482,
    "body": "1. Reduce code that assigns a result to a variable then returns this variable. This is mostly for racc-generated code, but other applications may be reduced as well\r\n2. Optimize large arrays produced by lexer, but mainly we are interested in improving compile times, by reducing the tree for the further compilation efforts (also reducing the bundle size a bit)",
    "head_branch": "hmdne/optexp/opalparser",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2482 from opal/hmdne/optexp/opalparser\n\nTargeted patches for Opal-Parser"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f0ed6ca63ac8d87ea25",
    "number": 2481,
    "body": "`'$'+name` is an expensive call, by caching such calls, we save about 2% in performance.",
    "head_branch": "hmdne/optexp/mncache",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2481 from opal/hmdne/optexp/mncache\n\nReplace all occurences of `'$'+name` with a cached helper"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f0fd6ca63ac8d87ea26",
    "number": 2480,
    "body": "This is a work in progress proposal for 2.0, but why attempt this deoptimization:\r\n\r\nThe great symbolization: What reads better:\r\n```\r\n$send(self, \"hello_world\", [1,2,3])\r\n```\r\nOr:\r\n```\r\nself[$s(\"hello world\")](1,2,3)\r\n```\r\n(Perhaps we should introduce a nicer $send helper for some usecases? Like, one that doesn't allocate arrays...)\r\n\r\nIn general, this branch is an experiment and I will attempt some ideas that we may want to have for 2.0.",
    "head_branch": "hmdne/force-send",
    "is_a_fork": false,
    "comments": [
      "```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 5.156 (+20.79%) -> 5.605 (+25.02%) (change: +8.70%)\r\n                      Run time: 2.068 (+10.41%) -> 3.046 (+8.24%) (change: +47.26%)\r\n                   Bundle size: 4641.86 kB -> 4939.86 kB (change: +6.42%)\r\n          Minified bundle size: 1000.83 kB -> 1074.62 kB (change: +7.37%)\r\n            Mangled & minified: 707.79 kB -> 743.86 kB (change: +5.10%)\r\n--- Failures ---\r\n - Some methods are no longer compiled on V8\r\n - Compile time increased by more than 5%\r\n - Run time increased by more than 5%\r\n - Bundle size increased by more than 5%\r\n - Minified bundle size increased by more than 5%\r\n - Mangled & minified increased by more than 5%\r\n```\r\n\r\nThis is all pretty sad :( - but expected",
      "If we opt to not create an empty array for empty argument calls:\r\n```\r\n Comparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 5.034 (+15.74%) -> 4.920 (+29.02%) (change: -2.27%)\r\n                      Run time: 1.900 (+8.80%) -> 2.800 (+9.34%) (change: +47.39%)\r\n                   Bundle size: 4641.86 kB -> 4872.61 kB (change: +4.97%)\r\n          Minified bundle size: 1000.83 kB -> 1064.57 kB (change: +6.37%)\r\n            Mangled & minified: 707.79 kB -> 733.80 kB (change: +3.68%)"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f10d6ca63ac8d87ea27",
    "number": 2479,
    "body": "Due to us introducing BuilderScheduler, we got a regression for Tilt users where dependency resolution broke.",
    "head_branch": "hmdne/fix-builder-dup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2479 from opal/hmdne/fix-builder-dup\n\nFix builder.dup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f10d6ca63ac8d87ea28",
    "number": 2477,
    "body": null,
    "head_branch": "hmdne/await-non-experimental",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2477 from opal/hmdne/await-non-experimental\n\nMark async/await as non-experimental; improve docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f11d6ca63ac8d87ea29",
    "number": 2475,
    "body": "Fixes #2466",
    "head_branch": "elia/limit-zlib-retries",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2475 from opal/elia/limit-zlib-retries\n\nLimit the number of retries when getting zlib errors"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f12d6ca63ac8d87ea2a",
    "number": 2474,
    "body": "This fixes #2445",
    "head_branch": "hmdne/fix-2445",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2474 from opal/hmdne/fix-2445\n\nMake opal CLI tool work again with pipes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f13d6ca63ac8d87ea2b",
    "number": 2473,
    "body": "There was missing logic in CallNode#compile_simple_call_chain (this is the most basic version of call compilation, which didn't use the CallNode#compile_receiver).\r\n\r\nThis caused `opal-repl -Rchrome` to stop working.\r\n\r\nThe bug was introduced by 6ef5abea33259822ef5ee10d1121025c58b40687\r\n\r\nThis fixes #2467",
    "head_branch": "hmdne/fix-2467",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2473 from opal/hmdne/fix-2467\n\nFix compilation of a call: `gets&.chomp`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f14d6ca63ac8d87ea2c",
    "number": 2472,
    "body": "This is being done by forcing the versions of rack and sinatra, so that we don't pull rack 3.0.0 (which moves rackup to a separate gem) mistakenly.\r\nWe would like to upgrade this later on, but for now Sinatra does not support rack 3.0",
    "head_branch": "hmdne/fix-ruby-head",
    "is_a_fork": false,
    "comments": [
      "Also, this was probably caused by a change to the dependency resolver in Ruby 3.0"
    ],
    "commit_messages": [
      "Merge pull request #2472 from opal/hmdne/fix-ruby-head\n\nFix ruby-head runner"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f15d6ca63ac8d87ea2d",
    "number": 2471,
    "body": null,
    "head_branch": "hmdne/fix-smoke-test",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2471 from opal/hmdne/fix-smoke-test\n\nRSpec update: Fix smoke test"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f16d6ca63ac8d87ea2e",
    "number": 2470,
    "body": null,
    "head_branch": "hmdne/ruby-erb-processor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2470 from opal/hmdne/ruby-erb-processor\n\nAdd Opal::BuilderProcessors::RubyERBProcessor"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f17d6ca63ac8d87ea2f",
    "number": 2469,
    "body": null,
    "head_branch": "hmdne/prefork-async-fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2469 from opal/hmdne/prefork-async-fix\n\nPrefork: Better interoperation with socketry/async"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f18d6ca63ac8d87ea30",
    "number": 2468,
    "body": "This PR fixes running the working branch of Opal-RSpec",
    "head_branch": "hmdne/freeze-const-assign-fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2468 from opal/hmdne/freeze-const-assign-fix\n\nFix a problem with assigning Module to a constant after freezing"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f19d6ca63ac8d87ea31",
    "number": 2465,
    "body": "in runtime: alias, method_missing and top_define_method",
    "head_branch": "block_booster_2",
    "is_a_fork": true,
    "comments": [
      "Effect in latest Firefox and latest Chrome, without vs with this patch, higher is better:\r\n```\r\nBenchmark                    5_opal-firefox-1-5-1 |     1_opal-firefox-1-5-1 |\r\nbm_alias_method                        76.923 i/s |       +8.33%  83.333 i/s | (variation very high, should be equal)\r\nbm_alias_alias                         30.303 i/s |      +37.50%  41.667 i/s | (improvement way above variation)\r\nbm_alias_alias_method                  34.483 i/s |      +26.09%  43.478 i/s |\r\nbm_alias_method_missing                12.048 i/s |      +12.17%  13.514 i/s |\r\n\r\nBenchmark                     9_opal-chrome-1-5-1 |     12_opal-chrome-1-5-1 |\r\nbm_alias_method                        53.191 i/s |       +8.05%  57.471 i/s | (variation very high, should be equal)\r\nbm_alias_alias                         24.570 i/s |       +2.78%  25.253 i/s |\r\nbm_alias_alias_method                  24.631 i/s |       +1.50%  25.000 i/s | \r\nbm_alias_method_missing                 7.800 i/s |        +6.31%  8.292 i/s | (improvement trend like node below)\r\n\r\n```\r\n\r\nEffect in Node is barely measurable",
      "I was wrong about Node, i had a older version installed, latest Node LTS is similar to latest Chrome:\r\n```\r\nBenchmark                      18_opal-node-1-5-1 |       15_opal-node-1-5-1 |\r\nbm_alias_method                        54.612 i/s |       +1.90%  55.652 i/s | (variation, should be equal)\r\nbm_alias_alias                         23.255 i/s |       +3.88%  24.157 i/s |\r\nbm_alias_alias_method                  22.725 i/s |       +4.54%  23.757 i/s |\r\nbm_alias_method_missing                 7.738 i/s |       +11.00%  8.589 i/s | (improvement way above variation)\r\n```",
      "The benchmark:\r\n\r\n```\r\nclass Test\r\n  def test(a)\r\n    a + a\r\n  end\r\n\r\n  def method_missing(method, a)\r\n    a + a\r\n  end\r\n\r\n  alias testal test\r\n  alias_method :testam, :test\r\nend\r\n\r\ninstance = Test.new\r\n\r\n100000.times do |i|\r\n  # call method, alias or missing method with i\r\nend\r\n```",
      "with patch vs. Ruby 3.2.0:\r\n```\r\nBenchmark                            26_ruby-3-2-0 |       15_opal-node-1-5-1 |\r\nbm_alias_method                        158.937 i/s |      -64.98%  55.652 i/s |\r\nbm_alias_alias                         158.215 i/s |      -84.73%  24.157 i/s |\r\nbm_alias_alias_method                  159.241 i/s |      -85.08%  23.757 i/s |\r\nbm_alias_method_missing                 85.393 i/s |       -89.94%  8.589 i/s |\r\n```",
      "Using the yaml benchmark format, other numbers are possible:\r\n```\r\nprelude: |\r\n  class Test\r\n    def test(a)\r\n      a + a\r\n    end\r\n\r\n    def method_missing(method, a)\r\n      a + a\r\n    end\r\n\r\n    alias testal test\r\n    alias_method :testam, :test\r\n  end\r\n\r\n  instance = Test.new\r\nbenchmark:\r\n  method: instance.test(__bmdv_i)\r\n  alias: instance.testal(__bmdv_i)\r\n  alias_method: instance.testam(__bmdv_i)\r\n  method_missing: instance.testmi(__bmdv_i)\r\nloop_count: 1000000\r\n```\r\nNode:\r\n```\r\nBenchmark                  43_opal-node-1-5-1 |            46_opal-node-1-5-1 |\r\nalias                         6436000.000 i/s |       -0.56%  6400000.000 i/s | (variation)\r\nalias_method                  6186000.000 i/s |      +12.32%  6948000.000 i/s | (clearly a improvement)\r\nmethod_missing                1840000.000 i/s |      +21.96%  2244000.000 i/s |\r\n```\r\nRuby vs Opal Node:\r\n```\r\nBenchmark                        44_ruby-3-2-0 |            46_opal-node-1-5-1 |\r\nmethod                        46213000.000 i/s |                               | (opal node failed to report/measure)\r\nalias                         45611000.000 i/s |      -85.97%  6400000.000 i/s |\r\nalias_method                  45869000.000 i/s |      -84.85%  6948000.000 i/s |\r\nmethod_missing                12210000.000 i/s |      -81.62%  2244000.000 i/s |\r\n```",
      "Benchmarks run in #2461"
    ],
    "commit_messages": [
      "Merge pull request #2465 from janbiedermann/block_booster_2\n\nImprove block performance for even more cases"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f1ad6ca63ac8d87ea32",
    "number": 2463,
    "body": "This error shouldn't happen and is likely a bug in Zlib. This is a temporary measure, also for older Rubies, so that tests won't break randomly.\r\n\r\nThis started happening since we merged Prefork",
    "head_branch": "hmdne/file-cache-buferror",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2463 from opal/hmdne/file-cache-buferror\n\nRetry if file cache write operation exits with Zlib::BufError"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f1bd6ca63ac8d87ea33",
    "number": 2462,
    "body": "If the reactor has finished with error, make the workers exit silently",
    "head_branch": "hmdne/silence-prefork",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2462 from opal/hmdne/silence-prefork\n\nSilence prefork"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f1cd6ca63ac8d87ea34",
    "number": 2461,
    "body": "Makes benchmarks work again\r\n\r\n- removes bench:opal\r\n\r\n- adds bench:ruby_vs_opal - benchmarks ruby vs opal node\r\n- adds bench:all - benchmarks most important engines - ruby, node, chrome, firefox\r\n\r\n- uses rubys standard benchmark_driver to allow to run ruby benchmarks\r\n\r\n- adds a Deno runner, basic port to Deno\r\n- adds a Firefox CDP runner\r\n- CDP runners (Chrome and Firefox) make use of a tiny http server\r\n- CDP runners can write files using File#write (required by benchmark_driver)\r\n- CDP runners open a new \"Target\" for each execution, preventing problems with faulty or crashed targets\r\n- new OPAL_PLATFORMs: headless-firefox, deno\r\n\r\n- fixes a Problem with Node 18 and existing chrome runner:\r\n```\r\nnode:net:1300:16:in `afterConnect': connect ECONNREFUSED ::1:9222 (Exception)\r\nrake aborted!\r\n```\r\n- fixes a Problem where environment variables have been ignored by runners\r\n\r\n- updates CliRunners to register only runners available on current platform\r\n- benchmark.rake and testing.rake create tasks for runners registered by CliRunners\r\n\r\nWill fix #2157\r\nFixing remaining issues of Opal running in Firefox or Deno is out of scope of this PR, will do later on, once merged",
    "head_branch": "hulk_hogan_vs_the_undertaker",
    "is_a_fork": true,
    "comments": [
      "Also provides nice output:\r\n```\r\nCalculating -------------------------------------\r\n                     C:/Ruby32-x64/bin/ruby.exe  bin/opal-bench.bat\r\n          app_answer                     36.897              73.580 i/s -       1.000 times in 0.027103s 0.013591s\r\n\r\nComparison:\r\n                       app_answer\r\n  bin/opal-bench.bat:        73.6 i/s\r\nC:/Ruby32-x64/bin/ruby.exe:        36.9 i/s - 1.99x  slower\r\n```",
      "Perhaps related to #2157",
      "```\r\nC:\\Users\\jan\\workspace\\opal>bundle exec benchmark-driver -e C:/ruby32-x64/bin/ruby.exe benchmark/bm_array_add.rb \r\n        bm_array_add                    16.051k i/s -       1.000 times in 0.000062s (62.30μs/i)\r\n        bm_array_add                    14.577k i/s -       1.000 times in 0.000069s (68.60μs/i)\r\n        bm_array_add                    15.015k i/s -       1.000 times in 0.000067s (66.60μs/i)\r\n        bm_array_add                    15.601k i/s -       1.000 times in 0.000064s (64.10μs/i)\r\n        bm_array_add                    12.920k i/s -       1.000 times in 0.000077s (77.40μs/i)\r\n        bm_array_add                    14.599k i/s -       1.000 times in 0.000068s (68.50μs/i)\r\n```\r\n\r\nThis does not help at all with variation of results. For good measure multiple, many runs remain necessary, and then taking the best.",
      "For the record: attempts to use puppeteer-ruby with firefox failed so far.",
      "Messages get send by firefox, just chrome-remote-interface cannot handle them, needs some fixing",
      "Updating chrome-remote-interface and experimenting with it, i found, that c-r-i is not reliable, messages get lost (assuming its not a firefox issue, sending sometimes only half the messages). Trying a different approach.",
      "chrome and firefox publish their implemented CDP protocol at the remote-debugging-port via http://localhost:9222/json/protocol",
      "Firefox on Linux in --headless still needs X, otherwise it fails opening the --remote-debugging-port, can be run with:\r\n `xvfb-run bundle exec ...`\r\n\r\nAfter overcoming some Windows/Git/Node/Linux bamboozles mspec-firefox runs on Linux and Windows in github actions.",
      "Example, rake bench:all:\r\n```\r\n\r\nBenchmarking benchmark/bm_hash_replace_string.rb started at 2022-11-05 09:59:13 +0100:\r\nCalculating -------------------------------------\r\n                       bin/opal-bench-node.bat  bin/opal-bench-chrome.bat  bin/opal-bench-firefox.bat  C:/Ruby32-x64/bin/ruby.exe\r\nbm_hash_replace_string                   1.090                      1.137                       1.422                      69.664 i/s -       1.000 times in 0.917683s 0.879300s 0.703000s 0.014355s\r\n\r\nComparison:\r\n             bm_hash_replace_string\r\nC:/Ruby32-x64/bin/ruby.exe:        69.7 i/s\r\nbin/opal-bench-firefox.bat:         1.4 i/s - 48.97x  slower\r\nbin/opal-bench-chrome.bat:         1.1 i/s - 61.26x  slower\r\nbin/opal-bench-node.bat:         1.1 i/s - 63.93x  slower\r\n```\r\n",
      "Reverted 6ef5abea33259822ef5ee10d1121025c58b40687, everything working!\r\n",
      "@janbiedermann we moved this to v1.7 so it's not blocking the imminent release of v1.6 and also because we mean to release v1.7 on Christmas.",
      "Try the synchronous Coverage support in chrome runner with:\r\n```\r\nrequire 'coverage'\r\n\r\nCoverage.start\r\nputs \"test\"\r\nputs Coverage.result\r\n```\r\n\r\nResult is a bit raw from CDP, not ruby compatible yet, WIP",
      "Ref: #1382",
      "Supporting :methods and :branches format seems possible to some extend, if we can transform the cryptical javascript back to ruby method names/blocks, maybe its an idea for the compiler to provide hints within those names or something like that.\r\nI leave it at :lines and :oneshot_lines support for the moment, cleanup, squash and will try to port Coverage support to the firefox runner and implement a node CDP runner, so that we can have Coverage with node too, maybe, need to research whats possible",
      "No Coverage support for Firefox, because:\r\n```\r\nrequest: {\r\n    method: 'Debugger.enable',\r\n    params: undefined,\r\n    sessionId: undefined\r\n  },\r\n  response: {\r\n    message: 'Debugger.enable',\r\n    data: 'RemoteAgentError@chrome://remote/content/cdp/Error.sys.mjs:20:5\\n' +\r\n      'UnknownMethodError@chrome://remote/content/cdp/Error.sys.mjs:103:7\\n' +\r\n      'execute@chrome://remote/content/cdp/domains/DomainCache.sys.mjs:92:13\\n' +\r\n      'receiveMessage@chrome://remote/content/cdp/sessions/ContentProcessSession.sys.mjs:79:45\\n'\r\n  }\r\n```\r\n\r\nI tried different ways, same result. Moving on to node ...\r\n",
      "There is a problem with node and CDP, well, sure there is, when doing Debug.enable() the script is not executed ... so at the moment it runs scripts, buts its useless for Coverage. I tried to do the same as VSCode https://github.com/microsoft/vscode-js-debug/blob/47c60558ec31902f42c255abb9b460078df02f9d/src/targets/node/nodeTarget.ts#L154\r\nNeeds more research, whats going on.",
      "Removing Coverage via CDP and nodecdp runner. In theory CDP could provide us with some goodies for performance and coverage and debugging, but in practice implementations don't work as expected. Maybe its worth to try again in a couple of years, if/when CDP implementations in practice catch up to theory.",
      "Benchmarking Ruby WASM or other Rubies\r\n\r\nTo benchmark Ruby WASM there are 2 ways:\r\n1. make Ruby WASM the current ruby, so calling `ruby` would execute Ruby WASM\r\n2. set the `OPAL_BENCH_EXTRA_RUBIES` environment variable to point to Ruby WASM\r\n\r\nOptcarrot\r\n\r\nOptcarrot provides a benchmark.yaml for benchmark_driver, this can be used as arg to rake bench:\r\nrake bench:opal_nodejs[path/to/optcarrot/benchmark.yaml]\r\n\r\nprovided that paths in benchmark.yaml are set up correctly",
      "Ready",
      "We have reviewed all the patchset today - it's really great :D, but we want to have a better understanding of this patchset, so this week we will split it into parts and merge them.",
      "This has been fully merged, but split into those 6 pull requests. Thanks again!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f1dd6ca63ac8d87ea35",
    "number": 2460,
    "body": "Trying to fix remaining issues when running specs on Windows.\r\n\r\nProblem for specs related to Exceptions and stack traces:\r\nPosition information is completely wrong, related to sourcemaps\r\n\r\nIn chrome positions are offset by the length of runtime.js lines.\r\nThe difference to Linux seems to be that git checked out runtime.js with \\r\\n line breaks instead of \\n, which may or may not cause this issues.\r\n",
    "head_branch": "fix_windows_specs",
    "is_a_fork": true,
    "comments": [
      "Yessssss! Fixed it, finally. When reading sources as binary, must also write them as binary! Otherwise, they get mangled. This may affect other places too.",
      "Anything that uses Opal::Builder.build.to_s and writes the result to a filesystem, must write the result in binary mode.",
      "Depends on #2454 #2451 to properly work on Windows",
      "Now all specs pass on Windows too (with #2454 #2451)\r\n\r\n:-)",
      "So this is probably why it worked well on Windows for me, because I have no conversion enabled in my Git MSYS setup.",
      "```\r\n  1) Failure:\r\nTestNodejsFile#test_windows_file_expand_path [nodejs/test_file.rb:189:5]:\r\nshould add a trailing slash when the path is d:.\r\nExpected: \"d:/\"\r\n  Actual: \"d:/a/opal/opal\"\r\n```\r\nI can't reproduce and i have no idea, how that happens.",
      "Well, it looks to me like a classic c programming failure issue.",
      "It could also be, that github set up a symlink for d:, lets try different drive letters",
      "Really, d: is a symlink",
      "All green",
      "All green > again <"
    ],
    "commit_messages": [
      "Merge pull request #2460 from janbiedermann/fix_windows_specs\n\nFix specs on Windows"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f1dd6ca63ac8d87ea36",
    "number": 2459,
    "body": "This fixes #2425",
    "head_branch": "hmdne/fix-2425",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2459 from opal/hmdne/fix-2425\n\nFix await_encountered error for complex begin in top node"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f1ed6ca63ac8d87ea37",
    "number": 2458,
    "body": "In MRI, when reading a file with \\r\\n as line separator, File#read and File.open.read return \\r\\n as \\n.\r\nFile#binread or File.open.read with mode 'b' will still return \\r\\n as \\r\\n",
    "head_branch": "read_like_ruby",
    "is_a_fork": true,
    "comments": [
      "Do we get some new tests passed probably?",
      "Ah, nevermind, we don't test Node stdlib with mspec...",
      "I checked, did not find any filtered ones, that would apply",
      "After some research, I think that commit is kind of wrong. While you are right, that read and binread (or open without and with \"b\" flag) have different semantics, they have only on Windows (on Unix they are the same, see below):\r\n\r\n```\r\n[3] pry(main)> File.write(\"/tmp/test\", \"abc\\r\\n\")\r\n=> 5\r\n[4] pry(main)> File.read(\"/tmp/test\")\r\n=> \"abc\\r\\n\"\r\n[5] pry(main)> File.open(\"/tmp/test\", &:read)\r\n=> \"abc\\r\\n\"\r\n[6] pry(main)>\r\n```\r\n\r\nThe further question is, should Opal differentiate Windows systems or always follow Unix semantics for portability?",
      "Actually your example works likewise on Windows ruby, so this PR is kinda bogus. I was trying to fix something else and came accross this inconsitency. The cause may be somewhere else, i will continue investigating."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f1fd6ca63ac8d87ea38",
    "number": 2457,
    "body": null,
    "head_branch": "fix_performance_size_calculation",
    "is_a_fork": true,
    "comments": [
      "Shows accurate size changes:\r\n\r\n                   Bundle size: 4719.11 kB -> 4743.97 kB (change: +0.53%)\r\n          Minified bundle size: 993.97 kB -> 999.56 kB (change: +0.56%)\r\n            Mangled & minified: 703.69 kB -> 706.88 kB (change: +0.45%)\r\n\r\n(bevore change was everywhere -1.00%)\r\n            \r\n            "
    ],
    "commit_messages": [
      "Merge pull request #2457 from janbiedermann/fix_performance_size_calculation\n\nFix performance:compare asset size calculation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f20d6ca63ac8d87ea39",
    "number": 2456,
    "body": "This PR, based on #2455 tries to minimize obstructions like:\r\n- node startup\r\n- file io\r\n- garbage collection\r\n\r\nIt measures within node using performance.*\r\n\r\nIts focused on asciidoctor run time.\r\n\r\nBut still variation is too high, basically no advantage over #2455, to accurately measure small performance improvements.",
    "head_branch": "performance_variation_reduction",
    "is_a_fork": true,
    "comments": [
      "This PR needs ruby 3.1 because of speednode",
      "                     Run time: 1.793 (+1.52%) -> 1.805 (+0.97%) (change: +0.72%)\r\n                Speed run time: 1.848 (+0.75%) -> 1.837 (+0.78%) (change: -0.63%)"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f21d6ca63ac8d87ea3a",
    "number": 2455,
    "body": "Keeps the performance task running until WITHIN_VARIATION results are within best_time + MAX_VARIATION %\r\n\r\nMAX_VARIATION here is set to 3%\r\nWITHIN_VARIATION here is set to 10\r\n=>  If 10 results are within best_time + 3%, take the best time to compare\r\n\r\n\r\nVerifying a performance improvement\r\n\r\nLets say a improvement of 1.5% is expected.\r\n- Set MAX_VARIATION to below 1.5%, maybe 1%\r\n- run the task\r\n- if change is larger than variation and around the expected 1.5%, the improvement is verified within margin\r\n- run multiple times to verify\r\n\r\n\r\nLimits:\r\nImprovements in Opal currently are usually below 2%, most often below 0.5%\r\nBest achievable variation for 10 best times on my machine out of a total of 128 tries is around 0.65%\r\nOn my machine setting MAX_VARIATION to below 1% is useless,\r\nthus accurately verifying improvements below 1% is not possible (unless setting tries to a very high number)\r\n\r\n\r\nHowever, github results should be more reliable, as variation is kept below 3%.\r\nSo if the -5% change is hit, its probably accurate and not due to high variation.\r\n\r\n\r\nPlease play a bit with it, set MAX_VARIATION to 0.1 and max_tries to 128 and see whats the best variation that can be achieved on your machine",
    "head_branch": "performance_variation",
    "is_a_fork": true,
    "comments": [
      "Limitations of github actions become visible:\r\n\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 3.573 (+5.31%) -> 3.547 (+2.56%) (change: -0.72%)\r\n                      Run time: 1.514 (+1.73%) -> 1.510 (+1.75%) (change: -0.29%)\r\n                      \r\nIt seems like short benchmarks can be more accurate than longer ones.\r\nThe target of 3% for the shorter run time benchmarks has been hit very quickly.\r\nBut even 64 tries have not been enough to keep the 10 best results within the 3% variation for the compile time benchmark.\r\n                ",
      "github actions second result, similar:\r\n\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 2.854 (+6.60%) -> 2.890 (+6.30%) (change: +1.27%)\r\n                      Run time: 1.204 (+2.00%) -> 1.196 (+2.49%) (change: -0.67%)",
      "github actions third result, similar:\r\n\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 4.071 (+4.34%) -> 3.958 (+5.02%) (change: -2.79%)\r\n                      Run time: 1.692 (+1.21%) -> 1.691 (+1.78%) (change: -0.03%)",
      "@hmdne\r\n\r\nIn all 3 github action runs above, the actual change should have been 0 or at least close to 0.\r\n\r\nConclusion:\r\n- the compile time benchmark provides no or false information due to high variation when running on github action machines with a max change of -2.79%\r\n- averaging over a multitude of smaller benchmarks with shorter runtime may provide us with a much better performance trend\r\non github actions"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f22d6ca63ac8d87ea3b",
    "number": 2454,
    "body": "Fix\r\nopal/lib/opal/builder.rb:133:in `map': undefined method `source_map' for nil:NilClass (NoMethodError)\r\n\r\n      ::Opal::SourceMap::Index.new(processed.map(&:source_map), join: \"\\n\")\r\n                                            ^^^^\r\n        from C:/Users/jan/workspace/opal/lib/opal/builder.rb:133:in `source_map'\r\n        from C:/Users/jan/workspace/opal/lib/opal/cli_runners/chrome.rb:67:in `prepare_files_in'\r\n        from C:/Users/jan/workspace/opal/lib/opal/cli_runners/chrome.rb:40:in `block (2 levels) in run'\r\n        from C:/Users/jan/workspace/opal/lib/opal/cli_runners/chrome.rb:110:in `block in with_chrome_server'\r\n        from C:/Users/jan/workspace/opal/lib/opal/cli_runners/chrome.rb:133:in `run_chrome_server'\r\n        from C:/Users/jan/workspace/opal/lib/opal/cli_runners/chrome.rb:110:in `with_chrome_server'\r\n        from C:/Users/jan/workspace/opal/lib/opal/cli_runners/chrome.rb:39:in `block in run'\r\n        from C:/Ruby32-x64/lib/ruby/3.2.0+3/tmpdir.rb:94:in `mktmpdir'\r\n        from C:/Users/jan/workspace/opal/lib/opal/cli_runners/chrome.rb:189:in `mktmpdir'\r\n        from C:/Users/jan/workspace/opal/lib/opal/cli_runners/chrome.rb:38:in `run'\r\n        from C:/Users/jan/workspace/opal/lib/opal/cli_runners/chrome.rb:19:in `call'\r\n        from C:/Users/jan/workspace/opal/lib/opal/cli.rb:79:in `run'\r\n        from exe/opal:26:in `<main>'",
    "head_branch": "fix_undef_source_map",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2454 from janbiedermann/fix_undef_source_map\n\nFix \"undefined method source_map for nil\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f23d6ca63ac8d87ea3c",
    "number": 2453,
    "body": null,
    "head_branch": "bench_unpack",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2453 from janbiedermann/bench_unpack\n\nBenchmarks require string/unpack"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f24d6ca63ac8d87ea3d",
    "number": 2452,
    "body": null,
    "head_branch": "no_constructor",
    "is_a_fork": true,
    "comments": [
      "Also helps performance and bundle size a tiny bit"
    ],
    "commit_messages": [
      "Merge pull request #2452 from janbiedermann/no_constructor\n\nEliminate var constructor in allocate_class, seems redundant"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f25d6ca63ac8d87ea3e",
    "number": 2451,
    "body": "Avoids exceoptions: JSON::GeneratorError and Encoding::UndefinedConversionError\r\n\r\nsourcesContent will be valid UTF8. invalid UTF8 will be replaced by �\r\n\r\nThe previously used #force_encoding will keep invalid characters which may cause failures during subsequent handling of sourcesContent within opal or external consumers",
    "head_branch": "source_encoding",
    "is_a_fork": true,
    "comments": [
      "fixing:\r\nC:/Users/jan/workspace/opal/lib/opal/source_map/map.rb:12:in `to_json': source sequence is illegal/malformed utf-8 (JSON::GeneratorError)\r\n        from C:/Users/jan/workspace/opal/lib/opal/source_map/map.rb:12:in `to_json'\r\n        from C:/Users/jan/workspace/opal/lib/opal/cli_runners/chrome.rb:67:in `prepare_files_in'\r\n        from C:/Users/jan/workspace/opal/lib/opal/cli_runners/chrome.rb:40:in `block (2 levels) in run'\r\n        from C:/Users/jan/workspace/opal/lib/opal/cli_runners/chrome.rb:104:in `with_chrome_server'\r\n        from C:/Users/jan/workspace/opal/lib/opal/cli_runners/chrome.rb:39:in `block in run'\r\n        from C:/Ruby32-x64/lib/ruby/3.2.0+3/tmpdir.rb:94:in `mktmpdir'\r\n        from C:/Users/jan/workspace/opal/lib/opal/cli_runners/chrome.rb:178:in `mktmpdir'\r\n        from C:/Users/jan/workspace/opal/lib/opal/cli_runners/chrome.rb:38:in `run'\r\n        from C:/Users/jan/workspace/opal/lib/opal/cli_runners/chrome.rb:19:in `call'\r\n        from C:/Users/jan/workspace/opal/lib/opal/cli_runners.rb:50:in `block in register_runner'\r\n        from C:/Users/jan/workspace/opal/lib/opal/cli.rb:71:in `run'\r\n        from exe/opal:26:in `<main>'"
    ],
    "commit_messages": [
      "Merge pull request #2451 from janbiedermann/source_encoding\n\nEnsure UTF8 encoding of sourcesContent of SourceMaps"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f26d6ca63ac8d87ea3f",
    "number": 2450,
    "body": null,
    "head_branch": "windows_performance_compare",
    "is_a_fork": true,
    "comments": [
      "Now ready",
      "@hmdne OS abstraction is working great "
    ],
    "commit_messages": [
      "Merge pull request #2450 from janbiedermann/windows_performance_compare\n\nWindows performance:compare"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f27d6ca63ac8d87ea40",
    "number": 2449,
    "body": "delete is expensive, seems like there is no need to delete $$p, setting it to null seems enough",
    "head_branch": "block_booster",
    "is_a_fork": true,
    "comments": [
      "Comparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 7.117 (±0.54%) -> 7.091 (±0.40%) (change: -0.37%)\r\n                      Run time: 1.723 (±1.07%) -> 1.693 (±7.59%) (change: -1.74%)\r\n                      \r\nLooks good :-)"
    ],
    "commit_messages": [
      "Merge pull request #2449 from janbiedermann/block_booster\n\nImprove method block performance"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f28d6ca63ac8d87ea41",
    "number": 2448,
    "body": "Basically the same as https://github.com/opal/opal/pull/2444 except it removes the frozen check runtime penalty from Hash, Array and Module. This version should have the same runtime performance as Opal without #freeze support (within a tiny margin).",
    "head_branch": "ham_freeze_faster",
    "is_a_fork": true,
    "comments": [
      "Ready.",
      "Closing this inf favour of #2444 . All changes from comments @elia implemented in #2444"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f29d6ca63ac8d87ea42",
    "number": 2446,
    "body": null,
    "head_branch": "hmdne/rspec-update-2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2446 from opal/hmdne/rspec-update-2\n\nRSpec update 2: port Delegate and ruby2_keywords"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f2ad6ca63ac8d87ea43",
    "number": 2444,
    "body": "Generic #freeze and #frozen? based on Object.seal and property getters/setters and a $$frozen flag.",
    "head_branch": "ham_freeze",
    "is_a_fork": true,
    "comments": [
      "Problems that showed today:\r\n- Specs expect frozen strings in various places, however in non strict mode of Javascript a automatic conversion of string primitives to String objects happens (string primitives are always frozen, string objects not by default)\r\n- Using String objects at those places instead of primitives causes internal problems because the === operator is used, so that comparision of string primitive with a String object will always fail\r\n- adding instance vars to sealed objects in non strict mode silently fails, should throw ideally\r\n\r\n",
      "We have reviewed this with @elia today, so my comments are ours together. Overall, the patch is all fine and we want it for v1.6. Unfortunately, we merged another patch which started some conflict with `spec/filters/unsupported/freeze.rb` (as always, before the final merge, please squash and rebase; we prefer to have in history logical parts of the changeset, not history of changes while in development). Also I see there's a failing test from mspec_opal suite (run `bundle exec rake mspec_opal_nodejs` to review it).\r\n\r\nOther thing we noted is that there is quite a significant decrease in performance due to this patch. This is understandable, probably stems from the usage of the runtime macro basically everywhere. I thought about adding a compiler option to disable the freeze functionality altogether where it isn't needed, but let's not worry about it for now.\r\n\r\nSo, in short, it's great to get closer to MRI when we though in the past it won't be possible to implement freeze at all. Thanks for all the great work :D",
      "Reopening for research purposes",
      "Took over some improvements from #2448 and squashed it",
      "For the record:\r\nCompile time: 4.396 (+26.56%) -> 4.404 (+20.05%) (change: +0.18%)\r\n    Run time: 1.756 (+3.72%) -> 1.753 (+14.00%) (change: -0.15%)\r\n    \r\n(without any intended tuning, just demonstrating that its not as bad and the benchmarks vary)",
      "This looks great to me. I will aim to do a final review on Wednesday and finally merge it!",
      "da53da8 shows a clear benefit in benchmarks, that specifically test the touched areas, like Array#<<, however the benefit is barely measurable in performance:compare.\r\nThe intention was, to generally compensate for $deny_frozen_access, but that seems to work only for specific areas, not generally.\r\nMaybe better not merge da53da8?",
      "Ill remove da53da8, needs more research."
    ],
    "commit_messages": [
      "Merge pull request #2444 from janbiedermann/ham_freeze\n\n#freeze and #frozen?"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f2ad6ca63ac8d87ea44",
    "number": 2443,
    "body": null,
    "head_branch": "frozen_receiver",
    "is_a_fork": true,
    "comments": [
      "Superseeded by #2448 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f2bd6ca63ac8d87ea45",
    "number": 2442,
    "body": "Mostly working, well pragmatically working in a acceptable way\r\n\r\nI still need to check performance impact of using Object.freeze, maybe it has to go and using the $$frozen flag has to be sufficient, or maybe Object.freeze can be optional.\r\n\r\nObject.freeze on the Hash instance causes lots of problems with other specs.\r\n\r\nIf in matz ruby one does:\r\n```\r\na = Hash.new.freeze\r\na.define_singleton_method(:b) { true } # >> FrozenError\r\n```\r\n\r\nBut that doesnt happen yet with this implementation.\r\nEither $$frozen can be accepted globally, so that other methods can check, or Object.freeze on the instance can be made to work. Not sure yet, need to investigate the problems with the other specs further.\r\n\r\n",
    "head_branch": "hash_freeze",
    "is_a_fork": true,
    "comments": [
      "The specs, that are not enabled yet, depend on Object#freeze or String#freeze",
      "Performance penalty by Object.freeze is not too bad for the use cases i tried, adds ~1.4% for example when freezing state and props during render cycle.",
      "Ill open another PR with Hash#freeze, Array#freeze and Module#freeze soon, lets see how that goes",
      "Superseeded by #2448 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f2cd6ca63ac8d87ea46",
    "number": 2441,
    "body": "on Windows that is",
    "head_branch": "chrome_cli",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2441 from janbiedermann/chrome_cli\n\nFix space in path preventing chrome runner to start chrome"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f2dd6ca63ac8d87ea47",
    "number": 2440,
    "body": "Those fixes will be needed for the related RSpec update",
    "head_branch": "hmdne/rspec-update",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2440 from opal/hmdne/rspec-update\n\nOpal fixes for RSpec update"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f2ed6ca63ac8d87ea48",
    "number": 2439,
    "body": "* We now load a headless chrome platform ONLY if Chrome CLIRunner is being used\r\n* We inhibit a default exit from CDP interface if Kernel#exit hasn't been called (and opal-platform has been loaded)\r\n* We modify Kernel#exit to run a special alert message to communicate with Chrome CDP interface (we would have sent an exception, but it doesn't bubble in the async mess - perhaps it will once we migrate to PromiseV2)\r\n\r\nThanks to Brandon Gastelo for spotting this bug.\r\n\r\nRef: opal-rspec#89",
    "head_branch": "hmdne/chrome-clirunner-async-exit",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2439 from opal/hmdne/chrome-clirunner-async-exit\n\nChrome CLI Runner to facilitate an async exit."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f2fd6ca63ac8d87ea49",
    "number": 2438,
    "body": "So String#length and String#size definition should be moved from string/encoding.rb (which is not loaded by opal/mini.rb) to string.rb",
    "head_branch": "string-length",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2438 from dan42/string-length\n\nString#length should be available when using opal/mini.rb"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f30d6ca63ac8d87ea4a",
    "number": 2437,
    "body": "This is an early experimental branch aimed at supporting proper ESM import and export. At this point I see many issues with static import, namely:\r\n\r\n- imports can be only done at top level. NodeJS support needs `fs` at least, then if we load `opal/platform`, then it simply won't work if ran on other platforms.\r\n- they are incompatible with how require() works, for instance path resolution doesn't work for me, I need more time to understand the issue\r\n\r\nBut in short, it works in the following way:\r\n\r\n```ruby\r\nfs = ::JS.import(\"fs\") # => toplevel: import * as _tmpvar_ from \"fs\";, Opal.esm_imports[\"_something_\"] = _tmpvar;\r\n                       # => fs = Opal.esm_imports[\"_something_\"]\r\n::JS.export(\"name\", 10) # => toplevel: export name Opal.esm_exports[\"_somethingelse_\"];\r\n                        # => Opal.esm_exports[\"_somethingelse_\"] = 10\r\n```",
    "head_branch": "hmdne/esm-import-export",
    "is_a_fork": false,
    "comments": [
      "This PR is superseded by #2502."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f31d6ca63ac8d87ea4b",
    "number": 2436,
    "body": "Refactor the Server CLI Runner to use Opal::SimpleServer\r\n    \r\n* We extend the API here - if runner.dynamic_builder? then it doesn't\r\n  provide the runners with a Builder, but a proc that returns a Builder\r\n  which will always correspond to an up-to-date code.\r\n* As a result - now the server runner will supply an up-to-date code\r\n  each refresh.\r\n",
    "head_branch": "hmdne/server-runner",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2436 from opal/hmdne/server-runner\n\nServer CLIRunner refactor"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f32d6ca63ac8d87ea4c",
    "number": 2435,
    "body": "* This also fixes a bug which caused CLI options `-r` to not be tracked by loaded_features\r\n* This fixes a bug which caused CLI-generated ESM files to have a double default export",
    "head_branch": "hmdne/esm-cli-support",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2435 from opal/hmdne/esm-cli-support\n\nAdd CLI support for ESM, at least for Chrome, NodeJS, QuickJS and GJS"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f33d6ca63ac8d87ea4d",
    "number": 2434,
    "body": null,
    "head_branch": "hmdne/optimizations",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f34d6ca63ac8d87ea4e",
    "number": 2433,
    "body": "This fixes #2424",
    "head_branch": "hmdne/if-wrapped-return",
    "is_a_fork": false,
    "comments": [
      "I think this is the bug I was trying to resolve with that random commit in the DCE branch, thanks for getting rid of it 👍 "
    ],
    "commit_messages": [
      "Merge pull request #2433 from opal/hmdne/if-wrapped-return\n\nFix an edge case of if in the most complex form not returning"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f35d6ca63ac8d87ea4f",
    "number": 2432,
    "body": "This PR adds explicit [permissions section](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions) to workflows. This is a security best practice because by default workflows run with [extended set of permissions](https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token) (except from `on: pull_request` [from external forks](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/)). By specifying any permission explicitly all others are set to none. By using the principle of least privilege the damage a compromised workflow can do (because of an [injection](https://securitylab.github.com/research/github-actions-untrusted-input/) or compromised third party tool or action) is restricted.\r\nIt is recommended to have [most strict permissions on the top level](https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions) and grant write permissions on [job level](https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs) case by case.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Please let me know if you have any questions.",
      "I'm sorry for no reply on our part. We typically do PR reviews with @elia on Wednesdays, but recent two Wednesdays I was away."
    ],
    "commit_messages": [
      "Merge pull request #2432 from sashashura/patch-1\n\nGitHub Workflows security hardening"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f36d6ca63ac8d87ea50",
    "number": 2431,
    "body": "Over time we'll probably mark the whole core library as pristine.\r\nPristine was also added to class.rb so Class#allocate would be marked as pristine.",
    "head_branch": "elia/pristine-magic-comment",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f37d6ca63ac8d87ea51",
    "number": 2430,
    "body": "The ryzen runner is currently down, although going back to the GH runner could have more variance, it's worth a try.",
    "head_branch": "elia/performance-tests-fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2430 from opal/elia/performance-tests-fix\n\nRun performance tests on GitHub actions until ryzen is back"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f38d6ca63ac8d87ea52",
    "number": 2429,
    "body": null,
    "head_branch": "elia/guides-updates",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2429 from opal/elia/guides-updates\n\nGuides index"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f39d6ca63ac8d87ea53",
    "number": 2427,
    "body": "same as #2403 just for Hash#each_value",
    "head_branch": "hash_each_value_delete",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2427 from janbiedermann/hash_each_value_delete\n\nFix exception during `Hash#each_value` if keys get deleted during loop"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f39d6ca63ac8d87ea54",
    "number": 2426,
    "body": "Fixes #2405\r\n\r\nThis is more general way than #2406.",
    "head_branch": "fix-2405",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Merge pull request #2426 from takaram/fix-2405\n\nMake `Time.new` not depend on `Date.prototype.getTimezoneOffset()`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f3ad6ca63ac8d87ea55",
    "number": 2420,
    "body": "Fixes #1605 among other things. ",
    "head_branch": "fix/StringScanner",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2420 from Leon0402/fix/StringScanner\n\nFix `scan_until` and `check_until` implementation of StringScanner"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f3bd6ca63ac8d87ea56",
    "number": 2419,
    "body": "Some experiments on uninlining things. I'm curious about the performance benefits from that.",
    "head_branch": "hmdne/uninline",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2419 from opal/hmdne/uninline\n\nUninline non-typical argument handling"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f3cd6ca63ac8d87ea57",
    "number": 2418,
    "body": "This fixes #2417\r\n\r\nCo-authored-by: Lionel Chauvin <megabigbug@yahoo.fr>",
    "head_branch": "hmdne/fix-2417",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2418 from opal/hmdne/fix-2417\n\nCorrect String#to_proc and method_missing compatibility"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f3dd6ca63ac8d87ea58",
    "number": 2416,
    "body": "The default folder was set to spec instead of spec/lib.",
    "head_branch": "elia/rspec",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f3ed6ca63ac8d87ea59",
    "number": 2415,
    "body": "This pull request includes non-controversial logic changes to runtime.js",
    "head_branch": "hmdne/misc-optimization",
    "is_a_fork": false,
    "comments": [
      "This actually happens to decrease the run time. I anticipated easy gains. Will need some rework."
    ],
    "commit_messages": [
      "Merge pull request #2415 from opal/hmdne/misc-optimization\n\nLogic optimization of runtime.js"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f3fd6ca63ac8d87ea5a",
    "number": 2414,
    "body": null,
    "head_branch": "elia/dce-tangential-fixes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2414 from opal/elia/dce-tangential-fixes\n\nMisc changes extracted from DCE work"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f40d6ca63ac8d87ea5b",
    "number": 2413,
    "body": "This is how modern Ruby works... maybe not a big change but perhaps we can gain some performance.",
    "head_branch": "hmdne/string-no-cast",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2413 from opal/hmdne/string-no-cast\n\nString methods always return Strings even when overloaded"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f41d6ca63ac8d87ea5c",
    "number": 2412,
    "body": null,
    "head_branch": "hmdne/opt-experiments",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f42d6ca63ac8d87ea5d",
    "number": 2411,
    "body": "<s>Basically an experiment to improve opalopal compiler performance and something more perhaps...</s>\r\n\r\nThis improves deeply nested `case` structures, like in... lexer.\r\nCompared to a tree of else ifs, `switch` is more like a goto, so more\r\nlikely to be more performant.\r\n    \r\nThis makes our `ifs` (or `&&`, `||`) to be compiled to either `if`,\r\nternary, `&&`, `||` or `switch`, making use of all the JS control flow\r\nfeatures.",
    "head_branch": "hmdne/case-to-if-to-switch",
    "is_a_fork": false,
    "comments": [
      "Benchmark:\r\n\r\n```ruby\r\n#!/usr/bin/env ruby\r\nsystem 'find -name \\*k_spec.rb | xargs cat > _hugespec.rb'\r\n\r\nsystem 'ls -alh _hugespec.rb'\r\n\r\ninit = <<~RUBY\r\n  if RUBY_ENGINE == 'opal'\r\n    require \"opal/platform\"\r\n    require \"opal-parser\"\r\n  else\r\n    require \"bundler/setup\"\r\n    require \"opal\"\r\n  end\r\n\r\n  out = Opal.compile(DATA.read);\r\n\r\n  puts out\r\n\r\n  __END__\r\nRUBY\r\n\r\nENV['OPAL_CACHE_DISABLE'] = '1'\r\n\r\nputs \"Compiling Opal-Parser\"\r\nputs \"---------------------\"\r\n\r\nFile.write('_hugespecopal.rb', init + File.read('_hugespec.rb'))\r\nsystem 'time bin/opal --no-cache --no-source-map -c _hugespecopal.rb >_hugespecopal.js'\r\n\r\nputs\r\nputs \"Running with MRI\"\r\nputs \"----------------\"\r\n\r\nsystem 'time ruby _hugespecopal.rb >/dev/null'\r\n\r\nputs\r\nputs \"Running with Node\"\r\nputs \"-----------------\"\r\n\r\nsystem 'time node _hugespecopal.js >/dev/null'\r\n\r\nputs\r\nputs \"Running with GJS\"\r\nputs \"----------------\"\r\n\r\nsystem 'time gjs _hugespecopal.js >/dev/null'\r\n```\r\n\r\nAfter this PR:\r\n\r\n```\r\n[user@localhost opal]# ruby _mkhugespec.rb \r\n-rw-r--r--. 1 user root 324K Mar 25 07:44 _hugespec.rb\r\nCompiling Opal-Parser\r\n---------------------\r\nCalling `DidYouMean::SPELL_CHECKERS.merge!(error_name => spell_checker)' has been deprecated. Please call `DidYouMean.correct_error(error_name, spell_checker)' instead.\r\n\r\nreal\t0m9.915s\r\nuser\t0m9.639s\r\nsys\t0m0.227s\r\n\r\nRunning with MRI\r\n----------------\r\nCalling `DidYouMean::SPELL_CHECKERS.merge!(error_name => spell_checker)' has been deprecated. Please call `DidYouMean.correct_error(error_name, spell_checker)' instead.\r\n\r\nreal\t0m3.936s\r\nuser\t0m3.828s\r\nsys\t0m0.095s\r\n\r\nRunning with Node\r\n-----------------\r\nObject freezing is not supported by Opal\r\n\r\nreal\t0m20.537s\r\nuser\t0m22.689s\r\nsys\t0m0.467s\r\n\r\nRunning with GJS\r\n----------------\r\nGjs-Message: 07:45:18.242: JS WARNING: [_hugespecopal.js 14376]: unreachable code after return statement\r\nGjs-Message: 07:45:18.243: JS WARNING: [_hugespecopal.js 16573]: unreachable code after return statement\r\nObject freezing is not supported by Opal\r\nGjs-Message: 07:45:43.639: JS WARNING: [_hugespecopal.js 14376]: unreachable code after return statement\r\n\r\nreal\t0m30.173s\r\nuser\t0m29.988s\r\nsys\t0m0.234s\r\n[user@localhost opal]# \r\n```\r\n\r\nBefore this PR:\r\n\r\n```\r\n[user@localhost opal]# ruby _mkhugespec.rb \r\n-rw-r--r--. 1 user root 324K Mar 25 07:46 _hugespec.rb\r\nCompiling Opal-Parser\r\n---------------------\r\nCalling `DidYouMean::SPELL_CHECKERS.merge!(error_name => spell_checker)' has been deprecated. Please call `DidYouMean.correct_error(error_name, spell_checker)' instead.\r\n\r\nreal\t0m10.018s\r\nuser\t0m9.696s\r\nsys\t0m0.276s\r\n\r\nRunning with MRI\r\n----------------\r\nCalling `DidYouMean::SPELL_CHECKERS.merge!(error_name => spell_checker)' has been deprecated. Please call `DidYouMean.correct_error(error_name, spell_checker)' instead.\r\n\r\nreal\t0m3.914s\r\nuser\t0m3.799s\r\nsys\t0m0.102s\r\n\r\nRunning with Node\r\n-----------------\r\nObject freezing is not supported by Opal\r\n\r\nreal\t0m22.283s\r\nuser\t0m24.223s\r\nsys\t0m0.447s\r\n\r\nRunning with GJS\r\n----------------\r\nGjs-Message: 07:47:06.468: JS WARNING: [_hugespecopal.js 14362]: unreachable code after return statement\r\nGjs-Message: 07:47:06.469: JS WARNING: [_hugespecopal.js 16559]: unreachable code after return statement\r\nObject freezing is not supported by Opal\r\nGjs-Message: 07:47:34.119: JS WARNING: [_hugespecopal.js 14362]: unreachable code after return statement\r\n\r\nreal\t0m32.439s\r\nuser\t0m32.224s\r\nsys\t0m0.255s\r\n[user@localhost opal]# \r\n```\r\n\r\nTo be honest I anticipated bigger gains, since we now compile the lexer to a switch tree. Also surprised that GJS has lower performance here. I will try a few more tricks, perhaps a different dataset.",
      "Let's keep this test for longer time reference (upper is master, lower is this patchset):\r\n\r\n```ruby\r\n[user@localhost opal]# ruby _mkhugespec.rb \r\n-rw-r--r--. 1 user root 564K Mar 25 08:20 _hugespec.rb\r\nCompiling Opal-Parser\r\n---------------------\r\nCalling `DidYouMean::SPELL_CHECKERS.merge!(error_name => spell_checker)' has been deprecated. Please call `DidYouMean.correct_error(error_name, spell_checker)' instead.\r\n\r\nreal\t0m11.588s\r\nuser\t0m11.254s\r\nsys\t0m0.281s\r\n\r\nRunning with MRI\r\n----------------\r\n\r\nreal\t0m7.603s\r\nuser\t0m7.439s\r\nsys\t0m0.139s\r\n\r\nRunning with Node\r\n-----------------\r\n\r\nreal\t0m36.439s\r\nuser\t0m38.625s\r\nsys\t0m1.283s\r\n\r\nRunning with GJS\r\n----------------\r\nGjs-Message: 08:21:26.288: JS WARNING: [_hugespecopal.js 14362]: unreachable code after return statement\r\nGjs-Message: 08:21:26.289: JS WARNING: [_hugespecopal.js 16559]: unreachable code after return statement\r\n\r\nreal\t0m54.426s\r\nuser\t0m54.031s\r\nsys\t0m0.411s\r\n[user@localhost opal]# git checkout hmdne/case-to-if-to-switch\r\nSwitched to branch 'hmdne/case-to-if-to-switch'\r\nYour branch is up to date with 'upstream/hmdne/case-to-if-to-switch'.\r\n[user@localhost opal]# ruby _mkhugespec.rb \r\n-rw-r--r--. 1 user root 564K Mar 25 08:22 _hugespec.rb\r\nCompiling Opal-Parser\r\n---------------------\r\nCalling `DidYouMean::SPELL_CHECKERS.merge!(error_name => spell_checker)' has been deprecated. Please call `DidYouMean.correct_error(error_name, spell_checker)' instead.\r\n\r\nreal\t0m11.674s\r\nuser\t0m11.368s\r\nsys\t0m0.260s\r\n\r\nRunning with MRI\r\n----------------\r\n\r\nreal\t0m7.436s\r\nuser\t0m7.264s\r\nsys\t0m0.147s\r\n\r\nRunning with Node\r\n-----------------\r\n\r\nreal\t0m34.113s\r\nuser\t0m36.154s\r\nsys\t0m1.194s\r\n\r\nRunning with GJS\r\n----------------\r\nGjs-Message: 08:23:39.134: JS WARNING: [_hugespecopal.js 14376]: unreachable code after return statement\r\nGjs-Message: 08:23:39.135: JS WARNING: [_hugespecopal.js 16573]: unreachable code after return statement\r\n\r\nreal\t0m50.805s\r\nuser\t0m50.467s\r\nsys\t0m0.371s\r\n[user@localhost opal]# cat _mkhugespec.rb \r\n#!/usr/bin/env ruby\r\nsystem 'find -name a\\*_spec.rb | xargs cat > _hugespec.rb'\r\n\r\nsystem 'ls -alh _hugespec.rb'\r\n\r\ninit = <<~RUBY\r\n  if RUBY_ENGINE == 'opal'\r\n    require \"opal/platform\"\r\n    require \"opal-parser\"\r\n  else\r\n    require \"bundler/setup\"\r\n    require \"opal\"\r\n  end\r\n\r\n  out = Opal.compile(DATA.read);\r\n\r\n  puts out\r\n\r\n  __END__\r\nRUBY\r\n\r\nENV['OPAL_CACHE_DISABLE'] = '1'\r\n\r\nputs \"Compiling Opal-Parser\"\r\nputs \"---------------------\"\r\n\r\nFile.write('_hugespecopal.rb', init + File.read('_hugespec.rb'))\r\nsystem 'time bin/opal --no-cache --no-source-map -c _hugespecopal.rb >_hugespecopal.js'\r\n\r\nputs\r\nputs \"Running with MRI\"\r\nputs \"----------------\"\r\n\r\nsystem 'time ruby _hugespecopal.rb 2>&1 >/dev/null | egrep -v \"warning|Calling|freezing\"'\r\n\r\nputs\r\nputs \"Running with Node\"\r\nputs \"-----------------\"\r\n\r\nsystem 'time node _hugespecopal.js 2>&1 >/dev/null | egrep -v \"warning|Calling|freezing\"'\r\n\r\nputs\r\nputs \"Running with GJS\"\r\nputs \"----------------\"\r\n\r\nsystem 'time gjs _hugespecopal.js 2>&1 >/dev/null | egrep -v \"warning|Calling|freezing\"'\r\n[user@localhost opal]# \r\n```",
      "With other pending performance related patches:\r\n\r\n```ruby\r\n-rw-r--r--. 1 user root 564K Mar 25 08:30 _hugespec.rb\r\nCompiling Opal-Parser\r\n---------------------\r\nCalling `DidYouMean::SPELL_CHECKERS.merge!(error_name => spell_checker)' has been deprecated. Please call `DidYouMean.correct_error(error_name, spell_checker)' instead.\r\n\r\nreal\t0m11.826s\r\nuser\t0m11.540s\r\nsys\t0m0.242s\r\n\r\nRunning with MRI\r\n----------------\r\n\r\nreal\t0m7.452s\r\nuser\t0m7.297s\r\nsys\t0m0.137s\r\n\r\nRunning with Node\r\n-----------------\r\n\r\nreal\t0m29.138s\r\nuser\t0m31.183s\r\nsys\t0m1.189s\r\n\r\nRunning with GJS\r\n----------------\r\nGjs-Message: 08:30:51.134: JS WARNING: [_hugespecopal.js 14201]: unreachable code after return statement\r\nGjs-Message: 08:30:51.135: JS WARNING: [_hugespecopal.js 16368]: unreachable code after return statement\r\n\r\nreal\t0m49.877s\r\nuser\t0m49.585s\r\nsys\t0m0.331s\r\n```",
      "The same benchmark on v1.4.1 (upper) and v1.3.2 (lower; before most minification work). Did we really cut down our compiler times in half for Node compared to a previous release? :O Wow!\r\n\r\n```\r\n[user@localhost opal]# ruby _mkhugespec.rb \r\n-rw-r--r--. 1 user root 564K Mar 25 08:45 _hugespec.rb\r\nCompiling Opal-Parser\r\n---------------------\r\nCalling `DidYouMean::SPELL_CHECKERS.merge!(error_name => spell_checker)' has been deprecated. Please call `DidYouMean.correct_error(error_name, spell_checker)' instead.\r\n\r\nreal\t0m11.670s\r\nuser\t0m11.350s\r\nsys\t0m0.272s\r\n\r\nRunning with MRI\r\n----------------\r\n\r\nreal\t0m7.517s\r\nuser\t0m7.355s\r\nsys\t0m0.131s\r\n\r\nRunning with Node\r\n-----------------\r\n\r\nreal\t1m9.994s\r\nuser\t1m13.629s\r\nsys\t0m1.229s\r\n\r\nRunning with GJS\r\n----------------\r\nGjs-Message: 08:46:53.355: JS WARNING: [_hugespecopal.js 14345]: unreachable code after return statement\r\nGjs-Message: 08:46:53.356: JS WARNING: [_hugespecopal.js 16542]: unreachable code after return statement\r\n\r\nreal\t0m56.682s\r\nuser\t0m56.402s\r\nsys\t0m0.336s\r\n[user@localhost opal]# git checkout v1.3.2\r\nM\tspec/mspec\r\nM\tspec/ruby\r\nM\ttest/cruby\r\nPrevious HEAD position was f46d2294d Release v1.4.1\r\nHEAD is now at b1636713a Release v1.3.2\r\n[user@localhost opal]# \r\n-rw-r--r--. 1 user root 564K Mar 25 08:49 _hugespec.rb\r\nCompiling Opal-Parser\r\n---------------------\r\nCalling `DidYouMean::SPELL_CHECKERS.merge!(error_name => spell_checker)' has been deprecated. Please call `DidYouMean.correct_error(error_name, spell_checker)' instead.\r\n\r\nreal\t0m11.501s\r\nuser\t0m11.173s\r\nsys\t0m0.278s\r\n\r\nRunning with MRI\r\n----------------\r\n\r\nreal\t0m7.513s\r\nuser\t0m7.346s\r\nsys\t0m0.146s\r\n\r\nRunning with Node\r\n-----------------\r\n\r\nreal\t1m14.020s\r\nuser\t1m18.967s\r\nsys\t0m1.333s\r\n\r\nRunning with GJS\r\n----------------\r\n\r\nreal\t1m5.979s\r\nuser\t1m5.743s\r\nsys\t0m0.414s\r\n```",
      "I would really really want it to get merged tomorrow :D\r\n\r\nThe Matcher subsystem is obviously a work in progress, further patches in experimental branches have it in a better state and will still be redesigned and updated. But for now I think it is in a viable minimum state, just for use in this particular feature."
    ],
    "commit_messages": [
      "Merge pull request #2411 from opal/hmdne/case-to-if-to-switch\n\nTry to compile case statements as switch"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f43d6ca63ac8d87ea5e",
    "number": 2410,
    "body": "This is an integration test. Don't merge.",
    "head_branch": "hmdne/perf-test",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f44d6ca63ac8d87ea5f",
    "number": 2409,
    "body": "This is the next part of the minification/optimization series. Perhaps it will provide some nice benefits...",
    "head_branch": "hmdne/compress-nested-scopes",
    "is_a_fork": false,
    "comments": [
      "If you use the Zeitwerk pattern it happens _all the time_ (as can be seen from the `performance` task). The only situation which we can't optimize fully for is the following:\r\n\r\n```ruby\r\nmodule Opal; module Rewriters; class PatternMatching < Base\r\nend; end; end\r\n```\r\n\r\nThis is (kind of - because we still add `Opal` to the `$nesting`) optimized to:\r\n\r\n```ruby\r\nmodule (module Opal; self; end)::Rewriters; class PatternMatching < Base\r\nend; end\r\n```",
      "Adding a milestone. But at worst we won't ship it."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f45d6ca63ac8d87ea60",
    "number": 2408,
    "body": "This is a preface for the irb patch. I will want to merge it ASAP so I can prepare the irb final patch (#2392).",
    "head_branch": "hmdne/irb-pre",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2408 from opal/hmdne/irb-pre\n\nPrepare for the irb"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f46d6ca63ac8d87ea61",
    "number": 2407,
    "body": "This is so that we clearly denote when we stray off to -dev.",
    "head_branch": "hmdne/releasing-step",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2407 from opal/hmdne/releasing-step\n\nreleasing.md: add a step to prepare for next release"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f47d6ca63ac8d87ea62",
    "number": 2406,
    "body": "This fixes #2405.\r\n\r\nI would recommend some consultation before merging this.",
    "head_branch": "hmdne/tokyo-fractional-timezone",
    "is_a_fork": false,
    "comments": [
      "Maybe we should consider using `Intl`, although I'm not sure exactly how it can be used it seems like it knows better WRT timezones:\r\n\r\n```\r\n> new Intl.DateTimeFormat('en-US', {timeZone: 'Asia/Tokyo',hour: 'numeric', minute: 'numeric', second: 'numeric',}).format(Date.UTC(1887, 11, 20, 3, 0, 0, 200))\r\n< \"12:18:59 PM\"\r\n> new Intl.DateTimeFormat('en-US', {timeZone: 'Asia/Tokyo',hour: 'numeric', minute: 'numeric', second: 'numeric',}).format(Date.UTC(1888, 11, 20, 3, 0, 0, 200))\r\n< \"12:00:00 PM\"\r\n```",
      "cc @takaram ",
      "My suggestion would be to get this thing for 1.5 alpha, but keep pushing for maybe some Intl-based solution for later on.",
      "Delayed to when we'll have a more general solution, meanwhile the patch in this PR can be used to make tests pass locally.",
      "Outdated, closing"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f47d6ca63ac8d87ea63",
    "number": 2404,
    "body": "This PR implements `Number#prev_float` and `Number#next_float`, which correspond to MRI's `Float#prev_float` and `Float#next_float` respectively.",
    "head_branch": "prev_next_float",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Merge pull request #2404 from takaram/prev_next_float\n\nImplement Number#prev_float/next_float"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f48d6ca63ac8d87ea64",
    "number": 2403,
    "body": "Given the following ruby:\r\n```ruby\r\no = { a: 1, b: 2, c: 3 }\r\nh = o.dup\r\nh.each { |k,v| h.delete(k) }\r\ni = o.dup\r\ni.each_key { |k| i.delete(k) }\r\nputs \"o: #{o}\\nh: #{h}\\ni: #{i}\"\r\n```\r\nand executed with matz ruby results in the following expected output:\r\n```\r\no: {:a=>1, :b=>2, :c=>3}\r\nh: {}\r\ni: {}\r\n```\r\nHowever, using opal master the following exceptions are thrown (need to comment out the .each ain above code to get the second exception):\r\n```\r\n<internal:corelib/hash.rb>:429:1:in `each': Cannot read properties of undefined (reading '$$is_string') (Exception)\r\n        from <internal:corelib/runtime.js>:1900:5:in `Opal.send2'\r\n        from <internal:corelib/runtime.js>:1888:5:in `each'\r\n        from test.rb:3:2:in `undefined'\r\n        from <internal:corelib/runtime.js>:2760:7:in `<main>'\r\n        from test.rb:1:1:in `null'\r\n        from node:internal/modules/cjs/loader:1103:14:in `Module._compile'\r\n        from node:internal/modules/cjs/loader:1155:10:in `Module._extensions..js'\r\n        from node:internal/modules/cjs/loader:981:32:in `Module.load'\r\n        from node:internal/modules/cjs/loader:822:12:in `Module._load'\r\n        \r\n<internal:corelib/hash.rb>:450:1:in `each_key': Cannot read properties of undefined (reading '$$is_string') (Exception)\r\n        from <internal:corelib/runtime.js>:1900:5:in `Opal.send2'\r\n        from <internal:corelib/runtime.js>:1888:5:in `each_key'\r\n        from test.rb:5:2:in `undefined'\r\n        from <internal:corelib/runtime.js>:2760:7:in `<main>'\r\n        from test.rb:1:1:in `null'\r\n        from node:internal/modules/cjs/loader:1103:14:in `Module._compile'\r\n        from node:internal/modules/cjs/loader:1155:10:in `Module._extensions..js'\r\n        from node:internal/modules/cjs/loader:981:32:in `Module.load'\r\n        from node:internal/modules/cjs/loader:822:12:in `Module._load'\r\n```\r\n\r\nThis happens because the original $$keys aray is used for the loop. If that gets modified during the loop, the indexes fail to match during the loop, resulting in `null` keys and failing.\r\n\r\nThe patch copies the $$keys using .slice() (the supposedly fastest way to copy arrays) before entering the loop:\r\n\r\n```\r\no: {\"a\"=>1, \"b\"=>2, \"c\"=>3}\r\nh: {}\r\ni: {}\r\n```\r\n",
    "head_branch": "hash_each_delete",
    "is_a_fork": true,
    "comments": [
      "Thanks! Let's merge!"
    ],
    "commit_messages": [
      "Merge pull request #2403 from janbiedermann/hash_each_delete\n\nFix exception during Hash#each and Hash#each_key if keys get deleted during loop"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f49d6ca63ac8d87ea65",
    "number": 2402,
    "body": null,
    "head_branch": "hmdne/optimize-writer",
    "is_a_fork": false,
    "comments": [
      "Also tests will need to be ported.",
      "Preemptive approval, still good to add more testing before merging"
    ],
    "commit_messages": [
      "Merge pull request #2402 from opal/hmdne/optimize-writer\n\nOptimize writer"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f4ad6ca63ac8d87ea66",
    "number": 2401,
    "body": null,
    "head_branch": "hmdne/optimize-returning-functions",
    "is_a_fork": false,
    "comments": [
      "I added optimizations for code like:\r\n\r\n```\r\ndef some_delegator\r\n  @ivar.method\r\nend\r\n```\r\n\r\nI am afraid this may break backtraces. Do we gain something from that? Perhaps we can introduce something like optimization levels, eg.:\r\n\r\n```\r\n-O0: return output maximally compatible with MRI\r\n-O1: (default) return output maximally compatible with ISO Ruby (MRuby)\r\n-O2: sacrifice potential stacktraces\r\n```\r\n\r\nI know `-O` is used, so it's just a food for thought for now.\r\n",
      "For a code like:\r\n\r\n```ruby\r\ndef x\r\n  y\r\nend\r\n\r\ndef y\r\n  z\r\nend\r\n\r\ndef z\r\n  error\r\nend\r\n\r\nx\r\n```\r\n\r\nWe get this stacktrace:\r\n\r\n![image](https://user-images.githubusercontent.com/54514036/159851207-c6fa6690-2c82-4ea5-93ac-0d0bb8c07a13.png)\r\n\r\nI wonder if this is acceptable, though the gains are quite clear.",
      "We agreed to get a limited version for v1.5, the part that doesn't mess up backtraces. For v1.6 we will ship a massively improved changes."
    ],
    "commit_messages": [
      "Merge pull request #2401 from opal/hmdne/optimize-returning-functions\n\nImprove performance with optimized common method/iter implementation shortcuts"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f4bd6ca63ac8d87ea67",
    "number": 2400,
    "body": "Rewriters refactor:\r\n    \r\n* The :top node is created before rewriting now.\r\n* Allow for a rewriter to mark content as dynamic, bypassing cache\r\n* mspec filters rewriter to mark spec files as dynamic, fixing #2343,\r\n  but also in turn requiring specs to be recompiled\r\n\r\nFix and clean up the rewriter specs\r\n",
    "head_branch": "hmdne/rewriters-refactor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2400 from opal/hmdne/rewriters-refactor\n\nRewriters refactor"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f4cd6ca63ac8d87ea68",
    "number": 2399,
    "body": null,
    "head_branch": "Time_to_date",
    "is_a_fork": true,
    "comments": [
      "superseeded by #2398"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f4dd6ca63ac8d87ea69",
    "number": 2398,
    "body": "This fixes #2391 and this fixes #1743",
    "head_branch": "hmdne/date",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2398 from opal/hmdne/date\n\nDateTime and Date refactor"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f4ed6ca63ac8d87ea6a",
    "number": 2397,
    "body": "I ended up using `Proxy` and `Reflect` as they're supported everywhere except for explorer and seem to solve the issue pretty well.\r\n\r\nWasn't able to write a test that broke on this, I manually tested by adding paggio to the Gemfile and running:\r\n\r\n```\r\nbin/opal --gem paggio -rpaggio -e 'puts Paggio.html! { div.data(test: \"test\") {div.data(test: \"test\")} }'\r\n```\r\n\r\n---\r\n\r\nThis reverts commit 787c6065ff6045c57aeb3c98e887c920fb1270c7,\r\nrestoring commit 3eacd508eb55daa34198330bf6820579428d845d.\r\n\r\nRef https://github.com/opal/opal/pull/2377\r\nFixes https://github.com/opal/opal/pull/2379\r\n\r\n\r\n",
    "head_branch": "elia/super-in-reused-lambda",
    "is_a_fork": false,
    "comments": [
      "@hmdne you ever saw this error by any chance?\r\n\r\n```\r\n#\r\n# Fatal error in , line 0\r\n# Check failed: FLAG_fuzzing.\r\n#\r\n#\r\n#\r\n#FailureMessage Object: 0x7ffeb2b90d10\r\n 1: 0x563689cee665  [node]\r\n 2: 0x56368aa141a2 V8_Fatal(char const*, ...) [node]\r\n 3: 0x56368a3614e9  [node]\r\n 4: 0x56368a367010  [node]\r\n 5: 0x56368a3671d9 v8::internal::Runtime_OptimizeFunctionOnNextCall(int, unsigned long*, v8::internal::Isolate*) [node]\r\n 6: 0x56368a6f8ef4  [node]\r\n```\r\n\r\n",
      "Never. Could it be due to usage of Proxy?",
      "Got to the bottom of it, functions wrapped in proxies can't be checked for opt status directly, opened an issue on V8 here: https://bugs.chromium.org/p/v8/issues/detail?id=12736",
      "Slight decrease in perf, but nothing extreme, we might be better off avoiding define method for meta programmed definitions:\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n[152](https://github.com/opal/opal/runs/5689890553?check_suite_focus=true#step:11:152)\r\n                  Compile time: 6.188 (±2.26%) -> 6.353 (±6.59%) (change: +2.66%)\r\n[153](https://github.com/opal/opal/runs/5689890553?check_suite_focus=true#step:11:153)\r\n                      Run time: 1.588 (±2.23%) -> 1.599 (±10.69%) (change: +0.65%)\r\n[154](https://github.com/opal/opal/runs/5689890553?check_suite_focus=true#step:11:154)\r\n                   Bundle size: 4745.37 kB -> 4746.22 kB (change: -1.00%)\r\n[155](https://github.com/opal/opal/runs/5689890553?check_suite_focus=true#step:11:155)\r\n          Minified bundle size: 1018.35 kB -> 1018.52 kB (change: -1.00%)\r\n[156](https://github.com/opal/opal/runs/5689890553?check_suite_focus=true#step:11:156)\r\n            Mangled & minified: 710.59 kB -> 710.72 kB (change: -1.00%)\r\n```"
    ],
    "commit_messages": [
      "Merge pull request #2397 from opal/elia/super-in-reused-lambda\n\nRestore \"Fix defining multiple methods with the same block\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f4fd6ca63ac8d87ea6b",
    "number": 2396,
    "body": null,
    "head_branch": "exit_gracefully",
    "is_a_fork": true,
    "comments": [
      "because of:\r\n```\r\n>> $?.exit\r\nC:/Ruby31-x64/lib/ruby/gems/3.1.0/gems/opal-1.4.1/lib/opal/repl.rb:167:in `rescue in eval_js': undefined method `exitstatus' for nil:NilClass (NoMethodError)\r\n\r\n      exit $?.exitstatus\r\n             ^^^^^^^^^^^\r\n        from C:/Ruby31-x64/lib/ruby/gems/3.1.0/gems/opal-1.4.1/lib/opal/repl.rb:153:in `eval_js'\r\n        from C:/Ruby31-x64/lib/ruby/gems/3.1.0/gems/opal-1.4.1/lib/opal/repl.rb:121:in `eval_ruby'\r\n        from C:/Ruby31-x64/lib/ruby/gems/3.1.0/gems/opal-1.4.1/lib/opal/repl.rb:60:in `run_input_loop'\r\n        from C:/Ruby31-x64/lib/ruby/gems/3.1.0/gems/opal-1.4.1/lib/opal/repl.rb:39:in `run'\r\n        from C:/Ruby31-x64/lib/ruby/gems/3.1.0/gems/opal-1.4.1/lib/opal/cli.rb:88:in `run_repl'\r\n        from C:/Ruby31-x64/lib/ruby/gems/3.1.0/gems/opal-1.4.1/lib/opal/cli.rb:69:in `run'\r\n        from C:/Ruby31-x64/lib/ruby/gems/3.1.0/gems/opal-1.4.1/exe/opal:26:in `<top (required)>'\r\n        from C:/Ruby31-x64/bin/opal:25:in `load'\r\n        from C:/Ruby31-x64/bin/opal:25:in `<main>'\r\n```",
      "Thanks!"
    ],
    "commit_messages": [
      "Merge pull request #2396 from janbiedermann/exit_gracefully\n\nexit repl gracefully"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f50d6ca63ac8d87ea6c",
    "number": 2395,
    "body": "* Moved IE11-times polyfills to a separate file.\r\n* Condensed generation of JS-equivalent functions to an\r\n  each/define_method.",
    "head_branch": "hmdne/math",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2395 from opal/hmdne/math\n\nMove `Math` IE11-supporting polyfills to a separate file"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f51d6ca63ac8d87ea6d",
    "number": 2394,
    "body": "Co-authored-by: Elia Schito <elia@schito.me>",
    "head_branch": "hmdne/timezone",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2394 from opal/hmdne/timezone\n\nIntroduce timezone support for Time"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f52d6ca63ac8d87ea6e",
    "number": 2392,
    "body": "This fixes #2376\r\n\r\nBut does it a little differently from what we assumed there. In browser, we attempt to load `opal-parser` from the CDN using SJAX whenever user attempts to use `Opal.irb` (or `binding.irb`) or `Opal.eval` in a browser. We leverage `prompt` for synchronous communication.\r\n\r\nIf a debugger creates a breakpoint, we can use `Opal.irb(s => eval(s))` to launch the irb prompt.\r\n\r\nI wish for `corelib/binding` and `corelib/debug` to be included by default.\r\n\r\nThis needs a little bit more work.",
    "head_branch": "hmdne/irb",
    "is_a_fork": false,
    "comments": [
      "Ways to test it:\r\n\r\nIn browser:\r\n```\r\nbin/opal -Rserver -e 'a = 5; b = \"a\"; binding.irb'\r\n```\r\n\r\nIn node:\r\n```\r\nbin/opal -ropal/platform -e 'require \"opal-replutils\"; require \"opal-parser\"; a = 5; b = \"a\"; binding.irb'\r\n```",
      "The plan is to rename it to corelib/irb. And also to enable it by default!"
    ],
    "commit_messages": [
      "Merge pull request #2392 from opal/hmdne/irb\n\nSupport binding.irb"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f53d6ca63ac8d87ea6f",
    "number": 2387,
    "body": "Adding stdlib module URI, with the implementation of `decode_www_form`.\r\n\r\n I didn't manage out to find out how to test (though was an rspec test, but it was running CRuby `uri` instead). Also, implementation omits 2 arguments, because the features may not be implemented in JS (are string encodings a thing in JS?).\r\n\r\nHelp would be appreciated :) ",
    "head_branch": "stdlib-uri",
    "is_a_fork": true,
    "comments": [
      "Hm... yeah, unfortunately the specs aren't present yet. See:\r\n\r\nhttps://github.com/ruby/spec/blob/master/library/uri/decode_www_form_spec.rb\r\n\r\nBut in general, to get URI specs enabled in Opal we will have to do this:\r\n\r\n```diff\r\ndiff --git a/spec/ruby_specs b/spec/ruby_specs\r\nindex cfd0d74bf..915458afa 100644\r\n--- a/spec/ruby_specs\r\n+++ b/spec/ruby_specs\r\n@@ -204,3 +204,4 @@ ruby/library/stringio/each_line_spec\r\n ruby/library/stringio/each_spec\r\n ruby/library/stringscanner\r\n ruby/library/optionparser\r\n+ruby/library/uri\r\n```\r\n\r\nYour patch is cool :D I corrected some slight styling issues.\r\n\r\nBtw. we mostly do patch reviews on Wednesdays every week.",
      "@elia found out there are some tests in CRuby's test suite (we use CRuby tests in addition to RubySpec aka MSpec), but they will not all will pass. For the reference, the test suite is here, not all will pass, but we will factor this in into Opal:\r\n\r\nhttps://github.com/ruby/ruby/blob/master/test/uri/test_common.rb#L167-L193",
      "Let's merge it! Thanks!\r\n\r\nIn any case, if you have any urgent questions about Opal, we are available on Slack for real-time communication :D",
      "thx everyone!"
    ],
    "commit_messages": [
      "Merge pull request #2387 from HoneyryderChuck/stdlib-uri\n\nadded URI.decode_www_form"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f54d6ca63ac8d87ea70",
    "number": 2386,
    "body": "Restoring https://github.com/opal/opal/pull/2345 after the revert in https://github.com/opal/opal/pull/2377\r\n\r\n",
    "head_branch": "elia/multiple-def-with-same-block",
    "is_a_fork": false,
    "comments": [
      "Superseded by #2397"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f55d6ca63ac8d87ea71",
    "number": 2385,
    "body": "Fixes #2361",
    "head_branch": "fix_zsuper_with_js_reserved_word",
    "is_a_fork": true,
    "comments": [
      "Thank you for this patch!\r\n\r\nWe are going to review and merge it on Wednesday, as usually\r\n\r\nHappy new year! :D\r\n"
    ],
    "commit_messages": [
      "Merge pull request #2385 from takaram/fix_zsuper_with_js_reserved_word\n\nFix zsuper with args named with js reserved word"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f56d6ca63ac8d87ea72",
    "number": 2383,
    "body": "This patchset will focus on runtime optimization.",
    "head_branch": "hmdne/runtime-optimization",
    "is_a_fork": false,
    "comments": [
      "This PR is basically a bunch of experiments that may give off something. The last commit is particularly interesting! The rest are negligible.\r\n\r\nFor Opal-Parser:\r\n\r\nBefore the commit:\r\nreal\t0m13.804s\r\n\r\nAfter the commit:\r\nreal\t0m8.901s"
    ],
    "commit_messages": [
      "Merge pull request #2383 from opal/hmdne/runtime-optimization\n\nRuntime optimization"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f57d6ca63ac8d87ea73",
    "number": 2382,
    "body": null,
    "head_branch": "hmdne/gha-head-ruby",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2382 from opal/hmdne/gha-head-ruby\n\nGHA: Test head Ruby"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f58d6ca63ac8d87ea74",
    "number": 2380,
    "body": null,
    "head_branch": "hmdne/promise-v2-stable",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2380 from opal/hmdne/promise-v2-stable\n\nPromiseV2 is now stable!"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f59d6ca63ac8d87ea75",
    "number": 2378,
    "body": "Correct a regression that I tried to fix in Opal-Browser with this:\r\n\r\nhttps://github.com/opal/opal-browser/commit/5856297c22c81fcd801432f89218375a30538350",
    "head_branch": "hmdne/fix-ml-xstr-case-asgn",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2378 from opal/hmdne/fix-ml-xstr-case-asgn\n\nFix multiline x-string in a case assignment"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f5ad6ca63ac8d87ea76",
    "number": 2377,
    "body": "This reverts commit 3eacd508eb55daa34198330bf6820579428d845d.\r\n\r\nRef: #2345\r\n\r\nThe issue is hard to reproduce but it might be related to forwarding `$$s` correctly, but I will try to create an appropriate test case for v1.5.",
    "head_branch": "hmdne/revert-2345",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2377 from opal/hmdne/revert-2345\n\nRevert \"Fix defining multiple methods with the same block\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f5bd6ca63ac8d87ea77",
    "number": 2374,
    "body": "I was trying to read a file with nodes after requiring opal-platform, but that resulted in an infinite loop because we were only loading nodejs/io. Now every known platform  loads a file with the same name.",
    "head_branch": "elia/doc-fixes",
    "is_a_fork": false,
    "comments": [
      "We don't require nodejs by opal-platform for a reason. The default require is to make it slightly compatible with a browser, eg. for the test suites."
    ],
    "commit_messages": [
      "Merge pull request #2374 from opal/elia/doc-fixes\n\nDocs & opal/platform fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f5bd6ca63ac8d87ea78",
    "number": 2373,
    "body": "- The first commit is what we currently have\r\n- The second commit is changelog for #2293 \r\n- The third commit is changelog for #2347",
    "head_branch": "hmdne/opal-14-release-work",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2373 from opal/hmdne/opal-14-release-work\n\nOpal v1.4 alpha release work"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f5cd6ca63ac8d87ea79",
    "number": 2372,
    "body": "An empty `puts` was not writing a newline, now the behavior is 1:1 with CRuby except for recursion management",
    "head_branch": "elia/fix-io-puts",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2372 from opal/elia/fix-io-puts\n\nFix io puts"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f5dd6ca63ac8d87ea7a",
    "number": 2371,
    "body": "- they can be safely alphabetized\r\n- looks like an improvement in performance results from this change\r\n- `Array#map` is now compiled instead of `Array#append`, which is probably desirable",
    "head_branch": "elia/sort-aliases",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2371 from opal/elia/sort-aliases\n\nMove aliases to the end of classes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f5ed6ca63ac8d87ea7b",
    "number": 2370,
    "body": "This is a reprise of some older attempts at DCE, still WIP, but promising.\r\n\r\nAny method definition for a method name that's not called anywhere is replaced with an alias to raise and a `/* DCE: foo */` comment.\r\n\r\n```\r\nopal:master * ⤑ bin/opal -ce \"def foo; end; (1..100).maxmin\"|wc -c\r\n 1856900\r\nopal:master * ⤑ env DCE=1 bin/opal -ce \"def foo; end; (1..100).maxmin\"|wc -c\r\n 1058296\r\n```\r\n\r\n```\r\ndce = `env DCE=1 bin/opal -ce 'puts 5'|bin/yarn -s run terser -c`.size\r\nregular = `bin/opal -ce 'puts 5'|bin/yarn -s run terser -c`.size\r\np dce: dce, regular: regular\r\nputs (\"%.4f reduction\" % (1 - dce.to_f / regular.to_f))\r\n```\r\n\r\nRight now it scrapes out 43% of the size.\r\n",
    "head_branch": "elia/dce-for-methods",
    "is_a_fork": false,
    "comments": [
      "A problem with this approach I see is that... moving of aliases may be a good idea where we have control, but not where we don't. Opal-Optimizer does this with eliminating the alias/undef calls as well.",
      "There's another thing I see. Your algorithm, as far as I can see, works this way:\r\n\r\n- Compile the code first\r\n- Collect all calls\r\n- Compile again, but without the methods that aren't called.\r\n\r\nOpal-Optimizer works this way:\r\n\r\n- Compile the code (outside of scope of Opal-Optimizer)\r\n- Loop (while X > 0)\r\n  - Collect all calls\r\n  - Eliminate the methods that aren't called. Save a number of eliminated methods into a variable X.",
      "oh, I see, so it's able to eliminate nested calls, that's a good point. \r\nSounds like we can do the same here but maybe we can cap the number of iterations (think of `-O3` for C compilers)…\r\n\r\nThe earlier attempt I had, from some years ago, included tracking from which method every call was sent and work the minimal number of calls from that graph, this is admittedly more of a shotgun approach. I'm ok with deploying something like this and refine it over time to be more precise and modular.\r\n\r\nThoughts?",
      "Now that I thought about it, how about doing it in reverse? We start from top and don't traverse into defs. After we have collected a number of calls from top, we traverse into untraversed named defs and repeat this a number of times until there are no new defs found. During this process for each file we build an array of calls. And then we remove the rest. This way we will only need one iteration and also we don't need full compilation, just the AST, after rewriting, let's say, and we can reuse this AST for the compilation process.",
      "Just for the record, in Opal-Optimizer (which... works well enough for my production codebase to never break :D):\r\n\r\nA definition is one of the following:\r\n- def call\r\n- defs call\r\n- defn call\r\n- udef call (yep, it's a definition :D)\r\n- alias call (where first arg is the definition name)\r\n\r\nA call is one of the following:\r\n- a regular Ruby call\r\n- alias call (where second arg is the call name)\r\n- a call to send, `/\\A\\$(public_|private_|protected_)?(class_|instance_|singleton_)?(send|method(_defined\\?)?)\\z/`, `__send__` with a first parameter being a String\r\n\r\nEDIT (2):\r\nNow that I think of it, there's also `alias_method` which was for a time popular",
      "What about:\r\n```ruby\r\no = Object.new\r\nm = 'to_s'\r\n\r\no.send(m)\r\n```\r\n?",
      "@janbiedermann this is a thing that we obviously can't support without doing a full evaluation :( for this case we may add a magic comment to note that our code calls #to_s. most of the time though, send is used by `method_missing` in a delegation pattern, which is perfectly fine!\r\n\r\nEDIT:\r\nNot even a full evaluation can find all edge cases, think eg:\r\n\r\n```ruby\r\n# Let's say we don't just use method_missing, which would be\r\n# perfectly fine, but define various methods\r\nmethod_name = gets.chomp.to_sym\r\nMyKlass.public_send(method_name)\r\n```",
      "(Please ensure you took a look at my edits :D)",
      "Also... let's take a look at the visitor pattern that is used by parser and friends. We would need then to support wildcards, like eg.:\r\n\r\n```ruby\r\n# dont_treeshake: on_*\r\n```",
      "Also @janbiedermann while this is related, we talked with @elia yesterday about things like, what if we extended the `parser` gem to find a magic comment like `# js_xstrings: true` and then let's say a code like:\r\n\r\n```ruby\r\nhello(:world, `window.prompt(#{message})`)\r\n```\r\n\r\nWould produce a sexp like:\r\n\r\n```ruby\r\ns(:send, nil, :hello,\r\n  s(:args,\r\n    s(:sym, :world),\r\n    s(:js_call,\r\n      s(:js_dotaccessor,\r\n        s(:js_var, :window)\r\n        s(:js_method, :prompt)\r\n      ),\r\n      s(:js_args,\r\n        s(:lvar, :message)\r\n      )\r\n    )\r\n  )\r\n)\r\n```\r\n\r\nie. we dispatch to the JS parser for x-strings\r\nThis would have potential for both tree shaking and also maybe considering something like connecting RBS to TypeScript?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f5fd6ca63ac8d87ea7c",
    "number": 2369,
    "body": null,
    "head_branch": "hmdne/chore",
    "is_a_fork": false,
    "comments": [
      "The performance failure is expected as it has issues with submodules in general."
    ],
    "commit_messages": [
      "Merge pull request #2369 from opal/hmdne/chore\n\nSpec updates chore"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f60d6ca63ac8d87ea7d",
    "number": 2366,
    "body": "resolves #2348 ",
    "head_branch": "issue-2348-node-unc-path",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2366 from Mogztter/issue-2348-node-unc-path\n\nresolves #2348 preserve UNC path prefix on File#join (Node.js impl)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f61d6ca63ac8d87ea7e",
    "number": 2365,
    "body": "This continues #2356.\r\n",
    "head_branch": "hmdne/generated-code-optimization-pt2",
    "is_a_fork": false,
    "comments": [
      "We used to generate helpers for $rb_plus, $rb_minus etc. for every top. Now we generate them in corelib.js once. Duplicate functions may also not get compiled every time, I don't know.\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 5.968 -> 5.977 (change: +0.16%)\r\n                      Run time: 0.270 -> 0.268 (change: -0.62%)\r\n                   Bundle size: 4784558 -> 4761597 (change: -0.48%)\r\n          Minified bundle size: 1027822 -> 1015123 (change: -1.24%)\r\n            Mangled & minified: 716587 -> 705656 (change: -1.53%)",
      "`$truthy('a'['$==']('b'))` is now shortened to `$eqeq('a', 'b')`. Same with `===` -> `$eqeqeq`. This is so that we can safely cherry-pick case node elimination. Somehow, despite forcing the $truthy check, the generated code is sometimes shorter.\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 5.982 -> 5.962 (change: -0.33%)\r\n                      Run time: 0.270 -> 0.269 (change: -0.50%)\r\n                   Bundle size: 4784558 -> 4759249 (change: -0.53%)\r\n          Minified bundle size: 1027822 -> 1015230 (change: -1.23%)\r\n            Mangled & minified: 716587 -> 704015 (change: -1.75%)\r\n```",
      "After backporting the case node rewriter:\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 5.967 -> 5.963 (change: -0.05%)\r\n                      Run time: 0.269 -> 0.269 (change: -0.32%)\r\n                   Bundle size: 4784558 -> 4768898 (change: -0.33%)\r\n          Minified bundle size: 1027822 -> 1016536 (change: -1.10%)\r\n            Mangled & minified: 716587 -> 702646 (change: -1.95%)",
      "Since we don't have a `case` node anymore, we can make an `if` node generate code better.\r\n\r\nWe use a special property that `$truthy($truthy(a) ? true : b)` is the same as `$truthy($truthy(a) || b)` which itself is the same as `$truthy(a) || $truthy(b)`. Similarly we do with false on the falsy side now, but true on truthy is what `case a, b` generates actually. And `$truthy((a)['$==='](b))` we convert to `$eqeqeq('a', 'b')`. So - this commit makes a lot more `$eqeqeq`s. And `$eqeqeq` may be optimized akin to how `$rb_plus` is optimized.\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 5.962 -> 5.947 (change: -0.24%)\r\n                      Run time: 0.269 -> 0.269 (change: -0.31%)\r\n                   Bundle size: 4784558 -> 4765596 (change: -0.40%)\r\n          Minified bundle size: 1027822 -> 1015690 (change: -1.18%)\r\n            Mangled & minified: 716587 -> 702179 (change: -2.01%)\r\n```",
      "```\r\n Comparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 5.999 -> 5.987 (change: -0.19%)\r\n                      Run time: 0.271 -> 0.268 (change: -1.11%)\r\n                   Bundle size: 4784558 -> 4766408 (change: -0.38%)\r\n          Minified bundle size: 1027822 -> 1015882 (change: -1.16%)\r\n            Mangled & minified: 716587 -> 702347 (change: -1.99%)\r\n```\r\n\r\nAfter creating a shortpath if both arguments to ==/=== are strings or numbers... -1.11% in run time... certainly this test is not fully robust, but I believe it this time :D",
      "Hm. Found some interesting `if` output:\r\n\r\n```javascript\r\n      } else if ($truthy(($truthy(($ret_or_1 = $rb_lt(self, 0))) ? (($truthy(($ret_or_2 = $$$('Float')['$==='](other))) ? ($ret_or_2) : ($$$('Rational')['$==='](other)))) : ($ret_or_1)))) {\r\n```\r\n\r\nVery ugly. Unreadable. And we most certainly don't need those $ret_or_x values. A lot of cases like this. Basically every `if a || b` call.\r\n\r\nThis is for:\r\n\r\n```ruby\r\n    elsif self < 0 && (::Float === other || ::Rational === other)\r\n```\r\n\r\nMaybe we can optimize for this case somehow... can we eliminate this $ret_or_1?",
      "```javascript\r\n  } else if (($rb_lt(self, 0) && (($eqeqeq($$$('Float'), self.$other()) || ($eqeqeq($$$('Rational'), self.$other())))))) {\r\n```\r\n\r\nOk. Now I am totally satisfied :D\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 5.968 -> 5.927 (change: -0.69%)\r\n                      Run time: 0.270 -> 0.264 (change: -1.98%)\r\n                   Bundle size: 4784558 -> 4697937 (change: -1.81%)\r\n          Minified bundle size: 1027822 -> 999525 (change: -2.75%)\r\n            Mangled & minified: 716587 -> 697985 (change: -2.60%)",
      "A slight optimization for how different types of args are generated.\r\n\r\nThough the most important part is that minified bundle size is now below 1M... I didn't think it was possible when I started the previous set, but kept it as some kind of a goal :D\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 5.987 -> 5.911 (change: -1.28%)\r\n                      Run time: 0.269 -> 0.264 (change: -1.91%)\r\n                   Bundle size: 4784558 -> 4668713 (change: -2.42%)\r\n          Minified bundle size: 1027822 -> 999325 (change: -2.77%)\r\n            Mangled & minified: 716587 -> 697884 (change: -2.61%)",
      "Also optimize calls for `!=` and `!`. There are a few test cases that need to be investigated. Also, `BasicObject#!=` isn't compiled anymore - probably mostly because we don't call it so much anymore.\r\n\r\n```\r\n Comparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.049 -> 5.941 (change: -1.78%)\r\n                      Run time: 0.269 -> 0.265 (change: -1.77%)\r\n                   Bundle size: 4784558 -> 4665414 (change: -2.49%)\r\n          Minified bundle size: 1027822 -> 998525 (change: -2.85%)\r\n            Mangled & minified: 716587 -> 697161 (change: -2.71%)\r\n```\r\n\r\nThis didn't improve run times as much as I anticipated though.",
      "The tests broke due to parser upgrade actually. So, let's not bother with those at the moment.",
      "Try to heavily optimize the $truthy helper while keeping compatibility. Also, optimize the $not helper. Seems like almost no gain.\r\n\r\n``` \r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.089 -> 5.942 (change: -2.41%)\r\n                      Run time: 0.269 -> 0.264 (change: -1.84%)\r\n                   Bundle size: 4784558 -> 4665609 (change: -2.49%)\r\n          Minified bundle size: 1027822 -> 998545 (change: -2.85%)\r\n            Mangled & minified: 716587 -> 697179 (change: -2.71%)\r\n```",
      "Reverting the !/!= commit gave us this:\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.057 -> 5.941 (change: -1.92%)\r\n                      Run time: 0.270 -> 0.265 (change: -1.72%)\r\n                   Bundle size: 4784558 -> 4668844 (change: -2.42%)\r\n          Minified bundle size: 1027822 -> 999350 (change: -2.77%)\r\n            Mangled & minified: 716587 -> 697907 (change: -2.61%)\r\n",
      "The patchset has been formatted with test problems fixed and my messages in this thread were redacted into the commit messages.",
      "The logic for the truthy test was incorrect. After correcting it:\r\n```\r\n Comparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 5.948 -> 5.892 (change: -0.95%)\r\n                      Run time: 0.269 -> 0.263 (change: -2.39%)\r\n                   Bundle size: 4784558 -> 4665610 (change: -2.49%)\r\n          Minified bundle size: 1027822 -> 998547 (change: -2.85%)\r\n            Mangled & minified: 716587 -> 697181 (change: -2.71%)"
    ],
    "commit_messages": [
      "Merge pull request #2365 from opal/hmdne/generated-code-optimization-pt2\n\nSecond batch of generated code optimization"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f62d6ca63ac8d87ea7f",
    "number": 2364,
    "body": "* Fixes #2169\r\n* Fixes #2363",
    "head_branch": "hmdne/fix-opalopal-indentation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2364 from opal/hmdne/fix-opalopal-indentation\n\nFix opalopal <<~END support."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f63d6ca63ac8d87ea80",
    "number": 2362,
    "body": "* Disable SauceLabs automation\r\n* Support firefox and chromium runner & tests via puppeteer-ruby",
    "head_branch": "hmdne/puppeteer-ruby",
    "is_a_fork": false,
    "comments": [
      "Ref: YusukeIwaki/puppeteer-ruby#166",
      "It could be a nice idea to generate a coverage report from this... apparently puppeteer-ruby has the tooling necessary (ref #1382)"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f64d6ca63ac8d87ea81",
    "number": 2360,
    "body": "This aims to fix the CI for Ruby <3.0.",
    "head_branch": "hmdne/ci-fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2360 from opal/hmdne/ci-fix\n\nDon't lock Bundler version"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f65d6ca63ac8d87ea82",
    "number": 2359,
    "body": "tl;dr: How to implement mutable Strings while preserving compatibility\r\n\r\nFor boxed strings we are allowed to declare toString and valueOf properties on them. Not length though. So what if we made those methods actually return a different string?\r\n\r\nThis is an early work in progress.",
    "head_branch": "hmdne/mutable-string",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f66d6ca63ac8d87ea83",
    "number": 2358,
    "body": "tl;dr: How to implement mutable Strings while preserving compatibility\r\n\r\nFor boxed strings we are allowed to declare toString and valueOf properties on them. Not length though. So what if we made those methods actually return a different string?\r\n\r\nThis is an early work in progress.",
    "head_branch": "hmdne/mutable-string",
    "is_a_fork": false,
    "comments": [
      "The issue with this is that all String methods and alike should return a mutable string value and none of them do - which, on the other hand, is good for performance and JS library compatibility - JS libraries often check for `typeof arg === 'string'` - and boxed strings would give us `object`, not `string`. Boxed values are in general a little known feature that some people think should be deprecated.\r\n\r\nThere are also a lot of issues with boxed values in JavaScript. Eg.\r\n\r\n```js\r\n> \"hello\" === new String(\"hello\")\r\nfalse\r\n> new String(\"hello\") == new String(\"hello\")\r\nfalse\r\n> \r\n```"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f67d6ca63ac8d87ea84",
    "number": 2357,
    "body": "The closures make everything harder for how Opal is right now.\r\n\r\nConsider this theoretical code:\r\n\r\n```\r\nproc { a = (true and next); 6 }\r\n```\r\n\r\nWhat does this proc return? 6. Why? Because a closure stands in a way and next is ONLY compiled to return. A lot more issues - albeit you really need to try to break it - but some existing code may show deficiencies, eg. when you get two returners entangled.\r\n\r\nSo I propose to track the closures and use this knowledge to correctly dispatch the breakers/nexters/returners/retriers. If we get a closure in the way - we need to use exceptions.\r\n\r\nCommit description of the finalized patch:\r\n\r\n```\r\n    This adds closure awareness to Opal. Previously, some control flow\r\n    instructions were working based on the most common situation and\r\n    in certain situations we got that wrong. The previous implementation\r\n    also led to a lot of scattered around code and a lot of logic\r\n    duplication. My view is that this patch improves maintainability\r\n    of our codebase a lot and allows for further improvements based on\r\n    the new mini-DSL. Unfortunately, one of the downsides of this code\r\n    is that runtime performance is slightly decreased.\r\n```\r\n\r\nAlso, I have verified that all linked issues are fixed by this patch.",
    "head_branch": "hmdne/closure-tracking",
    "is_a_fork": false,
    "comments": [
      "This now implements both `break` and `next` correctly. It is still too early to merge and performance got quite a heavy hit. But to ensure everything works correctly, this patch still needs some time.",
      "The question here - I may have that patch finished until next week. Do we get this for 1.6, or do we postpone it to \"1.7\" whatever the next release may be.",
      "A problem found with Opal-RSpec working branch:\r\n\r\n```\r\n[user@localhost opal]# bin/opal -e 'def x; lambda do; return 3; end; end; p x.()'\r\n[Opal]: Zlib::BufError; retrying\r\n<internal:corelib/runtime.js>:2969:5:in `x': unexpected return (Exception)\r\n\tfrom -e:1:1:in `x'\r\n\tfrom -e:1:41:in `undefined'\r\n\tfrom <internal:corelib/runtime.js>:2805:7:in `<main>'\r\n\tfrom -e:1:1:in `null'\r\n\tfrom node:internal/modules/cjs/loader:1105:14:in `Module._compile'\r\n\tfrom node:internal/modules/cjs/loader:1159:10:in `Module._extensions..js'\r\n\tfrom node:internal/modules/cjs/loader:981:32:in `Module.load'\r\n\tfrom node:internal/modules/cjs/loader:822:12:in `Module._load'\r\n\tfrom node:internal/modules/run_main:77:12:in `executeUserEntryPoint'\r\n\tfrom node:internal/main/run_main_module:17:47:in `undefined'\r\n[user@localhost opal]# ruby -e 'def x; lambda do; return 3; end; end; p x.()'\r\n3\r\n[user@localhost opal]# \r\n```",
      "* toplevel return breaks with this patchset"
    ],
    "commit_messages": [
      "Merge pull request #2357 from opal/hmdne/closure-tracking\n\nClosure tracking"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f68d6ca63ac8d87ea85",
    "number": 2356,
    "body": "This PR attempts to optimize the generated code. One may say, we have minifiers, but actually they don't do as good job as we may imagine. The benchmarks from the `performance` task will show that pretty clearly.\r\n\r\n------\r\n\r\nThe first commit attempts to eliminate self definition (in def and iter) if it's not needed.\r\n\r\nThe rationale is that there are often functions that don't reference `self` and so possibly we can speed up performance a little.",
    "head_branch": "hmdne/dont-get-self",
    "is_a_fork": false,
    "comments": [
      "```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.239 -> 6.123 (change: -1.86%)\r\n                      Run time: 0.285 -> 0.284 (change: -0.10%)\r\n                   Bundle size: 5257437 -> 5236087 (change: -0.41%)\r\n          Minified bundle size: 1264503 -> 1254455 (change: -0.79%)\r\n```\r\n\r\nNot much for speed improvement, but bundle size reduction is significant.",
      "Now, let's optimize the variables that are generated after various ways one can generate a block. The most egregious example is when we define a method with &block:\r\n\r\n----------\r\n\r\nSource: `def a &block; end`\r\n\r\nBefore:\r\n\r\n```\r\n  return (Opal.def(self, '$a', $a$1 = function $$a() {\r\n    var $iter = $a$1.$$p, block = $iter || nil, self = this;\r\n\r\n    if ($iter) $a$1.$$p = null;\r\n    \r\n    \r\n    if ($iter) $a$1.$$p = null;;\r\n    return nil;\r\n  }, $a$1.$$arity = 0), nil) && 'a'\r\n```\r\n\r\nAfter:\r\n\r\n```\r\n  return (Opal.def(self, '$a', $a$1 = function $$a() {\r\n    var block = $a$1.$$p || nil;\r\n\r\n    if (block) $a$1.$$p = null;\r\n    \r\n    ;\r\n    return nil;\r\n  }, $a$1.$$arity = 0), nil) && 'a'\r\n```\r\n\r\nPerformance changes (master -> after those 2 commits):\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.225 -> 6.074 (change: -2.43%)\r\n                      Run time: 0.285 -> 0.283 (change: -0.68%)\r\n                   Bundle size: 5257437 -> 5220199 (change: -0.71%)\r\n          Minified bundle size: 1264503 -> 1244281 (change: -1.60%)\r\n```",
      "Now, this is a real omission:\r\n\r\n`}, $a$1.$$arity = 0), nil) && 'a'`\r\n\r\nWhy is nil there? If course, because of the earlier behavior of `def` returning nil.\r\n\r\n-----------\r\n\r\nAnd now, our def from a previous example looks like this:\r\n\r\n```\r\n  return (Opal.def(self, '$a', $a$1 = function $$a() {\r\n    var block = $a$1.$$p || nil;\r\n\r\n    if (block) $a$1.$$p = null;\r\n    \r\n    ;\r\n    return nil;\r\n  }, $a$1.$$arity = 0), 'a')\r\n```\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.221 -> 6.097 (change: -1.98%)\r\n                      Run time: 0.284 -> 0.283 (change: -0.21%)\r\n                   Bundle size: 5257437 -> 5218997 (change: -0.73%)\r\n          Minified bundle size: 1264503 -> 1243880 (change: -1.63%)\r\n```",
      "So, why we don't go even further? Let's helperize Opal.def and Opal.defs:\r\n\r\n```\r\n  var $a$1, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $def = Opal.def;\r\n\r\n  return ($def(self, '$a', $a$1 = function $$a() {\r\n    var block = $a$1.$$p || nil;\r\n\r\n    if (block) $a$1.$$p = null;\r\n    \r\n    ;\r\n    return nil;\r\n  }, $a$1.$$arity = 0), 'a')\r\n```\r\n\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.232 -> 6.103 (change: -2.08%)\r\n                      Run time: 0.283 -> 0.283 (change: -0.19%)\r\n                   Bundle size: 5257437 -> 5214022 (change: -0.83%)\r\n          Minified bundle size: 1264503 -> 1238407 (change: -2.06%)\r\n```\r\n\r\nThat's quite a solid gain!",
      "Optimize slice & splice. This is pretty simple.\r\n\r\nFor a source like: `def a(*args); end` there was a call like this:\r\n\r\n```\r\n    $post_args = Opal.slice.call(arguments, 0, arguments.length);\r\n```\r\n\r\nNow it's just:\r\n\r\n```\r\n    $post_args = Opal.slice.call(arguments);\r\n```\r\n\r\n```\r\n Comparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.213 -> 6.107 (change: -1.71%)\r\n                      Run time: 0.285 -> 0.282 (change: -0.81%)\r\n                   Bundle size: 5257437 -> 5209571 (change: -0.91%)\r\n          Minified bundle size: 1264503 -> 1234386 (change: -2.38%)\r\n```",
      "Fantastic!",
      "What happened here? :O [work in progress]\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.233 -> 6.083 (change: -2.40%)\r\n                      Run time: 0.287 -> 0.280 (change: -2.36%)\r\n                   Bundle size: 5257437 -> 5090149 (change: -3.18%)\r\n          Minified bundle size: 1264503 -> 1109682 (change: -12.24%)\r\n```\r\n\r\n---------------------\r\n\r\n```\r\nOpal.queue(function(Opal) {/* Generated by Opal 1.3.1 */\r\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $def = Opal.def;\r\n\r\n  return ($def(self, '$a', function $$a() {\r\n    var block = $$a.$$p || nil;\r\n\r\n    if (block) $$a.$$p = null;\r\n    \r\n    ;\r\n    return nil;\r\n  }, {$$arity: 0}), 'a')\r\n});\r\n```\r\n",
      "Additional optimization, if we only want to set $$arity (which is - most of the time), then we don't pass an object, but integer.\r\n\r\n```\r\nOpal.queue(function(Opal) {/* Generated by Opal 1.3.1 */\r\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $def = Opal.def;\r\n\r\n  return ($def(self, '$a', function $$a() {\r\n    var block = $$a.$$p || nil;\r\n\r\n    if (block) $$a.$$p = null;\r\n    \r\n    ;\r\n    return nil;\r\n  }, 0), 'a')\r\n});\r\n```\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.249 -> 6.058 (change: -3.05%)\r\n                      Run time: 0.286 -> 0.279 (change: -2.17%)\r\n                   Bundle size: 5257437 -> 5036072 (change: -4.21%)\r\n          Minified bundle size: 1264503 -> 1089609 (change: -13.83%)\r\n```",
      "Use a delete statement instead of setting null to $$p. I'm not entirely sure it's more performant, especially that this may cause a change of a shape.\r\n\r\nThe same code now becomes:\r\n\r\n```\r\nOpal.queue(function(Opal) {/* Generated by Opal 1.3.1 */\r\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $def = Opal.def;\r\n\r\n  return ($def(self, '$a', function $$a() {\r\n    var block = $$a.$$p || nil;\r\n\r\n    delete $$a.$$p;\r\n    \r\n    ;\r\n    return nil;\r\n  }, 0), 'a')\r\n});\r\n```\r\n\r\n```\r\n Comparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.239 -> 6.057 (change: -2.92%)\r\n                      Run time: 0.286 -> 0.280 (change: -2.03%)\r\n                   Bundle size: 5257437 -> 5032881 (change: -4.27%)\r\n          Minified bundle size: 1264503 -> 1087119 (change: -14.03%)\r\n```",
      "Why can't `Opal.def` return a method name? Now it does:\r\n\r\n```\r\nOpal.queue(function(Opal) {/* Generated by Opal 1.3.1 */\r\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $def = Opal.def;\r\n\r\n  return $def(self, '$a', function $$a() {\r\n    var block = $$a.$$p || nil;\r\n\r\n    delete $$a.$$p;\r\n    \r\n    ;\r\n    return nil;\r\n  }, 0)\r\n});\r\n```\r\n\r\nLooks like we are a little down in performance. I'm not sure if this particular patch is the reason.\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.253 -> 6.145 (change: -1.73%)\r\n                      Run time: 0.285 -> 0.280 (change: -1.61%)\r\n                   Bundle size: 5257437 -> 5028381 (change: -4.36%)\r\n          Minified bundle size: 1264503 -> 1086206 (change: -14.10%)\r\n```",
      "I will later check performance improvements more thoroughly. This is a small change, but in a trend of renaming often called core methods.\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.225 -> 6.141 (change: -1.34%)\r\n                      Run time: 0.284 -> 0.279 (change: -1.77%)\r\n                   Bundle size: 5257437 -> 5026654 (change: -4.39%)\r\n          Minified bundle size: 1264503 -> 1085436 (change: -14.16%)\r\n```",
      "Code: `::Opal.coerce_to!(a,b,c)`\r\n\r\nBefore:\r\n```\r\n$$($nesting, 'Opal')['$coerce_to!'](self.$a(), self.$b(), self.$c())\r\n```\r\n\r\nAfter:\r\n```\r\nvar $Opal = Opal.Opal;\r\n$Opal['$coerce_to!'](self.$a(), self.$b(), self.$c())\r\n```\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.242 -> 6.071 (change: -2.74%)\r\n                      Run time: 0.285 -> 0.280 (change: -1.78%)\r\n                   Bundle size: 5257437 -> 5026542 (change: -4.39%)\r\n          Minified bundle size: 1264503 -> 1084789 (change: -14.21%)\r\n```\r\n\r\nThere's still a lot of headroom with this approach.",
      "After pushing this approach near its limit, we have the following results:\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.258 -> 6.068 (change: -3.04%)\r\n                      Run time: 0.287 -> 0.280 (change: -2.47%)\r\n                   Bundle size: 5257437 -> 5041275 (change: -4.11%)\r\n          Minified bundle size: 1264503 -> 1083267 (change: -14.33%)\r\n```",
      "Replaced the result of compiling ::String from `$$$(\"::\", \"String\")` to simply `$$$(\"String\")`. A shortpath has been added.\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.192 -> 6.044 (change: -2.39%)\r\n                      Run time: 0.285 -> 0.278 (change: -2.24%)\r\n                   Bundle size: 5257437 -> 5021284 (change: -4.49%)\r\n          Minified bundle size: 1264503 -> 1078370 (change: -14.72%)\r\n```",
      "```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.269 -> 6.195 (change: -1.18%)\r\n                      Run time: 0.287 -> 0.279 (change: -2.75%)\r\n                   Bundle size: 5257437 -> 5020671 (change: -4.50%)\r\n          Minified bundle size: 1264503 -> 1077085 (change: -14.82%)\r\n```\r\n\r\nAlso, `Kernel#proc` and `Exception#backtrace` became compiled somehow...",
      "We have attained 15%! Can we go even further though?\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.202 -> 6.022 (change: -2.90%)\r\n                      Run time: 0.285 -> 0.276 (change: -3.02%)\r\n                   Bundle size: 5257437 -> 5011915 (change: -4.67%)\r\n          Minified bundle size: 1264503 -> 1072799 (change: -15.16%)\r\n```\r\n\r\nLet's take a look at this sample code from our corelib:\r\n\r\n```ruby\r\nclass StandardError     < ::Exception; end\r\nclass EncodingError       < ::StandardError; end\r\nclass ZeroDivisionError   < ::StandardError; end\r\nclass NameError           < ::StandardError; end\r\nclass NoMethodError         < ::NameError; end\r\nclass RuntimeError        < ::StandardError; end\r\nclass FrozenError           < ::RuntimeError; end\r\nclass LocalJumpError      < ::StandardError; end\r\nclass TypeError           < ::StandardError; end\r\nclass ArgumentError       < ::StandardError; end\r\nclass UncaughtThrowError    < ::ArgumentError; end\r\nclass IndexError          < ::StandardError; end\r\n```\r\n\r\nUsed to compile to this:\r\n\r\n```javascript\r\nOpal.queue(function(Opal) {/* Generated by Opal 1.3.1 */\r\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass;\r\n\r\n  \r\n  (function($base, $super, $parent_nesting) {\r\n    var self = $klass($base, $super, 'StandardError');\r\n\r\n    var $nesting = [self].concat($parent_nesting);\r\n\r\n    return nil\r\n  })($nesting[0], $$$('::', 'Exception'), $nesting);\r\n  (function($base, $super, $parent_nesting) {\r\n    var self = $klass($base, $super, 'EncodingError');\r\n\r\n    var $nesting = [self].concat($parent_nesting);\r\n\r\n    return nil\r\n  })($nesting[0], $$$('::', 'StandardError'), $nesting);\r\n  (function($base, $super, $parent_nesting) {\r\n    var self = $klass($base, $super, 'ZeroDivisionError');\r\n\r\n    var $nesting = [self].concat($parent_nesting);\r\n\r\n    return nil\r\n  })($nesting[0], $$$('::', 'StandardError'), $nesting);\r\n(...)\r\n```\r\n\r\nAnd now it compiles to this:\r\n\r\n```javascript\r\nOpal.queue(function(Opal) {/* Generated by Opal 1.3.1 */\r\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass;\r\n\r\n  \r\n  $klass($nesting[0], $$$('Exception'), 'StandardError');\r\n  $klass($nesting[0], $$$('StandardError'), 'EncodingError');\r\n  $klass($nesting[0], $$$('StandardError'), 'ZeroDivisionError');\r\n  $klass($nesting[0], $$$('StandardError'), 'NameError');\r\n  $klass($nesting[0], $$$('NameError'), 'NoMethodError');\r\n  $klass($nesting[0], $$$('StandardError'), 'RuntimeError');\r\n  $klass($nesting[0], $$$('RuntimeError'), 'FrozenError');\r\n  $klass($nesting[0], $$$('StandardError'), 'LocalJumpError');\r\n  $klass($nesting[0], $$$('StandardError'), 'TypeError');\r\n  $klass($nesting[0], $$$('StandardError'), 'ArgumentError');\r\n  $klass($nesting[0], $$$('ArgumentError'), 'UncaughtThrowError');\r\n  return ($klass($nesting[0], $$$('StandardError'), 'IndexError'), nil);\r\n});\r\n```\r\n\r\nIt's much cleaner now, isn't it?",
      "```true unless false```\r\n\r\nWas:\r\n\r\n```\r\n  if ($truthy(false)) {\r\n  } else {\r\n    true\r\n  };\r\n```\r\n\r\nIs:\r\n\r\n```\r\n  if (!$truthy(false)) {\r\n    true\r\n  };\r\n```\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.164 -> 6.048 (change: -1.87%)\r\n                      Run time: 0.284 -> 0.277 (change: -2.62%)\r\n                   Bundle size: 5257437 -> 4994938 (change: -4.99%)\r\n          Minified bundle size: 1264503 -> 1072746 (change: -15.16%)\r\n```",
      "`a || b || c || d || e`\r\n\r\nWas:\r\n```\r\n  if ($truthy(($ret_or_1 = (function() {if ($truthy(($ret_or_2 = (function() {if ($truthy(($ret_or_3 = (function() {if ($truthy(($ret_or_4 = self.$a()))) {\r\n    return $ret_or_4\r\n  } else {\r\n    return self.$b()\r\n  }; return nil; })()))) {\r\n    return $ret_or_3\r\n  } else {\r\n    return self.$c()\r\n  }; return nil; })()))) {\r\n    return $ret_or_2\r\n  } else {\r\n    return self.$d()\r\n  }; return nil; })()))) {\r\n    return $ret_or_1\r\n  } else {\r\n    return self.$e()\r\n  }\r\n```\r\n\r\nIs:\r\n\r\n```\r\n  if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = ($truthy(($ret_or_3 = ($truthy(($ret_or_4 = self.$a())) ? ($ret_or_4) : (self.$b())))) ? ($ret_or_3) : (self.$c())))) ? ($ret_or_2) : (self.$d()))))) {\r\n    return $ret_or_1\r\n  } else {\r\n    return self.$e()\r\n  }\r\n```\r\n\r\nPossibly the biggest runtime improvement, costing us a little bit of compile time though:\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.269 -> 6.198 (change: -1.13%)\r\n                      Run time: 0.286 -> 0.273 (change: -4.44%)\r\n                   Bundle size: 5257437 -> 4868356 (change: -7.40%)\r\n          Minified bundle size: 1264503 -> 1069576 (change: -15.42%)\r\n```",
      "This commit simply compresses the unsupported.rb String part to a loop of define_methods. This causes Array#each and define_method to become compiled.\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.090 -> 6.024 (change: -1.09%)\r\n                      Run time: 0.285 -> 0.271 (change: -5.04%)\r\n                   Bundle size: 5259054 -> 4857096 (change: -7.64%)\r\n          Minified bundle size: 1264953 -> 1067375 (change: -15.62%)",
      "Empty top compilation, not much of a change though:\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.109 -> 6.018 (change: -1.50%)\r\n                      Run time: 0.285 -> 0.271 (change: -5.06%)\r\n                   Bundle size: 5259054 -> 4856906 (change: -7.65%)\r\n          Minified bundle size: 1264953 -> 1067299 (change: -15.63%)",
      "No tangible change this time, but at least we got rid of `eval` which should help the JS engines and minifiers a little bit. Related to #1939, but it touches a different area.\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.071 -> 5.965 (change: -1.76%)\r\n                      Run time: 0.285 -> 0.271 (change: -4.75%)\r\n                   Bundle size: 5259054 -> 4856724 (change: -7.65%)\r\n          Minified bundle size: 1264953 -> 1067161 (change: -15.64%)\r\n```",
      "I noticed that certain parts or parser use expressions like `a || b || c` a lot. This caused a ton of $ret_or_x variable allocations. Now we clean them up giving us a nice headroom on the minified bundle size.\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.110 -> 5.972 (change: -2.25%)\r\n                      Run time: 0.286 -> 0.271 (change: -5.20%)\r\n                   Bundle size: 5259054 -> 4826837 (change: -8.22%)\r\n          Minified bundle size: 1264953 -> 1058462 (change: -16.32%)\r\n```",
      "Aliasing things that happen multiple times help the JS minifiers - like Terser - because it can't rename eg. Opal.regexp, but absolutely it can rename $regexp.\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.089 -> 6.006 (change: -1.36%)\r\n                      Run time: 0.285 -> 0.269 (change: -5.39%)\r\n                   Bundle size: 5259054 -> 4824589 (change: -8.26%)\r\n          Minified bundle size: 1264953 -> 1054974 (change: -16.60%)",
      "If -m is passed to terser, the results of this patchset are a little less pronounced:\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.081 -> 6.019 (change: -1.03%)\r\n                      Run time: 0.284 -> 0.270 (change: -5.23%)\r\n                   Bundle size: 5259054 -> 4824589 (change: -8.26%)\r\n          Minified bundle size: 1264953 -> 1054974 (change: -16.60%)\r\n            Mangled & minified: 812275 -> 732066 (change: -9.87%)",
      "Opal automatically sets the instance variables on a prototype. This is fine, but let's reduce the accesses to Opal.$$prototype by creating a helper variable $proto.\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.086 -> 6.014 (change: -1.19%)\r\n                      Run time: 0.284 -> 0.269 (change: -5.28%)\r\n                   Bundle size: 5259054 -> 4823880 (change: -8.27%)\r\n          Minified bundle size: 1264953 -> 1053776 (change: -16.69%)\r\n            Mangled & minified: 812275 -> 730112 (change: -10.12%)",
      "It is much performant to split a string than to push large arrays with strings. This is what Closure Compiler does. Let's help a little our Terser users.\r\n\r\n```\r\n Comparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.088 -> 6.008 (change: -1.30%)\r\n                      Run time: 0.285 -> 0.271 (change: -5.08%)\r\n                   Bundle size: 5259054 -> 4812284 (change: -8.50%)\r\n          Minified bundle size: 1264953 -> 1044964 (change: -17.39%)\r\n            Mangled & minified: 812275 -> 721296 (change: -11.20%)\r\n",
      "After this round of ::ization and possibly hiding $$ and $$$ just as we hide self...\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.082 -> 5.964 (change: -1.94%)\r\n                      Run time: 0.284 -> 0.270 (change: -4.92%)\r\n                   Bundle size: 5259054 -> 4811653 (change: -8.51%)\r\n          Minified bundle size: 1264953 -> 1041721 (change: -17.65%)\r\n            Mangled & minified: 812275 -> 720161 (change: -11.34%)",
      "Let's not define $nesting if it's not needed...\r\n\r\n```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.090 -> 5.952 (change: -2.27%)\r\n                      Run time: 0.284 -> 0.269 (change: -5.26%)\r\n                   Bundle size: 5259054 -> 4806185 (change: -8.61%)\r\n          Minified bundle size: 1264953 -> 1036887 (change: -18.03%)\r\n            Mangled & minified: 812275 -> 717787 (change: -11.63%)",
      "Let's create replace calls like $$($nesting, 'Something') with $$('Something') -- new $$ is curried old $$.\r\n\r\n```\r\n Comparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.097 -> 5.976 (change: -1.99%)\r\n                      Run time: 0.285 -> 0.270 (change: -5.41%)\r\n                   Bundle size: 5259054 -> 4795627 (change: -8.81%)\r\n          Minified bundle size: 1264953 -> 1027837 (change: -18.75%)\r\n            Mangled & minified: 812275 -> 716231 (change: -11.82%)",
      "`\"aaaa#{true}\"`\r\n\r\nWas:\r\n\r\n`\"\" + \"aaaa\" + (true)`\r\n\r\nIs:\r\n\r\n`\"aaaa\" + (true)`\r\n\r\nThis changed nothing for Terser though.\r\n\r\n```\r\n Comparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.087 -> 5.959 (change: -2.10%)\r\n                      Run time: 0.284 -> 0.269 (change: -5.45%)\r\n                   Bundle size: 5259054 -> 4783491 (change: -9.04%)\r\n          Minified bundle size: 1264953 -> 1027837 (change: -18.75%)\r\n            Mangled & minified: 812275 -> 716231 (change: -11.82%)"
    ],
    "commit_messages": [
      "Merge pull request #2356 from opal/hmdne/dont-get-self\n\nGenerated code optimization"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f68d6ca63ac8d87ea86",
    "number": 2355,
    "body": "Implement `chomp:` keyword argument for `String#each_line` and `String#lines`.",
    "head_branch": "string_each_line_chomp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2355 from takaram/string_each_line_chomp\n\nImplement `chomp` option for `String#each_line` and `#lines`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f69d6ca63ac8d87ea87",
    "number": 2354,
    "body": "This commit fixes a regression introduced by 9d3a43d. In runtime,\r\nconst_get_name had a check like: `if(cref.$$const[name])` which\r\nbroke if the const was `0`.\r\n\r\nThis fixes #2351",
    "head_branch": "hmdne/fix-2351",
    "is_a_fork": false,
    "comments": [
      "Added a test"
    ],
    "commit_messages": [
      "Merge pull request #2354 from opal/hmdne/fix-2351\n\nStop interpreting falsey values as a missing constant in `Module#const_get`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f6ad6ca63ac8d87ea88",
    "number": 2353,
    "body": "Allow `String#scan` to be called with a private kwarg `no_matchdata`,\r\nwhich ensures that `$~` isn't set. Then, ensure that matchdata methods\r\non searching for named captures use this.\r\n\r\nThis fixes #2352",
    "head_branch": "hmdne/fix-2352",
    "is_a_fork": false,
    "comments": [
      "Corrected and also added a test"
    ],
    "commit_messages": [
      "Merge pull request #2353 from opal/hmdne/fix-2352\n\nDo not modify `$~` when calling `String#scan` from internal methods"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f6bd6ca63ac8d87ea89",
    "number": 2350,
    "body": null,
    "head_branch": "hmdne/update-docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2350 from opal/hmdne/update-docs\n\nUpdate documentation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f6cd6ca63ac8d87ea8a",
    "number": 2349,
    "body": "Under certain circumstances gets was getting one more character.\r\nI added extensive tests to find the issue.\r\n\r\nThanks to Gregory Cohen for reporting the issue.",
    "head_branch": "hmdne/fix-gets",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2349 from opal/hmdne/fix-gets\n\nFix IO#gets"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f6dd6ca63ac8d87ea8b",
    "number": 2347,
    "body": "This branch is for a gradual Ruby 3.1 support.\r\n\r\nI'm not updating the tests as for now, so that we may implement as much as possible. Also, some features like: `a = 5; {a: } # => {a: 5}` are not supported until parser gets a new version released.",
    "head_branch": "hmdne/ruby31",
    "is_a_fork": false,
    "comments": [
      "Rebasing this on top of #2365"
    ],
    "commit_messages": [
      "Merge pull request #2347 from opal/hmdne/ruby31\n\nRuby 3.1 support branch"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f6ed6ca63ac8d87ea8c",
    "number": 2346,
    "body": "This fixes #2196",
    "head_branch": "hmdne/fix-2196",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2346 from opal/hmdne/fix-2196\n\nRaise an error if not a string is passed to __send__"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f6fd6ca63ac8d87ea8d",
    "number": 2345,
    "body": "Fixes #497 ",
    "head_branch": "elia/fix-497",
    "is_a_fork": false,
    "comments": [
      "After a deeper look, I don't think it will be wrong to backport it to stable :D"
    ],
    "commit_messages": [
      "Merge pull request #2345 from opal/elia/fix-497\n\nFix defining multiple methods with the same block"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f70d6ca63ac8d87ea8e",
    "number": 2344,
    "body": "This fixes #965\r\n\r\nNot all tests pass yet, but I'm curious how this will impact performance.",
    "head_branch": "hmdne/bridge-args",
    "is_a_fork": false,
    "comments": [
      "```\r\nComparison of the Asciidoctor (a real-life Opal application) compile and run:\r\n                  Compile time: 6.207 -> 6.172 (change: -0.57%)\r\n                      Run time: 0.283 -> 0.284 (change: +0.31%)\r\n                   Bundle size: 5257437 -> 5259755 (change: +0.04%)\r\n          Minified bundle size: 1264503 -> 1265007 (change: +0.04%)",
      "Me neither, but I don't think we can get better than this. I saw it's pretty common in Opal code (like Opal-Browser or Paggio) to override new. I agree it's confusing.\r\n\r\nNow, MAYBE a better idea would be to make `#initialize` actually call a constructor. But then we won't use `new JSConstructor`, but would have to do something like `#allocate` does `Object.create(JSConstructor.prototype)` and then `#initialize` does `JSConstructor.call(self, ...args)`.",
      "> `#allocate` does `Object.create(JSConstructor.prototype)`\r\n\r\nThis makes sense!\r\n\r\n> and then `#initialize` does `JSConstructor.call(self, ...args)`.\r\n\r\nYes! according to the [new operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new#description) docs) that's what happens, and we may decide if we want to respect or not the object returned by the constructor (see the rules in the docs). ",
      "Not getting into v1.4. Will need to be reworked."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f71d6ca63ac8d87ea8f",
    "number": 2342,
    "body": "This fixes #1611 and also fixes #1660",
    "head_branch": "hmdne/corelib-yield1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2342 from opal/hmdne/corelib-yield1\n\nFix a few Opal.yield1 issues"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f72d6ca63ac8d87ea90",
    "number": 2341,
    "body": "The mistake in the previous implementation was that `Proc#binding` was equivalent to `Kernel#binding`. `Proc#binding` returns a binding where a Proc was defined, which is how Ruby works internally to handle scopes. In our case implementing this would cause a performance problem (each block would need to be amended with its binding - which if not performance killing itself, it also involves JS `eval` which isn't what JITs like). So, this is a limited implementation that at least allows you to access block's self via either `my_proc.binding.receiver` or `my_proc.binding.eval('self')` (the second is apparently compatible with earlier Rubies, I saw this code in the wild; we make a shortpath for `'self'` and don't need a parser in this particular case).\r\n\r\nThis fixes #2340",
    "head_branch": "hmdne/binding-fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2341 from opal/hmdne/binding-fix\n\nImplement Proc#binding correctly"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f73d6ca63ac8d87ea91",
    "number": 2339,
    "body": "Small corrections for Opal 1.3.1",
    "head_branch": "hmdne/chrome-runner-touches",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2339 from opal/hmdne/chrome-runner-touches\n\nChrome runner touches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f73d6ca63ac8d87ea92",
    "number": 2338,
    "body": null,
    "head_branch": "hmdne/opal-repl-fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2338 from opal/hmdne/opal-repl-fix\n\nFix opal-repl execution - we used bundle exec"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f74d6ca63ac8d87ea93",
    "number": 2336,
    "body": null,
    "head_branch": "return_is_required",
    "is_a_fork": true,
    "comments": [
      "thanks! good catch 👍 "
    ],
    "commit_messages": [
      "Merge pull request #2336 from janbiedermann/return_is_required\n\nrequire must return a result"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f75d6ca63ac8d87ea94",
    "number": 2335,
    "body": null,
    "head_branch": "hmdne/changelog",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2335 from opal/hmdne/changelog\n\nUpdate UNRELEASED.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f76d6ca63ac8d87ea95",
    "number": 2334,
    "body": null,
    "head_branch": "elia/chrome-runner-fixes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2334 from opal/elia/chrome-runner-fixes\n\nSmall Chrome runner fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f77d6ca63ac8d87ea96",
    "number": 2333,
    "body": null,
    "head_branch": "hmdne/changelog",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2333 from opal/hmdne/changelog\n\nUpdate changelog"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f78d6ca63ac8d87ea97",
    "number": 2332,
    "body": "This is a light version of #2326 destined to go for Opal 1.3.\r\n\r\nIt only contains additions and bugfixes. No big changes/refactors, no opalopal support (I will try to get it into 1.4). To make things simpler, I will below write things that we can add to the changelog:\r\n\r\nAdded:\r\n- `IO#fileno`, `Method#curry`, `Buffer#to_s`, `Pathname.pwd`\r\n- NodeJS: `ARGF`, `ENV.{inspect,to_h,to_hash,merge}`, `File.{delete,unlink}`, `Kernel#system`, ```Kernel#` ```, `Process::Status`\r\n\r\nFixed:\r\n- NodeJS: Drop the first `--` argument in `ARGV`\r\n- `Process` is now a Module, not a Class - just like in MRI",
    "head_branch": "hmdne/opalinopal-lite",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2332 from opal/hmdne/opalinopal-lite\n\nOpal-in-Opal - lite version"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f79d6ca63ac8d87ea98",
    "number": 2331,
    "body": null,
    "head_branch": "hmdne/quickjs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2331 from opal/hmdne/quickjs\n\nQuickJS runner"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f7ad6ca63ac8d87ea99",
    "number": 2330,
    "body": "I triggered this error by running:\r\n\r\n```\r\n$ opal-repl -rnative\r\n```",
    "head_branch": "hmdne/native-multiload-infinite-loop",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2330 from opal/hmdne/native-multiload-infinite-loop\n\nCorrect an infinite loop if `native` is loaded twice"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f7bd6ca63ac8d87ea9a",
    "number": 2329,
    "body": "This patch is reducing file system calls.\r\ntidy_up_cache run with ~60mb:\r\nbefore: ~4.1s\r\nafter: ~1.8s\r\n(measured on Windows)",
    "head_branch": "tidy_cache_performance",
    "is_a_fork": true,
    "comments": [
      "In the future I plan that the cache would be stored in a large block file, instead of N individual files."
    ],
    "commit_messages": [
      "Merge pull request #2329 from janbiedermann/tidy_cache_performance\n\nImprove tidy_up_cache performance"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f7cd6ca63ac8d87ea9b",
    "number": 2328,
    "body": null,
    "head_branch": "regexp_last_match_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2328 from janbiedermann/regexp_last_match_fix\n\nIf $~ is nil, dont try to access it"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f7dd6ca63ac8d87ea9c",
    "number": 2327,
    "body": null,
    "head_branch": "hmdne/fixup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2327 from opal/hmdne/fixup\n\nFix opalminiracer variable name problem\r\n[no-changelog]"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f7ed6ca63ac8d87ea9d",
    "number": 2326,
    "body": "This works:\r\n\r\n```ruby\r\n[user@localhost opal]# bin/opal -s readline -rnodejs -rcorelib/string/unpack -Ilib -popal/cli_runners/compiler exe/opal -- -Oce 'p 5'\r\nwarning: Skipping the 'o' Regexp flag as it's not widely supported by JavaScript vendors. -- ./optparse.rb:\r\nwarning: Skipping the 'o' Regexp flag as it's not widely supported by JavaScript vendors. -- ./optparse.rb:\r\nwarning: Skipping the 'o' Regexp flag as it's not widely supported by JavaScript vendors. -- ./optparse.rb:\r\nwarning: Skipping the 'o' Regexp flag as it's not widely supported by JavaScript vendors. -- ./optparse.rb:\r\nwarning: Skipping the 'o' Regexp flag as it's not widely supported by JavaScript vendors. -- ./optparse.rb:\r\nwarning: Skipping the 'o' Regexp flag as it's not widely supported by JavaScript vendors. -- ./optparse.rb:\r\nObject freezing is not supported by Opal\r\nOpal.queue(function(Opal) {/* Generated by Opal 1.3.0.alpha1 */\r\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;\r\n\r\n  Opal.add_stubs(['$p']);\r\n  return self.$p(5)\r\n});\r\n\r\nOpal.queue(function(Opal) {/* Generated by Opal 1.3.0.alpha1 */\r\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;\r\n\r\n  Opal.add_stubs(['$exit']);\r\n  return $$($nesting, 'Kernel').$exit()\r\n});\r\n\r\n//# sourceMappingURL=data:application/json;(...)\r\n[user@localhost opal]# \r\n```\r\n\r\nSolved problems in this branch:\r\n- [x] optparse doesn't recognize long option names\r\n- [x] require \"opal\" doesn't work (-O is a must)\r\n  - this is related to a problem with `__FILE__`, can be hacked around with -Iopal -Istdlib -Ilib\r\n- [x] run tests in opal-in-opal\r\n  - [x] pass: bundle exec rake minitest_cruby_opalopal_nodejs\r\n  - [ ] pass: bundle exec rake minitest_node_opalopal_nodejs\r\n  - [ ] run: bundle exec rake mspec_opal_opalopal_nodejs\r\n  - [ ] run: bundle exec rake mspec_ruby_opalopal_nodejs\r\n- [x] other runners than compiler (backport some work from #2313)\r\n- [ ] source map support",
    "head_branch": "hmdne/opalinopal",
    "is_a_fork": false,
    "comments": [
      "This is on top of #2323, hopefully we will merge it soon. Cross-repository issues, I can't mark it on top of it :/",
      "I very much like this, it's mostly additive, but seems like there is a consistent compilation time increase.\r\n\r\nProbably won't make it to the v1.3 release and it's already big enough. v1.4 is a better goal.",
      "A lot of parts of this PR is merged now. I will need to rebase it.",
      "Rebase is complete now!",
      "To discuss: go/no go: get this for v1.4 as it's mostly an additive feature or defer it to v1.5 to get finished?\r\n\r\nCC: @elia "
    ],
    "commit_messages": [
      "Merge pull request #2326 from opal/hmdne/opalinopal\n\nOpal-in-Opal workshop"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f7fd6ca63ac8d87ea9e",
    "number": 2324,
    "body": null,
    "head_branch": "win",
    "is_a_fork": true,
    "comments": [
      "The minitest failure is random I think, I re-ran the tasks.",
      "> \r\n> \r\n> The minitest failure is random I think, I re-ran the tasks.\r\n\r\nIts running faulty code",
      "Alright, for the others mspec-chrome / minitest-strict-chrome, i have no idea why it cant connect to chrome, i cant reproduce, maybe a timing issue? Or it too ran faulty code? No idea how and why that happens.",
      "Those errors are random and it's a known issue.",
      "We will merge it on Wednesday at the latest.",
      "> Nice! You think there's a way to cover windows support for these runners to the CI?\r\n\r\nIn a previous patchset (#2309, also fixing opal-repl on Windows) I tried running things on Windows and they ran smoothly. But I ran it via MSYS, and this patchset removes a need for MSYS. @janbiedermann had also a few test failures and he's ironing them out. I think the issue with a Windows action for mspec will be... that it will be very slow. Maybe we can consider just running the opal suite."
    ],
    "commit_messages": [
      "Merge pull request #2324 from janbiedermann/win\n\nWindows support for chrome runner"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f80d6ca63ac8d87ea9f",
    "number": 2323,
    "body": "Taken from #2299, the largest part of it\r\n\r\nThis allows for:\r\n\r\nrequire_tree 'components', autoload: true\r\n\r\nand best used in cooperation with opal-zeitwerk autoloader.\r\n\r\nBenefit is especially for large opal apps in a browser or otherwise interactive environment to reduce TTI (Time To Interactive) significantly on application load, or any other app, that frequently uses only part of its constants.\r\n\r\nFor reference see also #2056 and #2051 (which i will all close)",
    "head_branch": "autoload_refinement",
    "is_a_fork": true,
    "comments": [
      "Gosh, what did do? 😨 https://en.wikipedia.org/wiki/23_(film)",
      "@Guillaume first of all, I must say that I have no idea how previous autoload worked or how it didn't work, but the current implementation made at least those 2 calls work:\r\n\r\nhttps://github.com/asciidoctor/asciidoctor/blob/master/lib/asciidoctor/converter.rb#L45-L46\r\n\r\nI had to stub a few libraries:\r\n\r\nhttps://github.com/opal/opal/pull/2323/files#diff-ad8aed09aedc4bfa23950bcbddae506852be08d787c6fc926ef09fc02c470855R58\r\n\r\nThis may be of interest to you. We are planning to release Opal v1.3.rc1 in next Wednesday (Oct 13) and then a stable on Oct 20.",
      "I pinged a wrong person... I meant @Mogztter "
    ],
    "commit_messages": [
      "Merge pull request #2323 from janbiedermann/autoload_refinement\n\nAutoload refinement"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f81d6ca63ac8d87eaa0",
    "number": 2322,
    "body": null,
    "head_branch": "hmdne/ryzen-runner",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2322 from opal/hmdne/ryzen-runner\n\nSelf-hosted runner for performance check"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f82d6ca63ac8d87eaa1",
    "number": 2321,
    "body": null,
    "head_branch": "hmdne/optimize_rewriter",
    "is_a_fork": false,
    "comments": [
      "This doesn't make sense, unfortunately."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f83d6ca63ac8d87eaa2",
    "number": 2320,
    "body": null,
    "head_branch": "hmdne/update-mspec",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2320 from opal/hmdne/update-mspec\n\nUpdate MSpec to the latest master"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f84d6ca63ac8d87eaa3",
    "number": 2319,
    "body": "Don't create a temporary Opal-compiled file which we don't know\r\nwhere to reliably create. Let's rely on the opal cache.",
    "head_branch": "hmdne/chrome-runner-fixup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2319 from opal/hmdne/chrome-runner-fixup\n\nChrome CDP interface fixup after #2309"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f84d6ca63ac8d87eaa4",
    "number": 2318,
    "body": null,
    "head_branch": "hmdne/terser",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2318 from opal/hmdne/terser\n\nMigrate from UglifyJS to Terser"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f85d6ca63ac8d87eaa5",
    "number": 2317,
    "body": null,
    "head_branch": "hmdne/update-filters",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2317 from opal/hmdne/update-filters\n\nUpdate filters"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f86d6ca63ac8d87eaa6",
    "number": 2316,
    "body": "* Add Opal::Config.esm\r\n* bundle update the examples\r\n* If Config.esm is enabled, SimpleServer does type=\"module\"\r\n* new rack-esm example",
    "head_branch": "hmdne/esm-simpleserver",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2316 from opal/hmdne/esm-simpleserver\n\nESM for Opal::SimpleServer"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f87d6ca63ac8d87eaa7",
    "number": 2315,
    "body": "`super` keyword's implicit argument is not compliant to MRI.\r\n\r\n```ruby\r\nclass Parent\r\n  def foo(*a)\r\n    p a\r\n  end\r\nend\r\n\r\nclass Child < Parent\r\n  def foo(a, b = 12, c: 34)\r\n    a = 'reassigned'\r\n    super\r\n  end\r\nend\r\n\r\nChild.new.foo(1)\r\n# MRI => [\"reassigned\", 12, {:c=>34}]\r\n# opal => [1]\r\n```\r\n\r\nThis PR resolves this problem.\r\n\r\nFixes #408",
    "head_branch": "zsuper",
    "is_a_fork": true,
    "comments": [
      "Thank you! I see no issues with this PR at the current time, but it may take some time for a full review",
      "This is awesome! Great work!\r\n"
    ],
    "commit_messages": [
      "Merge pull request #2315 from takaram/zsuper\n\nFix super without explicit arguments"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f88d6ca63ac8d87eaa8",
    "number": 2313,
    "body": "This PR:\r\n- implements some new methods, like Kernel.`\r\n- fixes a few cases on a nodejs runner",
    "head_branch": "hmdne/full_node_run",
    "is_a_fork": false,
    "comments": [
      "Mostly superseded by #2326; one commit remaining"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f89d6ca63ac8d87eaa9",
    "number": 2309,
    "body": "This is ongoing... fixes #2092 ",
    "head_branch": "hmdne/io-refactor",
    "is_a_fork": false,
    "comments": [
      "I'm changing the milestone to v1.3, but we may decide to postpone this merge. Especially, that it's not finished yet."
    ],
    "commit_messages": [
      "Merge pull request #2309 from opal/hmdne/io-refactor\n\nIO Refactor: Most importantly - add IO methods like IO#gets"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f8ad6ca63ac8d87eaaa",
    "number": 2308,
    "body": "This includes strings like \"\\e#{nil}\" where \"\\e\" was previously\r\ninspected, which doesn't make sense in JavaScript.\r\n\r\nFixes #2281",
    "head_branch": "hmdne/dstr-escape",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2308 from opal/hmdne/dstr-escape\n\nEscape str components in dstrs correctly"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f8bd6ca63ac8d87eaab",
    "number": 2307,
    "body": null,
    "head_branch": "hmdne/debugger-return",
    "is_a_fork": false,
    "comments": [
      "Cool, i test it on firefox, debugger on the last line is working now. (previous, raise error)"
    ],
    "commit_messages": [
      "Merge pull request #2307 from opal/hmdne/debugger-return\n\nNever return a debugger"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f8cd6ca63ac8d87eaac",
    "number": 2306,
    "body": "Fixes #2287",
    "head_branch": "hmdne/hash-delete-object-string",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2306 from opal/hmdne/hash-delete-object-string\n\nCorrectly delete hash members when dealing with Object strings."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f8dd6ca63ac8d87eaad",
    "number": 2305,
    "body": null,
    "head_branch": "hmdne/method-eq-eq-eq",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2305 from opal/hmdne/method-eq-eq-eq\n\nMethod#=== to work the same as Proc#===; fixes #2284"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f8ed6ca63ac8d87eaae",
    "number": 2304,
    "body": null,
    "head_branch": "hmdne/minus-zero-zero",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2304 from opal/hmdne/minus-zero-zero\n\n-0.0 should be stringified correctly; fixes #2288"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f8fd6ca63ac8d87eaaf",
    "number": 2303,
    "body": null,
    "head_branch": "tiny_opts",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2303 from janbiedermann/tiny_opts\n\nTiny optimizations"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f90d6ca63ac8d87eab0",
    "number": 2302,
    "body": "Taken from #2299, the largest part of it\r\n\r\nThis allows for:\r\n```\r\nrequire_tree 'components', autoload: true\r\n```\r\nand best used in cooperation with opal-zeitwerk autoloader.\r\n\r\nBenefit is especially for large opal apps in a browser or otherwise interactive environment to reduce TTI (Time To Interactive) significantly on application load, or any other app, that frequently uses only part of its constants.\r\n\r\n\r\nFor reference see also #2056 and #2051 (which i will all close)",
    "head_branch": "autoload",
    "is_a_fork": true,
    "comments": [
      "Some more autoloading specs work with this, but currently i cant run specs, specs maybe follow in another PR once i get to fix running spec on my machine, but dont wait for it",
      "well, there seems to be problem, maybe i missed something",
      "Alright, caught the missing part and added it again.",
      "Rebased to master, let's see how the CI reacted to that.",
      "what happened?, ill try again"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f91d6ca63ac8d87eab1",
    "number": 2301,
    "body": "taken from #2299",
    "head_branch": "0.digits",
    "is_a_fork": true,
    "comments": [
      "There is problem with a === operator and self and I have a feeling it may cause a problem.\r\n\r\n```js\r\n> Object.prototype.itself = function() { return this; }\r\n[Function (anonymous)]\r\n> (5).itself()\r\n[Number: 5]\r\n> 5\r\n5\r\n> (5).itself() == 5\r\ntrue\r\n> (5).itself() === 5\r\nfalse\r\n> (5).itself() === (5).itself()\r\nfalse\r\n> ",
      "It works though and I can't break it! Good!",
      "```js\r\nNumber.prototype.is_zero = function() {\r\n  return this === 0;\r\n}\r\n\r\nNumber.prototype.is_zero_strict = function() {\r\n  \"use strict\";\r\n  return this === 0;\r\n}\r\n\r\nconsole.log(\"is_zero: \", (0).is_zero())\r\nconsole.log(\"is_zero_strict: \", (0).is_zero_strict())\r\n```\r\n\r\nReturn:\r\n```js\r\nis_zero:  false\r\nis_zero_strict:  true\r\n```",
      "Thanks @janbiedermann, I added a couple fixes and merged!"
    ],
    "commit_messages": [
      "Merge pull request #2301 from janbiedermann/0.digits\n\nensure 0.digits == [0]"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f91d6ca63ac8d87eab2",
    "number": 2300,
    "body": null,
    "head_branch": "hmdne/readme-cdn",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2300 from opal/hmdne/readme-cdn\n\nREADME: Synchronize with the CDN"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f92d6ca63ac8d87eab3",
    "number": 2299,
    "body": "This is a extraction of #2266 , the minimum required set of patches for isomorfeus to function correctly\r\nIll separate them into single PRs, this PR just for reference so i dont forget anything",
    "head_branch": "iso_for_master",
    "is_a_fork": true,
    "comments": [
      "From what I see, the commits in this PR are fully merged now.",
      "🙏 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f93d6ca63ac8d87eab4",
    "number": 2297,
    "body": "Fix\r\n: warning: The \"typeof\" operator will never evaluate to \"null\"\r\n  40641 |         case 'null':\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\r\n\r\nPossibly still missing: symbol, bigint, function (for future PRs)",
    "head_branch": "typeof-'null'",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2297 from janbiedermann/typeof-'null'\n\nFix: warning: The \"typeof\" operator will never evaluate to \"null\": ca…"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f94d6ca63ac8d87eab5",
    "number": 2293,
    "body": "I noticed we were first comparing to nil, then !boolean || true. Unless\r\nI'm missing something, all we need to do is make sure it's not false or\r\nnil.\r\n\r\nThis is a rebase of #1097, I created a new PR because I can't force push to the old one.",
    "head_branch": "hmdne/optimize-truthiness",
    "is_a_fork": false,
    "comments": [
      "Booleans... how do they work",
      "We would need to ensure that boxed booleans are never returned for this PR to work. One more reason to go strict mode.",
      "This works now BUT: we can always get a boxed boolean via calls like Kernel#itself. And those booleans will be treated wrong. So I will try to continue this PR to ensure that boxing doesn't happen, for Booleans at least.",
      "In general - this patchset would make `new Boolean(false)` truthy. And we ensure Opal does not create such a monstrosity.\r\n\r\nThis also would fix false.itself/false.tap boxing the values, cc @catmando ",
      "We are not getting this fully for v1.4 - $truthy was slightly reworked to gain some performance without losing boxed boolean support. I will rework it slightly so we will at least get strict mode in a few modules to ensure we are not returning boxed values."
    ],
    "commit_messages": [
      "Merge pull request #2293 from opal/hmdne/optimize-truthiness\n\nOptimize truthiness/falsiness checks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f95d6ca63ac8d87eab6",
    "number": 2292,
    "body": "def fun(_, _) or def fun(_ignore, _ignore)\r\n\r\nThis is a cherry-pick from #2266",
    "head_branch": "hmdne/strict-mode-underscore",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2292 from opal/hmdne/strict-mode-underscore\n\nAllow for multiple underscored args with the same name in strict mode:"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f96d6ca63ac8d87eab7",
    "number": 2291,
    "body": "A trivial correction.",
    "head_branch": "hmdne/compiler-cache-3",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2291 from opal/hmdne/compiler-cache-3\n\nCompiler cache: Don't error out in multithreaded conditions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f97d6ca63ac8d87eab8",
    "number": 2290,
    "body": "This fixes #2230 \r\n\r\nUnfortunately, the implementation of the getter property setting has not been implemented successfully.\r\nIt is not a best practice and we would appreciate it if you could fix it.\r\n",
    "head_branch": "bug-trueclass-falseclass",
    "is_a_fork": true,
    "comments": [
      "There's one problem remaining, this test doesn't pass:\r\n\r\n```ruby\r\n  it \"<=> == === != =~ !~ have higher precedence than &&\" do\r\n    (false && 2 <=> 3).should == false\r\n    (false && 3 == false).should == false\r\n    (false && 3 === false).should == false\r\n    (false && 3 != true).should == false\r\n\r\n    class FalseClass; def =~(o); o == false; end; end\r\n    (false && true =~ false).should == (false && (true =~ false))\r\n    (false && true =~ false).should_not == ((false && true) =~ false)\r\n    class FalseClass; undef_method :=~; end\r\n\r\n    (false && true !~ true).should == false\r\n  end\r\n```\r\n\r\nWhy? It's simple, we can't define new methods on TrueClass or FalseClass, because true's prototype is Boolean.$$prototype",
      "For those cases... we have method_missing, let's try to do something about that",
      "Let's try this... unfortunately this test can't be passed, as `=~` is defined on Kernel. But I added this test and it works correctly:\r\n\r\n```ruby\r\n  it 'allows defining methods on TrueClass/FalseClass' do\r\n    class TrueClass\r\n      def test_opal\r\n        false\r\n      end\r\n    end\r\n\r\n    class FalseClass\r\n      def test_opal\r\n        true\r\n      end\r\n    end\r\n\r\n    expect(true.test_opal).to be_false\r\n    expect(false.test_opal).to be_true\r\n  end\r\n```"
    ],
    "commit_messages": [
      "Merge pull request #2290 from ppmasa8/bug-trueclass-falseclass\n\nBug: TrueClass === false; FalseClass === true #2230"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f98d6ca63ac8d87eab9",
    "number": 2289,
    "body": "- modern and more widespread\r\n- show issue location on both the compiled and the original file through source-maps\r\n- faster checks (no need for individual file checks)\r\n\r\nThe output now looks like this:\r\n\r\n```\r\n* 'Java' is not defined.\r\n  - Read more: https://eslint.org/docs/rules/no-undef\r\n  - Compiled: tmp/lint/opal-platform.js:8:45\r\n  - Original: opal-platform.rb:3:19\r\n\r\n* Expected a 'break' statement before 'case'.\r\n  - Read more: https://eslint.org/docs/rules/no-fallthrough\r\n  - Compiled: tmp/lint/opal.js:4759:9\r\n  - Original: corelib/kernel.rb:369:0\r\n\r\n* Expected a 'break' statement before 'case'.\r\n  - Read more: https://eslint.org/docs/rules/no-fallthrough\r\n  - Compiled: tmp/lint/opal.js:4765:9\r\n  - Original: corelib/kernel.rb:375:0\r\n\r\n* Expected a 'break' statement before 'case'.\r\n  - Read more: https://eslint.org/docs/rules/no-fallthrough\r\n  - Compiled: tmp/lint/opal.js:4770:9\r\n  - Original: corelib/kernel.rb:380:0\r\n\r\n* Unexpected combined character in character class.\r\n  - Read more: https://eslint.org/docs/rules/no-misleading-character-class\r\n  - Compiled: tmp/lint/opal.js:7815:23\r\n  - Original: corelib/string.rb:631:0\r\n\r\n* Expected a 'break' statement before 'case'.\r\n  - Read more: https://eslint.org/docs/rules/no-fallthrough\r\n  - Compiled: tmp/lint/opal.js:19622:9\r\n  - Original: corelib/kernel/format.rb:70:0\r\n\r\n* Expected a 'break' statement before 'case'.\r\n  - Read more: https://eslint.org/docs/rules/no-fallthrough\r\n  - Compiled: tmp/lint/opal.js:19690:9\r\n  - Original: corelib/kernel/format.rb:138:0\r\n\r\n* Expected a 'break' statement before 'case'.\r\n  - Read more: https://eslint.org/docs/rules/no-fallthrough\r\n  - Compiled: tmp/lint/opal.js:20038:11\r\n  - Original: corelib/kernel/format.rb:486:0\r\n\r\nFailed with 21 errors.\r\n```",
    "head_branch": "elia/eslint2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2289 from opal/elia/eslint2\n\nSwitch from jshint to ESLint"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f99d6ca63ac8d87eaba",
    "number": 2286,
    "body": "Simply wraps the compiler result as self executing es6 module, mainly intended for Opal::Builder to create a importable opal code bundle\r\n```javascript\r\n\r\n// ... lots of opal code ...\r\n\r\n// ... final wrap:\r\n\r\n/* Generated by Opal 1.2.0 */\r\nexport default (function(Opal) {\r\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;\r\n\r\n  Opal.add_stubs(['$require']);\r\n  \r\n  self.$require(\"opal\");\r\n  return self.$require(\"opal-builder\");\r\n})(Opal);\r\n```\r\nfor a example entry file:\r\n```ruby\r\nrequire 'opal'\r\nrequire 'opal-builder'\r\n```\r\n\r\nResulting file can be imported like this:\r\n```javascript\r\nimport \"resulting_file.js\";\r\n```\r\nand after that Opal will be available",
    "head_branch": "es6_wrap",
    "is_a_fork": true,
    "comments": [
      "Great! Though, I have one question that you may know an answer for. How can we reconcile this with #2221, especially this line:\r\n\r\nhttps://github.com/opal/opal/pull/2221/files#diff-42d2c84892ef705d911e383592d1056f7f317f9f4898a3548700c06d317afdb4R61\r\n\r\nDoes an import statement by any chance await a promise automatically?\r\n\r\n",
      "A static import blocks execution in its context and waits until the import is loaded and excuted, which is asynchronous, but from the point of view of the context, synchronous, as execution in context is blocked.\r\n\r\nA dynamic import returns a promise, so one can await for it.\r\n\r\nExporting a promise for a import, just returns that promise from the import.\r\nLets assume a promise is exported, then:\r\n```javascript\r\n//static import\r\nimport bla from 'promise_export';\r\n// bla will be the exportet promise\r\nresult = await bla;\r\n\r\n// dynamic import\r\nbla = await import('bla');\r\n// bla will be the exportet promise\r\nresult = await bla;\r\n```",
      "But ithink its possible to await for a export:\r\n```\r\nexport default await whatever();\r\n```",
      "Well, anyway, only files that do `#await` in top will be affected, which probably means, for library code, none.",
      "Other idea I have maybe... we have already a \"use strict\" flag. Maybe make it an option like\r\n\r\n--es-level=[3,5,6]\r\n\r\nI have an idea that we could also apply some es-level optimizations depending on the option chosen.",
      "We could delegate that to the bundler: https://esbuild.github.io/content-types/#javascript\r\n\r\nI think its 2 different things, JS level and packaging, es6_wrap is only about the packaging",
      "So maybe something like: --es-package=[3,5,6] or [classic|strict|esm]"
    ],
    "commit_messages": [
      "Merge pull request #2286 from janbiedermann/es6_wrap\n\nAdd support for ECMAScript modules with an --esm option"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f9ad6ca63ac8d87eabb",
    "number": 2285,
    "body": "Just having some fun with REPL:\r\n\r\n```ruby\r\n[user@localhost opal]# bin/opal-repl\r\n>> error\r\n<anonymous>:1434:35:in `constructor.method_missing_stub': undefined method `error' for main (NoMethodError)\r\n\tfrom <anonymous>:9:53:in `undefined'\r\n\tfrom <anonymous>:10:3:in `undefined'\r\n\tfrom <anonymous>:41:11:in `undefined'\r\n>> syntax^^^error\r\n(irb):1:8: error: unexpected token tCARET\r\n(irb):1: syntax^^^error\r\n(irb):1:        ^      \r\n>> if true\r\n..   5\r\n.. end\r\n=> 5\r\n>> `{}`\r\n=> [object Object] => {}\r\n>> ls 123\r\nComparable#methods: between?  clamp\r\nNumeric#methods: __coerced__  clone  conj  conjugate  div  dup  i  imag  imaginary  polar  pretty_print  pretty_print_cycle  real  real?  rect  rectangular  step  to_c\r\nNumber#methods: %  &  *  **  +  +@  -  -@  /  <  <<  <=  <=>  ==  ===  >  >=  >>  []  ^  __id__  abs  abs2  allbits?  angle  anybits?  arg  bit_length  ceil  chr  coerce  denominator  digits  divmod  downto  eql?  equal?  even?  fdiv  finite?  floor  gcd  gcdlcm  infinite?  inspect  instance_of?  integer?  is_a?  kind_of?  lcm  magnitude  modulo  nan?  negative?  next  nobits?  nonzero?  numerator  object_id  odd?  ord  phase  positive?  pow  pred  quo  rationalize  remainder  round  size  succ  times  to_f  to_i  to_int  to_r  to_s  truncate  upto  zero?  |  ~\r\n>> \r\n```",
    "head_branch": "hmdne/advanced-repl",
    "is_a_fork": false,
    "comments": [
      "![image](https://user-images.githubusercontent.com/54514036/131390941-97d73543-5896-499c-948f-695907c8249d.png)\r\nIt's colorful now!",
      "It works, thank you.\r\n\r\n```\r\n>> require 'hello'\r\n/home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/lib/opal/builder.rb:186:in `read': A file required by \"(irb)\" wasn't found. (Opal::Builder::MissingRequire)\r\ncan't find file: \"hello\" in:\r\n- /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/opal\r\n- /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/stdlib\r\n- /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/lib\r\n- /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/gems/ast-2.4.2/lib\r\n- /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/gems/ast-2.4.2/lib\r\n- /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/gems/parser-3.0.2.0/lib\r\n\r\nWith the following extensions:\r\n- .js\r\n- .js.js\r\n- .rb\r\n- .js.rb\r\n- .opal\r\n- .js.opal\r\n- .opalerb\r\n- .js.opalerb\r\n- .erb\r\n- .js.erb\r\n\r\nAnd the following processors:\r\n- Opal::BuilderProcessors::JsProcessor\r\n- Opal::BuilderProcessors::RubyProcessor\r\n- Opal::BuilderProcessors::OpalERBProcessor\r\n- Opal::BuilderProcessors::ERBProcessor\r\n        from /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/lib/opal/builder.rb:200:in `process_require'\r\n        from /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/lib/opal/builder.rb:98:in `block in build_str'\r\n        from /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/lib/opal/builder.rb:98:in `map'\r\n        from /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/lib/opal/builder.rb:98:in `build_str'\r\n        from /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/lib/opal/repl.rb:126:in `block in eval_ruby'\r\n        from /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/lib/opal/repl.rb:95:in `silence'\r\n        from /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/lib/opal/repl.rb:125:in `eval_ruby'\r\n        from /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/lib/opal/repl.rb:64:in `run_line'\r\n        from /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/lib/opal/repl.rb:73:in `run_input_loop'\r\n        from /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/lib/opal/repl.rb:39:in `run'\r\n        from /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/exe/opal-repl:5:in `<top (required)>'\r\n        from /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bin/opal-repl:23:in `load'\r\n        from /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bin/opal-repl:23:in `<main>'\r\n        from /home/zw963/.rvm/rubies/ruby-3.0.2/bin/ruby_executable_hooks:22:in `eval'\r\n        from /home/zw963/.rvm/rubies/ruby-3.0.2/bin/ruby_executable_hooks:22:in `<main>'\r\n/home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/lib/opal/builder.rb:186:in `read': can't find file: \"hello\" in: (Opal::Builder::MissingRequire)\r\n- /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/opal\r\n- /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/stdlib\r\n- /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/lib\r\n- /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/gems/ast-2.4.2/lib\r\n- /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/gems/ast-2.4.2/lib\r\n- /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/gems/parser-3.0.2.0/lib\r\n\r\nWith the following extensions:\r\n- .js\r\n- .js.js\r\n- .rb\r\n- .js.rb\r\n- .opal\r\n- .js.opal\r\n- .opalerb\r\n- .js.opalerb\r\n- .erb\r\n- .js.erb\r\n\r\nAnd the following processors:\r\n- Opal::BuilderProcessors::JsProcessor\r\n- Opal::BuilderProcessors::RubyProcessor\r\n- Opal::BuilderProcessors::OpalERBProcessor\r\n- Opal::BuilderProcessors::ERBProcessor\r\n        from /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/lib/opal/builder.rb:200:in `process_require'\r\n        from /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/lib/opal/builder.rb:98:in `block in build_str'\r\n        from /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/lib/opal/builder.rb:98:in `map'\r\n        from /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/lib/opal/builder.rb:98:in `build_str'\r\n        from /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/lib/opal/repl.rb:126:in `block in eval_ruby'\r\n        from /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/lib/opal/repl.rb:95:in `silence'\r\n        from /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/lib/opal/repl.rb:125:in `eval_ruby'\r\n        from /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/lib/opal/repl.rb:64:in `run_line'\r\n        from /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/lib/opal/repl.rb:73:in `run_input_loop'\r\n        from /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/lib/opal/repl.rb:39:in `run'\r\n        from /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bundler/gems/opal-e14a932ffe0d/exe/opal-repl:5:in `<top (required)>'\r\n        from /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bin/opal-repl:23:in `load'\r\n        from /home/zw963/.rvm/gems/ruby-3.0.2@marketbet_crawler/bin/opal-repl:23:in `<main>'\r\n        from /home/zw963/.rvm/rubies/ruby-3.0.2/bin/ruby_executable_hooks:22:in `eval'\r\n        from /home/zw963/.rvm/rubies/ruby-3.0.2/bin/ruby_executable_hooks:22:in `<main>'\r\n>> \r\n```\r\n\r\nthough, the backtrace is a little longer,  is there a config like `RB.conf[:BACK_TRACE_LIMIT]` ?",
      "And, just for curious, is it possible exists a `binding.irb` like command, which can break current app, and load Opal environment somewhere just like `opal-repl` does?\r\n\r\nI know there is a gem named opal-irb, but, it not work anymore.",
      "@zw963 This would require the await patchset and would probably spell `binding.irb.await` to be feasible. It would be a good idea to implement this in some follow-up pull request."
    ],
    "commit_messages": [
      "Merge pull request #2285 from opal/hmdne/advanced-repl\n\nMake REPL actually very useful"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f9bd6ca63ac8d87eabc",
    "number": 2283,
    "body": "This fixes #2234\r\n\r\nThis change aligns the behavior of the hash return value with that of pry.",
    "head_branch": "bug-json-output",
    "is_a_fork": true,
    "comments": [
      "Thank you for this commit!\r\n\r\nBy the way, you only fix Hash with this, you can also take a look at Array",
      "I mean, this line:\r\n\r\nhttps://github.com/opal/opal/blob/c2eca442aa092a3fd9ac0cf4bc87fe44b99bcc12/stdlib/json.rb#L142",
      "Thank you!"
    ],
    "commit_messages": [
      "Merge pull request #2283 from ppmasa8/bug-json-output\n\nBug: #to_json output differs between Ruby and Opal"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f9cd6ca63ac8d87eabd",
    "number": 2282,
    "body": "- Move shell commands from tasks to constants to avoid an extra shell-out\r\n- Extract the stat collection to a lambda that can be used for both current and previous\r\n- Use Float::INFINITY instead of an arbitrarily high number\r\n- Show some output for when the V8 optimizations are the same",
    "head_branch": "elia/performance-task-refactor",
    "is_a_fork": false,
    "comments": [
      "The problem was introduced with caching that compiler times weren't really meaningful. Other than that, I offered hosting a runner for this task specifically on a much more powerful CPU so we can run compiler like 7 times with even better granularity. Also, you can test this task on */ci-check - on pull requests it works so that it compares results with master, but on master, */ci-check, etc. it compares results with the previous push.",
      "Let's add --no-cache to the CLI tool after #2278 is merged. Other than that, it's all fine :D"
    ],
    "commit_messages": [
      "Merge pull request #2282 from opal/elia/performance-task-refactor\n\nRefactor the performance_compare task"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f9dd6ca63ac8d87eabe",
    "number": 2280,
    "body": "First, what is GJS:\r\n- it's GNOME's JavaScript runtime, available as /usr/bin/gjs in your Linux distribution\r\n- it's based on Mozilla SpiderMonkey\r\n- as it can interface libraries like GLib, Gtk, it can be used to create graphical applications, example: https://github.com/tchx84/flatseal\r\n- it may have a feature parity with Node.js (but API may be a little bit rough, as it is quite... close to the metal)\r\n- it can be used to for example create GNOME Shell plugins\r\n- it's probably not too much cross-platform :D\r\n\r\nWhat this commit does:\r\n- it adds a `gjs` CLI runner\r\n- it adds a ColoredDottedFormatter, by abstracting NodeJSFormatter\r\n- it implements a basic `gjs` opal/platform (stdout, stderr, ARGV, exit)\r\n- it allows to run our tests on `gjs`:\r\n![image](https://user-images.githubusercontent.com/54514036/130541851-36261e5e-7a50-49f3-9106-7166453a931a.png)\r\n",
    "head_branch": "hmdne/gjs-runner",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2280 from opal/hmdne/gjs-runner\n\nGJS Runner"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f9ed6ca63ac8d87eabf",
    "number": 2279,
    "body": "In this PR I will attempt to improve the source map support in Opal",
    "head_branch": "hmdne/source-map-workshop",
    "is_a_fork": false,
    "comments": [
      "This PR needs a little bit more work, but otherwise is mostly fine.",
      "This is in general far from perfect, but it's a step ahead since before - backtraces are now at least complete."
    ],
    "commit_messages": [
      "Merge pull request #2279 from opal/hmdne/source-map-workshop\n\nSource map workshop"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f9fd6ca63ac8d87eac0",
    "number": 2278,
    "body": "* It is now implicitly loaded by default if any writable paths are\r\n  found and a check for those is now more robust.\r\n* The main path for cache is now ~/.cache/opal, otherwise we try\r\n  /tmp/opal-cache-#{unix_username}.\r\n* Also check for parser/ast modifications.\r\n* Also check for Ruby version changes.\r\n* Also check for file size changes as suggested by @janbiedermann\r\n* Remove old cache entries, keep at most about 50MB of cache.",
    "head_branch": "hmdne/compiler-cache-2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2278 from opal/hmdne/compiler-cache-2\n\nImprove a bit on the caching mechanism"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208f9fd6ca63ac8d87eac1",
    "number": 2277,
    "body": "Update for roda-sprockets 1.1",
    "head_branch": "hmdne/roda-sprockets-doc-fixup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2277 from opal/hmdne/roda-sprockets-doc-fixup\n\nUpdate roda-sprockets.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fa0d6ca63ac8d87eac2",
    "number": 2276,
    "body": "This is a follow-up to #2268\r\n\r\nI need this PR to ensure the best parameters :)",
    "head_branch": "hmdne/ci-performance-check",
    "is_a_fork": false,
    "comments": [
      "Again, I'll merge this and we can revert it or improve on it at a later time.",
      "Oh wow, thanks @hmdne! 🙌🏻 "
    ],
    "commit_messages": [
      "Merge pull request #2276 from opal/hmdne/ci-performance-check\n\nCI: Performance regression (and progression) check"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fa1d6ca63ac8d87eac3",
    "number": 2273,
    "body": "Cut from #2266 to ease review",
    "head_branch": "hmdne/esm-source-map",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2273 from opal/hmdne/esm-source-map\n\nSource map: lines should start from 1, not 0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fa2d6ca63ac8d87eac4",
    "number": 2272,
    "body": "There exists https://xregexp.com/ which has such goodies implemented in js\r\n\r\nhttps://github.com/slevithan/xregexp/blob/d1302bd7b9b2eb94cc9fefd61d40ed244f5c04a4/src/xregexp.js#L513",
    "head_branch": "re_names",
    "is_a_fork": true,
    "comments": [
      "This is a new version of #1822\r\n\r\nWow, I didn't know JS regexp supports named capture groups, but it does and it's supported quite universally:\r\n\r\nhttps://caniuse.com/mdn-javascript_builtins_regexp_named_capture_groups\r\n\r\nAnyway, I'm consulting an implementation of Regexp that will _in general_ try to be compatible with Onigmo by compiling Regexps at runtime (or compile time if possible) with a small code size."
    ],
    "commit_messages": [
      "Merge pull request #2272 from janbiedermann/re_names\n\nimplement Regexp#names for compiler compatibility"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fa3d6ca63ac8d87eac5",
    "number": 2270,
    "body": null,
    "head_branch": "hmdne/gvar_alias",
    "is_a_fork": false,
    "comments": [
      "Exactly. This could be a nice way to treat those gvars ($~, $_) as actually thread local vars"
    ],
    "commit_messages": [
      "Merge pull request #2270 from opal/hmdne/gvar_alias\n\nAlias for gvars, alias on main"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fa4d6ca63ac8d87eac6",
    "number": 2269,
    "body": "Before:\r\n```\r\n[user@localhost opal]# bin/opal <<< 'test'\r\n  from -:1:1:in `undefined'\r\n  from /tmp/opal-system-runner-20210814-752381-bplkgc:25233:3:in `null'\r\n  from <js:internal/modules/cjs/loader.js>:1068:30:in `Module._compile'\r\n  from <js:internal/modules/cjs/loader.js>:1097:10:in `Module._extensions..js'\r\n  from <js:internal/modules/cjs/loader.js>:933:32:in `Module.load'\r\n  from <js:internal/modules/cjs/loader.js>:774:14:in `Module._load'\r\n  from <js:internal/modules/run_main.js>:72:12:in `executeUserEntryPoint'\r\n```\r\n\r\nAfter:\r\n```\r\n[user@localhost opal]# bin/opal <<< 'test'\r\n-:1:1:in `undefined': undefined method `test' for main (NoMethodError)\r\n\tfrom /tmp/opal-system-runner-20210814-753127-xwfdfg:25233:3:in `null'\r\n\tfrom <js:internal/modules/cjs/loader.js>:1068:30:in `Module._compile'\r\n\tfrom <js:internal/modules/cjs/loader.js>:1097:10:in `Module._extensions..js'\r\n\tfrom <js:internal/modules/cjs/loader.js>:933:32:in `Module.load'\r\n\tfrom <js:internal/modules/cjs/loader.js>:774:14:in `Module._load'\r\n\tfrom <js:internal/modules/run_main.js>:72:12:in `executeUserEntryPoint'\r\n[user@localhost opal]#\r\n```",
    "head_branch": "hmdne/full_message_on_uncaught",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2269 from opal/hmdne/full_message_on_uncaught\n\nOutput Exception#full_message on uncaught exceptions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fa5d6ca63ac8d87eac7",
    "number": 2268,
    "body": "Co-authored-by: Brady Wied <wied03@users.noreply.github.com>\r\n\r\nThis fixes #1255\r\n\r\nWhat happens on deoptimization:\r\n- https://github.com/opal/opal/runs/3328310772?check_suite_focus=true\r\n\r\nWith pull request we check against the branch we apply the pull request for (master most probably).\r\n\r\nOtherwise, we check against the previous commit.\r\n\r\nDeoptimization failures are not fatal. But they can serve us some idea what went wrong.",
    "head_branch": "hmdne/ci-optstatus",
    "is_a_fork": false,
    "comments": [
      "Based on those tests - it all seems to work. Of course I don't understand how V8 really works but hopefully we will iterate based on this. Let's hope that the presence of this check will teach us some understanding. I will merge it now, so I can test it on some PRs. Just in case - if it doesn't prove to be a good thing, we can always revert it.",
      "It doesn't work so well for pull request though... I will attempt to fix it later."
    ],
    "commit_messages": [
      "Merge pull request #2268 from opal/hmdne/ci-optstatus\n\nCI: Permissively check for introduced V8 deoptimizations"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fa6d6ca63ac8d87eac8",
    "number": 2266,
    "body": null,
    "head_branch": "es6_modules_1_2",
    "is_a_fork": true,
    "comments": [
      "i should probably recreate this PR based on actual file differences so that huge load of commits gets reduced",
      "probably obsolete"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fa7d6ca63ac8d87eac9",
    "number": 2265,
    "body": "The lambdas are now behaving exactly as they do in Ruby, they work just\r\nlike the def in terms of the return logic.",
    "head_branch": "hmdne/lambda-return",
    "is_a_fork": false,
    "comments": [
      "I'm surprised there are no MSpec tests for this behavior..."
    ],
    "commit_messages": [
      "Merge pull request #2265 from opal/hmdne/lambda-return\n\nSupport return from lambda (fixes opal#260)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fa8d6ca63ac8d87eaca",
    "number": 2264,
    "body": "This PR makes exceptions a little bit more compatible with contemporary Rubies",
    "head_branch": "hmdne/exception",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2264 from opal/hmdne/exception\n\nModernize Exceptions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fa8d6ca63ac8d87eacb",
    "number": 2263,
    "body": "Well, yes, unfortunately this uses fork, but the architecture is provided so that we can also provide other kinds of multicore builders, like for instance this attempt to use Ractor, or a win32 specific builder (using some win32 equivalent of fork or process spawning - at this time unfortunately I don't have enough win32 experience to say something intelligent).\r\n\r\nhttps://github.com/opal/opal/commit/611a2af66c4ac341e249028bda16021c99d950cc\r\n\r\n(Both use a similar approach).\r\n\r\nUnfortunately, Ractor is not really suitable for now. In short, I gave up when I found out I would need to patch Ragel:\r\n\r\nhttps://github.com/adrian-thurston/ragel/blob/ragel-6/ragel/rubycodegen.cpp#L100-L104\r\n\r\nSuch a patch, while possible, (and while it should be done) would require a lot of logistics. Thing is, Ractors are really hard to do right. The illegal operation here is that when the main Ractor defines a class, other Ractors can't access its instance properties.\r\n\r\nThis patch is done on top of #2242 so that we may use the compiler Marshaling, also we touch similar targets (the thing below is applicable to both PRs). This pull request in general implements multithreading for the following pipelines (anything that uses Opal::Builder, not Opal::Compiler)\r\n- Opal::SimpleServer\r\n- opal command line utilities (opal, opal-repl)\r\n- opal builder via rake\r\n- opal via Tilt (eg for Roda)\r\n- opal specs (rspec, mspec, minitest)\r\n\r\nIt doesn't touch the following:\r\n- Opal compiled with Opal\r\n- Opal::Sprockets, anything Sprockets (Sprockets unfortunately is single threaded)\r\n- anything Webpack (but in my opinion it may be used for that purpose as well)",
    "head_branch": "hmdne/builder-prefork",
    "is_a_fork": false,
    "comments": [
      "I have revisited this and rebased it for the latest Opal. There are still issues with perhaps doing it in a similar way as we have pluggable mechanisms for cache.\r\n\r\nI want to have this merged for 1.6 or 2.0 however we will call the next release so it doesn't diverge too much anymore.",
      "This is finished now and ready for review."
    ],
    "commit_messages": [
      "Merge pull request #2263 from opal/hmdne/builder-prefork\n\nOpal::Builder::Prefork for blazingly fast multicore compilation times"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fa9d6ca63ac8d87eacc",
    "number": 2262,
    "body": "The latest changes didn't get there...",
    "head_branch": "hmdne/changelog",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2262 from opal/hmdne/changelog\n\nUpdate CHANGELOG.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208faad6ca63ac8d87eacd",
    "number": 2261,
    "body": "",
    "head_branch": "hmdne/flipflop",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2261 from opal/hmdne/flipflop\n\nImplement the Flip-Flop operators"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fabd6ca63ac8d87eace",
    "number": 2260,
    "body": "",
    "head_branch": "hmdne/chore",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2260 from opal/hmdne/chore\n\nChore: Update filters"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208facd6ca63ac8d87eacf",
    "number": 2259,
    "body": "In addition, modify the Struct initializer a little. In my experience,\r\nI have never encountered using this to name a constant, yet this is\r\nthe default path. Let's try to create a shortpath.\r\n\r\nThe main reason for this, though, is that I really struggled with\r\nthe browser debugger trying to note all caught exceptions.\r\n\r\nCo-authored-by: Elia Schito <elia@schito.me>",
    "head_branch": "hmdne/rspec-backport",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2259 from opal/hmdne/rspec-backport\n\nBackport some methods from opal-rspec"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fadd6ca63ac8d87ead0",
    "number": 2258,
    "body": "With opal-optimizer, the undef step caused a regression.",
    "head_branch": "hmdne/fast-complex-fix",
    "is_a_fork": false,
    "comments": [
      "Will be fixed in opal-optimizer."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208faed6ca63ac8d87ead1",
    "number": 2256,
    "body": "(This is implemented on top of #2243)\r\n\r\nThis is not a full implementation, but may somehow, maybe, possibly, allow us to implement `binding.irb` some day in the future when we find a way to implement correct async/await. Or it can be used with `window.prompt` :)\r\n\r\nI made it so that we can pass a few more pattern matching tests. The only ones that don't pass, but are interesting are related to syntax like:\r\n\r\n```ruby\r\na = 1\r\neval <<~RUBY\r\n  [1,2,3] => [^a, *]\r\nRUBY\r\n```\r\n\r\nThose are supported (sans eval), just that `a` isn't recognized as an instance variable in the parser.\r\n\r\nFor one, it doesn't support newly defined local variables. So things like:\r\n\r\n```ruby\r\neval <<~RUBY\r\n  a = 6\r\nRUBY\r\n\r\na # => NameError\r\n```\r\n\r\ndon't work and I have no idea how to even make them work.",
    "head_branch": "hmdne/binding-and-friends",
    "is_a_fork": false,
    "comments": [
      "So, I implemented a real binding in this pull request and replaced the previous shim implementation.\r\n\r\n```bash\r\n[user@localhost opal]# ruby <<< 'module A; refine Kernel do; def p(*); puts \"no debugging!\"; end; end; end; using A; p 5'\r\nno debugging!\r\n[user@localhost opal]# bin/opal <<< 'module A; refine Kernel do; def p(*); puts \"no debugging!\"; end; end; end; using A; p 5'\r\nno debugging!\r\n[user@localhost opal]# \r\n```\r\n\r\nThe code expanded:\r\n```ruby\r\nmodule A\r\n  refine Kernel do\r\n    def p(*)\r\n      puts \"no debugging!\"\r\n    end\r\n  end\r\nend\r\n\r\nusing A\r\np 5\r\n```\r\n\r\nThe code compiled:\r\n\r\n```js\r\n  // using A\r\n  ($refn$3 = [$$($nesting, 'A')], self);\r\n  // p 5\r\n  return $refined_send([$refn$3], self, 'p', [5]);\r\n```"
    ],
    "commit_messages": [
      "Merge pull request #2256 from opal/hmdne/binding-and-friends\n\nBinding and scope variables support for eval()"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fafd6ca63ac8d87ead2",
    "number": 2255,
    "body": "In turn refactor the while node.\r\n\r\nThis fixes #575",
    "head_branch": "hmdne/do-while",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2255 from opal/hmdne/do-while\n\nImplement begin .. end while"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fb0d6ca63ac8d87ead3",
    "number": 2254,
    "body": "",
    "head_branch": "hmdne/chore",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2254 from opal/hmdne/chore\n\nChore (small CI change, update UNRELEASED, Ruby version)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fb1d6ca63ac8d87ead4",
    "number": 2253,
    "body": "Also, fix opal#2224 - make sure that lvar assignments work correctly in\r\nregards of Ruby scoping rules and we don't produce invalid JavaScript.\r\n\r\nAs a side effect of this, expressions like `true && false` are optimized\r\nout to `true`.\r\n\r\nI think this commit may lay some ground for a larger macro effort for\r\nOpal later on (think: function inlining, version checks).\r\n\r\nThis commit is built on top of #2252.\r\n",
    "head_branch": "hmdne/opalenginecheck-expand",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fb2d6ca63ac8d87ead5",
    "number": 2252,
    "body": "This needs to be made more readable, tests to be written... otherwise, it should fix a lot of issues like #2136, #1600",
    "head_branch": "hmdne/eliminate-case-node",
    "is_a_fork": false,
    "comments": [
      "This is great, the less nodes the better!",
      "In this PR I also took liberty to experiment a little bit :D\r\n\r\nWith that experiment I created a new \"SimpleIf\" node to return an expression not a statement if it's possible so that we could get rid of the closures where they aren't needed. A similar thing could be done to Begin statements. Thing is, this doesn't improve performance as I thought it would, it only cleans up the resulting code. Maybe a minifier like Terser or Google Closure Compiler could do a better job here.\r\n\r\nLater I found out a way to implement FlipFlops, which aren't as used in Ruby as much, but as a continuation of the If node changes, I decided to implement them.\r\n\r\nActually, I think that rewriters aren't the best with regards to compiler performance. Since all of them run a DFS algorithm on the whole tree, maybe it could be beneficial to connect some (especially those simple ones) rewriters into a single rewriter (running all in parallel). Then I wouldn't have such concerns about performance. With a careful thought we may be able to achieve this without sacrificing the code quality.",
      "Right now I'm quite ambivalent about this. As in, reducing the number or Nodes is certainly with some benefits, but then, converting a when to a deeply nested if will cause an issue of a stack depth. Let's leave this patch for now, maybe revisit it in the future.",
      "What if: we didn't recurse?",
      "To note:\r\n* Opal before allowed for about 5000 case branches for runtime on V8, virtually any number for compilation\r\n* This branch reduces the number of case branches for compilation to 1700\r\n* MRI breaks after 3000\r\n\r\nNow I'm rebasing this atop of our compiler optimization branch; next I will do some optimizations for `$truthy((x)['$==='](y))`",
      "Has been merged in a better form."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fb3d6ca63ac8d87ead6",
    "number": 2251,
    "body": "This commit fixes #2167",
    "head_branch": "hmdne/rework-class-variables",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2251 from opal/hmdne/rework-class-variables\n\nRework class variables to support inheritance correctly"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fb4d6ca63ac8d87ead7",
    "number": 2250,
    "body": "Rebase #1908 on current master (@iamprich removed his repository)",
    "head_branch": "hmdne/splat_bug",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fb5d6ca63ac8d87ead8",
    "number": 2249,
    "body": "The former behavior was to create a subclass of String (as\r\n`\"::\".$$class` is a String), which was incorrect. The same is also\r\nrelated to modules.\r\n\r\nThis should fix #1475.",
    "head_branch": "hmdne/fix-class-doublecolon-string",
    "is_a_fork": false,
    "comments": [
      "Sample code that was broken:\r\n\r\n```ruby\r\nclass ::Object # Actually defined String::Object\r\nend\r\n```"
    ],
    "commit_messages": [
      "Merge pull request #2249 from opal/hmdne/fix-class-doublecolon-string\n\nFix `class ::String`."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fb6d6ca63ac8d87ead9",
    "number": 2248,
    "body": "I tried to fix this, but now I see it's a much bigger issue in general",
    "head_branch": "hmdne/repl-vs-iter-variables",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fb7d6ca63ac8d87eada",
    "number": 2247,
    "body": "",
    "head_branch": "hmdne/object-space",
    "is_a_fork": false,
    "comments": [
      "Now I have a moment to describe this pull request.\r\n\r\nWell, all it does is add destructors and WeakMaps to Opal. In terms of a WeakMap we can have a few other things implemented, like: https://github.com/ruby/weakref/blob/master/lib/weakref.rb (or we can even implement them in terms of https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef - but this is a much later addition).\r\n\r\nWe do \"polyfill\" the finalization registry (as in - old environments will simply ignore those calls), but not WeakMap, which is supported since IE 11: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\r\n\r\nMost of those things work only for keys of type typeof var === \"function\" and \"object\", which is contrary to what Ruby does. JS WeakMaps are also non-iterable, contrary to how Ruby implements them.",
      "We now support all primitive values on WeakMap by deferring to a regular Hash"
    ],
    "commit_messages": [
      "Merge pull request #2247 from opal/hmdne/object-space\n\nObjectSpace & ObjectSpace::WeakMap"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fb8d6ca63ac8d87eadb",
    "number": 2246,
    "body": "Before:\r\n12043 examples, 0 failures (time taken: 18.075000047683716) (3388 bugs)\r\n\r\nAfter:\r\n12523 examples, 0 failures (time taken: 18.14400005340576) (3555 bugs)",
    "head_branch": "hmdne/mspec-matrix-and-enumerators",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2246 from opal/hmdne/mspec-matrix-and-enumerators\n\nMSpec: Also test Matrix and Enumerator::{Lazy,Yielder,Generator}"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fb9d6ca63ac8d87eadc",
    "number": 2245,
    "body": "",
    "head_branch": "hmdne/chore",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2245 from opal/hmdne/chore\n\nUpdate UNRELEASED.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fb9d6ca63ac8d87eadd",
    "number": 2244,
    "body": "Nothing big I think, just a chore.",
    "head_branch": "hmdne/update-spec-submodules",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2244 from opal/hmdne/update-spec-submodules\n\nUpdate all spec submodules to the current masters"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fbad6ca63ac8d87eade",
    "number": 2243,
    "body": "Most of things work, except for the find pattern (`a => [*, b, *]`),\r\nwhich is experimental and there are no tests for that in the current\r\nsuite. Some tests don't pass due to an eval bug (eval doesn't know\r\nthat local variables exist).\r\n\r\nThis implementation is split between compiler and corelib, which can\r\nbe thought as a little unorthodox. The reason is that I wanted this out\r\nsooner and have it less buggy on release. In general it works in a way,\r\nthat compiler passes something similar to a sexp to a PatternMatching\r\nclass implemented in corelib and then corelib works on the actual\r\npattern matching logic.\r\n\r\nAdditionally, we added `Hash#except{,!}`. Also, corelib/pattern_matching\r\ndefines `#deconstruct{,_hash}` on Struct, Hash and Array, though those\r\nare probably useless outside of pattern matching.\r\n\r\nAdditionally, we fixed a bug which prevented definition of instance\r\nvariables for Opal compiled with Opal.",
    "head_branch": "hmdne/parser30-pattern-matching",
    "is_a_fork": false,
    "comments": [
      "I took the liberty of adding some new (pending) things on this branch, but I will tidy them up to separate PRs later.",
      "I isolated the Binding and scope variables support to a separate PR, #2256."
    ],
    "commit_messages": [
      "Merge pull request #2243 from opal/hmdne/parser30-pattern-matching\n\nParser 3.0: Implement pattern matching."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fbbd6ca63ac8d87eadf",
    "number": 2242,
    "body": "First, maybe how to use it:\r\n\r\n```ruby\r\nOPAL_CACHE=1 bundle exec rake mspec_opal_nodejs\r\n```\r\n\r\nI made it an ENV variable for now, not Opal::Config, mainly because there's a plethora of ways to call Opal and almost none of them support those options. This thing only works with Opal::Builder, so it doesn't work with opal-sprockets (but it would be trivial to add if it would be wanted, after all, Sprockets has its own cache - working better or worse).\r\n\r\nAs we all know, Opal compiles things slowly. So let's take probably the biggest Opal application out there, that is, `bundle exec rake mspec_ruby_nodejs`. So on my computer it takes 1 minute and 20 second (both with cache disabled and with cache full miss). But after cache is populated, it takes 23 seconds, almost a minute less.\r\n\r\nNow, HOW does it work, well, this thing is a bit hacky I must say, but maybe someone will help me improve it. We cache Opal::Compiler instances (and Opal::SourceMap::File) with hand-crafted marshal_(dump,load) methods. We assume that some methods of Compiler/SourceMap won't be called, so we simply skip their instance variables if possible. Such a compiler would be useful for extracting what you usually want to extract from it, but no more.\r\n\r\nBut how and where it's stored? On disk, by 2 cache keys.\r\n\r\nOne cache key is an environment key, which is dependent on compiler options and... mtime of Opal compiler (ie. everything in lib/). The second is file key, which basically means a tuple of (filename, source, options). So you can work on Opal and have things run fast (unless you modify the compiler part, of course).\r\n\r\nAfter running `mspec_opal_nodejs` the cache is 40MB. Deflating it is certainly a good idea.\r\n\r\nThe cache also isn't pruning itself automatically. It's up to user to do that at this point. At a later time we can think about some LRU, or other method so that it may be seamlessly included as a default option.",
    "head_branch": "hmdne/compiler-cache",
    "is_a_fork": false,
    "comments": [
      "After gzipping, we are now down to something like 12MB.",
      "@hmdne I pushed an extra commit, to allow different cache classes, including a null one for when the engine is opal itself, instead of using the flag.\r\nAlso now we have the global cache instance stored in `Opal.cache` meaning that it can be changed and customized, and it's easy to add alternative implementations.",
      "Anyway, #2278 is a continuation."
    ],
    "commit_messages": [
      "Merge pull request #2242 from opal/hmdne/compiler-cache\n\nOpal::Cache, an optional compiler cache"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fbcd6ca63ac8d87eae0",
    "number": 2239,
    "body": "",
    "head_branch": "hmdne/start-1.2.0",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2239 from opal/hmdne/start-1.2.0\n\nOfficially start 1.2.0 dev cycle. Update UNRELEASED"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fbdd6ca63ac8d87eae1",
    "number": 2238,
    "body": "Allow :encoding option to String costructor\r\nMake sure subclasses call a constructor, with a certain limitation:\r\n```\r\n  # Our initialize method does nothing, the string value setup is being\r\n  # done by String.new. Therefore not all kinds of subclassing will work.\r\n  # As a rule of thumb, when subclassing String, either make sure to override\r\n  # .new or make sure that the first argument given to a constructor is\r\n  # a string we want our subclass-string to hold.\r\n```",
    "head_branch": "hmdne/string-constructor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2238 from opal/hmdne/string-constructor\n\nRework the String constructor; fixes #2185"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fbed6ca63ac8d87eae2",
    "number": 2237,
    "body": "This PR is on top of #2236. It also supersedes #2184 with a bigger context.\r\n\r\nThis PR includes two kinds of changes:\r\n* union, difference, intersection to support multiple arguments\r\n* to_a, slice/[], uniq, *, difference/-, intersection/&, union/|, flatten to return Array, not a subclass\r\n\r\nThe second may be a controversial change, as it breaks compatibility with what Ruby used to do. Ref: https://rubyreferences.github.io/rubychanges/3.0.html#array-always-returning-array\r\n\r\nIt removes 22 filters.\r\n\r\nI can split the first part of the change for 1.2, second for 2.0, or we can take both for 1.2. What's your opinion on that?\r\n\r\n",
    "head_branch": "hmdne/parser30-array",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2237 from opal/hmdne/parser30-array\n\nParser 3.0: Array methods"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fbfd6ca63ac8d87eae3",
    "number": 2236,
    "body": "There are some new MSpec tests passing, possibly missed out due to integration of the recent patches. Also, mark some \"seasonal\" patches that sometimes work, sometimes don't and are related to timezones.",
    "head_branch": "hmdne/update-filters-2021-06",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2236 from opal/hmdne/update-filters-2021-06\n\nUpdate the current state of filters"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fc0d6ca63ac8d87eae4",
    "number": 2235,
    "body": " fixes #2189 #2094 #2099",
    "head_branch": "hmdne/unpack-utf8-problem-fix",
    "is_a_fork": false,
    "comments": [
      "So this broke unpack with: w, B, C, H, L, N, Q, S, U, V, b, c, h, l, s and v. It seems like the whole unpack implementation depends on this wrong assumption.",
      "OK, the reason is actually very simple. The current implementation works correctly most of the time for both the BINARY encoding and Unicode alike. This is why it's <0x100. Most of the time, but it's not correct in fact, we need to take encoding into account. I'm supplying the correct implementation below.",
      "I'll now rebase it on top of #2236 and remove some filters we were able to pass this time.",
      "The next commit goes a little bit beyond the initial scope. We moved some functions from string.rb to string/encoding.rb, as more functions are now encoding-aware and I implemented a bit more of the encoding library.\r\n\r\nWe can go 2 ways now, either we make string/encoding.rb mandatory, which I see it already kind of is, or we write some \"polyfill\" functions. At first I implemented those functions, but decide to not include them in a patch.\r\n\r\n```ruby\r\n  # If corelib/string/encoding isn't loaded, below are the methods that\r\n  # will be \"correct most of the time\".\r\n\r\n  alias b itself\r\n  def encode(encoding); self; end\r\n  alias force_encoding encode\r\n  def length; `self.length`; end\r\n  alias size length\r\n  alias bytelength length\r\n\r\n  def each_char(&block)\r\n    return enum_for(:each_char) { length } unless block_given?\r\n    %x{\r\n      for (var i = 0, length = self.length; i < length; i++) {\r\n        #{yield `self.charAt(i)`};\r\n      }\r\n    }\r\n    self\r\n  end\r\n\r\n  def each_byte(&block)\r\n    return enum_for(:each_byte) { bytelength } unless block_given?\r\n    %x{\r\n      for (var i = 0, length = self.length; i < length; i++) {\r\n        #{yield `self.charCodeAt(i)`};\r\n      }\r\n    }\r\n    self\r\n  end\r\n\r\n  # Those don't need to be repeated:\r\n  def bytes\r\n    @bytes ||= each_byte.to_a\r\n    @bytes.dup\r\n  end\r\n\r\n  def chars(&block)\r\n    return each_char.to_a unless block\r\n\r\n    each_char(&block)\r\n  end\r\n```",
      "Oh and by the way, the main reason for those changes is that Ruby interprets \"\\x80\" differently than \"\\u0080\". Therefore pack and unpack may not be compatible with one another. After I finish this patch, the next one will try to allow strings in Opal like \"\\x80\".",
      "Well... from a seemingly simple problem now we are here. This is still not perfect, but hopefully most people won't notice the encoding problems.\r\n\r\nThe filters are a mess, but I can assure you there's only 1 new filter added which is related to unsupported EUC-JP encoding.\r\n\r\nI'll do benchmarks to ensure there's no big performance regression (String#+ looks scary...). Afterwards, I will also try to optimize the dready `unpack(\"U*\")` call.",
      "I wrote a benchmark suite that measures Opal's performance on various fields, even since v0.8.0 (the interesting thing is that all those versions work on Ruby 3.0... I'll publish the code later on, but it's certainly not pretty). For this particular test, that in particular benchmarks ERB compilation on Opal compiled with Opal I noticed no statistically significant change on this patchset (so this tests both ERB compilation and ERB execution but just now I noticed it doesn't really use #+ too much, so let's try another, now less realistic, benchmark).\r\n\r\n```ruby\r\n`console.log(\"T:load:\", +new Date)` # !@\r\n\r\nrequire 'opal'\r\n\r\n`console.log(\"T:iter1:\", +new Date)` # @#\r\n\r\nstr = ''\r\n\r\n200000.times do |i|\r\n  str += i.to_s(2)\r\nend\r\n\r\n`console.log(\"T:iter2:\", +new Date)` # #$\r\n\r\n200000.times do |i|\r\n  str += i.to_s(2)\r\nend\r\n\r\n`console.log(\"T:end:\", +new Date)` # $%\r\n```\r\n\r\nThis benchmark saw 5% slowdown (only between iter1 and end) after the #+ patch.",
      "Now, for the ERB benchmark. The bigger value the worse:\r\n\r\n984e9718 (first commit before 6fddca88 aka v1.0.0-237-g6fddca88): 46\r\nin the middle (after 6fddca88 was introduced): 263\r\n826e795 (the last commit of this PR): 61\r\n\r\nSo, it's still 33% slower than originally, but overall it's 4 times faster. And the benchmark takes into account only compiling being done by Opal compiled by Opal.",
      "> So, it's still 33% slower than originally, but overall it's 4 times faster. And the benchmark takes into account only compiling being done by Opal compiled by Opal.\r\n\r\nSounds good, I will compile Asciidoctor against your branch 👍🏻 ",
      "@Mogztter just in case, I may rebase this branch, but it's one of the most complicated branches for the Opal 1.2 process (to end on 21st of July) and may not make it. Feel free to leave any feedback :D",
      "I can confirm that it's still slower but acceptable and that https://github.com/opal/opal/issues/2099 is fixed 🎉 \r\nTranspiling Asciidoctor now takes 40 seconds (with the previous version it took approximately 30 seconds).",
      "The performance structure for Opal compiler compiled by Opal looks like this for my particular example of:\r\n```ruby\r\n  out = Opal.compile(\"def xxyx(a,c,d); if 5; 6; elsif 7; 8; end; end\" * 1000)\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/54514036/125209159-4a55ad00-e297-11eb-8f12-eb9669ddc4f2.png)\r\n\r\nIt's 6.88s spent on parsing, 924ms on rewriting, 353ms on compiling (while 106ms on flattening the resulting structure).\r\n\r\nThis is AFTER the patch I just submitted that gained me ~10% compiler optimization on MRI, but may also bring some benefits to Opal-on-Opal.",
      "Woot woot 🎉 "
    ],
    "commit_messages": [
      "Merge pull request #2235 from opal/hmdne/unpack-utf8-problem-fix\n\nCorrect the utf-8 unpack implementation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fc1d6ca63ac8d87eae5",
    "number": 2233,
    "body": "Add the content of the `NODE_OPTS` environment variable to the NodeJS' arguments in the node runner. This is notably useful to enable remote debugging while testing:\r\n\r\n ```\r\nNODE_OPTS=--inspect-brk=0.0.0.0:9993 opal -Itest -Ilib -Ivendored-minitest \\\r\n                                           -soptparse -sio/console -stimeout -srubygems -stempfile -smonitor \\\r\n                                           -Rnodejs tmp/minitest_node_nodejs.rb\r\n```\r\n\r\nThe string in `NODE_OPTS` is parsed using `Shellwords` (available in Ruby ≥ 1.8 according to [this SO answer](https://stackoverflow.com/a/6068282/2363712))",
    "head_branch": "node-runner-opts",
    "is_a_fork": true,
    "comments": [
      "Could someone check why `build/minitest` has failed on the CI? As far as I can tell, it doesn't seem related to this PR.",
      "It's a random failure, Chromium didn't start on time. I'm rerunning the CI."
    ],
    "commit_messages": [
      "Merge pull request #2233 from s-leroux/node-runner-opts\n\nParse the NODE_OPTS environment variable in the Node runner"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fc2d6ca63ac8d87eae6",
    "number": 2227,
    "body": "Fixes https://github.com/opal/opal/issues/2226",
    "head_branch": "elia/versioning-policy",
    "is_a_fork": false,
    "comments": [
      "Great idea! I would say this is the public interface we provide:\r\n\r\nhttps://github.com/opal/opal/blob/master/docs/compiled_ruby.md#ruby-from-javascript\r\n\r\nAdditionally, we will start using private/public in corelib/stdlib."
    ],
    "commit_messages": [
      "Merge pull request #2227 from opal/elia/versioning-policy\n\nAdd a \"Versioning\" section to the README"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fc3d6ca63ac8d87eae7",
    "number": 2225,
    "body": "**Reference issue**: #2201\r\n- Replaced the image with the SVG ['nebulab_black.svg'](https://nebulab.com/assets/img/logo-nebulab_black.svg) on line 237\r\n- Added alt text for images without them (lines 6, 31, 224, 233)\r\n- <details><summary>Removed 1px SVGs found on 234 to 242</summary>On navigating to the resource links, there were SVGs that were only 1px. I figured that the code was left-over from a previously used format - but I'll add them in again if needed!</details>\r\n\r\nI hope that all is in order, and thank you for helping me contribute to this project!",
    "head_branch": "add-alt-text",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2225 from Akshu-on-github/add-alt-text\n\n[Doc] Fixed broken 'Become a Sponsor' image"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fc4d6ca63ac8d87eae8",
    "number": 2223,
    "body": "Following up from #2145\r\n\r\nRef #2144:\r\n> Using String as property name is potentially harmful because other librairies might use/declare the same name.\r\n\r\n",
    "head_branch": "symbol",
    "is_a_fork": true,
    "comments": [
      "If I would to suggest something... maybe this could be a good idea:\r\n\r\n```js\r\nif (typeof Symbol !== \"undefined\") {\r\n  Opal.s = function(name) {\r\n    if (typeof Opal.s[name] !== 'undefined') return Opal.s[name];\r\n    return Opal.s[name] = Symbol(name);\r\n  };\r\n}\r\nelse {\r\n  Opal.s = function(name) {\r\n    if (typeof Opal.s[name] !== 'undefined') return Opal.s[name];\r\n    return Opal.s[name] = name;\r\n  };\r\n}\r\n```\r\n\r\nThen we would define a bunch of symbols with:\r\n```js\r\nOpal.s(\"$$id\");\r\nOpal.s(\"$$is_number\");\r\n```\r\nand use them later on as\r\n```js\r\nOpal.s.$$id\r\nOpal.s.$$is_number\r\n```\r\n\r\nThis approach has a nice property of allowing old JS to work possibly (I know there aren't many). I don't care about it particularly, just that I don't like this Opal.$$id_s syntax. Also this approach will allow the libraries to use this infrastructure to also use their own symbolized names.",
      "> This approach has a nice property of allowing old JS to work possibly (I know there aren't many). I don't care about it particularly, just that I don't like this Opal.$$id_s syntax. Also this approach will allow the libraries to use this infrastructure to also use their own symbolized names.\r\n\r\nI like that idea. I followed the syntax introduced by @Mogztter in  #2145, but I can make the change if he's ok with that.\r\n",
      "> If I would to suggest something... maybe this could be a good idea:\r\n\r\nI like the `Opal.s` function.\r\n`Symbol` is supported on all browsers (except IE but at this point IE is long dead and < 1%): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#browser_compatibility\r\n\r\n\r\n> Then we would define a bunch of symbols with [...] and use them later on as [...]\r\n\r\n👍🏻 \r\nElia suggested something similar with `Opal.$`.\r\n\r\n",
      "> 👍🏻\r\n> Elia suggested something similar with `Opal.$`.\r\n\r\nI didn't fully understand [Elia's suggestion](https://github.com/opal/opal/pull/2145#issuecomment-770305565). Is `Opal.$` something already existing? Or is this a new symbol like `Opal.s`?\r\n",
      "I've updated the PR with the `Opal.s.*` syntax suggested by @hmdne above.",
      "I've cleaned up the branch so only the relevant commits appear in the PR.\r\n\r\n![image](https://user-images.githubusercontent.com/1678974/119833300-49db9f80-beff-11eb-822b-059acd9fb2b4.png)\r\n\r\nAs a first-time contributor, I need a maintainer to approve running workflow:\r\nhttps://docs.github.com/en/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks",
      "I have difficulties merging changes from Opal 1.2. While running the `mspec_ruby_nodejs` test suite, the following tests fail here and I can't find why:\r\n\r\n```\r\n  1. Range#step with exclusive end and Float values returns Float values of 'step * n + begin < end'\r\n                                                                                       \r\n    Expected [1, 2.8, 4.6, 1, 19.2, 37.4, 55.599999999999994]                          \r\nto have same value and type as [1, 2.8, 4.6, 1, 19.2, 37.4]                            \r\n    SpecExpectationNotMetError: Expected [1, 2.8, 4.6, 1, 19.2, 37.4, 55.599999999999994]\r\nto have same value and type as [1, 2.8, 4.6, 1, 19.2, 37.4]                            \r\n  from <internal:corelib/runtime.js>:1899:5:in `Opal.send2'\r\n  from <internal:corelib/runtime.js>:1889:5:in `Opal.send'\r\n  from <internal:corelib/error.rb>:28:5:in `new'     \r\n  from <internal:corelib/kernel.rb>:544:23:in `exception'         \r\n  from mspec/expectations/expectations.rb:22:5:in `raise'  \r\n  from mspec/expectations/should.rb:15:9:in `fail_with'   \r\n  from ruby/core/range/step_spec.rb:213:9:in `should'\r\n  from <internal:corelib/basic_object.rb>:119:1:in `instance_exec'             \r\n  from <internal:corelib/runtime.js>:1899:5:in `Opal.send2'\r\n  from <internal:corelib/runtime.js>:1889:5:in `Opal.send'\r\n                          \r\n  2. Hash#transform_keys! returns the processed keys if we broke from the block\r\n                          \r\n    Expected {\"c\"=>1, \"d\"=>4} == {\"b\"=>1, \"c\"=>2}          \r\nto be truthy but was false                                \r\n    SpecExpectationNotMetError: Expected {\"c\"=>1, \"d\"=>4} == {\"b\"=>1, \"c\"=>2}\r\nto be truthy but was false                               \r\n  from <internal:corelib/runtime.js>:1899:5:in `Opal.send2'\r\n  from <internal:corelib/runtime.js>:1889:5:in `Opal.send'\r\n  from <internal:corelib/error.rb>:28:5:in `new'      \r\n  from <internal:corelib/kernel.rb>:544:23:in `exception'\r\n  from mspec/expectations/expectations.rb:33:5:in `raise'         \r\n  from mspec/matchers/base.rb:33:7:in `fail_predicate'     \r\n  from mspec/matchers/base.rb:19:5:in `method_missing'\r\n  from ruby/core/hash/transform_keys_spec.rb:93:7:in `=='\r\n  from <internal:corelib/basic_object.rb>:119:1:in `instance_exec'\r\n  from <internal:corelib/runtime.js>:1899:5:in `Opal.send2'\r\n```\r\n",
      "I fixed most of the issues raised by the CI.\r\nHowever, I have difficulties with that one:\r\n\r\n```\r\nrspec ./spec/lib/source_map/index_spec.rb:53 # Opal::SourceMap::Index points to the correct source line\r\n```\r\nThe source code contains a comment that should help me updating the tests with the right line/column mapping -- but I don't understand what I'm supposed to do :/\r\n\r\n```\r\n  it 'points to the correct source line' do\r\n    # To debug this stuff can be useful to print out all\r\n    # the sources with #inspect_source:\r\n    #\r\n    #   p :compiled\r\n    #   inspect_source compiled\r\n    #\r\n    #   p :generated_code\r\n    #   source_map.source_maps.each do |sub_source_map|\r\n    #     p generated_code: sub_source_map.file\r\n    #     inspect_source sub_source_map.generated_code\r\n    #   end\r\n    #\r\n\r\n    expect('jsline1(').to be_mapped_to_line_and_column(0, 4, file: 'js_file.js', map: source_map, source: compiled)\r\n    expect('jsline2(').to be_mapped_to_line_and_column(1, 4, file: 'js_file.js', map: source_map, source: compiled)\r\n    expect('jsline3(').to be_mapped_to_line_and_column(2, 4, file: 'js_file.js', map: source_map, source: compiled)\r\n    expect('$rbline1(').to be_mapped_to_line_and_column(0, 2, file: 'rb_file.rb', map: source_map, source: compiled)\r\n    expect('$rbline2(').to be_mapped_to_line_and_column(1, 2, file: 'rb_file.rb', map: source_map, source: compiled)\r\n    expect('$rbline3(').to be_mapped_to_line_and_column(2, 2, file: 'rb_file.rb', map: source_map, source: compiled)\r\n    expect('jsline4(').to be_mapped_to_line_and_column(3, 4, file: 'js2_file.js', map: source_map, source: compiled)\r\n    expect('jsline5(').to be_mapped_to_line_and_column(4, 4, file: 'js2_file.js', map: source_map, source: compiled)\r\n    expect('jsline6(').to be_mapped_to_line_and_column(5, 4, file: 'js2_file.js', map: source_map, source: compiled)\r\n    expect('$rbline4(').to be_mapped_to_line_and_column(3, 2, file: 'rb2_file.rb', map: source_map, source: compiled)\r\n    expect('$rbline5(').to be_mapped_to_line_and_column(4, 2, file: 'rb2_file.rb', map: source_map, source: compiled)\r\n    expect('$rbline6(').to be_mapped_to_line_and_column(5, 2, file: 'rb2_file.rb', map: source_map, source: compiled)\r\n  end\r\n```",
      "I bet that you would fix it with changing $rblineX( to [Opal.s(\"rblineX\")](",
      "I'm willing to help get this merge if we all agree that this is the path forward.\r\nMaybe we should take it step by step and split this merge request into smaller pull requests? What do you think?",
      "@Mogztter It has been a long time since this PR was started and things got very different.\r\n\r\nI think this is the way forward, but only in a compatible way. As in, to retain the current semantic by default, but allow to slowly phase in the new behavior. Then we won't even need to bump the major number for now - a major number would just include a new set of defaults.",
      "And so, my proposal would be like this: first level is compiler support, so a compiler switch that would enable the new behavior. Second level is runtime switch, which would mean that Opal.s (or something similar) would return Symbols instead of Strings. Both disabled by default.\r\n\r\nThis approach would allow us to slowly phase in the new system into a major release, just along a few other changes we have planned (like PromiseV2 becoming the default Promise).",
      "> And so, my proposal would be like this: first level is compiler support, so a compiler switch that would enable the new behavior. Second level is runtime switch, which would mean that Opal.s (or something similar) would return Symbols instead of Strings. Both disabled by default.\r\n\r\nThat's a good idea 👍🏻 \r\n\r\n> It has been a long time since this PR was started and things got very different.\r\n\r\nHow so? Do you mean that it would be better to start from \"scratch\" (i.e., start a new branch from master)?\r\n\r\n> This approach would allow us to slowly phase in the new system into a major release, just along a few other changes we have planned (like PromiseV2 becoming the default Promise).\r\n\r\n👍🏻 ",
      "> How so? Do you mean that it would be better to start from \"scratch\" (i.e., start a new branch from master)?\r\n> \r\nVery possibly. master has diverged quite a lot since then, because 1.4 was quite big.\r\n\r\nWe talked with @elia about this today and @elia suggested this kind of code generation approach. After benchmarking we came to understand that it may even improve performance for some cases:\r\n\r\nCurrently code like `[1,2,3].join` generates this:\r\n\r\n```js\r\nOpal.queue(function(Opal) {/* Generated by Opal 1.4.1 */\r\n  var nil = Opal.nil;\r\n\r\n  Opal.add_stubs('join');\r\n  return [1, 2, 3].$join()\r\n});\r\n```\r\n\r\nWhat if it would generate this:\r\n\r\n```js\r\nOpal.queue(function(Opal) {/* Generated by Opal 1.5.x */\r\n  var nil = Opal.nil, s$join = Opal.s('join');\r\n\r\n  Opal.add_stubs('join');\r\n  return [1, 2, 3][s$join]()\r\n});\r\n```\r\n\r\nWhile in this particular case no gains were reported, rather it's calls like '$include?' that can't be called using the dot operator, but need allocation of a new string every time a call is made.\r\n\r\nWe lose quite a lot in debugging websites using DevTools then, but #2376 is planned."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fc5d6ca63ac8d87eae9",
    "number": 2222,
    "body": "I couldn't find time to add those before... I will also now amend the remaining Parser 3.0 series issues to also include some rewriter tests.",
    "head_branch": "hmdne/parser30-add-missing-rewriter-tests",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2222 from opal/hmdne/parser30-add-missing-rewriter-tests\n\nParser 3.0: Add missing tests for forward_args and numblocks rewriters"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fc6d6ca63ac8d87eaea",
    "number": 2221,
    "body": "This pull request is on top of #2220 and references discussion #2213.\r\n\r\nThis is also my first attempt at modifying the nodes, so it should be seen mostly as an experiment. It implements a CoffeeScript idiom of handling async/await.\r\n\r\n```ruby\r\nrequire 'promise'\r\ndef sleep(s)\r\n  Promise.new do |p|\r\n    `setTimeout(#{p.method(:resolve).to_proc}, #{s}*1000)`\r\n  end\r\nend\r\n\r\ndef fun_with_await\r\n  puts :hi\r\n  sleep(1).await\r\n  puts :ho\r\n  sleep(1).await\r\n  puts :hi\r\nend\r\n\r\nfun_with_await\r\n```",
    "head_branch": "hmdne/async",
    "is_a_fork": false,
    "comments": [
      "As of now, await in global context is working (though not recommended - also you need to run it with --no-exit then). As for now, no support inside modules/classes (also wouldn't be recommended). There are a few edge cases where async/await isn't propagated (mostly related to nested `(function(){})()` calls) - if this happens, you will get an error suggesting that there's a missing identifier \"await\".\r\n\r\nAlso, it seems like uglify doesn't like async/await.",
      "Oh and by the way, if you want to look what was needed to port minitest to async/await, see the last commit. It doesn't look like much, but if you miss something, the problems will propagate, functions won't get called, etc.",
      "Well, now we have minitest fixed! ...Except for strict mode. But then a lot of other things broke. But I think we are on a right track in general :D",
      "sleep will be a very useful method to debug await:\r\n\r\n```bash\r\n[user@localhost opal]# bin/opal -rawait <<< 'at_exit { puts 3 }; sleep(1).await; puts 1; sleep(2).await; puts 2; sleep(3).await'\r\nAwait functionality is a technology preview, which means it may change its behavior in the future unless this warning is removed. If you are interested in this part, please make sure you track the async/await/promises tag on Opal issues: https://github.com/opal/opal/issues?q=label%3Aasync%2Fawait%2Fpromises\r\nPromiseV2 is a technology preview, which means it may change its behavior in the future until this warning is removed. If you are interested in this part, please make sure you track the async/await/promises tag on Opal issues: https://github.com/opal/opal/issues?q=label%3Aasync%2Fawait%2Fpromises\r\n1\r\n2\r\n3\r\n[user@localhost opal]#\r\n```",
      "Let's consider it mostly ready, working and shielded (ie. ES8 code won't happen unless you specifically use #await).",
      "A message may be missed in commit logs, but: **await in top scope is now absolutely supported**",
      "I'm working on this btw. We decided that this feature should be disabled by default, but I'd like to extend this a little bit before merging. A proposal for a magic comment would be this:\r\n\r\n```\r\n# The default value, disables awaiting altogether\r\n# await: false\r\n# Enable #await\r\n# await: true\r\n# Enabled and also all methods ending with await/await!/await?/await= will await\r\n# await: suffix\r\n# Enabled and also some other method names will await:\r\n# await: sleep, gets, irb\r\n# Enabled, suffix and some other methods:\r\n# await: suffix, sleep, gets, irb\r\n```",
      "I very much appreciate this effort, absolutely fantastic!\r\n\r\nHowever i disagree with the syntax and the way of usage, because it seems i cant emulate that behaviour in matz ruby. I am thinking 'isomorphic environment' here or have to wrap code in `if RUBY_ENGINE ....`.\r\n\r\nI am referring to the usage shown here:\r\nhttps://github.com/opal/opal/blob/hmdne/async/test/nodejs/test_await.rb\r\n\r\nLet me comment in detail in the following posts.",
      "https://github.com/opal/opal/blob/4f57623519c3e52d93aea821b9ab15b8ca060e78/test/nodejs/test_await.rb#L8\r\n\r\nis showing a magic comment. That is ok, it doesnt hurt matz ruby and may enable opal compiler features.\r\n\r\nhttps://github.com/opal/opal/blob/4f57623519c3e52d93aea821b9ab15b8ca060e78/test/nodejs/test_await.rb#L9\r\n\r\nL9 is requiring a module, thats fine too, however, this module could by opal be made available for matz ruby too, to emulate or enable async behavior in matz ruby.\r\n\r\nThats in the same way true for Promises V1/V2\r\n\r\nPromise V1 is actually used server side by isomorfeus:\r\nhttps://github.com/isomorfeus/isomorfeus-project/blob/0cb85034f826f300a056e17290841f3152d682b9/isomorfeus-transport/lib/isomorfeus-transport.rb#L32\r\n\r\nPromise V2 should be available for matz ruby too.",
      "Now for the syntax. Matz ruby allows to mark methods, eg:\r\n```ruby\r\ndef aquire_world_domination\r\n  # code to ask Pinky and Brain for help\r\nend\r\n\r\nprivate :aquire_world_domination\r\n```\r\nThe same way async methods could me marked:\r\n```ruby\r\ndef aquire_world_domination\r\n  # code to ask Pinky and Brain for help\r\nend\r\n\r\nasync :aquire_world_domination\r\n```\r\nThis could be emulated by matz ruby simply by defining methods on Module class.",
      "for using those methods:\r\n```ruby\r\ndef ask_pinky_and_brain_for_help(severity)\r\n  # that must be async, of course\r\nend\r\nasync :ask_pinky_and_brain_for_help\r\n\r\ndef aquire_world_domination\r\n  await do\r\n     ask_pinky_and_brain_for_help(:urgent)\r\n  end\r\nend\r\nasync :aquire_world_domination\r\n```\r\nLooks more rubyish and can be emulated by Matz ruby.\r\nSo looking into: \r\n\r\nhttps://github.com/opal/opal/blob/4f57623519c3e52d93aea821b9ab15b8ca060e78/test/nodejs/test_await.rb#L132\r\n\r\nthis would then look like:\r\n\r\n```ruby\r\nawait { sleep(0.001) }\r\n```\r\nvs:\r\n```ruby\r\nsleep(0.001).__await__\r\n```\r\nWhat do you think? Would my proposal contradict implementation in any way?",
      "Unfortunately, that API isn't isomorphic and we can hardly do anything about it. We had a lot of talks about the design and we aren't closing anything, marking it still as experimental even after a merge. And I'm not really happy about this solution, but I think it's a step in the right direction.\r\n\r\nWe can create a shim library for Ruby that defines `__await__`, `each_await`, etc.\r\n\r\n`await { something }` is possible by just modifying the stdlib/async.rb, same with `await something` or `something.await` (the last one is supported) - provided that you `# await: await`\r\n\r\nWe can also abuse the magic comment to limit the number of calls that will need `__await__`.\r\n\r\n>`async :aquire_world_domination`\r\nI thought about it, but this nice syntax doesn't apply to blocks. Also, we have to know about what is async compile-time.\r\n\r\nAbout Promises server-side, PromiseV2 is mostly API compatible with PromiseV1 (it implements a few new methods). Implementing await on top of a Promise will require us to run on some kind of a reactor and/or Fibers",
      "I should add for clearity, with isomorphic i mean the extended version of isomorphic:\r\nnot just browser and node\r\nbut instead:\r\nbrowser, node and Matz ruby",
      "I got that point, but unfortunately isomorphism of this patchset is only happening if you are very careful. Since there's no concept of a Promise in the MRI, there's no simple mapping available for us. This patchset is mostly aimed at usecases like easy porting of software like RSpec in the world of Promises.\r\n\r\nAgain, the API of this and PromiseV2 is marked as experimental which means we will only need to support it for the Opal 1.3 timeline, later (Opal 1.4 / 2.0) we will be able to replace everything with a different implementation or extend and stabilize it."
    ],
    "commit_messages": [
      "Merge pull request #2221 from opal/hmdne/async\n\nAsync/await experiment"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fc7d6ca63ac8d87eaeb",
    "number": 2220,
    "body": "This commit is to reference discussions #2215 and #2213. This is a preliminary implementation of a bridged Promise. At this moment (and probably in the future) it doesn't implement all that the current Promise has. It's at the same time more and less powerful than the existing implementation.\r\n\r\nFixes #1942 \r\nFixes #1967 ",
    "head_branch": "hmdne/native-promises",
    "is_a_fork": false,
    "comments": [
      "Talking about a difference between what we have currently and what JS has:\r\n\r\n```js\r\n> a = 5; Promise.resolve(5).then(function() { a = 6; }); a\r\n5\r\n> a\r\n6\r\n> \r\n```\r\n\r\nWe can't check the state in the same tick, we need to wait one. In our current implementation:\r\n\r\n```ruby\r\n[user@localhost opal]# opal <<< 'require \"promise\"; a = 5; Promise.value(5).then { p([:in_prom, a = 6]) }; p [:out_code, a]'\r\n[\"in_prom\", 6]\r\n[\"out_code\", 6]\r\n[user@localhost opal]#\r\n```\r\n\r\nThe implementation I propose:\r\n\r\n```ruby\r\n[user@localhost opal]# bin/opal <<< 'require \"promise\"; a = 5; Promise.value(5).then { p([:in_prom, a = 6]) }; p [:out_code, a]'\r\n[\"out_code\", 5]\r\n[\"in_prom\", 6]\r\n[user@localhost opal]#\r\n```\r\n\r\nAs far as I know, mspec doesn't follow Promises (unlike rspec-opal) so tests like this won't work\r\n\r\n```ruby\r\n  it 'works after a when' do\r\n    x = 42\r\n\r\n    Promise.value(1).then {\r\n      Promise.when Promise.value(2), Promise.value(3)\r\n    }.trace {|a, b|\r\n      `console.log(#{[a,b]})`\r\n      x = a + b[0] + b[1]\r\n    }\r\n\r\n    x.should == 6\r\n  end\r\n```\r\n\r\nAnd I can't find any better option to make it work.",
      "Those minitest tests... pass, but what's hidden behind Promises (that is - most) isn't running. For that we need to get #2221 (which is on top of this PR). Due to that, the question is if we should concern this PR in separation, though it's mostly finalized already.",
      "I actually ported minitest to support async in the await commit series."
    ],
    "commit_messages": [
      "Merge pull request #2220 from opal/hmdne/native-promises\n\nReimplement Promise to make it bridged with JS native Promise"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fc8d6ca63ac8d87eaec",
    "number": 2219,
    "body": "I just found out that Javascript has Bignums. Well, so this is a very early experiment (no parser support yet)\r\n\r\n```ruby\r\n[user@localhost opal]# bin/opal-repl \r\n>> 2.to_bn + 2\r\n=> 4\r\n>> 2 + 2.to_bn\r\n=> 4\r\n>> 4.to_bn ** 4 ** 4\r\n=> 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084096\r\n>> 24 > 23.to_bn\r\n=> true\r\n>> 23 > 24.to_bn\r\n=> false\r\n>> 2.to_bn << 100\r\n=> 2535301200456458802993406410752\r\n>> -2.to_bn.abs\r\n=> 2\r\n>> 2.to_bn == 2\r\n=> true\r\n>> 2 == 2.to_bn\r\n=> true\r\n>> \r\n```\r\n\r\nSome Math operations work by coercing to Float.\r\n\r\n```ruby\r\n>> Math.sin(2.to_bn)\r\n=> 0.9092974268256817\r\n>> Math.sqrt(2.to_bn)\r\n=> 1.4142135623730951\r\n>> Math.asin(1.to_bn)\r\n=> 1.5707963267948966\r\n>> Math.sqrt(1000000000000000000.to_bn ** 2)\r\n=> 1000000000000000000\r\n>> Math.cbrt(1000000000000000000.to_bn ** 3)\r\n=> 1000000000000000000\r\n>> \r\n```\r\n\r\nFloat with Bignum...\r\n\r\n```ruby\r\n>> 2.to_bn + 2.2\r\n=> 4.2\r\n>> 2.2 + 2.to_bn\r\n=> 4.2\r\n>> (2.to_bn + 2).class\r\n=> Bignum\r\n>> (2.to_bn + 2.2).class\r\n=> Number\r\n>> \r\n```\r\n\r\nOther methods\r\n\r\n```ruby\r\n>> 2.to_bn.times { puts \"hi\" }\r\nhi\r\nhi\r\n=> 2\r\n>> \"1293849781234798123479812937847981239784978123984\".to_bn.to_json\r\n=> \"1293849781234798123479812937847981239784978123984\"\r\n>>\r\n```",
    "head_branch": "hmdne/bignum",
    "is_a_fork": false,
    "comments": [
      "Previous issues/prs related to Bignum support:\r\n\r\n#746, #862, #885",
      "(Continuing discussion from https://github.com/opal/opal/issues/2231)\r\n\r\n@martinvahi I have rebased and cleaned up a little this patch and ensured basic support of Matrix. I will likely need to work on it further., but in general it shouldn't be that complicated.\r\n\r\nNote the notes I made:\r\n\r\n```\r\n    Preliminary Bignum support\r\n    \r\n    This adds limited Bignum support for Opal.\r\n    - Unlike in recent Ruby, it provides a separate class for Bignum handling\r\n    - Unlike in Ruby, Integers are not automatically promoted to Bignum, you\r\n      need to manually call `#to_bn` on String (for big numbers) or Number\r\n      (for small numbers).\r\n    - To use it, you need to `require \"corelib/bignum\"`\r\n```\r\n\r\nTherefore, a number like `238923942893489389489234892894892983423894289489234` will be a Float. `238923942893489389489234892894892983423894289489234.to_bn` will be an approximate value. Only `\"238923942893489389489234892894892983423894289489234\".to_bn` will produce an exact value.\r\n\r\nAlso ensure you read the spec to note what's expected behavior: https://github.com/opal/opal/pull/2219/files#diff-b777712e47c483aa87f5f1d06974701a1287377c6992edd92f714659a59ec8f4\r\n\r\nYou can use this patch by adding the following to your Gemfile: `gem \"opal\", git: \"https://github.com/opal/opal\", ref: \"hmdne/bignum\"`. Or you can clone the repo: `git clone https://github.com/opal/opal; cd opal; git checkout hmdne/bignum` and use `gem \"opal\", path: \"path/to/cloned/repo/of/opal\"`. This patch will be merged in the future, so you will be able to switch to the `master` branch, or a release, once we also release it.\r\n\r\nKeep in mind this patch is experimental and may not cover all operations. In particular, if you get an error: `Cannot convert a BigInt value to a number` (note `BigInt` which is JavaScript name for the type), this should be considered a bug and likely there's some method that is missing from the implementation. Feel free to make patches.\r\n\r\nAlso, keep in mind, that mathematical operations in the `Math` module (like Math.sin or Math.sqrt) first convert an argument to Float, thereby losing precision. This is consistent with what Ruby does.",
      "(On a sidenote, while first working on this patch, I noted that the Numeric system of Ruby could allow to create some nice algebra library, with a syntax of let's say):\r\n\r\n```ruby\r\nAlgsys { var(:a) == 4 + var(:a)**2 }.solve(:a)\r\n```"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fc9d6ca63ac8d87eaed",
    "number": 2218,
    "body": "This fixes #2170, but also bring us closer to MRI otherwise.",
    "head_branch": "hmdne/securerandom-and-formatters",
    "is_a_fork": false,
    "comments": [
      "Can someone security conscious look at this code? Especially at this part https://github.com/opal/opal/pull/2218/files#diff-a9ce3be02847ca4980a871954401caf96f591528229776d33eb71c779ab0221aR39-R47 , because I'm unsure if that's the correct way of doing it"
    ],
    "commit_messages": [
      "Merge pull request #2218 from opal/hmdne/securerandom-and-formatters\n\nA proper SecureRandom support + Random::Formatter module"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fcad6ca63ac8d87eaee",
    "number": 2198,
    "body": "Fix #2197 and pass these test cases.\r\n\r\n```\r\n\"String#start_with? sets Regexp.last_match if it returns true\" # TypeError: no implicit conversion of Regexp into String\r\n\"String#start_with? supports regexps with ^ and $ modifiers\" # TypeError: no implicit conversion of Regexp into String\r\n\"String#start_with? supports regexps\" # TypeError: no implicit conversion of Regexp into String\r\n```",
    "head_branch": "enhance_string_start_with",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2198 from ysakasin/enhance_string_start_with\n\nImplement String#start_with with a regexp argument"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fcbd6ca63ac8d87eaef",
    "number": 2194,
    "body": "",
    "head_branch": "fix-bytes-strict-mode",
    "is_a_fork": true,
    "comments": [
      "@elia Thanks for your review, it should be OK now 😉 "
    ],
    "commit_messages": [
      "Merge pull request #2194 from Mogztter/fix-bytes-strict-mode\n\nFix String#bytes on strict mode"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fcbd6ca63ac8d87eaf0",
    "number": 2193,
    "body": "And fix module returning undefined instead of nil at the same time.\r\n\r\nFixes https://github.com/opal/opal/issues/2192",
    "head_branch": "elia/fix-module-return-value",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2193 from opal/elia/fix-module-return-value\n\nLet module and class nodes share more code"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fccd6ca63ac8d87eaf1",
    "number": 2191,
    "body": "This pull request fixes the behavior of `Number#to_i` to that of `Math.trunc()` of JavaScript.\r\n\r\nBefore the fix, `Number#to_i` with a huge number in exponential notation returns a small number due to `parseInt()` specification of JavaScript. `parseInt()` converts numbers to strings and then parses it. `parseInt()` doesn't support exponential notation.\r\n\r\nIf `parseInt()` encounters a character that is not a numeral in the specified radix, it ignores it and all succeeding characters and returns the integer value parsed up to that point.\r\n\r\n## e.g.\r\n```ruby\r\n# In Opal (before the fix)\r\n1504642339053716000000.to_s #=> \"1.504642339053716e+21\"\r\n1504642339053716000000.to_i #=> 1\r\n```\r\n\r\n## Reasons for adding unsupported filter\r\n\r\n- `Float#<=>`, `Integer#<=>`\r\n  -  It compare `Infinity` and `Float::MAX.to_i*2`. `Float::MAX.to_i*2` will be Infinity in Opal\r\n- `Time#yday`\r\n  - `with_timezone` helper is not working in Opal. It uses `ENV['TZ']`\r\n\r\n## Ref.\r\n- parseInt()\r\n  - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\r\n- Math.trunc()\r\n  - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc",
    "head_branch": "fix-number-to_i-with-huge-number",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2191 from ysakasin/fix-number-to_i-with-huge-number\n\nFix Number#to_i with huge number"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fcdd6ca63ac8d87eaf2",
    "number": 2190,
    "body": "_Just an additional commit over #2181 and #2183 by @rubys_ ",
    "head_branch": "elia/fix-finding-encoding-aliases",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2190 from opal/elia/fix-finding-encoding-aliases\n\nFix finding encoding aliases"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fced6ca63ac8d87eaf3",
    "number": 2188,
    "body": "",
    "head_branch": "fix-typo-concatendated",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Merge pull request #2188 from kachick/fix-typo-concatendated"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fcfd6ca63ac8d87eaf4",
    "number": 2187,
    "body": "Fix https://github.com/opal/opal/issues/1960",
    "head_branch": "hash-merge-takes-multiple-arguments",
    "is_a_fork": true,
    "comments": [
      "✅ Merged in 4d93700d5 with squashed commits and the changelog entry, thanks again!",
      "Thank you! 😄 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fd0d6ca63ac8d87eaf5",
    "number": 2186,
    "body": "",
    "head_branch": "fix-typo",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Merge pull request #2186 from kachick/fix-typo\n\nFix a typo in HACKING.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fd1d6ca63ac8d87eaf6",
    "number": 2184,
    "body": "Note 📝 \r\n---\r\n\r\nInitially I would like to check `arguments.length` in new `Array#-`, but the ruby/spec looks nothing  and given `arguments.length` always become `1`.\r\nChecked the current compiled code of\r\n\r\n```ruby\r\nclass Foo\r\n  def bar(arg1, arg2)\r\n    10 - arg1 - arg2 \r\n  end\r\n  \r\n  def -(arg1, arg2)\r\n    10 - arg1 - arg2 \r\n  end\r\nend\r\n\r\nfoo = Foo.new\r\n\r\np foo.bar(1, 2)\r\np foo.-(1, 2)\r\np foo.-(1)\r\np(foo - 1)\r\n```\r\n\r\nJust outputs `7`\r\n\r\n<img width=\"751\" alt=\"スクリーンショット 2021-02-27 20 06 27\" src=\"https://user-images.githubusercontent.com/1180335/109385480-89621200-7937-11eb-98b3-4360778043ee.png\">\r\n\r\n```javascript\r\n/* Generated by Opal 1.0.3 */\r\n(function(Opal) {\r\n  function $rb_minus(lhs, rhs) {\r\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\r\n  }\r\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, foo = nil;\r\n\r\n  Opal.add_stubs(['$-', '$new', '$p', '$bar']);\r\n  \r\n  (function($base, $super, $parent_nesting) {\r\n    var self = $klass($base, $super, 'Foo');\r\n\r\n    var $nesting = [self].concat($parent_nesting), $Foo_bar$1, $Foo_$minus$2;\r\n\r\n    \r\n    \r\n    Opal.def(self, '$bar', $Foo_bar$1 = function $$bar(arg1, arg2) {\r\n      var self = this;\r\n\r\n      return $rb_minus($rb_minus(10, arg1), arg2)\r\n    }, $Foo_bar$1.$$arity = 2);\r\n    return (Opal.def(self, '$-', $Foo_$minus$2 = function(arg1, arg2) {\r\n      var self = this;\r\n\r\n      return $rb_minus($rb_minus(10, arg1), arg2)\r\n    }, $Foo_$minus$2.$$arity = 2), nil) && '-';\r\n  })($nesting[0], null, $nesting);\r\n  foo = $$($nesting, 'Foo').$new();\r\n  self.$p(foo.$bar(1, 2));\r\n  self.$p($rb_minus(foo, 1, 2));\r\n  self.$p($rb_minus(foo, 1));\r\n  return self.$p($rb_minus(foo, 1));\r\n})(Opal);\r\n```\r\n\r\nRemoving `:-` from https://github.com/opal/opal/blob/53593f7a82377deedd2d8082a92efd9b6848f1e0/lib/opal/nodes/call.rb#L18-L19 fixes the `Array#-` behavior.\r\nBut I don't have confident it is desirable way or not.\r\nSo just fixed current bugs of Array#difference in this PR 😅 ",
    "head_branch": "fix-array-difference",
    "is_a_fork": true,
    "comments": [
      ">But I was also wondering if it would make sense to put the single-item implementation inside Array#- and let Array#difference iteratively use #-. In this way #-, which is the most commonly used would be faster and #differece would still be correct. What are your thoughts on this?\r\n\r\nHmm… it sounds reasonable way 🤔 ",
      "We merged #2237 instead of this, because of a wider scope we were able to cover. Thank you for your work, @kachick!",
      "Sorry for late reply 🙇‍♂️ Thank you!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fd2d6ca63ac8d87eaf7",
    "number": 2183,
    "body": "Also have set_encoding fail if encoding is not supported\r\n\r\nFixes #2181",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Merged as part of #2190 thanks for catching this @rubys!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fd3d6ca63ac8d87eaf8",
    "number": 2182,
    "body": "Ref #2180 ",
    "head_branch": "elia/fix-node-cli-runner",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2182 from opal/elia/fix-node-cli-runner\n\nFix node cli runner"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fd4d6ca63ac8d87eaf9",
    "number": 2178,
    "body": "Changed the year in the license and README.md.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "for next year's reference: there's also a year in opal/corelib/constants.rb, but I already fixed it before"
    ],
    "commit_messages": [
      "Merge pull request #2178 from MrBrain295/master\n\nNew year"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fd5d6ca63ac8d87eafa",
    "number": 2177,
    "body": "",
    "head_branch": "elia/prepare-for-1.1.rc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fd6d6ca63ac8d87eafb",
    "number": 2175,
    "body": "",
    "head_branch": "hmdne/fix-unicode-normalize",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2175 from opal/hmdne/fix-unicode-normalize\n\nFix String#unicode_normalize"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fd6d6ca63ac8d87eafc",
    "number": 2174,
    "body": "The rationale behind this is that we don't have a matching c_lexer for\r\nparser 3.0.0.0 and this warning can be misleading. It isn't code removal,\r\nas we may want to reenable this warning once c_lexer becomes compatible.",
    "head_branch": "hmdne/comment-c-lexer-warning",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2174 from opal/hmdne/comment-c-lexer-warning\n\nComment out the \"Failed to load WithCLexer, using pure Ruby lexer\" warning"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fd7d6ca63ac8d87eafd",
    "number": 2173,
    "body": "",
    "head_branch": "hmdne/create-roda-sprockets-documentation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2173 from opal/hmdne/create-roda-sprockets-documentation\n\nCreate Roda+Sprockets quickstart documentation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fd8d6ca63ac8d87eafe",
    "number": 2172,
    "body": "Tested on opal 1.0/1.1 and opal-sprockets 0.4.9/0.5.0",
    "head_branch": "hmdne/update-sinatra-documentation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2172 from opal/hmdne/update-sinatra-documentation\n\nUpdate Sinatra documentation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fd9d6ca63ac8d87eaff",
    "number": 2171,
    "body": "",
    "head_branch": "hmdne/update-unreleased-1.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2171 from hmdne/hmdne/update-unreleased-1.1\n\nPre-release UNRELEASED.md update"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fdad6ca63ac8d87eb00",
    "number": 2166,
    "body": "MRI defines it on Kernel (as we also do) and not on basic object.\r\n\r\nFixes #2164 ",
    "head_branch": "elia/basic_object_class",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2166 from opal/elia/basic_object_class\n\nRemove BasicObject#class"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fdbd6ca63ac8d87eb01",
    "number": 2161,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "I found this bug and decided to directly submit a PR with it instead of opening an issue. I hope that's ok",
      "```\r\n# bundle exec rake mspec_ruby_nodejs RUBYSPECS=true INVERT_RUNNING_MODE=true\r\n...\r\nExpected 4 examples to fail:\r\n  1) \"Time#strftime should be able to print the julian day with leading zeroes\"\r\n  2) \"Date#strftime should be able to print the julian day with leading zeroes\"\r\n```\r\n\r\nYou can remove those filters from `spec/filters` (so that we have 2 more passing MRI tests :) ). Otherwise, looks good to me.",
      "Those are a lot of \"known bugs\" O.O\r\n\r\nPR updated.",
      "Well, it's more like Opal will probably never be 100% bug-for-bug compatible with MRI and those are exceptions to the MRI's upstream test suite. I think we already pass like 3x more tests than we don't and I have ported some software from Ruby to Opal with almost no problem (except for the known issues with String, Regexp and C extensions), not to mention that most of those tests aren't actually checking for things that happen in the real code.\r\n\r\nAnyway I'm approving the review of this commit and if you have any other small changes, feel free to submit them in any way you like :)",
      "> I found this bug and decided to directly submit a PR with it instead of opening an issue. I hope that's ok\r\n\r\nDo this as much as you want! We love this approach :shipit: \r\n\r\n\r\n\r\n> Those are a lot of \"known bugs\" O.O\r\n\r\nAs @hmdne this is out of that's out of the whole ruby spec, in addition some of them are caused by technical limitations (file manipulation, threads, etc.), anyway you can consider it a playground 🤸‍♀️ 😄 ",
      "> Those are a lot of \"known bugs\" O.O\r\n\r\nThis was not meant as any kind of criticism, it was just genuine surprise.\r\n\r\nI've only come across opal because it's being used for 18xx.games and I've been developing there. Almost all the code is run both on native ruby (on the server) and in Opal (by the players). I think this is only the 2nd time I've come across any difference on their behaviour, so I didn't expect to see so many \"known\" ones (and that speaks for how big is the chunk that is already fully compatible)",
      "In summary: Thank you very much for the great project :)"
    ],
    "commit_messages": [
      "Merge pull request #2161 from daniel-sousa-me/master\n\nTime#strftime %j should be padded to width 3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fdcd6ca63ac8d87eb02",
    "number": 2160,
    "body": "Fixes https://github.com/opal/opal/issues/810\r\n\r\nI'm not too happy with this solution in terms of produced code, on the other hand maybe some `if` can be simplified into ternary or `&&`/`||`.\r\n\r\nI'll try to retain the simpler form when not needed before putting this into \"ready for review\".",
    "head_branch": "elia/and-or-next",
    "is_a_fork": false,
    "comments": [
      "I would suggest rewriting `and/or` as `if` only if the rhs is one of the `next/return/break` OR rhs.rhs is one of those, ad infinitum.",
      "@hmdne I thought about it and did some performance testing, and after all I think it's better to converge both and/or and if to a single optimized implementation. If we're able to use a ternary operator whenever it makes sense for both of them is a double win, moreover we'll need to support in logical operators everything that is available for if, in terms of _returnability_ and other features.\r\n\r\n@iliabylich you have any considerations on this or reasons not to do this? "
    ],
    "commit_messages": [
      "Merge pull request #2160 from opal/elia/and-or-next\n\nFix `call { true or next }` producing invalid js"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fddd6ca63ac8d87eb03",
    "number": 2159,
    "body": "The rationale for that is that if/else blocks already share the closure in JS (we don't output `let` variables at this time yet), so nothing is expected to break. Another rationale is that old code produced more code than needed, for example it created an empty\r\nelse block even if no else block was present, now the worst case scenario is adding an empty `nil`.\r\n\r\nThis commit fixes #1965.",
    "head_branch": "hmdne/ruby-engine-check-optimize",
    "is_a_fork": false,
    "comments": [
      "I think the original reason for not dropping the unused branch was local variables:\r\n\r\n```rb\r\nif RUBY_ENGINE == 'opal'\r\n  puts 'opal'\r\n  a = 1\r\nend\r\n\r\np a\r\n\r\nunless RUBY_ENGINE == 'opal'\r\n  puts 'not opal'\r\n  b = 1\r\nend\r\n\r\np b\r\n\r\n```\r\n\r\nThe code above will fail if the unused branch is dropped:\r\n\r\n```\r\nopal\r\n1\r\n/private/var/folders/qk/p0zjl56n0klfq3pkm0d2j1j00000gn/T/opal-nodejs-runner-20210131-94791-kpp0tl:23350\r\n  return self.$p(b);\r\n                 ^\r\n\r\nReferenceError: b is not defined\r\n```\r\n\r\nTo make this work we should at least initialize them with nil, but at that point I'm not sure it's still worth it.\r\n\r\nIn addition to that we might be better off relying on uglifyjs or similar which should be able to remove dead branches:\r\n\r\n<img width=\"741\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1051/106370818-095b8300-635e-11eb-99bf-2a8abf45cccd.png\">\r\n",
      "As far as I understand it currently, it's about (:begin) instructions being nested. I will investigate it further and maybe find some solution.",
      "OK so let me explain this problem in a better way. The branches are _already_ dropped so this bug happens already. Currently a code of this form:\r\n\r\n```ruby\r\nsomething\r\nif RUBY_ENGINE != 'opal'\r\n  do_some_work\r\nend\r\nsomething_else\r\n```\r\n\r\nis converted to:\r\n\r\n```ruby\r\nsomething\r\nif RUBY_ENGINE == 'opal'\r\n  nil\r\nelse\r\n  nil\r\nend\r\nsomething_else\r\n```\r\n\r\nany my patch changes the output to:\r\n\r\n```ruby\r\nsomething\r\nnil\r\nsomething_else\r\n```\r\n\r\nThe idea of using Uglify at a later step may be fine, but neither Uglify/Terser nor Google Closure Compiler won't optimize out this code - it shouldn't, because it doesn't know if RUBY_ENGINE won't change at runtime. The fact that this rewriter already exists is already used in the \"wild\" isomorphic code mostly for shielding requires - and if only for that reason, it's a very important macro (actually, the only macro in Opal if I recall correctly).",
      "@hmdne you're right, my main concern was with local variables rather than method calls but I just verified your example holds true even in that case:\r\n\r\n```rb\r\na = 1\r\nif RUBY_ENGINE != 'opal'\r\n  b = 2\r\nend\r\nc = 3\r\n\r\np [a,b,c]\r\n```\r\n\r\n```js\r\n/Users/elia/.asdf/shims/ruby -S opal -cEO -\r\n/* Generated by Opal 1.1.1 */\r\n(function(Opal) {\r\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $truthy = Opal.truthy, a = nil, c = nil;\r\n\r\n  Opal.add_stubs(['$!=', '$p']);\r\n  \r\n  a = 1;\r\n  if ($truthy($$($nesting, 'RUBY_ENGINE')['$!='](\"opal\"))) {\r\n    nil};\r\n  c = 3;\r\n  return self.$p([a, b, c]);\r\n})(Opal);\r\n```\r\n\r\nSo maybe we can even find a way to fix the semantics, but it's fine to merge this as long as we open an issue for fixing it later.",
      "I would say let's merge it for now and improve on it later. "
    ],
    "commit_messages": [
      "Merge pull request #2159 from opal/hmdne/ruby-engine-check-optimize\n\nOutput less code for opal_engine_check"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fded6ca63ac8d87eb04",
    "number": 2158,
    "body": "",
    "head_branch": "elia/update-ci-versions",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2158 from opal/elia/update-ci-versions\n\nUpdate CI Ruby versions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fdfd6ca63ac8d87eb05",
    "number": 2156,
    "body": "",
    "head_branch": "hmdne/parser30-version30",
    "is_a_fork": false,
    "comments": [
      "I rebase all my branches on top of this now."
    ],
    "commit_messages": [
      "Merge pull request #2156 from opal/hmdne/parser30-version30\n\nParser 3.0: Change the Ruby version to 3.0; update fails"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fe0d6ca63ac8d87eb06",
    "number": 2155,
    "body": "In this pull request, I'm combining 3 branches:\r\n* Parser 3.0: beginless & endless ranges (#2150)\r\n* Parser 3.0: methods (#2151)\r\n* Update ruby specs (#2154)\r\n\r\nWe are coming into a point that I will want to work on integration between those 3.",
    "head_branch": "hmdne/parser30-integration",
    "is_a_fork": false,
    "comments": [
      "I readded the individual commits to the respecting branches, only 0b9279b6dedc14d0cddfda321b05a1bced4cd426 remains to be cherry-picked."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fe1d6ca63ac8d87eb07",
    "number": 2154,
    "body": "",
    "head_branch": "elia/update-ruby-specs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2154 from opal/elia/update-ruby-specs\n\nUpdate ruby specs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fe2d6ca63ac8d87eb08",
    "number": 2153,
    "body": "Support 2.7 + 3.0 argument forwarding.\r\n\r\nNow instead of:\r\n\r\n```\r\ndef method_missing(meth, *args, **kwargs, &block)\r\n  send(:\"do_#{ meth }\", *args, **kwargs, &block)\r\nend\r\n```\r\n\r\nWe will be able to write:\r\n\r\n```\r\ndef method_missing(meth, ...)\r\n  send(:\"do_#{ meth }\", ...)\r\nend\r\n```\r\n\r\nWIP again due to tests not present yet.",
    "head_branch": "parser30-forward-args",
    "is_a_fork": true,
    "comments": [
      "Can you please add a spec for this rewriter, similar to the ones we have for the other ones?",
      "Done :)"
    ],
    "commit_messages": [
      "Merge pull request #2153 from hmdne/parser30-forward-args\n\nParser 3.0: Forward arguments support: def a(...); puts(...); end"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fe3d6ca63ac8d87eb09",
    "number": 2152,
    "body": "Preliminary kwnilarg (**nil) support. No checks are performed yet.",
    "head_branch": "parser30-kwnilargs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2152 from hmdne/parser30-kwnilargs\n\nParser 3.0: kwnilargs (**nil) support"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fe4d6ca63ac8d87eb0a",
    "number": 2151,
    "body": "Itself not related to the parser, but implements a few methods that were added between Ruby 2.6 and 3.0.",
    "head_branch": "parser30-methods",
    "is_a_fork": true,
    "comments": [
      "I will need to do a little bit of more work on this. But it seems good enough, of 700 fails added by a version change, this changeset removes 100 of them.",
      "> I will need to do a little bit of more work on this. But it seems good enough, of 700 fails added by a version change, this changeset removes 100 of them.\r\n\r\n@hmdne I'm always ok with splitting if you want to have the part of this that's already ok merged right away",
      "@elia If you see a problem to happen since some commit, we can split until that commit.\r\n\r\nWhat do you think about the new approach to the #clamp? I basically ported this: https://github.com/ruby/ruby/blob/master/compar.c#L222-L252 (but to Javascript this time) and I found out that the entire module can be simplified.",
      "By the way, this force-push is only changed from f1c0c4f onwards (not counting the squashes)."
    ],
    "commit_messages": [
      "Merge pull request #2151 from hmdne/parser30-methods\n\nParser 3.0: methods"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fe5d6ca63ac8d87eb0b",
    "number": 2150,
    "body": "This commit adds support for beginless and endless ranges as in `(..1)` and `(1..)`.\r\n\r\nI tried to test it to the best of my abilities, but Ruby specs are quite outdated as of now. So I mark it as a work in progress until those tests are updated.",
    "head_branch": "parser30-infinite-range",
    "is_a_fork": true,
    "comments": [
      "I added a commit 9b4e10c adding compiler tests btw"
    ],
    "commit_messages": [
      "Merge pull request #2150 from hmdne/parser30-infinite-range\n\nParser 3.0: Support beginless and endless ranges"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fe5d6ca63ac8d87eb0c",
    "number": 2149,
    "body": "This pull request depends on #2148.\r\n\r\nThis pull request implements a Ruby 2.7 syntax feature of numblocks by transforming an expression of this kind:\r\n\r\n```\r\nproc { _1 + _2 }\r\n```\r\n\r\nInto an expression of this kind:\r\n\r\n```\r\nproc { |_1, _2| _1 + _2 }\r\n```",
    "head_branch": "parser30-numblocks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2149 from hmdne/parser30-numblocks\n\nParser 3.0: numblocks support"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fe6d6ca63ac8d87eb0d",
    "number": 2148,
    "body": "This is rather an experimental branch to try implementing some Ruby 3.0 features with Opal.",
    "head_branch": "parser30",
    "is_a_fork": true,
    "comments": [
      "Wow, oneline methods worked just out-of-the-box\r\n\r\n```\r\n[user@localhost opal]# bundle exec opal -c <<< \"def test_oneline_methods = 6\" | grep -C4 test_oneline_methods\r\nFailed to load WithCLexer, using pure Ruby lexer\r\n})(Opal);\r\n\r\n/* Generated by Opal 1.0.0 */\r\n(function(Opal) {\r\n  var $test_oneline_methods$1, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;\r\n\r\n  return (Opal.def(self, '$test_oneline_methods', $test_oneline_methods$1 = function $$test_oneline_methods() {\r\n    var self = this;\r\n\r\n    return 6\r\n  }, $test_oneline_methods$1.$$arity = 0), nil) && 'test_oneline_methods'\r\n})(Opal);\r\n\r\n/* Generated by Opal 1.0.0 */\r\n(function(Opal) {\r\n[user@localhost opal]# \r\n```",
      "@iliabylich FYI we temporarily disabling `c_lexer` from the Gemfile, in order to update to parser v3, I'll try to update it later and reintroduce it once it's updated."
    ],
    "commit_messages": [
      "Merge pull request #2148 from hmdne/parser30\n\nChange parser to 3.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fe7d6ca63ac8d87eb0e",
    "number": 2145,
    "body": "Since this fix will require a lot of changes I want to make sure that we are on the same page.\r\n\r\nFor well-known attributes, we can declare symbols in `runtime.js`. For instance:\r\n\r\n```js\r\nvar $$id_s = Symbol('$$id')\r\n```\r\n\r\nThen, we can use this symbol to access a property on an object.\r\nI think we also need to 'export' the symbol:\r\n\r\n```js\r\nOpal.$$id_s = $$id_s\r\n```\r\n\r\nNote: the `_s` suffix is not necessarily needed. \r\n\r\nFor user-defined attributes, we should probably use a Map to store the symbols:\r\n\r\n```js\r\nfunction getPropertySymbol(propertyName) {\r\n  if (Opal.propertySymbols.has(propertyName)) {\r\n    return Opal.propertySymbols.get(propertyName)\r\n  }\r\n  const symbol = Symbol(propertyName)\r\n  Opal.propertySymbols.set(propertyName, symbol)\r\n  return symbol\r\n}\r\n```\r\n\r\nThis is \"mandatory\" if we want to call (Ruby) methods in JavaScript:\r\n\r\n```js\r\n// proposed\r\nconst doc = Opal.Asciidoctor.Document[Opal.$$new_s]('foo')\r\nconsole.log(doc[Opal.propertySymbols.get('$title')]())\r\n```\r\n\r\nFor reference, here's how we can (Ruby) methods in JavaScript today:\r\n```js\r\n// current\r\nconst doc = Opal.Asciidoctor.Document.$new('foo')\r\nconsole.log(doc.$title()) \r\n```\r\n\r\nAgain the naming is not definitive.\r\n\r\nAlternatively, we could assign the symbols on the Opal object, and use `Object.getOwnPropertySymbols()` to retrieve them.\r\n\r\n```js\r\nOpal[Symbol('$name')] = '' // we need to set a value but we won't use it\r\nconsole.log(Object.getOwnPropertySymbols(Opal)) // [Symbol('$name')]\r\n```\r\n\r\nref #2144",
    "head_branch": "symbol",
    "is_a_fork": true,
    "comments": [
      "@elia Could you please confirm (or not) that we are committed to this and give your opinion on the current implementation? I want to know if I should push forward this idea or not, thanks! :wink: ",
      "Is this on track to be merged?",
      "@Mogztter sorry for the delay on this, it's a big thing and I think we can surely pursue it, but not hastily. Looks much like the symbol tables of ruby and has surely good properties, I'm just worried about performance and the impact of such a change. Not that I wouldn't do it, but needs to be properly assessed with benchmarks and all of that.\r\n\r\nAdditionally this surely will require a major release, so we're targeting v2 at least. \r\n\r\nWould be difficult to generate some micro benchmarks on the `$id` change in this PR?",
      "> sorry for the delay on this\r\n\r\nNo worries, thanks for your feedback.\r\n\r\n> it's a big thing and I think we can surely pursue it, but not hastily. \r\n\r\nOK :+1: \r\n\r\n> Additionally this surely will require a major release, so we're targeting v2 at least.\r\n\r\nI agree, this will definitely require a major release :smile: \r\n\r\n> Would be difficult to generate some micro benchmarks on the $id change in this PR?\r\n\r\nI don't think so, I will give it a try.",
      "I cannot see any notable difference using the following benchmark code:\r\n\r\n**bm_object_id.rb**\r\n```rb\r\nBenchmark.ips do |x|\r\n  x.report('object_id') do\r\n    \"foo\".object_id\r\n    true.object_id\r\n    1.object_id\r\n    2.object_id\r\n    5.object_id\r\n  end\r\n\r\n  x.compare!\r\nend\r\n\r\n```\r\n\r\n##### Command\r\n\r\n```\r\n$ bundle exec opal --dynamic-require ignore --missing-require ignore -ropal/platform -ropal-parser -gbenchmark-ips -rbenchmark/ips -A benchmark-ips/bm_object_id.rb\r\n```\r\n\r\n##### master (Node v14.15.4)\r\n\r\n\r\n```\r\nWarming up --------------------------------------\r\n           object_id   107.018k i/100ms\r\nCalculating -------------------------------------\r\n           object_id      1.046M (± 3.4%) i/s -      5.244M in   5.018278s\r\n```\r\n\r\n```\r\nWarming up --------------------------------------\r\n           object_id   104.345k i/100ms\r\nCalculating -------------------------------------\r\n           object_id      1.035M (± 1.9%) i/s -      5.217M in   5.041630s\r\n```\r\n\r\n##### branch (Node v14.15.4)\r\n\r\n```\r\nWarming up --------------------------------------\r\n           object_id    94.928k i/100ms\r\nCalculating -------------------------------------\r\n           object_id      1.067M (± 5.2%) i/s -      5.316M in   4.999521s\r\n```\r\n\r\n```\r\nWarming up --------------------------------------\r\n           object_id   110.260k i/100ms\r\nCalculating -------------------------------------\r\n           object_id      1.101M (± 0.8%) i/s -      5.513M in   5.006067s\r\n```\r\n",
      "Just notice that you did add a benchmark in late 2018:\r\n\r\n`bm_js_symbols_vs_strings`\r\n```\r\nWarming up --------------------------------------\r\n       global symbol   572.856k i/100ms\r\n              symbol   662.695k i/100ms\r\n               ident   542.531k i/100ms\r\n              string   655.005k i/100ms\r\nCalculating -------------------------------------\r\n       global symbol      5.299M (± 7.6%) i/s -     26.351M in   5.003901s\r\n              symbol      6.149M (± 7.5%) i/s -     31.147M in   5.097281s\r\n               ident      6.228M (± 5.7%) i/s -     31.467M in   5.070651s\r\n              string      5.902M (±11.0%) i/s -     29.475M in   5.060506s\r\n\r\nComparison:\r\n               ident:  6227694.9 i/s\r\n              symbol:  6148707.8 i/s - same-ish: difference falls within error              \r\n              string:  5902396.3 i/s - same-ish: difference falls within error       \r\n       global symbol:  5298877.6 i/s - 1.18x  (± 0.00) slower\r\n````\r\n\r\nGlobal symbol seems a bit slower but otherwise performance are same-ish.",
      "@Mogztter I ran [a quick experiment](https://github.com/opal/opal/compare/elia/symbols-experiment) storing symbols in `Opal.$`, calling method doesn't work but this is how compiled code looks like:\r\n\r\n```rb\r\nopal:elia/symbols-experiment ⤑ bin/opal -e 'def asdf; 123; end; def qwer?;456; end; p [asdf, qwer?]' -cEO                                                         ~/C/opal\r\n/* Generated by Opal 1.1.0.rc1 */\r\n(function(Opal) {\r\n  var $asdf$1, $qwer$ques$2, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;\r\n\r\n  Opal.add_stubs(['$p', '$asdf', '$qwer?']);\r\n  \r\n  \r\n  Opal.def(self, Opal.$.asdf, $asdf$1 = function $$asdf() {\r\n    var self = this;\r\n\r\n    return 123\r\n  }, $asdf$1.$$arity = 0);\r\n  \r\n  Opal.def(self, Opal.$['qwer?'], $qwer$ques$2 = function() {\r\n    var self = this;\r\n\r\n    return 456\r\n  }, $qwer$ques$2.$$arity = 0);\r\n  return self[Opal.$.p]([self[Opal.$.asdf](), self[Opal.$['qwer?']]()]);\r\n})(Opal);\r\n```\r\n\r\nI also tried a variation on that benchmark to see how storing the symbol in a variable influenced performance, and basically there's no difference:\r\n\r\n```\r\n=== Files: benchmark-ips/bm_js_symbols_vs_strings.rb\r\nbundle exec opal --dynamic-require ignore --missing-require ignore -ropal/platform -gbenchmark-ips -rbenchmark/ips -A benchmark-ips/bm_js_symbols_vs_strings.rb\r\nWarming up --------------------------------------\r\n  live global symbol    89.663k i/100ms\r\nstored global symbol    92.726k i/100ms\r\n       stored symbol    95.003k i/100ms\r\n               ident    96.683k i/100ms\r\n              string    94.957k i/100ms\r\nCalculating -------------------------------------\r\n  live global symbol      6.806M (± 4.6%) i/s -     33.982M in   5.004508s\r\nstored global symbol      7.258M (± 3.4%) i/s -     36.256M in   5.001710s\r\n       stored symbol      7.158M (± 3.9%) i/s -     35.721M in   4.998628s\r\n               ident      7.569M (± 4.8%) i/s -     37.803M in   5.006197s\r\n              string      7.512M (± 4.6%) i/s -     37.508M in   5.004033s\r\n\r\nComparison:\r\n               ident:  7568828.8 i/s\r\n              string:  7511836.0 i/s - same-ish: difference falls within error\r\nstored global symbol:  7258142.5 i/s - same-ish: difference falls within error\r\n       stored symbol:  7158154.6 i/s - same-ish: difference falls within error\r\n  live global symbol:  6805995.8 i/s - 1.11x  slower\r\n```",
      "> I also tried a variation on that benchmark to see how storing the symbol in a variable influenced performance, and basically there's no difference:\r\n\r\nThat's a good news 👍\r\n\r\n>  I ran a quick experiment storing symbols in Opal.$, calling method doesn't work but this is how compiled code looks like:\r\n\r\nLooks good, I will extend your experiment 🤓\r\n",
      "Hi, I'm confused, why this change is needed, and why this code, which is more complicated and is quite unusual for JS (Symbols are very rarely used in JS):\r\n\r\n```JavaScript\r\n// proposed\r\nconst doc = Opal.Asciidoctor.Document[Opal.$$new_s]('foo')\r\nconsole.log(doc[Opal.propertySymbols.get('$title')]())\r\n```\r\n\r\nconsidered to be better than this plain and short JS:\r\n\r\n```JavaScript\r\n// current\r\nconst doc = Opal.Asciidoctor.Document.$new('foo')\r\nconsole.log(doc.$title()) \r\n```\r\n\r\nThe Opal <-> JS integration is important feature, and it should be simple and look and feel like plain, normal JS.",
      "You should read the issue to understand why this change is needed/proposed.\n\nhttps://github.com/opal/opal/issues/2144\n\nThe proposed syntax could be simplified/aliased to become much shorter/readable.\n\n",
      "Thanks, sorry I haven't noticed it's a pull request not an issue, I'll comment on the issue."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fe8d6ca63ac8d87eb0f",
    "number": 2143,
    "body": "Use yarn.lock and fix the cache keys",
    "head_branch": "elia/yarn-fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2143 from opal/elia/yarn-fix\n\nFix the yarn cache for the CI build"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fe9d6ca63ac8d87eb10",
    "number": 2141,
    "body": "Based on #2140 ",
    "head_branch": "implement-getbyte",
    "is_a_fork": true,
    "comments": [
      "@elia Done! I've also added a changelog :wink: "
    ],
    "commit_messages": [
      "Merge pull request #2141 from Mogztter/implement-getbyte\n\nImplement String#getbyte"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fead6ca63ac8d87eb11",
    "number": 2140,
    "body": "resolves #2138",
    "head_branch": "issue-2138-fix-string-bytes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2140 from Mogztter/issue-2138-fix-string-bytes\n\nCompliant UTF8 to bytes implementation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208febd6ca63ac8d87eb12",
    "number": 2139,
    "body": "Closes #2122 \r\n\r\n@hmdne @davispuh I put together both your solutions from #2122 and I think this shorter version will be equally effective with less changes, thanks for fixing this!\r\n",
    "head_branch": "elia/ppfix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2139 from opal/elia/ppfix\n\nFix Object#pretty_inspect"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fecd6ca63ac8d87eb13",
    "number": 2137,
    "body": "Thanks for all these years Travis!",
    "head_branch": "elia/github-actions",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2137 from opal/elia/github-actions\n\nSwitch to GitHub Actions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fedd6ca63ac8d87eb14",
    "number": 2133,
    "body": "Ensure to probably match multiple extensions so that it doesn't match `.rbenv`\r\n\r\nThis is a contribution from the [Interscript project](https://github.com/interscript) of [Ribose](https://github.com/riboseinc).",
    "head_branch": "interscript-fix-processor-match",
    "is_a_fork": true,
    "comments": [
      "Thanks for your review!",
      "For the record, this issue was originally encountered here: https://github.com/interscript/interscript/issues/592#issuecomment-717728361\r\n\r\nThanks!"
    ],
    "commit_messages": [
      "Merge pull request #2133 from interscript/interscript-fix-processor-match\n\nFix BuilderProcessors::Processor.handles for rbenv"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208feed6ca63ac8d87eb15",
    "number": 2132,
    "body": "This PR implements `Native` to behave both like a Module (as was before) and also like a Class which allows native objects to be extended as Ruby objects.\r\n\r\nConsider this example\r\n```ruby\r\nclass RubyWindow < Native(`window`)\r\n    def self.url\r\n        location.href\r\n    end\r\nend\r\n\r\nputs RubyWindow.url\r\n# https://github.com/opal/opal/\r\n```\r\n\r\nIn this way this PR also resolves #2113 and makes that `#send` and `#method` works.\r\n\r\n",
    "head_branch": "native",
    "is_a_fork": true,
    "comments": [
      "I'm closing this as we need to find a different approach to address this issue, feel free to ping me for reopening it 👍 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fefd6ca63ac8d87eb16",
    "number": 2130,
    "body": "### Command\r\n\r\n```\r\n$ bundle exec rake bench:ips FILE=benchmark-ips/bm_array_pop_1.rb\r\n```\r\n\r\n#### Before (Node 14)\r\n```\r\n=== Files: benchmark-ips/bm_array_pop_1.rb\r\nbundle exec opal --dynamic-require ignore --missing-require ignore -ropal/platform -gbenchmark-ips -rbenchmark/ips -A benchmark-ips/bm_array_pop_1.rb\r\nWarming up --------------------------------------\r\n              pop(1)    33.930k i/100ms\r\nCalculating -------------------------------------\r\n              pop(1)    552.367k (± 2.9%) i/s -      2.782M in   5.041536s\r\n```\r\n\r\n#### After (Node 14)\r\n\r\n```\r\n=== Files: benchmark-ips/bm_array_pop_1.rb\r\nbundle exec opal --dynamic-require ignore --missing-require ignore -ropal/platform -gbenchmark-ips -rbenchmark/ips -A benchmark-ips/bm_array_pop_1.rb\r\nWarming up --------------------------------------\r\n              pop(1)    41.379k i/100ms\r\nCalculating -------------------------------------\r\n              pop(1)    803.658k (± 4.9%) i/s -      4.014M in   5.007475s\r\n```\r\n\r\n### Summary\r\n\r\nWith this change, the code is now ~1.4x times faster.\r\n",
    "head_branch": "perf-pop-1",
    "is_a_fork": true,
    "comments": [
      "Thanks :+1: "
    ],
    "commit_messages": [
      "Merge pull request #2130 from Mogztter/perf-pop-1\n\nFast path for Array#pop(1)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ff0d6ca63ac8d87eb17",
    "number": 2127,
    "body": "Currently if you'll try to bridge objects with immutable prototype (eg. window, Math) it will fail with\r\n```\r\nTypeError: can't set prototype of this object\r\n```\r\nThis PR improves it so it will raise Ruby exception.\r\n\r\nAlso allow same object to be extended multiple times.\r\n",
    "head_branch": "bridge",
    "is_a_fork": true,
    "comments": [
      "Further discussion will be needed for this PR, as maybe allowing for multiple bridges is not the best idea."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ff1d6ca63ac8d87eb18",
    "number": 2123,
    "body": "While trying to do #2114 I found this bug that\r\n```ruby\r\nclass TestClass < BasicObject.new\r\nend\r\n```\r\n\r\nThis fails with `Uncaught TypeError: can't convert undefined to object` but it should raise error `TypeError: superclass must be a Class (BasicObject given)` like Ruby does.\r\n\r\nNote that `Class.new(BasicObject.new)` works correctly.\r\nIn Ruby specs there is test for `Class.new` but not for `class Class < superclass` so they were passing, but I added such test aswell ruby/spec#792\r\n",
    "head_branch": "class",
    "is_a_fork": true,
    "comments": [
      "@davispuh I amended the commit to get rid of the linting issue"
    ],
    "commit_messages": [
      "Merge pull request #2123 from davispuh/class\n\nFix `class Class < superclass` for invalid superclass"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ff2d6ca63ac8d87eb19",
    "number": 2122,
    "body": "Before this commit it threw an error, because it tried to use String#<<.\r\n\r\nIt caused the mspec_opal_nodejs tests to fail with a wrong error, like:\r\n\r\n```\r\n  1. String #gsub works well with zero-length matches\r\n\r\n    NotImplementedError: String#<< not supported. Mutable String methods are not supported in Opal.\r\n    NotImplementedError: String#<< not supported. Mutable String methods are not supported in Opal.\r\n  from corelib/runtime.js:1729:5:in `Opal.send2'\r\n  from corelib/runtime.js:1719:5:in `Opal.send'\r\n  from corelib/error.rb:28:5:in `new'\r\n  from corelib/kernel.rb:535:23:in `exception'\r\n  from corelib/unsupported.rb:31:5:in `raise'\r\n  from prettyprint.rb:182:7:in `<<'\r\n  from prettyprint.rb:250:5:in `text'\r\n  from corelib/runtime.js:1729:5:in `Opal.send2'\r\n  from corelib/runtime.js:1719:5:in `Opal.send'\r\n  from pp.rb:166:9:in `group'\r\n```",
    "head_branch": "ppfix",
    "is_a_fork": true,
    "comments": [
      "Wish I saw this earlier :D also hit this same issue and worked on fixing it.\r\nMy solution is\r\n```diff\r\ndiff --git a/stdlib/pp.rb b/stdlib/pp.rb\r\nindex 5b776b0e..af8ae364 100644\r\n--- a/stdlib/pp.rb\r\n+++ b/stdlib/pp.rb\r\n@@ -4,6 +4,7 @@\r\nrequire 'thread'\r\n\r\nrequire 'prettyprint'\r\n+require 'stringio'\r\n\r\n##\r\n# A pretty-printer for Ruby objects.\r\n@@ -76,7 +77,7 @@ class PP < PrettyPrint\r\nq.guard_inspect_key {q.pp obj}\r\nq.flush\r\n#$pp = q\r\n-    out << \"\\n\"\r\n+    (out << \"\\n\").string\r\nend\r\n\r\n# Outputs +obj+ to +out+ like PP.pp but with no indent and\r\n@@ -87,7 +88,7 @@ class PP < PrettyPrint\r\nq = SingleLine.new(out)\r\nq.guard_inspect_key {q.pp obj}\r\nq.flush\r\n-    out\r\n+    out.string\r\nend\r\n\r\n# :stopdoc:\r\n@@ -584,7 +585,7 @@ module Kernel\r\n#\r\n# See the PP module for more information.\r\ndef pretty_inspect\r\n-    PP.pp(self, ''.dup)\r\n+    PP.pp(self, StringIO.new).to_s\r\nend\r\n\r\n# prints arguments in pretty form.\r\ndiff --git a/stdlib/prettyprint.rb b/stdlib/prettyprint.rb\r\nindex 2a3ca90d..6664572b 100644\r\n--- a/stdlib/prettyprint.rb\r\n+++ b/stdlib/prettyprint.rb\r\n@@ -31,6 +31,8 @@\r\n# == Author\r\n# Tanaka Akira <akr@fsij.org>\r\n#\r\n+require 'stringio'\r\n+\r\nclass PrettyPrint\r\n\r\n# This is a convenience method which is same as follows:\r\n@@ -42,11 +44,11 @@ class PrettyPrint\r\n#     output\r\n#   end\r\n#\r\n-  def PrettyPrint.format(output=''.dup, maxwidth=79, newline=\"\\n\", genspace=lambda {|n| ' ' * n})\r\n+  def PrettyPrint.format(output=StringIO.new, maxwidth=79, newline=\"\\n\", genspace=lambda {|n| ' ' * n})\r\nq = PrettyPrint.new(output, maxwidth, newline, &genspace)\r\nyield q\r\nq.flush\r\n-    output\r\n+    output.string\r\nend\r\n\r\n# This is similar to PrettyPrint::format but the result has no breaks.\r\n@@ -56,10 +58,10 @@ class PrettyPrint\r\n# The invocation of +breakable+ in the block doesn't break a line and is\r\n# treated as just an invocation of +text+.\r\n#\r\n-  def PrettyPrint.singleline_format(output=''.dup, maxwidth=nil, newline=nil, genspace=nil)\r\n+  def PrettyPrint.singleline_format(output=StringIO.new, maxwidth=nil, newline=nil, genspace=nil)\r\nq = SingleLine.new(output)\r\nyield q\r\n-    output\r\n+    output.string\r\nend\r\n\r\n# Creates a buffer for pretty printing.\r\n@@ -79,7 +81,7 @@ class PrettyPrint\r\n# The block is used to generate spaces. {|width| ' ' * width} is used if it\r\n# is not given.\r\n#\r\n-  def initialize(output=''.dup, maxwidth=79, newline=\"\\n\", &genspace)\r\n+  def initialize(output=StringIO.new, maxwidth=79, newline=\"\\n\", &genspace)\r\n@output = output\r\n@maxwidth = maxwidth\r\n@newline = newline\r\n```\r\n",
      "@davispuh Your solution may be better, mine failed some tests.",
      "@hmdne @davispuh if you find [the PR I merged](https://github.com/opal/opal/pull/2139) is not working properly please reopen this or another issue/PR (I based the fix on how MSpec is using pretty_print)"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ff3d6ca63ac8d87eb1a",
    "number": 2121,
    "body": " ```\r\n     expect(\"test\".gsub(/$/, '2')).to eq \"test2\"\r\n```\r\n\r\nBefore this commit it was \"2test\".",
    "head_branch": "gsubfix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2121 from hmdne/gsubfix\n\nFix a zero-length regexp match bug"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ff4d6ca63ac8d87eb1b",
    "number": 2120,
    "body": "The short rationale behind it is that for now it's impossible to\r\nrequire opal libraries like opal-browser (close to impossible - it\r\nneeds Gem paths) or opal-erubi (impossible, because it needs to\r\nmodify the compiler context to support .erubi files).\r\n\r\nThe longer rationale is that opal-rspec depends on Opal::CLI. We\r\ncan't test opal-webassembly due to that.",
    "head_branch": "rbrequires",
    "is_a_fork": true,
    "comments": [
      "A small request: can this be backported into the Opal 1.0 series? This will help me improve the documentation on some gems I manage.",
      "I just found out it's not necessarily true about testing. Still I think it would be a good addition, so one could do something like:\r\n\r\n`opal -qopal-browser -ropal-browser -c my_script.rb`",
      "There is an `opal-build` command which actually has an `-r` switch which does what this proposed `-q` switch does. I don't know if having two commands doing actually mostly the same thing is really beneficial, but so be it :D."
    ],
    "commit_messages": [
      "Merge pull request #2120 from hmdne/rbrequires\n\nAdd --rbrequire (-q) option to opal cmdline tool"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ff4d6ca63ac8d87eb1c",
    "number": 2117,
    "body": "#### Reasoning\r\n\r\n```js\r\nBuffer.byteLength('foo') // 3\r\nBuffer.byteLength('écrire') // 7\r\n\r\n'foo'.$bytesize() // should be 3 not 6\r\n```\r\n\r\nI've been able to enable 22 specs :tada: \r\nMost notably the `String#bytesize` method is now working as expected.\r\n\r\nOn the other hand, I had to disable 2 specs, one on `String#intern` and another one on `String#to_sym`.\r\nBut if you take a closer look, they were working by luck because the value of the `encoding` attribute on String primitive was UTF-16LE.\r\nIn fact, the method `String#to_sym` was always returning a UTF-16LE Symbol even when the String was not a UTF-16LE encoded String.\r\n\r\n#### Implementation\r\n\r\nThe method `force_encoding` should only update the `encoding` attribute but it should not modify how the string is encoded. As a result, the methods `bytesize` and `each_byte` should not rely on the `encoding` attribute.\r\n\r\nI've introduced an \"internal encoding\" that will be updated when `encode` is called (but not when `force_encoding` is called). The `bytesize` and `each_byte` now rely on the \"internal encoding\" instead of the \"encoding\" attribute.\r\n\r\n\r\n/cc @mojavelinux",
    "head_branch": "default-encoding-utf8",
    "is_a_fork": true,
    "comments": [
      "This is a very good idea and a good step towards more Ruby compatibility.\r\n\r\nI am (very slowly) preparing a patch for improving compatibility with Ruby marshals. This will come in handy and make a lot more tests pass.",
      "@elia Do you have an opinion on it?",
      "> thanks for fixing this, can you rebase this on master? (I was able to do that myself)\r\n\r\nThanks!\r\n`bundle install` seems to be failing on CI/GitHub Actions. I forced a new build maybe it's an intermittent failure, will see...\r\n\r\nEDIT: I found the root cause: https://github.com/rubyjs/libv8/issues/310\r\n\r\n> Ugh, think it's because bundler 2.2 has just come out, and it's fetching the build-from-source gem rather than the prepackaged binary."
    ],
    "commit_messages": [
      "Merge pull request #2117 from Mogztter/default-encoding-utf8\n\nJavaScript engines are using UTF-16 internally but String are UTF-8 encoded by default"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ff5d6ca63ac8d87eb1d",
    "number": 2116,
    "body": "### Command\r\n\r\n```\r\n$ bundle exec rake bench:ips FILE=benchmark-ips/bm_array_unshift.rb\r\n```\r\n\r\n### Before\r\n\r\n#### Node 10\r\n\r\n```\r\n=== Files: benchmark-ips/bm_array_unshift.rb\r\nbundle exec opal --dynamic-require ignore --missing-require ignore -ropal/platform -gbenchmark-ips -rbenchmark/ips -A benchmark-ips/bm_array_unshift.rb\r\nWarming up --------------------------------------\r\n             unshift    23.351k i/100ms\r\nCalculating -------------------------------------\r\n             unshift    373.961k (± 2.3%) i/s -      1.891M in   5.060583s\r\n```\r\n\r\n#### Node 14\r\n\r\n```\r\n=== Files: benchmark-ips/bm_array_unshift.rb\r\nbundle exec opal --dynamic-require ignore --missing-require ignore -ropal/platform -gbenchmark-ips -rbenchmark/ips -A benchmark-ips/bm_array_unshift.rb\r\nWarming up --------------------------------------\r\n             unshift   698.000  i/100ms\r\nCalculating -------------------------------------\r\n             unshift      7.188k (± 0.7%) i/s -     36.296k in   5.049684s\r\n```\r\n\r\n### After\r\n\r\n#### Node 10\r\n\r\n```\r\n=== Files: benchmark-ips/bm_array_unshift.rb\r\nbundle exec opal --dynamic-require ignore --missing-require ignore -ropal/platform -gbenchmark-ips -rbenchmark/ips -A benchmark-ips/bm_array_unshift.rb\r\nWarming up --------------------------------------\r\n             unshift    12.904k i/100ms\r\nCalculating -------------------------------------\r\n             unshift    187.988k (± 1.8%) i/s -    941.992k in   5.012631s\r\n```\r\n\r\n#### Node 14\r\n\r\n```\r\n=== Files: benchmark-ips/bm_array_unshift.rb\r\nbundle exec opal --dynamic-require ignore --missing-require ignore -ropal/platform -gbenchmark-ips -rbenchmark/ips -A benchmark-ips/bm_array_unshift.rb\r\nWarming up --------------------------------------\r\n             unshift    19.317k i/100ms\r\nCalculating -------------------------------------\r\n             unshift    247.057k (± 1.7%) i/s -      1.236M in   5.005546s\r\n```\r\n\r\n### Summary\r\n\r\nWith this change, the code is now 1.98x times slower when using Node 10 but 34.37x times faster when using Node 14.\r\n\r\nWe cannot beat the highly optimized code produced by v8 pre 7.1 (Node 10) but the code is now \"only\" 1.5x times slower when using a recent version of v8/Node.\r\n\r\n",
    "head_branch": "perf-unshift",
    "is_a_fork": true,
    "comments": [
      "@elia Your code is more elegant but slightly slower on several `list` lengths and `elems` lengths.\r\nThe best-case scenario for your implementation is when the `list` is small (10 elements) and there are a few elements to unshift (10 elements).\r\n\r\nHere's a comparison with a few variations on the `list` lengths and `elems` lengths.\r\n\r\n\r\nThe following variation is the best-case scenario for your implementation:\r\n\r\n```\r\nlist.length = 10\r\nelems.length = 10\r\n```\r\n\r\n| Round | Array#unshift (base) | unshiftOne | unshiftAll (elia)  | unshiftAll (mogztter) |\r\n| -- | -- | -- | -- | -- |\r\n| 1 | 115,111 ops/sec<br/> ±0.55%<br/> (95 runs sampled) | 1,780,182 ops/sec<br/> ±2.44%<br/> (87 runs sampled) | 3,654,839 ops/sec :star: <br/> ±1.56% <br/>(92 runs sampled)  | 2,593,891 ops/sec<br/> ±1.16%<br/> (91 runs sampled)\r\n| 2 | 111,308 ops/sec <br/>±1.69%<br/> (88 runs sampled) | 1,932,104 ops/sec<br/> ±0.51%<br/> (96 runs sampled) | 3,662,971 ops/sec :star: <br/> ±1.50% <br/>(88 runs sampled) | 2,695,324 ops/sec<br/> ±0.49% <br/>(92 runs sampled)\r\n| 3 | 116,501 ops/sec<br/> ±0.49% <br/>(93 runs sampled) | 1,913,965 ops/sec<br/> ±0.37% <br/>(92 runs sampled) | 3,750,125 ops/sec :star: <br/>±0.68% <br/>(93 runs sampled) | 2,620,791 ops/sec <br/>±0.69% <br/>(90 runs sampled)\r\n\r\n\r\n```\r\nlist.length = 100\r\nelems.length = 10\r\n```\r\n\r\n| Round | Array#unshift (base) | unshiftOne | unshiftAll (elia)  | unshiftAll (mogztter) |\r\n| -- | -- | -- | -- | -- |\r\n| 1 | 19,832 ops/sec <br/>±0.63% <br/>(96 runs sampled) | 632,687 ops/sec<br/> ±0.38% <br/>(96 runs sampled) | 687,256 ops/sec <br/>±0.45% <br/>(96 runs sampled) | 1,611,607 ops/sec :star:<br/> ±0.25%<br/> (97 runs sampled)\r\n| 2 | 19,258 ops/sec <br/>±0.27% <br/>(97 runs sampled) | 610,101 ops/sec <br/>±0.32% <br/>(92 runs sampled) | 673,388 ops/sec <br/>±0.26% <br/>(93 runs sampled) | 1,571,381 ops/sec :star: <br/>±0.43% <br/>(93 runs sampled)\r\n| 3 | 19,326 ops/sec <br/>±0.40% <br/>(92 runs sampled) | 621,284 ops/sec<br/> ±0.28% <br/>(91 runs sampled) | 672,708 ops/sec <br/>±0.32% <br/>(93 runs sampled)| 1,570,496 ops/sec :star: <br/> ±0.42%<br/> (93 runs sampled)\r\n\r\n```\r\nlist.length = 100\r\nelems.length = 1\r\n```\r\n\r\n| Round | Array#unshift (base) | unshiftOne | unshiftAll (elia)  | unshiftAll (mogztter) |\r\n| -- | -- | -- | -- | -- |\r\n| 1 | 187,987 ops/sec  <br/>±0.40% <br/> (95 runs sampled) | 3,031,309 ops/sec :star:  <br/> ±0.51% <br/> (92 runs sampled) | 863,585 ops/sec <br/> ±0.92% <br/> (92 runs sampled) | 3,027,611 ops/sec  <br/>±0.38% <br/> (92 runs sampled)\r\n| 2 | 184,408 ops/sec <br/> ±0.36% <br/> (93 runs sampled) | 2,968,972 ops/sec  <br/>±0.80% <br/> (94 runs sampled) | 883,129 ops/sec  <br/>±0.39% <br/> (96 runs sampled) | 3,013,784 ops/sec :star:  <br/> ±0.37% <br/> (92 runs sampled)\r\n| 3 | 186,859 ops/sec  <br/>±0.45% <br/>(93 runs sampled) | 3,028,500 ops/sec :star:  <br/> ±0.45% <br/> (91 runs sampled) | 894,202 ops/sec <br/> ±0.40%  <br/>(94 runs sampled) | 2,954,361 ops/sec  <br/>±0.41%  <br/>(91 runs sampled)\r\n\r\n\r\n```\r\nlist.length = 1001\r\nelems.length = 10\r\n```\r\n\r\n| Round | Array#unshift (base) | unshiftOne | unshiftAll (elia)  | unshiftAll (mogztter) |\r\n| -- | -- | -- | -- | -- |\r\n| 1 | 2,076 ops/sec <br/>±0.40% <br/> (95 runs sampled) | 91,423 ops/sec  <br/>±0.37% <br/> (95 runs sampled) | 73,452 ops/sec <br/> ±0.30%  <br/>(94 runs sampled) | 461,994 ops/sec :star: <br/> ±0.48%  <br/>(92 runs sampled)\r\n| 2 | 2,082 ops/sec  <br/>±0.35%  <br/>(94 runs sampled) | 92,391 ops/sec  <br/>±0.24% <br/> (96 runs sampled) | 76,563 ops/sec  <br/>±0.18%  <br/>(96 runs sampled) | 472,779 ops/sec :star: <br/> ±0.29% <br/> (92 runs sampled)\r\n| 3 | 2,064 ops/sec  <br/>±0.51%  <br/>(92 runs sampled) | 91,019 ops/sec  <br/>±0.58% <br/> (91 runs sampled) | 75,691 ops/sec  <br/>±0.33%  <br/>(94 runs sampled) | 464,082 ops/sec :star:  <br/>±0.44% <br/>(95 runs sampled)\r\n\r\nI don't explain why my implementation is significantly faster in this last case.\r\nMaybe my code is hitting an optimization.\r\n\r\n\r\nFor reference, here's my code: https://gist.github.com/Mogztter/1d0005cc40555ae79c9e5b0a295ba20a",
      "Thanks for the merge @hmdne.\r\nI get similar performance with the latest changes (using Node v14.15.4):\r\n\r\n```\r\narrayUnshift {array.length: 1001, elem.length: 10} x 1,851 ops/sec ±2.36% (86 runs sampled)\r\nunshiftOne {array.length: 1001, elem.length: 1} x 78,123 ops/sec ±1.91% (88 runs sampled)\r\nunshiftAllElia {array.length: 1001, elem.length: 10} x 62,608 ops/sec ±2.55% (87 runs sampled)\r\nunshiftAllHmdne {array.length: 1001, elem.length: 10} x 376,396 ops/sec ±2.76% (84 runs sampled)\r\nunshiftAllGuillaume {array.length: 1001, elem.length: 10} x 385,477 ops/sec ±1.87% (89 runs sampled)\r\n```\r\n\r\nDo you see any improvements on your side?",
      "My version is basically your `unshiftAllGuillaume` with a shortpath if an empty array is passed. I should have noted that though. I tried benchmarking some hybrid approach with either `unshiftOne` or `unshiftAllGuillaume`, but the gains from the first one were negligible (as shown by your benchmark)."
    ],
    "commit_messages": [
      "Merge pull request #2116 from Mogztter/perf-unshift\n\nImprove Array#unshift performance on v8 > 7.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ff6d6ca63ac8d87eb1e",
    "number": 2115,
    "body": "### Command\r\n\r\n```\r\n$ bundle exec rake bench:ips FILE=benchmark-ips/bm_array_shift.rb\r\n```\r\n\r\n### Before\r\n\r\n#### Node 10\r\n\r\n```\r\n=== Files: benchmark-ips/bm_array_shift.rb\r\nbundle exec opal --dynamic-require ignore --missing-require ignore -rnodejs -ropal/platform -gbenchmark-ips -rbenchmark/ips -A benchmark-ips/bm_array_shift.rb\r\n\"\"\r\nWarming up --------------------------------------\r\n        shift no arg    39.327k i/100ms\r\nCalculating -------------------------------------\r\n        shift no arg    979.605k (± 1.6%) i/s -      4.916M in   5.019468s\r\n```\r\n\r\n#### Node 12\r\n\r\n```\r\n\r\n=== Files: benchmark-ips/bm_array_shift.rb\r\nbundle exec opal --dynamic-require ignore --missing-require ignore -rnodejs -ropal/platform -gbenchmark-ips -rbenchmark/ips -A benchmark-ips/bm_array_shift.rb\r\n\"\"\r\nWarming up --------------------------------------\r\n        shift no arg     2.364k i/100ms\r\nCalculating -------------------------------------\r\n        shift no arg     24.879k (± 0.5%) i/s -    125.292k in   5.036277s\r\n```\r\n\r\n### After\r\n\r\n#### Node 10\r\n\r\n```\r\n=== Files: benchmark-ips/bm_array_shift.rb\r\nbundle exec opal --dynamic-require ignore --missing-require ignore -ropal/platform -gbenchmark-ips -rbenchmark/ips -A benchmark-ips/bm_array_shift.rb\r\nWarming up --------------------------------------\r\n        shift no arg    26.398k i/100ms\r\nCalculating -------------------------------------\r\n        shift no arg    449.226k (± 4.4%) i/s -      2.244M in   5.005441s\r\n```\r\n\r\n#### Node 12\r\n\r\n```\r\n=== Files: benchmark-ips/bm_array_shift.rb\r\nbundle exec opal --dynamic-require ignore --missing-require ignore -ropal/platform -gbenchmark-ips -rbenchmark/ips -A benchmark-ips/bm_array_shift.rb\r\nWarming up --------------------------------------\r\n        shift no arg    37.305k i/100ms\r\nCalculating -------------------------------------\r\n        shift no arg    611.658k (± 1.0%) i/s -      3.059M in   5.001669s\r\n```\r\n\r\n### Summary\r\n\r\nWith this change, the code is now 2.18x times slower when using Node 10 but 24.58x times faster when using Node 12.\r\n\r\nWe cannot beat the highly optimized code produced by v8 pre 7.1 (Node 10) but the code is now \"only\" 1.6x times slower when using a recent version of v8/Node.\r\n\r\nPlease note that the performance on Node 14 is roughly equivalent to Node 12.\r\n\r\n### Further improvement\r\n\r\nThe `Array#shift()` (JavaScript) function is also used in [`String#tr`](https://github.com/opal/opal/blob/53593f7a82377deedd2d8082a92efd9b6848f1e0/opal/corelib/string.rb#L1388) and [`String#tr_s`](https://github.com/opal/opal/blob/53593f7a82377deedd2d8082a92efd9b6848f1e0/opal/corelib/string.rb#L1533). It might be worth to replace this call by the optimized `shiftNoArg` function? In this case, where should I declare the `shiftNoArg` function? in `runtime.js`?\r\n\r\nI also found an optimization for `splice` when the second argument is `1` (ie. `list.splice(position, 1)`). I found 8 occurrences in the code where the second argument is explicitly 1. When a variable is used as the second argument it might be worth to check if the value is actually 1 to use the optimized code (I think it's only worth if the array is large enough but that means that we need to add an additional check that will slow down the execution).\r\n\r\n",
    "head_branch": "perf-splice",
    "is_a_fork": true,
    "comments": [
      "@elia I found a more generic implementation:\r\n\r\n```js\r\nfunction spliceGen (list, start, deleteCount) {\r\n  if (deleteCount <= 0) {\r\n    return\r\n  }\r\n  const length = list.length\r\n  for (var i = start, k = i + deleteCount; k < length; i += 1, k += 1)\r\n    list[i] = list[k]\r\n\r\n  list.length = i\r\n  // or:\r\n  //for (;i < length; i++)\r\n  //  list.pop()\r\n}\r\n```\r\n\r\nDepending on the list length, calling `list.pop()` can be faster than updating the list length. The goal is to remove \"trailing\" elements.\r\n",
      "@elia I will keep the focus of this pull request to just `Array#shift` and open a new pull request to generalize the usage of `spliceOne` / `spliceGen`.",
      "@elia I've added a changelog entry and rebased/squashed my work. Let me know if there's anything left to do."
    ],
    "commit_messages": [
      "Merge pull request #2115 from Mogztter/perf-splice\n\nImprove Array#shift performance on v8 > 7.1 (Node 12+)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ff7d6ca63ac8d87eb1f",
    "number": 2109,
    "body": "This is an ancient browser, I know, but it's the basis of many smartphone default browsers.",
    "head_branch": "chrome-38",
    "is_a_fork": true,
    "comments": [
      "`defineProperty` is supported since Chrome 5 according to MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#Browser_compatibility\r\n\r\nSo I'm not sure what you are trying to solve... Do you have a stacktrace? But in any case, I don't think that we want to support a 6 years old browser.",
      "This browser is used as WebView on some older (though still in use) smartphones. It's not about defineProperty, it's about just this particular use of defineProperty. I wouldn't call it a full support, just a prevention of a full failure. I can get a stacktrace, sure.\r\n\r\nhttps://hastebin.com/emimopifar\r\n\r\nMerging this little patch will reduce my local delta a little bit :)",
      "By the way it was tested on https://github.com/opal/opal/commit/53593f7a82377deedd2d8082a92efd9b6848f1e0",
      "And it all boils down to this:\r\n`Object.defineProperty(function(){}, \"length\", {value: 10})`",
      "By the way, to get a browser that fails this problem, I have the following podman/docker Dockerfile:\r\n\r\n```\r\nFROM debian:7\r\n\r\nCOPY sources.list /etc/apt/sources.list\r\n\r\nRUN apt-get -o Acquire::Check-Valid-Until=false update && \\\r\n    apt-get -y install tightvncserver chromium openbox psutils iproute rxvt-unicode iceweasel xfonts-base; \\\r\n    apt-get clean\r\n\r\nRUN echo 8736159e0a4d04d90f3de03f5d8b7d08 > /etc/machine-id; mkdir /root/.vnc; echo '' | vncpasswd -f > /root/.vnc/passwd; chmod 0700 /root/.vnc; chmod 0600 /root/.vnc/passwd\r\n\r\nENV USER=root\r\n\r\nCMD vncserver :0; DISPLAY=:0 openbox\r\nEXPOSE 5900/tcp\r\n```\r\n\r\nThis requires the following sources.list file:\r\n\r\n```\r\ndeb http://archive.debian.org/debian wheezy main contrib non-free\r\ndeb http://archive.debian.org/debian-security wheezy/updates main contrib non-free\r\n```\r\n\r\nAfterwards, one needs to build the image (replace podman with docker if you want to use docker):\r\n\r\n```\r\npodman build -t oldbrowsers/d7 .\r\n```\r\n\r\nAnd run it:\r\n\r\n```\r\npodman run -dt --rm --shm-size=512M -p 127.0.0.1:5900:5900 $DIR oldbrowsers/d7 $X\r\nsleep 1\r\nvncviewer :0\r\n```",
      "@hmdne I rebased this PR but for some reason it's failing on minitest, although it works locally, you have any clue on why this happens?",
      "@elia Just some entropy got between the cogwheels of the CI. I reran the tests and they work now."
    ],
    "commit_messages": [
      "Merge pull request #2109 from hmdne/chrome-38\n\nRestore compatibility with Chrome 38"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ff8d6ca63ac8d87eb20",
    "number": 2108,
    "body": "Don't pollute the global namespace unnecessarily.\r\n\r\nRelated to https://github.com/opal/opal-rails/issues/115",
    "head_branch": "elia/inline-mersenne-twister",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2108 from opal/elia/inline-mersenne-twister\n\nKeep the MersenneTwister implementation private"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ff9d6ca63ac8d87eb21",
    "number": 2106,
    "body": "Fixes https://github.com/opal/opal/issues/2104",
    "head_branch": "elia/fix-deleting-a-hash-key-with-a-string-object",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2106 from opal/elia/fix-deleting-a-hash-key-with-a-string-object\n\nEnsure string keys are converted to values in Hash#delete"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ffad6ca63ac8d87eb22",
    "number": 2100,
    "body": "This allows us to use the method with Numeric instances such as `Rational` and `BigDecimal`.",
    "head_branch": "fix_step",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2100 from takaram/fix_step\n\nRemove Number#step and implement Numeric#step"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ffbd6ca63ac8d87eb23",
    "number": 2098,
    "body": "Otherwise I get the following warning message:\r\n\r\n```\r\nwarning: ignore case doesn't match for \"\\\\/\"\r\n```\r\n\r\nFrom line: https://github.com/opal/opal/blob/3c8d93ea8b3ed12b4c49c51cc96d092570c9f64c/stdlib/pathname.rb#L113",
    "head_branch": "ignorecase-undefined",
    "is_a_fork": true,
    "comments": [
      "@elia I've restarted the build in Travis (the build was green but somehow the notification was \"lost\" and the status on GitHub has not been updated)",
      "Thanks :tada: :tada: :tada: "
    ],
    "commit_messages": [
      "Merge pull request #2098 from Mogztter/ignorecase-undefined\n\nMake sure that ignoreCase is either true or false (not undefined)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ffcd6ca63ac8d87eb24",
    "number": 2096,
    "body": "opal-sprockets adds some OpalLoaded variable to keep track of plain JS files loaded. It may be a good idea to make use of this variable. Loading those files threw an error before this commit, because those were loaded but Opal expected an Opal module.\r\n\r\n@janbiedermann This place may also be a good way to handle JS includes for Webpack. Seeing commit 0791b81 of your ES6 modules branch for 1.1, it looks like you came upon this problem as well.",
    "head_branch": "fix-opal-sprockets",
    "is_a_fork": true,
    "comments": [
      "https://github.com/opal/opal-sprockets/blob/master/lib/opal/sprockets.rb#L49",
      "I don't know if it's the best solution anyway. There are two calls here:\r\nhttps://github.com/opal/opal-sprockets/blob/master/lib/opal/sprockets.rb#L35\r\nLine 36 overrides line 35 if stubs are defined.\r\n\r\nThis could have caused opal/opal-rails#115.",
      "> I don't know if it's the best solution anyway. There are two calls here:\r\n> https://github.com/opal/opal-sprockets/blob/master/lib/opal/sprockets.rb#L35\r\n> Line 36 overrides line 35 if stubs are defined.\r\n> \r\n> This could have caused [opal/opal-rails#115](https://github.com/opal/opal-rails/issues/115).\r\n\r\nI think this is the underlying issue, I'll fix it right away.",
      "@hmdne 🤔 might not be that after all, line 36 includes `loaded` from line 35:\r\n\r\n`loaded = \"#{stubbed.to_json}.concat(#{loaded})\" if stubbed.any?`",
      "Right. And it will be the best to push this check in a different place."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ffdd6ca63ac8d87eb25",
    "number": 2093,
    "body": "Fixed `bin/setup` which fails when overcommit gem is not installed globally.",
    "head_branch": "overcommit_bundler",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2093 from takaram/overcommit_bundler\n\nMake overcommit avaliable without globally installed one"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208ffed6ca63ac8d87eb26",
    "number": 2090,
    "body": "",
    "head_branch": "elia/super",
    "is_a_fork": false,
    "comments": [
      "Rebased this and corrected `helper :super` to `helper :find_super`",
      "One question I have before I can do some review of this patchset... what's the difference between Super and Zuper/Zsuper? What's the logic between those names?"
    ],
    "commit_messages": [
      "Merge pull request #2090 from opal/elia/super\n\nSuper node cleanup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66208fffd6ca63ac8d87eb27",
    "number": 2089,
    "body": "After this PR numbers with a decimal part won't be recognized by either `Integer.===` nor `Opal.is_a()`.",
    "head_branch": "elia/better-integer-recognition",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2089 from opal/elia/better-integer-recognition\n\nBetter integer recognition"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209000d6ca63ac8d87eb28",
    "number": 2088,
    "body": "It is faster:\r\n\r\n```\r\nopal:master ⤑ bin/opal-benchmark-ips benchmark-ips/bm_puts_js_vs_ruby.rb 2> /dev/null                                                                  ~/C/opal\r\n=== Files: benchmark-ips/bm_puts_js_vs_ruby.rb\r\nWarming up --------------------------------------\r\n                  js     2.691k i/100ms\r\n                  rb     2.490k i/100ms\r\nCalculating -------------------------------------\r\n                  js     31.843k (± 5.1%) i/s -    158.769k in   5.002558s\r\n                  rb     26.077k (± 3.5%) i/s -    131.970k in   5.068055s\r\n\r\nComparison:\r\n                  js:    31843.2 i/s\r\n                  rb:    26076.7 i/s - 1.22x  slower\r\n\r\n```\r\n\r\n```rb\r\ndef STDERR.puts_js(*args)\r\n  %x{\r\n    for (var i = 0, ii = args.length; i < ii; i++) {\r\n      args[i] = #{String(`args[i]`).chomp}\r\n    }\r\n    self.$write(args.concat([nil]).join(#{$/}));\r\n  }\r\n  nil\r\nend\r\n\r\ndef STDERR.puts_rb(*args)\r\n  newline = $/\r\n  if args.empty?\r\n    write $/\r\n  else\r\n    write args.map { |arg| String(arg).chomp }.concat([nil]).join(newline)\r\n  end\r\n  nil\r\nend\r\n\r\nBenchmark.ips do |x|\r\n  x.report('js') do\r\n    STDERR.puts_js(1,2,3)\r\n  end\r\n\r\n  x.report('rb') do\r\n    STDERR.puts_rb(1,2,3)\r\n  end\r\n\r\n  x.compare!\r\nend\r\n```",
    "head_branch": "elia/implement-puts-in-js",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2088 from opal/elia/implement-puts-in-js\n\nImplement print and puts in js"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209001d6ca63ac8d87eb29",
    "number": 2087,
    "body": "There's a spec for this [here](https://github.com/ruby/spec/blob/875a09e47a6efdd45c94ddea8227fd0df72f65b0/core/kernel/sleep_spec.rb#L10), but given the confusion between Integer and Float due to JavaScript numbers it didn't catch the error.",
    "head_branch": "elia/sleep-returns-an-integer",
    "is_a_fork": false,
    "comments": [
      "Closing in favor of https://github.com/opal/opal/pull/2077"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209001d6ca63ac8d87eb2a",
    "number": 2086,
    "body": "",
    "head_branch": "elia/misc-fixes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2086 from opal/elia/misc-fixes\n\nMisc fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209002d6ca63ac8d87eb2b",
    "number": 2085,
    "body": "",
    "head_branch": "elia/fixnum-is-integer",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209003d6ca63ac8d87eb2c",
    "number": 2083,
    "body": "This PR replaces pp with the one of CRuby 2.7.0 (with minimal fixes for Opal).\r\n\r\nfix #2080\r\n\r\n### Demo\r\n\r\n```\r\n% bundle exec opal -r pp -e 'pp (1..9).map{|i| [i]*i }'\r\n[[1],\r\n [2, 2],\r\n [3, 3, 3],\r\n [4, 4, 4, 4],\r\n [5, 5, 5, 5, 5],\r\n [6, 6, 6, 6, 6, 6],\r\n [7, 7, 7, 7, 7, 7, 7],\r\n [8, 8, 8, 8, 8, 8, 8, 8],\r\n [9, 9, 9, 9, 9, 9, 9, 9, 9]]\r\n```",
    "head_branch": "prettyprint",
    "is_a_fork": true,
    "comments": [
      "> I see the value of keeping the diff from the original file minimal, that's why I would ask you to please generate a rubocop todo file out of the current failures and move its rules to the main .rubocop.yml so with a comment explaining that we want to stay close to the original.\r\n\r\nThere is \"Files that were copied from MRI as is\" section in the .rubocop.yml. How about just adding pp to this list(57c055b)?\r\n\r\n> Other than that I would replace stdlib/pp.rb directly in the first commit, is there a reason for not doing that?\r\n\r\nNot a big reason; I just wanted to emphasize I'm adding files, not modifying.",
      "Thanks! \r\n_Sorry for letting you wait so long_"
    ],
    "commit_messages": [
      "Merge pull request #2083 from yhara/prettyprint\n\nPort prettyprint to Opal"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209004d6ca63ac8d87eb2d",
    "number": 2079,
    "body": "Opal replaces `\\A` and `\\z` in regexp literal but it doesn't replace in `Regexp.new`.\r\nhttps://github.com/opal/opal/blob/178d9cd117444dfd4db6d4f6700b36838a8097d4/lib/opal/nodes/literal.rb#L191\r\n\r\nThis PR changes to replace `\\A` to `^` and `\\z` to `$` by `Regexp.new`",
    "head_branch": "fix_regexp_new",
    "is_a_fork": true,
    "comments": [
      "I see one problem with that, but I'm unsure how to solve it.\r\n\r\n```ruby\r\nit 'works with escape characters' do\r\n  /\\\\A/.should =~ '\\A'\r\n  /\\\\z/.should =~ '\\z'\r\n  /\\\\\\z/.should =~ 'hello\\\\'\r\nend\r\n```",
      "I think that is another issue. That is behavior of regular expression literal from before.This pull request changes only `Regexp.new`. (Now, `Regexp.new` has that bug. )\r\n\r\n(I know that problem, but I don't inform issue tracker because I have no idea how to solve it."
    ],
    "commit_messages": [
      "Merge pull request #2079 from ysakasin/fix_regexp_new\n\nFix Regexp.new, replace \\A to ^ and \\z to $"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209005d6ca63ac8d87eb2e",
    "number": 2077,
    "body": "Move the most used Opal helpers to the runtime for better performance and to treat them as core (there was some situations in which the helpers were loaded after they were needed).",
    "head_branch": "elia/remove-helpers-special-calls",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2077 from opal/elia/remove-helpers-special-calls\n\nMove some Opal helpers to the Runtime"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209006d6ca63ac8d87eb2f",
    "number": 2076,
    "body": "Remove Runtime helpers and replace calls to `Opal.falsy?` and `Opal.truthy?` with direct calls to local JS helpers `$falsy` and `$truthy`.\r\n\r\nThe use of helpers through magic comments fixes #419. ",
    "head_branch": "elia/remove-helpers-special-calls",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2076 from opal/elia/remove-helpers-special-calls\n\nRemove helpers special calls"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209007d6ca63ac8d87eb30",
    "number": 2075,
    "body": "",
    "head_branch": "elia/use-strict-on-corelib",
    "is_a_fork": false,
    "comments": [
      "I just rebased it onto the current master."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209008d6ca63ac8d87eb31",
    "number": 2074,
    "body": "_backport of #2073_\r\n\r\nJavaScript works with UTF-16/UCS-2 and the strings we're passing to\r\nthe lexer ar not UTF-8, so the lexer tries to unpack them as 8-bit\r\nchars, messing up the source ranges in which to look for pieces of\r\ncode and ultimately shifting all source lookups after having\r\nencountered a unicode string.\r\n\r\nE.g.:\r\n\r\n```rb\r\n  # the string '5' is reported at index 10 when using C*, 6 with U*\r\n  \"123️⃣45\".unpack('C*').index('5'.unpack('C*').first) # => 10\r\n  \"123️⃣45\".unpack('U*').index('5'.unpack('U*').first) # => 6\r\n```",
    "head_branch": "elia/fix-parsing-unicode-v1.0",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2074 from opal/elia/fix-parsing-unicode-v1.0\n\nFix parsing unicode on v1.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209009d6ca63ac8d87eb32",
    "number": 2073,
    "body": "JavaScript works with UTF-16/UCS-2 and the strings we're passing to\r\nthe lexer ar not UTF-8, so the lexer tries to unpack them as 8-bit\r\nchars, messing up the source ranges in which to look for pieces of\r\ncode and ultimately shifting all source lookups after having\r\nencountered a unicode string.\r\n\r\nE.g.:\r\n\r\n```rb\r\n  # the string '5' is reported at index 10 when using C*, 6 with U*\r\n  \"123️⃣45\".unpack('C*').index('5'.unpack('C*').first) # => 10\r\n  \"123️⃣45\".unpack('U*').index('5'.unpack('U*').first) # => 6\r\n```\r\n\r\nRef #2066 ",
    "head_branch": "elia/fix-parsing-unicode",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2073 from opal/elia/fix-parsing-unicode\n\nFix parsing unicode chars from Opal"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620900ad6ca63ac8d87eb33",
    "number": 2072,
    "body": "",
    "head_branch": "elia/external-encoding",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2072 from opal/elia/external-encoding\n\nSet the default external encoding to the current one"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620900bd6ca63ac8d87eb34",
    "number": 2071,
    "body": "",
    "head_branch": "elia/ruby-2.7-warnings",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2071 from opal/elia/ruby-2.7-warnings\n\nFix ruby 2.7 warnings"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620900cd6ca63ac8d87eb35",
    "number": 2070,
    "body": "",
    "head_branch": "elia/travis-order",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2070 from opal/elia/travis-order\n\nTravis updates"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620900dd6ca63ac8d87eb36",
    "number": 2069,
    "body": "Match CRuby behavior when exceptions are raised in the block and about\r\nwhen the array is updated.\r\n\r\nFixes #2067 ",
    "head_branch": "elia/fix-delete-if-keep-if",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2069 from opal/elia/fix-delete-if-keep-if\n\nFix Array keep_if, delete_if, reject!, select!"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620900ed6ca63ac8d87eb37",
    "number": 2065,
    "body": "Along with the recent changes to the node stacktrace this PR should be making the development experience both of opal itself and of opal apps much better.\r\n\r\nFixes #2068 ",
    "head_branch": "elia/kernel-caller",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2065 from opal/elia/kernel-caller\n\nAdd a generic implementation of Kernel#caller and #warn(uplevel:)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620900ed6ca63ac8d87eb38",
    "number": 2064,
    "body": "Along with the recent changes to the node stacktrace this PR should be making the development experience both of opal itself and of opal apps much better.",
    "head_branch": "elia/kernel-caller",
    "is_a_fork": false,
    "comments": [
      "Replaced by #2065 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620900fd6ca63ac8d87eb39",
    "number": 2063,
    "body": "This implementation should be good enough for browsers and node.\r\n\r\nAlong with the recent changes to the node stacktrace will be making the development experience both of opal itself and of opal apps much better.",
    "head_branch": "elia/kernel-caller",
    "is_a_fork": false,
    "comments": [
      "Replaced by #2064."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209010d6ca63ac8d87eb3a",
    "number": 2062,
    "body": "Fixes #2022 ",
    "head_branch": "elia/fix-interpolated-regexps",
    "is_a_fork": false,
    "comments": [
      "I wonder if it has a noticeable impact on performance when using interpolation on Regex with a String.\r\n\r\n```rb\r\na = 'a'\r\n /#{a}/\r\n```",
      "@Mogztter: the creation is surely slower than when we have no interpolation, but once created they're just the same\r\n\r\n\r\nOpal:\r\n```bash\r\n$ bin/opal-benchmark-ips benchmark-ips/bm_regexp_interpolation.rb\r\n=== Files: benchmark-ips/bm_regexp_interpolation.rb\r\nbundle exec opal --dynamic-require ignore --missing-require ignore -ropal/platform -gbenchmark-ips -rbenchmark/ips -A benchmark-ips/bm_regexp_interpolation.rb\r\nWarming up --------------------------------------\r\n               /aaa/   164.715k i/100ms\r\n          /a#{\"a\"}a/    93.981k i/100ms\r\n   a = \"a\"; /a#{a}a/    94.663k i/100ms\r\nCalculating -------------------------------------\r\n               /aaa/      6.996M (± 7.8%) i/s -     34.755M in   5.012718s\r\n          /a#{\"a\"}a/      1.782M (± 6.1%) i/s -      8.928M in   5.036842s\r\n   a = \"a\"; /a#{a}a/      1.848M (± 2.7%) i/s -      9.277M in   5.023521s\r\n\r\nComparison:\r\n               /aaa/:  6996063.8 i/s\r\n   a = \"a\"; /a#{a}a/:  1848476.3 i/s - 3.78x  slower\r\n          /a#{\"a\"}a/:  1781688.1 i/s - 3.93x  slower\r\n\r\nWarming up --------------------------------------\r\n            /aaa/ =~    59.839k i/100ms\r\n       /a#{\"a\"}a/ =~    71.483k i/100ms\r\na = \"a\"; /a#{a}a/ =~    70.914k i/100ms\r\nCalculating -------------------------------------\r\n            /aaa/ =~      1.187M (± 2.9%) i/s -      5.984M in   5.048046s\r\n       /a#{\"a\"}a/ =~      1.224M (± 2.5%) i/s -      6.148M in   5.026122s\r\na = \"a\"; /a#{a}a/ =~      1.221M (± 3.7%) i/s -      6.099M in   5.004769s\r\n\r\nComparison:\r\n       /a#{\"a\"}a/ =~:  1223955.1 i/s\r\na = \"a\"; /a#{a}a/ =~:  1220720.1 i/s - same-ish: difference falls within error\r\n            /aaa/ =~:  1186671.5 i/s - same-ish: difference falls within error\r\n```\r\n\r\nCRuby (for relative comparison):\r\n```\r\n$ ruby -rbenchmark/ips benchmark-ips/bm_regexp_interpolation.rb\r\nWarming up --------------------------------------\r\n               /aaa/   391.535k i/100ms\r\n          /a#{\"a\"}a/   429.345k i/100ms\r\n   a = \"a\"; /a#{a}a/    41.514k i/100ms\r\nCalculating -------------------------------------\r\n               /aaa/     27.121M (± 4.0%) i/s -    135.471M in   5.006103s\r\n          /a#{\"a\"}a/     27.160M (± 1.9%) i/s -    136.102M in   5.013058s\r\n   a = \"a\"; /a#{a}a/    458.023k (± 3.5%) i/s -      2.325M in   5.082358s\r\n\r\nComparison:\r\n          /a#{\"a\"}a/: 27160058.6 i/s\r\n               /aaa/: 27120564.0 i/s - same-ish: difference falls within error\r\n   a = \"a\"; /a#{a}a/:   458022.8 i/s - 59.30x  slower\r\n\r\nWarming up --------------------------------------\r\n            /aaa/ =~   224.853k i/100ms\r\n       /a#{\"a\"}a/ =~   211.478k i/100ms\r\na = \"a\"; /a#{a}a/ =~   227.103k i/100ms\r\nCalculating -------------------------------------\r\n            /aaa/ =~      4.276M (± 3.6%) i/s -     21.361M in   5.003739s\r\n       /a#{\"a\"}a/ =~      4.260M (± 1.7%) i/s -     21.359M in   5.015660s\r\na = \"a\"; /a#{a}a/ =~      4.289M (± 1.7%) i/s -     21.575M in   5.031720s\r\n\r\nComparison:\r\na = \"a\"; /a#{a}a/ =~:  4289006.6 i/s\r\n            /aaa/ =~:  4275877.9 i/s - same-ish: difference falls within error\r\n       /a#{\"a\"}a/ =~:  4259917.6 i/s - same-ish: difference falls within error\r\n```\r\n\r\nThe benchmark:\r\n\r\n```rb\r\nBenchmark.ips do |x|\r\n  x.report('/aaa/') do\r\n    /aaa/\r\n  end\r\n\r\n  x.report('/a#{\"a\"}a/') do\r\n    /a#{\"a\"}a/\r\n  end\r\n\r\n  a = \"a\"\r\n  x.report('a = \"a\"; /a#{a}a/') do\r\n    /a#{a}a/\r\n  end\r\n\r\n  x.compare!\r\nend\r\n\r\nBenchmark.ips do |x|\r\n  a1 = /aaa/\r\n  x.report('/aaa/ =~') do\r\n    a1 =~ 'aaa'\r\n  end\r\n\r\n  a2 = /a#{\"a\"}a/\r\n  x.report('/a#{\"a\"}a/ =~') do\r\n    a2 =~ 'aaa'\r\n  end\r\n\r\n  a = \"a\"\r\n  a3 = /a#{a}a/\r\n  x.report('a = \"a\"; /a#{a}a/ =~') do\r\n    a3 =~ 'aaa'\r\n  end\r\n\r\n  x.compare!\r\nend\r\n```",
      "Thanks for the benchmark, it looks good!\r\n"
    ],
    "commit_messages": [
      "Merge pull request #2062 from opal/elia/fix-interpolated-regexps\n\nFix Regexp interpolation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209011d6ca63ac8d87eb3b",
    "number": 2061,
    "body": "resolves #2060",
    "head_branch": "issue-2060-string-scanner-match",
    "is_a_fork": true,
    "comments": [
      "@elia Do you want me to fix the codeclimate issues?",
      "To be honest, I don't really see the code duplication... is that a bug?",
      "> Also can you change the commit message subject to just describe the change?\r\nYou can keep the \"Resolves\" in the commit description if you want +1\r\n\r\nSorry I'm so used to the Asciidoctor Git commit convention :sweat_smile: \r\nI've edited the commit subject and I've added an item in the CHANGELOG."
    ],
    "commit_messages": [
      "Merge pull request #2061 from Mogztter/issue-2060-string-scanner-match\n\nresolves #2060 set match on skip and scan_until"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209012d6ca63ac8d87eb3c",
    "number": 2058,
    "body": "Kernel#require was masked by Opal.require via Object#require.\r\nThis patch makes sure require is passed to Kernel#require, which can then be overwritten.\r\nOverwriting Kernel#require is used by the (opal-)zeitwerk autoloader.",
    "head_branch": "kernel_require",
    "is_a_fork": true,
    "comments": [
      "It causes recursion, so obviously i fixed some other place too, but i dont remember which at the moment. It does not cause recursion in es6_modules_1_1. Will figure out this later on.",
      "superseeded by #2323"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209013d6ca63ac8d87eb3d",
    "number": 2057,
    "body": "Remove useless code.",
    "head_branch": "continue_or_else",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209014d6ca63ac8d87eb3e",
    "number": 2056,
    "body": "This PR improves autoload support and makes most of the autoload specs pass (~40, 15 left to go).\r\n\r\nBehavior:\r\n- Compiler, when finding a autoload, adds file to require.\r\n- If specified is not found in the file system, compiler issues a warning.\r\n- Autoload is resolved at runtime.\r\n- `require_tree \"a_dir\", :autoload` will not require files at runtime, delegating it to a autoloader\r\n\r\n- Runtime const_get_name, const_lookup_nesting and const_lookup_ancestors check for autoloads and resolve them.\r\n- Module#const_missing no longer checks autoloads, because the runtime does it.\r\n- const.$$autoload moved to const.$$prototype.$$autoload\r\n\r\nSpecs:\r\n- Because ruby specs for autoload/module use dynamic file names, they won't work, as Opal can't resolve those at runtime.\r\n- So all ruby/core/module specs are copied to opal/core/module and adapted to use fixed file names for autoloads.\r\n- Copied specs are now blocked from running within ruby specs.\r\n- Some specs require the module code to be reevaluated on subsequent autoloads. This is solved in part by providing another autoload file (see opal/core/module/fixtures/autoload_callback_?_.rb and autoload_o_1.rb), but that does not work for other cases still left to do. This may need a better strategy.\r\n\r\nOther issues:\r\n- `defined? Bla::Foo::Bar` uses const_get for Bar, which triggers a autoload for Bar, which it should not. it should use const_defined? for Bar.\r\n- There is some code duplication left (duplication intentional for now for easier experimentation).\r\n- Also the autoload code needs some compaction (expansion intentional for now for easier experimentation).\r\n\r\nComments and suggestions how to improve further much appreciated 👍 \r\n\r\n",
    "head_branch": "modules_n_specs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209015d6ca63ac8d87eb3f",
    "number": 2054,
    "body": "Fixing typos",
    "head_branch": "tin_can_to_ton",
    "is_a_fork": true,
    "comments": [
      "Thanks! https://youtu.be/nxxSIX3fmmo?t=23 😄"
    ],
    "commit_messages": [
      "Merge pull request #2054 from janbiedermann/tin_can_to_ton\n\nMake the tin can a ton."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209016d6ca63ac8d87eb40",
    "number": 2053,
    "body": "Superseeds #1984 ",
    "head_branch": "module_inclusion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2053 from janbiedermann/module_inclusion\n\nModule inclusion bug fix with spec"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209017d6ca63ac8d87eb41",
    "number": 2052,
    "body": "",
    "head_branch": "runtime_unused_vars",
    "is_a_fork": true,
    "comments": [
      "No code is faster than _no code_! Thanks!"
    ],
    "commit_messages": [
      "Merge pull request #2052 from janbiedermann/runtime_unused_vars\n\nRemove unused variables from runtime.js"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209018d6ca63ac8d87eb42",
    "number": 2051,
    "body": "",
    "head_branch": "autoload_question_mark",
    "is_a_fork": true,
    "comments": [
      "Ill make another one, more comprehensive"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209018d6ca63ac8d87eb43",
    "number": 2050,
    "body": "As the title says, with enabled specs.",
    "head_branch": "securerandom_hex",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2050 from janbiedermann/securerandom_hex\n\nSecureRandom#hex(n)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209019d6ca63ac8d87eb44",
    "number": 2049,
    "body": "TracePoint support for the :class event\r\nhttps://ruby-doc.org/core-2.6/TracePoint.html\r\n\r\nHowever, in ruby, when passing the class to the block, the method .self is available, but not in Opal:\r\n\r\nRuby:\r\nhttps://github.com/fxn/zeitwerk/blob/ad26cb0521cfb88fd8fee687dca7eb10e4ccf1bc/lib/zeitwerk/explicit_namespace.rb#L62\r\n\r\nOpal:\r\nhttps://github.com/isomorfeus/opal-zeitwerk/blob/25d6dad02f9d4add101ca4e26220ca2a91bcea46/opal/zeitwerk/explicit_namespace.rb#L54\r\n\r\nOtherwise usage is just as in ruby:\r\nhttps://github.com/isomorfeus/opal-zeitwerk/blob/25d6dad02f9d4add101ca4e26220ca2a91bcea46/opal/zeitwerk/explicit_namespace.rb#L69",
    "head_branch": "tracepoint_class",
    "is_a_fork": true,
    "comments": [
      "I found the TracePoint  :class specs, only 2 of them, seems like i still need to adjust something ...",
      "Now correctly implemented with the one spec concerning the code running. `.self` properly working like in ruby. (I originally misunderstood what to pass to the event block.)\r\nNot sure what to do about the one line to much on code climate.",
      "I rebased this to the latest master",
      "This is ready for a final review and hopefully a merge to kickstart the v1.3 development process :D"
    ],
    "commit_messages": [
      "Merge pull request #2049 from janbiedermann/tracepoint_class\n\nTracePoint :class support."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620901ad6ca63ac8d87eb45",
    "number": 2048,
    "body": "The REPL has been living happily within the `exe/` dir without specs or anything to check it was still working (but manual tests). It's time to give it the attention it deserves ✅",
    "head_branch": "elia/repl-rework",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2048 from opal/elia/repl-rework\n\nMove REPL implementation from bin/ to its own lib/ file + specs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620901bd6ca63ac8d87eb46",
    "number": 2047,
    "body": "Fixes #2042 \r\nAnother PR to add some specs for the REPL is on its way.\r\n\r\n_Happy Christmas!_",
    "head_branch": "elia/global-this",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2047 from opal/elia/global-this\n\nSupport globalThis"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620901cd6ca63ac8d87eb47",
    "number": 2046,
    "body": "Submodules checkout was tacking up to 80s, plus other optimizations (see commit messages).",
    "head_branch": "elia/faster-ci",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2046 from opal/elia/faster-ci\n\nMake CI builds faster"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620901dd6ca63ac8d87eb48",
    "number": 2045,
    "body": "Requiring nodejs/stacktrace has been deprecated, source-maps are now supported by the default Node.js runner or by requiring https://github.com/evanw/node-source-map-support before loading code compiled by Opal.\r\n\r\nA typical stacktrace will now include files ending in `.rb` and accurate line/col references:\r\n\r\n```\r\n⤑ bin/opal -e\"puts 5; class A;def a;raise;end;end;  A.new.a\"                                                                          ~/C/opal\r\n5\r\nRuntimeError: \r\n    at corelib/kernel.rb:521:23:in `new'\r\n    at -e:1:23:in `raise'\r\n    at -e:1:39:in `a'\r\n    at /private/var/folders/w0/yjfqr9n94ld7ft4j3hlz_fsm0000gn/T/opal-system-runner-20191222-27867-sozm2m:23569:3:in `null'\r\n    at internal/modules/cjs/loader.js:759:30:in `Module._compile'\r\n    at internal/modules/cjs/loader.js:770:10:in `Module._extensions..js'\r\n    at internal/modules/cjs/loader.js:628:32:in `Module.load'\r\n    at internal/modules/cjs/loader.js:555:12:in `Module._load'\r\n    at internal/modules/cjs/loader.js:822:10:in `Module.runMain'\r\n    at internal/main/run_main_module.js:17:11:in `undefined'\r\n```\r\n\r\n_Not the most complete example, but please notice how the first lines have accurate line/col info: `corelib/kernel.rb:521:23`._",
    "head_branch": "elia/nodejs-sourcemap-stacktraces",
    "is_a_fork": false,
    "comments": [
      "@Mogztter you see any problem for asciidoc related to these changes?",
      "The file `source-map-support.js` is only required in the CLI runner? In other words, there's no additional runtime dependencies (in the stdlib)?\r\nWe do not use the CLI runner directly in Asciidoctor.js so I think it should be fine.",
      "> The file `source-map-support.js` is only required in the CLI runner? In other words, there's no additional runtime dependencies (in the stdlib)?\r\n\r\nThat's right 👍 "
    ],
    "commit_messages": [
      "Merge pull request #2045 from opal/elia/nodejs-sourcemap-stacktraces\n\nUse source-maps for Node.js stack-traces"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620901ed6ca63ac8d87eb49",
    "number": 2044,
    "body": "When a file is missing and hasn't been stubbed the builder will try to read it anyway instead of relying on the \"missing_require_severity\" configuration value.",
    "head_branch": "elia/path-reader-fixes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2044 from opal/elia/path-reader-fixes\n\nFix PathReader when a file is missing"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620901fd6ca63ac8d87eb4a",
    "number": 2043,
    "body": "Please read https://github.com/opal/opal/issues/2042 for description of the issue.",
    "head_branch": "restore_this",
    "is_a_fork": true,
    "comments": [
      "Thanks, the issue was fixed in #2047, this was used as the starting point for it! 👍 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209020d6ca63ac8d87eb4b",
    "number": 2040,
    "body": "The link mistakenly linked to a development branch.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "oh nice catch, must come from the original PR! Thanks!"
    ],
    "commit_messages": [
      "Merge pull request #2040 from ahmadine/patch-1\n\n*tiny fix* README.md: coveralls - switch branch to master"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209021d6ca63ac8d87eb4c",
    "number": 2039,
    "body": "",
    "head_branch": "elia/truffle-ci-fixes",
    "is_a_fork": false,
    "comments": [
      "I guess we should close this pull request since we moved away from Travis",
      "Let's try to re-enable those tests but for GHA for a change.",
      "Well, JRuby worked, but TruffleRuby oomed (this was an OS OOM). Both ran very slowly. "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209022d6ca63ac8d87eb4d",
    "number": 2038,
    "body": "- Use magic-comments to require helpers, skip them otherwise (break, slice)\r\n- Reduce the size of the constant getters Opal property name\r\n\r\nI attempted to make `nil` into an optional helper, but it's so ubiquitous that I eventually gave up.",
    "head_branch": "elia/helpers-compaction",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2038 from opal/elia/helpers-compaction\n\nReduce size of compiled code skipping unused helpers"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209023d6ca63ac8d87eb4e",
    "number": 2037,
    "body": "backport of #2036 ",
    "head_branch": "elia/chrome-runner-fixes-backport",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2037 from opal/elia/chrome-runner-fixes-backport\n\nChrome runner fixes (backport to 1.0)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209024d6ca63ac8d87eb4f",
    "number": 2036,
    "body": "",
    "head_branch": "elia/chrome-runner-fixes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2036 from opal/elia/chrome-runner-fixes\n\nChrome runner fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209025d6ca63ac8d87eb50",
    "number": 2035,
    "body": "Fixes #2033\r\n\r\nThanks @iliabylich ",
    "head_branch": "elia/fix-nested-for-loops",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2035 from opal/elia/fix-nested-for-loops\n\nFix nested for-loops"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209026d6ca63ac8d87eb51",
    "number": 2034,
    "body": "Backport of #2013 ",
    "head_branch": "elia/backports-softer-parser-version-requirements",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2034 from opal/elia/backports-softer-parser-version-requirements\n\nBump parser to 2.6 for rubocop-support"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209027d6ca63ac8d87eb52",
    "number": 2030,
    "body": "Fixing a small mistake which triggered my closure compiler.\r\n\r\nWas:\r\n```\r\n>> 8099.round(-1)\r\n=> NaN\r\n>>\r\n``` \r\nIs:\r\n```\r\n>> 8099.round(-1)\r\n=> 8100\r\n>>\r\n```",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2030 from ahmadine/patch-4\n\nFix Number#round for Integers"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209028d6ca63ac8d87eb53",
    "number": 2029,
    "body": "MRI defines it on the singleton object and makes it a proxy for\r\nObject.define_method. This implementation does not support wrapped\r\nrequires.\r\n\r\nFixes #2028 ",
    "head_branch": "elia/main-define-method",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2029 from opal/elia/main-define-method\n\nAllow calling define_method from the top object"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209028d6ca63ac8d87eb54",
    "number": 2025,
    "body": "Thanks to @Mogztter for [catching](https://github.com/opal/opal/pull/2023#commitcomment-35884301) it 👍 ",
    "head_branch": "elia/fix-runtime-use-strict-typo",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2025 from opal/elia/fix-runtime-use-strict-typo\n\nTypo, was supposed to be \"use strict\";"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209029d6ca63ac8d87eb55",
    "number": 2024,
    "body": "JRuby 9.2.9.0 was released last week with memory and startup time improvements. Might as well update!",
    "head_branch": "travis_ci_jruby_9290",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2024 from headius/travis_ci_jruby_9290\n\nUpdate to JRuby 9.2.9.0."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620902ad6ca63ac8d87eb56",
    "number": 2023,
    "body": "_Continuing work from #1959_\r\n\r\nStrict-mode is now a compiler option that can be enabled via magic comments and will default to `true` in a future version.\r\n\r\nCode to set the encoding of a String has been moved to the runtime and used in the compiler as a helper. String literals will now raise FrozenError when trying to set the encoding on them.",
    "head_branch": "elia/reprise-pr-1959",
    "is_a_fork": false,
    "comments": [
      "Interesting, thanks @elia for taking care of the String#encoding.\r\nI will compile Asciidoctor.js with this version and run the tests suite to see how it goes :wink: ",
      "@Mogztter @iliabylich thanks for the reviews and tests, I'm merging this, but please let me know if you have any other concern of uncover any other problem 👍 ",
      "We should also probably add `\"use strict\";` on other files generated by `bundle exec rake dist` (like `nodejs.js`, `pathname.js`...)?",
      "> We should also probably add `\"use strict\";` on other files generated by `bundle exec rake dist` (like `nodejs.js`, `pathname.js`...)?\r\n\r\nThe plan is to add `use_strict: true` to all corelib and stdlib files and deal with errors as they come. At that point we should be confident everything works fine in strict-mode and I'll add the webpack file-wrapper. For that I will probably reach into the great work done by @janbiedermann and make it into some configuration or adapter pattern as it will be:\r\n\r\n1. non require-able\r\n2. require-able\r\n3. webpack\r\n4. …\r\n\r\nPlease let me know what you think about that, anything can be done differently or can be improved?"
    ],
    "commit_messages": [
      "Merge pull request #2023 from opal/elia/reprise-pr-1959\n\nAdd per-file \"use strict\" support"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620902bd6ca63ac8d87eb57",
    "number": 2021,
    "body": "",
    "head_branch": "elia/fix-server-runner",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2021 from opal/elia/fix-server-runner\n\nFix bugs and add a spec for the server runner"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620902cd6ca63ac8d87eb58",
    "number": 2017,
    "body": "This instruction was probably originally in a Rakefile and so it referenced `__dir__` correctly. After moving it to tasks/, the `__dir__` reference changed. This commit corrects the path.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Merge pull request #2017 from ahmadine/patch-1\n\nbenchmarking.rake - bench:ips - correct a path to benchmarks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620902dd6ca63ac8d87eb59",
    "number": 2015,
    "body": "",
    "head_branch": "elia/runtime-fixes",
    "is_a_fork": false,
    "comments": [
      "@elia it looks good to me but you also need to include this change: \r\n\r\n```diff\r\n-expect(builder.to_s).to start_with('(function(undefined)')\r\n+expect(builder.to_s).to start_with('(function()')\r\n```\r\nhttps://github.com/opal/opal/pull/1952/files#diff-4505d6c91e3bcdcbdb3a51de47bd7389",
      "Thanks :rocket: "
    ],
    "commit_messages": [
      "Merge pull request #2015 from opal/elia/runtime-fixes\n\nRuntime fixes, courtesy of @Mogztter"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620902ed6ca63ac8d87eb5a",
    "number": 2014,
    "body": "Will allow access to magic-comments nicely converting them to a hash.",
    "head_branch": "elia/parse-magic-comments",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2014 from opal/elia/parse-magic-comments\n\nAdd Opal::Compiler#magic_comment_flags"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620902fd6ca63ac8d87eb5b",
    "number": 2013,
    "body": "While updating to rails 6:\r\n\r\n```\r\nBundler could not find compatible versions for gem \"parser\":\r\n  In Gemfile:\r\n    my_project_a was resolved to 0.9.1, which depends on\r\n      opal-rails (~> 1.0) was resolved to 1.0.1, which depends on\r\n        opal (~> 1.0.0) was resolved to 1.0.0, which depends on\r\n          parser (= 2.5.3.0)\r\n\r\n    my_project_b was resolved to 0.13.1, which depends on\r\n      rubocop (~> 0.74, < 0.75) was resolved to 0.74.0, which depends on\r\n        parser (>= 2.6)\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "This looks great! \r\n\r\nBefore merging though, I'd like to hear from @iliabylich if there's any potential issue in broadening the version requirement for parser in this way, i.e. should we expect breaking changes in any 2.x version of parser?",
      "@elia breaking changes - no, that's the rule of the `parser`. However, bug fixes are allowed to break things. The only fix that caused changes to AST is the change to `procarg0` which is not used by Opal AFAIK. Also `c_lexer` should be updated, I'll take a look later today or tomorrow.",
      "@elia I've released a bunch of versions of `c_lexer` (one per whiteqark/parser version), opal/c_lexer/master points to whitequark/parser/master, all intermediate releases are green, feel free to upgrade to any version of parser.\r\n\r\nEven if you are not ready to upgrade to the next version of Ruby you should still upgrade parser, it has a few bugfixes in old grammars",
      "@iliabylich that's great! thank you very much!",
      "@elia I've just seen that there have been errors in the Travis CI builds after you merged to master:\r\n\r\n* https://travis-ci.org/opal/opal/jobs/587856562\r\n* https://travis-ci.org/opal/opal/jobs/587856571\r\n\r\nIs this a cause for concern?",
      "@wintersolutions thanks for the heads up, it was a spurious failure 👍 ",
      "Ah I've just seen you released this as opal 1.0.1. A early Christmas present for me. Thank you!"
    ],
    "commit_messages": [
      "Merge pull request #2013 from wintersolutions/master\n\nUsed parser version is incompatible with rubocop"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209030d6ca63ac8d87eb5c",
    "number": 2012,
    "body": "",
    "head_branch": "elia/remove-legacy-runner-api",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2012 from opal/elia/remove-legacy-runner-api\n\nRemove legacy runner API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209031d6ca63ac8d87eb5d",
    "number": 2011,
    "body": "At this moment the current JRuby version is 9.2.8.0, so should be safe\r\nto assume we're good now.",
    "head_branch": "elia/remove-older-java-workaround",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2011 from opal/elia/remove-older-java-workaround\n\nRemove workaround targeted at JRuby 1.7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209032d6ca63ac8d87eb5e",
    "number": 2010,
    "body": "",
    "head_branch": "elia/update-submodules",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2010 from opal/elia/update-submodules\n\nUpdate submodules"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209033d6ca63ac8d87eb5f",
    "number": 2008,
    "body": "Pros:\r\n- all in one place\r\n- sparated results in github checks\r\n\r\nCons:\r\n- more complex configuration, should investigate Orbs to simplify it",
    "head_branch": "elia/circleci",
    "is_a_fork": false,
    "comments": [
      "since moved to GitHub actions"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209033d6ca63ac8d87eb60",
    "number": 2007,
    "body": "",
    "head_branch": "elia/update-rubocop",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2007 from opal/elia/update-rubocop\n\nUpdate to latest Rubocop"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209034d6ca63ac8d87eb61",
    "number": 2006,
    "body": "With some fixes along the way",
    "head_branch": "elia/update-ruby-specs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2006 from opal/elia/update-ruby-specs\n\nUpdate to latest mspec &  ruby specs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209035d6ca63ac8d87eb62",
    "number": 2005,
    "body": "Ensure filters are always sorted and formatted consistently.\r\n\r\n- Removes duplicates ignoring the error comment\r\n- Uses Array#sort for consistent ordering\r\n- Adds a usage note for future changes",
    "head_branch": "elia/filters-formatter",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2005 from opal/elia/filters-formatter\n\nAdd a simple filters formatter"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209036d6ca63ac8d87eb63",
    "number": 2004,
    "body": "interpreted as unintentional -- nodejs/fileutils.rb:14\"",
    "head_branch": "removed-superfluous-semicolon",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Merge pull request #2004 from bwl21/removed-superfluous-semicolon\n\nopal 1.0 fix: raises \"warning: Removed semicolon ending x-string expression,..."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209037d6ca63ac8d87eb64",
    "number": 2003,
    "body": "",
    "head_branch": "module-attr",
    "is_a_fork": true,
    "comments": [
      "Thanks for the contribution! I didn't know about this the _writable_ switch!\r\n\r\n---\r\n\r\nChecking the MRI implementation I saw that passing `true/false` as second argument is deprecated, here's the C code:\r\n\r\n```C\r\nVALUE\r\nrb_mod_attr(int argc, VALUE *argv, VALUE klass)\r\n{\r\n    if (argc == 2 && (argv[1] == Qtrue || argv[1] == Qfalse)) {\r\n        rb_warning(\"optional boolean argument is obsoleted\");\r\n        rb_attr(klass, id_for_attr(klass, argv[0]), 1, RTEST(argv[1]), TRUE);\r\n        return Qnil;\r\n    }\r\n    return rb_mod_attr_reader(argc, argv, klass);\r\n}\r\n```\r\n\r\nI'm wondering what's best here… if incorporating the obsolete form with a warning or keep the alias and send a PR to ruby/spec. If you prefer adding the warning please consider staying more close to the C implementations that has a single `if` only for the alternative version.",
      "@kachick I went on and merged after adding a commit that uses an implementation more similar to the C source, thanks for catching this one!",
      "Sorry to late reply 🙇 \r\nSure~ Thanks to review!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209038d6ca63ac8d87eb65",
    "number": 2002,
    "body": "Related to #1481 and #1466.",
    "head_branch": "elia/add-opal-io-to-opal-mini",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2002 from opal/elia/add-opal-io-to-opal-mini\n\nAdd opal/io to opal/mini"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209039d6ca63ac8d87eb66",
    "number": 1999,
    "body": "",
    "head_branch": "duped-spec-filters",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Merge pull request #1999 from kachick/duped-spec-filters\n\nRemove duplicated spec filter"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620903ad6ca63ac8d87eb67",
    "number": 1997,
    "body": "See also:\r\n- https://github.com/graalvm/graaljs/blob/master/docs/user/NashornMigrationGuide.md#launcher-name-js\r\n- https://medium.com/graalvm/oracle-graalvm-announces-support-for-nashorn-migration-c04810d75c1f\r\n- https://www.graalvm.org/docs/reference-manual/languages/js/\r\n\r\nFixes #1971",
    "head_branch": "elia/nashorn-deprecation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1997 from opal/elia/nashorn-deprecation\n\nAllow to change Nashorn path if using GraalVM"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620903bd6ca63ac8d87eb68",
    "number": 1996,
    "body": "Just some recfactoring to give the compiler runner its proper place.",
    "head_branch": "elia/move-compiler-runner-to-its-own-file",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1996 from opal/elia/move-compiler-runner-to-its-own-file\n\nMove the compiler runner to its own file"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620903cd6ca63ac8d87eb69",
    "number": 1995,
    "body": "# Problem\r\n\r\n\r\nOpal raises TypeError when it accesses to duplicated Struct instance.\r\n\r\n\r\n```ruby\r\nC = Struct.new(:a)\r\na = C.new(1)\r\nd = a.dup\r\np a\r\np d\r\n```\r\n\r\n```bash\r\n$ bin/opal test.rb\r\n#<struct C a=1>\r\n/tmp/opal-nodejs-runner-20190713-10833-yax7b8:21715\r\n        if(!self.$$data.hasOwnProperty(name)) {\r\n                        ^\r\n\r\nTypeError: Cannot read property 'hasOwnProperty' of undefined\r\n    at constructor.$Struct_$$$17 (/tmp/opal-nodejs-runner-20190713-10833-yax7b8:21715:25)\r\n    at $$26 (/tmp/opal-nodejs-runner-20190713-10833-yax7b8:21871:54)\r\n    at Object.Opal.yield1 (/tmp/opal-nodejs-runner-20190713-10833-yax7b8:1452:14)\r\n    at Array.$$each (/tmp/opal-nodejs-runner-20190713-10833-yax7b8:12590:26)\r\n    at Opal.send (/tmp/opal-nodejs-runner-20190713-10833-yax7b8:1671:19)\r\n    at constructor.$$each_pair (/tmp/opal-nodejs-runner-20190713-10833-yax7b8:21864:7)\r\n    at constructor.$$__send__ (/tmp/opal-nodejs-runner-20190713-10833-yax7b8:3717:21)\r\n    at Opal.send (/tmp/opal-nodejs-runner-20190713-10833-yax7b8:1671:19)\r\n    at constructor.$$each (/tmp/opal-nodejs-runner-20190713-10833-yax7b8:10542:14)\r\n    at constructor.$$collect (/tmp/opal-nodejs-runner-20190713-10833-yax7b8:8767:12)\r\n```\r\n\r\n`$$data` is assigned by `new` class method, but it is not assigned with `Struct#dup`.\r\n\r\n\r\n# Solution\r\n\r\n\r\nCopy `$$data` with `Struct#initialize_copy` method.\r\n\r\n\r\n# Note\r\n\r\n\r\nWe have a TODO of `Struct#dup` https://github.com/opal/opal/blob/2775e1b6e3066b4cd6ee4c3c1f4df365339f7115/spec/filters/bugs/struct.rb#L3\r\n\r\nBut this pull request does not solve the todo.",
    "head_branch": "Struct#dup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1995 from pocke/Struct#dup\n\nFix Struct#dup by copying `$$data` with initialize_copy"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620903dd6ca63ac8d87eb6a",
    "number": 1992,
    "body": "",
    "head_branch": "range-equal",
    "is_a_fork": true,
    "comments": [
      "Thanks!",
      "Thank you!"
    ],
    "commit_messages": [
      "Merge pull request #1992 from kachick/range-equal\n\n Fix Range#=="
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620903ed6ca63ac8d87eb6b",
    "number": 1991,
    "body": "",
    "head_branch": "range-each",
    "is_a_fork": true,
    "comments": [
      "Thanks!",
      "Thank you!"
    ],
    "commit_messages": [
      "Update history"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620903fd6ca63ac8d87eb6c",
    "number": 1990,
    "body": "",
    "head_branch": "enumerator-each_with_index",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Update history"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209040d6ca63ac8d87eb6d",
    "number": 1989,
    "body": "",
    "head_branch": "clean-enumerable-each_with_index",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Merge pull request #1989 from kachick/clean-enumerable-each_with_index\n\nClean unused JavaScript code from Enumerable"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209041d6ca63ac8d87eb6e",
    "number": 1988,
    "body": "",
    "head_branch": "set-intersect-disjoint",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Update history"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209041d6ca63ac8d87eb6f",
    "number": 1987,
    "body": "",
    "head_branch": "set-keep_if-select-reject",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Update history"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209042d6ca63ac8d87eb70",
    "number": 1986,
    "body": "",
    "head_branch": "enumerable-zip",
    "is_a_fork": true,
    "comments": [
      "Can you please rebase so that CI can re-run? 🙏",
      "Sure. Rebased!",
      "Thanks!",
      "Thank you!"
    ],
    "commit_messages": [
      "Merge pull request #1986 from kachick/enumerable-zip\n\nFix Enumerable#zip"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209043d6ca63ac8d87eb71",
    "number": 1985,
    "body": "",
    "head_branch": "min-max-arg",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Merge pull request #1985 from kachick/min-max-arg\n\nFix Enumerable#{min_by, max_by} with argument"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209044d6ca63ac8d87eb72",
    "number": 1984,
    "body": "... which are included by other modules which are included.\r\n\r\nAt Line 961 below module_iclass was null and a exception was thrown.",
    "head_branch": "include_include_fix",
    "is_a_fork": true,
    "comments": [
      "That works now, but not sure if it is the correct fix.",
      "@janbiedermann thanks! can you add some code that reproduces the problem solved by this change or explain that?\r\n\r\nI'd like to add a spec example along with the change.",
      "Original situation was something like:\r\n```\r\nclass A\r\n  include ModB\r\n  include ModC\r\n\r\nmodule ModB\r\n  include ModC\r\n\r\nmodule ModC\r\n  def self.included(base)\r\n    # do somehting\r\n```\r\n\r\nsuddenly stopped working. null Exceptions was thrown.\r\n\r\nLooking at the code its obvious that its somehow wrong, so 6578189 tried to reorder.\r\nThat made the issue go away, but failed specs.\r\nRecently the reordered code failed for another inclusion chain, so i came up with fb2b213.\r\n\r\nThe other question is, why it suddenly stopped working in the first place.\r\nThats my problem for adding a spec, i could not create a spec that could reproduce the problem.",
      "Order may be important, maybe it was:\r\n```\r\nclass A\r\n  include ModC\r\n  include ModB\r\n  \r\nmodule ModB\r\n  include ModC\r\n\r\nmodule ModC\r\n  def self.included(base)\r\n    # do somehting\r\n```",
      "I remember, maybe i twas like this:\r\n```\r\nclass A\r\n  include ModB\r\n  include ModC\r\n\r\nmodule ModB\r\n  def self.included(base)\r\n    base.include ModC\r\n\r\nmodule ModC\r\n  def self.included(base)\r\n    # do somehting\r\n```\r\n\r\nMaybe it can reproduced then in the most simple way:\r\n```\r\nclass A\r\n   include ModC\r\n   include ModC\r\n```\r\ni will try later",
      "I tried this, but seems to be working fine:\r\n\r\n```rb\r\nmodule ModB\r\n  def self.included(base)\r\n    base.include ModC\r\n  end\r\nend\r\n\r\nmodule ModC\r\n  def self.included(base)\r\n    # do somehting\r\n    # Maybe it can reproduced then in the most simple way:\r\n    p included: base\r\n  end\r\nend\r\n\r\nclass A\r\n  include ModB\r\n  include ModC\r\nend\r\n\r\nclass A\r\n  include ModC\r\n  include ModC\r\nend\r\n\r\np A.ancestors\r\n```\r\n\r\noutput:\r\n\r\n```\r\nOpal v1.0.0\r\n{\"included\"=>A}\r\n{\"included\"=>A}\r\n{\"included\"=>A}\r\n{\"included\"=>A}\r\n[A, ModC, ModB, Object, Kernel, BasicObject]\r\n```",
      "Right, that was my problem too, i could not recreate the error in the first place. But still, it happened.",
      "I'll leave this open then, so we can add the necessary information if it happens again 👍 ",
      "Hit it again!\r\n\r\nIts like this:\r\n```ruby\r\nmodule ModuleB\r\nend\r\n\r\nmodule ModuleA\r\n  include ModuleB\r\nend\r\n\r\nclass ClassC\r\n  include ModuleA\r\n  include ModuleB\r\nend\r\n```\r\nClassC, when including ModuleA has ModuleB in its ancestor chain but without $$root flag.\r\nWhen including ModuleB directly the check if ModuleB was included just checks if its in the array of ancestors, but the rebuilding of the ancestor chain, checks for $$root if the module has already been included and so cant find the module as its own. Its the first direct inclusion of the module.",
      "Superseeded by #2053"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209045d6ca63ac8d87eb73",
    "number": 1983,
    "body": "",
    "head_branch": "module-alias_method_with_invalid_args",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Update history"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209046d6ca63ac8d87eb74",
    "number": 1982,
    "body": "",
    "head_branch": "enumerable-min-with-arg",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Update history"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209047d6ca63ac8d87eb75",
    "number": 1981,
    "body": "",
    "head_branch": "enumerable-minmax_by",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Update history"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209048d6ca63ac8d87eb76",
    "number": 1980,
    "body": "",
    "head_branch": "enumerator-size",
    "is_a_fork": true,
    "comments": [
      "Merged thanks!",
      "Thank you!"
    ],
    "commit_messages": [
      "Update history"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209049d6ca63ac8d87eb77",
    "number": 1979,
    "body": "",
    "head_branch": "enumerable-to_h",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Merge pull request #1979 from kachick/enumerable-to_h\n\nImplement Enumerable#to_h"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620904ad6ca63ac8d87eb78",
    "number": 1977,
    "body": "Here is a PR to update to the latest ruby/spec.\r\nThe only change in Opal itself is 665af60, please review it.\r\n\r\nRecently, I removed `with_feature` in MSpec (https://github.com/ruby/spec/issues/667) and wanted to check how it impacts Opal.\r\nNotably, `with_feature :encoding` was removed as it was not maintained for recent specs.\r\n\r\nIt seems nowadays Opal supports a fair bit of Encoding and so in general the update seemed fine, there are just a few failures for new specs.\r\n\r\nFor the workflow, I used `bundle exec rake mspec_nodejs` which outputs a list `fails` lines to copy/paste under `spec/bugs` or `spec/unsupported` and merge in the sorted lines, easy enough and intuitive.\r\n\r\nSomewhat related, I recently introduced [a small tool](https://github.com/ruby/mspec/blob/c25d63dc7e3ad1b07cab7776ac3a4e4db9bd0da8/tool/tag_from_output.rb) in MSpec to add tags based on the output from backtraces. This could potentially be useful for Opal as well, feel free to adapt/make your own based on it as needed. However, this needs to know which spec file was running for failed specs, which currently doesn't seem available in Opal (e.g., `at ::Object#$guard (/tmp/opal-nodejs-runner-20190516-29709-19hfirv:62777:27)`).\r\n\r\nCongrats on the 1.0 release!",
    "head_branch": "update-specs",
    "is_a_fork": true,
    "comments": [
      "> easy enough and intuitive.\r\n\r\nThat's a big win! 🥳\r\n\r\n>  feel free to adapt/make your own based on it as needed\r\n\r\nI'll have a look, although my gut tells me it would require runtime sourcemap parsing to know the exact locations (which is something I wanted to do many times, but was not that straightforward).\r\n\r\n> Congrats on the 1.0 release!\r\n\r\nThanks man! You deserve part of the credit! ✨ thanks for keeping up with the ruby spec 👍👍👍 "
    ],
    "commit_messages": [
      "Merge pull request #1977 from eregon/update-specs\n\nUpdate ruby/spec and MSpec"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620904bd6ca63ac8d87eb79",
    "number": 1976,
    "body": "2790e59 + faa60d4 + e826532 may go away once everything is running fine in strict and non strict mode.\r\nI suggest making strict mode the default then for generated code and the runtime.js, so no strictnodejs runner and no --use-strict compiler option are needed anymore.",
    "head_branch": "es6_modules_1_1",
    "is_a_fork": true,
    "comments": [
      "just noticed an issue:\r\nwhen using --es6-modules with opal, like: `bundle exec opal --es6-modules -OcEe 'require 'socket'; puts \"test\"'`\r\n\r\nthen the compiler can't determine the module correctly and the import for socket, in above example, is not generated. result:\r\n```\r\nconst opal_code = function() {\r\n  global.Opal.modules[\"-e\"] = function(Opal) {\r\n```\r\nnote the \"-e\" as module name. Of course, some context is missing. maybe needs an additional option for module name or the compiler should use a default module name. ",
      "I think its best to remove the --es6-modules command line option from the cli. Its generated code makes in fact only sense if used from the loader within webpack. When using this option from the cli on a file, muliple export default lines are generated, useless.",
      "In progress getting the tests running, compiled as ES6 modules, several challenges:\r\nin erb_spec: `require 'bla'` where bla resolves to a file bla.opalerb, this can't currently be handled by the webpack resolver. Will need to fix that.\r\n`require_tree '../bla'` also makes problems, need to get the paths for files right. Above fix in f805284 is partial.\r\n",
      "With the relative require fixed, a new challenge:\r\nConditional requires don't work as expected. Webpack resolves ALL requires at COMPILE time and wants to include corresponding files in the bundle, for example the nodejs files for a browser bundle. It also evaluates the nodejs require in sdtlib/nodejs/io.rb. And so on, etc., pp. \r\nopal/platform.rb is the problem. But that file is required by mspec. Thinking.",
      "owl 0.8.1 (not released yet) will have a filter, that allows to exclude opal/platform.rb (and others too) from resolving so that a substitute can be supplied. That almost makes mspec work. Still a problem with require_tree.\r\nAlso the dynamic require_spec_file doesn't work. With webpack its either import or don't import.",
      "I proudly present:\r\nThe first mspec test run, bundled by webpack with owl 0.8.1, minified, executed in chrome:\r\n```\r\ncore:opal jan$ rake mspec_opal_owl\r\nmkdir -p tmp/webpack_app/opal\r\nAdding 103 files (spec/opal)\r\nexport RANDOM_SEED=53120 # to re-use the same randomization\r\nstub: mspec/helpers/tmp\r\nstub: mspec/helpers/environment\r\nstub: mspec/guards/block_device\r\nstub: a_file\r\nstub: lib/spec_helper\r\nstub: mspec/commands/mspec-run\r\nstub: etc\r\nenv -i PATH=$PATH ruby -w -rbundler/setup -r/Users/jan/workspace/opal/tasks/testing/mspec_special_calls runner.rb\r\n/Users/jan/.rvm/rubies/ruby-2.6.3/lib/ruby/gems/2.6.0/gems/parser-2.5.3.0/lib/parser/lexer.rb:10836: warning: assigned but unused variable - testEof\r\n\r\nyarn exec v1.15.2\r\n\r\nHash: 97d2f2b09686de81dfa7\r\nVersion: webpack 4.31.0\r\nChild\r\n    Hash: 97d2f2b09686de81dfa7\r\n    Time: 28440ms\r\n    Built at: 05/17/2019 1:12:35 AM\r\n             Asset      Size  Chunks             Chunk Names\r\n    application.js  2.01 MiB       0  [emitted]  application\r\n    Entrypoint application = application.js\r\n      [3] /Users/jan/workspace/opal/spec/spec_helper.rb 4.45 KiB {0} [built]\r\n     [30] /Users/jan/workspace/opal/opal/opal.rb 4.79 KiB {0} [built]\r\n     [31] /Users/jan/workspace/opal/opal/opal/base.rb 2.27 KiB {0} [built]\r\n     [35] ./opal/platform.rb 879 bytes {0} [built]\r\n     [84] /Users/jan/workspace/opal/opal/opal/mini.rb 4.46 KiB {0} [built]\r\n     [95] /Users/jan/workspace/opal/opal/corelib/kernel/format.rb 20.6 KiB {0} [built]\r\n     [96] /Users/jan/workspace/opal/opal/corelib/string/encoding.rb 14.7 KiB {0} [built]\r\n     [97] /Users/jan/workspace/opal/opal/corelib/math.rb 16.1 KiB {0} [built]\r\n     [98] /Users/jan/workspace/opal/opal/corelib/complex.rb 19.5 KiB {0} [built]\r\n     [99] /Users/jan/workspace/opal/opal/corelib/rational.rb 17.9 KiB {0} [built]\r\n    [100] /Users/jan/workspace/opal/opal/corelib/time.rb 27.1 KiB {0} [built]\r\n    [110] ./spec_owl.rb 51.5 KiB {0} [built]\r\n    [449] ./opal_loader.rb 781 bytes {0} [built]\r\n    [450] multi ../javascripts/application.js 28 bytes {0} [built]\r\n    [451] ../javascripts/application.js 181 bytes {0} [built]\r\n        + 442 hidden modules\r\nDone in 31.38s.\r\nConnecting to localhost:9222...\r\n/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --headless --disable-web-security --disable-gpu --remote-debugging-port=9222 \r\nConnecting to localhost:9222...\r\n[0517/011235.995639:ERROR:xattr.cc(63)] setxattr org.chromium.crashpad.database.initialized on file /var/folders/89/9yvnz1nn1431fgggqpfbyp200000gn/T/: Operation not permitted (1)\r\n[0517/011235.998311:ERROR:file_io.cc(89)] ReadExactly: expected 8, observed 0\r\n[0517/011235.999766:ERROR:xattr.cc(63)] setxattr org.chromium.crashpad.database.initialized on file /var/folders/89/9yvnz1nn1431fgggqpfbyp200000gn/T/: Operation not permitted (1)\r\nConnecting to localhost:9222...\r\n\r\nDevTools listening on ws://127.0.0.1:9222/devtools/browser/4541d432-fc87-49c6-a5c9-0b8569bb37b0\r\nConnecting to localhost:9222...\r\nGVA info: Successfully connected to the Intel plugin, offline Gen9 \r\nObject freezing is not supported by Opal\r\n..........................................................................................................................................................................................................................................................................................................................................................................................................opal 1.0.0 (2019-05-12 revision 0)\r\n.........................................................................................................................................................FF........F..EE..E....EE.........................................................................................................................................................................................................................\r\n\r\n[ ... error messages cut ... ]\r\n\r\nFinished in 0.578000 seconds\r\n\r\n103 files, 788 examples, 1577 expectations, 3 failures, 5 errors, 0 tagged\r\n```\r\n(The webpack build time of 28s is due to minification, without its just 7225ms.)\r\n(For this test application.js not minified is 4,2MB)\r\n\r\nmspec_ruby_owl still has issues building correctly.\r\n",
      "first result for mspec_ruby_owl:\r\n```\r\n1504 files, 32221 examples, 108503 expectations, 259 failures, 175 errors, 9869 tagged\r\n```\r\n😄 \r\n\r\n(Need to fix some things before i push that.)",
      "Note:\r\nwhen building with source maps it fails with this message:\r\nError: Invalid mapping: {\"generated\":{\"line\":182,\"column\":0},\"source\":\"/Users/jan/.rvm/rubies/ruby-2.6.3/lib/ruby/gems/2.6.0/gems/ast-2.4.0/lib/ast/node.rb\",\"original\":{\"line\":0,\"column\":0},\"name\":null}\r\n(will fix later on)",
      "Made the test filtering work with owl. Results:\r\n```\r\nmspec_opal_chrome: 103 files, 397 examples, 797 expectations, 0 failures, 0 errors, 0 tagged\r\nmspec_opal_owl:    103 files, 393 examples, 793 expectations, 0 failures, 0 errors, 0 tagged (excluded erb_spec.rb, as owl currently doesn't support .opalerb)\r\n```\r\n```\r\nmspec_ruby_chrome: 1504 files, 13679 examples, 55167 expectations, 0 failures, 0 errors, 2189 tagged\r\nmspec_ruby_owl:    1504 files, 13679 examples, 54987 expectations, 132 failures, 87 errors, 2189 tagged\r\n```\r\nSo 132 failures, 87 errors for ruby specs when bundled with webpack and run in chrome vs. just being run in chrome without being bundled in webpack.",
      "Minitest results:\r\n```\r\nminitest_cruby_chrome: 125 runs, 549 assertions, 0 failures, 0 errors, 13 skips\r\nminitest_cruby_owl:    125 runs, 542 assertions, 2 failures, 0 errors, 13 skips\r\n```\r\nThose 2 fails are because of \"Argument Error expected\", because owl doesn't compile with --arity-check. Maybe another feature to add to owl: compiler options.",
      "Lazy load ruby code, split up assets using webpack dynamic import(), usage:\r\n```ruby\r\nrequire_lazy 'module_name' do\r\n   # block here is executed after module has been loaded\r\nend\r\n\r\n# with webpack prefetch feature:\r\nrequire_lazy 'module_name', :prefetch do\r\n   # block here is executed after module has been loaded\r\nend\r\n\r\n# with webpack preload feature:\r\nrequire_lazy 'module_name', :preload do\r\n   # block here is executed after module has been loaded\r\nend\r\n\r\n# with webpack prefetch and preload feature:\r\nrequire_lazy 'module_name', :prefetch, :preload do\r\n   # block here is executed after module has been loaded\r\nend\r\n```\r\n\r\nSee:\r\nhttps://webpack.js.org/guides/code-splitting#dynamic-imports\r\nhttps://webpack.js.org/api/module-methods#import-1\r\n\r\nNeeds specs and testing.\r\n\r\n@elia, @Mogztter: is that cool? is that ok?\r\nIll test and write specs later on.",
      "Things to do:\r\n* [x] fix source maps, they crash chrome and the webpack build process*\r\n* [x] fix import names: currently they have a random component which confuses webpack checksums. Move `generate_import_name` to the top_node instance, maybe even all es6 methods, include as module.\r\n* [x] fix bugs for those failing ruby mspecs. (actually that where just missing compiler options)\r\n* [x] https://github.com/isomorfeus/opal-webpack-loader/issues/5, for minispec_cruby and mspec\r\n* [x] provide additional webpack configs:\r\n   - one for mspec\r\n   - one for minispec\r\n   - make them use source maps to catch *\r\n* [x] provide a webpack config with 'library' target, can compile opal for npm as module probably\r\n* [ ] provide optional modules from stdlib in npm package. not sure yet in which way:\r\n```\r\nimport 'opal/forwardable'; // each separately?\r\n// or\r\nimport 'opal/stdlib_optional'; // all bundled together?\r\n// or in functional groups?\r\n``` \r\n* [x] make `require_lazy` work and make it return a ruby promise\r\n* [ ] add `require_lazy` specs\r\n* [ ] when using the opal npm package with a import, check webpack behaviour when a ruby module does a `require 'opal'`, does opal get bundled again or is it used from the import?\r\n* [ ] some task for updating version in npm/package.json, maybe a package.json.erb",
      "Running mspec_ruby_owl seems to crash on travis. I tried to reproduce locally with the exact same node and ruby versions, but it works on my machine without any problem. So for now its in allow failures. ",
      "Building of node package works, usage for now like this:\r\n**for the browser**:\r\n```\r\nimport 'opal';\r\nimport 'opal/parser'; // if thats wanted\r\n```\r\n**for node:**\r\n```\r\nrequire('opal/opal_node'); // includes opal and the node specific things\r\nrequire('opal/parser_node'); // packaged for node\r\n```\r\nin nodejs:\r\n`> Opal.Parser.$eval('puts File.read(\"my_file\")')` does the right things and prints the files content.",
      "node package looks like this:\r\n```\r\nnpm notice 📦  opal@1.1.0\r\nnpm notice === Tarball Contents === \r\nnpm notice 442B    package.json  \r\nnpm notice 6.1kB   .DS_Store     \r\nnpm notice 379.2kB opal_node.js  \r\nnpm notice 325.4kB opal.js       \r\nnpm notice 1.1MB   parser_node.js\r\nnpm notice 1.2MB   parser.js     \r\nnpm notice === Tarball Details === \r\nnpm notice name:          opal                                    \r\nnpm notice version:       1.1.0                                   \r\nnpm notice filename:      opal-1.1.0.tgz                          \r\nnpm notice package size:  527.6 kB                                \r\nnpm notice unpacked size: 3.0 MB \r\n```\r\nMaybe better to have a separate opal-node package?",
      "building the npm package:\r\n```\r\nbundle install\r\ncd npm\r\nnpm i\r\nnpm run library_build\r\nnpm pack\r\n```\r\nand there it is.",
      "now with source map support:\r\n```\r\nnpm notice 📦  opal@1.1.0\r\nnpm notice === Tarball Contents === \r\nnpm notice 442B    package.json      \r\nnpm notice 6.1kB   .DS_Store         \r\nnpm notice 379.2kB opal_node.js      \r\nnpm notice 963.3kB opal_node.js.map  \r\nnpm notice 325.4kB opal.js           \r\nnpm notice 771.3kB opal.js.map       \r\nnpm notice 1.1MB   parser_node.js    \r\nnpm notice 2.7MB   parser_node.js.map\r\nnpm notice 1.2MB   parser.js         \r\nnpm notice 2.8MB   parser.js.map     \r\nnpm notice === Tarball Details === \r\nnpm notice name:          opal                                    \r\nnpm notice version:       1.1.0                                   \r\nnpm notice filename:      opal-1.1.0.tgz                          \r\nnpm notice package size:  1.8 MB                                  \r\nnpm notice unpacked size: 10.3 MB\r\n``` \r\nProbably good idea to have 2 packages, one for the browser, one for node?",
      "Usage for require_lazy, manually tested and working:\r\n```\r\nrequire 'promise' # required\r\n\r\nrequire_lazy 'forwardable' do\r\n  if defined? Forwardable\r\n    puts \"Yeah, it works!\"\r\n  end\r\nend.then do\r\n  puts \"And the promise has been resolved too\"\r\nend\r\n```\r\nWith that code, webpack creates a lazy loaded chunk:\r\n```\r\n03:15:11 webpack.1 |                  Asset      Size       Chunks             Chunk Names\r\n03:15:11 webpack.1 |                   0.js  8.83 KiB            0  [emitted]  <---- this one, 'forwardable' compiled\r\n03:15:11 webpack.1 |         application.js  1.19 MiB  application  [emitted]  application\r\n```\r\nwhich is then, once the browser hits it, lazy loaded, executed and then the blocks or promises get executed.\r\nPreferred usage is to bundle application code in files that list a lot of requires, and load those files with require_lazy based on user input/application path. This way the initial application size to load can be very nicely reduced. Also the options :prefetch and :preload are available, see links further above, which may make the lazy loading barely noticeable.\r\nNo specs yet. Not sure yet how to test properly.",
      "Working on a instance browser/debugger to be used with a soon to be released version of https://github.com/isomorfeus/opal-devtools. Instance registry can be activated with webpack var injection. Example config for webpack:\r\n```\r\n...\r\n    plugins: [\r\n        new webpack.DefinePlugin({\r\n            OPAL_DEVTOOLS_OBJECT_REGISTRY: true\r\n        })\r\n    ],\r\n...\r\n```\r\nSetting OPAL_DEVTOOLS_OBJECT_REGISTRY to `true` enables the registry.\r\nIf its set to `false` or the variable is not injected, everything behaves like before.\r\n",
      "This patch decouples require_tree module inclusion from runtime evalaution by adding a option to require tree:\r\n```\r\nrequire_tree 'mod_dir', :autoload\r\n```\r\nwill on Object put $$autoload for constants to look up, constant name for a file:\r\n`mod_dir/some_thing.rb`\r\nwill be:\r\n`ModDir::SomeThing`\r\n\r\nfor \r\n```\r\nrequire_tree 'mod_dir', :autoload_dirskip\r\n```\r\nwill on Object put $$autoload for constants to look up, constant name for a file:\r\n`mod_dir/some_thing.rb`\r\nwill be:\r\n`SomeThing`",
      "Its mostly a functional proof of concept for now, so a small todo for this patch:\r\n- polish\r\n- maybe inflectors for MyConstAPI and so on.",
      "To clarify: require_lazy needs a relative file path as option.\r\nThere was a bug where it did not determine the module path correctly from the file path, that is now fixed.",
      "The \"Fix global for Node VMs\" may test for node directly instead.",
      "continued in #2266 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620904cd6ca63ac8d87eb7a",
    "number": 1974,
    "body": "",
    "head_branch": "fix_P_cli_option",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1974 from janbiedermann/fix_P_cli_option\n\nfix -P cli option"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620904dd6ca63ac8d87eb7b",
    "number": 1973,
    "body": "continue work of #1970\r\nexperimental\r\nuse `new String` instead of string primitives to support ruby String semantics in \"use strict\" mode",
    "head_branch": "es6_modules_string",
    "is_a_fork": true,
    "comments": [
      "all strings are `new String()` and no primitives, at least all those cases that are covered by the tests.\r\nLets benchmark ...",
      "Benchmarks:\r\nrun in nodejs v12.1.0, one run only, possibly highly scientific\r\n- 1_opal-1-0-0-beta1 : es6_modules_string in nodejs runner `new String()`\r\n- 2_opal-1-0-0-beta1 : es6_modules_string in strictnodejs runner `new String()`\r\n- 3_opal-1-0-0-beta1 : es6_modules in nodejs runner string primitives\r\n- 4_opal-1-0-0-beta1 : es6_modules in strictnodejs runner string primitives\r\n```\r\nBase: 1_opal-1-0-0-beta1\r\nBenchmark                                               1_opal-1-0-0-beta1 |      4_opal-1-0-0-beta1 |      2_opal-1-0-0-beta1 |      3_opal-1-0-0-beta1 | \r\ntest/cruby/benchmark/bm_loop_times.rb                              3.840ms |      -95.84%    0.160ms |      -95.92%    0.157ms |       +9.45%    4.203ms | \r\ntest/cruby/benchmark/bm_vm2_dstr.rb                                1.647ms |      -95.18%    0.079ms |       -2.26%    1.610ms |      -94.87%    0.085ms | \r\ntest/cruby/benchmark/bm_vm1_gc_short_lived.rb                      5.388ms |      -93.93%    0.327ms |       -3.15%    5.219ms |      -93.55%    0.348ms | \r\ntest/cruby/benchmark/bm_vm2_poly_method_ov.rb                      1.904ms |      -91.38%    0.164ms |      -90.81%    0.175ms |       -3.71%    1.833ms | \r\ntest/cruby/benchmark/bm_so_nested_loop.rb                          2.882ms |      -85.70%    0.412ms |      -85.59%    0.415ms |       +8.32%    3.122ms | \r\ntest/cruby/benchmark/bm_vm2_poly_method.rb                         1.831ms |      -76.92%    0.422ms |      -89.95%    0.184ms |       +6.92%    1.957ms | \r\ntest/cruby/benchmark/bm_vm1_neq.rb                                 4.219ms |      -74.23%    1.087ms |      -70.76%    1.234ms |       -2.12%    4.130ms | \r\ntest/cruby/benchmark/bm_hash_aref_str.rb                           2.606ms |      -71.67%    0.738ms |      -72.69%    0.712ms |       +8.22%    2.820ms | \r\ntest/cruby/benchmark/bm_so_random.rb                               1.668ms |      -56.25%    0.730ms |      -53.84%    0.770ms |       +2.40%    1.708ms | \r\ntest/cruby/benchmark/bm_so_ackermann.rb                            0.279ms |      -40.64%    0.166ms |      -42.96%    0.159ms |      -11.53%    0.247ms | \r\ntest/cruby/benchmark/bm_vm2_send.rb                                1.424ms |      -35.45%    0.919ms |      -36.47%    0.905ms |       +6.98%    1.523ms | \r\ntest/cruby/benchmark/bm_app_answer.rb                              0.020ms |      -30.67%    0.014ms |      -32.83%    0.013ms |       +1.99%    0.020ms | \r\ntest/cruby/benchmark/bm_vm1_attr_ivar_set.rb                      44.378ms |      -26.41%   32.658ms |       -2.68%   43.187ms |      -23.68%   33.868ms | \r\ntest/cruby/benchmark/bm_vm2_struct_big_aset.rb                     4.391ms |      -25.56%    3.268ms |       -1.71%    4.316ms |      -16.07%    3.685ms | \r\ntest/cruby/benchmark/bm_vm2_struct_small_aset.rb                   4.247ms |      -25.46%    3.166ms |       -0.60%    4.222ms |      -21.47%    3.335ms | \r\ntest/cruby/benchmark/bm_so_object.rb                               1.901ms |      -23.44%    1.455ms |      -27.23%    1.383ms |       +7.53%    2.044ms | \r\ntest/cruby/benchmark/bm_so_lists.rb                                4.879ms |      -17.71%    4.015ms |      -25.23%    3.648ms |       -4.64%    4.653ms | \r\ntest/cruby/benchmark/bm_vm2_struct_big_aref_lo.rb                  0.133ms |      -15.01%    0.113ms |      -11.98%    0.118ms |      -15.59%    0.113ms | \r\ntest/cruby/benchmark/bm_vm2_zsuper.rb                              2.194ms |      -12.33%    1.923ms |      -14.68%    1.872ms |      +13.05%    2.480ms | \r\ntest/cruby/benchmark/bm_vm2_case.rb                                5.270ms |      -10.67%    4.708ms |      -16.50%    4.401ms |       -3.37%    5.092ms | \r\ntest/cruby/benchmark/bm_vm2_method_missing.rb                      0.081ms |      -10.65%    0.072ms |       -8.58%    0.074ms |       -5.34%    0.077ms | \r\ntest/cruby/benchmark/bm_so_matrix.rb                               2.046ms |      -10.41%    1.833ms |       -1.46%    2.017ms |      +16.07%    2.375ms | \r\ntest/cruby/benchmark/bm_loop_for.rb                                0.208ms |       -9.60%    0.188ms |       -5.04%    0.198ms |       -7.19%    0.193ms | \r\ntest/cruby/benchmark/bm_vm1_not.rb                                 0.644ms |       -9.49%    0.583ms |       -8.50%    0.589ms |       -6.09%    0.605ms | \r\ntest/cruby/benchmark/bm_vm1_swap.rb                                0.387ms |       -7.50%    0.358ms |       -8.25%    0.355ms |       -1.48%    0.381ms | \r\ntest/cruby/benchmark/bm_hash_aref_miss.rb                          0.971ms |       -7.37%    0.899ms |      -11.29%    0.861ms |       -5.39%    0.919ms | \r\ntest/cruby/benchmark/bm_vm3_clearmethodcache.rb                    6.286ms |       -7.13%    5.838ms |       -7.56%    5.811ms |       -1.08%    6.218ms | \r\ntest/cruby/benchmark/bm_hash_keys.rb                               3.187ms |       -5.30%    3.018ms |       -1.92%    3.125ms |       -1.33%    3.144ms | \r\ntest/cruby/benchmark/bm_vm2_array.rb                               0.074ms |       -4.78%    0.071ms |       -6.98%    0.069ms |       -9.00%    0.068ms | \r\ntest/cruby/benchmark/bm_loop_whileloop.rb                          0.348ms |       -3.78%    0.335ms |       -5.56%    0.329ms |       -4.25%    0.333ms | \r\ntest/cruby/benchmark/bm_app_tak.rb                                 0.229ms |       -3.76%    0.220ms |       -3.61%    0.220ms |       +2.76%    0.235ms | \r\ntest/cruby/benchmark/bm_vm1_block.rb                               5.447ms |       -3.39%    5.262ms |       -1.53%    5.364ms |       +1.06%    5.505ms | \r\ntest/cruby/benchmark/bm_vm2_super.rb                               1.347ms |       -1.32%    1.329ms |       -3.34%    1.302ms |       -3.84%    1.295ms | \r\ntest/cruby/benchmark/bm_vm1_simplereturn.rb                        0.365ms |       -0.98%    0.361ms |       -6.98%    0.340ms |       -3.74%    0.351ms | \r\ntest/cruby/benchmark/bm_vm2_proc.rb                                1.025ms |       -0.57%    1.019ms |       +0.85%    1.034ms |       +8.13%    1.108ms | \r\ntest/cruby/benchmark/bm_vm2_bigarray.rb                            0.065ms |       -0.32%    0.065ms |       +1.17%    0.066ms |       +0.03%    0.065ms | \r\ntest/cruby/benchmark/bm_hash_shift.rb                             26.586ms |       -0.02%   26.581ms |       -0.09%   26.561ms |       +5.92%   28.160ms | \r\ntest/cruby/benchmark/bm_app_tarai.rb                               0.173ms |       +0.20%    0.174ms |       -0.34%    0.173ms |       +1.72%    0.176ms | \r\ntest/cruby/benchmark/bm_vm2_method.rb                              0.071ms |       +0.40%    0.071ms |      +10.12%    0.078ms |      +16.99%    0.083ms | \r\ntest/cruby/benchmark/bm_vm2_unif1.rb                               0.072ms |       +0.45%    0.072ms |       -0.79%    0.071ms |      +10.70%    0.079ms | \r\ntest/cruby/benchmark/bm_vm1_lvar_set.rb                            0.322ms |       +0.91%    0.325ms |       -2.01%    0.316ms |       +9.19%    0.352ms | \r\ntest/cruby/benchmark/bm_vm2_method_with_block.rb                   4.916ms |       +0.99%    4.965ms |       +0.51%    4.941ms |       +1.56%    4.993ms | \r\ntest/cruby/benchmark/bm_vm1_lvar_init.rb                           6.904ms |       +1.74%    7.025ms |       +1.00%    6.973ms |      +25.87%    8.691ms | \r\ntest/cruby/benchmark/bm_vm2_defined_method.rb                      0.077ms |       +2.21%    0.079ms |       +0.19%    0.077ms |      +17.20%    0.090ms | \r\ntest/cruby/benchmark/bm_vm1_ensure.rb                              0.351ms |       +2.94%    0.361ms |       +1.09%    0.355ms |       -1.62%    0.345ms | \r\ntest/cruby/benchmark/bm_vm1_attr_ivar.rb                           0.366ms |       +3.59%    0.380ms |       -8.68%    0.335ms |       +4.94%    0.384ms | \r\ntest/cruby/benchmark/bm_hash_values.rb                             2.990ms |       +3.93%    3.107ms |       +3.13%    3.084ms |       +4.51%    3.125ms | \r\ntest/cruby/benchmark/bm_vm2_newlambda.rb                           0.728ms |       +4.41%    0.760ms |       +2.77%    0.748ms |       +5.35%    0.767ms | \r\ntest/cruby/benchmark/bm_vm1_float_simple.rb                        0.463ms |       +4.99%    0.486ms |       +4.94%    0.486ms |       +2.99%    0.477ms | \r\ntest/cruby/benchmark/bm_app_strconcat.rb                           0.029ms |       +5.15%    0.030ms |       +1.45%    0.029ms |      +19.94%    0.035ms | \r\ntest/cruby/benchmark/bm_app_fib.rb                                 0.153ms |       +5.24%    0.161ms |       +2.07%    0.156ms |      +10.11%    0.169ms | \r\ntest/cruby/benchmark/bm_vm1_ivar.rb                                0.363ms |       +5.48%    0.383ms |       -3.93%    0.349ms |      +10.78%    0.403ms | \r\ntest/cruby/benchmark/bm_vm1_yield.rb                               1.740ms |       +7.10%    1.864ms |       +3.26%    1.797ms |      +18.84%    2.068ms | \r\ntest/cruby/benchmark/bm_vm1_ivar_set.rb                            0.341ms |       +8.16%    0.369ms |       +5.88%    0.361ms |       +2.26%    0.349ms | \r\ntest/cruby/benchmark/bm_vm2_struct_small_aref.rb                   0.078ms |       +8.84%    0.085ms |       +8.87%    0.085ms |      +70.65%    0.134ms | \r\ntest/cruby/benchmark/bm_loop_whileloop2.rb                         0.066ms |       +9.17%    0.072ms |       +4.73%    0.069ms |       +0.32%    0.066ms | \r\ntest/cruby/benchmark/bm_vm1_length.rb                              0.557ms |       +9.38%    0.610ms |       +1.57%    0.566ms |      +17.66%    0.656ms | \r\ntest/cruby/benchmark/bm_vm1_rescue.rb                              0.315ms |      +11.17%    0.351ms |       +2.16%    0.322ms |       +4.09%    0.328ms | \r\ntest/cruby/benchmark/bm_hash_flatten.rb                            1.293ms |      +11.48%    1.442ms |       +2.19%    1.321ms |       +5.67%    1.366ms | \r\ntest/cruby/benchmark/bm_app_factorial.rb                           0.011ms |      +12.99%    0.013ms |       -1.10%    0.011ms |      +17.83%    0.013ms | \r\ntest/cruby/benchmark/bm_vm2_struct_big_aref_hi.rb                  0.112ms |      +22.87%    0.137ms |      +31.72%    0.147ms |      +25.66%    0.141ms | \r\ntest/cruby/benchmark/bm_vm1_const.rb                               2.427ms |      +23.46%    2.997ms |      +10.89%    2.692ms |      +20.41%    2.923ms | \r\ntest/cruby/benchmark/bm_vm2_bighash.rb                            17.081ms |      +98.11%   33.840ms |      -32.88%   11.466ms |      +43.34%   24.484ms |\r\n```",
      "conclusions:\r\n- strict mode gives a nice performance boost in nodejs v12.1.0, see  run 1 vs. run 2, run 3 vs. run 4 \r\n- `new String()` has advantages and disadvantages, see  run 1 vs. run 3, run 2 vs. run 4\r\n- strict mode and `new String()` is on average faster than non strict mode with string primitives, see run 2 vs. run 3\r\n",
      "obsolete, Javascript 'boxed' values are to be avoided"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620904ed6ca63ac8d87eb7c",
    "number": 1972,
    "body": "",
    "head_branch": "gcdlcm_fix",
    "is_a_fork": true,
    "comments": [
      "👍👍👍 "
    ],
    "commit_messages": [
      "Merge pull request #1972 from janbiedermann/gcdlcm_fix\n\nInteger#gcdlcm fix"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620904fd6ca63ac8d87eb7d",
    "number": 1970,
    "body": "Final PR for ES6 modules and strict mode, closing #1832 and #1969",
    "head_branch": "es6_modules",
    "is_a_fork": true,
    "comments": [
      "there is a misbehaviour happening with the strictnodejs runner, executing loaded modules not in strict mode, fix is on the way",
      "What? Codeclimate shows Cognitive Complexity of 18? for a few if's? How come?",
      "Cognitive Complexity still at 12, for basically 3 if's, i don't know how to fix. How to fix?",
      "I am happy with this so far.\r\nThe only way i see to support ruby String semantics in \"use strict\" mode is to use new String instead of primitives, see #1973.",
      "Oh my, how is this:\r\n```\r\nOpal::Compiler.module_name_from_paths(module_path.sub(/(?<!\\.rb)\\z/, '.rb'))\r\n```\r\nbetter than this:\r\n```\r\nmodule_path = module_path + '.rb' unless module_path.end_with?('.rb')\r\nOpal::Compiler.module_name_from_paths(module_path)\r\n```\r\nin terms of cognitive complexity? Who will understand `/(?<!\\.rb)\\z/` at first glance?",
      "i accidentially opened a can of worms. how come suddenly there are more problems now?",
      "I think we should split this pull request to ease the review.\r\n\r\nIn my opinion, the first thing to do is to make the Opal runtime strict compliant `opal/corelib/runtime.js` (or at least provide an option to make it strict compliant). \r\nThen we should make sure that the code produced by Opal can be strict compliant.\r\nAnd then add ES6 modules.\r\n\r\nWhat do you think ?\r\n",
      "I think i should explain more my thinking and process.\r\nBy employing webpack more and more and using its features and learning about it, webpack is very cool and may even help with DCE (but also maybe not, not sure yet), it became more and more clear, that it is also the most challanging platform to get things running correctly.\r\nWebpack is rewriting and inserting code a lot.\r\n\r\nSo my reasoning to get strict mode right, is to get it running in webpack right, basically using webpack as test platform for opal strict mode.\r\n\r\nNow the code here in 1970 implements towards the goal:\r\n- ES6 modules, to get things running in webpack in a very modular fashion, to employ hot reloading etc.\r\n- strictnodejs, a opal runner which wraps everything in \"use strict\", intended for testing\r\n- several strict patches from several PRs\r\n- and (upcoming) a runner, which runs tests in a webpack bundle build by owl (upcoming 0.8.0) in a browser\r\n\r\nand then use that to get `use strict` mode and `new String()` right for all environments (node, webpack in browser, webpack npm bundle of opal (for node and browser).\r\n\r\nHaving said that, either way is fine for me.",
      "A Note:\r\nAnother thing webpack does, is that each import has its own context, that's what i suspect may cause problems. Its handled in a way, because imports use `global.Opal`, but there may be cases where in code somewhere just `Opal` is used and may not be resolved properly. ",
      "This branch stays on 1.0 to provide a stable base users of opal-webpack-loader.\r\nWork on this topic for 1.1 continues in #1976.",
      "probably obsolete"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209050d6ca63ac8d87eb7e",
    "number": 1969,
    "body": "This is based on PR#1832 and\r\n- adds a runner for strict mode, `node --use-strict`\r\n- cherry-picks strict patches from @Mogztter \r\n\r\nWith the goal to have a clean ES6 import/export solution for Webpack and a fully functional runtime for javascripts strict mode",
    "head_branch": "es6_im_ex_strict",
    "is_a_fork": true,
    "comments": [
      "Still to to:\r\n\r\n- [x] test for encoding on string instance\r\n- [x] don't make everything use strict by default\r\n- [x] add more defineProperty cases from @Mogztter \r\n- [x] correct author -> in the next PR",
      "superseded by PR#1970"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209051d6ca63ac8d87eb7f",
    "number": 1963,
    "body": "Resolves #1962",
    "head_branch": "issue-1962-exception-stack",
    "is_a_fork": true,
    "comments": [
      "Thanks :)"
    ],
    "commit_messages": [
      "Merge pull request #1963 from Mogztter/issue-1962-exception-stack\n\nPreserve Exception.stack"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209052d6ca63ac8d87eb80",
    "number": 1959,
    "body": "Resolves #1958",
    "head_branch": "issue-1958-scope-null",
    "is_a_fork": true,
    "comments": [
      "@elia I've tried to do as little change as possible but I think we have to address the `String#force_encoding` first.\r\nI'm pretty sure my hack is not accurate but at the same time encoding in Ruby and JavaScript does not work in the same way and I can't think of any other solution to this problem...",
      "Merged (except for the CLI option) in #2023 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209052d6ca63ac8d87eb81",
    "number": 1957,
    "body": "",
    "head_branch": "elia/native-fixes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1957 from opal/elia/native-fixes\n\nA couple of small fixes to ::Native"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209053d6ca63ac8d87eb82",
    "number": 1955,
    "body": "",
    "head_branch": "stacktrace-undefined",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1955 from Mogztter/stacktrace-undefined\n\nexceptionDetails.stackTrace can be undefined"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209054d6ca63ac8d87eb83",
    "number": 1954,
    "body": "",
    "head_branch": "do-not-use-this",
    "is_a_fork": true,
    "comments": [
      "Actually I might be wrong, because `this` in the closure must resolve to the global scope `window`..."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209055d6ca63ac8d87eb84",
    "number": 1953,
    "body": "",
    "head_branch": "this-node-process",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1953 from Mogztter/this-node-process\n\nthis is unnecessary (and will be undefined in strict mode)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209056d6ca63ac8d87eb85",
    "number": 1952,
    "body": "",
    "head_branch": "runtime-strict",
    "is_a_fork": true,
    "comments": [
      "I have yet to find the solution but I've opened a few easy to review pull requests to prepare the ground (mostly one line fixes)",
      "In PR#1832, Opal.in_strict_mode is available, a boolean, which allows during runtime for checking if running in strict mode, maybe that's useful\r\nhttps://github.com/opal/opal/pull/1832/commits/ecad156522765627c29cd441ebeef9d00325859a\r\n",
      "I believe that this pull request has been superseded. Should I close?",
      "Yes please.",
      "Ooops, that wasnt my PR, sorry."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209057d6ca63ac8d87eb86",
    "number": 1951,
    "body": "While working on #1949 I found an issue in the `ascii_only?` implementation.\r\nThis implementation is a little less wrong but still failing on:\r\n\r\n```rb\r\n\"hello\".force_encoding(\"UTF-16LE\").ascii_only? # should be false\r\n```\r\n\r\nThe main issue is that the default encoding in JavaScript is `UTF_16LE` and in Ruby this encoding is considered \"non-ASCII-compatible\".\r\nUnfortunately Opal can't tell the difference between:\r\n\r\n- `\"hello\".force_encoding(\"UTF-16LE\")`\r\n- `\"hello\"`\r\n\r\nSo we cannot return false in the first case and true in the second case... send help!\r\n",
    "head_branch": "fix-is-ascii",
    "is_a_fork": true,
    "comments": [
      "Also I don't get why Ruby returns false in the following case:\r\n\r\n```rb\r\n\"\".force_encoding(\"UTF-16LE\").ascii_only? # false\r\n```\r\n\r\nIt feels wrong no ?\r\nI mean it does not contain any non ASCII (it does not even contain anything).\r\nEven the above is weird:\r\n\r\n```rb\r\n\"hello\".force_encoding(\"UTF-16LE\").ascii_only? # false\r\n```\r\n\r\n\"hello\" is ASCII only, the encoding might not be \"non-ASCII-compatible\" but that's not really what we asked no ?\r\n\r\n"
    ],
    "commit_messages": [
      "Merge pull request #1951 from Mogztter/fix-is-ascii\n\nMake ascii_only a little less wrong"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209058d6ca63ac8d87eb87",
    "number": 1949,
    "body": "#### Tasks\r\n\r\n- [x] `Uncaught TypeError: Cannot assign to read only property 'length' of function 'function() ...`\r\n- [ ] `Uncaught SyntaxError: Duplicate parameter name not allowed in this context`\r\nThe following code is not strict-compliant:\r\n\r\n```js\r\nfunction hello(_, _) {\r\n  console.log('hello')\r\n}\r\n```\r\nException thrown by `spec/ruby/language/fixtures/super.rb` when the module `ZSuperWithUnderscores` defines the following methods:\r\n\r\n```rb\r\ndef m(_, _)\r\n  super\r\nend\r\n\r\ndef m_modified(_, _)\r\n  _ = 14\r\n  super\r\nend\r\n```\r\n\r\nI don't know exactly what the code is supposed to do... does it make sense in Ruby to do something like this ?\r\nWe could fix this issue by making sure that the generated code does not contain two or more parameters with the same name (ie. for instance by adding a counter to the parameter name).\r\n\r\nEDIT: in `m_modified`, the value 14 will be assigned to the first parameter. So the code is equivalent to:\r\n\r\n```rb\r\ndef m_modified(_1, _2)\r\n  _1 = 14\r\n  super\r\nend\r\n```\r\nEDIT2: the current implementation is not working :disappointed: \r\n\r\n* [ ] `undefined : Cannot create property 'encoding' on string ')'`\r\n* [ ] `TypeError: Cannot create property '$$meta' on string 'abc'`\r\n```\r\n$defineProperty\r\nObject.Opal.build_object_singleton_class\r\n```\r\n",
    "head_branch": "runtime-strict",
    "is_a_fork": true,
    "comments": [
      "The main challenge is probably to find a way to define properties on string primitive. Technically creating a new String object and using `Object.defineProperty` is working but:\r\n\r\n- `$defineProperty` in `runtime.js` is expected to add a property on the instance passed as argument\r\n- Performance wise it's likely a bad idea",
      "Superseded by #1952"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209059d6ca63ac8d87eb88",
    "number": 1948,
    "body": "Just a tiny cleanup to add missing semi-colon to terminate statement and remove unnecessary semi-colon.",
    "head_branch": "runtime-format",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1948 from Mogztter/runtime-format\n\nTerminate statement with semi-colon and remove unecessary semi-colon"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620905ad6ca63ac8d87eb89",
    "number": 1947,
    "body": "Follow-up #1944",
    "head_branch": "each-codepoint-inline",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1947 from Mogztter/each-codepoint-inline\n\nInline codePointAt in the yield"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620905bd6ca63ac8d87eb8a",
    "number": 1946,
    "body": "A typo in the error message generation was raising the same error class we\r\nwere expecting, so this error went unnoticed for some time.",
    "head_branch": "elia/fix-class-native-alias-error",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1946 from opal/elia/fix-class-native-alias-error\n\nFix Class#native_alias error message"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620905bd6ca63ac8d87eb8b",
    "number": 1945,
    "body": "When `<=>` raises an exception, `Comparable#==` now lets it go\r\nthrough.\r\n\r\nAlso, methods of `Comparable` now raises ArgumentError with a message\r\nmore similar to MRI when `<=>` does not return Integer.\r\n```ruby\r\na = Object.new\r\na.extend Comparable\r\ndef a.<=>(other)\r\n  nil\r\nend\r\n\r\na < 1\r\n#=> comparison of Object with Number failed (Opal)\r\n#=> comparison of Object with 1 failed (MRI and Opal with this PR)\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1945 from takaram/master\n\nFix methods of `Comparable` when `<=>` does not return Numeric"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620905cd6ca63ac8d87eb8c",
    "number": 1944,
    "body": "Probably a naive implementation but I was able to enable quite a few specs :wink:  \r\n\r\nResolves #1943\r\n\r\n\r\n//cc @mojavelinux ",
    "head_branch": "issue-1943-string-each-codepoint",
    "is_a_fork": true,
    "comments": [
      "I accidentally merged this one from an iOS  application that made it all too easy 😅. I’ll leave it merged, the outstanding change was a small one and I can fix it directly on master 👍\n\nThanks for the steady flow of PRs and fixes @mogztter!! 💪🙏\nOn 6 Mar 2019, 07:29 +0100, Elia Schito <notifications@github.com>, wrote:\n> Merged #1944 into master.\n> —\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n",
      "> I accidentally merged this one from an iOS  application that made it all too easy sweat_smile. \r\n\r\n:ship: :ship: :ship: \r\n\r\n> Thanks for the steady flow of PRs and fixes @Mogztter!! \r\n\r\nYou're welcome :hugs: \r\n\r\n> I’ll leave it merged, the outstanding change was a small one and I can fix it directly on master\r\n\r\nI'll take care of it :wink: \r\n\r\n"
    ],
    "commit_messages": [
      "Merge pull request #1944 from Mogztter/issue-1943-string-each-codepoint"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620905dd6ca63ac8d87eb8d",
    "number": 1941,
    "body": "resolves #1940",
    "head_branch": "issue-1940-utc-offset",
    "is_a_fork": true,
    "comments": [
      "@Mogztter is there any rubyspec we can enable along with the fix?",
      "We could enable https://github.com/ruby/spec/blob/master/core/time/shared/gmt_offset.rb but I'm not sure `with_timezone` will work in Opal (and all tests will fail).\r\nI've only fixed the offset when the date is UTC. When the date is not UTC and has a different timezone than the local date then `gmt_offset` is still wrong.\r\n\r\nSo I guess we could add our own spec, I believe an UTC date should return 0 as `utc_offset`.\r\n\r\nWe could also add a spec in https://github.com/ruby/spec/blob/master/core/time/shared/gmt_offset.rb to add:\r\n\r\n```rb\r\nTime.new.utc.send(@method).should == 0\r\n```",
      "> I've only fixed the offset when the date is UTC. When the date is not UTC and has a different timezone than the local date then `gmt_offset` is still wrong.\r\n\r\nHave you seen [`getUTCHours`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCHours)? looks like it does the right thing\r\n\r\n> So I guess we could add our own spec\r\n\r\nThat's acceptable 👍 \r\n\r\n> We could also add a spec…\r\n\r\nThat would begreat 👍👍👍 ",
      "> Have you seen [`getUTCHours`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCHours)? looks like it does the right thing\r\n\r\nLooks promising but it does not exactly what we want.\r\n\r\n```js\r\nvar date1 = new Date('December 31, 1975, 23:15:30 GMT+11:00');\r\nvar date2 = new Date('December 31, 1975, 23:15:30 GMT-11:00');\r\n\r\nconsole.log(date1.getUTCHours());\r\n// expected output: 12\r\n\r\nconsole.log(date2.getUTCHours());\r\n// expected output: 10\r\n```\r\nIn our case we want the UTC offset:\r\n* `date1` UTC offset is equal to `+11`\r\n* `date2` UTC offset is equal to  `-11`\r\n\r\nWe could do something like:\r\n\r\n```js\r\nconsole.log(date1.getHours() - date1.getUTCHours());\r\n// expected output: 11\r\n\r\nconsole.log(date2.getHours() - date2.getUTCHours());\r\n// expected output: 13\r\n```\r\n\r\nBut as you can see the second example is wrong because the offset is negative, but we don't know that... we could then check if the `getUTCDate` is the same as `getDate`, if not that would indicate that the date changed:\r\n\r\n\r\n```js\r\nconsole.log(date1.getHours() - date1.getUTCHours());\r\n// expected output: 11\r\n\r\nif (date2.getDate() !== date2.getUTCDate()) {\r\n  console.log(-((24 - date2.getHours()) + date2.getUTCHours()));\r\n  // expected output: -11\r\n}\r\n```\r\n\r\nBut we should also make sure that it works when the date decreased, for instance when the date is `December 31, 1975, 09:15:30 GMT+11:00`.\r\nSo it's not pretty but potentially not wrong :wink: \r\n\r\nHopefully tests will save us all :laughing: \r\n",
      "It's not working because `getHours` is not the date hours but the local date hours. For instance I'm currently UTC+2:\r\n\r\n```js\r\nnew Date('2012/04/10 10:10:30 +0300').getUTCHours()\r\n// 7\r\n\r\nnew Date('2012/04/10 10:10:30 +0300').getHours()\r\n// 9\r\n```\r\n\r\nI would expect `getHours` to return `10` but since I'm UTC+2, the local date hours is `10 + 2 - 3 = 9`.",
      "I've added a spec in Opal to make sure that an UTC date returns 0 as UTC offset: https://github.com/ruby/spec/pull/660\r\n\r\nI think we should merge this quick fix and open a new issue to properly handle timezones.\r\n"
    ],
    "commit_messages": [
      "Merge pull request #1941 from Mogztter/issue-1940-utc-offset\n\ngmt_offset (alias utc_offset) should return 0 if the date is utc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620905ed6ca63ac8d87eb8e",
    "number": 1939,
    "body": "As suggested in https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval.",
    "head_branch": "elia/avoid-eval",
    "is_a_fork": false,
    "comments": [
      "From I understand `Function(code)` works like `TOPLEVEL_BINDING.eval(code)`, i.e. it prevents potential usage of local variables. Is that correct? 👍 if so",
      "esbuild prints warnings about eval() when bundling opal code. They suggest Function too. They suggest 2 alternatives:\r\n\r\nhttps://esbuild.github.io/content-types/#direct-eval"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620905fd6ca63ac8d87eb8f",
    "number": 1938,
    "body": "Just in time :sweat_smile: ",
    "head_branch": "happy-new-year-2019",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1938 from Mogztter/happy-new-year-2019\n\n🎉🎉🎉 Happy New Year!"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209060d6ca63ac8d87eb90",
    "number": 1937,
    "body": "Commit: https://github.com/ruby/spec/commit/a5654391c23a783cee76de3c279d7616b4683c92\r\n\r\n* chomp must return an empty String when arg == self\r\n* Array#difference should run shared specs for 'difference' method",
    "head_branch": "rspec-up",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1937 from Mogztter/rspec-up\n\nUpdate RubySpec"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209061d6ca63ac8d87eb91",
    "number": 1936,
    "body": "New Ruby spec: https://github.com/ruby/spec/pull/653\r\n\r\nResolves #1902\r\n\r\n",
    "head_branch": "issue-1902-string-chomp-one-char",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1936 from Mogztter/issue-1902-string-chomp-one-char\n\nchomp must return an empty String when arg == self"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209062d6ca63ac8d87eb92",
    "number": 1935,
    "body": "This is a special case where the assignment happens if either the constant has\r\na falsey value or the constant is not yet defined.\r\n\r\nFixes #672",
    "head_branch": "elia/fix-const-optional-logical-assignment",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1935 from opal/elia/fix-const-optional-logical-assignment\n\nFix ||= on constants"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209063d6ca63ac8d87eb93",
    "number": 1934,
    "body": "Using: https://github.com/jshttp/content-type/blob/7792f4f41e9c31b90d97cf671e152432957c3b44/index.js",
    "head_branch": "open-uri-charset",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209064d6ca63ac8d87eb94",
    "number": 1932,
    "body": "To simplify updating to 2.6. Parser is ready (it just needs to be released, atm it complains about `2.6.0-dev` version, but it includes all changes from MRI), RubySpec repo is also updated (at least for specs that we may support)",
    "head_branch": "update-rubyspecs-and-mspecc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update RubySpec and MSpec. (#1932)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209065d6ca63ac8d87eb95",
    "number": 1931,
    "body": "Uses the environment variable `OPAL_PLATFORM_NAME` and `OPAL_POINTER_SIZE`.",
    "head_branch": "platform-is-yield",
    "is_a_fork": true,
    "comments": [
      "@elia I've also rebased on master and added a few more specs to `bugs/file.rb`. The reason is that `Dir.home` with an argument is not implemented. As far as I know there's no API in Node.js to determine the home directory of a given user. What we could do is test if the user argument is equals to the current user? That would cover another case but otherwise we should raise a \"not implemented\" error.\r\nAnyway I don't want to implement this solution in this pull request.",
      "@elia I've ingored Windows specific failures in 4c0cf19c376396af704ca2e7509989e3ba884c8b",
      "Rebased on master.\r\n\r\n**master**\r\n```\r\n1504 files, 13266 examples, 54666 expectations, 0 failures, 0 errors, 2100 tagged\r\n11273 examples, 0 failures (time taken: 11.33400011062622)\r\n```\r\n\r\n**patch**\r\n```\r\n1503 files, 13602 examples, 54892 expectations, 0 failures, 0 errors, 2188 tagged\r\n11521 examples, 0 failures (time taken: 11.473000049591064)\r\n```\r\n",
      "@Mogztter can you rebase/fixup one more time please? After that I think we're good 👍 ",
      "@elia Branch rebased. I didn't squash the commit to preserve the authors but maybe we could squash the first two and the last two.",
      "> @elia Branch rebased. I didn't squash the commit to preserve the authors but maybe we could squash the first two and the last two.\r\n\r\n@Mogztter I'm fine, go ahead and squash it (I usually do it with `git rebase -i --autosquash origin/master`), I have enough commits on this repo that I can spare one 😄",
      "And done!\r\n\r\n>  I have enough commits on this repo that I can spare one\r\n\r\nI will take all the glory then :crown: :laughing: "
    ],
    "commit_messages": [
      "Merge pull request #1931 from Mogztter/platform-is-yield\n\nImplement PlatformGuard for mspec"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209066d6ca63ac8d87eb96",
    "number": 1930,
    "body": "Reduce compiled size (if you don't need this module)\r\n\r\nResolves #1927",
    "head_branch": "issue-1927-kernel-format",
    "is_a_fork": true,
    "comments": [
      "I don't think the Appveyor failure is related:\r\n\r\n```\r\n1) Failure:\r\nTestBenchmark#test_realtime_output [Assertion: Expected 1 to be < 0.9875479999999999.]:\r\nExpected 1 to be < 0.9875479999999999.\r\n125 runs, 549 assertions, 1 failures, 0 errors, 13 skips\r\nYou have skipped tests. Run with --verbose for details.\r\n```\r\n\r\nAnd Codeclimate complains about the size of the `format.rb` file and the size of the `format` method :laughing: \r\n\r\nEDIT: failure is gone :smile: ",
      "@elia Let me know if you need help with CodeClimate to configure it. It seems that I don't have the right to ignore false positive.",
      "> Can you also reformat the commit message to look like this?\r\n\r\nSure I will do it tomorrow :wink: ",
      "@elia this pull request should be OK. I've addressed all the comments. I will force push to trigger another build :wink: "
    ],
    "commit_messages": [
      "Merge pull request #1930 from Mogztter/issue-1927-kernel-format\n\nMove Kernel#format (and sprintf alias) to a dedicated file"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209067d6ca63ac8d87eb97",
    "number": 1928,
    "body": "Do not merge, I will add tests (and probably other methods like `keys`, `length`, `has_key?`... i an another pull request)",
    "head_branch": "patch-9",
    "is_a_fork": true,
    "comments": [
      "@Mogztter good! 👍 \r\n\r\nHere's a list of all the methods defined on ENV on MRI. At this point I think it makes sense to extract ENV in its own file and leave it out of the default Opal corelib list.",
      "> Here's a list of all the methods defined on ENV on MRI.\r\n\r\n:eyes: \r\n\r\n> At this point I think it makes sense to extract ENV in its own file and leave it out of the default Opal corelib list.\r\n\r\nI've moved all methods to a file named `env.rb` but I think we should require this file in `stdlib/nodejs.rb` (to be backward compatible).\r\nAlso the task `bundle exec rake dist` only generates `nodejs.js`.",
      "> I've moved all methods to a file named `env.rb` but I think we should require this file in `stdlib/nodejs.rb` (to be backward compatible).\r\n\r\nGo for it, actually in Node.js the bundle size it's not a big problem (as it is for browsers), so we should err on the side of more stuff.\r\n\r\n> Also the task `bundle exec rake dist` only generates `nodejs.js`.\r\n\r\nFeel free to tweak it as you see fit, btw I think we should better/officially support node & webpack, moving some of the more specific stuff to a separate repo (e.g. node_modules), but that's not for this PR of course.",
      "> Go for it, actually in Node.js the bundle size it's not a big problem (as it is for browsers), so we should err on the side of more stuff.\r\n\r\nIndeed size does not matter that much in Node.js but we still have to be careful because the initialization might take longer.\r\n\r\n> Feel free to tweak it as you see fit, btw I think we should better/officially support node & webpack, moving some of the more specific stuff to a separate repo (e.g. node_modules), but that's not for this PR of course.\r\n\r\nThat would be great, and we could maybe merge with https://github.com/mogztter/opal-node-runtime to produce a package on npmjs.\r\n\r\nI don't want to implement all the methods available on MRI for now. The main reason is that I want to keep the implementation as simple as that and arguably I've already implemented the most common methods :grinning: \r\n\r\nIf you think we should implement a few more or all, please just let me know.\r\n",
      "@Mogztter can you squash the commits (keeping \"Resolves #1923\" in the commit description)?\r\nApart from that it's ready to be merged.",
      "@elia Done, I've also added a changelog in `UNRELEASED.md`."
    ],
    "commit_messages": [
      "Merge pull request #1928 from Mogztter/patch-9\n\nResolves #1923 Implement ENV.key? in Node.js"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209068d6ca63ac8d87eb98",
    "number": 1926,
    "body": "",
    "head_branch": "jruby-bundler-lt-2",
    "is_a_fork": true,
    "comments": [
      "@elia bundler issue is gone with this fix but the build is still failing on some tests:\r\n\r\n\r\n```\r\nInteger#to_f bignum returns self converted to a Float FAILED\r\nExpected 13835069737789293000 to have same value and type as 13835069737789300000\r\nSpecExpectationNotMetError: Expected 13835069737789293000 to have same value and type as 13835069737789300000\r\n```\r\n\r\n```\r\nInteger#to_f bignum returns self converted to a Float FAILED\r\nExpected 13835069737789293000 to have same value and type as 13835069737789300000\r\nSpecExpectationNotMetError: Expected 13835069737789293000 to have same value and type as 13835069737789300000\r\n```",
      "@Mogztter Could you add these 2 specs into `filters/bugs` please? I don't understand why they pass on other rubies.",
      "@iliabylich Sure, I will do it tomorrow 😀 \r\n\r\n> I don't understand why they pass on other rubies.\r\n\r\nThe value is rounded ? 🤔 ",
      "Build is green again :smile: "
    ],
    "commit_messages": [
      "Merge pull request #1926 from Mogztter/jruby-bundler-lt-2\n\nFix JRuby build on master"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209069d6ca63ac8d87eb99",
    "number": 1925,
    "body": "Fixes #1922",
    "head_branch": "issue-1922-file-absolute-path",
    "is_a_fork": true,
    "comments": [
      "@elia Done :+1: ",
      "I've also added `ruby/core/file/expand_path_spec` and there's a few errors.\r\nI've fixed a few and added the rest in `bugs/file.rb`.\r\n\r\nI think we should be able to fix a few more (related to the leading separator) but I'm not familiar with the code. I will give it a try though :wink: ",
      "@elia The `platform_is` and `platform_is_not` methods and associated blocks are not executed (`before :each` is called though):\r\n\r\n```rb\r\ndescribe \"File.expand_path\" do\r\n  before :each do\r\n    platform_is :windows do # not executed\r\n      @base = `cd`.chomp.tr '\\\\', '/'\r\n      @tmpdir = \"c:/tmp\"\r\n      @rootdir = \"c:/\"\r\n    end\r\n\r\n    platform_is_not :windows do # not executed\r\n      @base = Dir.pwd\r\n      @tmpdir = \"/tmp\"\r\n      @rootdir = \"/\"\r\n    end\r\n  end\r\n  # ...\r\nend\r\n```\r\n\r\nSo `@base` is \"undefined\" that's why some specs are failing. I'm not sure how we should fix this issue since the code is a submodule... :thinking: \r\n\r\nEDIT: Is it possible to get the generated JavaScript code when running `bundle exec rake mspec_ruby_nodejs` ? As far as I understand we are using stubs so `platform_is` and `platform_is_not` are probably stubbed.\r\nWe could copy/paste this file and adapt the code to run the full tests suite against Node.js ?",
      "> EDIT: Is it possible to get the generated JavaScript code when running `bundle exec rake mspec_ruby_nodejs` ? As far as I understand we are using stubs so `platform_is` and `platform_is_not` are probably stubbed.\r\n\r\nIt's possible. The rake task intentionally prints the full executed command, you can just add a `--compile` to the opal command to enable compilation (I often add a `--runner=server` to debug with devtools from chrome or safari).\r\n\r\nThe two methods are managed at compiler level here: https://github.com/opal/opal/blob/4a5f11d8200c1297073248cb200695371a474e40/tasks/testing/mspec_special_calls.rb#L32-L46\r\n",
      "Follow-up pull request to execute `platform_is` and `platform_is_not` blocks: https://github.com/opal/opal/pull/1931"
    ],
    "commit_messages": [
      "Merge pull request #1925 from Mogztter/issue-1922-file-absolute-path\n\nImplement File#absolute_path"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620906ad6ca63ac8d87eb9a",
    "number": 1924,
    "body": "",
    "head_branch": "file-expand-path-nodejs",
    "is_a_fork": true,
    "comments": [
      "If it's not too complicated can you embed these changes inside #1925 ?",
      "No not at all.\r\nI actually did this on purpose to not mix a \"bug fix\" (adding a missing functionality) and a new feature (adding a new method).\r\nBut if it's easier for you then I will merge both.",
      "> But if it's easier for you then I will merge both.\r\n\r\nYeah, thanks, they're related, this way we can have the whole picture",
      "Superseded by #1925  "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620906bd6ca63ac8d87eb9b",
    "number": 1921,
    "body": "",
    "head_branch": "node-force-encoding",
    "is_a_fork": true,
    "comments": [
      "@Mogztter if this is targeted to Node.js I think would be less hacky to use TextEncoder, e.g.:\r\n\r\n```js\r\n> var uint8array = new TextEncoder().encode(\"😍\");\r\nundefined\r\n> new TextDecoder('utf8').decode(uint8array);\r\n'😍'\r\n> new TextDecoder('ascii').decode(uint8array);\r\n'ðŸ˜'\r\n> process.version\r\n'v11.0.0'\r\n> \r\n```\r\n\r\nThe polyfill repo has a decent explanation + examples: https://github.com/inexorabletash/text-encoding\r\n\r\nOtherwise, here's the MDN page for it: https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder",
      ">  if this is targeted to Node.js I think would be less hacky to use TextEncoder, e.g.:\r\n\r\nOH! I didn't know that `TextEncoder` and `TextDecoder` are now available natively in Node.js using the `util` module:\r\n\r\n```js\r\nconst TextEncoder = require('util').TextEncoder\r\nconst TextDecoder = require('util').TextDecoder\r\n\r\nvar uint8array = new TextEncoder().encode(\"😍\")\r\nconsole.log(new TextDecoder('utf8').decode(uint8array))\r\n```\r\n\r\nThe support is also pretty good on browsers except Edge but I expect that to change once Edge runs on Chromium (if we want to implement something similar).\r\n\r\nI will update my pull request, thanks for the heads-up :+1: ",
      "> Added in: v8.3.0\r\n\r\nI don't think it's a problem since we are now supporting only active LTS ?",
      "The following code will work for non-utf8 files:\r\n\r\n```js\r\nconst TextEncoder = require('util').TextEncoder\r\nconst TextDecoder = require('util').TextDecoder\r\nconst textDecoder = new TextDecoder()\r\nconst utf8Encoder = new TextEncoder('utf-8')\r\n\r\n// iso-8859-1 file as utf8\r\nconst isobuf = require('fs').readFileSync('./iso88591.txt')\r\ntextDecoder.decode(utf8Encoder.encode(isobuf.toString('binary'))) // çéà\r\n\r\n// win1258 file as utf8\r\nconst winbuf = require('fs').readFileSync('./win1258.txt')\r\ntextDecoder.decode(utf8Encoder.encode(winbuf.toString('binary'))) // çéà\r\n```\r\n\r\nBut it won't work for utf8 encoded files:\r\n\r\n```js\r\n// utf8 file as utf8\r\nconst utf8text = require('fs').readFileSync('./utf8.txt')\r\ntextDecoder.decode(utf8Encoder.encode(utf8text.toString('binary'))) // Ã§Ã©Ã\r\n```\r\n I was using the `try/catch` block to coerce to utf8 only when needed. I guess we could do that using something like: https://github.com/wayfind/is-utf8/blob/master/is-utf8.js ? But maybe I'm missing something ?"
    ],
    "commit_messages": [
      "Merge pull request #1921 from Mogztter/node-force-encoding\n\nRead encoded files and force encode to utf-8 (binary mode)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620906cd6ca63ac8d87eb9c",
    "number": 1920,
    "body": "",
    "head_branch": "content-type-null",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1920 from Mogztter/content-type-null\n\nreq.getResponseHeader can return null"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620906cd6ca63ac8d87eb9d",
    "number": 1919,
    "body": "",
    "head_branch": "nodejs-file-binary",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1919 from Mogztter/nodejs-file-binary\n\nSupport binary data in File#read (Node.js)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620906dd6ca63ac8d87eb9e",
    "number": 1918,
    "body": "",
    "head_branch": "update-mspec-and-rubyspecs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1918 from iliabylich/update-mspec-and-rubyspecs\n\nUpdate MSpec and RubySpec."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620906ed6ca63ac8d87eb9f",
    "number": 1917,
    "body": "Sorry for the spam 😄 ",
    "head_branch": "fix-specs-in-elia/allocate-a-class-object-for-bridged-classes",
    "is_a_fork": false,
    "comments": [
      "👍 thanks, I had some of this stuff done locally, I embedded a couple of commits in https://github.com/opal/opal/pull/1909 🚀"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620906fd6ca63ac8d87eba0",
    "number": 1916,
    "body": "",
    "head_branch": "fix-specs-in-elia/allocate-a-class-object-for-bridged-classes",
    "is_a_fork": true,
    "comments": [
      "@elia I guess we don't run CI if PR is not for the master branch, right?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209070d6ca63ac8d87eba1",
    "number": 1915,
    "body": "",
    "head_branch": "elia/travis-updates",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1915 from opal/elia/travis-updates\n\nTravis updates: 2.6 & truffleruby"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209071d6ca63ac8d87eba2",
    "number": 1914,
    "body": "Replace the custom (hackish) class with a simple (hackish) helper function.\r\nThis has the advantage of having one less Opal-specific class and avoids the\r\ncall to `super` when doing `String#+`.",
    "head_branch": "elia/remove-marshal-binary-string",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1914 from opal/elia/remove-marshal-binary-string\n\nRemove Marshal::BinaryString"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209072d6ca63ac8d87eba3",
    "number": 1913,
    "body": "",
    "head_branch": "issue-1912-upgrade-glob",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1913 from Mogztter/issue-1912-upgrade-glob\n\nResolves #1912, Upgrade glob to 7.1.3 (with Node.js 8.11)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209073d6ca63ac8d87eba4",
    "number": 1911,
    "body": "Replace xmlhttprequest with a fork (unxhr) to support binary data.\r\nThe fork library also avoid the creation of a temporary file.",
    "head_branch": "open-uri-binary-data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Support binary data in OpenURI (#1911)\n\nReplace xmlhttprequest with a fork (unxhr 1.0.1) to support binary data.\r\nThe fork library also avoid the creation of a temporary file."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209074d6ca63ac8d87eba5",
    "number": 1910,
    "body": "Here's a list of changes:\r\n\r\n- trying to define singleton methods on string/number will raise a TypeError, just like it would in MRI for numbers and frozen strings\r\n- dropped the `TMP_name_1` format on temp vars in favor of `$name$1`, should be easier to follow compiled code when sourcemaps ain't enough.\r\n- set the displayName on methods, this way we'll get much more readable stack traces, avoiding that browser heuristic for which they'll pick the TMP var name instead of the method name",
    "head_branch": "elia/misc-improvements",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1910 from opal/elia/misc-improvements\n\nmisc improvements"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209075d6ca63ac8d87eba6",
    "number": 1909,
    "body": "Fixes https://github.com/opal/opal/issues/1846\r\n\r\nBasically creates class objects for bridged classes instead of using the native constructor.\r\n\r\n_I'll refine the commits once the PR is working properly and the solution is confirmed_\r\n\r\n",
    "head_branch": "elia/allocate-a-class-object-for-bridged-classes",
    "is_a_fork": false,
    "comments": [
      "WOW! I was thinking for such a long time how to fix it 😄 \r\n```\r\n$ opal-repl\r\n>> `String.call(null, \"test\")`\r\n=> \"test\"\r\n```\r\n\r\nAll specs from RubySpec are passing. Want me to help fixing the rest?",
      "🎉🎉🎉\r\n\r\n@elia Any performance impact that you are aware of ?",
      "> @elia Any performance impact that you are aware of ?\r\n\r\nI don't think there's any, this generally can only affect startup time, and a few more objects (probably less than 10) won't make any difference 👍 "
    ],
    "commit_messages": [
      "Merge pull request #1909 from opal/elia/allocate-a-class-object-for-bridged-classes\n\nAllocate a class object for bridged classes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209076d6ca63ac8d87eba7",
    "number": 1908,
    "body": "This pull request aims to solve issue #1907. By checking to see if `block.$$arity` is available, we ensure that any block parameters containing a splat operator will have the correct length. JavaScript functions will continue to use `block.length`.",
    "head_branch": "splat_bug",
    "is_a_fork": true,
    "comments": [
      "I'm not completely understanding the failure and can't find it in the files. I manually patched and tested this pull request in try opal as well as a production rails app and everything seemed to work fine.",
      "> I'm not completely understanding the failure and can't find it in the files. I manually patched and tested this pull request in try opal as well as a production rails app and everything seemed to work fine.\r\n\r\nThat's fine, this is one of the trickiest part of Ruby, and the Ruby Spec catches a number of corner cases that are very unlikely in most codebases. I'll look into that and see if I can give you any hint on how to fix that test, but maybe you'll get there first 🙂. \r\n\r\nMeanwhile, thanks for your contribution! Feel free to ask if you bump into anything that's too obscure or for any guidance 👍 ",
      "I managed to find the cause of the failure, which is related to how `arity` deals with optional arguments (splat or keyword).\r\n\r\nA solution would be to remove `Math.abs` and instead deconstruct if `block_length` has a value of `< 0` or `> 1`\r\n\r\nSo a (not super pretty) fix would look like\r\n```\r\nvar block_length = (block.$$arity ? block.$$arity : block.length)\r\n\r\n...\r\n\r\nif (((block_length > 1 || block_length < 0) || (has_trailing_comma && block_length === 1)) && arg.$$is_array) {\r\n      return block.apply(null, arg);\r\n    }\r\n```\r\nWhen reproducing the failing test in try opal, this solution returned the expected value and passed my production rails app test. I'm attempting to refactor the code to read a little better before pushing my changes.\r\n\r\nThanks for making yourself available for any questions! I'm sure I'll come up with a few.",
      "Well, the one failing test is now passing.... but I seemed to have spawned 18 new failing tests :disappointed_relieved:\r\n\r\nI just set up the test environment locally, which I should have done in the first place. Sorry about that. \r\n\r\nHopefully, we can get this all green!  ",
      "@iamprich that's fine, you got into one of the most difficult places you could pick 😄 I'm also super happy to hear you've got the dev setup up and running locally 👍 ",
      "I rebased this to the current master with a new PR #2250. I would rather force push it... but the repo vanished."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209077d6ca63ac8d87eba8",
    "number": 1906,
    "body": "Bump travis test versions to the latest ruby minors",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Bump travis Ruby versions (#1906)\n\n* Bump travis ruby versions\r\n\r\n* Also bump jruby version"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209078d6ca63ac8d87eba9",
    "number": 1905,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209079d6ca63ac8d87ebaa",
    "number": 1904,
    "body": "Parser has added support for Ruby 2.3.7, Ruby 2.4.5 and Ruby 2.5.3. Currently the version of Parser that's required by Opal support only up to Ruby 2.4.4, this should take care of that.\r\n\r\nSee: https://github.com/whitequark/parser/pull/528\r\n\r\nAlso do note that the latest Opal 0.11.4 still has `spec.add_dependency 'parser', '= 2.3.3.1'` even though the bump to a 2.5.x version was made 8 months ago, and 0.11.4 was released less than a month ago.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "`bundle install` doesn't work on your branch. We need to bump https://github.com/opal/c_lexer first, I'll do it in a few hours",
      "@rene-demonsters Done - https://rubygems.org/gems/c_lexer/versions/2.5.3.0.0. Could you bump it in the Gemfile please?",
      "@iliabylich I bumped it, but it fails to build native extensions, see: https://travis-ci.org/opal/opal/jobs/461790306\r\n\r\nThe new commit is just because I made a small mistake with bumping, forgot to add a .0 so it'll still fail on that once it gets to that point.",
      "2.1.1 is dead - https://www.ruby-lang.org/en/downloads/branches/ could you remove it from the build matrix please? I don't want to adapt c_lexer to dead version of ruby 😄 (same for 2.2.x btw)",
      "I've dropped both from the matrix. If you want 2.2 back I can add it back.",
      "Actually shouldn't I bump the other versions in Travis to the latest ones as well?",
      "well, we can do it, but I think that's not necessary atm. I can't remember any important changes in minor versions.",
      "> well, we can do it, but I think that's not necessary atm. I can't remember any important changes in minor versions.\r\n\r\nIt would've caught being behind on the parser version sooner? Parser only supports the last minor version of each ruby: https://github.com/whitequark/parser#compatibility-with-ruby-mri",
      "> Parser only supports the last minor version of each ruby\r\n\r\nParser **parses** as the last minor version of Ruby would parse, but it supports all of them. So `parser/ruby25` follows parsing rules of the latest Ruby 2.5.x, but it works with pretty much any version of Ruby",
      "Feel free to send another PR that bumps Ruby versions in `.travis.yml`, generally speaking that's not necessary right now. Thanks a lot!"
    ],
    "commit_messages": [
      "Bump parser to 2.5.3 for Ruby 2.3.8, 2.4.5 and 2.5.3 support (#1904)\n\n* Bump parser to 2.5.3 for Ruby 2.4.5 support\r\n\r\n* Forgot to update Gemfile.lock\r\n\r\n* Revert \"Forgot to update Gemfile.lock\"\r\n\r\nThis reverts commit da1d6b02b1e9f857684a00520f1ae337c379d29c.\r\n\r\n* Bump parser version in Gemfile and Gemfile.lock\r\n\r\n* Revert example lockfiles\r\n\r\n* Properly bump c_lexer version\r\n\r\n* Drop ruby 2.1.x and 2.2.x support"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620907ad6ca63ac8d87ebab",
    "number": 1903,
    "body": "Fixes https://github.com/opal/opal/issues/762\r\n\r\nAfter this:\r\n\r\n```\r\n$ bin/opal -Ae 'def foo(a,b,*c);end; p method(:foo).to_proc.parameters'\r\n[[\"req\", \"a\"], [\"req\", \"b\"], [\"rest\", \"c\"]]\r\n```",
    "head_branch": "elia/method-to-proc-parameters",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1903 from opal/elia/method-to-proc-parameters\n\nPass parameters & arity info from method to proc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620907bd6ca63ac8d87ebac",
    "number": 1901,
    "body": "The check in runtime was probably a legacy of the old module system that was not as reliable.\r\n\r\nFixes #1900 ",
    "head_branch": "elia/fix-module-metaclass-inheritance",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1901 from opal/elia/fix-module-metaclass-inheritance\n\nFix metaclass inheritance in subclasses of Module"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620907bd6ca63ac8d87ebad",
    "number": 1899,
    "body": "Hi, I'm making updates for Open Collective. Either you or a supporter signed this repo up for Open Collective. This pull request adds backers and sponsors from your Open Collective https://opencollective.com/opal ❤️\n  \n  It adds two badges at the top to show the latest number of backers and sponsors. It also adds placeholders so that the avatar/logo of new backers/sponsors can automatically be shown without having to update your README.md. [[more info](https://github.com/opencollective/opencollective/wiki/Github-banner)]. See how it looks on [this repo](https://github.com/apex/apex#backers).\nYou can also add a \"Donate\" button to your website and automatically show your backers and sponsors there with our widgets. Have a look here: https://opencollective.com/widgets\n\n  P.S: As with any pull request, feel free to comment or suggest changes. The only thing \"required\" are the placeholders on the README because we believe it's important to acknowledge the people in your community that are contributing (financially or with code!).\n\n  Thank you for your great contribution to the open source community. You are awesome! 🙌\n  And welcome to the open collective community! 😊\n\n  Come chat with us in the #opensource channel on https://slack.opencollective.com - great place to ask questions and share best practices with other open source sustainers!\n  ",
    "head_branch": "opencollective",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1899 from opencollective/opencollective\n\nActivating Open Collective"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620907cd6ca63ac8d87ebae",
    "number": 1898,
    "body": "Fixes https://github.com/opal/opal/issues/1893",
    "head_branch": "elia/fix-kernel-exit",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1898 from opal/elia/fix-kernel-exit\n\nfix kernel exit on 0.11.x"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620907dd6ca63ac8d87ebaf",
    "number": 1896,
    "body": "Resolves https://github.com/opal/opal/issues/1783",
    "head_branch": "1783-use-opal-truthy-instead-of-array-select",
    "is_a_fork": true,
    "comments": [
      "Thanks! Can you please squash the two commits into one? \r\n(Let me know if you need help with that 🙂)",
      "@elia Squash is done 👍 "
    ],
    "commit_messages": [
      "Merge pull request #1896 from codeminator/1783-use-opal-truthy-instead-of-array-select\n\n#1783 use Opal#truthy in Array#select"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620907ed6ca63ac8d87ebb0",
    "number": 1895,
    "body": "Resolves #1794",
    "head_branch": "issue-1794-expand-path-windows",
    "is_a_fork": true,
    "comments": [
      "As it turns out, Node.js `resolve` and Ruby `expand_path` are very similar!\r\n\r\nRuby is using posix separator even on Windows so I'm using `.split(path.sep).join(path.posix.sep)` to convert OS dependent separator to posix separator.\r\n\r\nI've also fixed a bug in `Pathname`.\r\nThe `absolute?` and `relative?` methods in `stdlib/pathname.rb` does not work properly with Windows paths. In Node.js the `path` module is OS dependent so I'm using `path.isAbsolute?` to determine if the path is absolute or not. Luckily `Pathname.absolute?` and `path.isAbsolute?` work the same.",
      "Build is green, I just need to fix the code duplication that I introduced by copying/pasting the `Pathname` constructor :thinking: ",
      "@Mogztter you prefer to cleanup the commits before the merge or it's better to just squash-and-merge?",
      "@elia I get this weird error now:\r\n\r\n```\r\nConstants access via .$$ with dots (regression for #1418) allows to acces scopes on `Opal` FAILED\r\nExpected RuntimeFixtures::A::B to equal RuntimeFixtures::A::B::C\r\nSpecExpectationNotMetError: Expected RuntimeFixtures::A::B to equal RuntimeFixtures::A::B::C\r\n    at Opal.send (file:///tmp/chrome-opal.js:1660:19)\r\n    at Function.$$exception (file:///tmp/chrome-opal.js:5673:14)\r\n    at Function.$$raise (file:///tmp/chrome-opal.js:5339:31)\r\n    at Function.$$fail_with (file:///tmp/chrome-opal.js:65689:37)\r\n    at $SpecPositiveOperatorMatcher.TMP_SpecPositiveOperatorMatcher_$eq$eq_2 (file:///tmp/chrome-opal.js:60505:48)\r\n    at $MSpecEnv.TMP_2 (file:///tmp/chrome-opal.js:81199:71)\r\n    at $MSpecEnv.$$instance_eval (file:///tmp/chrome-opal.js:3861:24)\r\n    at Opal.send (file:///tmp/chrome-opal.js:1660:19)\r\n    at Function.$$protect (file:///tmp/chrome-opal.js:62237:9)\r\n    at Opal.send (file:///tmp/chrome-opal.js:1660:19)\r\n```\r\n\r\nEDIT: It's unrelated, the build is also broken on master with the same error: https://travis-ci.org/opal/opal/builds/450637528",
      "> you prefer to cleanup the commits before the merge or it's better to just squash-and-merge?\r\n\r\nThanks for your review, I've squashed my commits 🌴 ",
      "Merged! 😄👍 \r\n"
    ],
    "commit_messages": [
      "Merge pull request #1895 from Mogztter/issue-1794-expand-path-windows\n\nResolves #1794, File.expand_path on Windows root should include trailing slash"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620907fd6ca63ac8d87ebb1",
    "number": 1892,
    "body": "Fixed Typo.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "nice catch!"
    ],
    "commit_messages": [
      "Merge pull request #1892 from Sirivasv/master\n\nUpdate promises.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209080d6ca63ac8d87ebb2",
    "number": 1891,
    "body": "Fixes https://github.com/opal/opal/pull/657\r\n\r\n@iliabylich any idea on how to deal with requires, I thought about adding `/opal/opal/with_mersenne_twister` but I don't like it much.\r\n\r\nI'll add an entry in Travis to test with Mersenne Twister random generator once figured out the best route for requiring it.",
    "head_branch": "elia/random-with-mersenne-twister",
    "is_a_fork": false,
    "comments": [
      "Do we need two random numbers generators? Maybe let's remove an existing one? The code looks great btw! 👍 ",
      "I don't know tbh, the mersenne twister is bigger, maybe the default choice should be closer to MRI allowing anyone who needs lightness to pick securerandom or maybe a non _pseudo_ generator based on `Math.random`. ",
      "Looks like there was a spec that expected seedrandom to be used 😄 . Also the new randomization code should be wrapped with `lint:disable` comments"
    ],
    "commit_messages": [
      "Merge pull request #1891 from opal/elia/random-with-mersenne-twister\n\nrandom with mersenne twister"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209081d6ca63ac8d87ebb3",
    "number": 1890,
    "body": "It's supported by IE10+ and all other browsers, it's easy to\r\nadd a polyfill in case support for IE9- is required.\r\n\r\nhttps://caniuse.com/#feat=atob-btoa\r\n\r\n(ref https://github.com/opal/opal/issues/727#issuecomment-354538720 by @Mogztter)",
    "head_branch": "elia/remove-base64-polyfill",
    "is_a_fork": false,
    "comments": [
      "😞 node doesn't implemnt btoa/atob, it uses has `Buffer` class instead (https://stackoverflow.com/a/23097961). Still undecided if it's worth removing the polyfill for the browser 🤔.",
      "I think it's worth it 😁\r\nIt makes the code easier to maintain and as you mentioned it's relatively easy to add a polyfill (and... who is still using IE9 anyway ?!)\r\n\r\nIndeed for Node.js we should use an implementation that relies on `Buffer` (native).\r\n\r\nEDIT: It might have some inconsistency between `btoa` and `Buffer` though... I vaguely remember something with encoding and failing tests. In this case it may not be worth it if the implementation is not consistent MRI.",
      "Node.js implements `atob` / `btoa` since v16.0.\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/atob#browser_compatibility\r\n\r\nProbably we can merge this now?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209082d6ca63ac8d87ebb4",
    "number": 1889,
    "body": "latest mspec/ruby-spec, just added failures to filters, no fixes",
    "head_branch": "elia/rubyspecs-update",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1889 from opal/elia/rubyspecs-update\n\nUpdate MSpec and Ruby Spec"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209083d6ca63ac8d87ebb5",
    "number": 1888,
    "body": "Builds on https://github.com/opal/opal/commit/6ce0619e0e1acdb2ba8ca406263bd8a2a329a91f\r\n\r\nFixes #1659 \r\n\r\nreaching 1.06x vs the inlined block\r\n\r\ncc @mojavelinux @Mogztter ",
    "head_branch": "elia/string-to-proc-perf",
    "is_a_fork": false,
    "comments": [
      "IPS benchmark results (see https://github.com/opal/opal/pull/1888/commits/3868d5e0aaeb27c92d195fe7d5e55d249f1521d9)\r\n\r\n```\r\nBEFORE\r\n\r\nopal:elia/string-to-proc-perf ⤑ bundle exec rake bench:ips FILE=benchmark-ips/bm_symbol_to_proc.rb                                     ~/C/opal\r\n=== Files: benchmark-ips/bm_symbol_to_proc.rb\r\nbundle exec opal --dynamic-require ignore --missing-require ignore -ropal/platform -gbenchmark-ips -rbenchmark/ips -A benchmark-ips/bm_symbol_to_proc.rb\r\nWarming up --------------------------------------\r\n           map block     1.090k i/100ms\r\n          map symbol   869.000  i/100ms\r\nCalculating -------------------------------------\r\n           map block     11.302k (± 1.0%) i/s -     56.680k in   5.015370s\r\n          map symbol      8.878k (± 2.3%) i/s -     45.188k in   5.092622s\r\n\r\nComparison:\r\n           map block:    11302.5 i/s\r\n          map symbol:     8878.1 i/s - 1.27x  slower\r\n\r\n\r\n\r\nAFTER\r\n\r\nopal:master ⤑ bundle exec rake bench:ips FILE=benchmark-ips/bm_symbol_to_proc.rb                                                       ~/C/opal\r\n=== Files: benchmark-ips/bm_symbol_to_proc.rb\r\nbundle exec opal --dynamic-require ignore --missing-require ignore -ropal/platform -gbenchmark-ips -rbenchmark/ips -A benchmark-ips/bm_symbol_to_proc.rb\r\nWarming up --------------------------------------\r\n           map block   980.000  i/100ms\r\n          map symbol   977.000  i/100ms\r\nCalculating -------------------------------------\r\n           map block     10.430k (± 1.1%) i/s -     52.920k in   5.074384s\r\n          map symbol      9.804k (± 2.6%) i/s -     49.827k in   5.086232s\r\n\r\nComparison:\r\n           map block:    10430.1 i/s\r\n          map symbol:     9803.7 i/s - 1.06x  slower\r\n```",
      "Nice work. Every day Opal gets faster is a good day for me ;)",
      "oops, the second commit had no change attached, fixed now"
    ],
    "commit_messages": [
      "Merge pull request #1888 from opal/elia/string-to-proc-perf\n\nimprove String#to_proc perf"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209084d6ca63ac8d87ebb6",
    "number": 1887,
    "body": "I tried to run an example Sinatra app but I got a following error.\r\n\r\n```sh\r\n$ cd ./opal/examples/sinatra\r\n$ bundle install\r\n$ bundle exec rackup config.ru\r\nDEPRECATION WARNING: `require 'opal/server` and `Opal::Server` are deprecated in favor of `require 'opal/sprockets/server'` and `Opal::Sprockets::Server` (now part of the opal-sprockets gem).\r\n! Unable to load application: LoadError: cannot load such file -- opal/sprockets/server\r\n```\r\n\r\nI guess that the example code doesn't catch up to the latest version.\r\nThis PR fixes this issue (and I think it also fixes #1830).",
    "head_branch": "fix-borken-sinatra-example",
    "is_a_fork": true,
    "comments": [
      "Looks good thanks! (I won't wait for the CI to pass, since it doesn't exercise examples) 👍 "
    ],
    "commit_messages": [
      "Merge pull request #1887 from ninoseki/fix-borken-sinatra-example\n\nfix: fix broken sinatra example"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209085d6ca63ac8d87ebb7",
    "number": 1886,
    "body": "Static tools should now be able to resolve dependencies.",
    "head_branch": "issue-1883-require",
    "is_a_fork": true,
    "comments": [
      "🎉 🎉 🎉 "
    ],
    "commit_messages": [
      "Merge pull request #1886 from Mogztter/issue-1883-require\n\nResolves #1883, use require directly instead of the require_node method"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209086d6ca63ac8d87ebb8",
    "number": 1885,
    "body": "See ruby-doc.org/stdlib-2.5.0/libdoc/date/rdoc/Date.html#method-i-next_year\r\n\r\nCompletes and closes #1758 ",
    "head_branch": "elia/date-next-prev-year",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1885 from opal/elia/date-next-prev-year\n\nAdd Date#next_year and Date#prev_year"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209087d6ca63ac8d87ebb9",
    "number": 1882,
    "body": "As suggested by @mojavelinux, the method delegates the work to `each_line`.",
    "head_branch": "file-readlines",
    "is_a_fork": true,
    "comments": [
      "@iliabylich You're right, I was using `bundle exec rake minitest_nodejs` to test my code but the actual command is `bundle exec rake minitest_node_nodejs` :confounded: ",
      "@iliabylich I've also fixed a bug, the argument `separator` was not passed to `read.each_line`",
      "AppVeyor failure is unrelated: `fatal: unable to access 'https://github.com/opal/opal.git/': Operation timed out after 300047 milliseconds with 0 out of 0 bytes received` and codeclimate is complaining because the `File` class has now 21 methods (exceeds 20 allowed)...",
      "> AppVeyor failure is unrelated\r\n\r\nI restarted the build 👍🏼 "
    ],
    "commit_messages": [
      "Resolves #1828, implement File#readlines (Node.js) (#1882)\n\n* Resolves #1828, implement File#readlines (Node.js)\r\n\r\n* Pass the separator argument"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209088d6ca63ac8d87ebba",
    "number": 1881,
    "body": "The version used by Opal is 5 years old and won't reasonably get any \r\nupdates, so it makes sense to make it part of the core codebase.\r\n\r\nThe first commit embeds the original code in a single file, the second one removes dead code and refactors a bit.",
    "head_branch": "elia/remove-hike-dependency",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1881 from opal/elia/remove-hike-dependency\n\nEmbed hike-1.2.3 into Opal"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209089d6ca63ac8d87ebbb",
    "number": 1880,
    "body": "I think there's no need for racc, @iliabylich can you confirm?",
    "head_branch": "elia/remove-racc-refs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1880 from opal/elia/remove-racc-refs\n\nRemove Racc as it's now replaced by the parser gem"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620908ad6ca63ac8d87ebbc",
    "number": 1879,
    "body": "Resolves #1878 ",
    "head_branch": "recursive-gsub",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1879 from Mogztter/recursive-gsub\n\nResolves #1878, save and restore lastIndex on pattern (recursive gsub)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620908bd6ca63ac8d87ebbd",
    "number": 1877,
    "body": "Fixes #1876 \r\n\r\nThe check on `$allocate` was done on a stub on the instance instead of the class",
    "head_branch": "elia/0-11-backport-array-fixes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1877 from opal/elia/0-11-backport-array-fixes\n\nBackport fixes for method_missing_enabled = false"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620908cd6ca63ac8d87ebbe",
    "number": 1874,
    "body": "Fixes #1869\r\n\r\n@Adrian-Devries I've attached a built version without the symlink, can you try it and let me know if it works ok?\r\n\r\n[opal-0.11.2.gem.zip](https://github.com/opal/opal/files/2312070/opal-0.11.2.gem.zip)",
    "head_branch": "elia/remove-symlink",
    "is_a_fork": false,
    "comments": [
      "Unfortunately, even with the version you've attached it still doesn't work:\r\n\r\n> c:\\Ruby25-x64>ruby -v\r\n> ruby 2.5.1p57 (2018-03-29 revision 63029) [x64-mingw32]\r\n> \r\n> c:\\Ruby25-x64>gem -v\r\n> 2.7.6\r\n> \r\n> c:\\Ruby25-x64>gem install opal\r\n> ERROR:  While executing gem ... (Errno::EACCES)\r\n>     Permission denied @ rb_file_s_symlink - (./exe, C:/Ruby25-x64/lib/ruby/gems/2.5.0/gems/opal-0.11.2/bin)",
      "I have entirely replaced the symlink, can you try this version?\r\n\r\n[opal-0.11.2.gem.zip](https://github.com/opal/opal/files/2313833/opal-0.11.2.gem.zip)",
      "The message has changed slightly, the result is the same:\r\n\r\n> c:\\Ruby25-x64>gem install opal\r\nERROR:  While executing gem ... (Errno::EACCES)\r\n    Permission denied @ rb_file_s_symlink - (lib/opal/cli_runners/node_modules/.bin/../chrome-remote-interface/bin/client.js, c:/Ruby25-x64/lib/ruby/gems/2.5.0/\r\ngems/opal-0.11.2/lib/opal/cli_runners/node_modules/.bin/chrome-remote-interface)",
      "@Adrian-Devries so it now stops on another symlink, which is somewhat good news. I'll check the installed node modules and try to add the install task to the Windows CI build as per https://github.com/opal/opal/pull/1736/files",
      "@Adrian-Devries ok, thanks for the patience so far, here's another zip you can try, hopefully the last, \r\nThe new gemspec excludes any symlink it encounters so it should be good now.\r\n\r\n[opal-0.11.2.gem.zip](https://github.com/opal/opal/files/2315652/opal-0.11.2.gem.zip)\r\n",
      "Now it works:\r\n\r\n> c:\\Ruby25-x64>gem install opal\r\nSuccessfully installed opal-0.11.2\r\nParsing documentation for opal-0.11.2\r\nInstalling ri documentation for opal-0.11.2\r\nDone installing documentation for opal after 10 seconds\r\n1 gem installed\r\n\r\nThank you!",
      "Great! I'll release v0.11.2 later today 👍🏼 ",
      "released! https://rubygems.org/gems/opal/versions/0.11.2"
    ],
    "commit_messages": [
      "Release v0.11.2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620908dd6ca63ac8d87ebbf",
    "number": 1863,
    "body": "ES5/\"use strict\"; make properties of primitives read only, assigning to encoding fails with a TypeError, assignment to read only property.\r\n\r\nThis patch works around this restriction by using a simple proxy object for encoding.",
    "head_branch": "use_strict_encoding",
    "is_a_fork": true,
    "comments": [
      "ES6 modules use \"use strict\" by default.",
      "So this doesn't work for now, as the encoding is not set on the instance, but on the prototype instead.\r\nSilly.",
      "New fix is to just comment the assignment. Tests pass, though force_encoding now is mostly useless.",
      "@janbiedermann What about:\r\n\r\n```js\r\nvar result = new String(self.toString())\r\nObject.defineProperty(result, 'encoding', {\r\n  value: encoding,\r\n  writable: true\r\n})\r\nreturn result\r\n```\r\n\r\n",
      "superseded by PR#1970"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620908ed6ca63ac8d87ebc0",
    "number": 1856,
    "body": "The former version was seriously bugged when merging multiple maps, the \r\nnew implementation adopts the index format withch requires much less \r\narithmetics. \r\n\r\n- The implementation is now simpler and targeted towards our use-case.\r\n\r\n- The VLQ implementation has been ported as is from maccman/sourcemap.\r\n\r\n- SimpleServer now serves sourcemaps as data URIs, which is encouraged\r\n  since it skips the prefix problem entirely.\r\n\r\n- The copy of maccman/sourcemap that was shipped as parto of the stdlib\r\n  has been removed.\r\n\r\n- Serving a single source map for all concatenated assets now actually works.",
    "head_branch": "elia/source-map-fixes",
    "is_a_fork": false,
    "comments": [
      "Is it still WIP?",
      "It’s basically done, I need to fix the broken specs but I the diff is ready. Be free to review it now or wait for Travis to become green.\nOn 13 Aug 2018, 23:54 +0200, Ilya Bylich <notifications@github.com>, wrote:\n> Is it still WIP?\n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n"
    ],
    "commit_messages": [
      "Merge pull request #1856 from opal/elia/source-map-fixes\n\nsource map fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620908ed6ca63ac8d87ebc1",
    "number": 1855,
    "body": "Updates the requirements on [octokit](https://github.com/octokit/octokit.rb) to permit the latest version.\n<details>\n<summary>Release notes</summary>\n\n*Sourced from [octokit's releases](https://github.com/octokit/octokit.rb/releases).*\n\n> ## v4.9.0\n> ## Bugfixes\r\n>   - [#1006](https://github-redirect.dependabot.com/octokit/octokit.rb/issues/1006) Use Addressable::URI instead of stdlib URI for normalization\r\n>   - [#1003](https://github-redirect.dependabot.com/octokit/octokit.rb/issues/1003) Fix pagination of GitHub App endpoints\r\n>   - [#1000](https://github-redirect.dependabot.com/octokit/octokit.rb/issues/1000) Call dup on arguments before mutating\r\n> ## Documentation changes\r\n>   - [#969](https://github-redirect.dependabot.com/octokit/octokit.rb/issues/969) Document the steps necessary to cut a release\r\n>   - [#972](https://github-redirect.dependabot.com/octokit/octokit.rb/issues/972) Url to the review API was wrong\r\n>   - [#973](https://github-redirect.dependabot.com/octokit/octokit.rb/issues/973) Fix pull_requests_comments example documentation\r\n>   - [#985](https://github-redirect.dependabot.com/octokit/octokit.rb/issues/985) Add tag_name to update_release documentation\r\n>   - [#989](https://github-redirect.dependabot.com/octokit/octokit.rb/issues/989) Command example fix in documentation.\r\n>   - [#1008](https://github-redirect.dependabot.com/octokit/octokit.rb/issues/1008) Fixes documentation for getting single issue comment\r\n>   - [#1011](https://github-redirect.dependabot.com/octokit/octokit.rb/issues/1011) Fix example call to Octokit.label\r\n> ## Enhancements\r\n>   -  [#982](https://github-redirect.dependabot.com/octokit/octokit.rb/issues/982) Be able to set an SSL verify mode on faraday\r\n>   - [#1009](https://github-redirect.dependabot.com/octokit/octokit.rb/issues/1009) Add missing remove_org_membership alias\r\n> ## Maintenance\r\n>   - [#970](https://github-redirect.dependabot.com/octokit/octokit.rb/issues/970) Update Ruby versions for CI\r\n>   - [#961](https://github-redirect.dependabot.com/octokit/octokit.rb/issues/961) Update VCR gem\r\n> ## Support for additional API endpoints\r\n>   - [#984](https://github-redirect.dependabot.com/octokit/octokit.rb/issues/984) Add remove_assignees method to the client\r\n>   - [#959](https://github-redirect.dependabot.com/octokit/octokit.rb/issues/959) Commit Search API preview\r\n>   - [#996](https://github-redirect.dependabot.com/octokit/octokit.rb/issues/996) Add ability to list a single deployment, by id\n</details>\n<details>\n<summary>Commits</summary>\n\n- See full diff in [compare view](https://github.com/octokit/octokit.rb/commits/v4.9.0)\n</details>\n<br />\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n---\n\n**Note:** This repo was added to Dependabot recently, so you'll receive a maximum of 5 PRs for your first few update runs. Once an update run creates fewer than 5 PRs we'll remove that limit.\n\nYou can always request more updates by clicking `Bump now` in your [Dependabot dashboard](https://app.dependabot.com).\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Pull request limits (per update run and/or open at any time)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\nFinally, you can contact us by mentioning @dependabot.\n\n</details>",
    "head_branch": "dependabot/bundler/octokit-tw-4.9.0",
    "is_a_fork": false,
    "comments": [
      "Solved by 375bedaf8db15bc79862ce38dd28b0ff13f96545"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620908fd6ca63ac8d87ebc2",
    "number": 1854,
    "body": "Updates the requirements on [rspec](https://github.com/rspec/rspec) to permit the latest version.\n<details>\n<summary>Commits</summary>\n\n- See full diff in [compare view](https://github.com/rspec/rspec/commits/v3.7.0)\n</details>\n<br />\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n---\n\n**Note:** This repo was added to Dependabot recently, so you'll receive a maximum of 5 PRs for your first few update runs. Once an update run creates fewer than 5 PRs we'll remove that limit.\n\nYou can always request more updates by clicking `Bump now` in your [Dependabot dashboard](https://app.dependabot.com).\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Pull request limits (per update run and/or open at any time)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\nFinally, you can contact us by mentioning @dependabot.\n\n</details>",
    "head_branch": "dependabot/bundler/rspec-tw-3.7.0",
    "is_a_fork": false,
    "comments": [
      "Solved by 375bedaf8db15bc79862ce38dd28b0ff13f96545"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209090d6ca63ac8d87ebc3",
    "number": 1853,
    "body": "Updates the requirements on [hike](https://github.com/sstephenson/hike) to permit the latest version.\n<details>\n<summary>Commits</summary>\n\n- See full diff in [compare view](https://github.com/sstephenson/hike/commits)\n</details>\n<br />\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n---\n\n**Note:** This repo was added to Dependabot recently, so you'll receive a maximum of 5 PRs for your first few update runs. Once an update run creates fewer than 5 PRs we'll remove that limit.\n\nYou can always request more updates by clicking `Bump now` in your [Dependabot dashboard](https://app.dependabot.com).\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Pull request limits (per update run and/or open at any time)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\nFinally, you can contact us by mentioning @dependabot.\n\n</details>",
    "head_branch": "dependabot/bundler/hike-gte-1.2-and-lt-3.0",
    "is_a_fork": false,
    "comments": [
      "Solved by #1881"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209091d6ca63ac8d87ebc4",
    "number": 1848,
    "body": "`Kernel#public_methods` is a alias of `Kernel#methods` in opal (#909). But their behavior is not same in MRI. This PR fixed it.\r\n\r\nHere is an example.\r\n``` ruby\r\nclass Child\r\n  def foo\r\n    \"foo\"\r\n  end\r\nend\r\n\r\nc = Child.new\r\n\r\ndef c.bar\r\n  \"bar\"\r\nend\r\n\r\n\r\np c.public_methods(false) #=> [:bar, :foo]\r\np c.methods(false)        #=> [:foo]\r\n```\r\n\r\n`methods(false)` returns only singular methods, but`public_methods(false)` returns singular methods and instance methods.\r\n\r\n### ruby-doc\r\n- [Object#public_methods](https://ruby-doc.org/core-2.5.1/Object.html#method-i-public_methods)\r\n- [Object#methods](https://ruby-doc.org/core-2.5.1/Object.html#method-i-methods)",
    "head_branch": "fix_public_methods",
    "is_a_fork": true,
    "comments": [
      "CI seems to have error due to installing jruby... Test cases doesn't fail.\r\n\r\nCould someone restart build?",
      "@ysakasin great!\r\n\r\nCan you also remove [these lines](https://github.com/opal/opal/blob/0-11-stable/spec/filters/bugs/kernel.rb#L56-L59) to enable the related Ruby Spec examples?",
      "@ysakasin I restarted the build and tried to upgrade the jruby version, both without success, I'll merge anyway after the Ruby Spec examples are activated/checked. 👍🏼 ",
      "@elia Thanks for reviewing.\r\n\r\nI enabled one Ruby Spec example ([this line](https://github.com/opal/opal/pull/1848/files#diff-bb99c78b663bd653830c6259808c7952L53)) and pushed additional fix.\r\nWe can't enable these lines because opal can't distinguish between public and private method.\r\n- `Kernel#public_methods when passed false returns a list of public methods in without its ancestors`\r\n- `Kernel#public_methods when passed nil returns a list of public methods in without its ancestors`\r\n\r\nAlso this line already removed in master: `Kernel#public_methods returns a list of the names of publicly accessible methods in the object and its ancestors and mixed-in modules`",
      "👍🏼 ",
      "Thank you merging! 🎉 "
    ],
    "commit_messages": [
      "Fixed Kernel#public_methods to return instance methods if argument is false (#1848)\n\n* Fixed Kernel#public_methods to return instance methods if the argument is set to false\r\n\r\n* Fix Kernel#public_methods to Ruby Spec examples\r\n\r\n* Enable the related to Kernel#public_methods Ruby Spec example"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209092d6ca63ac8d87ebc5",
    "number": 1844,
    "body": "This is mostly a refactoring, I've attempted it multiple times but had to give up every time. Finally it's done.\r\n\r\n1. Added `MlhsArgs` rewriter that converts `def m( (a, b) )` to `def m($mlhs1); a, b = $mlhs1`. It removes all ugly stuff like `mlhs_mapping` from the `DefNode` and `NodeWithArgs`\r\n2. Added `InlineArgs` rewriter that creates virtual AST nodes for arguments initialization and insert them in the method body. I've added some comments, hope it's clear enough. It removes ugly stuff like `scope.working_arguments` and `scope.kwargs_initialized` and a horrible `PostArgs` node.\r\n3. Extracted arity checking to `arity_check` and `iter_arity_check` nodes.\r\n4. Extracted code responsible for `Method#parameters` to a separate class.\r\n",
    "head_branch": "rewriter-args",
    "is_a_fork": true,
    "comments": [
      "@elia Sorry for delay, anything else?",
      "@iliabylich sorry, this one went out of the radar 😅 "
    ],
    "commit_messages": [
      "Merge pull request #1844 from iliabylich/rewriter-args\n\nSimplify args compilation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209093d6ca63ac8d87ebc6",
    "number": 1842,
    "body": "+ `String#to_r`\r\n+ `String#to_c`\r\n+ `String#match?`\r\n+ `String#unicode_normalize` (returns `self`)\r\n+ `String#unicode_normalized?` (returns `true`)",
    "head_branch": "string-improvements",
    "is_a_fork": true,
    "comments": [
      "@elia ping",
      "@iliabylich thanks, sorry for the delay"
    ],
    "commit_messages": [
      "Merge pull request #1842 from iliabylich/string-improvements\n\nString improvements"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209094d6ca63ac8d87ebc7",
    "number": 1841,
    "body": "",
    "head_branch": "cleanup-filters",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1841 from iliabylich/cleanup-filters\n\nCleanup spec filters"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209095d6ca63ac8d87ebc8",
    "number": 1840,
    "body": "rubyracer uses a very old version of V8 - https://github.com/cowboyd/therubyracer/blob/master/therubyracer.gemspec#L20 - which doesn't have `Object.setPrototypeOf`",
    "head_branch": "switch-to-mini_racer-for-opal-repl-to-support-Object-setPrototypeOf",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Switch to mini_racer to support Object.setPrototypeOf in the repl mode. (#1840)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209096d6ca63ac8d87ebc9",
    "number": 1839,
    "body": "otherwise `Opal.is_a({}, Opal.Array)` will fail\r\nthis was previously automatically guarded by a `while (module) {`",
    "head_branch": "is_a_ancestors_regression",
    "is_a_fork": true,
    "comments": [
      "LGTM. Could you add a simple test for this please to avoid potential regression in the future? `spec/opal/core/runtime/is_a_spec.rb` is a good place for this:\r\n``` ruby\r\nit 'works for non-Opal objects' do\r\n  `Opal.is_a({}, Opal.Array)`.should == false\r\nend\r\n```",
      "added your test",
      "Thank you!"
    ],
    "commit_messages": [
      "Allow passing non-Opal objects to Opal.is_a (#1839)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209097d6ca63ac8d87ebca",
    "number": 1838,
    "body": "set const before calling inherited otherwise class.name leads to incorrect results and method_missing depending things misbehave, get called in wrong context",
    "head_branch": "runtime_klass_fix",
    "is_a_fork": true,
    "comments": [
      "Looks good, could you add a test please, somewhere in `spec/opal/core/class/inherited_spec.rb`:\r\n``` ruby\r\nmodule ModuleInheritedTestModule\r\n  class A\r\n    def self.inherited(subclass)\r\n      $ScratchPad << subclass.name\r\n    end\r\n  end\r\nend\r\n\r\ndescribe 'Class#inherited' do\r\n  it 'gets called after setting a base scope of the subclass' do\r\n    $ScratchPad = []\r\n    module ModuleInheritedTestModule\r\n      class B < A\r\n      end\r\n    end\r\n    $ScratchPad.should == ['ModuleInheritedTestModule::B']\r\n  end\r\nend\r\n```",
      "added your test :)",
      "Thanks!"
    ],
    "commit_messages": [
      "Invoke Module#const_set before Class#inherited (#1838)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209098d6ca63ac8d87ebcb",
    "number": 1837,
    "body": "opal sometimes creates source maps with indices that point to line 0 of the original source.\r\nspec says, lines count from 1, so 0 line is illegal and fails webpack source map verification.\r\nfragments seem to have no line number if they don't belong to a sexp.\r\nThats ok, so if line is nil or 0, this just puts a 1 instead as fix.\r\nSo all generated line indices are legal, webpack is happy.",
    "head_branch": "source_map_line_non_zero",
    "is_a_fork": true,
    "comments": [
      "this bug probably affects use of source maps in browsers too",
      "Actually i am wrong, spec says:\r\n`If present, the zero-based starting line in the original source represented.`\r\n\r\nbut, webpack demands the actual implementation for mozilla/source_map, that says:\r\n`line: The line number in the original source. The line number is 1-based.`\r\n\r\nand thats the actual implementation used by firefox.\r\n\r\nso i'd say 1 is a safe bet",
      "for reference:\r\nhttps://github.com/mozilla/source-map\r\nthere is a link to the spec `This is a library to generate and consume the source map format described here.`, but that sentence is not true then.",
      "https://github.com/mozilla/source-map/issues/344",
      "@janbiedermann I think https://github.com/mozilla/source-map#sourcemapconsumerprototypeoriginalpositionforgeneratedposition clears that the library is 1-based while the spec is 0-based, and from what I see the library we use is 0-based too https://github.com/maccman/sourcemap.\r\n\r\n---\r\n\r\nAs the saying goes, the **two** great problems in computer science are:\r\n\r\n1. naming things\r\n2. invalidating caches\r\n3. _off-by-one errors!_ 😄 ",
      "i missed that, thanks, ill adjust the check in the next days",
      "it seems maccman/sourcemap is 1 based too:\r\nhttps://github.com/maccman/sourcemap/blob/b65550a30ae3216e2d9afa19dee3593c2282a1e3/lib/source_map/map.rb#L35\r\nhttps://github.com/maccman/sourcemap/blob/b65550a30ae3216e2d9afa19dee3593c2282a1e3/lib/source_map/map.rb#L191\r\nhttps://github.com/maccman/sourcemap/blob/b65550a30ae3216e2d9afa19dee3593c2282a1e3/lib/source_map/map.rb#L200\r\n\r\nIt just doesn't enforce line numbers to valid and > 1.\r\n\r\nThe root problem seems to come from parser25, producing nil or 0 line numbers.\r\nI adjusted the fix to a if in next line",
      "If there are nils in the parser's sourcemaps then it's definitely a bug in the parser gem. But Opal generates a lot of AST nodes in runtime (both in rewriters and node handlers), so it's also can be our bug.\r\n\r\nAnd by the way, I'm not familiar with how sourcemaps work, but shouldn't we add +1 to **every** line number? ",
      "it seems line numbers start at 1 already, no need to add +1 to every line.\r\nthis problem with nil or 0 happens only for a few files, i will check again if you say it could be opal, maybe i can identify the responsible ast nodes",
      "@janbiedermann @iliabylich could it be that the zeros come from ast rewriters loosing the original node position? I remember improving the situation but maybe there are still some corner cases.",
      "Thanks! Please send more PRs if you find more about source maps subtleties! "
    ],
    "commit_messages": [
      "Merge pull request #1837 from janbiedermann/source_map_line_non_zero\n\nsource map line number 0 is illegal and fails webpack source map veri…"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209099d6ca63ac8d87ebcc",
    "number": 1836,
    "body": "Closes https://github.com/opal/opal/issues/1805\r\nIt may potentially break some tests, so I'd like to get results from the travis.",
    "head_branch": "throw-unsupported-method-error-from-String-aref_set",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Throw a NotImplementedError from the String#[]= method. (#1836)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620909ad6ca63ac8d87ebcd",
    "number": 1835,
    "body": "Closes https://github.com/opal/opal/issues/1834",
    "head_branch": "return-string-literal-from-string-to_sym",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Return string literal from the String#to_sym method. (#1835)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620909bd6ca63ac8d87ebce",
    "number": 1833,
    "body": "with @length generated code tries to assign nil to read only property length, `self.length`works correct",
    "head_branch": "fix_corelib_string",
    "is_a_fork": true,
    "comments": [
      "Thanks, good catch!"
    ],
    "commit_messages": [
      "Do not assign nil to string.length (#1833)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620909cd6ca63ac8d87ebcf",
    "number": 1832,
    "body": "This PR implements wrapping opal modules as ES6 importable/exportable modules.\r\nTogether with:\r\nhttps://github.com/janbiedermann/opal-webpack-compile-server\r\nhttps://github.com/janbiedermann/opal-webpack-loader\r\nhttps://github.com/janbiedermann/opal-webpack-resolver-plugin\r\n\r\nallows for a completely webpack based build process.\r\nBuilds are superfast, asynchronous and depending on webpack handling imports also in parallel.\r\nIn a real world app, complete build generating 8,5MB of js from opal code:\r\nsprockets building all code:  34172ms\r\nopal-webpack-loader: Time: 13799ms\r\n\r\nThe webpack based build process and ES6 import/export modules allow for using all the webpack features, like:\r\n- https://webpack.js.org/guides/hot-module-replacement/\r\n- https://webpack.js.org/guides/tree-shaking/\r\n- https://webpack.js.org/guides/code-splitting/\r\n- https://webpack.js.org/guides/lazy-loading/\r\n\r\nAt the same time, integration of opal code in the build chain of other projects is now much better possible, for example:\r\n- electron\r\n- react native\r\n\r\nInstructions for getting this running are in the readme here https://github.com/janbiedermann/opal-webpack-loader\r\nthere is a example app available here: https://github.com/janbiedermann/opal-webpack-loader-example-app\r\n\r\nThis is used in 2 real life apps.\r\n\r\nThis code introduces a new compiler option: es_six_imexable\r\nit takes care of the wrapping opal modules as ES6 module\r\n\r\nI used duct tape to make it all stick together, so the compiler of this PR doesn't work in node or the browser yet, also it may fail without the es_six_imexable option.\r\n\r\nThis is not so, that you can import a ruby module in ES6 like 'import 'my_rubymodule', instead, the imports are generated automatically. See comments in code.\r\n\r\nIts a start, and it works :)\r\n\r\nComments much appreciated :)\r\n",
    "head_branch": "es6_import_export",
    "is_a_fork": true,
    "comments": [
      "Cleaned it up, guarded es_six_imexable specific code, should function ok now",
      "@janbiedermann quick question: what's the meaning of \"imexable\"? is it some ES6 specific term?",
      "imexable is just short for (import|export)-able.\r\n",
      "Now that source maps are fixed, those thousands of requests to load source maps when you open the dev console in the browser are a thing of the past, its possible to use all webpack devtool variations, from simple source maps, which load waaaayyyyy faster to inline source maps, see:\r\nhttps://webpack.js.org/configuration/devtool/",
      "We have success with lazy loading opal code using webpack dynamic imports.\r\nWe have success building cordova/react-native apps from web app code, using webpack generated bundles. Works surprisingly well.\r\nSee https://github.com/janbiedermann/opal-webpack-loader-example-app",
      "Yes. Please, revert changes to mspec and rubyspec submodules. CI fails because of that, there are some new tests in the upstream that we can't pass atm.",
      "moved the module_name method from top to the compiler and renamed it to module_name_from_paths, properly named all vars, added comments. All methods in  top.rb generate (partial) js.\r\n\r\nthe spec/(mspec|ruby) commit is a accident. I will revert once i figure out how to exactly achieve this. ",
      "ok, i hope i got the reverting of spec/(mspec|ruby) right\r\n\r\nI hope everything is ok now",
      "1. rubocop has some complains on CI. Could you run `rubocop -a` to fix them? (Most probably it should be enough, unless there are some issues that can't be fixed automatically).\r\n2. Could you maybe setup a simple test that compiles a single empty file and asserts its content?\r\n",
      "Alright, i introduced ES6ModulesHelpers and moved most things there and refactored a little. TopNode and Compiler look much nicer now 👍 \r\n\r\nAlso added two small tests, testing for import line and export line.\r\nOk?",
      "as all is green for this now, ill continue further in https://github.com/opal/opal/pull/1969",
      "superseded by PR#1970"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620909dd6ca63ac8d87ebd0",
    "number": 1827,
    "body": "Reverts opal/opal#1824\r\n\r\n@elia Or maybe force push HEAD~1 to the master? That's a bad idea if somebody is using Opal directly from the master branch, so I think reverting is better.",
    "head_branch": "revert-1824-node-binread",
    "is_a_fork": false,
    "comments": [
      "I occasionally force pushed and it's probably harmless for anyone using opal from git, but a revert is also fine, merging 😉 ",
      "Thank you both :wink: "
    ],
    "commit_messages": [
      "Merge pull request #1827 from opal/revert-1824-node-binread\n\nRevert \"Implement binread (mimic ASCII-8BIT encoding)\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620909ed6ca63ac8d87ebd1",
    "number": 1826,
    "body": "Not ready yet.\r\n\r\nIncludes a massive rewrite of the runtime.js\r\n+ The most important: Ancestors chain is represented via prototypes (for subclassing and modules inclusion).\r\n+ Every Opal class has BasicObject on the bottom of the prototype chain. It makes stubs logic much, much easier. (And I think in general the logic is easier now).\r\n+ Removed $$parent, $$included_modules, $$ancestors, $$children, $$methods.\r\n+ There's no method donation anymore. Yes, method definition = `prototype[method_name] = body` + updating a list of iclasses + hooks.\r\n+ All Objects can (and actually are) allocated via `new Opal.ClassName`.\r\n+ Inheritance from `String` is simplified (there are only 5 or 6 failing specs, not sure if it's worth to revert it).\r\n\r\nRubySpec suite \"works for me\" (for both node and chrome), going to check other tasks tomorrow.\r\n\r\nAlso this PR is called `Module#prepend`, so I'm also going to add `Opal.prepend_features`, it looks straightforward now.\r\n\r\nAlso I've just realized that we could use `obj instanceof Opal.SomeClass` for classes (for modules there's an iclass in the prototype chain, so it won't work). That's funny.",
    "head_branch": "module-prepend",
    "is_a_fork": true,
    "comments": [
      "```\r\n$ gco master\r\n$ opal -c -e '42' > master.js\r\n$ gco module-prepend\r\n$ opal -c -e '42' > patch.js\r\n\r\n$ repeat 5 time node master.js\r\nnode master.js  0.25s user 0.04s system 98% cpu 0.297 total\r\nnode master.js  0.23s user 0.04s system 97% cpu 0.276 total\r\nnode master.js  0.24s user 0.04s system 97% cpu 0.279 total\r\nnode master.js  0.23s user 0.03s system 98% cpu 0.269 total\r\nnode master.js  0.24s user 0.04s system 98% cpu 0.280 total\r\n\r\n$ repeat 5 time node patch.js\r\nnode patch.js  0.18s user 0.04s system 96% cpu 0.229 total\r\nnode patch.js  0.19s user 0.03s system 97% cpu 0.230 total\r\nnode patch.js  0.18s user 0.03s system 96% cpu 0.222 total\r\nnode patch.js  0.18s user 0.03s system 97% cpu 0.220 total\r\nnode patch.js  0.18s user 0.03s system 96% cpu 0.215 total\r\n```\r\n\r\nOverall boot time is also faster.\r\n\r\nOn the `Module#prepend`: I'm going to replicate MRI implementation (https://bugs.ruby-lang.org/attachments/2768/Module_prepend.png). For example, if we do `MyClass.prepend(MyModule)` Opal should create an iclass from the MyClass' prototype, flush MyClass, and insert `MyModule -> iclass(MyClass)` to the prototype chain.\r\n\r\nSo the result will be:\r\n```\r\nempty(MyClass) -> iclass(MyModule) -> iclass(MyClass) -> MyClass.super\r\n```\r\n\r\n@elia what do you think? It requires small changes in the `Opal.defn` to insert the method to the prototype of the first non-empty && non-module-based-iclass. And also small changes to `Opal.ancestors` to ignore class-based iclasses.",
      "@Mogztter Could you check please if it works with the Asciidoctor?",
      "Basically ready for reviewing.",
      "@iliabylich super great stuff man! \r\nI can't wait to read the diff (yes, I still have to, and yes, I had to wait until now 😅)\r\n\r\nI didn't know about the way prepend was implemented in MRI, that's clever! Basically any `Module` instance (including classes) will `defn` on the list of protos it maintains, where:\r\n\r\n- for a regular class it's just `[self.prototype]` \r\n- for any module is the list of its iclasses\r\n- for a class with prepend it's the one iclass (having `prepend_feature` moving all methods from the `prototype` to the iclass)\r\n\r\nis that correct? \r\n\r\n_now proceeding to the review!_ 😄 ",
      "> is that correct?\r\n\r\nYes!",
      "I'm getting the following results\r\n\r\n### RubySpec suite\r\n\r\n1007 static classes, 589 static modules, 299 `include`s, 59 `extend`s.\r\n332 `Class.new` invocations, 134 `Module.new`\r\n\r\nChrome:\r\n```\r\nmaster: 11009 examples, 41 failures (time taken: 13.717999935150146)\r\npatch: 11031 examples, 41 failures (time taken: 16.236999988555908)\r\n```\r\n\r\nFF:\r\n```\r\nmaster: 11009 examples, 41 failures (time taken: 24.863999843597412)\r\npatch: 11031 examples, 41 failures (time taken: 29.003000020980835)\r\n```\r\n\r\nSafari:\r\n```\r\nmaster: 11009 examples, 43 failures (time taken: 19.655999898910522)\r\npatch: 11031 examples, 43 failures (time taken: 21.611000061035156)\r\n```\r\n\r\n### Boot time\r\n\r\n78 static classes, 19 static modules, 11 `include`s, 2 `extend`s.\r\n0 `Class.new` invocations, 0 `Module.new`\r\n\r\nMeasured using\r\n``` js\r\nwindow.onload = function () {\r\n  var loadTime = window.performance.timing.domContentLoadedEventEnd-window.performance.timing.navigationStart;\r\n  console.log('Full load time is '+ loadTime / 1000);\r\n}\r\n```\r\n\r\nChrome\r\n```\r\nmaster: Page load time is 0.167\r\npatch: Full load time is 0.105\r\n```\r\n\r\nFF:\r\n```\r\nmaster: Full load time is 0.139\r\npatch: Full load time is 0.104\r\n```\r\n\r\nSafari:\r\n```\r\nmaster: Full load time is 0.343\r\npatch: Full load time is 0.263\r\n```",
      "More benchmarks on V8:\r\n``` sh\r\nfunction benchmark() {\r\n  echo $1 > test.rb\r\n  gco master\r\n  opal -c test.rb > test.js\r\n  echo \"Master:\"\r\n  repeat 5 time node test.js\r\n  gco module-prepend\r\n  echo \"Patch:\"\r\n  opal -c test.rb > test.js\r\n  repeat 5 time node test.js\r\n}\r\n```\r\n\r\n`Class.new`:\r\n```\r\n$ benchmark \"1000.times { Class.new }\"\r\nSwitched to branch 'master'\r\nYour branch is up to date with 'origin/master'.\r\nMaster:\r\n  0.28s user 0.04s system 99% cpu 0.313 total\r\n  0.27s user 0.04s system 100% cpu 0.310 total\r\n  0.28s user 0.04s system 100% cpu 0.314 total\r\n  0.27s user 0.04s system 100% cpu 0.305 total\r\n  0.27s user 0.04s system 99% cpu 0.309 total\r\nSwitched to branch 'module-prepend'\r\nYour branch is up to date with 'origin/module-prepend'.\r\nPatch:\r\n  0.18s user 0.03s system 99% cpu 0.217 total\r\n  0.19s user 0.03s system 97% cpu 0.226 total\r\n  0.19s user 0.03s system 97% cpu 0.226 total\r\n  0.19s user 0.03s system 96% cpu 0.232 total\r\n  0.19s user 0.03s system 96% cpu 0.230 total\r\n```\r\n\r\n`Module.new`:\r\n```\r\n$ benchmark \"1000.times { Module.new }\"\r\nSwitched to branch 'master'\r\nYour branch is up to date with 'origin/master'.\r\nMaster:\r\n  0.26s user 0.04s system 99% cpu 0.295 total\r\n  0.26s user 0.04s system 99% cpu 0.298 total\r\n  0.27s user 0.04s system 98% cpu 0.310 total\r\n  0.27s user 0.04s system 99% cpu 0.312 total\r\n  0.26s user 0.04s system 99% cpu 0.295 total\r\nSwitched to branch 'module-prepend'\r\nYour branch is up to date with 'origin/module-prepend'.\r\nPatch:\r\n  0.17s user 0.03s system 98% cpu 0.198 total\r\n  0.18s user 0.03s system 97% cpu 0.214 total\r\n  0.20s user 0.03s system 97% cpu 0.236 total\r\n  0.18s user 0.03s system 97% cpu 0.213 total\r\n  0.18s user 0.03s system 96% cpu 0.224 total\r\n```\r\n\r\n`Module#include`:\r\n```\r\n$ benchmark \"K = Class.new; 1000.times { K.include(Module.new) }\"\r\nSwitched to branch 'master'\r\nYour branch is up to date with 'origin/master'.\r\nMaster:\r\n  0.45s user 0.04s system 100% cpu 0.491 total\r\n  0.46s user 0.04s system 100% cpu 0.499 total\r\n  0.46s user 0.04s system 100% cpu 0.499 total\r\n  0.46s user 0.04s system 101% cpu 0.487 total\r\n  0.47s user 0.04s system 100% cpu 0.503 total\r\nSwitched to branch 'module-prepend'\r\nYour branch is up to date with 'origin/module-prepend'.\r\nPatch:\r\n  2.67s user 0.04s system 99% cpu 2.710 total\r\n  3.55s user 0.04s system 99% cpu 3.605 total\r\n  5.18s user 0.05s system 99% cpu 5.239 total\r\n  2.42s user 0.04s system 99% cpu 2.483 total\r\n  2.42s user 0.04s system 99% cpu 2.462 total\r\n```\r\n\r\n`singleton_class`:\r\n```\r\n$ benchmark \"1000.times { Object.new.singleton_class }\"\r\nSwitched to branch 'master'\r\nYour branch is up to date with 'origin/master'.\r\nMaster:\r\n  0.26s user 0.04s system 97% cpu 0.302 total\r\n  0.26s user 0.03s system 99% cpu 0.287 total\r\n  0.25s user 0.03s system 100% cpu 0.286 total\r\n  0.26s user 0.03s system 99% cpu 0.295 total\r\n  0.26s user 0.03s system 100% cpu 0.291 total\r\nSwitched to branch 'module-prepend'\r\nYour branch is up to date with 'origin/module-prepend'.\r\nPatch:\r\n  0.19s user 0.03s system 99% cpu 0.225 total\r\n  0.20s user 0.03s system 97% cpu 0.238 total\r\n  0.20s user 0.03s system 97% cpu 0.235 total\r\n  0.20s user 0.03s system 97% cpu 0.232 total\r\n  0.20s user 0.03s system 97% cpu 0.236 total\r\n```\r\n\r\nSo `Module#include` seems to be a bottleneck, it's 5-7 times slower. btw, `Module#prepend` has the same performance (because it does pretty much the same thing)",
      "Actually it's not that bad when the ancestors chain is small:\r\n```\r\n$ benchmark \"1000.times { Class.new { include Module.new }}\"\r\nSwitched to branch 'master'\r\nYour branch is up to date with 'origin/master'.\r\nMaster:\r\n  0.36s user 0.04s system 103% cpu 0.390 total\r\n  0.37s user 0.04s system 103% cpu 0.392 total\r\n  0.37s user 0.04s system 103% cpu 0.400 total\r\n  0.36s user 0.04s system 103% cpu 0.389 total\r\n  0.36s user 0.04s system 103% cpu 0.387 total\r\nSwitched to branch 'module-prepend'\r\nYour branch is up to date with 'origin/module-prepend'.\r\nPatch:\r\n  0.26s user 0.03s system 105% cpu 0.283 total\r\n  0.27s user 0.04s system 104% cpu 0.293 total\r\n  0.26s user 0.04s system 104% cpu 0.288 total\r\n  0.26s user 0.04s system 103% cpu 0.285 total\r\n  0.25s user 0.04s system 104% cpu 0.282 total\r\n```\r\n\r\nAlso I've mirco-benchmarked `Opal.append_features` for this specific case:\r\n1. `3937.128662109375 μs` - getting a list of `module`'s ancestors.\r\n2. `5101.341552734375 μs` - build iclasses.\r\n3. `6154.453857421875 μs` - building a chain of iclasses (i.e. chaining prototypes)\r\n4. `568.290283203125 μs` finding a place in existing prototypes chain to insert a new one\r\n5. `2381.034912109375 μs` - updating module's prototype (i.e. inserting a chain if iclasses)",
      "@iliabylich I'm wondering why FF is so slow compared to Chrome to run the RubySpec suite ? What version are you using ?\r\n\r\nAlso the performance of `module#include` is intriguing... basically it's faster when we include a module only once into a class but it's 5-7 slower when we include 1000 modules to the same class ?\r\nI didn't have time to read the code yet but I guess we are doing checks on the class that's why include is getting slower and slower ?",
      "> What version are you using ?\r\n\r\n`60.0.1`\r\n\r\n> it's faster when we include a module only once into a class but it's 5-7 slower when we include 1000 modules to the same class ?\r\n\r\nexactly.\r\n\r\n> we are doing checks on the class that's why include is getting slower and slower ?\r\n\r\nFrom what I understand for a case when we have a huge ancestors chain the time is mostly taken by the part that rebuilds a prototype chain. Maybe JS engines do some recalculations when it happens, I don't know. But anyway, that's a rare case, so I think it's fine.",
      "True. I will run your branch against the Asciidoctor.js benchmark to see if there's a performance gain :)\r\nBut as far as I know we are not using prepend anymore.",
      "> From what I understand for a case when we have a huge ancestors chain the time is mostly taken by the part that rebuilds a prototype chain. Maybe JS engines do some recalculations when it happens, I don't know. But anyway, that's a rare case, so I think it's fine.\r\n\r\nhttps://jsperf.com/long-proto-chain/1 seems confirmed, the difference with building a proto chain with `Object.create` is astounding, yet I agree that's fine as it is",
      "@elia Did you have a chance to check it? The fix for caching `$$ancestors` is here, can we merge it?",
      "@iliabylich merge at will"
    ],
    "commit_messages": [
      "Module#prepend (#1826)\n\n* Massive rewrite of runtime.js: inheritance and modules inclusion is implemented using prototypes.\r\n\r\n* Added Module#prepend."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620909ed6ca63ac8d87ebd2",
    "number": 1825,
    "body": "I don't know how to solve this issue but the added test will throw an exception:\r\n\r\n```\r\nArgumentError: invalid character (failed: The string to be encoded contains characters outside of the Latin1 range.)\r\n```\r\n\r\nPreviously `binread` was using `toString('binary')` (alias for `latin1`) and Base64 was working.",
    "head_branch": "binread-base64",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620909fd6ca63ac8d87ebd3",
    "number": 1824,
    "body": "Credits to: https://github.com/mathiasbynens/jsesc",
    "head_branch": "node-binread",
    "is_a_fork": true,
    "comments": [
      "And maybe converting a file content to a utf8 string is easier:\r\n```\r\n> fs.readFileSync(\"tmp/foo\").toString('utf-8')\r\n'Le français c\\'est compliqué :)\\\\n'\r\n> \"Le fran\\xC3\\xA7ais c'est compliqu\\xC3\\xA9 :)\\\\n\"\r\n'Le franÃ§ais c\\'est compliquÃ© :)\\\\n'\r\n```\r\n\r\n(The output of the first command looks correct)",
      "> And maybe converting a file content to a utf8 string is easier:\r\n\r\nThat was my first thought but I wasn't sure that the expected output was identical with MRI.\r\nI'm now using `toString('utf-8')`",
      "Thanks!",
      "Damn I found a bug when using `binread` (on an image) with `Base64.strict_encode64`... I will open a new pull request, sorry :disappointed: ",
      "```\r\nruby -e \"p ::IO.binread 'test/cruby/test/cgi/testdata/small.png'\" \r\n\"\\x89PNG\\n\\x1A\\n\\x00\\x00\\x00\\nIHDR\\x00\\x00\\x00\\x11\\x00\\x00\\x00\\x11\\b\\x02\\x00\\x00\\x00\\xB4\\x0F\\xD0\\xAD\\x00\\x00\\x00\\x1AIDAT(\\x91c\\xFC\\xFF\\xFF?\\x03\\x89\\x80\\x89T\\n\\xA3zF\\xF5\\x8C\\xEA\\x81\\x03\\x00\\x8Ah\\x03\\x1F\\xEE,\\x99\\x00\\x00\\x00\\x00\\x00IEND\\xAEB`\\x82\"\r\n```\r\n```\r\nnode -e \"console.log(require('fs').readFileSync('test/cruby/test/cgi/testdata/small.png').toString('utf-8'))\"\r\n�PNG\r\n\u001a\r\n\r\nIHDR\u0011\u0002�Э\u001aIDAT(�c���?\u0003���T\r\n�zF���\u0003�h\u0003\u001f�,�IEND�B`�\r\n```\r\n\r\n**encode in base64**\r\n```\r\nruby -e \"require 'base64'; p ::Base64.strict_encode64(::IO.binread 'test/cruby/test/cgi/testdata/small.png')\"\r\n\"iVBORwoaCgAAAApJSERSAAAAEQAAABEIAgAAALQP0K0AAAAaSURBVCiRY/z//z8DiYCJVAqjekb1jOqBAwCKaAMf7iyZAAAAAABJRU5ErkJggg==\"\r\n```\r\n\r\nWhen doing the same using Node.js, the following exception is thrown:\r\n```\r\nArgumentError: invalid character (failed: The string to be encoded contains characters outside of the Latin1 range.)\r\n```",
      "I gave it more thoughts and I think it's a bad idea. Ruby and Node.js use two fundamentally different approaches. Now `binread` produces a valid stream of characters when reading a text file (encoded in utf-8) but will produce an invalid stream of characters when reading a binary file.\r\n\r\nI think we should stick with `toString('binary')` as it's the closest we can get to the Ruby implementation.\r\n\r\n@iliabylich Unless you have a better idea, could you please revert this commit ?"
    ],
    "commit_messages": [
      "Implement binread (mimic ASCII-8BIT encoding) (#1824)\n\n* Implement binread (mimic ASCII-8BIT encoding)\r\n\r\n* Use toString method"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090a0d6ca63ac8d87ebd4",
    "number": 1822,
    "body": "",
    "head_branch": "regexp_names",
    "is_a_fork": true,
    "comments": [
      "Could you check if there are any specs in the RubySpec suite that are green now? `env INVERT_RUNNING_MODE=true bundle exec rake mspec_ruby_nodejs` shows them, filters are in the `spec/filters/bugs/regexp.rb` directory.",
      "yes, named captures tests work, except one:\r\n```\r\nfails \"Regexp#names returns each capture name only once\" # Exception: Invalid regular expression: /n(?<cap>ee)d(?<cap>le)/: Duplicate capture group name\r\n```\r\nThis exception comes from js. Not sure what to do? Catch in the initializer? But then the regexp is useless anyway within js.",
      "hit the wrong button",
      "Superseded by #2272"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090a1d6ca63ac8d87ebd5",
    "number": 1821,
    "body": "Closes https://github.com/opal/opal/issues/1684\r\n\r\nThis PR defines all props using `Object.defineProperty`.\r\nIt also introduces `$$methods` and `$$ancestors` props.\r\nBoth are always up-to-date in runtime (yes, `prepend` would be much easier to implement with this patch).\r\n\r\nThere's a test under `spec/opal` suite that verifies that there are no iterable props on core JS objects.\r\nAlso I guess we need a better random generator library. `seedrandom` that is currently used pollutes `Math` module.",
    "head_branch": "use-defineProperty-for-methods-and-props",
    "is_a_fork": true,
    "comments": [
      "Of course it **must** be squashed before merging 😄 There's too much garbage in intermediate commits.",
      "```\r\n$ repeat 5 time node master.js\r\nnode master.js  0.22s user 0.03s system 98% cpu 0.261 total\r\nnode master.js  0.23s user 0.03s system 98% cpu 0.265 total\r\nnode master.js  0.23s user 0.03s system 98% cpu 0.262 total\r\nnode master.js  0.23s user 0.03s system 98% cpu 0.272 total\r\nnode master.js  0.22s user 0.03s system 98% cpu 0.259 total\r\n```\r\n\r\n```\r\n$ repeat 5 time node patch.js\r\nnode patch.js  0.24s user 0.04s system 97% cpu 0.285 total\r\nnode patch.js  0.24s user 0.04s system 98% cpu 0.282 total\r\nnode patch.js  0.24s user 0.04s system 98% cpu 0.284 total\r\nnode patch.js  0.24s user 0.03s system 97% cpu 0.285 total\r\nnode patch.js  0.25s user 0.03s system 97% cpu 0.287 total\r\n```\r\n\r\nI can also benchmark other things, just let me know.",
      "@iliabylich I think we should consider for a couple of minutes if ivars should be defined as non-enumerable, probably not, but it's better to be sure\r\n\r\nPS. I'll deal with code climate tomorrow as it's having issues with the CDN 🌐 right now 🙂, it's all good anyway",
      "@elia Fixed. Also added docs for new props. Could you take a look please?",
      "This is awesome, thanks @iliabylich ! :tada: "
    ],
    "commit_messages": [
      "Use Object.defineProperty for methods and props definition (#1821)\n\nUsing Object.defineProperty(obj, prop, { enumerable: false }) does not pollute core JS objects. All props are not enumerable anymore."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090a2d6ca63ac8d87ebd6",
    "number": 1820,
    "body": "Resolves #1816 ",
    "head_branch": "issue-1816-redo-continue",
    "is_a_fork": true,
    "comments": [
      "The failure on Appveyor is: \r\n```\r\nTestBenchmark#test_realtime_output [Assertion: Expected 1 to be < 0.9990899999999998.]:\r\nExpected 1 to be < 0.9990899999999998\r\n```\r\n\r\nWhat? :confused: ",
      "No worries, with your explanations it was an easy fix :+1: \r\nDo you know what's up with `TestBenchmark#test_realtime_output` on AppVeyor ? I can't restart the build on AppVeyor (maybe it's \"just\" an intermittent failure ?)",
      "> Do you know what's up with TestBenchmark#test_realtime_output on AppVeyor ? I can't restart the build on AppVeyor (maybe it's \"just\" an intermittent failure ?)\r\n\r\n1. It fails only on windows\r\n2. the previous bulid (https://ci.appveyor.com/project/elia/opal/build/808) was green, and is was built 1 few minutes ago.\r\n\r\nLooks like your code has some conflicts with the windows-specific part of the test suite.",
      "Ok investigating :nerd_face: ",
      "I can't reproduce this issue on AppVeyor using my branch: https://ci.appveyor.com/project/Mogztter/opal/build/6\r\n\r\nIt's either an intermittent failure (since we are using the system clock) or a failure with this specific seed (`--seed 50854`).\r\n\r\nI will try to run against the same seed to see if the build is green or not.",
      "> I can't reproduce this issue on AppVeyor using my branch\r\n\r\nGood to know. If it's related to some specific order of running specs I believe we can merge this PR and create a separate issue for investigating. Hope it can be reproduced on linux/mac 😄 \r\n\r\nAlso I'm not sure that MRI suite is randomized. If it is that we are good to go. Otherwise setting a `RANDOM_SEED` variable has no effect.",
      "Yes, `RANDOM_SEED` doesn't work for minitest suite:\r\n```\r\n$ env bundle exec rake minitest_nodejs\r\nWaiting for server…\r\nConnecting to localhost:4567...\r\nConnecting to localhost:4567...\r\nConnecting to localhost:4567...\r\nConnecting to localhost:4567...\r\nConnecting to localhost:4567...\r\n== Sinatra (v2.0.1) has taken the stage on 4567 for development with backup from Puma\r\nPuma starting in single mode...\r\n* Version 3.11.3 (ruby 2.5.1-p57), codename: Love Song\r\n* Min threads: 0, max threads: 16\r\n* Environment: development\r\n* Listening on tcp://localhost:4567\r\nUse Ctrl-C to stop\r\nConnecting to localhost:4567...\r\nServer ready.\r\nexport RANDOM_SEED=20872 # to re-use the same randomization\r\nruby -rbundler/setup exe/opal -ghike -Itest -Ilib -Ivendored-minitest -Itest/cruby/test -soptparse -sio/console -stimeout -smutex_m -srubygems -stempfile -smonitor -Rnodejs -Dwarning -A --enable-source-location tmp/minitest_cruby_nodejs.rb\r\nObject freezing is not supported by Opal\r\nRun options: --seed 28908\r\n```",
      "@Mogztter Could you include this patch into PR please?\r\n```\r\n--- a/vendored-minitest/minitest.rb\r\n+++ b/vendored-minitest/minitest.rb\r\n@@ -204,7 +204,7 @@ module Minitest\r\n\r\n     unless options[:seed] then\r\n       srand\r\n-      options[:seed] = (ENV[\"SEED\"] || srand).to_i % 0xFFFF\r\n+      options[:seed] = (ENV[\"RANDOM_SEED\"] || srand).to_i % 0xFFFF\r\n       orig_args << \"--seed\" << options[:seed].to_s\r\n     end\r\n```\r\n\r\nIt allows running:\r\n```\r\n$ RANDOM_SEED=1 env bundle exec rake minitest_nodejs\r\nWaiting for server…\r\nConnecting to localhost:4567...\r\nConnecting to localhost:4567...\r\nConnecting to localhost:4567...\r\nConnecting to localhost:4567...\r\nConnecting to localhost:4567...\r\n== Sinatra (v2.0.1) has taken the stage on 4567 for development with backup from Puma\r\nPuma starting in single mode...\r\n* Version 3.11.3 (ruby 2.5.1-p57), codename: Love Song\r\n* Min threads: 0, max threads: 16\r\n* Environment: development\r\n* Listening on tcp://localhost:4567\r\nUse Ctrl-C to stop\r\nConnecting to localhost:4567...\r\nServer ready.\r\nexport RANDOM_SEED=1 # to re-use the same randomization\r\nruby -rbundler/setup exe/opal -ghike -Itest -Ilib -Ivendored-minitest -Itest/cruby/test -soptparse -sio/console -stimeout -smutex_m -srubygems -stempfile -smonitor -Rnodejs -Dwarning -A --enable-source-location tmp/minitest_cruby_nodejs.rb\r\nObject freezing is not supported by Opal\r\nRun options: --seed 1\r\n```\r\n\r\nAnd by the way I can't reproduce the failure on your branch with `RANDOM_SEED=50854`. Let's see how it works on CI",
      "@iliabylich I added your patch and cleaned up my commits",
      "Now it's green. Weird, looks like we have conflicting specs.",
      "Thanks!"
    ],
    "commit_messages": [
      "Merge pull request #1820 from Mogztter/issue-1816-redo-continue\n\nAdd a continue to break the current iteration when using redo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090a3d6ca63ac8d87ebd7",
    "number": 1819,
    "body": "",
    "head_branch": "rake-comment",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Task mspec_node has been renamed mspec_nodejs (#1819)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090a4d6ca63ac8d87ebd8",
    "number": 1818,
    "body": "This test should fail on Appveyor (Windows)",
    "head_branch": "issue-1817-front-slash-module-name",
    "is_a_fork": true,
    "comments": [
      "I can reproduce this issue when using the builder in JavaScript: https://ci.appveyor.com/project/Mogztter/opal-node-compiler/build/3\r\n\r\nCode:\r\nhttps://github.com/Mogztter/opal-node-compiler/blob/fc1e2a64aeed71288ff012d7d0288658764fc697/spec/main.spec.js#L29-L35\r\n\r\nI will investigate :wink: \r\n\r\nThe following code is incorrect when running the builder in JavaScript:\r\n\r\nhttps://github.com/opal/opal/blob/0dccf06b5a3fada651eca7d16b0f2d2cfd3ecde2/lib/opal/builder.rb#L216-L219\r\n\r\nIn our case we are using the name `nodejs/open-uri`.\r\n\r\n```rb\r\nFile.dirname(path) # returns nodejs\r\nFile.basename(path) # returns open-uri\r\n```\r\nBut when using `File.join` on Windows:\r\n```rb\r\nFile.join('nodejs', 'open-uri') # returns nodejs\\\\open-uri\r\n```\r\n\r\nI'm guessing that [File.join (Ruby)](https://ruby-doc.org/core-2.2.0/File.html#method-c-join) always uses front slashes whereas [path.join (Node.js)](https://nodejs.org/api/path.html#path_path_join_paths) uses back slashes on Windows ?",
      "Yes, I think you are right - https://github.com/ruby/ruby/blob/trunk/file.c#L4641. Also it uses a constant `\"/\"` for joining instead of a `File::SEPARATOR` (i.e. overriding a constant doesn't change the return value of `File.join('a', 'b')`)",
      "@iliabylich Thanks for the confirmation\r\n\r\nI've changed the Node.js implementation to use `path.posix.join` instead of `path.join`. It should fix the new test.\r\n\r\nGreen bars! :green_heart: "
    ],
    "commit_messages": [
      "Add a test on module name with front slash (#1818)\n\n* Add a test on module name with front slash\r\n\r\nThis test should fail on Appveyor (Windows)\r\n\r\n* File.join should join parts using File::SEPARATOR\r\n\r\n* Ruby is using forward slashes to join parts"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090a5d6ca63ac8d87ebd9",
    "number": 1815,
    "body": "",
    "head_branch": "elia/update-ruby-versions",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1815 from opal/elia/update-ruby-versions\n\nUpdate CI ruby versions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090a6d6ca63ac8d87ebda",
    "number": 1814,
    "body": "Adds the location of the error inside the opal file that's being compiled for a better user experience.\r\n\r\nExample:\r\n\r\n```\r\n\r\nopal:elia/opal-backtrace-for-compilation-errors ⤑ echo '1                                                                              ~/C/opal\r\n                                                  2\r\n                                                  3\r\n                                                  4\r\n                                                  5\r\n                                                  def {}' > tmp/prova.rb\r\nopal:elia/opal-backtrace-for-compilation-errors ⤑ bin/opal tmp/prova.rb                                                                ~/C/opal\r\ntmp/prova.rb:6:5: error: unexpected token tLCURLY\r\ntmp/prova.rb:6: def {}\r\ntmp/prova.rb:6:     ^ \r\nTraceback (most recent call last):\r\n\t22: from bin/opal:4:in `<main>'\r\n\t21: from bin/opal:4:in `load'\r\n\t20: from /Users/elia/Code/opal/exe/opal:24:in `<top (required)>'\r\n\t19: from /Users/elia/Code/opal/lib/opal/cli.rb:66:in `run'\r\n\t18: from /Users/elia/Code/opal/lib/opal/cli.rb:78:in `builder'\r\n\t17: from /Users/elia/Code/opal/lib/opal/cli.rb:107:in `create_builder'\r\n\t16: from /Users/elia/Code/opal/lib/opal/cli.rb:146:in `evals_or_file'\r\n\t15: from /Users/elia/Code/opal/lib/opal/cli.rb:107:in `block in create_builder'\r\n\t14: from /Users/elia/Code/opal/lib/opal/builder.rb:95:in `build_str'\r\n\t13: from /Users/elia/Code/opal/lib/opal/builder_processors.rb:94:in `requires'\r\n\t12: from /Users/elia/Code/opal/lib/opal/builder_processors.rb:84:in `compiled'\r\n\t11: from /Users/elia/Code/opal/lib/opal/compiler.rb:173:in `compile'\r\n\t10: from /Users/elia/Code/opal/lib/opal/compiler.rb:187:in `parse'\r\n\t 9: from /Users/elia/Code/opal/lib/opal/compiler.rb:232:in `re_raise_with_location'\r\n\t 8: from /Users/elia/Code/opal/lib/opal/compiler.rb:187:in `block in parse'\r\n\t 7: from /Users/elia/.rvm/rubies/ruby-2.5.1/lib/ruby/gems/2.5.0/gems/parser-2.5.1.0/lib/parser/base.rb:214:in `tokenize'\r\n\t 6: from /Users/elia/Code/opal/lib/opal/parser/default_config.rb:32:in `parse'\r\n\t 5: from /Users/elia/.rvm/rubies/ruby-2.5.1/lib/ruby/gems/2.5.0/gems/parser-2.5.1.0/lib/parser/base.rb:167:in `parse'\r\n\t 4: from /Users/elia/.rvm/rubies/ruby-2.5.1/lib/ruby/2.5.0/racc/parser.rb:259:in `do_parse'\r\n\t 3: from /Users/elia/.rvm/rubies/ruby-2.5.1/lib/ruby/2.5.0/racc/parser.rb:259:in `_racc_do_parse_c'\r\n\t 2: from /Users/elia/.rvm/rubies/ruby-2.5.1/lib/ruby/gems/2.5.0/gems/parser-2.5.1.0/lib/parser/base.rb:262:in `on_error'\r\n\t 1: from /Users/elia/.rvm/rubies/ruby-2.5.1/lib/ruby/gems/2.5.0/gems/parser-2.5.1.0/lib/parser/diagnostic/engine.rb:73:in `process'\r\ntmp/prova.rb:6:in `def {}': unexpected token tLCURLY (Opal::SyntaxError)\r\nopal:elia/opal-backtrace-for-compilation-errors ⤑                           \r\n```",
    "head_branch": "elia/opal-backtrace-for-compilation-errors",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1814 from opal/elia/opal-backtrace-for-compilation-errors\n\nAdd opal backtrace for compilation errors"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090a7d6ca63ac8d87ebdb",
    "number": 1813,
    "body": "fixes #1810",
    "head_branch": "elia/builder-relative-path-fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1813 from opal/elia/builder-relative-path-fix\n\nUse relative module names in Builder#build"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090a8d6ca63ac8d87ebdc",
    "number": 1812,
    "body": "",
    "head_branch": "elia/runtime-loaded-fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1812 from opal/elia/runtime-loaded-fix\n\nOpal.loaded was stopping after a known file"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090a8d6ca63ac8d87ebdd",
    "number": 1811,
    "body": "```\r\n%x{\r\n}\r\n```\r\n\r\nthis now crashes the compiler",
    "head_branch": "elia/empty-x-strings",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1811 from opal/elia/empty-x-strings\n\nSupport empty x-strings"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090a9d6ca63ac8d87ebde",
    "number": 1809,
    "body": "Various code samples from guides, docs, tutorials, etc have fallen out of date and no longer work. I've tweaked the samples to make them work. \r\n\r\nThe goal was to get the code to a point where new users can get samples to work by copy / pasting, but I am very open to reviewing and refactoring this code to make it more proper.\r\n\r\nChanges:\r\n- [x] Make the dist task build an \"auto-loadable\" version of Opal, so CDN links work properly again. This is how Opal Sprockets used to work before we switched to Opal Builder.\r\n- [x] Update JQuery guide to load dependencies properly\r\n- [x] Remove -j use from Rails guides (Rails dropped support for that option)\r\n- [x] Fix index example in \"Using Sprockets\" (I feel like there's an easier way)\r\n- [x] Update Sinatra doc to use Opal-Sprockets (This was messy because Opal-Sprockets doesn't make source maps readily available)",
    "head_branch": "fix-tutorials",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1809 from eiko/fix-tutorials\n\nFix guides, docs and tutorials"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090aad6ca63ac8d87ebdf",
    "number": 1808,
    "body": "Context: https://github.com/opal/opal/pull/1803#issuecomment-382160334",
    "head_branch": "kernel-exit-number",
    "is_a_fork": true,
    "comments": [
      "@iliabylich I've added a test case :wink: ",
      "Thanks"
    ],
    "commit_messages": [
      "Returns the exit code (#1808)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090abd6ca63ac8d87ebe0",
    "number": 1807,
    "body": "Before this PR `opal -rnodejs -e \"exit(1)\"` always exited with 0. Also there were some issues with chrome executables on travis. We have to change the owner and mode of the `/opt/google/chrome/chrome-sandbox`. And again, the build was green because `exit` was broken.\r\n",
    "head_branch": "fix-ci",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix CI (Kernel#exit always exits with 0 code, chrome runner exits with 0 if chrome wasn't started). (#1807)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090acd6ca63ac8d87ebe1",
    "number": 1806,
    "body": "",
    "head_branch": "add-c-lexer",
    "is_a_fork": true,
    "comments": [
      "ok. Travis seems to be working with this patched config. This PR includes a c_lexer gem from https://github.com/opal/c_lexer. The gem itself is not released yet, that's why I've temporary changed `.travis.yml` to build it on-the-fly (I'll revert it before merging).\r\n\r\n@opal/core any comments? I'm going to review c_lexer a few more times before releasing it, so I need 1-2 days. If everything ok with this PR then the plan is:\r\n1. release `c_lexer` (I think we should stick to the version of the `parser` to avoid confusions)\r\n2. revert changes in the `.travis.yml`\r\n3. add `c_lexer` to the gemfile (or maybe gemspec)\r\n4. make sure that it works on appveyor\r\n5. merge it!",
      "I've added an extra layer for selecting the best parser (from the performance perspective). `c_lexer` doesn't change any constant from the `parser` gem. Instead, it introduces another class (`Parser::Ruby25WithCLexer`) that uses `CLexer` by default. I'd like to get a review if possible. If everything is ok I think I'm ready to release `c_lexer`.",
      "All green! Only JRuby builds and opal-parser use pure ruby lexer.",
      "@iliabylich the :cop: got me, missing `# frozen_string_literal: true`, although I'm not sure why codeclimate is happy …maybe a previews review 🤷‍♂️?"
    ],
    "commit_messages": [
      "Add C lexer from opal/c_lexer. (#1806)\n\n* Add C lexer from opal/c_lexer."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090add6ca63ac8d87ebe2",
    "number": 1804,
    "body": "### Backtrace\r\n\r\n    echo \"def foo\\n endz\" > tmp/foo.rb\r\n\r\n#### before:\r\n\r\n```\r\n⤑ bin/opal tmp/foo.rb                                                                                                      ~/C/opal\r\ntmp/foo:1:8: error: bare backslash only allowed before newline\r\ntmp/foo:1: def foo\\n endz\r\ntmp/foo:1:        ^      \r\n…\r\n```\r\n\r\n#### after:\r\n\r\n```\r\nopal:elia/errors-and-filenames-review ⤑ bin/opal tmp/foo.rb                                                                            ~/C/opal\r\ntmp/foo.rb:1:8: error: bare backslash only allowed before newline\r\ntmp/foo.rb:1: def foo\\n endz\r\ntmp/foo.rb:1:        ^      \r\n```\r\n\r\n### Module names\r\n\r\nare now discarding everything after the first dot in the basename: `foo/bar.js.opalerb => Opal.modules[\"foo/bar\"]`\r\n\r\n### Source maps\r\n\r\nUntested, but now if possible the original node location is used instead of DUMMY_LOCATION in rewriters, this is a potential fix for sourcemaps that erroneously pointed at line 1 col 0",
    "head_branch": "elia/errors-and-filenames-review",
    "is_a_fork": false,
    "comments": [
      "Some jobs on CI are failing, but the code LGTM",
      "@iliabylich specs are now green, the only one whining is codeclimate, I'd leave the method as is, but open to suggestions on how to improve it",
      "Maybe an abstraction of `ErrorLocation (error -> string)` and `BacktraceLIne (error -> backtrace)`? We can use as many objects as we want because that's the last place before throwing an error. It doesn't have to be optimized.",
      "Also I'm not sure about renaming `Opal::Parser::WithRubyLexer` to `Opal::Parser::RubyLexer`. It's not a lexer, it's a parser that uses some specific lexer. Same for the `CLexer`",
      "Reverted the removal of the `With` prefix"
    ],
    "commit_messages": [
      "Merge pull request #1804 from opal/elia/errors-and-filenames-review\n\nbetter errors, better backtraces, filenames with extensions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090aed6ca63ac8d87ebe3",
    "number": 1803,
    "body": "",
    "head_branch": "issue-1793-cache-global-regexp",
    "is_a_fork": true,
    "comments": [
      "Could you also check if it's possible to optimize `Regexp#match` and `Regexp#match?`?",
      "> Could you also check if it's possible to optimize Regexp#match and Regexp#match??\r\n\r\nOk :smile: \r\nSome tests were failing on my machine but not on Travis:\r\n\r\n```\r\nfails \"String#index with Regexp behaves the same as String#index(string) for escaped string regexps\" # Expected 3 to equal 0\r\nfails \"String#rindex with Regexp behaves the same as String#rindex(string) for escaped string regexps\" # Expected nil to equal 0\r\nfails \"String#split with Regexp defaults to $; when regexp isn't given or nil\" # Expected [\"x\", \",,\"] to equal [\"x\", \",\"]\r\n```\r\n\r\nIn the meantime, I reverted my change on `rindex`, `split` and `index`.",
      "Shouldn't there also be something like `pattern.$$g.lastIndex = null` before returning it?",
      "Another benefit is that there's less code duplication :wink: \r\n\r\n> Shouldn't there also be something like pattern.$$g.lastIndex = null before returning it?\r\n\r\nI think you're right, I still have one failing test though:\r\n\r\n```\r\nfails \"String#index with Regexp returns the index of the first match of regexp\" # Expected 9 to equal 1\r\n```",
      "Weirdly it's working on Travis... I'm using `bundle exec rake` on my local copy.\r\nCould someone try to run the tests suite to confirm if it's just me or if there's really an issue ? ",
      "> Weirdly it's working on Travis\r\n\r\nIt doesn't. Exit code is 0, but there's still a failing spec - https://travis-ci.org/opal/opal/jobs/367786469. That's a bug in the `Kernel#exit` method.\r\n\r\n``` ruby\r\n  def exit(status = true)\r\n    $__at_exit__ ||= []\r\n\r\n    until $__at_exit__.empty?\r\n      block = $__at_exit__.pop\r\n      block.call\r\n    end\r\n\r\n    %x{\r\n      if (status == null) {\r\n        status = 0\r\n      } else if (status.$$is_boolean) {\r\n        status = status ? 0 : 1;\r\n      } else if (status.$$is_numeric) {\r\n        status = status.$to_i();\r\n      } else {\r\n        status = 0\r\n      }\r\n\r\n      Opal.exit(status);\r\n    }\r\n    nil\r\n  end\r\n```\r\n\r\nCould you change `$$is_numeric` to `$$is_number`? It should fix the issue.",
      "Basically on master `opal -e 'exit(1)'` actually exits with 0 code. With a small fixed mentioned above it should exit with 1.",
      "Nice catch, I will fix the `exit` method.",
      "Given the error message and looking at the code I think this spec shouldn't be run ?\r\n\r\nhttps://github.com/ruby/spec/blob/4e665c86ad56122a0e47445446ca057297756f92/core/string/index_spec.rb#L196\r\n\r\nThere's a special condition on the Ruby spec file: `not_supported_on :opal do`",
      "The spec should, but only partially. `not_supported_on` has a special behavior when used by the RubySpec - https://github.com/opal/opal/blob/master/tasks/testing/mspec_special_calls.rb#L20-L24.\r\nYou can check it yourself:\r\n```\r\n$ ruby -rbundler/setup -ropal -r ./tasks/testing/mspec_special_calls.rb bin/opal -c --no-opal --no-exit -e '1; not_supported_on :opal do; 2; end; 3'\r\n/* Generated by Opal 0.11.1.dev */\r\n(function(Opal) {\r\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;\r\n\r\n\r\n  1;\r\n  ;\r\n  return 3;\r\n})(Opal);\r\n```",
      "@Mogztter https://github.com/ruby/spec/blob/4e665c86ad56122a0e47445446ca057297756f92/core/string/index_spec.rb#L206 <- this expectation fails. I'll take a look",
      "Ok, the problem here is that in somes cases regexes that are multiline if original regex is multiline (that's what `Opal.global_regexp` does), but in some cases generated regexes are **always** multiline.\r\n\r\nFor the failing test case (I've added `console.log(regex)` to the `String#index` locally:\r\n```\r\n# master\r\n$ opal -e 'p \"b\\nablabla\".index(/$/)'\r\n/$/gm\r\n1\r\n\r\n# your branch\r\n$ opal -e 'p \"b\\nablabla\".index(/$/)'\r\n/$/g\r\n9\r\n```\r\n\r\nI guess we need another method like `Opal.global_multiline_regexp`. An extra parameter for `Opal.global_regexp` that forces multiline flag is also an option, but tbh I don't like such polymorphism of interfaces. And we definitely need to set such regex on another prop (maybe on the same if the source is also multiline). @elia what do you think?",
      "> but in some cases generated regexes are always multiline.\r\n\r\nOn master, the following methods are always multiline:\r\n\r\n* split\r\n* scan\r\n* rpartition\r\n* rindex\r\n* index\r\n* gsub\r\n\r\nIs that correct ?\r\n\r\n> I guess we need another method like Opal.global_multiline_regexp\r\n\r\nI agree.\r\n\r\n> And we definitely need to set such regex on another prop\r\n\r\n`$$gm` ?\r\n\r\n> (maybe on the same if the source is also multiline). \r\n\r\nWhy not, it will avoid to create an extra RegExp if the regexp is already multiline:\r\n\r\n\r\n````js\r\nOpal.global_multiline_regexp= function(pattern) {\r\n  if (pattern.multiline) {\r\n    if (pattern.$$g == null) {\r\n      pattern.$$g = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));\r\n    } else {\r\n      pattern.$$g.lastIndex = null; // reset lastIndex property\r\n    }\r\n    return pattern.$$g;\r\n  }\r\n  if (pattern.$$gm == null) {\r\n    pattern.$$gm = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));\r\n  } else {\r\n    pattern.$$gm.lastIndex = null; // reset lastIndex property\r\n  }\r\n  return pattern.$$gm;\r\n}\r\n`````\r\n",
      "> Is that correct ?\r\n\r\nYes\r\n\r\n> `$$gm` ?\r\n\r\nYes, sounds good to me\r\n\r\nAlso probably we could reduce duplicating a bit (**not tested**):\r\n``` js\r\nOpal.global_multiline_regexp = function(pattern) {\r\n  var result;\r\n\r\n  if (pattern.multiline) {\r\n    if (pattern.$$g != null) {\r\n      result = pattern.$$g;\r\n    } else {\r\n      result = pattern.$$g = new Regexp(...);\r\n    }\r\n  } else if (pattern.$$gm != null) {\r\n    result = pattern.$$gm;\r\n  } else {\r\n    result = pattern.$$gm = new Regexp(...);\r\n  }\r\n\r\n  result.lastIndex = null;\r\n\r\n  return result;\r\n}\r\n```",
      "@Mogztter can you add a check to see if the `pattern` already has the `g` flag? I'm not sure if an Opal generated regexp can have `/g` but it's certainly possible for a regexp to be coming from JS",
      "Sure, I'm on it! :grinning: ",
      "> Could you change $$is_numeric to $$is_number? It should fix the issue.\r\n\r\n@iliabylich Done https://github.com/opal/opal/pull/1808\r\n\r\n> can you add a check to see if the pattern already has the g flag?\r\n\r\n@elia Done",
      "@elia any comments from your side?",
      ":+1: "
    ],
    "commit_messages": [
      "Merge pull request #1803 from Mogztter/issue-1793-cache-global-regexp\n\nResolve #1793, cache global Regexp"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090afd6ca63ac8d87ebe4",
    "number": 1802,
    "body": "- add StringIO-based Logger implementation w/ default formatter\r\n- enable ruby/library/logger/severity_spec",
    "head_branch": "issue-1801-logger",
    "is_a_fork": true,
    "comments": [
      "@elia @iliabylich I'm unable to activate any of the other logger tests from ruby spec as they all rely on writing a log file. Is it possible to enable file IO in this part of the test suite? If so, then I'll be able to update the implementation to add basic support for writing to a log file. If that's not possible, should we add tests somewhere else? Please advise.",
      "cc: @Mogztter ",
      "In general looks good! Could you run `rubocop -a stdlib/logger.rb` please? There are some warnings.\r\n\r\nOn tests: rubyspec has some tests, but it uses tmp files for testing (it can be supported by node suite, but not on chrome). Could you write some tests using `StringIO` and put them under `spec/opal/stdlib`?\r\n\r\nBy they way, I'm not sure if it's necessary to test `Formatter` and `Logger` together. By testing them separately you could use some dummy formatter in `Logger` tests, I guess that would simplify things a lot.",
      "> Could you run rubocop -a stdlib/logger.rb please?\r\n\r\nAbsolutely. I'll be sure to do that once the tests are all written.\r\n\r\n> Could you write some tests using StringIO and put them under spec/opal/stdlib?\r\n\r\nYep, I can do that.\r\n\r\n> I'm not sure if it's necessary to test Formatter and Logger together.\r\n\r\nI'll actually need to test both since the formatter can be changed.\r\n\r\n(I didn't implement the custom datetime for the default formatter because I really don't see how that is useful when you can simply change the formatter. It seems like that feature was overdesigned in stdlib).",
      "Done!\r\n\r\n50 tests added!",
      "Sorry for delay",
      "Thanks @iliabylich!"
    ],
    "commit_messages": [
      "resolves #1801 add logger impl to stdlib (#1802)\n\n- add StringIO-based Logger implementation w/ default formatter\r\n- enable ruby/library/logger/severity_spec\r\n- add Opal-specific tests for logger in ruby/opal/stdlib/logger/logger_spec.rb"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090b0d6ca63ac8d87ebe5",
    "number": 1800,
    "body": "`read` and `each_line` rely on the `@path` attribute (which is only define on a `File` class). When working with a `StringIO` in a Node.js environment, if Opal try to use `read` or `each_file` an exception will be thrown because `@path` is undefined (`Opal.nil`).\r\n\r\nIn this pull request, I've moved these two methods on the `File` class.",
    "head_branch": "nodejs-io-to-file",
    "is_a_fork": true,
    "comments": [
      "There's still a `IO#read` method in MRI:\r\n```\r\n$ echo hello | ruby -e \"p \\$stdin.read\"\r\n\"hello\\n\"\r\n```\r\nI'm not sure why this method was initially in `IO` class (since it's actually a `File#read` method), is it a bug? If so, what happens with existing implementation (`StringIO#read` is there and it doesn't use any `paths`, but `StringIO#each_line` is missing). I'm totally confused 😄 \r\n\r\nEDIT: I mean, before this PR `StringIO#read` was valid and it's valid after, as it's implemented directly on the `StringIO` class, and it seems to be correct.\r\n\r\nBut before this PR `StringIO#each_line` was inherited from `IO#each_line` (and broken, as it uses `@path`), your PR simply removes it, right?",
      "> I'm not sure why this method was initially in IO class (since it's actually a File#read method), is it a bug?\r\n\r\nYes I think so. We did not catch this bug because at the time we were not using `StringIO.read` on a Node.js environment.\r\n\r\n> If so, what happens with existing implementation (StringIO#read is there and it doesn't use any paths, but StringIO#each_line is missing). I'm totally confused smile\r\n\r\nDan added `StringIO#each_line` in https://github.com/opal/opal/pull/1787\r\nSo we should be fine since we don't need a dedicated Node.js implementation for `StringIO` :relieved: \r\n\r\n> But before this PR StringIO#each_line was inherited from IO#each_line (and broken, as it uses @path), your PR simply removes it, right?\r\n\r\nActually there's two issues:\r\n\r\n1. The first one (resolved by this PR) is that `IO#each_line` and `IO#read` should not use `@path` and looking at the implementation these methods should definitely be defined in `File` (not in `IO`)\r\n2. The second one (might be related to our environment) is that we are calling `StringIO.read` on a Node.js environment where `nodejs/io` is loaded but Opal is calling `IO.read` (Node.js flavor) and thus fails (because `IO.read` uses `path`).\r\n\r\nThis PR fixes the first issue.\r\nFor the second issue I would expect Opal to call `StringIO.read` (defined in `stdlib`) but it could be the expected behavior or it could be a wrong usage in Asciidoctor.js :thinking: \r\n\r\nDoes it make sense ? :wink: \r\n\r\n",
      "@Mogztter \r\n\r\n> Dan added StringIO#each_line in #1787\r\n\r\nMy bad, I've missed the `alias`\r\n\r\n> Does it make sense ? 😉\r\n\r\nYes!"
    ],
    "commit_messages": [
      "Move IO methods that rely on path to File (#1800)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090b1d6ca63ac8d87ebe6",
    "number": 1798,
    "body": "Closes https://github.com/opal/opal/issues/1797",
    "head_branch": "fix-1797",
    "is_a_fork": true,
    "comments": [
      "@iliabylich I can confirm that this fix solve our compilation issue in Asciidoctor.js",
      "Thank you! Going to update to the latest version :tada: :tada: :tada: "
    ],
    "commit_messages": [
      "Merge pull request #1798 from iliabylich/fix-1797\n\nWrap array in the arglist into one more array."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090b2d6ca63ac8d87ebe7",
    "number": 1796,
    "body": "It's dangerous to blindly replace `.` (dot) with `[\\s\\S]` in the regexp source. For example, if a dot appears inside a character group (e.g., `[.]`), Opal will cause the regular expression to break.\r\n\r\nThe onus should be on the library author to use `[\\s\\S]` in place of `.` when writing multi-line regular expressions as this syntax is already portable between Ruby and JavaScript. Opal should not try to do surgery on the regular expression.",
    "head_branch": "no-dot-replace",
    "is_a_fork": true,
    "comments": [
      "cc: @Mogztter ",
      "That's a breaking change:\r\n``` ruby\r\n$ cat test.rb\r\np /a.b/m.match(\"a\\nb\")\r\n\r\n$ ruby test.rb\r\n#<MatchData \"a\\nb\">\r\n\r\n(master)\r\n$ opal test.rb\r\n#<MatchData \"a\\nb\">\r\n\r\n(patch)\r\n$ opal test.rb\r\nnil\r\n```\r\n\r\nI'm fine with this change as I don't like implicit behavior. But if we are going to merge it definitely needs a changelog entry. @elia What do you think?",
      "I agree it's a breaking change, but I'd say not breaking the original regular expression is more important than breaking a hack that should never have been added in the first place.\r\n\r\nI'll gladly add a CHANGELOG entry to the PR.",
      "CHANGELOG entry added.",
      ":tada: "
    ],
    "commit_messages": [
      "Merge pull request #1796 from mojavelinux/no-dot-replace\n\ndon't substitute . in regexp source"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090b3d6ca63ac8d87ebe8",
    "number": 1795,
    "body": "- use original regexp when pos is not defined",
    "head_branch": "optimize-regexp-match-no-pos",
    "is_a_fork": true,
    "comments": [
      "When pos is not defined, there's no reason to build the regexp again as we know we're looking for the first match from the start of the string.",
      "Looks good! Could you add some tests for this functionality somewhere in `spec/opal/core/regexp/match_spec.rb`? From what I understand now `Regexp#match` calls `exec` only once when `pos` is not specified. Maybe the test could be something like:\r\n``` ruby\r\ndescribe 'Regexp#match' do\r\n  describe 'when pos is not specified' do\r\n    it 'calls .exec only once on the current object' do\r\n      regexp = /test/\r\n      count = 0\r\n      `regexp.exec = function(s) { count++ }`\r\n      regexp.match('test test')\r\n      count.should == 1\r\n    end\r\n  end\r\nend\r\n```\r\nAnd you can run it with `env PATTERN=spec/opal/core/regexp/match_spec.rb bundle exec rake mspec_opal_nodejs`",
      "Yep, I can add a test.",
      "Tests added. I think you'll like them.\r\n\r\nWhile writing the tests, I realized that pos is not even supported by Opal's Regexp#match?. That will need to be a follow-up issue. There's a stub assertion in there once it is implemented.",
      "Thank you for this high quality PR!",
      "Thank you for being welcoming and making it easy to contribute!"
    ],
    "commit_messages": [
      "optimize Regexp#match and Regexp#match? when pos is undefined (#1795)\n\n- use original regexp when pos is not defined\r\n- add Opal-specific tests for Regexp#match and Regexp#match?"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090b4d6ca63ac8d87ebe9",
    "number": 1792,
    "body": "For more information - https://github.com/opal/opal/issues/1788#issuecomment-376011523\r\nCloses https://github.com/opal/opal/issues/1788\r\n\r\n`Date.prototype.toISOString` relies on the timezone, so sometimes the spec was failing.\r\n`Date.prototype.toDateString` doesn't care about TZ, that's exactly what we need.",
    "head_branch": "fix-native-date-to_n-spec",
    "is_a_fork": true,
    "comments": [
      "@iliabylich thanks! \r\n\r\n_Feel free to push this kind of stuff and minor fixes directly to master. To check if the specs pass before pushing I use the `elia/ci-check` branch: `git push -f origin HEAD:elia/ci-check` which is built upon push._"
    ],
    "commit_messages": [
      "Fix Date#to_n spec.\nDate.prototype.toISOString relies on the timezone, so sometimes the spec was failing.\nDate.prototype.toDateString doesn't care about TZ, that's exactly what we need."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090b5d6ca63ac8d87ebea",
    "number": 1791,
    "body": "Closes https://github.com/opal/opal/issues/1790",
    "head_branch": "bump-parser",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bump parser to 2.5.0.5."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090b6d6ca63ac8d87ebeb",
    "number": 1789,
    "body": "On Fedora, the name of the Chromium binary is chromium-browser.",
    "head_branch": "chromium-browser",
    "is_a_fork": true,
    "comments": [
      "Thanks!\r\n\r\nAlso just in case, there's a `ENV['GOOGLE_CHROME_BINARY']` variable that can be set to override all this logic. But I'm still sure that we should handle default cases without any extra configuration.\r\n\r\nThe failure on appveyor is not related to your changes, the version of the `parser` that we are using was yanked, we need to bump it to `2.5.0.5`"
    ],
    "commit_messages": [
      "check for chromium-browser binary in chrome cli runner (#1789)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090b6d6ca63ac8d87ebec",
    "number": 1787,
    "body": "",
    "head_branch": "stringio-each_line",
    "is_a_fork": true,
    "comments": [
      "This is necessary in order for each_line to be used on the result of open when the path is a URI. Otherwise, it tries to read the URI from the filesystem (due to the IO#each_line implementation).\r\n\r\nPlease advise where to add a test for this method.",
      "It appears that there are no tests for StringIO#each_line in https://github.com/ruby/spec.git. Does that mean we need to add a test upstream?",
      "There's a `library` directory in RubySpec that has tests for stdlib classes, so your specs are here: https://github.com/ruby/spec/blob/master/library/stringio/each_line_spec.rb\r\n\r\nWe don't run any StringIO specs from RubySpec yet, so you can try enabling them by adding `ruby/library/stringio/each_line_spec` line to the `spec/ruby_specs` file.\r\n\r\nYou can run it later using `env RUBYSPECS=true PATTERN=spec/ruby/library/stringio/each_line_spec.rb bundle exec rake mspec_ruby_nodejs` command (all example fail for me locally, but at least I can start all of them, so all startup dependencies of this file are supported by Opal).\r\n\r\nHope it helps.",
      "Actually, it does look like there are tests. They are linked to StringIO#each, which I guess is an alias for StringIO#each_line.\r\n\r\nHow do we get these tests to run?",
      "I aliased these two methods together.",
      "> We don't run any StringIO specs from RubySpec yet, so you can try enabling them by adding ruby/library/stringio/each_line_spec line to the spec/ruby_specs file.\r\n\r\nThat's what I was looking for.",
      "I'll follow-up a bit later.",
      "I enabled the specs for StringIO#each and StringIO#each_line (which are the same) and adjusted the implementation to comply. The implementation still has some gray areas, but it passes all the specs.",
      "Thanks, great job!"
    ],
    "commit_messages": [
      "implement StringIO#each_line (#1787)\n\n* implement StringIO#each_line and StringIO#each\r\n\r\n* enable stringio#each and stringio#each_line specs\r\n\r\n- enable ruby/library/stringio/each_spec from ruby spec\r\n- enable ruby/library/stringio/each_line_spec from ruby spec\r\n- adjust implementation to comply with spec"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090b7d6ca63ac8d87ebed",
    "number": 1786,
    "body": "Not all distributions use `google-chrome-stable`, Archlinux for example packages `chromium`, which is basically chrom without branding. So let's try other names too so it works out-of-the-box on more systems.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Could you run `rubocop` please? There are two minor warnings for your code, `-a` option should fix it. We have a job on CI for this, but Travis ignores us for some reason",
      "Done",
      "Thanks!"
    ],
    "commit_messages": [
      "Try other names for chrome executable on linux (#1786)\n\n* Try other names for chrome executable on linux\r\n\r\nNot all distributions use `google-chrome-stable`, Archlinux for example packages `chromium`, which is basically chrome without branding. So let's try other names too so it works out-of-the-box on more systems."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090b8d6ca63ac8d87ebee",
    "number": 1782,
    "body": "This PR:\r\n1. Bumps `parser` dependency.\r\n2. Partially enables \"modernized\" mode, so `->{}` is now `s(:lambda)`\r\n3. Updates a rubocop (because of the new `parser` version that is incompatible with the previous version)\r\n4. Adds a `String#b` (used by `parser`)\r\n5. Disables `--fail-fast` rubocop option as it's currently broken.\r\n6. Includes minor refactoring caused by new cops from the latest version of rubocop",
    "head_branch": "modernize-parser",
    "is_a_fork": true,
    "comments": [
      "@elia Latest rubocop requires ruby >= 2.1.0 - https://github.com/bbatsov/rubocop/blob/master/rubocop.gemspec#L12. Should we drop it from the travis config?",
      "> Should we drop it from the travis config?\r\n\r\nit's fine, we're still supporting more versions than the MRI team (which as of now I think is 2.2+)",
      "I've already pushed corresponding changes",
      "yeah, saw that, merging"
    ],
    "commit_messages": [
      "Merge pull request #1782 from iliabylich/modernize-parser\n\nUpgrade parser, modernize parser/builder to emit lambda as a :lambda node."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090b9d6ca63ac8d87ebef",
    "number": 1781,
    "body": "- remove b flag silently (this already matches how Node reads files)\r\n- detect the encoding option using match?\r\n- use sub instead of gsub to remove encoding option\r\n- only sub if the encoding option is detected\r\n- rename encoding flag to encoding option (per Ruby docs)",
    "head_branch": "nodejs-file-open",
    "is_a_fork": true,
    "comments": [
      "There's absolutely no reason to warn about the 'b' flag. All that flag does in the Ruby side is suppresses EOL <-> CRLF conversion on Windows, which is the default in Node anyway.\r\n\r\nI also optimized how the encoding option is stripped as it was rather inefficient before.",
      "Technically, we could support the encoding option. We'd just have to store the setting, then apply it on read.",
      "> Technically, we could support the encoding option.\r\n\r\nScratch that. Node's idea of encoding is very different than Ruby's. First of all, Node automatically handles UTF-8 and UTF-16 variants...so you don't even have to mess with them. And Node is missing most of the encodings from which you might want to convert. So in the end, it's kind of pointless and encourages the use of UTF.\r\n\r\nSo in this case I agree we should keep the warning because it's likely an indication of an incompatibly.",
      "Thank you!",
      ":+1: "
    ],
    "commit_messages": [
      "correct and optimize File constructor in nodejs environment (#1781)\n\n- remove b flag silently (this already matches how Node reads files)\r\n- detect the encoding option using match?\r\n- use sub instead of gsub to remove encoding option\r\n- only sub if the encoding option is detected\r\n- rename encoding flag to encoding option (per Ruby docs)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090bad6ca63ac8d87ebf0",
    "number": 1779,
    "body": "I expected Date to have a `to_n` method as it has an obvious JS equivalent, so I added it on @elia's suggestion. Time already has a `to_n` so this seems reasonable.\r\n\r\nI grepped the codebase for `def to_n` and they're all in the native.rb file so that's where I put this for consistency.",
    "head_branch": "Date-to_n",
    "is_a_fork": true,
    "comments": [
      "Only thought is that every other `to_n` is on corelib classes, this is a stdlib class. But even if Date hasn't been required it should still be fine. I could add `if const_defined?(:Date)` around the class def if you think that would be better though, so you don't end up with a Date class that has nothing but the `to_n` method.",
      "@sfcgeorge it's better to move `Date#to_n` directly to _stdlib/date.rb_\r\n\r\nSee for example [_stdlib/ostruct.rb_](https://github.com/opal/opal/blob/a968b95350f0a42b2a5eaabfe9055132d53cdb93/stdlib/ostruct.rb#L62-L64)",
      "Moved to_n directly into Date class as requested and rebased.\r\n\r\nThe spec may or may not be in the right place now. It's with all the other to_n specs. OpenStruct doesn't have a corresponding spec to copy (in the Opal suite) and Date doesn't have a (Opal) spec to add to. "
    ],
    "commit_messages": [
      "Merge pull request #1779 from joblabteam/Date-to_n\n\nAdd Date#to_n (in native.rb)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090bbd6ca63ac8d87ebf1",
    "number": 1778,
    "body": "testing codeclimate w/ rubocop",
    "head_branch": "elia/codeclimate-rubocop",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1778 from opal/elia/codeclimate-rubocop\n\ncodeclimate rubocop"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090bcd6ca63ac8d87ebf2",
    "number": 1777,
    "body": "",
    "head_branch": "elia/codeclimate-rubocop",
    "is_a_fork": false,
    "comments": [
      "I'll reopen trying to reset codeclimate status"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090bdd6ca63ac8d87ebf3",
    "number": 1776,
    "body": "Reimplement x-string compilation\r\n- avoid fancy stuff when the x-str is passed to Compiler#returns, just\r\n  wrap it and let the node do its job\r\n- ignore empty lines at the beginning and end of the x-str\r\n- assume multi-line x-str will properly use `;` and `return`\r\n- assume single-line x-str can accidentally have trailing `;` and \r\n  leading `return`\r\n\r\nFor single line x-strings:\r\n- remove a trailing `;`\r\n- detect an embedded `return`\r\n- prepend a `return` when needed\r\n- append a `;` when needed\r\n- warn the user not to use the semicolon in single-line x-strings",
    "head_branch": "elia/xstring-semicolon",
    "is_a_fork": false,
    "comments": [
      "I'll extract xstr from literal once we're good with the diff\r\n\r\n---\r\n\r\nOT: but this is the best approach to rubocop I've seen so far, allowing to take everything with a grain of salt and to break the rules where it makes sense, although I wonder if \"wontfix\" comments would pop up in later pull-requests…\r\n\r\n<img width=\"836\" alt=\"screen shot 2018-03-07 at 00 15 06\" src=\"https://user-images.githubusercontent.com/1051/37064290-a05b5de0-219c-11e8-996f-287850aa96b6.png\">\r\n\r\n_I marked this as \"wontfix\" just for the sake of trying it out_",
      "@elia I've upgraded to the latest version `48bac38` and in some cases I have an extra semicolon:\r\n\r\n```diff\r\n       if ($truthy(path['$respond_to?'](\"path\"))) {\r\n         path = path.$path()};\r\n-      return executeIOAction(function(){return __fs__.existsSync(path)});\r\n+      return executeIOAction(function(){return __fs__.existsSync(path)});;\r\n     }, TMP_File_exist$q_3.$$arity = 1);\r\n```\r\n\r\n```diff\r\n-    Opal.defn(self, '$===', TMP_Module_$eq$eq$eq_3 = function(object) {\r\n+    Opal.def(self, '$===', TMP_Module_$eq$eq$eq_3 = function(object) {\r\n       var self = this;\r\n \r\n       \r\n       if ($truthy(object == null)) {\r\n         return false};\r\n-      return Opal.is_a(object, self);\r\n+      return Opal.is_a(object, self);;\r\n     }, TMP_Module_$eq$eq$eq_3.$$arity = 1);\r\n\r\n```",
      "@Mogztter thanks, working on a fix, should be ready soon",
      "@Mogztter see https://github.com/opal/opal/commit/7944860ae4473af5cf0ef4d9763e3d06c9668e38",
      "Nice :+1: ",
      "@elia I've just upgraded and the extra semicolon is gone but now I have lines without semicolon (but maybe it's expected):\r\n\r\nhttps://github.com/opal/opal/blob/fc20415fe76bc103ae3b3d3564863c8890140b7c/stdlib/nodejs/file.rb#L62-L64\r\n\r\n```diff\r\n-      return executeIOAction(function(){return __fs__.readFileSync(path).toString()});\r\n+      return executeIOAction(function(){return __fs__.readFileSync(path).toString()})\r\n```\r\n\r\nhttps://github.com/opal/opal/blob/fc20415fe76bc103ae3b3d3564863c8890140b7c/stdlib/nodejs/file.rb#L71-L74\r\n\r\n```diff\r\n-      return executeIOAction(function(){return __fs__.existsSync(path)});;\r\n+      return executeIOAction(function(){return __fs__.existsSync(path)});\r\n```",
      "@Mogztter That's expected. For single-line x-strings there must be either `return value;` or just `value`",
      "Alright then it's OK, thanks for the clarification @iliabylich"
    ],
    "commit_messages": [
      "Merge pull request #1776 from opal/elia/xstring-semicolon\n\nFix xstring management"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090bed6ca63ac8d87ebf4",
    "number": 1775,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "fix: typo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090bfd6ca63ac8d87ebf5",
    "number": 1774,
    "body": "Previously, this call would construct a full list of ancestors on each\r\ncall. This was a great abstraction, but this optimizes that check by\r\nwalking the ancestor chain manually and bailing out early.",
    "head_branch": "optimize-ancestors-0-10",
    "is_a_fork": true,
    "comments": [
      "These spec failures seem to happen on the `0-10-stable` branch, too. I'm not sure I understand why.",
      "I'm closing this too, let me know if you still need this"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090c0d6ca63ac8d87ebf6",
    "number": 1773,
    "body": "This is potentially a breaking change for people that were relying on the bug but I think it's worth fixing it.",
    "head_branch": "elia/load_error",
    "is_a_fork": false,
    "comments": [
      "@elia So if I understand correctly,\r\n+ for `dynamic_require_severity = :raise` compiler throws an error for any static require, and later potentially throws a `LoadError` for dynamic requires (like via `Opal.load`), this part is basically the fix itself.\r\n+ for `dynamic_require_severity = :warning` compiler prints a message during compilation and in runtime.\r\n\r\nCould you clarify it please?\r\nAlso CLI doesn't support `-Draise`, so I'm confused a bit about this PR.",
      "@iliabylich ok, first thing that `:raise` is actually a typo, it should be `:error` instead. Second, it should have worked this way:\r\n\r\n`Opal::Config.dynamic_require_severity` controls compile time, while runtime is controlled by `Opal.config.missing_require_severity`. \r\n\r\nBefore the fix the runtime part wasn't working (it was missing a `throw`) except by that hack in builder that was returning `throw LoadError` as the source for missing files.\r\n\r\nIt might be the case that there's still no way to ignore missing files altogether, or maybe there is.\r\n\r\nI surely need to add some specs for the whole thing so to better define the final behavior.",
      "@elia Have you finished with this PR? (Asking because you removed a WIP label but the comment that I mentioned is still there 😅)",
      "@iliabylich yeah, I removed the WIP because the bulk of the work is done, of course I since removed the commented line. But the CI is still red thanks to our good 🤖👮 , I think we should move it from traivis/appveyor to codeclimate in order to have the CI check for correctness and codeclimate for cosmetics 💅 (which are important, don't get me wrong 😄)\r\n\r\nref https://docs.codeclimate.com/docs/rubocop",
      "@elia Absolutely agree",
      "Just wrote to codeclimate asking why it's not reporting the same \"offenses\" as travis",
      "I'll close and reopen to try out houndci and see if it does a better job",
      "HoundCI doesn't use `.rubocop.yml`, right? (at least in the basic configuration) I see a lot of warnings in the files that are excluded.",
      "@iliabylich as soon as I saw how houndci operates I removed the integration, it's too noisy. I'm also a bit confused about how these code analyzers read `.rubocop.yml` because codeclimate too seems to ignore it to some degree (but at least it's not that noisy!).\r\n\r\nAnyway for now we'll stick to rubocop in travis."
    ],
    "commit_messages": [
      "Add a new \"missing_require_severity\" config option (#1773)\n\nThis option will command how the builder should behave when a required \r\nfile is missing. Previously the behavior was undefined and partly \r\ncontrolled by dynamic_require_severity."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090c1d6ca63ac8d87ebf7",
    "number": 1772,
    "body": "Fixes #1769 \r\n\r\n",
    "head_branch": "elia/native-wrapper",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Deprecate include Native, use Native::Wrapper (#1772)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090c2d6ca63ac8d87ebf8",
    "number": 1771,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "[CI] Test against Ruby 2.5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090c3d6ca63ac8d87ebf9",
    "number": 1770,
    "body": "Last part!",
    "head_branch": "run-rubocop-on-stdlib",
    "is_a_fork": true,
    "comments": [
      "@elia Ping",
      "@elia I've rebased this branch on the master, the build is green. Any comments?",
      "@elia Thanks for patience!"
    ],
    "commit_messages": [
      "Merge pull request #1770 from iliabylich/run-rubocop-on-stdlib\n\nRun rubocop on stdlib"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090c4d6ca63ac8d87ebfa",
    "number": 1768,
    "body": "from #1752",
    "head_branch": "xstring_multiline_fix",
    "is_a_fork": true,
    "comments": [
      "fixed in https://github.com/opal/opal/pull/1776"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090c5d6ca63ac8d87ebfb",
    "number": 1767,
    "body": ".rb.erb is required to make ruby-hyperloop work with electron-opal\r\nruby-hyperloop cant use .opalerb because the files are required server (matz ruby) and client side (opal ruby) the same\r\n",
    "head_branch": "builder_fix",
    "is_a_fork": true,
    "comments": [
      "this needs more work",
      "Have you tried working on the server side to support `opalerb` as an extension? I have nothing against improving support for this things but maybe it's easier (probably depends on the cruby framework).\r\n\r\n\r\nAn additional consideration:\r\n\r\nI'd say that we need a better API for extension/compiler support in builder, but that's also something that brings in the direction of a full blown building system like Sprockets or Webpack etc. So my hope is that we'll find the sweet spot between the two extremes 😄 \r\n\r\n",
      "so actually thats what i am doing here https://github.com/janbiedermann/opal-webpack-loader\r\nruby-hyperloop eliminates .erb files, so this is no longer a issue\r\nmoving to webpack seems to provider improved options for building assets\r\nThats why I close this"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090c6d6ca63ac8d87ebfc",
    "number": 1766,
    "body": "- 'C*' returns the buffer\r\n- 'c*', 'a*', 'A*' reads all",
    "head_branch": "performance-unpack-infinity",
    "is_a_fork": true,
    "comments": [
      "I think we can optimize it even more by having\r\n``` js\r\nvar readOptimized = {\r\n  'C*': identityFunction,\r\n  'c*': ...,\r\n  'A*': ...,\r\n  'a*': ...\r\n}\r\n\r\n// later in `unpack`\r\nvar buffer = utf16LEToBytes(self);\r\n\r\nvar optimized = readOptimized[format]\r\nif (optimized) {\r\n  return optimized(buffer);\r\n}\r\n// else use buffers and other non-optimized code\r\n```\r\n\r\nAll cases with <char><star> format patterns can be handled without buffers or chunks."
    ],
    "commit_messages": [
      "Optimize String#unpack (#1766)\n\n* Optimize String#unpack\r\n\r\nDo not use chunk/buffer for the following pattern:\r\n- 'C*'\r\n- 'c*'\r\n- 'a*'\r\n- 'A*'\r\n- 'M*'\r\n- 'm*'\r\n\r\n* More optimization, am I going too far?\r\n\r\n* Use existing wrapIntoArray function\r\n\r\n* Remove code duplication"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090c7d6ca63ac8d87ebfd",
    "number": 1765,
    "body": "Therefore `opal-builder.js` needs to require 'corelib/string/unpack'\r\n\r\nSee: https://github.com/whitequark/parser/blob/v2.4.0.2/lib/parser/lexer.rl#L186",
    "head_branch": "opal-compile-string-unpack",
    "is_a_fork": true,
    "comments": [
      "Thanks @iliabylich for the quick review.\r\nOn a related note, I'm investigating an issue on Asciidoctor.js. The compilation phase is now failing, I think it's related to the `parser/ruby25` upgrade, I will let you know 😉 "
    ],
    "commit_messages": [
      "whitequark/parser uses String#unpack (#1765)\n\nTherefore opal-compiler.js needs to require 'corelib/string/unpack'\r\n\r\nhttps://github.com/whitequark/parser/blob/v2.4.0.2/lib/parser/lexer.rl#L186"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090c8d6ca63ac8d87ebfe",
    "number": 1764,
    "body": "Closes https://github.com/opal/opal/issues/1739\r\n\r\n13 assertions of 252 from MRI's spec for Matrix are failing.\r\n\r\nUnfortunately I can't find any specs for `Exception2MessageMapper` in MRI or RubySpec, but `Matrix` class heavily uses it and there's a plenty of tests for it in the `TestMatrix`",
    "head_branch": "add-matrix",
    "is_a_fork": true,
    "comments": [
      "@elia ping",
      "@iliabylich approved on codeclimate ✅ ",
      "Are you ok with the code? Is it 👍 ?",
      "Good catch, fixed!",
      "Thanks again @iliabylich for your amazing work! "
    ],
    "commit_messages": [
      "Merge pull request #1764 from iliabylich/add-matrix\n\nAdd Matrix and E2MM modules"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090c9d6ca63ac8d87ebff",
    "number": 1763,
    "body": "Before: 688 examples\r\nAfter: 324 examples",
    "head_branch": "remove-redundant-opal-specs",
    "is_a_fork": true,
    "comments": [
      "Nice! "
    ],
    "commit_messages": [
      "Removed redundant spec from spec/opal that were initially copied from RubySpec. (#1763)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090cad6ca63ac8d87ec00",
    "number": 1762,
    "body": "First of all, this PR does 0 logical changes. The code works the same way.\r\nI've left some items in `.rubocop_todo.yml` as they may require some refactoring.\r\nEverything is discussable, feel free to point to any places in PR that you'd like to change/revert (@elia, I'm sure you don't like some of them 😄 ).\r\n\r\nAlso I didn't apply these rules to `stdlib` as it would make PR huge. This PR aims to introduce a `.rubocop.yml` with separated (sometimes different) rules for Ruby and Opal code.\r\n\r\nNote for merging: of course, squash it, we don't need to split this PR to 100+ commits.",
    "head_branch": "add-rubocop",
    "is_a_fork": true,
    "comments": [
      "@elia Which version of the parser+rubocop should be used to validate the code in `lib` and `opal` directories? The difference comes, for example in\r\n``` ruby\r\nlambda do\r\n  begin\r\n    raise 'error'\r\n  rescue\r\n    nil\r\n  end\r\nend\r\n```\r\nParser 2.4 fails to parse it, 2.5 handles it very well.\r\nRubocop that uses parser 2.4 doesn't complain, but with parser 2.5 it complains about redundant `begin/end`.\r\n\r\nSo for different versions of ruby we get different rules. Should we set `TargetRubyVersion` in `.rubocop.yml` to `2.5`?\r\n\r\nIt still requires us to write a code that is compatible with 2.0 - 2.5 versions of ruby, so most probably code constructions like the one mentioned above should be avoided because they are \"bad\" for rubocop powered by parser25",
      "I think @elia want to disable the last array/hash comma rule，😏\n\n2018年2月7日 下午11:28，\"Ilya Bylich\" <notifications@github.com>写道：\n\n> @elia <https://github.com/elia> Which version of the parser+rubocop\n> should be used to validate the code in lib and opal directories? The\n> difference comes, for example in\n>\n> lambda do\n>   begin\n>     raise 'error'\n>   rescue\n>     nil\n>   endend\n>\n> Parser 2.4 fails to parse it, 2.5 handles it very well.\n> Rubocop that uses parser 2.4 doesn't complain, but with parser 2.5 it\n> complains about redundant begin/end.\n>\n> So for different versions of ruby we get different rules. Should we set\n> TargetRubyVersion in .rubocop.yml to 2.5?\n>\n> It still requires us to write a code that is compatible with 2.0 - 2.5\n> versions of ruby, so most probably code constructions like the one\n> mentioned above should be avoided because they are \"bad\" for rubocop\n> powered by parser25\n>\n> —\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/opal/opal/pull/1762#issuecomment-363804550>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAhhBtseRhu-218d56HdASnIrUDdIkmeks5tScEJgaJpZM4R81PN>\n> .\n>\n",
      "I add one advise for this\r\n\r\n1. be aware of string interpolate, rubocop may  cause issue in some case，that\r\nmeans for opal，`rubocop -a`, not always safe for opal\r\n\r\n",
      "and, i perfer use `or` instead of `||` if we know what we means, anyway,\r\nall config can be disable or changed in project' rubocop config",
      "> @@ -60,13 +61,13 @@ def run\r\n         options: runner_options,\r\n         output: output,\r\n         argv: argv,\r\n- builder: builder,\r\n+ builder: builder\r\n\r\nmy personal $HOME .rubocop.yml disable this check too in recent day, i\r\nthink @elia' advice is right，and accept that，syntax is support，why not use\r\nthat？",
      "In lib/opal/cli_runners/chrome.rb\r\n<https://github.com/opal/opal/pull/1762#discussion_r166796012>:\r\n\r\n> @@ -85,15 +86,17 @@ def chrome_server_running?\r\n       end\r\n\r\n       def chrome_executable\r\n-        ENV['GOOGLE_CHROME_BINARY'] || case RbConfig::CONFIG['host_os']\r\n+        return ENV['GOOGLE_CHROME_BINARY'] if ENV['GOOGLE_CHROME_BINARY']\r\n\r\nis this change from rubocop? (just curious)\r\n\r\nanyway I like the previous form more, but definitely not a deal breaker\r\n\r\n\r\n@elia, i think rubocop will do like this\r\n",
      "Please stop @ing compiler.\n\nOn Wed, Feb 7, 2018 at 20:43 Billy.Zheng <notifications@github.com> wrote:\n\n> In lib/opal/cli_runners/chrome.rb\n> <https://github.com/opal/opal/pull/1762#discussion_r166796012>:\n>\n> > @@ -85,15 +86,17 @@ def chrome_server_running?\n> end\n>\n> def chrome_executable\n> - ENV['GOOGLE_CHROME_BINARY'] || case RbConfig::CONFIG['host_os']\n> + return ENV['GOOGLE_CHROME_BINARY'] if ENV['GOOGLE_CHROME_BINARY']\n>\n> is this change from rubocop? (just curious)\n>\n> anyway I like the previous form more, but definitely not a deal breaker\n>\n>\n> @elia, i think rubocop will do like this\n>\n> I prefer latter, if you have condition more than two，guard is very clearly\n>\n> 2018年2月8日 上午9:37，\"zw963\" <vil963@gmail.com>写道：\n>\n> > > @@ -60,13 +61,13 @@ def run\n> > options: runner_options,\n> > output: output,\n> > argv: argv,\n> > - builder: builder,\n> > + builder: builder\n> >\n> > my personal $HOME .rubocop.yml disable this check too in recent day, i\n> > think @elia' advice is right，and accept that，syntax is support，why not\n> use\n> > that？\n> >\n> > 2018年2月8日 上午9:29，\"zw963\" <vil963@gmail.com>写道：\n> >\n> >> and, i perfer use `or` instead of `||` if we know what we means, anyway,\n> >> all config can be disable or changed in project' rubocop config\n> >>\n> >> 2018年2月8日 上午9:24，\"zw963\" <vil963@gmail.com>写道：\n> >>\n> >>> I add one advise for this\n> >>>\n> >>> 1. be aware of string inteplute, rubocop may cause issue in some\n> >>> case，that means for opal，`rubocop -a`, not always safe for opal\n> >>>\n> >>> 2018年2月8日 上午9:11，\"Elia Schito\" <notifications@github.com>写道：\n> >>>\n> >>>> *@elia* commented on this pull request.\n> >>>>\n> >>>> @iliabylich <https://github.com/iliabylich> added a comment for each\n> >>>> class of changes I don't like, disagree with or find plainly wrong.\n> >>>>\n> >>>> Everything else ranges from stuff I really happy with to mild\n> >>>> enthusiasm or indifference.\n> >>>>\n> >>>> This is not of course the final word and I'm more than willing to have\n> >>>> my mind changed where appropriate. I was never against some of the\n> >>>> wonderful stuff that rubocop does, but I just always found the cure\n> worse\n> >>>> than the problem.\n> >>>> ------------------------------\n> >>>>\n> >>>> In lib/opal/builder.rb\n> >>>> <https://github.com/opal/opal/pull/1762#discussion_r166793318>:\n> >>>>\n> >>>> > @@ -49,23 +50,21 @@ def self.register_processor(processor,\n> processor_extensions)\n> >>>> processor_extensions.each { |ext| extensions << ext }\n> >>>> end\n> >>>>\n> >>>> -\n> >>>> -\n> >>>>\n> >>>> In this case it's fine, but vertical space has meaning, mostly helping\n> >>>> in dividing code into logical section\n> >>>> ------------------------------\n> >>>>\n> >>>> In lib/opal/builder.rb\n> >>>> <https://github.com/opal/opal/pull/1762#discussion_r166793576>:\n> >>>>\n> >>>> > private\n> >>>>\n> >>>> def tree_requires(asset, path)\n> >>>> - if path.nil? or path.empty?\n> >>>> - dirname = Dir.pwd\n> >>>> - else\n> >>>> - dirname = File.dirname(File.expand_path(path))\n> >>>> - end\n> >>>> + dirname = if path.nil? || path.empty?\n> >>>> + Dir.pwd\n> >>>> + else\n> >>>> + File.dirname(File.expand_path(path))\n> >>>> + end\n> >>>>\n> >>>> in this case using || is fine but I find both the indented if form\n> >>>> ugly and the repeated assignment more readable\n> >>>> ------------------------------\n> >>>>\n> >>>> In lib/opal/builder.rb\n> >>>> <https://github.com/opal/opal/pull/1762#discussion_r166793885>:\n> >>>>\n> >>>> > @@ -153,25 +150,24 @@ def tree_requires(asset, path)\n> >>>> end\n> >>>>\n> >>>> def processor_for(source, filename, path, options)\n> >>>> - processor = processors.find { |p| p.match? path } or\n> >>>> - raise ProcessorNotFound, \"can't find processor for filename:\n> #{filename.inspect}, path: #{path.inspect}, source: #{source.inspect},\n> processors: #{processors.inspect}\"\n> >>>> + (processor = processors.find { |p| p.match? path }) ||\n> >>>> + raise(ProcessorNotFound, \"can't find processor for filename:\n> #{filename.inspect}, path: #{path.inspect}, source: #{source.inspect},\n> processors: #{processors.inspect}\")\n> >>>>\n> >>>> this I find plainly wrong, and/or are there for flow control of which\n> >>>> this code is a perfect example, let alone the fact that using ||\n> >>>> produces even more noise due to the added parenthesis\n> >>>> ------------------------------\n> >>>>\n> >>>> In lib/opal/builder.rb\n> >>>> <https://github.com/opal/opal/pull/1762#discussion_r166794189>:\n> >>>>\n> >>>> > print_list[processors]\n> >>>>\n> >>>> case compiler_options[:dynamic_require_severity]\n> >>>> when :raise then raise MissingRequire, message\n> >>>> when :warning then warn message\n> >>>> - else # noop\n> >>>>\n> >>>> this (I guess) is here to explicitly state that the else case has been\n> >>>> considered and decreed to be a no-op\n> >>>> ------------------------------\n> >>>>\n> >>>> In lib/opal/builder_processors.rb\n> >>>> <https://github.com/opal/opal/pull/1762#discussion_r166794302>:\n> >>>>\n> >>>> > @@ -27,31 +28,31 @@ def self.handles(*extensions)\n> >>>> nil\n> >>>> end\n> >>>>\n> >>>> - def self.extensions\n> >>>> - @extensions\n> >>>> + class << self\n> >>>> + attr_reader :extensions\n> >>>> end\n> >>>>\n> >>>> this looks worse\n> >>>> ------------------------------\n> >>>>\n> >>>> In lib/opal/cli.rb\n> >>>> <https://github.com/opal/opal/pull/1762#discussion_r166794682>:\n> >>>>\n> >>>> > @@ -32,25 +33,25 @@ def initialize options = nil\n> >>>> @stubs = options.delete(:stubs) || []\n> >>>> @preload = options.delete(:preload) || []\n> >>>> @output = options.delete(:output) || self.class.stdout || $stdout\n> >>>> - @verbose = options.fetch(:verbose, false); options.delete(:verbose)\n> >>>> - @debug = options.fetch(:debug, false); options.delete(:debug)\n> >>>> - @filename = options.fetch(:filename) { @file && @file.path };\n> options.delete(:filename)\n> >>>> + @verbose = options.delete(:verbose) || false\n> >>>> + @debug = options.delete(:debug) || false\n> >>>> + @filename = options.delete(:filename) || @file && @file.path\n> >>>>\n> >>>> although I agree that the original code is worse, the new code has\n> >>>> slightly different semantics:\n> >>>>\n> >>>> >> {a:nil}.fetch :a, 123\n> >>>> => nil\n> >>>>\n> >>>> ------------------------------\n> >>>>\n> >>>> In lib/opal/cli.rb\n> >>>> <https://github.com/opal/opal/pull/1762#discussion_r166795240>:\n> >>>>\n> >>>> > @@ -60,13 +61,13 @@ def run\n> >>>> options: runner_options,\n> >>>> output: output,\n> >>>> argv: argv,\n> >>>> - builder: builder,\n> >>>> + builder: builder\n> >>>>\n> >>>> can we have the reverse as the rule?\n> >>>> I found it saves a bunch of syntax errors, makes it easier to reorder\n> >>>> lines and is also more balanced visually\n> >>>> ------------------------------\n> >>>>\n> >>>> In lib/opal/cli_options.rb\n> >>>> <https://github.com/opal/opal/pull/1762#discussion_r166795592>:\n> >>>>\n> >>>> > @@ -159,15 +159,14 @@ def initialize\n> >>>>\n> >>>> attr_reader :options\n> >>>>\n> >>>> -\n> >>>>\n> >>>> this is an example of significant vertical white space before the\n> >>>> *private* section\n> >>>> ------------------------------\n> >>>>\n> >>>> In lib/opal/cli_runners/chrome.rb\n> >>>> <https://github.com/opal/opal/pull/1762#discussion_r166796012>:\n> >>>>\n> >>>> > @@ -85,15 +86,17 @@ def chrome_server_running?\n> >>>> end\n> >>>>\n> >>>> def chrome_executable\n> >>>> - ENV['GOOGLE_CHROME_BINARY'] || case RbConfig::CONFIG['host_os']\n> >>>> + return ENV['GOOGLE_CHROME_BINARY'] if ENV['GOOGLE_CHROME_BINARY']\n> >>>>\n> >>>> is this change from rubocop? (just curious)\n> >>>>\n> >>>> anyway I like the previous form more, but definitely not a deal\n> breaker\n> >>>> ------------------------------\n> >>>>\n> >>>> In lib/opal/compiler.rb\n> >>>> <https://github.com/opal/opal/pull/1762#discussion_r166796706>:\n> >>>>\n> >>>> > @@ -384,8 +371,7 @@ def returns(sexp)\n> >>>> when :when\n> >>>> *when_sexp, then_sexp = *sexp\n> >>>> sexp.updated(nil,\n> >>>> - [*when_sexp, returns(then_sexp)]\n> >>>> - )\n> >>>> + [*when_sexp, returns(then_sexp)])\n> >>>>\n> >>>> I'd prefer this to keep the second line just indented by one level,\n> >>>> although in this specific case it's probably better to keep\n> everything in a\n> >>>> single line\n> >>>> ------------------------------\n> >>>>\n> >>>> In lib/opal/nodes/args/kwoptarg.rb\n> >>>> <https://github.com/opal/opal/pull/1762#discussion_r166797182>:\n> >>>>\n> >>>> > @@ -27,7 +28,7 @@ def compile\n> >>>>\n> >>>> line \"if (#{lvar_name} == null) {\"\n> >>>> line \" #{lvar_name} = \", expr(default_value)\n> >>>> - line \"}\"\n> >>>> + line '}'\n> >>>>\n> >>>> In this case I find staying consistent with the previous lines has\n> more\n> >>>> value than strict following of the single/double quote rule (which I\n> >>>> generally follow too)\n> >>>> ------------------------------\n> >>>>\n> >>>> In lib/opal/nodes/args/post_args.rb\n> >>>> <https://github.com/opal/opal/pull/1762#discussion_r166797430>:\n> >>>>\n> >>>> > end\n> >>>>\n> >>>> - add_temp \"#{scope.working_arguments}\"\n> >>>> + add_temp scope.working_arguments\n> >>>>\n> >>>> There's a semantic difference here, the interpolation has an implicit\n> >>>> call to .to_s, might be the case that we know it's already a string,\n> >>>> in that case it's fine of course\n> >>>> ------------------------------\n> >>>>\n> >>>> In lib/opal/nodes/args/post_args.rb\n> >>>> <https://github.com/opal/opal/pull/1762#discussion_r166797840>:\n> >>>>\n> >>>> > @@ -143,14 +144,14 @@ def compile\n> >>>> end\n> >>>>\n> >>>> def compile_optarg(optarg)\n> >>>> - var_name, _ = *optarg\n> >>>> + var_name, = *optarg\n> >>>>\n> >>>> this looks and quacks like an error 🦆\n> >>>> ------------------------------\n> >>>>\n> >>>> In lib/opal/nodes/args/post_args.rb\n> >>>> <https://github.com/opal/opal/pull/1762#discussion_r166798303>:\n> >>>>\n> >>>> > - line \"} else {\"\n> >>>> - indent do\n> >>>> - # splat is empty\n> >>>> - extract_blank_restarg\n> >>>> - end\n> >>>> - line \"}\"\n> >>>> + indent do\n> >>>> + # there are some items coming to the splat, extracting them\n> >>>> + extract_restarg\n> >>>> + end\n> >>>> + line '} else {'\n> >>>> + indent do\n> >>>> + # splat is empty\n> >>>> + extract_blank_restarg\n> >>>> + end\n> >>>> + line '}'\n> >>>>\n> >>>> the original version has the good quality of visually mimicking the\n> >>>> generated code\n> >>>> ------------------------------\n> >>>>\n> >>>> In lib/opal/nodes/base.rb\n> >>>> <https://github.com/opal/opal/pull/1762#discussion_r166798475>:\n> >>>>\n> >>>> > @@ -166,17 +167,15 @@ def in_ensure?\n> >>>>\n> >>>> def closest_module_node\n> >>>> current = scope\n> >>>> - while current && !current.class_scope?\n> >>>> - current = current.parent\n> >>>> - end\n> >>>> + current = current.parent while current && !current.class_scope?\n> >>>>\n> >>>> looks more cryptic this way\n> >>>> ------------------------------\n> >>>>\n> >>>> In lib/opal/nodes/call.rb\n> >>>> <https://github.com/opal/opal/pull/1762#discussion_r166798738>:\n> >>>>\n> >>>> > push(RuntimeHelpers.new(sexp_with_arglist, @level,\n> @compiler).compile)\n> >>>> else\n> >>>> - compile_default.call\n> >>>> + yield\n> >>>>\n> >>>> I know yield performs better, but having the name explicitly stated\n> >>>> makes it clear what's going on\n> >>>> ------------------------------\n> >>>>\n> >>>> In lib/opal/nodes/call.rb\n> >>>> <https://github.com/opal/opal/pull/1762#discussion_r166799089>:\n> >>>>\n> >>>> > @@ -328,7 +329,7 @@ def handle_part(sexp)\n> >>>>\n> >>>> parts = args.map { |s| handle_part s }\n> >>>>\n> >>>> - if ::Opal::AST::Node === recv && recv.type == :const &&\n> recv.children.last == :File\n> >>>> + if recv.is_a?(::Opal::AST::Node) && recv.type == :const &&\n> recv.children.last == :File\n> >>>>\n> >>>> semantics are slightly different here, certainly not the case here,\n> but\n> >>>> an object can lie about itself, that's why I like asking the class\n> more\n> >>>>\n> >>>> just saying, not a deal-breaker\n> >>>> ------------------------------\n> >>>>\n> >>>> In lib/opal/nodes/defined.rb\n> >>>> <https://github.com/opal/opal/pull/1762#discussion_r166799898>:\n> >>>>\n> >>>> > @@ -118,11 +119,8 @@ def compile_defined_send(node)\n> >>>> push \" ||\n> #{recv_value_tmp}['$respond_to_missing?']('#{method_name}'))\"\n> >>>>\n> >>>> args.each do |arg|\n> >>>> - case arg.type\n> >>>> - when :block_pass\n> >>>> - # ignoring\n> >>>> - else\n> >>>> - push \" && \"\n> >>>> + if arg.type != :block_pass\n> >>>> + push ' && '\n> >>>>\n> >>>> original version is easier to read and better states the intent\n> >>>> ------------------------------\n> >>>>\n> >>>> In lib/opal/nodes/literal.rb\n> >>>> <https://github.com/opal/opal/pull/1762#discussion_r166800600>:\n> >>>>\n> >>>> > @@ -141,7 +142,7 @@ def compile_static_regexp\n> >>>> case value\n> >>>> when ''\n> >>>> push('/(?:)/')\n> >>>> - when %r{\\?<\\w+\\>}\n> >>>> + when /\\?<\\w+\\>/\n> >>>>\n> >>>> was better before\n> >>>> ------------------------------\n> >>>>\n> >>>> In lib/opal/rewriters/binary_operator_assignment.rb\n> >>>> <https://github.com/opal/opal/pull/1762#discussion_r166801759>:\n> >>>>\n> >>>> > @@ -14,15 +15,13 @@ def self.new_temp\n> >>>> :\"$binary_op_recvr_tmp_#{@@counter}\"\n> >>>> end\n> >>>>\n> >>>> - GET_SET = ->(get_type, set_type) {\n> >>>> -\n> >>>> - ->(lhs, op, rhs) {\n> >>>> - get_node = lhs.updated(get_type) # lhs\n> >>>> - set_node = s(:send, get_node, op, rhs) # lhs + rhs\n> >>>> + GET_SET = lambda { |get_type, set_type|\n> >>>> + lambda { |lhs, op, rhs|\n> >>>>\n> >>>> does rubocop prefers the lambda for multiline?\n> >>>> ------------------------------\n> >>>>\n> >>>> In lib/opal/simple_server.rb\n> >>>> <https://github.com/opal/opal/pull/1762#discussion_r166802324>:\n> >>>>\n> >>>> > @@ -72,7 +73,7 @@ def fetch_asset(path)\n> >>>> end\n> >>>>\n> >>>> def javascript_include_tag(path)\n> >>>> - %{<script\n> src=\"/#{@prefix}/#{path}.js#{cache_invalidator}\"></script>}\n> >>>> + %(<script\n> src=\"/#{@prefix}/#{path}.js#{cache_invalidator}\"></script>)\n> >>>>\n> >>>> Is this a preference because of the curly braces inside the string?\n> >>>> (honest question)\n> >>>> ------------------------------\n> >>>>\n> >>>> In opal/corelib/complex.rb\n> >>>> <https://github.com/opal/opal/pull/1762#discussion_r166803320>:\n> >>>>\n> >>>> > @@ -268,19 +270,19 @@ def to_r\n> >>>> def to_s\n> >>>> result = @real.inspect\n> >>>>\n> >>>> - if (Number === @imag && @imag.nan?) || @imag.positive? ||\n> @imag.zero?\n> >>>> - result += ?+\n> >>>> - else\n> >>>> - result += ?-\n> >>>> - end\n> >>>> + result += if (Number === @imag && @imag.nan?) || @imag.positive? ||\n> @imag.zero?\n> >>>> + '+'\n> >>>> + else\n> >>>> + '-'\n> >>>> + end\n> >>>>\n> >>>> new version is worse\n> >>>> ------------------------------\n> >>>>\n> >>>> In opal/corelib/kernel.rb\n> >>>> <https://github.com/opal/opal/pull/1762#discussion_r166804534>:\n> >>>>\n> >>>> > @@ -1047,8 +1047,8 @@ def warn(*strs)\n> >>>>\n> >>>> def raise(exception = undefined, string = nil, _backtrace = nil)\n> >>>> %x{\n> >>>> - if (exception == null && #$! !== nil) {\n> >>>> - throw #$!;\n> >>>> + if (exception == null && #{$!} !== nil) {\n> >>>> + throw #{$!};\n> >>>>\n> >>>> this was great 😄, but I have no problem in letting it go\n> >>>>\n> >>>> —\n> >>>> You are receiving this because you commented.\n> >>>> Reply to this email directly, view it on GitHub\n> >>>> <https://github.com/opal/opal/pull/1762#pullrequestreview-94913226>,\n> >>>> or mute the thread\n> >>>> <\n> https://github.com/notifications/unsubscribe-auth/AAhhBsTAb4QLQ6rMQLzDwxCLKiuJdTd4ks5tSknJgaJpZM4R81PN\n> >\n> >>>> .\n> >>>>\n> >>>\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/opal/opal/pull/1762#issuecomment-363974460>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AL60Q0_gZaGYtkVCejinQ4AjGQEtA6Fjks5tSlEzgaJpZM4R81PN>\n> .\n>\n",
      "@elia @Mogztter  I've fixed most of your comments (GH automatically collapses them ❤️ ). Can I get a quick review please?  Here's the diff - https://github.com/opal/opal/compare/219e460e973b8abea15eb4254b5761a2f153ceca...a0c4c400cfd1ad40d771536d1b352b6ac208b5b8",
      "Why do you guys keep emailing\n\nOn Thu, Feb 8, 2018 at 13:21 Elia Schito <notifications@github.com> wrote:\n\n> *@elia* commented on this pull request.\n> ------------------------------\n>\n> In lib/opal/compiler.rb\n> <https://github.com/opal/opal/pull/1762#discussion_r167023804>:\n>\n> >      end\n>\n>      # To keep code blocks nicely indented, this will yield a block after\n>      # adding an extra layer of indent, and then returning the resulting\n>      # code after reverting the indent.\n> -    def indent(&block)\n> +    def indent\n>\n> From what I remember in MRI yield is faster, so probably when a block is\n> named block and is not required to be an object (to be stored or\n> forwarded to another method etc.) it probably make sense to just use yield\n> .\n>\n> If the block is named differently probably the name helps in telling the\n> story of what's going on and should be preserved.\n>\n> The other advantage of having the block among the arguments is that you\n> know immediately that a block is expected by that method and you don't have\n> to check every line of the implementation parsing for yield.\n>\n> Reverting the rule is fine, mostly because I don't think rubocop can act\n> based on the block variable name.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/opal/opal/pull/1762#discussion_r167023804>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AL60QyMH8woWeDqlvQuf7ZcCgMUF9DOQks5tSzsXgaJpZM4R81PN>\n> .\n>\n",
      "@iliabylich Looking good, really nice work 👍 ",
      "Thanks I worked all night on it. But your pushes are weak.\n\nOn Thu, Feb 8, 2018 at 15:29 Guillaume Grossetie <notifications@github.com>\nwrote:\n\n> *@Mogztter* approved this pull request.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/opal/opal/pull/1762#pullrequestreview-95221973>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AL60Q3g3-sZOo3YjkhQ0_lMj0Dx9o6fNks5tS1k7gaJpZM4R81PN>\n> .\n>\n",
      "The @Compiler is getting craaazy! 😜 ",
      "@elia Did you merge this branch on master because you are going to merge it? 😄 ",
      "@iliabylich 😆 I merged #1760 forgetting to hold fire, and then I preferred to solve the conflict from GH rather than reverting the merge just to merge again later. \r\n\r\nAlas I didn't have enough contiguous time that would allow me to do a final review and merge this PR, but I'll do my best not to drag this for too long 😅.",
      "> but I can live with that and most importantly we'll keep this ad experimentum, free to improve along the way\r\n\r\nAgree, we can change any rules later."
    ],
    "commit_messages": [
      "Merge pull request #1762 from iliabylich/add-rubocop\n\nAdd rubocop"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090cbd6ca63ac8d87ec01",
    "number": 1760,
    "body": "By they way, `raise` actually doesn't make sense as `case` covers all cases:\r\n```\r\n$ grep 'in_scope' lib -rFn\r\nlib/opal/nodes/scope.rb:62:      def in_scope(&block)\r\nlib/opal/nodes/module.rb:18:        in_scope do\r\nlib/opal/nodes/class.rb:19:        in_scope do\r\nlib/opal/nodes/singleton_class.rb:14:        in_scope do\r\nlib/opal/nodes/top.rb:18:        in_scope do\r\nlib/opal/nodes/def.rb:38:        in_scope do\r\nlib/opal/nodes/iter.rb:23:        in_scope do\r\n```",
    "head_branch": "unify-Opal.def-for-all-def-nodes",
    "is_a_fork": true,
    "comments": [
      "@iliabylich looks good, did you check if it has any impact on startup performance?",
      "Patch:\r\n```\r\n$ opal -ropal/full -ce '42' > test.js\r\n$ grep 'Opal.defn' test.js | wc -l\r\n9\r\n$ repeat 5 time node test.js\r\nnode test.js  0.24s user 0.03s system 98% cpu 0.275 total\r\nnode test.js  0.26s user 0.03s system 98% cpu 0.294 total\r\nnode test.js  0.26s user 0.03s system 97% cpu 0.294 total\r\nnode test.js  0.25s user 0.03s system 98% cpu 0.289 total\r\nnode test.js  0.26s user 0.03s system 98% cpu 0.302 total\r\n```\r\n\r\nMaster:\r\n```\r\n$ opal -ropal/full -ce '42' > test.js\r\n$ grep 'Opal.defn' test.js | wc -l\r\n963\r\n$ repeat 5 time node test.js\r\nnode test.js  0.26s user 0.03s system 97% cpu 0.298 total\r\nnode test.js  0.25s user 0.03s system 98% cpu 0.281 total\r\nnode test.js  0.24s user 0.03s system 98% cpu 0.276 total\r\nnode test.js  0.25s user 0.03s system 98% cpu 0.284 total\r\nnode test.js  0.25s user 0.03s system 98% cpu 0.284 total\r\n```\r\n",
      "Thanks!"
    ],
    "commit_messages": [
      "Unify Opal.def for :def nodes. (#1760)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090ccd6ca63ac8d87ec02",
    "number": 1759,
    "body": "See ruby-doc.org/stdlib-2.5.0/libdoc/date/rdoc/Date.html#method-i-next_year\r\n\r\nJust trying to make it easy to backport these methods because I still have apps on 0.10. :-)",
    "head_branch": "date-next-prev-year-0-10",
    "is_a_fork": true,
    "comments": [
      "@jgaskins is this still useful for your apps?",
      "I'll close this, let me know if it needs to be reopened"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090cdd6ca63ac8d87ec03",
    "number": 1758,
    "body": "See http://ruby-doc.org/stdlib-2.5.0/libdoc/date/rdoc/Date.html#method-i-next_year",
    "head_branch": "date-next-prev-year",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090ced6ca63ac8d87ec04",
    "number": 1757,
    "body": "We didn't upgrade RubySpec for a long time. I've added new methods from MRI 2.4/2.5, so most failing specs are just new specs that have been added to ruby/spec during this time.\r\n",
    "head_branch": "upgrade-to-2.5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1757 from iliabylich/upgrade-to-2.5\n\nUpgrade to 2.5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090cfd6ca63ac8d87ec05",
    "number": 1756,
    "body": "Resolves #1755",
    "head_branch": "issue-1755",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Adds specs on Array.dup optimization (#1756)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090d0d6ca63ac8d87ec06",
    "number": 1754,
    "body": "String are immutable in JavaScript and thus String#prepend cannot be implemented.\r\nThe method now throws a \"not implemented\" exception.\r\n",
    "head_branch": "string-preprend",
    "is_a_fork": true,
    "comments": [
      "@Mogztter I have the serious concern that implementing this could mislead both developers and libraries, you have a specific use-case in mind?",
      "Agree, I'd better add it to `corelib/unsupported`",
      "> I have the serious concern that implementing this could mislead both developers and libraries\r\n\r\nI agree, I've changed the code in the Reveal.js converter:\r\n\r\n```ruby\r\nattrs_str = attrs.empty? ? '' : attrs.join(' ').prepend(' ')\r\n```\r\n\r\n```ruby\r\nattrs_str = attrs.empty? ? '' : ' ' + attrs.join(' ')\r\n```\r\n\r\n> Agree, I'd better add it to corelib/unsupported\r\n\r\n:+1: \r\n\r\n\"String#prepend not supported. Mutable String methods are not supported in Opal.\""
    ],
    "commit_messages": [
      "Add String#prepend to corelib/unsupported (#1754)\n\nString are immutable in JavaScript and thus String#prepend cannot be implemented.\r\nThe method now throws a \"not implemented\" exception."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090d0d6ca63ac8d87ec07",
    "number": 1752,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "oops, thats gone now here: #1768"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090d1d6ca63ac8d87ec08",
    "number": 1746,
    "body": "",
    "head_branch": "duplication-forwardable",
    "is_a_fork": true,
    "comments": [
      "Also I don't understand why, but CodeClimate thinks that this PR introduces 2 new issues 😄 ",
      "> Also I don't understand why, but CodeClimate thinks that this PR introduces 2 new issues 😄\r\n\r\n99 issues in the code, fix two issues, 99 issues in the code 😱🤣 ",
      "I just approved this PR on codeclimate, it was the same two files… 🙄",
      "Oh, sorry, I've just realized that it was copied with minimal changes from MRI - https://github.com/ruby/ruby/blob/trunk/lib/forwardable.rb (I thought MRI has a C version).\r\n\r\nNow I think that it's better to ignore this and close this PR. Having a code that is as similar to MRI as possible helps maintaining it.\r\n\r\nSorry again 😄 \r\n\r\n@elia What do you think?",
      "> Now I think that it's better to ignore this and close this PR. Having a code that is as similar to MRI as possible helps maintaining it.\r\n\r\nI agree\r\n\r\n> Sorry again\r\n\r\nNo worries :wink: "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090d2d6ca63ac8d87ec09",
    "number": 1745,
    "body": "Code Climate is unhappy about the code duplication in runners.\r\n\r\nWe should probably use composition over inheritance but I didn't want to introduce too much changes.\r\nAlso `applescript.rb` has pretty much the same logic so we could refactor this file to use `cmd.rb`.",
    "head_branch": "code-climate-runners",
    "is_a_fork": true,
    "comments": [
      "> We should probably use composition over inheritance but I didn't want to introduce too much changes\r\n\r\nAbsolutely agree with you.",
      "> We should probably use composition over inheritance but I didn't want to introduce too much changes\r\nAbsolutely agree with you.\r\n\r\nOk, in this case, I will change the code to use composition",
      "Yeah, the change looks trivial, `super(command_options)` -> `Cmd.new(command_options).run`",
      "@Mogztter @iliabylich composition should be easy also because the api is moving away from full-blown classes to \"call-ables\", like here:\r\n\r\nhttps://github.com/opal/opal/blob/7ecfd4bb04cedab39339e01d1b674e44345bbceb/lib/opal/cli_runners.rb#L43-L53\r\n\r\nInstead of migrating everything right away I added support for the legacy classes via this method:\r\n\r\nhttps://github.com/opal/opal/blob/7ecfd4bb04cedab39339e01d1b674e44345bbceb/lib/opal/cli_runners.rb#L59-L67\r\n\r\n@Mogztter if you think you can do as part of this PR good, otherwise we'll do it later I guess.",
      "Reading my code again... I don't think it's really worth it.\r\nIt introduces a lot of code changes but without clear-cut improvement, sorry :disappointed: "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090d3d6ca63ac8d87ec0a",
    "number": 1740,
    "body": "The documentation should read better now\r\n\r\nE.g.\r\n\r\n```js\r\n  Opal.$$.Regexp.$$.IGNORECASE\r\n```\r\n\r\nFixes #1554 cc @camertron @radanskoric",
    "head_branch": "elia/constant-navigation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add a short $$ helper to navigate constants manually (#1740)\n\nE.g.\r\n\r\n  Opal.$$.Regexp.$$.IGNORECASE\r\n  # also workig\r\n  Opal.Regexp.$$.IGNORECASE\r\n\r\nFixes #1554"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090d4d6ca63ac8d87ec0b",
    "number": 1738,
    "body": "Before:\r\n```\r\n$ opal -M -e 'p 42'\r\n/private/var/folders/5r/6fz4187d1rj_67cvnjgcbw0w0000gn/T/opal-nodejs-runner-20180108-5821-szas81:2459\r\n        owner_class.$$proto['$'+method_name].$$pristine = true\r\n                                                        ^\r\n\r\nTypeError: Cannot set property '$$pristine' of undefined\r\n```\r\nAfter:\r\n```\r\n$ opal -M -e 'p 42'\r\n42\r\n```",
    "head_branch": "fix-pristine-when-method-missing-disabled",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix $$pristine when method missing is disabled. (#1738)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090d5d6ca63ac8d87ec0c",
    "number": 1737,
    "body": "Selfish reasons for doing this, tbh — my script mentioned in #1734 can't parse JS functions correctly without this change because it thinks it's still inside a parenthetical expression — it doesn't know about strings. :-) Adding a closing parenthesis here fixes it.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Close parentheses in error message\n\nSelfish reasons for doing this, tbh — my script mentioned in #1734 can't parse JS functions correctly without this change because it thinks it's still inside a parenthetical expression — it doesn't know about strings. :-) Adding a closing parenthesis here fixes it."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090d6d6ca63ac8d87ec0d",
    "number": 1736,
    "body": "Unfortunately, symlinks cannot be written on Windows with MSYS2/MinGW during gem installation without elevated privileges, and so it fails. This PR restores the `bin/` directory and removes the symlink added in 66849b5 and removes another symlink in a `node_modules` dir (symlinks found using `find . -type l -ls`).\r\n\r\nBefore this patch, the install would fail with:\r\n\r\n```\r\nblack@DESKTOP-9BINLQT MINGW64 /c/Users/black/Desktop\r\n$ gem install opal-0.11.0.gem\r\nERROR:  While executing gem ... (Errno::EACCES)\r\n    Permission denied @ rb_file_s_symlink - (./exe, C:/Ruby25-x64/lib/ruby/gems/2.5.0/gems/opal-0.11.0/bin)\r\n```\r\n\r\nAfter, gem installs successfully:\r\n\r\n```\r\nblack@DESKTOP-9BINLQT MINGW64 /c/Users/black/Desktop\r\n$ gem install opal-0.11.0-blacktm.gem\r\nunknown encoding name \"\"+e)\" for lib/opal/cli_runners/node_modules/chrome-remote-interface/chrome-remote-interface.js, skipping\r\nSuccessfully installed opal-0.11.0\r\nParsing documentation for opal-0.11.0\r\nInstalling ri documentation for opal-0.11.0\r\nDone installing documentation for opal after 20 seconds\r\n1 gem installed\r\n\r\nblack@DESKTOP-9BINLQT MINGW64 /c/Users/black/Desktop\r\n$ opal -v\r\nOpal v0.11.0\r\n```\r\n\r\nSince this install error was not caught in the AppVeyor CI (perhaps because the commands are run in administrator mode, similar to `sudo`), I might suggest adding a manual step to the release process to test installing the built gem on Windows in the meantime (maybe other OSs as well).",
    "head_branch": "remove-bin-symlink",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090d7d6ca63ac8d87ec0e",
    "number": 1735,
    "body": "First draft of the OpenURI module (copied from https://raw.githubusercontent.com/ruby/ruby/373babeaac8c3e663e1ded74a9f06ac94a671ed9/lib/open-uri.rb)\r\n\r\nFor now I only support a subset of features but I want to check with you that I'm on the right track 😉 ",
    "head_branch": "open-uri",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1735 from Mogztter/open-uri\n\nImplement OpenURI module"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090d8d6ca63ac8d87ec0f",
    "number": 1733,
    "body": "This PR increases CI test coverage on Windows. Currently, the Windows CI (AppVeyor) is configured to use `ruby_version: '23'`, which resolves to `ruby 2.3.3p222`, which uses the old RubyInstaller. Adding `24` to the config will test Opal using the new RubyInstaller2, which has a [different architecture](https://rubyinstaller.org/2017/05/25/rubyinstaller-2.4.1-1-released.html) than the old installer (this architecture will be used for all future releases of Ruby).\r\n  ",
    "head_branch": "add-rubyinstaller2-ci",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090d9d6ca63ac8d87ec10",
    "number": 1732,
    "body": "Now runners consist of just an object that can respond to #call and \r\nreturn the exit code.\r\n\r\nOld runners are still called with the legacy API but rewriting them with\r\nthe new one is encouraged.",
    "head_branch": "elia/cli-runners-cleanup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Change the CLI runners API to just be callables (#1732)\n\nNow runners consist of just an object that can respond to #call and \r\nreturn the exit code.\r\n\r\nOld runners are still called with the legacy API but rewriting them with\r\nthe new one is encouraged."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090dad6ca63ac8d87ec11",
    "number": 1731,
    "body": "```\r\n2.4.1 :001 > [49, 50, 51].pack('U*')\r\n => \"123\" \r\n```\r\n\r\n```\r\nbundle exec opal -e \"require 'corelib/array/pack'; p [49, 50, 51].pack('U*')\"  \r\n\"123\"\r\n```\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\r\n\r\n//cc @iliabylich :wink: \r\n",
    "head_branch": "array-pack-u",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement Array#pack('U') (#1731)\n\n* Implement Array#pack('U')\r\n\r\n* Enable ruby/core/array/pack/u_spec\r\n\r\n* Convert JavaScript RangeError to Ruby RangeError\r\n\r\n* Move taint filters to unsupported/taint.rb"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090dbd6ca63ac8d87ec12",
    "number": 1730,
    "body": "Reference: https://ruby-doc.org/core-2.1.1/Regexp.html#method-i-options",
    "head_branch": "regexp-extended",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Resolves #1729, Define constant Regexp::EXTENDED (#1730)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090dcd6ca63ac8d87ec13",
    "number": 1728,
    "body": "Resolves #1727",
    "head_branch": "issue-1727",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement Dir#glob for Node.js (#1728)\n\nResolves #1727"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090dcd6ca63ac8d87ec14",
    "number": 1726,
    "body": "Resolves #1725 ",
    "head_branch": "issue-1725",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement File#symlink? for Node.js (#1726)\n\nResolves #1725"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090ddd6ca63ac8d87ec15",
    "number": 1723,
    "body": "Implemented:\r\n+ `String#unpack` for `C, S, L, Q, S>, L>, Q>, c, s, l, q, n, N, v, V, U, w, A, a, Z, B, b, H, h, u, M, m`\r\n+ `Array#pack` for `C, S, L, Q, c, s, l, q, A, a`.\r\n\r\nUpdated MSpec (it's not a gem anymore).\r\n\r\n/cc @elia @Mogztter ",
    "head_branch": "implement-array-pack-and-string-unpack",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Partially implement array pack and string unpack (#1723)\n\n* Added String#unpack for C, S, L, Q, S>, L>, Q>, c, s, l, q, n, N, v, V, U, w, A, a, Z, B, b, H, h, u, M, m.\r\n* Added Array#pack for C, S, L, Q, c, s, l, q, A, a."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090ded6ca63ac8d87ec16",
    "number": 1722,
    "body": "@iliabylich picking up where we left on gitter, feel free to comment and add commits direclty to the branch",
    "head_branch": "elia/dummy-location-for-rewriters",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Provide a dummy location for virtual ast nodes\n\nThis is useful to let the comment associator do its job and be able to\ntraverse nodes generated by rewriters."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090dfd6ca63ac8d87ec17",
    "number": 1718,
    "body": "fixes #1717 ",
    "head_branch": "elia/fix-complex-js-syntax-calls",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Complex .JS.method calls are now propertly handled"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090e0d6ca63ac8d87ec18",
    "number": 1716,
    "body": "Before this it was using `deafult$` instead of `default` as kwarg key",
    "head_branch": "elia/kwargs-not-js-ident",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Don't treat kwargs as JS identifiers (#1716)\n\nUse meta to store the original arg name"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090e1d6ca63ac8d87ec19",
    "number": 1713,
    "body": "- `require_tree` argument was getting the wrong encoding because was being exported by `Pathname`\r\n- Encoding::ASCII has been added as an alias of BINARY\r\n- The whole encoding has been marked as dummy ",
    "head_branch": "elia/ascii-encoding-fixes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add ASCII as dummy alias of BINARY encoding\n\nThe \"dummy\" flag is ignored anyway but since it's intended for \npartial support of encoding makes sense to have it here."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090e2d6ca63ac8d87ec1a",
    "number": 1712,
    "body": "",
    "head_branch": "fix-travis",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Chrome runner on Travis. (#1712)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090e3d6ca63ac8d87ec1b",
    "number": 1711,
    "body": "These commits work toward adding support for `JS.async` and `JS.await`\r\nto allow these ES7 keywords to be used. For background on these\r\nfunctions http://rossboucher.com/await/#/ is a good introduction.\r\n\r\nMy test case for code up to now has been\r\n\r\n```\r\nrequire 'js'\r\n\r\nclass Foo\r\n  include JS\r\n\r\n  def self.bar(&block)\r\n    self.JS.async block.call\r\n  end\r\nend\r\n\r\nFoo.bar do\r\n  self.JS.await sleep(2)\r\nend\r\n```\r\n\r\nMy motivation for adding these is to support an async/await workflow for\r\n`sleep` to allow a concurrent, non-window-blocking sleep to be used in multiple \"threads\".\r\nFor example in javascript this would look like this:\r\n\r\n```\r\nfunction sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nasync function kick() {\r\n  console.log(\"boom\")\r\n  await sleep(1000);\r\n}\r\n\r\nasync function hihats() {\r\n  console.log(\"tick\")\r\n  await sleep(500);\r\n  console.log(\"tick\")\r\n  await sleep(500);\r\n}\r\n\r\n// viewing the console shows these execute concurrently\r\nkick();\r\nhihats();\r\n```\r\n\r\nStill todo:\r\n\r\n- [ ] verify that this approach (modifying sexp) is viable\r\n- [ ] add specs\r\n- [ ] make sure that `async` and `await` are output in compiled js\r\n- [ ] decide how to handle issues around scoping the async calls\r\n- [ ] check performance impact for compiler and runtime",
    "head_branch": "js_async_await",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090e4d6ca63ac8d87ec1c",
    "number": 1710,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typos"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090e5d6ca63ac8d87ec1d",
    "number": 1709,
    "body": "``` ruby\r\n# encoding: ascii-8bit\r\n'λ'\r\n```\r\n\r\nNow compiles to:\r\n``` js\r\n\"λ\".$force_encoding(\"ASCII-8BIT\")\r\n```\r\n\r\nWhen no magic comment specified all strings are treated as UTF-8 and have no re-encoding.\r\n\r\nAlso the parser now raises an error for invalid UTF-8 byte sequences like:\r\n``` ruby\r\n\"\\xFF\"\r\n```\r\n\r\nor\r\n\r\n``` ruby\r\n# encoding: utf-8\r\n\"\\xFF\"\r\n```\r\n\r\nIf you want to make an ascii-string with 255 char, use `encoding` comment and specify any encoding that supports it. You can always check it by running `String#valid_encoding?` method.\r\n\r\nAlso now we probably can correctly implement `String#bytes` and friends.\r\n\r\nTwo related modifications:\r\n1. `Object#to_s` now converts its return value from String object to a plain string. [Demo of the bug](http://opalrb.com/try/?code:obj%20%3D%20Object.new%0A%0Adef%20obj.to_s%0A%20%20%22string%22.force_encoding(%27ASCII-8BIT%27)%0Aend%0A%0Aputs%20%22%23%7Bobj%7D%22). \r\n2. Since `String#force_encoding` (which is now used in many places in specs) returns a String object, it becomes mutable. There were two specs for `Marshal` module that were relying on setting instance variables on the `String`. Before this patch the string was immutable and `instance_variable_set` was no-op. Now it's created using `.force_encoding` and thus is mutable and can have ivars.\r\n\r\nAbout performance:\r\n1. For no magic comment there's absolutely no difference.\r\n2. For `encoding: utf-8` comment there's absolutely no difference.\r\n3. For `encoding: any-non-utf-8-encoding` there's a difference for inline string allocation.",
    "head_branch": "use-magic-encoding-comment-to-encode-compiled-strings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1709 from iliabylich/use-magic-encoding-comment-to-encode-compiled-strings\n\nUse magic encoding comment to encode compiled strings."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090e6d6ca63ac8d87ec1e",
    "number": 1708,
    "body": "And make sure it always passes a number down to Opal.exit().\r\n\r\nFixes #1706 \r\n\r\ncc @Mogztter ",
    "head_branch": "elia/kernel-exit-false",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1708 from opal/elia/kernel-exit-false\n\nMake Kernel#exit support false as status"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090e7d6ca63ac8d87ec1f",
    "number": 1702,
    "body": "```ruby\r\nFile.expand_path('spec/share/chapter-01/index.adoc') # c:/dev/asciidoctor.js/spec/share/chapter-01/index.adoc\r\nFile.expand_path('spec\\node\\target\\output.html') # c:/dev/asciidoctor.js/spec/node/target/output.html\r\nFile.expand_path('./spec/node/target') # c:/dev/asciidoctor.js/spec/node/target\r\n```\r\n\r\nPartially resolved: https://github.com/opal/opal/issues/1701",
    "head_branch": "file-expand-path-windows",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use the operating system's default directory for temporary files"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090e8d6ca63ac8d87ec20",
    "number": 1700,
    "body": "Fixes #1699",
    "head_branch": "elia/expand-path-with-actual-pwd",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make File.expand_path compliant to the Ruby spec"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090e9d6ca63ac8d87ec21",
    "number": 1698,
    "body": "PR for https://github.com/opal/opal/issues/1696.",
    "head_branch": "bugfix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "remove trailing semicolon when generating xstring code (#1698)\n\n* remove trailing semicolon when generating xstring code\r\n\r\n* add warning for xstr ends with semicolon\r\n\r\n* only remove trailing semicolon for one-line xstr expression\r\n\r\n* fix styling: add parentheses around arguments"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090ead6ca63ac8d87ec22",
    "number": 1695,
    "body": "see #1694\r\n\r\nI have implemented these methods in pure ruby. Maybe there is already a pure ruby implementation out, but I was not able to find it.",
    "head_branch": "feature/1694_Date#upto",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implemented Date#step, Date#upto, Date#downto (#1695)\n\n* now support Date#step, Date#upto, Date#downto\r\nsee #1694\r\n\r\n* #1694 edited according to changes requested by @iliabylich\r\n\r\n* #1694 renamed arguments as requested by @iliabylich\r\n\r\n* #1694 removed one more puts statement. Thanks to @iliabylich"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090ebd6ca63ac8d87ec23",
    "number": 1692,
    "body": "This PR is still in progress, I'll try to cover as much as I can before merging.\r\n\r\nNote for reviewers: it's better to review it per commit. ",
    "head_branch": "update-rubyspecs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1692 from iliabylich/update-rubyspecs\n\nUpdate rubyspecs, bump RUBY_VERSION to 2.4.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090ecd6ca63ac8d87ec24",
    "number": 1691,
    "body": "Fixes #1690.\r\n\r\n`-w` is a default flag for all tasks running specs on CI and locally.\r\n\r\nThere are still some warnings:\r\n1. https://github.com/whitequark/parser/issues/360 - reported and looks trivial to fix. Edit: nope, it should be fixed in ragel and doesn't look trivial 😄 \r\n2. rubyspecs suite has some tests for floats like `1e1020`. parser uses `Float('1e1020')` to parse them. Both `ruby -we 'p 1e1020'` and `ruby -we \"p Float('1e1020')\"` print this warning (this float is actually `Float::INFINITY`). It doesn't look like a ruby version -specific warning, probably it should be silenced in rubyspec. I'll try to fix it.\r\n\r\n@lloeki I'm not sure that this PR fixes all warnings from #1690, some of them can be unused in our CI suite.",
    "head_branch": "remove-warnings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove warnings (#1691)\n\n* Run specs with -w flag. Fixed warnings coming from verbose mode.\r\n\r\n* Run /lib specs in verbose mode."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090edd6ca63ac8d87ec25",
    "number": 1683,
    "body": "I modified `Marshal.dump` to correspond to a large integer value.\r\n\r\n`Marshal.dump(value)` will be overflow when in -0x100000000 > `value` >= 0x100000000\r\nMRI treats the value as `Bignum` in this case.\r\n\r\nOpal\r\n```\r\n>> Marshal.dump(0x100000000)\r\n=>\"\\u0004\\bi\\u0001\\u0000\"\r\n```\r\n\r\nMRI\r\n```\r\nirb> Marshal.dump(0x100000000)\r\n=> \"\\x04\\bl+\\b\\x00\\x00\\x00\\x00\\x01\\x00\"\r\n```",
    "head_branch": "marshal-dump-bignum",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bignum support for Marshal.dump (#1683)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090eed6ca63ac8d87ec26",
    "number": 1682,
    "body": "PhantomJS is [dead](https://groups.google.com/forum/#!topic/phantomjs/9aI5d-LDuNE)",
    "head_branch": "drop-phantomjs-support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1682 from iliabylich/drop-phantomjs-support\n\nDrop PhantomJS support. Add support for Headless Chrome."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090efd6ca63ac8d87ec27",
    "number": 1676,
    "body": "+ Added support for `Hash` with default value\r\n+ Improved loading of User-defined classes (with `self._load` and `_dump` methods)\r\n+ Improved loading of User-Marshal classes (with `marshal_dump/marshal_load` methods)\r\n+ Renamed `Range` ivar responsible for `..`/`...` (`exclude_end?`) marker to support Ranges encoded by MRI.\r\n+ Removed `_load` from several corelib classes (MRI doesn't have them, they were added to Opal as a temporary workaround)\r\n+ Documented `ReadBuffer`\r\n\r\nAlso fixed an inverted test mode, it seems to work now.",
    "head_branch": "improve-marshalling",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1676 from iliabylich/improve-marshalling\n\nImprove marshalling"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090f0d6ca63ac8d87ec28",
    "number": 1674,
    "body": "Also removed old patch, our version of parser includes it.\r\n\r\nCloses https://github.com/opal/opal/issues/1673",
    "head_branch": "visit-dot-js-nodes-children-in-ast-rewriters",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed base AST rewriter to visit children of Opal-specific jscall, jsattr and jsattrasgn nodes."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090f1d6ca63ac8d87ec29",
    "number": 1672,
    "body": "Resolves #1663",
    "head_branch": "patch-7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Resolves #1663, alias IO.write/.read to File.write/.read"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090f2d6ca63ac8d87ec2a",
    "number": 1671,
    "body": "Closes https://github.com/opal/opal/issues/1669\r\n\r\nObject cache is not well documented in https://github.com/ruby/ruby/blob/trunk/doc/marshal.rdoc#object-references, however, its behavior can be reverse-engineered:\r\n\r\n``` ruby\r\nclass A\r\n  def initialize\r\n    @a = Object.new\r\n    @b = Object.new\r\n    @c = Object.new\r\n    @d = $link\r\n  end\r\n\r\n  def inspect\r\n    \"#<A:instance @a=#{@a} @b=#{@b} @c=#{@c} @d=#{@d}\"\r\n  end\r\nend\r\n\r\nclass Link\r\nend\r\n\r\n$link = Link.new\r\n\r\np Marshal.dump([A.new, $link])\r\n```\r\n\r\nMRI prints `\"\\x04\\b[\\ao:\\x06A\\t:\\a@ao:\\vObject\\x00:\\a@bo;\\a\\x00:\\a@co;\\a\\x00:\\a@do:\\tLink\\x00@\\n\"` after running this code. This binary data contains:\r\n+ a list indicator `[`\r\n+ a length of the list `\\a` (2)\r\n+ two items, the first is `A.new` that has `$link` inside, the second is an object link to 5th processed object.\r\n\r\nWe can replace the end to contain links to 0th, 1th, ... 5th elements, and, of course, change the length of the array to 7 elements to match the structure of `[A.new, @0, @1, @2, @3, @4, @5]`.\r\n\r\nOur modified buffer is `\"\\x04\\b[\\fo:\\x06A\\t:\\a@ao:\\vObject\\x00:\\a@bo;\\a\\x00:\\a@co;\\a\\x00:\\a@do:\\tLink\\x00@\\x00@\\x06@\\a@\\b@\\t@\\n\"`.\r\n\r\nAssuming that classes `A` and `Link` are loaded, demarshalling returns `A.new` + all known object links:\r\n``` ruby\r\nMarshal.load(\"\\x04\\b[\\fo:\\x06A\\t:\\a@ao:\\vObject\\x00:\\a@bo;\\a\\x00:\\a@co;\\a\\x00:\\a@do:\\tLink\\x00@\\x00@\\x06@\\a@\\b@\\t@\\n\")\r\n => [\r\n  #<A:instance @a=#<Object:0x007ff4ba879388> @b=#<Object:0x007ff4ba879310> @c=#<Object:0x007ff4ba8792c0> @d=#<Link:0x007ff4ba8791f8>,\r\n  [...],\r\n  #<A:instance @a=#<Object:0x007ff4ba879388> @b=#<Object:0x007ff4ba879310> @c=#<Object:0x007ff4ba8792c0> @d=#<Link:0x007ff4ba8791f8>,\r\n  #<Object:0x007ff4ba879388>,\r\n  #<Object:0x007ff4ba879310>,\r\n  #<Object:0x007ff4ba8792c0>,\r\n  #<Link:0x007ff4ba8791f8>\r\n]\r\n```\r\n\r\nSo, the order is:\r\n1. array itself (as a top-level container)\r\n2. `A.new`\r\n3. `@a`\r\n4. `@b`\r\n5. `@c`\r\n6. `$link`\r\n\r\nAnd so we get a simple conclusion: the object MUST be cached BEFORE processing its instance variables.\r\n\r\nThis PR fixes it. Both reported and simplified examples from https://github.com/opal/opal/issues/1669 work as expected",
    "head_branch": "fix-object-cache-filling-during-nested-data-marshalling",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Save a link to an object to a Marshal's object cache before processing its instance variables."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090f3d6ca63ac8d87ec2b",
    "number": 1668,
    "body": "Conciseness should improve both readability and perf (less lookups on the `Opal` object).\r\n\r\nIt also gives a little gain in compiled size, before:\r\n\r\n    * opal (development:  792.72KB, minified:  526.79KB, gzipped:   92.98KB).\r\n\r\nafter:\r\n\r\n    * opal (development:  768.76KB, minified:  502.54KB, gzipped:   92.21KB).\r\n",
    "head_branch": "elia/dollars-and-cents",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use shorter helpers for constant lookups (#1668)\n\n`$$` for relative (nesting) lookups and `$$$` for absolute (qualified) \r\nlookups."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090f4d6ca63ac8d87ec2c",
    "number": 1667,
    "body": "Pull request for #1517 .",
    "head_branch": "further-array-any-optimization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "use JS implementation in Array#any? optimization"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090f5d6ca63ac8d87ec2d",
    "number": 1666,
    "body": "",
    "head_branch": "rewrite-for-node-to-each-in-a-separate-rewriter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Extracted ForNode to rewriter (since it simply generates :iter node inside)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090f6d6ca63ac8d87ec2e",
    "number": 1665,
    "body": "",
    "head_branch": "fix-__END__-section-parsing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed __END__ section parsing."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090f7d6ca63ac8d87ec2f",
    "number": 1664,
    "body": "`process` object is defined in a Webpack environment but `process.stderr` and `process.stdout` are not.",
    "head_branch": "io-process",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Check that process.stderr and process.stdout are defined\n\nprocess object is defined in a Webpack environment but process.stderr and process.stdout are not."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090f7d6ca63ac8d87ec30",
    "number": 1662,
    "body": "Perf on nodejs looks roughly the same (possibly in favor of the helper), probably thanks to JIT.\r\n\r\nThe core is much more readable and shorter.\r\n\r\nI think there are some more places that can be replaced, but I'll wait for an ok from @opal/core.",
    "head_branch": "elia/truth-helpers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use truth helpers instead of inlining"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090f8d6ca63ac8d87ec31",
    "number": 1658,
    "body": "`$PID` and `$PROCESS_ID` are equivalent for `$$`.\r\n\r\nRuboCop by default warns that they are preferable to `$$`:\r\n\r\n*   [RuboCop cop](http://www.rubydoc.info/github/bbatsov/rubocop/Rubocop/Cop/Style/SpecialGlobalVars)\r\n*   [Ruby Style Guide](https://github.com/bbatsov/ruby-style-guide#no-cryptic-perlisms)\r\n*   [`stdlib/English`](https://ruby-doc.org/stdlib/libdoc/English/rdoc/English.html).",
    "head_branch": "add-aliases-for-pid-variable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090f9d6ca63ac8d87ec32",
    "number": 1657,
    "body": "depends on https://github.com/ruby/spec/pull/424",
    "head_branch": "elia/hash-compare-by-identity",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add Hash#compare_by_identity"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090fad6ca63ac8d87ec33",
    "number": 1656,
    "body": "I found this while running one of my apps against #1653.\r\n\r\nMemoization with a begin/end block and an early return seems to be causing something to go wrong. I haven't found what it is, but I was able to reproduce it in a failing spec.\r\n\r\nThis spec passes on MRI (and on Opal 0.10), but fails on Opal with a NoMethodError. I don't know what part of this fails yet and haven't had time yet to investigate (I doubt it's actually the memoization part, but that was my use case), but I wanted to get it in here because it might break other people's code, as well. I figured you guys are more familiar with the recent compiler changes than I am so something might jump out at you. If not, I can investigate a bit more.",
    "head_branch": "regression-complex-memoization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1656 from jgaskins/regression-complex-memoization\n\nFailing spec for begin/end with early return that passes on MRI"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090fbd6ca63ac8d87ec34",
    "number": 1653,
    "body": "~~**🙅‍♂️ DO NOT MERGE YET**~~\r\n\r\n_a complete rewrite of the constants system to actually mimic CRuby behavior_\r\n\r\n- fixes https://github.com/opal/opal/issues/548\r\n- fixes https://github.com/opal/opal/issues/1607\r\n- related: https://github.com/opal/opal/issues/1581 https://github.com/asciidoctor/asciidoctor.js/pull/280 https://github.com/opal/opal/issues/1577\r\n\r\n**To do before merging:**\r\n\r\n- [x] remove debug code and debug/stale comments\r\n- [x] update API documentation\r\n- [x] update guides (if needed)\r\n\r\n---\r\n\r\n## Part 1: Make it correct ✅ \r\n\r\nThis is more or less done:\r\n- the lookup correctly treats relative and qualified constant names\r\n- nesting is passed around for each scope in the form of an array with the nearest nesting first\r\n- `Module.nesting` and `Module.constants` correctly work\r\n- `BasicObject` behaves properly (see #548)\r\n\r\n## Part 2: Make it fast ⏳ \r\n\r\nThis is still to be done, some considerations:\r\n- a constant lookup cache should probably be created\r\n- consider re-using Adam's very smart idea of a prototype chain for constants (can work for both inherited and nesting lookups)\r\n- remember that any cache must be properly invalidated or updated\r\n- consider using a property on `$nesting`\r\n- consider using shorter names\r\n- consider restoring some form of `Opal.get`",
    "head_branch": "elia/constants",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1653 from opal/elia/constants\n\nconstants system rewrite (in two parts)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090fcd6ca63ac8d87ec35",
    "number": 1652,
    "body": "The keys variable was defined in the loop but never used. This patch uses it. It also stores the smap in a variable to avoid redundant lookups.",
    "head_branch": "runtime-hash-clone-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "use keys variable in loop in Opal.hash_clone"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090fdd6ca63ac8d87ec36",
    "number": 1651,
    "body": "",
    "head_branch": "node-io-binread",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement IO.binread on Node.js"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090fed6ca63ac8d87ec37",
    "number": 1650,
    "body": "",
    "head_branch": "node-file-readable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement File.readable? in Node.js"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662090ffd6ca63ac8d87ec38",
    "number": 1648,
    "body": "",
    "head_branch": "nashorn-file",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement file.file? and file.readable? for Nashorn"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209100d6ca63ac8d87ec39",
    "number": 1647,
    "body": "",
    "head_branch": "issue-1646",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "resolves #1646 File.file?, File.directory? and File.size should never return nil"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209101d6ca63ac8d87ec3a",
    "number": 1645,
    "body": "`lhs ||= rhs` becomes `lhs = lhs ||= rhs`\r\n`lhs &&= rhs` becomes `lhs = lhs && rhs`\r\n`lhs += rhs` becomes `lhs = lhs + rhs`",
    "head_branch": "rewrite-logical-operator-assignment-to-if-before-compilation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Rewrite logical operator assignment (or_asgn/and_asgn) to condition before compilation.\n\n`lhs ||= rhs` becomes `lhs = lhs || rhs`\n`lhs &&= rhs` becomes `lhs = lhs && rhs`\n`lhs +=  rhs` becomes `lhs = lhs +  rhs`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209102d6ca63ac8d87ec3b",
    "number": 1644,
    "body": "Follow-up of https://github.com/opal/opal/commit/9c168a5010210490c9a6fb6a72950ada359421f5\r\n\r\nThis should fix the build on Appveyor.",
    "head_branch": "patch-6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "cruby_tests has been renamed to test_cruby"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209102d6ca63ac8d87ec3c",
    "number": 1642,
    "body": "Plus this avoid conflict when using Require.js, see: https://github.com/asciidoctor/asciidoctor.js/pull/280#issuecomment-285859595",
    "head_branch": "patch-5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Adds a module id since seekmodule is bundled in opal.js\n\nImprove the documentation on how to update seekmodule."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209103d6ca63ac8d87ec3d",
    "number": 1641,
    "body": "@meh Second try :wink: \r\n\r\n#### Benchmark\r\n\r\n.benchmark.rb\r\n```ruby\r\nrequire 'benchmark'\r\n\r\nn = 50000\r\nBenchmark.bm do |x|\r\n  x.report { for i in 1..n; [1, 2, 3].grep(1); end }\r\nend\r\n```\r\n\r\n```\r\nbundle exec opal -- benchmark.rb\r\n```\r\n\r\nBefore | After\r\n------------ | -------------\r\n`user     system      total        real` | `user     system      total        real`\r\n`0.173000   0.173000   0.691999 (  0.173000)` | `0.112000   0.112000   0.448000 (  0.112000)`\r\n`0.168000   0.168000   0.672000 (  0.168000)` | `0.113000   0.113000   0.452000 (  0.113000)`\r\n`0.170000   0.170000   0.680000 (  0.170000)` | `0.113000   0.113000   0.452000 (  0.112000)`\r\n`0.169000   0.169000   0.676000 (  0.168000)` | `0.113000   0.113000   0.452001 (  0.114000)`\r\n`0.169000   0.169000   0.676000 (  0.169000)` | `0.113000   0.113000   0.452001 (  0.114000)`\r\n**Average** |\r\n`0,1698\t0,1698\t0,6791998\t0,1696` | `0,1128\t0,1128\t0,4512004\t0,113`\r\n\r\nIn this case the code is approximatively 50% faster",
    "head_branch": "issue-1639",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Resolves #1639, define Number#=== (#1641)\n\n* Resolves #1639, define Number#===\r\n\r\n* Remove typeof and use valueOf()"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209104d6ca63ac8d87ec3e",
    "number": 1640,
    "body": "Resolves #1639 ",
    "head_branch": "issue-1639",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1640 from Mogztter/issue-1639\n\nNumber#=== is called instead of Kernel#=== on switch/case with Numeric"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209105d6ca63ac8d87ec3f",
    "number": 1638,
    "body": "This PR isn't necessarily intended to be merged as is, but it wouldn't be a terrible thing if it were (except for the commented-out code I left in there). The main thing is that I noticed a de-opt in both `Class#new` and the aliased-method wrapper. In both cases, I noticed the block was being assigned directly and that `method.apply` was being used. I happened to notice that that's literally what `Opal.send` does and it somehow avoids a de-opt, so I went ahead and rewrote them in terms of `Opal.send`. Sure enough, no longer deoptimized. I have no idea why.\r\n\r\nRunning a quick benchmark using the Chrome profiler (a Clearwater app rendering about 2,000 components 25x):\r\n\r\n| | `new_body` | `Class#new` |\r\n|-|----|----|\r\n| before | 60.8ms | 77.4ms |\r\n| after | 11.3ms | 7.3ms |\r\n\r\nSo we're looking at about a 5x speedup in using method aliases (in this case, it was mostly `Array#map`) and a 10x speedup in `Class#new`. I think the selective clearing of `$$p` might have helped (the [optimizer can be touchy](https://gist.github.com/Hypercubed/89808f3051101a1a97f3) with function properties), but I haven't tested it exhaustively. If so, it could probably be built into the compiler.\r\n\r\nThe primary thing I'm wondering is whether using this pattern (`Opal.send` all the things) is preferable to manually setting up blocks and calling `function.apply`.",
    "head_branch": "optimize-methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimize Class#new and aliased methods"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209106d6ca63ac8d87ec40",
    "number": 1637,
    "body": "https://gist.github.com/435d1b7e7d840035d53b91d6583cdee3\r\n\r\nbefore:\r\n\r\n```\r\n2017-02-bwl21:master ⤑ opal -I. main.rb                                                                                                                                                    ~/C/o/_/2017-02-bwl21\r\n36.244 ruby\r\n0.071 convert ruby to js\r\n0.362 javascript\r\nresult is equal: true\r\n```\r\n\r\nafter:\r\n```\r\n2017-02-bwl21:master ⤑ opal -I. main.rb                                                                                                                                                    ~/C/o/_/2017-02-bwl21\r\n11.121 ruby\r\n0.081 convert ruby to js\r\n0.361 javascript\r\nresult is equal: true\r\n```\r\n\r\ncc @bwl21",
    "head_branch": "elia/optimize-hash",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1637 from opal/elia/optimize-hash\n\noptimize hash"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209107d6ca63ac8d87ec41",
    "number": 1635,
    "body": "Especially backslashes!\r\nWhen running on Windows with Node.js, File::SEPARATOR is equals to `path.sep = '\\\\'`.\r\n\r\nReference: https://nodejs.org/api/path.html#path_path_sep\r\n\r\nFixes #1630",
    "head_branch": "issue-1630",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Resolves #1630, Escapes meta characters in RegExp\n\nEspecially backslashes!\nWhen running on Windows with Node.js, File::SEPARATOR is equals to `path.sep = '\\\\'`.\n\nReference: https://nodejs.org/api/path.html#path_path_sep\n\nFixes #1630"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209108d6ca63ac8d87ec42",
    "number": 1633,
    "body": "Since JS objects created with a `null` prototype are essentially a pure bag of keys and values, they should behave the same as JS object literals when given to `Hash.new`.",
    "head_branch": "null-prototype-hash",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Let Hash.new take `Object.create(null)` JS objects"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620910ad6ca63ac8d87ec43",
    "number": 1632,
    "body": "Before: https://jsperf.com/opal-force-encoding-master-3392ee2a\r\n\r\n![master-3392](https://cloud.githubusercontent.com/assets/333276/22865341/254fa34c-f162-11e6-9c7e-17456285f4c3.png)\r\n\r\nAfter: https://jsperf.com/opal-force-encoding-master-52c0f3e0\r\n\r\n![after](https://cloud.githubusercontent.com/assets/333276/22865342/26e7e426-f162-11e6-9ceb-f4e1fe4e8c63.png)\r\n\r\n\r\n",
    "head_branch": "perf-force-encoding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1632 from Mogztter/perf-force-encoding\n\nReturns earlier on force_encoding to improve performance"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620910bd6ca63ac8d87ec44",
    "number": 1629,
    "body": "Current implementation of `Date.parse` doesn't support abbr-month-name with capital-letter.\n\n```ruby\nputs Date.parse(\"2013 jun 02\").to_s # \"2013-06-02\"\nputs Date.parse(\"2013 Jun 02\").to_s # \"2012-12-02\"\n```\n\nThis PR aims to solve this issue.",
    "head_branch": "Improve-Data-class",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add abbr-month-name with capital-letter support\n\nAdd abbr-month-name with capital-letter support in Date.parse"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620910cd6ca63ac8d87ec45",
    "number": 1628,
    "body": "Given the follwing code:\r\n\r\n```ruby\r\ntwenty_two_int = 22\r\ntwenty_three_int = 23\r\ntwenty_three_string = '23'\r\nzero_point_one = 0.1\r\nif 23 == twenty_three_int\r\n  puts '23 == twenty_three_int'\r\nend\r\nif twenty_three_int == twenty_three_int\r\n  puts 'twenty_three_int == twenty_three_int'\r\nend\r\nif '23' == twenty_three_string\r\n  puts \"'23' == twenty_three_string\"\r\nend\r\nif 23 == twenty_two_int\r\n  puts '23 == twenty_two_int'\r\nend\r\nif 0.1 == zero_point_one\r\n  puts '0.1 == zero_point_one'\r\nend\r\n```\r\n\r\n**Before**\r\n\r\n```javascript\r\n(function(Opal) {\r\n  twenty_two_int = 22;\r\n  twenty_three_int = 23;\r\n  twenty_three_string = \"23\";\r\n\r\n  if ((23)['$=='](twenty_three_int)) {\r\n    self.$puts(\"23 == twenty_three_int\")};\r\n\r\n  if (twenty_three_int['$=='](twenty_three_int)) {\r\n    self.$puts(\"twenty_three_int == twenty_three_int\")};\r\n\r\n  if (\"23\"['$=='](twenty_three_string)) {\r\n    self.$puts(\"'23' == twenty_three_string\")};\r\n\r\n  if ((23)['$=='](twenty_two_int)) {\r\n    return self.$puts(\"23 == twenty_two_int\")};\r\n\r\n  if ((0.1)['$=='](zero_point_one)) {\r\n    return self.$puts(\"0.1 == zero_point_one\")\r\n  } else {\r\n    return nil\r\n  };\r\n})(Opal);\r\n```\r\n\r\n**After**\r\n\r\n```javascript\r\n(function(Opal) {\r\n  twenty_two_int = 22;\r\n  twenty_three_int = 23;\r\n  twenty_three_string = \"23\";\r\n\r\n  if ((23)==(twenty_three_int)) {\r\n    self.$puts(\"23 == twenty_three_int\")};\r\n\r\n  if (twenty_three_int['$=='](twenty_three_int)) {\r\n    self.$puts(\"twenty_three_int == twenty_three_int\")};\r\n\r\n  if (\"23\"==(twenty_three_string)) {\r\n    self.$puts(\"'23' == twenty_three_string\")};\r\n\r\n  if ((23)==(twenty_two_int)) {\r\n    return self.$puts(\"23 == twenty_two_int\")};\r\n\r\n  if ((0.1)==(zero_point_one)) {\r\n    return self.$puts(\"0.1 == zero_point_one\")\r\n  } else {\r\n    return nil\r\n  };\r\n})(Opal);\r\n```",
    "head_branch": "js-operators",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620910dd6ca63ac8d87ec46",
    "number": 1627,
    "body": "- `Array#initialize` was reassigning function arguments — Ruby default positional args compiles to reassignment of JS function args. This leads to a deoptimization when also using the `arguments` object.\r\n- `Array#-` called `Array#clone` if the other array is empty, which is an expensive operation. It's cheaper to use `JS.Array.prototype.slice`.",
    "head_branch": "array-optimizations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make a couple optimizations in Array (#1627)\n\n* Make a couple optimizations in Array\r\n\r\n- Array#initialize was getting deoptimized due to reassigning function\r\n  arguments while also referencing the `arguments` object.\r\n- Array#- called Array#clone if the other array was empty, but that is\r\n  an expensive operation. It's cheaper to use JS.Array.prototype.slice.\r\n\r\n* Use JS array subscript check instead of Ruby\r\n\r\nIt's faster and doesn't break when arity checks are turned on.\r\n\r\n* ugh"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620910ed6ca63ac8d87ec47",
    "number": 1625,
    "body": "Since global variables aren't accounted for in yard, add some\r\nextra context to the top level `Native` docs.",
    "head_branch": "native-global-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add \"$$\" context to Native docs\n\nSince global variables aren't accounted for in yard, add some\nextra context to the top level `Native` docs."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620910fd6ca63ac8d87ec48",
    "number": 1624,
    "body": "In an effort to reduce startup time (it's only about 60-80ms in Safari on my machine, which is pretty great, but it's nearly 300ms in Chrome), I noticed that `Opal.add_stubs` monopolized CPU time on loading the runtime.\r\n\r\nThis PR reduces the number of iterations within this function on startup by almost 4x in real-world apps. A Clearwater app was setting almost 11k stubs. With this patch, it was reduced to just over 2800. Since Opal sets up stubs for methods that are either defined or called within a file, it isn't necessary for all subscribers to receive all stubs. I couldn't find any adverse effects of this patch, so I figured I'd send it your way.\r\n\r\nAdmittedly, it doesn't have a huge effect on startup time, but it does shave off 20-40ms in Chrome. I'm still investigating ways to improve this further.",
    "head_branch": "reduce-stub-calls",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Reduce stub method calls on startup\n\nThis reduces the number of times this function is called on startup by\nalmost 4x in real-world apps."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209110d6ca63ac8d87ec49",
    "number": 1622,
    "body": "Latest parser release: https://github.com/whitequark/parser/releases/tag/v2.3.3.1",
    "head_branch": "update-parser-gem",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bump up parser gem's version to 2.3.3.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209111d6ca63ac8d87ec4a",
    "number": 1621,
    "body": "\r\n\r\nBased on #1620 (otherwise the test will fail)",
    "head_branch": "issue-1619",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Adds a test to compile Ruby code with opal-builder.js (#1621)\n\n* Resolves #1619, adds a test to compile Ruby code with opal-builder.js"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209112d6ca63ac8d87ec4b",
    "number": 1620,
    "body": "Resolve one issue in https://github.com/opal/opal/issues/1619",
    "head_branch": "return-ioaction",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add explicit return to Node.js' File methods (#1620)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209112d6ca63ac8d87ec4c",
    "number": 1616,
    "body": "\r\n\r\nCurrently, the following ruby code is compiled to invalid syntax as a\r\nJavaScript code by Opal.\r\n\r\n```ruby\r\n # test.rb\r\nx = /re\r\n/\r\n```\r\n\r\n```sh\r\n$ opal test.rb\r\n/tmp/opal-nodejs-runner-20170109-25185-cupfor:20157\r\n  return (x = /re\r\n              ^\r\nSyntaxError: Invalid regular expression: missing /\r\n    at Object.exports.runInThisContext (vm.js:78:16)\r\n    at Module._compile (module.js:543:28)\r\n    at Object.Module._extensions..js (module.js:580:10)\r\n    at Module.load (module.js:488:32)\r\n    at tryModuleLoad (module.js:447:12)\r\n    at Function.Module._load (module.js:439:3)\r\n    at Module.runMain (module.js:605:10)\r\n    at run (bootstrap_node.js:420:7)\r\n    at startup (bootstrap_node.js:139:9)\r\n    at bootstrap_node.js:535:3\r\n\r\n$ opal -cO test.rb\r\n/* Generated by Opal 0.11.0.dev */\r\n(function(Opal) {\r\n  var self = Opal.top, $scope = Opal, $scopes = [Opal], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, x = nil;\r\n\r\n  return (x = /re\r\n/)\r\n})(Opal);\r\n\r\n/* Generated by Opal 0.11.0.dev */\r\n(function(Opal) {\r\n  var self = Opal.top, $scope = Opal, $scopes = [Opal], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;\r\n\r\n  Opal.add_stubs(['$exit']);\r\n  return Opal.const_get($scopes, 'Kernel', true, true).$exit()\r\n})(Opal);\r\n```\r\n\r\nRuby allows new line(s) in a regexp literal.\r\nHowever, JavaScript does not allow it.\r\n\r\nCurrently Opal optimizes a simple regexp literal.\r\nThe simple literal includes the above literal that includes a new line.\r\nSo, it's incorrectly optimized.\r\n\r\nThis change fixes the problem.",
    "head_branch": "multiline-regexp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1616 from pocke/multiline-regexp\n\nFixed multiple line Regexp literal to not generate invalid syntax as JavaScript"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209113d6ca63ac8d87ec4d",
    "number": 1615,
    "body": "When running Opal in a Node.js environment the following code is not working as expected:\r\n\r\n```ruby\r\ndef try_read\r\n  ::File.read(\"missing\") # The file \"missing\" is missing (obviously), so the code will throw an exception...\r\nrescue IOError\r\n  # ... but in a Node.js environment the exception thrown is *not* an IOError.\r\n  puts \"As a result this code will not be executed :'(\"\r\nend\r\n```\r\n\r\nThe reason is that Node.js errors (for instance `ENOENT` https://nodejs.org/api/errors.html) are not an instance of Ruby's `IOError`.\r\n",
    "head_branch": "node-io-errors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Convert Node.js' IO errors to Ruby's IOError object"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209114d6ca63ac8d87ec4e",
    "number": 1614,
    "body": "h2 header of `0.10.3` is duplicated in CHANGELOG. And the removed header is not needed.\r\n\r\n\r\n\r\nNote\r\n------\r\n\r\nThe following fixes are under 0.10.3 header that is removed.\r\n\r\n> ### Fixed\r\n>\r\n> - Newly compliant with the Ruby Spec Suite:\r\n>     * `Module#class_variables`\r\n>     * `Module#class_variable_get`\r\n>     * `Module#class_variable_set`\r\n>     * `Module#remove_class_variable`\r\n>     * `Module#include?`\r\n>     * `Numeric#step` (#1512)\r\n>\r\n> - Improvements for Range class (#1486)\r\n>     * Moved private/tainted/untrusted specs to not supported\r\n>     * Conforming `Range#to_s` and `Range#inspect`\r\n>     * Starting `Range#bsearch` implementation\r\n>     * Simple `Range#step` implementation\r\n>     * Fixing `Range#min` for empty Ranges\r\n>     * Fixing `Range#last(n)` `Range#first(n)` and one edge case of `Range#each`\r\n>     * Fixing some `Range#step` issues on String ranges\r\n>     * Simple `Range#bsearch` implementation, passes about half the specs\r\n>     * Minor styling improvements. Fixed size of `Range#step`.\r\n>     * Compile complex ranges to \"Range.new\" so there will be a check for begin and end to be comparable.\r\n>\r\n> - Fixed `defined?` for methods raising exceptions\r\n> - Fixed `Kernel#loop` (to catch `StopIteration` error)\r\n> - Fixed inheritance from the `Module` class.\r\n> - Fixed using `--preload` along with `--no-opal` for CLI\r\n> - Fixed `Integer(\"0\")` raising `ArgumentError` instead of parsing as 0\r\n> - Fixed `JSON#parse` to raise `JSON::ParserError` for invalid input\r\n> - `Module#append_features` now detects cyclic includes\r\n\r\nHowever, I think the fixes are not released.\r\nSo, I didn't move the fixes into `0.10.3`.",
    "head_branch": "fix-changelog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove duplicate `0.10.3` header in CHANGELOG\n\nh2 header of `0.10.3` is duplicated in CHANGELOG.\n\nNote\n------\n\nThe following fixes are under 0.10.3 header that is removed.\n\n> ### Fixed\n>\n> - Newly compliant with the Ruby Spec Suite:\n>     * `Module#class_variables`\n>     * `Module#class_variable_get`\n>     * `Module#class_variable_set`\n>     * `Module#remove_class_variable`\n>     * `Module#include?`\n>     * `Numeric#step` (#1512)\n>\n> - Improvements for Range class (#1486)\n>     * Moved private/tainted/untrusted specs to not supported\n>     * Conforming `Range#to_s` and `Range#inspect`\n>     * Starting `Range#bsearch` implementation\n>     * Simple `Range#step` implementation\n>     * Fixing `Range#min` for empty Ranges\n>     * Fixing `Range#last(n)` `Range#first(n)` and one edge case of `Range#each`\n>     * Fixing some `Range#step` issues on String ranges\n>     * Simple `Range#bsearch` implementation, passes about half the specs\n>     * Minor styling improvements. Fixed size of `Range#step`.\n>     * Compile complex ranges to \"Range.new\" so there will be a check for begin and end to be comparable.\n>\n> - Fixed `defined?` for methods raising exceptions\n> - Fixed `Kernel#loop` (to catch `StopIteration` error)\n> - Fixed inheritance from the `Module` class.\n> - Fixed using `--preload` along with `--no-opal` for CLI\n> - Fixed `Integer(\"0\")` raising `ArgumentError` instead of parsing as 0\n> - Fixed `JSON#parse` to raise `JSON::ParserError` for invalid input\n> - `Module#append_features` now detects cyclic includes\n\nHowever, I think the fixes are not released.\nSo, I didn't move the fixes into `0.10.3`."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209115d6ca63ac8d87ec4f",
    "number": 1613,
    "body": "The comment about high-value characters being returned as `\"\\uXXXXXXXX\"` from `String#inspect` doesn't seem to hold. It worked just fine on MRI 2.1, 2.2, and 2.3. That is, `String#inspect` displayed the string exactly as it was without Unicode escaping.",
    "head_branch": "allow-emojis-in-strings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209116d6ca63ac8d87ec50",
    "number": 1612,
    "body": "fixes #1611",
    "head_branch": "zip-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209117d6ca63ac8d87ec51",
    "number": 1610,
    "body": "`autoload` expects the Symbol object as the first argument.",
    "head_branch": "fix-autoload-usage",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix `autoload` usage in compiler spec\n\n`autoload` expects the Symbol object as the first argument."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209118d6ca63ac8d87ec52",
    "number": 1609,
    "body": "'Rspec' should be a 'RSpec'.\r\nref: http://rspec.info/",
    "head_branch": "fix-typos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typos in doc\n\n'Rspec' should be a 'RSpec'.\nref: http://rspec.info/"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209119d6ca63ac8d87ec53",
    "number": 1608,
    "body": "Looking for :bug: \r\n\r\n:wink: ",
    "head_branch": "more-tests-on-appveyor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Moooore tests on AppVeyor"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620911ad6ca63ac8d87ec54",
    "number": 1606,
    "body": "Created a Code Climate config with our Duplication engine and grade paths enabled.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Create .codeclimate.yml\n\nCreated a Code Climate config with our Duplication engine and grade paths enabled."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620911bd6ca63ac8d87ec55",
    "number": 1603,
    "body": "References: \r\n * https://www.appveyor.com/docs/installed-software/#ruby\r\n * https://www.appveyor.com/docs/lang/ruby/#build-matrix",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use Ruby 2.3.1 on Appveyor build"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620911cd6ca63ac8d87ec56",
    "number": 1602,
    "body": "@elia You will still have to create the project on [appveyor.com](https://www.appveyor.com) and configure the webhook on GitHub (the URL looks like `https://ci.appveyor.com/api/github/webhook?id={{ ID }}`)",
    "head_branch": "appveyor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Enable Appveyor build"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620911dd6ca63ac8d87ec57",
    "number": 1601,
    "body": "Ruby MRI:\r\n```ruby\r\nputs File.dirna­me('c:\\dev­\\playgroun­d\\test.ado­c') # \"c:\\\\dev\\\\playground\"\r\n````\r\nOpal:\r\n````javascript\r\nconsole.log($scope.get('File').$dirname('c:\\dev­\\playgroun­d\\test.ado­c')) // \".\"\r\n````\r\nIn Ruby.c the method isdirsep is checking both Unix separator / and DOS separator \\: https://github.com/ruby/ruby/blob/trunk/file.c#L2912\r\n\r\nIn Opal the method isDirSep is only checking for Unix separator: https://github.com/opal/opal/blob/master/opal/corelib/file.rb#L82\r\n\r\nAs a result `\"c:\\dev­\\playgroun­d\\test.ado­c\"` is considered as a filename and not a path. 😢",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Handle DOS path"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620911ed6ca63ac8d87ec58",
    "number": 1597,
    "body": "currently, anchor is grabbing `pattern[1..-2]`, which works fine for most regexes, but pukes when you supply one with flags, defeating the entire purpose of it. Instead, we now grab the `source` directly. \r\n\r\nAlso, currently the flags are being dropped, this fixes that as well",
    "head_branch": "strscan_anchor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "correct anchor to get proper regex source and use supplied flags"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620911fd6ca63ac8d87ec59",
    "number": 1595,
    "body": "",
    "head_branch": "matched_size",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add matched_size method"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209120d6ca63ac8d87ec5a",
    "number": 1594,
    "body": "fixes #1593",
    "head_branch": "gsub_fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209121d6ca63ac8d87ec5b",
    "number": 1592,
    "body": "",
    "head_branch": "ascii_only",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add ascii_only? method"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209122d6ca63ac8d87ec5c",
    "number": 1591,
    "body": "This short-circuits walking the class/module hierarchy to check whether an object is an instance of a particular class/superclass/module. It also removes duplicated code to check the object's meta class in addition to the object's class.\r\n\r\nI noticed that one of my apps using `grand_central` for state management (so it uses `case` heavily to match actions on their class) spent a lot of time in `Opal.ancestors` to construct an array of classes and modules. Since most matches occur within the first 1-3 elements of that array, we don't need to construct the array all the way down.\r\n\r\n## Before:\r\n\r\n|Benchmark|Iterations per sec|\r\n|-----|-------|\r\n|Object#is_a? hit|1,144,293|\r\n|Object#is_a? superclass hit|1,174,402|\r\n|Object#is_a? deep superclass hit|1,208,026|\r\n|Object#is_a? miss|1,177,395|\r\n|Class#=== hit|1,105,455|\r\n|Class#=== superclass hit|1,047,927|\r\n|Class#=== deep superclass hit|1,118,437|\r\n|Class#=== miss|1,051,812|\r\n\r\n\r\n## After:\r\n\r\n|Benchmark|Iterations per sec|\r\n|-----|-------|\r\n|Object#is_a? hit|3,617,699|\r\n|Object#is_a? superclass hit|2,869,255|\r\n|Object#is_a? deep superclass hit|3,170,777|\r\n|Object#is_a? miss|3,088,117|\r\n|Class#=== hit|3,728,483|\r\n|Class#=== superclass hit|3,317,002|\r\n|Class#=== deep superclass hit|2,986,606|\r\n|Class#=== miss|3,126,489|\r\n\r\n### Benchmark details:\r\n\r\nPerformed on release versions of Chrome, Safari, and Firefox. These results are from Chrome, but all three browsers had similar results.\r\n\r\n- `Object#is_a?` hit: `object.is_a? Object`\r\n- `Object#is_a?` superclass hit: `string.is_a? Object`\r\n- `Object#is_a?` deep superclass hit: `Class.new(Class.new(Class.new(Class.new))).new.is_a?(Object)` (it doesn't create the subclasses on each iteration, just shown here for clarity).\r\n- `Object#is_a?` miss: `string.is_a? Hash`\r\n\r\nThe structure is the same for `Class#===`, just using i.e. `Object === object` instead.\r\n\r\nYou can see in the commit log that I originally tried setting `klass.$$proto['$$class$' + klass.id]`. That _was_ faster than the current live implementation, but it wasn't this fast for some reason — probably due to having to construct the string — and it failed one of the specs.",
    "head_branch": "optimize-ancestors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209122d6ca63ac8d87ec5d",
    "number": 1589,
    "body": "Added support for named captures, extended mode was properly implemented and moved to runtime, all native flags are supported.\r\n``` sh\r\n$ cat test.rb\r\nr = /\\$(?<dollars>\\d+)\\.(?<cents>\\d+)/mixne\r\nputs r\r\nmd = r.match(\"$3.67\")\r\np md\r\n\r\n$ opal test.rb\r\n(?mix:\\$(?<dollars>\\d+)\\.(?<cents>\\d+))\r\n#<MatchData \"$3.67\" dollars:\"3\" cents:\"67\">\r\n```\r\n\r\nAll regexps are now compiled to `Opal.Regexp.$create(source, flags)` (definitely should be optimized).\r\n\r\nAlso I've merged `bugs/regexp` with `unsupported/regexp` to simplify the development process. Now I feel like ~50% should be moved to `unsupported` - probably these specs should be reviewed :smile: .\r\n\r\nAlso I've tested this PR with [these changes to rubyspec](https://gist.github.com/iliabylich/552b46adbf92cf38d2d19192557942fb) - it passes, so hopefully all those filters will be removed after merging.\r\n\r\nBechmarks:\r\n``` sh\r\n%x{\r\n  for (var i = 0; i < 1000000; i++) {\r\n    var r = #{/\\w/};\r\n  }\r\n}\r\nnode bm_new.js  18,96s user 0,04s system 100% cpu 18,874 total\r\n\r\n%x{\r\n  for (var i = 0; i < 1000000; i++) {\r\n    var r = /\\w/;\r\n  }\r\n}\r\nnode bm_native.js  0,14s user 0,01s system 100% cpu 0,150 total\r\n\r\nr = /\\w/;\r\n%x{\r\n  for (var i = 0; i < 1000000; i++) {\r\n    #{r.match(\"w\")}\r\n  }\r\n}\r\nnode bm_new.js  0,12s user 0,02s system 100% cpu 0,136 total\r\n\r\nr = `/\\w/`;\r\n%x{\r\n  for (var i = 0; i < 1000000; i++) {\r\n    #{r.match(\"w\")}\r\n  }\r\n}\r\nnode bm_native.js  0,13s user 0,01s system 100% cpu 0,138 total\r\n```\r\nCreating regexps through `Opal.Regexp.$create` is very slow, working on simple cases optimization (like `/\\w/`), adding WIP label.\r\n\r\nWith this patch I can compile `uri` with `uri/rfc2396_parser`. It has some string mutation, so after minor changes locally I've got the following:\r\n``` sh\r\n$ cat test.rb\r\nrequire 'uri'\r\n\r\nuri = URI.parse('https://google.com/search?a=b')\r\nputs uri\r\n\r\nputs uri.host\r\nputs uri.port\r\nputs uri.path\r\nputs uri.query\r\n\r\n$ opal -ssocket -I/home/ilyabylich/.rvm/rubies/ruby-2.3.0/lib/ruby/2.3.0/ test.rb\r\nObject freezing is not supported by Opal\r\nhttps://google.com/search?a=b\r\ngoogle.com\r\n443\r\n/search\r\na=b\r\n```",
    "head_branch": "extend-regexps",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209123d6ca63ac8d87ec5e",
    "number": 1587,
    "body": "First step to be able to run the tests suite on AppVeyor #1584 ",
    "head_branch": "issue-1584",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209124d6ca63ac8d87ec5f",
    "number": 1586,
    "body": "Should resolve #1488\r\nIt's working with Phantomjs 2.1.1 on Windows",
    "head_branch": "issue-1488",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Resolves #1488, reading /dev/stdin is not working everywhere"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209125d6ca63ac8d87ec60",
    "number": 1585,
    "body": "",
    "head_branch": "issue-1583",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Resolves #1583, Improves File.join on browser"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209126d6ca63ac8d87ec61",
    "number": 1576,
    "body": "Firstly, sorry if I am using incorrect terms - im a JS dev, so my mental ruby dictionary is lacking.\n\nGiven the following code\n\n``` ruby\nrequire 'opal'\nline = %Q{foo bar baz\none two three\na b c}\n\nline.scan(/(\\w*) (\\w*) (\\w*)/) do |first,second,third|\n  puts \"first up was #{first}\"\n  puts \"second up was #{second}\"\n  puts \"third up was #{third}\"\nend\n```\n\nRuby outptus\n\n```\nfirst up was foo\nsecond up was bar\nthird up was baz\nfirst up was one\nsecond up was two\nthird up was three\nfirst up was a\nsecond up was b\nthird up was c\n```\n\nand Opal outputs\n\n```\nfirst up was foo,bar,baz\nsecond up was \nthird up was \nfirst up was one,two,three\nsecond up was \nthird up was \nfirst up was a,b,c\nsecond up was \nthird up was \n```\n\nThe reason is that d95e59a9c1bb91c2c2c9bc65d9966cb06be03dd7 made the assumption that the callback would only have a single argument, and changed the [`apply` to a `call`](https://github.com/opal/opal/blob/d95e59a9c1bb91c2c2c9bc65d9966cb06be03dd7/opal/corelib/string.rb#L933). The difference between the two in JS is call passes literal arguments (in this case, the actual Array as a single argument), and apply takes an array and passes each item in the array as a separate arg to the callback.\n\nThe solution here is to look at the length of the `block`  function (which represents the number of arguments given to the callback function. If it `== 1`, use `call`, otherwise use `apply`.\n\nThe fix is in this PR, however I am uncertain on where to add a test (since they seem to be the upstream ruby specs) to check for this sort of thing in the future. I did add this test locally however, and it passes\n\n``` ruby\nit \"maps groups over to block arguments\" do\n  a = []\n  b = []\n  \"cruel world\".scan(/(..)(..)/) { |w,g| a << w; b << g }\n  a.should == [\"cr\", \"l \"]\n  b.should == [\"ue\", \"wo\"]\nend\n```\n",
    "head_branch": "string.scan-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209127d6ca63ac8d87ec62",
    "number": 1575,
    "body": "`Module#method_added` and `Module#method_removed` are supported now.\n",
    "head_branch": "method-added-and-removed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove method_added and method_removed from unsupported features (#1575)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209128d6ca63ac8d87ec63",
    "number": 1574,
    "body": "Related to https://github.com/opal/opal.github.io/issues/21 and https://github.com/opal/opal/issues/896\n",
    "head_branch": "unsuported-features-numbers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add Numbers into Unsupported Features (#1574)\n\n* add Numbers into Unsupported Features\r\n\r\nRelated to https://github.com/opal/opal.github.io/issues/21 and https://github.com/opal/opal/issues/896\r\n\r\n* Fix the explanation of Integer and Float difference"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209129d6ca63ac8d87ec64",
    "number": 1573,
    "body": "I found a link to `runtime.js` document broken.\n",
    "head_branch": "fix-link-corelib-readme",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix a link to runtime.js document (#1573)\n\n[skip ci]"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620912ad6ca63ac8d87ec65",
    "number": 1572,
    "body": "JSON.parse and JSON.load raise ParserError when encountering an invalid JSON string.\n\nWhen JavaScripts native JSON.parse fails, re-raise the SyntaxError as\nJSON::ParserError. Class ancestors for ParserError match MRI\nimplementation.\n\nFixes #1545 \n",
    "head_branch": "json-parse-raises",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "JSON#parse raises JSON::ParserError on invalid input (#1572)\n\nJSON.parse and JSON.load raise ParserError when encountering an invalid\r\n- JSON string.\r\n\r\nWhen JavaScripts native JSON.parse fails, re-raise the SyntaxError as\r\nJSON::ParserError. Class ancestors for ParserError match MRI\r\nimplementation."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620912bd6ca63ac8d87ec66",
    "number": 1571,
    "body": "",
    "head_branch": "fix-single-zero-as-octal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix single zero as octal (#1571)\n\n* Interpret \"0\" string as 0, not octal value\r\n* Update changelog with #1549 bugfix entry\r\n\r\nFixes #1549"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620912cd6ca63ac8d87ec67",
    "number": 1570,
    "body": "`native`'s `Hash#new` recursion for arrays didn't Rubify values directly within arrays, only for values of hashes within arrays. This means that the `null` in `{ \"a\": [null] }` would not be converted to `nil` — it would remain `null`.\n\nExplaining data structures in prose is terrible. The spec changes in the diff are so much more expressive than my description here.\n\nThis was actually my bug from when I added this array recursion in the first place.\n\n/cc @catmando\n",
    "head_branch": "hash-new-array-null-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Properly convert `{\"a\":[null]}` to {a: [nil]} (#1570)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620912dd6ca63ac8d87ec68",
    "number": 1569,
    "body": "At least while https://github.com/whitequark/parser/issues/312 is open and unreleased.\n",
    "head_branch": "freeze-parser-version",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Freeze parser version at 2.3.1.2."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620912ed6ca63ac8d87ec69",
    "number": 1568,
    "body": "For example, `opal-repl` command exit by following code.\n\n```\n>> foo=\n```\n\nIt should catch Exception instead of StandardError.\n",
    "head_branch": "fix-repl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Rescue all subtypes of Excepton when eval ruby code (#1568)\n\nIt avoid exiting repl by pase error."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620912fd6ca63ac8d87ec6a",
    "number": 1567,
    "body": "This pull request is for updating compiled code in the document, because the compiled codes in document differ from  real outputs.\nI guess it is not updated from old version.\nI tried to compile the examples in `docs/compiled_ruby.md` with the latest gem version `0.10.2`.\n",
    "head_branch": "fix-compiled-code",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs: Fix compiled code (#1567)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620912fd6ca63ac8d87ec6b",
    "number": 1566,
    "body": "I see the following contents in `docs/compiled_ruby.md`\n\nin section _Strings & Symbols_\n\n```\n<<-EOS            # => \"\\nHello there.\\n\"\nHello there.\nEOS\n```\n\nThis code outputs\n\n```\n \"Hello there.\\n\"\n```\n",
    "head_branch": "fix-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs: Fix wrong output (#1566)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209130d6ca63ac8d87ec6c",
    "number": 1565,
    "body": "Added `Opal::Rubyspec::FiltersRewriter` class that can exclude filtered specs directly from AST. It supports only static specs defined directly with `describe/context/it`, shared examples can't be filtered, we have to deal with them later in runtime.\n\nThis AST rewriter is used only in the test suite.\n\n``` sh\n# Master\n> env rake mspec_ruby_nodejs\nFinished in 69.064000 seconds\n\n1337 files, 12299 examples, 50409 expectations, 0 failures, 0 errors, 3450 tagged\n\n> ruby -rbundler/setup -r/home/ilyabylich/Work/opal/tasks/testing/mspec_special_calls bin/opal -gmspec -Ispec -Ilib -smspec/helpers/tmp -smspec/helpers/environment -smspec/guards/block_device -smspec/guards/endian -sa_file -slib/spec_helper -Rnodejs -Dwarning -A --enable-source-location -c tmp/mspec_nodejs.rb | wc\n 274629 1856378 17611986\n```\n\n``` sh\n# Patch\n> env rake mspec_ruby_nodejs\nFinished in 65.657000 seconds\n\n1337 files, 9968 examples, 50370 expectations, 0 failures, 0 errors, 1152 tagged\n\n> ruby -rbundler/setup -r/home/ilyabylich/Work/opal/tasks/testing/mspec_special_calls bin/opal -gmspec -Ispec -Ilib -smspec/helpers/tmp -smspec/helpers/environment -smspec/guards/block_device -smspec/guards/endian -sa_file -slib/spec_helper -Rnodejs -Dwarning -A --enable-source-location -c tmp/mspec_nodejs.rb | wc\n 242846 1627245 15408252\n```\n\nSpecs that were added to `spec/unsupported` don't have to be wrapped in rubyspec with `not_supported_on :opal` anymore. 22 opal-specific filters (80 in total) can be removed from rubyspec. @eregon @opal/core  Any ideas how to deal with [partially filtered tests](https://github.com/ruby/spec/blob/e8c46ebbf76d860a0dd50a5f45556d3bf7796ec5/core/regexp/shared/new_ascii_8bit.rb#L61-L82) / [shared tests](https://github.com/ruby/spec/blob/d5e21c871decd629d06156aa7a86578b8bdf0138/core/regexp/shared/new_ascii.rb#L25-L41)?\n\nAlso introduced a separate spec filter `opal_unsupported_filter` - we need to split specs into failing/unsupported groups to support `INVERT_RUNNING_MODE` option. When it's passed, we compile `all - unsupported`, when it's not passed - we compile `all - bugs - unsupported`.\n\nAlso getting less warnings during rubyspec compilation :smile: \n",
    "head_branch": "do-not-compile-failing-unsupported-or-uncompilable-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Do not compile failing and unsupported tests. (#1565)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209131d6ca63ac8d87ec6d",
    "number": 1564,
    "body": "",
    "head_branch": "update-rubyspecs-and-fix-1563",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update rubyspecs and fix #1563. (#1564)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209132d6ca63ac8d87ec6e",
    "number": 1561,
    "body": "Fixes #1280 \nFixes #681\n",
    "head_branch": "rescue-js-error",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added JS::Error class that can handle any JS errors in rescue. (#1561)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209133d6ca63ac8d87ec6f",
    "number": 1560,
    "body": "- `Method#source_location` is available only when --enable-source-location/enable_source_location = true option specified.\n- `Method#comments` is available only when --parse-comments/parse_comments = true specified.\n\nBoth of them are disabled by default.\n\n```\n$ cat -n test.rb\n     1  # Does \"something\"\n     2  # and something 'else'\n     3  def m\n     4  end\n     5  \n     6  p method(:m).source_location\n     7  p method(:m).comments\n     8  \n     9  class Foo\n    10    # Instance method\n    11    # that does the following:\n    12    #\n    13    def m\n    14    end\n    15  end\n    16  \n    17  p Foo.instance_method(:m).source_location\n    18  p Foo.instance_method(:m).comments\n\n$ opal --parse-comments --enable-source-location test.rb\n[\"test.rb\", 3]\n[\"# Does \\\"something\\\"\", \"# and something 'else'\"]\n[\"test.rb\", 13]\n[\"# Instance method\", \"# that does the following:\", \"#\"]\n```\n",
    "head_branch": "add-method-source-location",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1560 from iliabylich/add-method-source-location\n\nAdd Method#source_location and Method#comments"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209134d6ca63ac8d87ec70",
    "number": 1559,
    "body": "No more deprecations on Sprockets 3.7+ \\o/\n\nFixes #1555\n",
    "head_branch": "elia/0-10/sprockets",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209135d6ca63ac8d87ec71",
    "number": 1558,
    "body": "This replaces a function wrapper with a bound version of the same function, which AFAIK inherits optimizations from the original. \n\nI don't think the fact that the previous version leaked an `arguments` object had much effect on performance in this scenario. Calling `foo(&method(:bar))` only ever executed that function once, so optimization couldn't happen anyway. I think most of the performance difference here is from inheriting previous optimizations.\n\nBenchmark:\n\n``` ruby\nMeasurement.new('Method#to_proc', &method(:noop))\n```\n\nResults in iterations per second:\n\nSafari 10: 3.3M up from 2.26M (46% faster)\nChrome 53: 1.36M up from 925K (47% faster)\nFirefox 48: 1.6M up from 483K (231% faster)\n",
    "head_branch": "optimize-method-to_proc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Replace method wrapper with simple bound function"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209136d6ca63ac8d87ec72",
    "number": 1557,
    "body": "The current implementations of String#unpack and Array#pack don't take surrogate pairs into consideration. This PR is an attempt to add support for them. (Just before submitting I realized my method and variable names are supposed to be snake_cased. I'll try to fix them this weekend).\n\nI believe this work should be part of a wider effort to support UTF-safe string operations in Opal-generated code, but I don't really know where to start or whether such an effort would be well-received by the Opal maintainers and community. I did a little Google searching but couldn't find a comprehensive Javascript library for doing this, so I wrote [utfstring](https://github.com/camertron/utfstring). I think much of its functionality could be incorporated into Opal. Please let me know what you think!\n",
    "head_branch": "unicode_pack_unpack",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209137d6ca63ac8d87ec73",
    "number": 1556,
    "body": "Closes #1499 \nCloses #1181\nCloses #1176\nCloses #1173 \n\nExample from #1499 (by @catmando):\nMRI:\n\n```\ndefining method breaker block = #<Proc:0x000000016ae040@test.rb:17>\ndefining method doit block = #<Proc:0x000000016ad500@test.rb:24>\ndefining method breaker block = #<Proc:0x000000016abdb8@test.rb:17>\ndefining method doit2 block = #<Proc:0x000000016ab8e0@test.rb:32>\ncalling doit: object = #<BreakFoo:0x000000016ae748> block = #<Proc:0x000000016ad500@test.rb:24>\nanother block\ncalling doit2: object = #<BreakFoo:0x000000016ac510> block = #<Proc:0x000000016ab8e0@test.rb:32>\nworking block\n```\n\nOpal:\n\n```\ndefining method breaker block = function (){var self = TMP_4.$$s || this;\n\n        return self.$puts(\"say hi\")}\ndefining method doit block = function (){var self = TMP_Baz_6.$$s || this;\n\n    return self.$puts(\"another block\")}\ndefining method breaker block = function (){var self = TMP_4.$$s || this;\n\n        return self.$puts(\"say hi\")}\ndefining method doit2 block = function (){var self = TMP_Works_7.$$s || this;\n\n    return self.$puts(\"working block\")}\ncalling doit: object = #<BreakFoo:0x120> block = function (){var self = TMP_Baz_6.$$s || this;\n\n    return self.$puts(\"another block\")}\nanother block\ncalling doit2: object = #<BreakFoo:0x126> block = function (){var self = TMP_Works_7.$$s || this;\n\n    return self.$puts(\"working block\")}\nworking block\n```\n\nExample from https://github.com/opal/opal/issues/1499#issuecomment-232087091 :\nMRI\n\n```\nfalse\n1\nfalse\n2\n```\n\nOpal\n\n```\nfalse\n1\nfalse\n2\n```\n\nThe idea is to evaluate method arguments _before_ assigning `$$p` property on the method body (this PR fixes a spec `A method call evaluates block pass after arguments`).\n\nMethod calls without splats and blocks are getting compiled as usually (i.e. `obj.$method(a,b,c)`)\n\nThere are 53 failing tests in `spec/lib/compiler/call_spec.rb`, will fix them after :+1:\n",
    "head_branch": "fix-1499",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Evaluate dynamic method args before assigning block to the method body using 'Opal.send'. (#1556)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209138d6ca63ac8d87ec74",
    "number": 1551,
    "body": "Also adds tests for Node.js on File.new and File.mtime\n",
    "head_branch": "issue-1550",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Define the default open mode on the File constructor (#1551)\n\nAlso adds tests for Node.js on File.new and File.mtime\r\nResolves #1550"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209139d6ca63ac8d87ec75",
    "number": 1547,
    "body": "See https://github.com/opal/opal/issues/1544#issuecomment-237986980 \nAnd https://github.com/opal/opal/commit/7376601046eca403899deef7a9f07fa345014fdc\n\ncc @iliabylich @Mogztter \n",
    "head_branch": "broken-spec-issue-1544",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620913ad6ca63ac8d87ec76",
    "number": 1546,
    "body": "Partially rework the module system and add support for `Module#prepend`\n",
    "head_branch": "elia/prepend",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620913bd6ca63ac8d87ec77",
    "number": 1543,
    "body": "This should allow for a more complete matrix of compatibility between opal and sprockets.\n\n`opal-sprockets` should live as the glue between the two and will probably see a release each time support for one or the other is updated. `opal-rails` will depend on `opal-sprockets` so no change is expected for Rails users.\n\nPros:\n- allow opal to improve compiler independently from sprockets\n- less gem dependencies\n- opening for opal-webpack, etc.\n\nCons:\n- 2 gems to release instead of 1 (but more focused releases)\n",
    "head_branch": "elia/extract-sprockets",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1543 from opal/elia/extract-sprockets\n\nextract sprockets to opal-sprockets gem"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620913cd6ca63ac8d87ec78",
    "number": 1540,
    "body": "Modified random-based core methods to use `Random`:\n\n``` sh\nopal-repl\n>> srand(10); 1.upto(10).to_a.shuffle\n=> [4, 1, 2, 3, 7, 8, 6, 5, 9, 10]\n>> srand(10); 1.upto(10).to_a.shuffle\n=> [4, 1, 2, 3, 7, 8, 6, 5, 9, 10]\n>> srand(20); 1.upto(10).to_a.shuffle\n=> [1, 6, 8, 5, 7, 4, 10, 2, 3, 9]\n>> srand(20); 1.upto(10).to_a.shuffle\n=> [1, 6, 8, 5, 7, 4, 10, 2, 3, 9]\n```\n",
    "head_branch": "add-random",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1540 from iliabylich/add-random\n\nAdd Random class with seed support."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620913dd6ca63ac8d87ec79",
    "number": 1538,
    "body": "Closes #1536\n\nThe idea of this PR is to run every file in a separate environment, so dynamically defined methods will not conflict. This can be achieved using a default MSpec behavior. In fact, this PR doesn't introduce any new mechanism.\n- it uses `MSpec.register_files` to populate MSpec's configuration.\n- it uses `MSpec.files` to run every single file in it's own environment\n- `MSpec.files` dynamically loads every file, which is not allowed by Opal. To make it working added `requirable_spec_file` special call (available only in the MSpec test suite) that explicitly adds passed filepath to compiler's list of required files. By doing this we can automatically inject spec's code to the generated file and require it later (when MSpec needs it).\n\nNew `mspec_nodejs.rb` looks like:\n\n``` ruby\nrequire 'spec_helper'\nrequire 'opal/full'\n\n# ... conditionally injected code for benchmarks ...\n\nrequire 'filters/unsupported/...'\n# ... other files from 'unsupported' and 'bugs' directories ...\n\nrequirable_spec_file 'ruby/language/lambda_spec.rb'\n# ... other files from rubyspec/opal suite ...\n\nMSpec.register_files [\n  'ruby/language/lambda_spec.rb',\n  # ... other files from rubyspec/opal suite ...\n]\n\nOSpecRunner.main.start_suite\nOSpecFilter.main.unused_filters_message(list: false)\nOSpecRunner.main.did_finish\nexit MSpec.exit_code\n```\n\n@eregon Is it closer to how it should be? :smile: \n@Mogztter This branch is in the Opal's repo. Could you test it please?\n",
    "head_branch": "iliabylich/fix-1536",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1538 from opal/iliabylich/fix-1536\n\nMSpec intergation: run every spec file in a separate environment to avoid potential conflicts."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620913dd6ca63ac8d87ec7a",
    "number": 1537,
    "body": "Currently tests are sharing a global state `@env`.\nSorting specs files is important to make errors reproducible by everyone.\n\nRef #1536\n",
    "head_branch": "consistent-specs-ordering",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Sort specs files to be consistent (#1537)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620913ed6ca63ac8d87ec7b",
    "number": 1535,
    "body": "- Extracted `.JS.` syntax detection and `BlockNode` to separate AST rewriters\n- Fixed returning value of `a[b] = c, d`\n\nfixes #1520 \n",
    "head_branch": "add-dot-js-syntax-rewriter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1535 from iliabylich/add-dot-js-syntax-rewriter\n\nFix #1520"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620913fd6ca63ac8d87ec7c",
    "number": 1534,
    "body": "Fixes issue #1476 \n",
    "head_branch": "0-10-stable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Back port 1e3ccbb5420d50a052b81277aafcdc27445d46a2 from Opal master (#1534)\n\nModule inheritance"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209140d6ca63ac8d87ec7d",
    "number": 1533,
    "body": "",
    "head_branch": "update-rubyspec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update rubyspec. (#1533)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209141d6ca63ac8d87ec7e",
    "number": 1532,
    "body": "@eregon Rubyspec doesn't have any specs for a safe navigator, right? [This issue](https://github.com/ruby/spec/issues/175) says that its WIP. I've added some specs in this PR, should I send also a PR to ruby/spec?\n\n@opal/core Two questions:\n- Currently safe navigator handles only `nil`. Is it a good idea to handle also `undefined` and `null`?\n- Do we need a support for `.JS.` syntax? And how it may look like? `.JS&.js_method` ?\n",
    "head_branch": "add-support-for-a-safe-navigator",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add safe navigator support. (#1532)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209142d6ca63ac8d87ec7f",
    "number": 1531,
    "body": "",
    "head_branch": "extract-replacing-reserver-js-words-to-a-separate-rewriter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Extacted detecting reserved JS var names and props to a separate AST rewriter. (#1531)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209143d6ca63ac8d87ec80",
    "number": 1530,
    "body": "Closes #1476\n",
    "head_branch": "fix-inheritance-from-the-module-class",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed inherirance from Module class. (#1530)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209144d6ca63ac8d87ec81",
    "number": 1529,
    "body": "",
    "head_branch": "fix-constant-lookup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add ruby/language/constants_spec to the test suite. (#1529)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209145d6ca63ac8d87ec82",
    "number": 1528,
    "body": "Partially closes #1520\nCompletely closes #1518\n",
    "head_branch": "fix-method-writers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1528 from iliabylich/fix-method-writers\n\nFix returning value of method writers. Fix value of begin-rescue-else-ensure-end"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209146d6ca63ac8d87ec83",
    "number": 1527,
    "body": "",
    "head_branch": "opal_rspec_build",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add opal-rspec smoke test to aid in finding rubyspec coverage gaps (#1527)\n\n* Add opal-rspec smoke test to aid in finding rubyspec coverage gaps\r\n\r\n* Caching might be creating this, so look for git specifically\r\n\r\n* continue working around directory/cache issues"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209147d6ca63ac8d87ec84",
    "number": 1525,
    "body": "Following the docs and couldn't the In a Browser example working without creating a fake env `sprockets_env = Opal::RSpec::SprocketsEnvironment.new` first.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "update browser opal-rspec example (#1525)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209148d6ca63ac8d87ec85",
    "number": 1523,
    "body": "Fixes #1521 and trying to end thread on #1510 \n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Throw error when lib_only and no libraries (#1523)\n\n* Throw error when lib_only and no libraries\r\n\r\n* Fix RSpec tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209149d6ca63ac8d87ec86",
    "number": 1519,
    "body": "Update to latest ruby specs which test for this\nWasn't broken for blocks, only methods\nExclude new ruby specs that fail\n\nhttps://github.com/opal/opal/issues/1518\n",
    "head_branch": "else_return_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620914ad6ca63ac8d87ec87",
    "number": 1516,
    "body": "",
    "head_branch": "remove-taint-and-freeze-from-rubyspec-filters",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1516 from iliabylich/remove-taint-and-freeze-from-rubyspec-filters\n\nMove rubyspec taint/freeze/privacy filters from bugs to unsupported"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620914bd6ca63ac8d87ec88",
    "number": 1515,
    "body": "Reincarnation of https://github.com/opal/opal/pull/1128 :smile: + fix for `alias :dynamic_symbol` + minor refactoring of `Compiler#returns`\nCloses #1127\nCloses #1128 \n",
    "head_branch": "fix-undef-with-dynamic-symbols",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow passing dynamic symbols to undef/alias. (#1515)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620914bd6ca63ac8d87ec89",
    "number": 1514,
    "body": "If an array is empty, we know `any?` cannot possibly return true. Otherwise, fall back to the `Enumerable` implementation of the method.\n\nThis is an optimization made [within MRI](http://ruby-doc.org/core-2.3.1/Array.html#method-i-any-3F) as well. It's functionally correct without it, but this is quite a bit faster for empty arrays since [early method returns within blocks aren't cheap](https://github.com/opal/opal/blob/59e7a48f5b6d62b26a7f4b3c6d284aee751b2c3b/opal/corelib/runtime.js#L1239).\n",
    "head_branch": "optimize-array-any",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimize Array#any? for an empty array (#1514)\n\nIf an array is empty, we know `any?` cannot possibly return false.\r\nOtherwise, fall back to the `Enumerable` implementation of the method."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620914cd6ca63ac8d87ec8a",
    "number": 1513,
    "body": "Rather than looking up the ancestor chain with Ruby, might as well utilize the browser's native prototype chain, which is a lot faster.\n",
    "head_branch": "optimize-hash-merge-type-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimize Hash#merge! type check (#1513)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620914dd6ca63ac8d87ec8b",
    "number": 1512,
    "body": "",
    "head_branch": "improve-numeric-step",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improved Numeric#step. (#1512)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620914ed6ca63ac8d87ec8c",
    "number": 1511,
    "body": "fixes #1510\n",
    "head_branch": "elia/lib-only-option-fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix CLI -L option that was unusable (#1511)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620914fd6ca63ac8d87ec8d",
    "number": 1507,
    "body": "#1505\n",
    "head_branch": "mangling",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209150d6ca63ac8d87ec8e",
    "number": 1506,
    "body": "start of a file open implementation for node.\n",
    "head_branch": "fopen",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209151d6ca63ac8d87ec8f",
    "number": 1504,
    "body": "changes to core lib to remove js2coffee warnings.\n",
    "head_branch": "coffeescript",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209152d6ca63ac8d87ec90",
    "number": 1502,
    "body": "This patch, and I don't expect it to be merged, contains the start of adding source lines to the output js that can be interpreted by emacs in ruby build mode as ruby eror logs\n\n   Level: source:line:column at blah\n\nthis will help you understand where the code comes from. Next step is to create a map of the short names to the full path names and emit the absolute file names.\n",
    "head_branch": "source_lines",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209153d6ca63ac8d87ec91",
    "number": 1501,
    "body": "Added new methods:\n- Array#bsearch_index\n- Array#dig\n- Enumerable#chunk_while\n- Enumerable#grep_v\n- Enumerable#slice_after\n- Enumerable#slice_when\n- Hash#>\n- Hash#<\n- Hash#>=\n- Hash#>=\n- Hash#dig\n- Hash#fetch_values\n- Hash#to_proc\n- Struct#dig\n\nChanged to be 2.3 compliant:\n- Enumerable#chunk (to take only a a block)\n- Enumerable#slice_before (to raise proper argument errors)\n- Number#positive? (to return false for 0)\n\nFixed:\n- Kernel#loop (to catch StopIteration error)\n",
    "head_branch": "migrate-to-ruby-2.3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Migrate parser to 2.3. Bump RUBY_VERSION to 2.3.0. (#1501)\n\nAdded new methods:\r\n  * Array#bsearch_index\r\n  * Array#dig\r\n  * Enumerable#chunk_while\r\n  * Enumerable#grep_v\r\n  * Enumerable#slice_after\r\n  * Enumerable#slice_when\r\n  * Hash#>\r\n  * Hash#<\r\n  * Hash#>=\r\n  * Hash#>=\r\n  * Hash#dig\r\n  * Hash#fetch_values\r\n  * Hash#to_proc\r\n  * Struct#dig\r\n\r\nChanged to be 2.3 compliant:\r\n  * Enumerable#chunk (to take only a a block)\r\n  * Enumerable#slice_before (to raise proper argument errors)\r\n  * Number#positive? (to return false for 0)\r\n\r\nFixed:\r\n  * Kernel#loop (to catch StopIteration error)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209154d6ca63ac8d87ec92",
    "number": 1498,
    "body": "https://github.com/opal/opal/issues/1493\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209155d6ca63ac8d87ec93",
    "number": 1497,
    "body": "Extracted `Compiler#has_break!/#has_break?` to a separate class + minor refactoring.\n",
    "head_branch": "break-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Minor break fixes. (#1497)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209156d6ca63ac8d87ec94",
    "number": 1495,
    "body": "Follow-up  #1456\n\nThis is (hopefully) the proof that Regexp escaping is not fully working.\nWith the current implementation the following specs must fail:\n- Regexp#inspect correctly escapes forward slashes /\n- Regexp#inspect escapes 2 slashes in a row properly\n",
    "head_branch": "issue-1455",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209156d6ca63ac8d87ec95",
    "number": 1489,
    "body": "spelnig\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update faq.md (#1489)\n\nspelnig\r\n\r\n[skip ci]"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209157d6ca63ac8d87ec96",
    "number": 1487,
    "body": "",
    "head_branch": "add-support-for-complex-and-rational-number-literals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added support for complex and rational number literals. (#1487)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209158d6ca63ac8d87ec97",
    "number": 1486,
    "body": "I needed working `Range#step`, but since I was already hacking it I did a bunch of other methods as well.\nIt's still quite short of fully compliant `Range` (which has a ton of special cases for `Float`s and arbitrary objects, not just `Integer`s this implementation quietly assumes half of the time), but a lot of issues got fixed.\n- a few things which will never work (tainted/untrusted/private) moved from bugs to unsupported\n- `Range#hash` returning `Fixnum` bug added, as it was masked by `Range#hash` not existing\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improvements for Range class (#1486)\n\n* private/tainted/untrusted are not supported\r\n* Conforming Range#to_s and Range#inspect\r\n* Starting Range#bsearch implementation\r\n* Simple Range#step implementation\r\n* Fixing Range#min for empty Ranges\r\n* Fixing Range#last(n) Range#first(n) and one edge case of Range#each\r\n* Fixing some Range#step issues on String ranges\r\n* Simple Range#bsearch implementation, passes about half the specs\r\n* Assorted Range fixes\r\n* Consistent raise syntax\r\n* Minor syntax fixes\r\n* Minor styling improvements. Fixed size of Range#step.\r\n* Compile complex ranges to \"Range.new\" so there will be a check for begin and end to be comparable."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209159d6ca63ac8d87ec98",
    "number": 1485,
    "body": "I definitely should add `if (const != null)` to `Module#const_get` :smile: Resolving `false` constants through `const_get` doesn't work in this branch, will send an updated tomorrow.\n",
    "head_branch": "improvements-to-defined",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improved \"defined?\" implementation. (#1485)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620915ad6ca63ac8d87ec99",
    "number": 1484,
    "body": "The following methods are 100% compliant with rubyspec:\n- Module#class_variables\n- Module#class_variable_get\n- Module#class_variable_set\n- Module#remove_class_variable\n",
    "head_branch": "fix-class-variables-implementation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1484 from iliabylich/fix-class-variables-implementation\n\nFix implementation of class variables."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620915bd6ca63ac8d87ec9a",
    "number": 1483,
    "body": "",
    "head_branch": "extract-if-ruby-engine-check-to-rewriter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Extacted RUBY_ENGINE/RUBY_PLATFORM ==/!= 'opal' checks to a separate AST rewriter. (#1483)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620915cd6ca63ac8d87ec9b",
    "number": 1482,
    "body": "",
    "head_branch": "cleanup-rubyspec-filters",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1482 from iliabylich/cleanup-rubyspec-filters\n\nCleanup rubyspec filters."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620915dd6ca63ac8d87ec9c",
    "number": 1481,
    "body": "It was calling `Kernel#respond_to?`, which doesn't come with opal/mini. Instead, that call needs to use the lower-level implementation of that method.\n\nThings to fix:\n- [ ] All calls to `Object#respond_to?` in `runtime.js`\n- [ ] Calls to `puts` (`$stdout` is `nil` with `opal/mini`, which makes `Object#puts` recurse infinitely)\n- [ ] Don't break the build\n",
    "head_branch": "opal-mini-runtime",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620915ed6ca63ac8d87ec9d",
    "number": 1480,
    "body": "",
    "head_branch": "update-rubyspecs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1480 from iliabylich/update-rubyspecs\n\nUpdate rubyspecs."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620915fd6ca63ac8d87ec9e",
    "number": 1479,
    "body": "Sending a PR to master with the same fix.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixes Native Hash#initialize to accept null too (#1479)\n\nBringing fix from 0.9-stable that changes Native Hash initialize to check for null instead of undefined. (#1479)\r\n\r\nref https://github.com/opal/opal/pull/1474"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209160d6ca63ac8d87ec9f",
    "number": 1478,
    "body": "Fixes all the call_specs and removed filters for range min/max since those pass now too. By all means do a code review since there might be better ways to do some of this.\n\nBesides the scope.rb change:\n- Removed semicolons from call_spec for less brittle specs and to focus more on real failures\n- Take advantage of `extract_iter` inheritance from call.rb and utilize that properly for the zsuper case\n- zsuper's `@arguments_without_block = []` else clause was not being used anymore since that was all removed, so clean that up\n",
    "head_branch": "iliabylich/replace-opal-parser-with-parser-gem",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1478 from wied03/iliabylich/replace-opal-parser-with-parser-gem\n\nsuper fixes for replace-opal-parser branch"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209161d6ca63ac8d87eca0",
    "number": 1474,
    "body": "Currently in 0.9 when using alongside React.rb, component rendering will break and return this error\n\n``` js\nTypeError: Cannot read property 'constructor' of null\n```\n\nThis traces back to the Native Hash initialize method\n\n``` ruby\ndef initialize(defaults = undefined, &block)\n  %x{\n    if (defaults !== undefined && defaults.constructor === Object) {\n```\n\nIn the current 0.8, this method checks\n\n``` ruby\ndef initialize(defaults = undefined, &block)\n  %x{\n    if (defaults != null) {\n      if (defaults.constructor === Object) {\n```\n\nI'm not sure exactly why it was changed, but changing it to\n\n``` ruby\ndef initialize(defaults = undefined, &block)\n  %x{\n    if (defaults !== undefined && defaults != null && defaults.constructor === Object) {\n```\n\nappears to fix it and allows me to go on with life.\n",
    "head_branch": "0-9-stable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixes Native Hash#initialize to accept null too (#1474)\n\n* Fixes Native Hash initialize to work with React.rb\r\n\r\n* refactors Native Hash initialize to check if defaults != null to catch both undefined and null"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209162d6ca63ac8d87eca1",
    "number": 1473,
    "body": "One of the most common uses of `Enumerable#count` is as an alias for `length` or `size`. Without a block or argument, we can short-circuit this to `size`. I also switched out the passing of `arguments` to `Opal.yieldX` so the function could be optimized.\n\nI broke some tests for what looks like the more obscure cases, so I'll need to check into that, but it seems to work for the more common cases.\n\nAll benchmarks are iterations/sec after a 100ms warmup. The array has 1000 elements. Higher results are better. I included `Array#size` to show the performance ceiling.\n### Safari 9.1.2\n#### Before\n\n```\narray.size\n  1779658\narray.count\n  4931\narray.count(1)\n  1958\narray.count(&:odd?)\n  480\narray.count { |i| i.odd? }\n  2042\n```\n#### After\n\n```\narray.size\n  1546681\narray.count\n  1471198\narray.count(1)\n  2873\narray.count(&:odd?)\n  464\narray.count { |i| i.odd? }\n  2572\n```\n### Chrome 51\n#### Before\n\n```\narray.size\n  3197569\narray.count\n  3905\narray.count(1)\n  2087\narray.count(&:odd?)\n  397\narray.count { |i| i.odd? }\n  1868\n```\n#### After\n\n```\narray.size\n  2191544\narray.count\n  2100559\narray.count(1)\n  3324\narray.count(&:odd?)\n  567\narray.count { |i| i.odd? }\n  3134\n```\n### Firefox 43\n#### Before\n\n```\n    array.size\n        1642654\n    array.count\n        1333\n    array.count(1)\n        693\n    array.count(&:odd?)\n        359\n    array.count { |i| i.odd? }\n        840\n```\n#### After\n\n```\n    array.size\n        1840939\n    array.count\n        1434968\n    array.count(1)\n        1929\n    array.count(&:odd?)\n        458\n    array.count { |i| i.odd? }\n        1933\n```\n",
    "head_branch": "optimize-enumerable-count",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimize Enumerable#count (#1473)\n\nOne of the most common uses of `Enumerable#count` is as an alias for `length` or `size`. Without a block or argument, we can short-circuit this to `size`. I also switched out the passing of `arguments` to `Opal.yieldX` so the function could be optimized.\r\n\r\nI broke some tests for what looks like the more obscure cases, so I'll need to check into that, but it seems to work for the more common cases.\r\n\r\nAll benchmarks are iterations/sec after a 100ms warmup. The array has 1000 elements. Higher results are better. I included `Array#size` to show the performance ceiling.\r\n\r\n### Safari 9.1.2\r\n\r\n#### Before\r\n\r\n```\r\narray.size\r\n  1779658\r\narray.count\r\n  4931\r\narray.count(1)\r\n  1958\r\narray.count(&:odd?)\r\n  480\r\narray.count { |i| i.odd? }\r\n  2042\r\n```\r\n\r\n#### After\r\n\r\n```\r\narray.size\r\n  1546681\r\narray.count\r\n  1471198\r\narray.count(1)\r\n  2873\r\narray.count(&:odd?)\r\n  464\r\narray.count { |i| i.odd? }\r\n  2572\r\n```\r\n\r\n### Chrome 51\r\n\r\n#### Before\r\n\r\n```\r\narray.size\r\n  3197569\r\narray.count\r\n  3905\r\narray.count(1)\r\n  2087\r\narray.count(&:odd?)\r\n  397\r\narray.count { |i| i.odd? }\r\n  1868\r\n```\r\n\r\n#### After\r\n\r\n```\r\narray.size\r\n  2191544\r\narray.count\r\n  2100559\r\narray.count(1)\r\n  3324\r\narray.count(&:odd?)\r\n  567\r\narray.count { |i| i.odd? }\r\n  3134\r\n```\r\n\r\n### Firefox 43\r\n\r\n#### Before\r\n\r\n```\r\n    array.size\r\n        1642654\r\n    array.count\r\n        1333\r\n    array.count(1)\r\n        693\r\n    array.count(&:odd?)\r\n        359\r\n    array.count { |i| i.odd? }\r\n        840\r\n```\r\n\r\n#### After\r\n\r\n```\r\n    array.size\r\n        1840939\r\n    array.count\r\n        1434968\r\n    array.count(1)\r\n        1929\r\n    array.count(&:odd?)\r\n        458\r\n    array.count { |i| i.odd? }\r\n        1933\r\n```\r\n\r\n---\r\n\r\nI noticed as I iterated on this that it started to resemble an idiomatic Ruby method post-compile, so I went ahead and ported it. No performance was lost.\r\n\r\nJS:\r\n![screen shot 2016-05-31 at 10 49 44 pm](https://cloud.githubusercontent.com/assets/108205/15696828/451cd2da-2782-11e6-9fb5-2ae0d04ce7be.png)\r\n\r\nRuby:\r\n![screen shot 2016-05-31 at 10 49 55 pm](https://cloud.githubusercontent.com/assets/108205/15696829/4a293426-2782-11e6-9c69-5fee634383c2.png)\r\n\r\nHigher iteration counts in a couple of those is due to longer dry runs to fully invoke the optimizer.\r\n\r\n---\r\n\r\nThe Journey:\r\n\r\n* Optimize Enumerable#count\r\n\r\n* Short-circuit Enumerable#count w/o block or arg\r\n\r\n* Only delegate to size for arrays\r\n\r\nI forgot, not all enumerables have a size method\r\n\r\n* Remove duck-typing check\r\n\r\nThis is directly on the array now. An array knows what it responds to\r\nalready.\r\n\r\n* Revert to defaulting to undefined\r\n\r\nnil is a perfectly acceptable value. I forgot.\r\n\r\n* Account for multiple args yielded to Enum#count\r\n\r\n* Convert Enumerable#count to Ruby\r\n\r\nThis should be fine and go just about as fast.\r\n\r\n* Fix destructuring and block calling\r\n\r\nTurns out `yieldX` is faster than `block.call`. Weird."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209163d6ca63ac8d87eca2",
    "number": 1472,
    "body": "This allows to make certain assumptions and possibly provide a native\nimplementation instead of going through the complete call process.\n\nAn example is showed for improving `Array#dup` performance.\n\nfixes #1459\n",
    "head_branch": "elia/pristine-methods-support",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1472 from opal/elia/pristine-methods-support\n\nAllow methods to be marked as pristine from corelib"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209164d6ca63ac8d87eca3",
    "number": 1469,
    "body": "rename opal variable to win - window was causing error\n",
    "head_branch": "fix_native_doc_example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1469 from roupen/fix_native_doc_example\n\nOpal Compiled Ruby docs fix example in Native section\r\n\r\n[skip ci]"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209165d6ca63ac8d87eca4",
    "number": 1467,
    "body": "@iliabylich Basic sourcemaps support\n\ncc #1465 #1235 \n",
    "head_branch": "elia/replace-opal-parser-with-parser-gem",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove warning"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209166d6ca63ac8d87eca5",
    "number": 1465,
    "body": "AST, Parser and MSpec are compilable and runnable.\n\n``` sh\n$ opal -gast -gparser -e \"require 'opal-parser'; p eval('123')\"\nObject freezing is not supported by Opal\n123\n```\n\nRemoved unused nodes.\nAdded missing nodes :smile: \n",
    "head_branch": "iliabylich/replace-opal-parser-with-parser-gem",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Removed self-written lexer/parser. (#1465)\n\nUse parser/ast to convert source code to AST.\r\nRewritten opal nodes to match parser's structure."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209167d6ca63ac8d87eca6",
    "number": 1464,
    "body": "",
    "head_branch": "file-mtime",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement `File.new(\"path\").mtime`, `File.mtime(\"path\")`, `File.stat(\"path\").mtime` (#1464)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209167d6ca63ac8d87eca7",
    "number": 1462,
    "body": "",
    "head_branch": "small-date-improvements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Small Date improvements."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209168d6ca63ac8d87eca8",
    "number": 1460,
    "body": "",
    "head_branch": "fix-arity-check-for-methods-created-with-define_method",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix method arity for methods created with Module#define_method. (#1460)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209169d6ca63ac8d87eca9",
    "number": 1458,
    "body": "Resolves #1457\n",
    "head_branch": "issue-1457",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use unsupported_features_severity config to handle unsupported features in nodejs/file (#1458)\n\nFixes #1457"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620916ad6ca63ac8d87ecaa",
    "number": 1456,
    "body": "Resolves #1455 \n",
    "head_branch": "regexp-escape",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Escape front slash in Regexp (#1456)\n\nResolves #1455"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620916bd6ca63ac8d87ecab",
    "number": 1454,
    "body": "Replicate MRI behavior, probably needs some discussion before squashing.\n\nShould fix https://github.com/opal/opal/issues/1286 - see discussion there\n\nThis approach avoids adding the current directory to the load path (which would be incompatible with MRI) and it also scrubs the \"..\" and \".\" references out of `Opal.modules` and `self.$require` calls.\n\nThe main remaining issue is there are a few bugs in Pathname that prevent the compiler_spec changes here from running under Opal (as in bootstrap compiling) and thus the filter. One of those bugs is fixed by https://github.com/opal/opal/pull/1445 but there are others.\n\n**Alternative approach:**\nAdd the current directory to the load path, but ignore it unless '..' or '.' is used in the require statement. You'd still need to clean up `Opal.modules` and `self.$require` though and you'd probably do just as much if not more Hike hacking than what's done here.\n",
    "head_branch": "require_from_cur_dir",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620916cd6ca63ac8d87ecac",
    "number": 1453,
    "body": "(can catch some things ruby specs do not test yet).\n\nAlso remove the minitest task since all it did was call the CRuby tests.\nThis way it's more clear in Travis what's going on.\n",
    "head_branch": "enable_cruby",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Enable CRuby tests again (#1453)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620916dd6ca63ac8d87ecad",
    "number": 1452,
    "body": "This made it a lot easier to debug https://github.com/opal/opal/pull/1451\n\nRubyspecs are https://github.com/ruby/spec/pull/246\n",
    "head_branch": "class_name",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620916ed6ca63ac8d87ecae",
    "number": 1451,
    "body": "When a singleton class for a module is used, don't traverse the class hierarchy\n\nhttps://github.com/ruby/spec/pull/245 should cover this one fairly well (and Opal will pass all of them when it's merged)\n\nFixes https://github.com/opal/opal/issues/1449\n",
    "head_branch": "ancestor_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620916fd6ca63ac8d87ecaf",
    "number": 1450,
    "body": "The Ruby `break` keyword calls `Opal.new_brk`, which is very, very slow. In many cases, there is a much more performant way to do it. In the case of short-circuiting `Enumerable` methods, it's just a matter of returning.\n\nAfter talking to @wied03 about the performance of `opal-rspec`, I ran a profile of 1k empty specs. It took over 8 seconds:\n\n![screen shot 2016-04-20 at 9 10 32 pm](https://cloud.githubusercontent.com/assets/108205/14695882/2a8c04a8-0744-11e6-9907-2ff174bb479d.png)\n\nWell over half of that runtime was spent in `Opal.new_brk`. Considering that profiler run also includes the load time of RSpec into the VM, I figured it might actually be more. Updating the `Enumerable` methods not to use `break` gave that a 4x performance boost:\n\n![screen shot 2016-04-20 at 10 00 39 pm](https://cloud.githubusercontent.com/assets/108205/14695904/6e34ee40-0744-11e6-975a-dcd253443372.png)\n\nImproving `Enumerable` performance will have massive effects throughout the entire runtime. For example, compare the [individual build line run times of this branch](https://travis-ci.org/jgaskins/opal/builds/124638214) vs [current master builds](https://travis-ci.org/opal/opal/builds/124520964).\n",
    "head_branch": "remove-breaks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove breaks from Enumerable methods (#1450)\n\nThe break keyword calls Opal.new_brk in JS, which is very, very slow. In\r\nmany cases, there is a much more performant way to do it."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209170d6ca63ac8d87ecb0",
    "number": 1447,
    "body": "",
    "head_branch": "fix-lambda-as-a-default-value-of-lambda-argument",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix parsing of `->( a = ->(){} ) {}` and `-> (a = -> do end) do end`. (#1447)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209171d6ca63ac8d87ecb1",
    "number": 1446,
    "body": "Also changed `lamda` to `proc` in a few places in core/std -lib.\n\nThis change can easily wait for `0.10.0` realease\n",
    "head_branch": "add-arity-check-to-lambdas",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add arity check to lambdas. (#1446)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209172d6ca63ac8d87ecb2",
    "number": 1445,
    "body": "Rubyspecs - https://github.com/ruby/spec/pull/241\n",
    "head_branch": "relative_path_from",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1445 from wied03/relative_path_from\n\nImplement Pathname#relative_path_from"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209173d6ca63ac8d87ecb3",
    "number": 1444,
    "body": "passing implementation\n",
    "head_branch": "file_dupe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove Node non I/O File methods now that File corelib has a rubyspec (#1444)\n\npassing implementation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209174d6ca63ac8d87ecb4",
    "number": 1443,
    "body": "",
    "head_branch": "add-passing-ruby-specs-to-the-test-suite",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1443 from iliabylich/add-passing-ruby-specs-to-the-test-suite\n\nAdd passing ruby specs to the test suite"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209175d6ca63ac8d87ecb5",
    "number": 1442,
    "body": "",
    "head_branch": "fix-kwsplats",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix kwsplats. Add ruby/spec/language/hash_spec to the test suite. (#1442)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209176d6ca63ac8d87ecb6",
    "number": 1441,
    "body": "Try and keep this test from becoming brittle\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Keep source-map method name test from becoming brittle\n\n* Add method names to source maps\r\n* Try and keep this test from becoming brittle"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209177d6ca63ac8d87ecb7",
    "number": 1440,
    "body": "I realize this doesn't have class names, etc. in yet but it's a start (I hope better than nothing).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add method names to source maps"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209178d6ca63ac8d87ecb8",
    "number": 1439,
    "body": "Also fixed a parsing issue for:\n\n``` ruby\nobject.method (1) {}\nobject.JS.method (1) {}\nobject::method (1) {}\n```\n",
    "head_branch": "call-to_ary-on-expanded-block-array",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Call #to_ary on expanded block argument. (#1439)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209178d6ca63ac8d87ecb9",
    "number": 1438,
    "body": "Closes #1437 \n\nI'll add tests for these cases to `ruby/spec`, don't merge it yet please. My tests for now :smile: , 100% green:\n\n``` ruby\n# bug\nm1 ()\n\nm2 1 do\nend\n\n# tests\nm3 (1)\n\nm4 () {}\n\nm5 (1) {}\n\nm6 () do\nend\n\nm7 (1) do\nend\n```\n\nDepends on https://github.com/ruby/spec/pull/237\n",
    "head_branch": "fix-1437",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1438 from iliabylich/fix-1437\n\nFix parsing of method calls that have a space between method name and parentheses."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209179d6ca63ac8d87ecba",
    "number": 1436,
    "body": "From what I see locally `ruby/spec` test suite is now 10% faster :smile: \nCloses https://github.com/opal/opal/issues/1343.\n",
    "head_branch": "optimize-rest-arg-according-to-1096",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimize restarg according to #1096. (#1436)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620917ad6ca63ac8d87ecbb",
    "number": 1435,
    "body": "Add spec/ruby/language/send_spec.rb to the test suite (it contains spec for this bug).\nCloses #1369\n",
    "head_branch": "raise-error-when-literal-block-and-object-block-are-passed-to-method",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Raise an error when both literal block and an object as block are passed to the method call. (#1435)\n\nAdd spec/ruby/language/send_spec.rb to the test suite.\r\n\r\nAdd spec/ruby/language/send_spec.rb to the test suite (it contains spec for this bug).\r\nCloses #1369"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620917bd6ca63ac8d87ecbc",
    "number": 1434,
    "body": "Closes https://github.com/opal/opal/issues/1311\n",
    "head_branch": "add-ruby/core/integer/times_spec-to-the-test-suite",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add ruby/core/integer/times_spec to the test suite. (#1434)\n\nCloses #1311"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620917cd6ca63ac8d87ecbd",
    "number": 1433,
    "body": "`spec/opal/core/method/arity_spec.rb` and `spec/opal/core/method/parameters_spec.rb` can be removed since https://github.com/ruby/spec/pull/236 has been merged.\n",
    "head_branch": "cleanup-rubyspec-filters",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1433 from iliabylich/cleanup-rubyspec-filters\n\nCleanup rubyspec filters."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620917dd6ca63ac8d87ecbe",
    "number": 1432,
    "body": "Closes #1428\n",
    "head_branch": "fix-1428",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix parsing of 'query_method?? true : false'. (#1432)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620917ed6ca63ac8d87ecbf",
    "number": 1431,
    "body": "Closes https://github.com/opal/opal/issues/1424.\n\ncc @wied03 @elia \n",
    "head_branch": "fix-arity-for-attr_reader/attr_writer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1431 from iliabylich/fix-arity-for-attr_reader/attr_writer\n\nFix Method#arity and Method#parameters for methods generated using attr_reader/attr_writer."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620917fd6ca63ac8d87ecc0",
    "number": 1430,
    "body": "Also passes new Rubyspecs for ::new. Underlying implementation of absolute and relative was breaking join.\n\nRubyspecs - https://github.com/ruby/spec/pull/235\n",
    "head_branch": "pathname_fix_new",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Pathname::new and #absolute/#relative (#1430)\n\nAllows Pathname.join to work properly\r\n\r\nupdate to latest rubyspecs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209180d6ca63ac8d87ecc1",
    "number": 1429,
    "body": "Converted the MRI C implementation to JS and pass the Rubyspecs.\n",
    "head_branch": "file_path_fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "File::dirname and File::basename now pass rubyspecs (#1429)\n\nConverted the MRI C implementation to JS, also fix extname\r\nto deal with now correct basename implementation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209181d6ca63ac8d87ecc2",
    "number": 1426,
    "body": "The exception started slipping through the rescue in compiler.rb\n\nUltimately that needs to be fixed (along with validating whether SyntaxError or RuntimeError should be what's raised). For now, make the compiler specs runnable in Opal and filter what does not currently\npass (regex, `__FILE__` issues)\n\nAdd matchers to fill in for RSpec, stub out RSpec helper, fix not_to bridge\n",
    "head_branch": "compiler_error_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1426 from wied03/compiler_error_fix\n\nFix compiler error handling for bootstrap case / run compiler specs on Opal\r\n\r\nincludes https://github.com/maccman/sourcemap/pull/10/commits/aa47b1717e76a5c3f2981b0124881cfcf4ecce01"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209182d6ca63ac8d87ecc3",
    "number": 1425,
    "body": "Returned back `OPAL_CONFIG`, we need an information about `arity_check` in runtime to call `Kernel#eval` with correct options. Before this patch all specs with `evaluate` were compiling the code without arity checking :smile: \n\ncc @elia @wied03 \n\nUpd: Added Method#parameters and Proc#parameters. These methods work only when arity check is enabled. Otherwise returns a blank array\n",
    "head_branch": "fix-method-arity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1425 from iliabylich/fix-method-arity\n\nFixed Method#arity for negative returning values. Added Method/Proc#parameters"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209183d6ca63ac8d87ecc4",
    "number": 1423,
    "body": "Also fixed issue with filtered alias spec (special treatment isn't needed for singleton cases)\n\nhttps://github.com/ruby/spec/pull/229 - (part of this PR)\nAlso covered in\nhttps://github.com/ruby/spec/pull/231 - (part of this PR)\nhttps://github.com/ruby/spec/pull/232 - (part of this PR)\n",
    "head_branch": "super_work_again",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1423 from wied03/super_work_again\n\nFix more super issues related to basic objects, singletons, anon modules"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209184d6ca63ac8d87ecc5",
    "number": 1422,
    "body": "Ruby specs for this\n\nhttps://github.com/ruby/spec/pull/227\n\nWith that new rubyspec, the (as of yet) unimplemented compile method fails with these reused specs, go ahead and exclude that\n",
    "head_branch": "regexp_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1422 from wied03/regexp_fix\n\nFix Regexp.new edge case with trailing escaped backslashes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209185d6ca63ac8d87ecc6",
    "number": 1420,
    "body": "When sharing code between Opal and Rails, server side, Rails autoload does not like `require`, but will work OK if you 'require_dependency'. Added alias that treats require_dependency just like require\n",
    "head_branch": "rails_req_depend",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209186d6ca63ac8d87ecc7",
    "number": 1419,
    "body": "",
    "head_branch": "pathname-constructor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1419 from Mogztter/pathname-constructor\n\nHandle Pathname object in Pathname constructor"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209186d6ca63ac8d87ecc8",
    "number": 1417,
    "body": "Resolves https://github.com/opal/opal/pull/1393\n\n``` ruby\n# opal -c test.rb | node --trace_opt --trace_deopt --allow-natives-syntax\n\nclass A\n  def m\n    1 + 1\n  rescue\n  end\nend\n\n%x{\na = Opal.A.$new();\n\nfunction printStatus(fn) {\n    switch(%GetOptimizationStatus(fn)) {\n        case 1: console.log(\"Function is optimized\"); break;\n        case 2: console.log(\"Function is not optimized\"); break;\n        case 3: console.log(\"Function is always optimized\"); break;\n        case 4: console.log(\"Function is never optimized\"); break;\n        case 6: console.log(\"Function is maybe deoptimized\"); break;\n        case 7: console.log(\"Function is optimized by TurboFan\"); break;\n        default: console.log(\"Unknown optimization status\"); break;\n    }\n}\n\na.$m();\na.$m();\n\n%OptimizeFunctionOnNextCall(a.$m.$$rescue_body);\n\na.$m();\na.$m();\n\nprintStatus(a.$m.$$rescue_body);\n}\n\n# output:\n# Function is optimized\n```\n\nRuby method arguments MUST be passed as arguments one by one to `$$rescue_body` function, otherwise JS engine optimizes it, so closure becomes static (or cached), and by calling method with different arguments JS invokes `$$rescue_body` always with the same closure\n\ncc @elia @meh @jgaskins This implementation is slower than inline code invocation, I think I'm missing something,  the code below shows that I was wrong in https://github.com/opal/opal/pull/1393#issuecomment-204459976, but I don't understand where's the problem in this PR. Any ideas?\n\n``` ruby\n%x{global.$$rescue_body = function() { return 1 + 1 }}\n\ndef m1\n  %x{global.$$rescue_body()}\nrescue\nend\n\ndef m2\n  %x{return 1 + 1}\nrescue\nend\n\ndef bm(title, &block)\n  start = Time.now\n  10_000_000.times(&block)\n  puts \"#{title}: #{Time.now - start}\"\nend\n\nbm 'inline' do\n  m1\nend\n\nbm 'inline function' do\n  m2\nend\n```\n\nOutput:\n\n```\ninline: 0.837\ninline function: 0.796\n```\n",
    "head_branch": "rescue-body-optimization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209187d6ca63ac8d87ecc9",
    "number": 1416,
    "body": "My regression, caused by https://github.com/opal/opal/pull/1395.\nCan be easily reproduced with:\n\n``` ruby\n[[false], [\"\"], [0]].each { |(a)| p a }\n```\n",
    "head_branch": "fix-mlhsarg-regression",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1416 from iliabylich/fix-mlhsarg-regression\n\nFixed setting mlhs arg to nil when JS-falsey value is passed."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209188d6ca63ac8d87ecca",
    "number": 1415,
    "body": "Added ruby/spec/language/def_spec to the test suite.\n",
    "head_branch": "allow-method-definition-in-method-body",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1415 from iliabylich/allow-method-definition-in-method-body\n\nAllow method definition in method body."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209189d6ca63ac8d87eccb",
    "number": 1412,
    "body": "I'm quite sure that this implementation of arguments extraction is almost final :smile: \n\nWhen you have a method definition like\n\n``` ruby\ndef m(a,b,c=1,d=2,*e,f,g)\nend\n```\n1. `[a,b]` are inline arguments, we can put them to `function(a,b) ...`\n2. `[c,d,e,f,g]` are post-args\n   1. In the first order we should try to extract `[c, d]` (post-optargs), it depends on the `arguments.length`\n   2. Then we should try to extract restarg (`e`), it also depends on the `arguments.length`. When we extract opt/post arg, we always should leave `required_right_args.count` items in `arguments`. This is the main rule of post-args.\n   3. Then we can extract our `required_right_args` (`[f, g]`)\n",
    "head_branch": "methods-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1412 from iliabylich/methods-fixes\n\nSupport for mlhs as a first method argument/Support for norm args after optargs."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620918ad6ca63ac8d87eccc",
    "number": 1411,
    "body": "This is kind of a rehash of https://github.com/opal/opal/issues/105 but I think it still might be relevant for other libraries like opal-rspec (not for humans).\n\nSource maps are great for exceptions and debugging. Exceptions slow down the code a lot though when you want code location info **outside of an exception**.\n\nThis would be an opt in compiler flag that adds this context to each block (included in this PR) and each method body (either via compiler trickery or in this rough sketch via the `defn` function in runtime, but I didn't go very far).\n\nThis could be used to implement `caller` in a more performant way or it could just be simple thing where code can access `functionObject.$$sourcemap` of a block/method to get its location.\n\nThoughts?\n\nFYI, This would make https://github.com/opal/opal-rspec/issues/57 possible\n",
    "head_branch": "compiler_source_location",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620918bd6ca63ac8d87eccd",
    "number": 1410,
    "body": "Actually I thought I had \"use strict\" enabled already, but, admittedly, was too easy…\n\n_Thanks to @wied03 for pointing out that the commit was bogus (a63161feeb63b67483f3ffb471964b98ffe02d02)!_\n",
    "head_branch": "elia/use-strict",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620918cd6ca63ac8d87ecce",
    "number": 1409,
    "body": "- split\n- dirname\n- basename\n- directory?\n- extname\n- comparaison\n",
    "head_branch": "pathname-methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1409 from Mogztter/pathname-methods\n\nImplement missing Pathname methods"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620918dd6ca63ac8d87eccf",
    "number": 1408,
    "body": "Resolves #1407\n",
    "head_branch": "issue-1407",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement Pathname.entries & Dir.mkdir (Node.js) (#1408)\n\nResolves #1407"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620918ed6ca63ac8d87ecd0",
    "number": 1406,
    "body": "`gsub!` doesn't work in a JavaScript environment. To be able to generate `opal-builder.js`, we need to replace `gsub!` with `gsub`.\n\nRelated to #1292\n",
    "head_branch": "build-gsub",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c1347881342c60f342ef090275ddeeb4391ccbbb into 496405320ef81d4c6cad178afef0d902c4a18218"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620918fd6ca63ac8d87ecd1",
    "number": 1405,
    "body": "`File::Stat` object has a _lot_ of methods but for now I've just implemented `file?`.\n\nResolves #1404\n",
    "head_branch": "issue-1403",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209190d6ca63ac8d87ecd2",
    "number": 1403,
    "body": "Resolves #1402\n",
    "head_branch": "issue-1402",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209191d6ca63ac8d87ecd3",
    "number": 1399,
    "body": "Completely closes #1319\n",
    "head_branch": "add-spec/ruby/language/proc_spec-to-the-test-suite",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209192d6ca63ac8d87ecd4",
    "number": 1397,
    "body": "Closes #1359.\n\n(Couldn't find any related specs in `spec/ruby`, so I'm like 97% sure that this implementation is correct)\n",
    "head_branch": "iliabylich/add-support-for-squiggly-heredoc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 3722f102039dc370a339079c58bbf85b834eeba1 into 244a0647b8f93aaf9a1394cb2985afbeec38a790"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209193d6ca63ac8d87ecd5",
    "number": 1395,
    "body": "",
    "head_branch": "opal-scan-args",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1395 from iliabylich/opal-scan-args\n\nSplit arguments logic to separate files"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209194d6ca63ac8d87ecd6",
    "number": 1393,
    "body": "A function containing a try/catch construct cannot be optimized. This commit extracts the work to a function that can be optimized. The actual `<=>` operator just wraps it and potentially rescues the exception.\n\nI made a [jsperf](http://jsperf.com/deoptimizations-with-try-catch-finally) for a talk I gave a couple weeks ago that demonstrates the kind of performance benefit this sort of extraction has.\n",
    "head_branch": "optimize-number-spaceship",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1393 from jgaskins/optimize-number-spaceship\n\nOptimize number spaceship"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209194d6ca63ac8d87ecd7",
    "number": 1392,
    "body": "With `grand_central`, handling dispatched actions generally relies on heavy usage of `case` statements, which uses `===`, and since `Class#===` depends on `is_a?` and occurs for every single `when`, calculating ancestors becomes a hot path.\n\nBefore this PR, `Opal.ancestors` was creating a new array for every tier of inheritance while checking which modules were included. While profiling one of my apps after upgrading Opal, I noticed it was the function with the highest \"self\" runtime. This patch sped it up by 30-35x for this particular app and reduced memory usage and GC pressure by almost 30%.\n\nThe effects of this PR are only this drastic for apps that use `grand_central` and dispatch dozens of times per second. Most apps that don't will likely only see marginal gains in performance.\n",
    "head_branch": "optimize-ancestors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209195d6ca63ac8d87ecd8",
    "number": 1391,
    "body": "Not 100% sure that feature is really needed, but basically it allows to run only those specs which are marked as \"bugs\" in the `/filters/bugs` directory.\n1. By setting env var `INVERT_RUNNING_MODE` opal's rake task will switch the logic of excluding examples from the test suite.\n2. New formatter doesn't print failed examples. Instead, it prints specs that are marked as \"bugs\" but in fact are passing.\n\nHere's the output that I've got from running this task on `PATTERN=spec/ruby/core/*/*_spec.rb rake mspec_ruby_nodejs`:\n\n```\nExpected to fail:\n  1) \"Module#module_function as a toggle (no arguments) in a Module body affects evaled method definitions also even when outside the eval itself\"\n  2) \"Module#module_function as a toggle (no arguments) in a Module body functions normally if both toggle and definitions inside a eval\"\n  3) \"Module#class_eval passes the module as the first argument of the block\"\n  4) \"Module.allocate returns a fully-formed instance of Module\"\n  5) \"Module#class_variable_set sets the value of a class variable with the given name defined in an included module\"\n  6) \"Module#constants includes names of constants defined after a module is included\"\n  7) \"Module#include recursively includes new mixins\"\n  8) \"Module#include preserves ancestor order\"\n  9) \"Module#include ignores modules it has already included via module mutual inclusion\"\n  10) \"Module#ancestors returns only modules and classes\"\n  11) \"Module#ancestors when called on a singleton class includes the singleton classes of ancestors\"\n  12) \"Proc#arity for instances created with -> () { } returns positive values for definition \\n    @a = -> (a:) { }\\n    @b = -> (a:, b:) { }\\n    @c = -> (a: 1, b:, c:, d: 2) { }\"\n  13) \"Proc#arity for instances created with -> () { } returns positive values for definition \\n    @a = -> (a, b:) { }\\n    @b = -> (a, b:, &l) { }\"\n  14) \"Proc#arity for instances created with -> () { } returns positive values for definition \\n    @a = -> (a, b, c:, d: 1) { }\\n    @b = -> (a, b, c:, d: 1, **k, &l) { }\"\n  15) \"Proc#arity for instances created with -> () { } returns positive values for definition \\n    @a = -> ((a, (*b, c))) { }\\n    @b = -> (a, (*b, c), d, (*e), (*)) { }\"\n  16) \"Proc#arity for instances created with lambda { || } returns positive values for definition \\n    @a = lambda { |a:| }\\n    @b = lambda { |a:, b:| }\\n    @c = lambda { |a: 1, b:, c:, d: 2| }\"\n  17) \"Proc#arity for instances created with lambda { || } returns positive values for definition \\n    @a = lambda { |a, b:| }\\n    @b = lambda { |a, b:, &l| }\"\n  18) \"Proc#arity for instances created with lambda { || } returns positive values for definition \\n    @a = lambda { |a, b, c:, d: 1| }\\n    @b = lambda { |a, b, c:, d: 1, **k, &l| }\"\n  19) \"Proc#arity for instances created with lambda { || } returns positive values for definition \\n    @a = lambda { |a, b, c:, d: 1| }\\n    @b = lambda { |a, b, c:, d: 1, **k, &l| }\"\n  20) \"Range#hash generates a Fixnum for the hash value\"\n  21) \"Class#allocate returns a fully-formed instance of Module\"\n  22) \"Class#superclass for a singleton class of a class returns the singleton class of its superclass\"\n  23) \"Class#new passes the block to #initialize\"\n  24) \"Class#dup sets the name from the class to nil if not assigned to a constant\"\n  25) \"Class#dup stores the new name if assigned to a constant\"\n  26) \"Struct#inspect returns a string representation of some kind\"\n  27) \"Time#strftime should be able to show the number of seconds since the unix epoch\"\n  28) \"String#split with Regexp includes all captures in the result array\"\n  29) \"Kernel#extend makes the class a kind_of? the argument\"\n  30) \"Kernel.Array does not call #to_a on an Array\"\n  31) \"Kernel#Array does not call #to_a on an Array\"\n  32) \"Kernel#is_a? returns true if given a Module that object has been extended with\"\n  33) \"Kernel#kind_of? returns true if given a Module that object has been extended with\"\n  34) \"Kernel#raise raises RuntimeError if no exception class is given\"\n  35) \"BasicObject metaclass has Class as superclass\"\n  36) \"BasicObject metaclass contains methods for the BasicObject class\"\n```\n\nAnd from running `spec/language/*_spec.rb`:\n\n```\nExpected to fail:\n  1) \"A lambda literal -> () { } assigns variables from parameters for definition '@a = -> (*) { }'\"\n  2) \"A lambda literal -> () { } assigns variables from parameters for definition '@a = -> (*, &b) { b }'\"\n  3) \"A lambda expression 'lambda { ... }' assigns variables from parameters for definition '@a = lambda { |*| }'\"\n  4) \"A lambda expression 'lambda { ... }' assigns variables from parameters for definition '@a = lambda { |*, &b| b }'\"\n  5) \"Predefined global $! remains nil after a failed core class \\\"checked\\\" coercion against a class that defines method_missing\"\n  6) \"Predefined global $! should be set to the value of $! before the begin after a successful rescue\"\n  7) \"Predefined global $! should be set to the value of $! before the begin after a successful rescue within an ensure\"\n  8) \"Predefined global $! should be set to the new exception after a throwing rescue\"\n  9) \"Predefined global $! in bodies without ensure should be cleared when an exception is rescued\"\n  10) \"Predefined global $! in bodies without ensure should be cleared when an exception is rescued even when a non-local return is present\"\n  11) \"Predefined global $! in bodies without ensure should not be cleared when an exception is not rescued\"\n  12) \"Predefined global $! in bodies without ensure should not be cleared when an exception is rescued and rethrown\"\n  13) \"Predefined global $! in ensure-protected bodies should be cleared when an exception is rescued\"\n  14) \"A singleton class inherits from Class for classes\"\n  15) \"A singleton class is a subclass of a superclass's singleton class\"\n  16) \"A singleton class is a subclass of the same level of superclass's singleton class\"\n  17) \"A singleton class for BasicObject has Class as it's superclass\"\n  18) \"A singleton class for BasicObject has the proper level of superclass for Class\"\n  19) \"Instance methods of a singleton class for a singleton class includes instance methods of the singleton class of Class\"\n  20) \"Class methods of a singleton class for a class include class methods of Class\"\n  21) \"Class methods of a singleton class for a class include instance methods of the singleton class of Class\"\n  22) \"Class methods of a singleton class for a singleton class include class methods of the singleton class of Class\"\n```\n\n(Funny moment here: there are some test in `spec/ruby/language/while_spec` that are compiled as a JS with infinite loop, I had to comment it temporary, need to investigate later)\n\nFeel free to ping me about the code issues, I don't really like what I've got.\nWill add some documentation after approval, not sure that Opal needs it.\n",
    "head_branch": "add-ability-to-run-inverted-test-suite",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209196d6ca63ac8d87ecd9",
    "number": 1390,
    "body": "Closes #1388\n",
    "head_branch": "fix-1388",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209197d6ca63ac8d87ecda",
    "number": 1389,
    "body": "Closes #1316.\n",
    "head_branch": "fix-1316",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209198d6ca63ac8d87ecdb",
    "number": 1387,
    "body": "",
    "head_branch": "add-ruby/spec/language/block_spec-to-the-test-suite",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209199d6ca63ac8d87ecdc",
    "number": 1385,
    "body": "Fixes #1384. Another weird quirk of the Ruby language (if it's a weird corner, RSpec will find it). It still needs the following:\n- Rubyspec built from the anon_mod.rb file _done_\n- This is probably incomplete as it really needs to be something that also fixes the Rubyspec `Module#alias_method can call a method with super aliased twice` _save this for another PR_\n",
    "head_branch": "super_method_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1385 from wied03/super_method_fix\n\nSuper/Aliasing Fix"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620919ad6ca63ac8d87ecdd",
    "number": 1383,
    "body": "",
    "head_branch": "included_methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620919bd6ca63ac8d87ecde",
    "number": 1381,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge da507ddc2afabd4f3ba6dfa68faa853dc4e71e19 into e6f8406e808766763ca46b6a10cbba4b8f50406d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620919cd6ca63ac8d87ecdf",
    "number": 1380,
    "body": "Rubyspecs - https://github.com/ruby/spec/pull/202\n",
    "head_branch": "no_method_error_arity_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 13f701c466e9e92ce564b1705c09c72962f96ca9 into 97cda44cdaad77850b5042b7c3b8de677fbb9b25"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620919dd6ca63ac8d87ece0",
    "number": 1379,
    "body": "Fix parsing of control characters.\nAdded ruby/language/string_spec to the test suite.\nCloses #1320.\nI don't think this PR deserves an entry in the changelog, nobody uses this syntax :smile: , it's only about extending the test suite.\n",
    "head_branch": "make-ruby/language/string_spec-parsable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620919ed6ca63ac8d87ece1",
    "number": 1378,
    "body": "Added `rubyspec/language/symbol_spec` to the test suite.\nCloses #1321 \n",
    "head_branch": "fix-parsing-of-i-and-I-lists",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge fc7c545b0adad6f42e75388874988aac076414f3 into 01ba46b403f5b0dd84df89c9465e2cae582000bf"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620919fd6ca63ac8d87ece2",
    "number": 1377,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091a0d6ca63ac8d87ece3",
    "number": 1376,
    "body": "Fixed parsing issue with mass assignment and method call.\nAdded rubyspec/language/method_spec.rb to the test suite.\nCloses https://github.com/opal/opal/issues/1317\n",
    "head_branch": "add-kwsplat-support-and-mass-assignment-with-method-call",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ca516e9cd84f679b7cd12feb2b83245127989787 into 2a4fcf70422e51abc5f38470dd45d35144d59199"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091a1d6ca63ac8d87ece4",
    "number": 1375,
    "body": "Closes #1314\n",
    "head_branch": "include-core-method-test-to-the-test-suite",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091a2d6ca63ac8d87ece5",
    "number": 1374,
    "body": "Finally closes #1313\n",
    "head_branch": "include-proc-parameters-into-the-test-suite",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091a3d6ca63ac8d87ece6",
    "number": 1373,
    "body": "Ruby specs - https://github.com/ruby/spec/pull/200\n\nAnother RSpec related issue\n",
    "head_branch": "method_added_singleton",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091a4d6ca63ac8d87ece7",
    "number": 1372,
    "body": "Transition error handling to runtime (too difficult and error prone to do it on the compiler side), fix method_missing error handling , case, added missing test cases, DRY find_iter_super_dispatcher\n\nThis gets opal-rspec in the neighborhood again\n",
    "head_branch": "super_follow_up",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091a5d6ca63ac8d87ece8",
    "number": 1368,
    "body": "Exclude encoding related string spec introduced in rubyspec commit ruby/spec@2e3116d41adf1e56c060e0c158a7e48831609291\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091a5d6ca63ac8d87ece9",
    "number": 1367,
    "body": "The main idea here besides fixing #1237 is to focus the runtime method solely on finding the function, then alter the compiler to cover missing functionality use the existing call node to avoid duplicating logic.\n\nThings it would be nice to get an opinion on before I squash:\n- Embedding errors - I did this for a few cases where the compiler can detect an error (using super in a block where you can't for example). I bake in raise into the code to make it a runtime error and be MRI/rubyspec compliant, but at least this way the compiler does the heavy lifting of checking. Is this an OK way to go?\n- Call/Super - Started out trying to reuse stuff and I think it largely remained that way. On the contrary, maybe the SuperNode customizes enough that it might be worth it to not inherit from CallNode? I think overall, inheriting is still slightly preferable.\n- Call refactoring - Tried to break up the compile method a little better and make if statements/methods more intuitive as to what's going on\n- Compiler specs - Made it a lot easier to track down everything going on here\n- Renamed a bunch of child expressions in the CallNode - This made it easier for me to follow when I was refactoring but I can back these out\n\nFixes #1237 \nFixes #477 \n",
    "head_branch": "bugs/1237_clean_slate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091a6d6ca63ac8d87ecea",
    "number": 1366,
    "body": "nodejs/yaml was throwing errors upon usage as it relied on OpalNode.node_require instead of Kernel#node_require like the nodejs/file class.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091a7d6ca63ac8d87eceb",
    "number": 1365,
    "body": "Fixed Opal.is_a to use Opal.ancestors of passed object and object's metaclass.\n",
    "head_branch": "heads/iliabylich/fix-opal-is-a",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091a8d6ca63ac8d87ecec",
    "number": 1364,
    "body": "Closes #1312 .\nAdded `ruby/core/module/const_defined_spec.rb` to the test suite.\n`Module#const_defined?` has some failing specs, looks like it doesn't support nested constants at all (but I suppose it can be resolved by copying some code from `Module#const_get`)\n",
    "head_branch": "fix-parsing-of-unicode-constants",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091a9d6ca63ac8d87eced",
    "number": 1363,
    "body": "Allows to parse the code like:\n\n``` ruby\nmodule_eval(<<'...end ruby23.y/module_eval...', 'ruby23.y', 2771)\n\n  def version\n    23\n  end\n\n  def default_encoding\n    Encoding::UTF_8\n  end\n...end ruby23.y/module_eval...\n```\n\n(Which is required to parse generated parser from https://github.com/whitequark/parser/blob/master/lib/parser/ruby23.y)\n\nAlso it covers all cases specified in https://github.com/ruby/spec/blob/ce8d46b35a291bca68d61e552016a03ddfe2cea8/language/string_spec.rb#L134-L177 (unfortunately, there are some other parsing issues, so we still can't include this file into the test suite)\n",
    "head_branch": "fix-heredoc-parsing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 98151591a3b8e43c4fb1af3947c3bdaff42b179a into 43d6e28f66543cf8a3987a3720143c0e976ae330"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091aad6ca63ac8d87ecee",
    "number": 1361,
    "body": "Closes #1318\n",
    "head_branch": "fix-builtin-gvars-parsing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091abd6ca63ac8d87ecef",
    "number": 1360,
    "body": "That looks nice having `spec/opal` and is in line with the recent rename of the project.\n\nOne caveat tho is that all `mspec_rubyspec_*` tasks are now `mspec_ruby_*`.\n\ncc @opal/core @iliabylich \n",
    "head_branch": "elia/ruby-spec",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 38535e8932611bbe99e542554282edb79d5bcbd5 into edfa8db0cd182d4233b6b775f24bde89e07728a4"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662091acd6ca63ac8d87ecf0",
    "number": 1358,
    "body": "So, most of the issues related to parsing method/block parameters are fixed in this PR (but not all of them are supported by compiler yet). Sexp for lambda parameters were different from method parameters, so I've changed it to avoid code duplication.\n1. optional arguments for lambdas: `->(a=1){} -> (:optarg, :a, (:int, 1))` (was an `:arg` with a `default_block`)\n2. rest arguments for lambdas: `->(*a){} -> (:restarg, :a)` (was `:splat :a`)\n3. The only difference between lambda/method parameters are `mlhs_args` (`lamda { |(a,b)| }`), all other code for parameters is shared now.\n4. There are still a few tests in `ruby/spec` that can't be compiled (but that's not related directly to block/method parameters)\n",
    "head_branch": "support-for-kwargs-in-lambdas",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7d1288bb0110bc9e3a1d83982fef359f33caaa64 into a486ec16700fe992e57fb533c9dcdde9500aed9c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091add6ca63ac8d87ecf1",
    "number": 1357,
    "body": "``` ruby\nrequire \"opal\"\nputs Opal::Compiler.new(\"def foo; bar; end\", calls: [:baz]).compile\n```\n\n```\n/* Generated by Opal 0.10.0.dev */\n(function(Opal) {\n  Opal.dynamic_require_severity = \"error\";\n  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };\n  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;\n\n  return\n})(Opal);\n```\n\ncc @meh @vais\n",
    "head_branch": "elia/bare-necessities",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091aed6ca63ac8d87ecf2",
    "number": 1356,
    "body": "Git submodules need to be initialized before installing dependencies because there's a dependency on mspec path: https://github.com/opal/opal/blob/master/Gemfile#L35\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091afd6ca63ac8d87ecf3",
    "number": 1355,
    "body": "Rack file names were changed in >= 2.0.0.alpha. https://github.com/rack/rack/commit/857641dab255dbec490fead1d3a0f1ff999b2137. Resulted in the following error:\n\n```\nopal-0.8.0/lib/opal/sprockets/server.rb:7:in `require': cannot load such file -- rack/showexceptions (LoadError)\n```\n",
    "head_branch": "dependencies-and-installation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091b0d6ca63ac8d87ecf4",
    "number": 1354,
    "body": "- `git submodule` needs to be updated before `bundle install`\n- Rake task `mspec_rubyspec_node` doesn't exist\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 63995d5935fe86badb40c5ac4547a8c4ff1975b5 into f3622d1d9eb5b9c8679dece5c967ec59758172a9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091b1d6ca63ac8d87ecf5",
    "number": 1353,
    "body": "On my machine, `bundle exec rake` fails.\n\n```\n1)\nThe rescue keyword Fix using more than two \"rescue\" in sequence #1269 ERROR\nNoMethodError: undefined method `<<' for nil\n<<: undefined method `<<' for nil\n*snip*\n```\n\nLooks the initialization of $ScratchPad was forgotten.  (I'm unsure why this was overlooked.)\n",
    "head_branch": "fix-rescue-spec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091b2d6ca63ac8d87ecf6",
    "number": 1352,
    "body": "Hello,\n\n`File.dirname` should return a joined path instead of an array of each directory name.\n\nBefore:\n\n```\n$ opal -e 'p File.dirname(\"foo/bar/baz\")'\n[\"foo\", \"bar\"]\n```\n\nAfter:\n\n```\n$ bundle exec opal -e 'p File.dirname(\"foo/bar/baz\")'\n\"foo/bar\"\n```\n\nThank you,\n",
    "head_branch": "fix-dirname",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091b3d6ca63ac8d87ecf7",
    "number": 1351,
    "body": "Hello,\n\n`Number#[]` returns a wrong result when it picks a high bit of negative number.\n\n```\n$ opal -ve 'p (-1)[1]'\nOpal v0.9.2\n0\n```\n\nIt should return 1 because -1 is represented by an integer whose bits are all 1.  Other Ruby implementations including MRI do so.\n\nThank you,\n",
    "head_branch": "fix-number-aref",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091b3d6ca63ac8d87ecf8",
    "number": 1350,
    "body": "Hello,\n\nOpal fails to compile multiple assignment to constants:\n\n```\n opal -e 'A, B = 1, 2'\n/home/mame/local/lib/ruby/gems/2.3.0/gems/opal-0.9.2/lib/opal/nodes/masgn.rb:103:in `compile_assignment': An error occurred while compiling: -e (RuntimeError)\nBad child node in masgn LHS: (:cdecl, :A). LHS: (:array, (:cdecl, :A), (:cdecl, :B))\n*snip*\n```\n\nThough I'm unsure if my patch is right, it fixes this error anyway.  Could you please review it?\n",
    "head_branch": "allow-masgn-to-constants",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5d15e217bc30a20a6bb5facccdd8d77b5206085c into 9909b2bb31c12a5b54ad01a3ed6d4d7456d844a5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091b4d6ca63ac8d87ecf9",
    "number": 1349,
    "body": "",
    "head_branch": "improve-const-get",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091b5d6ca63ac8d87ecfa",
    "number": 1348,
    "body": "Resolves #1346 & resolves #1221\n",
    "head_branch": "issue-1221",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement IO.read & IO.each_line method on Node.js (#1348)\n\nResolves #1332 \r\nResolves #1221"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091b6d6ca63ac8d87ecfb",
    "number": 1347,
    "body": "Resolves #1219\n",
    "head_branch": "issue-1219",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ba8564059acda326f3323f644930502db1ebfa94 into 7ec24c040197e9a8f450f4ce268ae554b328b34d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091b7d6ca63ac8d87ecfc",
    "number": 1346,
    "body": "Resolves #1332\n",
    "head_branch": "issue-1332",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091b8d6ca63ac8d87ecfd",
    "number": 1345,
    "body": "Resolves #1253\n",
    "head_branch": "issue-1253",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091b9d6ca63ac8d87ecfe",
    "number": 1342,
    "body": "Passing ~50% of the BigDecimal spec suite. At this point one should be able to use this to do basic money arithmetic: addition, subtraction, multiplication, and division are all implemented :sweat_smile: The rest I hope will get fleshed out as needed - I am out of :hourglass: \n\nMy hope is this could also be used as an example for wrapping an existing JS lib. I made generous use of the new `.JS.` syntax, hehe. As such, any feedback would be appreciated :wink: cc @elia @meh\n",
    "head_branch": "bigdecimal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091bad6ca63ac8d87ecff",
    "number": 1341,
    "body": "",
    "head_branch": "improve-date-parse",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091bbd6ca63ac8d87ed00",
    "number": 1340,
    "body": "",
    "head_branch": "fix-size-of-array-permutation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091bcd6ca63ac8d87ed01",
    "number": 1339,
    "body": "Closes #1325.\n",
    "head_branch": "fix-enumerator-with-index",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091bdd6ca63ac8d87ed02",
    "number": 1338,
    "body": "Closes #1234.\n",
    "head_branch": "implement-rescue-else",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091bed6ca63ac8d87ed03",
    "number": 1337,
    "body": "",
    "head_branch": "implemented-array-repeated-permutation-combination",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091bfd6ca63ac8d87ed04",
    "number": 1336,
    "body": "",
    "head_branch": "implement-array-sort-by",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091c0d6ca63ac8d87ed05",
    "number": 1334,
    "body": "replacing this:\n\n``` js\nvar array = [1,2,3];\narray.$$p = function(element){ console.log(element) };\narray.each();\n```\n\n``` js\nvar array = [1,2,3];\narray.each({$$p: function(element){ console.log(element) }});\n```\n\n---\n### Current status:\n\nthis works:\n\n```\n $ rake mspec_opal_nodejs\n```\n\n~~`0 files, 1059 examples, 2155 expectations, 6 failures, 17 errors, 83 tagged`~~\n`0 files, 1059 examples, 2163 expectations, 6 failures, 11 errors, 83 tagged`\n",
    "head_branch": "elia/inline-block",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091c0d6ca63ac8d87ed06",
    "number": 1333,
    "body": "Resolves #1302\n",
    "head_branch": "issue-1302",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091c1d6ca63ac8d87ed07",
    "number": 1330,
    "body": "Fix issue #1320\n",
    "head_branch": "issue-1320",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091c2d6ca63ac8d87ed08",
    "number": 1327,
    "body": "As @elia said this is not very efficient... but this is working! Feel free to add inline comments to improve the implementation\n",
    "head_branch": "issue-1301",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e2c1ab77ddfdfb679b538eaa0404e48921bc2b17 into 147e13fea5a8141345be95103ea471739c0c6120"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091c3d6ca63ac8d87ed09",
    "number": 1326,
    "body": "link was broken before\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091c4d6ca63ac8d87ed0a",
    "number": 1324,
    "body": "Closes #1323.\n",
    "head_branch": "fix-nodejs-dir-pwd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091c5d6ca63ac8d87ed0b",
    "number": 1322,
    "body": "",
    "head_branch": "cleanup-rubyspecs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091c6d6ca63ac8d87ed0c",
    "number": 1310,
    "body": "1. Not sure about `<script type='text/ruby'>` - it can be broken, but locally specs are green. Are there any tests for this functionality?\n2. Probably there are some specs from ruby/spec that are green now\n3. I guess it closes #1245\n\nFor `#eval`:\n\n``` ruby\nrequire 'opal-parser'\n\nclass A\n  eval <<-SOURCE\n    def a_method\n      puts \"From \" + self.class.name + \"#a_method\"\n    end\n  SOURCE\nend\nA.new.a_method\n\nclass B < A\nend\nB.new.a_method\n\nclass C\nend\nC.new.a_method\n```\n\nBefore:\n\n```\nFrom A#a_method\nFrom B#a_method\nFrom C#a_method\n```\n\nNow:\n\n```\nFrom A#a_method\nFrom B#a_method\na_method: undefined method `a_method' for #<C:0x352>\n```\n\nFor `#instance_eval`:\n\n``` ruby\no = Object.new\no.instance_eval \"def m; :m; end\"\nputs o.m\n\nputs Object.new.m\n```\n\nBefore:\n\n```\nm\nm\n```\n\nAfter:\n\n```\nm\nm: undefined method `m' for #<Object:0x2d4>\n```\n",
    "head_branch": "fix-context-of-evaluation-for-eval-and-instance_eval",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091c7d6ca63ac8d87ed0d",
    "number": 1309,
    "body": "With special thanks to @iliabylich for https://github.com/opal/opal/pull/1308\n",
    "head_branch": "update-ruby-specs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0e3af1d50088253e0a87d858570af105b9759de2 into 45c40e99a2ac536739892cbefe072716c716efd1"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091c8d6ca63ac8d87ed0e",
    "number": 1308,
    "body": "Prepend rescue statement with js_return when it has ensure.\nFixes #1305.\n",
    "head_branch": "fix-1305",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091c9d6ca63ac8d87ed0f",
    "number": 1307,
    "body": "Depends on https://github.com/opal/opal/pull/1306\n",
    "head_branch": "array-sort-max",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091cad6ca63ac8d87ed10",
    "number": 1306,
    "body": "",
    "head_branch": "update-specs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091cbd6ca63ac8d87ed11",
    "number": 1304,
    "body": "",
    "head_branch": "add-names-to-js-method-functions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091ccd6ca63ac8d87ed12",
    "number": 1303,
    "body": "",
    "head_branch": "enumerable-each-entry",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7ec3383fbcba21d0b6b3de6f2e5125770651c88f into 9bd63bc1cf03a88544f625105113c3924bf011ef"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091ccd6ca63ac8d87ed13",
    "number": 1298,
    "body": "I've done some tests but `pwd` method is not overridden by the Node.js implementation. I'm pretty sure I'm doing something wrong but I can't figure out what...\n\nTo reproduce this issue:\n\n```\n$ bundle exec rake dist\n$ cat build/nodejs.js >> build/opal.js\n$ echo \"Opal.require('nodejs');\\nconsole.log(Opal.get('File').\\$expand_path('.'));\" >> build/opal.js\n$ node build/opal.js\n.\n```\n\nApart from this \"issue\" (or misuse) this is working as expected and I get the current directory when running Node.js and \".\" when running in Browser.\n\nfixes #1296 \n",
    "head_branch": "issue-1296",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091cdd6ca63ac8d87ed14",
    "number": 1295,
    "body": "",
    "head_branch": "issue-1291",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091ced6ca63ac8d87ed15",
    "number": 1294,
    "body": "",
    "head_branch": "issue-1218",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091cfd6ca63ac8d87ed16",
    "number": 1293,
    "body": "See discussion here: https://github.com/opal/opal/commit/a43acd268f9c10da0e1a1c0f37f0271a5bb55815#commitcomment-15494448\n",
    "head_branch": "rename-module-option",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091d0d6ca63ac8d87ed17",
    "number": 1292,
    "body": "I made some progress toward a 100% JavaScript to compile Ruby code to JavaScript :smile: \n\nRemaining things to do:\n- [x] Implement `Pathname.expand_path` method (used in [Hike](https://github.com/sstephenson/hike/blob/v1.2.3/lib/hike/trail.rb#L49)) #1291\n- [x] Implement `Kernel.open()` method (used in [Opal.PathReader](https://github.com/opal/opal/blob/master/lib/opal/path_reader.rb#L12)) #1218\n- [x] Implement  `Pathname.join` method (used in [Hike](https://github.com/sstephenson/hike/blob/v1.2.3/lib/hike/paths.rb#L23)) #1301  \n- [x] Incorrect type with splat operator in HikePathFinder with Opal.paths #1331 \n",
    "head_branch": "issue-1290",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "generate opal-builder.js (#1292)\n\nResolves #1290"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091d1d6ca63ac8d87ed18",
    "number": 1289,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091d2d6ca63ac8d87ed19",
    "number": 1284,
    "body": "Fixes #1279.\n",
    "head_branch": "fix-opal-is-a",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge bf22586c0fc2a4a98f5f9b6c31aa39f65ea64493 into dede1c31d7ef5c99cb4d4778a1eb42c447c9e9bb"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091d3d6ca63ac8d87ed1a",
    "number": 1283,
    "body": "@elia I didn't find out how to put the code of the module inside an Opal module... in Asciidoctor.js we're using `Opal::Environment` but this is now deprecated. Maybe it's better to leave as it is (no need to manually require the module) ? Wdyt ?\n",
    "head_branch": "issue-1281",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ab128acef1921b89c18085e213cd30368a3a6d6a into ec6ad0b5711ee03b5d078f7df281bc49502bc68c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091d4d6ca63ac8d87ed1b",
    "number": 1277,
    "body": "Port of https://github.com/opal/opal/pull/1276 to master\n\nShould address #1274 in a way that preserves operator optimization (rg_gt, etc.) when possible.\n\nRather than using just an operator comparison to decide whether optimization can happen, look at the call type and only optimize operator based calls to ValueNode/NumericNode based types.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091d5d6ca63ac8d87ed1c",
    "number": 1276,
    "body": "Rather than using just an operator comparison to decide whether optimization can happen, look at the call type and only optimize operator based calls to ValueNode/NumericNode based types.\n\nShould address https://github.com/opal/opal/issues/1274 in a way that preserves operator optimization (rg_gt, etc.) when possible.\n\nSince no tests broke when I changed this, added compiler specs and also added a spot check at a higher level (opal mspec).\n\nCan squash once approach is reviewed.\n",
    "head_branch": "opal_issue_1274",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091d6d6ca63ac8d87ed1d",
    "number": 1275,
    "body": "",
    "head_branch": "implement-array-slice",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091d7d6ca63ac8d87ed1e",
    "number": 1273,
    "body": "Closes #1272 and #1271\n",
    "head_branch": "always-populate-all-stub-subscribers-with-all-method-stubs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5f08a464f401b71630bbd9a256bae2bcc9f9c407 into af2e3cd02622b42b528af8e5552929751debdc29"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091d8d6ca63ac8d87ed1f",
    "number": 1269,
    "body": "Previously only the first two rescues were being compiled.\n\nref: https://github.com/opal/opal/pull/687#issuecomment-69344736\n\nThe following code was ignoring the `IOError` rescue, now works with any number of `rescue`s.\n\n``` ruby\nbegin\n  raise IOError, 'foo'\nrescue RangeError              # this one is correct\nrescue TypeError               # miss a return\nrescue IOError                 # following two lines disappear in js\n  puts \"I got #{$!.message}\"\nend\n```\n",
    "head_branch": "elia/pull-687/fix-multiple-rescue",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge b372793e87c8e16beffb708d48bad63f6a3af8cd into bda46c3e1b48ce98f4b71412f505950513d2e78b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091d8d6ca63ac8d87ed20",
    "number": 1268,
    "body": "",
    "head_branch": "update-rubyspec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091d9d6ca63ac8d87ed21",
    "number": 1265,
    "body": "For some reason a number of not so old rubies were in the allowed failures.\n",
    "head_branch": "elia/older-rubies",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091dad6ca63ac8d87ed22",
    "number": 1264,
    "body": "cc @JelF\n",
    "head_branch": "elia/coveralls",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge bb54c07f089d40ffbc874a4506b3e5b156a3b2c0 into ecb4a33591123cb4c0dab7972bacfac9ba66400f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091dbd6ca63ac8d87ed23",
    "number": 1263,
    "body": "According to the A+ promise specification, [\"`then` may be called multiple times on the same promise\"](https://promisesaplus.com/#point-36). Since `fail` and `always` are just `then` with different success/failure semantics, I added the same functionality to them, as well.\n\n@wied03, @meh, and I spoke about supporting this in the past. Last I heard, @meh was still contemplating the change. I probably should've put this in before the 0.9 release, but this PR is backwards-compatible with the current release.\n",
    "head_branch": "promise-multiple-thens",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091dcd6ca63ac8d87ed24",
    "number": 1262,
    "body": "Terribly sorry about having it lost in previuous PR\n",
    "head_branch": "fast-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091ddd6ca63ac8d87ed25",
    "number": 1261,
    "body": "This should allow 3rd party to define additional runners. E.g opal-chakra\ncould implement a runner based on Microsoft Edge JavaScript engine.\n\nMaybe in the future a rack-like `#call` based API and a register of runners\ncould make sense to allow for super-easy runner definition (e.g. a `Proc`).\n\nI'll merge if the CI is green, any code-review is appreciated though. :)\n",
    "head_branch": "elia/cli-runners",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091ded6ca63ac8d87ed26",
    "number": 1260,
    "body": "Adds rack '>=2' support, which is required by rails 5\n\ncloses https://github.com/opal/opal-rails/issues/76\n",
    "head_branch": "rack2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0543f5809b85fb00c1f5f50241a9fccfcb329b2d into d019fc9f482cf69fb4fc5d95b9b1f646e471b239"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091dfd6ca63ac8d87ed27",
    "number": 1259,
    "body": "Fixes #1257\n",
    "head_branch": "fix-module-name-when-constant-was-created-using-cdecl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 160789f7e36a581944160ca9b02eda9eae57ab48 into 66842ce87cb4dc71ac4426b8cf190876c06f6adf"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091e0d6ca63ac8d87ed28",
    "number": 1258,
    "body": "",
    "head_branch": "remove-default-and-none-from-ivars-list-on-hash",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091e1d6ca63ac8d87ed29",
    "number": 1256,
    "body": "Prior to #1249, `{ foo: MyObject.new }.to_n` returned the object value, but now it returns `nil` if `MyObject#to_n` is not defined. This occurred because of the move to `Native.try_convert` for the conversion (which just lets native JS objects pass through).\n\nI think using that method was a great move, but I don't think `nil` as a return value for arbitrary Ruby objects makes sense. If I understand the intent correctly, the idea is to always return a native JS value. The original Ruby object may be closer to the JS object you want than `nil`. That is, I can think of a lot of ways to use the original Ruby object from JS, but if I get `nil` in JS, I probably actually wanted `null`.\n",
    "head_branch": "hash-to_n-pass-through",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091e2d6ca63ac8d87ed2a",
    "number": 1251,
    "body": "There's a difference between `Struct` implementation in opal and MRI:\n\n``` ruby\nA = Struct.new(:a, :b)\nputs A.new\n\nB = Struct.new('a', :b)\nputs B.new\n```\n\nFor opal:\n\n```\n#<struct Struct::A a=nil, b=nil>\n#<struct Struct::B a=nil, b=nil>\n```\n\nFor MRI\n\n```\n#<struct A a=nil, b=nil>\ntest.rb:4:in `new': identifier a needs to be constant (NameError)\n```\n\nWhen the first argument of `Struct.new` is a String, MRI _always_ tries to \"convert\" it to a constant name. In opal we have no difference between `String`/`Symbol`.\n",
    "head_branch": "struct-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 393b411ffa6b2db2dbdce5c287d04221defa571c into dede1c31d7ef5c99cb4d4778a1eb42c447c9e9bb"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091e3d6ca63ac8d87ed2b",
    "number": 1250,
    "body": "fixes #1247\n",
    "head_branch": "elia/break",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091e4d6ca63ac8d87ed2c",
    "number": 1249,
    "body": "Closes #1244.\n",
    "head_branch": "fix-to_n-method-for-opal-objects-containing-native-objects",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091e5d6ca63ac8d87ed2d",
    "number": 1248,
    "body": "",
    "head_branch": "fix-modules-comparison",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091e6d6ca63ac8d87ed2e",
    "number": 1246,
    "body": "",
    "head_branch": "range",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4a39155d2872264b28f31a64dd004575873463bc into eea6d353020e84d979da2ce89f18c80ea0890602"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091e6d6ca63ac8d87ed2f",
    "number": 1243,
    "body": "This PR removes from the `spec/rubyspecs` file the exclusions (`!...`) for files that Opal was unable to parse in the past. Now that it can, these files no longer need to be excluded entirely from the spec run, and any failures arising from running the specs in these files have been added to the appropriate bug filters instead.\n",
    "head_branch": "rubyspecs-cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5f84907b444546a0b3da567fd1ad4b85f5d67189 into 87c8b66bc09a101ce78ac4e1e14127d9e2ee388c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091e7d6ca63ac8d87ed30",
    "number": 1241,
    "body": "~~_**DO NOT MERGE YET** Would like to merge this after 0.9 is out, but maybe I'll cherry-pick single commits before that._~~\n\nThe main idea is to cleanup module and class creation and also improve the debugging experience (e.g. using `displayName`). **`Module.new` is already implemented in terms of `.allocate` + `#initialize`,** and the runtime helper `Opal.module()` uses the same code path. `Class.new` needs more preparatory work tho.\n\n_**Side note:** even if all the functions in the runtime are now all available they're still considered internal, I switched style just to simplify refactoring and reading._\n",
    "head_branch": "elia/beyond-runtime",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 6044d30d239363907aa5ae19fd03578101102b81 into 643a2a6f82bc59da66017d4228ab0a32d8c76b33"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662091e8d6ca63ac8d87ed31",
    "number": 1238,
    "body": "Should improve naming for both sanity when developing and while looking at stack traces.\nAll constructor should now appear with an \"_alloc\" suffix in stack traces, although I'm not sure I covered all cases.\n",
    "head_branch": "elia/runtime-cleanup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge acf61e0a0b6b4df8c94d5ac612a61c516186caaa into 3d5f8d32a75f56d8a5d36e298060dad6db7c5be3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091e9d6ca63ac8d87ed32",
    "number": 1233,
    "body": "In 7b5e479, a `lexer.cmdarg_push` and `lexer.cmdarg_pop` pair was added\naround the parsing of `lambda_body`. This ensured that when parsing the lambda\nbody, the lexer started out in the correct state.\n\nThe problem was that when lexing the terminating RCURLY of the lambda body,\nthe lexer would _also_ perform a `lexer.cmdarg_pop`. So we had push + pop + pop.\nEnough to get the lexer in the right state when starting the lambda body, but\nnot enough to get it back into the right state after finishing the lambda body.\n\nSo, remove the previous fix, and instead, make sure the lexer performs a\n`cmdarg_push` when lexing LAMBEG, as it already does for LCURLY. This way,\nthe pushes and pops are balanced.\n\nEXCEPT... the grammar also allows a STRING_DBEG token to be matched with\nRCURLY. And STRING_DBEG does not perform a `cmdarg_push`. But RCURLY still\ndoes the `cmdarg_pop`.\n\nThere are bound to be problems in some cases which use dstrs... we just\nhaven't found them yet. Anyways, this does fix one problem at least.\n\nFixes #1228.\n",
    "head_branch": "fix_lambda2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091ead6ca63ac8d87ed33",
    "number": 1232,
    "body": "Closes #1187\n",
    "head_branch": "fix-module-prototype-chain",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091ebd6ca63ac8d87ed34",
    "number": 1231,
    "body": "¯_(ツ)_/¯\n",
    "head_branch": "issue-1230",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091ecd6ca63ac8d87ed35",
    "number": 1227,
    "body": "Just had to add a missing grammar rule.\n\nFixes #959.\n",
    "head_branch": "aref_block_arg",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1da8aca769515c2c42b84030318d42486ffecfcb into f58cf3ea853e4d6460af35bdc779e883f9fc1f10"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091edd6ca63ac8d87ed36",
    "number": 1226,
    "body": "The correct lexer state was not entered after lexing `|=` and `>>=`. Depending\non what followed after these operators, this could cause the parser to fail.\n\nFixes #599 and fixes #995.\n",
    "head_branch": "fix_op_asgn",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 40445ff23c4f205d470bb17cf8d5e8f7b40f13be into 0b1bf550381e023d381595f70cd85ca43d974d5d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091eed6ca63ac8d87ed37",
    "number": 1225,
    "body": "The (ludicrously convoluted) Ruby lexer has a number of states, which affect\nhow various constructs are lexed. There is a state called 'expr_mid', which is\nentered after lexing 'return', 'rescue', and a couple of other keywords.\n\n'expr_mid' state is very, very, very, very much like 'expr_beg' state. I still\nhaven't figured out exactly why it is needed. Anyways, when in expr_mid state,\nwe should lex %{ just like expr_beg state.\n",
    "head_branch": "fix_return_percent_str",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091efd6ca63ac8d87ed38",
    "number": 1224,
    "body": "The lexer has a special state in which it lexes \"do\" as kDO_BLOCK rather than\nkDO. It enters this state when parsing the arguments for a \"command\". (I am\nnot 100% sure, but I believe a \"command\" is a method call without explicit\nreceiver and without parentheses for arguments.)\n\nAlthough this 'cmdarg' state was entered when parsing the argument list\n(even an empty argument list) for a command, it wasn't cleared when entering\nthe body of a subsequent { } block. This meant that some constructs could not\nbe parsed correctly inside a { } block... unless there happened to be an\nintervening construct which cleared the 'cmdarg' lexer state.\n\nSo, clear the 'cmdarg' state when entering a { } body, and restore it when\nexiting.\n\nfixes #544 \n",
    "head_branch": "fix_lambda",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091f0d6ca63ac8d87ed39",
    "number": 1223,
    "body": "",
    "head_branch": "date",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091f1d6ca63ac8d87ed3a",
    "number": 1222,
    "body": "",
    "head_branch": "issue-1220",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091f2d6ca63ac8d87ed3b",
    "number": 1217,
    "body": "\"Reverts\" https://github.com/vais/opal/commit/4c619d48dbe1c73e4ec5a576fc33c84496cce2f4 now that https://github.com/opal/opal/issues/935 is fixed\n\nP.S. Sorry for the messy spec/filters/bugs/kernel.rb diff - I always order the `fail` lines automatically using unix `sort` utility.\n",
    "head_branch": "kernel-extend",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091f3d6ca63ac8d87ed3c",
    "number": 1216,
    "body": "@meh please review and merge\n",
    "head_branch": "elia/split-runtime-bridge",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 90b4942b2fa9d881be6e5d0d1657682c42c4db2f into 5b7d33c6fdd6642371fb491b050e635c8c922dc1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662091f3d6ca63ac8d87ed3d",
    "number": 1215,
    "body": "This is intended to fix #1202.\n\nBUT! But, test coverage is still needed! You can see I tried to add a test, but it seems that it's not even running. Can you point me to the best place to add tests for this syntax?\n\nRather than just testing that the parser returns the right AST, I'd like to actually test the semantics of expressions which use this syntax. I'd also like to add a test ensuring that the semantics of `cond ? a : b` are not broken.\n",
    "head_branch": "str_sym_literals_in_hash",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091f4d6ca63ac8d87ed3e",
    "number": 1214,
    "body": "**About opal/platform**\n\nThis file will take care of detecting the current platform and loading the\nproper IO & Kernel adapters. It's supposed to be expanded to other\nplatforms too.\n\n**About the cleanup**\n- use CLI runners instead of dumping to a file to better test runners*\n- use opal/platform to have a single task implementation for both node &\n  phantom\n- end the platform names with \"js\" so that they match the CLI runners\n- use a stock MSpec formatter (DottedFormatter)\n\nThis still leaves the need for separately testing the Sprockets stack.\n- this will make debugging slightly harder by not writing the resulting\n  JS to disk, but it will still be possible to copy the command\n  outputted by rake and manually add \"-c > output.js\".\n\n@opal/core heads up: the `mspec_*` task names have been changed\n",
    "head_branch": "elia/testing-cleanup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 8d7c193532c3c2525e34de8cff5974088bb24766 into 036578834b46cbdf4341ea14ffb56816c09d7f67"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091f5d6ca63ac8d87ed3f",
    "number": 1213,
    "body": "@opal/core adding `spec/a_file.rb` is a hack around this new problem we have with RubySpec: https://github.com/ruby/rubyspec/blob/master/fixtures/constants.rb#L287 (added in this commit https://github.com/ruby/rubyspec/commit/e78454c7467e89f44b3e81b55e46b8882eed8a10) Any ideas about what would be the \"right\" way for us to handle this?\n",
    "head_branch": "update-rubyspec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091f6d6ca63ac8d87ed40",
    "number": 1212,
    "body": "fix #1211 \n",
    "head_branch": "fix-native",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091f7d6ca63ac8d87ed41",
    "number": 1210,
    "body": "Needs `require \"opal-parser\"`.\n\nfixes #621\nfixes #480\nfixes #499\n",
    "head_branch": "elia/instance_eval_with_string",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091f8d6ca63ac8d87ed42",
    "number": 1209,
    "body": "When using methods on a struct, we don't need to check whether the struct has that as a member. If it doesn't we'll be invoking method_missing, not the subscript operator, so we can bypass all that and head straight to the good part.\n\nAdditionally, traversing the struct's members as an array is O(n), but checking whether the struct's data object has that key is O(1), so this commit speeds that up, as well.\n\nResults from `rake bench` (from left to right: master, this PR, MRI):\n\n```\ntest/cruby/benchmark/bm_vm2_struct_big_aref_hi.rb  12.814   0.796   0.261\ntest/cruby/benchmark/bm_vm2_struct_big_aref_lo.rb   9.565   0.794   0.266\ntest/cruby/benchmark/bm_vm2_struct_big_aset.rb      9.404   1.224   0.285\ntest/cruby/benchmark/bm_vm2_struct_small_aref.rb    5.989   0.049   0.190\ntest/cruby/benchmark/bm_vm2_struct_small_aset.rb    7.255   0.275   0.281\n```\n",
    "head_branch": "optimize-struct-access",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6499d1fb971696825ff632719f93daa2e99a2ef4 into 85c74f009e5bc0965d997768669d76fd50ec903a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091f9d6ca63ac8d87ed43",
    "number": 1208,
    "body": "Currently, it's hardcoded in the compiler to use `$slice.call(arguments, 0)`. This PR just does the usual arguments->array copy via iteration while also making the JS code less terrible than I've been doing by declaring that target variable with the rest of the locals. :-)\n\nResults from `rake bench` (from left to right: master, this PR, MRI):\n\n```\ntest/cruby/benchmark/bm_vm2_zsuper.rb              13.864  1.780   0.547\n```\n\nAs a bonus, I renamed the index variable for splat args and added a local variable for it. I hadn't intended to commit it but I apparently wasn't paying attention. :-) The only reason I changed it at all was because I originally used `arg_index` in both places, but `Struct.new` uses both splat args and bareword `super` so `var arg_index` in two places within the same scope caused JSHint to barf.\n",
    "head_branch": "optimize-zsuper",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091fad6ca63ac8d87ed44",
    "number": 1207,
    "body": "Using the class name and id aren't necessary in the hash function since the [Hash redux](https://github.com/opal/opal/pull/1035), which emulates MRI behavior with hash-function collisions.\n\nBelow is the change in performance in this PR. `Opal1` is current master. `Opal2` removes class metadata, but coerces `#hash` to a string. `Opal3` foregoes explicit string coercion because JS VMs coerce object property names to strings internally, which is faster. `Ruby1` is MRI 2.2.3p173.\n\n```\nBenchmark                                       Opal1   Opal2   Opal3  Ruby1\nbenchmark/bm_hash_assoc_object.rb               0.568   0.508   0.498  0.011\nbenchmark/bm_hash_assoc_string.rb               2.062   2.095   2.167  0.010\nbenchmark/bm_hash_clone_object.rb               2.208   2.151   1.647  0.659\nbenchmark/bm_hash_clone_string.rb               0.346   0.403   0.395  0.300\nbenchmark/bm_hash_delete_object.rb              0.083   0.061   0.053  0.014\nbenchmark/bm_hash_delete_string.rb              0.024   0.021   0.020  0.007\nbenchmark/bm_hash_each_key_object.rb            0.137   0.120   0.115  0.774\nbenchmark/bm_hash_each_key_string.rb            0.126   0.125   0.125  0.669\nbenchmark/bm_hash_each_object.rb                0.720   0.812   0.756  0.923\nbenchmark/bm_hash_each_string.rb                0.735   0.749   0.748  0.677\nbenchmark/bm_hash_each_value_object.rb          0.137   0.129   0.125  0.749\nbenchmark/bm_hash_each_value_string.rb          0.160   0.160   0.158  0.637\nbenchmark/bm_hash_element_reference_object.rb   0.075   0.055   0.049  0.009\nbenchmark/bm_hash_element_reference_string.rb   0.013   0.013   0.012  0.006\nbenchmark/bm_hash_element_set_object.rb         0.306   0.223   0.169  0.070\nbenchmark/bm_hash_element_set_string.rb         0.117   0.129   0.106  0.042\nbenchmark/bm_hash_equal_value_object.rb         7.702   3.174   1.482  2.056\nbenchmark/bm_hash_equal_value_string.rb         0.183   0.183   0.175  0.848\nbenchmark/bm_hash_fetch_object.rb               0.056   0.047   0.040  0.007\nbenchmark/bm_hash_fetch_string.rb               0.010   0.009   0.010  0.004\nbenchmark/bm_hash_flatten_object.rb             0.184   0.182   0.174  0.536\nbenchmark/bm_hash_flatten_string.rb             0.233   0.232   0.231  0.509\nbenchmark/bm_hash_has_key_object.rb             0.069   0.052   0.044  0.009\nbenchmark/bm_hash_has_key_string.rb             0.012   0.012   0.012  0.006\nbenchmark/bm_hash_has_value_object.rb           0.117   0.093   0.086  0.050\nbenchmark/bm_hash_has_value_string.rb           0.079   0.092   0.079  0.036\nbenchmark/bm_hash_hash_object.rb                1.338   0.864   0.820  0.029\nbenchmark/bm_hash_hash_string.rb                1.162   0.759   0.748  0.032\nbenchmark/bm_hash_inspect_object.rb             1.407   1.288   0.930  2.703\nbenchmark/bm_hash_inspect_string.rb             1.114   1.004   1.045  0.720\nbenchmark/bm_hash_invert_object.rb              0.709   0.213   0.149  0.053\nbenchmark/bm_hash_invert_string.rb              0.729   0.266   0.478  0.053\nbenchmark/bm_hash_keep_if_object.rb             2.048   1.708   1.810  0.397\nbenchmark/bm_hash_keep_if_string.rb             1.910   1.782   1.778  0.392\nbenchmark/bm_hash_key_object.rb                 0.115   0.098   0.113  0.082\nbenchmark/bm_hash_key_string.rb                 0.082   0.078   0.089  0.036\nbenchmark/bm_hash_keys_object.rb                0.653   0.618   0.621  0.248\nbenchmark/bm_hash_keys_string.rb                0.512   0.503   0.507  0.240\nbenchmark/bm_hash_literal_mixed_large.rb        3.109   1.932   1.711  0.528\nbenchmark/bm_hash_literal_mixed_small.rb        0.176   0.065   0.053  0.042\nbenchmark/bm_hash_literal_object_large.rb       3.272   0.980   0.813  0.608\nbenchmark/bm_hash_literal_object_small.rb       0.398   0.089   0.072  0.049\nbenchmark/bm_hash_literal_string_large.rb       0.044   0.045   0.045  2.856\nbenchmark/bm_hash_literal_string_small.rb       0.010   0.010   0.012  0.274\nbenchmark/bm_hash_merge_object.rb              10.142   3.048   1.757  1.878\nbenchmark/bm_hash_merge_string.rb               1.426   1.571   1.436  0.709\nbenchmark/bm_hash_rassoc_object.rb              0.102   0.103   0.100  0.077\nbenchmark/bm_hash_rassoc_string.rb              0.082   0.088   0.089  0.037\nbenchmark/bm_hash_rehash_object.rb              4.280   1.610   0.246  3.486\nbenchmark/bm_hash_rehash_string.rb              0.050   0.047   0.053  2.007\nbenchmark/bm_hash_reject_bang_object.rb         0.925   0.838   0.857  3.522\nbenchmark/bm_hash_reject_bang_string.rb         1.220   1.177   1.229  3.481\nbenchmark/bm_hash_reject_object.rb              1.844   1.397   1.326  0.287\nbenchmark/bm_hash_reject_string.rb              0.798   0.794   0.809  0.188\nbenchmark/bm_hash_replace_object.rb             9.550   5.070   3.977  2.087\nbenchmark/bm_hash_replace_string.rb             2.230   1.958   1.873  1.218\nbenchmark/bm_hash_select_bang_object.rb         1.166   1.053   1.021  3.510\nbenchmark/bm_hash_select_bang_string.rb         1.413   1.375   1.390  3.549\nbenchmark/bm_hash_select_object.rb              2.118   1.464   1.366  0.286\nbenchmark/bm_hash_select_string.rb              0.886   0.841   0.919  0.184\nbenchmark/bm_hash_shift_object.rb               6.388   4.115   3.061  0.627\nbenchmark/bm_hash_shift_string.rb               1.692   1.557   1.472  0.630\nbenchmark/bm_hash_to_a_object.rb                1.052   1.045   1.062  3.286\nbenchmark/bm_hash_to_a_string.rb                1.181   1.166   1.171  3.151\nbenchmark/bm_hash_to_h_object.rb               20.569  13.093  11.453  0.763\nbenchmark/bm_hash_to_h_string.rb                4.305   3.948   4.405  0.760\nbenchmark/bm_hash_values_object.rb              0.129   0.142   0.138  2.622\nbenchmark/bm_hash_values_string.rb              0.177   0.183   0.182  0.083\n```\n\nThe biggest win here is `Hash#merge`, which improves by an order of magnitude and catches up to MRI 2.2.3 performance. This is huge when you're using hashes as \"immutable\" trees (like in [GrandCentral](https://github.com/clearwater-rb/grand_central).\n\nAlso, comparing hashes by value (`==`) goes from over 3.5x slower than MRI before this PR to 25% _faster_ than MRI (7.7s on master, 1.5s in this PR, 2.06s on MRI).\n\nSeveral other object-key benchmarks improve by up to 30-100% vs master. In fact, there are a couple benchmarks that were negatively affected by the Hash redux which are now even faster than they were prior to it. They're methods that aren't heavily used (which is why it wasn't a problem with the Hash redux), but I thought that was pretty cool.\n",
    "head_branch": "optimize-kernel-hash",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091fbd6ca63ac8d87ed45",
    "number": 1206,
    "body": "See #1187 for details.\n\nI don't like how `Array#new` checks for a break in a passed block, but I don't see any other solution.\n\nAlso there's a performance regression:\n- `master`:\n\n```\ntest/cruby/benchmark/bm_so_array.rb     34.48100018501282\ntest/cruby/benchmark/bm_vm2_array.rb    0.04900002479553223\ntest/cruby/benchmark/bm_vm2_bigarray.rb 0.03899979591369629\n===============================================\nExecuted 3 benchmarks in 34.569000005722046 sec\n```\n- `patch`:\n\n```\ntest/cruby/benchmark/bm_so_array.rb     35.486000061035156\ntest/cruby/benchmark/bm_vm2_array.rb    0.046000003814697266\ntest/cruby/benchmark/bm_vm2_bigarray.rb 0.039999961853027344\n==============================================\nExecuted 3 benchmarks in 35.57200002670288 sec\n```\n",
    "head_branch": "stop-relying-on-method-missing-in-array-subclasses",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091fcd6ca63ac8d87ed46",
    "number": 1205,
    "body": "Clean up a bit of cruft in the grammar. If these are ever needed, they can\nbe added back.\n",
    "head_branch": "grammar",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091fdd6ca63ac8d87ed47",
    "number": 1204,
    "body": "I noticed a deoptimization in some of my profiling due to a `try` / `finally` block, which appears to come from [aliased methods](https://github.com/opal/opal/blob/2696a38c64e6b2e84a05e9ebc100bf6e3e651b3a/opal/corelib/runtime.js#L1351-L1358), which causes a deoptimization for that function. The profiler isn't mentioning the slice on `arguments`, probably because it stopped caring why the deoptimization occurred when it saw the try/finally.\n\nThis shows up a lot when using `Enumerable` seemingly because I use `map` instead of `collect` everywhere, including some of the hot spots [within Clearwater itself](https://github.com/clearwater-rb/clearwater/blob/master/opal/clearwater/component.rb#L177). But given how many methods on `Enumerable` alone are aliased and how frequently it may be used, this can have significant impact on an app. These deoptimized calls are 2-5% of the runtime in some of my Clearwater apps, for example.\n\nI tried adjusting the function wrapping to happen within the `Opal.alias` call, but I couldn't get it to go cleanly due to `$$p` and `$$s`. Everything just worked when I just removed the wrapping function — my Clearwater apps still rendered and the Opal tests still passed — so it doesn't seem that it's necessary anymore. In addition to removing unneeded function calls, this removes the deoptimizations that occur due to the try/finally block inside the wrapped alias function.\n\nBefore I tried it, I thought surely this wasn't going to work. There has to be a reason this was here. Whatever that reason was, it doesn't seem to be necessary anymore. :-)\n",
    "head_branch": "optimize-alias",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091fed6ca63ac8d87ed48",
    "number": 1203,
    "body": "Deleted one of repeated 'but' .\n",
    "head_branch": "delete-repeat-but",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662091ffd6ca63ac8d87ed49",
    "number": 1201,
    "body": "Makes https://github.com/opal/opal/pull/1186 behavior consistent\n\nFixes https://github.com/opal/opal/issues/1200\n",
    "head_branch": "clone_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209200d6ca63ac8d87ed4a",
    "number": 1199,
    "body": "",
    "head_branch": "opal_erb_dont_fix_quotes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209201d6ca63ac8d87ed4b",
    "number": 1198,
    "body": "…array if an instance variable is added\"\n",
    "head_branch": "instance_variables",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209202d6ca63ac8d87ed4c",
    "number": 1195,
    "body": "@elia You can add `-doe` option to see the stack trace.\n`jjs` binary must be in your `PATH`.\n\nWith jdk1.8.72:\n\n```\narray.js:3611:6 Error: [object Object]\narray.js:3611:6 Error: [object Object]\n    at jdk.nashorn.internal.objects.NativeError.initException(NativeError.java:137)\n    at jdk.nashorn.internal.objects.NativeError.captureStackTrace(NativeError.java:150)\n    at jdk.nashorn.internal.scripts.Script$Recompilation$192$114426A$array.L:3917$L:3922$L:3931(array.js:3941)\n    at jdk.nashorn.internal.scripts.Script$Recompilation$191$106310AA$array.L:2469$L:2480$L:3590(array.js:3606)\n    at jdk.nashorn.internal.scripts.Script$Recompilation$187$array.L:14708$L:14713$TMP_1(array.js:14741)\n    at jdk.nashorn.internal.scripts.Script$Recompilation$162$66464A$array.L:2266$L:2272$TMP_2(array.js:2336)\n    at jdk.nashorn.internal.scripts.Script$Recompilation$184$417462AA$array.L:14708$L:14977$TMP_16(array.js:14990)\n    at jdk.nashorn.internal.scripts.Script$Recompilation$180$417842A$array.L:14996(array.js:15002)\n    at jdk.nashorn.internal.scripts.Script$array.:program(array.js:14996)\n    at jdk.nashorn.internal.runtime.ScriptFunctionData.invoke(ScriptFunctionData.java:623)\n    at jdk.nashorn.internal.runtime.ScriptFunction.invoke(ScriptFunction.java:494)\n    at jdk.nashorn.internal.runtime.ScriptRuntime.apply(ScriptRuntime.java:393)\n    at jdk.nashorn.tools.Shell.apply(Shell.java:393)\n    at jdk.nashorn.tools.Shell.runScripts(Shell.java:322)\n    at jdk.nashorn.tools.Shell.run(Shell.java:171)\n    at jdk.nashorn.tools.Shell.main(Shell.java:135)\n    at jdk.nashorn.tools.Shell.main(Shell.java:111)\n```\n\n.array.rb\n\n``` ruby\nrequire 'set'\n\n['', 'DEFAULT'].to_set\n```\n",
    "head_branch": "pr-nashorn",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209203d6ca63ac8d87ed4d",
    "number": 1194,
    "body": "There are a couple of failure in the few specs/tests.\nNot sure if it's worth spending more time on this tho, long term target here is `optparse`.\n",
    "head_branch": "elia/shellwords",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209203d6ca63ac8d87ed4e",
    "number": 1193,
    "body": "",
    "head_branch": "kernel",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7aeacffbac6e853df77892cc27eb5c88d5508332 into 3586c752c1899316d8abaefba1f28a003b44dcff"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209204d6ca63ac8d87ed4f",
    "number": 1191,
    "body": "Things that has been changed to make `Marshal` working:\n- `Array#instance_variables` doesn't return indexes\n- `Module#instance_variables` doesn't return constants\n- `String` subclasses do not return `@literal` in ivars list.\n\nLimitations:\n- `Marshal.dump(:symbol)` - no Symbols support\n- String encoding - dumping/loading a string with custom encoding always dumps/loads utf-16 encoded string\n- Everything about String mutating - extended strings, ivars on strings and so on.\n- `Bignum`'s can't be encoded/decoded\n\n218 examples from rubyspec are passing (`Marshal#restore` is an alias to `Marshal#load`, so probably even 300), ~50 are failing.\n",
    "head_branch": "marshal-dump-load-restore-implementation-attempt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1191 from iliabylich/marshal-dump-load-restore-implementation-attempt\n\nBasic implementation of Marshal.load and Marshal.dump."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209205d6ca63ac8d87ed50",
    "number": 1190,
    "body": "Unlocks :sparkles: 62 :sparkles: more passing specs FTW, brings the current total to 6408 :tada: \n",
    "head_branch": "rubyspec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209206d6ca63ac8d87ed51",
    "number": 1189,
    "body": "",
    "head_branch": "2.2.3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209207d6ca63ac8d87ed52",
    "number": 1188,
    "body": "Fix #1183 \n",
    "head_branch": "fix-js-new",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209208d6ca63ac8d87ed53",
    "number": 1186,
    "body": "",
    "head_branch": "fix-ivars-for-js-keywords",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209209d6ca63ac8d87ed54",
    "number": 1185,
    "body": "In response to @vais (https://github.com/opal/opal/pull/1180#issuecomment-155060845) :)\n",
    "head_branch": "elia/on-commits",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge b78bd1a298e04751f1015d2f6d528252eab7ffda into cf58dfb23153b3cb55c777009640f1f986f56860"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620920ad6ca63ac8d87ed55",
    "number": 1180,
    "body": "Before:\n\n``` ruby\n>> nil.instance_variables\n=> [\"@apply\", \"@call\", \"@constructor\", \"@toString\"]\n>> {}.instance_variables\n=> [\"@map\", \"@keys\", \"@smap\", \"@constructor\", \"@none\", \"@proc\", \"@toString\"]\n>> Class.new.instance_variables\n=> [\"@constructor\", \"@toString\"]\n>> Module.new.instance_variables\n=> [\"@constructor\", \"@toString\"]\n```\n\nAfter:\n\n``` ruby\n>> nil.instance_variables\n=> []\n>> {}.instance_variables\n=> []\n>> Class.new.instance_variables\n=> []\n>> Module.new.instance_variables\n=> []\n```\n",
    "head_branch": "fix-ivars-for-nil-and-hash",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620920bd6ca63ac8d87ed56",
    "number": 1179,
    "body": "ref #1171 \n\nProbably `Opal.ac` still needs an update to support error messages with min and max arity\n",
    "head_branch": "elia/max-args-check",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620920cd6ca63ac8d87ed57",
    "number": 1178,
    "body": "",
    "head_branch": "rubyspec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620920dd6ca63ac8d87ed58",
    "number": 1177,
    "body": "Revise CONTRIBUTING.md to make it more in line with how the test suite works now and fix a couple bugs in the test suite.\n",
    "head_branch": "contrib",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620920ed6ca63ac8d87ed59",
    "number": 1172,
    "body": "Wasn't sure whether to leave the filled out `NameError` and `NoMethodError` classes in the same spot, but did so and preserved the indentation\n",
    "head_branch": "name_error",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620920fd6ca63ac8d87ed5a",
    "number": 1171,
    "body": "",
    "head_branch": "implement-enumerable-minmax",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209210d6ca63ac8d87ed5b",
    "number": 1170,
    "body": "",
    "head_branch": "implement-enumerable-each-cons",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge cebe00e4a02b71b139fa1cbc9f4b9083be92a3eb into c8a05f7ff39e39bc10454a12c4b21040c4c086bb"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209211d6ca63ac8d87ed5c",
    "number": 1169,
    "body": "Also make exception consistent and remove 2 rubyspec filters\n",
    "head_branch": "module_exec_signature",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1f9baea253e3cce2b2107b41cb40a8f5d81ee971 into 34c7365554dd100ea833c8a415f170b22a71b0dd"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209211d6ca63ac8d87ed5d",
    "number": 1168,
    "body": "Should keep code that calls this from throwing an error\n",
    "head_branch": "private_class_methods_sig_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209212d6ca63ac8d87ed5e",
    "number": 1167,
    "body": "We optimized splat args in the compiler before, but several places in the runtime still used the same slice idiom, which led to reduced performance in several code paths. This commit cleans up all the others I found.\n",
    "head_branch": "optimize-arguments-slicing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimize arguments slicing in more places (#1167)\n\nWe optimized splat args in the compiler before, but several places in\r\nthe runtime still used the same slice idiom, which led to reduced\r\nperformance in several code paths. This commit cleans up all the others\r\nI found."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209213d6ca63ac8d87ed5f",
    "number": 1166,
    "body": "Convert Ruby return to JS return and avoid the returner logic which adds a try {} catch around the entire method\n",
    "head_branch": "string_gsub_optimize",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209214d6ca63ac8d87ed60",
    "number": 1165,
    "body": "Remove flawed method check that was preventing something? from working with struct\n\nMethods ending in ?, !, etc. are valid but this check did not like them. In addition, it would fail silently, which isn't good. Since it was only used by the struct and was incomplete, I think removing it is the best option. it's probably better to have a built-in check inside define_method anyways\n",
    "head_branch": "struct_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209215d6ca63ac8d87ed61",
    "number": 1164,
    "body": "Decrease likelihood of https://github.com/opal/opal/pull/1162 resurfacing\n",
    "head_branch": "rubyspec_upg",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209216d6ca63ac8d87ed62",
    "number": 1162,
    "body": "Returns only self when it should, complies with 1 more rubyspec than before\n",
    "head_branch": "ancestors_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge cc0e680373b1be79783cbf3d4137427c0a674516 into 9091c52ccf12caa28a1c70c8198396ab57fe940e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209217d6ca63ac8d87ed63",
    "number": 1161,
    "body": "Exclude new struct tests\n\nCovers:\n- https://github.com/opal/opal/pull/1159\n- https://github.com/opal/opal/pull/1158\n- https://github.com/opal/opal/pull/1153\n",
    "head_branch": "rubyspec_upg",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209218d6ca63ac8d87ed64",
    "number": 1160,
    "body": "If exceptions were raised with just a class name, then undefined got set as the message, which broke the exception class\n\nFixes issue introduced by earlier PRs.\n",
    "head_branch": "exception_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209219d6ca63ac8d87ed65",
    "number": 1159,
    "body": "Should allow defining class methods properly in blocks\n\nRubyspecs PR - https://github.com/ruby/rubyspec/pull/150\n",
    "head_branch": "instance_eval_mod_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620921ad6ca63ac8d87ed66",
    "number": 1158,
    "body": "Fixed both `Module#instance_methods` and `Module#to_s`\n\nRubyspecs that will catch this are:\n- https://github.com/ruby/rubyspec/pull/148\n- https://github.com/ruby/rubyspec/pull/149\n",
    "head_branch": "instance_methods_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d5e9913334f1a836e3e3fd4832e5a2c66d5e623c into 660f93668912d965f8cd72d88a3172355c08147b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620921bd6ca63ac8d87ed67",
    "number": 1156,
    "body": "Issue that was breaking opal-rspec on 0.9\n\nSee https://github.com/opal/opal/issues/1154\n",
    "head_branch": "constants_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620921cd6ca63ac8d87ed68",
    "number": 1155,
    "body": "Have to go back to using @message to retain compatibility, made note and added an Opal test\n\nFixes problem introduced in https://github.com/opal/opal/pull/1151\n",
    "head_branch": "native_exception_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620921dd6ca63ac8d87ed69",
    "number": 1153,
    "body": "Rubyspecs for this are in https://github.com/ruby/rubyspec/pull/145\n",
    "head_branch": "undef_fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620921ed6ca63ac8d87ed6a",
    "number": 1152,
    "body": "",
    "head_branch": "set_superset",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620921ed6ca63ac8d87ed6b",
    "number": 1151,
    "body": "",
    "head_branch": "exception_class_fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620921fd6ca63ac8d87ed6c",
    "number": 1149,
    "body": "",
    "head_branch": "elia/issue-1149-merge-0-8-stable",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 50da89ee16c8963f9d5b441ee8b3066587648815 into 94cfbbdc95c7355fdbcde5268d68bccbeae597c3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209220d6ca63ac8d87ed6d",
    "number": 1150,
    "body": null,
    "head_branch": "fix-1146",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209221d6ca63ac8d87ed6e",
    "number": 1148,
    "body": "- `Opal.defs(obj, …)` is now just a proxy for `Opal.defn(Opal.get_singleton_class(obj), …)`\n- `Opal.get_singleton_class(obj)` now keeps a ref to `obj`\n  as `$$singleton_of` on the singleton. Simple circular refs like this\n  should be properly handled by JS engines.\n- `$$singleton_of` is used by `Opal.defn` to fire `#singleton_method_added`\n\nfixes #1111\n\nAlso `Kernel#define_singleton_method` is now almost compliant with rubyspec.\n",
    "head_branch": "elia/issue-1111-cleanup-opal-def",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge b477140bb6bd8a52c6b3f6894ca7bf36175d502d into d98d6db06a46f3bc56e18ccc9c0919bc6dd3f04d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209222d6ca63ac8d87ed6f",
    "number": 1147,
    "body": "",
    "head_branch": "fix-hash-hash-and-array-hash-in-recursive-cases",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209223d6ca63ac8d87ed70",
    "number": 1145,
    "body": "",
    "head_branch": "return-correct-size-of-array-combination-enumerator",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209224d6ca63ac8d87ed71",
    "number": 1144,
    "body": "",
    "head_branch": "fix-array-initialize-to-match-rubyspecs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209225d6ca63ac8d87ed72",
    "number": 1143,
    "body": "Without this patch it's impossible to run rubyspecs with some pattern and use filters, e.g. task\n\n```\nenv RUBYSPECS=true PATTERN=\"spec/rubyspec/core/array/initialize_spec.rb\" bundle exec rake mspec_rubyspec_node\n```\n\nwas invoking specs that are marked as `failed` or `unsupported`\n",
    "head_branch": "load-rubyspecs-filters-in-testing-tasks-before-loading-actual-specs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ff40fdeac9c9ecb92d09a151ee5b00d11b78d575 into a11e4d7b5ceb09d8e30f3b6a64eeae4f7a286685"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209226d6ca63ac8d87ed73",
    "number": 1141,
    "body": "overrides and closes #636\n",
    "head_branch": "elia/wmnnd-time",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 374a3d36f1583e8c92c5c197c6e971e53328a1b2 into b563d7a936766e803eeed473a93562fea363ca7a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209227d6ca63ac8d87ed74",
    "number": 1140,
    "body": "fixes #1137\nfixes #1121\n\ncloses #1136 - @wied03 noticed the PR just after I fixed the issue locally, sorry! 😓\n",
    "head_branch": "elia/operators-method-missing",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge af7db537e061a06f8109bb21c8b5045796247b2b into 6f0611eeb4df44f06bb912fca3b59a9116e9c86e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209228d6ca63ac8d87ed75",
    "number": 1139,
    "body": "fixes #1138\n",
    "head_branch": "elia/kernel_not_equal_fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 7fcdb3bce3e6cad6647342f94bded614d5b23392 into e35d5094170d6ecdba6a0e97e108a1342f14704b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209229d6ca63ac8d87ed76",
    "number": 1136,
    "body": "",
    "head_branch": "operator_stubs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620922ad6ca63ac8d87ed77",
    "number": 1135,
    "body": "…ented `#new_ostruct_member`, `#delete_field`, `#marshal_load`, `#marshal_dump`. Fully compliant except for frozen behavior. Borrowed self referential logic from Opal's Hash#hash\n- Update changelog\n- Enable rubyspecs for ostruct\n- Filter private/protected/frozen specs\n",
    "head_branch": "openstruct",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620922bd6ca63ac8d87ed78",
    "number": 1134,
    "body": "",
    "head_branch": "exception_inspect",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 64092c2ac72fa5cf8f5eb1eccaa8ad87b310afee into fc70e863601515009f458f42d6704adff9981be7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620922bd6ca63ac8d87ed79",
    "number": 1133,
    "body": "",
    "head_branch": "fix_pattern",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620922cd6ca63ac8d87ed7a",
    "number": 1132,
    "body": "My first foray into the parser world, fixes https://github.com/opal/opal/issues/1131\n\nRubyspecs that probably cover this are noted in the issue, but since we can't run those yet, addressed it in the parser specs\n",
    "head_branch": "method_call_hash_block",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a73c24e256f45f34a7b9080018fe09f371e61f0c into ba4786fa9a85dc7ca7a02a08db78aa710b80b1fa"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620922dd6ca63ac8d87ed7b",
    "number": 1129,
    "body": "Could potentially store a private source in the initializer with the sub of . to [\\S\\s] already done so that each match doesn't have to do it, but thought I'd defer that until caching comes up.\n",
    "head_branch": "regex_modifiers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620922ed6ca63ac8d87ed7c",
    "number": 1128,
    "body": "Who has two thumbs and has no idea what he's doing with parsers? THIS GUY!\n\nOn the bright side, this PR fixes #1127. I don't know if we should enable any RubySpecs for it, though. Could use some guidance there from someone more knowledgeable about RubySpec than I am.\n",
    "head_branch": "dsyms-are-symbols-too",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620922fd6ca63ac8d87ed7d",
    "number": 1123,
    "body": "…ime.js so that Number#hash can stay how it is and not make a Ruby method call)\n- Change kernel to hash the name, class ID, and object ID using the string hash method\n- Since string's hash is not itself anymore, changed pathname to hash its path and keep its specs passing\n- Rather than returning a string here, hash the overall result to be consistent with other changes\n- Fix struct hash method\n",
    "head_branch": "hash_method",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209230d6ca63ac8d87ed7e",
    "number": 1120,
    "body": "Fixes #1095\n",
    "head_branch": "recursive-native-hash-conversion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge fda1955484e4f0471fa8bfaa1349a01da1306390 into 07faa47123ab508ee5bb12e049e7c39c13862a57"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209231d6ca63ac8d87ed7f",
    "number": 1119,
    "body": "Fixes https://github.com/opal/opal/issues/1090 with a compiler fix and update to latest rubyspecs\n",
    "head_branch": "and_operator_work",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209232d6ca63ac8d87ed80",
    "number": 1118,
    "body": "Latest Rubyspecs, covers PR https://github.com/opal/opal/pull/1114\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209233d6ca63ac8d87ed81",
    "number": 1117,
    "body": "(moved work in https://github.com/opal/opal/pull/1105 to another branch):\n\nThis passes all of the raise/fail rubyspecs (except private methods). It comes at a cost though. In order to reset $! after every rescue like MRI does, I had to alter the compiler to make it a stack (JS array).\n\nI realize that may be too much since it adds a try {} finally {} to **every** rescue block. I thought I'd put it out here and see though.\n\nIf this can't be done cleanly using my approach or another approach, then I think Opal should explicitly say:\n- $! is not a supported global variable\n- As a result, you cannot re-raise exceptions by calling 'raise' without parameters\n\nIf this **is** acceptable, then:\n- I could also use some feedback on how I did the compiler tweaks. I didn't spend much time trying to do it 100% right since the idea might get squashed anyways.\n- I'll squash the commits\n",
    "head_branch": "raise_exception_work",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209234d6ca63ac8d87ed82",
    "number": 1114,
    "body": "Attempt to fix https://github.com/opal/opal/issues/1110\n\nTests for this are in https://github.com/ruby/rubyspec/pull/135\n",
    "head_branch": "anon_class_work",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209235d6ca63ac8d87ed83",
    "number": 1113,
    "body": "please check for typos and better wording (even after it's merged!)\n\ncc @orionz @vais @Ajedi32 @dancinglightning @peter-leonov\n\nfixes #230\n",
    "head_branch": "elia/opal-parser-docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209236d6ca63ac8d87ed84",
    "number": 1109,
    "body": "Three specs are `unsupported` - two of them because of symbols, [one](https://github.com/ruby/rubyspec/blob/master/core/enumerable/chunk_spec.rb#L63) because of opal's `String#equal?`\n",
    "head_branch": "implement-enumerable-chunk",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209237d6ca63ac8d87ed85",
    "number": 1107,
    "body": "The [spec](https://github.com/ruby/rubyspec/blob/master/core/struct/eql_spec.rb#L8) `Struct#eql? returns false if any corresponding elements are not #eql?` just cannot be implemented because of JS limitations. It automatically typecasts 1.0 to 1 (so they become eql).\n",
    "head_branch": "add-support-for-recursive-structs-comparison",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209237d6ca63ac8d87ed86",
    "number": 1106,
    "body": "Promised rubyspecs for https://github.com/opal/opal/pull/1104\n",
    "head_branch": "pp_rubyspec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209238d6ca63ac8d87ed87",
    "number": 1105,
    "body": "This passes all of the raise/fail rubyspecs (except private methods). It comes at a cost though. In order to reset $! after every rescue like MRI does, I had to alter the compiler to make it a stack (JS array).\n\nI realize that may be too much since it adds a try {} finally {} to **every** rescue block. I thought I'd put it out here and see though.\n\nIf this can't be done cleanly using my approach or another approach, then I think Opal should explicitly say:\n- $! is not a supported global variable\n- As a result, you cannot re-raise exceptions by calling 'raise' without parameters\n\nIf this **is** acceptable, then:\n- I could also use some feedback on how I did the compiler tweaks. I didn't spend much time trying to do it 100% right since the idea might get squashed anyways.\n- I'll squash the commits\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209239d6ca63ac8d87ed88",
    "number": 1104,
    "body": "- Use $stdout by default, which is closer to what MRI does (they use $<, but that would require more extensive gvars changes)\n- Remove the attempt at pretty printing by console.log'ing the object\n\nTests for this submitted as rubyspec PR https://github.com/ruby/rubyspec/pull/130\n\nOnce that makes its way into Opal's submodule, will need to add this to spec/rubyspecs\n\n```\nrubyspec/library/pp\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620923ad6ca63ac8d87ed89",
    "number": 1103,
    "body": "",
    "head_branch": "elia/mspec-phantomjs-rubyspec",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620923bd6ca63ac8d87ed8a",
    "number": 1102,
    "body": null,
    "head_branch": "elia/review-mspec-phantom",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 11bad90cb48e599120f2feb8eec3e06f5f7e5df7 into 19d432536b128ca2027dd4e3393019dc7a07d334"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6620923cd6ca63ac8d87ed8b",
    "number": 1101,
    "body": "The first spec which is related to lambdas is failing because of its dynamic name. Sometimes it's called\n\n```\nKernel.lambda returns from the kind_of? itself, not the creation site of the kind_of?\n```\n\nsometimes method name is different. When you run only one spec file containing this test, the method name in the message appears to be blank. This PR should be merged after [this pull](https://github.com/ruby/rubyspec/pull/129) is merged. And anyway, the spec if [failing](http://opalrb.org/try/?code:%24called%20%3D%20false%0A%0Adef%20test%0A%20%20lambda%20%7B%20return%20%7D.call%0A%20%20%24called%20%3D%20true%0Aend%0A%0Atest%0Aputs%20%24called%0A%0A%23%20----%0A%0A%24called%20%3D%20false%0A%0Adef%20test%0A%20%20proc%20%7B%20return%20%7D.call%0A%20%20%24called%20%3D%20true%0Aend%0A%0Atest%0Aputs%20%24called)\n\nThe second one is a bug in Opal. [Here](http://opalrb.org/try/?code:module%20M%0A%20%20eval%20%27def%20some_method%3B%20end%27%0Aend%0A%0Aputs%20Object.new.respond_to%3F%28%3Asome_method%29) is a quick demo. It seems that when Opal evaluates some code in context of class/module, the execution actually happens on `Kernel` and method becomes global. [This](https://github.com/ruby/rubyspec/blob/master/core/module/module_function_spec.rb#L232) is the test that generates a global method `test1`. And [this](https://github.com/ruby/rubyspec/blob/master/core/module/attr_writer_spec.rb#L11) is the test that fails because of the bug. So, one spec is actually broken, but it shows as green, the other spec becomes red because of the side effect.\n",
    "head_branch": "fix-randomly-failing-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620923dd6ca63ac8d87ed8c",
    "number": 1100,
    "body": "`SUITE=stdlib rake jshint` requires it\n",
    "head_branch": "add-uglifyjs-installation-to-travis-build",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620923ed6ca63ac8d87ed8d",
    "number": 1099,
    "body": "1. I've tried to extract methods `dup` and `clone` from `nil`, `true` and `false` to separated modules like `Opal::Unclonable` and `Opal::Undupable` but it raises an error during compilation (in method `const_get`, `Object Undumpable has no method '$split'`). Any advice with it?\n2. `Symbol#clone` should also raise an error, but as I see, Opal doesn't support it. Just wondering if you have any plans to implement it. If not - should I move related rubyspec to `/unsupported`?\n3. `Array` and `String` classes have its own implementation of `clone` and `dup`. The only difference is that they don't call `allocate`. Was it made intentionally for optimization?\n4. One of rubyspecs related to `String#clone` [calls](https://github.com/ruby/rubyspec/blob/master/core/string/clone_spec.rb#L53) `String#[]=`. I assume this rubyspec should be moved to unsupported group, because Opal doesn't support string modifications.\n",
    "head_branch": "copy-singleton-method-on-object-cloning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620923fd6ca63ac8d87ed8e",
    "number": 1098,
    "body": "- Added \"wrapping javascript libraries\" section with three options discussed in #1019, along with trade-offs.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209240d6ca63ac8d87ed8f",
    "number": 1097,
    "body": "I noticed we were first comparing to `nil`, then `!boolean || true`. Judging by the test that this patch fails, it seems to be that we're accounting for a special case where a monkeypatched `Boolean` method in Opal code could return `self`. I think it's great to cover all the bases, but it seems like an obscure case and truthiness checks would execute about 33% faster on average without it. (Benchmark code [here](https://gist.github.com/jgaskins/591474508055b2f8c591).)\n\nCurrent master:\n\n```\nif true        : 19,636,814\nif truthy value: 17,418,954\nif false       : 15,485,197\nif nil         : 17,246,398\n```\n\nWith this patch:\n\n```\nif true        : 22,655,235\nif truthy value: 23,646,471\nif false       : 23,254,342\nif nil         : 23,458,954\n```\n\nThe difference in a real-world app isn't as high because most apps that care about performance and developer sanity aren't rapid-fire conditional statements, but it's about 5% when rendering an [obnoxiously huge Clearwater app](https://clearwater-roda-example.herokuapp.com/obnoxiously_huge_page):\n\n```\nBefore:\n[Log] Generated virtual DOM in 541ms\n\nAfter:\n[Log] Generated virtual DOM in 514ms\n```\n\nAdmittedly, this part is a bit less scientific. This _is_ over several renders, but I'm too lazy to write the numbers down and figure out various stats over them, so I made a mental note of the numbers and just went with the ones for each version that seemed like they would be around the 20th percentile. They were all over the place (I had the devtools open to see the logs), so I could easily be wrong in one direction or another. One thing is for sure, though: it _is_ faster. :-)\n\nI'm aware that this PR involves a tradeoff — we lose a piece of edge-case coverage for faster execution — so closing or merging this PR is really a matter of deciding which of the two is more important. I want to argue in favor of ditching the edge case because it seems so obscure to me but I realize I don't have all the context. I assume someone had a reason for it since there's a test. :-)\n",
    "head_branch": "optimize-truthiness",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209240d6ca63ac8d87ed90",
    "number": 1096,
    "body": "A lot of the optimizations we did before on splat args worked really well to speed things up, but I noticed some more places during profiling that said the VM couldn't optimize certain method calls because it used `Array.prototype.slice.call(arguments, n)` during arg splatting. v8's warning message for it was \"bad value context for arguments value\", presumably because we were calling an Array prototype function on something that's not technically an array.\n\nThis patch replaces the `slice` call with old-school iteration. Here are the benchmarks before and after the patch — they're iteration counts over 5 seconds, so larger is better:\n\n```\nChrome 45\n\nBefore:\n1 arg : 9,700,318\n3 args: 7,923,521\n5 args: 8,756,920\n\nAfter:\n1 arg : 18,278,855\n3 args: 17,146,539\n5 args: 16,672,049\n```\n\n```\nSafari 9\n\nBefore:\n1 arg: 13,294,087\n3 args: 12,640,861\n5 args: 11,544,130\n\nAfter:\n1 arg: 17,845,844\n3 args: 17,696,489\n5 args: 17,382,340\n```\n",
    "head_branch": "optimize-splat-args",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209241d6ca63ac8d87ed91",
    "number": 1094,
    "body": "Rubyspec says that it should be possible to override `Struct#initialize` and \"try\" to override attributes:\n\n``` ruby\nUser = Struct.new(:name) do\n  def initialize(*)\n    self.name = 'Name'\n    super\n  end\nend\n\n# However, the username should be taken from arguments:\nUser.new.name\n# => nil\n```\n\nTo make method `user` to not raise error, variable `@data` need to be initialize before `initialize` is invoked.\n\nThat's why `Struct#@data` should be:\n1. lazily initialized using method `data` (which makes impossible for `Struct` to have an attribute `data`)\n2. explicitly initialized every time when we access it\n\nEvery object in MRI has some core methods, which makes impossible for `Struct` to have _any_ attribute names:\n\n``` ruby\nS = Struct.new(:marshal_dump, :marshal_load)\nMarshal.load(Marshal.dump(S.new))\n# => ArgumentError: wrong number of arguments(1 for 0)\n```\n\nCan we just rename this 'virtual' method `data` (which actually doesn't exist yet) to something like `__data__` and lazily initialize variable `@data`?\n",
    "head_branch": "store-struct-attributes-in-hash-instead-of-ivars",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209242d6ca63ac8d87ed92",
    "number": 1093,
    "body": "I saw that both on http://opalrb.org and on the README, we talk about `opal-parser.js` but there's no docs about how to use it\n\nSo I added some _very_ basic  instructions on how to user opal-parser on the README just so the user can be aware of that possibility. \n",
    "head_branch": "inline-ruby",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209243d6ca63ac8d87ed93",
    "number": 1092,
    "body": "Just a few questions:\n1. Is it ok to move validations like this to a separated class/module? To be honest, I don't know which conventions are you using, so I've made it just like in rubinius (an equivalent to `Rubinius::Type`).\n2. There was an issue with ivar name validation, initially I was going to make it using ruby regexes, but different rubyspecs related to regexes and `MatchData` started failing. All of them seems to be related to usage of `$'` which is a global variable containing last match data. So, the situation was the following: some spec calls `String#match` -> then it calls (somewhere inside) `Kernel#instance_variable_get` -> it calls opal's `String#match` -> overrides `$'` -> spec becomes broken, expected value returns new `MatchData`. So is it generally correct to test  global variables this way (I mean is it a RubySpec issue?).\n3. I've added validation of instance variable names and some opal functionality appeared to be broken. `Struct` supports `-` in attribute names, and in opal it was using instance variables for its attributes (instance variables can't contain dash), so I had to change this behavior to store attrs using a simple hash inside. Is it ok? As an alternative, I can re-write it to call something like `attribute.underscore` to determine instance variable name and use in both reader- and writer-methods\n",
    "head_branch": "add-validation-of-ivar-get-and-set",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209244d6ca63ac8d87ed94",
    "number": 1091,
    "body": "Based on [rubinius implementation](https://github.com/rubinius/rubinius/blob/master/kernel/common/array.rb#L276).\n\nbtw, two specs from rubyspec suite are failing for me locally:\n\n```\nKernel.lambda returns from the to_int itself, not the creation site of the to_int\nModule#attr_writer creates a setter for each given attribute name\n```\n\nAnd they were failing before. However on CI everything seems to be fine.\n",
    "head_branch": "fix-recursive-array-comparison",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209245d6ca63ac8d87ed95",
    "number": 1088,
    "body": "The example was calling the sprockets asset without debug mode enabled.\n\nfixes #1031\n",
    "head_branch": "elia/fix-sinatra-example",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209246d6ca63ac8d87ed96",
    "number": 1087,
    "body": "WIP, waiting for feedback from @shevegen re #1043 \n",
    "head_branch": "elia/readme-usage",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209247d6ca63ac8d87ed97",
    "number": 1086,
    "body": "This should add the benefit of maintainability of guides for different versions.\n\nAlso the doc generation stuff [has been extracted to a separate repo](https://github.com/opal/docs), the idea is to have the main repo just as the docs source. Ideally for each release the api docs will be generated, the guides can instead follow the `*-stable` branches but probably would be easier to just update them on releases.\n\nThe idea is to roughly replicate the rails strategy (e.g. http://guides.rubyonrails.org/v4.1.8/ and http://api.rubyonrails.org/v4.1.11/).\n",
    "head_branch": "docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209248d6ca63ac8d87ed98",
    "number": 1084,
    "body": "This solution creates some corner cases with `ancestors` like in the following example:\n\n``` ruby\nmodule ComparesByValue\n  def <=>(other)\n    self.value <=> other.value\n  end\nend\n\nclass A < Struct.new(:value)\n  include ComparesByValue\n  include Comparable\nend\n\nputs A.new(1) < A.new(2)\n# true for MRI 2.2.3\n# false for Opal\n```\n\nAt the same time, rubyspecs for `Kernel#<=>` are [quite strange](https://github.com/ruby/rubyspec/blob/master/core/kernel/comparison_spec.rb). Because of specs implementation we have to call `==` in `Kernel#<=>`, while `Comparable#==` depends on `Kernel#<=>` (when it was not overwritten on subclass level) which calls infinite recursion.\n\nI agree that this solution is not full and ideal, so I'm ok if you reject this PR, but does anyone have any other ideas?\n\nBtw, running the following code in `opal-repl` causes MRI crash:\n\n``` ruby\nclass A\n  include Comparable\nend\nA.new <=> 1\n```\n",
    "head_branch": "implement-comparable-methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209249d6ca63ac8d87ed99",
    "number": 1083,
    "body": "",
    "head_branch": "implement-missing-methods-on-nil",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620924ad6ca63ac8d87ed9a",
    "number": 1081,
    "body": "Ruby specs were available for https://github.com/opal/opal/pull/1078 (commit 35b2a095dd6def54078f1ff57a141470ab62d566), so removing the custom specs that were added and using those\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620924bd6ca63ac8d87ed9b",
    "number": 1078,
    "body": "https://github.com/opal/opal/issues/1077\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620924cd6ca63ac8d87ed9c",
    "number": 1072,
    "body": "I ran a benchmark that sorts a shuffled array of 50k objects. That\nbenchmark ran in 1040-1100ms under Safari.\n\nUsing JavaScript array indexing inside the sort function instead of Ruby array indexing dropped that number down to about 500-520ms. Mapping and sorting a single additional array (down from 3) reduced the range to 460-480ms.\n",
    "head_branch": "optimize-enumerable-sort_by",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620924dd6ca63ac8d87ed9d",
    "number": 1066,
    "body": "Again dependant on #1063.\n\n@elia try this with `opal-jquery` and `opal-rspec`, if it works I'm merging the bridging stuff.\n\n/cc @adambeynon, @vais\n",
    "head_branch": "cherry",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 8dfe60944289678ee3e85bf0c858d8cffa39a370 into ddb48e72b95495e1fab5a2a9f360a254cb3962d7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620924ed6ca63ac8d87ed9e",
    "number": 1064,
    "body": "Obviously dependant on #1063.\n\n/cc @vais\n",
    "head_branch": "numeric-redux",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 1187fee04f7fd3bebe86d2dc07b4933dbdbba8e6 into 8dfe60944289678ee3e85bf0c858d8cffa39a370"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620924ed6ca63ac8d87ed9f",
    "number": 1063,
    "body": "It's basically done par a not false-positive in the specs.\n\nI want some eyes on it since it's a pretty big change, if I've done everything right it will allow proper `Numeric` semantics.\n\n/cc @opal/owners \n\nfixes #313 \n",
    "head_branch": "bridging-redux",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge ddb48e72b95495e1fab5a2a9f360a254cb3962d7 into 3c905565965d61229881facdd325240e755c9fa9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6620924fd6ca63ac8d87eda0",
    "number": 1061,
    "body": "`Hash#merge`, being implemented in terms of `Hash#merge!`, doesn't need to worry about coercion or returning the duplicate because those are taken care of in `merge!`, allowing us to simplify this to a single line of code.\n",
    "head_branch": "simplify-hash-merge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209250d6ca63ac8d87eda1",
    "number": 1060,
    "body": "@meh unfortunately we are still blocked by parser errors from executing the language specs that @eregon [pointed out to me before as pertaining to splat behavior](https://github.com/ruby/rubyspec/pull/74#issuecomment-111645887). Namely, `language/yield_spec.rb`, `language/method_spec.rb`, `language/block_spec.rb`, and `language/send_spec.rb` are all no-go because Opal currently cannot parse those files.\n\nThe good news is one of the specs @eregon referred to, `language/array_spec.rb`, does run. So, I removed all failures from our bugs/language filter, re-ran the spec suite, and found a few new :sparkles: specks :sparkles: of :sparkles: gold at the bottom of the pan (see below).\n\nThanks!\n",
    "head_branch": "language",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209251d6ca63ac8d87eda2",
    "number": 1059,
    "body": "The old cache key hack has been removed.\n\nAdd `Opal::Processor.cache_key` and `Opal::Processor.reset_cache_key!` to\nreset it as it’s cached but should change whenever the `Opal::Config` changes.\n",
    "head_branch": "0-8-sprockets-cache-key",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 301415aaa2f213b48f682326f9fa8951d26e332c into 8720b2f173e979bee6586acc6736a289b2baa3fd"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209252d6ca63ac8d87eda3",
    "number": 1057,
    "body": "The old cache key hack has been removed.\n\nAdd `Opal::Processor.cache_key` and `Opal::Processor.reset_cache_key!` to \nreset it as it’s cached but should change whenever the `Opal::Config` changes.\n- [ ] add a change log entry\n",
    "head_branch": "0-8-sprockets-cache-key",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209253d6ca63ac8d87eda4",
    "number": 1052,
    "body": "Creating an array out of the range and then choosing a random element is elegant but, as you might imagine, not very performant for wide ranges. :-)\n\nThis patch boosts performance of `rand(1...10)` by 8.5x in Safari 9 on my machine.\n",
    "head_branch": "optimize-rand-range",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209254d6ca63ac8d87eda5",
    "number": 1051,
    "body": "We can just copy over the entire maps and keys wholesale, which saves anywhere from 60-80% of the cloning time, depending on the VM.\n\nThis patch dropped merging a 100,000-key hash from 89ms to 18ms in Safari — 189->73 in Chrome.\n",
    "head_branch": "optimize-hash-clone",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209255d6ca63ac8d87eda6",
    "number": 1050,
    "body": "",
    "head_branch": "array",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209256d6ca63ac8d87eda7",
    "number": 1048,
    "body": "This is the result of modifying `Class#new` with one of my experiments from #1045 and rendering an intentionally large VDOM in a Clearwater app went from 303ms down to 267ms in Chrome, a time savings of 11.8% — roughly what I saw in those experiments.\n\nAfter the VM invokes the JIT/optimizer (about 2-3 renders in), rendering without this patch converged on 123ms. With this patch, those same renders hit 101ms. This is 17.9% better, so subsequent renders benefit even more.\n",
    "head_branch": "optimize-instantiation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209257d6ca63ac8d87eda8",
    "number": 1047,
    "body": "Fix #932\n",
    "head_branch": "proc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209258d6ca63ac8d87eda9",
    "number": 1046,
    "body": "",
    "head_branch": "array",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209258d6ca63ac8d87edaa",
    "number": 1042,
    "body": "",
    "head_branch": "rubyspec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209259d6ca63ac8d87edab",
    "number": 1040,
    "body": "The performance numbers below make this one a difficult sell. But... here's the background. MRI uses helper hashes to implement these `Array` methods, automatically giving them `Hash`-y semantics. In Opal, I hand-coded said `Hash` semantics into the implementation of these methods because at the time `Hash` itself was not fully compliant. Now it is, and having this duplication comes with all the usual \"benefits\" of code duplication, plus more. RubySpec is awesome, but it is neither perfect nor complete at any point in time. It does specify `Hash` behavior separately from these `Array` behaviors, meaning there is some overlap in spec coverage, but also meaning there can be gaps in both. Having a single code path for these behaviors means that we benefit from all the `Hash` specs and all the `Array` specs, with the overlap filling any potential gaps in each.\n\nSo, the tradeoff here is performance vs correctness and maintainability in the long-term. I think Opal is _fast enough_, and it is more important for it to be correct than to shave a few tenths of a second over some 2_000_000 method calls (in benchmarks I use arrays of 1000 elements, 1000 iterations, 2 method calls per iteration).\n\nHope you agree with my reasoning (or offer a way to further improve performance) :sweat_smile:  \n\n`Opal1` is master, `Opal2` is after the changes, `Ruby1` is MRI (ruby 2.2.2p95 (2015-04-13 revision 50295) [x86_64-darwin14])\n\n```\n$ bundle exec rake bench:report\nBenchmark                                   Opal1  Opal2  Ruby1\nbenchmark/bm_array_intersection_numbers.rb  1.267  1.532  0.717\nbenchmark/bm_array_intersection_objects.rb  2.322  3.109  3.204\nbenchmark/bm_array_intersection_strings.rb  0.791  0.914  1.042\nbenchmark/bm_array_minus_numbers.rb         1.403  2.711  0.775\nbenchmark/bm_array_minus_objects.rb         2.293  3.633  2.200\nbenchmark/bm_array_minus_strings.rb         0.795  0.920  0.977\nbenchmark/bm_array_union_numbers.rb         2.041  4.304  1.182\nbenchmark/bm_array_union_objects.rb         4.145  5.349  2.571\nbenchmark/bm_array_union_strings.rb         1.524  1.379  1.347\nbenchmark/bm_array_uniq_bang_numbers.rb     0.524  0.805  0.209\nbenchmark/bm_array_uniq_bang_objects.rb     1.077  1.765  0.591\nbenchmark/bm_array_uniq_bang_strings.rb     0.345  0.429  0.409\nbenchmark/bm_array_uniq_numbers.rb          0.536  1.958  0.277\nbenchmark/bm_array_uniq_objects.rb          1.153  2.464  0.735\nbenchmark/bm_array_uniq_strings.rb          0.387  0.615  0.414\n```\n\nNote that we are taking a hit on arrays of numbers because they are now treated as object keys in the hash, so their performance basically levels up to that of arrays of objects. If `Hash` were to special-case numbers as it does strings, the performance of number arrays would be closer to that of string arrays than that of object arrays. @elia I hope you understand (given this example) what I meant regarding special-casing numbers. Yes, it is a rare use case to have numeric keys in hashes, but you're thinking about user-land hashes. Hashes are used internally in Ruby for all sorts of things like this. I'm not arguing for it though - like I said above, I think it's fast enough, and only looks slower in comparison with the previous numbers :wink: \n",
    "head_branch": "array",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1ed2e9e5b4080e7d0c77646704400367944068d4 into 5328b8c8c87097bc9d90add15adbd8a8b013f789"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620925ad6ca63ac8d87edac",
    "number": 1039,
    "body": "",
    "head_branch": "regexp-casefold",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d3eda26bc4efb44c8794c662577bd4c949eeb7be into 2402e859de33df6821b90738a205c5a0afbdc26f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620925bd6ca63ac8d87edad",
    "number": 1038,
    "body": "",
    "head_branch": "struct-each_pair",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620925cd6ca63ac8d87edae",
    "number": 1037,
    "body": "Fix #1034\n",
    "head_branch": "fix-issue-1034",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620925dd6ca63ac8d87edaf",
    "number": 1036,
    "body": "",
    "head_branch": "fix-sprockets-root-with-special-chars",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f642f90fc72fc916e065ac9340620048ad4e7a50 into ae8e62dfc40bc61936d9ab985e879c54f660bd05"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620925ed6ca63ac8d87edb0",
    "number": 1035,
    "body": "These changes to `Hash` internals are explained in `spec/opal/core/hash/internals_spec.rb`\n\nPerformance-wise, `Opal1` below is running under the current master, `Opal2` is after the changes. As usual, `Ruby1` represents the same benchmarks running under MRI (ruby 2.2.2p95 (2015-04-13 revision 50295) [x86_64-darwin14]) provided as a base line/reference.\n\nMaking sure that the most common case for hashes (hashes with symbol/string keys) is not negatively impacted was a major consideration while making these changes.\n\nE.g. `bm_hash_literal_string_*` below tests the performance for hash literals.\n\n```\n$ bundle exec rake bench:report\nBenchmark                             Opal1   Opal2  Ruby1\nbm_hash_assoc_object.rb               0.674   0.835  0.015\nbm_hash_assoc_string.rb               2.875   2.783  0.012\nbm_hash_clone_object.rb               1.924   1.731  0.671\nbm_hash_clone_string.rb               0.168   0.336  0.749\nbm_hash_delete_object.rb              0.738   0.146  0.018\nbm_hash_delete_string.rb              2.955   0.029  0.008\nbm_hash_each_key_object.rb            0.162   0.245  1.259\nbm_hash_each_key_string.rb            0.143   0.162  0.852\nbm_hash_each_object.rb                7.058   0.838  1.164\nbm_hash_each_string.rb                0.812   0.860  0.928\nbm_hash_each_value_object.rb          5.769   0.266  1.149\nbm_hash_each_value_string.rb          0.204   0.204  0.847\nbm_hash_element_reference_object.rb   0.109   0.209  0.017\nbm_hash_element_reference_string.rb   0.016   0.020  0.013\nbm_hash_element_set_object.rb         0.397   0.765  0.121\nbm_hash_element_set_string.rb         0.137   0.135  0.067\nbm_hash_equal_value_object.rb        12.652   9.508  3.091\nbm_hash_equal_value_string.rb         2.387   0.209  1.204\nbm_hash_fetch_object.rb               0.098   0.113  0.011\nbm_hash_fetch_string.rb               0.013   0.014  0.013\nbm_hash_flatten_object.rb             6.423   0.208  0.775\nbm_hash_flatten_string.rb             0.240   0.249  0.678\nbm_hash_has_key_object.rb            11.211   0.124  0.013\nbm_hash_has_key_string.rb            13.989   0.019  0.007\nbm_hash_has_value_object.rb           0.735   0.232  0.095\nbm_hash_has_value_string.rb           0.118   0.121  0.044\nbm_hash_hash_object.rb                2.297   2.118  0.042\nbm_hash_hash_string.rb                1.865   1.858  0.045\nbm_hash_inspect_object.rb             3.413   1.933  3.006\nbm_hash_inspect_string.rb             1.363   1.424  0.923\nbm_hash_invert_object.rb              2.657   0.781  0.097\nbm_hash_invert_string.rb              0.973   0.762  0.070\nbm_hash_keep_if_object.rb             8.114   2.941  0.522\nbm_hash_keep_if_string.rb             3.156   3.153  0.498\nbm_hash_key_object.rb                 0.441   0.165  0.099\nbm_hash_key_string.rb                 0.118   0.116  0.050\nbm_hash_keys_object.rb                0.101   0.353  0.328\nbm_hash_keys_string.rb                0.073   0.230  0.525\nbm_hash_literal_mixed_large.rb        2.453   3.058  0.557\nbm_hash_literal_mixed_small.rb        0.879   0.953  0.058\nbm_hash_literal_object_large.rb       3.797   4.682  0.724\nbm_hash_literal_object_small.rb       1.040   1.190  0.065\nbm_hash_literal_string_large.rb       0.050   0.048  3.735\nbm_hash_literal_string_small.rb       0.018   0.017  0.314\nbm_hash_merge_object.rb               9.815  12.055  2.569\nbm_hash_merge_string.rb               0.710   1.735  0.935\nbm_hash_rassoc_object.rb              0.953   0.147  0.077\nbm_hash_rassoc_string.rb              0.117   0.124  0.052\nbm_hash_reject_object.rb              6.581   2.450  0.380\nbm_hash_reject_string.rb              0.776   1.145  0.284\nbm_hash_replace_object.rb             7.399  11.178  2.851\nbm_hash_replace_string.rb             0.805   1.843  1.605\nbm_hash_select_bang_object.rb        34.367   1.652  5.126\nbm_hash_select_bang_string.rb         1.712   1.710  4.431\nbm_hash_select_object.rb              2.631   5.149  0.353\nbm_hash_select_string.rb              0.910   1.037  0.346\nbm_hash_shift_object.rb               5.228   6.834  0.987\nbm_hash_shift_string.rb               1.724   1.842  0.446\nbm_hash_to_a_object.rb               31.863   1.011  6.587\nbm_hash_to_a_string.rb                1.341   1.379  5.287\nbm_hash_to_h_object.rb               16.200  22.642  2.482\nbm_hash_to_h_string.rb                1.423   3.510  2.575\nbm_hash_values_object.rb              8.107   0.145  0.131\nbm_hash_values_string.rb              0.196   0.185  0.080\n```\n\n:beers:\n",
    "head_branch": "hash",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620925fd6ca63ac8d87edb1",
    "number": 1032,
    "body": "Opal::Server won't work without at least configuring 'main'. This small change makes that clearer.\n",
    "head_branch": "server-unconfigured-main-exception",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209260d6ca63ac8d87edb2",
    "number": 1030,
    "body": null,
    "head_branch": "fix-json-cget",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209261d6ca63ac8d87edb3",
    "number": 1029,
    "body": "",
    "head_branch": "rubyspec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209262d6ca63ac8d87edb4",
    "number": 1025,
    "body": "I finished my work on Bignums for Opal. Here is my result on it.\nAll Tests passes, but some motifications must be merged to ruby/rubyspec: https://github.com/ruby/rubyspec/pull/100\nand mspec fixnum_max and min helpers https://github.com/ruby/mspec/pull/7\n\nI put the implementation to the stdlib because Bignums need not be loaded for every Opal project.\nThis Implementation needs even not to stay in the Opal Repository. An external Gem could be made for it.\n\nBut do integrate such a Gem changes on the Compiler must be done. I simple compile a Bignum to a String and call the to_i method on the String. This method can be override by an external Gem and return a Bignum Object if necessary. I put Fixnum::MAX and Fixnum::MIN to the lexer to set the boundary between Fixnum and Bignum.\nCurrently this is set to 2**53 which is the highest Integer Javascript can store safely.\nThe minimalistic Add and Mult method is necessary to let the opal-parser in the stdlib work.\n\nOne big problem are the inline operators, i dont got a workarround for this. The inline operators must be turned of when automatic conversion from Fixnum to Bignum is requiered.\n\nI think it would be cool to give people the possibiltiy to use Bignums in Opal as in MRI ruby. This Pullrequest does this.\n\nHope you like it. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209263d6ca63ac8d87edb5",
    "number": 1022,
    "body": "fixes #1020\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209263d6ca63ac8d87edb6",
    "number": 1017,
    "body": "",
    "head_branch": "array-uniq-block",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209264d6ca63ac8d87edb7",
    "number": 1016,
    "body": "",
    "head_branch": "array-identical-item",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209265d6ca63ac8d87edb8",
    "number": 1015,
    "body": "",
    "head_branch": "console-log",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209266d6ca63ac8d87edb9",
    "number": 1014,
    "body": "",
    "head_branch": "array",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209267d6ca63ac8d87edba",
    "number": 1011,
    "body": "Fix #1009 \n\n![YO, DAWG, I HEARD YOU LIKE FUNCTIONS, SO I PUT MORE FUNCTIONS IN YOUR FUNCTIONS' FUNCTIONS](https://cloud.githubusercontent.com/assets/77592/8728231/27cb4dd0-2c0e-11e5-984c-47ce7441f356.png)\n",
    "head_branch": "proc-curry",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge fdfe1c9f653c240e26e37858103121b894c559dd into d18909fbe5860a883023288f00d6e7cb78fe2fba"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209268d6ca63ac8d87edbb",
    "number": 1010,
    "body": "",
    "head_branch": "rubyspec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209269d6ca63ac8d87edbc",
    "number": 1008,
    "body": "Fix #1007 \nFix #972\n\nSpecial thanks to @cj for submitting the original issue that broke opal-rspec, and to @Ajedi32 for [pointing me in the right direction](https://github.com/opal/opal/issues/972#issuecomment-120942281).\n",
    "head_branch": "method-to_proc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620926ad6ca63ac8d87edbd",
    "number": 1005,
    "body": "Fix #1001 \n\n```\n$ bundle exec rake bench:clear\n...\n$ git checkout master\n...\n$ bundle exec rake bench:opal[benchmark/bm_array_*]\n...\n$ git checkout array\n...\n$ bundle exec rake bench:opal[benchmark/bm_array_*]\n...\n$ bundle exec rake bench:ruby[benchmark/bm_array_*]\n...\n$ bundle exec rake bench:report\nBenchmark                                    Opal1  Opal2  Ruby1\nbenchmark/bm_array_minus_numbers.rb          0.559  1.382  0.773\nbenchmark/bm_array_minus_objects.rb          7.182  2.543  2.228\nbenchmark/bm_array_minus_strings.rb          0.563  0.929  1.055\nbenchmark/bm_array_union_numbers.rb          1.010  2.204  1.178\nbenchmark/bm_array_union_objects.rb         14.399  4.510  2.555\nbenchmark/bm_array_union_strings.rb          1.262  1.958  1.422\nbenchmark/bm_array_uniq_bang_numbers.rb      0.262  0.568  0.221\nbenchmark/bm_array_uniq_bang_objects.rb      3.842  1.120  0.708\nbenchmark/bm_array_uniq_bang_strings.rb      0.268  0.444  0.533\nbenchmark/bm_array_uniq_numbers.rb           0.267  0.567  0.289\nbenchmark/bm_array_uniq_objects.rb           3.891  1.164  0.763\nbenchmark/bm_array_uniq_strings.rb           0.275  0.467  0.404\nbenchmark/bm_array_intersection_numbers.rb          1.343  0.732\nbenchmark/bm_array_intersection_objects.rb          2.467  3.393\nbenchmark/bm_array_intersection_strings.rb          0.905  1.074\n```\n\n`Opal1` column shows results for the current `master` branch. `Opal2` are the results for the `array` branch used in this PR. `Ruby1` are MRI results (ruby 2.2.2p95 (2015-04-13 revision 50295) [x86_64-darwin14]) provided as a baseline of sorts.\n\nThe three missing results for `Opal1` array intersection benchmarks (`Array#&`) are missing because this method is so busted on master that the benchmark did not complete after ~10 minutes (I took pity on my macbook air and re-ran the benchmarks without those three files).\n",
    "head_branch": "array",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 09ccadf6760330ae13313e161d0fb2d2619ac35f into 3c3fdc305bf0514a5efe7e687ff753fbc36e2cfc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620926bd6ca63ac8d87edbe",
    "number": 1004,
    "body": "Fix #1003\n",
    "head_branch": "boolean-eql",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620926cd6ca63ac8d87edbf",
    "number": 1002,
    "body": "",
    "head_branch": "array-multiplication",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620926dd6ca63ac8d87edc0",
    "number": 1000,
    "body": "",
    "head_branch": "array-intersection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620926ed6ca63ac8d87edc1",
    "number": 999,
    "body": "",
    "head_branch": "rubyspec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620926ed6ca63ac8d87edc2",
    "number": 998,
    "body": "A bunch of Array specs pertaining to frozen status were mistakenly placed into the unsupported bucket. This is their resurrection...\n",
    "head_branch": "array-frozen",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620926fd6ca63ac8d87edc3",
    "number": 994,
    "body": "Fix #992\n\n@adambeynon it would be nice if you could take a look and confirm when you get a chance.\n",
    "head_branch": "lexer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209270d6ca63ac8d87edc4",
    "number": 988,
    "body": "",
    "head_branch": "rake_task",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209271d6ca63ac8d87edc5",
    "number": 987,
    "body": "",
    "head_branch": "compiler-directives-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209272d6ca63ac8d87edc6",
    "number": 986,
    "body": "",
    "head_branch": "gemspec-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209273d6ca63ac8d87edc7",
    "number": 984,
    "body": "Basically, [here is the link to the demo of this issue](http://opalrb.org/try/?code:h%20%3D%20%7B%20a%3A%201%20%7D%0Aputs%20h.has_key%3F%28%3Aa%29%0Aputs%20h.has_value%3F%281%29)\n\nIt seems that `Hash#[]=` populates only one of `self.smap` / `self.map` for each key/value pair, but `Hash#has_value?` previously used just a `self.map`. I've already checked other methods - all of them use both `map` and `smap`, so this is the only affected method.\n",
    "head_branch": "fix-has-has-value-for-a-hash-created-through-initialize-method",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209274d6ca63ac8d87edc8",
    "number": 983,
    "body": "closes #982\n",
    "head_branch": "float-to_s",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209275d6ca63ac8d87edc9",
    "number": 981,
    "body": "The title pretty much says it all.\n\nBtw, someone should update `Javascript` to `JavaScript` in the repo's description.\n",
    "head_branch": "readme-improvements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209276d6ca63ac8d87edca",
    "number": 980,
    "body": "",
    "head_branch": "string-split",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209277d6ca63ac8d87edcb",
    "number": 979,
    "body": "",
    "head_branch": "repl-code-style",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209278d6ca63ac8d87edcc",
    "number": 978,
    "body": "The title says it all. :-)\n",
    "head_branch": "better-error",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209279d6ca63ac8d87edcd",
    "number": 977,
    "body": "Fix #970 (for realz this time?)\n",
    "head_branch": "compile-not-equal-to-a-single-method-call",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620927ad6ca63ac8d87edce",
    "number": 976,
    "body": "",
    "head_branch": "rubyspec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620927bd6ca63ac8d87edcf",
    "number": 975,
    "body": "",
    "head_branch": "basic-object-not-equal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620927bd6ca63ac8d87edd0",
    "number": 974,
    "body": "Fix #973\n\nHandle the special case where no matches are found, regardless of the `limit` parameter, return an array containing a single element that is the original string.\n",
    "head_branch": "string-split",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620927cd6ca63ac8d87edd1",
    "number": 971,
    "body": "Fix-ish #970\n",
    "head_branch": "implement-basic-object-not-equal-method",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620927dd6ca63ac8d87edd2",
    "number": 969,
    "body": "I'd like some advice on how to test this as the problem arises only with `require_tree '.'` used at root level.\n\ncc @vais https://github.com/opal/opal-rails/issues/50\n",
    "head_branch": "elia/require_tree_fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620927ed6ca63ac8d87edd3",
    "number": 967,
    "body": "Big picture, Opal does not support `Time` methods that:\n- Explicitly manipulate a `Time` object's time zone offset (limitation of JS Date object).\n- Require sub-millisecond time resolution (limitation of JS runtime).\n- Use Rationals (limitation of Opal at this time).\n\nHope that makes sense.\n",
    "head_branch": "time",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620927fd6ca63ac8d87edd4",
    "number": 964,
    "body": "Re https://github.com/opal/opal/issues/963\n",
    "head_branch": "time",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209280d6ca63ac8d87edd5",
    "number": 962,
    "body": "My thought here is that since harassment of any form is already specifically covered, it's better to only ban -overtly- sexual language so that a single genuine misunderstanding doesn't become a casus belli.\n\nBear in mind that once the misunderstanding has been explained, doing it again falls neatly under the dictionary definition of harassment and as such this tweak shouldn't allow anybody who -was- being a dick to weasel out of it.\n\n@adambeynon @sarciszewski @jaen @webmaven thoughts if you have any, please\n",
    "head_branch": "coc-clarify-unacceptable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8aa6a3af185ff84a26a6c52b8b3377c1c12f4ecf into f3cf1ad8e53c1a752bdf7f278413b3fba5feb75f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209281d6ca63ac8d87edd6",
    "number": 961,
    "body": "This was originally the wording @strand and I worked out previously, which @adambeynon recently commented he thought at least the concept of was useful. It's been tweaked since though so please read the whole thread to understand where it's coming from.\n\nI'm happy to (continue to :) bikeshed the phrasing until everybody's happy - I just think we need to draw _some_ sort of explicit line here.\n\n@adambeynon @sarciszewski @jaen @webmaven thoughts if you have any, please\n",
    "head_branch": "coc-clarify-scope",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209282d6ca63ac8d87edd7",
    "number": 960,
    "body": "This is the URL fix and the ethnicity addition, bundled together since I don't think either of these changes are remotely controversial.\n\n@adambeynon @sarciszewski @jaen @webmaven thoughts if you have any, please\n\n@adambeynon merge when ready please\n",
    "head_branch": "coc-tweaks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209283d6ca63ac8d87edd8",
    "number": 955,
    "body": "",
    "head_branch": "time",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209284d6ca63ac8d87edd9",
    "number": 953,
    "body": "",
    "head_branch": "spec-filters",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209285d6ca63ac8d87edda",
    "number": 952,
    "body": "Because contributing to a project should not entail a gestapo hunting down everything you say elsewhere.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209286d6ca63ac8d87eddb",
    "number": 951,
    "body": "This fixes https://github.com/opal/opal/issues/882.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209287d6ca63ac8d87eddc",
    "number": 950,
    "body": "",
    "head_branch": "rename-bugs-files-to-match-rubyspec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209288d6ca63ac8d87eddd",
    "number": 949,
    "body": "",
    "head_branch": "string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209288d6ca63ac8d87edde",
    "number": 948,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209289d6ca63ac8d87eddf",
    "number": 947,
    "body": "Taken from standard Bundler boilerplate, sourced from:\n\nhttp://contributor-covenant.org/version/1/0/0/\n",
    "head_branch": "code-of-conduct",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620928ad6ca63ac8d87ede0",
    "number": 946,
    "body": "Relating to issue #942 \n",
    "head_branch": "code-of-conduct",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620928bd6ca63ac8d87ede1",
    "number": 940,
    "body": "The following is a list of 25 remaining RubySpecs we are _NOT_ running as of this PR:\n- argf\n- bignum\n- binding\n- complex\n- continuation\n- dir\n- encoding\n- env\n- fiber\n- file\n- filetest\n- gc\n- io\n- main\n- marshal\n- mutex\n- objectspace\n- process\n- random\n- rational\n- signal\n- symbol\n- systemexit\n- thread\n- threadgroup\n\nAs of this PR, the total number of RubySpecs Opal is passing is :sparkles:6227:sparkles: This PR marks the end of the free lunch - from now on getting another hundred passing specs will be hard work :smile: \n\n:beers: \n",
    "head_branch": "rubyspecs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620928cd6ca63ac8d87ede2",
    "number": 938,
    "body": "",
    "head_branch": "changelog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620928dd6ca63ac8d87ede3",
    "number": 937,
    "body": "",
    "head_branch": "rubyspecs-list-cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620928ed6ca63ac8d87ede4",
    "number": 936,
    "body": "This PR represents a switch from a \"whitelist\" to a \"blacklist\" way of thinking about RubySpec. In other words, until now, Opal was considered _guilty until proven innocent_, so we only ran a select few specs, fully expecting everything else to fail. With this change, Opal is considered _innocent until proven guilty_ - we try to run all the specs, and those specs that do not pass are excluded with a `!` prefix.\n\nThis means a lot more `fails` lines in `filters/bugs` files in some cases, but I think it's worth it to have known problems be in plain sight to be dealt with. I consider `filters/bugs` to be my TO DO list, and it's comforting to know that it's not hiding anything from me.\n",
    "head_branch": "rubyspecs-list-cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620928fd6ca63ac8d87ede5",
    "number": 933,
    "body": "",
    "head_branch": "rubyspec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209290d6ca63ac8d87ede6",
    "number": 931,
    "body": "",
    "head_branch": "rubyspec_array_comparison",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209291d6ca63ac8d87ede7",
    "number": 930,
    "body": "",
    "head_branch": "rename-corelib-to-rubyspec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209292d6ca63ac8d87ede8",
    "number": 929,
    "body": "",
    "head_branch": "rubyspec_array_sample",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209293d6ca63ac8d87ede9",
    "number": 928,
    "body": "The first is needed for `ruby_exe` but I am not confident if this works yet.\nThe second is a standard `RUBY_` constant along VERSION, ENGINE, etc.\n",
    "head_branch": "rbconfig",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209294d6ca63ac8d87edea",
    "number": 927,
    "body": "So RubySpec runs on an expected version of MSpec.\nAlso, `ruby/mspec` does not depend on `fileutils` anymore.\n",
    "head_branch": "use_ruby_mspec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209295d6ca63ac8d87edeb",
    "number": 926,
    "body": "",
    "head_branch": "ruby-rubyspec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209295d6ca63ac8d87edec",
    "number": 925,
    "body": "",
    "head_branch": "benchmark",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209296d6ca63ac8d87eded",
    "number": 924,
    "body": "These specs pass already, so removing them from the filters\n",
    "head_branch": "rubyspec_array_multiply",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209297d6ca63ac8d87edee",
    "number": 923,
    "body": "",
    "head_branch": "updating_contributingmd_with_jshint",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209298d6ca63ac8d87edef",
    "number": 922,
    "body": "Cleaning up implementation based on feedback on #917\n",
    "head_branch": "refactoring_array_permutation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209299d6ca63ac8d87edf0",
    "number": 921,
    "body": "Was an attempt to speed up the build but seems to do more harm than good \n",
    "head_branch": "remove-submodules-cache",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620929ad6ca63ac8d87edf1",
    "number": 920,
    "body": "Hello,\n\nHere is a quick PR to discuss about using ruby/rubyspec directly, if that is what the Opal team wants.\nThis is not ready for merging as there are new failures due to new specs.\n\nUsing git submodule provides a very good isolation between specs and the rest, but also makes the process to change specs a bit rigid.\nIf changes to rubyspec are done mostly by a few people (@elia and @vais from what I saw), one solution is to allow these people to push directly to ruby/rubyspec for straightforward changes (and PR if not).\n\nAnother solution is to have a copy of rubyspec in the opal repository (with git subtree or manually) and integrate these changes upstream from time to time. This is more complex and messy but useful if many different people contribute directly to the specs.\n\nWhat do you think?\n\nP.S.: There are quite a few new failures due to new specs, do you have an automated way to tag them or is it done manually?\n",
    "head_branch": "use_ruby_rubyspec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620929bd6ca63ac8d87edf2",
    "number": 919,
    "body": "Float specs tend to be easy for Opal as JS is natively behaving quite similarly :grinning: \n",
    "head_branch": "specs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620929cd6ca63ac8d87edf3",
    "number": 918,
    "body": "Include compliance with RubySpec for Array#combination, Array#permutation, Array#values_at, Array#rotate and Array#rotate\n",
    "head_branch": "update_changelog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620929dd6ca63ac8d87edf4",
    "number": 917,
    "body": "",
    "head_branch": "rubyspec_array_permutation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620929ed6ca63ac8d87edf5",
    "number": 916,
    "body": "Trivial but caught my eye on a `bundle exec opal -h`.\n",
    "head_branch": "typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620929fd6ca63ac8d87edf6",
    "number": 915,
    "body": "",
    "head_branch": "benchmark",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a837ceaa55ecec7357dda9f29d7bc19b90641b32 into 4416539128a80831c5f0633e09849908d6bcf04f"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092a0d6ca63ac8d87edf7",
    "number": 914,
    "body": "http://devblog.avdi.org/2015/06/03/benchmarking-ruby-dispatch-strategies/\n",
    "head_branch": "benchmark-dispatch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092a1d6ca63ac8d87edf8",
    "number": 912,
    "body": "This adds support for calling the following javascript operators:\ndelete, in, instanceof, new, typeof, and void.  It also supports\ncalling global javascript functions via call.  call is aliased\nto method_missing, so that you can do JS.globalFunction() to\ncall global javascript functions.\n",
    "head_branch": "js-mod",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092a2d6ca63ac8d87edf9",
    "number": 911,
    "body": "Without this, there is an error formatting the exception message\n(ArgumentError: negative argument), and the underlying exception\nis lost.\n",
    "head_branch": "lexer-column",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092a3d6ca63ac8d87edfa",
    "number": 910,
    "body": "",
    "head_branch": "module-class-eval-compilation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092a4d6ca63ac8d87edfb",
    "number": 909,
    "body": "@elia here's the PR as requested via #675.\n\nI also saw @meh said \"There's no concept of private or public in Opal...\".  Shouldn't we add some way to track public and private methods?  There are a few ruby methods that rely on it, which would cause unexpected results if you are using the same class client/server side.\n",
    "head_branch": "public_methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092a5d6ca63ac8d87edfc",
    "number": 908,
    "body": "",
    "head_branch": "implements-catch_throw",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092a5d6ca63ac8d87edfd",
    "number": 907,
    "body": "",
    "head_branch": "benchmark",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092a6d6ca63ac8d87edfe",
    "number": 906,
    "body": "",
    "head_branch": "noswallow2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092a7d6ca63ac8d87edff",
    "number": 903,
    "body": "",
    "head_branch": "jshint",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092a8d6ca63ac8d87ee00",
    "number": 902,
    "body": "",
    "head_branch": "hash-constructor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092a9d6ca63ac8d87ee01",
    "number": 901,
    "body": "",
    "head_branch": "array-to_h",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092aad6ca63ac8d87ee02",
    "number": 900,
    "body": "Now that https://github.com/opal/opal/pull/891 and https://github.com/opal/opal/pull/892 are merged in, we no longer have any accidental globals in JS, so it's time to enable JSHint's `'variable' is not defined` check for realz (FTW, for googness' sake, for the love of god, etc.)\n",
    "head_branch": "jshint",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092abd6ca63ac8d87ee03",
    "number": 899,
    "body": "",
    "head_branch": "array-bsearch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 97cfcfe078265e2da2e9e5d2b04023024c2c2bce into 513b63c319af48484443cb7deff8c372132edecd"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092acd6ca63ac8d87ee04",
    "number": 893,
    "body": "",
    "head_branch": "enumerator-with-index",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092add6ca63ac8d87ee05",
    "number": 892,
    "body": "Fix #875 \nFix #876 \n\nBasically the problem here is that the temporary variable is requested to be created in the parent scope while processing the body AFTER `to_vars` on the parent scope has already been called. I.e., it's too late for it to have any effect since `to_vars` has already been called. The solution is simple then: process the body first, then call `to_vars`.\n",
    "head_branch": "fix-issues-875-and-876",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092aed6ca63ac8d87ee06",
    "number": 891,
    "body": "Fix #877\n\nBasically what was happening is that args to a proc inside of a method were incorrectly set as args on the parent scope. Then, since they supposedly already exist in the args array, they were excluded from being declared with `var`.\n",
    "head_branch": "fix-issue-877",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092afd6ca63ac8d87ee07",
    "number": 890,
    "body": "Javascript doesn't support 'extended' exactly and Ruby doesn't support sticky exactly, but this should be a decent start and making Regex work a little better.\n",
    "head_branch": "bugfix/regexp_union",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092afd6ca63ac8d87ee08",
    "number": 889,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092b0d6ca63ac8d87ee09",
    "number": 888,
    "body": "",
    "head_branch": "string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092b1d6ca63ac8d87ee0a",
    "number": 887,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092b2d6ca63ac8d87ee0b",
    "number": 886,
    "body": "",
    "head_branch": "use-mri-rubyspec-fork",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092b3d6ca63ac8d87ee0c",
    "number": 885,
    "body": "Hey last days I started to implement bignums for Opal like mentioned in #862. I know there are still some test failures in the rubyspec tests, these failures are caused by not supporting Bigdecimal yet.\n\nNow I would like to know if there is the possibility that my implementation will be integrated in opal. It would be nice if you comment on my implementation to give some input to improve the Bignum support. \n\nSome details on my implementation:\n1. I am using Bignum implementaion of the [forge project](https://github.com/digitalbazaar/forge/blob/master/js/jsbn.js) which comes original from [Tom Wu](http://www-cs-students.stanford.edu/~tjw/jsbn/), but the forge implementation is still maintained. Using this implementation would give the possibility to create a Cryptolib for opal with the RSA implementation from the forge project.\n1. Bignums are compiled to \"999999999999999999999\".to_i which gives the possibility to add Bignum support by simply overwriting the  String#to_i method which must be done anyway. By this way Bignum can by required as a stdlib. \n\nFor now my implementation includes Bignums in the corelib, but it can be changed easily. \n\nThanks\nJannis\n",
    "head_branch": "bignum",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092b4d6ca63ac8d87ee0d",
    "number": 884,
    "body": "This could have bigger implications then what I realize but rather than just complain (see issue https://github.com/opal/opal/issues/883), I thought I'd submit a PR.\n",
    "head_branch": "feature/bridge_class_tweak",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092b5d6ca63ac8d87ee0e",
    "number": 879,
    "body": "This adds a way to call native javascript methods from ruby using\nvalid ruby syntax, so it will work with existing tooling, in contrast\nto #874.\n\nThis will only break working ruby code that defines a method named\n\"JS\" that will accept no arguments, and uses that method in a method\nchain.  I can't think of a way to reduce that breakage while still\nmaking the resulting syntax valid ruby syntax. If someone does\nactually have a method named \"JS\" that accepts no arguments and\nthat they want to use in a method chain, they could work around this\nby adding a space (e.g. \".JS .\"), as this handles \".JS.\" specially\nin the lexer.\n\nThis makes it much easier to use javascript objects inside ruby\ncode without wrapping them using Native(), and provides a work\naround for edge cases where Native(obj) returns obj, such as\nwhen using strings.  This syntax will handle many cases where\nyou currently need to drop down to raw javascript using backticks.\n",
    "head_branch": "jscall2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092b6d6ca63ac8d87ee0f",
    "number": 878,
    "body": "Fix all accidental global variables except for those that are generated because of compiler bugs #875, #876, and #877.\n",
    "head_branch": "lint",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092b7d6ca63ac8d87ee10",
    "number": 874,
    "body": "This borrows the syntax of calling ruby methods from javascript\nand uses it for calling javascript methods from ruby.\n\nIn javascript:\n\nobj.method() # call javascript method\nobj.$method() # call ruby method\n\nIn ruby:\n\nobj.method() # call ruby method\nobj.$method() # call javascript method\n\nThis will not break any working ruby/opal code, as the syntax is\nnot currently valid ruby/opal syntax.  Usage of this syntax will\nmean that standard ruby will no longer be able to parse the code,\nso any file that uses this syntax will be limited to executing\nonly with opal, but considering the syntax is used for calling\njavascript methods, I think that should be acceptable.\n\nThis makes it much easier to use javascript objects inside ruby\ncode without wrapping them using Native(), and provides a work\naround for edge cases where Native(obj) returns obj, such as\nwhen using strings.  This syntax will handle many cases where\nyou currently need to drop down to raw javascript using backticks.\n",
    "head_branch": "jscall",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092b8d6ca63ac8d87ee11",
    "number": 873,
    "body": "fixes #871 \n",
    "head_branch": "fix-issue-871",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092b9d6ca63ac8d87ee12",
    "number": 872,
    "body": "Now that you can build complex opal projects using tilt instead of\nsprockets, it doesn't make sense to require sprockets.\n\nAs sprockets 3+ doesn't require tilt, it doesn't really make sense\nto keep tilt as a runtime dependency, since you should be able to\nuse sprockets without using tilt. However, Opal::Processor is\ncurrently a subclass of Opal::TiltTemplate, so it doesn't matter\nif you are using opal with tilt or sprockets, in either case tilt\nis still required for using opal.\n\nIf Opal::Processor can be made to run without tilt, I think we\nshould make both tilt and sprockets development dependencies\ninstead of runtime dependencies.\n\nThe tilt/opal tests run fine with tilt 2, so I don't think we\nshould restrict people to using tilt 1.4, as then users of opal\ncan't use the new useful features in tilt 2, such as multiple\nmappings, and they will miss out on useful bug fixes in tilt 2\nthat will not get backported to tilt 1.4, such as the sorting of\nlocals when caching templates.\n",
    "head_branch": "dev_sprockets",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092bad6ca63ac8d87ee13",
    "number": 869,
    "body": "Defining a class-level self.name should not have any effect on class.to_s\n",
    "head_branch": "fix-issue-816",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092bbd6ca63ac8d87ee14",
    "number": 868,
    "body": "",
    "head_branch": "string-split",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092bcd6ca63ac8d87ee15",
    "number": 867,
    "body": "Previously using null or undefined in an if statement would result\nin something like: TypeError: Cannot read property '$$is_boolean'\nof undefined.\n",
    "head_branch": "null_undef",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Handle null and undefined in if statements (#867)\n\n* Handle null and undefined in conditionals and logic operators\r\n\r\nPreviously using null or undefined in a conditional would result\r\nin something like: TypeError: Cannot read property '$$is_boolean'\r\nof undefined. Additionally, this makes using null and undefined\r\noperate as false when used in logic operators, so code such as\r\n\r\n  do_something if foo.JS.method && foo.JS[:prop]\r\n\r\nwill work correctly even if the method returns null/undefined or\r\nthe property is null/undefined.\r\n\r\nThere is a slight performance hit from this due to the extra\r\nchecks, but I think the more correct behavior makes this change\r\ndesirable.\r\n\r\n* Fix compiler specs, and a whitespace issue in the generated code"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092bdd6ca63ac8d87ee16",
    "number": 865,
    "body": "@elia this runs JSHint on Travis automatically, but to run it locally you have to `bundle exec rake lint` manually. I think it should run automatically when you run tests locally, but I need help to make it happen in testing.rake. Currently nodejs runner places the compiled JS file into system temporary directory, and I'm not sure how to get at it in order to pass it to jshint. If you can help me take care of that, I can spend the next few days in the meantime trying to clear out some of the failures noted in .jshintrc.\n",
    "head_branch": "linting",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092bed6ca63ac8d87ee17",
    "number": 864,
    "body": "If :build option is used, the Opal::Builder defaults are used.\nIf :builder option is used, you can pass in your own custom\nbuilder, which could have per-build stubs, append_paths, and\nuse_gems to change building without modifying global state.\n\nUsing this, it's possible to build arbitrary opal projects that\nrequire other files using tilt without sprockets.\n\nIn order to get this to work, I had to make Opal.append_path\nand Opal.use_gem available per builder instance, and fix\nOpal::Builder#dup to work correctly, which is what the earlier\ncommits are for.\n\nThe Opal::CLI commit is not necessary, but I think it's a good\nidea in general to avoid mutating global state unless it is\nnecessary.\n",
    "head_branch": "tilt_build",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092bed6ca63ac8d87ee18",
    "number": 861,
    "body": "",
    "head_branch": "rubyspec_array_rotate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092bfd6ca63ac8d87ee19",
    "number": 860,
    "body": "@elia does it make sense to keep this branch up-to-date with master by rebasing periodically? I mean getting to green on jshint might take a while... What workflow would you propose if I were to take this on?\n",
    "head_branch": "jshint",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092c0d6ca63ac8d87ee1a",
    "number": 859,
    "body": "If you specify a message when raising an existing exception, ruby\ndoes not use the exception's existing backtrace.\n",
    "head_branch": "no_swallow",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092c1d6ca63ac8d87ee1b",
    "number": 857,
    "body": "",
    "head_branch": "rubyspec_array_value_at",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092c2d6ca63ac8d87ee1c",
    "number": 856,
    "body": "Added support for this based on Ruby's stdlib implementation. Observed while trying to make opal-rspec work with RSpec 3.1.\n",
    "head_branch": "features/set_add",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092c3d6ca63ac8d87ee1d",
    "number": 855,
    "body": "This allows you do do things like:\n\n  Opal::Builder.build('/path/to/file.rb')\n  Opal::Builder.build('./path/to/file.rb')\n  Opal::Builder.build('../path/to/file.rb')\n\nPreviously, you couldn't build a file without adding a directory\ncontaining the file to the paths to examine.  This makes Opal::Builder\noperate more like ruby itself.\n\nNote that this does not let you use absolute and ./ and ../ relative\npaths in require, that requires additional changes, probably to\nBuilder#process_require.\n",
    "head_branch": "path_reader_abs_rel",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092c4d6ca63ac8d87ee1e",
    "number": 854,
    "body": "```\n<fkchang> jeremyevans: it seems that https://gitter.im/opal/opal get's a lot\n          more chat love than irc these days, I'd bring your tilt discussion\n          there                                                         [15:43]\n<jeremyevans> fkchang: Thanks                                           [15:48]\n<jeremyevans> Maybe the README could use an update                      [15:49]\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092c5d6ca63ac8d87ee1f",
    "number": 853,
    "body": "Pass more Rubyspecs related to unbound/bound methods.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092c6d6ca63ac8d87ee20",
    "number": 852,
    "body": "Unless you specifically want to match the start and end of any line\nin the string, as opposed to the start and end of the string itself,\nyou should avoid using ^ and $.\n\nI'm not sure if all of these changes are correct.  Maybe in some cases\nwhere I made changes, you do want to match start/end of any line\nin the string instead of the start/end of the string itself.\n",
    "head_branch": "regexp_fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9d96a7ff7f766fb2a770e1ed5c92b618829ebf00 into e59c0e5d60a74d3e48af88d8be59a5920cfe8ee0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092c7d6ca63ac8d87ee21",
    "number": 851,
    "body": "It doesn't seem to work if you require opal/builder without\nopal/paths.\n",
    "head_branch": "builder_depends_path",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092c8d6ca63ac8d87ee22",
    "number": 848,
    "body": "",
    "head_branch": "rubyspec_array_combination",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092c9d6ca63ac8d87ee23",
    "number": 846,
    "body": "@elia @meh guys, I'm having [\"a senior moment\"](http://www.thefreedictionary.com/senior+moment) - is there a better/more idiomatic way to write a method so it accepts **either** a proc argument **or** an anonymous block? :confused: \n\nfixes #838 \n",
    "head_branch": "fix-issue-838",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092cad6ca63ac8d87ee24",
    "number": 845,
    "body": "Fix #844\n",
    "head_branch": "fix-issue-844",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092cbd6ca63ac8d87ee25",
    "number": 841,
    "body": "",
    "head_branch": "opalist-link",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092ccd6ca63ac8d87ee26",
    "number": 837,
    "body": "",
    "head_branch": "string-inspect",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092cdd6ca63ac8d87ee27",
    "number": 836,
    "body": "Replaces pull request #760\n",
    "head_branch": "rubyspec_singleton_dump",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092cdd6ca63ac8d87ee28",
    "number": 834,
    "body": "",
    "head_branch": "tolerance",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092ced6ca63ac8d87ee29",
    "number": 833,
    "body": "I believe this is the right call, please review. My understanding is that all \"String#initialize with an argument...\" specs assume mutable strings.\n",
    "head_branch": "string-initialize",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092cfd6ca63ac8d87ee2a",
    "number": 831,
    "body": "Completes PR #829 by @jeremyevans \n- extracts global/default config from Opal::Processor to the new entry Opal::Config (but still keeps config proxies on Opal::Processor)\n- stops registering Opal::Processor as a Tilt template, we now have a dedicated class\n\nI'll merge immediately, the PR is just to give it a bit of visibility :tophat: \n",
    "head_branch": "opal-config",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092d0d6ca63ac8d87ee2b",
    "number": 830,
    "body": "",
    "head_branch": "backtrace",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092d1d6ca63ac8d87ee2c",
    "number": 829,
    "body": "This adds a tilt/opal.rb file that allows you to render opal templates\nvia Tilt without using sprockets. It changes lib/opal/sprockets/processor.rb\nto load tilt/opal.rb and augment it with sprockets specific code.\n\nThis allows you to use opal with asset engines that don't use sprockets.\n\nI'm not sure where to add specs for this, if you could point me to the appropriate place, I'll add some specs.  Ideally, these specs would load tilt/opal without loading lib/opal/sprockets/processor, to ensure that tilt/opal works standalone.  I've tested that manually, but I think there should be automated tests for it.\n",
    "head_branch": "tilt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092d2d6ca63ac8d87ee2d",
    "number": 828,
    "body": "Re https://github.com/opal/opal/issues/736\n\nThis is the first phase of the project: just getting the raw performance data.\n\nThe way it works is you run the spec suite as you normally would, but set the `BM` environment variable to the number of iterations you want MSpec to perform on each `it` block. If this environment variable is present, Opal MSpec runner will record the number of milliseconds taken for each spec (across all iterations) and, at the end of the run, dump a JSON object with spec names for keys and milliseconds for values into a time-stamped file in the `tmp` directory.\n\n```\n$ bundle exec rake mspec_node PATTERN=spec/corelib/core/string/index_spec.rb BM=100\n...\nFinished\n2000 examples, 0 failures (time taken: 2.8919999599456787)\n```\n\nNotice the `BM=100` above, and how it affects the number of examples: it's `2000 examples` instead of the normal `20 examples` for this spec file. It is actually 20 examples executed 100 times each, so don't be confused by that output.\n\n```\n$ cat tmp/bm_2015-05-03_15-53-48-662.json \n{\n  \"String#index raises a TypeError if passed nil\": 45,\n  \"String#index raises a TypeError if passed a boolean\": 41,\n  \"String#index calls #to_str to convert the first argument\": 74,\n  \"String#index calls #to_int to convert the second argument\": 72,\n  \"String#index raises a TypeError if passed a Fixnum\": 29,\n  \"String#index with String behaves the same as String#index(char) for one-character strings\": 340,\n  \"String#index with String returns the index of the first occurrence of the given substring\": 50,\n  \"String#index with String doesn't set $~\": 23,\n  \"String#index with String ignores string subclasses\": 36,\n  \"String#index with String starts the search at the given offset\": 110,\n  \"String#index with String starts the search at offset + self.length if offset is negative\": 239,\n  \"String#index with String returns nil if the substring isn't found\": 33,\n  \"String#index with Regexp behaves the same as String#index(string) for escaped string regexps\": 1244,\n  \"String#index with Regexp returns the index of the first match of regexp\": 51,\n  \"String#index with Regexp sets $~ to MatchData of match and nil when there's none\": 25,\n  \"String#index with Regexp starts the search at the given offset\": 73,\n  \"String#index with Regexp starts the search at offset + self.length if offset is negative\": 238,\n  \"String#index with Regexp returns nil if the substring isn't found\": 36,\n  \"String#index with Regexp returns nil if the Regexp matches the empty string and the offset is out of range\": 23,\n  \"String#index with Regexp converts start_offset to an integer via to_int\": 56\n}\n```\n\nPhase 2 would be to create a rake task that can analyze data files from two or more runs. \"Analyze\" is a very open-ended proposition, I would appreciate feedback from the community on this one. What should the rake workflow be? What should the results of the analysis look like?\n\nPhase 3 would be the ability to push (from a rake task as well?) the analysis results to a web app (hosted on Heroku?) for the purpose of tracking how Opal is doing vis-a-vis performance over time. Maybe integrate with GitHub too?\n\nPhase 2 is fuzzy to me. Phase 3 is even fuzzier. Maybe the analysis in Phase 2 should not be done locally at all, and instead upload the files to a web app directly? In which case Phase 2 and 3 are the same thing?\n\nSo, any ideas are very much welcome, and code is even more welcome!\n",
    "head_branch": "bm",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092d3d6ca63ac8d87ee2e",
    "number": 827,
    "body": "",
    "head_branch": "bugs-string-cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092d4d6ca63ac8d87ee2f",
    "number": 826,
    "body": "My goal was to clean up the failures, and it turned out that modifying `String#index` implementation was not necessary to make the failures go away, but re-writing it in JS made it over 2x faster based on my very un-scientific benchmark, so I decided to keep my re-implementation of `String#index`.\n\nBefore:\n\n```\n$ bundle exec opal -e \"t = Time.now; 100000.times{'hello'.index(/ll/)}; puts Time.now - t\"\n1.44\n$ bundle exec opal -e \"t = Time.now; 100000.times{'hello'.index(/ll/)}; puts Time.now - t\"\n1.547\n$ bundle exec opal -e \"t = Time.now; 100000.times{'hello'.index(/ll/)}; puts Time.now - t\"\n1.537\n$ bundle exec opal -e \"t = Time.now; 100000.times{'hello'.index(/ll/)}; puts Time.now - t\"\n1.416\n```\n\nAfter:\n\n```\n$ bundle exec opal -e \"t = Time.now; 100000.times{'hello'.index(/ll/)}; puts Time.now - t\"\n0.614\n$ bundle exec opal -e \"t = Time.now; 100000.times{'hello'.index(/ll/)}; puts Time.now - t\"\n0.611\n$ bundle exec opal -e \"t = Time.now; 100000.times{'hello'.index(/ll/)}; puts Time.now - t\"\n0.62\n```\n\nLesson learned over and over again - corelib must be implemented in JS. It will be fun re-writing the methods that use Ruby and watching the perf numbers improve. But first, need a way to generate perf numbers :)\n",
    "head_branch": "string-index",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092d5d6ca63ac8d87ee30",
    "number": 825,
    "body": "",
    "head_branch": "filters-bugs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 86a3851b898367a14dc28ed2c875b4f47dc92ab9 into 78444c73f6d96056c5b8680c807acfe7bf691085"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092d6d6ca63ac8d87ee31",
    "number": 824,
    "body": "",
    "head_branch": "remove-bugs-numeric",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092d7d6ca63ac8d87ee32",
    "number": 823,
    "body": "",
    "head_branch": "matchdata",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092d8d6ca63ac8d87ee33",
    "number": 822,
    "body": "Once this PR is merged:\n1. Close issue https://github.com/opal/opal/issues/641\n2. Close PR https://github.com/opal/opal/pull/642 without merging\n",
    "head_branch": "regexp-case-compare",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092d9d6ca63ac8d87ee34",
    "number": 820,
    "body": "",
    "head_branch": "string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092dad6ca63ac8d87ee35",
    "number": 819,
    "body": "",
    "head_branch": "kernel-string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092dad6ca63ac8d87ee36",
    "number": 818,
    "body": "",
    "head_branch": "match",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092dbd6ca63ac8d87ee37",
    "number": 815,
    "body": "",
    "head_branch": "kernel-case_compare",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092dcd6ca63ac8d87ee38",
    "number": 814,
    "body": "",
    "head_branch": "kernel-hash",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092ddd6ca63ac8d87ee39",
    "number": 813,
    "body": "Fix #457\n",
    "head_branch": "string-scan",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092ded6ca63ac8d87ee3a",
    "number": 812,
    "body": "",
    "head_branch": "kernel-array",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092dfd6ca63ac8d87ee3b",
    "number": 809,
    "body": "Pass failing rubyspecs for String and Array inheritance\n",
    "head_branch": "default-inline-operators",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092e0d6ca63ac8d87ee3c",
    "number": 806,
    "body": "Refs opal/opal-cdn#6.\n",
    "head_branch": "0-7-stable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092e1d6ca63ac8d87ee3d",
    "number": 805,
    "body": "",
    "head_branch": "format",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092e2d6ca63ac8d87ee3e",
    "number": 804,
    "body": "Well, I was having a look at the latest commits and I noticed that we `gsub` gaining no effect. So let's `gsub!`.\n\nAlso, just saying, at the moment machines running OSX 10.10.3 cannot `bundle` because of [this](http://stackoverflow.com/questions/29529455/missing-c-header-debug-after-updating-osx-command-line-tools-6-3).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092e3d6ca63ac8d87ee3f",
    "number": 802,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092e4d6ca63ac8d87ee40",
    "number": 800,
    "body": "This behavior is not specified in rubyspec for `Kernel#Float`, but it\nis tested in `Kernel#format`.\n\nSurprisingly, `Kernel#Float` accepts hexadecimal strings, but no other\ninteger notation that is accepted by `Kernel#Integer`. I.e. `0x10` is\nok, but `0b10`, `0d10`, `0o10` are not acceptable. Looks like a bug to\nme. I guess this PR makes Opal’s `Kernel#Float` a bug-for-bug\nimplementation of MRI’s `Kernel#Float` :)\n\n```\n$ pry\n[1] pry(main)> Float(\"010\")\n=> 10.0\n[2] pry(main)> Float(\"0o10\")\nArgumentError: invalid value for Float(): \"0o10\"\nfrom (pry):2:in `Float'\n[3] pry(main)> Float(\"0b10\")\nArgumentError: invalid value for Float(): \"0b10\"\nfrom (pry):3:in `Float'\n[4] pry(main)> Float(\"0d10\")\nArgumentError: invalid value for Float(): \"0d10\"\nfrom (pry):4:in `Float'\n[5] pry(main)> Float(\"0x10\")\n=> 16.0\n```\n",
    "head_branch": "kernel-float-accepts-hex-strings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092e5d6ca63ac8d87ee41",
    "number": 799,
    "body": "The original regex `/(\\d)_(\\d)/g` did not handle some cases correctly (it did look so cute though!)\n\nE.g. `\"10_1_0.5_5_5\"` became `\"101_0.55_5\"` instead of the expected `\"1010.555\"`. This issue was not caught by any of the rubyspec code for `Kernel#Integer` and `Kernel#Float`, but surfaced when testing `Kernel#format`. Changing the regex to `/(\\d)_(?=\\d)/g` fixed the issue.\n",
    "head_branch": "fix-underscore-stripping-regex",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092e6d6ca63ac8d87ee42",
    "number": 797,
    "body": "",
    "head_branch": "integer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092e7d6ca63ac8d87ee43",
    "number": 795,
    "body": "",
    "head_branch": "float",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 193c5d9eb01861257c0cf5432ceda17511e7d030 into 522afc7360a5e65fb110ec63baf88888bf1b7ded"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092e7d6ca63ac8d87ee44",
    "number": 794,
    "body": "",
    "head_branch": "integer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092e8d6ca63ac8d87ee45",
    "number": 793,
    "body": "Need all of this to work for my on-going re-write of Kernel#format\n",
    "head_branch": "integer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092e9d6ca63ac8d87ee46",
    "number": 792,
    "body": "",
    "head_branch": "string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1de78e168de014617b2e56876c46b529005910dc into 46fbacf1fd5a59a2f4cf4b855798e03b9e322ee9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092ead6ca63ac8d87ee47",
    "number": 791,
    "body": "```\n>> \"Hello, %{name}, top of the %{time_of_day} to ya!\" % {name: '@meh', time_of_day: 'morning'}\n=> \"Hello, @meh, top of the morning to ya!\"\n```\n",
    "head_branch": "format",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092ebd6ca63ac8d87ee48",
    "number": 790,
    "body": "",
    "head_branch": "format",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 33727f731fda3da87f2fd5e284fbe858cc85abcc into 263205bb1d86eeecd62f8c2d08e46a256504a34b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092ecd6ca63ac8d87ee49",
    "number": 789,
    "body": "",
    "head_branch": "string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092edd6ca63ac8d87ee4a",
    "number": 787,
    "body": "",
    "head_branch": "string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092eed6ca63ac8d87ee4b",
    "number": 786,
    "body": "",
    "head_branch": "string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092efd6ca63ac8d87ee4c",
    "number": 785,
    "body": "Re: https://github.com/opal/opal/pull/783#issuecomment-88117012\n",
    "head_branch": "contributing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092f0d6ca63ac8d87ee4d",
    "number": 783,
    "body": "Re: https://github.com/opal/opal/pull/779#issuecomment-87287434\n",
    "head_branch": "contributing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4dcacdb4dc98376620682cdc8993ccfbf5a302ac into 3b7ef52c31b5753d9bf568c1c572d91b0028e282"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092f1d6ca63ac8d87ee4e",
    "number": 782,
    "body": "",
    "head_branch": "gsub",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092f1d6ca63ac8d87ee4f",
    "number": 780,
    "body": "Despite passing rubyspec, the behavior of these methods does not match MRI:\n\nMRI:\n\n```\n$ ruby -e \"'hello'.sub(/ll/, ''); p $~.pre_match, $~.post_match\"\n\"he\"\n\"o\"\n```\n\nOpal before the fix:\n\n```\n$ bundle exec opal -e \"'hello'.sub(/ll/, ''); p $~.pre_match, $~.post_match\"\n\"\"\n\"hello\"\n```\n\nOpal after the fix:\n\n```\n$ bundle exec opal -e \"'hello'.sub(/ll/, ''); p $~.pre_match, $~.post_match\"\n\"he\"\n\"o\"\n```\n",
    "head_branch": "matchdata",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092f2d6ca63ac8d87ee50",
    "number": 779,
    "body": "",
    "head_branch": "sub",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092f3d6ca63ac8d87ee51",
    "number": 776,
    "body": "",
    "head_branch": "rindex",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092f4d6ca63ac8d87ee52",
    "number": 775,
    "body": "What's left:\n- fix the mspec/phantom runner https://github.com/opal/opal/tree/fix-mspec-phantom\n",
    "head_branch": "sprockets-3",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 9f522f9c78f26f58b43f6c5f23bd8d35cae1e99a into b5235f4d8b5b994d24e829b8c4156e7398228a29"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092f5d6ca63ac8d87ee53",
    "number": 773,
    "body": "rel: https://github.com/opal/opal-rails/pull/43\n",
    "head_branch": "elia/wip-back-to-sprockets",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092f6d6ca63ac8d87ee54",
    "number": 770,
    "body": "Not sure about this one, need your feedback.\n\nIt looks like strings that contain non-ascii characters should not be lower-cased per rubyspec.\n1. Does the above statement make sense?\n2. Does my code for determining that a string is ascii-only make sense?\n\nThanks!\n",
    "head_branch": "casecmp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092f7d6ca63ac8d87ee55",
    "number": 769,
    "body": "",
    "head_branch": "string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092f8d6ca63ac8d87ee56",
    "number": 768,
    "body": "",
    "head_branch": "string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092f9d6ca63ac8d87ee57",
    "number": 767,
    "body": "",
    "head_branch": "string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092fad6ca63ac8d87ee58",
    "number": 766,
    "body": "",
    "head_branch": "string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 652d2e22993bbb63fcfa17aac1417d6172c07ca6 into 8acef558986dbb4471c6060857c1693302d6293b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092fbd6ca63ac8d87ee59",
    "number": 763,
    "body": "",
    "head_branch": "string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 36427ce1d2fbc210d46d45a8e781e214eb8e1e40 into f671c464cfb7bf054835307741154d57ffc09267"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092fcd6ca63ac8d87ee5a",
    "number": 760,
    "body": "Singleton#_dump returns an empty string\nSingleton#_dump returns an empty string from a singleton subclass\n",
    "head_branch": "singleton_dump_spec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092fcd6ca63ac8d87ee5b",
    "number": 759,
    "body": "`Array#clone` must copy singleton methods over. `Array#dup` should not.\n",
    "head_branch": "array_clone_copies_singleton_methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092fdd6ca63ac8d87ee5c",
    "number": 757,
    "body": "",
    "head_branch": "struct",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092fed6ca63ac8d87ee5d",
    "number": 756,
    "body": "",
    "head_branch": "struct",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d49179026c352d46bd873a8a0845cc7fe79d5335 into cc9c43ba0cc94bacaddc5aa8557de0911560ac9e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662092ffd6ca63ac8d87ee5e",
    "number": 755,
    "body": "TODO\n- remove old ruby-sl stuff\n- update spec/ and spec/rubyspecs (file) after having stdlib specs back into main rubyspec repo\n- fix new specs\n\n@vais: any PR targeting this branch should have `ruby-rubyspec` as the base instead of `master`. When such PRs are merged they'll update this PR automatically. Of course the same is true for the `opal/rubyspec` repo. :)\n",
    "head_branch": "ruby-rubyspecs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209300d6ca63ac8d87ee5f",
    "number": 754,
    "body": "Re: https://github.com/opal/rubyspec/pull/4\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209301d6ca63ac8d87ee60",
    "number": 752,
    "body": "",
    "head_branch": "string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209302d6ca63ac8d87ee61",
    "number": 751,
    "body": "https://github.com/opal/rubyspec/pull/3 makes it possible to finally remove the failing lines for `String#===`, `String#==`, and `String#eql?`\n",
    "head_branch": "string_not_supported",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209303d6ca63ac8d87ee62",
    "number": 750,
    "body": "_WIP - Do not merge_\n\nThis pull request supports a new compiler option, `:template`. It is off by default (the most common case), but when turned on it makes any local variable reference check if it exists against a local hash (we assume a string key, as given variable names must be a string or symbol), and uses the value given if present, otherwise resorts to a method call.\n\nThe purpose of this switch is to allow ERB and HAML templates to have a hash of local variables passed in. The ERB and HAML builder processors and compilers set the `:template` flag manually.\n## Future work\n\nReally, this should be extended out to allow any file to evaluate in the context of a hash of local variables, which would allow us to mimic a binding (very basic mimicking). Also, compiled files should have the ability to take a custom `self` attribute, so a compiled file does not always have to run in the context of `Opal.top`, the main object. This will allow `eval()` to work with a custom object context.\n",
    "head_branch": "templates_with_locals",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209304d6ca63ac8d87ee63",
    "number": 749,
    "body": "Pass \"Array#partition returns two arrays\"\nPass \"Array#partition does not return subclass instances on Array subclasses\"\n\nStill fails \"Array#partition returns in the left array values for which the block evaluates to true\" because of a problem with integer division in Opal (see https://github.com/opal/opal/issues/748)\n\nE.g. `[0, 1, 2, 3, 4, 5].partition { |i| i / 3 == 0 }`\nExpected: `[[0, 1, 2], [3, 4, 5]]`\nActual: `[[0], [1, 2, 3, 4, 5]]`\n",
    "head_branch": "array",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209305d6ca63ac8d87ee64",
    "number": 747,
    "body": "",
    "head_branch": "integer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209306d6ca63ac8d87ee65",
    "number": 745,
    "body": "",
    "head_branch": "struct",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209307d6ca63ac8d87ee66",
    "number": 744,
    "body": "This takes care of the initial roadblock trying to run rubyspec on IE. Next up, dealing with invalid regexp flags per https://github.com/opal/opal/issues/740#issuecomment-78251397 which is not an IE-specific issue.\n",
    "head_branch": "ie8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209307d6ca63ac8d87ee67",
    "number": 743,
    "body": "",
    "head_branch": "run_on_windows",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209308d6ca63ac8d87ee68",
    "number": 742,
    "body": "",
    "head_branch": "readme",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209309d6ca63ac8d87ee69",
    "number": 739,
    "body": "With _\"('stuff'.equal? 'stuff').should == false\" cannot be supported on Opal_ now [merged](https://github.com/opal/rubyspec/pull/2) into opal/rubyspec, the last remaining failing assertion for _\"Kernel#equal? returns true only if obj and other are the same object”_ is passing. The last remaining failure can safely be removed from filters/bugs/kernel now.\n",
    "head_branch": "kernel",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620930ad6ca63ac8d87ee6a",
    "number": 738,
    "body": "Special-casing of +(binary) and -(binary) [has been removed from Ruby](https://www.ruby-forum.com/topic/4418067).\n\nThese specs originally failed for me on Windows, but the reason turned out to have nothing to do with Windows, but rather with the version of Ruby I had installed on that Windows machine, which was `ruby 2.0.0p247 (2013-06-27) [i386-mingw32]`. After updating to `ruby 2.0.0p643 (2015-02-25) [i386-mingw32]`, the specs passed.\n",
    "head_branch": "windows",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620930bd6ca63ac8d87ee6b",
    "number": 737,
    "body": "Includes https://github.com/opal/rubyspec/pull/1 and https://github.com/opal/rubyspec/pull/2\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620930cd6ca63ac8d87ee6c",
    "number": 735,
    "body": "@meh, I need your help with this one - I don't know what I'm doing :) You [fixed Struct inheritance back in 2013](https://github.com/opal/opal/commit/9677ea31a2630b3690507b9722b5730f7d0ea544), and you have this guard clause in your code: `return if self == Struct`. I removed it and all tests pass, but I'm worried I'm missing something here.\n\nAlso, I'm doing `include Enumerable` in the `self.inherited` hook even though `Struct` already has `include Enumerable` at the class level. If I don't do that, `StructClasses::Car.include?(Enumerable).should == true` fails. `StructClasses::Car` is defined as follows:\n\n``` ruby\nmodule StructClasses\n  Car = Struct.new(:make, :model, :year)\nend\n```\n\nSo, is including `Enumerable` inside `self.inherited` the right way to go, or am I brute-forcing something that is really a bug to be fixed elsewhere?\n",
    "head_branch": "struct",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620930dd6ca63ac8d87ee6d",
    "number": 734,
    "body": "",
    "head_branch": "array",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620930ed6ca63ac8d87ee6e",
    "number": 733,
    "body": "Fix #729. A different approach:\n\nFor strings, object_id can be simply their string representation. For\nbooleans, numbers, and nil, follow the MRI scheme:\n- false: 0\n- true: 2\n- nil: 4\n- numbers: (n \\* 2) + 1\n- heap objects: 6, 8, 10, 12, 14, 16, etc…\n",
    "head_branch": "object_id2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620930fd6ca63ac8d87ee6f",
    "number": 732,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209310d6ca63ac8d87ee70",
    "number": 731,
    "body": "Fix #729. This is just an experiment. For strings, numbers, and\nbooleans, `object_id` can be simply their string representation with a\nstatic prefix to distinguish a string “123” from a number 123 whose\n`object_id` would also be “123”, from an array whose `object_id` happens to be\n123 because that’s what `Opal.uid` gave it. Hope this makes sense. No\nidea about the performance implications.\n",
    "head_branch": "object_id",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209311d6ca63ac8d87ee71",
    "number": 730,
    "body": "The only remaining `fail` in that file cannot be made to pass until https://github.com/opal/opal/issues/729 is addressed.\n",
    "head_branch": "kernel",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209312d6ca63ac8d87ee72",
    "number": 726,
    "body": "With a little care, the same Ruby code can run on Unix and on Windows.\n",
    "head_branch": "windows",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209313d6ca63ac8d87ee73",
    "number": 725,
    "body": "This fixes an issue where the following prints 5 instead of nil\n\n``` ruby\nPromise.new.resolve(5).then { nil }.then {|v| puts v.inspect }\n```\n\nThanks!\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209314d6ca63ac8d87ee74",
    "number": 723,
    "body": "Files start as foo.js.rb (or foo.js.opal)\n\nthe source map will reference the file as foo.rb\n\nthe server needs to recreate the name (either adding .js.rb or .js.opal) before sending it to sprockets to get the file.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209315d6ca63ac8d87ee75",
    "number": 722,
    "body": "",
    "head_branch": "elia/source-maps-fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209316d6ca63ac8d87ee76",
    "number": 721,
    "body": "",
    "head_branch": "array",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209316d6ca63ac8d87ee77",
    "number": 718,
    "body": "Also added `def.$$is_array = true` to `Array::Wrapper` because a sub-class of an array _is_ an array. Just as with `String` inheritance a few PRs ago, I believe not having `def.$$is_array = true` defined on `Array::Wrapper` must have been an error of omission.\n",
    "head_branch": "array",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209317d6ca63ac8d87ee78",
    "number": 717,
    "body": "_\"String#=== returns false if obj does not respond to to_str\"_ and  _\"String#== returns false if obj does not respond to to_str\"_ actually pass, except for the one line that tests a symbol argument:\n\n``` ruby\n'hello'.send(@method, :hello).should be_false\n```\n\nSame goes for _\"String#eql? when given a non-String returns false\"_ - only the following line fails:\n\n``` ruby\n'hello'.should_not eql(:hello)\n```\n\nThere is currently no way to pass these assertions because strings and symbols are identical in Opal.\n\nI really would like to see those `fail` lines gone from filters/bugs/string.rb, and I see 3 possible courses of action (in the order from least invasive to most invasive to Opal):\n1. Wrap `not_compliant_on :opal do ...` around the offending assertions in the rubyspec. \n2. Set a new additional property on the string object at compile time to indicate that is was originally meant to be a symbol. This way we can tell symbols from strings at runtime if/as needed with minimum overhead.\n3. Make Symbol a subclass of String and set `$$is_symbol` flag on it? I don't like this one, but throwing it out there anyway.\n\nWhat do you think?\n",
    "head_branch": "string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209318d6ca63ac8d87ee79",
    "number": 715,
    "body": "Fix #535\n",
    "head_branch": "issue535",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209319d6ca63ac8d87ee7a",
    "number": 714,
    "body": "Fix issue #571\n",
    "head_branch": "issue571",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a71ee283dfc5dacf6736600c6e58661033edaffa into d58fda2d9fc218c70429ea2ab61a5051d23eb70d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620931ad6ca63ac8d87ee7b",
    "number": 713,
    "body": "Fix issue #694\n",
    "head_branch": "issue694",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620931bd6ca63ac8d87ee7c",
    "number": 712,
    "body": "Note that it says “…without escaping” in the spec:\n\n``` ruby\ndescribe \"String#match\" do\n  #…\n  it \"converts string patterns to regexps without escaping\" do\n    'hello'.match('(.)\\1')[0].should == 'll'\n  end\nend\n```\n",
    "head_branch": "issue666",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 96b3255596752ce9b1fbe96cbf6bb863359798a5 into 620bd4c85cf3eb9ca7c2f245619dca9b44b0abd8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620931cd6ca63ac8d87ee7d",
    "number": 711,
    "body": "",
    "head_branch": "array",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 494cf98af8817bbcc442e019f82d1a777585a72f into 12cbb3868576c1107d4022d067b603f3b48221b1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620931dd6ca63ac8d87ee7e",
    "number": 709,
    "body": "",
    "head_branch": "string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c852ce373102c9e51013d8a517c5af7f81c8d763 into b88a94a7f07bb3ee3bd8f991983a2cc0df853023"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620931ed6ca63ac8d87ee7f",
    "number": 708,
    "body": "After [Cleanup Module#define_method](https://github.com/opal/opal/commit/33c509101ec89e35f965ad700773fa1abdc0f5ad), this happens when trying to run the test suite:\n\n```\n$ rake mspec\n[40, :filters]\n[189, :shared]\n[577, :rubyspecs]\nmkdir -p tmp\nRUBYOPT=\"-rbundler/setup -rmspec/opal/special_calls\" bin/opal -Ispec -Ilib -gmspec  -smspec/helpers/tmp -smspec/helpers/environment -smspec/guards/block_device -smspec/guards/endian -rnodejs -Dwarning -A tmp/mspec_node.rb\n\n/private/var/folders/pt/kr0lwm4d20jgc_jvpc5fyk1r0000gn/T/opal-nodejs-runner-20150225-3692-g51yt4:1989\n        Opal.defn(self, jsid, block);\n                        ^\nReferenceError: jsid is not defined\n    at OpalClass.def.$define_method.TMP_2 [as $define_method] (/private/var/folders/pt/kr0lwm4d20jgc_jvpc5fyk1r0000gn/T/opal-nodejs-runner-20150225-3692-g51yt4:1989:25)\n    at $a.$$p.TMP_2 (/private/var/folders/pt/kr0lwm4d20jgc_jvpc5fyk1r0000gn/T/opal-nodejs-runner-20150225-3692-g51yt4:18987:83)\n    at self.$each.$$p (/private/var/folders/pt/kr0lwm4d20jgc_jvpc5fyk1r0000gn/T/opal-nodejs-runner-20150225-3692-g51yt4:4351:21)\n    at Opal.yield1 (/private/var/folders/pt/kr0lwm4d20jgc_jvpc5fyk1r0000gn/T/opal-nodejs-runner-20150225-3692-g51yt4:817:14)\n    at Array.def.$each.TMP_6 [as $each] (/private/var/folders/pt/kr0lwm4d20jgc_jvpc5fyk1r0000gn/T/opal-nodejs-runner-20150225-3692-g51yt4:6533:26)\n    at Array.Opal.defn.TMP_14 (/private/var/folders/pt/kr0lwm4d20jgc_jvpc5fyk1r0000gn/T/opal-nodejs-runner-20150225-3692-g51yt4:4361:18)\n    at OpalClass.def.$initialize.$arity [as $children] (/private/var/folders/pt/kr0lwm4d20jgc_jvpc5fyk1r0000gn/T/opal-nodejs-runner-20150225-3692-g51yt4:18987:130)\n    at /private/var/folders/pt/kr0lwm4d20jgc_jvpc5fyk1r0000gn/T/opal-nodejs-runner-20150225-3692-g51yt4:19227:14\n    at /private/var/folders/pt/kr0lwm4d20jgc_jvpc5fyk1r0000gn/T/opal-nodejs-runner-20150225-3692-g51yt4:19239:9\n    at /private/var/folders/pt/kr0lwm4d20jgc_jvpc5fyk1r0000gn/T/opal-nodejs-runner-20150225-3692-g51yt4:19540:7\nrake aborted!\nCommand failed with status (8): [RUBYOPT=\"-rbundler/setup -rmspec/opal/spec...]\n```\n",
    "head_branch": "fix_define_method",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3043f4e5dc4167f625466b4a29e3b40a90272aa7 into 9912dec0643385d0f3834509b0ee168db7be6366"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620931fd6ca63ac8d87ee80",
    "number": 706,
    "body": "pass \"String#[] with Regexp returns the matching portion of self\"\npass \"String#[] with Regexp returns nil if there is no match\"\npass \"String#[] with Regexp sets $~ to MatchData when there is a match and nil when there's none\"\npass \"String#[] with Regexp, index returns the capture for the given index\"\npass \"String#[] with Regexp, index returns nil if there is no match\"\npass \"String#[] with Regexp, index returns nil if there is no capture for the given index\"\npass \"String#[] with Regexp, index calls to_int on the given index\"\npass \"String#[] with Regexp, index raises a TypeError when the given index can't be converted to Integer\"\npass \"String#[] with Regexp, index raises a TypeError when the given index is nil\"\npass \"String#[] with Regexp, index sets $~ to MatchData when there is a match and nil when there's none\"\npass \"String#[] with Regexp returns subclass instances\"\npass \"String#[] with Regexp, index returns subclass instances\"\npass \"String#slice with Regexp returns the matching portion of self\"\npass \"String#slice with Regexp returns nil if there is no match\"\npass \"String#slice with Regexp sets $~ to MatchData when there is a match and nil when there's none\"\npass \"String#slice with Regexp, index returns the capture for the given index\"\npass \"String#slice with Regexp, index returns nil if there is no match\"\npass \"String#slice with Regexp, index returns nil if there is no capture for the given index\"\npass \"String#slice with Regexp, index calls to_int on the given index\"\npass \"String#slice with Regexp, index raises a TypeError when the given index can't be converted to Integer\"\npass \"String#slice with Regexp, index raises a TypeError when the given index is nil\"\npass \"String#slice with Regexp, index sets $~ to MatchData when there is a match and nil when there's none\"\npass \"String#slice with Regexp, group\"\npass \"String#slice with Regexp returns subclass instances\"\npass \"String#slice with Regexp, index returns subclass instances\"\n",
    "head_branch": "string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 248aef6f2aea05d4266381acb0bfc32703a2e132 into 8236a014238a1529cbeeaf30cdf5cb0a48ad18dc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209320d6ca63ac8d87ee81",
    "number": 705,
    "body": "",
    "head_branch": "changelog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ca9d5a840520f97f4fcfd50588418c8e7a5fd806 into 8236a014238a1529cbeeaf30cdf5cb0a48ad18dc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209321d6ca63ac8d87ee82",
    "number": 703,
    "body": "",
    "head_branch": "issue698",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209321d6ca63ac8d87ee83",
    "number": 701,
    "body": "DONE:\npass \"String#[] with String returns other_str if it occurs in self\"\npass \"String#[] with String returns nil if there is no match\"\n\nTODO:\nstill fails \"String#[] with String doesn't call to_str on its argument\"\nstill fails \"String#[] with String returns a subclass instance when\ngiven a subclass instance”\n",
    "head_branch": "string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1bd3f9a66d2631c825d0d199ee9b6c3b4f8d5cf5 into e2303dd246e213c6038a73efe5ce15d58d28d40f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209322d6ca63ac8d87ee84",
    "number": 697,
    "body": "When passing a block it will run in the context it was defined, normally.\nThis method wraps the block into a proc that when called will run the block in context of incoming `this`\n\nhttps://gist.github.com/sleewoo/8d785061fc0cfbe5675d\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209323d6ca63ac8d87ee85",
    "number": 691,
    "body": "- embedded minitest code in stdlib\n- added cruby checkout in test/cruby (submodule)\n- added rake task `cruby_tests`\n- rake task now only runs `test/cruby/test/ruby/test_call.rb`\n\nthis should be a good basis to start working with MRI's tests\n",
    "head_branch": "cruby-tests",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 2ce51875f891ff487d9a28bb883a63a89c03bceb into 34764219dec32a2d071e264d469cafe7c96dd32c"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66209324d6ca63ac8d87ee86",
    "number": 687,
    "body": "When no type is given, “rescue” should catch StandardError by default,\n_NOT_ all types of Exceptions.\n\nI am surprised `rubyspec`'s `corelib/language/rescue_spec.rb` did not test this.\n",
    "head_branch": "fix_rescue_default_behavior",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209325d6ca63ac8d87ee87",
    "number": 686,
    "body": "`File::ALT_SEPARATOR` and `File::PATH_SEPARATOR`\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209326d6ca63ac8d87ee88",
    "number": 683,
    "body": "Just a typo I ran across while reading the source :smile:  :abc: \n",
    "head_branch": "fix-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209327d6ca63ac8d87ee89",
    "number": 682,
    "body": "Other rubies allow both `Encoding.find('binary')` and\n`Encoding.find('BINARY')`. Opal was only allowing the uppercase version.\nThis change permits the lowercase search string as well.\n",
    "head_branch": "find-encoding-case-insensitive",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 299343edcbddb50bbf383d1b7d2e954392f53d97 into b8c6a71c4dfc60637157053b57164e585dff39ca"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209328d6ca63ac8d87ee8a",
    "number": 676,
    "body": "This fixes sprockets specs so that they pass on Windows :)\n\n```\nFinished in 9.77 seconds\n332 examples, 0 failures\n```\n",
    "head_branch": "spec_fix_windows",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2c8716f063147273ef59f90b642e86413b30aa9d into 0e14bf382fdd18ce4ddf2a3618b79645b1d4fe58"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209329d6ca63ac8d87ee8b",
    "number": 674,
    "body": "Adds ability to pass multiple values to resolve, and to a new class method called values.\n\nConsistently passes on the multiple values 1:1 to the receiving block.\n\nCode like this will be no longer work:\n\n``` ruby\nPromise.when(p1, p2, p3) { |vals| ... vals will currently be an array, but will now have the first value ... }\n```\n\nTest suites have been updated, and pass\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620932ad6ca63ac8d87ee8c",
    "number": 671,
    "body": "┐（　・_ゝ・）┌\n",
    "head_branch": "fix-typo-in-opal-readme",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 72d9ae469115ac0c95b0da54d52a363c42421da7 into 60d1e0250683d0e507418bcdc935f59a563c32cf"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620932bd6ca63ac8d87ee8d",
    "number": 668,
    "body": "set Opal::Processor.inline_operators_enabled to the default specified in the documentation.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge bc10b09d395f92ec1ab85806c69390d3aa0dc643 into 7d2835f7d86c3fbe4bc66c72af13778005e118e0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620932cd6ca63ac8d87ee8e",
    "number": 657,
    "body": "...enter Kernel#srand\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620932dd6ca63ac8d87ee8f",
    "number": 656,
    "body": null,
    "head_branch": "fixing-hash-hash",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 61a08ee8e2df12c18ba490e6112f33ee159b174e into 28f4945c2a6f4495923b881bcc8872a4215bf5e9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620932dd6ca63ac8d87ee90",
    "number": 654,
    "body": "WIP\n",
    "head_branch": "cache_store",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620932ed6ca63ac8d87ee91",
    "number": 653,
    "body": "- escape forward slash in regexp for compatibility with Rhino on JDK6\n",
    "head_branch": "issue-651-opal_0_6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620932fd6ca63ac8d87ee92",
    "number": 652,
    "body": "- escape forward slash in regexp for compatibility with Rhino on JDK6\n",
    "head_branch": "issue-651",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c7ade6790aa6a62dcc72e6d2cc8bad3b1ca22c38 into 92b1ae7c099d627728d89f884caa8264c02d263f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209330d6ca63ac8d87ee93",
    "number": 648,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209331d6ca63ac8d87ee94",
    "number": 642,
    "body": "Fixes #641 \n",
    "head_branch": "issue_641",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209332d6ca63ac8d87ee95",
    "number": 640,
    "body": "This adds `self.smap = {}` to Hash objects that will contain key/value for all String or Symbol keys.\n\nIt won't call `#hash` on String/Symbol keys and instead will just use them as keys.\n",
    "head_branch": "hash-string-map",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 038c97e4067bc377c1fd12c8fc6077acbcd1890b into cb667d85a7e67d3d1970eeea9850e63e5b817592"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209333d6ca63ac8d87ee96",
    "number": 637,
    "body": "ISO 8601 week and year implemented as a private function Time#cweek_cyear\n",
    "head_branch": "cweek_cyear",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1cb10e93cde83480f732cbdf0e8d68e8fafeeb32 into 1a020d96d54470e116880be605e1a3cb203ec656"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209334d6ca63ac8d87ee97",
    "number": 636,
    "body": "",
    "head_branch": "time",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209335d6ca63ac8d87ee98",
    "number": 635,
    "body": "",
    "head_branch": "xregexp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209336d6ca63ac8d87ee99",
    "number": 634,
    "body": "`rake mspec_node`\n\nUses the vanilla builder, to me seems a nice addition to `rake default`. \n@adambeynon @meh I'll merge it tomorrow if there's nothing against it :)\n",
    "head_branch": "node-mspec-runner",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209337d6ca63ac8d87ee9a",
    "number": 631,
    "body": "**WIP**\n\n@adambeynon need help to fix `Object = Kernel`.\n",
    "head_branch": "proper-bridging",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209338d6ca63ac8d87ee9b",
    "number": 628,
    "body": "fixes #231 and fixes #222 \n- Hash now uses #hash on all its keys\n- fixed recursive #inspect and #to_s \n",
    "head_branch": "hash-hash",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge f11882bf1661b19ac9ccfba72e755f6e67ac9ddb into 266b44ed3690c833b4c691640ae886aeec1e0117"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66209339d6ca63ac8d87ee9c",
    "number": 620,
    "body": "Hey @elia!\n\nLooks like things are passing on Opal on Sprockets 3.x beta. I updated the Gemfile comment and allowed 3.x versions.\n\nEverything should be API compatible on going forward on 3.x. Until you make the leap to only support 3.x and 4.x, I'd say you're best of allowing the current Opal to run on Sprockets 2/3.\n\nwdyt?\n\nThanks!\n",
    "head_branch": "sprockets-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620933ad6ca63ac8d87ee9d",
    "number": 617,
    "body": "fixes #610 \n",
    "head_branch": "require-tree",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620933bd6ca63ac8d87ee9e",
    "number": 614,
    "body": "@elia anything wrong with the small require system rewrite?\n",
    "head_branch": "runtime-style-cleanup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620933bd6ca63ac8d87ee9f",
    "number": 611,
    "body": "",
    "head_branch": "sprockets-inline-operators",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge fdd9e83dfd1da64869ca6a2f6804ab5680e69fbe into 5bd02f3319bbe56c20685082d13d761ac4fc49cb"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620933cd6ca63ac8d87eea0",
    "number": 607,
    "body": "fixes #602 \n",
    "head_branch": "require_tree",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 8c18b42f759fe4fd7f2a5db253dd44b40765d2ff into 8cdd3ad7766afe718103057baef165bfb5c431fa"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620933dd6ca63ac8d87eea1",
    "number": 596,
    "body": "These were missing.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1ceedffe27f4c5f895aebe418e34cd3430331609 into d34f42f0e45da1507d8fff9832bc6a24e8c075ea"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620933ed6ca63ac8d87eea2",
    "number": 595,
    "body": "$$alloc prototypes will keep their ruby name so that\nthey show up correctly in js stackytaces.\n",
    "head_branch": "elia/runtime-naming",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620933fd6ca63ac8d87eea3",
    "number": 591,
    "body": "This is my attempt to have Opal use XRegExp for all Regexps.\nPlease note that I have _not_ included XRegExp in the Runtime because I was not sure about how that should be done.\nThis implementation works with the current development version of XRegExp 3.0. https://raw.githubusercontent.com/slevithan/xregexp/master/src/xregexp.js\n\nIn addition I also added the missing #options and #casefold? functions.\n\nThe new constructor for Regexp also provides support for passing flags when creating a Regexp which was previously not supported.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209340d6ca63ac8d87eea4",
    "number": 590,
    "body": "",
    "head_branch": "numeric-coerced",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2da67446ad38eaf7971068636bfe1e8700173a52 into 008442527bca4943f8451b963dc2e3e522d22e09"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209341d6ca63ac8d87eea5",
    "number": 589,
    "body": "## WIP: do not merge\n### This PR is here for everyone to review or suggest stuff\n\nThe idea is to inject the a copy of the module in the ancestor chain of a class each time the module is included.\nThe copy is named \"iclass\" as included class and has as prototype the previous parent prototype of the class (the superclass or another module).\n",
    "head_branch": "elia/protons",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209342d6ca63ac8d87eea6",
    "number": 585,
    "body": "Obviously, do not merge yet.\n",
    "head_branch": "operators",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209343d6ca63ac8d87eea7",
    "number": 584,
    "body": "I switched lib to [maccman/sourcemap](/maccman/sourcemap) which is capable of concatenating them and is the one used by sprockets-4.\n\nMain problem right now is —unsurprisingly— off-by-one errors, but in my brief manual tests were almost right :frog: \n\nSee also: https://github.com/sstephenson/sprockets/issues/607#issuecomment-54520191\n",
    "head_branch": "source-maps",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 2bd3ed4d007cd3f9158a6652c3d28503141f0da7 into 8cdd3ad7766afe718103057baef165bfb5c431fa"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209344d6ca63ac8d87eea8",
    "number": 583,
    "body": "@adambeynon @meh I normalized all internal properties to use $$ instead of the underscore jungle you can see below. \n\n@adambeynon I know you didn't agree on using that prefix, but I had to take action and I think it will be rather easy to switch from it to whatever we'll agree on.\n\n💢 _Of course, it's possible that I missed something_\n\nℹ️ _This could also be a good time to document some of these internals_\n\n```\n__meta__     > $$meta\n__inc__      > $$inc\n__dep__      > $$dep\n__mod__      > $$mod\n\n__autoload   > $$autoload\n__parent     > $$parent\n\n_isClass     > $$is_class\n_isSingleton > $$is_singleton\n_isArray     > $$is_array\n_isRange     > $$is_range\n_isRegexp    > $$is_regexp\n_isBoolean   > $$is_boolean\n_isString    > $$is_string\n_isProc      > $$is_proc\n\nis_lambda    > $$is_lambda\n\n_base_module > $$base_module\n_orig_scope  > $$orig_scope\n_full_name   > $$full_name\n_donated     > $$donated\n_methods     > $$methods\n_proto       > $$proto\n_scope       > $$scope\n_klass       > $$class\n_super       > $$super\n_name        > $$name\n_jsid        > $$jsid\n_def         > $$def\n_id          > $$id\n_p           > $$p\n_s           > $$s\n```\n",
    "head_branch": "dollars-n-cents",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge aeb25c4a8f99e327ebe9939a334a7884235c191b into c3157a7029553433b1a5a13110daebe59f05f085"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209345d6ca63ac8d87eea9",
    "number": 577,
    "body": "Sorry for all the pull requests - should have tested a bit better and made one pull request. Opal's embedded engine test in Slim was failing since Opal requires Hike and a version of Sprockets that supports Sprockets.register_engine, but doesn't declare that in its gemspec. This should fix that. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 58cc89750959dd9207f3a5cb0cf18e900e2019a4 into 3b7a66d68214ce392963ce001f6e7b89b18e4a25"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209346d6ca63ac8d87eeaa",
    "number": 573,
    "body": "Some gems don't use lib or use more than one require path. _why's metaid library is a good example. This commit updates Opal.use_gem to append all require paths a gem declares. \n",
    "head_branch": "use_gem",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209347d6ca63ac8d87eeab",
    "number": 570,
    "body": "Opal registers Opal::Processor as a Tilt template for .opal files. That template only works if passed a Sprockets context. Even with limited functionality, it is useful to have an Opal Tilt template that runs in any context. For example, I like to embed Opal in my Slim templates for inline javascript without having to switch away from ruby. \n\nThis pull request simply compiles the Tilt data using Opal.compile if the context passed in was anything other than a Sprockets::Context.\n",
    "head_branch": "tilt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209348d6ca63ac8d87eeac",
    "number": 551,
    "body": "This PR fixes this code raises \"NoMethodError: undefined method `last' for 1\".\n\n``` rb\n[[1,2],[3,4]].map(&:last)\n```\n\nLink: http://opalrb.org/try/#code:%5B%5B1%2C2%5D%2C%5B3%2C4%5D%5D.map(%26%3Alast)%0A%0A%0A\n\nThis implementation is same as [Symbol#to_proc in Rubinius](https://github.com/rubinius/rubinius/blob/d17c1294e09ab9c70495a1278450c09e38ed01c6/kernel/common/symbol.rb#L108-L120) (which looks like [sym_call in MRI](https://github.com/ruby/ruby/blob/800c7af73ccae7ef862674f682d1d82ba2149379/string.c#L8455-L8505)).\n## \n\nSorry this PR does not have a test (I don't know where to add). Simple example:\n\n``` rb\n[[1,2],[3,4]].map(&:last)  #=> should be [2,4]\n```\n\nMore complex example (calling block with block):\n\n``` rb\nclass Foo\n  def bar(a, &b)\n    b.call(a)\n  end\nend\n\ndef test(&block)\n  block.call(Foo.new, 1){|x| puts \"I got #{x}\" }\nend\n\ntest(&:bar) #=> should be \"I got 1\"\n```\n",
    "head_branch": "fix_to_proc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge be1578998f0b4211bee583f77c8bd359fd822e79 into d0c745f02e6e8a734c0f4260e7be18deed7b1353"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209349d6ca63ac8d87eead",
    "number": 546,
    "body": "The comment for running the MSpec tests through spectator said it would run \"R\"Spec tests only. Small change but I thought I'd submit a PR since I noticed it :smile: \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209349d6ca63ac8d87eeae",
    "number": 543,
    "body": "Here we go again, \n\n**:sun_with_face: pros:**\n- pluggable processors (see `builder_processors.rb`), should be really easy to add more\n- cleaner object design and less code\n- support for file preloading (this means making files available for dynamic requires)\n\n**:suspect: cons:**\n- seems to be slower (but I think it's nothing we can't identify and fix)\n- had to remove most specs since they were too coupled to the old builder\n- source maps are still stubbed (but they'll come, using https://github.com/maccman/sourcemap)\n\n**:shipit: I think we should merge because:**\n- :trollface: yolo  \n- :put_litter_in_its_place: it's better OOD \n- :seat: we can fix stuff (i.e. \"cons\") on master \n",
    "head_branch": "new-builder",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 995cf8132e3b9bebe5ad31624bd7c8f658723db1 into 5dbb265a583cf94a37b968357e8a7264f623d36f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620934ad6ca63ac8d87eeaf",
    "number": 542,
    "body": "",
    "head_branch": "rspec-syntax",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620934bd6ca63ac8d87eeb0",
    "number": 541,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620934cd6ca63ac8d87eeb1",
    "number": 533,
    "body": "`Thread.list` reports itself as the current thread, and `Thread#new` explicitly disallows creation of threads.\n\n`Thread` now supports the fiber- and thread-local variable storage interface\n\n`Mutex` and `Queue` are implemented, and behave as expected, given the single-threaded environment.\n",
    "head_branch": "thread_shim",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620934dd6ca63ac8d87eeb2",
    "number": 531,
    "body": "This PR cleans up everything in `spec/filters/uncategorized/` into either `bugs/` or `unsupported/`.\n\nAlso includes a minor `Enumerator` patch, which was easier to fix than to categorize.\n",
    "head_branch": "categorize_specs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d2e43f7a42ff6d5811ab745d185824cceb06821c into 02c9cb9f26c5e0f9dd5bd75080ee8c208975f2fa"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620934ed6ca63ac8d87eeb3",
    "number": 530,
    "body": "Closes #529\n",
    "head_branch": "ignore_method_stubs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 797d5503812bd27f3d50903932d463b74cae2b4c into eb6b90f30beb4e7151dcfc096c40d358c3745bc5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620934fd6ca63ac8d87eeb4",
    "number": 528,
    "body": "This is large, complicated, and requires some explanation.\n- Rubyspec updated to master, now in `spec/corelib`\n- stdlib tests that were removed from rubyspec now reference their counterpart\n  repository in rubysl.  These live in `spec/stdlib`\n- Filters have been moved from `spec/opal/filters` to `spec/filters`, as they apply\n  to rubyspec and rubysl specs.\n- The base directory in the rake tasks have changed from `spec/opal` to `spec`, therefore\n  a few paths had to be modified, namely ERB template paths.\n- The `rubyspecs` file now lives in `spec`, and have to specify paths relative to itself.\n  This file specifies files in either `corelib` or `stdlib`\n- `rubyspecs` has been edited to omit tests that Opal was previously able to parse, but\n  can no longer.  These are only omissions related to `SyntaxError`.  An unfortunate\n  amount of coverage has been lost here.\n- `spec/filters/uncategorized` has been created.  These contain specs that now fail due to\n  upgrading rubyspec, or new specs in rubyspec that fail.  Some of these are re-wordings of\n  specs we pass.  No attempt to match these strings with existing filter strings has been made:\n  this will be a project onto itself.  No editorializing has been attempted, except to\n  allow the Time specs to fail, which have never passed on my machine.  The intent is, these\n  entries  will dwindle in the future as bugs are fixed, or they are explicitly moved to `bugs`\n  or `unsupported`.\n",
    "head_branch": "spec_tacular",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ad09bbcaabeaeabbf610188ac61be5c95c49143f into 23979b81142a94ff59395b886eff3ae3cd596a08"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66209350d6ca63ac8d87eeb5",
    "number": 526,
    "body": "Single-quoted heredoc identifiers do not process the content for escape sequences.\n\nAdded tests to ensure:\n- Escapes not processed in `<<'EOD'`\n- Escapes are processed in `<<\"EOD\"`\n- `<<EOD` is processed as `<<\"EOD\"`\n",
    "head_branch": "heredoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 830e3e5d9ed488fb1c36504f83de680b4f612f61 into 0dce848f1e222d1c6288d9a56d81e4de79325b48"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209351d6ca63ac8d87eeb6",
    "number": 524,
    "body": "- `Hash#delete` accepts a block for default value\n- `Hash#default=` and `Hash#default_proc=` unset their counterpart.\n- `Hash#merge`/`Hash#update` try to coerce with `:to_hash`\n- `Hash#==` Checks for value existence in rhs before comparing\n- `Hash.new` throws proper errors for more malformed argument list \"geometries\".\n\nAlso closes #522 (value existence on rhs)\n",
    "head_branch": "hash_default",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209352d6ca63ac8d87eeb7",
    "number": 523,
    "body": "Add support for:\n  `rescue SomeError, *expr`\n\nException matching has been moved to `Opal.$rescue` to generate more concise\ncode for the now-more-complicated logic.\n\nAlso closes #508\n",
    "head_branch": "rescue_splat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209353d6ca63ac8d87eeb8",
    "number": 521,
    "body": "This would close #512, and passes +9 specs for the low, low price of -1.\n\nSeriously, though: Any insight into the encoding issue would be appreciated.\n",
    "head_branch": "split",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209354d6ca63ac8d87eeb9",
    "number": 519,
    "body": "This is a Ruby 2.1 change, but as we previously returned nil, this is unlikely to be a compatibility issue.\n",
    "head_branch": "def_symbol",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209355d6ca63ac8d87eeba",
    "number": 518,
    "body": "Basically there's no `/dev/null` on Windows but instead it's just `nul` and also when command isn't found \"Invalid argument\" is thrown so we catch `Errno::EINVAL` too\n",
    "head_branch": "util_fix_win",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge cbab0456ed49343e1788ece98f2d8abf7db7c982 into fc199b5e2e1e477e9415b28053e4b9eb81a8edb1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209356d6ca63ac8d87eebb",
    "number": 515,
    "body": "Among other things, this allows binary operators to work:\n\n``` ruby\n  (:+).to_proc.call(1, 2)  # => 3\n```\n\nThis is most commonly encountered as a result of:\n\n``` ruby\n  [1, 2, 3].reduce(&:+) # => 6\n```\n\n(Note the ampersand: not using `inject`'s special-case Symbol handling.)\n\nI originally implemented this by extending the JS escape:\n\n``` ruby\n  def to_proc\n    %x{\n      return function(recv) {\n        var meth = recv['$' + self];\n        var rest = $slice.call(arguments, 1);\n        return meth ? meth.apply(recv, rest)\n                    : recv.$method_missing.apply(recv, [self].concat(rest));\n      };\n    }\n  end\n```\n\nThen I noticed the compiler does a damn-reasonable job at this, and it doesn't require scattering another `send` and `method_missing` dispatch around.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209357d6ca63ac8d87eebc",
    "number": 513,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5f698a9e058f57cffcc182a6a0fffe75f32d2659 into e2f6e188b257fa77f74d45f6d02590799542c8a9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209358d6ca63ac8d87eebd",
    "number": 510,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209359d6ca63ac8d87eebe",
    "number": 507,
    "body": "This is very [sane and well defined](http://www.ruby-doc.org/core-2.1.0/Fixnum.html#method-i-3C-3C) in Ruby, but JavaScript's behaviour is a bit more chaotic(*), so I introduced a comparison that \"manually\" reverts the direction.\n\nNew specs came from the rubyspec files with the same name for `Fixnum` (which seems to be the source for the specs that were already there). Inserted at the same position, so the files keep comparable.\n\n(*) I found that Firefox and Chrome seem to strictly follow [ECMA-262 11.7.1](http://www.ecma-international.org/ecma-262/5.1/#sec-11.7.1) item 7, meaning they will turn negative shift counts (in two's complement) into positive - in most cases, positive numbers that are large enough to make the final result zero, regardless of the original \"shifted\" number.\n",
    "head_branch": "shift_negative_count",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge cd504b4daaed9476f7634521892ea989683b1e3d into cbca29d6cb9b11bc788113f6663512f3b00c1805"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209359d6ca63ac8d87eebf",
    "number": 504,
    "body": "The [Array#[]= documentation](http://www.ruby-doc.org/core-2.1.0/Array.html#method-i-5B-5D-3D) says you can replace multiple elements of an array by using a range. Their example, highlighted below, works fine:\n\n``` ruby\na = Array.new\na[4] = \"4\";                 #=> [nil, nil, nil, nil, \"4\"]\na[0, 3] = [ 'a', 'b', 'c' ] #=> [\"a\", \"b\", \"c\", nil, \"4\"]\na[1..2] = [ 1, 2 ]          #=> [\"a\", 1, 2, nil, \"4\"]\n```\n\nIt also states that \"If indices are greater than the current capacity of the array, the array grows automatically\", which happens in Opal overall.\n\nHowever, if an expansion happens during such an attribution, Opal is not \"fillling the blanks\", but merely adding the elements at the end.\n\nAdded the spec because I could not find anything covering that on rubyspecs.\n\nLooking at the code that is supposed to do that, it checks if the JavaScript array needs growth before `splice`-ing it, but it grows up to `index`, which is a `Range`. It seemed to be a trivial fix, which broke no previous test (and also worked for [my original code that revealed the issue](https://github.com/chesterbr/ruby2600/blob/master/spec/lib/ruby2600/cpu_spec.rb#L703))\n",
    "head_branch": "array_resize_with_range",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5eb7d0d7459565a5432893493776ea10e5c46e9c into 5e73e545e9e6185ec25b8912dfa774cd6b62e87f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620935ad6ca63ac8d87eec0",
    "number": 502,
    "body": "",
    "head_branch": "issue-501",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c44031d486477d1d2e7cb9e08cf801e691a9db31 into 85220f32136c74ac93f1cb721462324a3423cf44"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620935bd6ca63ac8d87eec1",
    "number": 494,
    "body": "As defined in http://www.ruby-doc.org/core-1.9.3/Fixnum.html#method-i-5B-5D\n\nTwo things to consider:\n\n1) MRI implementation seems to coerce Bignum into Fixnum, resulting in bits outside Fixnum range being always zero, hence the boundary check. Variables can be made into proper class constants if desired (didn't do it to avoid introducing anything outside the function scope)\n\n2) Wasn't sure if Opal targets 32 or 64 bit, so I assumed the 64-bit range. Can change to 32-bit if desired, will likely pass the tests the same way, since mspec tests against a very large number (https://github.com/rubyspec/mspec/blob/61233407115b28eaa967fee41003caa6319ff630/lib/mspec/helpers/numeric.rb#L10-L12)\n\n(P.S.: Awesome project! I'm trying to run https://github.com/chesterbr/ruby2600 on it - which relies heavily on bit fiddling, hence the PR. Cheers)\n",
    "head_branch": "fixnum_element_reference",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620935cd6ca63ac8d87eec2",
    "number": 490,
    "body": "Our Travis overlord, I plead to test this pull request and make it work.\n",
    "head_branch": "travis",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620935dd6ca63ac8d87eec3",
    "number": 485,
    "body": "fixes for the example apps to include the index_path and relative path.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620935ed6ca63ac8d87eec4",
    "number": 483,
    "body": "From the error received, it was not immediately obvious that `rake dist`\nwas dependent on having `uglify-js` installed.\n",
    "head_branch": "add_build_instructions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620935fd6ca63ac8d87eec5",
    "number": 482,
    "body": "![WIP](http://www.adventureflorida.com/images/Under_Construction_Animation.gif)\n## don't merge, WIP-PR\n- [ ] have a compiler that is able to compile .js as well as .rb files, this could even go as far as wrapping js code in a module and make it requirable (the parallel here is with .so / .dll files in MRI)\n- [x] support for stubbed files, not sure if this goes into the NewBuilder or into the PathReader\n- [x] migrate all the code to use the NewBuilder, and then rename it to Builder (api is very similar btw)\n- [ ] _EXTRA_ allow for caching (pluggable, so we can use sprocket's when available)\n### Issues\n- [x] something's wrong with sprockets deps notification\n- [ ] requiring js files before `runtime.js` leaves \"stubs\" that rely on the not-yet-present `Opal.modules`\n\n---\n\nSee the [discussion on the diff](https://github.com/opal/opal/pull/482/files).\n",
    "head_branch": "real-requires",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 6f1631b21d1e8caf1dcfea6422dfc2caf1b765b6 into 28d67916fa81731ebae2da7172ac5af449d1b671"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209360d6ca63ac8d87eec6",
    "number": 481,
    "body": "Early pull request **TO NOT MERGE** so we can fix the main issue with this.\n\nWe need a way to either bridge a class with a different base class (might fix #476 as well), or hack around the ancestors for `Number` so it is seen as an instance of `Numeric`.\n\nThis compliancy is fairly important for any number related code, I personally need to use it in opal-browser and another project.\n\nThis issue came up while working on the `Math` module, both the lack of `Complex` and `Rational` was throwing off specs.\n",
    "head_branch": "numeric",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209361d6ca63ac8d87eec7",
    "number": 479,
    "body": "``` ruby\n# An RGB colour object.\nclass Color::RGB\n  # The format of a DeviceRGB colour for PDF. In color-tools 2.0 this will\n  # be removed from this package and added back as a modification by the\n  # PDF::Writer package.\n  PDF_FORMAT_STR  = \"%.3f %.3f %.3f %s\"\n\n  class << self\n    # Creates an RGB colour object from percentages 0..100.\n    #\n    #   Color::RGB.from_percentage(10, 20 30)\n    def from_percentage(r = 0, g = 0, b = 0)\n      from_fraction(r / 100.0, g / 100.0, b / 100.0)\n    end\n\n    # Creates an RGB colour object from fractional values 0..1.\n    #\n    #   Color::RGB.from_fraction(.3, .2, .1)\n    def from_fraction(r = 0.0, g = 0.0, b = 0.0)\n      colour = Color::RGB.new\n      colour.r = r\n      colour.g = g\n      colour.b = b\n      colour\n    end\n\n    # Creates an RGB colour object from an HTML colour descriptor (e.g.,\n    # <tt>\"fed\"</tt> or <tt>\"#cabbed;\"</tt>.\n    #\n    #   Color::RGB.from_html(\"fed\")\n    #   Color::RGB.from_html(\"#fed\")\n    #   Color::RGB.from_html(\"#cabbed\")\n    #   Color::RGB.from_html(\"cabbed\")\n    def from_html(html_colour)\n      html_colour = html_colour.gsub(%r{[#;]}, '')\n      case html_colour.size\n      when 3\n        colours = html_colour.scan(%r{[0-9A-Fa-f]}).map { |el| (el * 2).to_i(16) }\n      when 6\n        colours = html_colour.scan(%r<[0-9A-Fa-f]{2}>).map { |el| el.to_i(16) }\n      else\n        raise ArgumentError\n      end\n\n      Color::RGB.new(*colours)\n    end\n  end\n\n  # Compares the other colour to this one. The other colour will be\n  # converted to RGB before comparison, so the comparison between a RGB\n  # colour and a non-RGB colour will be approximate and based on the other\n  # colour's default #to_rgb conversion. If there is no #to_rgb conversion,\n  # this will raise an exception. This will report that two RGB colours are\n  # equivalent if all component values are within COLOR_TOLERANCE of each\n  # other.\n  def ==(other)\n    other = other.to_rgb\n    other.kind_of?(Color::RGB) and\n    ((@r - other.r).abs <= Color::COLOR_TOLERANCE) and\n    ((@g - other.g).abs <= Color::COLOR_TOLERANCE) and\n    ((@b - other.b).abs <= Color::COLOR_TOLERANCE)\n  end\n\n  # Creates an RGB colour object from the standard range 0..255.\n  #\n  #   Color::RGB.new(32, 64, 128)\n  #   Color::RGB.new(0x20, 0x40, 0x80)\n  def initialize(r = 0, g = 0, b = 0)\n    @r = r / 255.0\n    @g = g / 255.0\n    @b = b / 255.0\n  end\n\n  # Present the colour as a DeviceRGB fill colour string for PDF. This will\n  # be removed from the default package in color-tools 2.0.\n  def pdf_fill\n    PDF_FORMAT_STR % [ @r, @g, @b, \"rg\" ]\n  end\n\n  # Present the colour as a DeviceRGB stroke colour string for PDF. This\n  # will be removed from the default package in color-tools 2.0.\n  def pdf_stroke\n    PDF_FORMAT_STR % [ @r, @g, @b, \"RG\" ]\n  end\n\n  # Present the colour as an HTML/CSS colour string.\n  def html\n    r = (@r * 255).round\n    r = 255 if r > 255\n\n    g = (@g * 255).round\n    g = 255 if g > 255\n\n    b = (@b * 255).round\n    b = 255 if b > 255\n\n    \"#%02x%02x%02x\" % [ r, g, b ]\n  end\n\n  # Present the colour as an RGB HTML/CSS colour string (e.g., \"rgb(0%, 50%,\n  #100%)\"). Note that this will perform a #to_rgb operation using the\n  # default conversion formula.\n  def css_rgb\n    \"rgb(%3.2f%%, %3.2f%%, %3.2f%%)\" % [ red_p, green_p, blue_p ]\n  end\n\n  # Present the colour as an RGBA (with alpha) HTML/CSS colour string (e.g.,\n  # \"rgb(0%, 50%, 100%, 1)\"). Note that this will perform a #to_rgb\n  # operation using the default conversion formula.\n  def css_rgba\n    \"rgba(%3.2f%%, %3.2f%%, %3.2f%%, %3.2f)\" % [ red_p, green_p, blue_p, 1 ]\n  end\n\n  # Present the colour as an HSL HTML/CSS colour string (e.g., \"hsl(180,\n  #25%, 35%)\"). Note that this will perform a #to_hsl operation using the\n  # default conversion formula.\n  def css_hsl\n    to_hsl.css_hsl\n  end\n\n  # Present the colour as an HSLA (with alpha) HTML/CSS colour string (e.g.,\n  # \"hsla(180, 25%, 35%, 1)\"). Note that this will perform a #to_hsl\n  # operation using the default conversion formula.\n  def css_hsla\n    to_hsl.css_hsla\n  end\n\n  # Converts the RGB colour to CMYK. Most colour experts strongly suggest\n  # that this is not a good idea (some even suggesting that it's a very bad\n  # idea). CMYK represents additive percentages of inks on white paper,\n  # whereas RGB represents mixed colour intensities on a black screen.\n  #\n  # However, the colour conversion can be done. The basic method is\n  # multi-step:\n  #\n  #1. Convert the R, G, and B components to C, M, and Y components.\n  #     c = 1.0 - r\n  #     m = 1.0 - g\n  #     y = 1.0 - b\n  #2. Compute the minimum amount of black (K) required to smooth the colour\n  #    in inks.\n  #     k = min(c, m, y)\n  #3. Perform undercolour removal on the C, M, and Y components of the\n  #    colours because less of each colour is needed for each bit of black.\n  #    Also, regenerate the black (K) based on the undercolour removal so\n  #    that the colour is more accurately represented in ink.\n  #     c = min(1.0, max(0.0, c - UCR(k)))\n  #     m = min(1.0, max(0.0, m - UCR(k)))\n  #     y = min(1.0, max(0.0, y - UCR(k)))\n  #     k = min(1.0, max(0.0, BG(k)))\n  #\n  # The undercolour removal function and the black generation functions\n  # return a value based on the brightness of the RGB colour.\n  def to_cmyk\n    c = 1.0 - @r.to_f\n    m = 1.0 - @g.to_f\n    y = 1.0 - @b.to_f\n\n    k = [c, m, y].min\n    k = k - (k * brightness)\n\n    c = [1.0, [0.0, c - k].max].min\n    m = [1.0, [0.0, m - k].max].min\n    y = [1.0, [0.0, y - k].max].min\n    k = [1.0, [0.0, k].max].min\n\n    Color::CMYK.from_fraction(c, m, y, k)\n  end\n\n  def to_rgb(ignored = nil)\n    self\n  end\n\n  # Returns the YIQ (NTSC) colour encoding of the RGB value.\n  def to_yiq\n    y = (@r * 0.299) + (@g *  0.587) + (@b *  0.114)\n    i = (@r * 0.596) + (@g * -0.275) + (@b * -0.321)\n    q = (@r * 0.212) + (@g * -0.523) + (@b *  0.311)\n    Color::YIQ.from_fraction(y, i, q)\n  end\n\n  # Returns the HSL colour encoding of the RGB value. The conversions here\n  # are based on forumlas from http://www.easyrgb.com/math.php and\n  # elsewhere.\n  def to_hsl\n    min   = [ @r, @g, @b ].min\n    max   = [ @r, @g, @b ].max\n    delta = (max - min).to_f\n\n    lum   = (max + min) / 2.0\n\n    if Color.near_zero?(delta) # close to 0.0, so it's a grey\n      hue = 0\n      sat = 0\n    else\n      if Color.near_zero_or_less?(lum - 0.5)\n        sat = delta / (max + min).to_f\n      else\n        sat = delta / (2 - max - min).to_f\n      end\n\n      # This is based on the conversion algorithm from\n      # http://en.wikipedia.org/wiki/HSV_color_space#Conversion_from_RGB_to_HSL_or_HSV\n      # Contributed by Adam Johnson\n      sixth = 1 / 6.0\n      if @r == max # Color.near_zero_or_less?(@r - max)\n        hue = (sixth * ((@g - @b) / delta))\n        hue += 1.0 if @g < @b\n      elsif @g == max # Color.near_zero_or_less(@g - max)\n        hue = (sixth * ((@b - @r) / delta)) + (1.0 / 3.0)\n      elsif @b == max # Color.near_zero_or_less?(@b - max)\n        hue = (sixth * ((@r - @g) / delta)) + (2.0 / 3.0)\n      end\n\n      hue += 1 if hue < 0\n      hue -= 1 if hue > 1\n    end\n    Color::HSL.from_fraction(hue, sat, lum)\n  end\n\n  # Mix the RGB hue with White so that the RGB hue is the specified\n  # percentage of the resulting colour. Strictly speaking, this isn't a\n  # darken_by operation.\n  def lighten_by(percent)\n    mix_with(White, percent)\n  end\n\n  # Mix the RGB hue with Black so that the RGB hue is the specified\n  # percentage of the resulting colour. Strictly speaking, this isn't a\n  # darken_by operation.\n  def darken_by(percent)\n    mix_with(Black, percent)\n  end\n\n  # Mix the mask colour (which must be an RGB object) with the current\n  # colour at the stated opacity percentage (0..100).\n  def mix_with(mask, opacity)\n    opacity /= 100.0\n    rgb = self.dup\n\n    rgb.r = (@r * opacity) + (mask.r * (1 - opacity))\n    rgb.g = (@g * opacity) + (mask.g * (1 - opacity))\n    rgb.b = (@b * opacity) + (mask.b * (1 - opacity))\n\n    rgb\n  end\n\n  # Returns the brightness value for a colour, a number between 0..1. Based\n  # on the Y value of YIQ encoding, representing luminosity, or perceived\n  # brightness.\n  #\n  # This may be modified in a future version of color-tools to use the\n  # luminosity value of HSL.\n  def brightness\n    to_yiq.y\n  end\n  # Convert to grayscale.\n  def to_grayscale\n    Color::GrayScale.from_fraction(to_hsl.l)\n  end\n  alias to_greyscale to_grayscale\n\n  # Returns a new colour with the brightness adjusted by the specified\n  # percentage. Negative percentages will darken the colour; positive\n  # percentages will brighten the colour.\n  #\n  #   Color::RGB::DarkBlue.adjust_brightness(10)\n  #   Color::RGB::DarkBlue.adjust_brightness(-10)\n  def adjust_brightness(percent)\n    percent /= 100.0\n    percent += 1.0\n    percent  = [ percent, 2.0 ].min\n    percent  = [ 0.0, percent ].max\n\n    hsl      = to_hsl\n    hsl.l   *= percent\n    hsl.to_rgb\n  end\n\n  # Returns a new colour with the saturation adjusted by the specified\n  # percentage. Negative percentages will reduce the saturation; positive\n  # percentages will increase the saturation.\n  #\n  #   Color::RGB::DarkBlue.adjust_saturation(10)\n  #   Color::RGB::DarkBlue.adjust_saturation(-10)\n  def adjust_saturation(percent)\n    percent  /= 100.0\n    percent  += 1.0\n    percent  = [ percent, 2.0 ].min\n    percent  = [ 0.0, percent ].max\n\n    hsl      = to_hsl\n    hsl.s   *= percent\n    hsl.to_rgb\n  end\n\n  # Returns a new colour with the hue adjusted by the specified percentage.\n  # Negative percentages will reduce the hue; positive percentages will\n  # increase the hue.\n  #\n  #   Color::RGB::DarkBlue.adjust_hue(10)\n  #   Color::RGB::DarkBlue.adjust_hue(-10)\n  def adjust_hue(percent)\n    percent  /= 100.0\n    percent  += 1.0\n    percent  = [ percent, 2.0 ].min\n    percent  = [ 0.0, percent ].max\n\n    hsl      = to_hsl\n    hsl.h   *= percent\n    hsl.to_rgb\n  end\n\n  # Returns the red component of the colour in the normal 0 .. 255 range.\n  def red\n    @r * 255.0\n  end\n  # Returns the red component of the colour as a percentage.\n  def red_p\n    @r * 100.0\n  end\n  # Returns the red component of the colour as a fraction in the range 0.0\n  # .. 1.0.\n  def r\n    @r\n  end\n  # Sets the red component of the colour in the normal 0 .. 255 range.\n  def red=(rr)\n    @r = Color.normalize(rr / 255.0)\n  end\n  # Sets the red component of the colour as a percentage.\n  def red_p=(rr)\n    @r = Color.normalize(rr / 100.0)\n  end\n  # Sets the red component of the colour as a fraction in the range 0.0 ..\n  #1.0.\n  def r=(rr)\n    @r = Color.normalize(rr)\n  end\n\n  # Returns the green component of the colour in the normal 0 .. 255 range.\n  def green\n    @g * 255.0\n  end\n  # Returns the green component of the colour as a percentage.\n  def green_p\n    @g * 100.0\n  end\n  # Returns the green component of the colour as a fraction in the range 0.0\n  # .. 1.0.\n  def g\n    @g\n  end\n  # Sets the green component of the colour in the normal 0 .. 255 range.\n  def green=(gg)\n    @g = Color.normalize(gg / 255.0)\n  end\n  # Sets the green component of the colour as a percentage.\n  def green_p=(gg)\n    @g = Color.normalize(gg / 100.0)\n  end\n  # Sets the green component of the colour as a fraction in the range 0.0 ..\n  #1.0.\n  def g=(gg)\n    @g = Color.normalize(gg)\n  end\n\n  # Returns the blue component of the colour in the normal 0 .. 255 range.\n  def blue\n    @b * 255.0\n  end\n  # Returns the blue component of the colour as a percentage.\n  def blue_p\n    @b * 100.0\n  end\n  # Returns the blue component of the colour as a fraction in the range 0.0\n  # .. 1.0.\n  def b\n    @b\n  end\n  # Sets the blue component of the colour in the normal 0 .. 255 range.\n  def blue=(bb)\n    @b = Color.normalize(bb / 255.0)\n  end\n  # Sets the blue component of the colour as a percentage.\n  def blue_p=(bb)\n    @b = Color.normalize(bb / 100.0)\n  end\n  # Sets the blue component of the colour as a fraction in the range 0.0 ..\n  #1.0.\n  def b=(bb)\n    @b = Color.normalize(bb)\n  end\n\n  # Adds another colour to the current colour. The other colour will be\n  # converted to RGB before addition. This conversion depends upon a #to_rgb\n  # method on the other colour.\n  #\n  # The addition is done using the RGB Accessor methods to ensure a valid\n  # colour in the result.\n  def +(other)\n    other = other.to_rgb\n    rgb = self.dup\n\n    rgb.r += other.r\n    rgb.g += other.g\n    rgb.b += other.b\n\n    rgb\n  end\n\n  # Subtracts another colour to the current colour. The other colour will be\n  # converted to RGB before subtraction. This conversion depends upon a\n  # #to_rgb method on the other colour.\n  #\n  # The subtraction is done using the RGB Accessor methods to ensure a valid\n  # colour in the result.\n  def -(other)\n    other = other.to_rgb\n    rgb = self.dup\n\n    rgb.r -= other.r\n    rgb.g -= other.g\n    rgb.b -= other.b\n\n    rgb\n  end\n\n  # Retrieve the maxmum RGB value from the current colour as a GrayScale\n  # colour\n  def max_rgb_as_grayscale\n      Color::GrayScale.from_fraction([@r, @g, @b].max)\n  end\n  alias max_rgb_as_greyscale max_rgb_as_grayscale\n\n  def inspect\n    \"RGB [#{html}]\"\n  end\nend\n\nrequire 'color/rgb-colors'\n```\n\nThe error:\n\n```\n/home/meh/.gem/ruby/2.0.0/gems/opal-0.6.0/lib/opal/parser.rb:50:in `on_error': parse error on value \"=\" (tEQL) :(file):59 (RuntimeError)\n    from /usr/lib/ruby/2.0.0/racc/parser.rb:258:in `_racc_do_parse_c'\n    from /usr/lib/ruby/2.0.0/racc/parser.rb:258:in `do_parse'\n    from /home/meh/.gem/ruby/2.0.0/gems/opal-0.6.0/lib/opal/parser.rb:22:in `parse_to_sexp'\n    from /home/meh/.gem/ruby/2.0.0/gems/opal-0.6.0/lib/opal/parser.rb:17:in `parse'\n    from /home/meh/.gem/ruby/2.0.0/gems/opal-0.6.0/lib/opal/compiler.rb:67:in `compile'\n    from /home/meh/.gem/ruby/2.0.0/gems/opal-0.6.0/lib/opal/compiler.rb:8:in `compile'\n    from /home/meh/.gem/ruby/2.0.0/gems/opal-0.6.0/lib/opal/cli.rb:113:in `show_compiled_source'\n    from /home/meh/.gem/ruby/2.0.0/gems/opal-0.6.0/lib/opal/cli.rb:29:in `run'\n    from /home/meh/.gem/ruby/2.0.0/gems/opal-0.6.0/bin/opal:14:in `<top (required)>'\n    from /home/meh/.gem/ruby/2.0.0/bin/opal:23:in `load'\n    from /home/meh/.gem/ruby/2.0.0/bin/opal:23:in `<main>'\n```\n",
    "head_branch": "ng-percent-strings",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209362d6ca63ac8d87eec8",
    "number": 471,
    "body": "Firefox keeps filling the JS console with:\n\n```\nSyntaxError: Using //@ to indicate source map URL pragmas is deprecated. Use //# instead\n```\n\nthis fix the problem (not tested with other browser).\n",
    "head_branch": "source-maps-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209363d6ca63ac8d87eec9",
    "number": 464,
    "body": "@opal/owners **DO NOT MERGE**, I'll merge it when it's ready.\n\nThis pull request implements promises, as conceptually seen [here](http://wiki.commonjs.org/wiki/Promises/A) and humanly explained [here](http://blog.parse.com/2013/01/29/whats-so-great-about-javascript-promises/).\n\nI'm opening this early so people can try it and comment about the API.\n\nI'm doing this because while working with real world stuff I started getting into callback hell, and I started looking for solutions and found the Promise/A proposal.\n\nPromises will be used in opal-browser where meaningful, for instance `HTTP.get` and friends will return a `Promise`.\n",
    "head_branch": "promise",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 86a79c979742de3ff6f8d0927365e4686bf1652e into abb78c1ae5dac53e2561c41ba7aff301f81d0e67"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209364d6ca63ac8d87eeca",
    "number": 463,
    "body": "Rack::Static is better than Rack::Directory because:\n- more configurable (with root and urls parameters)\n- does not capture the / request (so index request can be sent to the next application or a 404 response will be returned instead of the listing of /)\n\nMoreover this change does not break examples.\n",
    "head_branch": "opal-sprockets-static",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 87d7fdce2ee999f4cf11444525dca3f32878ce1b into f21c34c4338ac85dbc5d845986ba73503736adc7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209364d6ca63ac8d87eecb",
    "number": 461,
    "body": "`opal` without options used to print representation of CLIOptions instance. `puts`, unlike `p`, returns `nil`, which fixed the issue.\n",
    "head_branch": "fixed-bin",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f98625395d9569e8c201770e64db8ecfa8258a09 into 3bf739fae32fb89e5b03ced982b3c0b06b67c64e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209365d6ca63ac8d87eecc",
    "number": 460,
    "body": "It used to print representation of CLIOptions instance. `puts`, unlike `p`, returns `nil`, which fixed the issue.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209366d6ca63ac8d87eecd",
    "number": 459,
    "body": "The `use_index` option allows you to tell opal-sprockets if you want to use its default index page or not.\nSo for example if you have a sinatra application and a config.ru like this:\n\n``` ruby\nrequire 'bundler'\nBundler.require\n\nrequire './server'\nrequire './client'\n\nrun Rack::Cascade.new([OpalApp, SinatraApp])\n```\n\nyou dont have to switch applications order, you just tell OpalServer you do not want its default index.\n\nThe `source_map` option is just a shortcut to use instead of `Opal::Processor.source_map_enabled`.\n\nUpdating doc I think I should also fixed opal#458\n",
    "head_branch": "opal-sprockets",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209367d6ca63ac8d87eece",
    "number": 455,
    "body": "Because of the `2>` redirect, the detection of uglify-js and gzip does not work. Here's a suggestion for a fix, would make it easier if ever there's a particular version required too, but there might be better solutions.\n\nEncountered this as I didn't have uglify-js installed and got a strange broken pipe error. Another solution would be to simply rescue Errno::EPIPE, but I was not able to reproduce the broken pipe error with trivial examples. Also I feared it could misinterpret problems with the program with the absence of it, but I don't know much about this.\n",
    "head_branch": "external_dependencies",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209368d6ca63ac8d87eecf",
    "number": 454,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ce87a8839792ef26bece59cc7d8422bddce8a104 into 2a2d3a55211208188513ebfb4397b229ddd57b47"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209369d6ca63ac8d87eed0",
    "number": 451,
    "body": "`Opal.compile` should accept options (and `eval` might as well).\n\nThis piggybacks on `Opal.hash` creating a `Hash` from a plain js object.\n",
    "head_branch": "compile_with_options",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620936ad6ca63ac8d87eed1",
    "number": 450,
    "body": "When interfacing with Opal, it's quite natural to want to create a Hash from a plain javascript object.\n\nSince `Opal.hash({key: 'value'})` currently returns a useless value, I modified it to return the desired hash.\n",
    "head_branch": "hash_from_plain_object",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 55f625a0f595e049bab48ed6754e3c640d0e3de6 into e6c944e19c14a90f7d4ef19fcc58978a727f3532"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620936bd6ca63ac8d87eed2",
    "number": 449,
    "body": "This fix was made possible by https://github.com/opal/opal/commit/03fda15aa01393af9179998c9439a6040b69721c\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8d7f215d0228464026076499fe584558976b3953 into 073b738b5e6717b45d0b11d956ffd1381b7c8c33"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620936cd6ca63ac8d87eed3",
    "number": 444,
    "body": "Ruby-like String#split for String delimiter\n\nIf this request will be success, i could try to port Regexp delimiter\n",
    "head_branch": "split",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620936dd6ca63ac8d87eed4",
    "number": 442,
    "body": "The general idea is to cleanup spec tasks and move all specs under `/spec`\n\nAn alternative naming option is `/spec/rspec` and `/spec/mspec`\n",
    "head_branch": "spec-paths-cleanup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 3e30534abaf46086f986588ab33e6f9e61460319 into 8ebbaa215e7b475a1b68290f0e886c4f4a4b701c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6620936dd6ca63ac8d87eed5",
    "number": 441,
    "body": "1. I don't know about how fast `String#concat` vs `String#+=`, but i think first is more semantic\n2. I don't know how i can add `Numeric#to_str` ... if i do something like this, it make specs red in `Array`\n\n``` ruby\n  def to_s(base = 10)\n    if base < 2 || base > 36\n      raise ArgumentError, 'base must be between 2 and 36'\n    end\n\n    `self.toString(base)`\n  end\n\n  alias inspect to_s\n  alias to_str to_s\n```\n\nThis article http://www.sitepoint.com/javascript-fast-string-concatenation/ says that challenge in `String#concat` vs `Array.join` mode, not in `String#concat` vs `String#+=`\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620936ed6ca63ac8d87eed6",
    "number": 430,
    "body": "I figure the best way to understand a new project is to dive in and start writing tests (and fixing bugs). When I was on IRC I noticed this commit ee0caf1 come through with no tests, so... \n\nI hope you don't mind if I submit a stream of patches while I get my bearings. (Don't expect me to be your test monkey forever, though.)\n",
    "head_branch": "hash-spec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e4b6b91a46dc8cb87e3c73a70993abc2898c084c into ee0caf174064bb09c5b864c9759e88ebb2375b75"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620936fd6ca63ac8d87eed7",
    "number": 429,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e4b6b91a46dc8cb87e3c73a70993abc2898c084c into ee0caf174064bb09c5b864c9759e88ebb2375b75"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209370d6ca63ac8d87eed8",
    "number": 417,
    "body": "This pull request is mostly for discussion and testing of the thing, so @opal/owners don't merge it until I merge it myself if it's clear it works.\n\nOnto the thing, all specs are passing right now, there are some fixes for `Array` methods that I'm going to backport to master because they apply there too.\n\nBasically it does some prototype magic to make the inherited class use a wrapper that wraps a real `Array` and defers the method to it.\n\nWhat needs to be done is testing this with actual software, so @elia and @adambeynon I'm looking at you.\n\nIt won't affect anything `Array` related unless you're using objects inherited from `Array`.\n\n_Next in line, mutable Strings and String inheritance._\n",
    "head_branch": "array-inheritance",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209371d6ca63ac8d87eed9",
    "number": 411,
    "body": "- also return enum when no block is given (for each_char and each_byte)\n- also return self (for each_char and each_byte)\n",
    "head_branch": "string-each-byte",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209372d6ca63ac8d87eeda",
    "number": 410,
    "body": "- also fixes invalid return from StringIO.read\n",
    "head_branch": "kernel-warn",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209373d6ca63ac8d87eedb",
    "number": 401,
    "body": "32 examples are still failing, I added them to the bugs/language mspec filter\n",
    "head_branch": "fix-defined",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2c64f58043f14704f29d03529cf4ddd0c30011df into 5cc56f30811229451ed3bb1a5378c86e4fe2b5e2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209374d6ca63ac8d87eedc",
    "number": 399,
    "body": "This PR fixes the comparison operator (`<=>`) allowing it to also accept the `Numeric` type.\n",
    "head_branch": "fix_numeric_comparison_operator",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209375d6ca63ac8d87eedd",
    "number": 376,
    "body": "This PR is just for discussing names, will add proper test and checks later. \n",
    "head_branch": "native-exposure",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge c682171c399b02dd2d80051bcc5569355b5a1b42 into 71bc1d565e445743730bc07e037a5707140a23d3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209376d6ca63ac8d87eede",
    "number": 375,
    "body": "Wrong:\n\n``` ruby\nx = { foo: \"bar\" }\nx.has_key?(\"toString\") #=> true\n```\n\nRight:\n\n``` ruby\nx = { foo: \"bar\" }\nx.has_key?(\"toString\") #=> false\n```\n",
    "head_branch": "fix-hash-has_key",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge adce8ed49b77e5ad615762db9262525032785380 into 18d05e2ab4b26ffdb61984e5d46dc575e7d26ceb"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209377d6ca63ac8d87eedf",
    "number": 374,
    "body": "Wrong:\n\n``` ruby\n(0..2.4).to_a #=> [0, 1, 2, 3]\n```\n\nRight:\n\n``` ruby\n(0..2.4).to_a #=> [0, 1, 2]\n```\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 53f6a6197a47627452ac697881e9910b041916d4 into 2691464b583c0357c7e4f16dc3d815d7f360c623"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209378d6ca63ac8d87eee0",
    "number": 373,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2a29c1117fa012ff5cabe1992b1ae9120f2748cc into dded0d4cf2907de2a1e3ce46edded8eeb4126d19"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209379d6ca63ac8d87eee1",
    "number": 372,
    "body": "Right:\n\n``` ruby\n(1...3).max #=> 2\n```\n\nWrong:\n\n``` ruby\n(1...3).max #=> 3\n```\n",
    "head_branch": "fix-range",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 071b6e1d106a45ac545bf8d246be0e34def250a7 into a91336f626644eaca1adb4437a2e33726418ee30"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209379d6ca63ac8d87eee2",
    "number": 364,
    "body": "as long as each part of the path starts with a word character\n",
    "head_branch": "untaint_require_paths",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f376483c0c977f28ef4da90945edd7f5ea4a7278 into 619d46b76acf9906909f62c1ad9248b26c4f1869"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620937ad6ca63ac8d87eee3",
    "number": 363,
    "body": "I'm trying to run opal in a [safe](http://www.ruby-doc.org/docs/ProgrammingRuby/html/taint.html) environment, and this is the first problem I ran into.  If I run into more, I'll provide more patches.  These changes will not affect anybody who runs code in a normal (\"unsafe\") environment.\n",
    "head_branch": "safe_build",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge eb493e808f68724b8ffce75119f3e65726dd57ed into ba7ea76eeb2277b84ea769e69af171f4744d2724"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620937bd6ca63ac8d87eee4",
    "number": 362,
    "body": "Currently, `Numeric#to_s` just delegates to JS's `toString()` function, which stringifies a number without doing anything with the radix. This PR allows it to work just as it does in Ruby. The algorithm was borrowed from the same method in [Rubinius](https://github.com/rubinius/rubinius/blob/b2952297495c74d651f9d7d53e4d7d71fb41d4c7/vm/builtin/fixnum.cpp#L433-L467), which was in turn borrowed from MRI. I just Rubified it and swapped out single-letter variable names with more descriptive ones.\n\nThis functionality required the `Numeric#divmod` method, so I added that, too. While I was in there, I noticed that JS's modulo function doesn't work the same as in Ruby (negative numbers weren't being converted properly), so I updated `Numeric#%`  to work like Ruby's.\n",
    "head_branch": "numeric-to_s-with-radices",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 11857bd3abdd5ed96ad19d4cc0d59776c1b1a6ba into 0c70201888d685a3f0582551d489b1d8e22fae1b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620937cd6ca63ac8d87eee5",
    "number": 360,
    "body": "",
    "head_branch": "add_time_strftime_formats",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9e6bc7c0aedfc31c21687fc3cc99053f70169606 into fffda8b5b70261fef775df033a7379d21ad85fc3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620937dd6ca63ac8d87eee6",
    "number": 359,
    "body": "Pull request made by @elia at https://bitdeli.com\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6c7bae1c0457cf407b58b57c3068171d37a4c618 into 837d344e1c5f90d7ab38badfea40a082f83504ca"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620937ed6ca63ac8d87eee7",
    "number": 348,
    "body": "Added the basic structure for speccing all the stuff that doesn't fit in phantomjs :) (e.g. bin/opal)\n",
    "head_branch": "rspec",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 28b23d45e1b25a9db9a3da4059272c2bf457ef8d into eff243e1181e300f01ce3ee41f6b16731e3cbc7e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6620937fd6ca63ac8d87eee8",
    "number": 325,
    "body": "This is just a heads-up about some changes to the runtime. Before, a class was basically just a Proc instance, with some added extras and hacks to make it look different from a Proc. This was because under the hood, we used a Function and its prototype to store methods etc.\n\nThe problem with that, was that as classes were just a functions, they couldnt inherit methods (class methods), so everytime we add a class method, we would have to manually add those methods to subclasses.\n\nWell, no longer!\n\nThis commit makes classes be real opal objects, so they are just literal instances of `Class`. There shouldnt really be any breaking changes here.\n",
    "head_branch": "real_classes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b9e65bb79d3673bb2b8109782266d1425aa9d123 into ee56d2e78ccfbabf6dbef74f539b9eb1ce3b2450"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66209380d6ca63ac8d87eee9",
    "number": 312,
    "body": "Hi.\nI removed `pending` from Array#+ spec and added some code for correct work `+` method.\n",
    "head_branch": "feature",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0105a95a0643f7997a5ee2b43020ab1bbcdbd015 into c288c65091861ab9798a36984e1673efef9e130e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209381d6ca63ac8d87eeea",
    "number": 294,
    "body": "I'll add the description later so that it can be reused for the changelog.\n",
    "head_branch": "source-maps",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 088dd2ff8171652019e16a3df0905844ddee00f0 into cf0a7e4712ab3b6be26160557d4fdc6ebb4c16e2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209382d6ca63ac8d87eeeb",
    "number": 290,
    "body": "Everything should be fine, just looking for a review\n",
    "head_branch": "js-lint-runtime",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 6c1732d498a24c133725ea66d4d9330d1f694d52 into df68fc5a94611815bcf129f0b31594ff1ff5caef"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209383d6ca63ac8d87eeec",
    "number": 289,
    "body": "After testing the new release of Opal (0.3.44) in IE 8, I came across an error of a `indexOf` function call on `Array`, which is not supported in IE 8.\n\nThis PR replaces the `indexOf` function call with an if statement, making it compatible with IE 8 and possibly other older JavaScript implementations.\n",
    "head_branch": "fix_js_for_ie_8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0591006b9e96bf13ae4b0edd1a558da38d0a328f into 5653b0d77d096e78a11f1e1229cc14e075901827"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209384d6ca63ac8d87eeed",
    "number": 283,
    "body": "Hi. \nI rewrote the `Array#new` method, correcting behavior. And added `Array#initialize` method.\n",
    "head_branch": "array-new",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1de5623fe1c591482ced7c4ad8d0179efc74723a into 929f6f9a1194c6c25f950f62cdbe34a35be1b51f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209385d6ca63ac8d87eeee",
    "number": 282,
    "body": "",
    "head_branch": "rand",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1ce20cdb3a08b31d24174150430ed955ddd43e45 into e64c69bf881681a8bf50be8d736bf70212a3a4ec"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209385d6ca63ac8d87eeef",
    "number": 281,
    "body": "Hi there,\nI have added String#center, String#ljust, String#rjust and specs.\nI tried to be as DRY as possible implementing ljust, use ljust to implement rjust and than use both to implement center.\n\nIf you have suggestions please give me feedback, I am sure this code could be improved. \n\nI am looking forward to to start contributing this great project!\n\nCheers\n",
    "head_branch": "adds_ljust_rjust_center",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge bbf57153f59bae138646150d765ca88a7d18f3e9 into 1db6dc04d9263b2408aedc367f655c114e9abb13"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209386d6ca63ac8d87eef0",
    "number": 280,
    "body": "",
    "head_branch": "numbers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge de4743be54df7120108eef6b664a6fb02dccff14 into 3e543d194081ee3daab4d5bd936e0419a9657649"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209387d6ca63ac8d87eef1",
    "number": 273,
    "body": "",
    "head_branch": "string-sub-match",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge abbc072536cb69268a155913f914e187fd91af9a into 49e527ccd0be12d6f79b59246f50bc6809ce80d2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209388d6ca63ac8d87eef2",
    "number": 272,
    "body": "String#chomp was previously choking on:\n\n```\n\"hello)\".chomp(\")\")\n```\n",
    "head_branch": "chomp-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b9a3bf98f1b0372e28f7275e588c917b99d28ddd into 7bf243dfd3c5e69a18c264964c07be858a7251bb"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209389d6ca63ac8d87eef3",
    "number": 271,
    "body": "",
    "head_branch": "regex-backref-alignment",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3e58369e18fa7db4a5f0e52bedeb9ae7c6ae5294 into 49bafba52a4b399457a838355747f36820656298"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620938ad6ca63ac8d87eef4",
    "number": 270,
    "body": "",
    "head_branch": "string-cmp-array-intersect",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3cc30c43dc41918f2e4311d4ebd0e9c0b786d82b into a27221e7f19e5f82085fe368711c06ef4b0cf653"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620938bd6ca63ac8d87eef5",
    "number": 269,
    "body": "- also, improve the efficiency of the check\n",
    "head_branch": "end-with-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 45e5bead34ba3d7c5f42fdb4945d2a34a3e2db90 into e05db6c69cab5bb895fc4ed283cc8933c4e9b3ca"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620938cd6ca63ac8d87eef6",
    "number": 268,
    "body": "I think being able to control the severity of the validation for a dynamic require is critical for Opal adoption. There are paths in the code I've guarded against Opal getting to at runtime, but it has to be possible to tell the parser not to worry about them.\n",
    "head_branch": "dynamic-require-severity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 18eb0be1a3d44a06c61a389483d4349badea10e7 into 24a5b648cfb89e19a991a518e5ee78e73759f0b2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620938dd6ca63ac8d87eef7",
    "number": 267,
    "body": "",
    "head_branch": "minor-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 951ea5b3eaf19c479b8bceb0ce67cc69dcbd514f into 8fffb9b26621fd581751c0811bcc24a6f5ac59aa"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620938ed6ca63ac8d87eef8",
    "number": 266,
    "body": "",
    "head_branch": "strscan-get-byte",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2bcd4a226a9b0f0df72204fd7f5238b64e4d14b7 into 89b39fc297700a6f8f69d03666aa6b6c21d2143e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620938fd6ca63ac8d87eef9",
    "number": 265,
    "body": "",
    "head_branch": "strscan-skip",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ea95ccb2689cb3c825905d0a87ab03e8d1e99dbb into f1c5f6c820fd31501ad58440c8a3b79c331db84c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209390d6ca63ac8d87eefa",
    "number": 264,
    "body": "",
    "head_branch": "rindex",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d3991e382674e8ffa6532087f474c92d2131f1e5 into 9d3ad6a255014a96cf57003a00860bc44c9cac01"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209391d6ca63ac8d87eefb",
    "number": 263,
    "body": "",
    "head_branch": "each-block-arity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0bde7af0f31fd8ff73966509f2074262e6d6ee1e into 2d87f3d399970951158fc024e93fa2ab613efc0e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209392d6ca63ac8d87eefc",
    "number": 262,
    "body": "",
    "head_branch": "fix-missing-require",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e90218139bdfd33b5e4243e708c436610f16c59a into 3e02a62b8c3686bfe080f3089c8dfb5f740c2a23"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209393d6ca63ac8d87eefd",
    "number": 261,
    "body": "",
    "head_branch": "predefined",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 18781a2017cfca5a8fb78c39aa96b9a4288d3cf4 into 423afb117f22036919858393fc976003d3a97ca1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209394d6ca63ac8d87eefe",
    "number": 258,
    "body": "I wanted to play with it so here is support for tilt, if you are not familiar that's the part used for rendering templates in sinatra and rails I think via sprockets.\n\nIf you want I can add a basic rack application as an example.\n",
    "head_branch": "tilt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209395d6ca63ac8d87eeff",
    "number": 257,
    "body": "- implement the String#scan method\n- add a proper, top-level, reusable implementation of MatchData\n- use MatchData in String#=~\n- add specs\n",
    "head_branch": "string-scan",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b7d210e8a29c522e90c9790b3cf19fa2d68c806b into 882ce9880d9479be379aa7207ae6390739b8161d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209396d6ca63ac8d87ef00",
    "number": 255,
    "body": "",
    "head_branch": "array-max-min",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f85ea09b17cfea5ed967dd0c8203dae194628cb9 into c8a51411fb4e57b7ef0e243d5941cbd8c55c3ca4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209396d6ca63ac8d87ef01",
    "number": 254,
    "body": "",
    "head_branch": "more-match-data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3cc316277096af8d1355a66f11387c423937aa0e into e3139e612157823ea4b14a47cdce5bb9caf7cadf"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209397d6ca63ac8d87ef02",
    "number": 253,
    "body": "- fix compliance of ancestor scope search\n- implement inherit flag for const_defined? and const_set\n- fix existing specs, add additional specs\n- remove redundant underscore from const name regexp\n",
    "head_branch": "const-methods-compliance",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b33ecfefab1539f93e179522c71d76fb6df6e859 into d1b130f3c4c25c9c4391a3740921df9e250a7d23"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209398d6ca63ac8d87ef03",
    "number": 252,
    "body": "- when called on Module (or Class), retrieve global constants\n- when called on Object, retrieve constants scoped to instance\n",
    "head_branch": "module-constants",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 82623c3c38633771fecd3dd22a77245d79ae738a into 8193121fb5674729baeb85fb0d27d4f157eb4fd7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66209399d6ca63ac8d87ef04",
    "number": 251,
    "body": "- recreate RegExp, if necessary, to include global flag in match method\n- populate MatchData using all information JavaScript makes available\n- assign the $` and $' implicit variables\n- rename argument names to correctly match what they are\n",
    "head_branch": "pre-post-matchdata",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d60453fe902fb50c7557ac211cf7d6ae24b742d7 into fecf2bf4c9594c66cf2179db77482d30593fe42f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620939ad6ca63ac8d87ef05",
    "number": 249,
    "body": "I made a slight mistake when implementing String#lines w/o block given. I forgot to preserve the separator.\n\nI also added a fix to not restore the separator on the last entry if it wasn't present in the original string. This behavior is consistent w/ the behavior of Ruby as I deduced from comparing outputs.\n",
    "head_branch": "string-lines-separator-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b8de1b6eb735d5a978087bd66b18f4ef5f9c4329 into 467cd05ca1a53b9676522f82987ffe2e8c70865c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620939bd6ca63ac8d87ef06",
    "number": 248,
    "body": "Implements the behavior of String#lines when no block is given, which is to return an Enumerator. This allows the following invocation:\n\n```\nstr = \"one\\ntwo\\nthree\"\nlines = str.lines.entries\n```\n\nThis form is often used when processing file data.\n",
    "head_branch": "string-lines-entries",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge fca30b19c4324603934f3d85231d7bc266182817 into 917c00677194da9f7bbf78a1c355d305a4eab857"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620939cd6ca63ac8d87ef07",
    "number": 247,
    "body": "Implement String#clone and String#dup. Although this a somewhat meaningless operation in JavaScript since Strings are immutable, it prevents code that use them from crashing.\n",
    "head_branch": "string-dup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3040271d058c65b22942adb682e92cdc9ab6224f into 013b144dc85fc75a5bedcb27330f2d1b0f56681e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620939dd6ca63ac8d87ef08",
    "number": 246,
    "body": "Added implementations for the String#tr and String#tr_s methods.\n\nI realize the code isn't DRY. I wasn't sure how to add helper methods, so the logic is unrolled more than necessary. On the plus side, the tests are extensive, so any changes to the logic should be easy to make safely in the future.\n\nIf you need me to make changes, just let me know. Otherwise, I look forward to being able to use these methods in my cross-compiled code!\n",
    "head_branch": "string-tr",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 21ae8d3cb3f80ff0a26cb985c6260187e45db7d5 into 4b0f13fc154046e44f726371e2109f36b772ea2e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620939ed6ca63ac8d87ef09",
    "number": 245,
    "body": "Hi.\nI update `Array#-` method, now it raise `TypeError` when `other` is not Array. \n",
    "head_branch": "feature",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4b0f13fc154046e44f726371e2109f36b772ea2e into cb1ea7d36b36636c95238940066d6fe5556b8ebc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620939fd6ca63ac8d87ef0a",
    "number": 241,
    "body": "Hi.\nI updated `sort` and `==` methods.\nNow possible compare recursive arrays. \n",
    "head_branch": "sort",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 942f21e7ab307200db99933bfc5f229aa006c5f4 into 5e3e5bec12dcded7ad3d6ae30b0d0e2675031b9d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093a0d6ca63ac8d87ef0b",
    "number": 237,
    "body": "Hi.\nI add rule into `Rakefile` now you can tests one files or one dirs.\nFor example\n\n```\nrake spec:core #run all specs into spec/core directory\nrake spec:core:array #run all specs into spec/core/array/ directory\nrake spec:core:array:allocate #run only allocate_spec.rb intro spec/core/array\n```\n\nAnd it for all dirs into `spec` dir.\n\nWhen file or dir not found, then raised error.\n",
    "head_branch": "spec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f0cd6dfb318e5648190f332e14ab520cf5fc1876 into 6dac9dced3604b9c2ff16453bde56720347f0263"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662093a1d6ca63ac8d87ef0c",
    "number": 235,
    "body": "Hi. \nI rewrite some code into parser.\n",
    "head_branch": "feature",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 96bfdbc201e96e6b43fdca547a3d9d96295cae07 into f0cd6dfb318e5648190f332e14ab520cf5fc1876"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093a2d6ca63ac8d87ef0d",
    "number": 234,
    "body": "Stopped on bugs in test stuit.\n",
    "head_branch": "use_strict",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093a3d6ca63ac8d87ef0e",
    "number": 232,
    "body": "Use the raw V8 engine in addition to WEBrick+PhantomJS.\n\nNext move could be ask `v8` to use strict mode by default. Then add `d8` support with profiling for future benchmarks.\n",
    "head_branch": "rake-v8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093a4d6ca63ac8d87ef0f",
    "number": 219,
    "body": "",
    "head_branch": "hash-prototype-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093a4d6ca63ac8d87ef10",
    "number": 210,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d93d443f414d94db818614334ab4d9332af6913b into 09ba3e0acc1bc3dd1897155f243dd26e3af65e3f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093a5d6ca63ac8d87ef11",
    "number": 208,
    "body": "Hi.\nI fixed `Array#last` method. Now it `raise Exception` when argument `string`, `nil` or not have `to_int` method.\nThanks.\n",
    "head_branch": "last",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093a6d6ca63ac8d87ef12",
    "number": 207,
    "body": "Hi.\n\nI fix `any?` and `all?` methods for `Enumerable` module. Now it works correct.\n\nThanks.\n",
    "head_branch": "feature",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ef15ad037c04adb4fd92c16711a6c1cba4f79964 into e0fb227bdd23912430bc88bec765699d9f8f310b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093a7d6ca63ac8d87ef13",
    "number": 205,
    "body": null,
    "head_branch": "deps-in-gemspec",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge df240ec02d7b8ddcdd8a7c986587af3946dce004 into 8cc474eba0ceaf6061267bcc8052796c09a806ff"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093a8d6ca63ac8d87ef14",
    "number": 204,
    "body": null,
    "head_branch": "defined-ivars",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge be32b54b36ff41953ef00645b3474c30def857e2 into 8ed5d52406c47f725d4e3b7f24c705be4062a43d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093a9d6ca63ac8d87ef15",
    "number": 199,
    "body": "Hi.\n\nI fixed the error with `include` method.\n\nBefore \n\n``` ruby\n   module M\n     def a\n       'M:a'\n     end\n   end\n\n   class A\n     include M\n     def a\n       'A:a'\n     end\n   end \n   #and\n  class B\n    def a\n      'B:a'\n    end\n    include M\n  end\n\n  A.new.a #=> 'A:a' - ok\n  #but\n  B.new.a #=> 'M:a' - wrong\n```\n\nAlso i change `Native` from `module` to `class`. \n\nThanks,\n",
    "head_branch": "include",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093aad6ca63ac8d87ef16",
    "number": 198,
    "body": "I'm sorry, I hurried.\nI add interpolate, because `%Q[]` equal `%[]` \n\nSorry.\n",
    "head_branch": "parse_string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6351a0ce2db6b94c1482ca75855ec2ea8d2c0634 into c98e3e9ba30e069e7995093bf977e0e121158390"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093abd6ca63ac8d87ef17",
    "number": 197,
    "body": "Hi.\n\nI fixed this bug https://github.com/opal/opal/issues/190\n",
    "head_branch": "parse_string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c0747946458cc5b300c51256d9a2f46944a9c2f2 into 0eee4fb1e802f914faa74e51e31dfcd54ab1be18"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093acd6ca63ac8d87ef18",
    "number": 174,
    "body": null,
    "head_branch": "const_set",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 81c2ae94f0d05399341f161fefa4872959a64ebe into 8f9f93218414b305a2defae2690d2b97a8f00fc3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093add6ca63ac8d87ef19",
    "number": 173,
    "body": "Added the function shuffle to Array.\n",
    "head_branch": "array_shuffle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8d81035414486f31ff3628626c66b4d13529c41d into ecf98f89d4cc7e10dcd589bd019b6d5c060a4651"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093aed6ca63ac8d87ef1a",
    "number": 164,
    "body": "Regarding to issue [#153](https://github.com/opal/opal/issues/153) I added 2 methods in core `Array` class. Spec provided.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4a124ca30da8e544811928387b103cf258a19833 into 8edfc1504b85b494e174c03a9bfead00988410a3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093afd6ca63ac8d87ef1b",
    "number": 157,
    "body": "Implemented Kernel#format, Kernel#sprintf, Kernel#printf and String#%.\n",
    "head_branch": "imp-format",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 72b366bd9de0d478a3da6d515fa920e7e6c17a04 into d64c12e76bb91d3300aa992c42fd15631a963a91"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093b0d6ca63ac8d87ef1c",
    "number": 156,
    "body": "Supported exponential part in float literals. eg.\n\n```\n123e1\n123E+10\n123e-9\n123.45e+256\n```\n",
    "head_branch": "fix-float-literal-exponent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ee5d7dea559af4ae7dade57b71ce73c73fba6e75 into 9e53e38fd9c090001088f1fc3320e29c3a5bffb8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093b0d6ca63ac8d87ef1d",
    "number": 155,
    "body": "Fixed parse error when newline exist right after rescue.\n\n```\nbegin\n  raise 'foo'\nrescue\n  puts 'error'\nend\n```\n",
    "head_branch": "fix-newline-after-rescue",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 565c5246a87118de781667e1c60e5eeb4a6ae854 into eb94137b095de3b81d3901130d23df2efc20cb3b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093b1d6ca63ac8d87ef1e",
    "number": 154,
    "body": "",
    "head_branch": "fix-divop-rhs-paren",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d6cc970448b1317b4ace305b6c9464f8cc10f95f into 48ed5fbb1238c52f457194f19262b7f864441350"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093b2d6ca63ac8d87ef1f",
    "number": 139,
    "body": "Implements Kernel#methods and adds specs.\n",
    "head_branch": "implement-kernel-methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7d1653f6e9dade917db7bc28d0fe6ca42c23a6d6 into 7e65800ee1efc3c8c60f778b11844047a21eee5a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093b3d6ca63ac8d87ef20",
    "number": 138,
    "body": "- Added specs for `block_given?`\n- Fixed case where the compiler would error out if `block_given?` was used outside of a method\n",
    "head_branch": "block-given-specs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 601d47b7eee658fde56d3cdd2f7fe9ba4bb10a54 into 9867cc944ebe5404ceffd73a93ee6f64713cec72"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093b4d6ca63ac8d87ef21",
    "number": 135,
    "body": "This code:\n\n``` ruby\nputs [[1, 2], 3], 4\n```\n\noutputs this on Ruby:\n\n```\n1\n2\n3\n4\n```\n\nand this on Opal:\n\n```\n[[1, 2], 3], 4\n```\n\nThis commit fixes that\n",
    "head_branch": "fix-behaviour-of-puts-on-array",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7d783e1367b9eb0a7eec3a1153d83ee1d7bee1ad into edae9fc19d4718c82d41a1ba4b59f00e62d19136"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093b5d6ca63ac8d87ef22",
    "number": 134,
    "body": "Two of these specs fail under Opal, but pass under Ruby itself.\n",
    "head_branch": "return-specs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093b6d6ca63ac8d87ef23",
    "number": 132,
    "body": "I've noticed there was none. Spec provided.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4b865f20f69e7a4eef2cafbd0cd75ed37e8ac571 into 1f05d86d9e3bdea4a0327b00f659e087594f8b0f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093b7d6ca63ac8d87ef24",
    "number": 96,
    "body": "This is a must.\n",
    "head_branch": "class-module-last-values",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge bd2223d27a7ae4d27e3828fe4c195df526e7d651 into 589d51c6b730cff362bc88c084efcb643a68a05f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093b8d6ca63ac8d87ef25",
    "number": 121,
    "body": "",
    "head_branch": "corelib-filenames",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0cf507f76ad9ca1a55decd4bfdcb75474076b648 into 874eff0e0c7dad0fffe0c83310d359146ca21f80"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093b9d6ca63ac8d87ef26",
    "number": 120,
    "body": null,
    "head_branch": "pulls/travis-badge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2b19f48744d63a5bbf81f7040a9ea877626f1419 into acf1e1492c8e8d4e74bdbef3c1e2498372f98e6c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093bad6ca63ac8d87ef27",
    "number": 118,
    "body": "",
    "head_branch": "fix-infinite-loops",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a59a7da9353fe295ae45693084c2796d2e8ec102 into 968f6a0b69f746edd547fd8506a0c3e3dc5099d2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093bbd6ca63ac8d87ef28",
    "number": 117,
    "body": "8 left :)\n",
    "head_branch": "fix-some-specs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4062a79c7ab17bc40862a3f6e290730e6f2fb101 into cb0081a96b3fabf0dfdf9758c95dbf02019261ea"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093bcd6ca63ac8d87ef29",
    "number": 116,
    "body": "-4\n\n :)\n",
    "head_branch": "fix-some-specs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6aeb6330c5579fa965a78b30460303193aa0f3a8 into 8ed55f512c05d4f1e268b8d9172c2544e839cf4c"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093bdd6ca63ac8d87ef2a",
    "number": 115,
    "body": "Avoiding the `#[]` addition would cost a major effort with no guarantee of success\n(the previous version of this pull was an attempt in that way and failed).\n\n**PS** Did you set up travis-ci for opal? you want me to do that?\n",
    "head_branch": "another-18-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8ba74277d02782ef97e387e3a99d645736aa3d29 into 94ccfa44649d6482fa6b57e82d082769ad6220a2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093bed6ca63ac8d87ef2b",
    "number": 113,
    "body": "An example [here](http://travis-ci.org/#!/elia/opal-rails/jobs/1760553)\n",
    "head_branch": "travisci",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a1c65b61640602ecfc5ff9e9e7bd2d7859c5e457 into 76df23aebf9ad5cbbd6d2190b61d1218b7560c85"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093bfd6ca63ac8d87ef2c",
    "number": 112,
    "body": "A couple of rspec fixes, I'm working on getting opal onto [travisci](http://travisci.org)…\n",
    "head_branch": "spec_helper",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 11a57f3986a7ebb8dffb27c6ea551d9f05fc2ec3 into 1cf0005583f6802474711bc75e3c2b808c787779"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093bfd6ca63ac8d87ef2d",
    "number": 111,
    "body": "",
    "head_branch": "array-minus",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1ce12faf8197ba605f06c7716080cffbc07f2ac3 into 8005efae8a1e52244858f73f1940dc72bb9550c1"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093c0d6ca63ac8d87ef2e",
    "number": 110,
    "body": "fixes #109\n\nAll spec passing on 1.8 with these changes :)\n",
    "head_branch": "ruby-18-syntax",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 454075cf0b1ccda203f1b88fda4f61db8bf330a2 into d2f7e32c25504eb111dab2984d044f62a3053500"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093c1d6ca63ac8d87ef2f",
    "number": 104,
    "body": "With this change if you `console.log` some opal object it will show the classname instead of object:\n\n``` js\nOpal.hash('a', 3) // ► Hash\n```\n\nThat's the same thing that coffeescript does for the same reason.\n\n**NOTE:**\nIt would be better to move it to compile time instead of using `eval`, but for now I think it's a good solution as it really helps debugging\n",
    "head_branch": "class-name",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093c2d6ca63ac8d87ef30",
    "number": 86,
    "body": "",
    "head_branch": "fix-instance_exec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093c3d6ca63ac8d87ef31",
    "number": 85,
    "body": "",
    "head_branch": "fix-hash",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093c4d6ca63ac8d87ef32",
    "number": 84,
    "body": "Added some missing methods.\n",
    "head_branch": "fix-numeric",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093c5d6ca63ac8d87ef33",
    "number": 83,
    "body": "Probably you won't like it, but it's really how it should work.\n",
    "head_branch": "fix-equal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093c6d6ca63ac8d87ef34",
    "number": 82,
    "body": "",
    "head_branch": "fix-struct",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 30708d5317a8a6498b0a203f5ba9d9e0f277d15e into f7e20e40c913432ed3ffaafe20d696921349b703"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093c7d6ca63ac8d87ef35",
    "number": 79,
    "body": "",
    "head_branch": "fix-string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093c8d6ca63ac8d87ef36",
    "number": 76,
    "body": "",
    "head_branch": "fix-range",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge cfc9fd9657f68879fe9e414f043368054dbde95e into 625097e15ca7e137db9611f4feaaf88fb06e5b96"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093c9d6ca63ac8d87ef37",
    "number": 75,
    "body": "",
    "head_branch": "remove-js-raise",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 593340f924026af3d204b9d120bd3a19762ea142 into 308ced447901fbbdf5dd0b3617bfbf2dbd691105"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093cad6ca63ac8d87ef38",
    "number": 73,
    "body": "Merge it in the meantime, it has a bunch of improvements.\n\nTests pass as without the commits.\n\nWe should add a bunch of rubyspecs, really.\n",
    "head_branch": "string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8f0e3eb1c3a2f5ae976f5d7d5719949a1d54decb into faeb1cf253f094ba0010feeb87d31e64a6a69050"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093cbd6ca63ac8d87ef39",
    "number": 67,
    "body": "",
    "head_branch": "fix-hash",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 632099abb86e1f40927c28180cab66b8f57a4e7f into e606dbc08325f0d8fd0f2f8d94ae84d2bb70e8dc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093ccd6ca63ac8d87ef3a",
    "number": 66,
    "body": "",
    "head_branch": "fix-enumerator",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge bda54860100d572df5b76d5bb49a1e536be71500 into 417fb8c3a017f03c79812b8c09f3dea5d795edef"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093cdd6ca63ac8d87ef3b",
    "number": 60,
    "body": "Fixed.\n",
    "head_branch": "fix-native",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093ced6ca63ac8d87ef3c",
    "number": 57,
    "body": "Here we go.\n",
    "head_branch": "typed-arrays",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093cfd6ca63ac8d87ef3d",
    "number": 53,
    "body": "The janitor is coming to town~\n",
    "head_branch": "janitor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093d0d6ca63ac8d87ef3e",
    "number": 52,
    "body": "Here we go.\n",
    "head_branch": "enumerator",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093d1d6ca63ac8d87ef3f",
    "number": 49,
    "body": "",
    "head_branch": "various-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 415f41c7ca91c09e93f54855757644957aa82d3c into 2fcd22370afdd56e8c2e31274f98dc5a7c8bff87"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093d1d6ca63ac8d87ef40",
    "number": 48,
    "body": "Opening the pull request to keep track of this, still have some stuff to implement.\n",
    "head_branch": "string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093d2d6ca63ac8d87ef41",
    "number": 44,
    "body": "",
    "head_branch": "bridge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093d3d6ca63ac8d87ef42",
    "number": 41,
    "body": "Too lazy to implement what's missing, but it should be enough for the time being.\n",
    "head_branch": "time",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093d4d6ca63ac8d87ef43",
    "number": 40,
    "body": "",
    "head_branch": "struct",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093d5d6ca63ac8d87ef44",
    "number": 39,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093d6d6ca63ac8d87ef45",
    "number": 23,
    "body": "Go go Opal!\n",
    "head_branch": "array-from-native",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e8168a79b3091e5afba0aa29d7ad3390544f7ac0 into 50eaf47e21ab7ea805f16676e95b3620396640d3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093d7d6ca63ac8d87ef46",
    "number": 22,
    "body": "It was so annoying.\n",
    "head_branch": "fix-rake-warning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 33ef2cfd0b4876b2b87a2515543a3f29792f0e3a into 5a285ce91e2a65527cba038fc8512ca7210a3783"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662093d8d6ca63ac8d87ef47",
    "number": 21,
    "body": "Injected Bundler into gemspec for easier dependency e release management in gem development\n",
    "head_branch": "bundler-wrap",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 02c2ead2c17b5ccb71dd99dd69ab1527e76e9c94 into f1b9efccf0db1ddf144ed8746b515b192b439228"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662093d9d6ca63ac8d87ef48",
    "number": 18,
    "body": "Hi Adam,\nI really like opal and I'm willing to help :)\n\nJust to start contributing on something I've added basic help messages to the command line…\n",
    "head_branch": "help-messages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f47a1c450b53394409aed4c8eaaa2df2f575e31e into a2769b81ab38ac8e6e3790bf924906c7671d59ad"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  }
]