[
  {
    "_id": "661dfb703a21fa1e1f1a9d5d",
    "number": 5464,
    "body": "**Solves the error** '_Unexpected reserved word_ \"await\"':\r\n````\r\n      dir = (await opendir(this.path));\r\n             ^^^^^\r\n\r\nSyntaxError: Unexpected reserved word\r\n    at ModuleLoader.moduleStrategy (node:internal/modules/esm/translators:152:18)\r\n    at ModuleLoader.moduleProvider (node:internal/modules/esm/loader:298:14)\r\n\r\nNode.js v18.19.1````\r\n",
    "head_branch": "main",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb713a21fa1e1f1a9d5e",
    "number": 5463,
    "body": "This PR bumps GitHub action workflows to their latest versions.",
    "head_branch": "bump-actions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb723a21fa1e1f1a9d5f",
    "number": 5454,
    "body": "I've rewritten the `flatten` algorithm. Instead of a recursive approach, i'm using a stack. This way, we avoid unnecessary function calls and the creation of intermediate arrays. `flattened` in each call and new array after each `concat`.\r\nIn cases of deep recursion or with a large number of arrays, this algorithm is more efficient and generates less work for the garbage collector.\r\n<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttps://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a\r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by\r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in\r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in\r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](https://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\n",
    "head_branch": "optimize-flatten-helper",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update flatten helper without recursion (#5454)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb733a21fa1e1f1a9d60",
    "number": 5452,
    "body": "A little optimization. String `split` has optional second argument to reduce elements count in result array and stop parsing in advance.\r\n<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttps://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a\r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by\r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in\r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in\r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](https://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\n",
    "head_branch": "optimize-split-check-shebang-line",
    "is_a_fork": true,
    "comments": [
      "Thanks for this! Can you please update the build output and include that too?",
      "> Thanks for this! Can you please update the build output and include that too?\r\n\r\nDone"
    ],
    "commit_messages": [
      "Optimize split in checkShebangLine (#5452)\n\n* Optimize split in checkShebangLine\r\n\r\n* Update build\r\n\r\n* Update build"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb743a21fa1e1f1a9d61",
    "number": 5450,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttps://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a\r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by\r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in\r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in\r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](https://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "continuous-integration.yml: Add Node.js 20 to the testing (#5450)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb753a21fa1e1f1a9d62",
    "number": 5449,
    "body": "Partial solution to #5448, fixing the line height change when switching to CodeMirror mode.  But there are still tiny discrepancies in overall size which might be due to a single `<pre>` vs. multiple line `<div>`s (or something else; I'm not certain). Still, this fixes most of the issue.",
    "head_branch": "site",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Fix line-height change from hover (#5449)\n\n* Fix line-height change from hover\r\n\r\nPartial solution to #5448.  Fixes changing `line-height`\r\nbut there are still tiny discrepancies in overall size.\r\n\r\n* Rebuild for 2023"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb763a21fa1e1f1a9d63",
    "number": 5447,
    "body": "Following up on my offer from https://github.com/jashkenas/coffeescript/issues/5018#issuecomment-1479603068, here is an ESM loader for CoffeeScript that (once published) enables the following:\r\n\r\n```sh\r\nnode --loader coffeescript/esm filename.coffee\r\n```\r\n\r\nFor example, I've tested with the `main.coffee`/`scream.coffee` examples from https://nodejs.org/api/esm.html#esm_transpiler_loader (on which this code is based). You can test too via `npm link`.\r\n\r\n## Potential issues for discussion\r\n\r\nCurrently the loader assumes that, if you're using an ESM loader, the desire is to load code in ESM mode. I think this is often what people would want, but it's possible that the user is writing ESM code that `import`s a CJS module written in CoffeeScript. In that case, the user should ideally use CoffeeScript's `register`. But if the user has a mix of CoffeeScript ESM and CJS code, the ESM loader will probably break `import` of CJS code.\r\n\r\nBy contrast, https://nodejs.org/api/esm.html#esm_transpiler_loader uses `package.json`'s `type` field. But given the lack of an `.mjs`-style extension, this is not a very flexible system. I also worry about the performance hit of traversing up the filesystem (which is often very expensive on Windows).\r\n\r\nAnother alternative would be to look for `import`/`export` statements in the output, and use that to turn on ESM mode. Top-level `await` is maybe trickier to detect though. (Maybe via the AST.)\r\n\r\nAnother thing I've not yet tested is combining with another loader such as [babel-register-esm](https://github.com/giltayar/babel-register-esm).\r\n\r\nIf any of the above are priorities before an initial release, I'd be happy to work on them given a desired direction. But hopefully this is a useful first step toward good ESM support.",
    "head_branch": "esm",
    "is_a_fork": true,
    "comments": [
      "I think we might want to wait a bit to see what happens to https://github.com/nodejs/node/issues/47880. Once there’s a clear way to handle both ESM and CJS code through a loader, it should be much easier to handle realistic use cases. For example I don’t know if it’s plausible to assume an app has _no_ CommonJS in its module graph, when you take `node_modules` dependencies into account. I don’t think this needs to be perfect before it lands, but handling CommonJS along with ESM seems like something to figure out before introducing this to users since the DX might change based on how things go (like we may need to do something like `--import coffeescript/register --loader coffeescript/loader` or something).\r\n\r\nAs for the `type` field, that field _exists_ because of CoffeeScript’s need to have a way other than file extension to know whether a file should be treated as CommonJS or ESM. The expectation was that that’s what we would use. You shouldn’t need to walk the filesystem for every file, just for every _folder;_ once the nearest parent `package.json` is known for a particular folder, that can’t change for all the other files in that folder, so that should be something you can cache and reuse without filesystem calls. I think it’s also reasonable to write the loader to stop at the `node_modules` boundary, handing off to Node anything that’s under there. (This would mean no packages written in CoffeeScript _and run as CoffeeScript;_ packages would need to be transpiled first and the `.js` output saved in the folder under `node_modules`. But I think the performance benefit should be worth it.)\r\n\r\nAnyway I’m not trying to add blockers; if you’ve thought through the various CommonJS use cases and think they’re all handled, please just explain them and I’m happy to trust you.",
      "Node 20.6.0 had the ESM hooks refactor I was waiting for. The module customization hooks in Node are now in their likely final shape, and we can refactor this PR to provide a way to transpile and run ESM CoffeeScript.\r\n\r\nFirst off, don’t use `globalPreload`. It’s going away soon. The basic flow now that module customization hooks run off-thread is this:\r\n\r\n```shell\r\nnode --import coffeescript/register app.coffee\r\n```\r\n\r\nInside `register.coffee` add `{ register } = require 'node:module'` and call `register` to have Node load the file that defines the hooks. Leave the rest of the existing code that hooks up CoffeeScript to transpile modules referenced via `require`. This way applications with a mix of CommonJS and ESM syntax can work.\r\n\r\nThat other file, `hooks.coffee` or whatever we call it, should define at least `load` along the lines of https://github.com/nodejs/node/blob/main/doc/api/module.md#transpilation. You might also want to use `initialize` and establish a communications port with the application thread, to avoid transpiling the same module twice (for example, if it gets both imported and required); see https://github.com/nodejs/node/blob/main/doc/api/module.md#initialize.\r\n\r\nGetting the `coffee` command to work could follow in a subsequent PR. There’s still no support in `vm` for running ESM scripts, but perhaps there’s a different solution where `node:module` `register` is used to register the hooks before importing the entry point, and then the same flow as `node --import` handles the full app."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb763a21fa1e1f1a9d64",
    "number": 5442,
    "body": "This PR adds explicit [permissions section](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions) to workflows. This is a security best practice because by default workflows run with [extended set of permissions](https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token) (except from `on: pull_request` [from external forks](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/)). By specifying any permission explicitly all others are set to none. By using the principle of least privilege the damage a compromised workflow can do (because of an [injection](https://securitylab.github.com/research/github-actions-untrusted-input/) or compromised third party tool or action) is restricted.\r\nIt is recommended to have [most strict permissions on the top level](https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions) and grant write permissions on [job level](https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs) case by case.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb783a21fa1e1f1a9d65",
    "number": 5435,
    "body": "Fixes #5428\r\n\r\nThis fix is simple enough but it causes a substantial change in behavior for Heregexes.\r\n\r\n`#` inside of a character class shouldn't be considered a comment. By treating `#` without whitespace in front as non-comments we could have slight compatability with Python.\r\n\r\nThere are other places in the CoffeeScript source where people avoided escaping the `#` by keeping it next to non-whitespace characters even outside of a character class. This is different than how Python does it and is probably a bug but maybe it is too late with the de facto CoffeeScript2 behavior.\r\n\r\nI'm not sure if this should be merged in since it changes the behavior quite a lot. Maybe another one for the CoffeeScript3/Civet bucket.\r\n\r\nRefs\r\n---\r\nPython Docs: https://docs.python.org/3/library/re.html#re.X\r\n\r\n<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttps://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a\r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by\r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in\r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in\r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](https://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\n",
    "head_branch": "heregex-comment",
    "is_a_fork": true,
    "comments": [
      "GitHub auto-closed when I rebased so re-opening.",
      "The interpolation test that was changed is interesting...\r\n\r\nIt's inserting a string containing a single backslash into the RegExp ahead of an escaped `#`. The current behavior is to keep the single backslash which is escaping the `#` in the output which then combines with another single backslash from the interpolation which causes the output to be an escaped backslash. There's no comment about the intent other than `TODO improve heregex interpolation tests` so I'm not sure if this existing behavior is desired."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb793a21fa1e1f1a9d66",
    "number": 5430,
    "body": "https://github.com/jashkenas/coffeescript/pull/5429#issuecomment-1279670998\r\n\r\nI updated the `SIMPLENUM` regex in `src/nodes.coffee` and also the decimal parts of the number regex in lexer.coffee.\r\n\r\nAlso added a fix for numeric separators in decimal big int literals while I was in there.",
    "head_branch": "number-regexp-improve",
    "is_a_fork": true,
    "comments": [
      "Looks good, and nice catch on the BigInt decimals.\r\n\r\nI still prefer my regex `\\d+(?:_\\d+)*` from https://github.com/jashkenas/coffeescript/pull/5429#issuecomment-1279742002 but this one is OK.\r\n\r\nI wrote [a small benchmark](https://jsbench.me/myl9bpleox/1) that confirms my intuition that my regex is a bit more performant, [especially for larger strings](https://jsbench.me/myl9bpleox/2).",
      "Does `\\d+(?:_\\d+)*` pass all the tests? If so, is there any reason not to use it instead?",
      "@GeoffreyBooth that regex works for most places but causes catastrophic backtracking when added to BigInt. I think since the `n` comes after it keeps trying to match on it with every different combination of number lengths. The version without the `+` inside the `*` avoids this.\r\n\r\n@edemaine https://jsbench.me/j7l9c2s0zl/1 it seems to only be faster for the SIMPLENUM test so maybe I'll update again with just that.",
      "Fascinating! That `n` at the end makes a huge difference, relative to the regexes that don't have a trailing `n`. But I'm not sure it's the `+`s that are causing backtracking... it's the `n` itself.\r\n\r\nI [benchmarked](https://jsbench.me/gal9ctsk3g/1) among `/^\\d(?:_?\\d)*n/`, `/^\\d+(?:_\\d+)*n/`, and `/^\\d+(?:_?\\d)*n/` and found that `/^\\d+(?:_\\d+)*n/` (my original proposal) is fastest. Or did I miss something?  Sadly, it's about [3x slower than `/^\\d+n/`](https://jsbench.me/gal9ctsk3g/2) that this PR replaces, but that's the price of supporting underscores.\r\n\r\n(I did double-check [the numeric separator spec](https://github.com/tc39/proposal-numeric-separator) to confirm that double underscore isn't allowed, and these are indeed the correct regexes.)",
      "From my experience catastrophic backtracking can be avoided with a negative lookahead `(?!n)`. It causes the (dumb) regex engine to return early.\r\nBut I'm having a hard time following what the exact issue is here.",
      "From my testing changing the regex here: https://github.com/jashkenas/coffeescript/pull/5430/files#diff-b1724eb7967924ebd01486bf963f8281f5fff1acdf6f9354124c9ee50f0addcdR1313 caused the tests to never finish (I gave up after a few minutes when usually they only take six seconds). Changing the regexps on lines 1314 and 1315 seemed fine though. Please test it out on your local and let me know what you find in case I may be gravely mistaken.",
      "Oh I see. It should probably be non-greedy:\r\n```diff\r\n- \\d(?:_?\\d)*n\r\n+ \\d(?:_?\\d)*?n\r\n```\r\nThe difference here is that the first one starts testing from the end of the input, the second one from the start.\r\nThis could probably be changed in more places to gain some performance. (At the cost of readability)",
      "I tried some more testing but non-greedy didn't seem to help with the BigInt backtracking\r\n\r\nchanging to `\\d+(?:_?\\d+)*?n` still took forever on my local machine.\r\n\r\nI'm happy with this as it is currently stands since it is close to the minimal amount of change and the performance seems in line with the existing compiler.\r\n\r\n@GeoffreyBooth ",
      "@STRd6 I confirmed that changing [that line](https://github.com/jashkenas/coffeescript/pull/5430/files#diff-b1724eb7967924ebd01486bf963f8281f5fff1acdf6f9354124c9ee50f0addcdR1313) to use `\\d+(?:_?\\d+)*n` makes `cake test` very slow (I terminated after a minute; my guess is it's quadratic time).\r\n\r\nBut my suggestion was `\\d+(?:_\\d+)*n` — note lack of `?` after `_`.  Then the benchmark runs slightly faster for me (~18 seconds instead of ~19 seconds, on an old CPU running Node 18.2).  `\\d+(?:_\\d+)*?n` seemed to perform about the same as with greedy `*`.",
      "@edemaine Thanks for clarifying, I've updated the regexes to match and I think this is good for now.",
      "Okay, so can everyone on this thread please confirm that the regex in this PR is the one we want to go with? 👍 or 👎 "
    ],
    "commit_messages": [
      "Simplified number regexes (#5430)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb793a21fa1e1f1a9d67",
    "number": 5429,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttps://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a\r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by\r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in\r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in\r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](https://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\n",
    "head_branch": "5427",
    "is_a_fork": true,
    "comments": [
      "Thank you!",
      "`(?:\\d(?:_?\\d)*)+` can also be just\r\n`\\d(?:_?\\d)*` without changing it's meaning",
      "> `(?:\\d(?:_?\\d)*)+` can also be just\n> \n> `\\d(?:_?\\d)*` without changing it's meaning\n\nWanna push a follow up PR?",
      "While we're optimizing, I think `\\d+(?:_\\d+)*` might be better (should confuse the backtracker less, expresses intent more clearly?)."
    ],
    "commit_messages": [
      "Support `1_000.toString()`; fixes #5427 (#5429)\n\nSupport calling methods on numbers with separators."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb7a3a21fa1e1f1a9d68",
    "number": 5423,
    "body": "fix https://github.com/jashkenas/coffeescript/issues/5401\r\n\r\n<img width=\"1313\" alt=\"image\" src=\"https://user-images.githubusercontent.com/110233389/182114890-9d210282-7359-4154-b539-eeb91ffcbd48.png\">\r\n\r\n```\r\n\r\n❯ cat test.coffee\r\n#!/usr/bin/env coffee\r\n\r\nconsole.log 1\r\n❯ cat package.json\r\n{\r\n  \"type\": \"module\"\r\n}\r\n❯ node -v\r\nv18.7.0\r\n❯ node --loader \"../loader.mjs\" test.coffee\r\n(node:28894) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time\r\n(Use `node --trace-warnings ...` to show where the warning was created)\r\n\r\n```",
    "head_branch": "main",
    "is_a_fork": true,
    "comments": [
      "Thanks, there’s also https://github.com/nodejs/loaders-test/tree/main/coffeescript-loader which is more of the reference implementation (did you base yours off of this, or of the example in the Node docs?).\r\n\r\nI need to work out how to handle ESM in general in the project before we can land this. Probably add an `\"exports\"` field, etc.",
      "> 谢谢，还有https://github.com/nodejs/loaders-test/tree/main/coffeescript-loader更多的参考实现（你的基础是这个，还是节点文档中的示例？ ）。\r\n> \r\n> 我需要弄清楚如何在项目中处理 ESM，然后才能实现它。可能会添加一个`\"exports\"`字段等。\r\n\r\n\r\n\r\nthis can use with CommonJS , but coffeescript-loader can't \r\n\r\n<img width=\"1077\" alt=\"image\" src=\"https://user-images.githubusercontent.com/110233389/182282542-a0e60388-fcc4-47b9-b279-4014cdf5156c.png\">\r\ni write this base on nodejs documents , but there is error to use code in nodejs documents when use nodejs 18.7.0",
      "i write a new version there \r\nhttps://github.com/iuser-dev/nodejs-loader/blob/main/src/index.coffee\r\n\r\nthis version can both use `import './xx.coffee'` or `import './xx'`\r\n",
      "@usrtax What is `coffee_plus`?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb7b3a21fa1e1f1a9d69",
    "number": 5422,
    "body": "I’m not sure how this broke, but somehow the code snippets aren’t running on the docs site currently. They work if you edit the CoffeeScript first, which sets a `js` property on the CodeMirror editor; but not if you don’t edit first (which used to work). I very slightly amended the “run example” logic to check for that `js` property specifically, which I guess was previously always present but somehow no longer is unless the user edits the CoffeeScript. Our version of CodeMirror is pinned and hasn’t changed, so I’m not sure how this could have broken, unless it has something to do with the latest version of popular browsers. cc @Inve1951 ",
    "head_branch": "fix-docs-code-snippets-running",
    "is_a_fork": true,
    "comments": [
      "i was just about to test it :smile: ",
      "Well please let me know if anything’s still broken. Since the live site was already broken I figured I was unlikely to make it worse 😄 "
    ],
    "commit_messages": [
      "Fix #5421, docs code snippets not running (#5422)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb7c3a21fa1e1f1a9d6a",
    "number": 5416,
    "body": "And add `npm install` to `cake release`, and Node 18 to CI, and rerun the browser tests up to three times.",
    "head_branch": "update-deps",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update dependencies (#5416)\n\n* Update dependencies\r\n\r\n* Test in Node 18\r\n\r\n* Install dependencies as part of release\r\n\r\n* Update output\r\n\r\n* Give the browser tests three attempts"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb7d3a21fa1e1f1a9d6b",
    "number": 5413,
    "body": "Fixes #5410 by removing unnecessary ref creation in `for from` loops.\r\n\r\nI believe that the ref was originally created for iterating using `for x in ...` where caching the source and length makes sense. In `for from` loops (compile to `for of` in JS) the loop receives an iterator. JS handles creating the local var and the iterator manages the state so there is nothing to cache.\r\n\r\n```coffee\r\nfn = ->\r\n  console.log \"called\"\r\n  [1, 2, 3]\r\n\r\nfor x from fn()\r\n  console.log x\r\n```\r\n\r\nWith this change:\r\n```js\r\n// Generated by CoffeeScript 2.6.1\r\nvar fn, x;\r\n\r\nfn = function() {\r\n  console.log(\"called\");\r\n  return [1, 2, 3];\r\n};\r\n\r\nfor (x of fn()) {\r\n  console.log(x);\r\n}\r\n```\r\n\r\nPreviously:\r\n```js\r\n// Generated by CoffeeScript 2.6.1\r\nvar fn, ref, x;\r\n\r\nfn = function() {\r\n  console.log(\"called\");\r\n  return [1, 2, 3];\r\n};\r\n\r\nref = fn();\r\nfor (x of ref) {\r\n  console.log(x);\r\n}\r\n```",
    "head_branch": "5410",
    "is_a_fork": true,
    "comments": [
      "@edemaine Yeah, that's covered by some of the other existing tests. When experimenting to find the correct fix when I didn't generate the ref for the other kinds of loops it breaks everything very badly 🌞 "
    ],
    "commit_messages": [
      "Fixes #5410 (#5413)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb7e3a21fa1e1f1a9d6c",
    "number": 5412,
    "body": "2.7.0 release. Changelog:\r\n\r\n*   The [import assertions syntax](https://github.com/tc39/proposal-import-assertions) is now supported. This allows statements like `export { version } from './package.json' assert { type: 'json' }` or expressions like `import('./calendar.json', { assert { type: 'json' } })`. https://github.com/jashkenas/coffeescript/pull/5391\r\n*   CoffeeScript no longer always patches Node’s error stack traces. This patching, where the line and column numbers are adjusted to match the source CoffeeScript rather than the generated JavaScript, caused conflicts with other libraries and is unnecessary when Node’s new [`--enable-source-maps` flag](https://nodejs.org/docs/latest/api/cli.html#--enable-source-maps) is passed. The patching will now occur only when `--enable-source-maps` is not set, no other library has already patched the stack traces, and `require('coffeescript/register')` is used. The patching can be enabled explicitly via `require('coffeescript').patchStackTrace()` or `import { patchStackTrace } from 'coffeescript'; patchStackTrace()`. https://github.com/jashkenas/coffeescript/pull/5403\r\n*   Bugfix for an issue where block (triple-quoted) strings weren’t getting transpiled correctly into a JSX expression container wrapping the template literal (such as ``<div a={`...`} />``). https://github.com/jashkenas/coffeescript/pull/5353\r\n*   Bugfixes for line continuations not behaving as expected for a nonempty first line of an explicit `[` array or `{` object literal. https://github.com/jashkenas/coffeescript/pull/5397",
    "head_branch": "2.7.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "2.7.0 (#5412)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb7f3a21fa1e1f1a9d6d",
    "number": 5411,
    "body": "Follow-up to #5403; this adds the new `patchStackTrace` export, so that `import { patchStackTrace } from 'coffeescript'` works in Node’s native ESM. I noticed this while writing up the changelog.\r\n\r\nI also added a test so that we don’t miss these in the future. cc @STRd6 ",
    "head_branch": "add-patch-stack-trace-export",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Add `patchStackTrace` export; test that all named exports are detected by Node (#5411)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb803a21fa1e1f1a9d6e",
    "number": 5409,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttps://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a\r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by\r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in\r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in\r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](https://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\n\r\nIn theory setting these `.gitattributes` should prevent generated files from showing up in diffs by default.\r\n\r\nhttps://github.com/github/linguist/tree/47b109be3657fe3d5933fba6840a6ceea0f94498#generated-file-detection\r\n",
    "head_branch": "language-stats",
    "is_a_fork": true,
    "comments": [
      "I think that’s already happening. If you look at https://github.com/jashkenas/coffeescript/pull/5403/files, all the `.js` files have a “Load diff” link, and the diff is hidden by default. Does adding this setting change anything?\r\n\r\nWe can always add this file and find out, as this doesn’t hurt anything, but I expect it won’t make a difference.",
      "I think you're right, this doesn't seem like it would improve anything."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb813a21fa1e1f1a9d6f",
    "number": 5408,
    "body": "When running browser tests sometimes they would fail and only print `null`. I added a `.catch` to log any error that is thrown (could be a timeout or intermittent error). I also removed extra parentheses and increased the timeout to 60s.\r\n",
    "head_branch": "report-browser-test-errors",
    "is_a_fork": true,
    "comments": [
      "```coffee\r\n  # and Puppeteer 3 only supports Node >= 10.18.1, so limit this test to those\r\n  # versions. The code below uses `Promise.prototype.finally` because the\r\n  # CoffeeScript codebase currently maintains compatibility with Node 6, which\r\n  # did not support `async`/`await` syntax. Even though this test doesn’t run\r\n  # in Node 6, it needs to still _parse_ in Node 6 so that this file can load.\r\n```\r\n\r\nThis was true when I wrote it years ago, but I think that by now we can drop support for EOL versions of Node at least for internal stuff like running tests. (The compiled output, I’m not so sure about.) So we could just rewrite this function to use `await`, if you want. Also Puppeteer has been updated many times since this comment was written and now requires something like Node 12+.\r\n\r\nAnyway I’m happy to merge in this PR as is, too, if you’d rather not spend any more time on it.",
      "FYI: https://github.com/jashkenas/coffeescript/runs/5842054989?check_suite_focus=true\r\n\r\nShould this have reported something other than `null`?",
      "It should probably report nothing in the case where result hasn't been filled. I'll add that."
    ],
    "commit_messages": [
      "Report browser test errors (#5408)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb823a21fa1e1f1a9d70",
    "number": 5407,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttps://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a\r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by\r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in\r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in\r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](https://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\n\r\nRebased https://github.com/jashkenas/coffeescript/pull/5279\r\n",
    "head_branch": "5279",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb833a21fa1e1f1a9d71",
    "number": 5406,
    "body": "This check has always been true since Node 0.3.0. It was added here: https://github.com/jashkenas/coffeescript/commit/c4a3e170e230d7bf0a2513c1224d71f685dafb43 and seems to rely on the behavior of `Module#_compile` from before `require.extensions`. If `require.extensions` is ever removed (it is deprecated after all) then `CoffeeScript.run` will no longer work. It will pass CoffeeScript source code to `Module#_compile` which is doomed to fail.\r\n\r\nBrowser code doesn't touch this path at all and is unaffected.\r\n\r\n<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttps://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a\r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by\r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in\r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in\r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](https://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\n",
    "head_branch": "cleanup-run",
    "is_a_fork": true,
    "comments": [
      "In digging through the source mapping nitty gritty I found this small oddity. I'd prefer to split off small self contained cleanup PRs when possible so that the eventual source mapping PR isn't totally massive and coupled with indirectly related cleanup."
    ],
    "commit_messages": [
      "Remove always true `if` check (#5406)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb843a21fa1e1f1a9d72",
    "number": 5405,
    "body": "Update our dependencies and generated output.",
    "head_branch": "update-dependencies",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update dependencies (#5405)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb853a21fa1e1f1a9d73",
    "number": 5404,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttps://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a\r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by\r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in\r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in\r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](https://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\n\r\nGuarding dynamic import tests based on Node version\r\nThese import assertions weren't actually running on older versions of\r\nNode. They failed to parse so failed to run at all. Node 16.14.x added\r\nsupport to parse the import assertion syntax but instead failed with\r\n`Invalid module \"data:application/json,...\" has an unsupported MIME type \"application/json\"`\r\n\r\nNode 17.8.x supports the syntax and supports the `application/json` mime\r\nas well.\r\n\r\nAs a cleanup item also updated caniuse-lite.",
    "head_branch": "update-caniuse-lite",
    "is_a_fork": true,
    "comments": [
      "We’ve been using feature detection for this rather than hard-coding Node versions. See https://github.com/jashkenas/coffeescript/blob/3d39d205d8e00cf46b766cc455cfa38119101e34/Cakefile#L465-L479\r\n\r\nDo you mind updating the last line there, about import assertions, such that that resolves the issue? So that we don’t need to put guards in the test file itself. Some of the tests don’t parse at all in certain versions of Node because of syntax, and so it’s important not to load the file at all (rather than loading it and skipping most or all of its contents based on a condition).",
      "This is the same test referenced in the last `skipUnless`. The problem is that it now parses in node `16.4.x` but fails during the async execution of the test on `16.14.x`.\r\n\r\nI'll poke around and see if I can extend `skipUnless` to detect async failures.\r\n\r\n",
      "Now that I think about it more, I think `skipUnless` is meant just for parsing errors, where we need to avoid loading that file at all; but there _are_ sometimes guards within tests based on missing functionality. But those guards I think are still feature detections, not version checks. Maybe you could do a feature detection at the top of the test file somehow that an `import` of `application/json` is supported? Not sure how, if that needs to be async.\r\n\r\nThough if you get it to work within `skipUnless` I would be fine with that too, I don’t think `skipUnless` needs to _only_ involve parsing errors. The advantage of a feature detection within the file is that we could avoid skipping the entire file, potentially, but that might not matter in this case.",
      "I dug into this a bit: https://github.com/nodejs/node/pull/41736#issuecomment-1086738670\r\n\r\nBasically, Node 16.14.0 included support for the import assertions syntax, so that syntax starts parsing as of 16.14.0; but JSON modules still require the `--experimental-json-modules` flag on 16.x. That flag was removed in 17.5.0, but that change hasn’t been backported to 16 yet; it should land as part of 16.15.0, whenever that comes out. So we’re in a weird transition state where the syntax parses but the module is unrecognized, which will only be the case for the brief life of Node 16.14.x.\r\n\r\nSo I guess we can land this try/catch for now and just remove it once 16.15.0 is released, in order to unblock your other PRs. I pushed a commit to add more info to the comment."
    ],
    "commit_messages": [
      "Fix CI for Node 16.14.x (#5404)\n\nCo-authored-by: Geoffrey Booth <webadmin@geoffreybooth.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb863a21fa1e1f1a9d74",
    "number": 5403,
    "body": "Fixes #5382 Don't monkey patch `Error.prepareStackTrace` if `--enable-source-maps` is used.\r\n\r\nThis ended up being kind of a chonker but I'm pretty happy with the overall structure. Also a little terrified with how much this touches, as well as a little relieved that there are tons of existing tests to catch regressions 😅 \r\n\r\nIn summary:\r\n\r\n- Calling `require('coffeescript')` no longer patches `Error.prepareStackTrace`. People must `require('coffeescript/register')` to opt-in. `CoffeeScript.run` already does this which will maintain the existing `coffee` cli experience.\r\n- `Error.prepareStackTrace` is not patched if another library has already patched it even when calling `require('coffeescript/register')`.\r\n- Move `Error.prepareStackTrace` patching in `coffeescript.coffee` is now exported rather than applied automatically. `register.coffee` imports it. The browser docs also call it directly.\r\n- Moved caching of source maps into `sourcemap.coffee` (not sure if this is the ideal place).\r\n- Tracking anonymously compiled modules by unique number rather than the brittle array walking of all files under the same `<anonymous>` name.\r\n  - This makes `getSourceMap` and `registerCompiled` much simpler.\r\n  - Still exporting `registerCompiled` so other tools can cache source maps and hook into CoffeeScript stack remapping (CoffeeCoverage, etc.)\r\n  - Needed to change `helpers.syntaxErrorToString` to print `[stdin]` for `<anonymous.*` files as well as files with undefined file name to match the existing tests.\r\n- In `index.coffee` `CoffeeScript.run` set `inlineMap` to be true and set the base `option.filename` to match the `mainModule` filename.\r\n \r\nTODO\r\n-------\r\n\r\n- [x] `CoffeeScript.compile` always caches source maps if present. This makes the call to `registerCompiled` in `register.coffee` redundant. Need to do some thinking about how to untangle this.\r\n- [x] Test case for `./bin/coffee --nodejs --enable-source-maps test/importing/error.coffee` (Looks like file path is currently incorrect: `C:\\Users\\duder\\Documents\\GitHub\\coffeescript\\test\\..test\\importing\\error.coffee:3:9`)\r\n- [x] Browser testing. I believe that modern browsers correctly handle inline source maps but it would be a good idea to have tests for the specific cases and to make sure we're adding them where appropriate. We should always add inline source maps when running / executing scripts and should respect the options given when used as a tool for compiling.",
    "head_branch": "5382",
    "is_a_fork": true,
    "comments": [
      "It looks like `node 16.14.x` breaks the dynamic import test which worked in `16.13.x`. Not sure what the correct resolution for that is.",
      "Tests also pass on `node 17.8.0`",
      "Node `16.14.x` tests are fixed and updated here: https://github.com/jashkenas/coffeescript/pull/5404",
      "> Node `16.14.x` tests are fixed and updated here: #5404\r\n\r\nIf you don’t mind updating with the latest `main`, this should be good to land now.",
      "I'm pretty happy with how this is functionally. There's some more clean up and testing that can be followed up with but I'm fairly confident that this will maintain the existing functionality while fixing the two cases where patching `Error.prepareStackTrace` breaks things. We now will no longer patch if `Error.prepareStackTrace` has been changed by another tool (such as `source-map-support`) and we also no longer patch if `--enable-source-maps` is set since that would apply an additional remapping making the stack trace incorrect there as well. The default behavior is still to patch `Error.prepareStackTrace` so that the basic 'out of the box' experience for people using CoffeeScript will still be correct stack traces.",
      "There's actually one other case that this doesn't address correctly yet: when `--enable-source-maps` is present in code that calls `CoffeeScript.compile` (think webpack or a similar bundler) then as it stands right now it will always add an inline map even if that option wasn't specified to the compile function.\r\n\r\nThe fix is to move the logic into `register` and pass the correct options to `compile` based on the environment settings. I'll continue working in that direction. The downside is that it is a larger change overall but it should end up with simpler code that is clearer and more direct which will also clean up some of the historical weirdness around source maps.",
      "Please let me know when you’re done working on this branch and I’ll review it again. Please don’t forget the style notes (single-quoted strings unless interpolating, avoid single-character variables).",
      "I'll get a few more updates in and summarize the changes as well over the next few days.",
      "@GeoffreyBooth this is ready for review now. It's a bit larger than I originally anticipated. Please ask any questions you have so I can better document exactly what changed and how things work.\r\n\r\nI'm not sure why the CI is flaky on windows but I should look into that before this is merged.",
      "> Does this fix #5216 by chance? From a quick search of open issues, that appears to be the only other open issue related to source maps.\r\n\r\nIt doesn't fix #5216 but I think it lays some groundwork that could lead to a fix.",
      "One thing to note is that though this does fix a bug/unexpected behavior it could be considered a breaking change to how `require('coffeescript')` works. The good news is that it is very simple to restore the previous behavior if people want by calling `patchStackTrace` explicitly.\r\n\r\n```js\r\nCoffeeScript = require('coffeescript')\r\nCoffeeScript.patchStackTrace()\r\n```",
      "> The good news is that it is very simple to restore the previous behavior if people want by calling `patchStackTrace` explicitly.\r\n\r\nI thought the intent was to keep the current behavior _unless_ `--enable-source-maps` was passed (or another plugin already called `Error.prepareStackTrace`).",
      "I think that the correct long term solution is to not do anything drastic to people's environments when `require('coffeescript')` is called, similarly to how `require.extensions` patching was moved to `/register`. Requiring `coffeescript/register` still patches as before (excepting the cases when `--enable-source-maps` is provided or `Error.prepareStackTrace` has already been set) but requiring `coffeescript` does not as currently implemented in this PR.\r\n\r\nIf that is too breaking a change to go out soon then I can update the PR to also have `coffeescript` continue to patch until the next breaking release for compatibility.",
      "I thought the current behavior was not to patch unless `register` was called; are we patching when just `require`ing?\r\n\r\nIf so, yeah, we should restrict the patching to `register` (and within `register`, don’t patch if `--enable-source-maps` is set).",
      "👍 \r\n\r\nThe current behavior in `2.6.1` patches no matter what when required: https://github.com/jashkenas/coffeescript/blob/76cf769abfd9ae7935c0e47c4137d6303e4482dc/src/coffeescript.coffee#L368\r\n\r\nThis PR restricts the patching to `register` and doesn't patch in those cases mentioned. People can use the `CoffeeScript.patchStackTrace()` if they need to for compatibility reasons.",
      "Thanks @STRd6 and congrats! We’re overdue for a release, are there any other PRs you’d like to land soon or should I prepare a release for later this week?",
      "@GeoffreyBooth thanks for the review! I don't have anything else ready to land so release when ready 👍 "
    ],
    "commit_messages": [
      "Don’t patch `Error.prepareStackTrace` if `--enable-source-maps` is used. (#5403)\n\nCo-authored-by: Geoffrey Booth <456802+GeoffreyBooth@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb873a21fa1e1f1a9d75",
    "number": 5398,
    "body": "Instead of a global `referencedVars` option that is computed at the lexer level (via all IDENTIFIER tokens), recurse through the AST to mark each scope with all variables used within it and descendant scopes.\r\n\r\nLikely also more efficient via `Set`s instead of `Array`s.\r\n\r\nAlso fix some missing `children` in `For` nodes, which otherwise caused this rewrite to fail.\r\n\r\nFixes #4865 by causing parameter renaming in fewer (more predictable) scenarios.\r\n\r\nI've separated into separate commits for:\r\n1. Actual changes.\r\n2. Changes to the compiler that result from these changes (running `cake build` a second time), so you can see the reduced renaming.\r\n3. Rebuilding the browser version.",
    "head_branch": "referenced-vars",
    "is_a_fork": true,
    "comments": [
      "This seems fine. Any idea why the prior implementation was written the way that it was? Or put another way, are there any disadvantages of this refactor?\r\n\r\nAlso wouldn’t `referencedVars` tell us a key thing we would need to know to implement `const`, at least within a function scope?",
      "> Any idea why the prior implementation was written the way that it was? Or put another way, are there any disadvantages of this refactor?\r\n\r\n@lydell wrote [the original](https://github.com/jashkenas/coffeescript/commit/8ab15d737225acf3d0c2e9d575225df6a470971a), and in https://github.com/jashkenas/coffeescript/issues/4865#issuecomment-360115017 says:\r\n\r\n> Why? Because it’s simple. Tracking scope is more complicated for no gain. And even if we did that it wouldn’t help if the name is in the same scope.\r\n\r\nSo the main reason was simplicity. I imagine the original initialization is also somewhat faster (array scan vs tree scan), though lookups should be faster here; and the original approach was more robust to mistakes in `children` lists (but those would be bugs that should be fixed anyway).\r\n\r\nI agree that the new approach doesn't help renaming if the name is in the same scope (or descendant scope), but in that scenario the renaming is not surprising, whereas the current nonlocal behavior is very surprising (and especially annoying with jsdoc).\r\n\r\n@lydell, do you agree that this is a good approach?\r\n\r\n> Also wouldn’t `referencedVars` tell us a key thing we would need to know to implement `const`, at least within a function scope?\r\n\r\nYes, I had the same thought. I imagine `findReferencedVars` could be extended to do the static analysis first pass that I mentioned in https://github.com/jashkenas/coffeescript/issues/5377#issuecomment-1020511526, if we also extend to block scopes.",
      "> I imagine the original initialization is also somewhat faster\r\n\r\nI ran `cake bench` on this branch and on `main` and sometimes this branch was faster, sometimes `main` was. So the performance impact seems to be negligible.\r\n\r\nI want to leave this open for a few days in case @lydell or anyone else wants to review or discuss it, but it looks good to me.\r\n\r\n> Yes, I had the same thought. I imagine `findReferencedVars` could be extended to do the static analysis first pass that I mentioned in [#5377 (comment)](https://github.com/jashkenas/coffeescript/issues/5377#issuecomment-1020511526), if we also extend to block scopes.\r\n\r\nI guess the issue with potentially outputting a declaration/first assignment “in place,” as opposed to moving it up to where the `var` line is now, is that the current code might be relying on the hoisting; like `if something then a = 1`, where `a` needs to be in the function scope and not in that `if` block scope. So we probably can’t avoid doing the work of tracking block scopes in addition to function scopes, if we want to ever output `const`. But I feel like doing the work to track block scopes will probably yield some benefits.",
      "I won’t be reviewing, but thanks for asking!",
      "I'm excited for this! Is there anything I can do to help?",
      "> I’m excited for this! Is there anything I can do to help?\r\n\r\nThis one was pretty much ready to merge, but I was hoping it could get another reviewer. If you don’t mind reviewing it, and updating it per latest `main`, I think that’s all it needs.\r\n\r\nWhile you review, my main concern with this PR and with https://github.com/jashkenas/coffeescript/pull/5395, though more so with https://github.com/jashkenas/coffeescript/pull/5395, was that I found the code related to scope-tracking quite dense and hard to follow. It could benefit from a lot more commentary, from you or @edemaine if you have time to better explain what’s going on. See the review of https://github.com/jashkenas/coffeescript/pull/5395 to get a sense of the parts I found confusing.",
      "Sorry for the long hiatus. In some ways, coming back to this code after a long delay is good for seeing how confusing it is. 🙂 \r\n\r\n> It could benefit from a lot more commentary, from you or @edemaine if you have time to better explain what’s going on.\r\n\r\nI [added a bunch of comments](https://github.com/jashkenas/coffeescript/pull/5398/commits/fed48fe0250613989daeac07f042d0a05c13697e) to document how this specific PR works. There's still a lot to explain how the `Scope` class works, but that's really a task for #5395, which will be my next task (not sure when exactly).\r\n\r\nI also merged with `main`, so this should be ready to review/merge."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb883a21fa1e1f1a9d76",
    "number": 5397,
    "body": "This PR makes two changes to fix continuing a nonempty first line of an explicit `[` array or `{` object literal:\r\n\r\n1. Do not allow implicit call with an implicit object body from first line of `[` array or `{` object literal (as hinted at in comments, but not previously implemented), as in:\r\n\r\n   ```coffee\r\n   [x\r\n    y: 2\r\n   ]\r\n   {x\r\n    y: 2\r\n   }\r\n   ```\r\n   Previously, these were treated as function calls where `x` is a function.\r\n\r\n2. Support continuing an explicit `{` object literal when the first line has an item on it, as in:\r\n\r\n   ```coffee\r\n   {x: 1\r\n    y: 2\r\n   }\r\n   ```\r\n   \r\n   Previously, this was treated as `{x: 1, {y: 2}}` which was invalid.\r\n\r\nFixes #5368",
    "head_branch": "continuing-first-line",
    "is_a_fork": true,
    "comments": [
      "FYI, I [tried](https://github.com/edemaine/coffeescript/tree/continuing-first-line-2) extending this to handle #5330 also, but that seems substantially harder. 😕 ",
      "Thanks @GeoffreyBooth for the review!"
    ],
    "commit_messages": [
      "Fix continuing first line of explicit [/{ literal (#5397)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb893a21fa1e1f1a9d77",
    "number": 5396,
    "body": "Today I learned about the cake rule `doc:test` which builds the browser tests from the main tests (similar to `build:browser` but for the tests). This PR ensures that those tests are up-to-date before CI can succeed, similar to the other build operations we do.\r\n\r\nAs a side note, I find the name `doc:test` rather confusing, as it's about building tests not documenting or running them. But that's less important.\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "I think you also need to update the output in order to get _this_ PR’s CI to pass. `cake release` is the one that updates _everything._",
      "It turns out the issue wasn't that the output wasn't updated, it's that the order that the tests were combined was inconsistent, dependent on the filesystem. Sorting the directory seems to produce the original results; tests now pass. I'm guessing that some file systems automatically sort `listdir`, but Windows didn't, and apparently CI (ubuntu I think?) didn't.",
      "> the order that the tests were combined was inconsistent\n\nWhy does it matter? Do some tests depend on others?",
      "The `cake doc:test` script concatenates a bunch of files into one file. If the file order is inconsistent, so are the results. The result needs to be consistent for CI to check that it was built properly. (It will also make for smaller diffs, if they get built on a nonalphabetical file system.) "
    ],
    "commit_messages": [
      "CI: Ensure browser tests are up-to-date (#5396)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb8a3a21fa1e1f1a9d78",
    "number": 5395,
    "body": "This is a portion of my `typescript` branch that I spent the last few days working on, implementing the plan laid out in https://github.com/jashkenas/coffeescript/issues/5377#issuecomment-1019537087 : **push the `var` declaration of a variable down to its first clean assignment** if there is one.  The result is generally cleaner code (many fewer variables declared in top `var` block), and much better automatic types when the code is presented to TypeScript. It's a step toward #5377.\r\n\r\nExamples of clean assignments:\r\n\r\n* `x = 7` &rarr; `var x = 7`\r\n* `[x, y] = array` &rarr; `var [x, y] = array`\r\n* `{x, y} = point` &rarr; `var {x, y} = point`\r\n* `[{x, y}, {a, b}] = [point, pair]` &rarr; `var [{x, y}, {a, b}] = [point, point2];`\r\n\r\nUnexamples of unclean assignments (so `var` won't try to be inserted here; if this is the only assignment, `var` will remain at top):\r\n\r\n* `[{x, y}, {x: x2, y: y2}] = [point, point2]`\r\n* `{x = 5} = obj`\r\n* `x += 5`\r\n* `if match = re.exec string`\r\n* `console.log x = 5`\r\n\r\nNote for reviewer: \"clean\" is referred to as `isDeclarable` in the code.\r\n\r\nOnly the first assignment to a variable is modified.  The only exception is if there is a joint assignment that has *some* undeclared variables in addition to some already declared variables. Some examples:\r\n\r\n<table>\r\n<tr>\r\n<th>CoffeeScript\r\n<th>JavaScript output from this PR\r\n\r\n<tr>\r\n<td>\r\n\r\n```coffee\r\nx = 5\r\nx = 10\r\n```\r\n\r\n<td>\r\n\r\n```js\r\nvar x = 5;\r\nx = 10;\r\n```\r\n\r\n<tr>\r\n<td>\r\n\r\n```coffee\r\nx = 5\r\n[x, y] = array\r\n```\r\n\r\n<td>\r\n\r\n```js\r\nvar x = 5;\r\nvar [x, y] = array;\r\n```\r\n\r\n</table>\r\n\r\nWhile the duplicate `var` isn't pretty, I think it's rare, and [it's allowed](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#description). `eslint` would complain about the output, but `eslint` complains about all sorts of things in CoffeeScript's output; it's better to run `eslint` on the CS AST.\r\n\r\nThere's also special handling of `for` loops and ranges.  (This took the longest to get right.)  Examples:  (comments added for explanation)\r\n\r\n<table>\r\n<tr>\r\n<th>CoffeeScript\r\n<th>JavaScript output from this PR\r\n\r\n<tr>\r\n<td>\r\n\r\n```coffee\r\nfor x from it\r\n  console.log x\r\n```\r\n\r\n<td>\r\n\r\n```js\r\nfor (var x of it) {\r\n  console.log(x);\r\n}\r\n```\r\n\r\n<tr>\r\n<td>\r\n\r\n```coffee\r\nfor x, y of object\r\n  console.log x, y\r\n```\r\n\r\n<td>\r\n\r\n```js\r\nfor (var x in object) {\r\n  var y = object[x];\r\n  console.log(x, y);\r\n}\r\n```\r\n\r\n<tr>\r\n<td>\r\n\r\n```coffee\r\nfor x in [1..100]\r\n  console.log x\r\n```\r\n\r\n<td>\r\n\r\n```js\r\nfor (var i = 1, x = i; i <= 100; x = ++i) {\r\n  console.log(x);\r\n}\r\n```\r\n\r\n<tr>\r\n<td>\r\n\r\n```coffee\r\nfor x in array\r\n  console.log x\r\n```\r\n\r\n<td>\r\n\r\n```js\r\nfor (var i = 0, len = array.length; i < len; i++) {\r\n  var x = array[i];\r\n  console.log(x);\r\n}\r\n```\r\n\r\n<tr>\r\n<td>\r\n\r\n```coffee\r\nfor x, i in array\r\n  console.log x\r\n```\r\n\r\n<td>\r\n\r\n```js\r\nfor (var j = 0, i = j, len = array.length; j < len; i = ++j) {\r\n  var x = array[i];\r\n  console.log(x);\r\n}\r\n```\r\n\r\n<tr>\r\n<td>\r\n\r\n```coffee\r\nsquares =\r\n  for x in array\r\n    x ** 2\r\n```\r\n\r\n<td>\r\n\r\n```js\r\nvar x;  // needs to stay here so visible outside loop\r\n\r\nvar squares = (function() {\r\n  var results = [];\r\n  for (var i = 0, len = array.length; i < len; i++) {\r\n    x = array[i];\r\n    results.push(x ** 2);\r\n  }\r\n  return results;\r\n})();\r\n```\r\n\r\n<tr>\r\n<td>\r\n\r\n```coffee\r\npowers =\r\n  for x, i in array\r\n    x ** i\r\n```\r\n\r\n<td>\r\n\r\n```js\r\nvar i, x;  // needs to stay here so visible outside loop\r\n\r\nvar powers = (function() {\r\n  var j, len;  // can't declare in for loop or would shadow i\r\n  var results = [];\r\n  for (j = 0, i = j, len = array.length; j < len; i = ++j) {\r\n    x = array[i];\r\n    results.push(x ** i);\r\n  }\r\n  return results;\r\n})();\r\n```\r\n\r\n</table>\r\n\r\nAs you can see in the more complicated examples, there are some tricky issues where it's crucial to avoid shadowing by excess `var`.  I *think* I got them all right; it was very hard to pass all the tests.  But it's possible that more tests should be done/added.\r\n\r\nThis PR also refactors `Scope` to ensure all variables have `positions` mapping,\r\nso we can do faster searching for variables, and a new `get` method for retrieving various data about a variable. This makes it easier to keep track of whether a variable has already had a `var` declaration during some assignment.\r\n",
    "head_branch": "var-assign",
    "is_a_fork": true,
    "comments": [
      "There are some browser tests failing, caused by [this bug in babel-plugin-minify-dead-code](https://github.com/babel/minify/issues/1021). I guess `var` is tricky to implement after all. 😦 ",
      "I'm also excited about this, anything I can do to help?",
      "I noticed the following translation, not mentioned above or in the test cases:\r\n\r\n```coffee\r\n[ x = '', y = '' ] = []\r\nx = x.slice(0)\r\n```\r\nbecomes\r\n```js\r\nvar y;\r\n\r\n[x = '', y = ''] = [];\r\n\r\nvar x = x.slice(0);\r\n```\r\nis this a bug or intended? If I didn't read you wrong, this should have been `var x, y` instead.",
      "@phil294 I can see why that would happen. The code must be interpreting `var [x = '', y = ''] = [];` as an invalid declaration, so it doesn't do `var` there, leaving `x` and `y` needing declaration elsewhere.  `x = x.splice(0)` is a valid place to put the `x` declaration and so it puts it there.  `y` doesn't have an assignment so it gets hoisted.  This is all valid thanks to automatic `var` hoisting.\r\n\r\nHowever, `var [x = '', y = ''] = [];` is a valid declaration, so I should tweak the test to just put the `var` there.  Some assignments are not valid places to put `var` though (for example, `if x = 5`); in those cases, the next assignment to `x` will be where the `var` ends up.  We could alternatively decide that, if the first assignment isn't a valid place for `var`, then the `var` always gets hoisted to the top -- but that's not how this branch works currently.",
      "@edemaine Thanks for the clarification!\r\n\r\n---\r\n\r\nAs you know, this PR branch has been in use in [CoffeeSense](https://github.com/phil294/coffeesense) for several months now, and indeed successfully so.\r\n\r\nToday however, I have found an actual bug for the first time (I think). It does not happen with the normal exports, but only with the browser compiler version. Here's reproduction code, which I ran with Deno because Node/modules gave some cryptic errors which I couldn't be bothered with.\r\n\r\n```javascript\r\nimport { compile } from \"./node_modules/coffeescript/lib/coffeescript-browser-compiler-modern/coffeescript.js\"\r\nlet coffee = 'a = 1\\n[1..a]'\r\nlet response = compile(coffee, { sourceMap: true, bare: true })\r\nconsole.log(response.js)\r\n```\r\noutput:\r\n```javascript\r\n\r\nvar a = 1;\r\n\r\n(function() {\r\n  var results = [];\r\n  for (var i = 1; 1 <= a ? i <= a : i >= a; 1 <= a ? i++ : i--){ results.push(i); }\r\n  return results;\r\n}).apply(thisundefined);\r\n```\r\nnote the `thisundefined` at the end.\r\n\r\nPlease, there is no need to investigate, this is a rare case with low priority for me or any user, I think. I just thought it might be helpful for developing this branch, should you ever get back to it - maybe it's also already covered above.\r\n\r\nThank you again for your efforts."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb8b3a21fa1e1f1a9d79",
    "number": 5391,
    "body": "This PR adds support for the [import assertions syntax](https://github.com/tc39/proposal-import-assertions), which permits `import` or `import()` of JSON files (browsers and Node) and CSS files (browsers). It looks like this (identical in CoffeeScript and JavaScript):\r\n\r\n```coffee\r\nimport dates from './calendar.json' assert { type: 'json' }\r\nexport { version } from './package.json' assert { type: 'json' }\r\n```\r\n\r\nThe Node [feature](https://nodejs.org/api/esm.html#import-assertions) is flagged behind `--experimental-json-modules`; I was partly responsible for adding it. The syntax is supported without flags in at least Chrome. You can test in latest Node by running the tests after setting `export NODE_OPTIONS=--experimental-json-modules`, or run `cake build:browser` to update the browser build and run `http-server docs/v2` and go to http://127.0.0.1:8080/test.html in Chrome. Only the `import()` syntax is tested by running, since we don’t yet have support for ESM syntax in our tests (`import()` is supported in CommonJS and classic Script modes for Node and browsers, respectively) and so the static `import` and `export` syntaxes are tested via string comparisons, like our existing `import` and `export` tests. (I’d love to get proper ESM support in our tests, but that’s another PR.)\r\n\r\nI followed the AST I saw in https://astexplorer.net/ for `@babel/parser`. @helixbass please let me know if it looks okay.",
    "head_branch": "import-assertions",
    "is_a_fork": true,
    "comments": [
      "Does anyone mind reviewing this? @vendethiel? @edemaine?",
      "Maybe a regression test for an identifier being `assert` if we don’t have that and a test for an empty assert block",
      "> Maybe a regression test for an identifier being `assert` if we don’t have that and a test for an empty assert block\r\n\r\nLike `import assert from 'foo'`? and `import foo from 'bar' assert {}`?",
      "Yes, and `assert = 1`",
      "> Yes, and `assert = 1`\r\n\r\nDone.",
      "It looks like the new tests somehow broke `cake test`. I get\r\n\r\n`\r\nTypeError [ERR_INVALID_MODULE_SPECIFIER]: Invalid module \"data:application/json,{\"ofLife\":42}\" has an unsupported MIME type \"application/json\"\r\n`\r\n\r\nIt [looks like](https://nodejs.org/api/esm.html#no-json-module-loading) I need to add `--experimental-json-modules` but I don't see the CI doing that. Am I missing something? I'm running Node 17.3.0 on Windows 10.",
      "`cake test` passes for me. Not sure why you’d see differently? The other one that’s good to run is `cake test:browser`, which fires up headless Chrome to run the browser tests. In this case Chrome supports the import assertions syntax without a flag, so those tests get run in that environment (which runs in CI). The import assertion tests are currently getting skipped in Node, per: https://github.com/jashkenas/coffeescript/blob/f557c0579b13c525b550e86628ecd42e4107fa53/Cakefile#L479\r\n\r\nOnce JSON modules are unflagged in Node, which should happen soon, those tests will automatically start running in Node too, and they’ll pass. I tested by setting the flag ahead of time via `export NODE_OPTIONS=--experimental-json-modules`.",
      "My guess (based on the experiments below) is that the `skipUnless` test is checking whether NodeJS can parse the `assert` syntax, but isn't testing whether NodeJS will import a JSON module, and Node 17.3.0 supports the former but not the latter without setting `NODE_OPTIONS`. Perhaps you're using a different Node version than I am, one that doesn't support `assert` syntax, so the test gets skipped?\r\n\r\n```node\r\n> process.version\r\n'v17.3.0'\r\n> new Function('async () => { await import(\\'data:application/json,{\"foo\":\"bar\"}\\', { assert: { type: \"json\" } }) }')\r\n[Function: anonymous]\r\n> new Function('import(\\'data:application/json,{\"foo\":\"bar\"}\\', { assert: { type: \"json\" } })')\r\n[Function: anonymous]\r\n> await new Function('return import(\\'data:application/json,{\"foo\":\"bar\"}\\', { assert: { type: \"json\" } })')()\r\nUncaught:\r\nTypeError [ERR_INVALID_MODULE_SPECIFIER]: Invalid module \"data:application/json,{\"foo\":\"bar\"}\" has an unsupported MIME type \"application/json\"\r\n    at __node_internal_captureLargerStackTrace (node:internal/errors:464:5)\r\n    at new NodeError (node:internal/errors:371:5)\r\n    at ESMLoader.load (node:internal/modules/esm/loader:380:13)\r\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\r\n    at async ESMLoader.moduleProvider (node:internal/modules/esm/loader:280:47)\r\n    at async link (node:internal/modules/esm/module_job:70:21) {\r\n  code: 'ERR_INVALID_MODULE_SPECIFIER'\r\n}\r\n```\r\n\r\nHere's the output I get with `NODE_OPTIONS=--experimental-json-modules`:\r\n\r\n```node\r\n> await new Function('return import(\\'data:application/json,{\"foo\":\"bar\"}\\', { assert: { type: \"json\" } })')()\r\n[Module: null prototype] { default: { foo: 'bar' } }\r\n> (node:41788) ExperimentalWarning: Importing JSON modules is an experimental feature. This feature could change at any time\r\n(Use `node --trace-warnings ...` to show where the warning was created)\r\n```\r\n\r\nSo now we just need to figure out a different `skipUnless` test... But I don't see how to do it when wrapping in `new Function`, or more generally how to do it in a synchronous setting. 😕 ",
      "Our CI doesn’t include 17 as it’s unstable; we stop at 16. I was testing in 16. JSON modules will get unflagged before 18, so I don’t think it’ll matter much whether this works in 17.\r\n\r\nFor now either just set `NODE_OPTIONS=--experimental-json-modules` beforehand or develop in Node 16."
    ],
    "commit_messages": [
      "Import assertions (#5391)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb8c3a21fa1e1f1a9d7a",
    "number": 5389,
    "body": "Hello, per my comment in #4561, there is an issue with `boundMethodCheck` and scope. It's added on top of the file, which pollutes global scope when using Google Closure Compiler and the check doesn't work. If the project doesn't need the check, it could be turned off.",
    "head_branch": "bound-method-check",
    "is_a_fork": true,
    "comments": [
      "I’m sorry, but it’s a project design decision that we’re not adding any further flags that influence compilation output. This was discussed during the CoffeeScript 2 project, and the consensus was that people should be able to look at CoffeeScript source and know how it will be output without needing to also need to inspect how it’s being compiled (i.e. the opposite of TypeScript, where seeing TypeScript source doesn’t tell you all you need to know without also consulting the relevant `tsconfig.json`).",
      "I understand. Is there any way I could make CoffeeScript output valid while complying with these decisions? At the moment, the output is invalid as soon as I use any `class A extends B {}` with a bound method.\r\n\r\nConsider this. File A:\r\n\r\n```\r\ngoog.require 'goog.ui.Component'\r\ngoog.provide 'namespace.Parent'\r\n\r\nclass namespace.Parent extends goog.ui.Component\r\n\r\n    constructor: ->\r\n        something.addEventListener 'event-a', @onEventA\r\n\r\n    onEventA: ->\r\n        console.log this\r\n```\r\n\r\nFile B:\r\n\r\n```\r\ngoog.require 'namespace.Parent'\r\ngoog.provide 'namespace.Child'\r\n\r\nclass namespace.Child extends namespace.Parent\r\n\r\n    constructor: ->\r\n        something.addEventListener 'event-b', @onEventB\r\n\r\n    onEventB: ->\r\n        console.log this\r\n```\r\n\r\nIf I run compilation for this, it puts\r\n\r\n```\r\nvar ref,\r\n    boundMethodCheck = function (instance, Constructor) {\r\n  if (!(instance instanceof Constructor)) {\r\n    throw new Error('Bound instance method accessed before binding');\r\n  }\r\n};\r\n```\r\n\r\nand also does\r\n\r\n```\r\nref = namespace.Parent\r\n```\r\n\r\nand\r\n\r\n```\r\nref = namespace.Child\r\n```\r\n\r\nin them respectively. This means that when this gets bundled, `ref` is always equal to `namespace.Child` and any call to `Parent.onEventA` fail on the `boundMethodCheck`.\r\n\r\nBefore you say that `bare` solves this, it's invalid because `goog.require` and `goog.provide` work like native `import/export`, so they cannot be inside a closure.\r\n\r\nThis means we're stuck in a place where we cannot use neither bare nor not-bare.\r\n\r\nSo I am willing to explore ideas that would be mergeable.\r\n\r\nFor example, CS handles import/export, could goog.require/provide be put on the same level so that if the output has a wrapper, the module system stays on top level? What about using a different variable name, now everything is just `ref`, so last one out wins, if the variable was unique, it wouldn't be a problem either.\r\n\r\nThe output of CS 2 is about 20 % smaller just because it uses ES6, so it's a huge benefit that is at the moment, only spoiled by this single check.\r\n\r\nThanks you for any advice.",
      "Individual files are inherently scoped. A `var ref =` in one file has no relation to `var ref =` in another file. This sounds more like an issue with how you’re bundling multiple files together. Perhaps you need a more sophisticated bundler that renames variables as needed when things like a module-scoped `ref` or `boundMethodCheck` would collide because two module files are being merged into one.",
      "Personally, I wouldn't say that google closure compiler is not sophisticated enough, but I guess we will just have to stick with v1. :(\r\n\r\nThank you for your time.",
      "@Goues Can you replace `goog.require` and `goog.provide` with something else?\r\n\r\nYou can create your own macros to handle dependencies. I do this to implement [`window.FROM`](https://github.com/ch1c0t/makepwa#windowfrom).\r\n\r\nI [use the AST](https://github.com/ch1c0t/makepwa/blob/5cc65e0470eead5c63e29e7976d97cf30e25dc43/src/build/js/deps/find/FindFileDeps.coffee#L8) from CoffeeScript's `compile`, and then [prepare a file declaring dependencies](https://github.com/ch1c0t/makepwa/blob/5cc65e0470eead5c63e29e7976d97cf30e25dc43/src/build/js/deps/create/CreateEntryFile.coffee).",
      "The entire stack is google-based, so it's google closure compiler with google closure library and coffeescript thrown into it. It's a java bundler with java tooling that is built around `goog.require`, `goog.provide` and namespaces, everything is defined in global space, which is why a new variable `ref` put at the top level of a file is global - in google closure, it should be namespaced.\r\n\r\nThere are definitely other approaches (`goog.module`), but they are probably not worth the effort compared to a micro patch like the one here.\r\n\r\nIf I was to use AST, I would use it to remove the injected check as well instead of trying to work around the top-level scope.\r\n\r\nAnyway, this setup is a very niche corner of the internet and I don't expect anyone else to have it, so please don't spent too much time on this, a single review and feedback is all I could hope for 👍 ",
      "`boundMethodCheck` isn’t the only helper that CoffeeScript adds to the tops of files. See https://github.com/jashkenas/coffeescript/blob/master/lib/coffeescript/rewriter.js#L10-L11 for example. If your build process is losing these as part of bundling, there are possibly other things broken with your final output, even in v1.\r\n\r\nAnother thing to consider is whether you need to merge the files together at all. Keeping all the ESM files separate would also avoid this issue, and with HTTP/2 commonplace nowadays there might not be a need to create a single bundle.",
      "I started looking around for existing work and I found couple projects for coffeescript v1, one of which we are using.\r\n\r\nThere used to be https://www.npmjs.com/package/coffee2closure, the source code is now gone, but since we're actually using this with CS1, we have a private fork of this.\r\n\r\nThere is also a fork of CS itself in https://github.com/hleumas/coffee-script/wiki that introduces a compiler flag to make output compatible with google closure. And even an older attempt in http://bolinfest.com/coffee/.\r\n\r\nI guess I was too optimistic thinking that as CS2 can output ES6 classes and is in general more compatible with JS, we could get rid of _any_ custom post-transformation (like actually making the classes compatible). From my initial attempts at upgrading, it looked like `boundMethodCheck` was the only issue, but I now have an understanding that there _may_, and probably will, be a cascade of issues down the road.\r\n\r\nAll projects for google closure compatibility with coffeescript were sunset a long time ago, which should tell us how legacy the stack can be considered in the first place.",
      "CoffeeScript just outputs JavaScript, and CoffeeScript 2 is much more standard JavaScript. Any project that prepares JavaScript for Closure should do the trick; you could look for one that processes TypeScript output to prepare it for Closure compilation, as TypeScript would present many of the same issues with helper functions and generated variables."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb8d3a21fa1e1f1a9d7b",
    "number": 5387,
    "body": "I noticed a broken link in the polyfill section of the docs that attempts to link to a post getting into Polyfills for general information, but that post redirects to the home page of Hackernoon, so seems to have been deleted.\r\n\r\nI replaced it with a helpful and informative DEV post that seems to accomplish similar goals for the link. Whether or not this is _the perfect replacement_, it is a good post, and is definitely an upgrade from the current broken link.\r\n\r\nSmall fix, have a nice day!",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "The original article appears to also be at https://medium.com/hackernoon/polyfills-everything-you-ever-wanted-to-know-or-maybe-a-bit-less-7c8de164e423. I’m also happy to include three links.\r\n\r\nTo be mergeable, you need to also run `cake doc:site` and commit the changed files."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb8e3a21fa1e1f1a9d7c",
    "number": 5384,
    "body": "Resolves #5379\r\n\r\nAdds a syntax (I used `for each`, but is of course this is not defined) to allow comprehension to result in a generator instead of a array, similar to the python one.\r\n\r\n```coffeescript\r\nnums    = (n * n for each n in [1, 2, 3] when n & 1)\r\nresults = (n * 2 for each n from nums)\r\n\r\nresults.next().value # 2\r\nresults.next().value # 18\r\nresults.next().done  # yes\r\n```",
    "head_branch": "for-iter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb8f3a21fa1e1f1a9d7d",
    "number": 5381,
    "body": "*   The `coffeescript` package itself now supports named exports when used by ES modules in Node.js; or in other words, `import { compile } from 'coffeescript'` now works, rather than only `import CoffeeScript from 'coffeescript'`. #5376 \r\n*   Bugfix for a stack overflow error when compiling large files in non-bare mode. #5380 \r\n",
    "head_branch": "v2.6.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "2.6.1 (#5381)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb903a21fa1e1f1a9d7e",
    "number": 5380,
    "body": "See https://github.com/jashkenas/coffeescript/issues/5378#issuecomment-932688592",
    "head_branch": "fix-stack-overflow",
    "is_a_fork": true,
    "comments": [
      "It looks like the browser compiler needs to be rebuilt.  (Maybe I need to improve this error message...)",
      "@edemaine Done. Otherwise does this look good?",
      "Yes, it looks good to me (see other thread for details). "
    ],
    "commit_messages": [
      "Fix #5378, stack overflow on large files (#5380)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb913a21fa1e1f1a9d7f",
    "number": 5376,
    "body": "When writing ES module code in Node, the following doesn’t currently work:\r\n\r\n```js\r\nimport { compile } from 'coffeescript';\r\n```\r\n\r\nThis is because `coffeescript` is a CommonJS package that exports a single object (`module.exports = CoffeeScript`) and Node’s “best guess” algorithm for trying to detect named exports of CommonJS packages can’t find CoffeeScript’s exports. Currently only `import CoffeeScript from 'coffeescript'` works.\r\n\r\nThis PR simply adds several lines that explicitly define the named exports, which enables code like the first example to work. cc @guybedford\r\n\r\nThere are no tests for this, because the only way to currently run ESM code in Node from a CommonJS context is to either use an [experimental API](https://nodejs.org/api/vm.html#vm_class_vm_module) that’s moribund and likely to significantly change whenever it gets picked up again, or to spawn a child process of Node which is a bit too resource-intensive for our test suite. This code is extremely low risk, though, and doesn’t strike me as needing tests.",
    "head_branch": "node-esm-named-exports",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Named exports for Node ESM for `coffeescript` package (#5376)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb923a21fa1e1f1a9d80",
    "number": 5375,
    "body": "This extracts the comment fixes from #5348, plus some additional rewording, to make clear that `x = (throw 1)` is allowed, while `x = (break)` isn't.  A small thing, but at least I can get something useful out of #5348. 🙂 ",
    "head_branch": "jump-comments",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve documentation of `jumps` in comments (#5375)\n\n* Improve documentation of jumps\r\n\r\n* Review suggestion\r\n\r\nCo-authored-by: Geoffrey Booth <456802+GeoffreyBooth@users.noreply.github.com>\r\n\r\n* Rebuild\r\n\r\nCo-authored-by: Geoffrey Booth <456802+GeoffreyBooth@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb933a21fa1e1f1a9d81",
    "number": 5374,
    "body": "[2.6.0 changelog](https://rawgit.com/geoffreybooth/coffeescript/v2.6.0/docs/v2/index.html#2.6.0):\r\n\r\n*   The syntax `import.meta`, including `import.meta.url`, is now supported. https://github.com/jashkenas/coffeescript/pull/5319\r\n*   The `await` keyword is now supported outside of functions (in other words, at the top level). [Note that JavaScript runtimes only support this for ES modules.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await#top_level_await) https://github.com/jashkenas/coffeescript/pull/5371\r\n*   Bugfix for a `for` comprehension at the end of an `unless` or `until` line. https://github.com/jashkenas/coffeescript/pull/5310\r\n\r\nThanks to @edemaine and @helixbass. This PR also includes updates to dependencies (resolves #5355), and a few minor changes to `Cakefile` per dependency breaking changes (and a tiny [bugfix](https://github.com/jashkenas/coffeescript/commit/00da32e6d09997d8d2a4969ca569f76af1c6ca41)). It also drops Node 6 and 8 from CI since CI fails with newer dependencies that require Node 10+; and both Node 6 and 8 have been end-of-life since 2019.\r\n\r\nIt turns out that I had a 2.5.2 branch on my local ready to push and release on 2020-06-01, but two days later we had a baby 😄 Sorry for the delay!\r\n",
    "head_branch": "v2.6.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "2.6.0 (#5374)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb943a21fa1e1f1a9d82",
    "number": 5373,
    "body": "@GeoffreyBooth wrote:\r\n\r\n> We should add a CI step that rebuilds everything and then checks that there’s nothing different from the last git commit (which, if there was a difference, would mean that the author forgot to rebuild and commit one of the outputs).\r\n\r\nThis PR adds this CI step, which turned out to be easy, because all the building was already getting tested.\r\n\r\nFor some reason, the browser build is different on Node 6.x and 8.x (in my CI testing). So we don't run the diff in those cases, which seems OK to me.",
    "head_branch": "ci-diff",
    "is_a_fork": true,
    "comments": [
      "Awesome! Yeah, Node 6 and 8 (and even 10) have been EOL for so long now that maybe we should take them out. I was thinking of getting the next release out first though before considering that.\r\n\r\nHave you tested this? Like by pushing a branch (or opening a PR, if pushing a branch isn’t enough) where you change something that breaks tests, and don’t run `cake:build` or `cake build:browser`, to see if this catches it?",
      "I tested in the following way: before I excluded Node 6 and 8, they generated different code from `cake build:browser`, and CI correctly failed.  Maybe you can see the workflow run here: https://github.com/edemaine/coffeescript/actions/runs/1239714992\r\nIf not, here's what it looks like:\r\n\r\n![image](https://user-images.githubusercontent.com/2218736/133671766-f83bd4ab-ce8d-404a-847f-0f9f02bc55e7.png)\r\n\r\n![image](https://user-images.githubusercontent.com/2218736/133671887-7c8da43c-c5f6-4ce2-8a80-52f4a1596da0.png)\r\n\r\nMaybe not the best error messages (diffs for the minified browser compiles don't look good -- it's possible we should change diff formats) but at least it correctly failed.  I can test more if you'd like (or feel free to push a change, e.g. to a `src/*.coffee` file that doesn't correctly end up in the compile versions, and then revert).\r\n\r\n> where you change something that breaks tests, and don’t run `cake:build` or `cake build:browser`, to see if this catches it?\r\n\r\nI think you're right that, if tests fail, then `cake:build` and `cake build:browser` and `git diff --exit-code` won't run.  But presumably in that scenario there would be another push that fixes the tests, and then everything will rerun?  Or am I missing a use-case for running the build and diffs even when the tests fail?",
      "> Or am I missing a use-case for running the build and diffs even when the tests fail?\r\n\r\nI’m trying to prevent what happened with https://github.com/jashkenas/coffeescript/pull/5324, where we merged in without running `cake build:browser` and so when I added Node 16 to CI, the tests for 16 were failing because they used the browser build which hadn’t been updated.\r\n\r\nI think what you have is probably fine; maybe it’s not actually necessary because the tests themselves will catch it? But yeah _somehow_ we were able to get a passing CI in https://github.com/jashkenas/coffeescript/pull/5324 even though the browser output hadn’t been rebuilt. In https://github.com/jashkenas/coffeescript/pull/5372 I both added Node 16 and rebuilt the browser compiler, and it was the latter that got CI passing again.",
      "Yes, this PR is designed to fix exactly this issue.  Before this PR, CI ran `cake build:browser` to check that it *could successfully build*, but then threw away any generated files.  After this PR, CI subsequently checks *whether any built files have changed* (via `git diff`, so anything checked into Git), and fails if so.\r\n\r\nSo if you forget to check in the result of a build process, the test will see that the new code successfully builds, but produces different results, and fail overall.",
      "Awesome, thanks!"
    ],
    "commit_messages": [
      "ci: Check that build steps didn’t change any files (#5373)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb953a21fa1e1f1a9d83",
    "number": 5372,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttps://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a\r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by\r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in\r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in\r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](https://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\n",
    "head_branch": "node-16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Node 16 to CI (#5372)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb963a21fa1e1f1a9d84",
    "number": 5371,
    "body": "@GeoffreyBooth [mentioned](https://github.com/jashkenas/coffeescript/issues/5356#issuecomment-917525888) that CoffeeScript is missing support for [top-level await](https://v8.dev/features/top-level-await). This PR adds that support.\r\n\r\nMostly this involves doing fewer checks for invalidity.  The only hard part is when the code is wrapped in a top-level IFFE, where we need to detect whether that wrapper should be marked `async`.\r\n\r\nFixes #5354 (request from Deno side).\r\n\r\nThe REPL already supported top-level `await` by explicit wrapping in an `async function` closure. I think it's best to keep that code, because older versions of Node don't support top-level `await`.",
    "head_branch": "top-level-await",
    "is_a_fork": true,
    "comments": [
      "I've updated the tests to\r\n\r\n* use `eqJS`\r\n* extend `eqJS` to allow specifying compile options\r\n* label tests better as to what's being tested\r\n\r\nHappy to make further changes.\r\n\r\nUpdate: I just saw your comment saying to not modify `eqJS`. I'll change that back.",
      "Further revised the tests to check what they actually care about, which is a `startsWith` prefix.  `eqJS` is back to the original.",
      "Thanks. I want to leave this open a little bit in case anyone else wants to review (@helixbass?) and then will land and cut a new release.\r\n\r\nI added https://github.com/jashkenas/coffeescript/pull/5372 to add Node 16 support to CI but the tests fail there, so that should also probably be addressed before we land this. cc @helixbass on that too as it looks like it has to do with AST stuff.",
      "Got CI fixed. Can you please rebase off of `master` or merge `master` into your branch? That should trigger a new test run that’ll include Node 16.\r\n\r\nFYI besides rebuilding the regular compiler we also need to build the browser compiler (`cake build:browser`). We should add a CI step that rebuilds everything and then checks that there’s nothing different from the last git commit (which, if there was a difference, would mean that the author forgot to rebuild and commit one of the outputs).",
      "Thanks. I’ll cut a new release branch soon."
    ],
    "commit_messages": [
      "Support top-level await (#5371)\n\n* Support top-level await\r\n\r\n* Remove code duplication\r\n\r\n* Avoid use of trimEnd so tests pass in old Node\r\n\r\n* Proposed rewrite of tests\r\n\r\n* startsWith tests; revert eqJS\r\n\r\n* build:browser"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb973a21fa1e1f1a9d85",
    "number": 5358,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttps://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a\r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by\r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in\r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in\r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](https://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\n\r\nI don't think this requires CI, but someone more familiar with the AST and parser should check this",
    "head_branch": "ts-definitions",
    "is_a_fork": true,
    "comments": [
      "I'll add dtslint and helper definitions today. It might be worth adding the helper JSDOC from the definitions back into helpers.coffee, I can do that as well",
      "@aurium @helixbass @GeoffreyBooth ",
      "@GeoffreyBooth is there anything else I should address?",
      "@4086606 Maybe I am doing something wrong, but I don't think your PR is actually working? When I do `npm i 'jashkenas/coffeescript#pull/5358/head'` and then import CoffeeScript in a TS or JS file, there are no typings available. The `/types` directory is missing, there is still only `/bin` and `/lib`.",
      "Try again",
      "> Try again\r\n\r\nNo, that did not help, unfortunately. I have got your latest changes, but there are no types included:\r\n![pic](https://waritschlager.de/share/b150a8c54f717b96.png)\r\nI guess you need to add it to the `\"files\"` array (?)",
      "# 😩",
      "Is it a better pattern to bundle manually-written type definitions in a package like this vs use [DefinitelyTyped](https://definitelytyped.org/) (ie `@types/*` packages)? I don't know what's conventional, off the top of my head it seems like publishing separately via DefinitelyTyped would give more flexibility because then you don't need to push out a new Coffeescript release in order to update the type definitions",
      "Oh god that sounds like hell on earth.. sure I'll move things there. Thankfully dtslint is passing already and they should merge very quickly. It also won't be necessary to register the typings as a dependency here.",
      "> publishing separately via DefinitelyTyped would give more flexibility because then you don’t need to push out a new Coffeescript release in order to update the type definitions\r\n\r\nYes, and that way you can define type definitions for past releases of CoffeeScript, since I can’t go back and modify those now."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb983a21fa1e1f1a9d86",
    "number": 5355,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Marge?",
      "In #5374. These are all `devDependencies`, anyway, which shouldn’t be installed when you’re adding CoffeeScript to your project; only when you’re developing the CoffeeScript project itself."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb993a21fa1e1f1a9d87",
    "number": 5353,
    "body": "Fixes #5352 \r\n\r\nFixes issue where triple-quote (non-interpolated) JSX attribute values weren't getting transpiled correctly into a JSX expression container wrapping the template literal (eg ``<div a={`...`} />``)",
    "head_branch": "iss5352-jsx-attribute-triple-quotes",
    "is_a_fork": true,
    "comments": [
      "Thanks! Sorry for the delay."
    ],
    "commit_messages": [
      "Handle triple-quoted JSX attribute values (#5353)\n\nCo-authored-by: Geoffrey Booth <webadmin@geoffreybooth.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb9a3a21fa1e1f1a9d88",
    "number": 5349,
    "body": "* Consistently use `#try-catch` for the section (and `#try` for the demo).\r\n* The table of contents actually lacked this entry (and labeled `switch` to include it), making it hard to find.\r\n* And another section linked to `#try` which went to the wrong place.\r\n* This has been an issue for a long time, so I fixed both v1 and v2 docs.",
    "head_branch": "try-catch-id",
    "is_a_fork": true,
    "comments": [
      "The `docs` folder is the generated output. You need to update the source files in `documentation`, e.g. https://github.com/jashkenas/coffeescript/blob/master/documentation/site/sidebar.html.",
      "@GeoffreyBooth Oops, sorry about that. I'm obviously still new to the build process...\r\n\r\nI've revised the source files to match.  I confirmed that `cake doc:site` produces the same HTML files that I originally committed and tested.",
      "Just bumped into this again. Let me know if there's anything else that needs to be done for this to be merged.",
      "> Just bumped into this again. Let me know if there’s anything else that needs to be done for this to be merged.\r\n\r\nPlease just rebase or merge `master` in so that we get a passing CI."
    ],
    "commit_messages": [
      "Fix documentation links to try/catch section (#5349)\n\n* Fix documentation links to try/catch section\r\n\r\nConsistently use `#try-catch` for the section (and `#try` for the demo)\r\n\r\n* Fix documentation source"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb9a3a21fa1e1f1a9d89",
    "number": 5348,
    "body": "* Fix #5344: no longer generate `break` when the case body exits on its own, typically by a forced `return` being pushed within `if` blocks.\r\n* Add new `alwaysJumps` node method to detect when a switch case can\r\nsafely drop its `break`.  Similar to `jumps` but ANDing instead of OR.\r\n* Fix some documentation describing `jumps`, which ignores `throw`; it turns out `x = (throw 1)` is valid CoffeeScript.",
    "head_branch": "switch-no-break",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb9b3a21fa1e1f1a9d8a",
    "number": 5334,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttps://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a\r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by\r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in\r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in\r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](https://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\n\r\nSee https://github.com/jashkenas/coffeescript/issues/4615#issuecomment-710384338\r\n",
    "head_branch": "docs",
    "is_a_fork": true,
    "comments": [
      "This is a good start! I think we should try to include as many high-quality ones as we can find. Like I’m sure there’s something for Webpack. Probably for Rollup, Parcel, etc.\r\n\r\nMaybe group by topic? Like Linters, Build Tools, etc. Framework integrations is another category, like the Meteor Atmosphere package (I maintain that one), the Ember one, I’m sure there are others.",
      "@GeoffreyBooth Ok, I added those and more… and also updated the Wiki to match 👍 \r\n\r\nThat's as much as I can/have time to find at the moment… Iv'e checked 'Allow edits by maintainers', so feel free to pick up the baton if you want to add more… Otherwise it should be pretty much ready to merge?",
      "Just picking this up. I discovered that CoffeeLint has been revived in a new, actively maintained fork: https://coffeelint.github.io/ cc @helixbass.",
      "@danielbayley I organized the integrations categories similarly to the Resources section, where they appear as subsections. This lets us add links for them in the sidebar. I also added Integrations to the top navbar, and a few links in the CoffeeScript 2 and transpilation sections.\r\n\r\nAny notes on this or should I merge it in?",
      "FWIW, I read this over, and it looks good!\r\n\r\nIn checking the links I noticed https://marketplace.visualstudio.com/items?itemName=crisward.cjsx, with source at https://github.com/crisward/cjsx . This might be a path forward to fixing [syntax highlighting in vscode](https://github.com/microsoft/vscode/issues/117143) and [in atom](https://github.com/atom/language-coffee-script/issues/174).",
      "> This might be a path forward to fixing [syntax highlighting in vscode](https://github.com/microsoft/vscode/issues/117143) and [in atom](https://github.com/atom/language-coffee-script/issues/174).\r\n\r\nFor JSX, you mean? Literate syntax is also horribly broken.",
      "> I discovered that CoffeeLint has been revived in a new, actively maintained fork: https://coffeelint.github.io/ cc @helixbass.\r\n\r\n@GeoffreyBooth Which fork is that?",
      "> Any notes on this or should I merge it in?\r\n\r\n@GeoffreyBooth Nice! Yeah sure, merge away…\r\n\r\np.s The links under https://coffeescript.org#resources are broken in the current deployment, as they try to create a new page…\r\n\r\n",
      "> p.s The links under https://coffeescript.org#resources are broken in the current deployment, as they try to create a new page…\r\n\r\nCan you be more specific? The links in the sidebar work for me, and the links under Resources go to external sites as expected (like for the GitHub repo etc.)."
    ],
    "commit_messages": [
      "Add Integrations section to docs (#5334)\n\nCo-authored-by: Geoffrey Booth <webadmin@geoffreybooth.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb9c3a21fa1e1f1a9d8b",
    "number": 5327,
    "body": "Would you be willing to remove this Google Analytics 'functionality' from this website? There are better alternatives if you _must_ keep tabs on users' activity.\r\n\r\nSome reputable alternatives can be seen here: https://switching.software/replace/google-analytics/\r\n\r\n<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttps://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a\r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by\r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in\r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in\r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](https://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Sorry, but since we rely on GitHub Pages to host our site, we can't run custom analytics software like any of the alternatives you suggest. Google Analytics is one of the few insights we have into the CoffeeScript user base, so it would be a great loss for us to remove it.",
      "> Sorry, but since we rely on GitHub Pages to host our site, we can't run custom analytics software like any of the alternatives you suggest. Google Analytics is one of the few insights we have into the CoffeeScript user base, so it would be a great loss for us to remove it.\r\n\r\nExcuse me, but why don't you try GoatCounter which is hosted, and allows **FREE** analytics?\r\n\r\nP.S. Goatcounter is listed there, did you miss it?",
      "It wouldn't be free for CoffeeScript as we get more than 100k pageviews per month."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb9d3a21fa1e1f1a9d8c",
    "number": 5324,
    "body": "Fixes #5323. @aurium @helixbass ",
    "head_branch": "fix-call-metaproperty",
    "is_a_fork": true,
    "comments": [
      "@helixbass good catch, thanks. Added."
    ],
    "commit_messages": [
      "Fix call MetaProperty (#5324)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb9e3a21fa1e1f1a9d8d",
    "number": 5319,
    "body": "Allows to access `import.meta` and only if its property is `meta`.\r\n\r\nThe new token `IMPORT_META` was created to allow richer formatting and code analysis.\r\n```\r\n$ ./bin/coffee --tokens -e 'import.meta.something'\r\n[IMPORT_META import] [. .] [PROPERTY meta] [. .] [PROPERTY something] [TERMINATOR \\n]\r\n```\r\ncloses #5317",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Maybe not important, but this breaks indented property access like\r\n```coffeescript\r\na = import\r\n .meta\r\n\r\n# or (forgive me...)\r\na = import.\r\n  meta\r\n```",
      "@vendethiel, now it can. Thanks!",
      "> this breaks indented property access\r\n\r\nThe same is true of `new.target`, so if we allow it for `import.meta` we should allow it there too.\r\n\r\nI'm conflicted, as these aren't actually properties of an object the way that `obj.prop` is. `import` isn't an object, nor is it a function (even though it can appear like one e.g. `import()`). It's just a weird piece of syntax. Though I suppose the 'property access' is a part of grammar, and `import.meta`/`new.target` uses that grammar, so maybe it should follow that pattern?",
      "@aurium I meant the approach in general is different from how this is usually done. Might not matter in this specific case (because it's not gonna be an issue in practice), but you're always gonna break some code if you \"revert\" to regex scanning.\r\n\r\n```coffeescript\r\nb.\r\n  # Here's a nice comment about the meta property\r\n c\r\n```\r\n\r\nSee @helixbass 's comment on \"retroactively updating a token\"",
      "@helixbass I added your excellent [explanation](https://github.com/jashkenas/coffeescript/pull/5319#discussion_r423023138) as a comment in afab371 on this branch.\r\n\r\n@aurium I merged the latest `master` into this branch. This adds a new and improved CI that includes testing the browser compiler, and uses GitHub Actions.\r\n\r\nHave all of the review notes been addressed?",
      "I believe... yes.",
      "> I believe... yes.\r\n\r\nGreat! @helixbass and @vendethiel, do you have any more notes?",
      "LGTM",
      "LGTM",
      "when where release this version ?"
    ],
    "commit_messages": [
      "Support import.meta and import.meta.* (#5319)\n\nCo-authored-by: Geoffrey Booth <webmaster@geoffreybooth.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfb9f3a21fa1e1f1a9d8e",
    "number": 5311,
    "body": "Because of https://github.com/babel/babel/issues/11226 and because our `package.json` loads the latest version of Babel, our tests were failing in Node 6 `--harmony`. This PR locks down Babel at 7.7.7, the last version that doesn’t error in Node 6 `--harmony`, to get our tests and CI passing again.\r\n\r\nWhen/if Babel fixes their bug, we can update to the latest version of Babel again. If they decide to drop support for Node 6, we might need to do the same. Per https://github.com/babel/babel/pull/10747, Babel 8 will only support Node 10.13+.",
    "head_branch": "update-dependencies",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update dependencies (#5311)\n\n* Install exactly @babel/core@7.7.7, the last version known to work in Node 6 --harmony\r\n\r\n* Update other dependencies"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfba03a21fa1e1f1a9d8f",
    "number": 5310,
    "body": "Fixes #5309 \r\n\r\n@GeoffreyBooth this fixes the reported bug. The issue was that I introduced an `@invert` property on `While` (and thus `For`) to defer inverting the condition of an `until` (in order to preserve the original condition for AST purposes). But that inadvertently clashed with `Base::invert()`",
    "head_branch": "iss5309-comprehension-as-postfix-conditional",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix: comprehension as postfix conditional (#5310)\n\nCo-authored-by: Geoffrey Booth <webmaster@geoffreybooth.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfba13a21fa1e1f1a9d90",
    "number": 5308,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttps://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a\r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by\r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in\r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in\r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](https://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\nAdded new compile option `--no-class-assign`, that will compile CS classes without assigning them to a variable, so the js version feels more natural in the way js classes are written. So to give an example:  \r\n```coffeescript\r\nclass A\r\n\r\nmyFn class B\r\n```\r\n`coffee --bare --no-header --compile --no-class-assign` will be compiled to\r\n```javascript\r\nclass A {};\r\n\r\nmyFn(class B {});\r\n```\r\nThe transpiled code feels more natural. \r\nAnd one case that this could be usefull is when you have an old angularjs application where you want to use **ng-annotate** plugin. \r\nThe way cs is transpiled this plugin does not work, because it could not handle this form `angular.module('app').service('MyService', MyService = class MyService {})`.\r\nThis was the case, why I created this feature.  \r\n",
    "head_branch": "new-no-class-assign-compile-option",
    "is_a_fork": true,
    "comments": [
      "I’m sorry, but we keep our CLI and Node API options very minimal; we especially don’t provide options that alter the output, as then you can’t know what the CoffeeScript source is intended to be just by reading it (you’ll need to know what flags it’s meant to compile with). `bare` is a bit of an exception here and it really should go away, it’s a legacy holdover.\r\n\r\nIt might be an option to simply change the compilation output to always output classes that don’t assign to a variable. If you can prove that this is a safe change (it doesn’t break CoffeeScript’s tests, for starters) it might be a change that we can make in the interest of compatibility with Angular.",
      "Closing as _this_ PR won’t be moving forward, but a new version following the suggestion in https://github.com/jashkenas/coffeescript/pull/5308#issuecomment-594245864 might be considered in the future."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfba23a21fa1e1f1a9d91",
    "number": 5306,
    "body": "This is almost Perl's -n argument: it only reads STDIN, and does not do\r\nthe magic filehandle `<>` trick of taking filenames from arguments.\r\n\r\nI originally was going to write a shell script to do this, but so much of the other `coffee` arguments were useful (in particular, `-r`) that it made more sense to integrate it. I figure if CoffeeScript can borrow Perl's `/x` regex flag, then maybe it can borrow one more little thing. :-)\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Have a few small things to address, will remove wip: shortly.",
      "We try to keep the compiler's options to a minimum. Why should this be a feature of `coffee`, when there are [many existing ways](https://stackoverflow.com/questions/13939038/how-do-you-run-a-command-for-each-line-of-a-file) to run `coffee` for each line of a file?",
      "> We try to keep the compiler's options to a minimum. Why should this be a feature of coffee, when there are many existing ways to run coffee for each line of a file?\r\n\r\ntl;dr nevermind this PR\r\n\r\nMostly because I didn't want to worry about the script that would wrangle all of:\r\n\r\n- `readline.createInterface`\r\n- preserve `coffee -r ...` behavior\r\n- preserve `coffee -e ...f` and `coffee FILENAME`\r\n\r\n...all of which is what `perl -n` offers.\r\n\r\nHOWEVER, while I was flailing for justification and actually timing these changes: I'm tempted to just shut up and pretend this PR never happened. Holy shit, it's slow as hell processing each line this way....maybe calling `vm.runInContext` for each line is what's murdering performance, but yikes. The whole reason I was using this `-S` option was to use NPM modules to parse streaming logs, so performance wasn't an issue due to the logs being slow.\r\n\r\nThanks for looking anyway.\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfba33a21fa1e1f1a9d92",
    "number": 5304,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttps://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a\r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by\r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in\r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in\r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](https://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\nupdate the coffeescript.js file so it is easier to read the input errors",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "I'm sorry what is this change?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfba43a21fa1e1f1a9d93",
    "number": 5298,
    "body": "This PR changes the `cake test:browser` command to run a local version of the browser-based tests (https://coffeescript.org/test.html) in a headless Chrome browser. The previous `test:browser` behavior is moved to `test:browser:node`.\r\n\r\nI was previously doing this manually as part of every release, but that’s both error-prone and problematic when we _do_ discover issues, as happened in #5284. Since this can now run as part of CI, we should know at the time of PR (rather than release) whether a new PR breaks the browser compiler or browser tests.\r\n\r\nThere’s one other benefit: This tests the ES module version of the browser compiler, which the previous Node-based test did not. Previously we had no automated test coverage of the ES module version of our compiler.\r\n\r\nAs part of this PR, I moved our CI testing to use GitHub Actions instead of Travis and AppVeyor, because I needed to vary the commands for Node 6 and Node 8 and that didn't seem possible in Travis and seemed complicated in AppVeyor. Now CI is all in one place, and we have the additional benefit of testing not just Linux and Windows but Mac as well.",
    "head_branch": "test-browser-headless",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Run browser tests in headless Chrome; replace Travis and AppVeyor with GitHub Actions (#5298)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfba53a21fa1e1f1a9d94",
    "number": 5297,
    "body": "https://rawgit.com/geoffreybooth/coffeescript/v2.5.1/docs/v2/index.html#2.5.1\r\n\r\n*   Object splats can now include prototype shorthands, such as `a = {b::c...}`; and soaks, such as `a = {b?.c..., d?()...}`. (#5293)\r\n\r\n*   Bugfix for regression in 2.5.0 where compilation became much slower for files with Windows-style line endings. (#5294)\r\n\r\n*   Bugfix for an implicit object after a line continuation keyword like `or` inside a larger implicit object. (#5296)",
    "head_branch": "v2.5.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "2.5.1 (#5297)\n\n* Bump version to 2.5.1\r\n\r\n* Changelog for 2.5.1\r\n\r\n* Update output for 2.5.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfba63a21fa1e1f1a9d95",
    "number": 5296,
    "body": "Fixes #5292 \r\n\r\nThis PR updates `addImplicitBracesAndParens()` to correctly parse things like:\r\n```\r\nd: b or\r\n  b: 1\r\n```",
    "head_branch": "iss5292-nested-implicit-object-after-continuer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Handle implicit object as end of outer implicit object property value (#5296)\n\n* not continuing implicit object if after UNFINISHED\r\n\r\n* following property not working\r\n\r\n* handle following object properties\r\n\r\n* tests\r\n\r\n* indebt -> continuationLineAdditionalIndent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfba73a21fa1e1f1a9d96",
    "number": 5294,
    "body": "Fixes #5290 \r\n\r\nAs discussed in that issue, performance for files with lots of \"location data compensations\" (eg stripped carriage returns, so all files on Windows) was blowing up because the algorithm used for calculating location data compensation was very inefficient\r\n\r\nSo this PR improves that algorithm to one that shouldn't have significant performance implications\r\n\r\nTo test, I made a copy of a decent-size source file eg `src/lexer.coffee` and converted it to have Windows-style line endings (`\\r\\n`), and ran `bin/coffee -b -p [converted-filename.coffee]`\r\n\r\nBefore this fix, compilation was taking many seconds, and with this fix, it took less than a second\r\n\r\nI haven't done specific performance comparisons of a file with Windows line endings when you omit the location data compensation calculation entirely vs with this new algorithm, that might be interesting as a baseline",
    "head_branch": "iss5290-slow-location-data-compensation",
    "is_a_fork": true,
    "comments": [
      "So you don't need Windows to test this, just a file with Windows line endings. To make things a bit more painful, I created a copy of `nodes.coffee` with Windows endings:\r\n\r\n```bash\r\n ✦ time cat src/nodes.coffee | coffee --stdio --compile > /dev/null\r\ncat src/nodes.coffee  0.00s user 0.00s system 4% cpu 0.081 total\r\ncoffee --stdio --compile > /dev/null  2.21s user 0.17s system 158% cpu 1.500 total\r\n\r\n ✦ perl -p -e 's/\\n/\\r\\n/' < src/nodes.coffee > test.coffee # https://superuser.com/a/71509/138751\r\n\r\n ✦ time cat test.coffee | coffee --stdio --compile > /dev/null\r\ncat test.coffee  0.00s user 0.00s system 4% cpu 0.083 total\r\ncoffee --stdio --compile > /dev/null  248.14s user 1.87s system 102% cpu 4:04.77 total\r\n\r\n ✦ git checkout --track helixbass/iss5290-slow-location-data-compensation\r\nBranch 'iss5290-slow-location-data-compensation' set up to track remote branch 'iss5290-slow-location-data-compensation' from 'helixbass'.\r\nSwitched to a new branch 'iss5290-slow-location-data-compensation'\r\n\r\n ✦ time cat test.coffee | ./bin/coffee --stdio --compile > /dev/null\r\ncat test.coffee  0.00s user 0.00s system 2% cpu 0.127 total\r\n./bin/coffee --stdio --compile > /dev/null  2.21s user 0.17s system 149% cpu 1.585 total\r\n```\r\n\r\nSo in this test, compiling a version of `nodes.coffee` with Windows line endings dropped from _four minutes_ in 2.5.0 to 1.5 seconds using this branch, the same amount of time it took to compile the Unix line endings version. Seems like a success to me."
    ],
    "commit_messages": [
      "Improve performance of location data compensation (#5294)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfba83a21fa1e1f1a9d97",
    "number": 5293,
    "body": "Fixes #5291 \r\n\r\nThis PR expands the grammar for allowable object splats to include prototype shorthands (eg `a = {b::c...}`) and soaks (eg `a = {b?.c..., d?()...}`)",
    "head_branch": "iss5291-object-spread-grammar",
    "is_a_fork": true,
    "comments": [
      "Thanks, I’ll release 2.5.1 soon unless you have any more fixes incoming.",
      "@GeoffreyBooth I started working on a fix for #5292. If you don't mind holding off for a day or two let me see if I can get that working"
    ],
    "commit_messages": [
      "Allow soaks and prototype shorthands in object splats (#5293)\n\n* use normal Accessor grammar rule\r\n\r\n* allow soaked calls\r\n\r\n* test lhs spread"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfba93a21fa1e1f1a9d98",
    "number": 5287,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttps://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a\r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by\r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in\r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in\r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](https://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Fix typos (#5287)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbaa3a21fa1e1f1a9d99",
    "number": 5286,
    "body": "@GeoffreyBooth I ran into this when running the Prettier plugin against the Coffeescript codebase:\r\n\r\nThings like this (with linebreaks inside the destructured variable of a `for` loop) currently aren't parsing:\r\n```\r\nfor {\r\n  something,\r\n  somethingElse\r\n}, y in z\r\n  d\r\n```\r\n\r\nThe grammar is already set up to accept this, it was just an issue of extending the logic for tagging tokens as eg `FORIN`",
    "head_branch": "for-pattern-linebreak",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow linebreak/indent in destructured for variable (#5286)\n\n* allow linebreak/indent in for variable pattern\r\n\r\n* tests\r\n\r\n* <\r\n\r\n* condition"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbaa3a21fa1e1f1a9d9a",
    "number": 5285,
    "body": "@GeoffreyBooth this PR should fix the browser compiler issue you described in #5284\r\n\r\nThis was related to the workaround we used to avoid forking Jison, see [this comment](https://github.com/jashkenas/coffeescript/pull/5156#pullrequestreview-201353764) - interestingly, it looks like I even called out `OptFuncExist` (which was the culprit here) as violating the workaround but I didn't think it mattered... I didn't bother digging into why it in fact *did* matter when run in the browser compiler context, I just altered the `OptFuncExist` grammar rule to not violate the workaround\r\n\r\nI ran `bin/cake build:browser` locally and was able to successfully compile function calls via the Try section of `docs/v2/index.html`",
    "head_branch": "browser-compiler-call-parsing-error",
    "is_a_fork": true,
    "comments": [
      "It's been on my to-do list for a long time to add another `cake` task for running the browser tests in headless Chrome, now that that's possible. Then that can be part of our CI and these kinds of issues would be caught quickly, not at time of release. I'll try to prioritize that soon.\r\n\r\nThis particular error was due to all ES module code always running in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode). We're now generating two browser builds: modern and legacy. The modern build is loaded via `import` and is therefore in Module and Strict mode; whereas the legacy one is not. Per MDN:\r\n\r\n> Strict mode in ECMAScript 2015 forbids setting properties on primitive values. Without strict mode, setting properties is simply ignored (no-op), with strict mode, however, a `TypeError` is thrown.\r\n\r\nI think this is the explanation: setting `locationData` on `false` is a no-op in sloppy mode but a `TypeError` in strict mode. Another thing we should do is add `'use strict'` to the top of the compiler, so put the whole thing in strict mode, even in Node CommonJS. Then these types of errors would be thrown in our Node tests too. The compiler obviously works in strict mode, as the 2.4.1 modern browser compiler runs that way.\r\n\r\nOf course, we should also not be setting properties on primitives in the first place 😄 so this PR is a good fix.",
      "Makes sense, thanks for the explanation"
    ],
    "commit_messages": [
      "Merge pull request #5285 from helixbass/browser-compiler-call-parsing-error\n\nBrowser compiler call parsing fix"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbac3a21fa1e1f1a9d9b",
    "number": 5284,
    "body": "https://coffeescript.org/#2.5.0\r\n\r\nFrom the changelog:\r\n\r\n*   The compiler now supports a new `ast` option, available via `--ast` on the command line or `ast` via the Node API. This option outputs an “abstract syntax tree,” or a JSON-like representation of the input CoffeeScript source code. This AST follows [Babel’s spec](https://github.com/babel/babel/blob/master/packages/babel-parser/ast/spec.md) as closely as possible, for compatibility with tools that work with JavaScript source code. Two tools that use this new AST output are [`eslint-plugin-coffee`](https://github.com/helixbass/eslint-plugin-coffee), a plugin to lint CoffeeScript via [ESLint](https://eslint.org/); and [`prettier-plugin-coffeescript`](https://github.com/helixbass/prettier-plugin-coffeescript), a plugin to reformat CoffeeScript source code via [Prettier](https://prettier.io/). _The structure and properties of CoffeeScript’s AST are not final and may undergo breaking changes between CoffeeScript versions; please [open an issue](https://github.com/jashkenas/coffeescript/issues) if you are interested in creating new integrations._\r\n*   [Numeric separators](https://github.com/tc39/proposal-numeric-separator) are now supported in CoffeeScript, following the same syntax as JavaScript: `1_234_567`.\r\n*   [`BigInt` numbers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) are now supported in CoffeeScript, following the same syntax as JavaScript: `42n`.\r\n*   `'''` and `\"\"\"` strings are now output as more readable JavaScript template literals, or backtick (`` ` ``) strings, with actual newlines rather than `\\n` escape sequences.\r\n*   Classes can now contain computed properties, e.g. `[someVar]: ->` or `@[anotherVar]: ->`.\r\n*   JSX tags can now contain XML-style namespaces, e.g. `<image xlink:href=\"data:image/png\" />` or `<Something:Tag></Something:Tag>`.\r\n*   Bugfixes for comments after colons not appearing the output; reserved words mistakenly being disallowed as JSX attributes; indented leading elisions in multiline arrays; and invalid location data in source maps.\r\n\r\n\r\n___\r\n\r\n~~@helixbass There seems to be a bug in the browser compiler. See https://rawgit.com/geoffreybooth/coffeescript/v2.5.0/docs/v2/index.html#try:a(). Any function call, e.g. `a()`, throws the error `TypeError: Cannot create property 'locationData' on boolean 'false'` in Chrome (and presumably other browsers that support the modern browser build, that uses `import`/`export` and therefore is in strict mode). The modern browser build works in 2.4.1, so this broke sometime since then. I think we need to fix this before releasing 2.5.0.~~",
    "head_branch": "v2.5.0",
    "is_a_fork": true,
    "comments": [
      "Okay I think this looks good now, the browser-based tests pass for me now:\r\nhttps://rawgit.com/geoffreybooth/coffeescript/v2.5.0/docs/v2/test.html\r\n\r\n@helixbass or anyone else, any other notes?",
      "@GeoffreyBooth I have one more PR I'd like to get in if possible based on something I just ran into when running the Prettier plugin against the Coffeescript codebase\r\n\r\n(incoming shortly)",
      "> @GeoffreyBooth I have one more PR I'd like to get in if possible based on something I just ran into when running the Prettier plugin against the Coffeescript codebase\r\n> \r\n> (incoming shortly)\r\n\r\nOkay, anything else?",
      "Impressive work! :+1: "
    ],
    "commit_messages": [
      "2.5.0 (#5284)\n\n* 2.5.0 changelog\r\n\r\n* Update dependencies\r\n\r\n* Colors are expected to be globals by the new AST test helpers\r\n\r\n* Disable testing of deepStrictIncludeExpectedProperties in browsers for now\r\n\r\n* Update output of compiler only\r\n\r\n* Update browser compiler output\r\n\r\n* Update docs output\r\n\r\n* Document ast option\r\n\r\n* Update output\r\n\r\n* Fix and reenable deepStrict test for browser test suite\r\n\r\n* Update output"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbad3a21fa1e1f1a9d9c",
    "number": 5279,
    "body": "@GeoffreyBooth re-opening against `master`\r\n\r\nSee original PR: #5068 ",
    "head_branch": "allow-leading-logical-operators",
    "is_a_fork": true,
    "comments": [
      "This one is fine too, it just needs a rebase.",
      "I like this proposal, let me know if there is anything I can do to help.",
      "Hi guys, sorry I've been MIA on Coffeescript stuff, mostly been focusing on other things\r\n\r\nI merged `main` into this branch and see `bin/cake test` passing locally but CI appears to be failing on `git diff --exit-code`, is there a different set of local rebuilds I should be doing to get \"matching\" `lib/*.js` output (I was testing against and committed the output of `git checkout lib && bin/cake build:except-parser && bin/cake build:parser`)?\r\n\r\nAlso the details of this PR are a bit fuzzy but I'd tend to trust my past self 😜 ",
      "Run `cake release` to fully update everything.\r\n\r\nI put a note on the other version of this, is there a way to handle this without introducing a new rewriter pass? It feels like something that should be doable within the lexer."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbae3a21fa1e1f1a9d9d",
    "number": 5278,
    "body": "@GeoffreyBooth re-opening against `master`\r\n\r\nSee original PR: #5081 ",
    "head_branch": "linebreak-param-default",
    "is_a_fork": true,
    "comments": [
      "> This seems like a good idea to me; it matches the rule of Assign.\r\n> \r\n> (Hope you don’t mind the necro.)\r\n\r\nYes, it’s fine, do you mind rebasing against latest `main`?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbaf3a21fa1e1f1a9d9e",
    "number": 5277,
    "body": "@GeoffreyBooth re-opening against `master`\r\n\r\nSee original PR: #5264 ",
    "head_branch": "ast-js-compatible-line-numbers",
    "is_a_fork": true,
    "comments": [
      "Hey, are you still working on this? coffeescript really needs line numbers in stack traces fixed",
      "This should only affect line numbers in files which use irregular linebreak characters, so not sure if it's likely to address your issue\r\n\r\nCan you give an example though where it's currently incorrect?",
      "There's something here: #5129\r\nIt's sort of strange. I guess maybe no one but me is using the `coffee` binary but I honestly don't remember the last time I've worked on a project (and I work on a _lot_ of projects of all sizes on both Linux and Windows) that had correct stack traces.",
      "I don't doubt there's an issue, but to fix it we need a minimal reproducible case. If you could provide as small an example as possible where the line numbers are wrong, either for stack traces or source maps, that would give us what we need to fix the bug.",
      "Just to confirm on my side, line numbers are incorrect with `.coffee.md` extensions, it has been the case for ages."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbaf3a21fa1e1f1a9d9f",
    "number": 5276,
    "body": "Colons are apparently another token type that doesn't survive passing through the parser, so rescue any comments attached to colons. Fixes #5241. cc @Asc2011",
    "head_branch": "fix-comments-on-colons",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix comments after colons getting lost (#5276)\n\nFix comments after colons getting lost"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbb03a21fa1e1f1a9da0",
    "number": 5275,
    "body": "@helixbass what do you think of this minor refactor? We never override `astReturns`, so it doesn’t need to be its own method; and it seems more organized to me if that logic is in `ast`, which we also never override.\r\n\r\nI still wish we could move the `returns` field to be set as part of `astNode`, and maybe I’ll make an attempt at trying to get that to work, but short of that I think this PR feels like an improvement in organization.\r\n\r\nI also added some comments, please check that they’re correct. Is the returns thing because we need to wait for the children or the parents? Hopefully I got it right 😄",
    "head_branch": "ast-returns-refactor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "AST: Refactor marking nodes that return (#5275)\n\nAST: Refactor marking nodes that return"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbb23a21fa1e1f1a9da1",
    "number": 5274,
    "body": "@GeoffreyBooth per discussion in #5273, this PR updates `CoffeeScript.nodes()` to return the `Root` node class instance",
    "head_branch": "return-root-from-nodes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Return Root from nodes() (#5274)\n\n* return Root from nodes()\r\n\r\n* add children"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbb33a21fa1e1f1a9da2",
    "number": 5273,
    "body": "Merging `ast` into `master`. This shouldn't require review as all the code in `ast` has been reviewed before merging into that branch.\r\n\r\n@helixbass this look alright to you?",
    "head_branch": "ast",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "AST (#5273)\n\nAST"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbb43a21fa1e1f1a9da3",
    "number": 5272,
    "body": "@GeoffreyBooth PR with some AST-related updates for numeric separators/BigInt\r\n\r\nBased on `ast-update-from-master`, [here](https://github.com/GeoffreyBooth/coffeescript/compare/ast-update-from-master...helixbass:ast-numeric-separators-bigint) is just the diff against that branch",
    "head_branch": "ast-numeric-separators-bigint",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "AST: numeric separators, BigInt (#5272)\n\n* Revert to more complicated lexing of numbers, as the Number constructor can't handle BigInts or numbers with numeric separators\r\n\r\n* Add debugging information to error message test (#5239)\r\n\r\nOne of the test cases in test/error_messages.coffee fails intermittently\r\nin the Node.js ecosystem-testing tool CITGM. In an effort to help debug\r\nwhat's going on when this occurs, this adds more information to the\r\nAssertionError message in question.\r\n\r\n* Fix #5103: Add support for BigInt literals (#5104)\r\n\r\n* Fix #5103: Add support for BigInt literals\r\n\r\n* Fix typos found in testing\r\n\r\n* Support binary, octal and hex BigInt literals\r\n\r\n* Make decimal BigInt test consistent other bases\r\n\r\n* Correct test BigInt test names\r\n\r\n* Add Node versions to CI\r\n\r\n* Numeric literal separators (#5215)\r\n\r\n* implement numeric literal separators\r\n\r\n* add tests\r\n\r\n* Revert changes to package-lock.json\r\n\r\n* small regex adjustment\r\n\r\n* split tests\r\n\r\n* add comment\r\n\r\n* Add Node versions to CI\r\n\r\n* Fix #5103: Add support for BigInt literals (#5104)\r\n\r\n* Fix #5103: Add support for BigInt literals\r\n\r\n* Fix typos found in testing\r\n\r\n* Support binary, octal and hex BigInt literals\r\n\r\n* Make decimal BigInt test consistent other bases\r\n\r\n* Correct test BigInt test names\r\n\r\n* Add Node versions to CI\r\n\r\n* Update output\r\n\r\n* Fix style\r\n\r\n* support bigint literal with separators\r\n\r\n* un-disallow property access on number literal\r\n\r\n* Update output\r\n\r\n* Refactor numeric literal separator tests to be more like the rest of the tests\r\n\r\n* Add test for numeric property with underscore\r\n\r\nCo-authored-by: Geoffrey Booth <GeoffreyBooth@users.noreply.github.com>\r\nCo-authored-by: Robert de Forest <guitar.robot@gmail.com>\r\n\r\n* Update test style and output\r\n\r\n* numeric separator parsed value\r\n\r\n* BigInt AST; parseNumber()\r\n\r\nCo-authored-by: Geoffrey Booth <GeoffreyBooth@users.noreply.github.com>\r\nCo-authored-by: Rich Trott <rtrott@gmail.com>\r\nCo-authored-by: Robert de Forest <guitar.robot@gmail.com>\r\nCo-authored-by: square <Inve1951@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbb53a21fa1e1f1a9da4",
    "number": 5270,
    "body": "@helixbass This PR updates `ast` with the latest changes from `master`, please take a look. This includes #5269.\r\n\r\nOnce this is merged in I'll open a PR for `ast` into `master`.",
    "head_branch": "ast-update-from-master",
    "is_a_fork": true,
    "comments": [
      "@GeoffreyBooth ok I opened #5272 based on this branch with some numeric separator/BigInt AST-related stuff\r\n\r\nI could retarget that PR here if you'd rather merge it down here before merging this PR"
    ],
    "commit_messages": [
      "AST: Update with latest changes from master (#5270)\n\n* Fix #5213: Update Babel options to restore MINIFY=false (#5214)\r\n\r\n* CSX namespaced tags and attributes (#5218)\r\n\r\n* Support namespaces in attributes\r\n\r\n* Support namespaces in tag names\r\n\r\n* Support reserved words in CSX boolean properties (fix #5125)\r\n\r\n* Implement review comments\r\n\r\n* Build\r\n\r\n* Revert parser.js\r\n\r\n* Add debugging information to error message test (#5239)\r\n\r\nOne of the test cases in test/error_messages.coffee fails intermittently\r\nin the Node.js ecosystem-testing tool CITGM. In an effort to help debug\r\nwhat's going on when this occurs, this adds more information to the\r\nAssertionError message in question.\r\n\r\n* Fix #5103: Add support for BigInt literals (#5104)\r\n\r\n* Fix #5103: Add support for BigInt literals\r\n\r\n* Fix typos found in testing\r\n\r\n* Support binary, octal and hex BigInt literals\r\n\r\n* Make decimal BigInt test consistent other bases\r\n\r\n* Correct test BigInt test names\r\n\r\n* Add Node versions to CI\r\n\r\n* Numeric literal separators (#5215)\r\n\r\n* implement numeric literal separators\r\n\r\n* add tests\r\n\r\n* Revert changes to package-lock.json\r\n\r\n* small regex adjustment\r\n\r\n* split tests\r\n\r\n* add comment\r\n\r\n* Add Node versions to CI\r\n\r\n* Fix #5103: Add support for BigInt literals (#5104)\r\n\r\n* Fix #5103: Add support for BigInt literals\r\n\r\n* Fix typos found in testing\r\n\r\n* Support binary, octal and hex BigInt literals\r\n\r\n* Make decimal BigInt test consistent other bases\r\n\r\n* Correct test BigInt test names\r\n\r\n* Add Node versions to CI\r\n\r\n* Update output\r\n\r\n* Fix style\r\n\r\n* support bigint literal with separators\r\n\r\n* un-disallow property access on number literal\r\n\r\n* Update output\r\n\r\n* Refactor numeric literal separator tests to be more like the rest of the tests\r\n\r\n* Add test for numeric property with underscore\r\n\r\nCo-authored-by: Geoffrey Booth <GeoffreyBooth@users.noreply.github.com>\r\nCo-authored-by: Robert de Forest <guitar.robot@gmail.com>\r\n\r\nCo-authored-by: Erik Demaine <edemaine@mit.edu>\r\nCo-authored-by: Rich Trott <rtrott@gmail.com>\r\nCo-authored-by: Robert de Forest <guitar.robot@gmail.com>\r\nCo-authored-by: square <Inve1951@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbb53a21fa1e1f1a9da5",
    "number": 5269,
    "body": "@helixbass I merged `master` into `ast` locally and ran the tests, and a bunch were failing related to numbers, which isn’t surprising since the recent changes on `master` involve support for `BigInt` and numeric separators. Basically, I think we need to revert two simplifications you made to the lexer's `numberToken` method:\r\n\r\n1. We can’t use `Number.isFinite` to tell apart `Infinity` from other numbers. `BigInt`s are not finite, as they’re not numbers at all in JS; yet they’re still `NumericLiteral`s in our grammar.\r\n\r\n2. We can’t use the `Number()` constructor to parse numbers, as it doesn’t support numeric separators (`Number('123_456')` returns `NaN`, not the `123456` we want/expect). The previous more complicated logic of detecting the base and using `parseInt` or `parseFloat` works, however, so I brought that back.",
    "head_branch": "ast-fix-lexing-of-numbers",
    "is_a_fork": true,
    "comments": [
      "@GeoffreyBooth ok this looks good\r\n\r\nIt seems like if `Number()` can no longer be used for parsing numbers we should get rid of the places where it's used in `nodes.coffee` as well (and I guess replace them with the same number-parsing logic that this PR restores to `lexer.coffee`)?\r\n\r\nEg this doesn't compile to the expected output on `master`:\r\n```\r\n[10_000...10_001]\r\n```",
      "Just a heads up I'm working on ☝️as part of a PR to add some other AST-related support for BigInt/numeric separators",
      "> Just a heads up I'm working on ☝️\r\n\r\nOkay I'll merge this in first and can follow up with yours."
    ],
    "commit_messages": [
      "Revert to more complicated lexing of numbers, as the Number constructor can't handle BigInts or numbers with numeric separators (#5269)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbb63a21fa1e1f1a9da6",
    "number": 5268,
    "body": "This allows code passing the output on to other tools to correctly identify the `sourceType` of the output.\r\n\r\n---\r\n_This PR was started by: [git wf pr](https://github.com/groupon/git-workflow/releases/tag/v1.0.4)_",
    "head_branch": "feature/master/esm-compat",
    "is_a_fork": true,
    "comments": [
      "For background: I was wishing for this kind of API when working on examples for fetch hooks / service workers. It allows post-processing to be a bit smarter about how much (if any) wrapping the JS generated by the compiler needs (without having to add a 2nd layer of guessing).",
      "Hi @jkrems thanks for this!\r\n\r\nSo it seems like this PR adds a new config option to the [Node API](https://coffeescript.org/#nodejs-usage)? As you might've noticed, the options for CoffeeScript are kept very minimal. In general, adding a new option should have a strong justification; and it should be mirrored in the CLI too unless there's a reason why it wouldn't apply there. I'm not saying that `sourceType` doesn't meet that bar, but we should give it some consideration before adding it; and we should think about if there might be ways to set it automatically rather than adding it as another input option.\r\n\r\nAs part of the AST work we've been discussing how to handle `sourceType`, as it’s generally part of a Babel-compatible AST; for now we were thinking of just leaving it out, and having people add it after the CoffeeScript compiler does its work: https://github.com/jashkenas/coffeescript/pull/5137#issuecomment-443098531. My thought back then was that this could be the first pass, and once Node's behavior stabilized we could copy Node's algorithm (e.g. get package type). But I'm not sure about this; for now it can be something handled downstream by the plugins consuming the CoffeeScript AST, only by the plugins that need the field set.\r\n\r\nSo my first thought is, one thing we definitely _could_ do is include `sourceType` in the Node object output (i.e. the output you get from the Node API when requesting source maps or AST) when the source code contains `import` or `export`. That's an unambiguous signal for when we could include `sourceType: module`. But other than that case, we can't really safely include anything else. Would it be useful at all to have `sourceType` only be present when it's `module`?\r\n\r\nIf not, then we have to decide how to determine when `sourceType` should be `script`. We could follow Node's lead and look for a `package.json` `type` field; though in the absence of such a field I think I'd rather exclude `sourceType` rather than set it to `script`, as the lack of a `type` field isn't really meaningful in a project where source files are getting transpiled (since Babel could be transpiling ESM CoffeeScript into CommonJS JavaScript). Alternatively we could allow the user to set `sourceType` as an input option to the CoffeeScript compiler; but if the user is going to do that, how is that any better than something like:\r\n\r\n```coffee\r\noutput = CoffeeScript.compile src, {bare: true, sourceMap: true}\r\noutput.sourceType = 'module'\r\n```\r\n\r\n",
      "> My thought back then was that this could be the first pass, and once Node's behavior stabilized we could copy Node's algorithm (e.g. get package type). But I'm not sure about this; for now it can be something handled downstream by the plugins consuming the CoffeeScript AST, only by the plugins that need the field set.\r\n\r\nFrom my use of the Coffeescript API, using the file system to determine parse goal would've had unwanted side effects. E.g. I used to maintain a service that compiled code in-memory that didn't exist on disk and having CS check the disk for the filenames would've been incorrect (if it would've worked at all).\r\n\r\n> Alternatively we could allow the user to set sourceType as an input option to the CoffeeScript compiler; but if the user is going to do that, how is that any better than something like:\r\n\r\nIt's better because it allows - in the future - to make it explicit what the expected parse goal is. The same reason that babel/acorn/etc. all added the option instead of sticking with a \"guess from AST\" approach. :) E.g. it would be nice if CoffeeScript allowed `await` as a valid identifier in scripts. It's only supposed to be reserved in a module. Or if CoffeeScript failed when `import` is used outside of a module. Maybe for this PR it should only allow `unambiguous` since that's the closest to expressing what CoffeeScript supports today..?\r\n\r\n> So my first thought is, one thing we definitely could do is include sourceType in the Node object output (i.e. the output you get from the Node API when requesting source maps or AST) when the source code contains import or export. That's an unambiguous signal for when we could include sourceType: module. But other than that case, we can't really safely include anything else. Would it be useful at all to have sourceType only be present when it's module?\r\n\r\nThat would mean that it's impossible to tell apart if the returned code is a script or if something went wrong / the code was used with an older version of CoffeeScript. I definitely considered just adding the `sourceType` to the output and accepting the overhead of generating the source maps to get to the data. That may be a good enough intermediate outcome and leaves the door open for adding an input option in the future.",
      "I think I'm not fully understanding your use case, or what you're trying to achieve. So there seem to be two possibilities (at least) for providing `sourceType` as an input option:\r\n\r\n1. `sourceType` can be `script` or `module`\r\n2. `sourceType` can be `script` or `module` or `unambiguous`, following Babel, where `unambiguous` is `module` if `import`/`export` are present or `script` otherwise\r\n\r\nThe first version seems rather pointless; since the CoffeeScript compiler doesn't do anything with this information other than pass it along as part of the output, it seems like whatever tool you're building that calls/wraps the CoffeeScript compiler could just add the source type as part of its output.\r\n\r\nSo it seems like what you're asking for is the second version, correct? Which _could_ be achieved today via `bare: false` (or excluding `bare`) and looking to see if the wrapper is present, but that's hacky and clunky and brittle. Once the `ast` branch is merged in, which will probably happen any day now, you could also request the AST of your source code and search it for `import` or `export` statements, but that's also time consuming (and you could do the same today by parsing the output JS and searching _its_ AST, since it's the same syntax in both).\r\n\r\nSo I guess the question is, what's the argument for providing an option to detect `import`/`export` statements? I thought as a general trend we were trying to discourage that as a way of determining Script versus Module, as opposed to more explicit signals like `package.json` `type` or `.mjs` (in the JS world). Besides encouraging what some would argue is a bad habit, why should this be part of the CoffeeScript compiler, if the compiler itself isn't going to do anything with this information (or should it?).",
      "The CoffeeScript compiler isn't just used with files on disk. It's also used in-memory. And in those cases checking other files isn't really an option. I agree that right now making the `sourceType` configurable wouldn't be too valuable since nobody will make CoffeeScript actually check that it's emitting valid JavaScript. But I think there is value in CoffeeScript saying what it *thinks* it is emitting, e.g. by adding `sourceType` to the output. This means that the input `sourceType` is implied to always be `unambiguous` which seems to match the existing behavior around `bare`: CoffeeScript considers only code with top-level `import`/`export` statements ES modules and thus will force `bare` when they are present.\r\n\r\nE.g. the following is also clearly an ES module but CoffeeScript will generally *not* consider it ESM (as shown by the wrapper):\r\n\r\n```coffee\r\n# should be detected as ESM but isn't\r\nconsole.log import.meta\r\n```\r\n\r\n> Once the ast branch is merged in, which will probably happen any day now, you could also request the AST of your source code and search it for import or export statements\r\n\r\nWould it be possible to attach the `sourceType` to the AST? I think that would solve this use case for now.\r\n\r\n> I thought as a general trend we were trying to discourage that as a way of determining Script versus Module\r\n\r\nRight, but right now it's what CoffeeScript does. I would hope that eventually CoffeeScript would add proper checks for valid syntax and potentially even allow explicit `sourceType` configuration. E.g. allow `await` as an identifier in scripts. Error in scripts that contain `import.meta` but allow it to appear in modules. Allow top level await but only in modules. These features really would benefit from a clear split between the two JS dialects.\r\n\r\nFor the CLI, I could imagine that `sourceType` could be determined automatically from `package.json` etc. but I don't think that works for the node API.",
      "For additional context: I'm looking at building a service worker to compile coffeescript on the fly. Right now there's only one mime type for coffeescript. So that's the only information I have. I can't check other files realistically, I have only the mime type and the coffee source text.\r\n\r\nI can handle coffeescript returning non-module code if I know that it's non-module code so I can wrap it. So I need to have a clear way to communicate to coffeescript: \"I got this string, it has the coffeescript mime type, do your thing, and tell me if you'd consider your output to be a module or a script/non-module\". Alternatively I could also work with \"I can set `sourceType` to module and at least get a good error message for why it's not a module\".",
      "And what about when there's JSX in there? https://coffeescript.org/#jsx. That's _also_ valid in plain CoffeeScript source code.\r\n\r\nCoffeeScript just doesn't really exist absent its build chain. From the MIME type or file extension you don't know if it's CoffeeScript 1 or 2, for example, and there are some breaking changes between them: https://coffeescript.org/#breaking-changes. You certainly don't know if it's meant to be Script or Module, CommonJS or ESM, JSX or normal JS, etc.",
      "> CoffeeScript considers only code with top-level `import`/`export` statements ES modules and thus will force `bare` when they are present.\r\n\r\nThis isn't correct. CoffeeScript forces `bare` when `import` or `export` statements are present specifically because they need to be top-level, and by definition the wrapper would make them not top-level. That's it. CoffeeScript isn't using the syntax as an indicator for source type, and CoffeeScript doesn't behave any differently based on one source type or the other.\r\n\r\nAll the things you're describing about erroring on certain features in certain modes sound like errors that Babel could throw, and you _can_ pass options to the Babel that can be used as part of CoffeeScript's compilation: use the `transpile` option, and give it a Babel options object as its input. One of those options is `sourceType`.",
      "I'm thinking that we should close this for age.\r\n\r\n> For additional context: I’m looking at building a service worker to compile coffeescript on the fly. Right now there’s only one mime type for coffeescript. So that’s the only information I have. I can’t check other files realistically, I have only the mime type and the coffee source text.\r\n\r\nThis is an interesting use case, and I’m not sure what the best solution would be. My first reaction is that a `sourceType` field isn’t enough: traditional CoffeeScript could be any flavor of JavaScript, whether classic browser script or Node CommonJS, so you need more context than just script vs module or CommonJS vs module. If you’re still interested in building this, we can discuss your use case further to figure out the best solution.\r\n\r\nI assume this is/was more for demo purposes than anything else? Then perhaps just say up front that the service only support ESM JavaScript?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbb73a21fa1e1f1a9da7",
    "number": 5267,
    "body": "@GeoffreyBooth PR to mark interpolated strings as object/class method keys (eg `\"#{a}\": 1`) as `computed`\r\n\r\nLooking at some bugs I've seen applying the ESLint plugin to the Coffeescript codebase, it became clear that even though interpolated strings as keys may syntactically \"look\" more like normal string keys than typical computed keys (eg `[a]: 1`), they in fact should be conceptually treated as being \"computed\"",
    "head_branch": "ast-computed-key-interpolated-string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "AST: interpolated string is computed key (#5267)\n\n* interpolated string key is computed\r\n\r\n* lhs test"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbb83a21fa1e1f1a9da8",
    "number": 5266,
    "body": "@GeoffreyBooth PR to assign correct location data (including the `...`) to splat params\r\n\r\nBased on `ast-nested-nontrailing-splat-assignment`, [here](https://github.com/helixbass/copheescript/compare/ast-nested-nontrailing-splat-assignment...ast-splat-param-location-data) is just the diff against that branch",
    "head_branch": "ast-splat-param-location-data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "AST: splat param location data (#5266)\n\n* handle assignment to nested nontrailing splat\r\n\r\n* splat param location data"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbb93a21fa1e1f1a9da9",
    "number": 5265,
    "body": "@GeoffreyBooth I ran into one more complex case where something was still being flagged as unassignable during AST generation\r\n\r\nSpecifically, assignment to a nested nontrailing splat eg:\r\n```\r\n[u, [v, ...w, x]] = y\r\n```",
    "head_branch": "ast-nested-nontrailing-splat-assignment",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "handle assignment to nested nontrailing splat (#5265)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbba3a21fa1e1f1a9daa",
    "number": 5264,
    "body": "@GeoffreyBooth this is an interesting one I came across while running the ESLint plugin against the Coffeescript repo source code:\r\n\r\nIt was crashing running ESLint against `test/regex.coffee` because of the literal U+2028/U+2029 (Unicode linebreak) characters in that file\r\n\r\nLooking into it, it turns out our location data/line numbers aren't exactly JS-compatible - per eg [here](https://books.google.com/books?id=4RChxt67lvwC&pg=PA22&lpg=PA22&dq=javascript+unicode+2028+line+number&source=bl&ots=ti07EhOVm8&sig=ACfU3U0w1HIaXZyPpEtaiQzjfvK56gqylg&hl=en&sa=X&ved=2ahUKEwir5ae5hrvmAhWXbs0KHRraDNgQ6AEwB3oECAoQAQ#v=onepage&q=javascript%20unicode%202028%20line%20number&f=false), JS considers newline (`\\n`), carriage return (`\\r`), carriage return + newline (`\\r\\n`), U+2028 and U+2029 to be line terminators\r\n\r\nWhereas we strip carriage returns and then just consider newlines to be line terminators\r\n\r\nSo what was happening is that in a file with \"unusual\" line terminators according to JS (eg the U+2028 and U+2029 in `test/regex.coffee`), ESLint was doing the JS version of counting linebreaks and then getting confused when a certain line didn't have the number of columns reported by our location data\r\n\r\nSo thus far this PR swaps in the JS-compatible regex for detecting linebreaks in the obvious places. Which did get ESLint working against `test/regex.coffee`\r\n\r\nBut I'm probably inclined to not try and get this merged before initial release, as (a) it should only cause problems in files where someone's got \"fake linebreak\" characters floating around and (b) I think it's worth thinking through more fully\r\n\r\nFor one thing, I think that if someone had a `\\r` in their source code that wasn't \"attached\" to a following `\\n`, it'd need to be accounted for - since we strip out `\\r`'s, I think we'd need to go a step further than the `locationDataCompensations` (that we added into the lexer to get accurate location data despite things like `\\r`'s having been stripped out) and do something like additionally \"remember\" the source offsets of any \"unattached\" `\\r`'s and then take those into account when generating location data\r\n\r\nBut ultimately it seems like it'd be a good idea to be compatible with JS's definition of linebreaks in our location data?\r\n\r\nBased on `ast-splat-param-location-data`, [here](https://github.com/helixbass/copheescript/compare/ast-splat-param-location-data...ast-js-compatible-line-numbers) is just the diff against that branch",
    "head_branch": "ast-js-compatible-line-numbers",
    "is_a_fork": true,
    "comments": [
      "> But ultimately it seems like it'd be a good idea to be compatible with JS's definition of linebreaks in our location data?\r\n\r\nYes, I feel like this might fix a lot of the bugs we get reported about wrong line numbers in source maps and stack traces.",
      "Reopened as #5277 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbbb3a21fa1e1f1a9dab",
    "number": 5263,
    "body": "@GeoffreyBooth here's another issue that applying the ESLint plugin to the Coffeescript codebase surfaced:\r\n\r\nAssignment to a nontrailing splat (eg `[a..., b] = c`) was failing, so needed to extend the logic for the differences in what's \"assignable\" during AST generation vs compile-to-JS\r\n\r\nBased on `ast-fix-interpolated-regex-tokens`, [here](https://github.com/helixbass/copheescript/compare/ast-fix-interpolated-regex-tokens...ast-allow-assignment-to-nontrailing-splat) is just the diff against that branch",
    "head_branch": "ast-allow-assignment-to-nontrailing-splat",
    "is_a_fork": true,
    "comments": [
      "> Assignment to a nontrailing splat (eg `[a..., b] = c`) was failing\r\n\r\nWhat do you mean by it failing? An error was being thrown during AST generation for this input source code?",
      "> What do you mean by it failing? An error was being thrown during AST generation for this input source code?\r\n\r\nYes. This construct is considered \"unassignable\" (by `.isAssignable()`) since in JS you can't assign to a nontrailing splat like that. But during compile-to-JS it's already transformed this type of assignment (to valid JS) before it would flag it as unassignable\r\n\r\nI think the status here is that (a) we previously were ignoring *all* assignability checking during AST generation, so this wouldn't have been getting flagged. But then when getting expected errors to be thrown during AST generation, that got refined so that things like `[null] = b` would still get flagged.  So this PR \"re-unflags\" a specific case that should be allowable during AST generation and (b) we didn't have AST test coverage for this case so it wasn't obvious that there was a \"regression\" when we refined the assignability checking"
    ],
    "commit_messages": [
      "AST: allow assignment to nontrailing splat (#5263)\n\n* allow assignment to nontrailing splat\r\n\r\n* allow assignment to empty array\r\n\r\n* complex object splat\r\n\r\n* add explanatory comment"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbbc3a21fa1e1f1a9dac",
    "number": 5262,
    "body": "@GeoffreyBooth I turned on the ESLint plugin against the Coffeescript codebase (on a branch) and am using that to look for issues\r\n\r\nHere's one on the Coffeescript side:\r\n\r\nThe tokens for interpolated regexes needed to be cleaned up, this was causing rules like [`keyword-spacing`](https://eslint.org/docs/rules/keyword-spacing) to break\r\n\r\nBased on `ast-clean-up-tests`, [here](https://github.com/helixbass/copheescript/compare/ast-clean-up-tests...ast-fix-interpolated-regex-tokens) is just the diff against that branch",
    "head_branch": "ast-fix-interpolated-regex-tokens",
    "is_a_fork": true,
    "comments": [
      "✅ once conflicts resolved.",
      "@GeoffreyBooth ok rebased"
    ],
    "commit_messages": [
      "AST: fix interpolated regex tokens (#5262)\n\n* this property\r\n\r\n* clean up AST tests\r\n\r\n* updated grammar\r\n\r\n* export location data\r\n\r\n* export default class location data\r\n\r\n* fix interpolated regex tokens"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbbd3a21fa1e1f1a9dad",
    "number": 5261,
    "body": "@GeoffreyBooth per your suggestion, PR to go through AST tests and clean up remaining commented-out tests\r\n\r\nBased on `ast-test-compile-errors`, [here](https://github.com/helixbass/copheescript/compare/ast-test-compile-errors...ast-clean-up-tests) is just the diff against that branch",
    "head_branch": "ast-clean-up-tests",
    "is_a_fork": true,
    "comments": [
      "✅ once conflicts resolved.",
      "@GeoffreyBooth ok rebased"
    ],
    "commit_messages": [
      "AST: clean up AST tests (#5261)\n\n* this property\r\n\r\n* clean up AST tests\r\n\r\n* updated grammar\r\n\r\n* export location data\r\n\r\n* export default class location data"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbbe3a21fa1e1f1a9dae",
    "number": 5260,
    "body": "@GeoffreyBooth PR testing expected compile errors\r\n\r\n(so this PR updates tests of `throws()`/`doesNotThrow()` when compiling to also check during AST generation, building off of the previous PR which just updated `test/error_messages.coffee` to check for expected error messages during AST generation)\r\n\r\nBased on `ast-throw-expected-error-messages`, [here](https://github.com/helixbass/copheescript/compare/ast-throw-expected-error-messages...ast-test-compile-errors) is just the diff against that branch",
    "head_branch": "ast-test-compile-errors",
    "is_a_fork": true,
    "comments": [
      "@GeoffreyBooth rebased onto `ast`"
    ],
    "commit_messages": [
      "AST: test compile errors (#5260)\n\n* multiple splats error\r\n\r\n* delete operand; catch variable\r\n\r\n* disallow multiple splats\r\n\r\n* unassignable conditional\r\n\r\n* lone expansion param\r\n\r\n* class bodies pure statements/arguments\r\n\r\n* remove duplicate\r\n\r\n* getAndCheckSplatProps()\r\n\r\n* getAndCheckSplatsAndExpansions()\r\n\r\n* clean up disallowLoneExpansionAndMultipleSplats()"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbbf3a21fa1e1f1a9daf",
    "number": 5259,
    "body": "@GeoffreyBooth PR to throw (almost all) expected error messages during AST generation (in addition to during compile-to-JS)",
    "head_branch": "ast-throw-expected-error-messages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "AST: throw expected error messages (#5259)\n\n* working through error messages\r\n\r\n* import/export errors\r\n\r\n* param assignability\r\n\r\n* super\r\n\r\n* non-top-level import TODO comment"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbc03a21fa1e1f1a9db0",
    "number": 5258,
    "body": "@GeoffreyBooth I updated the Prettier plugin's Coffeescript dependency to the current `ast` branch and it surfaced a couple small things\r\n\r\nSo this PR addresses those and gets all tests passing again in the Prettier plugin",
    "head_branch": "ast-as-block",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "astAsBlockIfNeeded(); eachName checkAssignability (#5258)\n\n👍"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbc13a21fa1e1f1a9db1",
    "number": 5257,
    "body": "@GeoffreyBooth PR ensuring that a comment after a semicolon gets correctly included in the AST\r\n\r\nAs of this PR, there are only 2 failing tests in the ESLint plugin (out of 11,000+), neither of which I think are Coffeescript AST issues, so this should conclude reconciling the `ast` branch with the ESLint plugin (ie once this PR gets merged, I'll swap in the `ast` branch as the ESLint plugin's Coffeescript dependency)\r\n\r\nBased on `ast-generated-jsx-tokens`, [here](https://github.com/helixbass/copheescript/compare/ast-generated-jsx-tokens...ast-semicolon-comment) is just the diff against that branch",
    "head_branch": "ast-semicolon-comment",
    "is_a_fork": true,
    "comments": [
      "👍 when upstream PRs clear."
    ],
    "commit_messages": [
      "AST: comment after semicolon (#5257)\n\n* astNode()\r\n\r\n* no override ast()\r\n\r\n* add suggested comments\r\n\r\n* astInitialize()\r\n\r\n* astAddReturns()\r\n\r\n* separate step\r\n\r\n* recognize quoted constructor\r\n\r\n* add params to scope\r\n\r\n* object colon location data\r\n\r\n* mark generated JSX tokens\r\n\r\n* more generated tokens\r\n\r\n* preserve comment after semicolon\r\n\r\n* move comments\r\n\r\n* Add explanation for token seeming mismatch"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbc23a21fa1e1f1a9db2",
    "number": 5256,
    "body": "@GeoffreyBooth PR marking tokens as generated and other similar token-accuracy cleanups\r\n\r\nThis reduces the # of failing tests in the ESLint plugin from 300+ to 8. So we're making progress :+1:\r\n\r\nBased on `ast-object-colon-location-data`, [here](https://github.com/helixbass/copheescript/compare/ast-object-colon-location-data...ast-generated-jsx-tokens) is just the diff against that branch",
    "head_branch": "ast-generated-jsx-tokens",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "AST: token cleanups (#5256)\n\n* astNode()\r\n\r\n* no override ast()\r\n\r\n* add suggested comments\r\n\r\n* astInitialize()\r\n\r\n* astAddReturns()\r\n\r\n* separate step\r\n\r\n* recognize quoted constructor\r\n\r\n* add params to scope\r\n\r\n* object colon location data\r\n\r\n* mark generated JSX tokens\r\n\r\n* more generated tokens\r\n\r\n* Add explanation for token seeming mismatch"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbc33a21fa1e1f1a9db3",
    "number": 5255,
    "body": "@GeoffreyBooth here's the \"second PR\" for marking implicit returns in the AST\r\n\r\nIt includes the refactor to use `astNode()`\r\n\r\nBased on `support-marking-implicit-returns`, [here](https://github.com/helixbass/copheescript/compare/support-marking-implicit-returns...ast-mark-implicit-returns) is just the diff against that branch",
    "head_branch": "ast-mark-implicit-returns",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "AST: mark implicit returns (#5255)\n\n* astNode()\r\n\r\n* no override ast()\r\n\r\n* add suggested comments\r\n\r\n* astInitialize()\r\n\r\n* astAddReturns()\r\n\r\n* separate step"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbc43a21fa1e1f1a9db4",
    "number": 5254,
    "body": "@GeoffreyBooth here's the \"first PR\" for supporting marking implicit returns in the AST\r\n\r\nIt just includes the refactor to `makeReturn()` to accept a second `mark` argument (should match the version from your branch)\r\n\r\nThe next PR will include actually invoking the new `mark` functionality during AST generation",
    "head_branch": "support-marking-implicit-returns",
    "is_a_fork": true,
    "comments": [
      "Thanks, this looks great.\r\n\r\nAnother thought: is a node’s constructor called when `ast()` is called? Could we put the “AST initialization” code in there, if we wanted to? Presumably we would then need something similar to “mark” that would let us know that we’re in AST-generation mode rather than regular compile mode, but that could be something attached to `o`.",
      "> Another thought: is a node’s constructor called when `ast()` is called? Could we put the “AST initialization” code in there, if we wanted to? Presumably we would then need something similar to “mark” that would let us know that we’re in AST-generation mode rather than regular compile mode, but that could be something attached to `o`.\r\n\r\nI'm intrigued by this idea of leveraging constructors, but I'm not sure exactly what the pattern would be - the node class constructors get called at parsing time (ie by the grammar) but I don't think `o` exists/is exposed (yet) in that context?"
    ],
    "commit_messages": [
      "add mark argument to makeReturn (#5254)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbc53a21fa1e1f1a9db5",
    "number": 5253,
    "body": "@GeoffreyBooth PR ensuring the correct location data gets assigned to `:` tokens in object literals\r\n\r\nThis was causing tests to fail for ESLint rules like [`key-spacing`](https://eslint.org/docs/rules/key-spacing)\r\n\r\nBased on `ast-add-params-to-scope`, [here](https://github.com/helixbass/copheescript/compare/ast-add-params-to-scope...ast-object-colon-location-data) is just the diff against that branch",
    "head_branch": "ast-object-colon-location-data",
    "is_a_fork": true,
    "comments": [
      "Good catch! We could just make this a PR against `master`, there’s nothing AST-related in here.",
      "Given that `ast` will be landing soon in `master` and that I've been making these branches based one on the next in order to more easily have a single existing branch to temporarily use for testing the ESLint plugin, it's much simpler from my end to keep this targeted as-is"
    ],
    "commit_messages": [
      "AST: object colon location data (#5253)\n\n* astNode()\r\n\r\n* no override ast()\r\n\r\n* add suggested comments\r\n\r\n* astInitialize()\r\n\r\n* astAddReturns()\r\n\r\n* separate step\r\n\r\n* recognize quoted constructor\r\n\r\n* add params to scope\r\n\r\n* object colon location data"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbc63a21fa1e1f1a9db6",
    "number": 5252,
    "body": "@GeoffreyBooth PR ensuring that function params get declared on the scope during AST generation. Basically in order for `declaration` (#5247) to always be accurate, everything needs to get added to the scope\r\n\r\nBased on `ast-quoted-constructor`, [here](https://github.com/helixbass/copheescript/compare/ast-quoted-constructor...ast-add-params-to-scope) is just the diff against that branch",
    "head_branch": "ast-add-params-to-scope",
    "is_a_fork": true,
    "comments": [
      "👍 once the upstream PR merges in."
    ],
    "commit_messages": [
      "AST: add params to scope (#5252)\n\n* astNode()\r\n\r\n* no override ast()\r\n\r\n* add suggested comments\r\n\r\n* astInitialize()\r\n\r\n* astAddReturns()\r\n\r\n* separate step\r\n\r\n* recognize quoted constructor\r\n\r\n* add params to scope"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbc73a21fa1e1f1a9db7",
    "number": 5251,
    "body": "@GeoffreyBooth PR to correctly recognize a method named `\"constructor\"` (in quotes) as a constructor\r\n\r\nThis was causing a test for the ESLint rule [`no-useless-constructor`](https://eslint.org/docs/rules/no-useless-constructor) to fail\r\n\r\nBased on `ast-mark-implicit-returns`, [here](https://github.com/helixbass/copheescript/compare/ast-mark-implicit-returns...ast-quoted-constructor) is just the diff against that branch",
    "head_branch": "ast-quoted-constructor",
    "is_a_fork": true,
    "comments": [
      "This is fine once the other merges in."
    ],
    "commit_messages": [
      "AST: recognize quoted constructor (#5251)\n\n* astNode()\r\n\r\n* no override ast()\r\n\r\n* add suggested comments\r\n\r\n* astInitialize()\r\n\r\n* astAddReturns()\r\n\r\n* separate step\r\n\r\n* recognize quoted constructor"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbc83a21fa1e1f1a9db8",
    "number": 5250,
    "body": "@GeoffreyBooth PR exposing implicit returns in the AST\r\n\r\nThis enables ESLint rules like [`no-unused-expressions`](https://eslint.org/docs/rules/no-unused-expressions) to work since it allows distinguishing expressions that are implicitly returned as being \"used\"",
    "head_branch": "ast-returns",
    "is_a_fork": true,
    "comments": [
      "Can we please resolve this / https://github.com/helixbass/copheescript/pull/17 before we move on to further PRs? Ideally as a PR for returns and a separate PR for refactoring `ast` / `astNode` if that works for you?",
      "Sure I didn't get notified of your replies on https://github.com/helixbass/copheescript/pull/17 for some reason\r\n\r\nWill reply there to hash out how to proceed",
      "Closing in favor of #5254 + #5255 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbc93a21fa1e1f1a9db9",
    "number": 5249,
    "body": "@GeoffreyBooth PR making location data correct when \"stripped\" characters (BOM, carriage returns) are included in the source\r\n\r\nBased on `compound-assign-location-data`, [here](https://github.com/helixbass/copheescript/compare/compound-assign-location-data...location-data-compensations) is just the diff against that branch",
    "head_branch": "location-data-compensations",
    "is_a_fork": true,
    "comments": [
      "Whoa. This is heroic work. I’ve always wondered why we still seemed to have bugs in location data, maybe this explains it.\r\n\r\nPlease resolve the conflict then this looks good to merge.",
      "Ok rebased onto `ast` :+1:"
    ],
    "commit_messages": [
      "Location data: compensate for stripped characters (#5249)\n\n* location data compensations\r\n\r\n* previous lines compensation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbca3a21fa1e1f1a9dba",
    "number": 5248,
    "body": "@GeoffreyBooth this PR causes correct location data to be generated for \"compound assign\" (eg `or=`) tokens\r\n\r\nThis issue was surfaced by ESLint rules that inspect the location data of these tokens not behaving correctly against the `ast` branch eg [`space-infix-ops`](https://eslint.org/docs/rules/space-infix-ops)\r\n\r\nBased on `ast-declaration`, [here](https://github.com/helixbass/copheescript/compare/ast-declaration...compound-assign-location-data) is just the diff against that branch",
    "head_branch": "compound-assign-location-data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Compound assign location data (#5248)\n\n* Assign declaration\r\n\r\n* For\r\n\r\n* Class\r\n\r\n* import/export\r\n\r\n* params\r\n\r\n* Catch\r\n\r\n* compound assign location data"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbca3a21fa1e1f1a9dbb",
    "number": 5247,
    "body": "@GeoffreyBooth PR exposing whether variable references (ie `Identifier` AST nodes) represent a declaration of that variable or not\r\n\r\nThis represents one of the big chunks of reconciling with the ESLint plugin, since it enables the usage of variable declaration/scope-awareness-based ESLint rules like [`no-undef`](https://eslint.org/docs/rules/no-undef)/[`no-unused-vars`](https://eslint.org/docs/rules/no-unused-vars), which are probably the single most useful ESLint rules in practice\r\n\r\nBased on `ast-with-tokens`, [here](https://github.com/helixbass/copheescript/compare/ast-with-tokens...ast-declaration) is just the diff against that branch",
    "head_branch": "ast-declaration",
    "is_a_fork": true,
    "comments": [
      "> > I feel like this is something we should write down somewhere, like in a comment near the start of the AST code, as it’s a pretty fundamental thing to remember for anyone working on the AST code in the future (unless you think it’s obvious)\r\n> \r\n> Ya I think that's a good idea. It might make sense to try and include it as part of a more full-fledged \"guide to working on the AST\" that explains the internal API used by node classes etc\r\n> \r\n> We could probably also bake some of those assumptions into our AST testing helpers for some automated testing that we're not violating them (eg check that all child AST nodes have location data within the parent's location data, check that all sibling nodes have non-overlapping location data)\r\n\r\nDo you mind adding some of these to your AST to-do list? Maybe the place for the guide is the GitHub wiki pages, like [this one](https://github.com/jashkenas/coffeescript/wiki/%5BHowTo%5D-How-parsing-works)."
    ],
    "commit_messages": [
      "AST: declarations (#5247)\n\n* Assign declaration\r\n\r\n* For\r\n\r\n* Class\r\n\r\n* import/export\r\n\r\n* params\r\n\r\n* Catch"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbcb3a21fa1e1f1a9dbc",
    "number": 5246,
    "body": "@GeoffreyBooth here's a first PR reconciling the `ast` branch with the ESLint plugin\r\n\r\nThe ESLint custom parser needs access to the Coffeescript tokens in addition to the AST, so this PR optionally exposes the tokens when generating AST",
    "head_branch": "ast-with-tokens",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "AST: expose tokens (#5246)\n\n* respect withTokens option\r\n\r\n* attach tokens to ast"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbcc3a21fa1e1f1a9dbd",
    "number": 5245,
    "body": "@GeoffreyBooth I came across the fact that an empty source file was crashing AST generation while working on reconciling the ESLint plugin\r\n\r\nSo this PR handles AST generation for empty source files",
    "head_branch": "ast-empty",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "handle empty program AST (#5245)\n\nLooks good!"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbcd3a21fa1e1f1a9dbe",
    "number": 5242,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttps://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a\r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by\r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in\r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in\r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](https://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\n- Fixes #5164 \r\n- Remove error for capital E from lexer\r\n- Change tests to match",
    "head_branch": "issue-5164",
    "is_a_fork": true,
    "comments": [
      "The code looks fine, anyone have opinions on whether we should allow this change?",
      "My intuition/recollection is that \"E\" is more popular than \"e\" in scientific communities, so I'd lean toward allowing it.  To confirm my feeling, here's some evidence:\r\n* https://en.wikipedia.org/wiki/Scientific_notation#E-notation says \"`6.022E23` (or `6.022e23`)\", suggesting `E` is more common.\r\n* Various educational websites seem to use \"E\" exclusively: https://www.mathsisfun.com/numbers/scientific-notation.html, https://chortle.ccsu.edu/Java5/Notes/chap11/ch11_5.html, https://www.nyu.edu/pages/mathmol/textbook/scinot.html\r\n\r\nOf course, most other languages also support both `e` and `E` -- for example Python, though Python also supports `0O`, so maybe not the best example.",
      "JavaScript allows capital `E` these days: https://tc39.es/ecma262/multipage/ecmascript-language-lexical-grammar.html#prod-ExponentIndicator"
    ],
    "commit_messages": [
      "Issue 5164: Allow capital E in scientific notation (#5242)\n\n* Remove prohibition of capital E exponent signifier\r\n\r\n* Remove exponent error format test\r\n\r\n* Add test for lowercase 'e' in exponent notation\r\n\r\n* Update output\r\n\r\nCo-authored-by: Geoffrey Booth <webadmin@geoffreybooth.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbce3a21fa1e1f1a9dbf",
    "number": 5239,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttps://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a\r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by\r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in\r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in\r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](https://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\n\r\nOne of the test cases in test/error_messages.coffee fails intermittently\r\nin the Node.js ecosystem-testing tool CITGM. In an effort to help debug\r\nwhat's going on when this occurs, this adds more information to the\r\nAssertionError message in question.\r\n\r\nAn example of the types of failures we see is visible at https://ci.nodejs.org/job/citgm-smoker/2061/nodes=rhel72-s390x/testReport/junit/(root)/citgm/coffeescript_v2_4_1/, and reproduced here:\r\n\r\n```console\r\n> coffeescript@2.4.1 test /data/iojs/tmp/citgm_tmp/98b58812-8150-4dff-b4e1-778ad5b201ca/coffeescript\r\n > node ./bin/cake test\r\n [0;31mfailed 1 and passed 1282 tests in 10.06 seconds[0m[0m \r\n [0;31m  #3890: Error.prepareStackTrace doesn't throw an error if a compiled file is deleted[0m \r\n [0;31m  AssertionError [ERR_ASSERTION] [ERR_ASSERTION]: -1 != -1\r\n     at Function.<anonymous> (/data/iojs/tmp/citgm_tmp/98b58812-8150-4dff-b4e1-778ad5b201ca/coffeescript/test/error_messages.coffee:1:1)\r\n     at global.test (/data/iojs/tmp/citgm_tmp/98b58812-8150-4dff-b4e1-778ad5b201ca/coffeescript/Cakefile:555:21)\r\n     at Object.<anonymous> (/data/iojs/tmp/citgm_tmp/98b58812-8150-4dff-b4e1-778ad5b201ca/coffeescript/test/error_messages.coffee:1:1)\r\n     at Object.<anonymous> (/data/iojs/tmp/citgm_tmp/98b58812-8150-4dff-b4e1-778ad5b201ca/coffeescript/test/error_messages.coffee:1:1)\r\n     at Module._compile (internal/modules/cjs/loader.js:956:30)\r\n     at Object.CoffeeScript.run (/data/iojs/tmp/citgm_tmp/98b58812-8150-4dff-b4e1-778ad5b201ca/coffeescript/lib/coffeescript/index.js:67:23)\r\n     at runTests (/data/iojs/tmp/citgm_tmp/98b58812-8150-4dff-b4e1-778ad5b201ca/coffeescript/Cakefile:626:22)\r\n     at Object.action (/data/iojs/tmp/citgm_tmp/98b58812-8150-4dff-b4e1-778ad5b201ca/coffeescript/Cakefile:640:12)\r\n     at invoke (/data/iojs/tmp/citgm_tmp/98b58812-8150-4dff-b4e1-778ad5b201ca/coffeescript/lib/coffeescript/cake.js:57:26)\r\n     at Object.exports.run (/data/iojs/tmp/citgm_tmp/98b58812-8150-4dff-b4e1-778ad5b201ca/coffeescript/lib/coffeescript/cake.js:87:20)\r\n     at Object.<anonymous> (/data/iojs/tmp/citgm_tmp/98b58812-8150-4dff-b4e1-778ad5b201ca/coffeescript/bin/cake:22:42)\r\n     at Module._compile (internal/modules/cjs/loader.js:956:30)\r\n     at Object.Module._extensions..js (internal/modules/cjs/loader.js:973:10)\r\n     at Module.load (internal/modules/cjs/loader.js:812:32)\r\n     at Function.Module._load (internal/modules/cjs/loader.js:724:14)\r\n     at Function.Module.runMain (internal/modules/cjs/loader.js:1025:10)\r\n     at internal/main/run_main_module.js:17:11\r\n [0m \r\n   function() {\r\n       var error, filePath, throwsAnError;\r\n       // Adapted from https://github.com/atom/coffee-cash/blob/master/spec/coffee-cash-spec.coffee\r\n       filePath = path.join(os.tmpdir(), 'PrepareStackTraceTestFile.coffee');\r\n       fs.writeFileSync(filePath, \"module.exports = -> throw new Error('hello world')\");\r\n       throwsAnError = require(filePath);\r\n       fs.unlinkSync(filePath);\r\n       try {\r\n         throwsAnError();\r\n       } catch (error1) {\r\n         error = error1;\r\n       }\r\n       eq(error.message, 'hello world');\r\n       doesNotThrow(function() {\r\n         return error.stack;\r\n       });\r\n       return notEqual(error.stack.toString().indexOf(filePath), -1);\r\n     }\r\n Browserslist: caniuse-lite is outdated. Please run next command `npm update`\r\n npm ERR! Test failed.  See above for more details.\r\n```\r\n\r\nLooking at the test itself, I don't see anything that would definitely explain why it would fail on that particular line, but I have some ideas. Perhaps the path is being truncated in the stack trace. Perhaps there is some symlink resolution that happens unexpectedly resulting the paths differing slightly. Maybe there's an oddball character in the path somewhere that gets messed up along the way. Having the extra information here will help confirm or refute hypotheses like this.",
    "head_branch": "add-information-to-test-failures",
    "is_a_fork": true,
    "comments": [
      "Looks harmless enough to me 👍"
    ],
    "commit_messages": [
      "Add debugging information to error message test (#5239)\n\nOne of the test cases in test/error_messages.coffee fails intermittently\r\nin the Node.js ecosystem-testing tool CITGM. In an effort to help debug\r\nwhat's going on when this occurs, this adds more information to the\r\nAssertionError message in question."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbcf3a21fa1e1f1a9dc0",
    "number": 5237,
    "body": "This is more in line with the [spec](https://sourcemaps.info/spec.html) which says \"the generated code may include a line at the end of the source, with the following form: `//# sourceMappingURL=<url>`\" and \"there exists a `//# sourceURL` comment in the generated code\". It also looks better since the `sourceMappingURL` is very long. Also, add a trailing newline. This was motivated by mishoo/UglifyJS2#3441.",
    "head_branch": "move-sourcemapurl",
    "is_a_fork": true,
    "comments": [
      "I guess? Would this be a breaking change for anyone?",
      "Going on a limb here - it's been a few years - but wasn't there some I.E. bug if the last line contained some specific characters that could pose an issue? Maybe we don't need to care, to be fair...",
      "Is this good to merge?",
      "Any update on this?",
      "I don’t know what to do with this. I worry that it could break some people, like bundlers that expect the current output, and I don’t really see why the change is needed."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbd03a21fa1e1f1a9dc1",
    "number": 5234,
    "body": "@GeoffreyBooth PR for reconciling remaining failing tests in the Prettier plugin when swapping in the `ast` branch as its Coffeescript dependency\r\n\r\nBetween this PR and #5233, it looks like at that point the `ast` branch could successfully be used as the Coffeescript dependency for the Prettier plugin\r\n\r\nSo then next step will be to do the same thing for the ESLint plugin",
    "head_branch": "reconcile-prettier-plugin-2",
    "is_a_fork": true,
    "comments": [
      "Kind of amazing that this is the last(-ish) PR of the AST effort. I would’ve thought that `PassthroughLiteral`s would’ve been among the first things tackled 😄 "
    ],
    "commit_messages": [
      "Reconcile ast branch with Prettier plugin: part 2 (#5234)\n\n* pass level\r\n\r\n* assign always expression\r\n\r\n* escaped backticks in PassthroughLiteral\r\n\r\n* computed class properties"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbd13a21fa1e1f1a9dc2",
    "number": 5233,
    "body": "@GeoffreyBooth PR for additional comments-related AST support:\r\n- include/exclude comments in block location data based on indent\r\n- exclude heregex comments from top-level AST comments",
    "head_branch": "comment-indent",
    "is_a_fork": true,
    "comments": [
      "The latest commit looks great! Should I merge this or were you planning anything else?"
    ],
    "commit_messages": [
      "AST comments: include in blocks; heregex comments (#5233)\n\n* simple trailing comment\r\n\r\n* multiple trailing tests\r\n\r\n* fix rebase\r\n\r\n* leading comments\r\n\r\n* empty block\r\n\r\n* nested dedented comment\r\n\r\n* check preceding\r\n\r\n* trailing implicit call in condition\r\n\r\n* don't include heregex comments in AST\r\n\r\n* expose heregex comments in AST\r\n\r\n* heregex comment location data\r\n\r\n* don't use object spread"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbd23a21fa1e1f1a9dc3",
    "number": 5231,
    "body": "@GeoffreyBooth PR for AST for JSX namespaced names (tag names eg `<div:a />` or attribute names eg `<div a:b=\"c\" />`)",
    "head_branch": "jsx-namespaced-name-ast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "JSX namespaced name AST (#5231)\n\n* opening element\r\n\r\n* closing element"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbd33a21fa1e1f1a9dc4",
    "number": 5230,
    "body": "@GeoffreyBooth PR to merge fresh `master` (including #5218 namespaced JSX tags) into `ast`",
    "head_branch": "merge-master-into-ast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge master into ast (#5230)\n\n* Fix #5213: Update Babel options to restore MINIFY=false (#5214)\r\n\r\n* CSX namespaced tags and attributes (#5218)\r\n\r\n* Support namespaces in attributes\r\n\r\n* Support namespaces in tag names\r\n\r\n* Support reserved words in CSX boolean properties (fix #5125)\r\n\r\n* Implement review comments\r\n\r\n* Build\r\n\r\n* Revert parser.js"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbd43a21fa1e1f1a9dc5",
    "number": 5228,
    "body": "@GeoffreyBooth I started plugging in the current `ast` branch as the Coffeescript dependency for the Prettier plugin and seeing what breaks\r\n\r\nSo here's a PR with a number of small updates to AST generation:\r\n- making sure the root (`File`/`Program`) AST location data always starts with `0` (eg when there's a leading comment)\r\n- exporting the `IDENTIFIER` regex\r\n- generating a Babel-style `SequenceExpression` AST node for \"sequences\" eg `(a; b)`\r\n- generating a new `EmptyInterpolation` AST node type for empty interpolations eg `\"#{}\"`\r\n- adding a `hasIndentedBody` property to function AST nodes (eg `FunctionExpression`)\r\n\r\nWith these updates, it looks like most if not all of the remaining failing tests in the Prettier plugin (when using this branch as its Coffeescript dependency) are related to the parts of comments we haven't covered yet (eg looking at comment indentation to decide whether it's part of a block or not, heregex comments)\r\n\r\nAnd then there will similarly be updates based on plugging in `ast` as the Coffeescript dependency of the ESLint plugin and seeing what breaks",
    "head_branch": "reconcile-prettier-plugin",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Start reconciling ast branch with Prettier plugin (#5228)\n\n* export IDENTIFIER\r\n\r\n* leading comment + directive\r\n\r\n* function hasIndentedBody\r\n\r\n* missing o\r\n\r\n* Sequence\r\n\r\n* root location data with leading comment\r\n\r\n* empty interpolations\r\n\r\n* fixes from code review"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbd53a21fa1e1f1a9dc6",
    "number": 5226,
    "body": "@GeoffreyBooth PR for AST for `Super`/`SuperCall`",
    "head_branch": "super-ast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "super AST (#5226)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbd63a21fa1e1f1a9dc7",
    "number": 5225,
    "body": "@GeoffreyBooth PR for AST for chained comparisons (eg `a < b < c`)\r\n\r\nThis construct doesn't exist in JS so I came up with this AST structure (with a peek at Python's AST for chained comparisons):\r\n\r\n```\r\ntype: 'ChainedComparison'\r\noperators: [\r\n  '<'\r\n  '<'\r\n]\r\noperands: [\r\n  type: 'Identifier'\r\n  name: 'a'\r\n,\r\n  type: 'Identifier'\r\n  name: 'b'\r\n,\r\n  type: 'Identifier'\r\n  name: 'c'\r\n]\r\n```",
    "head_branch": "chained-comparison-ast",
    "is_a_fork": true,
    "comments": [
      "@GeoffreyBooth updated per your comment"
    ],
    "commit_messages": [
      "Chained comparison AST (#5225)\n\n* chained comparison AST\r\n\r\n* Explicit return\r\n\r\nCo-Authored-By: Geoffrey Booth <GeoffreyBooth@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbd73a21fa1e1f1a9dc8",
    "number": 5224,
    "body": "@GeoffreyBooth PR updating `Value`/`Call` AST to use Babel 7-style `OptionalMemberExpression`/`OptionalCallExpression` AST node types",
    "head_branch": "optional-soak-ast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "use OptionalMemberExpression/OptionalCallExpression (#5224)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbd83a21fa1e1f1a9dc9",
    "number": 5220,
    "body": "@GeoffreyBooth PR for basic AST for comments and for PassthroughLiteral nodes\r\n\r\nAs discussed, the initial target for comments AST is a single top-level `comments` array on the root `File` AST node (since that is what both Prettier and ESLint expect)\r\n\r\nPer our discussion, used a variation of the token-comment-dictionary technique to pass the list of all comments from the tokens -> node class tree",
    "head_branch": "comments-ast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Basic comments AST; PassthroughLiteral AST (#5220)\n\n* passing existing tests\r\n\r\n* comments ast\r\n\r\n* fixes from code review"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbd93a21fa1e1f1a9dca",
    "number": 5218,
    "body": "[The JSX spec](https://facebook.github.io/jsx/) allows XML-style namespaces (`namespace:name`) in both the tag names and attributes names.  Specifically:\r\n* `JSXAttributeName` can be either `JSXIdentifier` or `JSXNamespacedName` which is `JSXIdentifier : JSXIdentifier`.\r\n* `JSXElementName` can be `JSXIdentifier`, `JSXNamespacedName` (`JSXIdentifier : JSXIdentifier`), or `JSXMemberExpression` (two or more `JSXIdentifier` connected by `.`s).\r\n\r\nThis PR adds support for these features in CSX (passing them through to JSX). These features are supported by babel-plugin-transform-react-jsx via the [`throwIfNamespace: false` setting](https://babeljs.io/docs/en/next/babel-plugin-transform-react-jsx#throwifnamespace). (That site mentions that React doesn't support these namespaced names, but other systems like Preact do.)\r\n\r\nI chose to implement the rules with regular expressions so that at most only colon can appear in a `JSXNamespacedName`.  I also reimplemented the `.` rule so that `.`s cannot be mixed with `:` namespaces (as in the JSX spec), but also implementing rules like \"a name can't start with a `.`\" which wasn't previously checked.  If you prefer, I can just lump `:` in with the name regular expressions so that someone could use any combination of identifiers, `.`s, and `:`s.\r\n\r\nWhile I was touching the CSX code, I went ahead and fixed #5125 via a simple tweak to the check.  I can fork this off to a separate PR if you'd rather.",
    "head_branch": "csx-namespace",
    "is_a_fork": true,
    "comments": [
      "@helixbass Thanks for the review! I added a bunch of tests and refactored the regexes as you suggested. \r\n\r\nI'm vaguely aware that there's a major `ast` branch overhaul, but not how it affects the code. Let me know if you need any help with this PR in that context.",
      "@helixbass Oops, sorry about that! Fixed.",
      "Let me know if there's anything else that needs to be done for this to be merged.  (It's currently blocking [an issue in a project of mine](https://github.com/edemaine/svgtiler/issues/41), but it's not urgent.)",
      "@edemaine the only thing I see blocking merging is that you shouldn't have a diff committed for `lib/coffeescript/parser.js` (since you didn't modify the grammar in this PR)\r\n\r\nSo easiest is probably just to re-commit the version from `master` (eg `git checkout master lib/coffeescript/parser.js`)",
      "@helixbass I was holding off on merging this to not disrupt the AST work, are you okay with merging this in and then merging `master` into `ast` and resolving conflicts?",
      "@GeoffreyBooth sure, if you merge this I can open a PR for merging updated `master` into `ast`\r\n\r\nAnd then I can open a PR against `ast` adding AST support for namespaced tags\r\n\r\nThanks @edemaine!"
    ],
    "commit_messages": [
      "CSX namespaced tags and attributes (#5218)\n\n* Support namespaces in attributes\r\n\r\n* Support namespaces in tag names\r\n\r\n* Support reserved words in CSX boolean properties (fix #5125)\r\n\r\n* Implement review comments\r\n\r\n* Build\r\n\r\n* Revert parser.js"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbd93a21fa1e1f1a9dcb",
    "number": 5215,
    "body": "This PR adds support for [numeric literal separators](https://github.com/tc39/proposal-numeric-separator). This feature was previously discussed and dismissed in #632.\r\n\r\nIt has since reached Stage 3 and supporting runtimes have appeared with Chrome 75+ and latest electron beta (Chrome 76). It's gonna hit Node only with the next major release.\r\n\r\nThanks @Leftium for the heads up in #632.\r\n\r\n\r\n\r\n<br>\r\n\r\nI think the first block of tests should go into the existing `numbers.coffee` since it doesn't run any output. Let me know if that's desired.\r\n",
    "head_branch": "numeric-literal-separators",
    "is_a_fork": true,
    "comments": [
      "I was surprised that I can write `console.log(10_000);` in browser and in node js, but not in CoffeeScript.\r\nIt was like O_o\r\n\r\nThank you.",
      "@Inve1951 Do you have time to fix the CI failures so we can get this merged in? I’d like to cut a new release this week, and this would be nice to pair with the `BigInt` support we recently added.",
      "@GeoffreyBooth Unfortunately no. I‘m out of country without a work station till some time next week.\r\n\r\nIf someone else wants to tackle this: All that‘s left to do is to add the optional n to the regex and un-disallow property access in the tests (1._23).",
      "I did my best on the phone just now.\r\nIf it‘s not been done yet, then a test for the property access on numbers should be added to the AST tests.\r\n\r\nAfter a recompile for lexer.js this is ready to be merged.",
      "@Inve1951 I've updated your branch, and refactored the tests to be more like the rest of the tests in the codebase. Please take a look and let me know if you have any concerns, and if not, I think this is ready to merge.",
      "@GeoffreyBooth Commented on a cosmetic detail. Besides that I think we are a go. :thumbsup:"
    ],
    "commit_messages": [
      "Numeric literal separators (#5215)\n\n* implement numeric literal separators\r\n\r\n* add tests\r\n\r\n* Revert changes to package-lock.json\r\n\r\n* small regex adjustment\r\n\r\n* split tests\r\n\r\n* add comment\r\n\r\n* Add Node versions to CI\r\n\r\n* Fix #5103: Add support for BigInt literals (#5104)\r\n\r\n* Fix #5103: Add support for BigInt literals\r\n\r\n* Fix typos found in testing\r\n\r\n* Support binary, octal and hex BigInt literals\r\n\r\n* Make decimal BigInt test consistent other bases\r\n\r\n* Correct test BigInt test names\r\n\r\n* Add Node versions to CI\r\n\r\n* Update output\r\n\r\n* Fix style\r\n\r\n* support bigint literal with separators\r\n\r\n* un-disallow property access on number literal\r\n\r\n* Update output\r\n\r\n* Refactor numeric literal separator tests to be more like the rest of the tests\r\n\r\n* Add test for numeric property with underscore\r\n\r\nCo-authored-by: Geoffrey Booth <GeoffreyBooth@users.noreply.github.com>\r\nCo-authored-by: Robert de Forest <guitar.robot@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbda3a21fa1e1f1a9dcc",
    "number": 5214,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttps://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a\r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by\r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in\r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in\r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](https://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\n",
    "head_branch": "fix-minification",
    "is_a_fork": true,
    "comments": [
      "It's better, but still a little compacted:\r\n```bash\r\n[ajvincent@localhost coffeescript]$ head lib/coffeescript-browser-compiler-legacy/coffeescript.js \r\n```\r\n```javascript\r\n\r\n/**\r\n * CoffeeScript Compiler v2.4.1\r\n * https://coffeescript.org\r\n *\r\n * Copyright 2011-2019, Jeremy Ashkenas\r\n * Released under the MIT License\r\n */\r\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\r\n\r\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\r\n\r\n```",
      "Oh, but that appears to be an artifact of another library, not your changes:  looking closer, it is much more readable.  (Yes, it's also twice the size, but I asked for it, didn't I?)",
      "The first 50 lines or so are functions added by Babel during transpilation, and that one-line style is just how Babel writes them. If you scroll a bit deeper into the file, you’ll see it’s readable.",
      "OK, this is much better.  Thank you.  (Particularly for the rapid-fire turnaround!)"
    ],
    "commit_messages": [
      "Fix #5213: Update Babel options to restore MINIFY=false (#5214)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbdb3a21fa1e1f1a9dcd",
    "number": 5211,
    "body": "@GeoffreyBooth here's a PR to generate JS template literals when compiling heredocs\r\n\r\nThis is WIP in the sense that:\r\n1. A test is currently failing:\r\n  `test/strict.coffee` won't run in Node, failing with `SyntaxError: Octal escape sequences are not allowed in strict mode.`\r\n\r\n  I don't fully grasp what's going on here - it looks like the fact that eg `'''\\08'''` now compiles to `` `\\08` `` (instead of `'\\08'`) is causing it not to run. Does the presence of a template literal trigger strict mode in Node or something?\r\n\r\n  And it looks like we forbid octal escapes in strings but only involving the digits `0`-`7` (see `validateEscapes()` in the lexer)? So what exactly is `'\\08'`? A non-octal octal escape?\r\n\r\n  In ASTExplorer, the AST for `'\\08'` (using `babylon7` parser) contains `value: \"\\u00008\"`. So isn't that parsing it as a null escape (or whatever `\\0` is called) followed by the character `8`?\r\n\r\n2. I'm a little worried that there would be other obscure edge cases like this (that aren't covered by tests) that would make this a breaking change. So would appreciate your insight\r\n\r\nBut in general this is working\r\n\r\n> if it found any newlines it would output the string as a template literal with real newlines\r\n\r\nI'd also initially only generated template literal AST when the heredoc included a newline, but ended up always generating template literal AST for heredocs (regardless of whether there's a newline)\r\n\r\nI don't remember exactly what triggered me making that change for AST, but it ends up being simpler/more symmetrical to not distinguish the includes-newlines case. Eg otherwise it'd be a little weird (at least from an AST perspective) that if you just added a linebreak to an existing heredoc, its AST would change from a `StringLiteral` to a `TemplateLiteral`\r\n\r\nSo similarly here it's always generating a template literal for heredocs (regardless of whether it includes a newline or not)",
    "head_branch": "compile-heredocs-to-template-literals",
    "is_a_fork": true,
    "comments": [
      "cc @lydell as he’s very knowledgeable about this issue. @lydell, please see the initial comment. Any thoughts on those questions?",
      "Octal escapes are not allowed in template literals (TIL). See the end of the [Template Literal Lexical Components](https://tc39.github.io/ecma262/#sec-template-literal-lexical-components):\r\n\r\n> A conforming implementation must not use the extended definition of EscapeSequence described in [B.1.2](https://tc39.github.io/ecma262/#sec-additional-syntax-string-literals) when parsing a TemplateCharacter.\r\n\r\nAnd it is the mentioned extension that adds LegacyOctalEscapeSequence.\r\n\r\nSo we have to either throw errors for them, or compile `\\07` to `\\u00007`, for example.\r\n\r\n`\"\\08\" === \"\\0\" + \"8\"` in non-strict mode. I cannot find _why_ `\"\\08\"` seems to be treated this way in the spec. I also just learned that `\"\\08\"` is invalid in strict mode. So `validateEscapes` (which I wrote back in the day) is wrong.\r\n\r\nI think it's correct and practically safe to disallow `\\0` followed by another digit everywhere.\r\n\r\nI think it makes sense to always compile heredocs to template literals.\r\n\r\n",
      "This all looks great, thanks for a heroic effort @helixbass and for the expert assistance @lydell!\r\n\r\n@helixbass do you want to backport the non-AST stuff here to a new PR against `master`? This would be a nice enhancement to the regular compiler too.",
      "@GeoffreyBooth I think it'd be tricky to extract any meaningful part of this to target `master`, as it uses a lot of code/refactors from the `ast` branch eg `StringWithInterpolations::fromStringLiteral()`/`makeDelimitedLiteral()`\r\n\r\nWe're not that far off from landing `ast`!"
    ],
    "commit_messages": [
      "Compile heredocs to template literals (#5211)\n\n* compile heredocs to template literals\r\n\r\n* disallow pseudo-octal escapes\r\n\r\n* extend existing guard against continuations looking like octal escapes\r\n\r\n* convert trailing null escapes\r\n\r\n* nicer pattern for conditional heregex chunks\r\n\r\n* remove covered test"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbdc3a21fa1e1f1a9dce",
    "number": 5209,
    "body": "@GeoffreyBooth now that we've covered various types of blocks including class bodies, here's a PR for AST for directives (eg `'use strict'`)",
    "head_branch": "directive-ast",
    "is_a_fork": true,
    "comments": [
      "Thanks, looks good. Any thoughts on outputting heredocs as backticked template literals with real newlines, rather than as strings with `\\n`s? I think at some point we had discussed making that change as part of or after the AST effort, since as part of figuring out the `raw` value for `StringWithInterpolations` you’d have to fix the lexer and/or rewriter to preserve that newline vs. escaped newline information.",
      "> Any thoughts on outputting heredocs as backticked template literals with real newlines, rather than as strings with `\\n`s?\r\n\r\nYa that seems doable at this point, I'll take a closer look"
    ],
    "commit_messages": [
      "Directive AST (#5209)\n\n* directive AST\r\n\r\n* heredoc AST\r\n\r\n* updates from code review"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbdd3a21fa1e1f1a9dcf",
    "number": 5208,
    "body": "@GeoffreyBooth this covers the remaining class AST:\r\n\r\n- bound methods\r\n- computed properties/methods\r\n- executable bodies",
    "head_branch": "class-body-ast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Class AST: bound/computed properties, executable body (#5208)\n\n* executable class body aST\r\n\r\n* tests for bound/computed\r\n\r\n* remove\r\n\r\n* computed"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbde3a21fa1e1f1a9dd0",
    "number": 5206,
    "body": "Fixes #5204 \r\n\r\n@GeoffreyBooth this PR contains two things (both raised in #5204):\r\n\r\n1. Generate valid JS for (non-static) computed class properties eg\r\n```\r\nclass A\r\n  [b]: 3\r\n```\r\nI extracted this fix from #5205 to target it here against `master`\r\n\r\n2. Allow static computed class properties/methods eg\r\n```\r\nclass A\r\n  @[a]: 1\r\n  @[b]: ->\r\n```",
    "head_branch": "iss5204-computed-class-property",
    "is_a_fork": true,
    "comments": [
      "Thanks, this looks great. Seeing how complicated this got, I’m glad we split it off from the AST work."
    ],
    "commit_messages": [
      "Allow computed class properties (#5206)\n\n* fix broken JS output\r\n\r\n* static computed properties"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbdf3a21fa1e1f1a9dd1",
    "number": 5205,
    "body": "@GeoffreyBooth PR for class \"prototype property\" AST\r\n\r\nAs far as I'm aware, there's no corresponding proposed JS syntax/Babel AST for class properties that get attached to the prototype eg:\r\n```\r\n  class A\r\n    b: 3\r\n```\r\n\r\nSo this PR introduces a new node class/AST type `ClassPrototypeProperty` to represent these\r\n\r\nAlso contains a fix for #5204 (the invalid JS for computed class prototype properties, not my second comment in that issue). If you'd prefer I could extract the fix to a separate PR against `master`",
    "head_branch": "class-prototype-property-ast",
    "is_a_fork": true,
    "comments": [
      "This looks fine. One thing to consider is class fields: https://github.com/tc39/proposal-class-fields\r\n\r\nWhich are currently in Stage 3 but are already shipped in Chrome and Node 12, so we’ll probably need to support them soon.",
      "Extracted the fix for #5204 to a PR against `master` (#5206). So once that gets merged, if you merge `master` into `ast`, I can add AST tests here for static computed class properties as well\r\n\r\n> One thing to consider is class fields\r\n\r\nOk so my understanding is this:\r\n\r\n\"Class fields\" in JS eg\r\n```\r\nclass A {\r\n  x = 3\r\n}\r\n```\r\nrepresent properties set on new class *instances*, so basically correspond to the Coffeescript:\r\n```\r\nclass A\r\n  constructor: ->\r\n    @x = 3\r\n```\r\nI personally find the JS syntax weird, I guess I'm more accustomed to Python/Ruby/Coffeescript-style initialization of instances inside the constructor\r\n\r\nSo I'd assume we don't need to provide a syntax that compiles to JS class fields (since you can achieve the equivalent by initializing inside the constructor)?\r\n\r\nThen I'm also familiar with arrow function \"class fields\" (I don't know the actual JS nomenclature/proposals) eg\r\n```\r\nclass A {\r\n  b = () => 3\r\n}\r\n```\r\nAnd this seems to correspond to Coffeescript bound methods eg\r\n```\r\nclass A\r\n  b: => 3\r\n```\r\n\r\nBut then Coffeescript's \"prototype properties\" eg\r\n```\r\nclass A\r\n  b: 3\r\n```\r\nare a different thing that just get set once per class (on the prototype) rather than once per instance. If there's a JS proposal for this I haven't seen it, which is why I create a new (non-Babel) AST type `ClassPrototypeProperty` in this PR to represent them"
    ],
    "commit_messages": [
      "Class prototype property AST (#5205)\n\n* class prototype property AST\r\n\r\n* consistent naming\r\n\r\n* extract fix for #5204"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbe03a21fa1e1f1a9dd2",
    "number": 5202,
    "body": "Fixes #5201 \r\n\r\nEnables simple indented leading elisions eg:\r\n```\r\n[\r\n  ,\r\n  ,\r\n  a,\r\n  b\r\n]\r\n```",
    "head_branch": "iss5201-breaking-elision",
    "is_a_fork": true,
    "comments": [
      "Should this go on master?",
      "Up to you, I figured since no one asked for a fix that it was a bit less \"urgent\"?",
      "Yeah but since it's a general bug, not related to AST stuff, I thought it should go on master. That way we keep the AST branch and eventual PR as only the changes for outputting an AST.",
      "Ok retargeted to `master`"
    ],
    "commit_messages": [
      "Fix #5201: allow leading breaking elision (#5202)\n\n* allow simple breaking elision\r\n\r\n* add tests\r\n\r\n* use OptComma\r\n\r\n* more tests\r\n\r\n* trigger CI"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbe13a21fa1e1f1a9dd3",
    "number": 5200,
    "body": "@GeoffreyBooth I'd noted in #5121 that at least the cases where the `->` is immediately followed by `]` should be a simple fix\r\n\r\nAnd then ran into that case working on the Prettier plugin\r\n\r\nSo this is a one-line fix (extending the similar fix from #4588) for those cases (I'd leave #5121 open since there is another case there that this PR doesn't address)",
    "head_branch": "iss5121-array-literal-empty-function",
    "is_a_fork": true,
    "comments": [
      "Should this target `master`?",
      "Sure, retargeted to `master`"
    ],
    "commit_messages": [
      "parse array ending in empty function (#5200)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbe23a21fa1e1f1a9dd4",
    "number": 5199,
    "body": "@GeoffreyBooth PR for class static methods/static properties\r\n\r\nRemaining parts of class ASTs include bound/computed methods/properties and executable class bodies",
    "head_branch": "class-static-ast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Class AST: static methods/properties (#5199)\n\n@GeoffreyBooth PR for class static methods/static properties\r\n\r\nRemaining parts of class ASTs include bound/computed methods/properties and executable class bodies"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbe33a21fa1e1f1a9dd5",
    "number": 5197,
    "body": "@GeoffreyBooth I ran into a missing compilation level when generating AST for `ObjectProperty` (similar to eg #5184)\r\n\r\nSo this explicitly generates AST for the object property key/value at `LEVEL_LIST` (similar to `Assign`)",
    "head_branch": "object-property-ast-level",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "object property at LEVEL_LIST (#5197)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbe43a21fa1e1f1a9dd6",
    "number": 5195,
    "body": "Minor update:\r\n- Publishes the browser compilers (legacy and ES module) to NPM: #5186.\r\n- Fixes a test that was breaking CITGM: #5191.\r\n- Document that braces are required for object shorthand: #5133.",
    "head_branch": "release-2.4.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Release 2.4.1 (#5195)\n\n* Fix #5133: Document that braces are required for object shorthand.\r\n\r\n* Changelog for 2.4.1\r\n\r\n* Update output"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbe53a21fa1e1f1a9dd7",
    "number": 5194,
    "body": "@GeoffreyBooth first PR for class AST\r\n\r\nThis starts simple and just covers simple class/superclass name and simple methods (not static, not bound)",
    "head_branch": "class-ast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "basic class ast (#5194)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbe63a21fa1e1f1a9dd8",
    "number": 5193,
    "body": "Fixes #5168 \r\n\r\n@GeoffreyBooth I've come across this a couple more times working on the Prettier plugin, and it's an easy fix\r\n\r\nIn terms of Prettier, there are going to be times that it wants to line break on a property index. Eg it currently would format this:\r\n```\r\nx = a[if something then value else some(veryLong) + expressionHere(thatWillTriggerALineBreak)]\r\n```\r\nlike this:\r\n```\r\nx =\r\n  a[(\r\n    if something\r\n      value\r\n    else\r\n      some(veryLong) + expressionHere thatWillTriggerALineBreak\r\n  )]\r\n```\r\nBut the parens wrapping the index expression look weird/unnecessary\r\n\r\nSo this is a simple grammar-based solution for allowing indented property index expressions\r\n\r\nTo address your [comment](https://github.com/jashkenas/coffeescript/issues/5168#issuecomment-473406397) on the issue, there's a couple things:\r\n\r\n> There are so many bugs around implicit line continuation that it's one of the things that *does* often change between releases\r\n\r\nThis one has nothing to do with line continuations, this is just adding typical `INDENT`/`OUTDENT` grammar rules\r\n\r\n> I still feel like we should be using Prettier more for reformatting code style and less for keeping within a line length\r\n\r\nThe question of how/when to break lines in Prettier is certainly interesting. But there's no *avoiding* it when using Prettier - the line-breaking algorithm is really the core of what Prettier is/does. Basically, if you don't want a tool that will make some sort of opinionated decisions about when to break lines or not, Prettier is not the right tool for you\r\n\r\nBut independent of any Prettier-related considerations, I think it's easy to justify adding this. I could very realistically picture myself writing code like\r\n```\r\na = b[\r\n  if condition\r\n    'foo'\r\n  else\r\n    'bar'\r\n]\r\n```\r\nand being surprised/confused when it didn't compile",
    "head_branch": "iss5168-indented-index",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "allow indented property index (#5193)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbe73a21fa1e1f1a9dd9",
    "number": 5191,
    "body": "This change spawns `coffee` with a new PATH, but without removing all other environment variables.  This is useful for preserving environment needed by Node, for example, `LD_LIBRARY_PATH` on Unix.  In particular, fix #5179.",
    "head_branch": "env",
    "is_a_fork": true,
    "comments": [
      "Thank you! "
    ],
    "commit_messages": [
      "Preserve environment when calling coffee from test (#5191)\n\nThis change spawns `coffee` with a new path, but without removing all other\r\nenvironment variables.  This is useful for preserving environment needed by\r\nNode, for example, `LD_LIBRARY_PATH` on Unix.  In particular, fix #5179."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbe83a21fa1e1f1a9dda",
    "number": 5190,
    "body": "@GeoffreyBooth here's another case I realized wasn't being distinguished by the existing logic for JSX content:\r\n\r\nEven though it's unnecessary to do so, you could have a JSX element explicitly wrapped in a JSX expression (`{`/`}`). Eg typically you'd write\r\n```\r\n<a><b /></a>\r\n```\r\nbut you could write\r\n```\r\n<a>{<b />}</a>\r\n```\r\nand the AST should be different (the second should have a `JSXExpressionContainer` wrapping the nested `JSXElement`)\r\n\r\nThis PR covers that case",
    "head_branch": "jsx-element-as-expression-ast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "handle jsx element as expression (#5190)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbe93a21fa1e1f1a9ddb",
    "number": 5189,
    "body": "@GeoffreyBooth in merging the latest `ast` into my branch and updating the Prettier plugin to use that dependency, I found that the AST structure being generated for JSX empty expressions (`{}`) was incorrect\r\n\r\nInstead of a `JSXEmptyExpression` node *replacing* the typical `JSXExpressionContainer` node, it actually needs to be *nested inside* a `JSXExpressionContainer` node\r\n\r\nSo this PR updates the AST generated for JSX empty expressions to correctly match Babel AST",
    "head_branch": "jsx-empty-expression-ast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "JSX empty expression location data (#5189)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbea3a21fa1e1f1a9ddc",
    "number": 5188,
    "body": "@GeoffreyBooth PR to update all uses of \"CSX\" to use \"JSX\" instead",
    "head_branch": "csx-to-jsx",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "AST: \"CSX\" -> \"JSX\" (#5188)\n\n* updated grammar\r\n\r\n* restore JSXIdentifier::astType()"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbeb3a21fa1e1f1a9ddd",
    "number": 5187,
    "body": "@GeoffreyBooth PR for AST for JSX element content (text, JSX expressions, nested JSX elements)",
    "head_branch": "jsx-content-ast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "ast for jsx content (#5187)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbec3a21fa1e1f1a9dde",
    "number": 5186,
    "body": "Well, I just announced 2.4.0 with a fancy new ES module version of the browser compiler, but that new compiler didn’t get published to NPM because it’s not in the `package.json` `files` block. Oops.\r\n\r\nIt feels a little weird to publish a path into the `docs` folder, but it also feels wrong to have two copies of the browser compilers both checked into the repo. Thoughts? The version in `docs` needs to be there in order for the browser compiler to be used in the docs site.\r\n\r\nI’m going to wait a few days before publishing 2.4.1, to see if anyone reports any (other) bugs in 2.4.0.\r\n\r\ncc @jashkenas ",
    "head_branch": "publish-browser-compilers",
    "is_a_fork": true,
    "comments": [
      "Update: I put a copy of each browser compiler into the `lib` folder:\r\n\r\n```json\r\n  \"module\": \"./lib/coffeescript-browser-compiler-modern/coffeescript.js\",\r\n  \"browser\": \"./lib/coffeescript-browser-compiler-legacy/coffeescript.js\",\r\n```\r\n\r\nIs there a reason `browser` was previously ` \"./lib/coffeescript/browser\"`?\r\n\r\nAnd can someone please explain to me the `lib` folder? Am I wrong to add to it like the above?\r\n\r\ncc @jashkenas @lydell ",
      "Sorry, I have no idea.",
      "> It feels a little weird to publish a path into the `docs` folder, but it also feels wrong to have two copies of the browser compilers both checked into the repo. Thoughts? The version in `docs` needs to be there in order for the browser compiler to be used in the docs site.\r\n\r\nMy immediate hunch to address this would be to get rid of the \"docs\" folder, and just start publishing the GitHub Page directly from **master** (or from **gh-pages**). Then `index.html` goes in the project root, `docs` contains the rest of the documentation files, and you can use whatever you like from `lib`. \r\n\r\nAs a separate note — it feels a little wrong to have both the regular Node module and the compiled browser compiler be part of the same npm module, since they're duplicative of each other, and for any given use, you only need one of them, not both ... but I guess it’s alright, as long as the browser compiler isn't too huge.",
      "> it feels a little wrong to have both the regular Node module and the compiled browser compiler be part of the same npm module\r\n\r\nAgreed, but people use npm modules in differing ways these days, as you've seen with the PR about making this work with Webpack. It's becoming common for npm modules to support multiple targets (Node, build tools, ES modules, browsers, etc.) and file size of overall packages doesn't seem to be much of a concern.\r\n\r\nDid you see my last comment above about `lib`? Can you please explain that folder, and let me know if my proposal there is good?",
      "> Did you see my last comment above about `lib`? Can you please explain that folder, and let me know if my proposal there is good?\r\n\r\nYes, but I don't really understand what you mean ... `lib` is the compiled JavaScript of the original CoffeeScript `src`. But I think I'm misunderstanding the true question.",
      "> Yes, but I don’t really understand what you mean … `lib` is the compiled JavaScript of the original CoffeeScript `src`. But I think I’m misunderstanding the true question.\r\n\r\nOkay, so there’s no greater significance than that, it sounds like? I assume it’s fine for me to add additional subfolders under `lib`, so we would have e.g.:\r\n\r\n- `lib/coffeescript-browser-compiler-legacy/coffeescript.js`\r\n- `lib/coffeescript-browser-compiler-modern/coffeescript.js`\r\n- `lib/coffeescript/index.js` (and other files, the Node module as it exists today)\r\n- `lib/coffeescript-node-es-module/index.js` (and other files, the Node module in ES module form someday, [when Node supports ES modules](https://github.com/nodejs/modules))\r\n\r\nSo basically our `lib` folder is similar to the `dist` folder that many projects that use Babel have. We might want to consider `.gitignore`ing `lib`, and publishing it to NPM but not keeping it in GitHub."
    ],
    "commit_messages": [
      "Actually publish the browser compilers to NPM (#5186)\n\n* Actually publish the browser compilers to NPM\r\n\r\n* Transpile and minify modern browser compiler; add to lib/ folder; update docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbed3a21fa1e1f1a9ddf",
    "number": 5185,
    "body": "@GeoffreyBooth PR for `TaggedTemplateLiteral` AST",
    "head_branch": "tagged-template-literal-ast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Tagged template literal AST (#5185)\n\n* tagged template literal ast\r\n\r\n* add comment"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbee3a21fa1e1f1a9de0",
    "number": 5184,
    "body": "@GeoffreyBooth I ran into an inconsistency with the way `Index` ASTs were being generated while working on the Prettier plugin\r\n\r\nBasically, the \"compilation\" level needed to be explicitly set when generating AST corresponding to `Index` nodes",
    "head_branch": "index-ast-level",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Index at LEVEL_PAREN (#5184)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbef3a21fa1e1f1a9de1",
    "number": 5183,
    "body": "@GeoffreyBooth PR for simple regex/non-interpolated heregex",
    "head_branch": "regex-ast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "regex ast (#5183)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbf03a21fa1e1f1a9de2",
    "number": 5182,
    "body": "With `import()` added, I think we’re due for a new release. It feels odd to bump to 2.4.0 so soon, but a new feature isn’t a bugfix, so I think semver minor is what we’re supposed to do . . . we’ll probably do another semver minor bump soon when the AST stuff is finished, but c’est la vie. We won’t run out of numbers.\r\n\r\n[Changelog](https://raw.githack.com/GeoffreyBooth/coffeescript/release-2.4.0/docs/v2/index.html#changelog) for 2.4.0:\r\n\r\n*   Dynamic `import()` expressions are now supported. The parentheses are always required, to distinguish from `import` statements. Note that as of this writing, the JavaScript feature itself is still Stage 3; if it changes before being fully standardized, it may change in CoffeeScript too. Using `import()` before its upstream [ECMAScript proposal](https://github.com/tc39/proposal-dynamic-import) is finalized should be considered provisional, subject to breaking changes if the proposal changes or is rejected. We have also revised our [policy](https://coffeescript.org/#contributing) on Stage 3 ECMAScript features, to support them when the features are [shipped](https://caniuse.com/#feat=es6-module-dynamic-import) in significant runtimes such as major browsers or Node.js.\r\n\r\n*   There are now two browser versions of the CoffeeScript compiler: the traditional one that’s been published for years, and a new [ES module version](https://coffeescript.org/browser-compiler-modern/coffeescript.js) that can be used via `import`. If your browser supports it, it is in effect on [the docs](https://coffeescript.org/). A reference to the ES module browser compiler is in the `package.json` `\"module\"` field.\r\n\r\n*   The Node API now exposes the previously private `registerCompiled` method, to allow plugins that use the `coffeescript` package to take advantage of CoffeeScript’s internal caching.\r\n\r\n*   Bugfixes for commas in strings in block arrays, a reference to `@` not being maintained in a `do` block in a class, and function default parameters should no longer be wrapped by extraneous parentheses.\r\n\r\nPlus a few comment fixes and a fix for a deprecation in the REPL. Thanks to @adrian-gierakowski @rdeforest @brewingcode @helixbass @BridgeAR and @GeoffreyBooth.",
    "head_branch": "release-2.4.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Release 2.4.0 (#5182)\n\n* cake doc:site:watch should also watch the changelog files\r\n\r\n* Changelog for 2.4.0\r\n\r\n* 2.4.0 output"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbf13a21fa1e1f1a9de3",
    "number": 5181,
    "body": "@GeoffreyBooth PR for basic heregex AST",
    "head_branch": "heregex-ast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Heregex AST (#5181)\n\n* heregex ast\r\n\r\n* fix from code review"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbf13a21fa1e1f1a9de4",
    "number": 5180,
    "body": "@GeoffreyBooth PR for dynamic import AST",
    "head_branch": "dynamic-import-ast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "dynamic import AST (#5180)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbf23a21fa1e1f1a9de5",
    "number": 5178,
    "body": "The `rli` property is just a reference to itself. It still exists\r\nfor legacy reasons but it will likely be removed in a future major\r\nversion. This makes sure everything works as expected.\r\n\r\n<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttps://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a\r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by\r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in\r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in\r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](https://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\n",
    "head_branch": "fix-rli-deprecation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix repl.rli deprecation (#5178)\n\nThe `rli` property is just a reference to itself. It still exists\r\nfor legacy reasons but it will likely be removed in a future major\r\nversion. This makes sure everything works as expected."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbf33a21fa1e1f1a9de6",
    "number": 5177,
    "body": "I started writing the docs for dynamic import (#5169) and I wanted to include a runnable example. There aren’t too many ES module scripts available for use out on the Web, and I wanted one where there wasn’t magic or rewriting going on like sometimes happens at Pika or unpkg, so I decided to create an alternate build of the CoffeeScript browser-based compiler that works as an ES module.\r\n\r\nSo now in the `package.json` there’s a `\"module\"` field that points to a version of the CoffeeScript compiler that uses an `export` statement to provide the browser compiler’s public API to anyone who wants to consume it in a browser `<script type=\"module\">` environment. When [support for ES modules comes to Node](https://github.com/nodejs/node/pull/26745), I’ll create an ES module build for use in Node as well.\r\n\r\nSee the new ES module CoffeeScript compiler in action:\r\n> https://coffeescript.org/#modules (in the Modules section, scroll down to the second example)\r\n\r\nBesides that, this PR includes docs for `import()` and an update to the [Contributing section](https://raw.githack.com/GeoffreyBooth/coffeescript/dynamic-import-docs/docs/v2/index.html#contributing) amending our policy on new features to allow Stage 3 features that have been released in major browsers and/or Node (with the caveat that they should be considered experimental until the features reach Stage 4).\r\n\r\ncc @helixbass @voxsoftware @jashkenas ",
    "head_branch": "dynamic-import-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "ES module version of compiler for use in browsers; dynamic import() docs; revised Stage 3 policy (#5177)\n\n* Build both a legacy and modern browser compiler\r\n\r\n* Dynamic import example and documentation\r\n\r\n* Update the docs to use the modern browser compiler if the browser supports it\r\n\r\n* Update policy regarding Stage 3 features\r\n\r\n* This never made sense, and assigning a string to index 0 *of a string* throws in Module mode (and silently does nothing in Script mode) so remove this unneeded code that throws when compiling `fn for i from from iterable` in Module mode\r\n\r\n* Have browser-based tests use the ES module version if supported\r\n\r\n* Simplify building logic\r\n\r\n* Update output\r\n\r\n* For the ES module version of the browser compiler, don't automatically attach the runScripts event handler\r\n\r\n* Consistent comments\r\n\r\n* Fix comment"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbf43a21fa1e1f1a9de7",
    "number": 5176,
    "body": "The current version of Webpack breaks with `cake test:integrations`. This gets the tests passing again.",
    "head_branch": "fix-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix tests (#5176)\n\n* Fix cake test:integrations per newer Webpack\r\n\r\n* Update dependencies\r\n\r\n* Update dependencies"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbf53a21fa1e1f1a9de8",
    "number": 5175,
    "body": "@GeoffreyBooth PR for basic interpolated strings (`\"\"\"` heredoc or `\"`-quoted)\r\n\r\nThere is a fair amount of location-data related fixing here (necessary for ending up with correct AST location data on the whole interpolated string and its sub-pieces)",
    "head_branch": "string-interpolation-ast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "String interpolation AST (#5175)\n\n* updated grammar\r\n\r\n* empty chunks\r\n\r\n* remove unused\r\n\r\n* remove unused\r\n\r\n* add comment"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbf63a21fa1e1f1a9de9",
    "number": 5173,
    "body": "@GeoffreyBooth PR for `For` AST",
    "head_branch": "for-ast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "For AST (#5173)\n\n* updated grammar\r\n\r\n* adding tests\r\n\r\n* location data tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbf73a21fa1e1f1a9dea",
    "number": 5172,
    "body": "@GeoffreyBooth here's another one I came across working on the Prettier plugin\r\n\r\nWe need to be able to distinguish `2e308` from `Infinity` when generating AST (both become `InfinityLiteral`s). So used the typical technique for passing the original value as token data through the grammar",
    "head_branch": "preserve-infinity-literal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "AST: Preserve infinity literal (#5172)\n\n* updated grammar\r\n\r\n* tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbf83a21fa1e1f1a9deb",
    "number": 5171,
    "body": "@GeoffreyBooth in merging the latest `ast` into my branch and updating to use that as the dependency for the Prettier plugin, I ran into failures based on what I'd consider to be an incorrect \"asymmetry\" in the AST being generated for `If`:\r\n\r\nAn `If` with simple consequent and `else` clauses that generates a `ConditionalExpression` (ie JS ternary) AST was treating the consequent as a simple expression but the `else` as a `BlockStatement`\r\n\r\nEg for this\r\n```\r\nf(if a then b else c)\r\n```\r\nthe generated AST looked like\r\n```\r\n...\r\ntype: 'ConditionalExpression'\r\nconsequent:\r\n  type: 'Identifier'\r\n  name: 'b'\r\nalternate:\r\n  type: 'BlockStatement'\r\n  body: [\r\n    type: 'ExpressionStatement'\r\n    expression:\r\n      type: 'Identifier'\r\n      name: 'c'\r\n  ]\r\n```\r\nBut it'd be preferable/more symmetrical for it to generate\r\n```\r\n...\r\ntype: 'ConditionalExpression'\r\nconsequent:\r\n  type: 'Identifier'\r\n  name: 'b'\r\nalternate:\r\n  type: 'Identifier'\r\n  name: 'c'\r\n```\r\nSo this PR updates the `If` AST generation logic accordingly",
    "head_branch": "ast-conditional-else-expression",
    "is_a_fork": true,
    "comments": [
      "@helixbass Updating my [previous comment](https://github.com/jashkenas/coffeescript/pull/5154#issuecomment-460088751), looking at the tests these are the remaining nodes that need to be done to finish the AST work:\r\n\r\n- StringLiteral\r\n- RegexLiteral\r\n- PassthroughLiteral\r\n- PropertyName\r\n- Value\r\n- SuperCall\r\n- Super\r\n- RegexWithInterpolations\r\n- TaggedTemplateCall\r\n- Extends\r\n- Class\r\n- ExecutableClassBody\r\n- Param\r\n- Parens\r\n- StringWithInterpolations\r\n- For\r\n\r\nMuch shorter than last time, but still a lot to go. How many of these are already done on your Prettier branch? You’ve pretty much got the pattern down so that I usually don’t have any notes, so if they’re already done on another branch we should just move them over 😄 ",
      "@GeoffreyBooth per that list of remaining types, we've effectively already covered `Parens`, `Param`, and `Value`/`PropertyName`. So after `For` (which I've started preparing a PR for) there's really only two big remaining \"groups\":\r\n- interpolated strings/regexen\r\n- classes\r\n\r\nThere's full coverage on my Prettier branch. But let's keep putting them up for individual review, it's a valuable exercise for me as far as taking another look at my first-pass implementations (from the perspective of some of the patterns we've landed on) and extracting out just the stuff that's relevant to AST generation (as opposed to some of the other stuff on that branch)\r\n\r\nWe should be able to move through them pretty quickly, I've just been in the busiest period of a project the last couple weeks. And I'll try and keep leaving comments pointing out some of the unique/debatable aspects of the implementation to minimize the ask on your time as a reviewer",
      "Sounds good and thanks. I really appreciate the explanatory comments, that makes reviewing these much easier. I'm eager to get to the finish line, we're so close!"
    ],
    "commit_messages": [
      "conditional else as simple expression (#5171)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbf93a21fa1e1f1a9dec",
    "number": 5170,
    "body": "@GeoffreyBooth as mentioned in https://github.com/jashkenas/coffeescript/pull/5169#discussion_r266192600, `new.target` should generate a `MetaProperty` AST node",
    "head_branch": "new-target-meta-property",
    "is_a_fork": true,
    "comments": [
      "Looks good. We should add support for `import.meta` to the main branch too, after `import()`."
    ],
    "commit_messages": [
      "MetaProperty AST (new.target) (#5170)\n\n* updated grammar\r\n\r\n* updated grammar\r\n\r\n* passing tests\r\n\r\n* test errors ast"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbfa3a21fa1e1f1a9ded",
    "number": 5169,
    "body": "Fixes #4834 \r\n\r\n@GeoffreyBooth I came across dynamic `import()` while working on the Prettier plugin and read #4834 \r\n\r\nThis PR adds support for dynamic `import()` (requiring explicit call parentheses per the apparent consensus in #4834, which I tend to agree with)\r\n\r\nIt mimics Babel's error message (\"import() requires exactly one argument\") when supplying less than or more than one argument\r\n\r\nIt looks like I should do a follow-on PR against `ast` since Babel appears to use `type: 'Import'` for dynamic import",
    "head_branch": "dynamic-import",
    "is_a_fork": true,
    "comments": [
      "Okay, so before we cut a new release we need to update the docs not just to describe `import()` but to also describe the new policy.\r\n\r\nIf we’re going to add provisional support for Stage 3 things, class fields could be next.",
      "@GeoffreyBooth This is a pull request years in the making. Thank you!",
      "when will be this released? ",
      "@GeoffreyBooth do you mind merging latest `master` into `ast`? Then I can open a PR for dynamic import AST",
      "@helixbass Done."
    ],
    "commit_messages": [
      "Dynamic import (#5169)\n\n* dynamic import\r\n\r\n* updated grammar\r\n\r\n* specify callable\r\n\r\n* DynamicImportCall\r\n\r\n* Fix from code review\r\n\r\nCo-Authored-By: helixbass <julian@helixbass.net>\r\n\r\n* recompile"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbfb3a21fa1e1f1a9dee",
    "number": 5167,
    "body": "Fixes #5128 \r\n\r\nThe problem appeared to me to be that functions params weren't being compiled at an explicit `level`, so in the example from #5128 the outer `LEVEL_OP` was \"bleeding through\" to the param's compilation level\r\n\r\nSo made params explicitly compile at `LEVEL_PAREN` (which seems correct)",
    "head_branch": "iss5128-default-param-parens",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Fix #5128: parens around default param (#5167)\n\n* compile params at LEVEL_PAREN\r\n\r\n* test"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbfc3a21fa1e1f1a9def",
    "number": 5162,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttps://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a\r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by\r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in\r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in\r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](https://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\n\r\n\"As of npm 5.0.0, installed modules are added as a dependency by default, so the --save option is no longer needed. The other save options still exist and are listed in the documentation for npm install.\"\r\n\r\nhttps://stackoverflow.com/a/19578808/142358",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "The .html files are mostly generated from the .md files, so you’d need to update there instead. See `cake doc:site`.\r\n\r\nAlso I consider the v1 docs basically archived at this point, so I don’t mind if they say `--save`; though the current docs would be good to update."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbfd3a21fa1e1f1a9df0",
    "number": 5161,
    "body": "@GeoffreyBooth PR for `While` AST (including `loop`/`until`)",
    "head_branch": "while-ast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "While AST (#5161)\n\n* updated grammar\r\n\r\n* tests\r\n\r\n* add tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbfe3a21fa1e1f1a9df1",
    "number": 5160,
    "body": "@GeoffreyBooth PR for If AST",
    "head_branch": "if-ast",
    "is_a_fork": true,
    "comments": [
      "You've knocked out some big ones lately, and quickly. How much more do you think there is?",
      "big thanks @helixbass & @GeoffreyBooth for this huge step ahead - ASTexplorer shows much more detail now.  I'm working on low hanging fruit alike CS.TaggedTemplateCall a.k.a. Babel.TaggedTemplateExpressions and friends. JSX-related-structures after that. \r\nHow about testing ? I've seen some ast-related test-cases. What do you think about using a JSON-schema to validate ASTs ? Sooner or later a documented schema would be a nice-to-have - i wonder why I can't find one for the babel-AST ?\r\ngreets Andreas",
      "@Asc2011 sure, just for some context about these AST PRs:\r\n\r\nI've already got a complete version of the target AST implemented on my [prettier](https://github.com/helixbass/copheescript/tree/prettier) branch, so these PRs are basically me pulling chunks of code off of that branch and then @GeoffreyBooth and I have been cleaning them up and reviewing them for eg consistency\r\n\r\nSo working on AST implementations for remaining classes like `TaggedTemplateCall` is probably unnecessary/conflicting since there is already an existing implementation\r\n\r\nBut if you're looking to participate, I'd suggest this:\r\n- You're certainly more than welcome to follow along with and comment on the ongoing PRs as far as I'm concerned\r\n- There are possibly a couple tasks on our TODO that aren't already covered on my branch, eg looking to update to use `OptionalCallExpression`/`OptionalMemberExpression` to align with Babel 7 AST. These could be good candidates for you to work on if you're interested\r\n- The initial target consumers of this Coffeescript AST that I've been working on are a Prettier [plugin](https://github.com/helixbass/prettier-plugin-coffeescript) and ESLint custom parser [plugin](https://github.com/helixbass/eslint-plugin-coffee). I haven't documented either yet but if you're interested in contributing there are definitely tasks on both projects and I could help get you set up\r\n\r\n> How about testing ? I've seen some ast-related test-cases.\r\n\r\nYes, so far we've been adding tests validating AST structure and location data to `test/abstract_syntax_tree.coffee` and `test/abstract_syntax_tree_location_data.coffee`\r\n\r\n> Sooner or later a documented schema would be a nice-to-have\r\n\r\nYes, documentation is something we haven't discussed yet. I'd think that documenting the diff against Babel AST (and linking to its documentation) would be a minimal version\r\n\r\nI think it might be nice to have a guide to the codebase too, so that someone exploring/hacking on the Coffeescript codebase could understand at least the AST-related stuff",
      "> Sooner or later a documented schema would be a nice-to-have - i wonder why I can’t find one for the babel-AST ?\r\n\r\nThere’s this: https://github.com/babel/babel/blob/master/packages/babel-parser/ast/spec.md. I’ve generally been using astexplorer.net with `babylon7` selected.\r\n\r\n> I think it might be nice to have a guide to the codebase too, so that someone exploring/hacking on the Coffeescript codebase could understand at least the AST-related stuff\r\n\r\nFYI we have this: https://github.com/jashkenas/coffeescript/wiki/%5BHowTo%5D-How-parsing-works though obviously improvements are welcome 😄 and/or a new wiki page about the AST stuff.",
      "> I've already got a complete version of the target AST implemented on my [prettier] branch, \r\n\r\nwups, that went quick. How are the coffee-resque AST-Types e.g. `Existence` and `Range`. handled ? I'll take a look..\r\n\r\n> But if you're looking to participate, I'd suggest this:\r\n> \r\n> * You're certainly more than welcome to follow along with and comment on the ongoing PRs\r\nsure, I'll do that.\r\n> * The initial target consumers of this Coffeescript AST that I've been working on are a Prettier [plugin](https://github.com/helixbass/prettier-plugin-coffeescript) and ESLint custom parser [plugin](https://github.com/helixbass/eslint-plugin-coffee). I haven't documented either yet but if you're interested in contributing there are definitely tasks on both projects and I could help get you set up\r\n\r\ngreat, as Prettier is already part of ASTExplorer, that would be my starting-point/ -setup. \r\n\r\n> Yes, so far we've been adding tests validating AST structure and location data to \r\n> \r\n> Yes, documentation is something we haven't discussed yet. I'd think that documenting the diff against Babel AST (and linking to its documentation) would be a minimal version\r\n\r\n@GeoffreyBooth agreed to write smth. for the wiki. A JSON-schema that describes the overlap and differences between (Babel)-AST and a CS-AST will help interested contributors in the future. As a bonus, one can use it to validate stuff during dev. Looking at the CS-codebase I wondered if the current approach - staying with the cs-naming-conventions and then transform/rename nodes on export will hold. But let me first see and hopefully understand how things were done...  \r\nRegarding ASTExplorer, I did a local install and added a `ast2js`-section. It takes a JSON-AST (made by CS) and then (re-)generates JS-code using `babel-generate`. Thats really impressive :-). So in the (near-) future, CS will deliver a partially/entirely Babel-compatible AST to the pipeline. From here on transformation & code-generation follows. Sounds good to me - or did i get it wrong ?\r\n@GeoffreyBooth on my system, working on the codebase, esp. the code-generating parts, is slow. I remember a leaner codebase was/is on the wish-list. I shrinked my `nodes.coffee` down to 3500 loc - still enough to produce a AST. Is there any consensus/plan on how things could get a bit re-arranged ? This should be put in the wiki, too.",
      "> I wondered if the current approach - staying with the cs-naming-conventions and then transform/rename nodes on export will hold\r\n\r\nWe’ve definitely been thinking about streamlining the compiler once AST generation is done. `nodes.coffee` wouldn’t need two separate “output” methods, one for JS source and another for AST JSON. It could generate only the AST JSON, and then another step could convert that into JS source (either using our own code if we want to keep at zero dependencies, or using something like `babel-generate` or Prettier itself). But all that refactoring is a later phase, we wanted to focus on AST generation alone first.\r\n\r\nNot sure why it’s slow for you. The slow part of recompiling the compiler is the parser, which doesn’t need to happen unless you change `grammar.coffee` which is infrequent most of the time. I use https://github.com/GeoffreyBooth/coffeescript-gulp to watch the CoffeeScript repo for changes and recompile; it skips the parser unless it sees a change in `grammar.coffee`.",
      "> But all that refactoring is a later phase, we wanted to focus on AST generation alone first.\r\n\r\nic, so let's do this :-) i'm glad to fill a new wiki-page about the AST/Babel-tooling stuff. \r\n\r\n> Not sure why it’s slow for you. The slow part of recompiling the compiler is the parser, which doesn’t need to happen unless you change `grammar.coffee` which is infrequent most of the time.\r\n\r\nI did not touch the grammar. I guess it's Atom or smth. misconfigured on my end or mojave, I dunno.\r\n\r\nanyway, the AST-output from Julians CS-branch looks good, but seems to break the local ASTExplorer :-( \r\n@helixbass i could need some assistance here. I failed on integrating your `prettier`-branch with ast-explorer. I see a bunch of deps in `coffeescript/node_modules`. `graceful-fs` and `read-pkg` appear in the stack trace. I found `read-pkg`, `read-pkg-up`and `load-json-file` in different versions side-by-side ?\r\nI could not yet figure out which pkg requires those convenience-modules. Maybe you have a idea ?\r\nAny help appreciated.",
      "Personally I haven’t been piping the AST output into anything. I’ve just been having the compiler print it to the console and maybe format it there, e.g. `./bin/coffee --ast test.coffee | jq '.program.body'`, and then I visually compare that output against the output in astexplorer.net for the equivalent input JavaScript.",
      "@Asc2011 ya I'm not clear on how you're using ASTExplorer?\r\n\r\nThat `prettier` branch does contain various other stuff (including some dependencies) since that branch started off as an attempt to pipe transformed AST through Prettier to produce transformed JS. If you `npm install` with that branch checked out (I'd recommend checking out a separate copy in a different directory to avoid having to switch back and forth with eg the `ast` branch) are you still seeing dependency issues? If that's blocking you, I could try and take a quick pass at that branch to strip out the additional dependencies (which aren't needed for the AST generation code path)",
      "@helixbass i did a local install. It's a react-web-app, served by webpack. \r\nI bet its easier to keep your prettier-branch separated from ast-explorer and use the coffee-command via shell. I need the CS-master anyway to be able to compare generated AST-results.\r\nI could not find anything on `OptionalCallExpression`/`OptionalMemberExpression` ? It this already part of the Babel-AST. It is not yet in the spec-doc the Geoffrey mentioned ?",
      "@Asc2011 ya last I checked it didn't look like Babel had updated their docs to reflect `OptionalCallExpression`/`OptionalMemberExpression` yet. Basically it's how they represent \"soaking\" (eg `a?.b`) when using the corresponding \"optional chaining\" JS proposed syntax\r\n\r\nHere's a Babel issue that seemed to have a fair amount of information: https://github.com/babel/babel/issues/7256\r\n\r\nI haven't fully wrapped my head around it but one interesting aspect is that the usage of `OptionalMemberExpression`/`OptionalCallExpression` \"cascades\"\r\n\r\nFor example, look at the AST (with `babylon7` parser) for `a?.b.c` in ASTExplorer - notice how the outer member expression is also an `OptionalMemberExpression`, but with `optional: false`",
      "Also here's where we discussed it briefly in a previous AST PR: https://github.com/jashkenas/coffeescript/pull/5117#discussion_r223227117",
      "@helixbass hi again. I scanned the TCO39-proposals that will use soaking and `OptionalMemberExpression`/`OptionalCallExpression`-nodes. These proposals are at stage-1 and in recent discussions from january they somehow realized that anything `.?` or `??` will collide with the ternary-operator. That will gonna take some extra-time, I guess. \r\nI thought about how to handle the `PassthroughLiteral`. It seems, that` babel.traverse` expects a already valid Babel-AST. The `babel-types` are considered AFAIK private. So one cannot temporarily create a`PassThru`-Node, just to transform such a node via the babel-plugin into smth. that babel will finally accept.\r\nSo I remembered the `WithStatement` which Babel supports, but CoffeeScript never uses or creates. So why not (re-) use the `WithStatement` as a transport into babel and then write a transform-plugin that : \r\n\r\n- extracts the backtracked-string from the `WithStatement`-node\r\n- uses babel to compile that string and finally \r\n- insert the babel-generated node(s) back into the AST\r\n\r\nThe whole process is a bit a 'catch-22'-thing. As it's only required if somebody uses the `coffee --ast` option.\r\nIn case CS produces all the JS-code than the problem does not arise at all.\r\nAs an alternative, one could compile the backticked-strings right away and insert them into the CS-AST. That way, any syntax-errors inside the JS-parts would surface during CS ast-production. Somewhat asymmetric, since such errors would typically show up during the JS-transpilation or during run-time.\r\nBoth approaches would introduce a dependency towards babel..\r\nLastly, maybe one could simply put the backticked-js into a `StringLiteral`. A transform-plugin would then grab all` StringLiteral`-nodes, that have no context/are not assigned to anything. And replace those with what babel compiles.\r\nWhat do you think ? Asking the babel-guys if they can provide a node-type for that purpose seems pointless, since such would not add any purpose for them ?\r\n",
      "Another unused node-type is the`FunctionDeclaration` came to my mind. This one works in strict-mode. Whereas the `WithStatement` does not.\r\nAs a babel-dependency would only be required when `coffee --ast` is used and backticked-expressions are found. So all common tasks work as before. So if one is interested in working with the AST, then he might be willing to add babel as a dev-dependency, anyway. In that case, CS would not need to create `PassthroughLiterals`. Instead any backticked-js-code could be immeadiatly compiled during the first-run and out pops a valid Babel-AST ?\r\n",
      "We were planning on creating new node types for nodes that don’t exist in the Babel AST. This corresponds with how on some existing Babel AST node types, we’re adding custom properties (like whether an `if` is postfix (end of line) or not). The idea is for the CoffeeScript AST to be a superset of Babel’s, not to fit within it.",
      "@GeoffreyBooth well, fair enough - so then lets forget all my comments from above :-)  \r\nAm I right in believing, that it' s preferable if we could get away without having to rely on babel-tooling during cs-compilation ? As you said, having a babel-node that carries not-yet-transpiled code would solve that, too.\r\n",
      "> Am I right in believing, that it’ s preferable if we could get away without having to rely on babel-tooling during cs-compilation ?\r\n\r\nI’m not sure I understand. Currently the CoffeeScript compiler doesn’t rely on Babel unless you use the `transpile` option.\r\n\r\nThe CoffeeScript AST is just an output like the JavaScript source output. The obligation is on downstream tools receiving this AST to understand what to do with it. @helixbass has been working on plugins for Prettier and eslint to enable those tools to understand how to process the CoffeeScript AST. Since those tools already accept the Babel AST as input, the closer we are to that the simpler the plugin can be.",
      "Ya I haven't tried to process a CS AST with \"Babel itself\", just (as @GeoffreyBooth mentioned) with tools that know how to process a \"Babel-style\" AST\r\n\r\nSo that's interesting if in fact Babel can't handle ASTs with node types that are unknown to it, but I don't think it's within scope of our AST generation (or something that would have a big impact on our approach) for us to try and create a \"compatibility layer\" there. I wonder if eg Babel syntax plugins are able to introduce new node types (it seems like they'd have to be able to)?\r\n\r\n@Asc2011 as far as the `OptionalMemberExpression` stuff, do you mind linking to that TC39 discussion? Sounds interesting. But I don't think that should have any effect on our AST \"spec\", we'd just be aiming to generate equivalent AST as Babel 7 does when it sees \"soak\" operators",
      "Also it's been on our to do list for a long time to create a Babel plugin for CoffeeScript like how there's one for TypeScript. That might be a bit tricky since TypeScript is a superset of JavaScript and we're not, but I hope it's still possible. If the plugin can pass onto Babel JS source rather than an AST, creating such a plugin can happen now and not need to wait on this AST work.",
      "@GeoffreyBooth I think CS is technically a superset of JS via the backtick operator. 😄 But I'm no expert on what's needed for a Babel plugin, and whether this perspective helps.",
      "> I’m not sure I understand. Currently the CoffeeScript compiler doesn’t rely on Babel unless you use the `transpile` option.\r\n\r\nThank you, you got me right.  And now I've learned that it should stay that way. I was asking because @helixbass `copheescript-branch` for prettier makes use of `babylon` et al.  And I thought maybe there are  plans/ideas to integrate such tools directly. Might that be during cs->ast-generation or elsewhere. As a side-note [babel-plugin-macros](https://github.com/kentcdodds/babel-plugin-macros/blob/master/other/docs/author.md) looks quite interesting.\r\nSo what's next ? Writing a petition to create CoffeeScript-specific node-types ? I've read that on the babel-side that people might have concerns about that - but maybe that's just hearsay. ",
      "Before we petition Babel, I think we should see how far we can get without any changes on their side. If a plugin can be written that outputs JavaScript source, and Babel can accept that as input, that’s all we need to do.",
      "@helixbass regarding the mentioned tc39-proposal(s):\r\nstage-1 [optional-chaining](https://github.com/tc39/proposal-optional-chaining). Mind the comprehensive links in the references- & prior-art sections. The [dawning of the impossible](https://github.com/tc39/proposal-optional-chaining/issues/77) in this issue-discussion. This one started in 2017 and had a babel-transform-plugin, which I can't find. Maybe here in babels [experimental-section](\r\nhttps://babeljs.io/docs/en/plugins#experimental). Or ask [@rattralex](https://github.com/rattrayalex) he had been somehow involved ?\r\nstage-1 [nullish-coalescing](https://github.com/tc39/proposal-nullish-coalescing) is related to the above proposal. Both are driven by G. Isenberg - who has ~10 proposals in-the-works.\r\n\r\n@GeoffreyBooth making a [babel-syntax-plugin](https://medium.com/@jacobp100/adding-custom-syntax-to-babel-e1a1315c6a90) as a starting point. My current believe is that syntax-plugins are not open for public-usage. AFAIK same for the `babel-types`(ast-types). Such types are documented but I can't find information describing the process. Once you have defined a needed additional ast-type - thinking `PassthroughLiteral`. Maybe a simple PR to them ? I'll put more research into this... \r\nMind that in the [babel-handbook](https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#toc-babel-types) exists a section ['Converters' ](\r\nhttps://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#converters) marked as work-in-progress.\r\n\r\n> If a plugin can be written that outputs JavaScript source, and Babel can accept that as input\r\n\r\nSurely babel accepts any JS-code that CoffeeScript has generated. From here on - after babel has produced a ast - one can apply one..many `transformation-plugins`, maybe grouped into `presets`. Many prototyped tc39-proposals are among those `plugins` == [transformation-plugins](https://babeljs.io/docs/en/plugins).\r\nSo what you are saying is, lets just feed the JS-code into babel and go on ? Yeah, that requires no plugin at all ? Unless you want to transform the `PassthruLiteral` via a plugin. That is easily doable, but i failed upon babel, not accepting the cs-ast, complaining about that particular unknown node-type. Thats why I suggested to masquerade backticked-js-code inside a ast-node-type that babel already knows, likes and appreciates, maybe `FunctionDeclaration` cos' it has a body.\r\nBut being so close to feeding a ast into babel - lets forget about backticks for now - wouldn't that be more efficient and straight-forward ?",
      "> But being so close to feeding a ast into babel - lets forget about backticks for now - wouldn’t that be more efficient and straight-forward ?\r\n\r\nNo, because Babel won’t know how to handle our more exotic AST node types. It won’t know what to convert `foo?` into. That’s the job of the CoffeeScript compiler, or for a CoffeeScript plugin within Babel.\r\n\r\nThere’s a chance we could get Babel to include a CoffeeScript converter along the lines of their TypeScript one. According to [this](https://iamturns.com/typescript-babel/) the TypeScript converter simply removes all the type annotations before piping the revised source into Babel; a parallel CoffeeScript one could simply run the source through the CoffeeScript compiler before piping the output JS source into Babel. I would start there. If you could get that to work, we could submit it as a PR to Babel (assuming that converters aren’t supported via configuration the way plugins are).",
      "@GeoffreyBooth thx for the [good read](https://iamturns.com/typescript-babel/). I remain a [bit sceptic](https://stackoverflow.com/questions/37554298/writing-a-syntax-plugin-for-babel-6) about redoing what typescript/MS achieved. As you suggested, i started trying stuff we can do without help. So i defined a `PassthroughLiteral` like so (a) : \r\n```\r\ntypes = require 'babel-types'\r\n{ default: defineType, assertValueType } = require '.././node_modules/babel-types/lib/definitions'\r\n\r\ndefineType 'PassthroughLiteral', {\r\n  builder: ['value']\r\n  fields:\r\n    value:\r\n      validate: assertValueType 'string'\r\n  visitor: ['value']\r\n  aliases: ['JS']\r\n}\r\n```\r\nhopeing babel would allow to add a new ast-type temporarily to the `definitions` = <em>the set of all <b>legal</b> ast-types</em>. If that had worked, one could apply babels elegant transform-Api on the coffeescript-ast. But i could not make this work. \r\nI used `copheescript`'s ast-output. Sry for not being clear on this. CoffeeScripts more <em>exotic-node-types</em> `Existence`, `Range` are already renamed/reshaped into babel-types. Leaving the PassThru-node as the last to take care for :\r\n\r\n(b) one could straight-compile the JS contents of the PassThru-node in the `PassthroughLiteral::constructor`\r\n```\r\nbabelAst = babel.transformSync @originalValue, {\r\n  ast: on\r\n  sourceType: 'script'\r\n  plugins: babel.loadOptions().plugins\r\n}\r\n@astFragment = babelAst.ast.program.body\r\n```\r\nIn case it does not throw, then babel returns a ast-fragment to be merged later into the CoffeeScript-ast. That works nicely. Surely the location-info needed to be adjusted. I tried backticked-JS with transformations from '[pipeline-operator](https://github.com/tc39/proposal-pipeline-operator)' and 'class getter'-stuff. Works fine, but the location-info lost some accuracy due to the transforms and thus may require a bit more attention.`@babelAst.code` can provide the javascript-code.\r\n\r\n(c) temporarily <em>masquerade</em> the `PassthroughLiteral` inside a unused but legal babel-ast-type e.g.`FunctionDeclaration` prior to the transformation : \r\nDoing so one can present a [spec-compliant](https://github.com/babel/babylon/blob/master/ast/spec.md) ast-node to babel, which should be transformed via a self-crafted`babel-plugin`. I tested that positive. Thanks to the transformation-Api such can be done within 3-lines-of-code. I did so, but did not check the accuracy of the location-info. I assume that the babels' transformation-Api can take care of that, too. Actually one could 'tunnel' the remaining handful of <em>Exotics</em> via a `FunctionDeclaration`. E.g. putting CoffeeScripts ast-name into the Function-parameter or maybe the Fn-name. That Function-node-containment will be short-lived and transformed very soon, anyway.\r\nA handcrafted-transformation-plugin could be included and <b>properly setup</b> inside the CS-distribution. By (ab)-using the good-old `FunctionDeclaration`-node as a temporal-containment, one can be sure, that it won't be name-changed or dropped. That naturally happens with new node-types that are part of proposals < stage-4.\r\nI'd prefer the b + c -variants. Because one could do that right away. No tiny in-between-ast-layer that smbd. needs to take care of. It does not require another ast-/json-transformation-tool. Keeping that as-simple-as-possible.\r\nIf the bride's name is babel, then lets try to use that to-the-max. And powerful it is..\r\nLooking at the [tc39-proposals](https://github.com/tc39/proposals), my impression is that all the 'missing'-node-types for `Existence`, `Ranges`  etc. are all being worked on. So the song goes like <em>ti~ii~ii~me is on our side - yes it is.</em> :-) Just sit & wait and adjust type-names once they reach stage-4 to stay compliant.\r\nAnd using time to figure out if maybe babel can be used to make things easier for the CoffeeScript-codebase ? Or looking at more interesting proposals like [pattern-matching](https://github.com/tc39/proposal-pattern-matching). That said, the Elvis-operator is already here - proven & tested - so let's just wait for a proper ast-name to arrive, maybe someday in 2023. Or maybe finding a coffeefied-syntax for [this little stage-3 ugly](https://github.com/tc39/proposal-private-methods) ?\r\nYou might have noticed already, i'm looking at developer-experience. Shipping a babel-plugin that is crucial to the proper working of CoffeeScript, opens up the chance to misconfigure it. Once you use an array of plugins than the processing order becomes very important - saying - the CS-transform MUST be processed first. If one can handle that transformation internal, then the consumer/user/developer cannot screw it up. [babel-plugin-macro](https://github.com/kentcdodds/babel-plugin-macros/blob/master/other/docs/author.md) adresses that problem, but still one can get it wrong.\r\n",
      "@Asc2011 I would start a lot less ambitious if I were you. As I understand things, there’s a Babel TypeScript plugin/converter that intercepts the source code before anything else in Babel sees it, and it strips out all the type annotations. Then this revised source gets passed to Babel for Babel to do its thing with like any other JS source. That’s it. There’s no TypeScript AST getting generated, there’s no AST getting passed as input to Babel. Babel gets JS source, the same as if you had run the TypeScript file through the TypeScript compiler to generate a `.js` file and then sent that `.js` file as input to Babel.\r\n\r\nSo see if you can achieve the same but for CoffeeScript. It intercepts the source before any part of Babel sees it, runs it through the CoffeeScript compiler (loaded as a Node dependency) and then the resulting JavaScript source code (not AST) is sent onward into Babel. That’s it.\r\n\r\nOr looked at another way, see if you can achieve this “do something to the source before Babel ever sees it” with [Illiterate](https://github.com/billymoon/illiterate). That’s even more generic. If you can make that work, Babel would be able to process Literate JavaScript and Literate TypeScript and Literate JSX 😉 And you’d only have to replace the call to Illiterate with a call to CoffeeScript and then you have the CoffeeScript equivalent."
    ],
    "commit_messages": [
      "If AST (#5160)\n\n* updated grammar\r\n\r\n* updated grammar\r\n\r\n* tests\r\n\r\n* location data tests\r\n\r\n* fix from code review"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfbff3a21fa1e1f1a9df2",
    "number": 5159,
    "body": "An implementation of #5114.\r\n\r\nThe REPL now starts with a greeting:\r\n```\r\n$ bin/coffee\r\n\r\nCoffeeScript v2.3.2 REPL, running on NodeJS v11.9.0.\r\nPress Ctrl-V to enter and exit multi-line mode.\r\nEnter '.help' to see a list of repl commands.\r\n\r\ncoffee>\r\n```\r\nAnd the first time the user presses Ctrl-V they get a reminder to press it again to leave multi-line mode:\r\n```\r\ncoffee> console.log \"\"\"\r\n(Press Ctrl-V again to exit multi-line mode.)\r\n------> console.log \"\"\"\r\n.......   Hello world!\r\n....... \"\"\"\r\nHello world!\r\nundefined\r\n------>\r\n```\r\nIn the example above, the multi-line prompt after `undefined` demonstrates that the `coffee>` prompt was changed in-place the second time, just like the original behavior.\r\n\r\nI didn't add any tests since this is essentially a cosmetic change. I also only did enough testing to make sure it did what I expected on NodeJS versions 6 and 11.\r\n\r\nIs there a better place to put UI strings such as the greeting and hint? (I'm used to having them kept in non-code files elsewhere in projects, like `${PROJECT_ROOT}/data/messages`.)",
    "head_branch": "issue-5114",
    "is_a_fork": true,
    "comments": [
      "Just a preference — but I generally prefer no \"greeting\" on my command-line tools. If you use them regularly, it gets old incredibly fast.",
      "Reasonable. If someone wants to know more about the tool they can check `coffee -v`, `coffee -h` and `node -v`, and if they want a more verbose startup they can wrap or modify the tool themselves. I've amended the PR accordingly.",
      "The downside to removing the greeting is that it's pretty non-obvious that CTRL-V exists at all. (I learned of it only a few weeks ago, after years of CoffeeScript.)  Without some greeting, this doesn't fix #5114.  Would a shorter greeting be reasonable? Alternatively, we can look for a more documentation-based fix as suggested in [this comment](https://github.com/jashkenas/coffeescript/issues/5114#issuecomment-425969241).",
      "So what does this PR do now? Show a hint about Ctrl-V once the user already presses Ctrl-V, to tell them to repeat the key combination to turn off multiline mode? If someone already knows about Ctrl-V to enter multiline mode, wouldn’t they also know how to toggle it back off?",
      ">So what does this PR do now? Show a hint about Ctrl-V once the user already presses Ctrl-V, to tell them to repeat the key combination to turn off multiline mode?\r\n\r\nYes. First time they enter it each REPL session.\r\n\r\n>If someone already knows about Ctrl-V to enter multiline mode, wouldn’t they also know how to toggle it back off?\r\n\r\nCertainly shouldn't take more than a few seconds to figgure it out. At least that's how I remember it.\r\n\r\nBtw, this addition from line 5 is redundant: `process = require 'process'`",
      "Hello this is open since 2019 and all check have passed. Is there any specifics reasons to not merge it ?\r\n",
      "> Hello this is open since 2019 and all check have passed. Is there any specifics reasons to not merge it ?\r\n\r\nThere are some usability concerns raised on this thread that I don't think have yet been addressed.\r\n\r\nOne further one is, how does the regular Node REPL handle this and can we take the same approach?",
      "> how does the regular Node REPL handle this?\r\n\r\n```\r\n$ node\r\nWelcome to Node.js v14.13.1.\r\nType \".help\" for more information.\r\n> .help\r\n.break    Sometimes you get stuck, this gets you out\r\n.clear    Alias for .break\r\n.editor   Enter editor mode\r\n.exit     Exit the REPL\r\n.help     Print this help message\r\n.load     Load JS from a file into the REPL session\r\n.save     Save all evaluated commands in this REPL session to a file\r\n\r\nPress Ctrl+C to abort current expression, Ctrl+D to exit the REPL\r\n> .editor\r\n// Entering editor mode (Ctrl+D to finish, Ctrl+C to cancel)\r\n\r\n>\r\n```\r\n\r\nEven though I'm the author of this PR, I find the comments of @jashkenas and @GeoffreyBooth compelling and am in favor of keeping the REPL quiet. It is more in line with The Unix Way.",
      "> Even though I’m the author of this PR, I find the comments of @jashkenas and @GeoffreyBooth compelling and am in favor of keeping the REPL quiet.\r\n\r\nSo should we close this PR and the accompanying issue? We can always reopen if there’s a proposal for a UX that everyone’s happy with.",
      "Yes, and #5114.",
      "Just a 2 cents here, but wouldn't it be good to include these messages to ease newbie usage?  Having to google something esoteric three seconds after using it seems like a non-starter for a lot of people.  Python is a great example of tons of usage and still including the messages for their repl.",
      "+1 for the original version of this PR (as documented in the original post). \n\nI use CoffeeScript every day, but I use the REPL pretty rarely, and I still struggle to remember the right key for CTRL-V. So I think it would help veterans too, not just new users.\n\nI don't see the message being annoying; it's pretty short. Maybe folks would be happier if there were an environment variable and/or a command-line option to disable it? "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc003a21fa1e1f1a9df3",
    "number": 5158,
    "body": "Just a correction to a comment to add the \"___to___\" near the end of this sentence:\r\n\r\n> Occasionally it may be useful to make an expression behave as if it was 'hoisted', whereby the result of the expression is available before its location in the source, but the expression's variable scope corresponds ___to___ the source position.",
    "head_branch": "comment-typo-fix",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Remove extra word in comment in src/nodes.coffee (#5158)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc013a21fa1e1f1a9df4",
    "number": 5157,
    "body": "@GeoffreyBooth PR for `Return`/`YieldReturn`/`AwaitReturn` AST",
    "head_branch": "return-ast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Return AST (#5157)\n\n* updated grammar\r\n\r\n* FuncDirectiveReturn class\r\n\r\n* error tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc023a21fa1e1f1a9df5",
    "number": 5156,
    "body": "@GeoffreyBooth here's a PR for explicitly tracking token exclusive end line/column location data to avoid the issues discussed in previous PRs",
    "head_branch": "exclusive-end-line-column",
    "is_a_fork": true,
    "comments": [
      "So you found a way to fix it without patching/forking Jison?",
      "I'm convinced. Great work!"
    ],
    "commit_messages": [
      "AST: Track exclusive end line/column (#5156)\n\n* updated grammar (with patched Jison)\r\n\r\n* passing tests\r\n\r\n* updated grammar\r\n\r\n* updated grammar\r\n\r\n* updated grammar\r\n\r\n* updated grammar\r\n\r\n* cleanup\r\n\r\n* refactor"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc033a21fa1e1f1a9df6",
    "number": 5155,
    "body": "@GeoffreyBooth PR for basic Code AST\r\n\r\nThere will be other considerations related to functions, eg correctly handling directives, tracking scope variables, and handling class methods differently\r\n\r\nBut this PR includes basic AST generation for functions (and `await`/`yield`)",
    "head_branch": "code-ast",
    "is_a_fork": true,
    "comments": [
      "Looks good, are you going to fix the last line/column exclusive on this branch or in a future PR?",
      "Wouldn't it make sense to go with something like `BoundFunctionExpression` (or stick with `FunctionExpression` and keep the flag) instead of `ArrowFunctionExpression`, and translate it on export?\r\nI feel it's confusing as in CS all function expressions use arrows. This is AST for CS after all.",
      "> Wouldn’t it make sense to go with something like\r\n\r\nWe’re explicitly following the Babel AST, so we have to go with what they went with. We’re only deviating where we have things that JavaScript doesn’t, like Expansion.",
      ">We’re explicitly following the Babel AST\r\n\r\nI do get that. Still, IMO it makes sense (in this case specifically) to not blindly copy the name when it's ambiguous. A final transform step / alias resolving, would nicely avoid such situation.",
      "@GeoffreyBooth I'll tackle the last line/column stuff in a separate PR\r\n\r\n@Inve1951 if we were designing the AST from scratch that might make sense, but there are massive upsides to generating AST that's as compatible with JS ASTs as possible (eg integration with ESLint and other tools that consume JS AST). So for anything that can be cleanly mapped to existing Babel AST nodes, that outweighs any aesthetic considerations of whether someone reading the AST might find it less obvious than an alternative representation\r\n\r\n> A final transform step / alias resolving, would nicely avoid such situation\r\n\r\nTo have Coffeescript export a less-compatible AST and then require an external transform step in order to align it with Babel AST would largely defeat the purpose of trying for compatibility",
      "Thanks for the effort, looking forward to the other PR for the last line/column issue."
    ],
    "commit_messages": [
      "Code AST (#5155)\n\n* adding tests\r\n\r\n* updated grammar\r\n\r\n* tests\r\n\r\n* fixes from code review"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc043a21fa1e1f1a9df7",
    "number": 5154,
    "body": "@GeoffreyBooth PR for Switch AST",
    "head_branch": "switch-ast",
    "is_a_fork": true,
    "comments": [
      "Great work! This was a complicated one. I feel like after this, we probably have most of the infrastructure to handle the most complicated node types.",
      "So looking at the `test/abstract_syntax_tree.coffee` file and what node class tests are still commented out, I see:\r\n\r\n- StringLiteral\r\n- RegexLiteral\r\n- PassthroughLiteral\r\n- PropertyName\r\n- ComputedPropertyName\r\n- Return\r\n- YieldReturn\r\n- AwaitReturn\r\n- Value\r\n- SuperCall\r\n- Super\r\n- RegexWithInterpolations\r\n- Extends\r\n- Class\r\n- ExecutableClassBody\r\n- Code (a.k.a. function)\r\n- Param\r\n- While\r\n- Parens\r\n- StringWithInterpolations\r\n- For\r\n- If\r\n\r\nMany of these feel like they’re probably quite small, but a few like Class and Code and While and For and If seem likely to be significant. Anyway so I guess we have a ways to go, but the end is in sight.",
      "@GeoffreyBooth yup I'm preparing an initial PR for functions next\r\n\r\nMy general plan of attack would be: once we get through all of the individual node classes, do comments (which have a lot of considerations). At that point I should be able to swap out my branch for the `ast` branch as a dependency to the Prettier and ESLint plugins and use failing tests in those two projects to indicate what odds and ends still need to be addressed"
    ],
    "commit_messages": [
      "Switch AST (#5154)\n\n* updated grammar\r\n\r\n* ast\r\n\r\n* fix merge\r\n\r\n* tests\r\n\r\n* location data tests\r\n\r\n* fix from code review\r\n\r\n* SwitchCase\r\n\r\n* fix from code review"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc053a21fa1e1f1a9df8",
    "number": 5152,
    "body": "@GeoffreyBooth PR to fix the known block location data issue (see #5140) and a few other location data bugs",
    "head_branch": "ast-location-data-fixes",
    "is_a_fork": true,
    "comments": [
      "Thank you for fixing this! This all looks great."
    ],
    "commit_messages": [
      "fixes (#5152)\n\nThank you for fixing this! This all looks great."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc053a21fa1e1f1a9df9",
    "number": 5145,
    "body": "Thanks for all the great work with CoffeeScript, I was just trolling through the issues and this looked like a simple fix. The fix is based on an assumption that I could be _completely_ wrong about, but according to the tests (including the new test for the bug itself), the assumption is correct.",
    "head_branch": "fix-5085",
    "is_a_fork": true,
    "comments": [
      "Force-pushed small change to the wording of the commit: \"Assuming that a **bound** Code block...\"",
      "....and one more force-push to remove an unnecessary step from the test.",
      "Thanks for this! @connec do you care to take a look?",
      "@connec or @zdenko or @helixbass, anyone familiar with the `Class` node have a minute to review a one-line fix?",
      "Can you please add a test for `class A then fn(b: => ...)`?",
      "@vendethiel Sorry, I don't follow: what do you want the test to do?",
      "Make sure the function inside the call inside an object is bound to the class (we shouldn’t attribute a name outside of class properties IIRC so the test should already work).",
      "I'm not totally sure if this is what you meant...?\r\n\r\n222067d\r\n\r\nIf it's not, could you just write the exact code you mean? Sorry that I'm just not getting it.",
      "```\r\nmyvar = 0\r\nfn = (o) -> o.prop()\r\nclass Klass\r\n  @foo = 1\r\n  fn prop: => myvar = @foo\r\n```",
      "```\r\nclass Klass\r\n  fn prop: => myvar = @foo\r\n```\r\nI don't understand what this is doing at all, or what the intent of writing it would be, but OK, test added. :-)\r\n\r\nIs `myvar` _supposed_ to be 1 after this...?",
      "There was an old bug where we considered object properties outside of the class top-level and gave them names, just adding a test.",
      "So @vendethiel is this okay to merge?",
      "LGTM",
      "Thanks @brewingcode!",
      "You're welcome!"
    ],
    "commit_messages": [
      "Fix 5085 (#5145)\n\n* Add test for #5085\r\n\r\n    $ cake test\r\n    failed 1 and passed 1274 tests in 4.81 seconds\r\n\r\n      #5085: Bug: @ reference to class not maintained in do block\r\n      AssertionError [ERR_ASSERTION]: Expected undefined to equal 2\r\n\r\n* Fix #5085: @ reference to class in \"do\" block\r\n\r\nAssuming that a bound Code node inside an ExecutableClassBody without a\r\nname must be a \"do\" block.\r\n\r\n* Additional tests\r\n\r\nhttps://github.com/jashkenas/coffeescript/pull/5145#issuecomment-462127244\r\n\r\nAlso switched to concat'g strings for test values, as opposed to\r\nincrementing numbers: makes the tests a bit easier to read."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc063a21fa1e1f1a9dfa",
    "number": 5140,
    "body": "@GeoffreyBooth PR for `Try` AST (introduces first non-root `Block`s)\r\n\r\nBased on `root-ast`, [here](https://github.com/helixbass/copheescript/compare/root-ast...helixbass:try-ast) is the diff against that branch",
    "head_branch": "try-ast",
    "is_a_fork": true,
    "comments": [
      "@helixbass do you mind resolving conflicts?",
      "@GeoffreyBooth sure merged in `ast`"
    ],
    "commit_messages": [
      "Try AST (#5140)\n\n* root ast\r\n\r\n* updated grammar\r\n\r\n* preserve CoffeeScript.nodes() API\r\n\r\n* root ast methods\r\n\r\n* try ast\r\n\r\n* updated grammar\r\n\r\n* updated grammar\r\n\r\n* updated grammar\r\n\r\n* updated grammar\r\n\r\n* finally location data\r\n\r\n* remove unused\r\n\r\n* updates from code review"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc073a21fa1e1f1a9dfb",
    "number": 5138,
    "body": "@GeoffreyBooth PR for JSX fragments (eg `<></>`) and attributes (eg `<div a=\"b\" c={d} {...e} />`)\r\n\r\nSo the only other remaining JSX piece is JSX content, which I can address once we've introduced ASTs for string interpolations\r\n\r\nBased on `jsx-element-ast`, [here](https://github.com/helixbass/copheescript/compare/jsx-element-ast...jsx-fragment-ast) is the diff against that branch",
    "head_branch": "jsx-fragment-ast",
    "is_a_fork": true,
    "comments": [
      "This is trivial, but I feel like we should treat “CSX” like we do “AST” in `astProperties` or `toAst`, so it would be like `csxFragmentToAst` or `checkValidCsxAttribute`.\r\n\r\nThe `getCSXAttributeAst` and related stuff is definitely smelly. I guess this is because we’re skipping the refactor you were describing, of creating proper nodes for all these parts? So this is the best we can do unless we bite the bullet and do that refactor?",
      "Resolving the merge conflicts for this will take some thought, as I guess this was done before you created the CSXElement class.",
      "> Resolving the merge conflicts for this will take some thought, as I guess this was done before you created the `CSXElement` class.\r\n\r\n@GeoffreyBooth yup I tried to give you a [heads up](https://github.com/jashkenas/coffeescript/pull/5136#pullrequestreview-178349147) so you wouldn't have to waste time on the merge conflicts!\r\n\r\nRebased and updated to use `CSXElement`\r\n\r\n> The `getCSXAttributeAst` and related stuff is definitely smelly\r\n\r\nLet me try and see if we can apply a similar technique here like we did with `CSXElement` to avoid these patterns on eg `Obj` and `Assign` serving \"double-duty\" as JSX stand-ins\r\n\r\n> This is trivial, but I feel like we should treat “CSX” like we do “AST” in `astProperties` or `toAst`, so it would be like `csxFragmentToAst` or `checkValidCsxAttribute`\r\n\r\nSure - if we're able to avoid the \"double-duty\" overloading of non-JSX node classes, that'll actually get rid of the need to specify \"CSX\" in method names since they'll be on a class that itself is CSX/JSX-specific (eg `getCSXAttributeAst()` became just `getAttributeAst()` on `CSXElement`)"
    ],
    "commit_messages": [
      "JSX fragment/attribute AST (#5138)\n\n* fragment ast\r\n\r\n* attributes ast\r\n\r\n* working on attribute classes\r\n\r\n* passing tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc083a21fa1e1f1a9dfc",
    "number": 5137,
    "body": "@GeoffreyBooth PR for root `Block` AST\r\n\r\nBased on `jsx-element-ast`, [here](https://github.com/helixbass/copheescript/compare/jsx-element-ast...root-ast) is the diff against that branch",
    "head_branch": "root-ast",
    "is_a_fork": true,
    "comments": [
      "> verify my assumption that it’ll be easy to “monkeypatch” it back in as needed inside the ESLint plugin, since there are places there that expect it to be present\r\n\r\nI would think you could just add it as a property in your middleware plugin, like (psuedocode):\r\n\r\n```coffee\r\nast = CoffeeScript.compile(source, ast: yes)\r\nast.program.sourceType = 'module'\r\n# use `ast` with ESLint\r\n```",
      "@helixbass I pushed some changes, please review in particular https://github.com/jashkenas/coffeescript/pull/5137/commits/3677d1112ef3e2c51a43eb460ef8e47760dc12c8\r\n\r\nI refactored `Block.astProperties` to use `expression.astLocationData()` to get location data, rather than extracting the location data from the whole AST object; this felt more object-oriented and logical to me. I also moved the logic for generating `astProperties` into that method, rather than spreading it out across several methods on the `Block` class that all appear to be internal (as in it wouldn’t make sense to call those methods from outside of `Block`, they’re really just helper functions for `astProperties`). All the tests still pass, please let me know what you think.\r\n\r\nOne other thing is that we’re not defining `Block.astLocationData`, but it appears we don’t need to, the version it inherits from `Base` seems to work fine. We’re not testing the location data for the `Program` node, though; not sure if we need to.",
      "@GeoffreyBooth the changes you made look fine including the refactor\r\n\r\nYou're right there currently aren't AST location data tests for the root `File`/`Program`. I just was messing with this and ran into some issues related to whether the location data of a trailing `TERMINATOR` (generated or not) gets include in the `File`/`Program` AST location data. I think this deserves a little deeper examination so I'd like to treat this as a separate location-data-related TODO",
      "I noticed exactly the same thing, about a newline at the end of the file, when I was comparing our AST for something trivial like `new Date()` with the AST from astexplorer.net. Might be worth nailing down which way it should be and adding a test for that.",
      "@GeoffreyBooth ok I pushed a commit fixing some of the behavior related to root location data and with a commented-out TODO test for a part that still isn't behaving correctly\r\n\r\nThe thing that's still not behaving correctly is the case when there's an actual trailing newline in the source file. From what I can tell the root of the issue is that in `outdentToken()` in `lexer.coffee` (called by `closeIndentation()`) it always creates the `TERMINATOR` token with `length: 0` (regardless of whether it corresponds to an actual newline and thus should be `length: 1`)\r\n\r\nBut I don't feel confident trying to apply an immediate fix there, so I left a commented-out AST location data test case with an actual trailing newline which should pass once we apply a fix such that the location data of the trailing `TERMINATOR` token is always correct",
      "Which parser are you treating as your target in astexplorer.net? `babylon7`?\r\n\r\nI’m thinking about the case where the code ends with multiple newlines, or a comment:\r\n\r\n```coffee\r\na = 1\r\n\r\n\r\n# copyright 2018\r\n```\r\n\r\nIn astexplorer, everything all the way to the last character in the comment is included in the root location end. I’m thinking that we may need to handle this as a special case, either in `coffeescript.coffee` or by noting the original source length from the lexer and passing it as extra data to the `Root` class.",
      "> Which parser are you treating as your target in astexplorer.net? `babylon7`?\r\n\r\n@GeoffreyBooth yes typically `babylon7`\r\n\r\n> I’m thinking about the case where the code ends with multiple newlines, or a comment\r\n\r\nThis is a good special case to check if it handles it correctly. We should wait until we've gotten through comments to address it though, since there will be similar including-comment-locations-in-`Block`-location-data fixes included there, which would probably affect the handling of this particular special case (where the \"root block\" location data should include a trailing comment)",
      "@GeoffreyBooth was there something else you wanted to see addressed in this PR?",
      "@helixbass Please take a look at https://github.com/helixbass/copheescript/commit/a85b987ce5cea3a0a33d310f03ed157df23d9440, I think I’ve fixed the location data end values for the root/`Program`»`File` node. I think the issue was due to the `clean` function in the lexer, which trims extraneous whitespace before the lexing begins.",
      "@GeoffreyBooth ok the approach you took makes sense to me (handling the root `File`/`Program` node location data as a special case where we just reference the original complete source code string directly rather than try and account for destructive operations eg the lexer's `clean()`), merging",
      "@GeoffreyBooth oh wait I can't merge into `ast`, so looks good for you to merge 👍 ",
      "Awesome, thanks 😄 "
    ],
    "commit_messages": [
      "Root AST (#5137)\n\n* root ast\r\n\r\n* updated grammar\r\n\r\n* preserve CoffeeScript.nodes() API\r\n\r\n* root ast methods\r\n\r\n* updates from code review\r\n\r\n* Style\r\n\r\n* Fix a few missing returns\r\n\r\n* Expand sourceType explanation\r\n\r\n* Simplify\r\n\r\n* Refactor Block.astProperties: use expression.astLocationData() to get location data, rather than extracting it from the whole AST object; move all the logic into one function, rather than spreading it out across several functions on the Block class that all appear to be internal\r\n\r\n* testing root location data\r\n\r\n* Fix location end data for root/File » Program AST node"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc093a21fa1e1f1a9dfd",
    "number": 5136,
    "body": "@GeoffreyBooth PR for JSX elements\r\n\r\nThis doesn't include fragments (`<></>`), attributes (`<div a=\"b\" />`) or child content (`<div>abc</div>`)\r\n\r\nBased on `existence-ast`, [here](https://github.com/helixbass/copheescript/compare/existence-ast...helixbass:jsx-element-ast) is the diff against that branch",
    "head_branch": "jsx-element-ast",
    "is_a_fork": true,
    "comments": [
      "> Is it really worth not parsing it legitimately?\r\n\r\nWhat would that look like?",
      "@GeoffreyBooth to full-on parse JSX would mean tokens that actually correspond to the JSX source code fed into grammar rules for JSX that instantiate new JSX-specific node classes\r\n\r\nThat's a major undertaking so my thoughts about options at this point are:\r\n- If full JSX parsing makes the most sense, plan on doing that after/separate from this AST work\r\n- Or we could try and introduce JSX-specific node classes without needing to mess with much existing code (similar to how we just introduced `ObjectProperty`)\r\n- Or we can just continue to use it as-is. The AST generation code isn't as nice as when we have node classes corresponding to the AST nodes we're generating, but it's working",
      "Thanks @helixbass. I just wanted to get the to-do list documented while it was still fresh in mind. @xixixao do you have any thoughts on this?\r\n\r\n@helixbass if you think the refactor is a good idea, and it sounds like you do (and that it is), perhaps we should open an issue with the list from your last comment? And we could potentially tackle it after the AST work is done.",
      "I agree with the assessment.",
      "I think this is probably ready, please just answer the questions (I assume you’ll have good explanations for everything) and we can merge this. I’m going to trust you on all the lexer and node class stuff, I don’t really have the time to give a more thorough review than basically just looking for trivial style complaints and code smell sniffing.\r\n\r\nIf you want to rename all CSX stuff to JSX I would also support that, though maybe we should do that in its own PR so it’s an isolated commit. Maybe after we finish the JSX-related AST PRs?"
    ],
    "commit_messages": [
      "JSX element AST (#5136)\n\n* existence/throw/expansion ast\r\n\r\n* updated grammar\r\n\r\n* passing tests\r\n\r\n* passing ast tests\r\n\r\n* location data tests\r\n\r\n* updates from code review\r\n\r\n* add comment comments\r\n\r\n* CSXElement\r\n\r\n* jisonLocationDataToAstLocationData\r\n\r\n* remove comment\r\n\r\n* Style tweaks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc0a3a21fa1e1f1a9dfe",
    "number": 5135,
    "body": "@GeoffreyBooth PR for ASTs for Existence, Throw and Expansion nodes\r\n\r\nSorry to have fallen off the pace. Was getting crushed on a two-week solo project. But through with that, and finished getting `ast` (ie the new AST methods) merged into my branch (with Prettier plugin and ESLint plugin tests passing against the updated branch) so set up for smooth sailing 👍 \r\n\r\nThat being said, these are the last of the \"easy\" leaf node type ASTs. I think it makes sense next to introduce block ASTs so that we can start getting into functions/control structures/etc",
    "head_branch": "existence-ast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Existence/Throw/Expansion AST (#5135)\n\n* existence/throw/expansion ast\r\n\r\n* Style"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc0b3a21fa1e1f1a9dff",
    "number": 5130,
    "body": "This method enables an external module to implement caching of\r\ncompilation results. When the compiled js source is loaded from cache,\r\nthe original coffee code should be added with this method in order to\r\nenable the Error.prepareStackTrace below to correctly adjust the stack\r\ntrace for the corresponding file (the source map will be generated on\r\ndemand).\r\n\r\nThis is the minimal solution proposed in https://github.com/jashkenas/coffeescript/issues/5122\r\n\r\nI have not added any new tests since the code path is already covered by existing tests (the method was created by extracting existing in-line code into a function).\r\n\r\nI have not marked this PR as closing the above issue since I would still be inclined to implement the caching internally if anyone is interested. ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "I think this makes sense to potentially implement internally. One concern that comes to mind is the cache on disk. How would we ensure that it didn’t grow out of control, and that it was cleaned up? Are there situations where a user wouldn’t want caching? How do other transpilation tools like Babel or TypeScript handle caching?",
      "In general, I don't think that CoffeeScript ought to try to handle compilation caching. For a serious scale project, you should compile your code to JS, and run the app with `node`. Running code directly from `coffee` is more for experimentation and exploration.\r\n\r\nIf you compile your code, you can use makefiles (or `--watch`, or your build solution of choice), to ensure that source is never recompiled unnecessarily.",
      "@jashkenas Please take a look at #5122. The use case isn’t running an app from `coffee`, it’s for running tests. In general, test runners like `mocha` use `coffeescript/register` to transpile files for testing, and this is where caching can speed things up.",
      "In my opinion, it doesn't matter so much what the use case is for — you can compile your tests just like you compile your code.\r\n\r\nIf we try to handle compilation caching, you open up a whole new world of bugs:\r\n\r\n* Where are the files stored?\r\n* What if the user wants to keep the cache somewhere else?\r\n* How is the cache keyed? \r\n* Keyed between different versions of CoffeeScript?\r\n* How is the cache expired?\r\n* What if the user leaks a secret key, that is now stashed in the invisible cache?\r\n* What about cache hits between different commits, using the `master` branch of the CoffeeScript compiler, where the version number hasn't changed (yet)?\r\n\r\nIt really doesn't seem worth getting into (again, IMO).",
      "@GeoffreyBooth \r\n\r\n> One concern that comes to mind is the cache on disk. How would we ensure that it didn’t grow out of control, and that it was cleaned up? \r\n\r\nI would leave it to the user.\r\n\r\n> Are there situations where a user wouldn’t want caching? \r\n\r\nI guess in cases where the speed-up is not significant.\r\n\r\n> How do other transpilation tools like Babel or TypeScript handle caching?\r\n\r\nI'd have to look into it.\r\n\r\nIn my case, I only use caching when running tests locally. On CI caching is disabled so there is no problem with managing disk usage. I've been using one of the modules mention in the proposal for months and never bothered to clean my local cache. I use a directory at the top level of each project to store the cache files so it would theoretically be possible to scan all the files in the project and prune all cache files which no longer have a corresponding source. But tbh I think deleting the entire cache directory once in a while should be good enough when working locally.\r\n\r\nThe 2 modules use different approaches to creating the cache files: one computes hashes of the sources contents and stores all cache files in the same dir using hash as the file name. The other mirrors the directory structure of the project, names cache files after the sources and checks file modification date to determine if the cache file is out of date. It seems like in the first case the cache will grow quicker since files are modified more often than moved around. However hashing I think is a more sound strategy since you can also add compile options to the content before hashing (I've just implemented it [here](https://github.com/adrian-gierakowski/coffee-register-cache/blob/master/src/index.coffee#L42))\r\n\r\n@jashkenas \r\n\r\nyou make some very good points, as you have by creating coffeescript itself 🙏:\r\n- there already exists a work-flow which provides a solution to the problem\r\n- implementing caching properly is non-trivial\r\n- it might better to limit the scope of the core project to necessary minimum\r\n\r\nAnd I guess for a large project, compiling to disk first might offer additional benefits, like reducing runtime memory footprint etc.\r\n\r\nHowever, for the last few years, since I first started using your beautiful language, I have been happily living in a lalaland in which I could pretend that the language called JavaScript doesn't exits 🤘🎉💥. I never felt a need to look at the compiled version of my CS code (apart from one time when I stumbled upon a compiler bug). I also did not need to worry about any build steps or checking in compilation output to source control. I do run code in production with `coffee app.coffee` (never had any issues) and it feels nice being able to run any of my test files with a simple `mocha tests/test.coffee`. \r\n\r\nI understand if you don't support implementing caching within the coffeescript but I would be super grateful if you could accept this small and insignificant change which would allow me to experiment with my own implementation and happily continue using my current work-flow.\r\n",
      "@jashkenas\r\n\r\nSome thoughts on the points you've raised:\r\n> Where are the files stored?\r\n\r\ndirectory at the top of projects root by default\r\n\r\n> What if the user wants to keep the cache somewhere else?\r\n\r\nthat could be configured with an env var, or a command line argument\r\n\r\n> How is the cache keyed?\r\n\r\nhash of the: source + options + compiler version\r\n\r\n> Keyed between different versions of CoffeeScript?\r\n\r\nsee above\r\n\r\n> How is the cache expired?\r\n\r\nup to the user, a tool could be provided to prune cache based on current state of the project\r\n\r\n> What if the user leaks a secret key, that is now stashed in the invisible cache?\r\n\r\nits up to the user to keep their secrets safe. My text editor keeps a cache of all searches I made. My shell keeps command history. If I'm not careful I might commit database credentials to a public git repo.\r\n\r\n> What about cache hits between different commits, using the master branch of the CoffeeScript compiler, where the version number hasn't changed (yet)?\r\n\r\nif I understand correctly, the issue here is due to switching between different dev versions of CoffeeScript compiler, which have the same version string stored in source code, but might produce different output? Again, I would simply warn the user. If you want to be super safe, you could add a file to the CoffeeScript project which would contain the a hash of the compiler source, and would be updated on each commit (you already run a build step to compile cs->js so it could be done at the same time). The hash could be used when calculating the cache key.\r\n\r\nNOTE: I've edited out a suggestion that a sha of parent commit could be used to version the compiler between official version bumps as obviously any parent can have multiple children 🤦",
      "Now that you've spelled out all that's involved, I'm leaning toward @jashkenas and thinking that this is something best left out of core. Especially since it appears that there are other modules that can wrap CoffeeScript and handle it?\r\n\r\nThe change in this PR though is quite minimal, just exposing a previously private method. If that makes the external caching modules work better, that seems like it would be fine with me. @jashkenas, what do you think of this PR specifically?",
      "Sure — but let's make it public, call it something like `registerCompiled`, and perhaps have it take `registerCompiled(filename, source, output, sourcemap)` — so that it records the full result of the compilation, and can later be used to avoid recomputing sourcemaps unnecessarily. How does that sound?",
      "@jashkenas thanks! \r\n\r\nI've implemented the `registerCompiled` as you suggested, however I am not sure if there is anything I should do with the `output` argument. Doesn't seem like its persisted in the original `compile` method. Do you have something in mind for the future?\r\n\r\nBtw. below are my thoughts regarding caching the `SourceMap`:\r\n\r\nInitially I did think about saving `SourceMap` for each file, but after looking into it I realised that it would require more work to implement and in majority of cases might actually slow things down (assuming that we don't need the source map for most files most of the time - reasoning inspired by [this comment](https://github.com/jashkenas/coffeescript/blob/294bb4754ec566d4fb10fd80fa8056be3d715bd7/src/coffeescript.coffee#L46)). Moreover most of the time when running files with `coffee` or using `coffeescript/register` the `SourceMap` is not returned from [`.compile`](https://github.com/jashkenas/coffeescript/blob/294bb4754ec566d4fb10fd80fa8056be3d715bd7/src/coffeescript.coffee#L161) since `options.sourceMap` is undefined (we get the inline map since [`_compileFile`](https://github.com/jashkenas/coffeescript/blob/294bb4754ec566d4fb10fd80fa8056be3d715bd7/src/index.coffee#L122) always sets `options.inlineMap` to true). To set `options.sourceMap` someone would have to do `module.options.sourceMap = yes` somewhere in their source since running `coffee --map a.coffee` executes in \"compilation mode\" and results in `a.js.map` file being saved but doesn't actually run the code in `a.coffee`.\r\n\r\nSo I think in my external caching implementation I'd only cache the `js` output and omit the `sourcemap` arg from the call to `registerCompiled`.\r\n\r\n\r\n",
      "@jashkenas btw would you mind if I also added a step to in the `build` cake task which would complete a `sha256` of concatenated sources the `src` folder and store it in the a file at the top level of the repo? Then if this file could be distributed with he coffeescript package I should be able to locate it and include the sha when calculating cache keys. Or even better, the sha could be exported by the coffeescript module :)",
      "also please let me know what you think about: b47c4bc61f2cd39102b5fd7108f850a01908a205 which \r\nallows me to avoid a duplicate call to `fs.readFileSync` in case of a cache miss. \r\n\r\nsee:\r\nhttps://github.com/adrian-gierakowski/coffee-register-cache/blob/187a37cc60023cd3aec36b04f117c071b4e077e7/src/index.coffee#L75\r\n\r\nhttps://github.com/adrian-gierakowski/coffee-register-cache/blob/187a37cc60023cd3aec36b04f117c071b4e077e7/src/index.coffee#L63\r\n\r\nhttps://github.com/jashkenas/coffeescript/blob/294bb4754ec566d4fb10fd80fa8056be3d715bd7/src/index.coffee#L114",
      "@adrian-gierakowski The `coffeescript` package already exports the version:\r\n\r\n```\r\n$ coffee --eval 'console.log require(\"coffeescript\").VERSION'\r\n2.3.2\r\n```\r\n\r\nNPM won’t let me republish an already-published version, so this basically a unique hash. Could this suffice instead of a sha?",
      "@GeoffreyBooth the sha was just to insure against cases when someone is using a dev version of `coffeescript` where the behaviour might change between commits while the `.VERSION` stays the same.\r\n\r\nAs @jashkenas poited out above:\r\n> What about cache hits between different commits, using the master branch of the CoffeeScript compiler, where the version number hasn't changed (yet)?",
      "@adrian-gierakowski Sure, then a hash could be generated. Please make sure it doesn’t noticeably slow down the `except-parser` version of the build process.",
      "@GeoffreyBooth I've added generation of src-sha to `buildExceptParser`. It only adds a few ms of to the total build time on my machine. \r\n\r\nI opted for hashing the coffeesript files in `src` folder, however what if the only change made in a commit is an update to `jison` module version which results in changes to `grammar.js` while `grammar.coffee` stays unchanged (which I understand could happen if I ran `cake build:parser` after updating `jison`). Can we assume that such change would not affect the semantics of coffeescript code compiled after the change? If we can't than I guess it might be better to hash the `js` files.",
      "@adrian-gierakowski This is quite good, thanks for making the effort, especially with the tests. A few minor notes:\r\n\r\n- The codebase’s filenames use underscores, not slashes. Maybe just rename `src-sha.js` to `sha.js`?\r\n- Please put the output SHA file in `lib/coffeescript` with the rest of the CoffeeScript generated files. I don’t see a reason for it to be at the package root, especially since people should be able to retrieve the SHA via `require('coffeescript').SHA`.\r\n- The documentation is generated from the comments, so we write them in complete sentences with Markdown formatting. Please update your comments to match.\r\n- The code style is to use single quotes unless the string has an interpolation (`\"foo#{bar}\"`).\r\n\r\nThe `Cakefile` changes don’t seem to cache the `fs.readdirSync` results, and if I’m reading it correctly we read the folder contents twice (once to get the files for the SHA, again to pass to the CoffeeScript compiler). I’m not sure it’s worth the hassle to cache the lookup, as I feel like it must take milliseconds for a modern computer to read a directory that has a dozen files in it, but it’s something to consider.\r\n\r\nTo answer your question about Jison, yes, technically that’s true; but the [last commit](https://github.com/zaach/jison/commits/master) to Jison was in 2017, and the last commit before that was in 2016. So we’re not likely to be updating that dependency version anytime soon; _however_ you would cover this case by including `package.json` in the SHA calculations, since the Jison version number would be in that `package.json`. It’s maybe not a bad idea to include `package.json` or `package-lock.json` in the SHA calculations anyway, to invalidate caches in case CoffeeScript’s dependency versions change, though the dependencies are only dev dependencies so it really shouldn’t matter.",
      "@GeoffreyBooth I have addressed your comments. Opted for including the `package-lock.json` just in case. Also added a `sha` cake task for cases when `package-lock.json` changes (but not the sources). \r\n\r\nI left `\"\"` in the test titles as it seems like all other tests use them even though there is no string interpolation.\r\n\r\nI am still not sure if we should keep the `output` argument in the `registerCompiled` method as it is not used for anything.",
      "@GeoffreyBooth @jashkenas any thoughts?",
      "(I know it's frustrating, but ...) My (abbreviated) thoughts are that I don't think we should merge this change.\r\n\r\nAs a minor thing — the SHA hashing makes me uncomfortable. As you pointed out above, just because two CoffeeScript source files hash to the same value, doesn't mean that their JS output necessarily does (across different versions of CoffeeScript, or just different versions of the Jison dependency).\r\n\r\nBut the more major things are that I still don't fully understand how a user would be expected to understand or able to use these hooks to easily achieve cached compilation. And they're now a more invasive change than they were previously ... and accordingly something that demands a more compelling use case.\r\n\r\nIf it were up to me, I would say: \"Compile your tests as you write them, just like you compile your code\", and avoid this whole dilemma.\r\n\r\nBut if there's still a minimal, non-invasive, change here that would let you satisfy your use case, then that would be fine.",
      "> (across different versions of CoffeeScript, or just different versions of the Jison dependency).\r\n\r\nor across `-l`, `-b` and `--no-header` flags.",
      "Rereading this thread, it looks like the hashing was only done to support development versions of CoffeeScript, e.g. someone like me working on a checkout of the CoffeeScript repo generating new builds. I don’t think the three or so of us currently working on CoffeeScript need complication caching support, and the rest of the world should be fine with caching compilation based on `CoffeeScript.VERSION`. What if we go back to using that, and get rid of all the hashing stuff?",
      "@jashkenas @GeoffreyBooth \r\n\r\nThe only change I really need is 333b78c (or its revised form 51947304).\r\n\r\nAnd b47c4bc6 would be really nice to have.\r\n\r\nRe hashing of compiler source: I am happy to remove it from this PR. Since the overhead of it seems to be very low, I can just as well do it when my module loads (I'd locate and hash the js files in this case). \r\n\r\n@jashkenas\r\n> But the more major things are that I still don't fully understand how a user would be expected to understand or able to use these hooks to easily achieve cached compilation. \r\n\r\nHere's a working example: https://github.com/adrian-gierakowski/coffee-register-cache\r\n\r\n> If it were up to me, I would say: \"Compile your tests as you write them, just like you compile your code\"\r\n\r\nI'll be sure to try this in my next project. But I think it's nice to have options :) \r\n\r\n\r\n@vendethiel \r\n> or across -l, -b and --no-header flags.\r\n\r\nThe implementation linked above includes  flags when generating cache keys. ",
      "@adrian-gierakowski Do you mind changing this branch back to the ideal version without the hashing? And then it’s up to the consuming tool to hash if they wish, however it wants (SHA of source files, CoffeeScript version number, whatever). Especially if the compiler won’t be doing the caching, it makes some sense to leave as many of the specifics of the caching to the downstream tool.",
      "@GeoffreyBooth @jashkenas \r\nI have deleted the commits related to hashing. The PR as it is now would make it possible for me to implement caching in an external module efficiently and without hacks. \r\n\r\nLet me know if you want me to remove or keep the `output` argument in `registerCompiled` as it is not used at the moment (as mentioned above https://github.com/jashkenas/coffeescript/pull/5130#issuecomment-435919589 )",
      "Sure. If you're not using it — let's try with `output` out.",
      "I have now removed the `output` arg from `registerCompiled`. Let me know if you are happy with current state and if you want me to squash the commits. Cheers! ",
      "Nice work @adrian-gierakowski, thanks for bearing with us 😀",
      "Thank you guys, I appreciate it!"
    ],
    "commit_messages": [
      "implement coffeescript.registerCompiled method (#5130)\n\n* implement coffeescript._addSoucrse method\r\n\r\nThis method enables an external module to implement caching of\r\ncompilation results. When the compiled js source is loaded from cache,\r\nthe original coffee code should be added with this method in order to\r\nenable the Error.prepareStackTrace below to correctly adjust the stack\r\ntrace for the corresponding file (the source map will be generated on\r\ndemand).\r\n\r\n* replace _addSource with registerCompiled\r\n\r\n* extract the logic from _compileFile into _compileRawFileContent\r\n\r\n_compileFile takes care of logging the file and calls _compileRawFileContent\r\n\r\nthis way an external caching implementation which computes cache key\r\nbased on raw content of the sources file, can reuse the logic of\r\n_compileFile and avoid having calling `fs.readFileSync` for the file\r\nmore twice in case of cache miss\r\n\r\n* remove 'output' argument from registerCompiled"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc0c3a21fa1e1f1a9e00",
    "number": 5126,
    "body": "@GeoffreyBooth AST for `Assign`\r\n\r\nThe `ObjectProperty` abstraction I introduced in `obj-ast` (#5124) looks like it worked correctly for left-hand-side object destructuring 👍 \r\n\r\nBased on `obj-ast`, [here](https://github.com/helixbass/copheescript/compare/obj-ast...assign-ast) is the diff against that branch",
    "head_branch": "assign-ast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Assign AST (#5126)\n\n* updated grammar\r\n\r\n* tests\r\n\r\n* ObjectProperty\r\n\r\n* LHS shorthand with default needs @value\r\n\r\n* remove unused Assign @shorthand\r\n\r\n* assign ast\r\n\r\n* test operator\r\n\r\n* Format comment"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc0d3a21fa1e1f1a9e01",
    "number": 5124,
    "body": "@GeoffreyBooth AST for `Obj`",
    "head_branch": "obj-ast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Object AST (#5124)\n\n* updated grammar\r\n\r\n* tests\r\n\r\n* ObjectProperty\r\n\r\n* LHS shorthand with default needs @value\r\n\r\n* remove unused Assign @shorthand\r\n\r\n* Format comments, cleanup style"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc0e3a21fa1e1f1a9e02",
    "number": 5123,
    "body": "@GeoffreyBooth AST for `import`/`export`",
    "head_branch": "import-ast",
    "is_a_fork": true,
    "comments": [
      "@GeoffreyBooth Github seems to have just lost my rather lengthy explanation here 👎 \r\n\r\nSo here is a recap:\r\n\r\n`ImportClause`'s AST ends up as `specifiers` on `ImportDeclaration` and is expected to be an array of specifier ASTs. `@defaultBinding` is an `ImportDefaultDeclaration` whose AST is a single object. `@namedImports` is either an `ImportNamespaceDeclaration` (whose AST is a single object) or an `ImportSpecifierList` (whose AST is a list of `ImportSpecifier` objects)\r\n\r\nSo `flatten` is a convenient way to iron that out into the expected shape (a non-nested list of specifier objects)\r\n\r\n`compact` combined with the `?.ast()` guards is a way to avoid building up the list manually via conditionals (it'll get rid of the `undefined`s from when `@defaultBinding` or `@namedImports` doesn't exist)\r\n\r\nWithout either you'd end up with something like\r\n```\r\nast: ->\r\n  ret = []\r\n  if @defaultBinding?\r\n    ret.push @defaultBinding.ast()\r\n  if @namedImports?\r\n    if @namedImports instanceof ImportNamespaceSpecifier\r\n      ret.push @namedImports.ast()\r\n    else\r\n      ret.push @namedImports.ast()...\r\n  ret\r\n```",
      "@GeoffreyBooth Github seems to have just lost my rather lengthy explanation here 👎 \r\n\r\nSo here is a recap:\r\n\r\n`ImportClause`'s AST ends up as `specifiers` on `ImportDeclaration` and is expected to be an array of specifier ASTs. `@defaultBinding` is an `ImportDefaultDeclaration` whose AST is a single object. `@namedImports` is either an `ImportNamespaceDeclaration` (whose AST is a single object) or an `ImportSpecifierList` (whose AST is a list of `ImportSpecifier` objects)\r\n\r\nSo `flatten` is a convenient way to iron that out into the expected shape (a non-nested list of specifier objects)\r\n\r\n`compact` combined with the `?.ast()` guards is a way to avoid building up the list manually via conditionals (it'll get rid of the `undefined`s from when `@defaultBinding` or `@namedImports` doesn't exist)\r\n\r\nWithout either you'd end up with something like\r\n```\r\nast: ->\r\n  ret = []\r\n  if @defaultBinding?\r\n    ret.push @defaultBinding.ast()\r\n  if @namedImports?\r\n    if @namedImports instanceof ImportNamespaceSpecifier\r\n      ret.push @namedImports.ast()\r\n    else\r\n      ret.push @namedImports.ast()...\r\n  ret\r\n```"
    ],
    "commit_messages": [
      "Import/export AST (#5123)\n\n* updated grammar\r\n\r\n* tests\r\n\r\n* Try to be a little clearer that we're assembling objects that we're returning\r\n\r\n* explanatory comment"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc0f3a21fa1e1f1a9e03",
    "number": 5120,
    "body": "@GeoffreyBooth AST for `Arr`/`Elision`/`Splat` nodes\r\n\r\nBased on `range-ast`, [here](https://github.com/helixbass/copheescript/compare/range-ast...array-ast) is the diff against that branch",
    "head_branch": "array-ast",
    "is_a_fork": true,
    "comments": [
      "This one looks fine to me, though we need to merge in #5119 first. This can get merged in as soon as that one is.",
      "@GeoffreyBooth ok rebased so this should be ready to merge"
    ],
    "commit_messages": [
      "array ast (#5120)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc103a21fa1e1f1a9e04",
    "number": 5119,
    "body": "@GeoffreyBooth AST for `Range`/`Slice`\r\n\r\nBased on `call-ast`, [here](https://github.com/helixbass/copheescript/compare/call-ast...range-ast) is just the diff against that branch",
    "head_branch": "range-ast",
    "is_a_fork": true,
    "comments": [
      "Just one question, otherwise this looks good."
    ],
    "commit_messages": [
      "Range/Slice AST (#5119)\n\n* op ast\r\n\r\n* test expected errors\r\n\r\n* use new ast methods\r\n\r\n* remove unused abstraction\r\n\r\n* logical ?\r\n\r\n* fix rebase\r\n\r\n* follow convention\r\n\r\n* fixes from code review\r\n\r\n* test helper naming\r\n\r\n* always convert new to Call\r\n\r\n* new cases\r\n\r\n* don't mutate locationData\r\n\r\n* updated grammar\r\n\r\n* tests\r\n\r\n* Rebuild\r\n\r\n* always expose generated\r\n\r\n* todo for OptionalMemberExpression\r\n\r\n* range/slice ast\r\n\r\n* Style tweaks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc113a21fa1e1f1a9e05",
    "number": 5117,
    "body": "@GeoffreyBooth AST for `Call`s (including `new`)\r\n\r\nBased on `op-ast`, [here](https://github.com/helixbass/copheescript/compare/op-ast...call-ast) is just the diff against that branch",
    "head_branch": "call-ast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Call AST (#5117)\n\n* op ast\r\n\r\n* test expected errors\r\n\r\n* use new ast methods\r\n\r\n* remove unused abstraction\r\n\r\n* logical ?\r\n\r\n* fix rebase\r\n\r\n* follow convention\r\n\r\n* fixes from code review\r\n\r\n* test helper naming\r\n\r\n* always convert new to Call\r\n\r\n* new cases\r\n\r\n* don't mutate locationData\r\n\r\n* updated grammar\r\n\r\n* tests\r\n\r\n* Rebuild\r\n\r\n* always expose generated\r\n\r\n* todo for OptionalMemberExpression"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc123a21fa1e1f1a9e06",
    "number": 5113,
    "body": "Fix #5112: A string of `, ` in an array should not be detected as an elision",
    "head_branch": "commas-in-strings-in-arrays",
    "is_a_fork": true,
    "comments": [
      "@zdenko can you please review this? Elision was your addition I think.",
      "@GeoffreyBooth LGTM"
    ],
    "commit_messages": [
      "Fix #5112: A string of ', ' in an array should not be detected as an elision (#5113)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc133a21fa1e1f1a9e07",
    "number": 5110,
    "body": "https://rawgit.com/geoffreybooth/coffeescript/release-2.3.2/docs/v2/index.html#changelog\r\n\r\n*   Babel 7 is now supported. With version 7, the Babel team moved from `babel-core` on NPM to `@babel/core`. Now the CoffeeScript `--transpile` option will first search for `@babel/core` (Babel versions 7 and above) and then search for `babel-core` (versions 6 and below) to try to find an installed version of Babel to use for transpilation.\r\n*   The syntax [`new.target`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target) is now supported.\r\n*   You can now follow the keyword `yield` with an indented object, like has already been allowed for `return` and other keywords.\r\n*   Previously, any comments inside a JSX tag or attribute would cause interpolation braces (`{` and `}`) to be output. This is only necessary for line (`#`, or `//` in JavaScript) comments, not here (`###`, or `/* */`) comments; so now the compiler checks if all the comments that would trigger the braces are here comments, and if so it doesn’t generate the unnecessary interpolation braces.\r\n\r\n",
    "head_branch": "release-2.3.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Release 2.3.2 (#5110)\n\n* Bump version to 2.3.2\r\n\r\n* 2.3.2 changelog\r\n\r\n* Update output for 2.3.2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc143a21fa1e1f1a9e08",
    "number": 5109,
    "body": "@GeoffreyBooth PR for `Op` ASTs\r\n\r\nAgain, found switching to the new AST methods smooth and in fact an improvement",
    "head_branch": "op-ast",
    "is_a_fork": true,
    "comments": [
      "So I think this PR is mostly done except for the comments I didn’t click “mark resolved” on above. Namely, I feel like we’re doing something wrong in the grammar if we need to patch the location data to rope in a `new` to the left of a `Call`. I know this is a problem in the non-AST codebase as well, but is it something we can fix?\r\n\r\nThat would bypass the issue of mutating versus overwriting `locationData`, though I agree with you that we should update that method that mutates it to make it an overwrite (`@locationData = (new location data object)`).",
      "This looks great. Just that last note about immutable `locationData` and I think this is done."
    ],
    "commit_messages": [
      "Op AST (#5109)\n\n* op ast\r\n\r\n* test expected errors\r\n\r\n* use new ast methods\r\n\r\n* remove unused abstraction\r\n\r\n* logical ?\r\n\r\n* fix rebase\r\n\r\n* follow convention\r\n\r\n* fixes from code review\r\n\r\n* test helper naming\r\n\r\n* always convert new to Call\r\n\r\n* new cases\r\n\r\n* don't mutate locationData"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc153a21fa1e1f1a9e09",
    "number": 5108,
    "body": "Fix #5086: Don’t generate unnecessary interpolations in JSX tags when the tags contain only here (`/* ... */`) comments.\r\n\r\n@ryansolid can you please verify this against your codebase? And please look at https://github.com/GeoffreyBooth/coffeescript/blob/22ec8d91d81a6f22e8a8fe073b52d69419fe630e/test/csx.coffee#L745-L784 and let me know if the expected output is correct. I copied from your issue.",
    "head_branch": "jsx-comments-bug",
    "is_a_fork": true,
    "comments": [
      "Yes the test output looks correct. I tested this PR against a few examples I had, but admittedly I abandoned this approach of comment annotating a month or so back so I don't have many examples. I didn't hit any issues with what I do have.\r\n\r\nThank you for the fix."
    ],
    "commit_messages": [
      "Fix #5086: Don't generate unnecessary interpolations in JSX tags when the tags contain only here (`/* ... */`) comments (#5108)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc163a21fa1e1f1a9e0a",
    "number": 5107,
    "body": "@GeoffreyBooth here's a PR for ASTs for `Value`s with properties (eg `a.b`, `a?::b[c]`)\r\n\r\nAs mentioned in https://github.com/helixbass/copheescript/pull/13, I've based this on your `ast-architecture-refactor` branch. [Here](https://github.com/GeoffreyBooth/coffeescript/compare/ast-architecture-refactor...helixbass:value-ast)'s just the diff against that branch",
    "head_branch": "value-ast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #5107 from helixbass/value-ast\n\nValue AST"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc173a21fa1e1f1a9e0b",
    "number": 5106,
    "body": "Fixes #4609 \r\n\r\nAllow `new.target` inside functions/methods\r\n\r\nThrow an error if `new.target` is used outside of a function\r\n\r\nThrow an error that mimics eg Babel/`espree` if you try to reference a property other than `target` on `new`\r\n\r\n@GeoffreyBooth seemed to make sense to target this PR against `master`? Then I'll add AST support separately",
    "head_branch": "new-target",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #4609: support new.target (#5106)\n\n* support new.target\r\n\r\n* check token type"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc183a21fa1e1f1a9e0c",
    "number": 5105,
    "body": "Revised version of #5102, closes #5102.",
    "head_branch": "babel-7",
    "is_a_fork": true,
    "comments": [
      "@rdeforest care to review this?",
      "I took a look and didn't see anything I found surprising. I also searched the source for missed instances of `babel-` and didn't find any.\r\n\r\nI have questions which I can probably find answers to on my own tomorrow but am posting here anyway:\r\n\r\n* Is the `babel-` to `@babel/` change the only one in Babel's v6 -> v7 transition which impacts CoffeeScript?\r\n* Is there a mechanism to ensure the release which publishes this change is in sync with the docs at coffeescript.org/#transpilation?\r\n\r\nIf I find the answers before anyone responds I'll update this comment accordingly.\r\n",
      "> Is there a mechanism to ensure the release which publishes this change is in sync with the docs at coffeescript.org/#transpilation?\r\n\r\nGood point! One way is for me to just update those docs now 😄\r\nhttps://rawgit.com/geoffreybooth/coffeescript/babel-7/docs/v2/index.html\r\nI’ll add the changelog when we actually do the release.\r\n\r\n> Is the `babel-` to `@babel/` change the only one in Babel’s v6 -> v7 transition which impacts CoffeeScript?\r\n\r\nThis I don’t know. Within the CoffeeScript repo itself, we only use Babel to generate the browser compiler, which still gets generated and transpiled without error; and when I open the docs’ `test.html` in my browser and those tests are run using the browser compiler, they still all pass. But beyond the borders of this repo . . . probably not? At that point it’s just whatever differences between Babel 6 and 7 are relevant to the user’s code that they’re transpiling, which I think is a separate matter from CoffeeScript? Unless there are any common patterns that the compiler generates (like `results` arrays or executable class bodies) that are suddenly transpiled differently in Babel 7, but I can’t think of any that would be. But I encourage other voices to answer this, it’s a great question.",
      "Neat, I was useful! :)\r\n\r\nI looked over https://babeljs.io/docs/en/v7-migration and didn't see anything that sounded problematic, so I'm fully on-board for this PR. "
    ],
    "commit_messages": [
      "Babel 7 (#5105)\n\n* Port to Babel 7\r\n\r\nUse the Babel 7 @babel/core transpiler, falling back to the older babel-core version if possible.\r\n\r\n* Use Babel 7 and preset-env 7 to build the browser compiler and test Babel transpilation\r\n\r\n* Update docs for Babel 7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc183a21fa1e1f1a9e0d",
    "number": 5104,
    "body": "* `src/lexer.coffee`\r\n  * Add `/^\\d+n/` as valid numeric literal syntax\r\n  * Allow trailing `n` on binary, octal and hex literals\r\n* `test/numbers_bigint.coffee`\r\n  * BigInt exists\r\n  * `42n` equals  `BigInt 42`\r\n  * `42n` equals `0b101010n`\r\n  * `42n` equals `0o52n`\r\n  * `42n` equals `0x2an`\r\n* `Cakefile`\r\n  * skip `test/numbers/bigint.coffee` if `1n` isn't valid and true.\r\n\r\nTested in node v6, v8, v9 and v10.",
    "head_branch": "bigint",
    "is_a_fork": true,
    "comments": [
      "I just noticed #5103 also listed binary, octal and hex input formats as valid, so I'll add those now and update the PR.",
      "Thanks for this, though according to https://github.com/tc39/proposal-bigint and the link you posted BigInt literals are currently at Stage 3. We can keep this PR open until the feature reaches Stage 4.",
      "Now that the referenced PR has been merged is it considered Stage 4?",
      "Yes, it’s reached Stage 4, and Node supports the syntax now as well. Any updates needed before this merges in? @helixbass?",
      "Hey, CI passed! Is this ready to merge in?\r\n\r\nCan you please add Node 12 to `.travis.yml` and `appveyor.yml`? Just see where `10` is listed and do the same for `12` just below it. If CI still passes in 12 and no one has any other notes, I assume this is good to merge."
    ],
    "commit_messages": [
      "Fix #5103: Add support for BigInt literals (#5104)\n\n* Fix #5103: Add support for BigInt literals\r\n\r\n* Fix typos found in testing\r\n\r\n* Support binary, octal and hex BigInt literals\r\n\r\n* Make decimal BigInt test consistent other bases\r\n\r\n* Correct test BigInt test names\r\n\r\n* Add Node versions to CI"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfc193a21fa1e1f1a9e0e",
    "number": 5102,
    "body": "Use the Babel 7 @babel/core transpiler, falling back to the older babel-core version if possible.\r\n\r\n<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttps://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a\r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by\r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in\r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in\r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](https://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Cakefile needs some love too I think?\r\n\r\n```diff\r\n@@ -67,7 +67,11 @@ build = (callback) ->\r\n   buildExceptParser callback\r\n\r\n transpile = (code) ->\r\n-  babel = require 'babel-core'\r\n+  try\r\n+    babel = require '@babel/core'\r\n+  catch\r\n+    babel = require 'babel-core'\r\n+\r\n   presets = []\r\n   # Exclude the `modules` plugin in order to not break the `}(this));`\r\n   # at the end of the `build:browser` code block.\r\n```",
      "> Cakefile needs some love too I think?\r\n\r\n`Cakefile` is only run by someone who’s checked out the CoffeeScript repo, and therefore will have whatever dependencies and `devDependencies` are defined in CoffeeScript’s `package.json`. We should update CoffeeScript itself to use Babel 7 and `@babel/core`, and then also update `Cakefile` accordingly. We don’t need to support either `babel-core` or `@babel/core` in the `Cakefile`, though, as either one or the other will be specified in `package.json`."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc1a3a21fa1e1f1a9e0f",
    "number": 5099,
    "body": "@GeoffreyBooth this PR includes extended generic AST generation defaults and hooks, as well as customized AST output for some \"leaf\" types\r\n\r\nThis branch is based on `range-location-data` (#5098), [here](https://github.com/helixbass/copheescript/compare/range-location-data...ast-generation-hooks) is the diff until it gets merged/rebased",
    "head_branch": "ast-generation-hooks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "AST generation hooks (#5099)\n\n* include range in location data\r\n\r\n* use exclusive ranges\r\n\r\n* ast generation hooks\r\n\r\n* fix getAstChildren()\r\n\r\n* babylon -\r\n\r\n* isArray -> Array.isArray\r\n\r\n* pass options to toJSON()\r\n\r\n* default astType on Base\r\n\r\n* using exclusive range\r\n\r\n* extract location data tests\r\n\r\n* babylon -> ast\r\n\r\n* remove do ->\r\n\r\n* _toAst -> getAstContent\r\n\r\n* Pass through parsed number value from lexer to node; don't process more than is necessary (a number literal can never be negative, because the negative sign is an Op token and node)\r\n\r\n* normalize NumberLiteral values\r\n\r\n* use parsedValue in getNumberValue()\r\n\r\n* recursive getNumberValue()\r\n\r\n* parseNumber()\r\n\r\n* The core JavaScript Number constructor does a better job at parsing strings into numbers than our helper does\r\n\r\n* Use Object.assign rather than merge or extend\r\n\r\n* Update link\r\n\r\n* Cleanup style\r\n\r\n* Refactor to make AST generation more object-oriented: have each of the AST properties be generated on the node itself, rather than in loops in the base class\r\n\r\n* Untangle test helpers: give the AST location tests their own specific helper function, and move the general AST helper functions into the main AST tests file\r\n\r\n* Not passing o\r\n\r\n* Add node type check to AST location data tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc1b3a21fa1e1f1a9e10",
    "number": 5098,
    "body": "@GeoffreyBooth here's a first PR carved off my `prettier` branch:\r\n\r\nWe'll need to include `range`s (the raw, `0`-based character indexes in the file) for Babel-style node location data (as expected by eg Prettier). So this PR updates our location data objects to include `range: [<start-index>, <end-index>]`\r\n\r\nThe \"end range\" (ie `range[1]`) here is *inclusive*, while the one expected by Babel is *exclusive* (eg here a single-character identifier `x` might have `range: [1, 1]` while Babel would expect `[1, 2]`). I believe I did it this way to be compatible with Jison's ranges. We'll have fixed places where our location data objects get converted to Babel-style location data, so that's where we'll convert inclusive -> exclusive end range\r\n\r\nI haven't exposed the ranges on the generated ASTs yet - the next PR will probably extend the generic AST node generation logic and that's where it'll make sense to include that\r\n\r\nSince it's not exposed here, it's not the easiest to test - I'd recommend debug-logging the root node object from eg `Block::compileRoot()` and inspecting the dumped node objects' location data, which should include `range`s (corresponding to their `first_line`/`first_column`/`last_line`/`last_column`). There'll actually be a lot of location-data-related stuff in these AST PRs, so will for sure be including related tests as we go",
    "head_branch": "range-location-data",
    "is_a_fork": true,
    "comments": [
      "Why have two styles of ranges at all? If we weren’t using ranges previously, why not output only the exclusive ranges that Babel and Prettier expect?"
    ],
    "commit_messages": [
      "use exclusive ranges"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc1c3a21fa1e1f1a9e11",
    "number": 5097,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttps://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a\r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by\r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in\r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in\r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](https://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\n",
    "head_branch": "ast-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "AST tests (#5097)\n\n* fix momentum scrolling on iOS (#5083)\r\n\r\n* Revert \"fix momentum scrolling on iOS (#5083)\" (#5084)\r\n\r\nThis reverts commit 812571843cd9c23b2746c6e67429c1a3a0f6cec9.\r\n\r\n* AST tests (WIP)\r\n\r\n* added tests\r\n\r\n* cleanup\r\n\r\nnew helpers for cleaner code\r\n\r\n* more tests\r\n\r\ntests are mostly complete now.\r\nalso included one for our helper function.\r\n\r\n* string quotes\r\n\r\n* Update dependencies; disable some babel-minify transforms to work around https://github.com/babel/minify/issues/893 (#5095)\r\n\r\n* more tests + refactor\r\n\r\n* Remove unused helper function; improve logging output\r\n\r\n* Add tests for ImportNamespaceSpecifier, Expansion; cleanup\r\n\r\n* CI: Test first before building, so that the tests run on the committed, built files in /lib; the build parts of CI are only a test that the build process succeeds, so we shouldn't be testing the output of the CI build steps"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc1d3a21fa1e1f1a9e12",
    "number": 5096,
    "body": "As this example is about functions automatically returning their final value, you probably want this expression to be an actual function.\r\n\r\n\r\nNew output:\r\n![coffee](https://user-images.githubusercontent.com/12675470/44142908-1277b900-a082-11e8-88c5-2cf82f4e41f3.png)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "I’m not sure about this. The first paragraph might mention only functions, but the section overall talks about how almost everything in the language is an expression. The `eldest` line is an example of how a ternary assignment is also an expression.",
      "It's actually more important than that — in JavaScript, `if/else` is a statement. You can't pass a complex `if/else` as a value. In CoffeeScript, you can. That's what the example is showing.",
      "Maybe the example should be a little more complex, then? Because the JavaScript it maps to is almost identical:\r\n\r\n```coffee\r\neldest = if 24 > 21 then \"Liz\" else \"Ike\"\r\n```\r\n```js\r\neldest = 24 > 21 ? \"Liz\" : \"Ike\";\r\n```\r\n\r\nand therefore it doesn’t look much like “a complex`if`/`else`.”",
      "If you prefer!\r\n\r\nExamples are usually exemplary ... but hey",
      "The `eldest` example looks like an expression to me _in JavaScript._ Perhaps an example where it’s clearly a statement in JavaScript would get the point across better.\r\n\r\nDon’t ask me for such an example though 😄",
      "maybe [#try](https://coffeescript.org/v2/#try:eldest%20%3D%20switch%20student.age%0A%20%20when%2024%20then%20%22yes%22%0A%20%20when%2023%20then%20%22almost%22%0A%20%20else%20%22no%22):\r\n```coffee\r\neldest = switch student.age\r\n  when 24 then \"yes\"\r\n  when 23 then \"almost\"\r\n  else \"no\"\r\n```\r\nwhy does that compile to a function btw? seems unneccessary.",
      "Easier compilation really"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc1e3a21fa1e1f1a9e13",
    "number": 5095,
    "body": "Update dependencies; disable some babel-minify transforms to work around https://github.com/babel/minify/issues/893\r\n",
    "head_branch": "update-dependencies",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update dependencies; disable some babel-minify transforms to work around https://github.com/babel/minify/issues/893 (#5095)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc1f3a21fa1e1f1a9e14",
    "number": 5088,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttps://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a\r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by\r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in\r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in\r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](https://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc203a21fa1e1f1a9e15",
    "number": 5084,
    "body": "Reverts jashkenas/coffeescript#5083\r\n\r\n@paulnta Your patch makes the navbar disappear, at least on my iPhone. I thought it was something about rawgit.com when I tested your branch, so I merged your PR in anyway, but now I see the same issue on the live site. Reverting until we can get a patch that doesn’t lose our nav.\r\n",
    "head_branch": "revert-5083-patch-docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Revert \"fix momentum scrolling on iOS (#5083)\" (#5084)\n\nThis reverts commit 812571843cd9c23b2746c6e67429c1a3a0f6cec9."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc213a21fa1e1f1a9e16",
    "number": 5083,
    "body": "This fixes an issue with momentum scrolling on iOS.",
    "head_branch": "patch-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix momentum scrolling on iOS (#5083)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc223a21fa1e1f1a9e17",
    "number": 5081,
    "body": "@GeoffreyBooth this is a small Prettier-related one:\r\n\r\nI've gotten basic comment printing working in Prettier so am now starting to go through their JS comment tests to try and match case-by-case. They have tests for comments preceding param default values (on their own lines). While we allow linebreak/indent after `=` for regular assignments, currently our grammar doesn't allow it for param default assignments. I don't see any reason why it shouldn't be allowed?\r\n\r\nThis would be a good candidate to get targeted to eg an `ast` branch if you want to proceed that way?",
    "head_branch": "linebreak-param-default",
    "is_a_fork": true,
    "comments": [
      "Doesn’t this allow for e.g. `(a = ; 5) ->`?",
      "@vendethiel that appears not to work, I guess analogously to how `a = ; 5` doesn't work, though didn't dig into why either one doesn't (since if `;` simply corresponds to `TERMINATOR` you'd think it would)",
      "The fix for that probably is at work here. Good :)!",
      "Agreed on the `ast` branch, I’ll get to work on that.\r\n\r\nThis is terribly ugly syntax:\r\n\r\n```coffee\r\n(\r\n  q =\r\n  a,\r\n  @p =\r\n    b\r\n) -> q\r\n```\r\n\r\nI assume Prettier isn’t going to output anything so atrocious?\r\n\r\nBut back to the original point, this is invalid JavaScript:\r\n\r\n```js\r\nfunction foo(a; b) {}\r\n```\r\n\r\nJavaScript of course allows linebreaks because it’s whitespace insignificant, but we aren’t. Our linebreaks are equivalent to JS’ semicolons. If a semicolon isn’t allowed here, shouldn’t our linebreak be similarly disallowed?",
      "@GeoffreyBooth it's not a syntax I've ever desired. The arguments I could see for allowing it are:\r\n- consistency with regular assignment allowed syntax (where we allow linebreaks after `=` in a place where a JS semicolon would be invalid)\r\n- looking at the Prettier tests which prompted this, I can see how perhaps someone would want to have a descriptive leading comment before a default value. But in fact, you're correct that Prettier considers this ugly, it flattens it out and prints the comment as trailing after the default value (all inline)",
      "> If a semicolon isn’t allowed here, shouldn’t our linebreak be similarly disallowed?\r\n\r\nBut we do allow a semicolon here: `(a; b = f ooo, bar; c) ->` is perfectly valid coffee, just like replacing those `;` with a newline is.",
      "newlines also mean commas in array/object literals\r\n```coffee\r\n[\r\n  1\r\n  2\r\n  a: {\r\n    b\r\n    c\r\n  }\r\n]\r\n```\r\nbtw the [output for this](https://coffeescript.org/v2/#try:%5B%0A%20%201%0A%20%202%0A%20%20a%3A%20%7B%0A%20%20%20%20b%0A%20%20%20%20c%0A%20%20%7D%0A%5D%0A) looks a bit off atm",
      "@helixbass Do you want to resolve conflicts so we can finish this?\r\n\r\nAfter this, what remains before the `ast` branch can produce a full AST?",
      "@GeoffreyBooth this one didn't seem clear-cut as to whether there was support/need to allow it?\r\n\r\nBut ya these have been most of the obvious \"smaller chunks\" towards AST support. I'm on a project right now so have been a bit less active but have been adding comments support to the Prettier plugin. Preserving herecomment spacing is one more small one that I haven't done. But then at that point it's probably time to start looking at how to land some of the bigger pieces of AST generation functionality that's currently on my `prettier` branch\r\n\r\nAny interest in a call to discuss approaches to moving forward with that? I figured that once I feel like it's \"feature complete\" on that branch, I could start looking at its current state and trying to carve out individually reviewable chunks. Also not sure about approaches to testing AST generation, as I've effectively been using the Prettier plugin as my point of testing its accuracy/completeness",
      "@helixbass Sorry to not reply sooner.\r\n\r\n> this one didn’t seem clear-cut as to whether there was support/need to allow it?\r\n\r\nAgreed. If it’s not needed for AST output or Prettier support, it’s best to leave it until after we get those features out the door I think.\r\n\r\nAs for tests, I started working on some AST tests: https://github.com/GeoffreyBooth/coffeescript/blob/ast-tests/test/abstract_syntax_tree.coffee. The method I’ve been using so far has been to take a string of CoffeeScript code, send it through the compiler with `ast: yes` set to get AST nodes back, and then inspect the nodes that we get to see if they’re as expected. It’s just a bit tedious as there are 67 node types to test for, basing off the classes in `nodes.coffee`. I’ve started it, but there are many to go. (@zdenko or @vendethiel or @Inve1951 or anyone else who might want to contribute to this effort, [this branch](https://github.com/GeoffreyBooth/coffeescript/tree/ast-tests) is a great low-effort way to do so!)\r\n\r\nA call would be great, I’ll contact you privately to set that up. If anyone else is interested in contributing to the AST/Prettier effort, please let me know and I’ll invite you.",
      "@GeoffreyBooth looking good, i'll try to find time for it later today / this weekend.",
      "Just an update to this conversation:\r\nAST tests have been written and were merged into coffeescript/ast branch in #5097.",
      "@Inve1951 thanks, I've gotten my `prettier` branch up-to-date with the latest `ast`. Just opened #5099, which is the first PR (against `ast`) that starts to include AST generation support for some specific node types, as discussed I'm using your tests for those node types as a starting point for having \"in-house\" tests of the generated ASTs",
      "Reopened as #5278 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc233a21fa1e1f1a9e18",
    "number": 5079,
    "body": "@GeoffreyBooth I ran into the need to preserve empty interpolations (`#{}`) for Prettier, so figured it was a good excuse to do the refactoring of interpolated strings that you [suggested](https://github.com/jashkenas/coffeescript/pull/5057#issuecomment-388678970)\r\n\r\nThis is currently based on my `preserve-string-literal` branch (#5057), see [here](https://github.com/helixbass/copheescript/compare/preserve-string-literal...preserve-empty-interpolations) for now for the diff of just this branch, or once that gets merged I can rebase/retarget to `master`",
    "head_branch": "preserve-empty-interpolations",
    "is_a_fork": true,
    "comments": [
      "Thanks for taking this on, it brings me unreasonable joy to see the string-related parts of the lexer refactored and moved into the nodes classes.\r\n\r\nI’m thinking we should make a new branch on the main repo for you to target these refactoring PRs against. The new branch would itself get merged into `master` only when it adds a new feature that makes sense to release. I think that new feature would be when CoffeeScript can produce an AST. Prettier support would come from a PR into Prettier, based on this new AST. Having a new `ast` branch on the main repo lets us keep doing these PRs as bite-size efforts, without this big refactor holding up unrelated bugfixes like the ones that just went out in 2.3.1. What do you think?",
      "@GeoffreyBooth that sounds like a good idea if you're up for reviewing the AST-related PRs to the extent of feeling comfortable merging them into the `ast` branch\r\n\r\nAnd ya if you keep pinging me about things ready to get merged into `master` that could have implications for the AST stuff like you just did for #5006 (even if just likely merge conflicts/things that may need AST support) that should help keep the `ast` branch from drifting away from `master`",
      "Alright, that’s all I’ve got. Thanks for all the effort!"
    ],
    "commit_messages": [
      "Preserve empty interpolations (#5079)\n\n* pass quote through grammar\r\n\r\n* pass through initialChunk/finalChunk\r\n\r\n* passing tests\r\n\r\n* always unwrap string object\r\n\r\n* fixes from code review\r\n\r\n* preserve passthrough literals\r\n\r\n* cleaner approach\r\n\r\n* only wrap when data\r\n\r\n* shift more string formatting into nodes\r\n\r\n* RegexWithInterpolations wrap Call\r\n\r\n* preserve heregexen\r\n\r\n* fixes per code review\r\n\r\n* fix merge\r\n\r\n* fix from code review\r\n\r\n* fixes from code review\r\n\r\n* passing tests\r\n\r\n* fixes from code review\r\n\r\n* just define in nodes\r\n\r\n* fix from code review\r\n\r\n* add comment for toPrimitiveString()\r\n\r\n* fix from code review"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc243a21fa1e1f1a9e19",
    "number": 5072,
    "body": "Fixes #5054 \r\n\r\nFollows the same pattern as eg #4599 to allow `yield` to take an indented object",
    "head_branch": "yield-implicit-object",
    "is_a_fork": true,
    "comments": [
      "Looks good to me. @zdenko or anyone else have any notes?"
    ],
    "commit_messages": [
      "Allow yield indented object (#5072)\n\n* allow yield indented object\r\n\r\n* allow await indented object\r\n\r\n* fixes from code review"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc253a21fa1e1f1a9e1a",
    "number": 5070,
    "body": "@GeoffreyBooth in playing with whether [`INDENT_SUPPRESSOR`](https://github.com/jashkenas/coffeescript/pull/5068) could be used for chaining, I came across #4666/#4672, where the consensus was that a grammar-based solution for handling chained `do` IIFE eg:\r\n```\r\ndo ->\r\n  a\r\n.b\r\n```\r\nwould be better than the rewriter-based one added in those PRs\r\n\r\nAt this point I was comfortable tackling a grammar-based solution, so this PR removes that rewriter pass and instead adds tagging in the lexer to distinguish `DO` (not followed by IIFE) from `DO_IIFE` and grammar rules for both (and assigns higher precedence to `DO_IIFE`) - this should be more or less what @jashkenas was [pushing for](https://github.com/jashkenas/coffeescript/pull/4666#issuecomment-325776253)",
    "head_branch": "do-iife-grammar",
    "is_a_fork": true,
    "comments": [
      "@helixbass Do you want to resolve the conflicts so we can wrap this up?",
      "@GeoffreyBooth ok merged `ast`",
      "This looks good to me. @zdenko or @vendethiel or anyone else, any notes?"
    ],
    "commit_messages": [
      "Chained do IIFE: use grammar, not rewriter (#5070)\n\n* grammar rules for DO/DO_IIFE\r\n\r\n* remove rewriter pass"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc263a21fa1e1f1a9e1b",
    "number": 5069,
    "body": "https://rawgit.com/GeoffreyBooth/coffeescript/release-2.3.1/docs/v2/index.html\r\n\r\n*   Returning a JSX tag that is adjacent to another JSX tag, as opposed to returning a root JSX tag or fragment, is invalid JSX syntax. Babel throws an error on this, and now the CoffeeScript compiler does too. #5049\r\n*   Invalid indentation inside a JSX interpolation (the middle of `<tag>{ ... }</tag>`) now throws an error. #5056\r\n*   The browser compiler, used in [Try CoffeeScript](https://coffeescript.org/#try) and similar web-based CoffeeScript editors, now evaluates code in a global scope rather than the scope of the browser compiler. This improves performance of code executed via the browser compiler. #5047\r\n*   Syntax cleanup: it is now possible for an implicit function call to take a body-less class as an argument, and `?::` now behaves identically to `::` with regard to implying a line continuation. #5053, #5048\r\n\r\nOther changes that don’t rise to the level of changelog newsworthiness:\r\n\r\n*   Refactor of how the changelog Markdown files are structured and assembled, to make the changelog organized symmetrically as the other sections so that it can be indexed easily for our upcoming docs search feature. I also standardized the heading tags (`h2` and `h3` as appropriate). #5067\r\n*   Refactor of the code that attaches comments to tokens after parsing, to make it clearer what’s going on; and cleanup of the text of various comments. #5063.\r\n*   Update the docs to use http**s**://coffeescript.org.\r\n*   Fix the ASCII art of the README so that it doesn’t break on npmjs.org (hopefully).\r\n\r\n@zdenko @helixbass ",
    "head_branch": "release-2.3.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "2.3.1 (#5069)\n\n* Update links to use https://coffeescript.org\r\n\r\n* 2.3.1 changelog\r\n\r\n* Bump version to 2.3.1; update output\r\n\r\n* Forgot one\r\n\r\n* Another one\r\n\r\n* Lock Babel versions for Node 6 build to succeed, until Babel 7 is out"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc273a21fa1e1f1a9e1c",
    "number": 5068,
    "body": "@GeoffreyBooth I’ve been thinking about Prettier and formatting of long logical conditions (including your expressed opinion that you don’t like breaking lines after `and`/`or`)\r\n\r\nOne of the few things I’ve consistently wished that I could do in Coffeescript was to lead subsequent lines with the logical operator rather than have to break after the logical operator at the end of the line - I find it much easier to digest the “shape” of the logical expression if I don’t have to look to the ends of the lines to see how they relate logically\r\n\r\nAnd in looking at code I’m formatting with the Prettier plugin, what I would like to see as “pretty” formatting would be when breaking long logical expressions, to lead lines with the logical operator. Eg instead of this which Prettier is currently generating (I have it breaking lines at logical operators similarly to how Prettier for JS does it - if you really don’t want to break long lines at logical operators, that’s something that we could easily add an option for):\r\n```coffee\r\nshouldOmitBracesButNotIndent =\r\n  (parent.type is 'ExpressionStatement' and\r\n    grandparent.type is 'ClassBody') or\r\n  (parent.type is 'ArrayExpression' and parent.elements.length is 1) or\r\n  isObjectPropertyValue path, {stackOffset, last: yes}\r\n```\r\nI’d like to see it formatted like this:\r\n```coffee\r\nshouldOmitBracesButNotIndent =\r\n  (parent.type is 'ExpressionStatement'\r\n    and grandparent.type is 'ClassBody')\r\n  or (parent.type is 'ArrayExpression' and parent.elements.length is 1)\r\n  or isObjectPropertyValue path, {stackOffset, last: yes}\r\n```\r\nTo me that’s *way* easier to follow the logical flow\r\n\r\nAnd I’d never realized it’s a simple change to allow this long-desired (by me) feature, just making the logical operators be `LINE_CONTINUER`s. It wouldn’t break existing code, since no valid lines could currently begin with `and`(space)/`or`(space)/`&&`/`||`\r\n\r\nPS the code snippet above is from the Prettier plugin printer source, which I’ve been writing in JS but have hacked together a very primitive version of `es2coffee` ([repo](https://github.com/helixbass/es2coffee), built as a Babel plugin that feeds its transformed AST to the Prettier plugin) which can transform it to Coffeescript pretty well - the decision to make our AST types as similar as possible to Babel AST types has proven beneficial",
    "head_branch": "allow-leading-logical-operators",
    "is_a_fork": true,
    "comments": [
      "I’m still more of the mindset that using line continuers like `and` to imply a line continuation, rather than making it explicit with the `\\` operator, is hacky and bad style. Either let your line keep going and going (and use soft word wrap in your editor) or use `\\`. But I’m not sure I’m in the majority on this one.\r\n\r\nSince this _is_ possible with `and` etc. at the end of the line, it seems reasonable to also allow it at the start. That doesn’t mean I think Prettier should automatically format like this; that’s another discussion. One of the other tenets of Prettier is that it’s opinionated, so we shouldn’t have too many options for people to have to wade through.",
      "> One of the few things I’ve consistently wished that I could do in Coffeescript was to lead subsequent lines with the logical operator rather than have to break after the logical operator at the end of the line.\r\n\r\nSame here.\r\n\r\nThere's an addition I'd love to see here which is indentation sensitive line continuation similar to leading dot property accessor. Consider this:\r\n\r\n```coffee\r\nbGreets =\r\n  /^hello/i.test myString\r\n  and\r\n    /\\s+world$/i.test myString\r\n    or /\\s+coffee$/.test myString\r\n  or\r\n    /^goodbye$/.test myString\r\n```",
      "FWIW, I think it makes sense to allow any binary operator, when placed at the beginning or end of a line, to parse as a continuation of the preceding or following line...",
      "I would also warn that the leading dot chaining notation, e.g.\r\n```coffee\r\nfoo()\r\n.then fn\r\n.catch handleError\r\n```\r\nHas been the largest source of bugs in CoffeeScript’s history. The more things that cause line continuation, the more potential trouble that gets caused, e.g.:\r\n```coffee\r\nfoo()\r\n.then fn() and\r\n  otherFn()\r\n  .then yetAnotherFn # Does this chain off of foo() or otherFn()?\r\n```\r\nThe problem is that suddenly whitespace is insignificant here. You can indent or not and it doesn’t matter. It’s hard for users to follow what implied line continuation matches with what, and it goes against the general philosophy that indentation should inform these things.\r\n\r\nSince `and` already implies a line continuation, it’s not terrible to allow it to do so from the start of a line rather than the end. But I would encourage us not to keep adding ways to imply a line continuation, as it’ll keep creating new issues like we’ve seen with leading dot.",
      "@GeoffreyBooth you're right `LINE_CONTINUER` is sort of inherently problematic. So I thought about it a bit more and reimplemented to use a primarily grammar-based solution\r\n\r\nBasically it adds rules for `Expression TERMINATOR && Expression` and `Expression TERMINATOR || Expression`. This caused a grammar ambiguity so I added a rewriter pass to convert eg `TERMINATOR &&` -> `LEADING_&&` and the grammar rule is actually `Expression LEADING_&& Expression`. It's possible there's some grammar cleverness that could avoid the ambiguity, but it's a simple rewriter pass\r\n\r\nThen, since the desired behavior (sort of like chaining) is to be able to either align or indent the leading-logical lines (ie both of these should be ok):\r\n```\r\na\r\nand b\r\n```\r\n```\r\na\r\n  and b\r\n```\r\n, instead of making the leading-logical regex be a `LINE_CONTINUER`, I made it a new `INDENT_SUPPRESSOR` - basically then a `TERMINATOR` will be generated rather than an `INDENT` even if the line is indented\r\n\r\nThis has proved to work well for the cases I've come up with (added a bunch of tests involving things like `if` blocks, implicit objects/calls, functions with inline/indented bodies), everything seems to be behaving in accordance with what the indentation implies. It does close open implicit calls/objects in an intuitive way with respect to indentation by virtue of the rewriter pass coming after `addImplicitBracesAndParens()` (so the `TERMINATOR` triggers closing them before being rewritten away)\r\n\r\n> I think it makes sense to allow any binary operator, when placed at the beginning or end of a line, to parse as a continuation of the preceding or following line\r\n\r\n@jashkenas it'd be great to be able to lead lines with any binary operator as the same readability benefits apply (you can just scan the left side of the expression to get a sense of its \"shape\"). But I got scared off thinking about potential tricky cases eg continuing `/` vs regex, continuing `+`/`-` vs unary , as well as knowing that `LINE_CONTINUER` is kind of a hack. But maybe if this grammar-based approach proves sound we could allow it for some unambiguous binary operators as well. The only other thing I'd worry about is that by allowing a lot of leading-continuer \"symbols\" we could potentially be blocking the way for some future language constructs that would want to use those symbols as leading tokens\r\n\r\n@Inve1951 with this branch you couldn't write your example exactly as written - for one thing you couldn't indent the clause after \"standalone\" `and`/`or` (which I don't hate the look of but it kind of reads as a \"block\"). Also are there implied parens around the inner `or` because it's \"nested\" inside the `and`? If so, again I don't hate how it looks but that's a rather complex and specialized indentation style/rule that'd have to be supported",
      "> @Inve1951 with this branch you couldn't write your example exactly as written - for one thing you couldn't indent the clause after \"standalone\" and/or (which I don't hate the look of but it kind of reads as a \"block\"). Also are there implied parens around the inner or because it's \"nested\" inside the and? If so, again I don't hate how it looks but that's a rather complex and specialized indentation style/rule that'd have to be supported\r\n\r\n@helixbass correct. The indented _block_ after standalone `and` implies parens in my example. I think that's a very straight forward and readable way to write it. I'm aware that in order to support this there's probably a lot of work involved. I brought it up right away to avoid a breaking change when considering this later only.\r\n\r\nSpeaking of which, that would already be a [breaking change](http://coffeescript.org/v2/#try:bTest%20%3D%20%0A%20%20abc%20and%0A%20%20%20%20d%20or%20g). :confused: ",
      "@Inve1951 here's the code you linked to:\r\n```\r\nbTest = \r\n  abc and\r\n    d or g\r\n```\r\nTo be clear, this PR isn't a \"breaking change\" with regards to this example nor should it be a breaking change at all\r\n\r\nIf you're saying that your proposed \"indented `or` clause implies parens\" syntax is breaking then ya I'd say this is a good example of why that syntax, while perhaps convenient, would be at the very least confusing with regards to existing syntax. I don't think there's a great way around the fact that someone can indent in a misleading way like in the above example (which implies `abc and (d or g)` but in fact is equivalent to `(abc and d) or g`). Although I'll say that using Prettier helps point it out by both explicitly parenthesizing mixed `and`/`or` expressions for you and for longer expressions using indentation to help show the shape of the parsed expression. Eg the Prettier plugin I'm working on formats your example like:\r\n```\r\nbTest = (abc and d) or g\r\n``` ",
      "This is nice:\r\n\r\n    if someCondition\r\n        and someOtherCondition\r\n        or somethingElse\r\n      doSomething()\r\n\r\nBut the indentation is confusing. I would have thought the block should be more indented than the predicate, like:\r\n\r\n    if someCondition\r\n        and someOtherCondition\r\n        or somethingElse\r\n            doSomething()\r\n\r\nDoes the block need to be less indented?\r\n\r\nThe named `and` and `or` operators complement `if`, making the whole thing more readable. Having other operators, like \r\n\r\n    if someValue\r\n        + foo\r\n        * bar\r\n            doSomething()\r\n\r\nDoesn't have the same appeal. There's a case for limiting this to named logical operators, and (a bit weaker case for) only when they're part of a predicate.",
      "@carlsmith nope the indentation of the continuing lines is up to you (as long as they’re not outdented), eg all of these work:\r\n```coffee\r\nif someCondition\r\nand someOtherCondition\r\nor somethingElse\r\n  doSomething()\r\n```\r\n```coffee\r\nif someCondition\r\n  and someOtherCondition\r\n  or somethingElse\r\n    doSomething()\r\n```\r\n```coffee\r\nif someCondition\r\n  and someOtherCondition\r\n  or somethingElse\r\n  doSomething()\r\n```\r\n```coffee\r\nif someCondition\r\n    and someOtherCondition\r\n      or somethingElse\r\n  doSomething()\r\n```",
      "@helixbass The third example shouldn’t work. [This is invalid today](http://coffeescript.org/#try:if%20someCondition%20and%0A%20%20someOtherCondition%20or%0A%20%20somethingElse%0A%20%20doSomething()):\r\n\r\n```coffee\r\nif someCondition and\r\n  someOtherCondition or\r\n  somethingElse\r\n  doSomething()\r\n```",
      "@GeoffreyBooth ya I noticed that behavior with respect to chaining. While obviously it's a poor choice to \"indent\" the continuations the same as the following indented block, it also feels inconsistent that every other indentation is allowed:\r\n```\r\nif a\r\n.b\r\n  c\r\n```\r\n```\r\nif a\r\n .b\r\n  c\r\n```\r\n```\r\nif a\r\n    .b\r\n  c\r\n```\r\nbut just that one (where the indentation \"happens to match up\") fails:\r\n```\r\nif a\r\n  .b\r\n  c\r\n```\r\n\r\nI also wasn't sure exactly what was causing the current behavior (for chaining or your example), I'm guessing it's that `LINE_CONTINUER` does this when it sees what would be an indent:\r\n```\r\n@indebt = size - @indent unless backslash\r\n```\r\nwhich I haven't fully thought through but seemed questionable\r\n\r\nSo if it's desirable to preserve this behavior (of failing if you try to \"indent\" continuation lines the same as the following actual indent) then I'll look more closely at how `LINE_CONTINUER` currently achieves that and think about whether there's a better way to implement it for `INDENT_SUPPRESSOR`",
      "I’m not sure what’s desirable. I think the whole idea of indentation being insignificant strikes me as wrong, that we’re going against a core tenet of the language.",
      "@GeoffreyBooth I understand the unease. I do think that for both chaining and this, it makes sense to be flexible as far as how continuation lines are \"indented\", ie it wouldn't be a great idea syntax-wise to enforce a rigid \"you have to align continuation lines with the initial line\" or \"you have to indent continuation lines consistently with respect to the initial line and a possible following indented block\". So I think the mechanism here (`INDENT_SUPPRESSOR`) is at least an improvement as far as reducing the amount of non-grammatical magic/special-casing\r\n\r\nI believe Python works this way, where once you're continuing a line, indentation is not as strict\r\n\r\nI think the important questions then are whether there are strange interactions around these features that could be handled better. On a separate branch, I've been trying applying `INDENT_SUPPRESSOR` to chaining (so basically getting rid of `LINE_CONTINUER`) and it did basically work (as far as passing existing tests) and simplified code. But it seems clear the biggest edge case is around implicit objects eg\r\n```\r\na: b\r\n    .c()\r\n```\r\nIf you see eg #4533, this has already been kind of an issue. But it's still wildly inconsistent, it only seems to apply the chain to the preceding object-property value if it's a non-initial property of a multi-property object, eg the above is currently equivalent to `{a: b}.c()`. While this:\r\n```\r\na: b\r\nc: d\r\n    .e()\r\n```\r\nis equivalent to `{a: b, c: d.e()}`. And this:\r\n```\r\na: b\r\n    .c()\r\nd: e\r\n```\r\nis equivalent to `{a: b}.c(); {d: e}`\r\n\r\nSo in thinking about how to handle the equivalent case for leading logical operators (which we haven't defined the behavior of yet) and at least in theory how it should work for chaining I'd propose:\r\n- the better choice between whether the chain/logical operator applies to the whole object or the preceding value is the preceding value, as use cases for chaining or logical operator following an object seem quite small (logical operators don't make sense, objects are consistently truthy)\r\n- it should be consistent, so all three of the above variants (or their corresponding examples with logical operator continuers rather than chains) should compile into a single object where one of the values was continued\r\n- I should implement that behavior for leading logical operators as part of this branch\r\n- then we should consider whether it'd be worth introducing some breakage at some point to at least make chaining consistent with regards to implicit objects and perhaps migrate chaining to also use `INDENT_SUPPRESSOR`",
      "Detecting such things with regexes has a downside, if very minor:\r\n\r\n```\r\n$ ./bin/coffee -bcs\r\na\r\n  and ::b\r\n\r\n[stdin]:2:1: error: unexpected indentation\r\n  and ::b\r\n^^\r\n```\r\n\r\nAlso while supporting more operators here would be – imho – a good thing, although there's no way to support operators that are both unary and binary.",
      "@vendethiel ah interesting edge case, ya that wouldn't have parsed anyway but it is a slightly unexpected error message. Updated the regex and added a test case\r\n\r\nTo explain more fully for those interested:\r\n\r\nInitially the `INDENT_SUPPRESSOR` regex just looked for leading `and`/`or` followed by whitespace (or `&&`/`||`). Then our `lexer.coffee` happened to contain a case that I hadn't thought of where that is actually a legitimate beginning of a line: `and`/`or` as an object key with whitespace before the `:`, eg `and : 1`. So extended the regex to check that the first non-whitespace character after `and`/`or` isn't `:`\r\n\r\nBut now @vendethiel pointed out an edge case to that edge case: a `:` may not be a `:` token, it might be part of `::` (even though you'd always get parse errors for `and` and `::` as consecutive tokens). So extended the regex to verify that it's a single `:` (not followed by another `:`), so that his example, even though still not valid code, will parse as a continuation and fail on `unexpected ::` rather than `unexpected indentation`",
      "Thanks for the clarification.",
      "@GeoffreyBooth implemented leading-logical-operator-continues-object-property-value behavior per [previous comment](https://github.com/jashkenas/coffeescript/pull/5068#issuecomment-390752039) and merged `ast`, so this should be ready for review",
      "This isn't really required for generating an AST, is it? It's just for making the Prettier output a little prettier?\r\n\r\nIf so, this feels like something we should add in a second phase, once we have regular AST output working. This change could have other side effects that we should study before merging it in.",
      "Hi, for all, thanks for effort in make better ```coffeescript``` but I really thinks that this proposal is not good or necessary. I prefer use explicit ```\\```\r\n\r\n```coffeescript\r\nshouldOmitBracesButNotIndent =\r\n  (parent.type is 'ExpressionStatement' \\\r\n    and grandparent.type is 'ClassBody') \\\r\n  or (parent.type is 'ArrayExpression' and parent.elements.length is 1) \\\r\n  or isObjectPropertyValue path, {stackOffset, last: yes}\r\n```\r\n",
      "Of course it's not necessary but neither are any of the other implicit line continuations; They are nice to have tho.\r\nWhen a line starts with a logical operator it can really only mean one thing so why not support it.\r\n\r\n>I really thinks that this proposal is not good or necessary.\r\n\r\nWhy do you dislike it? I personally crave leading logicals and hope they get added into master. @voxsoftware \r\nNote that your code exampe would still be valid.",
      "@Inve1951 yes, my example is using explicit, I prefer that syntax and avoid errors can inherited from have a non explicit version",
      "Re-opened as #5279 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc283a21fa1e1f1a9e1d",
    "number": 5067,
    "body": "This PR is meant to make #5058 easier.\r\nhttps://rawgit.com/GeoffreyBooth/coffeescript/docs-headings/docs/v2/\r\n\r\n- The changelog entries are now split into separate files, and each one is in its own `<section>` tag like the rest of the docs’ sections; and they use `h3` tags like the other sub-sections do. The HTML structure should be consistent now between sections like Breaking Changes and its children and Changelog and its children.\r\n- I made the dates in the changelog headings formatted in the user’s locale by default. So for US English users they appear the same as before, but a U.K. user should see e.g. “13 May 2018” and a French user “13 mai 2018”. @zdenko, if you have any devices with non-US locale settings, please let me know if it works for you 😄The formatting falls back to ISO, e.g. “2018-05-13”.\r\n- I added separate sidebar links for Introduction and Overview, so that the scrolling to those sections works as expected. This also simplifies the structure, as there aren’t any sections with two `htmlFor` calls (other than for children).\r\n\r\nI considered making a `sectionFor` helper, to slim down `body.html`, but ultimately figured it would be more hassle than it’s worth because of the complexity of how to handle children. Hopefully this isn’t too hard to parse as is.",
    "head_branch": "docs-headings",
    "is_a_fork": true,
    "comments": [
      "LGTM"
    ],
    "commit_messages": [
      "Docs headings and changelog refactor (#5067)\n\n* Changelog sub-sections should use h3, not h2; no need for hack anchor tag anymore\r\n\r\n* Internationalize dates to user’s locale\r\n\r\n* Consistent names\r\n\r\n* Split up the changelog into separate files per version; make HTML markup consistent with the other sections in the docs\r\n\r\n* Fix sidebar links for introduction and overview"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc283a21fa1e1f1a9e1e",
    "number": 5063,
    "body": "#5045 had various improvements to comments and the lexer that were unrelated to that PR’s goal of passing extra token data through the parser. This PR wraps up those unrelated improvements.\r\n\r\n@helixbass @zdenko ",
    "head_branch": "lexer-data-unrelated-improvements",
    "is_a_fork": true,
    "comments": [
      "Thanks @helixbass I made the change you recommended."
    ],
    "commit_messages": [
      "Lexer, helpers and comments cleanup (#5063)\n\n* Move the building of the comments hash into its own function, to make clearer that it only happens once\r\n\r\n* Abstract token comments dictionary\r\n\r\n* Format comments\r\n\r\n* Allow attaching a “data” property to tokens, to allow extra info to pass through the parser into the node classes\r\n\r\n* Add data to StringLiteral tokens such that we should be able to deindent them in the nodes class\r\n\r\n* Update output\r\n\r\n* Another comment fix\r\n\r\n* Add data to every token, with common properties\r\n\r\n* Be more defensive, even though we apparently don't need to be\r\n\r\n* Improve comments\r\n\r\n* Remove the token data property, leaving all unrelated improvements\r\n\r\n* Code review improvements; update output"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc293a21fa1e1f1a9e1f",
    "number": 5059,
    "body": "@GeoffreyBooth @zdenko another WIP similar to #5057: this one preserves the original operator eg `on`/`yes`/`true` or `is`/`==`\r\n\r\nUses the same technique of stashing `.original` on a `new String()` wrapper around the token value. While I followed the same pattern in the node constructor of immediately calling `normalizeStringObject()` to unwrap to a primitive string, I ran into more cases within `lexer.coffee` itself where it wanted to do direct string comparisons against the token value so I had to call `normalizeStringObject()` in other places where it could be wanting to compare to a wrapped `String()`\r\n\r\nI've wired this one up fully with Prettier/AST and am able to see the original operator in reformatted source\r\n\r\nThe only other thing I was thinking of including in this PR was preserving `@` vs `this`? And I guess `::` vs `.prototype`",
    "head_branch": "preserve-aliased-operators",
    "is_a_fork": true,
    "comments": [
      "A couple other things that ultimately will need to be preserved:\r\n- whether the `...` of a splat was prefix or postfix\r\n- whether a function with no params used `() ->` or just `->`\r\n- whether a call used parens or not\r\n\r\nAs well as things like whether the postfix form of `if`/`while`/`for` was used - I've started doing this \"inline\" on my `prettier` branch but can extract into separate PR if it makes sense to, maybe I can group all the ones (like this) that don't require token data-stashing but just require passing a flag to the node constructor in certain grammar rule variants into their own PR",
      "@GeoffreyBooth merged `ast` and updated to use `$1.toString()` pattern in grammar"
    ],
    "commit_messages": [
      "Preserve aliased operators (#5059)\n\n* pass quote through grammar\r\n\r\n* pass through initialChunk/finalChunk\r\n\r\n* passing tests\r\n\r\n* always unwrap string object\r\n\r\n* fixes from code review\r\n\r\n* preserve passthrough literals\r\n\r\n* cleaner approach\r\n\r\n* preserve aliased operators\r\n\r\n* normalize\r\n\r\n* include guard against preserve-string-literal\r\n\r\n* store boolean originalValue\r\n\r\n* preserve not in\r\n\r\n* invert in\r\n\r\n* defer inverting in\r\n\r\n* preserve or=\r\n\r\n* only wrap when data\r\n\r\n* use addTokenData(), unwrap in grammar\r\n\r\n* shift more string formatting into nodes\r\n\r\n* RegexWithInterpolations wrap Call\r\n\r\n* preserve heregexen\r\n\r\n* alias guard for imports\r\n\r\n* preserve invert operator\r\n\r\n* revert Cakefile\r\n\r\n* fixes from code review\r\n\r\n* isInOperator()"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc2a3a21fa1e1f1a9e20",
    "number": 5058,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttp://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a \r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by \r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in \r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in \r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](http://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\nThis PR adds an offline search feature for docs ([preview](https://rawgit.com/zdenko/coffeescript/docSearch/docs/v2/index.html))\r\nDuring the `doc:site` task, search catalogs are build by parsing the content. \r\nTo be able to build the hierarchy of the sections, I've added a `documentation/structure.coffee` which contains the content tree (object). \r\nAnd, to avoid redundant work (i.e., parsing the markdown files), I use the same object to build the main content and sidebar navigation.\r\n\r\nAn element of the structure objects can have folowing keys:\r\n- `id` \\<String> required\r\n- `title` \\<String> required\r\n- `href` \\<String> defaults to \"#id\"\r\n- `html` [\\<String>, ...] a list of documents from `documentation/sections`\r\n- `className` \\<String>  additional class attribute added to the link in the sidebar\r\n- `children` [\\<Structure>,...] a nested structure\r\n\r\nThe search results are still not 100% perfect. Additional fine-tuning of the [search library]((http://fusejs.io)) options are needed to get better results.\r\nAlso, some CSS look and feel changes of the new elements are probably needed as well.",
    "head_branch": "docSearch",
    "is_a_fork": true,
    "comments": [
      "Wow, there’s so much going on here. This obviously took a lot of effort. Thanks for diving into this!\r\n\r\nI’m not sure how I feel about `structure.coffee` and the new `buildBody` and `buildSidebar` functions needed as a result. I feel like we’re moving a lot of logic out of the templates and into code, which makes it harder to reason about the relationship between the final HTML and the original source. That said, there _is_ a lot of duplication between current `master`’s `body.html` and `sidebar.html`. Currently one needs to remember to update both files correctly in order to add a new section, though we add new sections very rarely (new changelog entries don’t count) so this hasn’t been much of a burden.\r\n\r\nOne issue in this PR is that the current `master` sidebar has extra links for mobile: the links from the navbar, that are hidden on mobile, are moved into the sidebar. That’s perhaps a good reason to keep the current template-based approach to generating each file. Also in the other search PR, I had put the search input in the sidebar on mobile, since it’s hidden in the navbar on mobile.\r\n\r\nAnother somewhat fundamental issue is the indexing of the markdown more or less as plain text, rather than parsing it from Markdown into HTML first. This results in ugly backticks in the search results:\r\n![image](https://user-images.githubusercontent.com/456802/39963252-82561b74-561b-11e8-81b8-e031242e8dae.png)\r\n\r\nThis was one of my complaints about the Algolia implementation, that I wanted the inline code blocks rendered as such rather than just plain text (though including bare backticks is worse). Is there a reason we don’t render the Markdown into HTML first and then index the HTML?\r\n\r\nPersonally I think the styling looked better in the other PR. It also had mobile styling. Would you mind if we used that PR’s HTML and styles?\r\n\r\nOther issues:\r\n\r\n- The search suggestions don’t close after clicking one of them, or clicking elsewhere.\r\n- Lots of words that I know are in the docs don’t return any results. “golden”, “snippet”, “stdout”.\r\n- The search term underlining in the suggestions doesn’t correspond with the query.\r\n\r\nI pushed some commits, to try to optimize things and cleanup styles (I try to follow the Coffeelint style rule that you use single quotes for strings unless it’s an interpolated string). But I thought we should discuss before I went any further.",
      "> Wow, there’s so much going on here. This obviously took a lot of effort. Thanks for diving into this!\r\n\r\nYep. Clearly, this is not the best approach, but since I had to combine all of the content, I figured it’s best to open PR earlier to discuss changes.\r\nSo, I made as little changes as possible to provide working features.\r\n\r\n> I’m not sure how I feel about structure.coffee and the new buildBody and buildSidebar functions \r\n\r\nAt first, I had just a simple method in `Cakefile` in which I parsed the body content, and there was no need to change the templates. With this, I had content and bookmarks in the search index.\r\nBut, then I  missed the titles which are in the `sidebar.html` and adding another loop didn’t seem like a smart move.\r\n\r\n`buildSidebar` and ` buildBody` don’t belong in the `Cakefile`.  I’ll rework this and move code back into the templates. At the time, this was the quick and dirty approach to get search working.\r\n\r\nI think, `structure.coffee`, or some form of it, will have to stay, as it’s needed to build the search index “database”. An alternative solution would be HTML scraping and parsing, which, I believe, we don’t need.\r\n\r\n> This results in ugly backticks in the search results:\r\n\r\nYes, the search result should be well-formed HTML and not MD.\r\n\r\n> Is there a reason we don’t render the Markdown into HTML first and then index the HTML?\r\n\r\nTo build a search index, you need text. Parsing MD seems easier than passing HTML thru a bunch of regexes. But, as said, search results should be rendered as HTML.\r\n\r\n> Personally I think the styling looked better in the other PR. It also had mobile styling. Would you mind if we used that PR’s HTML and styles?\r\n\r\nI think I used that one, but I might mess up something :man_facepalming:\r\nSo no, I don’t mind which styling is used.\r\n\r\n> Other issues:…\r\n\r\nYes, I’m aware of these issues. I’m fixing them.\r\n\r\n> I pushed some commits, to try to optimize things and cleanup styles … … But I thought we should discuss before I went any further.\r\n\r\nSure, let me finish few things discussed here, and then run another review.\r\n",
      "Since changes from #5067 improved the structure of the document, I refactored few things in the last commit.\r\n- `structure.coffee`, `buildBody` and `buildSidebar` are removed,\r\n- [cherrio](https://cheerio.js.org) is used to parse the content and build the search collection data.\r\n- The changelog entries are now parsed in the same way as the rest of the document.\r\n- The HTML attribute `data-level` is added to the parent `<section>` tags, and its value is applied to all children. A lower value means a higher order in the search results list.\r\n- `<h2>` tags in entries under the \"Language Reference\" are changed to `<h3>`.\r\n- The search result design is simplified. As we have only two levels of the content, I felt there is no need to show titles in a separate column.\r\n<table>\r\n<tr><td width=\"50%\">before:</td><td width=\"50%\">after:</td></tr>\r\n<tr>\r\n<td><img src=\"https://user-images.githubusercontent.com/1264173/40487944-e263c784-5f65-11e8-892a-867eb84d169d.jpg\"></td>\r\n<td><img src=\"https://user-images.githubusercontent.com/1264173/40487990-fbf7ddf2-5f65-11e8-9be4-5b7e4b506966.jpg\"></td>\r\n</tr>\r\n</table>\r\n\r\nThere are still some tasks on the to-do list:\r\n- The search engine doesn't provide 100% accurate results, so I'll probably replace it with a better alternative.\r\n- Mobile version.\r\n- Design and layout improvements\r\n- &hellip;",
      "I recently started using IRC again after a very long time. The also have a [URL=“https://www.forumkolik.net/“]forum[/URL] that is very informative. [URL=\"https://www.nazarsohbet.com/\"]mobile chat rooms[/URL] provide a [URL=“https://www.sohbeteuro.net/“]friendly[/URL] and [URL=“https://www.seviyeli.net/“]accepting[/URL]\r\nenvironment to those that are looking to engage in conversation. \r\nI would recommend giving them a try."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc2b3a21fa1e1f1a9e21",
    "number": 5057,
    "body": "@GeoffreyBooth @zdenko I started on being able to preserve original string formatting into the nodes tree (eg for passing to Prettier). Haven't handled preserving heregex formatting yet but this should currently be preserving relevant string/heredoc info and all existing tests are passing (had to modify some since now a `STRING` token doesn't include the quotes etc)\r\n\r\nThe basic approach I took to getting the extra data through the grammar was similar to how we expose `generated` to the grammar for object braces: wrap a token-value string (`token[1]`) in a `new String()` object, at which point you can set arbitrary additional properties that will be visible on the token that the grammar sees (eg `$1`)\r\n\r\nSo far haven't tried to emit (via AST)/generate (via Prettier) the original quote eg `'''`/`\"\"\"` (or get it to shift the heredoc indentation level along with the surrounding indentation level, which should be fun), but I have made it so that for a `StringLiteral` that contains a newline, it generates a `TemplateLiteral` AST with the original string value which Prettier then reprints with original spacing/linebreaks intact (on my `prettier` branch/`prettier-plugin-coffeescript` repo)",
    "head_branch": "preserve-string-literal",
    "is_a_fork": true,
    "comments": [
      "I was just about to suggest you unwrap the `String` objects in `grammar.coffee` like `generated` is, but you beat me to it 😄\r\n\r\nPlease take a look at #5063 and hopefully approve merging it in, it has some overlap with what you’re working on here. I’m fine with changing the signature of `makeToken` to take an object, but I’d like to merge #5036 in first and then you can resolve the conflicts as you merge that into this branch.",
      "@GeoffreyBooth ok sure will look at #5063 in a few\r\n\r\nYa I took your suggestions on #5059 and started applying them on this branch (wasn't going to make sense to update both this and that one in parallel, so started here and then rebased #5059 onto this branch), I think we're landing on a much cleaner approach - using `\"#{str}\"` instead of `normalizeStringObject()` is a lot lighter weight, good call\r\n\r\nSo for now #5059 will show you the diff of this branch as well as its own - I guess I (or you since you have permissions) could push this branch to `origin` and then retarget #5059 against it for the time being to keep the diff there to just the relevant changes?",
      "I think it would be easiest to just do things in sequence:\r\n- Merge #5063 into `master`\r\n- Merge `master` into this branch, resolve conflicts\r\n- Finish up this branch/PR, merge it into `master`\r\n- Merge `master` into #5059, resolve conflicts\r\n- Finish up #5059, merge it into `master`\r\n\r\nThere aren’t any breaking changes in any of the three branches, so the changes should be irrelevant to 2.3.1 or any upcoming releases. It’s all just under-the-hood refactoring.",
      "This is another topic for a separate PR, but speaking of simplifying song-and-dances, what about the token salad generated for interpolated strings?\r\n\r\n```bash\r\n$ DEBUG_TOKEN_STREAM=1 coffee -bpe '\"The answer is #{42}!\"'\r\n\r\nSTRING_START/( STRING/\"The answer is \" +/+ (/( NUMBER/42 )/) +/+ STRING/\"!\" STRING_END/)\r\nTERMINATOR/\r\n\r\n`The answer is ${42}!`;\r\n```\r\n\r\nI know this is a really tricky case, as you could have literally any code inside the `#{ ... }` block, so it needs to be re-lexed and so on. But I feel like we should be able to handle it better than generating four fake tokens: `+`, `(`, `)`, `+`. Maybe a new type of grammar, like `INTERPOLATION_START`, could take the place of `(` and `+`, and likewise for `INTERPOLATION_END` and `)` `+`. These new tokens would have the advantage of having actual input to correspond to, namely the `#{` and `}` strings (and `${` / `}` output strings too, if that helps).\r\n\r\nThe current output made more sense when JavaScript lacked template literals, and you were always trying to concatenate the result of an expression into the string, so `+(expressionResult)+` was part of the final output; but that’s not the case anymore. This is also another case of the lexer doing work it shouldn’t be doing, that belongs in the node classes.",
      "Does this branch fix #5019?",
      "Looks good to me. Any notes @zdenko or @vendethiel ?",
      "@GeoffreyBooth closing since this branch was also merged into `ast` with the merge of #5079 (which was based on this branch)"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc2c3a21fa1e1f1a9e22",
    "number": 5056,
    "body": "Fixes #5055 \r\n\r\nSo now eg this compiles:\r\n```\r\n<div>\r\n  {someCondition &&\r\n    <span />\r\n  }\r\n</div>\r\n```\r\n\r\nBasically it was choking on the closing empty `INDENT`/`OUTDENT` pair at the end of the parsed tokens inside the nested `{...}` expression\r\n\r\nSo in `matchWithInterpolations()`, similar to the existing tweaking of `nested` to remove a leading `TERMINATOR`, added a tweaking to remove a closing `INDENT`/`OUTDENT` pair",
    "head_branch": "iss5055_jsx_expression_indentation_bug",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix JSX expression indentation bug (#5056)\n\n* fix JSX expression indentation bug\r\n\r\n* fixes from code review\r\n\r\n* tweak test"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc2d3a21fa1e1f1a9e23",
    "number": 5053,
    "body": "Fixes #5052 \r\n\r\nTweaks `addImplicitBracesAndParens()` to correctly close an inline implicit call which has an argument  that's a class with no body\r\n\r\nSo now eg `f class A` compiles\r\n\r\nThe issue was that it was generating the implicit opening `(` but failing to generate the closing `)` at the end of the line since when it saw `class` it pushed a `CONTROL` token that expected to see an `INDENT`-`OUTDENT` pair before unblocking the closing of the implicit call",
    "head_branch": "iss5052_implicit_call_class_no_body",
    "is_a_fork": true,
    "comments": [
      "this syntax for a function call used in the test is currently a hack\r\n```coffee\r\nf\r\n  b: 1\r\n  class A\r\n  a\r\n```",
      "@Inve1951 what do you mean exactly? I included that test case to check that in a multiline implicit call (with an implicit object first argument) the new code didn't trigger a premature ending of the implicit call",
      "@helixbass The only time where the compiler allows for a function call where the arguments start on a new line is when the first argument is an implicit object. All of the following examples throw at compile time with `unexpected indentation`:\r\n```coffee\r\nf\r\n  a\r\n\r\nf\r\n  class A\r\n\r\nf\r\n  1\r\n  b: 3\r\n\r\nf\r\n  {b: 3}\r\n```",
      "@Inve1951 yup the fact that an indented implicit object as the first arg can start an implicit call is a special case. That's why I thought it was worth testing since it's a different way for an implicit call and an \"inline\" class to interact",
      "@Inve1951 or anyone else, is this okay to merge in?",
      "I'm good with it. My only concern is that the test relies on the implicit object starting a call, which I'm not sure about whether that's a supported feature or not. But I'm certainly in favor to have that as a language feature. In fact I'd expect the same from the broken cases I demonstrated in my previous comment.",
      "> My only concern is that the test relies on the implicit object starting a call, which I'm not sure about whether that's a supported feature or not.\r\n\r\nIt's very much a special case.  Your \"broken cases\" do not compile on purpose.",
      "@vendethiel are there any issues with this PR, or is it okay to merge in?",
      "I'm very bad at rewriter stuff, it the tests pass then I'd say go for it."
    ],
    "commit_messages": [
      "Allow implicit call with class with no body (#5053)\n\n* allow implicit call with class with no body\r\n\r\n* more tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc2e3a21fa1e1f1a9e24",
    "number": 5050,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttp://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a \r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by \r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in \r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in \r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](http://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\nFixes (partially) #5019.\r\nCurrently, only block strings with interpolation are covered as other cases break code in many places.\r\nThis works:\r\n```coffeescript\r\ns = \"\"\"\r\n  \r\n  #{a}\r\n  \r\n      c\r\n\r\n\"\"\"\r\n\r\n###\r\ns = `\r\n${a}\r\n\r\n    c\r\n`;\r\n###\r\n```\r\n---\r\n```coffeescript\r\ns = \"\"\"\\n\r\n  \\n\r\n  #{a}\r\n  \r\n      c\r\n\\n\r\n\r\n  \\nd\r\n\r\n\"\"\"\r\n\r\n###\r\ns = `\\n\r\n\\n\r\n${a}\r\n\r\n    c\r\n\\n\r\n\r\n\\nd\r\n`;\r\n###\r\n```\r\n\r\nI think strings without interpolation won't work. For example, this code from the `Cakefile`\r\n\r\n```coffeescript\r\nexecSync '''\r\n  cake build:full\r\n  cake build:browser\r\n  cake test:browser\r\n  cake test:integrations\r\n  cake doc:site\r\n  cake doc:test\r\n  cake doc:source'''\r\n```\r\n\r\nisn't working if compiled into\r\n\r\n```javascript\r\nexecSync(`\r\ncake build:full\r\ncake build:browser\r\ncake test:browser\r\ncake test:integrations\r\ncake doc:site\r\ncake doc:test\r\ncake doc:source`)\r\n```",
    "head_branch": "strings",
    "is_a_fork": true,
    "comments": [
      "Any reason to keep this PR open? It seems like #5057 replaces it and isn’t WIP, so we should close this one in favor of that one?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc2f3a21fa1e1f1a9e25",
    "number": 5049,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttp://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a \r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by \r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in \r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in \r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](http://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\nFixes the issue in previous PR (#5046).\r\nIn `Block::makeReturn`, the last two expressions are checked before the main loop starts.\r\nInstead of `unwrapAll()`, I used `unwrap()` to avoid false errors with `foo <a></a>` and when explicit `return` is used.\r\n\r\n```coffeescript\r\n<a></a>\r\nfoo <b></b>\r\n###\r\n<a></a>;\r\nfoo(<b></b>);\r\n###\r\n```\r\n---\r\n```coffeescript\r\nrender = ->\r\n  <a></a>\r\n  return <b></b>\r\n###\r\nrender = function() {\r\n  <a></a>;\r\n  return <b></b>;\r\n};\r\n###\r\n```",
    "head_branch": "jsx",
    "is_a_fork": true,
    "comments": [
      "What about this case?\r\n\r\n```coffee\r\nrender = -> (\r\n  <Row>ABC</Row>\r\n  <Row>DEF</Row>\r\n)\r\n```\r\nThe parentheses get removed as redundant, and then `<Row>DEF</Row>` gets returned. That’s clearly not the user’s intent, and Babel throws an error on what I would think is the [equivalent](https://babeljs.io/repl/#?babili=false&browsers=&build=&builtIns=false&code_lz=G4QwTgBGCmB2Am1IF4IDMCusDGAXAlgPawAUAlBAN4BQEU0uGYsEJtdEAPAEqEDuAPgCCAIQDCnAPS9BAbnZ0e_AQBEAogDEpMgfLplqAXyA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&lineWrap=true&presets=react&prettier=false&targets=&version=6.26.0&envVersion=) of what the user had in mind:\r\n\r\n```jsx\r\nvar render = function() {\r\n  return (\r\n    <Row>ABC</Row>;\r\n    <Row>DEF</Row>;\r\n  )\r\n}\r\n```\r\n\r\nCuriously though, this is the error:\r\n```error\r\nrepl: Unexpected token, expected , (3:18)\r\n  1 | var render = () => {\r\n  2 |   return (\r\n> 3 |     <Row>ABC</Row>;\r\n    |                   ^\r\n  4 |     <Row>DEF</Row>;\r\n```\r\n",
      "Also, this:\r\n```coffee\r\nrender = ->\r\n  <Row>ABC</Row>\r\n  <Row>DEF</Row>\r\n```\r\n_should_ compile, as it would become [this](https://babeljs.io/repl/#?babili=false&browsers=&build=&builtIns=false&code_lz=G4QwTgBGCmB2Am1IF4IDMCusDGAXAlgPawAUAlBAN4BQEEAPAEqEDuAfAIIBCAwvQPTN2AblpRouDGFgMhbACIBRAGIC5ogL5A&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&lineWrap=true&presets=react&prettier=false&targets=&version=6.26.0&envVersion=):\r\n```jsx\r\nvar render = function() {\r\n  <Row>ABC</Row>;\r\n  return <Row>DEF</Row>;\r\n}\r\n```\r\nwhich is valid JSX.",
      "User from #5034 wants this\r\n```coffeescript\r\nJSXFunction = -> (\r\n  <Row>ABC</Row>\r\n  <Row>DEF</Row>\r\n)\r\n```\r\n\r\nto compile into this\r\n\r\n```javascript\r\nJSXFunction = function() {\r\n  return <Row>ABC</Row>\r\n     <Row>DEF</Row>;\r\n};\r\n```\r\n\r\nBut, this is an error. Your PR solved this, but was to greedy and was throwing and error even if `return` was explicit, e.g.\r\n\r\n```coffeescript\r\nrender = -> (\r\n  <Row>ABC</Row>\r\n  return <Row>DEF</Row>\r\n)\r\n```\r\n\r\nMy PR only corrects greediness.",
      "Besides, this\r\n\r\n```coffeescript\r\nrender = ->\r\n  <Row>ABC</Row>\r\n  <Row>DEF</Row>\r\n```\r\n\r\nalready [compiles](http://coffeescript.org/#try:render%20%3D%20-%3E%0A%20%20%3CRow%3EABC%3C%2FRow%3E%0A%20%20%3CRow%3EDEF%3C%2FRow%3E) on the `master`\r\n\r\n```javascript \r\nrender = function() {\r\n  <Row>ABC</Row>;\r\n  return <Row>DEF</Row>;\r\n};\r\n```\r\n",
      "The non-parentheses version compiles today in 2.3.0, but my PR made it break. It _should_ compile, because it’s valid JSX.",
      "OK, So only JSX in parentheses should throw an error?\r\n\r\n```coffeescript\r\nrender = -> (\r\n  <Row>ABC</Row>\r\n  <Row>DEF</Row>\r\n)\r\n```\r\n\r\nSince CS [removes](http://coffeescript.org/#try:foo%20%3D%20-%3E%20(%0A%20%20%20a%0A%20%20%20b%0A)) parentheses in any case, JSX will get special treatment.\r\n\r\nAnd, what about this case?\r\n\r\n```coffeescript\r\nrender = -> (\r\n  a += 1\r\n  <Row>ABC</Row>\r\n  <Row>DEF</Row>\r\n)\r\n```\r\n\r\nI guess we could inspect expressions in the parentheses and only if JSX is present we would throw an error.",
      "I’m not sure what to do. I just want to make sure we at least don’t throw errors on _valid_ JSX.",
      "The only way I see is checking parentheses.\r\nAnd, we can treat any expression inside the same way as [Babel](https://babeljs.io/repl/#?babili=false&browsers=&build=&builtIns=false&code_lz=G4QwTgBGCmB2Am1IF4IDMCusDGAXAlgPawAUAlBAN4BQEEokAHgNy1TS4ZiwQkRt1GEANSoAjAIgAeEAD4pAJUIB3WQEEAQgGEpAeiWq2ASEUrZAEQCiAMT0H5uuWzLUAvkA&debug=true&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&lineWrap=false&presets=react%2Cenv&prettier=false&targets=Node-9.8&version=6.26.0&envVersion=1.6.2) does.",
      "The last commit fixes cases discussed above.\r\n\r\nValid CSX:\r\n```coffeescript\r\nrender = ->\r\n  <Row>ABC</Row>\r\n  <Row>DEF</Row>\r\n\r\n###\r\nrender = function() {\r\n  <Row>ABC</Row>;\r\n  return <Row>DEF</Row>;\r\n};\r\n###\r\n```\r\n---\r\n```coffeescript\r\n<a></a>\r\nfoo <b></b>\r\n\r\n###\r\n<a></a>;\r\nfoo(<b></b>);\r\n###\r\n```\r\n\r\nCompiler throws an error when adjacent CSX in parentheses is not wrapped in an enclosing tag.\r\n\r\n```coffeescript\r\nrender = -> (\r\n  <Row>ABC</Row>\r\n  <Row>DEF</Row>\r\n)\r\n\r\n###\r\nerror: Adjacent JSX elements must be wrapped in an enclosing tag\r\n  <Row>DEF</Row>\r\n   ^^^^^^^^^^^^^\r\n###\r\n```\r\n---\r\n\r\nOnly last two expressions are checked.\r\n\r\n```coffeescript\r\nrender = -> (\r\n  a = 2\r\n  <Row>ABC</Row>\r\n  <Row>DEF</Row>\r\n)\r\n\r\n###\r\nerror: Adjacent JSX elements must be wrapped in an enclosing tag\r\n  <Row>DEF</Row>\r\n   ^^^^^^^^^^^^^\r\n###\r\n```\r\n\r\nThis will compile.\r\n\r\n```coffeescript\r\nrender = -> (\r\n  <Row>ABC</Row>\r\n  a = 2\r\n  <Row>DEF</Row>\r\n)\r\n\r\n###\r\nrender = function() {\r\n  var a;\r\n  <Row>ABC</Row>;\r\n  a = 2;\r\n  return <Row>DEF</Row>;\r\n};\r\n###\r\n```",
      "I think even the non-parenthesized version should break. It will never be what the user meant, Afaik. The way CoffeeScript works makes this a bit ambiguous maybe... I think we had a similar thing with\r\n\r\n```\r\n->\r\n  a: 1\r\n  b: 2\r\n```",
      ">  It will never be what the user mean\r\n\r\nAgree. Even the user from #5034 expected something else.\r\nThe question is how to deal with mixed expressions:\r\n\r\n```coffeescript\r\nrender = ->\r\n   x = 1\r\n   y = 2\r\n  <Row>ABC</Row>\r\n  <Row>DEF</Row>\r\n```\r\n \r\nI think in such cases we should return the last expression, e.g., no error.\r\n",
      "So what else needs to be done to wrap up this PR?",
      "As per @vendethiel's suggestion, I would treat \r\n\r\n```coffeescript\r\nrender = ->\r\n  <Row>ABC</Row>\r\n  <Row>DEF</Row>\r\n``` \r\n\r\nin the same way as \r\n\r\n```coffeescript\r\nrender = -> (\r\n  <Row>ABC</Row>\r\n  <Row>DEF</Row>\r\n)\r\n```\r\n\r\nHowever, this case would return the last expressions\r\n```coffeescript\r\nrender = ->\r\n   x = 1\r\n   y = 2\r\n   <Row>ABC</Row>\r\n   <Row>DEF</Row>\r\n\r\n###\r\nrender = function() {\r\n  var x, y;\r\n  x = 1;\r\n  y = 2;\r\n  <Row>ABC</Row>;\r\n  return <Row>DEF</Row>;\r\n};\r\n###\r\n```",
      "Isn’t that the current behavior before we started changing things?",
      "@GeoffreyBooth it was, but then your PR changed it and in this PR you [commented](https://github.com/jashkenas/coffeescript/pull/5049#issuecomment-386039511) that non-parenthesized JSX should compile.",
      "Right, so what's the difference between this PR and reverting mine?",
      "> I think in such cases we should return the last expression, e.g., no error.\r\n\r\nWhy? I don't think that makes sense.",
      "@vendethiel It's valid coffee/js/jsx code and coffee implicitely returns the last statement of a function body. JSX tags are still only js objects. `<Row>ABC</Row>` is same as `React.createElement(Row, null, \"ABC\")`.\r\n\r\nI don't see the need for special treatment either but it's true that it's unlikely that the user ment for the code to turn out that way.\r\nI see 2 solutions:\r\n* Ignore it and have ESlint deal with it.\r\n* Implicitely wrap the JSX tags into [Fragments](https://reactjs.org/docs/fragments.html).",
      "@GeoffreyBooth \r\n\r\n```coffeescript\r\n->\r\n  <a></a>\r\n  foo\r\n  <b></b>\r\n```\r\n\r\nYour PR:\r\n\r\n```\r\n[stdin]:5:4: error: Adjacent JSX elements must be wrapped in an enclosing tag\r\n  <b></b>\r\n   ^^^^^^\r\n```\r\n\r\nThis PR:\r\n\r\n```javascript\r\n(function() {\r\n  <a></a>;\r\n  foo;\r\n  return <b></b>;\r\n});\r\n```",
      "@zdenko I get that, what I mean is, what's the difference between current 2.3.0 (a.k.a. reverting my PR to the prior state of `master`) and merging this PR in?",
      "> @vendethiel It's valid coffee/js/jsx code and coffee implicitely returns the last statement of a function body. JSX tags are still only js objects. <Row>ABC</Row> is same as React.createElement(Row, null, \"ABC\").\r\n\r\nIn general I'd agree -- that's the role of a linter. But here we're just copying an error that's reported by babel; because the error is lost when compiling.",
      "The error isn’t lost; there’s a difference between\r\n\r\n```js\r\nvar render = function() {\r\n  return (\r\n    <Row>ABC</Row>\r\n    <Row>DEF</Row>\r\n  )\r\n}\r\n```\r\nand\r\n```js\r\nvar render = function() {\r\n  return (\r\n    <Row>ABC</Row>;\r\n    <Row>DEF</Row>;\r\n  )\r\n}\r\n```\r\nThe version without the semicolons throws the Babel error, while the other doesn’t. Since CoffeeScript always adds the semicolons for each new line, we shouldn’t ever get that error.",
      "I get an error on [Babel](https://babeljs.io/repl/#?babili=false&browsers=&build=&builtIns=false&code_lz=G4QwTgBGCmB2Am1IF4IDMCusDGAXAlgPawAUAlBAN4BQEU0uGYsEJdtdEAPAEqEDuAPgCCAIQDCXAPR8hAbmoBIXgMEARAKIAxabMELOZBQF8gA&debug=true&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&lineWrap=false&presets=react%2Cenv&prettier=false&targets=Node-9.8&version=6.26.0&envVersion=1.6.2) for \r\n```javascript\r\nvar render = function() {\r\n  return (\r\n    <Row>ABC</Row>;\r\n    <Row>DEF</Row>;\r\n  )\r\n}\r\n```\r\n\r\nThis [works](https://babeljs.io/repl/#?babili=false&browsers=&build=&builtIns=false&code_lz=G4QwTgBGCmB2Am1IF4IDMCusDGAXAlgPawAUAlBAN4BQEU0uGYsEJdtdEAPAEqEDuAPgCCAIQDCXAPR8hAGmoBIXgMEARAKIAxabMEcIZANzUAvkA&debug=true&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&lineWrap=false&presets=react%2Cenv&prettier=false&targets=Node-9.8&version=6.26.0&envVersion=1.6.2)\r\n```javascript\r\nvar render = function() {\r\n  return (\r\n    <Row>ABC</Row>,\r\n    <Row>DEF</Row>\r\n  )\r\n}\r\n```\r\n\r\nIf we revert your PR and merge this one, we'll (currently) get an error only if JSX in enclosed in parentheses.\r\n\r\n```coffeescript\r\n-> (\r\n  <a></a>\r\n  <b></b>\r\n)\r\n###\r\n[stdin]:4:4: error: Adjacent JSX elements must be wrapped in an enclosing tag\r\n  <b></b>\r\n   ^^^^^^\r\n###\r\n```\r\n\r\nNon-parenthesized JSX will compile:\r\n\r\n```coffeescript\r\n->\r\n  <a></a>\r\n  <b></b>\r\n###\r\n(function() {\r\n  <a></a>;\r\n  return <b></b>;\r\n});\r\n###\r\n```\r\n",
      "Okay, so regarding what _would_ trigger an error in this PR:\r\n\r\n```coffee\r\n-> (\r\n  <a></a>\r\n  <b></b>\r\n)\r\n```\r\nThat’s equivalent to [this JS](https://babeljs.io/repl/#?babili=false&browsers=&build=&builtIns=false&code_lz=BQMwrgdgxgLglgewsAlAAgN4Cg1oE4CmMYeEawOuaAPAIYB81A9AwNyW7UBGjTP7uFFgC-KIA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&lineWrap=true&presets=react&prettier=false&targets=&version=6.26.0&envVersion=):\r\n```jsx\r\n(function() {\r\n  return (\r\n    <a></a>;\r\n    <b></b>;\r\n  );\r\n});\r\n```\r\nWhich throws this error in Babel:\r\n```\r\nrepl: Unexpected token, expected , (3:11)\r\n  1 | (function() {\r\n  2 |   return (\r\n> 3 |     <a></a>;\r\n    |            ^\r\n```\r\nWhich isn’t really equivalent to “Adjacent JSX elements must be wrapped in an enclosing tag.” Do we care?",
      "It’s not equivalent because of our everything-is-an-expression semantics. I think we do care.",
      "Maybe “do we care” is a bit harsh 😄 I guess the question is what we consider\r\n```coffee\r\n(\r\n  <a />\r\n  <b />\r\n)\r\n```\r\nto be equivalent to, since it _is_ an expression.\r\n\r\nSome more ways of putting it, in JS, with the errors from Babel:\r\n```jsx\r\nvar someJsx = (\r\n  <a />\r\n  <b />\r\n);\r\n```\r\n```\r\nrepl: Adjacent JSX elements must be wrapped in an enclosing tag (3:2)\r\n  1 | var someJsx = (\r\n  2 |   <a />\r\n> 3 |   <b />\r\n    |   ^\r\n```\r\nand\r\n```jsx\r\nvar someJsx = (\r\n  <a />;\r\n  <b />;\r\n);\r\n```\r\n```\r\nrepl: Unexpected token, expected , (2:7)\r\n  1 | var someJsx = (\r\n> 2 |   <a />;\r\n    |        ^\r\n```\r\nand finally,\r\n```jsx\r\nvar someJsx = (\r\n  <a />,\r\n  <b />\r\n);\r\n```\r\ncompiles successfully, into\r\n```js\r\nvar someJsx = (React.createElement(\"a\", null), React.createElement(\"b\", null));\r\n```\r\nSo in CoffeeScript, each newline triggers a semicolon; and there doesn’t seem to be an equivalent for the comma operator or a way to trigger its output. ([This is worth reading.](https://stackoverflow.com/a/10284572/223225))\r\n\r\nI think Babel’s `expected ,` error, asking for the comma operator, doesn’t make sense for CoffeeScript to output since we don’t have that operator (I think). And I think Babel is only asking for that because asking for a semicolon is pointless here, since the semicolon version throws a different error. Really though I think Babel asking for a comma is misguided, since I don’t see the sense in using that operator here. All it means in this case, to use the last example, is that `someJsx` gets the value of `React.createElement(\"b\", null)`, which doesn’t seem terribly useful. I think the `Adjacent JSX elements must be wrapped` error is actually more informative, as it’s closer to the source of the problem. @vendethiel what do you think?",
      "We do have the comma operator, just spelled `;`: `return (1;2)`.\r\nBabel doesn’t have such an ambiguity because it only has ASI, no conflating of statements and expressions.\r\n\r\nFor us, `(1; 2)` is like a block, we allow pretty much all our constructions there (if, while, for, ... everything that’s not a jump). Which is why i think we should treat it as adjacent JSX and warn about it, even wrapped in parens.",
      "So @vendethiel what’s the bottom line here? Can we merge in this PR as is, or does it need any further changes?",
      "@zdenko @vendethiel I added the last test that I had requested. I’m eager to wrap this up. Any more notes?",
      "@GeoffreyBooth LGTM"
    ],
    "commit_messages": [
      "Fix #5046: Adjacent JSX (#5049)\n\n* Fix #5046: Adjacent JSX\r\n\r\n* check CSX only when wrapped in parentheses\r\n\r\n* Fix indentation\r\n\r\n* Add test for unlikely, but valid, JSX syntax"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc303a21fa1e1f1a9e26",
    "number": 5048,
    "body": "@GeoffreyBooth a couple Prettier-related changes to try and make generation of `::` constructs safer:\r\n- Currently, `.`, `?.` and `::` are `LINE_CONTINUER`s but `?::` is not. So add it so that line-breaking before any kind of `Accessor` (other than a \"computed\" one, ie an `Index` eg `['a']`) should be safe\r\n- Currently, there is \"standalone\" `::` (ie just referencing the `.prototype` object) as well as `::` followed by a `Property`. `?::` has no standalone version in the grammar. So add it, since currently in Prettier I'm auto-transforming *any* `.prototype` access into `::`, so if the original source were eg `a?.prototype` it'd generate `a?::`, which currently won't compile. If it ends up making sense to only generate `::` when explicit `::` was in the original source, that should just be a question of eg adding a `prototypeShorthand: yes` flag to the `Access` in the grammar, but there's no harm in allowing standalone `?::` regardless",
    "head_branch": "normalize-prototype-syntax",
    "is_a_fork": true,
    "comments": [
      "@zdenko or @vendethiel ?",
      "@connec looks like there were existing checks that `?::` behaves as expected in `test/operators.coffee`, so i expanded that test to test that `?::` behaves the same way when continuing a line"
    ],
    "commit_messages": [
      "Normalize :: syntax (#5048)\n\n* normalize :: syntax\r\n\r\n* fixes from code review"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc313a21fa1e1f1a9e27",
    "number": 5047,
    "body": "Fixes #1832. The top of that thread suggests that we use script (DOM) injection rather than plain `eval` to execute scripts that users enter in browser contexts, such as Try CoffeeScript, to boost performance dramatically. By the end of the thread, it’s established that the reason script injection is so much faster is that we were using `eval` in the context of the CoffeeScript compiler; if we use `window.eval` instead, to use a global context and exclude all the local variables accessible where we’re making the `eval` call, the `window.eval` method is ever so slightly faster still than script injection. It’s also compatible with Node, so `cake test:browser` still works (if we first detect whether to call `window.eval` or `global.eval`). The performance tests are still accessible here: http://web.archive.org/web/20130326103111/http://jsperf.com:80/eval-vs-script/6\r\n\r\nThe other changes you see in this PR turn off variable name mangling in our minification, which was previously happening because the presence of the `eval` call was automatically disabling mangling in the scope that `eval` had access to; now that we’re using a globally-scoped `eval`, that no longer happens, and the browser compiler breaks when full mangling is enabled. And finally, one of the browser-based tests was broken by #5028, and I included the fix here.\r\n\r\nSo yes, in the simplest sense #1832 could’ve been resolved seven years ago by adding just seven characters (changing `eval` to `window.eval`). Sorry it took so long.",
    "head_branch": "script-injection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #1832: Browser compiler should run code using globally-scoped eval (#5047)\n\n* Explicitly turn off minify mangling, because it was previously implicitly disabled by the existence of the `eval` call we’re about to remove\r\n\r\n* Update babel-core\r\n\r\n* Run browser-compiled scripts using window.eval rather than just eval, to use a clean scope (many times faster)\r\n\r\n* Update output\r\n\r\n* Fix browser-based test broken by #5028\r\n\r\n* Update output"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc323a21fa1e1f1a9e28",
    "number": 5046,
    "body": "```coffee\r\nrender = ->\r\n  <Row>a</Row>\r\n  <Row>b</Row>\r\n```\r\n```log\r\n[stdin]:3:4: error: Adjacent JSX elements must be wrapped in an enclosing tag\r\n  <Row>b</Row>\r\n   ^^^^^^^^^^^\r\n```\r\nNot sure why the initial `<` isn’t part of the error highlight, but that’s a separate bug. @xixixao ",
    "head_branch": "fix-jsx-return",
    "is_a_fork": true,
    "comments": [
      "It seems to check a bit too many cases, though:\r\n\r\n```coffeescript\r\n$ echo -e \"->\\n  <a></a>\\n  foo\\n  <b></b>\" | ./bin/coffee -bcs\r\n[stdin]:4:4: error: Adjacent JSX elements must be wrapped in an enclosing tag\r\n  <b></b>\r\n   ^^^^^^\r\n```\r\n\r\nThis is probably OK (why would you put a random toplevel element), but means we check every child of a block to check if it's a JSX element, if the returned value is a JSX element, which might be a bit wasteful.",
      "It only checks siblings if the value to be returned is a JSX element. So yes, it’s a little wasteful for whenever you’re returning a JSX element, but I don’t know how to avoid checking every element if siblings are disallowed.\r\n\r\nBut I think the bigger problem is that [this](https://babeljs.io/repl/#?babili=false&browsers=&build=&builtIns=false&code_lz=G4QwTgBGCmB2Am1IF4IAoCUFkD4IG8AoCCAHhB1IHoLiyAjSqxwgX0KA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&lineWrap=false&presets=react%2Cenv&prettier=false&targets=&version=6.26.0&envVersion=1.6.2):\r\n```jsx\r\nvar render = () => {\r\n  <a></a>\r\n  <b></b>\r\n}\r\n```\r\nthrows the `Adjacent JSX elements must be wrapped in an enclosing tag` error in Babel, whereas [this](https://babeljs.io/repl/#?babili=false&browsers=&build=&builtIns=false&code_lz=G4QwTgBGCmB2Am1IF4IAoCUFkD4IG8AoCCAHhB1IHoKBuYsgI0qufoF9Cg&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&lineWrap=false&presets=react%2Cenv&prettier=false&targets=&version=6.26.0&envVersion=1.6.2):\r\n```jsx\r\nvar render = () => {\r\n  <a></a>;\r\n  <b></b>;\r\n}\r\n```\r\ndoes not. I guess it’s because the first example’s lack of semicolons makes it equivalent to [this](https://babeljs.io/repl/#?babili=false&browsers=&build=&builtIns=false&code_lz=G4QwTgBGCmB2Am1IF4IAoCUFkD4IG8AoCCAHhB1IHoLSAjSqhwgX0KA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&lineWrap=false&presets=react%2Cenv&prettier=false&targets=&version=6.26.0&envVersion=1.6.2):\r\n```jsx\r\nvar render = () => {\r\n  <a></a><b></b>\r\n}\r\n```\r\nwhich throws the error.\r\n\r\nSo what to do? It would appear that this PR has made our error checking too strict, since [this](https://babeljs.io/repl/#?babili=false&browsers=&build=&builtIns=false&code_lz=G4QwTgBGCmB2Am1IF4IAoCUFkD4IG8AoCCAHhB1IHoKBuYqaAFwFcxYyAjSq7-gX0JA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&lineWrap=false&presets=react%2Cenv&prettier=false&targets=&version=6.26.0&envVersion=1.6.2):\r\n```js\r\nvar render = () => {\r\n  <a></a>;\r\n  return <b></b>;\r\n}\r\n```\r\nshould be allowable JSX, at least if Babel is to be trusted.",
      "Well, we can loop from 1 to length, and if both `nodes[i]...csx && nodes[i - 1]...csx`, we have found adjacent tags."
    ],
    "commit_messages": [
      "Fix #5034: Adjacent JSX elements must be wrapped in an enclosing tag (#5046)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc333a21fa1e1f1a9e29",
    "number": 5045,
    "body": "Along the lines of #5044 and #4984, this PR adds a way to pass arbitrary token data from the lexer to the node classes. Just as inside every node class since #4572 there’s a `@comments` property if comments should be output before or after that node, per this PR there’s now also a `@data` property where we can stash extra data from the lexer or rewriter to sneak through the parser and be accessible in the nodes classes.\r\n\r\nIn particular, this should make #5019 solvable. Besides creating the new code to allow this `data` property on tokens to sneak through the parser, this PR adds some data to the `StringLiteral` token that should allow us to move a lot of the string manipulation logic out of `lexer.coffee` and into `nodes.coffee`. This is more just an example at this point, with the actual moving of that logic saved for a future PR. If you set a breakpoint in the `nodes.coffee` `StringLiteral` class `compileNode` method, you should see `@data` present with the values we set in the lexer.\r\n\r\n@zdenko I think the code at [lexer.coffee#L307-L315](https://github.com/GeoffreyBooth/coffeescript/blob/e8c3889c117850d15f8cb32b0cb40352a49e60ed/src/lexer.coffee#L307-L315) is where multiline `'` and `\"` strings get deindented; thanks to the extra data I’m attaching to `StringLiteral`s in [lexer.coffee#L770-L773](https://github.com/GeoffreyBooth/coffeescript/blob/e8c3889c117850d15f8cb32b0cb40352a49e60ed/src/lexer.coffee#L770-L773), the former code block should be able to move into the `StringLiteral` nodes class. (A _lot_ of the string code could move over there, like the lexer functions about escapes and so on.)\r\n\r\nEven if we didn’t bother moving whatever we could out of the lexer into nodes (though we should do that), simply being able to pass raw data from the lexer to the nodes should make building a complete AST possible.\r\n\r\nThere’s one caveat to this PR. Technically this new `data` property isn’t passing _through_ the parser, just as the old `comments` property isn’t; we compare the location data (start row/column, end row/column) of each column with `data` or `comments` properties with the location data of parser-generated nodes, and the properties are reattached when we find matches. This is only an issue when there are multiple tokens with the same location data, which is rare but does happen; the only example I can find is a generated `JS` token added to the start or end of a file to hold comments, but presumably similar “special case” or generated tokens will also share location data with user-generated ones. For comments, overlapping isn’t an issue; I just combine all the comments together. But for token data, that isn’t an option; but I don’t think it should be an issue, since no “special” tokens should ever have data that needs to be preserved. If I’m wrong about this, we’ll need to patch Jison to truly allow extra data to be passed through the parser. cc @helixbass ",
    "head_branch": "lexer-data",
    "is_a_fork": true,
    "comments": [
      "@GeoffreyBooth I've been starting to expose AST types (on my `prettier` branch) and correspondingly add formatting rules for those types in Prettier (on my fork of your `coffeescript` branch). So far I've just done some simple cases but I could try something trickier using this branch's token `data` mechanism - what are the known cases where we currently wouldn't have enough data in our initialized nodes to be able to properly emit an AST?\r\n\r\nEg I'm aware of non-preservation of heredoc indents, but I'd be inclined to try and rework that so that the whole string literal makes it directly through the grammar intact. In general, it seems like we should only use this token `data` as a fallback \"escape hatch\" if it's not feasible/worth it to rework the lexer/grammar to pass the missing information through more directly?\r\n\r\nA couple notes on what I've been working on:\r\nI didn't directly use code from your `nodes` branch but started doing something along similar lines to how you had a generic recursive `toPlainObject()`. I used different naming - I don't see a reason to \"overwrite\" the existing `--nodes` behavior (which I find useful), so I exposed AST generation via a `--ast`/`ast` option, and I called the method `toAst()` rather than `toPlainObject()`\r\n\r\nThere is clearly lots of potential for reuse from the work I've done for generating JS AST. I've started fleshing out a generic way for the JS AST compilation to default to reusing the Coffeescript AST generation code for that type, with an optional `precompile()` hook (see eg `Base::_compileToBabylon()`). Since we're trying to stick close to the corresponding JS AST types, a lot of the logic I wrote for generating JS AST has been fully shareable\r\n\r\nAlso fleshing out a generic structure for how to specify AST generation for a given node type as declaratively as possible (see `Base::toAst()`/`Base::_toAst()`):\r\n- for the AST `type` it'll look for a declared `astType:` (defaulting to the node class name), which can be a simple string or a function with logic based on the current instance (returning a string, the `type`)\r\n- for AST \"children\" (ie full-fledged sub-nodes), it'll look for `astChildren:` (defaulting to `@children`), which can be either a list of prop names (like `@children`, if the AST field naming matches ours) or an object which can specify field-name mapping and compilation level\r\n- for other AST \"props\" (ie fields that aren't full sub-nodes) besides `type` (and location data), it looks for `astProps:` which can similarly be a list, object, or function\r\n\r\nAs far as the corresponding work getting Prettier to generate formatted Coffeescript, I used your `coffeescript` branch as a starting point (thanks for getting that all wired up), and per your suggestion swapped out the `coffeescript` dependency for a local dependency pointing at my `prettier` branch-in-progress. I've been mimicking the corresponding code in `printer-estree.js` - I'm not sure whether it'd be worth trying to get any actual code reuse there but I'm sure there will be lots of benefits to sticking closely to the way they've structured the code for JS generation\r\n\r\nGetting Prettier to be able to gradually emit more and more formatted Coffeescript constructs is a nice way to be able to measure progress. There are some obvious bigger targets like being able to run Coffeescript test files through Prettier and have the reformatted version pass. But it'd probably be worth figuring out how to start building an actual Prettier test suite that I can add examples to and use to check for regressions as I'm adding new types and refining formatting\r\n\r\nThus far my process has been to modify a simple `test.coffee` and run eg `./bin/prettier.js --parser coffeescript --print-width 20 test.coffee` to dump the Prettier-formatted version of `test.coffee` (ie artificially constricting/modifying the line width via `--print-width` to make it easier to check Prettier's linebreaking behavior for different constructs)",
      "Hey @helixbass, thanks for all this. I think you and @zdenko and I should get on a call together soon to coordinate. Some thoughts:\r\n\r\n> Eg I’m aware of non-preservation of heredoc indents, but I’d be inclined to try and rework that so that the whole string literal makes it directly through the grammar intact. In general, it seems like we should only use this token `data` as a fallback “escape hatch” if it’s not feasible/worth it to rework the lexer/grammar to pass the missing information through more directly?\r\n\r\nYes, that makes sense. The indent is the big one; I’m going to update this branch so that the `data` property is created for all tokens, with a few universal properties (such as indent, and token tag name and token value) always attached. Basically any manipulation you see happening in the lexer now is potentially stuff that we can’t do in the nodes without extra token data; if it was, it would’ve been implemented in the nodes classes in the first place (unless the feature was added by a more novice contributor). But sure, if there’s a way to do everything without needing `data`, that would be the ideal solution. I think in the short term I want to just add `data`, and then refactoring individual nodes to not need it can be a piecemeal process.\r\n\r\n> I didn’t directly use code from your `nodes` branch but started doing something along similar lines to how you had a generic recursive `toPlainObject()`. I used different naming - I don’t see a reason to “overwrite” the existing `--nodes` behavior (which I find useful), so I exposed AST generation via a `--ast`/`ast` option, and I called the method `toAst()` rather than `toPlainObject()`\r\n\r\nIn #5044 @jashkenas asked to rename `toPlainObject` to `toJSON`, and I see no reason not to use that name. As for overriding `--nodes`, we’re trying to avoid creating new flags, so I repurposed that one. We occasionally use environment variables to override things, so maybe `NODES_OUTPUT=plain coffee --nodes` could generate the current output while `coffee --nodes` generates the JSON AST.\r\n\r\n> There is clearly lots of potential for reuse from the work I’ve done for generating JS AST.\r\n\r\nFor sure.\r\n\r\n> Thus far my process has been to modify a simple `test.coffee` and run eg `./bin/prettier.js –parser coffeescript –print-width 20 test.coffee` to dump the Prettier-formatted version of `test.coffee` (ie artificially constricting/modifying the line width via `--print-width` to make it easier to check Prettier’s linebreaking behavior for different constructs)\r\n\r\nI was planning to _not_ have Prettier break lines, as CoffeeScript is a significant-whitespace language and the concept of a column limit clashes with the idea that indentation is meaningful. You can see this in the CoffeeScript codebase itself, which I feel really shouldn’t be contorting itself to mostly keep inside a column limit: it’s lots of hacks, of knowing that `and` will trigger an implied line continuation, and stuff like that. I don’t think this is a good style to encourage, and Prettier should be outputting a recommended style.\r\n\r\nAt the very least, I would focus on just getting Prettier to output legal source code, and worry about line breaks later.",
      "I think if you're going to keep the existing `--nodes` output as well, then adding a new flag for this (and a new option in the programmatic API) is totally fine. `coffee --json` or `coffee --ast` sound good.\r\n\r\nThe intended effect of the main prohibition against adding flags is to avoid having CoffeeScript parse/compile/evaluate different programs differently, depending on the flags passed. I want to avoid a situation where if you use a certain technique in your code, you need to pass a certain flag — hurting interoperability and copy pasting.",
      "I realize it’s something that’s done already, but the idea of adding such « recognition mechanisms » to nodes seems wrong. ",
      "@vendethiel — how do you mean, exactly?\r\n\r\n**Edit:** I mean, the token data dictionary does feel like a nasty kludge ... but I'm not sure what the clean alternative would be for what Geoffrey is trying to do here.",
      "> the token data dictionary does feel like a nasty kludge\r\n\r\nYes, I pored over `parser.js` for a few hours to see if there was a way to patch it to simply pass through the token data, along the lines of (psuedocode):\r\n\r\n```\r\ntokens = [ ... array of tokens objects, some with data properties ... ]\r\nnodes = parser(tokens)\r\ncode = nodes.compile()\r\n```\r\nAs in, the token objects in the `tokens` array seem to be passing through the parser on their way to becoming nodes, so shouldn’t there be some way to attach a property to those objects that can stowaway through the parser and be used in the node classes? But the more I look at the parser, the more I think it might not be possible, because a token object is not one-to-one with a node. Nodes are groups of tokens:\r\n\r\n```coffee\r\no 'IMPORT String', -> new ImportDeclaration null, $2\r\n```\r\n\r\nSo an `ImportDeclaration` node is made up of two tokens, `IMPORT` and `String` (let’s assume for the sake of simplicity that `String` is always just a `StringLiteral`). So `StringLiteral` is its own node class, so there’s `data` that could be passed to it; and in this particular case you could attach data to `IMPORT` that affects `ImportDeclaration`. But there’s no direct parallel between tokens and `ImportDeclaration`, and this is one of the simplest cases; in the more complex ones, I don’t know how I would map token data into nodes in meaningful ways.\r\n\r\nComments are so low priority that the kludge felt fine, but if there’s a better way to attach lexer/token data to get it more sensibly through to the nodes, I’m open to suggestions.",
      "I think that the easiest way to find out would be to simply ask @zaach. We could open a question ticket on https://github.com/zaach/jison/issues\r\n\r\nOtherwise, a Jison patch would probably be needed...",
      "> Yes, I pored over parser.js for a few hours to see if there was a way to patch it to simply pass through the token data, along the lines of (psuedocode):\r\n\r\nWe already do \"pass data\" in the sense of `$1 $2 $3...`. Could some of these be made objects so that we can append `.data` to them?",
      "@GeoffreyBooth\r\n> I think you and @zdenko and I should get on a call together soon to coordinate\r\n\r\nSure\r\n\r\n> In #5044 @jashkenas asked to rename toPlainObject to toJSON, and I see no reason not to use that name\r\n\r\n`.toJSON()` seems ok to me as long as it's not weird to conflate its meaning in overriding `JSON.stringify()` behavior with its significance as \"this generates an AST (object) representation\". I guess that makes sense given that the AST object is supposed to be an \"equivalent\" \"serialization\" of the actual node object\r\n\r\n> I was planning to not have Prettier break lines, as CoffeeScript is a significant-whitespace language and the concept of a column limit clashes with the idea that indentation is meaningful\r\n\r\nYa there are a lot of interesting questions here. I also instinctively don't really see Coffeescript as fitting inside Prettier's \"box\" (and, per @jashkenas' [comment](https://github.com/jashkenas/coffeescript/pull/5044#issuecomment-385519894), the logistics of guaranteeing correctness of auto-formatted Coffeescript may be more intricate than Javascript). However, line-breaking smartly is at the core of Prettier (see [the paper](http://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf) its algorithm is based on and its description of its formatting [primitives](https://github.com/prettier/prettier/blob/master/commands.md)) so I don't think it's a question of punting completely on specifying line-breaking. And I still see Prettier as the logical initial choice (at least as far as what I'm interested in working on) for an engine for auto-formatting a Coffeescript AST\r\n\r\nThus far I've been specifying basic line-breaking rules like \"you can line-break array elements/function params/call args\" or \"you can line-break after an = in an assignment\". I think you raise a wise word of caution that we don't want to get overzealous with linebreaking that's not good Coffeescript style. I will surely have a more nuanced grasp of how to use Prettier's formatting primitives to wrangle certain stylized formatting choices as time goes on\r\n\r\nBut to take your example, if we really didn't think a line should ever break after an `and`/`or`, you just don't specify an optional `line` (break) at that position when formatting a binary operation. I don't personally have a big problem with picturing it automatically splitting up complicated logic conditions after `and`/`or` (maybe with some guiding parens). But I think we can definitely punt on arguments about what specifically should be considered good style or not, that should be the fun part once we're in a pretty good position as far as having it working reasonably\r\n\r\nI started looking at the work-in-progress [Prettier Python formatter](https://github.com/prettier/plugin-python) (linked from the Prettier [homepage](https://prettier.io/)), curious about what choices another whitespace-indented language would make. I did notice some line-breaking backslashes, which is something I'd instinctively avoid\r\n\r\nBut actually the main thing I came away with for now was that they seem to be taking advantage of a Prettier plugin architecture to allow their development to be in a separate repo from Prettier proper. I'm guessing this is recommended (eg the Ruby one was set up similarly) so I mimicked its setup and yanked the core parsing/formatting code I've been working on from my `coffeescript` Prettier branch into a new `prettier-plugin-coffeescript` [repo](https://github.com/helixbass/prettier-plugin-coffeescript). So now that should be set up for starting to add Prettier-formatted snapshots (the recommended way to test Prettier)",
      "We do have a [coffeescript](https://github.com/coffeescript/) organization, perhaps we should put the `prettier-plugin-coffeescript` repo there?\r\n\r\nI would say we should at least focus on using Prettier as a code generator first, before worrying about line breaks. And if Prettier lacks an option to disable line breaking, we should add one. I understand that that functionality is part of its core mission, but whitespace-dependent languages are different. I think inevitably we’d end up with line-continuation backslashes all over the place, like Python, unless we took a less strict approach about line breaks (like maybe put objects inline when they’re short, and expand to multiline syntax only when they’re too long for a single line, for example). What does Ruby do?",
      "Okay, I updated this branch so that all tokens have metadata attached to them, with at least the common properties (tag, value, and indentation info). I also did some inspection on which _node classes_ end up with this token data.\r\n\r\nThe following 23 node classes get data passed from tokens:\r\n\r\n- BooleanLiteral\r\n- CSXTag\r\n- Elision\r\n- Expansion\r\n- ExportSpecifier\r\n- FuncGlyph\r\n- IdentifierLiteral\r\n- ImportDefaultSpecifier\r\n- ImportSpecifier\r\n- InfinityLiteral\r\n- Literal\r\n- NaNLiteral\r\n- NullLiteral\r\n- NumberLiteral\r\n- PassthroughLiteral\r\n- PropertyName\r\n- RegexLiteral\r\n- RegexWithInterpolations\r\n- StatementLiteral\r\n- StringLiteral\r\n- StringWithInterpolations\r\n- ThisLiteral\r\n- UndefinedLiteral\r\n\r\nAnd the following 16 node classes don’t get any token data:\r\n\r\n- Arr\r\n- Assign\r\n- AwaitReturn\r\n- Existence\r\n- ExportNamedDeclaration\r\n- For\r\n- If\r\n- ImportDeclaration\r\n- In\r\n- Obj\r\n- Parens\r\n- Splat\r\n- SuperCall\r\n- Switch\r\n- Throw\r\n- While\r\n\r\nAnd the following 14 node classes _sometimes_ get token data:\r\n\r\n- Access\r\n- Block\r\n- Call\r\n- Class\r\n- Code\r\n- Index\r\n- Op\r\n- Param\r\n- Range\r\n- Return\r\n- Slice\r\n- Super\r\n- Try\r\n- Value\r\n\r\nMost if not all of the latter two groups have child nodes that have token data. But I’m starting to wonder how useful this is. What data is there in the lexer that might need for a “complete” AST, that isn’t already available in the nodes? If we can solve #5019 without this data, is there any reason we need the token data?",
      "Closing for now, in the hope that we won’t need this to be able to produce a “complete” AST. Will reopen if it turns out we need this workaround."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc343a21fa1e1f1a9e2a",
    "number": 5044,
    "body": "Building off of #4984. The major prerequisite to support for CoffeeScript in Prettier, or better ecosystem tooling in general (a new JS2Coffee, etc.) is being able to generate a abstract syntax tree, or AST. This is a JSON output (or in Node, a plain JavaScript object output) representation of all the nodes that the compiler would be generating JavaScript source code for. Once we have an AST, it can be passed into Prettier for Prettier to generate pretty-formatted CoffeeScript; into CoffeeLint for linting; and so on. The intent of this PR is to focus only on the “generate an AST” part, leaving further integrations for future PRs.\r\n\r\nThis PR aims to update the CoffeeScript compiler to generate such an AST. The current CLI already has a `--nodes` flag that prints debugging info about all the nodes; I’m updating that to produce the output as JSON instead. The Node CLI will take a `nodes` option to return the same thing.\r\n\r\nThis PR will be WIP until all the nodes have complete details about them, such that Prettier has enough to work with to generate new CoffeeScript source. I’m treating that as the initial benchmark for completeness; if other tools require yet more detail, the additional details can be added in future PRs.\r\n\r\nTo try out generating an AST, check out this branch and run:\r\n\r\n```bash\r\n./bin/coffee --nodes --eval 'answer = 42'\r\n```\r\n\r\nFor syntax-highlighted output, or a longer input, create a `test.coffee` at the root of the repo with whatever CoffeeScript code you want to see an AST of, then run:\r\n\r\n```bash\r\ncoffee --eval \"console.log require('util').inspect \\\r\nrequire('./lib/coffeescript').compile( \\\r\nrequire('fs').readFileSync('./test.coffee').toString(), nodes: yes), \\\r\n{colors: yes, depth: 10}\"\r\n```\r\n\r\nYou should see pretty-printed JSON like this:\r\n\r\n```js\r\n{ type: 'Block',\r\n  loc: { start: { line: 0, column: 0 }, end: { line: 0, column: 10 } },\r\n  expressions:\r\n   [ { type: 'Assign',\r\n       loc: { start: { line: 0, column: 0 }, end: { line: 0, column: 10 } },\r\n       variable:\r\n        { type: 'IdentifierLiteral',\r\n          loc: { start: { line: 0, column: 0 }, end: { line: 0, column: 5 } },\r\n          value: 'answer' },\r\n       value:\r\n        { type: 'NumberLiteral',\r\n          loc: { start: { line: 0, column: 9 }, end: { line: 0, column: 10 } },\r\n          value: '42' } } ] }\r\n```\r\n\r\nThis is the same output as the current CLI’s `--nodes`, in JSON form, with:\r\n\r\n- the node class names as `type`, which is how the [Babel AST](https://github.com/babel/babel/blob/master/packages/babylon/ast/spec.md) has them\r\n- the location data structured the way Babel does it\r\n- any primitive (boolean, number, string) properties included, as these are serializable as is into JSON\r\n- children included recursively\r\n\r\nFor nodes as simple as `NumberLiteral`, this is all the detail we need. But for complicated nodes like `Class`, a lot more work will be required. Basically, every node class that has a `compileNode` method will need a similar `compileObject` method; the former generates a JavaScript output string, and the latter will generate AST objects. Another issue that needs tackling, perhaps in a separate PR, is preserving data from the lexer that doesn’t make it into the node classes but that we need to produce a complete AST object. I’m hoping we can use this branch to track this work, and I’m happy to invite anyone to my repo who would like to contribute.",
    "head_branch": "nodes",
    "is_a_fork": true,
    "comments": [
      "It's nice to see this being developed in a side PR — I'm not terribly optimistic about how easy it's going to be to get prettier to format CoffeeScript.\r\n\r\nBut looks like a fine start! My only comment is that the `toPlainObject` method is usually called `toJSON()`:\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#toJSON()_behavior",
      "Good luck, have fun; as they say!\r\n\r\nHappy to see you try and tackle this one",
      "Um, I’m hoping to not tackle it alone! Help most welcome!\r\n\r\nPrettier can handle oddball formats like CSS and Markdown, so I would think it could handle CoffeeScript. But regardless that’s a whole separate effort. I just want to get a good AST out first, so that others can tackle integrations. JS2Coffee already has code that converts an AST into CoffeeScript source, so clearly it’s possible to do.",
      "I think there’s a fairly easy way to track our progress toward a “complete” AST. So the [Babel AST spec](https://github.com/babel/babel/blob/master/packages/babylon/ast/spec.md) lists every one of Babel’s AST token types and properties. For example:\r\n\r\n```js\r\ninterface RegExpLiteral <: Literal {\r\n  type: \"RegExpLiteral\";\r\n  pattern: string;\r\n  flags: string;\r\n}\r\n```\r\n\r\nAlmost all of our node types have corresponding types in Babel’s AST spec. We could compare the AST output for our node against its counterpart in the Babel AST, and if both contain the same properties, that node type is complete. So for `RegExpLiteral`, if our node type has both the `pattern` and `flags` properties, and the values of those properties are roughly equivalent in terms of the information conveyed (if not necessarily the format or syntax) then our equivalent to Babel’s `RegExpLiteral` is done. Since Babel takes its AST as input to generate source code, by definition its AST is “complete” in that it contains all the information needed for source code generation. If our AST contains the same information, it should be just as complete.\r\n\r\nComparing node types also has the advantage that we don’t need a code generation method (like Prettier) built yet. All we need is a “kitchen sink” input file that has at least one of every node type, so it generates and AST that we can compare against Babel’s. @zdenko @helixbass ",
      "Some context about prettier, the way it works is the following: from an AST you generate an intermediate representation ( https://github.com/prettier/prettier/blob/master/commands.md ) that describes where things should break. Since the CoffeeScript AST is different than the JavaScript AST, you're likely going to have to rebuilt all that part from scratch.\r\n\r\nIf you use prettier, you're going to get a lot of infrastructure for free:\r\n- A CLI that supports a bunch of options\r\n- Unit testing infrastructure that has snapshot tests and indempotency checks\r\n- Editor integrations for all the editors / IDE on earth\r\n- A bunch of utils to handle comments, sub-languages (ex css inside of backticks), ...\r\n- An online playground to play with it (Not yet done for plugins but will be soon)\r\n\r\nI didn't realize at the time but there's actually a bunch of work outside of just the core formatter that is needed to make one successful. So, we've been trying to make a plugin system where if you want to add a new language, you just have to build the printer for that language and you get the rest for free.",
      "Thanks @vjeux. One of our maintainers is @lydell, so presumably we’ll have some help when it comes to the Prettier side of things 😄\r\n\r\nOne thing I’m concerned by is the idea of line breaking CoffeeScript source code in general. I know that intelligent line breaks was the original purpose of Prettier, but I think it’s fair to say that Prettier has evolved from that to now function as a best practices code reformatter in general. Since CoffeeScript is whitespace dependent, unlike JavaScript, it’s common to assume a soft word wrap and never break lines of code for the purpose of keeping under a column limit. Certainly people write objects and arrays in multiline style instead of inline when the inline version starts to get long and unwieldy, for example, but using the line continuation symbol `\\` or implying a continuation via things like ending a line in `and` are fairly uncommon. I don’t want to say there’s consensus on this view, but it’s fair to say that there _isn’t_ consensus that CoffeeScript code should be column-limited. This is something we’ll have to address, perhaps through a configuration option, when we get closer to outputting code via Prettier.",
      "Prettier itself doesn't enforce any of those, this is the person writing the ast -> IR that has to make those decisions. The IR allows you to express what happens if something goes over 80 columns.\r\n\r\nIt may seem that enforcing based on the 80-column rule is not ideal but in practice, people tend to write code that way. For example if you look at the files in coffeescript/src/, they tend to fit 80 columns.\r\n\r\nNow, this is only one input around when to break. For example in prettier we always break for `if` when there are braces. You also don't have to follow the column and read the input source and respect where break were, we do that for objects.\r\n\r\nThe strength of prettier infrastructure is that it gives you (IMO) the right primitives on-top of which you can build a solid pretty printer tailored for your language and the way you want code to look like.",
      "See [comment](https://github.com/jashkenas/coffeescript/issues/4984#issuecomment-392289532) in #4984 re progress, am able to nicely reformat `tests/*.coffee` (ie our whole test suite) using Prettier and the tests still pass",
      "@helixbass Is this safe to merge into the `ast` branch? It really only covers the CLI `--ast` flag (and Node API equivalent) and generic AST node generation. Would anything in here conflict with your other/future PRs? I took a look at your `prettier` branch but there’s so much else going on there, with running Prettier itself as part of generating the output, that it didn’t seem fully equivalent.\r\n\r\nI was thinking that if this were in, then we at least have a simple way of generating AST output that we can refer to as we merge more and more PRs in.",
      "@GeoffreyBooth sure, there are things that would conflict with the `prettier` branch in its current state, but like you said there'll have to be modifications to that branch anyway in preparation for merging whatever initial version of it around AST generation"
    ],
    "commit_messages": [
      "AST flag/API option; generic AST output for all nodes (#5044)\n\n* Add `nodes` option to Node API, that returns POJO representation of AST; starting point for toPlainObject method on node classes to return the serializable plain JavaScript object representation of each node\r\n\r\n* Make --nodes also return JSON (pretty-printed, though not colorized)\r\n\r\n* Alphabetize CLI flags\r\n\r\n* Use new `ast` flag to request AST, restoring prior `nodes` flag; rename toPlainObject to toJSON"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc353a21fa1e1f1a9e2b",
    "number": 5043,
    "body": "**This release adds support for all the new features and syntaxes in ES2018 that weren’t already possible in CoffeeScript.**\r\n\r\n*   Asynchronous iterators are now supported. You can now `yield` an `await` call, e.g. `do -> until file.EOF then yield await file.readLine()`. #4893\r\n*   Object splats/destructuring, a.k.a. object rest/spread syntax, has been standardized as part of ES2018 and therefore this release removes the polyfill that had previously been supporting this syntax. Code like `{a, b, rest...} = obj` now outputs more or less just like it appears, rather than being converted into an `Object.assign` call. Note that there are [some subtle differences](https://developers.google.com/web/updates/2017/06/object-rest-spread) between the `Object.assign` polyfill and the native implementation. #4884\r\n*   The exponentiation operator, `**`, and exponentiation assignment operator `**=` are new to JavaScript in ES2018. Now code like `a ** 3` is output as it appears, rather than being converted into `Math.pow(a, 3)` as it was before. #4881\r\n*   The `s` (dotAll) flag is now supported in regular expressions. #4880 \r\n\r\nhttp://rawgit.com/GeoffreyBooth/coffeescript/2.3.0/docs/v2/",
    "head_branch": "2.3.0",
    "is_a_fork": true,
    "comments": [
      "Since this PR is a bit bigger than usual, can anyone try using this branch in a project? Especially one with object spreads/rest.",
      "I just tested this branch with my biggest app and it seemed to work fine, so hopefully this is good to go."
    ],
    "commit_messages": [
      "2.3.0 (#5043)\n\n* Move analytics initialization into docs.coffee\r\n\r\n* Bump Bootstrap and CodeMirror versions\r\n\r\n* Update output\r\n\r\n* Merge CodeMirror styles\r\n\r\n* Update CodeMirror styles\r\n\r\n* Better flexbox layout for docs, including flex auto-sized sidebar and main column\r\n\r\n* Minor styling fixes for Edge\r\n\r\n* Fix scrollspy for new layout\r\n\r\n* Update output\r\n\r\n* Clicking on the CoffeeScript logo in the navbar should scroll to top; fix main column width on mobile\r\n\r\n* Update output\r\n\r\n* 2.3.0 changelog\r\n\r\n* Update operators section for **\r\n\r\n* Update docs for ES2018 object rest/spread\r\n\r\n* Remove references to Node's experimental modules support\r\n\r\n* Move the README coffee cup to the right side, so our name isn't cut off on the NPM page; update README and CONTRIBUTING text\r\n\r\n* Update dependencies\r\n\r\n* Add compatibility note for async generators\r\n\r\n* Bump version to 2.3.0 and update output\r\n\r\n* Have CI test in Node 10 instead of 9\r\n\r\n* Somehow this gets generated slightly differently in Node 10\r\n\r\n* Fix #4042: Update broken link"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc363a21fa1e1f1a9e2c",
    "number": 5042,
    "body": "This PR updates Bootstrap and CodeMirror, and **finally fixes the width of the sidebar**. It should be of flexible width now, sizing with the width of the nav items’ text. @jashkenas, please let me know what you think. https://rawgit.com/GeoffreyBooth/coffeescript/docs-improvements/docs/v2/\r\n\r\nThis PR incorporates the minor changes I made on #5035 aside from adding the fulltext search.",
    "head_branch": "docs-improvements",
    "is_a_fork": true,
    "comments": [
      "Looks great, Geoffrey!"
    ],
    "commit_messages": [
      "Docs improvements (#5042)\n\n* Move analytics initialization into docs.coffee\r\n\r\n* Bump Bootstrap and CodeMirror versions\r\n\r\n* Update output\r\n\r\n* Merge CodeMirror styles\r\n\r\n* Update CodeMirror styles\r\n\r\n* Better flexbox layout for docs, including flex auto-sized sidebar and main column\r\n\r\n* Minor styling fixes for Edge\r\n\r\n* Fix scrollspy for new layout\r\n\r\n* Update output\r\n\r\n* Clicking on the CoffeeScript logo in the navbar should scroll to top; fix main column width on mobile\r\n\r\n* Update output"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc373a21fa1e1f1a9e2d",
    "number": 5035,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttp://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a \r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by \r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in \r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in \r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](http://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\nAdding the DocSearch experience. We do provide analytics on the search, feel free to ping.\r\n",
    "head_branch": "feat/add_search",
    "is_a_fork": true,
    "comments": [
      "Looks like some unrelated changes to the docs snuck into the commit as well?",
      ":wave: @jashkenas \r\n\r\nOnly the update of `package.json`\r\n\r\nThe `overflow` need to be changed in order to enable the dropdown to be fully seen.",
      "I'm wondering about the \"this list may be incomplete\", and \"when compiling folders or globs\" bits, as seen in the diff...",
      "Happy to explain every changes. \r\nIt is working fine on my side",
      "ah ok I see your points.\r\n\r\nIt only a new line introduced. I can change it if needed",
      "@jashkenas The text changes were introduced by an earlier PR, that modified the source `.md` files but didn’t update the output HTML files. The plan was to update the output with the next release.\r\n\r\nBut some of those changes need to change, because of further discussions about Node’s modules support. In particular I don’t want to mention `.mjs` if it’s going away or becoming discouraged, as now seems possible. I’ll make some edits on this PR before merging it in.",
      "A few things:\r\n\r\n- I can’t seem to scroll within the sidebar anymore.\r\n- I’d like the search results pane to match the general styling of our site. I added the body font to it, but the colors need to change too (browns and greens, not blues). I can work on this more soon when I have more time.\r\n- Is it possible for Algolia to honor `code` blocks/Markdown? Like when searching for “modules”, you see results that mention “import and export statements”. It would be nice if “import” was rendered as `import`, like a code block.\r\n\r\nWe can’t merge this in until the next release, as the docs now mention the exponentiation operator and merged-in object spread, which haven’t been released yet (and merging this in will update the docs immediately). But we can get this PR to be merge-ready, and I’ll merge it in along with cutting that release.",
      "👋 @GeoffreyBooth \r\n\r\nThank you for the commits\r\n\r\n> I can’t seem to scroll within the sidebar anymore\r\n\r\nThis is solved thanks to 2647023\r\n\r\n> I’d like the search results pane to match the general styling of our site. I added the body font to it, but the colors need to change too (browns and greens, not blues). I can work on this more soon when I have more time.\r\n\r\nYou can override the colours. Would you like to change the blue into your theme's colour? Feel free to ping me and explaining what you would like to achieve.\r\n\r\n> Is it possible for Algolia to honor code blocks/Markdown? Like when searching for “modules”, you see results that mention “import and export statements”. It would be nice if “import” was rendered as import, like a code block.\r\n\r\nIt could be possible but it is not possible to scrap code since it introduce a lot of noise. Furthermore the meanings of words isn't always the same as plain text. \r\n\r\n>We can’t merge this in until the next release, as the docs now mention the exponentiation operator and merged-in object spread, which haven’t been released yet (and merging this in will update the docs immediately). But we can get this PR to be merge-ready, and I’ll merge it in along with cutting that release.\r\n\r\nWe can integrate it to the current version if you want. Just point me the right commit.\r\n\r\nHappy to help",
      "Happy to help in order to merge it :)",
      "> It could be possible but it is not possible to scrap code since it introduce a lot of noise. Furthermore the meanings of words isn’t always the same as plain text.\r\n\r\nI’m not sure what you mean by this. I don’t mean that code blocks should be indexed; just that _inline code,_ like `this`, that’s already being indexed should appear in the search results styled as inline code. So for example, in this:\r\n\r\n![image](https://user-images.githubusercontent.com/456802/39026890-3c365182-4404-11e8-9c9b-83b585a7d4e5.png)\r\n\r\nThe words “import” and “export” should be rendered in monospace with a light solid background, similar to how GitHub renders inline code blocks between backticks: `import` and `export`. That’s the way they appear in the section that’s being excerpted:\r\n\r\n![image](https://user-images.githubusercontent.com/456802/39026948-7f781ade-4404-11e8-8e25-5f5cb219ad92.png)\r\n\r\nIt’s just the HTML `<code>` tag.",
      "👋 \r\n\r\nI meant that we do not scrap and extract the cotent of `<code/>` elements since it isn't include in the `text` selector. Indexing code introduce a lot of noise and can be counterproductive. We only scrap element wrapped in matching `text` selectors\r\n\r\nLet us know if you still want us to find a way to have this kind of rendering.",
      "Okay, I’ve styled this, including making it look good (I hope) on both desktop and mobile:\r\nhttps://rawgit.com/s-pace/coffeescript/feat/add_search/docs/v2/\r\n@jashkenas and others, please feel free to give me notes. Also check it out on mobile. I still need to do proper QA, but I think the design should be good hopefully.\r\n\r\n@s-pace, one thing that doesn’t look so good is that we have a lot of repetition in search categories/headings/titles:\r\n![image](https://user-images.githubusercontent.com/456802/39231753-f761611c-481f-11e8-8934-344aafd67150.png)\r\n\r\nI figured out the CSS to remove the left column (the muted text) but then it looks even weirder, as each category matches each heading most of the time. Is there a good way to deal with this?\r\n\r\nAlso I see that in https://github.com/algolia/docsearch-configs/blob/master/configs/coffeescript.json, the base URL is `http://coffeescript.org/v2/`. Our canonical URLs don’t use the `/v2`; is this necessary in your search configuration to avoid indexing the v1 docs? I already added some [code](https://github.com/s-pace/coffeescript/blob/e663a370f83d87996df2be9fbe35f49087865013/documentation/site/docs.coffee#L201-L207) to rewrite the URLs as they come back from your API.",
      "👋 @GeoffreyBooth \r\n\r\nThank you fo the details\r\n\r\nRegarding the duplicates, it is mainly coming from your structure.\r\n\r\nFeel free to PR your config, we can index both versions and use `variable` in order to filter over it.\r\n\r\ncheers",
      "@s-pace I’m not sure I follow. We only want the current docs indexed, but I want the canonical URLs presented to users (so no `/v2/`).\r\n\r\nWhen you say the duplicates are coming from our structure, how is that? In the example above, “Functions” is under “Language Reference”. See the tree in the sidebar. We use `h1`, `h2` etc. tags as appropriate. How do I get Algolia to categorize appropriately?",
      "@GeoffreyBooth \r\n\r\nMy bad, I got it. [Check the changes](https://github.com/algolia/docsearch-configs/commit/3211a440e8489278a27e0104a1c589ab7ff2669f), it is live.\r\n\r\nLMK WDYT",
      "That’s better, though the changelog entries should be under “Changelog”:\r\n\r\n![image](https://user-images.githubusercontent.com/456802/39261975-f4147bb8-4872-11e8-97f3-d21137e46c6d.png)\r\n\r\nDo I have something wrong in my HTML structure?",
      "The changelog part wasn't consistent but I have fixed it 👇 \r\n\r\nLMK WDYT",
      "That looks better, thanks:\r\n\r\n![image](https://user-images.githubusercontent.com/456802/39270164-10a03030-488a-11e8-9fef-aa3e8304b4d2.png)\r\n\r\nThough wouldn’t it be better if I just changed the HTML structure so that the special casing for the changelog is unnecessary? Since I can’t trigger a reindex it’s hard to know what it should be.\r\n\r\nI guess I should remove the left column, since we only have two levels of headings and not three, so there’s duplication in the two columns of suggestions. I can do that via CSS unless there’s a better way.",
      "Since there isn't enough depth in the level we can't change it so if you want you can use the CSS.\r\n\r\nAs for the changes you have made. I am not such they are live because I have the same outcome with the older version. Let's continue with the lates one.\r\n\r\nLet me know if you need anything else.",
      "@GeoffreyBooth — feel free to make the final decision here, but I think I should go on the record again expressing my mild-to-moderate opposition to this search upgrade.\r\n\r\nWith this change, every keystroke someone types into CoffeeScript's search box is sent to Algolia's search servers ... an entirely unnecessary invasion of privacy, given that all of the content is present on the page itself.\r\n\r\nIf we were just using a local, JS, opensource library, or even Algolia's offline version, I'd feel a lot better about this.",
      "I didn’t know there was an offline version. I would be fine with that. What I like about a search box in general (over Cmd/Ctrl-F) is some level of relevancy intelligence, so that a search for “class” will show suggestions weighted by things like a heading of “Classes” rather than just always jumping to the first appearance of the word “class” on the page. If there’s a fully client-side solution that can achieve that, that would be worth exploring.\r\n\r\nI don’t think anyone who types into a search input expects their input to _not_ be sent to a server. If they wanted that level of privacy, they would use Cmd/Ctrl-F.",
      "Hi @jashkenas \r\n\r\nThank you for sharing your concern. Privacy is something we also take very seriously at Algolia. While searches are gonna be proceeded by our servers, we of course don't track end users with any cookie and/or retargeting strategy. You can read more about [our privacy policy](https://www.algolia.com/policies/privacy).\r\n\r\nSecurity is key for a SAAS company like us and we heavily invest in it. You can [check our achievements in these regards](https://www.algolia.com/security).",
      "I'm a bit sensitive to this issue because of current events. [The privacy policy](https://www.algolia.com/policies/privacy):\r\n\r\n* May change at any time.\r\n* States that Algolia collects your search queries, IP address, browser and so on.\r\n* States that Algolia may then associate the information they've gathered with other personal information they've purchased from third parties.\r\n* Says that they may then sell the gathered personal information in the event of a merger or acquisition.\r\n* Also says that they can sell or \"disclose\" the aggregated personal information, in a non-individually-identifiable way, at any time, for any reason.\r\n\r\nThat's all well and good, normally. But in this case, because there's no technical reason why we need to be sharing searches with remote servers — all of the content is present on the page (intentionally!) — it makes me uncomfortable.",
      "@jashkenas See https://medium.com/dev-channel/how-to-add-full-text-search-to-your-website-4e9c80ce2bf4\r\n\r\nIt looks like lunr.js or elasticlunr.js can do full text search entirely client-side. We would generate the search index ahead of time when we generate the docs.",
      "Also\r\n- [Fuse.js](http://fusejs.io)\r\n- [search-index](https://github.com/fergiemcdowall/search-index)\r\n- [Full Text Search Light](https://github.com/frankred/node-full-text-search-light)\r\n- [Norch](https://github.com/fergiemcdowall/norch)\r\n- [Searchico](https://github.com/illusion1993/searchico)",
      "@zdenko is there one you’ve used that you recommend?",
      "@GeoffreyBooth I've used Fuse once or twice before. And, \"search-index\" looks like a good candidate too.   \r\nI can put something together this weekend.",
      "@zdenko I’ve already placed and styled the search input on this branch, so you probably want to start from this branch. The search input is separate from Algolia/docSearch, so it would be easy to preserve while removing docSearch.",
      "P.S. I like the idea of having the search index generated ahead of time during `cake doc:site`, so that the JS on our docs page isn’t generating that index in the background every time the site loads. Whatever solution you choose should ideally have that feature.",
      "Yes, search index should be definitely generated during `doc:site` task."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc383a21fa1e1f1a9e2e",
    "number": 5028,
    "body": "This came up in CITGM while improving assert.throws in Node.js. See nodejs/node#19867 for more information.\r\n\r\nThe current tests never checked for the error message and instead would just ignore that argument. It would only be used in case no error is thrown and that is not the intention in this case.\r\n\r\nThis makes sure the error message is actually tested for.",
    "head_branch": "fix-tests",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Fix: a test relied on faulty behavior (#5028)\n\n`assert.throws` did not test for the error message so far. This\r\nchanges it to actually test for the error message."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc393a21fa1e1f1a9e2f",
    "number": 5026,
    "body": "Fixes #5018, providing a way for the command-line compiler to output `.mjs` files. The method implemented in this PR simply looks at the filename of the source CoffeeScript file(s), and if the source has an extension of `.mcoffee` or `.litmcoffee` (or `.mcoffee.md`) it is saved with an `.mjs` extension.\r\n\r\nThis PR also finally removes the `--join` CLI option, which was deprecated back in version 1.8.0 in 2014.\r\n\r\n___\r\n**TODO**: Need to figure out how to test this, and support ES module tests in general. Using the Node 10 nightly as of 2018-04-01, ES modules still aren’t yet supported except behind the `--experimental-modules` flag, though Node 10 final shouldn’t require the flag. Even aside from that, I don’t see how to get Node to support ES modules when parsing a string, e.g.:\r\n\r\n```bash\r\n✦ node -v\r\nv10.0.0-nightly2018033128b622cb08\r\n\r\n✦ src='import path from \"path\"; console.log(path.sep);'\r\n\r\n✦ node --experimental-modules --eval $src\r\n[eval]:1\r\nimport path from \"path\"; console.log(path.sep);\r\n       ^^^^\r\n\r\nSyntaxError: Unexpected identifier\r\n    at new Script (vm.js:53:7)\r\n    at createScript (vm.js:181:10)\r\n    at Object.runInThisContext (vm.js:229:10)\r\n    at Object.<anonymous> ([eval]-wrapper:6:22)\r\n    at Module._compile (internal/modules/cjs/loader.js:678:30)\r\n    at evalScript (internal/bootstrap/node.js:539:27)\r\n    at startup (internal/bootstrap/node.js:201:9)\r\n    at bootstrapNodeJSCore (internal/bootstrap/node.js:572:3)\r\n\r\n✦ echo $src > test.mjs\r\n\r\n✦ node --experimental-modules test.mjs\r\n(node:74878) ExperimentalWarning: The ESM module loader is experimental.\r\n/\r\n```\r\n\r\nThe way our tests currently work, CoffeeScript compiles the test code into a string and asks Node to eval the string. This doesn’t look like it’ll work for an `import` statement, though, since apparently the only way to enable support for `import` statements in Node is to explicitly load an `.mjs` file. So if I wanted to get the tests to work today, it appears I would need to write the output JS string to disk as an `.mjs` file, then spawn Node to evaluate it.",
    "head_branch": "es-modules",
    "is_a_fork": true,
    "comments": [
      "Closing for now as the future of .mjs looks uncertain."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc3a3a21fa1e1f1a9e30",
    "number": 5025,
    "body": "Hopefully the last bugfix release before we release 2.3.0 with the enhancement PRs. In 2.2.4:\r\n\r\n*   When the `by` value in a `for` loop is a literal number, e.g. `for x in [2..1] by -1`, fewer checks are necessary to determine if the loop is in range. #5016, fix for #5015.\r\n*   Bugfix for regression in 2.2.0 where a statement inside parentheses, e.g. `(fn(); break) while condition`, was compiling. Pure statements like `break` or `return` cannot turn a parenthesized block into an expression, and should throw an error. #5014, fix for #5013.\r\n",
    "head_branch": "2.2.4",
    "is_a_fork": true,
    "comments": [
      "@GeoffreyBooth this LGTM."
    ],
    "commit_messages": [
      "2.2.4 (#5025)\n\n* Update changelog for 2.2.4\r\n\r\n* Bump version to 2.2.4; update output"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc3b3a21fa1e1f1a9e31",
    "number": 5020,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttp://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a \r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by \r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in \r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in \r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](http://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "That’s not a typo."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc3c3a21fa1e1f1a9e32",
    "number": 5016,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttp://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a \r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by \r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in \r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in \r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](http://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\nFixes #5015. Simplify and optimize `for-range-by` loop when `step` is a literal number.\r\n\r\n```coffeescript\r\nfor x in [1..a] by 1\r\n# for (x = i = 1, ref = a; i <= ref; x = i += 1)\r\n\r\nfor x in [a..1] by 1\r\n# for (x = i = ref = a; i <= 1; x = i += 1)\r\n\r\nfor x in [a..b] by 1\r\n# for (x = i = ref = a, ref1 = b; i <= ref1; x = i += 1)\r\n\r\nfor x in [1..2] by 1\r\n# for (x = i = 1; i <= 2; x = i += 1)\r\n\r\nfor x in [1..a] by -1\r\n# for (x = i = 1, ref = a; i >= ref; x = i += -1)\r\n\r\nfor x in [a..1] by -1\r\n# for (x = i = ref = a; i >= 1; x = i += -1)\r\n\r\nfor x in [a..b] by -1\r\n# for (x = i = ref = a, ref1 = b; i >= ref1; x = i += -1)\r\n\r\nfor x in [2..1] by -1\r\n# for (x = i = 2; i >= 1; x = i += -1)\r\n```",
    "head_branch": "issue5015",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimize 'for-range-by' loop when 'by' is literal number (#5016)\n\n* optimize 'for-range-by' loop when 'by' is literal number\r\n\r\n* small fix"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc3c3a21fa1e1f1a9e33",
    "number": 5014,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttp://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a \r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by \r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in \r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in \r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](http://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\nFixes #5013 and return statement as an expression in general.\r\n\r\n```coffeescript\r\n-> (return)\r\n# (function() {});\r\n\r\n-> (yield return)\r\n# (function*() {});\r\n\r\n-> (await return)\r\n# (async function() {});\r\n```",
    "head_branch": "issue5013",
    "is_a_fork": true,
    "comments": [
      "I'm a little confused by this one. `return` is a statement. Why would we want to allow it as a part of an expression?\r\n\r\n`(return)` doesn't make sense, because it returns from the function and never provides a value that can be used by the parenthesis. It's the same reason why we don't have `return + 5`, or `call(return 3)`.",
      "It is confusing.  Other statements in the expression are allowed as of #4849.\r\n\r\nSo, since `(a(); break) for a in b`, `(break) for a in b` and `(break)` compile, should we allow   \r\n`(a(); return) if true`, `(return) if true` and `(return)` as well?\r\nOr, perhaps just the first case as others don't make much sense. And even the example from #5013 could be written as\r\n\r\n```coffeescript\r\n->\r\n  if true\r\n    b = 1\r\n    return\r\n  b = 2\r\n```\r\n\r\n@GeoffreyBooth  both `function*() {}` and `async function() {}` are valid ES syntax.\r\n",
      "* `(break)` should not compile.\r\n* `(break) for a in b` should not compile.\r\n* `(a(); break) for a in b` should not compile.\r\n\r\nThe right way to write the latter, is:\r\n\r\n```coffeescript\r\nfor a in b\r\n  a()\r\n  break\r\n```\r\n\r\nOr: \r\n\r\n```coffeescript\r\nfor a in b then a(); break\r\n```\r\n\r\nLet's not loosen the rules to allow people to write clever, but syntactically nonsensical code. Let's keep things tidy.",
      "@jashkenas so #4849 should be reverted then? This was labeled as a bug since 2014.\r\nIn other words, statements in the expression are not allowed.",
      "I would confirm with @lydell and @GeoffreyBooth first, but my opinion is yes: The whole point of statements is that they represent constructs that can't meaningfully be used as a part of a larger expression.\r\n\r\nIn CoffeeScript, we want as much as possible to be an expression (including things that aren't in JavaScript, like variable initialization). But some things just can't be expressions, and `break` and `return` are two of those things.",
      "> @GeoffreyBooth  both `function*() {}` and `async function() {}` are valid ES syntax.\r\n\r\nYes, but my point was that the original CoffeeScript has a `return` in it (and/or a `break` or `await`) and those aren’t present in the output. That feels wrong to me.\r\n\r\nI see no reason to disagree with @jashkenas here. #4849 was only merged in a few weeks ago, we can revert it. That would basically be fixing a regression, in that #4849 more or less introduced a bug in that statements are suddenly allowed where they shouldn’t be. #3441, the bug from 2014, would remain closed as per @jashkenas’ comment here it shouldn’t have compiled in the first place. At least now we can explain why.",
      "@GeoffreyBooth I'll make changes in this PR to revert to the previous state.\r\nIt's just a few lines of change. Plus, I'll add a couple of tests for statement compilation error message.",
      "I don't really mind how it ends up anyway, I just feel like pointing one thing out:\r\n\r\n> I would confirm with @lydell and @GeoffreyBooth first, but my opinion is yes: The whole point of statements is that they represent constructs that can't meaningfully be used as a part of a larger expression.\r\n\r\nThis is less, imho, about statements vs expressions, that about simulating a JS block using parentheses and the semicolon operator, which is somewhat our alternative to JS' comma operator. The distinction between expression and statement is still present.",
      "> This is less, imho, about statements vs expressions, that about simulating a JS block using parentheses and the semicolon operator, which is somewhat our alternative to JS' comma operator.\r\n\r\nI see that point of view, but it still feels like something that we shouldn't support and encourage. Instead of tricks using parentheses to jam a bunch of stuff on a single line — just write it the other way.",
      "I'm used to this syntax in Ruby since it's the only way to write early returns in a single line in Ruby. I use this pattern very often both in Ruby and CoffeeScript 1. For example (in Ruby):\r\n\r\n(render 'error'; return) if error?\r\ncommon_path\r\n\r\nAt least in Ruby, when discussing such early results statements once in a ticket Matz told that was the recommended approach for those cases, so he doesn't seem to find it weird. By the way, I use the same pattern in a case statement block as well (with break).\r\n"
    ],
    "commit_messages": [
      "Fix #5013: return statement as an expression (#5014)\n\n* fix #5013\r\n\r\n* disallow statement in the expression"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc3d3a21fa1e1f1a9e34",
    "number": 5012,
    "body": "Make classMaker() explicitly return an object\r\n\r\nWithout this change, `node --harmony bin/cake test` the test \"classes with value'd constructors\" fails because classMaker returns a number.",
    "head_branch": "return-object-from-classmaker",
    "is_a_fork": true,
    "comments": [
      "Should I also add\r\n\r\n  - node --harmony ./bin/cake test\r\n\r\nto appveyor.yml?",
      "We should add Node 9 for both AppVeyor and Travis. And harmony as one of the test commands we run. If harmony tests fail in Node < 9, then we should have harmony only run for Node 9 (because why would someone run an old version of Node in harmony mode?).",
      "P.S. See https://github.com/jashkenas/coffeescript/pull/4880/files",
      "Seeing my Cakefile patch in use in #4880 was the best birthday present I got yesterday. :)\r\n\r\nBack on topic, harmony tests are currently passing for me on v6 and v8. I agree in principle that there's little to no customer value in making bleeding-edge features tests run and/or pass on non-bleeding-edge runtimes, but until they actually fail I propose that they could serve as a kind of canary-in-a-coal-mine for other surprises. They might reveal obscure changes in older runtimes, dependencies or invalid assumptions in our feature tests."
    ],
    "commit_messages": [
      "Make `node --harmony bin/cake test` pass on Node 9 (#5012)\n\n* Make `node --harmony bin/cake test` pass on Node 9\r\n\r\nMake classMaker() explicitly return an object\r\n\r\n* Update Travis and AppVeyor to use --harmony and v9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc3e3a21fa1e1f1a9e35",
    "number": 5010,
    "body": "Another bugfix release:\r\n\r\n*   Bugfix for object destructuring with an empty array as a key’s value: `{ key: [] } = obj`. #5000\r\n*   Bugfix for array destructuring onto targets attached to `this`: `[ @most... , @penultimate, @last ] = arr`. #5005",
    "head_branch": "2.2.3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "2.2.3 (#5010)\n\n* Bump version to 2.2.3; update packages\r\n\r\n* Update output\r\n\r\n* Update changelog"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc3f3a21fa1e1f1a9e36",
    "number": 5007,
    "body": "This is an alternative to #5003 for making some tests not run (or even compile) when the runtime doesn't support a feature they rely on.\r\n\r\nThis change removes the need to edit Cakefile whenever tests are added for which rely on a feature not previously relied on. The tests need only be placed in a directory containing an index.coffee which tests for the feature they require.\r\n\r\nThe following pending PRs would benefit from this:\r\n- #4893 \r\n- #4877 \r\n- #4880 \r\n- #4884",
    "head_branch": "feature-test-directories",
    "is_a_fork": true,
    "comments": [
      "I think I would prefer #5003. I think that over time we will increase the minimum version of Node required; [Node 6 reaches end-of-life in April 2019](https://github.com/nodejs/Release), for example, and so that would seem to be the time to drop support for it (if not sooner) and the number of “exceptions” will simplify each time we do so. Also the folder-based approach lacks flexibility when it comes to extending the selective loading to the browser tests; presumably different files would be loaded for testing in browsers, or even testing in different browsers.",
      "P.S. I don’t mean my closing this to be the final say on the matter. I’m happy to reopen if the other maintainers feel that this is the better of the two PRs. Just trying to de-clutter."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc403a21fa1e1f1a9e37",
    "number": 5006,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttp://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a \r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by \r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in \r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in \r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](http://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\nAs proposed in #1334 and #3828, this PR adds options to access object and array members by using dot notation with literals (`string`, `number`).\r\n\r\n```coffeescript\r\nobj =\r\n    \"a-b-c\": 1\r\n    a:\r\n      \"b-c\": 11\r\n    \"a-b\":\r\n      2: 22\r\n    42: 3\r\n    \"f-o-o\": -> \"foo\"\r\n    \"b-a\":\r\n      \"-r\": -> \"bar\"\r\n      5: -> \"b52\"\r\n    4:\r\n      2: 42\r\n    5:\r\n      \"2-0\": \"five-two-zero\"\r\n\r\nobj.\"a-b-c\"\r\nobj.42\r\nobj.\"f-o-o\"()\r\nobj.'b-a'.\"-r\"()\r\nobj.4.2\r\nobj.5.\"\"\"2-0\"\"\"\r\n\r\nobj.\"a-b\".2 + .5  # = 22.5\r\n\r\n# String interpolation is supported.\r\nobj.\"#{\"a\" + \"-\"}b#{\"-\"}c\"\r\n\r\n# Arrays\r\narr = [\r\n  [1, 2, 3]\r\n  [4, 5, 6]\r\n  [7, 8, 9]\r\n]\r\n\r\narr.0.2\r\narr.\"#{1 + 1}\".\"#{6 * 3 / 9}\"\r\n```",
    "head_branch": "literal_props",
    "is_a_fork": true,
    "comments": [
      "This is starting to get messy... Just throwing my two cents in: I'm not a fan of this syntax :(\r\n\r\nWhat happens if you're trying to do something like `array[Symbol.toPrimitive]`",
      "Just write that.",
      "Also I see it getting messy depending on variable names: `temp2.2` vs `temp2 .2`\r\nAlso `temp.2.2` is unclear whether it means `temp[2][2]` or `temp[2.2]`",
      "We went over this previously.",
      "> Also temp.2.2 is unclear whether it means temp[2][2] or temp[2.2]\r\n\r\n`temp.2.2` is `temp[2][2]` and `temp.\"2.2\"` is `temp[2.2]`",
      "What about the issues raised in #3828 regarding floats without leading zeros, e.g. `.5`? We should at least have tests that those didn’t break, e.g.\r\n```coffee\r\ntest \"#3828: Floats with leading periods still work\", ->\r\n  eq (0.5).toFixed(1), (.5).toFixed(1)\r\n```",
      "For backwards compatibility we should also check things like `f .2` and `f .2.toFixed()` as @aminland mentioned above.",
      "@zdenko @helixbass @vendethiel @connec @aminland Any more notes on this, or is this okay to merge in?\r\n\r\n@helixbass Does this interfere with any of the refactoring you’re doing? Obviously this will introduce some merge conflicts with your string refactoring, but aside from fixing merge conflicts, does allowing this syntax expansion interfere with anything you’re working on regarding getting us closer to an AST and Prettier support.\r\n\r\nPer semver this would bump us into 2.4.0, unless we want to merge it in and wait for another feature or two to be ready to release as part of 2.4.0.",
      "@GeoffreyBooth how is it that your point from https://github.com/jashkenas/coffeescript/issues/4991#issuecomment-386505347 doesn't apply here as well?",
      "@aminland I had thought that this wasn’t and couldn’t be valid JavaScript syntax, and so there isn’t a risk of “getting ahead” of the ECMA committee on something they may someday adopt. But . . . _could_ this someday be valid JavaScript syntax? Now I’m not so sure.\r\n\r\nThough you could counterargue that even if it does someday become allowed in JavaScript, would the syntax ever represent anything other than this? In which case it wouldn’t matter.\r\n\r\nBut yes, let’s discuss. This feature isn’t such a groundbreaking improvement that it’s worth risking a potential breaking change.",
      "I came across this, on the forum where new proposals to JavaScript get discussed:\r\nhttps://esdiscuss.org/topic/extended-dot-notation-pick-notation-proposal. See also https://github.com/rtm/js-pick-notation/blob/master/README.md.\r\n\r\nSo the ES community is looking at the space after the period in dot notation and considering what else could be put there. That said, would they ever consider an integer there to be anything other than an index reference (what we're considering here)? Perhaps a champion for this proposal should ask on that forum.",
      "I don't see any gain in having this new syntax. In my oppinion it looks messy, ambiguous and hard to parse. It certainly allows for new runtime errors that would previoulsy have been caught at compile time.\r\n\r\nFor example:\r\n```coffee\r\nfunc\r\n  .5\r\n  .2\r\n```\r\nWe all know that this wouldn't work at the moment as it's not a valid call without parens. I couldn't tell what this compiles to after merging this.\r\nMight be `func[5][2];`, could also be `func[5]; .2;`. Maybe it still throws when compiling, maybe one day this could become a valid function call. Certainly not after this PR.\r\n\r\nMy 2 cents. Cheers.",
      "So I just ran the tests on #5215 and one of them is failing on `1._23`, which parses as:\r\n\r\n```\r\nBlock\r\n  Value NumberLiteral: 1\r\n    Access PropertyName: _23\r\n```\r\n\r\nSo `1._23` shouldn’t parse, which is the issue in that branch. But aside from that, this error is making me think that maybe we should close this PR after all, since we wouldn’t want to add this new syntax and then get into trouble later if/when JavaScript adds anything else along the lines of new numeric separators or some way to signal true decimals as opposed to floats, etc. Any thoughts?\r\n\r\nI’m sorry for all the back-and-forth @zdenko, you put in great effort with this PR 😄",
      "`1._23` parses correctly. It's CS sugar like `42.toString()` which has been around for ages but only rarely is used. I didn't think of it in #5215 and will change the test to explicitely allow for this (not as a number literal tho).",
      "And `42.toString()` compiles into `42..toString()` which . . . works. Somehow. I don’t quite follow how.",
      "I'd also vote to close this PR, I don't think this syntax is very nice or adds much and I agree with the thoughts that it is hard to read/parse and potentially setting us up for conflicts with future syntax\r\n\r\n> And `42.toString()` compiles into `42..toString()` which . . . works. Somehow. I don’t quite follow how.\r\n\r\n@GeoffreyBooth I don't 100% understand this but I know JS is effectively parsing it like `(42.).toString()`",
      "So besides `BigInt` and numeric separators, there seem to be other [number-related proposals](https://neil188.github.io/07-11-2018/JavaScript-Numbers-proposals/) in various stages of progress. I think the prudent thing to do would be to close this, to avoid setting ourselves up for trouble in the event of a syntax clash with one of the future JavaScript enhancements related to numbers. I’m open to being persuaded otherwise, and we can also always reopen some time later once the proposals pipeline has slimmed down a bit and we see where things land with regards to numbers in JavaScript."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc413a21fa1e1f1a9e38",
    "number": 5005,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttp://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a \r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by \r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in \r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in \r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](http://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\nFixes #5004.\r\n\r\n```coffeescript\r\n[@all_but_last_two... , @penultimate, @last] = array\r\n\r\n###\r\n[...this.all_but_last_two] = array, [this.penultimate, this.last] = splice.call(this.all_but_last_two, -2);\r\n###\r\n```\r\n\r\n---\r\n\r\n```coffeescript\r\n[obj.first , obj.middle..., obj.last] = array\r\n\r\n###\r\n[obj.first, ...obj.middle] = array, [obj.last] = splice.call(obj.middle, -1);\r\n###\r\n```",
    "head_branch": "issue5004",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #5004: incorrect compiled code when a destructuring array contains accessors (#5005)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc423a21fa1e1f1a9e39",
    "number": 5003,
    "body": "_This is a re-creation of PR #4998, which automatically closed because I deleted the branch it came from, and was itself a re-creation of PR #4997 without the extraneous history. Original description follows._\r\n\r\nPer discussion on #4893 and #4997, managing exclusion of tests when newer features are required is currently non-obvious. The goal of this PR is to make maintenance of such exceptions easy and surprise-free.\r\n\r\nThe existing method was a hard-wired exception for the file 'async.coffee'. When I added async_iterators for #4893 I was surprised because I didn't know about the ```build:watch:harmony``` build target nor the hardwired exception in runTests. Now both the feature test and filename match are handled on the same lines near the top of Cakefile.\r\n\r\nI included two currently unused pattern/feature pairs to demonstrate the intent and value of this approach. Both will likely be used for #4877 and #4893.\r\n\r\nI didn't write a test for this change since it's a change to the test system.\r\n\r\nAfter posting this I'm going to figure out how to remove the extra unrelated empty commits, but I wanted to get this out there before the weekend to follow through on my previous commitment.",
    "head_branch": "master-pending-4998",
    "is_a_fork": true,
    "comments": [
      "I started looking through other PRs and noticed that #4880 would benefit from this feature as well. The tests which need to be skipped would have to be in their own file though. Supposing it were called ```node9_regexps.coffee```, the updated table would look something like\r\n\r\n```coffee\r\ntestFilesToSkip = [\r\n  /async/           unless try new Function 'async ()   => {}'\r\n  /async_iterators/ unless try new Function 'async () * => {}'\r\n  /exponent_ops/    unless try new Function 'x = 3; x **= 2 ** 2; return x === 81'\r\n  /node9/           unless process.version.match /^v9/\r\n].filter _.identity\r\n```\r\n\r\n(I wonder why the GitHub coffee colorizer is confused by this code? Vim gets it right.)",
      "#4884 seems to want this too.",
      "While I'm confident this patch is a step forward, I've been working on a more elegant approach.\r\n\r\nMy current thinking is similar to what I proposed on another thread, where each set of tests with the same requirements goes in its own directory. Instead of having a config file, `index.coffee` in each directory handles the `should these tests run` question.\r\n\r\nEdit to add: #5007 is my more elegant solution and obsoletes this PR if it is accepted.",
      "I think this PR has better, easier solution for skipping specific tests. Organizing files in folders seem to much work. In most cases, there would be just one file (+ `index.coffee`) per folder.\r\n\r\nThis got me thinking if there could be an even better solution to skip tests. Instead of relying on the file name pattern (or folders) we could use custom identifiers. What if sometimes test needs to pass more then one check, e.g. async generators and object rest/spread?\r\nSo, here's my quick proposal (just brainstorming).\r\n\r\nWe could add an array of conditions per test function:\r\n\r\n```coffeescript\r\ntest \"async as argument\", [\"async\", \"some_other_condition\"], ->\r\n  ok ->\r\n    await winning()\r\n```\r\n(The array is placed after the description because some functions are quite long and I think it is more readable this way.)\r\n\r\nThe array of test conditions identifiers is similar as in this PR but contains conditions which passed the tests.\r\n\r\n```coffeescript\r\ntestFilesConditons = [\r\n  /async/           if try new Function 'async ()   => {}'\r\n  /async_iterators/ if try new Function 'async () * => {}'\r\n  /exponent_ops/    if try new Function 'x = 3; x **= 2 ** 2; return x === 81'\r\n].filter _.identity\r\n\r\nfeaturesPresentFor = (cond) -> testFilesConditons.find (filePattern) -> cond.match filePattern\r\n```\r\n\r\nThen, in `global.test`, we check if the function has conditions and if any of them fails we skip the test.\r\n\r\n```coffeescript\r\n# Our test helper function for delimiting different test cases.\r\nglobal.test = (description, fnCond, fn = no) ->\r\n  canTest = (conditions) ->\r\n    passed = (yes for cond in conditions when featuresPresentFor(cond)?)\r\n    passed.length is conditions.length\r\n\r\n  try\r\n    fn = fnCond if _.isFunction fnCond\r\n    fn.test = {description, currentFile}\r\n    # If the test has specific conditions (i.e. `async generators`) \r\n    # and doesn't pass, it will be skipped.\r\n    if _.isArray(fnCond) and not canTest fnCond\r\n      result = yes\r\n    else\r\n      result = fn.call(fn)\r\n...\r\n```\r\n\r\nI tried this approach locally and it seems to be working. \r\n",
      "I agree with @zdenko that I’d rather a `Cakefile`-based approach than a folder-based approach. It’s not that hard to edit the `Cakefile`, and we may have to for future oddball things like more attachments to `global` such as `testAsync`.\r\n\r\n@zdenko I don’t think your suggestion will work. Use the tool `n` (`npm install -g n`) to switch to an older version of Node, like Node 6, and you’ll see why. Even if a particular function or block of code with new syntax never gets executed, for example if it’s inside an `if supportsAsync` block, the runtime still _parses_ that never-to-be-executed code, and the parsing itself throws an error. That’s why we need to do these contortions to prevent unsupported syntax from ever being parsed, by preventing Node from ever loading the files in the first place; or by treating the experimental syntax as a string to be `eval`ed.",
      "@GeoffreyBooth you're right of course. It won't work. In my experiment, I used simple test function which passed on Node 6. ",
      "whoops. I should have run the tests before pushing... jussec",
      "Thanks @rdeforest!"
    ],
    "commit_messages": [
      "simplified test file skipping (#4996) (#5003)\n\nsimplified test file skipping (#4996)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc433a21fa1e1f1a9e3a",
    "number": 5002,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttp://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a \r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by \r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in \r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in \r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](http://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\nThis PR adds alternative syntax for the comment block: `#* comment *#`.\r\nI've checked the previous proposals for something similar but couldn't find anything (@vendethiel do your magic).\r\n\r\n```\r\n#*\r\nAll new features require tests.\r\nAll but the most trivial bug fixes\r\nshould also have new or updated tests.\r\n*#\r\n```\r\n\r\ncompiles to:\r\n\r\n```javascript\r\n/*\r\nAll new features require tests.\r\nAll but the most trivial bug fixes\r\nshould also have new or updated tests.\r\n*/\r\n```\r\n\r\nEasier writing of  Flow’s comment types syntax.\r\n\r\n```\r\n# @flow\r\n\r\n#*::\r\ntype Obj = {\r\n  num: number,\r\n};\r\n*#\r\n\r\nfn = (str #*: string *#, obj #*: Obj *#) #*: string *# ->\r\n  str + obj.num\r\n```\r\n\r\n\r\nImproved readability of multiple comment blocks.\r\n\r\n```\r\n#*\r\nComments starts here.\r\n*#\r\n\r\nfoo = (a) ->\r\n  a + 1\r\n  #*\r\n  More comments here.\r\n  *#\r\n\r\nfoo 41\r\n\r\n#*\r\nEnds here.\r\n*#\r\n```",
    "head_branch": "alter_comment",
    "is_a_fork": true,
    "comments": [
      "> I've checked the previous proposals for something similar but couldn't find anything (@vendethiel do your magic).\r\n\r\n#1050?",
      "This PR would be a breaking change: \r\n\r\n```coffee\r\n#*\r\n#* Block comment\r\n#*\r\n```\r\n\r\nIf anyone wrote the above, after your PR all their code would be commented out.",
      "@GeoffreyBooth you're right about the breaking change.   \r\nI'm taking another shot by changing the `regex` a little bit.\r\n\r\nThis\r\n\r\n```\r\n#*\r\n#* Block comment\r\n#*\r\n\r\nfoo = (a) ->\r\n  a + 1\r\n  #*\r\n  More comments here.\r\n  *#\r\n\r\nfoo 41\r\n\r\n###\r\nEnds here.\r\n###\r\n```\r\n\r\ncompiles into \r\n\r\n```javascript\r\n//*\r\n//* Block comment\r\n//*\r\nvar foo;\r\n\r\nfoo = function(a) {\r\n  return a + 1;\r\n};\r\n\r\n/*\r\nMore comments here.\r\n*/\r\nfoo(41);\r\n\r\n/*\r\nEnds here.\r\n*/\r\n```",
      "How about we just support `/* */` block comments to make everyone's life easier? On most fonts a single '#' takes the same visual space as '/*'.\r\n\r\nIt's guaranteed not to break anyone's code since `/*` throws a compiler error",
      "I don’t think we want to have lots of alternatives for comments syntax. We certainly don’t want to introduce a breaking change to create something we don’t need.\r\n\r\nI sympathize with the ugliness of block comments for Flow that is inspiring this effort, but I think there might be a better approach: a preprocessor, similar to https://github.com/billymoon/illiterate. Imagine you make a new command-line utility called `flowcoffee`, that works just like `coffee` to process `.flowcoffee` files:\r\n\r\n```bash\r\nflowcoffee --compile --output dist/ src/\r\n```\r\n\r\nThe files output would all be _JavaScript,_ not CoffeeScript. So within `flowcoffee`, the following would happen:\r\n\r\n1. Find all `.flowcoffee` files to process, the same way `coffee` finds `.coffee` files.\r\n2. Parse the files somehow to add `###` delimiters around the Flow type annotations, and store this revised code in memory as strings.\r\n3. Use the `coffeescript` module via its Node API to compile these strings into JavaScript strings.\r\n4. Save the JavaScript strings as `.js` files, the same way `coffee`  does.\r\n\r\nSo you could fork `coffee` to do this, or start with something simpler. If you exposed a Node API for this the same way `coffeescript` does, this `flowcoffee` module could become a drop-in replacement for `coffeescript` in wrappers like `gulp-coffee` and `coffeeify` etc. There would be more work to integrate this into third-party plugins than if we patched something into `coffeescript` itself, but the upside is that you could do whatever you wanted, including breaking changes, because using `flowcoffee` would inherently be opt-in. This is arguably how we should’ve implemented Literate CoffeeScript and/or JSX.\r\n\r\nInstead of Flow syntax like this:\r\n```coffee\r\nfn = (str ###: string ###, obj ###: Obj ###) ###: string ### ->\r\n  str + obj.num\r\n```\r\n\r\nYou could do something like this, for example:\r\n```coffee\r\nfn = (str : string, obj : Obj) : string ->\r\n  str + obj.num\r\n```\r\n\r\nIn this proposal, we’re using the fact that “space-colon-space” currently doesn’t compile in CoffeeScript, and therefore it can be a cue that `flowcoffee` should insert `###` before the colon and another `###` after whatever word follows the colon but before the next non-alphanumeric character. This could be done via regex, without the need for sophisticated parsing. So in other words, `flowcoffee` would convert the second example into the first example, which would then get compiled by `coffeescript` into JavaScript. You would need to create similar rules and handling for `::` and whatever other Flow syntax you want to recognize."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc443a21fa1e1f1a9e3b",
    "number": 5000,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttp://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a \r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by \r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in \r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in \r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](http://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\nWhile testing sub-structuring (#4995) I noticed wrong output of destructuring with an empty array in the object.\r\n\r\nCurrent branch:\r\n\r\n```coffeescript\r\n{a:[], b} = obj\r\n\r\n###\r\nvar b;\r\nobj.undefined, b = obj[1];\r\n###\r\n```\r\n\r\nSince `@variable.isAssignable()` in `Assign` returns false because of an empty array,  the `::compileDestructuring` is invoked. \r\nThe syntax is valid and can be output directly.\r\n\r\nThis PR:\r\n\r\n```coffeescript\r\n{a:[], b} = obj\r\n\r\n###\r\nvar b;\r\n({\r\n  a: [],\r\n  b\r\n} = c);\r\n###\r\n```\r\n\r\n",
    "head_branch": "obj_arr_destruct",
    "is_a_fork": true,
    "comments": [
      "This would be a breaking change since babel runs `{a: []}` through `function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }`.\r\n\r\nAs an example `Array.from(null)` and `Array.from(undefined)` throws a type error, so anyone who was using it to drop keys will be screwed.",
      "I think my [comment](https://github.com/jashkenas/coffeescript/pull/4995#issuecomment-371619067) from #4995 applies here as well. \r\nI see no difference between `{a: []} = b` or `{a:{}} = b`. It is upon user to take care of destructuring variables.\r\nAnd, I don't think anyone will be screwed, because currently, if an empty array is used in the destructuring`, you won't get correct [result](http://coffeescript.org/#try:o%20%3D%20%7Ba%3A%5B1%5D%2C%20b%3A2%7D%0A%7Ba%3A%5B%5D%2C%20b%7D%20%3D%20o%0A%0Aconsole.log(b)) even if the key exists in the object.",
      "I don’t think we should care what Babel does. If we output valid JS, that’s all we need to worry about.\r\n\r\nThis is correct, isn’t it?\r\n\r\n```js\r\nobj = {a: [1]}\r\nresult = ({a: []} = obj)\r\n```\r\nIn Chrome console, `result` equals `{a: [1]}`.\r\n\r\nSo @zdenko and @aminland is this safe to merge in?",
      "@GeoffreyBooth go for it."
    ],
    "commit_messages": [
      "Fix: destructuring assignment with an empty array in object (#5000)\n\n* destructuring assignment with empty array in object\r\n\r\n* improvements"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc453a21fa1e1f1a9e3c",
    "number": 4998,
    "body": "_This is a re-creation of PR #4997 without the extraneous history. Original description follows._\r\n\r\nPer discussion on #4893, managing exclusion of tests when newer features are required is currently non-obvious. The goal of this PR is to make maintenance of such exceptions easy and surprise-free.\r\n\r\nThe existing method was a hard-wired exception for the file 'async.coffee'. When I added async_iterators for #4893 I was surprised because I didn't know about the ```build:watch:harmony``` build target nor the hardwired exception in runTests. Now both the feature test and filename match are handled on the same lines near the top of Cakefile.\r\n\r\nI included two currently unused pattern/feature pairs to demonstrate the intent and value of this approach. Both will likely be used for #4877 and #4893.\r\n\r\nI didn't write a test for this change since it's a change to the test system.\r\n\r\nAfter posting this I'm going to figure out how to remove the extra unrelated empty commits, but I wanted to get this out there before the weekend to follow through on my previous commitment.",
    "head_branch": "master2",
    "is_a_fork": true,
    "comments": [
      "You don't need to worry about your Git history. We squash commits when we merge into `master`. I encourage contributors to leave their history unmodified, so that others can work on the same branch without conflicts.",
      "whoops. That extra commit was a no-op. I was trying to clean up my fork of the repo. Sorry for the distraction.",
      "Did you mean to close this pull request? I think deleting your branch closed it automatically.",
      "I did not mean to. Weird. I decided to help out in order to learn, but this wasn't what I had in mind. :)\r\n\r\nIt won't let me re-open since I deleted the branch, so I'll create a THIRD PR... Derp derp...."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc463a21fa1e1f1a9e3d",
    "number": 4997,
    "body": "Per discussion on #4893, managing exclusion of tests when newer features are required is currently non-obvious. The goal of this PR is to make maintenance of such exceptions easy and surprise-free.\r\n\r\nThe existing method was a hard-wired exception for the file 'async.coffee'. When I added async_iterators for #4893 I was surprised because I didn't know about the ```build:watch:harmony``` build target nor the hardwired exception in runTests. Now both the feature test and filename match are handled on the same lines near the top of Cakefile.\r\n\r\nI included two currently unused pattern/feature pairs to demonstrate the intent and value of this approach. Both will likely be used for #4877 and #4893.\r\n\r\nI didn't write a test for this change since it's a change to the test system.\r\n\r\nAfter posting this I'm going to figure out how to remove the extra unrelated empty commits, but I wanted to get this out there before the weekend to follow through on my previous commitment.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Bah, forgot to push my changes to shorten the diff. Fixing that right away...",
      "I remembered how to use ```git merge --squash```.  Now I'm going to create a new PR with the clean branch and resolve this in favor of that...",
      "This PR obsoleted by #4998."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc473a21fa1e1f1a9e3e",
    "number": 4995,
    "body": "<!--\r\nBefore making a PR please make sure to read our contributing guidelines:\r\nhttp://coffeescript.org/#contributing\r\n\r\nFor issue references: Add a comma-separated list of a \r\n[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by \r\nthe ticket number fixed by the PR. It should be underlined in the preview if done correctly.\r\n\r\nAll new features require tests. All but the most trivial bug fixes should also have new or updated tests.\r\n\r\nEnsure that all new code you add to the compiler can be run in the minimum version of Node listed in \r\n`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests\r\nonly run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in \r\nruntimes that don’t support them.\r\n\r\nPlease follow the code style of the rest of the CoffeeScript codebase. Write comments in complete\r\nsentences using Markdown, as the comments become the [annotated source](http://coffeescript.org/#annotated-source).\r\nFor tests proving a bug is fixed, please mention the issue number in the test description (see examples\r\nin the codebase).\r\n\r\nDescribe your changes below in as much detail as possible.\r\n-->\r\n\r\nThis PR adds features proposed in #4991: assigning properties from one object into another object (i.e. building / extending objects).\r\n\r\n```coffeescript\r\ndata =\r\n  title: \"Mr\"\r\n  name: \"Coffee\"\r\n  address: \"Sesame Street\"\r\n\r\nview = data{title, name:full_name}\r\n# view = { title: \"Mr\", full_name: \"Coffee\" }\r\n\r\nview = data{title, name:full_name, rest...}\r\n###\r\nview = {\r\n  title: \"Mr\", \r\n  full_name: \"Coffee\",\r\n  rest: {\r\n    address: \"Sesame Street\"\r\n  }\r\n}\r\n###\r\n\r\nconsole.log  data{title, name:full_name}\r\n#  { title: \"Mr\", full_name: \"Coffee\" }\r\n```\r\n\r\n---\r\n\r\n```coffeescript\r\ndata =\r\n  title: \"Mr\"\r\n  name: \"Coffee\"\r\n  address: \"Sesame Street\"\r\n\r\nview{title, name:full_name} = data\r\n###\r\nerror: the variable 'view' has not been declared before\r\nview{title, name:full_name} = data\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n###\r\n```\r\n\r\n---\r\n\r\n```coffeescript\r\ndata =\r\n  title: \"Mr\"\r\n  name: \"Coffee\"\r\n  address: \"Sesame Street\"\r\n\r\nview = address: \"Elm Street\"\r\nview{title, name:full_name} = data\r\n###\r\nview = { address: 'Elm Street', title: 'Mr', full_name: 'Coffee' }\r\n###\r\n\r\n```\r\n\r\n---\r\n\r\n```coffeescript\r\ndata =\r\n  title: \"Mr\"\r\n  name: \"Coffee\"\r\n  address: \"Sesame Street\"\r\n  zip: 10001\r\n\r\nview = city: \"London\"\r\nview{title, name, -zip, rest...} = data\r\n# view = {city: \"London\", title: \"Mr\", name: \"Coffee\", rest: {address: \"Sesame Street\"}}\r\n```\r\n\r\n---\r\n\r\n```coffeescript\r\ndata =\r\n    addr:\r\n      street: [\"Elm\", 12]\r\n      city: \"London\"\r\n      state: \"England\"\r\n      zip: \"GH 201 X\"\r\n      floor: 30\r\n      appartment: \"XJ-1\"\r\n    phone:\r\n      home: \"999-555-111\"\r\n      work: \"888-333-555\"\r\n\r\n  user = name: \"CS\"\r\n  user{\r\n    addr: {\r\n      street: [street1, street2],\r\n      city, state, -zip, -floor, ext...\r\n    },\r\n    phone: { home:phone_home }\r\n  } = data\r\n\r\n###\r\nuser = {\r\n  name: \"CS\",\r\n  street1: \"Elm\",\r\n  street2: 12,\r\n  city: \"London\",\r\n  state: \"England\",\r\n  ext: {\r\n    appartment: \"XJ-1\"\r\n  },\r\n  phone_home: \"999-555-111\"\r\n}\r\n###\r\n\r\n\r\nuser = data{\r\n      addr: {\r\n        street: [street1, street2],\r\n        -zip, -floor, ext...\r\n      },\r\n      phone: { home:phone_home }\r\n    }\r\n\r\n###\r\nuser = {\r\n  street1: \"Elm\",\r\n  street2: 12,\r\n  ext: {\r\n     city: \"London\",\r\n     state: \"England\",\r\n     appartment: \"XJ-1\"\r\n  },\r\n  phone_home: \"999-555-111\"\r\n}\r\n###\r\n```",
    "head_branch": "sub_struct",
    "is_a_fork": true,
    "comments": [
      "-1 for \"Excluded properties\". I don't think we should introduce new syntax, instead we should use e.g. `{x: []}` or `{x: {}}` or `{x: null}` or `{x:,}` or...",
      "I agree with @vendethiel regarding the \"Excluded properties\". \r\n`x: {}` is much more readable and already does the same.",
      "Nice work @zdenko !\r\n\r\nSoo I'm just looking at what babel ends up doing when you destructure with `{a:{}} = {a:2}`:\r\n\r\n```\r\nfunction _objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError(\"Cannot destructure undefined\"); }\r\nvar _a = { a: 2 };\r\n_objectDestructuringEmpty(_a.a);\r\n_a;\r\n```\r\n\r\nSo basically it will throw an error if the key doesn't exist, which imho is a poor design choice by the tc39 folks. The only use that it provides is basically a shorthand for validation. \r\n\r\nThe reason I like the `-key` syntax is that it is concise way to say you don't care about certain properties (not that you want errors thrown). It is also, in the vain of everything else coffeescript, semantically clear. Together with the rest of the PR, it would allow full elimination of _.pick and _.omit, which are two of the most used lodash functions...\r\n\r\nThat's not to say we should prevent folks from doing the {a:{}} syntax, but at least this way people can have an option to be deliberate about throwing runtime errors. Note that regular destructuring does not cause babel to check that something is defined (i.e. `{a,b}=c` is a straightforward conversion, with no possible exceptions stemming from key choice). Thus, the js behavior is not really consistent, and it would behoove us to right some JS wrongs ;)\r\n\r\n",
      "@aminland `-key` syntax is not removed from this PR. It compiles into `key:{}`, which is a valid ES syntax for dropping keys. Besides, once #4884 is merged, it will work without a change. Otherwise, we would have to keep parts of the current polyfill from the `Access` in order to remove keys. \r\nAlso, the `-key` syntax is mostly useful with rest destructuring ` {a, -b, r...}`.  I see no point compiling `{a, -b}` into `{a}`. And how to deal with this case `{-a}`?\r\nNow, let's presume that `o = {b:1}` and user writes `{a:{}, b} = o`. The type error will enable him to correct the mistake, whose cause can be somewhere else, e.g. result from the function from some module.  I think we should allow the user to shoot himself in the foot.\r\nIf my intention is to remove some keys, I have to be sure these keys exist in the first place or use a third-party library or custom function to safely remove unwanted keys from the object.\r\n",
      "Sorry to join this discussion so late, I’m just starting to wrap my head around this. To take your initial example:\r\n\r\n```coffee\r\ndata =\r\n  title: \"Mr\"\r\n  name: \"Coffee\"\r\n  address: \"Sesame Street\"\r\n\r\nview = data{title, name:full_name}\r\n# view = { title: \"Mr\", full_name: \"Coffee\" }\r\n```\r\nSo the `view =` assignment line is basically a shorthand for:\r\n```coffee\r\nview = Object.assign {}, {title: data.title, full_name: data.name}\r\n```\r\n\r\nWhich gives me two questions:\r\n1. Obviously the “sub-structuring” syntax is shorter, but is this enough of an improvement to be worth adding? Why?\r\n2. Why is it `view = data{name: full_name}` and not `view = data{full_name: name}`? The latter feels more natural to me, as when you’re assigning to a variable in general the keys for the object in the new variable go on the left, e.g. `view = {full_name: \"Coffee\"}`. See also the `Object.assign` example.",
      "> Why is it view = data{name: full_name} and not view = data{full_name: name}\r\n\r\nThis syntax is the same as assigning to new variable names in object destructuring, i.e. the new name is on the right side.\r\n\r\n```coffeescript\r\no = {p: 42, q: yes}\r\n{p: foo, q: bar} = o\r\n# foo = 42, bar = yes\r\n```",
      "Yeah I think JS kind of messed up by choosing that syntax... but since it's already been implemented in CS and it's here to stay, we have to go with it. The idea here is that it's not a new syntax really, as much as it is an extension of the existing destructuring syntax to make it more useful.\r\n\r\n@GeoffreyBooth to answer your question 1, I certainly think so. Often (esp. for react components) I'm finding myself having to extract and pass through dozens of props all the time, and this gets very tedious.\r\nSure if you're just trying to get 1 variable out, you're not saving much.\r\nIf you're getting a lot of things out, or alternately are trying to update an existing variable by using the lhs version, you not only save a lot of typing, but also make the code more concise and clear as to what you're trying to do.",
      "Closing for now per https://github.com/jashkenas/coffeescript/issues/4991#issuecomment-386505347"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc473a21fa1e1f1a9e3f",
    "number": 4994,
    "body": "Loosely based on https://raw.githubusercontent.com/babel/babel/master/.github/PULL_REQUEST_TEMPLATE.md",
    "head_branch": "pull-request-template",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Pull request template (#4994)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc483a21fa1e1f1a9e40",
    "number": 4993,
    "body": "Based on https://raw.githubusercontent.com/babel/babel/master/.github/ISSUE_TEMPLATE.md",
    "head_branch": "issue-template",
    "is_a_fork": false,
    "comments": [
      "Fantastic! I didn't know Github let you do this...",
      "I wandered into the Insights tab, then Community. It has a checklist of things they recommend you do, including this one and the other recently opened PRs.\r\n\r\nI didn’t mean to create them as branches off the main repo, but I figure they won’t be active long."
    ],
    "commit_messages": [
      "Create issue template (#4993)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc493a21fa1e1f1a9e41",
    "number": 4992,
    "body": "Filling in the missing pieces that GitHub is prompting me about . . . this is the same Code of Conduct we had on the coffeescript6/discuss repo.",
    "head_branch": "add-code-of-conduct-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Code of Conduct (#4992)\n\n* Code of Conduct\r\n\r\n* Email address"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc4a3a21fa1e1f1a9e42",
    "number": 4990,
    "body": "Fixes error in the example for `get` and `set` keyword syntax in docs.\r\n\r\n```coffeescript\r\nscreen =\r\n  width: 1200\r\n  ratio: 16/9\r\n\r\nObject.defineProperty screen, 'height',\r\n  get: ->\r\n    this.width / this.ratio\r\n  set: (val) ->\r\n    this.width = val * this.ratio\r\n\r\n# this.height = 675\r\n\r\nthis.height = 900\r\n\r\n# this.width = 1600\r\n```",
    "head_branch": "get_set_example",
    "is_a_fork": true,
    "comments": [
      "Ah. Yes. Thanks 😄 "
    ],
    "commit_messages": [
      "get/set example (#4990)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc4b3a21fa1e1f1a9e43",
    "number": 4988,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "[update] copyright year to 2018 (#4988)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc4c3a21fa1e1f1a9e44",
    "number": 4986,
    "body": "This wraps up all bugfix PRs; the next release will be 2.3.0, with the currently open enhancement PRs. Once again we’ve closed all open bugs thanks to @zdenko 🏅 \r\n\r\n*   Bugfix for regression in 2.2.0 where a range with a `by` (step) value that increments or decrements in the opposite direction as the range was returning an array containing the first value of the range, whereas it should be returning an empty array. In other words, `x for x in [2..1] by 1` should equal `[]`, not `[2]` (because the step value is positive 1, counting up, whereas the range goes from 2 to 1, counting down).\r\n*   Bugfixes for allowing backslashes in `import` and `export` statements and lines that trigger the start of an indented block, like an `if` statement.",
    "head_branch": "2.2.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "2.2.2 (#4986)\n\n* Changelog for 2.2.2\r\n\r\n* Bump version to 2.2.2\r\n\r\n* Bump dependencies\r\n\r\n* Update output"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc4d3a21fa1e1f1a9e45",
    "number": 4899,
    "body": "Fixes #4898. When indent line is ended with the backslash, `Lexer` incorrectly sets indentation levels.\r\n\r\n```coffeescript\r\nif ( \\\r\n      false \\\r\n      or \\\r\n      true \\\r\n    )\r\n    42\r\n\r\n###\r\nif (false || true) {\r\n  42;\r\n}\r\n###\r\n```\r\n---\r\n\r\n```coffeescript\r\nif ( \\\r\n    false \\\r\n    or \\\r\n    true \\\r\n)\r\n  42\r\n\r\n###\r\nif (false || true) {\r\n  42;\r\n}\r\n###\r\n```",
    "head_branch": "issue4898",
    "is_a_fork": true,
    "comments": [
      "Well this is a pretty clean fix. @vendethiel and @Inve1951?",
      "Just wondering how many other places that unless will have to appear at ;-)."
    ],
    "commit_messages": [
      "fix #4898 (#4899)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc4e3a21fa1e1f1a9e46",
    "number": 4893,
    "body": "This PR adds support for [asynchronous iterators](https://github.com/tc39/proposal-async-iteration) (#4875)\r\nIt's still WIP and needs tests.\r\n\r\n```coffeescript\r\nreadLines = (path) ->\r\n  file = await fileOpen path\r\n  try\r\n    while not file.EOF\r\n      yield await file.readLine()\r\n  finally\r\n    await file.close()\r\n\r\nfoo = ->\r\n  res = []\r\n  for await x from readLines\r\n    res.push x\r\n  res\r\n```\r\ncompiles to\r\n\r\n```javascript\r\nvar foo, readLines;\r\nreadLines = async function*(path) {\r\n  var file, results;\r\n  file = (await fileOpen(path));\r\n  try {\r\n    results = [];\r\n    while (!file.EOF) {\r\n      results.push((yield (await file.readLine())));\r\n    }\r\n    return results;\r\n  } finally {\r\n    await file.close();\r\n  }\r\n};\r\n\r\nfoo = async function() {\r\n  var res, x;\r\n  res = [];\r\n  for await (x of readLines) {\r\n    res.push(x);\r\n  }\r\n  return res;\r\n};\r\n\r\n```",
    "head_branch": "async_iterators",
    "is_a_fork": true,
    "comments": [
      "Marking this as WIP because it lacks tests. You could convert the old error messages ones to be the basis of some new async iterators tests. Thanks for tackling this!",
      "This is looking good…thank you @zdenko! And to @vendethiel for the review.",
      "I wonder…creating an array of results here is potentially dangerous since async iterators will often, perhaps even typically, be used with an “infinite” collection, ex: events. Of course, _not_ doing that would be unexpected. Perhaps it's something we can document?",
      "I guess that's no different than sync generators, though.",
      "I made a test for this and it failed 'cake test' because it needed --harmony. When I ran ```cake build:watch:harmony``` without my test, a different test (\"classes with value'd constructors\") failed with the error \"TypeError: Class constructors may only return object or undefined\".\r\n\r\nIn order that my work not go to waste I'll include it in my post here:\r\n\r\n```coffee\r\nsucceedLater = (val, ms) ->\r\n  new Promise (resolve, reject) ->\r\n    setTimeout (-> resolve val), ms\r\n\r\nfailLater    = (val, ms) ->\r\n  new Promise (resolve, reject) ->\r\n    setTimeout (-> reject new Error val), ms\r\n\r\nasyncIterator = (iterations, operation) ->\r\n  for i in [1 .. iterations]\r\n    yield await operation()\r\n\r\ntest \"success loop finishes\", ->\r\n  a = await do ->\r\n    for await result from asyncIterator 5, -> succeedLater 'ok', 10\r\n      result\r\n\r\n  eq a.length, 5\r\n  eq -1, a.findIndex (x) -> x isnt 'ok'\r\n\r\ntest \"failure loop aborts\", ->\r\n  try\r\n    a = do ->\r\n      for await result from asyncIterator 5, -> failLater 'err', 10\r\n        ok false\r\n\r\n    a.catch (err) ->\r\n      eq 'err', err.message\r\n\r\n  catch err\r\n    ok false\r\n```\r\n\r\n(Edited to add failure test)",
      "I don’t know if this is already on this branch by now, but earlier this was tagged WIP because we need to add something to `Cakefile` similar to the feature detection for async function support, to test for async iterator support; and the async iterator tests would be in their own file that only gets loaded when supported. It’s a pattern we’re going to need to increasingly follow as we add support for more newer features.",
      "I see this in Cakefile:\r\n\r\n```coffee\r\n  unless global.supportsAsync # Except for async tests, if async isn’t supported.\r\n    files = files.filter (filename) -> filename isnt 'async.coffee'\r\n```\r\n\r\nThis seems like it wouldn't scale. Is there already work underway on generalizing this kind of thing? I didn't see a tracking issue for it. I'd love to take the project on if nobody else is doing it already.",
      "@rdeforest That would be great. Maybe do it as a separate PR?\r\n\r\nThe codebase assumes support for all features supported by Node 6, as that’s our minimum supported version. So there aren’t _that_ many features added to ES since then that need special casing. Async iterators, exponentiation operator (see #4881) and rewriting the modules tests to really run rather than do string comparisons. I’m not sure there are too many more; and in a year or two when there might be, we’ll probably bump up our minimum Node version to 8 or so.",
      "I'll take a stab at it and submit a new PR. In the interest of 'one change at a time' I'll base it on master and not including the tests I posted above. I'm currently unemployed and procrastinating so I should have something today or tomorrow.",
      "P.S. Take a look at the `1` branch `Cakefile`: https://github.com/jashkenas/coffeescript/blob/1/Cakefile#L403-L422\r\n\r\nThere were more special cases in the 1.x days, when we were supporting Node 0.8+.",
      "@zdenko I think we have the testing feature detection worked out, so the next step for this PR is to create a `tests/async_iterators.coffee` and put the async iterator tests in there. They should be normal tests, not string comparisons.",
      "Okay, anyone else have any notes? @vendethiel?"
    ],
    "commit_messages": [
      "Fix #4875: Asynchronous iterators (#4893)\n\n* async iterators\r\n\r\n* tests; refactor 'For' grammar rules\r\n\r\n* async iterator tests\r\n\r\n* formatting"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc4f3a21fa1e1f1a9e47",
    "number": 4891,
    "body": "Fixes #4889.\r\nIt seems that #4853, besides preventing an infinite loop, also caused a breaking change in the existing code.\r\nThe condition which checks the upper and lower `range` bounds, in order to prevent the infinite loop,  always allows at least one iteration of the `for` loop.\r\nExample: \r\n```coffeescript\r\na = 2\r\nb = 1\r\ns = 1\r\nr = (x for x in [a..b] by s)\r\n```\r\nThe value of `r`, prior to  #4853 was `[]`, but now it's `[2]`.\r\n\r\nTo me `[]` is a bug as I would expect the result to be `[2]`.   \r\nGiven that `r = (x for x in [1..2] by 1000)` is `[1]`, `r = (x for x in [1..2] by -1000)` should give the same result.\r\n\r\nAnyway, to correct the breaking change caused by #4853, I prepared this PR which reverts the output.\r\nAnd, I guess whether the result of `for x in [1..2] by -1` should be `[]`or `[1]`  belongs to a separate discussion and PR.",
    "head_branch": "issue4889",
    "is_a_fork": true,
    "comments": [
      "Ok, that code looks *much better*. Nicely done.",
      "Let’s add a test that matches #4889. Instead of logging the values, just push them into an array and then compare the array with what you’d expect it to be.",
      "Although the intention of this PR is (was) to revert the output of `for..range by` loop prior to #4853, I have second thoughts about it.\r\n\r\nI think this is the minimal case which shows the difference before and after #4853.\r\n```coffeescript\r\nr = (x for x in [2..1] by 1)\r\n```\r\n\r\nAs said earlier, the result of `r` before #4853 was `[]`, and after `[2]`.\r\nCompared to other examples:\r\n```coffeescript\r\nr = (x for x in [2..1] by -1000)  # r = [2]\r\nr = (x for x in [2..2] by 1000)   # r = [2]\r\n```\r\n\r\nThe reason `for x in [2..1] by 1` returns `[]` lies in the compiled condition which checks the upper bound value based on the value of `by`, and doesn't take in account value of the lower bound.\r\n```coffeescript\r\n# CS 2.1.1 and below\r\n\r\nfor x in [2..1] by 100\r\n# for (x = i = 2; i <= 1; x = i += 100)\r\n# []\r\n\r\nfor x in [2..1] by -100\r\n# for (x = i = 2; i >= 1; x = i += -100)\r\n# [2]\r\n\r\nfor x in [2..2] by 100\r\n# for (x = i = 2; i <= 2; x = i += 100)\r\n# [2]\r\n\r\nfor x in [2..2] by -100\r\n# for (x = i = 2; i >= 2; x = i += -100)\r\n# [2]\r\n```\r\nThe condition part `i <=` or `i >=` depends on the value of the `by`.\r\nI think this is wrong, and the result from the first example should also be `[2]`. \r\nThe range used in `for` loop (it's not compiled into the `array` as in `a = [1..2]`) determines the lower and upper bounds and the condition should always check both limits.\r\nSo, `for x in [a..b] by s` in pseudocode should be\r\n```\r\nfor (x = a; x bewteen a and b; x += s)\r\n```\r\n",
      "Going back to the example in #4889, modified slightly so that it could become a test:\r\n\r\n```coffee\r\nresults = []\r\nn = 1\r\n\r\nfor i in [0..n]\r\n  results.push 'i = ' + i\r\n  for j in [(i+1)..n]\r\n    results.push 'j = ' + j\r\n```\r\nThis produces `[ 'i = 0', 'j = 1', 'i = 1', 'j = 2', 'j = 1' ]` in this branch, 2.1.1, 2.0.3, and 1.12.7. All well and good.\r\n\r\nNow take the same as above, but add `by 1` to the second `for`:\r\n\r\n```coffee\r\nresults = []\r\nn = 1\r\n\r\nfor i in [0..n]\r\n  results.push 'i = ' + i\r\n  for j in [(i+1)..n] by 1\r\n    results.push 'j = ' + j\r\n```\r\nThen we get:\r\n* `[ 'i = 0', 'j = 1', 'i = 1', 'j = 2', 'j = 1' ]` in this branch\r\n* `[ 'i = 0', 'j = 1', 'i = 1', 'j = 2' ]` in 2.1.1\r\n* `[ 'i = 0', 'j = 1', 'i = 1' ]` in 2.0.3 and 1.12.7\r\n\r\nThe issue raised in #4889 was that `by 1` shouldn’t make a difference. And that certainly seems reasonable, it shouldn’t. So assuming the output of the first example is correct, this PR fixes the bug that `by 1` should be a noop.\r\n\r\nIt’s a separate question, which I think @zdenko is alluding at in his last comment, as to whether the output from the first example _is_ correct. But I think we should treat that as a separate bug. Could we get one PR that makes the existence or nonexistence of `by 1` irrelevant, and a separate issue/PR to discuss what the “correct” output should be in cases like the first example?",
      "@GeoffreyBooth  my comment about the correctness of the output was regarding the second example, e.g. `for - range - by`.\r\n\r\nBesides fixing infinite loop, #4853 also caused a breaking change of the `for - range - by` loop compilation, but I don't think this change is a bug.\r\nAnd, I think that the result ([ 'i = 0', 'j = 1', 'i = 1' ]) user from #4889 expects is wrong.\r\n\r\nOptions:   \r\na) we merge this PR which will revert the output of `for - range - by` loop, and then create another PR to discuss changes in the output.\r\nb) discard this PR and keep changes from the #4853 (with minor improvements in a separate PR)\r\n\r\nI vote for b).\r\n\r\n**Why the different result?**\r\n\r\nThe results from `for x in [a..b]` and `for x in [a..b] by 1]` are different because  `for - range` and `for - range - by` loops compiles differently.\r\n\r\n1. `for x in [a..b]` \r\n\r\nNo (significant) changes before and after #4853:\r\n\r\n```coffeescript\r\nfor (x = a; a <= b ? x <= b : x >= b; a <= b ? ++x; --x)\r\n```\r\n\r\nThe value of increment/decrement step is defined by the relation of `a` and `b`.\r\n\r\n2. `for x in [a..b] by s`\r\n\r\nBefore #4853:\r\n\r\n```coffeescript\r\nfor (x = a; s > 0 ? x <= b : x >= b; x += s)\r\n```\r\n\r\nThe loop condition basically says if the step is larger then `0` it also means that the end index  ('b') of the range is larger then the start index (`a`).\r\n\r\nAfter #4853:\r\n\r\n```coffeescript\r\nfor (x = a; a <= b ? a <= x <= b : a >= x >= b; x += s)\r\n```\r\n\r\nThe loop condition is changed: `x` must be between `a` and `b`\r\n\r\nThe original intention of this change was to prevent possible infinite loops. Back then I wasn't paying additional attention to the output (although I should), as all existing tests have passed.\r\nBut, using the value of 'by' to define loop condition seems wrong to me. The value of 'by` is an explicit increment/decrement step set by the user.\r\n\r\nHere is the table that shows the difference between the `for - range - by` from the second example:\r\n\r\n|  i  | j   | range | condition<br>before | condition<br>after| result<br>before | result<br>current   \r\n| :---: | :---: | :---: | :----: | :-----: | :-----:   | :----:  \r\n| 0   |  1  | [1..1] by 1 | j <= 1 |  1 <= j <= 1 | [i = 0, j = 1] | [i = 0, j = 1]\r\n| 1   |  2  | [2..1] by 1|  **j <= 1** |  2 >= j >= 1 | **[i = 0, j = 1, i = 1]** | [i = 0, j = 1, i = 1, j = 2]\r\n| 1   |  3  | [2..1] by 1 |   |  **2 >= j >= 1** |   | **[i = 0, j = 1, i = 1, j = 2]**\r\n\r\n",
      "I don’t have time right this minute to dig into this, but do you mind opening a PR that’s limited to making `by 1` and the lack of `by` equivalent? I think we can all agree that _that_ is a bug that should be fixed, and we should get that merged in.\r\n\r\nAs for changing/correcting the interpretation of `by`, I think I’ll probably agree with you, but I need to work through some examples first. This is complicated enough that I think it would benefit from its own PR for focus/discussion. That could maybe be this PR, if you want to split out the `by` stuff to another one.",
      "Agree. I'll prepare a couple of tests for this one and create another PR for changing the interpretation of `by`.",
      "@zdenko If you don’t mind, let’s wrap up this work (both fixing the `by 1` inconsistency and any change to how ranges are handled, as a separate PR) so that I can get another bugfix patch release out. Once that’s out, we can merge in some of the new features/changed output PRs, which should trigger a new minor release (2.3.0).",
      "@GeoffreyBooth I added a simple test, a code from the example.\r\nWill you merge this into master, and I'll start another PR to deal with `range by` inconsistency.\r\n",
      "Thinking out loud, starting with my example above:\r\n```coffee\r\nresults = []\r\nn = 1\r\n\r\nfor i in [0..n]\r\n  results.push 'i = ' + i\r\n  for j in [(i+1)..n]\r\n    results.push 'j = ' + j\r\n```\r\n\r\nThis could be rewritten as:\r\n```coffee\r\nresults = []\r\nfor i in [0..1]\r\n  results.push 'i = ' + i\r\n  for j in [(i+1)..1]\r\n    results.push 'j = ' + j\r\n```\r\n\r\nNow is where things get tricky. So the first range is `0..1`, and so the first `for` loops twice, once where `i` is 0 and once where `i` is 1 (remember that `..` is inclusive).\r\n\r\nSo there are _two_ second `for` loops created, once for each `i`. Those two ranges are `1..1` and `2..1`. There’s no `by` here, so what are we to do for `2..1`? Nothing at all, since a lack of `by` implies `by 1` but we can’t count up here? Or do we see that the start is greater than the end, and imply `by -1` instead?\r\n\r\nThe docs actually have an answer to this question. The example for ranges is this:\r\n```coffee\r\ncountdown = (num for num in [10..1])\r\n```\r\nWhich returns `[10,9,8,7,6,5,4,3,2,1]`, both now and in 1.12.7. So clearly the expectation is that we check whether we should count up or down, and choose `by 1` or `by -1` as appropriate.\r\n\r\nSo to unpack the loops:\r\n\r\n```coffee\r\nresults = []\r\ni = 0\r\nresults.push 'i = ' + i\r\nfor j in [1..1]\r\n  results.push 'j = ' + j\r\ni = 1\r\nresults.push 'i = ' + i\r\nfor j in [2..1]\r\n  results.push 'j = ' + j\r\n```\r\n\r\nAnd finally:\r\n\r\n```coffee\r\nresults = []\r\ni = 0\r\nresults.push 'i = ' + i\r\nj = 1\r\nresults.push 'j = ' + j\r\ni = 1\r\nresults.push 'i = ' + i\r\nj = 2\r\nresults.push 'j = ' + j\r\nj = 1\r\nresults.push 'j = ' + j\r\n```\r\n\r\nAnd so we get `[ 'i = 0', 'j = 1', 'i = 1', 'j = 2', 'j = 1' ]`, which my “by hand” calculations determines to be what I would assume is the “correct” answer.\r\n\r\nSo I guess what I was assuming in earlier posts was wrong: a lack of `by` doesn’t always mean that there’s an implied `by 1`, but rather that there’s an implied `by 1` or `by -1`, depending on if the start of the range is greater or less than the end of the range. (If the start and end are equal, it doesn’t matter what the `by` value is, because the range returns just that one value.)\r\n\r\nBut what are we supposed to do with a range of `[2..1]` and `by 1`? You can’t count _up_ from 2 to 1. In 1.12.7, `[10..1] by 1` is an empty array. That feels correct to me. In 2.2.1, it’s `[10]`—as in, it does one loop first, then increments up and _then_ checks that it’s still within range. I can see the logic in this interpretation too.\r\n\r\nSince both interpretations of `[10..1] by 1` are reasonable, I think we should stay with the 1.x handling unless there’s a persuasive case to be made for why it’s wrong. Otherwise the new output is just an arbitrary breaking change. Surely it must be possible to avoid infinite loops while preserving the empty-array output of `[10..1] by 1` that we got in 1.x.",
      "> Surely it must be possible to avoid infinite loops while preserving the empty-array output of [10..1] by 1 that we got in 1.x.\r\n\r\n@GeoffreyBooth this PR does exactly that. All tests from #4853 are included, I just corrected the empty array result in cases like `[2..1] by 1`.\r\n\r\n\r\n> Since both interpretations of [10..1] by 1 are reasonable, I think we should stay with the 1.x handling \r\n\r\nI think the opposite. Here is simplified version of how `for x in [a..b] by s` is compiled in `nodes`:\r\n\r\n```coffeescript\r\nfor (x = a; s > 0 ? x <= b : x >= b; x += s) \r\n```\r\n\r\nThe part `s > 0` feels wrong to me. Step `s` in explicit increment/decrement set by the user and shouldn't be used in the condition part. \r\nLet's see what happens if we use numbers:\r\n```coffeescript\r\nfor x in [2..1] by 1\r\n# for (x = 2; 1 > 0 ? x <= 1 : x >= 1; x += 1) \r\n```\r\nThe result is an empty array because `x <= 1` (e.g. `2 <= 1`) fails. It seems logic at first as you can't go up from `2`to `1` by `1`.\r\n\r\n---\r\n\r\n```coffeescript\r\nfor x in [2..2] by 1\r\n# for (x = 2; 1 > 0 ? x <= 2 : x >= 2; x += 1) \r\n```\r\nThe result in this case will be `[2]`. So, here we say go up from `2` to `2` by `1` and we'll get `[2]`\r\n\r\n---\r\n\r\n```coffeescript\r\nfor x in [2..1] by -100\r\n# for (x = 2; -100 > 0 ? x <= 1 : x >= 1; x += -100) \r\n```\r\nThis reads as go down from `2` to `1` by `-100`. The result is `[2]`.\r\n\r\n---\r\n\r\nIt's probably just me, but I read `for x in [a..b]` as \"go from `a` to `b`\" and `for x in [a..b] by s` as \"go from `a` to `b` with step of `s`\".\r\nSo, the only difference is the step. The former will be implicitly set by CS, the latter by the user.\r\nIf  `by` is used as the condition, then it actually means \"if `s` is positive go up to `b`, otherwise go down to `b`\". The `a` is disregarded in this case, and IMHO it shouldn't be.\r\nThe loop starts with `a` and proceeds to `b` by given step:\r\n```coffeescript\r\nfor x in [2..1] by 1    # = [2]\r\nfor x in [2..1] by -100 # = [2]\r\nfor x in [2..2] by 1    # = [2]\r\nfor x in [2..1] by 0    # = [2]\r\n```\r\n\r\nI know this is a breaking change, but I'm totally OK if the current output stays.\r\n\r\n",
      "I don't mean that we should keep the output of 1.x, of comparing the step against zero. I just mean that `[10..1] by 1` should still return an empty array, by however method makes sense.",
      "Yes, I get that. I wanted to explain why the result shouldn't be an empty array. \r\nBut, let's wrap this up. This PR provides the correct result (e.g. empty array) and prevents an infinite loop.\r\nI say we merge this.",
      "@zdenko I’ve added a few more tests. Do they look correct to you?\r\n\r\nAssuming they’re good, I’m okay with merging this in. Are there still additional changes you want to make to how ranges/`by` operate, that you’ll be opening a new PR for?",
      "Tests are correct. I'll wait with the PR for `range-by` for now. It would be a breaking change to the existing code.  So, maybe in CS3.",
      "Thanks. Maybe open a new issue explaining it, with a little less focus on what the JavaScript output would be and a little more emphasis on what the result (empty array, array with certain values, etc.) would be. If you can explain why the current output is _wrong,_ and others agree, it’s something we can change in 2.x; if the current output is reasonable but not what a more thoughtful approach would be, it would be good to explain what the better result would be and why, and why we should change to it."
    ],
    "commit_messages": [
      "Fix #4889: for...range loop condition (#4891)\n\n* fix #4889\r\n\r\n* test\r\n\r\n* move test from 'control_flow' to 'ranges'\r\n\r\n* More range tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc503a21fa1e1f1a9e48",
    "number": 4888,
    "body": "FIxes #4874.\r\n\r\n```coffeescript\r\nimport foo \\\r\n    from 'lib'\r\n```\r\n___\r\n```coffeescript\r\nimport \\\r\n                foo \\\r\n    from \\\r\n'lib'\r\n```\r\n___\r\n```coffeescript\r\nimport \\\r\n      utilityBelt \\\r\n, {\r\n  each\r\n} from \\\r\n'underscore'\r\n```\r\n___\r\n```coffeescript\r\nexport \\\r\n  * \\\r\n        from \\\r\n  'underscore'\r\n```\r\n___\r\n```coffeescript\r\nexport \\\r\n    { max, min } \\\r\n          from \\\r\n  'underscore'\r\n```",
    "head_branch": "issue4874",
    "is_a_fork": true,
    "comments": [
      "Very clean, nice work!"
    ],
    "commit_messages": [
      "fix #4874 (#4888)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc513a21fa1e1f1a9e49",
    "number": 4885,
    "body": "No point in sitting on the bugfixes for regressions introduced in 2.2.0.\r\n\r\n*   Bugfix for regression in 2.2.0 involving an error thrown by the compiler in certain cases when using destructuring with a splat or expansion in an array. #4879\r\n*   Bugfix for regression in 2.2.0 where in certain cases a range iterator variable was declared in the global scope. #4883",
    "head_branch": "2.2.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "2.2.1 (#4885)\n\n* 2.2.1 changelog\r\n\r\n* Bump version to 2.2.1 and update output"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc523a21fa1e1f1a9e4a",
    "number": 4884,
    "body": "Fixes #4876. This PR removes polyfills for [object rest/spread](https://github.com/tc39/proposal-object-rest-spread) syntax.\r\n\r\n```coffeescript\r\n{a, b, rest...} = obj\r\n```\r\n```js\r\nvar a, b, rest;\r\n({a, b, ...rest} = obj);\r\n```\r\n___\r\n```coffeescript\r\nnewObj = {a:1, obj1..., b:2, obj2...}\r\n```\r\n```js\r\nvar newObj;\r\nnewObj = { a: 1, ...obj1, b: 2, ...obj2};\r\n```\r\n___\r\n```coffeescript\r\nfoo = ({a, b, rest...}) ->\r\n```\r\n```js\r\nfoo = function({a, b, ...rest}) {};\r\n```\r\n\r\nThe `rest` property can be positioned anywhere. In the compiled code it will be moved at the end:\r\n```coffeescript\r\n{a, rest..., b} = obj\r\n```\r\n```js\r\nvar a, b, rest;\r\n({a, b, ...rest} = obj);\r\n```\r\n___\r\n```coffeescript\r\nfoo = ({a, rest..., b}) ->\r\n```\r\n```js\r\nfoo = function({a, b, ...rest}) {};\r\n```\r\n\r\nI commented a few existing tests since it seems the following code isn’t valid:\r\n```coffeescript\r\n{{a...}...} = obj\r\n```\r\n```\r\n({...{...a}} = obj);\r\n          ^\r\nSyntaxError: `...` must be followed by an assignable reference in assignment contexts\r\n```",
    "head_branch": "object_rest_spread",
    "is_a_fork": true,
    "comments": [
      "We can’t merge this with commented-out tests. If the tests are no longer valid, they should be removed; but looking at them, I’m wondering if we should instead try to make them pass. Take the simplest case:\r\n\r\n```coffee\r\n{{g}...} = g: 1\r\n```\r\n```js\r\nvar g;\r\n\r\n({...{g}} = {\r\n  g: 1\r\n});\r\n```\r\n\r\nThis throws ``Uncaught SyntaxError: `...` must be followed by an assignable reference in assignment contexts``. To avoid the error, we can work around it:\r\n\r\n```coffee\r\nh = {g}\r\n{h...} = g: 1\r\n```\r\n```js\r\nvar h;\r\n\r\nh = {g};\r\n\r\n({...h} = {\r\n  g: 1\r\n});\r\n```\r\n\r\nThis doesn’t throw any errors, and should be equivalent to the first example unless I’m missing something. So I’m thinking, if all we need to do to avoid this “must be followed by an assignable reference” error is to make a reference to the assignment target, couldn’t the compiler do that automatically? As in:\r\n\r\n```coffee\r\n{{g}...} = g: 1\r\n```\r\n```js\r\nvar g, ref;\r\n\r\nref = {g};\r\n({...ref} = {\r\n  g: 1\r\n});\r\n```\r\n\r\nWe already have lots of functions for creating temporary “reference” variables. Let’s try to use them to see if we can avoid a potential breaking change.\r\n\r\nOne last thought: what’s going on here?\r\n\r\n```coffee\r\n{({g})...} = g: 1\r\n```\r\n```js\r\nvar g, ref,\r\n  slice = [].slice;\r\n\r\nref = {\r\n  g: 1\r\n}, {g} = slice.call(ref, 0);\r\n```",
      "Different question, for @jashkenas and @lydell and @connec and @vendethiel and other interested parties: How would you all feel if we dropped support for Node 6? As you can see in the [build log](https://travis-ci.org/jashkenas/coffeescript/jobs/337252765), there are a fair number of tests scattered around that don’t parse in Node 6 after this PR; though the compiler itself still never uses object spread/destructuring, so it runs in Node 6 even if some of the tests fail.\r\n\r\nTo keep support for Node 6, we would need to refactor the tests to silo off the object destructuring ones into files that aren’t loaded in Node < 8, similar to how we have the async tests. But I’m wondering if that’s worth the effort, versus just dropping Node 6 and keeping the codebase simpler. See also #4881; as we add more Node 8+, ES2018+ features, this will be an increasingly common issue.\r\n\r\nI think I lean toward the side of keeping support for Node 6, even in tests, even if it means more complication in moving test files around; but I feel like we should discuss it.",
      "I havn't used nodejs as a platform myself for too long to have an informed opinion, sorry.",
      "Both `...[` and `...{` are [disallowed](https://github.com/tc39/tc39-notes/blob/master/es8/2017-05/may-23.md#16ih-why-allow-bindingpattern-for-bindingrestparameter-for-object-rest-maybe-we-should-just-allow-identifiers) from object rest/spread syntax.\r\n\r\nI'm not sure if there is any value of supporting this syntax, because `{{a}...} = obj`or `{{a...}...} = obj` is equivalent to `{a...} = obj`.\r\nSupporting it would mean bringing back `Assign::compileObjectDestruct`, which would compile `{{a...}...} = obj` into\r\n\r\n```javascript\r\nvar ref, a;\r\n({...ref} = obj);\r\n({...a} = ref);\r\n```\r\n\r\nOr, perhaps this example `{a, {b, c, {d, e...}...}...} = obj` (equivalent to `{a, b, c, d, e...} = obj`)\r\n```javascript\r\nvar ref, ref1, a, b, c, d, e;\r\n({a, ...ref} = obj);\r\n({b, c, ...ref1} = ref);\r\n({d, ...e} = ref1);\r\n```\r\n\r\nI would propose alternative solution, e.g. stripping redundant `{...}...`:\r\n`{{a...}...} = obj` => `{a...} = obj`    \r\n`{a, {b, c, {d, e...}...}...} = obj` => `{a, b, c, d, e...} = obj`.\r\n\r\nBut then, what about this  `{[a]...} = obj`? Is this the same as   \r\n```coffeescript\r\n{ref...} = obj\r\na = [ref]\r\n\r\n# or\r\n\r\na = [{a...} = obj]\r\n\r\n# or\r\n \r\na = [obj]\r\n```\r\n\r\nA more complex example:\r\n```coffeescript\r\nobj = {a: 1, b: 2, c:3, d: 4}\r\n{a, b, {[x]...}...} = obj\r\n\r\n# should compile to?\r\n\r\n{a, b, ...ref} = obj\r\nx = [ref]\r\n\r\n###\r\na = 1\r\nb = 2\r\nx = [{c: 3, d: 4}]\r\n###\r\n```\r\n\r\nI might be missing something, but it seems to much work and trouble.\r\n\r\n@GeoffreyBooth `{({g})...} = g: 1` looks like a bug. I'll check it and open new PR.\r\n\r\n",
      "I think support for Node 6 shouldn't be dropped. The end of life is scheduled for April 2019, and there are projects still running on this version.\r\n\r\nI followed the path of `async` tests approach and move all object rest/spread tests in a separate file which is excluded from the tests for Node 6.\r\n",
      "This seems to be a stage 3 thing in babel (though it seems to work without transpilation in everything not IE)\r\n\r\nThe _active_ support date for node 6 is end of march 2018, so if we're to drop node 6 support, I'd suggest just lumping #4880, #4881, #4884, #4994, and #5006 together and call it version 2.5. There are enough syntax additions that it warrants skipping a few versions.\r\n\r\nIf there's any weird bugs that remain on 2.2.x maybe we can just backport the fixes? That is assuming the branches don't diverge that much in the year that node 6 has left on its 'maintenance' lifespan.\r\n\r\nAlso doing a semi-major version bump can indicate that underlying philosophy has changed and that we're now merging in features that are marked stage 3 on babel.",
      "This feature is Stage 4.\r\n\r\nI see no reason to skip versions or maintain separate forks. The compatibility info is for convenience, not a promise; it's up to the user to ensure that their code runs in whatever runtime or browser they want to run it in, or they should transpile.",
      "Last commit fixes unassignable rest properties, e.g. `{{a}...}`, `{{a...}...}`\r\n\r\n```coffeescript\r\n{{a...}...} = b\r\n# ({...ref} = b), ({...a} = ref);\r\n```\r\n---\r\n```coffeescript\r\nf = ({{a...}...}) ->\r\n###\r\nf = function(arg) {\r\n  var a, arg, ref;\r\n  ({...ref} = arg), ({...a} = ref);\r\n};\r\n###\r\n```",
      "@vendethiel or @helixbass any last notes before we merge this in?",
      "@GeoffreyBooth this is not directly related to this PR but perhaps is a sensible place to include a fix:\r\n\r\nLook at the compilation of eg `({a}..., _arg) ->`:\r\n```\r\nvar splice = [].splice;\r\n\r\n(function(...{a}) {\r\n  var _arg, ref;\r\n  ref = {a}, [...{a}] = ref, [_arg] = splice.call({a}, -1);\r\n});\r\n```\r\nThis won't run, as `ref` is assigned as an object and then we try to destructure it as an array\r\n\r\nI think that it should be compiled equivalently to `([a]..., _arg) ->` and that all that's required to fix is to change `if param.name instanceof Arr` to `if param.name instanceof Arr or param.name instanceof Obj` in `Code.compileNode()` (inside `if param.splat`, looks like line 2595 on this branch), resulting in this compilation:\r\n```\r\nvar splice = [].splice;\r\n\r\n(function(...arg) {\r\n  var _arg, a, ref;\r\n  ref = arg, [...arg] = ref, [_arg] = splice.call(arg, -1);\r\n  ({a} = arg);\r\n});\r\n```\r\n\r\nThe idea of being able to object-destructure a splat param seems weird but I guess you could want do something like `({length}..., arg) ->`?",
      "I see no point allowing it",
      "@helixbass What does `({a}...) ->` mean, exactly? I can type\r\n\r\n```js\r\nvar fn = function(...{a}) { return a; };\r\n```\r\n\r\ninto Chrome console but no matter what I pass into `fn` the function returns `undefined`.",
      "@GeoffreyBooth try `var fn = function(...{length}) { return length; };`\r\n\r\nThe splatted param is an array, so that's about the only way I see to meaningfully treat the array as an object\r\n\r\nIf getting rid of it seems reasonable(/acceptably breaking if anyone has actually used it), seems like throwing an error in `Param.constructor()` `if @name instanceof Obj and @splat` would be much simpler than introducing a grammar change to distinguish between top-level `ParamVar`s vs splattable param vars",
      "Although I figure it's against our policy to not support a destructuring syntax that's supported in ES6. And that it'd be strange/more work than it's worth to allow it in the simple case `({a}...) ->` but not in the case that triggers `compileDestructuring()` (`({a}..., arg) ->`). So then I think the fix I suggested above is a simple way to have the `compileDestructuring()` version output valid JS",
      "Yes, in general we want to be able to output any valid JS, aside from known exclusions like `==` and `const` etc.\r\n\r\nSo you’re saying that really literally only `(...{length})` works, and it’s always parsing the `arguments` object, so it’s only destructuring `arguments.length`. So\r\n```js\r\n(function(...{length}) { return length; })(1, 'b', null)\r\n```\r\nreturns `3`, the number of arguments passed in. This can easily be something we ignore until someone opens an issue asking why they can’t destructure the `length` property of the `arguments` object, or maybe they’ll think of another, less ridiculous edge case.",
      "@GeoffreyBooth that stance would make sense if we didn't already support it. But my understanding of the current status is that the simple case (eg `({a}...) ->`) already works fine. The thing that's broken is the corresponding case when we have to invoke `compileDestructuring()` because of a non-trailing splat eg `({a}..., b) ->`. To fix that case I think all that's needed is to add `or param.name instanceof Obj` as described above",
      "@helixbass I’m not following. Can you please explain with examples?",
      "@zdenko Do you think we should make the change @helixbass is proposing?\r\n\r\nSeparate question: I’m considering whether to release 2.3.0 with the PRs that have been merged in so far plus this one, and leave the completely new features (supporting accessors without brackets, “sub-structuring”) as a potential 2.4.0. This would give the ES2018 stuff its own release, and a period of potential patches separate from the new functionality. Thoughts?",
      "> Do you think we should make the change @helixbass is proposing\r\n\r\nYes, I think @helixbass is right. This PR already outputs object splats (`{{a}..., b} = obj`), as valid JS. Adding the same support for function parameters (`({a}..., b) ->`) and arrays (`[{a}..., b] = arr`) seems the right way to go IMO.\r\n\r\n> I’m considering whether to release 2.3.0...\r\n\r\nThat's a good call. I agree. ES2018 stuff in 2.3.0, and new features later in 2.4.0.\r\n\r\n\r\n\r\n\r\n\r\n",
      "@zdenko @GeoffreyBooth I pushed a [commit](https://github.com/helixbass/copheescript/commit/383efd4fce53ff8b2083c3ca1ab9fedfc89b683a) to my `object_rest_spread` branch with support and tests for what we’ve been discussing\r\n\r\n@zdenko brought up a good point which is that the corresponding assignment cases (as opposed to function params) also should be covered. Turned out that both array-destructured and object-destructured non-final splats (in array destructuring assignments) were both broken (and not covered by my suggested fix). Eg both of these were failing but are now passing:\r\n```coffee\r\n[{length}..., three] = [1, 2, 3]\r\neq length, 2\r\neq three, 3\r\n```\r\n```coffee\r\n[[one, two]..., three] = [1, 2, 3]\r\neq one, 1\r\neq two, 2\r\neq three, 3\r\n```\r\nFor the param cases, the fix I suggested [above](https://github.com/jashkenas/coffeescript/pull/4884#issuecomment-379409913) (adding `or param.name instanceof Obj`) did get the object-destructured non-final splat param case working (array-destructured non-final splat params were already working). Eg this was failing but now passes:\r\n```coffee\r\nf = ({length}..., last) -> [length, last]\r\narrayEq f(4, 5, 6), [2, 6]\r\n```\r\nLet me know if you have any other questions about what I committed or what’s covered, thanks",
      "@helixbass it seems we're both working on the same stuff at the same time :smile:\r\nHow should this case compile?\r\n```coffeescript\r\n[x, {a}..., y] = [1, {a: 42}, 2]\r\n\r\n# x = 1\r\n# a = 42\r\n# y = 2\r\n```\r\n\r\nIMO, this desugars into\r\n\r\n```coffeescript\r\n[x, r..., y] = [1, {a: 42}, 2]\r\n{a} = r\r\n```\r\n\r\n",
      "@zdenko I think your example has the right idea for translating `{a}...` into `r...` and `{a} = r`, it just also needs additional translation of `[x, r..., y] =` since we can't output a non-final splat. But that's the gist of what my commit does for your example: translates `{a}...` into `ref...` before invoking the core `processObjects()` logic of `compileDestructuring()`, then assign `{a} = ref` at the end\r\n\r\nCurrently my branch compiles your example into:\r\n```\r\nvar a, ref, ref1, x, y,\r\n  splice = [].splice;\r\n\r\nref1 = [\r\n  1,\r\n  {\r\n    a: 42\r\n  },\r\n  2\r\n], [x, ...ref] = ref1, [y] = splice.call(ref, -1), ({a} = ref);\r\n```\r\nNot sure why there's the additional caching to `ref1` of the right-hand-side (seems unnecessary), but other than that I believe this is the desired compilation. Compare to the compilation of `[x, r..., y] = [1, {a: 42}, 2]`:\r\n```\r\nvar r, ref, x, y,\r\n  splice = [].splice;\r\n\r\nref = [\r\n  1,\r\n  {\r\n    a: 42\r\n  },\r\n  2\r\n], [x, ...r] = ref, [y] = splice.call(r, -1);\r\n```",
      "> `[x, ...ref] = ref1, [y] = splice.call(ref, -1), ({a} = ref`\r\n\r\n```javascript\r\nx = 1\r\ny = [ { a: 42 } ]\r\na = undefined\r\n```\r\n\r\nInstead of `({a} = ref)`, it should be `[{a}] = ref`, or perhaps `{a} = ref[0]`",
      "@zdenko no, it should agree with ES meaning of `{a}...`, even though it's not very useful. That's why `{length}...` is pretty much the only meaningful usage of this syntax that I'm aware of and why I used `length` in the tests. We have other tests that use this syntax like `{\"0\": a, \"1\": b, \"2\": c}...` which I guess could perhaps be useful as well\r\n\r\nBut it is definitely an object-dereferencing of an array (the splatted array), not an object-dereferencing of the first element of an array",
      "I suppose you could technically pluck arguments at index, i.e. `({0: a, 17: b}...) -> a + b`. Not sure it’s very interesting tho...",
      "> ...it should agree with ES meaning of {a}..., even though it's not very useful\r\n\r\nIn that case should we allow `{{a}...} = obj`? The Initial proposal for object rest/spread properties had this pattern (e.g. destructuring own properties), which was later [removed](https://github.com/tc39/proposal-object-rest-spread/issues/43).\r\nBabel [supports](https://babeljs.io/repl/#?babili=false&browsers=&build=&builtIns=false&code_lz=G4QwTgBA9gRgVgbgFCkgbwHRbSAvriAXmngSA&debug=true&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&lineWrap=false&presets=stage-3%2Cenv&prettier=false&targets=Node-9.8&version=6.26.0&envVersion=1.6.2) this syntax in stage-3, as well as the [current](http://coffeescript.org/#try:%7B%7Ba%7D...%7D%20%3D%20obj) CS branch.\r\n\r\nThis PR desugars `{{a}...} = obj` into `{ref...} = obj; {a} = ref`.  \r\nMy proposal is that we also enable syntactic sugars for `[{a}...] = arr` and `({a}...) ->`.\r\nOn my branch (not commited yet), these desugars into `[ref...] = arr; [{a}] = ref`, and `(arg...) -> [{a}] = arg`.\r\n\r\nExamples:\r\n\r\n```coffeescript\r\narr = [1, {a: 42, b: 43}, 2, 3, 4]\r\n[x, {a}..., y, z] = arr\r\n# x = 1, a= 42, y = 3, z = 4\r\n```\r\n\r\n---\r\n\r\n```coffeescript\r\nfoo = (x, {a}..., y, z) -> [x, a, y, z]\r\n[x, a, y, z] = foo 1, {a:42}, 2, 3, 4\r\n# x = 1, a= 42, y = 3, z = 4\r\n```",
      "@zdenko I'm indifferent to allowing object-destructuring of an object rest spread (eg `{{a}...} = obj`) - I'm guessing it was removed from the spec since it seems like you could always achieve the same results by \"expanding\" your nested destructuring into the top level (eg `{{a, b...}..., c}` -> `{a, b..., c}`. But if we already support it I don't see a reason to remove it\r\n\r\nBut as far as making object-destructuring of an \"array splat\" implicitly dereference the first element of the array, that's a very bad idea, let me explain\r\n\r\nStart from the difference between the two types of destructured/left-hand-side splats: when the splat is inside an object, it's an \"object rest spread\" and the splat variable will be an object (eg `a` will be an object in `{a...} = b`). When the splat is inside an array, it's an \"array splat\" and the splat variable will be an array (eg `a` will be an array in `[a...] = b`). Splats as (top-level) function params are \"array splat\"s\r\n\r\nSo we are discussing the \"array splat\" case only, and specifically when the splat variable is itself a destructured object. You are saying the object that gets destructured should be the first element of the array splat and I'm saying it should be the array splat itself. Eg whether `[{a}...] = b` should mean `[ref...] = b, {a} = ref[0]` or `[ref...] = b, {a} = ref`\r\n\r\nHere are my reasons why it should be the latter (object-dereference the array splat itself):\r\n- Compatibility with ES6 behavior\r\n- Compatibility with existing Coffeescript behavior\r\n- Expected symbolic meaning of dereferencing syntax\r\n\r\nTo illustrate ES6 behavior, run these in Chrome console or wherever:\r\n```\r\nconst f = (...{length}) => length\r\nf() // 0\r\nf(1, 1, 1) // 3\r\n```\r\nand the corresponding array-destructured assignments:\r\n```\r\nlet [...{length}] = []\r\nlength // 0\r\n[...{length}] = [1, 1, 1]\r\nlength // 3\r\n```\r\n\r\nExisting Coffeescript behavior matches ES6 behavior, eg `[{a}...] = b` is compiled (correctly) into `[...{a}] = b` and `({a}...) ->` is compiled into `function(...{a}) {}`\r\n\r\nAnd as far as intuitive/expected behavior, it's clearly a confusing syntax regardless. I imagine that your arguments for making it dereference the first element of the array splat are that it may be more useful (since the use cases for object-dereferencing an array are very limited), may seem more consistent with the meaning of `{a}...` in an \"object rest spread\" context, or may seem like the expected meaning of `{a}...`\r\n\r\nBut that \"consistency\" is not a valid point, as clearly `a...` has two different meanings in an \"array splat\" vs an \"object rest spread\" context (`a` will be either an array or an object), so `{a}...` can correspondingly have two different meanings in those two contexts\r\n\r\nAs far as expected meaning, clearly our brain may think \"`{a}` is dereferencing an object\" when we see `{a}...`. But to introduce an implicit dereferencing of the first element of the array splat (in order to give it a chance to be an actual object rather than an array) is kind of arbitrary and doesn't follow this guiding rule: dereferencing syntax should visually correspond exactly to the structure of what it's dereferencing. You should be able to directly substitute a nested dereferencing for a variable and know that the nested dereferencing is performed on what the variable would have been. Eg `[a] = d` vs `[{b: c}] = d`, `{b: c}` represents the same object as `a`. Basically you should always be able to perform the nested destructuring as a subsequent destructuring assignment, eg `[{b: c}] = d` is equivalent to `[a] = d, {b: c} = a`. Your suggested compilation violates this rule. You are not making `[{b: c}...] = d` equivalent to `[a...] = d, {b: c} = a`, you are making it equivalent to `[a...] = d, [{b: c}] = a`\r\n\r\nBut so then it should be clear how to achieve the desired effect of dereferencing the first element of the array splat: just wrap the object-destructuring in `[]`, eg `[[{b: c}]...] = d`. So your examples should be written as `[x, [{a}]..., y, z] = arr` and `(x, [{a}]..., y, z) ->`. This looks like it compiles correctly at least on my `object_rest_spread` branch\r\n\r\nSo to me it is clear that compatibility with ES6, compatibility with existing Coffeescript behavior, and maintaining this implicit rule of destructuring-syntax precision are more than enough reasons to prefer the meaning \"object-destructure the array splat itself\" over \"object-destructure the first element of the array splat\"\r\n\r\nIf you see my argument, I'd encourage you to use the commit on my `object_rest_spread` branch at least as a reference (if you don't want to just merge it into your branch), as I feel confident that it covers the basic cases of object-dereferencing an array splat and has useful tests for those cases",
      "@helixbass you made a very sound argument. I was indeed looking at `{a}...` from the \"inside out\". \r\nI already used some of your code, and I might just merge the rest of it. I'll try to wrap everything up tomorrow and have this PR ready for a merge.",
      "Is there anything holding up this PR?",
      "@GeoffreyBooth I think it's ready to be merged.\r\n@helixbass  any notes?"
    ],
    "commit_messages": [
      "Fix #4876: remove polyfill for object rest/spread (#4884)\n\n* object rest/spread\r\n\r\n* merge branch 'master' into 'object_rest_spread'\r\n\r\n* explore\r\n\r\n* Revert \"merge branch 'master' into 'object_rest_spread'\"\r\n\r\nThis reverts commit eeeffef55d4d9b6826c97539e4fdbc23db67a1ec.\r\n\r\n* Revert \"explore\"\r\n\r\nThis reverts commit d21cd72aa3051e87ba5ddcfd56662150c697dfcd.\r\n\r\n* split tests\r\n\r\n* improvements\r\n\r\n* unassignable rest property\r\n\r\n* cleanup\r\n\r\n* formatting, cleanup\r\n\r\n* handle non-final object-destructured splat\r\n\r\n* merge with @helixbass's branch"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc523a21fa1e1f1a9e4b",
    "number": 4883,
    "body": "Fixes #4882.",
    "head_branch": "issue4882",
    "is_a_fork": true,
    "comments": [
      "We've long hidden the index from the user. Did we change that in the previous PR?",
      "Let’s please add some tests. I would think you could copy the example from the bug report and check if `global.i` is defined, or maybe make the `test` function `\"use strict\"`?",
      "@vendethiel the previous PR (#4855) changed variable declaration of the index, e.g. `i`:\r\n```coffeescript\r\n# before\r\ni = o.scope.freeVariable 'i', single: true\r\n\r\n#after\r\ni = o.scope.freeVariable 'i', single: true, reserve: no\r\n```\r\n\r\nThe former declared `i` in the global scope.\r\n\r\nThe other thing, which I didn't notice before, but #4882 has found, is the different output of the `for` statement between `range`  with number literals (`[0..50]`) and variables (`[0..a]`) in `Range::compileArray`."
    ],
    "commit_messages": [
      "Fix #4882: Range not declaring var for the \"i\" (#4883)\n\n* fix #4882\r\n\r\n* test"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc533a21fa1e1f1a9e4c",
    "number": 4881,
    "body": "Fixes #4877: Output ES2018 versions of `**` and `**=` operators.\r\n\r\nYou can’t do odd things like `!2 ** 2` or `~1 ** 5` in JavaScript, so I removed those tests. (Wrap the left side in parentheses and it’ll work.) I suppose technically this is a breaking change, but the test is really just testing order of operations and the examples seem unlikely to exist in production code.\r\n\r\nThese operators are only supported in Node 7.5+.",
    "head_branch": "exponentiation",
    "is_a_fork": true,
    "comments": [
      "I’ve updated this to account for #5003. I think this should be ready now. @zdenko do you have any notes?\r\n\r\nI’d like to resolve #5014 and any other open issues first in a 2.2.4 patch release, then merge in all the enhancements that are ready and release them in a 2.3.0. So @zdenko if you think this PR looks good, please just add a comment saying so, and we can merge it into `master` once 2.2.4 is done.",
      "LGTM :thumbsup:",
      "Should we wait for this to be stage 4 first? otherwise you have to use the plugin `transform-exponentiation-operator` unless we don't care about IE anymore...",
      "This feature is Stage 4: https://github.com/tc39/proposals/blob/master/finished-proposals.md",
      "This feature doesn’t require a rewrite of the Compatibility section, so it’s safe to merge in as is."
    ],
    "commit_messages": [
      "Fix #4877: Exponentiation operators (#4881)\n\n* Passthrough exponentiation operator; remove tests that are invalid JavaScript\r\n\r\n* Treat **= as a passthrough assignment\r\n\r\n* Get tests passing in Node 6\r\n\r\n* Improve scoping\r\n\r\n* Move exponentiation tests into their own file, now that it's filtered out by Cakefile\r\n\r\n* Restore original test"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc543a21fa1e1f1a9e4d",
    "number": 4880,
    "body": "This adds support for ES2018’s [`s` (dotAll) flag](https://github.com/tc39/proposal-regexp-dotall-flag).\r\n\r\nThe syntax is only supported in Node 9+, so I added Node 9 to the list of versions we test in CI.\r\n\r\nMerging this in would mean that we would need to expand the “Compatibility” section of the docs that currently say:\r\n\r\n> With the exception of modules and JSX, all the modern JavaScript features that CoffeeScript supports can run natively in Node 7.6+.\r\n\r\nWe would probably need to put a table there, listing the features required by certain Node versions (i.e. async functions: 7.6+, `dotAll` flag: 9+, etc.).",
    "head_branch": "regex-dotall",
    "is_a_fork": true,
    "comments": [
      "Should we wait for this to be stage 4 first? otherwise you have to use the plugin `transform-modern-regexp`  unless we don't care about IE anymore...",
      "This feature is at Stage 4: https://github.com/tc39/proposal-regexp-dotall-flag",
      "@jashkenas @lydell @zdenko @connec I updated the docs to start listing features that CoffeeScript supports that are newer than Node 7.6. See [this diff](https://github.com/jashkenas/coffeescript/pull/4880/commits/aefe43bc52e84802b1c3fe94fbd47b20168c7e29). Any feedback on this language?\r\n\r\nNote also that Node’s new, native support for modules needs to be addressed. It was painful just writing the instructions for how to use `.mjs` files now; we should make this better. Please see #5018.",
      "Looks good! I would, personally, omit the \"Why doesn't CoffeeScript simply always transpile?\" paragraph.",
      "> I would, personally, omit the “Why doesn’t CoffeeScript simply always transpile?” paragraph.\r\n\r\nYeah, I think that made more sense back when we were introducing CoffeeScript 2, but it isn’t needed anymore."
    ],
    "commit_messages": [
      "Regular expressions `s` (dotAll) flag (#4880)\n\n* Support ES2018 regex dotall flag\r\n\r\n* Test in Node 9\r\n\r\n* Alphabetize regex flags\r\n\r\n* Split regex dotall test into its own file, use new feature detection method of loading it\r\n\r\n* Update docs to explain compatibility for ES2018 and newer Node features\r\n\r\n* Remove unnecessary paragraph"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc553a21fa1e1f1a9e4e",
    "number": 4879,
    "body": "Fixes #4878.",
    "head_branch": "issue4878",
    "is_a_fork": true,
    "comments": [
      "@GeoffreyBooth the last commit fixes the returned value, but I just found another issue, which I'll fix later today.\r\nSorry, I was too quick with the push.",
      "No worries.\r\n\r\nThe tests we have at least prove that this syntax compiles; it would be nice to also somehow prove that `first` and `last` are the values we expect them to be.",
      "@GeoffreyBooth the “issue” I noticed before is a false alarm.\r\nWhen I checked this compiled output,\r\n```coffeescript\r\nfoo = (list) ->\r\n  ret =\r\n    if list.length > 0\r\n      [first, ..., last] = list\r\n      [first, last]\r\n    else\r\n      []\r\n\r\n```\r\n```js\r\nfoo = function(list) {\r\n  var first, last, ret;\r\n  return ret = list.length > 0 ? (([first] = list, [last] = slice.call(list, -1), list), [first, last]) : [];\r\n};\r\n```\r\n\r\nI thought that this part `(([first] = list, [last] = slice.call(list, -1), list)` shouldn’t include `list` at the end.\r\nAlthough it’s not a bug, since the returned value is correct, it would be nicer if it could be omitted from such expressions. \r\nIt’s probably a task for some other PR."
    ],
    "commit_messages": [
      "Fix #4878: Compile error when using destructuring with a splat or expansion in an array (#4879)\n\n* fix #4878\r\n\r\n* improvements\r\n\r\n* test\r\n\r\n* refactor"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc563a21fa1e1f1a9e4f",
    "number": 4873,
    "body": "This release fixes *all* currently open bugs, dating as far back as 2014, 2012 and 2011. Heartfelt thanks and congratulations to @zdenko!\r\n\r\n*   **Potential breaking change:** An inline `if` or `switch` statement with an ambiguous `else`, such as `if no then if yes then alert 1 else alert 2`, now compiles where the `else` always corresponds to the closest open `then`. Previously the behavior of an ambiguous `else` was unpredictable. If your code has any `if … then` or `switch … then` statements with multiple `then`s (and one or more `else`s) the compiled output might be different now, unless you had resolved ambiguity via parentheses. We made this change because the previous behavior was inconsistent and basically a bug: depending on what grammar was where, for example if there was an inline function or something that implied a block, the `else` might bind to an earlier `then` rather than a later `then`. Now an `else` essentially closes a block opened by a `then`, similar to closing an open parenthesis. #4838\r\n*   When a required `then` is missing, the error more accurately points out the location of the mistake. #4862, #4872\r\n*   An error is thrown when the `coffee` command is run in an environment that doesn’t support some ES2015 JavaScript features that the CoffeeScript compiler itself requires. This can happen if CoffeeScript is installed in Node older than version 6. #4839\r\n*   Destructuring with a non-final splat/spread, e.g. `[open, contents..., close] = tag.split('')` is now output using ES2015 rest syntax. #4825\r\n*   Functions named `get` or `set` can be used without parentheses in more cases, including when attached to `this` or `@` or `?.`; or when the first argument is an implicit object, e.g. `@set key: 'val'`. #4837, #4867\r\n*   Statements such as `break` can now be used inside parentheses, e.g. `(doSomething(); break) while condition` or `(pick(key); break) for key of obj`. #4849\r\n*   Bugfix for assigning to a property attached to `this`/`@` in destructuring, e.g. `({@prop = yes, @otherProp = no}) ->`. #4848\r\n*   Bugfix for incorrect errors being thrown about calling `super` with a parameter attached to `this` when said parameter is in a lower scope, e.g. `class Child extends Parent then constructor: -> super(-> @prop)`. #4869\r\n*   Bugfix to prevent a possible infinite loop when a `for` loop is given a variable to step by, e.g. `for x in [1..3] by step` (as opposed to `by 0.5` or some other primitive numeric value). #4853\r\n*   Bugfix to no longer declare iterator variables twice when evaluating a range, e.g. `end = 3; fn [0..end]`. #4855\r\n*   Bugfix for incorrect scope of variables in chained calls, e.g. `start(x = 3).then(-> x = 4)`. #4863\r\n*   Bugfix for incorrect scope of variables in a function passed to `do`, e.g. `for [1..3] then masked = 10; do -> alert masked`. #4854\r\n*   Bugfix to no longer throw a syntax error for a trailing comma in a function call, e.g. `fn arg1, arg2,`. #4860\r\n*   Bugfix for an expression in a property access, e.g. `a[!b in c..]`. #4851\r\n*   Bugfix to allow a line continuation backslash (`\\`) at any point in a `for` line. #4861\r\n\r\nhttp://rawgit.com/GeoffreyBooth/coffeescript/2.2.0/docs/v2/#changelog\r\n@jashkenas @lydell @connec ",
    "head_branch": "2.2.0",
    "is_a_fork": true,
    "comments": [
      "I speak from the bottom of my heart, when I say: Holy crap!\r\n\r\nThree cheers for @zdenko!",
      "This is also our 1,000th closed pull request! 🎆"
    ],
    "commit_messages": [
      "2.2.0 (#4873)\n\n* Changelog for 2.2.0\r\n\r\n* Bump version\r\n\r\n* Bump package versions\r\n\r\n* Fix `cake doc:source` for Docco 0.8.0\r\n\r\n* Update output; some text tweaks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc573a21fa1e1f1a9e50",
    "number": 4872,
    "body": "Fixes #4871.\r\n\r\n```coffeescript\r\nif no\r\n  1\r\nelse if yes\r\n  2\r\n```\r\n\r\n```javascript\r\nif (false) {\r\n  1;\r\n} else if (true) {\r\n  2;\r\n}\r\n```",
    "head_branch": "issue4871",
    "is_a_fork": true,
    "comments": [
      "Always feels good when fixes only remove code :-). :+1:",
      "Yet another proof that less is more :smile:"
    ],
    "commit_messages": [
      "fix #4871 (#4872)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc583a21fa1e1f1a9e51",
    "number": 4869,
    "body": "Fixes #4868. \r\nThe function body, passed as a parameter, to `super` is excluded from the arguments check in the `Code::eachSuperCall`. \r\n\r\n```coffeescript\r\nclass B extends A\r\n  constructor: -> super -> @x\r\n\r\n###\r\nB = class B extends A {\r\n  constructor() {\r\n    super(function() {\r\n      return this.x;\r\n    });\r\n  }\r\n};\r\n###\r\n\r\nclass extends A then constructor: (@a) -> super(class then constructor: (@b) -> @b)\r\n\r\n###\r\n(class extends A {\r\n  constructor(a) {\r\n    super(class {\r\n      constructor(b) {\r\n        this.b = b;\r\n        this.b;\r\n      }\r\n\r\n    });\r\n    this.a = a;\r\n  }\r\n});\r\n###\r\n```",
    "head_branch": "issue4868",
    "is_a_fork": true,
    "comments": [
      "Can you please add a few tests?\r\n\r\nAlso make sure that this still errors: `class A then constructor: -> super ((a) -> a.x)(@)`, `class A then constructor: super => @a`, etc.",
      "This looks great, aside from needing tests."
    ],
    "commit_messages": [
      "Fix #4868: Incorrect ‘Can’t call super with @params’ error (#4869)\n\n* fix #4868\r\n\r\n* improvements\r\n\r\n* tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc593a21fa1e1f1a9e52",
    "number": 4867,
    "body": "This fixes all the edge cases noted in #4852.",
    "head_branch": "this-get-set-implicit-object",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #4852, @get @set implicit object (#4867)\n\n* Test cases for #4852, get/set oddities\r\n\r\n* Fix soak before accessor call to `get` or `set`\r\n\r\n* Fixes #4852: More get/set cases; cleanup style\r\n\r\n* Check for tokens' existence before referencing them"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc5a3a21fa1e1f1a9e53",
    "number": 4863,
    "body": "Fixes #4437.\r\n\r\n```coffeescript\r\nfoo(x = 3).bar(-> x = 4)\r\n```\r\n```js\r\nvar x;\r\nfoo(x = 3).bar(function() {\r\n  return x = 4;\r\n});\r\n```\r\n___\r\n```coffeescript\r\nfoo(-> x = 3).bar(x = 4)\r\n```\r\n```js\r\nvar x;\r\nfoo(function() {\r\n  return x = 3;\r\n}).bar(x = 4);\r\n```",
    "head_branch": "issue4437",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #4437: variable scope in chained calls (#4863)\n\n* fix #4437\r\n\r\n* tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc5b3a21fa1e1f1a9e54",
    "number": 4862,
    "body": "Fixes #3933.\r\n`Rewriter::addImplicitBracesAndParens` recognizes code `for a in b do ->` or `for a in b ->` as implicit call. When `then` is missing, `b do ->` and `b ->` are compiled to `b(do ->)` and `b(->)`.\r\n\r\n```coffeescript\r\nfor a in b do ->\r\n  foo()\r\n  bar()\r\nbaz()\r\n```\r\n\r\nAfter `Rewriter`:\r\n```coffeescript\r\nfor a in b(do ->\r\n  foo()\r\n  bar())\r\nbaz()\r\n\r\n# or in a single line\r\n\r\nfor a in b(do -> foo(); bar())\r\nbaz()\r\n```\r\n\r\nOther cases:\r\n\r\n```coffeescript\r\nfor a in b do ->\r\n\r\nfor a in b ->\r\n\r\nwhile a do ->\r\n\r\nwhile a ->\r\n\r\nswitch\r\n  when a do ->\r\n\r\nswitch\r\n  when a ->\r\n```\r\n\r\nThis PR fixes this by preventing implicit call and enables error to be positioned in correct place.\r\n\r\n```coffeescript\r\nfor a in b do ->\r\n  foo()\r\n\r\n###\r\nerror: unexpected do\r\nfor a in b do ->\r\n           ^^\r\n###\r\n```\r\n",
    "head_branch": "issue3933",
    "is_a_fork": true,
    "comments": [
      "@zdenko I know I already merged this, but I just discovered an issue. I can open an issue if you think it warrants it. See dcd6de9a773d834426dbff472349f040bce2d652; after this PR was merged in (I’m pretty sure it was this one, but it might’ve been an earlier one) all `else if`s started to be compiled like `else\\nif`:\r\n\r\n```coffee\r\nif no\r\n  1\r\nelse if yes\r\n  2\r\n```\r\n```js\r\nif (false) {\r\n  1;\r\n} else {\r\n  if (true) {\r\n    2;\r\n  }\r\n}\r\n```\r\n\r\nThe `else if` [should be output on the same line](http://coffeescript.org/#try:if%20no%0A%091%0Aelse%20if%20yes%0A%092%0A).",
      "I'm working on it."
    ],
    "commit_messages": [
      "Fix #3933: Missing `then` doesn’t trigger nearby error (#4862)\n\n* fix #3933\r\n\r\n* tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc5c3a21fa1e1f1a9e55",
    "number": 4861,
    "body": "Fixes #3909.\r\nA syntax error is thrown when the backslash is used in `for of`  and `for in` loops, and `in` or `of` tags aren't in the same line with `for` tag.\r\nThe issue is in `Lexer::lineToken` where `for` tag is closed (`@seenFor = no`). This PR corrects this by checking the previous `tag`, e.g. `tag`  before the `TERMINATOR`.\r\n\r\n```coffeescript\r\nx = ( key for \\\r\n  own key of obj )\r\n\r\nx = ( key for own \\\r\n  key of obj )\r\n\r\nx = ( key for own key \\\r\n  of obj )\r\n\r\nx = ( key for \\\r\n  key of obj )\r\n\r\nx = ( key for \\\r\n  key of obj )\r\n\r\nx = ( key for key \\\r\n  of obj )\r\n\r\nx = ( key for \\\r\n  key in obj )\r\n\r\nx = ( key for \\\r\n  key in obj )\r\n\r\nx = ( key for key \\\r\n  in obj )\r\n```\r\n",
    "head_branch": "issue3909",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix #3909 (#4861)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc5d3a21fa1e1f1a9e56",
    "number": 4860,
    "body": "Fixes #3306.\r\nTrailing comma in a function call in the last line throws syntax error because the implicit call isn't closed in `Rewriter::addImplicitBracesAndParens`.\r\n\r\n```coffeescript\r\nfoo bar,\r\n```",
    "head_branch": "issue3306",
    "is_a_fork": true,
    "comments": [
      "Can we add a test?",
      "Sorry, I just reread #3306. Why are we allowing this syntax?\r\n```coffee\r\nfoo bar,\r\n```\r\nThat feels to me like it should throw a syntax error. Admittedly #3306 is somewhat ambiguous, but I read it the opposite way: not that the above should compile, but that the other oddball examples currently do compile but shouldn’t.\r\n\r\nCoffeeScript already has too many things that cause line continuations (like ending a line in `and`); we shouldn’t be adding more. I read #3306 as meaning that several of those other cases should cause syntax errors, even if they currently don’t.",
      "So, the last comma is not allowed in function invocation?\r\nIn that case, we have to change the grammar rules\r\nfrom\r\n\r\n```coffeescript\r\nArguments: [\r\n    o 'CALL_START CALL_END',                    -> []\r\n    o 'CALL_START ArgList OptComma CALL_END',   -> $2\r\n  ]\r\n```\r\nto\r\n\r\n```coffeescript\r\nArguments: [\r\n    o 'CALL_START CALL_END',           -> []\r\n    o 'CALL_START ArgList CALL_END',   -> $2\r\n  ]\r\n```\r\n\r\nWon't this change break existing code?\r\n",
      "Good point, @zdenko. I think this should be allowed:\r\n\r\n```coffee\r\nfoo(\r\n  1,\r\n  2,\r\n)\r\n```\r\n\r\nBut `foo 1, 2,` looks really odd. Tricky. (I don’t know what should be the rule now.)",
      "@lydell `Rewriter::addImplicitBracesAndParens` wraps arguments in cases like `foo 1, 2,`.\r\nI think this will create a lot of confusion if `foo(1, 2,)` compiles, but `foo 1, 2,` throws an error.\r\nBesides, this \r\n```coffeescript\r\nfoo a, b,  \r\nc = 2\r\n```\r\ncurrently compiles to `foo(a, b,  c = 2)`, so changing the rules for detecting the end of the implicit call will be tricky, and will cause even more broken code.",
      "@zdenko Good, I think you have nailed it. We have to support that comma, no matter how ugly it is. I guess #3306 is trying to point out some inconsistency that we should fix. Or perhaps this PR already fixes it?",
      "I think explicit parentheses make it acceptable. This is valid CoffeeScript and JavaScript:\r\n```js\r\nconsole.log(1,2,)\r\n```\r\nBut currently `console.log 1,2,` in CoffeeScript throws a syntax error. This feels correct to me.\r\n\r\nParentheses can make it unambiguous that the user isn’t finished calling the function. As in:\r\n```coffee\r\nconsole.log(1,2,\r\nx = 3\r\n)\r\n```\r\ncan be nothing other than `console.log(1, 2, x = 3)`; it’s unambiguous. But take away those parentheses and you have ambiguity.",
      "> I guess #3306 is trying to point out some inconsistency that we should fix. Or perhaps this PR already fixes it?\r\n\r\n#3306 points out an inconsistency, yes, in that sometimes a function call is continued onto a following line and sometimes it isn’t. So the resolution is to either get stricter (continue onto the following line in fewer cases) or looser (continue onto the following line in more cases). This PR goes the “looser” route. #3306 doesn’t seem to pick a side as to whether the desired resolution is stricter or looser; I assumed the desired fix would have been to become more strict, that the compiler currently allows some bad syntax that it really shouldn’t, because when I read the examples that the compiler currently allows they look pretty awful and like things that should throw errors.\r\n\r\nBut if you think those currently-allowed cases are common and/or legitimate, that might appear in non-crazy code, I guess we’ll have to go looser—or just leave things as they are, and accept some logical inconsistency as a lesser evil than allowing even more bad syntax to be permissible.",
      "I don’t care very much which direction this goes as long as we’re careful not to break backwards compatibility unnecessarily.",
      "Taking the #3306 cases one by one:\r\n\r\n``` coffeescript\r\nfoo bar,\r\n```\r\n```\r\n[stdin]:1:9: error: unexpected end of input\r\nfoo bar,\r\n        ^\r\n```\r\nThe user who opened #3306 (and I) expect this to throw an error. So far so good. (This is the case that this PR makes permissible.)\r\n\r\n``` coffeescript\r\nif baz\r\n  foo bar,\r\n```\r\n``` javascript\r\nif (baz) {\r\n  foo(bar);\r\n}\r\n```\r\n\r\nThis case the user and I consider to be a bug. This should throw a syntax error like the first case. I think if we made such a change, it wouldn’t really affect anyone; anyone who has a comma here most likely has more code that follows on the next line. Which brings us to:\r\n\r\n``` coffeescript\r\nif baz\r\n  foo bar,\r\nqux\r\n```\r\n\r\n``` javascript\r\nif (baz) {\r\n  foo(bar);\r\n}\r\n\r\nqux;\r\n```\r\nThe user and I also both expect this to throw an error. The dedent, in particular, is very odd; even if we wanted to allow multiline implicit calls, I would think that each line should be at either the same level or indented. But let’s say for the sake of argument that that `qux` were indented, either to the same level as `foo` or one indent further in. _That_ would be a syntax that I think is reasonable and that probably appears in lots of code and that we need to continue to support. But this isn’t a case of a trailing comma; there’s no comma after `qux`, for example. This is a comma that triggers an implicit line continuation, similar to an `if` statement that ends in `and` in order to continue onto the next line. We could still cause a trailing comma that doesn’t cause a line continuation—such as a comma after `qux` here—to throw an error.\r\n\r\nFinally, the user is befuddled by this one:\r\n``` coffeescript\r\nfoo bar,\r\nif baz\r\n  qux quxx\r\n```\r\n``` javascript\r\nfoo(bar, baz ? qux(quxx) : void 0);\r\n```\r\nWhich is really just the consequence of allowing a trailing comma to trigger a line continuation. Awfully surprising, though, it is.\r\n\r\nBut as I just wrote, I accept the need to allow a comma to force an implicit line continuation, because there’s too much code out there using it for that purpose for us to change that now. So the question is, do we also need to allow a _trailing_ comma, where there’s nothing on the next line to continue to?\r\n\r\nIt appears that we do, because this is allowed:\r\n\r\n```coffee\r\nobj =\r\n  a: 1,\r\n  b: 2,\r\n```\r\nI guess if we allow a trailing comma here, we need to allow it in `foo bar,` too. So maybe we should accept this PR after all. It’s just frustrating to make an already too-permissible compiler even more permissible, for a questionable syntax.",
      "Some info about the trailing comma: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas\r\nIt seems that trailing comma is allowed in function calls and parameters, which means `foo bar,` is a valid code.\r\nHowever, these are  still weird and confusing:\r\n\r\n```coffeescript\r\nfoo a, b,\r\n\r\nc\r\n\r\n# compiles to\r\n# foo(a, b, c)\r\n```\r\n\r\n```coffeescript\r\nfoo a, b,\r\nif c then d\r\n\r\n# or\r\n\r\nfoo a, b,\r\n\r\nif c then d\r\n\r\n# compiles to\r\n# foo(a, b, c ? d : void 0);\r\n```\r\n\r\nI would say that `Rewriter` should be reworked to close implicit calls on trailing comma followed by two successive `TERMINATOR` tags.\r\n",
      "Anyone else have an opinion? @jashkenas @vendethiel @xixixao @connec",
      "I really don't like the dedent case. Otherwise lgtm"
    ],
    "commit_messages": [
      "Fix #3306: trailing comma in a function call in the last line throws a syntax error (#4860)\n\n* fix #3306\r\n\r\n* added test"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc5e3a21fa1e1f1a9e57",
    "number": 4855,
    "body": "Fixes #4105 \r\n\r\n```coffeescript\r\na = 3\r\nfoo [0..a]\r\n```\r\n```javascript\r\nvar a;\r\na = 3;\r\nfoo((function() {\r\n  var results = [];\r\n  for (var i = 0; 0 <= a ? i <= a : i >= a; 0 <= a ? i++ : i--){ results.push(i); }\r\n  return results;\r\n}).apply(this));\r\n```\r\n---\r\n```coffeescript\r\nb = [1..a]\r\n```\r\n```javascript\r\nvar b;\r\nb = (function() {\r\n  var results = [];\r\n  for (var i = 1; 1 <= a ? i <= a : i >= a; 1 <= a ? i++ : i--){ results.push(i); }\r\n  return results;\r\n}).apply(this);\r\n```",
    "head_branch": "issue4105",
    "is_a_fork": true,
    "comments": [
      "Nice work! I love closing 3-year-old bugs.",
      "🎉 "
    ],
    "commit_messages": [
      "Fix #4105 (#4855)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc5e3a21fa1e1f1a9e58",
    "number": 4854,
    "body": "Fixes #1403.\r\nIt seems that `For::pluckDirectCall` isn't needed.\r\n\r\nExamples from #1403 \r\n```coffeescript\r\nfor dummy in [0...1]\r\n  masked = 10\r\n  do -> alert masked = masked + 1\r\nalert 'a line needs to be here to trigger the issue'\r\n```\r\n```javascript\r\nfor (dummy = i = 0; i < 1; dummy = ++i) {\r\n  masked = 10;\r\n  (function() {\r\n    return alert(masked = masked + 1);\r\n  })();\r\n}\r\nalert('a line needs to be here to trigger the issue');\r\n```\r\n---\r\n```coffeescript\r\nfor dummy in [0...1]\r\n  notMasked = 10\r\n  do -> alert notMasked += 1\r\nalert 'a line needs to be here to trigger the issue'\r\n```\r\n```javascript\r\nfor (dummy = j = 0; j < 1; dummy = ++j) {\r\n  notMasked = 10;\r\n  (function() {\r\n    return alert(notMasked += 1);\r\n  })();\r\n}\r\nalert('a line needs to be here to trigger the issue');\r\n```",
    "head_branch": "issue1403",
    "is_a_fork": true,
    "comments": [
      "Before we jettison `pluckDirectCall` entirely, can someone explain why it was added in the first place? From my Git diving I see that @satyr added it in 4e39e2eec41bf207c2b8717c2360ae060a7d7e03; @satyr, do you mind sharing what was on your mind back in 2010? The commit message was “made dynamic calls at the last of `for` expression be defined outside”.\r\n\r\nI did some testing, and on `master` `pluckDirectCall` is currently called by the following tests, all in `comprehensions.coffee`:\r\n\r\n- Ensure that the closure wrapper preserves local variables.\r\n- Even a convoluted one.\r\n- Scoped loop pattern matching.\r\n- Issue #948. Capturing loop variables.\r\n- Comprehensions over function literals.\r\n\r\nI pulled those tests into their [own file](https://gist.github.com/GeoffreyBooth/c0e0d539c13ae181ee719627151d3402) and compiled them into JS using both `master` and this branch. [Here’s the diff.](https://www.diffchecker.com/sHxumxSy)\r\n\r\nA minimal case seems to be this:\r\n\r\n```coffee\r\nfor i in [1..3] then do -> console.log i\r\n```\r\n\r\nOn `master`:\r\n\r\n```js\r\nvar fn, i, j;\r\n\r\nfn = function() {\r\n  return console.log(i);\r\n};\r\nfor (i = j = 1; j <= 3; i = ++j) {\r\n  fn();\r\n}\r\n```\r\n\r\nPer this PR:\r\n\r\n```coffee\r\nvar i, j;\r\n\r\nfor (i = j = 1; j <= 3; i = ++j) {\r\n  (function() {\r\n    return console.log(i);\r\n  })();\r\n}\r\n```\r\n\r\nBoth versions print `1`, `2`, `3`, which might not be obvious at first; the reference to `i` is consistent no matter where the `do` function is put. But the two outputs illustrate the difference `pluckDirectCall` makes, which is to shift a `do`-wrapped function outside of the `for` loop, presumably for scope reasons. Sounds a lot like “made dynamic calls at the last of `for` expression be defined outside.” So . . . why? What is gained by creating a temporary variable `fn` and assigning this `do` function to it, and calling `fn` inside the `for` loop rather than leaving the function itself there?\r\n\r\n4e39e2eec41bf207c2b8717c2360ae060a7d7e03 has this test added, in obsolete CoffeeScript syntax:\r\n\r\n```coffee\r\n# If the last expression is dynamic call,\r\n# define it outside and pass loop variables to it.\r\nfs = for i from 0 to 2 when i > 0\r\n  void\r\n  do ->\r\n    {callee} = arguments\r\n    -> [i, callee]\r\n[one, two] = (f() for f in fs)\r\neq one[0], 1\r\neq two[0], 2\r\neq one[1], two[1]\r\n```\r\nEven converting this into modern syntax:\r\n```coffee\r\nfs = for i in [0..2] when i > 0\r\n  do ->\r\n    {callee} = arguments\r\n    -> [i, callee]\r\n[one, two] = (f() for f in fs)\r\neq one[0], 1\r\neq two[0], 2\r\neq one[1], two[1]\r\n```\r\nnone of these tests pass, assuming I converted it correctly. Perhaps `pluckDirectCall` is a relic of those times, when scope and comprehensions behaved differently?",
      "@GeoffreyBooth my memory is a bit fuzzy because it's been a long time... But AFAIK not defining the function inside the loop is an optimization (see coco's wiki page \"Additions\").\r\nAs to why the test passes: I don't remember everything, but I think at some point `do` auto-captured loop variables(?). I think that's why the test passed.",
      "Also, paging @satyr about some reasoning from 2010 is probably not going to work...",
      "Ah, an optimization makes sense. Well, it's not really worth keeping if it's buggy, which it appears to be; and it's an optimization the user could do themselves. If they want the function defined before the loop and referenced in the loop, they could write their code as such.\r\n\r\nSo this looks good to me. @vendethiel, any notes? And have we lost @satyr?",
      "LGTM. As for @satyr, I think their last commit was a few years back, so we'd have to wait for a while.",
      "This *may* lead to non-trivial performance degradations for code using the old `for ... then do ->` construct:\r\n\r\n```coffee\r\nfor a in [1, 2, 3] then do ->\r\n  setTimeout (-> console.log a), 1000\r\n```"
    ],
    "commit_messages": [
      "fix #1403 (#4854)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc5f3a21fa1e1f1a9e59",
    "number": 4853,
    "body": "Fixes #2047. (I hope this is not another \"fake bug\" :smile:).\r\nWhen variables are used in `range` and/or `by`, an infinite loop is possible.\r\nThis happens because the condition inside `for` doesn't check upper and lower `range` bounds.\r\nThis PR corrects this. I also implemented the same check when `by` is set as a literal number   \r\n(`for x in [1..5] by -1`), to prevent an accidental infinite loop.\r\n\r\nExamples:\r\n```coffeescript\r\nfor x in [1..5] by -1\r\n# for (x = i = 1; 1 <= i && i <= 5; x = i += -1)\r\n\r\nfor x in [5..1] by 1\r\n# for (x = i = 5; 5 >= i && i >= 1; x = i += 1)\r\n\r\nfor x in [a..5] by 1\r\n# for (x = i = ref = a; ref <= 5 ? ref <= i && i <= 5 : ref >= i && i >= 5; x = i += 1) \r\n\r\nfor x in [1..b] by step\r\n# for (x = i = 1, ref = b, ref1 = step; 1 <= ref ? 1 <= i && i <= ref : 1 >= i && i >= ref; x = i += ref1)\r\n\r\nfor x in [a..b] by step\r\n# for (x = i = ref = a, ref1 = b, ref2 = step; ref <= ref1 ? ref <= i && i <= ref1 : ref >= i && i >= ref1; x = i += ref2)\r\n```",
    "head_branch": "issue2047",
    "is_a_fork": true,
    "comments": [
      "This looks good to me, though damn this is dense. @vendethiel, do you mind taking a look?\r\n\r\n@zdenko that massive test is very cool, but do you mind adding one additional separate test just for `for x in [a..b] by step`, i.e. the most complicated case? That way we have confidence that the worst case scenario pointed out by #2047 truly is fixed, and there isn’t just a bug in the big looping test.",
      "More tests for cases when `from`, `to` and `step` are variables.\r\nAdditional condition is added to the `for` which checks if `step` isn't zero.\r\nBesides, `step` is always parsed into number: `Number(step) || step|0)`.\r\nThe bitwise operation is used to convert string values into `0` which will be otherwise `NaN`.\r\n```\r\nstep = \"abc\"\r\n(Number(step) || step|0) = 0\r\n```\r\n\r\nFull example:\r\n```coffeescript\r\nx for x in [a..b] by step\r\n\r\n###\r\nfor (x = i = ref = a, ref1 = b, ref2 = step; (Number(ref2) || (ref2|0)) !== 0 && (ref <= ref1 ? ref <= i && i <= ref1 : ref >= i && i >= ref1); x = i += (Number(ref2) || (ref2|0))) \r\n###\r\n```",
      "Why `Number(step)` and not `parseInt(step, 10)`?",
      "I used `Number` for two reasons:\r\n1. It can also convert `float`, e.g. `step = \"0.25\"; for x in [a..b] by step`.\r\n2. It will convert the whole string, whereas `parseInt` parses up to the first non-digit and returns whatever it had parsed, e.g. `\"12p\" => 12`.  So, in a case when the user makes a mistake it will fail completely instead of giving some result which will not be accurate.",
      "It seems like there are a few too many commits here.",
      "It seems that something went wrong when I tried to merge master in the branch.\r\nI don't know how to correct this, so I'll appreciate if someone can advise how to fix this."
    ],
    "commit_messages": [
      "Fix #2047: Infinite loop possible when `for` loop with `range` uses variables (#4853)\n\n* fix #2047\r\n\r\n* Additional check for 'step'; tests\r\n\r\n* Fix #4105 (#4855)\r\n\r\n* Update output\r\n\r\n* Throw warning for unsupported runtimes, e.g. Node < 6 (#4839)\r\n\r\n* fix #1403 (#4854)\r\n\r\n* Update output\r\n\r\n* [Change]: Destructuring with non-final spread should still use rest syntax (#4517) (#4825)\r\n\r\n* destructuring optimization\r\n\r\n* refactor\r\n\r\n* minor improvement, fix errors\r\n\r\n* minor refactoring\r\n\r\n* improvements\r\n\r\n* Update output\r\n\r\n* Update output\r\n\r\n* Fix #4843: bad output when assigning to @prop in destructuring assignment with defaults (#4848)\r\n\r\n* fix #4843\r\n\r\n* improvements\r\n\r\n* typo\r\n\r\n* small fix\r\n\r\n* Fix #3441: parentheses wrapping expression throw invalid error  (#4849)\r\n\r\n* fix #3441\r\n\r\n* improvements\r\n\r\n* refactor\r\n\r\n* Fix #1726: expression in property access causes unexpected results (#4851)\r\n\r\n* fix #1726\r\n\r\n* Explain what's happening, rather than just linking to an issue\r\n\r\n* Updated output\r\n\r\n* Optimization\r\n\r\n* Update output\r\n\r\n* remove casting to number\r\n\r\n* cleanup tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc603a21fa1e1f1a9e5a",
    "number": 4851,
    "body": "Fixes #1726 \r\n\r\n```coffeescript\r\na = [0..2]\r\n\r\nb = a[!1 in a..]\r\n# [0, 1, 2]\r\n\r\nc = a[(!1 in a)..]\r\n# [0, 1, 2]\r\n```",
    "head_branch": "issue1726",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #1726: expression in property access causes unexpected results (#4851)\n\n* fix #1726\r\n\r\n* Explain what's happening, rather than just linking to an issue\r\n\r\n* Updated output\r\n\r\n* Optimization"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc613a21fa1e1f1a9e5b",
    "number": 4850,
    "body": "Fixes #4422 \r\n\r\nThis PR adds support for parenthetical expression with unary operators `++` and `--` \r\n`++(foo)` compiles to `++foo`,  and `(foo.bar)--` to `foo.bar--`\r\n",
    "head_branch": "issue4422",
    "is_a_fork": true,
    "comments": [
      "I'm not sure we necessarily want this to compile? It would be a useful convention if parens always allowed substitutions for other equivalent values, which isn't possible with `++` and `--`.\r\n\r\n```coffee\r\nx = 1\r\n(x)--\r\n(1)-- # Runtime error 0 - Invalid left-hand side expression\r\n```\r\n\r\nAlso this will allow code to compile that perhaps shouldn't, including the example above and more absurd forms such as `(class)--` etc.",
      "I think I agree with @connec. I was surprised to see that _I_ added the \"bug\" label to that issue.",
      "I agree that `Parenthetical` is too dangerous, but these are valid [expressions](https://babeljs.io/repl/#?babili=false&browsers=%3E%201%25&build=&builtIns=false&code_lz=G4QwTgBCELwQjAbgFCkge1hA3iAXAgL4oAUIAlANSUrVnmkUC0TKL9p6AdBdbZSW4VOPcizZNBo0gBcAFgEsAzqL7I685dOQlNK5q2Ts90oA&debug=true&circleciRepo=&evaluate=true&fileSize=false&lineWrap=false&presets=stage-2%2Cstage-3&prettier=false&targets=Node-8.8&version=6.26.0) in JS.\r\n```javascript\r\nvar a = 1;\r\nvar o = {a: 1};\r\n(a)++;\r\n++(a);\r\n(a)--;\r\n--(a);\r\n(o.a)++;\r\n++(o.a);\r\n(o.a)--;\r\n--(o.a);\r\n(this.a)++;\r\n++(this.a);\r\n(this.a)--;\r\n--(this.a);\r\n```\r\n",
      "Additional validation of the `Parens` expressions is added.\r\n```coffeescript\r\n(class)++\r\n###\r\nerror: Invalid left-hand side expression\r\n(class)++\r\n^^^^^^^\r\n###\r\n\r\n--(1)\r\n###\r\nerror: Invalid left-hand side expression\r\n--(1)\r\n  ^^^\r\n###\r\n\r\n++(a())\r\n###\r\nerror: Invalid left-hand side expression\r\n++(a())\r\n  ^^^^^\r\n###\r\n```",
      "But now we're just adding code to support an alternative spelling of something that's less obvious...",
      "So, actually this is not a bug, and there is no need to support `++(a)` syntax?",
      "Awaiting @lydell 's input.\r\nSorry if we do end up ruling this as Not A Bug, that'd be wasted time for you.",
      "I honestly don't remember why I labeled that issue as a bug in the first place. Sorry :(\r\n\r\nJust because JavaScript supports this it doesn't have to mean that CoffeeScript should support it. I've never seen this used in the wild. But I may be missing something.\r\n\r\nIMO it's not worth spending code on this. Sorry for wasting your time :(",
      "@lydell, as penance, I sentence you to reviewing the open pull requests.",
      "Someone owes me a :beer:, or at least :coffee:  :smiley:\r\n@GeoffreyBooth I guess you should also close #4422."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc623a21fa1e1f1a9e5c",
    "number": 4849,
    "body": "Fixes #3441.\r\n\r\nCases where `statement` is used inside parentheses don't compile:\r\n```coffeescript\r\n(a(); break) for a in obj\r\n# error: cannot use a pure statement in an expression\r\n# (a(); break) for a in obj\r\n#       ^^^^^\r\n\r\n(a(); break) while a\r\n# error: cannot use a pure statement in an expression\r\n# (a(); break) while a\r\n#       ^^^^^\r\n\r\nfor a in obj then (a(); break)\r\n# error: cannot use a pure statement in an expression\r\n# for a in obj then (a(); break)\r\n#                         ^^^^^\r\n\r\nwhile a then (a(); break)\r\n# error: cannot use a pure statement in an expression\r\n# while a then (a(); break)\r\n#                    ^^^^^\r\n```\r\n\r\nWith this PR:\r\n```coffeescript\r\n\r\n# (a(); break) for a in obj\r\n# for a in obj then (a(); break)\r\nfor (i = 0, len = obj.length; i < len; i++) {\r\n  a = obj[i];\r\n  a();\r\n  break;\r\n}\r\n\r\n# (a(); break) while a\r\n# while a then (a(); break)\r\nwhile (a) {\r\n  a();\r\n  break;\r\n}\r\n```\r\n\r\nWhen `Parens` block includes a `StatementLiteral` (e.g. `(b; break) for a in arr`), it won't compile since `Parens` (`(b; break)`) is compiled as `Value` and pure statement (`break`) can't be used in an expression.  \r\n\r\nThis PR checks `Parenthetical` rule in the grammar and returns `Block` instead of `Parens`  if `StatementLiteral` is detected. The `Block` node is passed further to the `Expression`.\r\n",
    "head_branch": "issue3441",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #3441: parentheses wrapping expression throw invalid error  (#4849)\n\n* fix #3441\r\n\r\n* improvements\r\n\r\n* refactor"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc633a21fa1e1f1a9e5d",
    "number": 4848,
    "body": "Fixes #4843.\r\n\r\n```coffeescript \r\nworks = \"maybe\"\r\ndrinks = \"beer\"\r\nclass A\r\n  constructor: ({@works = 'no', @drinks = 'wine'}) ->\r\n\r\na = new A {works: 'yes', drinks: 'coffee'}\r\n```\r\nOuput\r\n\r\n```javascript\r\nvar A, a, drinks, works;\r\n\r\nworks = maybe;\r\ndrinks = beer;\r\n\r\nA = class A {\r\n  constructor({works: works1 = 'no', drinks: drinks1 = 'wine'}) {\r\n    this.works = works1;\r\n    this.drinks = drinks1;\r\n  }\r\n\r\n};\r\n\r\na = new A({\r\n  works: 'yes',\r\n  drinks: 'coffee'\r\n});\r\n```",
    "head_branch": "issue4843",
    "is_a_fork": true,
    "comments": [
      "While working on this PR I noticed that object destructuring variables in parameters are always replaced, even if the variable isn't reserved in the scope.\r\n\r\n```coffeescript\r\nclass A\r\n  constructor: ({@works}) ->\r\n\r\n###\r\nOutput\r\nvar A;\r\n\r\nA = class A {\r\n  constructor({\r\n      works: works\r\n    }) {\r\n    this.works = works;\r\n  }\r\n};\r\n###\r\n```\r\n\r\nI don't think this is required, so I've changed the logic and now variables are replaced only if needed.\r\n\r\n```coffeescript\r\nclass A\r\n  constructor: ({@works}) ->\r\n\r\n###\r\nA = class A {\r\n  constructor({works}) {\r\n    this.works = works;\r\n  }\r\n};\r\n###\r\n\r\nfoo = 1\r\nclass B\r\n  constructor: ({@foo}) ->\r\n\r\n###\r\nfoo = 1;\r\nB = class B {\r\n  constructor({foo:foo1}) {\r\n    this.foo = foo1;\r\n  }\r\n};\r\n###\r\n\r\n```",
      "gj, thx @zdenko :+1: \r\n"
    ],
    "commit_messages": [
      "Fix #4843: bad output when assigning to @prop in destructuring assignment with defaults (#4848)\n\n* fix #4843\r\n\r\n* improvements\r\n\r\n* typo\r\n\r\n* small fix"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc643a21fa1e1f1a9e5e",
    "number": 4845,
    "body": "Now that CoffeeScript supports splats, rest and spread on either side of the variable name I think it makes sense to adopt ES6's position in the docs:\r\n\r\n`after...` and `...before`\r\n\r\nIt will be easier to adopt for those already familiar with the syntax in JS.\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "This was discussed in https://github.com/coffeescript6/discuss/issues/85. We decided not to switch the docs because the style of CoffeeScript is to emulate English language syntax: that’s why it’s `is` and not `===`, for example. The style of `items...` resembles English syntax, whereas `...items` does not.\r\n\r\nJust as we technically allow both `==` and `is`, we allow the dots on either side. But the docs are an expression of recommended style, and we’re trying to encourage an English-like style because we feel that it’s more readable; and more-readable code is one of CoffeeScript’s goals.",
      "Hmm, I can see your explanation but I'm not convinced by your reasoning there - There isn't an equivelent to splat, rest and spread in English.\r\n\r\nI think aligning with ES6 in the docs makes more sense than keeping a different implementation _mainly_ for legacy reasons.  @jashkenas here seems to suggest the same:\r\n\r\n> CoffeeScript 2.0 is a fine time to make the change to ...spread, if you're going to more closely align with ES6.\r\n\r\nFor those transitioning from JS to CoffeeScript changing the order of existing language features like this will be meaninglessly difficult.",
      "People who prefer the JavaScript syntax are welcome to use it. Most people who use CoffeeScript nowadays are using it for the more readable syntax. That’s kind of the point.\r\n\r\nThe quote you chose is rather cherry-picked. Jeremy was referring to not allowing both syntaxes, not how we should present this feature in the docs. Obviously, by the end of the discussion we came to a different conclusion.\r\n\r\nOne place where I find myself using the ES-style dots is spreads of function calls:\r\n```coffee\r\nexport default\r\n  computed: {\r\n    ...mapState 'user', ['user']\r\n    ...mapGetters 'user', ['profile']\r\n  }\r\n```\r\n\r\nThis is a case where I have to choose between implicit parentheses and trailing dots. The same could be expressed via `mapState('user', ['user'])...` but then I couldn’t leave out the parentheses.\r\n\r\nIf you want to add an example like this to the docs, hopefully something a bit shorter and more interesting, that would be welcome. It would show not only that the leading-dot syntax is an option, but when there are benefits to using it.",
      "> People who prefer the JavaScript syntax are welcome to use it.  Most people who use CoffeeScript nowadays are using it for the more readable syntax. That’s kind of the point.\r\n\r\nWhich side of the variable `...` sits on does not aid readability, all it does is add one more syntax to learn.  I don't see a good reason here to swim upstream against es6 syntax.\r\n\r\nAnother way to think about this is that you could drastically simplify the Splats documentation by switching it up.\r\n\r\n**Splats, or Rest Parameters/Spread Syntax**\r\n_They behave exactly the same as ES2015._\r\n\r\n--\r\n\r\n> The quote you chose is rather cherry-picked. \r\n\r\nIs it? I read it as Jeremy expressing that he'd adopt es6 syntax if he could, unfortunately you can't _and_ keep things backwards compatible so you supported both.\r\n\r\n--\r\n\r\nFWIW I think you're doing a great job juggling many concerns of the upgrade, allowing for both syntaxes here was a good move.  This one just seems like an unneccessary divergence from JavaScript syntax for no gain.\r\n\r\nI'm thinking about JS dev's new to CoffeeScript - differences like this won't be positives, they'll be negatives.",
      "We could simplify the docs about function calls by neglecting to mention that parentheses are optional. We don’t, because we feel that even though you _can_ write CoffeeScript that’s closer in syntax to JavaScript, that doesn’t mean we want the docs to encourage such a style. The same goes for the dots. I personally feel that `items...` is more readable than `...items`, because “items…” has a meaning in English that relates to `items...` in CoffeeScript; and `...items` doesn’t. Clearly you’re more used to `...items`, so you feel like it’s more readable because of familiarity with ES2015 rather than familiarity with English. We chose `items...` for the docs because everywhere else in the docs we prefer English familiarity to JavaScript familiarity. It’s a straightforward rule to follow, and provides a clear way to settle debates like this.\r\n\r\nThat said, the docs would be improved by including an example of leading dots that makes sense, that doesn’t detract from the English-first preference of the docs’ overall style. If you’d like to submit such an example, please feel free to do so.",
      "I won't beat a dead horse any longer - you're the author.\r\n\r\nIn 4 years writing CS I did always err on the side of JavaScript syntax when they were equal length:\r\n- `==` over `is`\r\n- `&&` over `and`\r\n- I only omit parens from the first method call in a line, it's clearer than searching for commas\r\n  - `console.log example('yep'), 2`\r\n  - `console.log example 'yep', 2`\r\n- I'd use `${}` with backticks for interpolation if I could\r\n\r\n> CoffeeScript is Just JavaScript\r\n  \r\n  "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc653a21fa1e1f1a9e5f",
    "number": 4839,
    "body": "Running `coffee` or `cake` in Node 4 or below results in an unhelpful stack trace (per [here](https://stackoverflow.com/q/46797272/223225)):\r\n\r\n```bash\r\nuser@computer:~/some/path $ coffee -c code.coffee \r\n/usr/local/lib/node_modules/coffeescript/lib/coffeescript/command.js:23\r\n  ({spawn, exec} = require('child_process'));\r\n   ^\r\n\r\nReferenceError: Invalid left-hand side in assignment\r\n    at exports.runInThisContext (vm.js:53:16)\r\n    at Module._compile (module.js:374:25)\r\n    at Object.Module._extensions..js (module.js:417:10)\r\n    at Module.load (module.js:344:32)\r\n    at Function.Module._load (module.js:301:12)\r\n    at Module.require (module.js:354:17)\r\n    at require (internal/module.js:12:17)\r\n    at Object.<anonymous> (/usr/local/lib/node_modules/coffeescript/bin/coffee:15:5)\r\n    at Module._compile (module.js:410:26)\r\n    at Object.Module._extensions..js (module.js:417:10)\r\n```\r\n\r\nWe can do better than this. This minor addition first checks that the runtime supports destructuring, and throws an informative error if your runtime doesn’t:\r\n\r\n```bash\r\nuser@computer:~/some/path $ coffee -c code.coffee\r\nYour JavaScript runtime does not support some features used by the coffee command.\r\nPlease use Node 6 or later.\r\n```\r\n\r\nDestructuring is really just a proxy for all the advanced ES2015 features that the CoffeeScript module uses, but it should be enough. We already use CI to test that CoffeeScript works in Node 6, and destructuring isn’t supported in Node 4 and below, so this should catch all the unsupported runtimes.",
    "head_branch": "warn-unsupported-runtime",
    "is_a_fork": true,
    "comments": [
      "Can someone who’s more an expert in the `coffee` command and launch stuff please review this? It’s very small. @lydell?",
      "Looks like a working solution to me. But I can't really know how safe it is.\r\n\r\nAny particular reason you didn't use `eval` directly?",
      "> Any particular reason you didn’t use `eval` directly?\r\n\r\nWell, mainly because it’s been drilled into me that `eval` is evil, so therefore anything else must be better. More practically, [`new Function` creates its own scope](https://stackoverflow.com/questions/4599857/are-eval-and-new-function-the-same-thing) whereas `eval` uses the scope it’s in, so this PR doesn’t end up creating a new `a` variable. I guess that’s as good a reason as any to prefer `new Function`, unless there’s some reason you think I should use `eval`.",
      "Thanks for the explanation. Sounds good."
    ],
    "commit_messages": [
      "Throw warning for unsupported runtimes, e.g. Node < 6 (#4839)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc663a21fa1e1f1a9e60",
    "number": 4838,
    "body": "Fixes #3921 and #2342.\r\nCompile fails when inline function is used in condition (control flow): `if`, `unless`, `while`, `until`, `switch`.\r\n\r\nExample cases:\r\n\r\n```coffeescript\r\n# [1]\r\nif f (a) -> a is 1\r\n  'ok'\r\n\r\n# [2]\r\nres = if f (a) -> a is 1 then 'ok' else 'ko'\r\n\r\n# [3]\r\nwhile do (s = i) -> a -= s\r\n  foo(a)\r\n\r\n# [4]\r\ni = 1\r\na = switch do (m = 2) -> i * m\r\n  when 2 then \"two\"\r\n  when 1 then \"one\"\r\n  else \"none\"\r\n```\r\n[[1]](http://coffeescript.org/#try:if%20f%20(a)%20-%3E%20a%20is%201%0A%20%20’ok’), [[2]](http://coffeescript.org/#try:res%20%3D%20if%20f%20(a)%20-%3E%20a%20is%201%20then%20’ok’%20else%20’ko’), [[3]](http://coffeescript.org/#try:while%20do%20(s%20%3D%20i)%20-%3E%20a%20-%3D%20s%0A%20%20foo(a)), [[4]](http://coffeescript.org/#try:%20i%20%3D%201%0A%20a%20%3D%20switch%20do%20(m%20%3D%202)%20-%3E%20i%20*%20m%0A%20%20%20when%202%20then%20%22two%22%0A%20%20%20when%201%20then%20%22one%22%0A%20%20%20else%20%22none%22)\r\n\r\nThe main cause of the issue is incorrect positions of `INDENT` and `OUTDENT` tag pair inserted in `Rewriter::normalizeLines`. \r\nExample:\r\n```coffeescript\r\nif f -> a\r\n  'ok'\r\n\r\n###\r\nIF/if IDENTIFIER/f ->/-> INDENT/2 IDENTIFIER/a INDENT/2 STRING/'ok' OUTDENT/2 OUTDENT/2\r\n                         ^                                                    ^\r\n                         *                                                    *\r\n###\r\n```\r\nThe second `OUTDENT` should be placed between `a` and `INDENT`.\r\nBesides that, `@tagPostfixConditionals` also converts `IF` into `POST_IF` tag in such cases.\r\n\r\nAt first, I’ve tried to adjust the conditions in `@normalizeLines` to correct the `INDENT`/`OUTDENT` position. I managed to get it work for cases where newline follows inline function, but I couldn’t solve cases with inline condition (`if -> a then`) which are too ambiguous.\r\nSo, at the end, I decided to add new method `@addParensToConditions` which wraps the function in parentheses.\r\n\r\nThe better solution would be controlling the output in `grammar` and `nodes`, but currently I don’t see it as an option, since `Expression` used in `grammar` is too broad, which means that rules for `If`, `While` and `Switch` nodes would have to be split into more detailed rules, e.g. for `Value`, `Code`, `Assign`, … ",
    "head_branch": "issue3921",
    "is_a_fork": true,
    "comments": [
      "Why wouldn’t extending the grammar be an option? When I look at `Expression`, I see only this:\r\n\r\n```coffee\r\n  Expression: [\r\n    o 'Value'\r\n    o 'Code'\r\n    o 'Operation'\r\n    o 'Assign'\r\n    o 'If'\r\n    o 'Try'\r\n    o 'While'\r\n    o 'For'\r\n    o 'Switch'\r\n    o 'Class'\r\n    o 'Throw'\r\n    o 'Yield'\r\n  ]\r\n```\r\n\r\nSeveral of these don’t make much sense to allow inside an `if` conditional (`throw`, `yield`, maybe `if`, `class`). But even if we allowed all of them, couldn’t the grammar distinguish between items that require being wrapped in parentheses versus items that don’t? So something like:\r\n\r\n```coffee\r\nIfBlock: [\r\n  o 'IF SimpleConditional Block',                    -> new If $2, $3, type: $1\r\n  o 'IfBlock ELSE IF SimpleConditional Block',       -> $1.addElse LOC(3,5) new If $4, $5, type: $3\r\n  o 'IF ( ComplexConditional ) Block',               -> new If $3, $4, type: $1\r\n  o 'IfBlock ELSE IF ( ComplexConditional ) Block',  -> $1.addElse LOC(3,7) new If $5, $7, type: $3\r\n]\r\n```\r\n\r\nAnd then we’d copy `Expression` into two new blocks, `SimpleConditional` and `ComplexConditional`, based on whether the conditional needs to be wrapped in parentheses or not. `Code`, for example, would need to be wrapped in parentheses. I don’t think it’s a requirement that ambiguous things like inline functions need to be allowed in conditionals without being wrapped in parentheses.",
      "Also I wonder if we could fix any of the other `if`-related bugs at the same time: #3933, #3921, #3441, #2342.",
      "Fixing this in the grammar would be much better yeah.\r\n\r\nWRT other if bugs, see https://github.com/satyr/coco/issues/127 as it has quite a bit of discussion",
      "OK, I bite the bullet, discarded the `@addParensToConditions` method from the `Rewriter` and implement new rules in the grammar instead.\r\nThere are quite a few changes, so I'll try to explain the problem and solution.\r\n\r\nAs said before, the problem with the inline functions being used in conditional and control flow (`If`, `While`, `For`, `Switch`, ...), was an improper implicit placement of the `INDENT` and `OUTDENT` tags in the `Rewriter::normalizeLines`.\r\n\r\nFor example: `f -> a` would be rewritten to \r\n\r\n```coffeescript\r\nf ->\r\n  a\r\n### Tokens\r\nIDENTIFIER -> INDENT IDENTIFIER OUTDENT \r\n###\r\n```\r\n\r\nAnd the final output from the rewriter is\r\n\r\n```coffeescript\r\nf (-> \r\n   a\r\n)\r\n### Tokens\r\nIDENTIFIER CALL_START -> INDENT IDENTIFIER OUTDENT CALL_END\r\n###\r\n```\r\n\r\nGrammar breaks this expression into\r\n\r\n```\r\nValue\r\n Invocation \r\n   Value \r\n     Identifier \"f\"\r\n   Arguments\r\n     ArgList\r\n       Code\r\n         FuncGlyph \"->\"\r\n         Block \"INDENT a OUTDENT\"\r\n```\r\n\r\nAnd, in this example `if f -> a then b`, the code will be broken into\r\n\r\n```coffeescript\r\nif f ( ->\r\n      a\r\n      b\r\n   )\r\n```\r\n\r\n```\r\nIf\r\n  Value\r\n   Invocation \r\n     Value \r\n       Identifier \"f\"\r\n     Arguments\r\n       ArgList\r\n         Code\r\n           FuncGlyph \"->\"\r\n           Block \"INDENT a INDENT b OUTDENT OUTDENT\"\r\n```\r\n\r\nEssentially, the problem is misinterpreted inline function  (`-> a`) when used as an argument to function call.\r\n\r\nThe initial idea for solving this, was adjusting `@normalizeLine` and place `INDENT` and `OUTDENT` in proper places, or adding the new method which will wrap `f -> a` in braces.\r\n\r\nThe former would mean adding more condition rules when scanning tokens, the latter added just another unnecessary loop over the tokens.\r\n\r\nBy looking closer at grammar it's clear that the main reason `@normalizeLine` inserts `INDENT` after the `->`, is because the grammar rule for the `Code` expects `Block` which is basically indented `Body`.   \r\nSo, to solve this we need a grammar rule which will also accept `-> Expression`.\r\nThis will enable writing inline functions without braces.\r\n\r\n```coffeescript\r\nif do -> a then b\r\n\r\nif do -> 'wrong' then do -> 'right'\r\n\r\nc if a = f -> b\r\n\r\nfor a in do -> b\r\n  a\r\n  \r\nwhile do (a = 1) -> f a\r\n  c   \r\n \r\nwhile b = f -> a when a isnt 3\r\n  foo b\r\n \r\nc = switch b = f -> a\r\n  when 2 then \"two\"\r\n  when 1 then \"one\"\r\n  else \"none\"\r\n\r\nc = switch\r\n  when do -> a \r\n      'ok'\r\n  when do -> b\r\n      'ko'\r\n  \r\n```\r\n\r\nBesides control flow, the same issue also appears when used in `ranges`, `slices` and `array` definition\r\n\r\n```coffeescript\r\na = [do -> b...5]\r\na = arr[do -> b...5]\r\narr = [1, 2, 3, do -> a, 5, 6]\r\n```\r\n\r\nNote that examples above works in current master when inline function is the last element:\r\n\r\n```coffeescript\r\na = [1...do -> b]\r\na = arr[1...do -> b]\r\narr = [1, 2, 3, do -> a]\r\n```\r\n\r\nBesides new grammar rules, I also changed existing `@normalizeLines` in order to avoid inserting `INDENT` / `OUTDENT`  when the inline function is detected with control flow tags or inside the array, range, and slice.\r\n\r\nThis PR is still WIP as there are still some cases (especially `Operation`) which need refinements and testing.\r\n",
      "@GeoffreyBooth \r\n #3933 and #3441 are not part of this PR.  I'll have a PR for the #3441 ready soon.\r\nHowever, #2342 might be fixed once I finished all changes in grammar.",
      "Would I be right saying this could potentially fix `a -> b, c` to mean `a (-> b), c` then? As per the previously linked ticket.",
      "@vendethiel which ticket exactly? In your example `a -> b, c` is changed in `Rewriter::addImplicitBracesAndParens`, which I also intend to refactor later.\r\n\r\nI just did a quick test locally (not committed yet) and `a -> b, c` compiles to \r\n\r\n```javascript\r\na(function() {\r\n  return b;\r\n}, c);\r\n```\r\n\r\nand this case `f a -> b, c` to\r\n\r\n```javascript\r\nf(a(function() {\r\n  return b;\r\n}, c));\r\n```\r\n\r\nIs this expected?",
      "This ticket: satyr/coco#127\r\n\r\nI'd say the compilation is correct. It's \"unexpected\", because we currently parse it as `a (-> b, c)` which is an error.\r\n\r\nThe question I have then is: did this change the meaning of these cases:\r\n\r\n```coffee\r\nif true then if false\r\n   true\r\n```\r\n\r\nDoes this code now compile?\r\n```coffee\r\nswitch\r\nwhen a then if b then c else d\r\n```",
      "I know, it's a bit broader than what the ticket attempts to do, but it's one big can of worms..\r\n\r\nhttps://github.com/jashkenas/coffeescript/issues/2342",
      "Yeah, I was looking at those also and I think this PR could also cover such cases.",
      "The last commit includes the fix for #2342.\r\n\r\n```coffeescript\r\n # if a then if b then c else d\r\n\r\nif (a) {\r\n  if (b) {\r\n    c;\r\n  } else {\r\n    d;\r\n  }\r\n}\r\n```\r\n\r\n```coffeescript\r\n# switch e\r\n#   when f then if g then h else i\r\n\r\nswitch (e) {\r\n  case f:\r\n    if (g) {\r\n      h;\r\n    } else {\r\n      i;\r\n    }\r\n}\r\n```\r\n\r\nI've tried to fix this in `grammar` and `nodes` by having a separate set of rules for inline if: `if a then b else c`. The main idea was (is) to keep `then`, i.e. not replacing it with ` INDENT/OUTDENT`.  \r\nIt worked to some extent, but at the end, I was walking in circles of ambiguous cases.\r\nFrom my understanding, the `grammar` solution would require having rules for `IF Block` and `IF Line`, which ultimately means a major reworking of the `Expression`.\r\nSo, at least for now, I solved this by adjusting `Rewriter::normalizeLines` where `INDENT/OUTDENT` are inserted.",
      "The more I learn about this codebase, the more I feel like `rewriter.coffee` really never should’ve existed in the first place; that it’s just a long series of hacks to get around not achieving what we want in the grammar. Alas, it’s more than a little late now. I think that’s what CoffeeScriptRedux was aiming to fix.\r\n\r\nRe `if a then if b then c else d`, why is this not ambiguous? Like, how would I know that the `else` goes with `if b` and not `if a`? I surmise that you’re introducing a rule that `else` always binds with the closest prior `then`, but will this potentially break old code that expected otherwise?",
      "binding to closest `if` is how other languages handle _dangling else_.\r\ni'd go as far as calling it the expected and most logical behavior.\r\n\r\nin cases where you want `if a then (if b then c) else d` you can use parens or use multiple lines and indent appropriately. imo that's sufficient.\r\n\r\nanother possibility could be using a semicolon: `if a then if b then c; else d`\r\ni don't think that's a good idea tho as it's easy to miss and harder to grasp the meaning.",
      "I think the behavior proposed here (binding to closest `then`) is the best option; second-best would be throwing an error that it’s ambiguous. I’m just asking adopting this rule now is a breaking change.",
      "Binding `else` to closest `then` is the way to go IMHO.   \r\nNote that this PR fixes cases like `if a then if b then d else c`, but we should also take care of this case `if a then if b then c else d else e`.  \r\nI would expect this output\r\n\r\n```\r\nif (a) {\r\n  if (b) {\r\n    return c\r\n  } else {\r\n    return d\r\n  }\r\n} else {\r\n  return e\r\n}\r\n```\r\n\r\n> The more I learn about this codebase, the more I feel like rewriter.coffee really never should’ve existed in the first place\r\n\r\nCount me in. I'm working on improved `grammar` (not part of this PR), and I think it will be possible to get rid of most of the current logic in the `rewriter`.\r\n\r\n  ",
      "i assume you flipped `c` and `d` by accident.\r\nbesides that i agree with the output.",
      "Okay, but is this a breaking change?",
      "@Inve1951 yes, `c` and `d` were flipped. I corrected the comment.\r\n@GeoffreyBooth I would say this is a breaking change. \r\nAny existing code with `if false then if false then 1 else 2` that expects the result to be `2` will now get `undefined`.",
      "> The more I learn about this codebase, the more I feel like rewriter.coffee really never should’ve existed in the first place; that it’s just a long series of hacks to get around not achieving what we want in the grammar. Alas, it’s more than a little late now. I think that’s what CoffeeScriptRedux was aiming to fix.\r\n\r\nYes, pretty much everyone agrees on this. Do note, tho, that CSR has some minor rewriting (notably regexes).\r\n\r\n> Re if a then if b then c else d, why is this not ambiguous? Like, how would I know that the else goes with if b and not if a? I surmise that you’re introducing a rule that else always binds with the closest prior then, but will this potentially break old code that expected otherwise?\r\n\r\nIt's not ambiguous, but i'm afraid this PR changing its meaning (tho for the best) is a huge breaking change.",
      "I’m okay with a breaking change that fixes a bug, like when we changed chaining in 1.12.7 to go from the start of a line rather than the last function in the line. But when we make such a change, we need to be sure that the prior behavior _is_ a bug, and clearly seems to be such. I think this qualifies; what do you all think?\r\n\r\nI would disagree that this is a “huge” breaking change; to me, relying on multiple `then`s in the same line smacks of ambiguity, so I would hope it wouldn’t be common (or that people would add parentheses to make their intentions clear). It’s only one data point, but we didn’t need to change anything across the CoffeeScript codebase as a result of this change, did we?",
      "Survey of the crowd (including @jashkenas, @lydell, @connec, others not already on this thread):\r\n\r\nA bunch of bugfix PRs have been merged in recently, some of them substantial changes, so I’m thinking the next release should be 2.2.0. That should give people enough of a hint that it’s not just a small patch. In addition, this PR is technically a breaking change: `else` previously bound to the earliest `then` but now binds to the latest `then`, which makes much more sense. So code like these are changing:\r\n\r\n```coffee\r\nif no then if yes then alert 1 else alert 2\r\n```\r\n\r\n<table><thead><tr><th>Old</th><th>New</th></tr></thead>\r\n<tbody>\r\n<tr><td valign=\"top\">\r\n\r\n```js\r\nif (false) {\r\n  if (true) {\r\n    alert(1);\r\n  }\r\n} else {\r\n  alert(2);\r\n}\r\n```\r\n\r\n</td><td valign=\"top\">\r\n\r\n```js\r\nif (false) {\r\n  if (true) {\r\n    alert(1);\r\n  } else {\r\n    alert(2);\r\n  }\r\n}\r\n```\r\n\r\n</td></tr>\r\n<tr><td>Alerted 2</td><td>Nothing alerted</td></tr>\r\n</tbody></table>\r\n\r\n```coffee\r\nswitch 1\r\n  when 1 then if yes then alert 1 else alert 2\r\n```\r\n\r\n<table><thead><tr><th>Old</th><th>New</th></tr></thead>\r\n<tbody>\r\n<tr><td valign=\"top\">\r\n\r\n```js\r\nswitch (1) {\r\n  case 1:\r\n    if (false) {\r\n      alert(1);\r\n    }\r\n    break;\r\n  default:\r\n    alert(2);\r\n}\r\n```\r\n\r\n</td><td valign=\"top\">\r\n\r\n```js\r\nswitch (1) {\r\n  case 1:\r\n    if (false) {\r\n      alert(1);\r\n    } else {\r\n      alert(2);\r\n    }\r\n}\r\n```\r\n\r\n</td></tr>\r\n<tr><td>Nothing alerted</td><td>Alerts 2</td></tr>\r\n</tbody></table>\r\n\r\nAs you can see in the [output](http://coffeescript.org/#try:if%20no%20then%20if%20yes%20then%20alert%201%20else%20alert%202%0A%0Aswitch%201%0A%20%20when%201%20then%20if%20no%20then%20alert%201%20else%20alert%202), in the first example the `else` binds to the first `if` instead of the second. The latter makes more sense. I don’t think the docs discuss what to expect in a case like this; if anything, I would’ve expected the compiler to throw an error complaining about ambiguity.\r\n\r\nIn the second example, the `else` previously bound to the `when` (creating a `default:` block) whereas now it binds to the `if`. Again, I think the new behavior is more what users would expect.\r\n\r\nSo the question is, what do we think of this change?\r\n1. It’s tiny. Slip it into 2.2.0.\r\n1. It’s big enough to be worth splitting into its own release; make 2.2.1 just this PR.\r\n1. It’s big enough to be worth splitting into its own release, and it’s not a patch; make 2.3.0 just this PR.\r\n1. It’s drastic! Wait for 3.0.0!\r\n\r\nI’m inclined for option 2, releasing 2.2.1 as just this PR. This change feels to me a lot like when we [fixed chaining](https://github.com/jashkenas/coffeescript/issues/4760) between 1.12.6 and 1.12.7; technically it was a breaking change, but it corrected a bug. Though at least in that case the intended behavior was in the docs; this is changing undocumented behavior. On the other hand, 2.x is a lot less settled than 1.12.6 was, so changing undocumented behavior at this point should bother a lot fewer people.",
      "The last commit adds support for nested `else` in a single line.\r\n\r\n```javascript\r\n// if a then if b then c else d  else e\r\n\r\nif (a) {\r\n  if (b) {\r\n    c;\r\n  } else {\r\n    d;\r\n  }\r\n} else {\r\n  e;\r\n}\r\n\r\n// if a then if b then if c then d else e else f\r\n\r\nif (a) {\r\n  if (b) {\r\n    if (c) {\r\n      d;\r\n    } else {\r\n      e;\r\n    }\r\n  } else {\r\n    f;\r\n  }\r\n}\r\n\r\n// if a then if b then if c then d else if e then f else if g then h else i else j else k\r\n\r\nif (a) {\r\n  if (b) {\r\n    if (c) {\r\n      d;\r\n    } else if (e) {\r\n      f;\r\n    } else if (g) {\r\n      h;\r\n    } else {\r\n      i;\r\n    }\r\n  } else {\r\n    j;\r\n  }\r\n} else {\r\n  k;\r\n}\r\n```",
      "I’m thinking of just merging this in and releasing a big 2.2.0. Any objections? The minor (as opposed to batch) version bump should tell people that there might be meaningful changes in the release, as there very well could be for some people.\r\n\r\n@zdenko This looks good to me. Anything else you have planned for this PR, or is it ready? And any other PRs you’re working on that should be slipped into 2.2.0?",
      "@GeoffreyBooth I think it's ready and can be merged. I'm still working on improved `grammar` which should take care of `then` and `else` (and some other) tags without `Rewriter`, but it's not yet ready for PR.\r\nI have also other PRs with enhancements and new features proposals on the way, but those should go in the next release.",
      "Great, thanks for all your hard work!"
    ],
    "commit_messages": [
      "Fix #3921 & #2342: inline function without parentheses used in condition, inline 'else' (#4838)\n\n* fix #3921: inline function without parentheses used in condition\r\n\r\n* add grammar rules\r\n\r\n* fix issue #2343\r\n\r\n* typos\r\n\r\n* multiple 'else' in line\r\n\r\n* close 'else if'"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc673a21fa1e1f1a9e61",
    "number": 4837,
    "body": "Fixes #4836. `@get @someProp` shouldn’t throw an error. This is a weird edge case, where the `@` before `someProp` was screwing up the detection of the `@` before `get`, which signifies that the `get` is attached to something and therefore safe, and not someone trying to use the `get` shorthand syntax. We don’t need to also check for the `THIS` token, because the token before `get` is either `@` or `.`, never `THIS`.",
    "head_branch": "fix-@get",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #4836: functions named get or set can be used without parentheses when attached to @ (#4837)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc683a21fa1e1f1a9e62",
    "number": 4835,
    "body": "*   Bugfix to set the correct context for executable class bodies. So in `class @B extends @A then @property = 1`, the `@` in `@property` now refers to the class, not the global object. #4828.\r\n*   Bugfix where anonymous classes were getting created using the same automatic variable name. They now each receive unique names, so as not to override each other. #4826.\r\n\r\nBoth thanks to @connec.",
    "head_branch": "2.1.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "2.1.1 (#4835)\n\n* Bump version to 2.1.1\r\n\r\n* 2.1.1 changelog\r\n\r\n* 2.1.1 updated output"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc693a21fa1e1f1a9e63",
    "number": 4828,
    "body": "Fixes #4827.\r\n\r\nI did first try to use an arrow function by setting `bound = true` on the wrapper, but this messed with the handling of `@` *within* the class body, where it should refer to the class being defined.\r\n\r\nWe could opt to perform the binding only if the class `extends` an `@`-value but that would add a bit of extra complexity in the compiler for equivalent and, imo, no less readable output.",
    "head_branch": "#4827",
    "is_a_fork": true,
    "comments": [
      "LGTM.",
      "Any other notes? I would quite like to get this and #4826 into a (patch) release."
    ],
    "commit_messages": [
      "Set the context of executable class body wrappers (#4828)\n\nFixes #4827."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc6a3a21fa1e1f1a9e64",
    "number": 4826,
    "body": "Fixes #4822.",
    "head_branch": "#4822",
    "is_a_fork": true,
    "comments": [
      "@connec Can you resolve the conflicts with this, then I’ll merge it in and release a version tonight."
    ],
    "commit_messages": [
      "Use free variables for anonymous classes (#4826)\n\nFixes #4822."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc6b3a21fa1e1f1a9e65",
    "number": 4825,
    "body": "This PR simplifies compiled output for destructuring assignments (#4517).\r\n\r\n```javascript\r\n // [a, b, c..., d, e] = arr\r\nvar a, b, c, d, e, splice = [].splice;\r\n[a, b, ...c] = arr, [d, e] = splice.call(c, -2);\r\n\r\n // [a, b, ..., d, e] = arr\r\nvar a, b, d, e, slice = [].slice;\r\n[a, b] = arr, [d, e] = slice.call(arr, -2);\r\n\r\n// [a, , ,b, c..., d, ,e, {x, r...}, f, , ,] = arr\r\nvar a, b, c, d   ...\r\n[a, , , b, ...c] = arr, ref = splice.call(c, -7), \r\nd = ref[0], e = ref[2], (({x} = ref1 = ref[3]), \r\nr = objectWithoutKeys(ref1, ['x'])), f = ref[4];\r\n\r\n// [a, , ,{x, r...}, b, ..., c, d, ,e ,f, , ,] = arr\r\nvar a, b, c, d   ...\r\na = arr[0], (({x} = ref = arr[3]), r = objectWithoutKeys(ref, ['x'])), \r\nb = arr[4], [c, d, , e, f, , , ] = slice.call(arr, -7);\r\n```\r\n\r\nSame examples as above compiled on `master`:\r\n```javascript\r\n // [a, b, c..., d, e] = arr\r\nvar a, b, c, d, e, i, slice = [].slice;\r\na = arr[0], b = arr[1], \r\nc = 5 <= arr.length ? slice.call(arr, 2, i = arr.length - 2) : (i = 2, []), \r\nd = arr[i++], e = arr[i++];\r\n\r\n // [a, b, ..., d, e] = arr\r\nvar a, b, d, e, i;\r\na = arr[0], b = arr[1], i = arr.length - 2, d = arr[i++], e = arr[i++];\r\n\r\n// [a, , ,b, c..., d, ,e, {x, r...}, f, , ,] = arr\r\nvar a, b, c, d   ...\r\na = arr[0], b = arr[3], \r\nc = 12 <= arr.length ? slice.call(arr, 4, i = arr.length - 7) : (i = 4, []), \r\nd = arr[i++], i++, e = arr[i++], \r\n(({x} = ref = arr[i++]), r = objectWithoutKeys(ref, ['x'])), \r\nf = arr[i++], i++, i++;\r\n\r\n// [a, , ,{x, r...}, b, ..., c, d, ,e ,f, , ,] = arr\r\nvar a, b, c, d   ...\r\na = arr[0], (({x} = ref = arr[3]), \r\nr = objectWithoutKeys(ref, ['x'])), b = arr[4], \r\ni = arr.length - 7, c = arr[i++], d = arr[i++], \r\ni++, e = arr[i++], f = arr[i++], i++, i++;\r\n```",
    "head_branch": "destructuring_optimization",
    "is_a_fork": true,
    "comments": [
      "Thanks. Anyone else have any notes? @connec or @vendethiel ?",
      "@vendethiel or @connec, is this okay to merge in?",
      "@zdenko The new output is quite an improvement in readability over current `master`, and greatly simplifies the hairiest part of the codebase. Thanks for taking this on!\r\n\r\nSince this is a rather significant rewrite, it would be good to run this on some codebases to ensure that there aren’t any cases that aren’t caught by our tests. @connec, does your YAML library or any other library make use of splats or expansions, that could be tested with this branch?"
    ],
    "commit_messages": [
      "[Change]: Destructuring with non-final spread should still use rest syntax (#4517) (#4825)\n\n* destructuring optimization\r\n\r\n* refactor\r\n\r\n* minor improvement, fix errors\r\n\r\n* minor refactoring\r\n\r\n* improvements\r\n\r\n* Update output\r\n\r\n* Update output"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc6c3a21fa1e1f1a9e66",
    "number": 4824,
    "body": "This PR improves compiled code in `Assign::compileDestructuring`.\r\n\r\nCurrent output:\r\n```javascript\r\n// CS: [a, , , {b, c...}, d] = arr\r\n\r\na = arr[0], 1, 2, (({b} = ref = arr[3]), c = objectWithoutKeys(ref, ['b'])), d = arr[4];\r\n            ^  ^\r\n```\r\n`1` and `2` are values of the `idx` and can be skipped in cases when there are no `Splat` or `Expansion` in the destructured array.\r\n\r\nImproved output:\r\n```javascript\r\n// CS: [a, , , {b, c...}, d] = arr\r\n\r\na = arr[0], (({b} = ref = arr[3]), c = objectWithoutKeys(ref, ['b'])), d = arr[4];\r\n```",
    "head_branch": "elision_output",
    "is_a_fork": true,
    "comments": [
      "This looks good to me. @vendethiel or anyone else have notes?\r\n\r\n@zdenko we should include this in 2.1.0. Are you working on anything else we should wait for?",
      "@GeoffreyBooth I'm working on PR for #4517, but I don't think it's something that needs to be included in 2.1.0.\r\nIt will take another day or two, and besides changes in compiled output, it won't bring any new feature.\r\nAlso, the changes in the `nodes.coffee`, could spawn longer discussion and thus prolong the release.\r\n"
    ],
    "commit_messages": [
      "improve elision output (#4824)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc6d3a21fa1e1f1a9e67",
    "number": 4823,
    "body": "This entire release is thanks to @zdenko!\r\n\r\n*   Computed property keys in object literals are now supported: `obj = { ['key' + i]: 42 }`, or `obj = [Symbol.iterator]: -> yield i++`.\r\n*   Skipping of array elements, a.k.a. elision, is now supported: `arr = [a, , b]`, or `[, protocol] = url.match /^(.*):\\/\\//`.\r\n*   [JSX fragments syntax](https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html) is now supported.\r\n*   Bugfix where `///` within a `#` line comment inside a `///` block regex was erroneously closing the regex, rather than being treated as part of the comment.\r\n*   Bugfix for incorrect output for object rest destructuring inside array destructuring.\r\n\r\nhttp://rawgit.com/GeoffreyBooth/coffeescript/2.1.0/docs/v2/#changelog\r\n\r\n@jashkenas @lydell @vendethiel @connec ",
    "head_branch": "2.1.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "2.1.0 (#4823)\n\n* Changelog for 2.1.0; remove text from objects section that is no longer valid for CS2/ES2015.\r\n\r\n* Update packages\r\n\r\n* 2.1.0 build\r\n\r\n* Update output\r\n\r\n* Correct reference to `//` division, per https://github.com/coffeescript6/discuss/issues/39#issuecomment-347144647"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc6d3a21fa1e1f1a9e68",
    "number": 4819,
    "body": "Hello!\n  \n  I'm TravisBuddy, and I'd like to help out by telling your contributors what's wrong when they create a PR that breaks the tests.\n  Here are few examples of what I do: \n  1. https://github.com/bluzi/static-server/pull/1\n  2. https://github.com/bluzi/name-db/pull/469\n  \n  Feel free to [visit my website](https://www.travisbuddy.com/) or [view my code on GitHub](https://github.com/bluzi/travis-buddy).\n  \n  If you want me to comment on PRs in this repository, all you have to do is to merge this PR, and if you don't - just close it. :) \n  \n  If you have any questions, feel free to comment on this PR, and I'll answer. \n\n  Thanks,\n  TravisBuddy :green_heart:",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc6e3a21fa1e1f1a9e69",
    "number": 4818,
    "body": "A small enhancement to provide a more descriptive error message when heregex comment ends with `///`.\r\n\r\n```coffeescript\r\n///[1-9] |\r\n   0(?!0) # zero must not be followed by zero///\r\n```\r\n\r\nBefore:\r\n```\r\n[stdin]:1:1: error: missing ///\r\n///[1-9] |\r\n^^^\r\n```\r\n\r\nAfter:\r\n```\r\n[stdin]:2:10: error: '///' inside a heregex comment does not close the heregex\r\n   0(?!0) # zero must not be followed by zero///\r\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n```",
    "head_branch": "improve_heregex_comment_error",
    "is_a_fork": true,
    "comments": [
      "I'm not sure this is necessary. I think it's already pretty obvious why it breaks.",
      "I agree with @GeoffreyBooth."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc6f3a21fa1e1f1a9e6a",
    "number": 4817,
    "body": "We should cache `node_modules`.",
    "head_branch": "appveyor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Cache node_modules for AppVeyor builds (#4817)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc703a21fa1e1f1a9e6b",
    "number": 4816,
    "body": "This adds AppVeyor Windows CI builds to the 1.x branch. This also gets the tests running under CI for Node 0.8 for both Windows and Linux. After this, our repo will be built and tested under Node 0.8, 0.10, 0.12, 4, 6, 8 and latest, for both Windows and Linux.\r\n\r\nPart of #4731 (a PR which fixed tests for Windows) was backported, and a polyfill was added for `os.tmpdir` to get four more tests to pass in Node 0.8.",
    "head_branch": "cs1-appveyor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS1] AppVeyor (#4816)\n\n* First attempt at AppVeyor for CS1\r\n\r\n* Update NPM for Node < 4\r\n\r\n* Backport #4731, fix for test failing in Windows\r\n\r\n* Don't install NPM for Node-latest; cache node_modules\r\n\r\n* Polyfill os.tmpdir for Node 0.8, update Travis to support Node 0.8\r\n\r\n* Try to make Travis Node 0.8 happen\r\n\r\n* Try different batch syntax\r\n\r\n* Output NPM version if we install a 2.x version; never return a nonzero exit code if we skip NPM upgrade\r\n\r\n* Try another syntax\r\n\r\n* Fix syntax for latest Node\r\n\r\n* Fix Windows batch syntax"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfc713a21fa1e1f1a9e6c",
    "number": 4814,
    "body": "Fixes #4811. Heregex comment will consume `///` in the same row.\r\n```coffeescript\r\n/// .* # comment ///\r\n\r\n# [stdin]:1:1: error: missing ///\r\n# /// .* # comment ///\r\n# ^^^\r\n```\r\n\r\n```coffeescript\r\n///\r\n  a | # comment with ///\r\n  b   # /// another comment\r\n///\r\n\r\n# // comment with ///\r\n# // /// 'heregex' in comment will be consumed\r\n# /a|b/;\r\n```",
    "head_branch": "issue_4811",
    "is_a_fork": true,
    "comments": [
      "Awesome work @zdenko! I’ll leave it up to to @GeoffreyBooth to merge.\r\n\r\nNote that there’s a small risk that people have code like this:\r\n\r\n```coffee\r\n///[1-9] |\r\n   0(?!0) # zero must not be followed by zero///\r\n```\r\n\r\n... which won’t compile. It _is_ a bugfix, but potentially breaking. Versioning is hard.",
      "> … which won’t compile. It _is_ a bugfix, but potentially breaking. Versioning is hard.\r\n\r\nAs I understand versioning, a breaking change isn’t anytime _anything_ changes, it’s any time the externally-facing API changes. In our case, it feels like the externally-facing API is vast, as it’s all the syntax of all the code anyone could write. But I would argue that it’s slightly smaller than that: it’s the syntax _defined in the documentation._ The docs clearly say that from `#` to the end of a line is a comment and ignored; the docs don’t say that `#` to the end of a line, except for `///` within a heregex, is ignored. So this is a conflict between the behavior of the compiler and the syntax as defined per the docs (which are really our spec, since we have no formal one). For such conflicts, the docs should prevail, unless the change would be so drastic as to affect lots of old code (as you’re arguing that fixing the requirement for a space before `#` in a heregex would be). We had a similar case when we fixed chaining after a function call between 1.12.6 and 1.12.7. People complained, but we pointed out how the prior behavior was incorrect per the docs, and the world moved on.\r\n\r\nThat was at least a tougher case as both variants compiled. This is much easier: something that currently compiles no longer will. Anyone with `#...///` in their code will suddenly get a compiler error. So there’s no risk here that this change does harm to any apps. It’ll just annoy anyone who has to fix their syntax.\r\n\r\nI think the next 2.x release should be 2.1.0, as we’re adding new features such as elision. So that’s another clue to people that the release might have more changes contained in it.",
      ">  It is a bugfix, but potentially breaking. Versioning is hard.\r\n\r\nI was thinking the same. It would be nice if the error message is more descriptive and thus less ambiguous and more helpful.\r\nSo, instead of this   \r\n```\r\n[stdin]:1:1: error: missing ///\r\n///[1-9] |\r\n^^^\r\n```\r\n... we could show something like this (if possible)\r\n```\r\n[stdin]:2:10: error: '///' inside a heregex comment does not close the heregex\r\n   0(?!0) # zero must not be followed by zero ///\r\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n\r\nI guess this belongs to a separate PR now.\r\n\r\n@lydell @GeoffreyBooth ",
      "Nice, then we’ve thought this through before releasing. 👍 \r\n\r\nI don’t think it’s worth doing anything about the error message at this point."
    ],
    "commit_messages": [
      "Fix #4811: Heregex comments cannot contain three slashes in a row (#4814)\n\n* fix comment with /// in heregex\r\n\r\n* cleanup\r\n\r\n* improved pattern for comments in heregex; fixed unescaped hashes in lexer.coffee\r\n\r\n* improvements\r\n\r\n* refactor RegExp\r\n\r\n* cleanup\r\n\r\n* Improved RegEx"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc723a21fa1e1f1a9e6d",
    "number": 4812,
    "body": "This adds support for CI builds in [AppVeyor](https://www.appveyor.com/), which runs on Windows servers. This will tell us if our tests fail in Windows. In implementing this I discovered that a few of our tests _were_ failing in Windows, which I fixed (they used to pass, in Windows, I’m sure of it . . . as odd as it sounds, I can only conclude that something in Node changed to cause them to break).\r\n\r\nWe already have Travis builds that cover Linux.",
    "head_branch": "appveyor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "AppVeyor (#4812)\n\n* First attempt at using AppVeyor\r\n\r\n* Maybe it doesn't like the leading dot?\r\n\r\n* Versions are an array\r\n\r\n* Fix tests on Windows: for some reason, Windows requires `coffee` to be executed as `node coffee` (in the context of `spawnSync`, at least)\r\n\r\n* Use npm@latest, see if that's less noisy\r\n\r\n* Nevermind, only an issue on Node 6\r\n\r\n* Better to see the NPM version before npm install"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc733a21fa1e1f1a9e6e",
    "number": 4809,
    "body": "fix for #4805",
    "head_branch": "1.12.8-branch",
    "is_a_fork": true,
    "comments": [
      "What about this solution:\r\n\r\n```\r\nnode --eval \"if (require(`./package.json`).name === `coffee-script`) { var red, yellow, cyan, reset; red = yellow = cyan = reset = ``; if (!process.env.NODE_DISABLE_COLORS) { red = `\\\\x1b[31m`; yellow = `\\\\x1b[33m`; cyan = `\\\\x1b[36m`; reset = `\\\\x1b[0m`; } console.warn(red + `CoffeeScript has moved!` + reset + ` Please update references to ` + yellow + `\\\\\\\"coffee-script\\\\\\\"` + reset + ` to use ` + yellow + `\\\\\\\"coffeescript\\\\\\\"` + reset + ` (no hyphen) instead.`); console.warn(`Also, a new major version has been released under the ` + yellow + `coffeescript` + reset + ` name on NPM. This new release targets modern JavaScript, with minimal breaking changes. Learn more at ` + cyan + `http://coffeescript.org` + reset + `.`); console.warn(``); }\"\r\n```",
      "@rossanmol people using 1.x not all have access to ES6+ features. That's kinda the point of the 1.x branch.",
      "@rossanmol you cannot use ` you can only use ' or \" because es6 not everywhere, but i will try to look for windows 10 to check, but can you tell me how you tested??\r\ndid you pull the code and npm linked it?? ",
      "@hajjem-ayoub run the following in cmd:\r\n\r\n```\r\nnode --eval \\\"if (require('./package.json').name === 'coffee-script') { var red, yellow, cyan, reset; red = yellow = cyan = reset = ''; if (!process.env.NODE_DISABLE_COLORS) { red = '\\\\x1b[31m'; yellow = '\\\\x1b[33m'; cyan = '\\\\x1b[36m'; reset = '\\\\x1b[0m'; } console.warn(red + 'CoffeeScript has moved!' + reset + ' Please update references to ' + yellow + '\\\\\\\"coffee-script\\\\\\\"' + reset + ' to use ' + yellow + '\\\\\\\"coffeescript\\\\\\\"' + reset + ' (no hyphen) instead.'); console.warn('Also, a new major version has been released under the ' + yellow + 'coffeescript' + reset + ' name on NPM. This new release targets modern JavaScript, with minimal breaking changes. Learn more at ' + cyan + 'http://coffeescript.org' + reset + '.'); console.warn(''); }\\\"\r\n```\r\n\r\nI didn't try linking it.",
      "@rossanmol  yes but than you don't have process.env.NODE_DISABLE_COLORS",
      "@hajjem-ayoub it fails because of the if statement, same as before.",
      "just  pushing one like that now :D",
      "@rossanmol  and for coloring i used chalk",
      "@hajjem-ayoub if anything, you missed a git add.",
      "@vendethiel  sorry for that, i amended my commit and push forced again\r\nlet me know if i need to add the disable color",
      "@vendethiel done with this and it looks like working fine, i just had to add chalk to dependancies if that's ok",
      "I don't think coloring is important enough to warrant adding a dep.",
      "Yes, we don’t have dependencies. I think #4807 is closer to what we need to do."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc743a21fa1e1f1a9e6f",
    "number": 4807,
    "body": "…ed token'\r\n\r\nCloses: #4805 \r\n\r\n@vendethiel, @lydell  & @GeoffreyBooth.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "This will actually show the message for anybody using coffeescript, no matter if using the \"coffeescript\" package or \"coffee-script\" so I would say it's not valid because what you want is to say that you need to change the name to \"coffeescript\" only if you are using \"coffee-script\" and not also if you are using it.",
      "@Alevale, the if statement is based on the \"name\" value in the `package.json` which in `package.json` is always `coffee-script`\r\n\r\n https://github.com/jashkenas/coffeescript/blob/1/package.json#L2\r\n\r\nUnless I am missing something\r\n\r\n![image](https://user-images.githubusercontent.com/17563226/33436457-67be0d96-d5e5-11e7-8453-2285ac207529.png)\r\n\r\nin the `coffescript` package there is no `postinstall` script\r\nhttps://github.com/jashkenas/coffeescript/blob/master/package.json",
      "I tested this in Windows by pasting the `package.json` into a folder and running `npm run postinstall` and it seems to work. It’s unfortunate that we lose the quotes around `\"coffee-script\"`, as that was meant to imply that string in `package.json`, but I can live with that.\r\n\r\n@alan-agius4 have you tested this in Windows?",
      "Oh and I’ll just leave out the `postinstall` entirely in the `coffeescript` side. The `if` was meant so that there would be one consistent codebase between the two, but clearly it’s not worth the headache.",
      "Yeah my screenshot i posted is on windows\n\nOn Thu, 30 Nov 2017 at 17:21, Geoffrey Booth <notifications@github.com>\nwrote:\n\n> I tested this in Windows by pasting the package.json into a folder and\n> running npm run postinstall and it seems to work. It’s unfortunate that\n> we lose the quotes around \"coffee-script\", as that was meant to imply\n> that string in package.json, but I can live with that.\n>\n> @alan-agius4 <https://github.com/alan-agius4> have you tested this in\n> Windows?\n>\n> —\n> You are receiving this because you were mentioned.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/jashkenas/coffeescript/pull/4807#issuecomment-348239222>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AQv-Wl39HEDAzFHHy2jZAYsPsnb_JmBpks5s7tXfgaJpZM4QwcWY>\n> .\n>\n",
      "Great, do you mind really and truly testing it via the steps in https://github.com/jashkenas/coffeescript/pull/4759#issuecomment-347093273? I just don’t want to push more than one fix to this 😄 And I don’t have a great Windows environment to test with.\r\n\r\n(Check out your branch rather than `redirect` as mentioned in the instructions.)",
      "Unfortunately i am at home nowand I only have mac available.\r\n\r\nBasicly my test was the following;\r\nnpm pack (this created acts the same as npm publish but having the same pkg on disk rather than npm repo)\r\n\r\nAnd\r\n\r\nnpm install \r\n\r\nAnyone willing to test it out your way?",
      "@alan-agius4 If there’s a way to have this only print on direct installs, we might as well add that ability at the same time as we fix this. I like your code in https://github.com/jashkenas/coffeescript/issues/4805#issuecomment-348259369, but it needs to be rewritten to run in Node 0.8+ (so no `const` etc.) and anything risky should go in a `try` block. We could put it into a `warning.js` and change `postinstall` to `node ./warning.js`. That should also fix the Windows quotes issue.",
      "Sure thing, though i’ll only be available to do it tomorrow. Lets say in 14hrs. Is it okay for you?\r\n\r\n\r\n\r\nOn Thu, 30 Nov 2017 at 18:53, Geoffrey Booth <notifications@github.com>\r\nwrote:\r\n\r\n> @alan-agius4 <https://github.com/alan-agius4> If there’s a way to have\r\n> this only print on direct installs, we might as well add that ability at\r\n> the same time as we fix this. I like your code in #4805 (comment)\r\n> <https://github.com/jashkenas/coffeescript/issues/4805#issuecomment-348259369>,\r\n> but it needs to be rewritten to run in Node 0.8+ (so no const etc.) and\r\n> anything risky should go in a try block. We could put it into a warning.js\r\n> and change postinstall to node ./warning.js. That should also fix the\r\n> Windows quotes issue.\r\n>\r\n> —\r\n> You are receiving this because you were mentioned.\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/jashkenas/coffeescript/pull/4807#issuecomment-348267844>,\r\n> or mute the thread\r\n> <https://github.com/notifications/unsubscribe-auth/AQv-Wgh8btF0Y3DywAXc9XhxGtMGuR00ks5s7uuvgaJpZM4QwcWY>\r\n> .\r\n>\r\n",
      "Yes, I don’t want to try again until Friday night Pacific time at the earliest.",
      "@GeoffreyBooth I pushed the implementation that we discussed yesterday, that said I had to do some modifications to the original snippet to get it working.\r\n\r\n![image](https://user-images.githubusercontent.com/17563226/33472726-d177ada8-d673-11e7-9c0b-35875288bb5d.png)\r\n",
      "Let's pause on this, per https://github.com/jashkenas/coffeescript/issues/4714#issuecomment-348394552. I think we might just use `npm deprecate` instead after all.",
      "Closing as @jashkenas will `npm deprecate` per https://github.com/jashkenas/coffeescript/issues/4714#issuecomment-348394552."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc753a21fa1e1f1a9e70",
    "number": 4804,
    "body": "React [fragment syntax](https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html) (#4802).\r\n```coffeescript\r\nComponent = (props) =>\r\n  <>\r\n    <OtherComponent />\r\n    <OtherComponent />\r\n  </>\r\n```\r\n Output:\r\n```javascript\r\nComponent = (props) => {\r\n  return <>\r\n    <OtherComponent />\r\n    <OtherComponent />\r\n  </>;\r\n};\r\n```",
    "head_branch": "csx_fragments",
    "is_a_fork": true,
    "comments": [
      "I think this is okay. @vendethiel?",
      "@vendethiel Did you have any other notes?"
    ],
    "commit_messages": [
      "[Enhancement] CSX fragments syntax (#4802) (#4804)\n\n* CSX fragments\r\n\r\n* regex improvement; tests\r\n\r\n* regex improvement\r\n\r\n* regex improvement\r\n\r\n* bug fix; regex\r\n\r\n* Fix style\r\n\r\n* Split fragment tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc763a21fa1e1f1a9e71",
    "number": 4803,
    "body": "This PR implements computed property keys (#4622) syntax for object literals.\r\n```coffeescript\r\ni = 0\r\na =\r\n  ['foo' + ++i]: i\r\n  ['foo' + ++i]: i\r\n  ['foo' + ++i]: i\r\n\r\n# a = {foo1: 1, foo2: 2, foo3: 3}\r\n\r\nparam = 'size'\r\nconfig =\r\n  [param]: 12,\r\n  ['mobile' + param.charAt(0).toUpperCase() + param.slice(1)]: 4\r\n\r\n# conf = {size: 12, mobileSize: 4}\r\n\r\nobj =\r\n  [Symbol.iterator]: ->\r\n    yield \"hello\"\r\n    yield \"world\"\r\n\r\n# [obj...] = ['hello', 'world']\r\n```\r\n\r\nBesides basic support for ES spec, it also enables use of property value shorthand syntax.\r\n```coffeescript\r\nkey = 'a'\r\nobj = { [key] }\r\n# obj = {a: 'a'}\r\n\r\nkey = 5\r\nobj = { [key] }\r\n# obj = {5: 5}\r\n\r\nfoo = (k) -> \"key_#{k}\"\r\nobj = { [foo(1)] }\r\n# obj = { key_1: 'key_1' }\r\n```\r\n\r\nThis is similar to \"object keys with interpolations\". The only difference is that property values will be the same type as the key.\r\n```coffeescript\r\nobj = { [5] } => { 5: 5 }\r\nobj = { ['5'] } => { '5': '5' }\r\n\r\nobj = { \"#{5}\" } => { '5': '5' }\r\nobj = { \"#{'5'}\" } => { '5': '5' }\r\n\r\n```\r\n\r\nI temporarily disabled few \"unexpected object keys\" test in `test/error_messages.coffee`  until I sort out some issues.",
    "head_branch": "computed_property_keys",
    "is_a_fork": true,
    "comments": [
      "That’s all I’ve got. Any notes, @vendethiel or @lydell or @connec?\r\n\r\n@zdenko thanks for tackling this, this is a good feature to add.",
      "Awesome work @zdenko! This one is nice to have, thanks."
    ],
    "commit_messages": [
      "[Enhancement] Computed property keys (#4622) (#4803)\n\n* Computed property keys\r\n\r\n* refactor\r\n\r\n* improvements\r\n\r\n* refactor tests\r\n\r\n* fix comments"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc773a21fa1e1f1a9e72",
    "number": 4801,
    "body": "This is it, the hopefully last 1.x release. 🤞 Very few changes from 1.12.7:\r\n\r\n*   Added install message on `coffee-script` package encouraging people to use the `coffeescript` NPM package instead.\r\n*   Backported bugfix for `export default` followed by an implicit object that contains an explicit object, for example `exportedMember: { obj... }`.\r\n*   Backported bugfix for splats after existential operator soaks in arrays (`[a?.b...]`) or expressions.\r\n",
    "head_branch": "1.12.8",
    "is_a_fork": true,
    "comments": [
      "Looks like the 1.12.8 release has not been published to npm yet.",
      "We won't be publishing it. You can use the `1` branch if you need those bug fixes. They're very minor. The point of 1.12.8 was the deprecation message.",
      "Alright, thanks for clarifying."
    ],
    "commit_messages": [
      "1.12.8 (#4801)\n\n* 1.12.8 changelog\r\n\r\n* 1.12.8 output"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfc783a21fa1e1f1a9e73",
    "number": 4800,
    "body": "I’m embarrassed by #4774, and the fix was quite simple. I think it’s worth backporting to 1.\r\n\r\nAny other bugfixes (that didn’t introduce breaking changes, like #4599) that people want to backport to 1 before we release 1.12.8?",
    "head_branch": "backport-line-suppression-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Backport #4783, fix for `export default` followed by an implicit object (#4800)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfc793a21fa1e1f1a9e74",
    "number": 4799,
    "body": "Fixes #4798\r\n```javascript\r\n// [{a, rest...}] = arr\r\n({a} = ref = arr[0]);\r\nrest = objectWithoutKeys(ref, ['a']);\r\n\r\n// [b,{a, rest...},c] = arr\r\nb = arr[0], (({a} = ref = arr[1]), rest = objectWithoutKeys(ref, ['a'])), c = arr[2];\r\n```\r\n",
    "head_branch": "issue_4798",
    "is_a_fork": true,
    "comments": [
      "Other than that, it looks good to me. @connec, do you have any notes?",
      "@GeoffreyBooth do I need to add/change something to this PR?",
      "Nope, I'm satisfied if @lydell is satisfied.",
      "Sorry, I thought this was the other PR. @connec did you have any notes on this?",
      "LGTM 👍 "
    ],
    "commit_messages": [
      "Fix #4798: Incorrect output for object rest destructuring inside array destructuring  (#4799)\n\n* fix #4798\r\n\r\n* additional tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc7a3a21fa1e1f1a9e75",
    "number": 4797,
    "body": "Not that we’ll really be pushing more updates to the 1.x branch, but before we put it to bed, let’s add Travis builds to it.",
    "head_branch": "cs1-travis",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS1] Travis CI for 1.x (#4797)\n\n* Update dependencies, use ~ notation for compatibility with Travis Node 0.8\r\n\r\n* First attempt at .travis.yml for 1.x\r\n\r\n* Drop Node 0.8 because dev dependencies want a higher Node runtime version; run all tests in harmony mode\r\n\r\n* Closure Compiler requires Node 4+\r\n\r\n* Exclude the test files that use template literal syntax for Node < 4, where that syntax is unsupported\r\n\r\n* Filter out incompatible tests for Node 0.10"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfc7b3a21fa1e1f1a9e76",
    "number": 4796,
    "body": "This PR implements `elision` (#4684). There are probably some rough edges and errors, but so far the following code is properly compiled.\r\n\r\n```coffeescript\r\narr = [1,2,3,4,5,6,7,8,9]\r\n\r\n[,a,,b,,c,,,d] = arr  \r\n# a = 2, b = 4, c = 6, d = 9\r\n\r\n[,a,,,b...] = arr \r\n# a = 2, b = [5,6,7,8,9]\r\n\r\n[,a,...,,b,,c] = arr \r\n# a = 2, b = 7, c = 9\r\n\r\n[...,a,,,b,,,] = arr\r\n# a = 4, b = 7\r\n\r\nfoo = ([,a,,b,,c,,,d]) -> [a,b,c,d]\r\n[a,b,c,d] = foo arr\r\n# [a,b,c,d] = [2,4,6,9]\r\n```",
    "head_branch": "elision",
    "is_a_fork": true,
    "comments": [
      "@GeoffreyBooth \r\n> Assignment: arr = [0,,2]\r\n\r\nThis works, I'll add tests for the assignments.\r\n```javascript\r\n// arr = [0,,2]\r\nvar arr;\r\narr = [0, , 2];\r\n```\r\n\r\n> Function parameters: fn(first,,third)   \r\n\r\nDid you mean `fn = (first, , third) ->`?\r\nIf I'm not mistaken, `elision` in function parameter list is not part of the ES specification.\r\nBesides, the proposal #4684 was meant for the array `elisions`, which are part of the ES, and I wanted to finish that first.\r\nIf parameter list `elision` is required feature I'll create separate PR.",
      "I had forgotten that elision was already part of the ES spec. Since that’s the case, yes, please follow ES semantics for the trailing comma, and let’s not worry about elision in function parameters until ES supports it.",
      "Looks good-ish, but can the grammar rules not be simplified further? The mixing of Elisions and OptCommas doesn't feel right, nor does the strange indentation combinations in the grammar rules.\r\n\r\nCan we not just use the grammar to specify a Elision -> \",\" rule, like this PR has, and then change the existing grammar to read commas in places-where-elisions-are-allowed as Elisions?\r\n\r\nIf I'm not understanding the complexity of this change, feel free to ignore me.",
      "At first, I tried to reuse existing grammar by placing `Elision` in allowed spaces, but  the existing `ArgList` rules are used for arrays and function parameter list. \r\nSo, adding `Elision` there might break or cause errors for the function parameters.\r\nThis is the main reason I decided to create separate rules for arrays only (`ArgElisionLilst`). \r\n\r\nTo avoid breaking existing array rules, where a comma is optional in some cases, and `Elision` requires preceding comma, I had to reuse some of the rules from `ArgList`. \r\nFor example, `INDENT ArgList OptComma OUTDENT`  from the `ArgList` is repeated as `INDENT ArgElisionList OptComma OUTDENT` in `ArgElisionList`, but since multiple commas (elisions) are allowed at the array's end, additional rule `INDENT ArgElisionList , Elisions OUTDENT`is also required.\r\n\r\nHowever, I do agree that rules are pretty messy (especially `OptComma` and `, Elision` combination).\r\nSo, I took another shot at it and tried to simplify it, by creating `OptElisions` rule which now covers both, `OptComma` and `Elisions`.\r\n\r\nI think the result is now much better, as `ArgElisionList` is an almost identical copy of `ArgList`.",
      "Thanks for cleaning it up, that makes sense! LGTM.",
      "Great work @zdenko, thanks!",
      "> Great work @zdenko, thanks!\r\n\r\nThis 👍"
    ],
    "commit_messages": [
      "Fixes #4684: Elision (#4796)\n\n* Elision\r\n\r\n* test\r\n\r\n* improvements\r\n\r\n* grammar optimization\r\n\r\n* cleanup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc7c3a21fa1e1f1a9e77",
    "number": 4795,
    "body": "Fixes #4775, and recent bugfixes:\r\n\r\n*   Bugfix for `export default` followed by an implicit object that contains an explicit object, for example `exportedMember: { obj... }`.\r\n*   Bugfix for `key, val of obj` after an implicit object member, e.g. `foo: bar for key, val of obj`.\r\n*   Bugfix for combining array and object destructuring, e.g. `[ ..., {a, b} ] = arr`.\r\n*   Bugfix for an edge case where it was possible to create a bound (`=>`) generator function, which should throw an error as such functions aren’t allowed in ES2015.\r\n*   Bugfix for source maps: `.map` files should always have the same base filename as the requested output filename. So `coffee --map --output foo.js test.coffee` should generate `foo.js` and `foo.js.map`.\r\n*   Bugfix for incorrect source maps generated when using `--transpile` with `--map` for multiple input files.\r\n*   Bugfix for comments at the beginning or end of input into the REPL (`coffee --interactive`).",
    "head_branch": "2.0.3",
    "is_a_fork": true,
    "comments": [
      "This look good everyone? @vendethiel @lydell @jashkenas @connec @helixbass @zdenko ?"
    ],
    "commit_messages": [
      "2.0.3 (#4795)\n\n* Fix #4775: Remove no-longer-correct mention of the docs using text/coffeescript\r\n\r\n* 2.0.3 changelog\r\n\r\n* Update output for 2.0.3\r\n\r\n* Bump date"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc7d3a21fa1e1f1a9e78",
    "number": 4793,
    "body": "Fixes #4580 where two-value postfix `for` in implicit object caused compiler error.\r\n```coffeescript\r\na: b\r\nc: d for d, e in f\r\n```\r\nor\r\n```coffeescript\r\na: b\r\nc: d for d, e of f\r\n```\r\n",
    "head_branch": "issue_4580",
    "is_a_fork": true,
    "comments": [
      "LGTM. Anyone else have any notes?",
      "What does this give with e.g.?\r\n\r\n```\r\na: b\r\nc: d for {a, b, c}, e in f\r\n```",
      "@vendethiel \r\n```javascript\r\n/*\r\na: b\r\nc: d for {a, b, c}, e in f\r\n*/\r\nvar a, b, c, e;\r\n\r\n({\r\n  a: b,\r\n  c: (function() {\r\n    var i, len, results;\r\n    results = [];\r\n    for (e = i = 0, len = f.length; i < len; e = ++i) {\r\n      ({a, b, c} = f[e]);\r\n      results.push(d);\r\n    }\r\n    return results;\r\n  })()\r\n});\r\n```",
      "LGTM then :+1:",
      "Thanks @zdenko!"
    ],
    "commit_messages": [
      "fix #4580 (#4793)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc7e3a21fa1e1f1a9e79",
    "number": 4792,
    "body": "Fixes #4790. So that case was interesting:\r\n\r\n```coffee\r\n=>\r\n  for x in []\r\n    for y in []\r\n      yield z\r\n```\r\n\r\nThis compiled, even though it should’ve thrown an error about `yield` not being allowed in `=>` functions (ES2015 just doesn’t allow bound generator functions, for whatever reason). The reason our usual check for `yield`s inside `=>` functions missed this case was because one of the `for` loops here compiled into an immediately-invoked function expression (IIFE), which created a new function scope around the `yield`; and that new function was a normal one, not bound:\r\n\r\n```js\r\n(*() => {\r\n  var i, len, ref, results, x, y;\r\n  ref = [];\r\n  results = [];\r\n  for (i = 0, len = ref.length; i < len; i++) {\r\n    x = ref[i];\r\n    results.push((yield* (function*() {\r\n      var j, len1, ref1, results1;\r\n      ref1 = [];\r\n      results1 = [];\r\n      for (j = 0, len1 = ref1.length; j < len1; j++) {\r\n        y = ref1[j];\r\n        results1.push((yield z));\r\n      }\r\n      return results1;\r\n    })()));\r\n  }\r\n  return results;\r\n});\r\n```\r\n\r\nAnd all this happened because of all the contortions involved with returning the results of these `for` loops. Throw a `return` after the `yield` and the expected error message appears.\r\n\r\nIt looked hopelessly complicated to try to amend the code where the current check is (when compiling `yield`, we check that the function it’s inside isn’t bound) to try to know when to look up a level or two because its parent function might’ve been generated by the compiler. A simpler solution to this case was to add an extra error check at the source, the compilation of the function itself, so that’s what this PR does. Either we catch the bound generator-ness when compiling `yield` or when compiling `=>`.",
    "head_branch": "fix-fat-arrow-yield",
    "is_a_fork": true,
    "comments": [
      "I think once this PR goes in we can release 2.0.3. Anyone else care to glance at it? @vendethiel? @connec? @zdenko? @helixbass?",
      "Just from curiosity, I tried this approach in `Op:: compileContinuation `.   \r\nIt seems to be working but might miss some cases. I think your solution is better as it will catch all of them.\r\n```coffeescript\r\n@@ -3169,9 +3169,14 @@ exports.Op = class Op extends Base\r\n   compileContinuation: (o) ->\r\n     parts = []\r\n     op = @operator\r\n+    isRootBound = (exp) ->\r\n+      return isRootBound(exp.expressions) if (exp?.expressions)\r\n+      block = [].concat exp if exp\r\n+      isGlyph = yes for b in block when b?.funcGlyph?.glyph is \"=>\" or b?.value?.funcGlyph?.glyph is \"=>\"\r\n+      isGlyph ? no\r\n     unless o.scope.parent?\r\n       @error \"#{@operator} can only occur inside functions\"\r\n-    if o.scope.method?.bound and o.scope.method.isGenerator\r\n+    if isRootBound(o.scope.root) or o.scope.method?.bound and o.scope.method.isGenerator\r\n```",
      "Thanks @zdenko. So I guess this is good to merge?\r\n\r\nDo you think we should keep the check in both places, or perhaps just keep the new one? I feel like it can’t hurt to check twice . . .",
      "I didn't test my approach thoroughly, so I wouldn't include it. Besides, your PR solved the issue, seems more solid and can be merged IMHO."
    ],
    "commit_messages": [
      "Fix #4790: Double-check that we're not creating a bound generator function, even if the yield got stuffed inside a compiler-generated IIFE (#4792)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc7f3a21fa1e1f1a9e7a",
    "number": 4791,
    "body": "Fixes #4787 \r\nDestructuring assignment with expansion and object destructuring  within array compiles correctly.\r\n\r\n```coffeescript\r\n[...,{a,b}] = arr\r\n```\r\n\r\nBefore:\r\n```javascript\r\nvar a, b;\r\n{a, b} = arr[arr.length - 1];\r\n```\r\n\r\nAfter:\r\n```javascript\r\nvar a, b;\r\n({a, b} = arr[arr.length - 1]);\r\n```\r\n",
    "head_branch": "fix_4787",
    "is_a_fork": true,
    "comments": [
      "This is pretty surgical. @connec, any notes?"
    ],
    "commit_messages": [
      "Fix #4787: Destructuring of objects within arrays can generate invalid JavaScript (#4791)\n\n* Fix #4787\r\n\r\n* simplify condition"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc7f3a21fa1e1f1a9e7b",
    "number": 4785,
    "body": "Fixes #4780. Currently when compiling with `--transpile`, the options object being sent to Babel isn’t “clean”—it’s a mutated version of the same options object for each iteration of the loop of each file that’s being compiled. So in #4780 the result of this was that some of the fields of source maps `.map` files were the same values for all files, when they shouldn’t be. This PR fixes things so that the `options` object is never mutated, but rather if we need to make adjustments to the options we pass to Babel, those adjustments happen in a copy.\r\n\r\n@lydell you would be proud.",
    "head_branch": "fix-transpile-options",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #4780: Don't mutate the options object when compiling and transpiling, so that options are correct on subsequent iterations (#4785)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc803a21fa1e1f1a9e7c",
    "number": 4784,
    "body": "Fixes #4765: When `--output` is used to compile one `.coffee` file into a `.js` file with an unrelated filename, the generated .map file should have a corresponding filename. In other words:\r\n\r\n```bash\r\ncoffee --map --output foo.js test.coffee\r\n```\r\n\r\nShould generate `foo.js` and `foo.js.map`. Prior to this PR, the files generated were `foo.js` and `test.js.map`.",
    "head_branch": "fix-map-files",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #4765: .map file should always have the same output base filename as the generated .js file (#4784)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc813a21fa1e1f1a9e7d",
    "number": 4783,
    "body": "Fix #4774: `export default` followed by an object should always work, even if the object contains braces (or put another way, even if one of the object’s values is an explicit object, defined with braces).\r\n\r\nFixes a bug introduced in #4532, where `export default` was given the ability to export an implicit object. In that PR, this was implemented in an incorrect way: `default` followed by a newline caused a suppression of that newline. For objects that contain _explicit_ objects (i.e. braces), this breaks, as the suppressed newline screws up the tracking of indents, which matters when we encounter `}` tokens. Instead we should handle it in the grammar the same way returning an implicit object is handled.\r\n\r\n@connec you had some comments on the earlier PR. @helixbass you did some work related to this in #4605.",
    "head_branch": "fix-export-default-object",
    "is_a_fork": true,
    "comments": [
      "@GeoffreyBooth just got notified now (post-merge) - lgtm, by explicitly restricting it to an indented `Object` in the grammar you're also getting comparable benefits to #4605 (for `return`) where unintended (ie non-object) indented cases are disallowed eg:\r\n```\r\nexport default\r\n  foo\r\n```",
      "Awesome, thanks.",
      "@helixbass if you have time, I'd love some review of the other recent open pull requests :smile:"
    ],
    "commit_messages": [
      "Fix #4774: `export default` followed by an object should always work, even if the object contains braces. `default` shouldn't suppress a newline, we should handle it in the grammar the same way returning an implicit object is handled (#4783)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc823a21fa1e1f1a9e7e",
    "number": 4764,
    "body": "Fixes #4763. Now if you type `# comment` in the REPL, when it evaluates the line the REPL evaluates it to `undefined`.\r\n\r\nNitty-gritty explanation: Comments are “attached” to tokens, and added to the output JavaScript at the end of compilation when tokens are converted into the final JS code. When there’s no nearby token to attach to, for example if your entire code string was just `# comment` or `### first comment ### # second comment`, the rewriter creates a placeholder PassthroughLiteral token that’s a zero-length string—``` `` ```, essentially—to attach the tokens to. This placeholder is only ever needed at the beginning or end the tokens array. When such a placeholder is added, a newline `TERMINATOR` token is also added, if necessary, after or the placeholder (if it starts the stream) or before it (if it ends the stream). The REPL doesn’t care about comments, so when we see these placeholder tokens at the beginning or end of the `tokens` array, we remove them before we assign the REPL result to `__`.",
    "head_branch": "repl-comments",
    "is_a_fork": true,
    "comments": [
      "@vendethiel do you or anyone else mind reviewing this?",
      "@helixbass or anyone else, should this be more generalized than what I have here? This solution is rather surgical, but I wonder if it should be any broader than this specific case; and if so, what else it should cover.",
      "@GeoffreyBooth I don't have enough understanding of the comments implementation (or how the REPL works) to be of much help. This feels like a (REPL-only) rewriter pass, which often are pretty surgical to just handle some specific cases. And based on your explanation it sounds like this fix covers the necessary cases?",
      "This is _very_ surgical, just comments at beginnings and ends of input. It doesn’t touch comments in the middle, for example.\r\n\r\nBut I guess this is probably good enough, and if someone reports other REPL issues with comments I can expand it then. No point in making it broader than it needs to be, until I know how broad it really needs to be."
    ],
    "commit_messages": [
      "Fix #4763: Comments at beginning or end of REPL input shouldn't throw errors (#4764)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc833a21fa1e1f1a9e7f",
    "number": 4759,
    "body": "Fixes #4714. Once this is merged in, when the user does `npm install coffee-script` or `npm install` in a folder that has `coffee-script` in the `package.json` but not yet installed, this message will appear:\r\n\r\n```\r\nCoffeeScript has moved! Please update your package.json to replace \"coffee-script\" with \"coffeescript\".\r\nAlso, a new major release is available. Learn more at http://coffeescript.org.\r\n```\r\n\r\nIn my testing at least, the message doesn’t appear when `coffee-script` is installed as a dependency of some other module. It also doesn’t appear when running `npm upgrade coffee-script`, which is unfortunate. So this should catch new installs, and new checkouts of existing projects, but it won’t alert users of existing projects who already have any version of `coffee-script` installed (I think; maybe we need to actually push to NPM, perhaps under some other temporary module name, to truly know for sure).\r\n\r\nThis needs some thorough testing. This will become 1.12.8, hopefully the last 1.x release. I really don’t want to push a 1.12.9 because I screwed this up.",
    "head_branch": "redirect",
    "is_a_fork": true,
    "comments": [
      "Would it be better to use `npm deprecate`? https://docs.npmjs.com/cli/deprecate. We could just deprecate all `coffee-script` versions, with a message to install `coffeescript` instead. (Or perhaps just deprecate 1.12.7.)\r\n\r\nPinging @jashkenas @lydell @connec @vendethiel and anyone else who has NPM experience.",
      "I think that this approach is better than a deprecation — if you deprecate, you'll be dealing with a bunch of folks opening tickets asking why. This is friendlier.\r\n\r\nWe should also change the README on the 1.X npm package, visible at npmjs.com/coffee-script, to make it clear what's up.\r\n\r\nFinally, it would be nice to include a line in the message mentioning that the major new release targets evergreen JS, and (maybe) may have some incompatibilities...",
      "Okay, I’ve found a way to test this, thanks to [Verdaccio](https://github.com/verdaccio/verdaccio), a way to mock the NPM registry with a locally-hosted version.\r\n\r\n```bash\r\nnpm install --global verdaccio\r\nverdaccio\r\n\r\n# In a new shell:\r\nnpm logout\r\nnpm set registry http://localhost:4873/\r\nnpm adduser --registry http://localhost:4873\r\n# ... create some dummy credentials\r\n\r\ncd ~/Sites/coffeescript\r\ngit checkout redirect\r\n\r\n# Publish to Verdaccio local NPM registry:\r\nnpm publish --force --registry http://localhost:4873\r\n\r\ncd /tmp\r\nmkdir test\r\ncd test\r\nnpm init\r\nnpm install coffee-script\r\n# The locally-hosted coffee-script is installed, and the postinstall script runs\r\n```\r\n\r\nI see output like this:\r\n\r\n![image](https://user-images.githubusercontent.com/456802/33253367-e8cfe27e-d2f7-11e7-8e01-ecfed03fbd9d.png)\r\n\r\nIt’s a good thing I tested this, as I discovered that `Cakefile` doesn’t get uploaded to NPM when we publish! So the postinstall script of `node ./bin/cake postinstall` tries to load a `Cakefile` that doesn’t exist, and the whole thing crashes embarrassingly. To fix this, I just put the entire postinstall script into `package.json` instead.\r\n\r\nI also tested what would happen when installing a package that depends on `coffee-script`:\r\n\r\n```bash\r\n# ... continuing from above\r\nnpm rm coffee-script\r\nnpm install gulp-coffee\r\n```\r\n\r\nUnfortunately, I see the warning again. Do we care? I’m not sure that there’s a way to detect whether the current package is being installed directly by the user or indirectly as a dependency of some other module.",
      "@jashkenas I’ve updated the language per your comment:\r\n\r\n![image](https://user-images.githubusercontent.com/456802/33254910-0aa92f38-d300-11e7-8a1a-19ded11c1862.png)\r\n\r\nAnd similar in the [README](https://github.com/GeoffreyBooth/coffeescript/blob/1e1fd9bd8f5ac22831161c994abf258024f79ac4/README.md). Once we publish `coffee-script` 1.12.8 with this README, I’ll update it again to basically be a clone of the current 2.x README for publishing `coffeescript` 1.12.8 (since the `coffeescript` module doesn’t need a message about CoffeeScript moving).",
      "@GeoffreyBooth Looks lovely!",
      "@jashkenas How do you feel about this message appearing even when `coffee-script` is installed indirectly, i.e. via something like `npm install gulp-coffee`?",
      "I think it's not ideal, but if there's no way to tell if we're being installed as a dependency, it's alright."
    ],
    "commit_messages": [
      "[CS1] Add postinstall message for direct installs of ‘coffee-script’ (#4759)\n\n[CS1] Add postinstall message for installs of ‘coffee-script’ (with hyphen)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc843a21fa1e1f1a9e80",
    "number": 4758,
    "body": "This should hopefully be the last release for awhile, unless people report cringeworthy bugs.\r\n\r\nThis PR adds a new breaking changes section about [`super` and `this`](http://rawgit.com/GeoffreyBooth/coffeescript/2.0.2/docs/v2/index.html#breaking-changes-super-this).\r\n\r\n2.0.2 changelog:\r\n\r\n*   `--transpile` now also applies to `require`d or `import`ed CoffeeScript files.\r\n*   `--transpile` can be used with the REPL: `coffee --interactive --transpile`.\r\n*   Improvements to comments output that should now cover all of the [Flow comment-based syntax](https://flow.org/en/docs/types/comments/). Inline `###` comments near [variable](https://flow.org/en/docs/types/variables/) initial assignments are now output in the variable declaration statement, and `###` comments near a [class and method names](https://flow.org/en/docs/types/generics/) are now output where Flow expects them.\r\n*   Importing CoffeeScript keywords is now allowed, so long as they’re aliased: `import { and as andFn } from 'lib'`. (You could also do `import lib from 'lib'` and then reference `lib.and`.)\r\n*   Calls to functions named `get` and `set` no longer throw an error when given a bracketless object literal as an argument: `obj.set propertyName: propertyValue`.\r\n*   In the constructor of a derived class (a class that `extends` another class), you cannot call `super` with an argument that references `this`: `class Child extends Parent then constructor: (@arg) -> super(@arg)`. This isn’t allowed in JavaScript, and now the CoffeeScript compiler will throw an error. Instead, assign to `this` after calling `super`: `(arg) -> super(arg); @arg = arg`.\r\n*   Bugfix for incorrect output when backticked statements and hoisted expressions were both in the same class body. This allows a backticked line like `` `field = 3` ``, for people using the experimental [class fields](https://github.com/tc39/proposal-class-fields) syntax, in the same class along with traditional class body expressions like `prop: 3` that CoffeeScript outputs as part of the class prototype.\r\n*   Bugfix for comments not output before a complex `?` operation, e.g. `@a ? b`.\r\n*   All tests now pass in Windows.\r\n\r\n@jashkenas @lydell @connec @vendethiel ",
    "head_branch": "2.0.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "2.0.2 (#4758)\n\n* Give the notes about `super` and `this` their own section in the docs\r\n\r\n* 2.0.2 changelog\r\n\r\n* 2.0.2 release output\r\n\r\n* Rewrite"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc853a21fa1e1f1a9e81",
    "number": 4757,
    "body": "Fixes #4756, where comments where lost before `return @foo ? 42`. This is because the “salvage comments” code in the `Existence` class was using `eachChild`, which only looks at the immediate children of the expression, rather than `traverseChildren`, which drills down to all descendant children. When the expression contains `@`, as in `@foo` instead of just `foo`, the comments are one level deeper than where they would be on just `foo`.\r\n\r\nPreviously I was covering accessors via a second check for `child.name`, but that just masked the real issue (that I wasn’t drilling down far enough) by selectively diving down just in the case of the `name` property. Now that we’re searching the entire tree, there’s no need for a special check for a `name` grandchild node.",
    "head_branch": "comment-before-this",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #4756: When moving comments from the children of an Existence, we need to search all its descendants, not just the immediate children (#4757)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc863a21fa1e1f1a9e82",
    "number": 4754,
    "body": "Fixes #4752, in the sense that now we throw a compiler error rather than outputting invalid JavaScript. If we want to go further and create some placeholder variables to engage in sleight of hand to make the impossible possible, well, that can be a follow-up PR.\r\n\r\n```coffee\r\nclass A\r\n  constructor: (@name) ->\r\n    alert @name, 'name'\r\n    \r\nclass B extends A\r\n  constructor: (@name) ->\r\n    super @name\r\n```\r\n```\r\ntest.coffee:7:5: error: Can't call super with @params in derived class constructors\r\n    super @name\r\n    ^^^^^^^^^^^\r\n```",
    "head_branch": "this-params-super",
    "is_a_fork": true,
    "comments": [
      "Anyone familiar with the codebase available to review this? @vendethiel? @xixixao?\r\n\r\nThis one's only two lines plus a test.",
      "This won't catch code like `class extends A then constructor: (@a) -> super((=> @a)())`, but I'm not sure if that's supposedly valid. (or if `super(=> @a)` in general is valid).",
      "[It looks like `super(=> a)` is valid](http://babeljs.io/repl/#?babili=false&browsers=&build=&builtIns=false&code_lz=MYGwhgzhAEBC0FMAeAXBA7AJjAgtA3gFDTTAD26EKATgK7ApnUAUY1A5gJQHEnQS0ADghbNuAXgB80Nl14BfQvKA&debug=false&circleciRepo=&evaluate=false&lineWrap=true&presets=&targets=&version=6.26.0), though `class extends A then constructor: (@a) -> super((=> @a)())` shouldn’t be valid for the same reason that `class extends A then constructor: (@a) -> super(@a)` shouldn’t be. Yikes this is tricky . . . I guess to do it right we need to traverse down the tree of everything passed to `super` as arguments, and check them all for `this` references. Maybe it’s easier to just do the shenanigans that @connec was thinking about, although those will surely have their own difficult cases.",
      "> It looks like super(=> a) is valid\r\n\r\nI meant specifically using `=> @a`. It doesn't error at compile time, but I can't seem to get the try it online to evaluate code.",
      "> I meant specifically using `=> @a`. It doesn’t error at compile time, but I can’t seem to get the try it online to evaluate code.\r\n\r\nThat’s the issue: we’re generating valid JavaScript, that just happens not to correspond to the user’s intent. [See](http://coffeescript.org/#try:class%20extends%20parent%0A%20%20constructor%3A%20(%40arg)%20-%3E%0A%20%20%20%20super(%3D%3E%20%40arg)):\r\n\r\n```coffee\r\nclass extends parent\r\n  constructor: (@arg) ->\r\n    super(=> @arg)\r\n```\r\n```js\r\n(class extends parent {\r\n  constructor(arg) {\r\n    super(() => {\r\n      return this.arg;\r\n    });\r\n    this.arg = arg;\r\n  }\r\n});\r\n```\r\n\r\n[Babel allows this](https://babeljs.io/repl/#?babili=false&browsers=&build=&builtIns=false&code_lz=MYGwhgzhAEbQ3gXwFDNJGAjaBTAHgC44B2AJjHPMtNMAPbEQEBOArsAXcwBRjMDmASgTUa0CKwAOOHt2EBeAHwixY5jgKtmxaAQAWASwgA6PvwDcomokGXV-o6YHR5sAXegpEQA&debug=false&circleciRepo=&evaluate=true&lineWrap=true&presets=&targets=&version=6.26.0), but it’s not the user’s intent because `this.arg` isn’t defined when it’s used inside the `super` argument.\r\n",
      "Okay @vendethiel, I’ve found a way to search the tree of nodes that make up `super`‘s arguments, to find any references to `this` within them. This covers the case you pointed out above.",
      "This goes a bit *too deep*:\r\n\r\n```coffee\r\ncoffee -bcs\r\nclass extends A then constructor: (@a) -> super(class then constructor: (@b) -> @b)\r\n\r\n[stdin]:1:74: error: Can't call super with @params in derived class constructors\r\nclass extends A then constructor: (@a) -> super(class then constructor: (@b) -> @b)\r\n```",
      "I tried using `Base::contains`, which stops traversing at scope boundaries, but it failed your example. I ran into a similar issue with function parameters, in that our checks don't work too well when someone puts gobs of code in there. Ultimately I think we couldn't find a solution that was perfectly precise, that went deep enough but not too deep, and so we opted to err on the side of too deep. The thinking was that blocks of code in function parameters is an edge case, easily refactored, and it's better to throw an unnecessary error than potentially miss throwing one. \r\n\r\nI think the same could be said for this case. Would you agree?",
      "`Base::contains` (or rather `Base::traverseChildren`) doesn't differentiate \"scope crossing\" between whether it is `this`-aware. This might be doable, this might not be, this might not be worth it. It's just a decision we take, I'm fine with it whichever way we decide.",
      "Thanks. I guess let's leave this open another day to see if anyone else has an opinion. Any other notes?"
    ],
    "commit_messages": [
      "Fix #4752: Error on calling super with @params in a derived class constructor (#4754)\n\n* Fix #4752: Error on calling super with @params in a derived class constructor\r\n\r\n* Catch calls to super with not-top-level @params"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc873a21fa1e1f1a9e83",
    "number": 4753,
    "body": "Fixes #4747. For local variables with trailing inline comments (e.g. `a = ###: number ### 1`), output the comments up in the variable declarations line (`var a/*: number */;`). This lets Flow to work with local variables.\r\n\r\nBranched off of #4736.",
    "head_branch": "flow-local-variables",
    "is_a_fork": true,
    "comments": [
      "@thejameskyle or @xixixao or @srb- or @connec or @vendethiel or @rstormsf or @mitar or @mrmowgli or @zeekay or others: Does someone familiar with Flow mind please testing this branch? With a CoffeeScript project that uses Flow, or a project that uses one or the other that you don’t mind adapting to use both 😄 This PR should implement all remaining parts of the Flow comments-based syntax, per @thejameskyle’s notes in #4736.",
      "Sorry, I never used Flow!",
      "This looks good to me :)",
      "Thanks so much @thejameskyle!\r\n\r\nIf you or anyone else has a “kitchen sink” file that uses all of Flow’s syntax, I’d love to write a test around it.",
      "Would you be interested in adding syntax support for Flow more than within comments?",
      "I’ve been considering that. I think I definitely want to get the comment-based syntax fully working first, but we should discuss other options after that. Hopefully this PR might’ve already gotten us to full Flow support.\r\n\r\nOne option I’ve been considering is giving backticks the same treatment as `###` comments. In CoffeeScript 1, `###` comments were only allowed were expressions were allowed: you couldn’t have `a ### comment! ### = 2`, for example. The big comments PR (#4572) refactored comments so that `###` comments could appear anywhere, like they can in JavaScript. But backticked blocks still have the same restriction as `###` comments used to; you can’t write ``a `+ 1` = 2``, for example. If we treat backticks the same way we treat `###` comments, then backticked code could appear anywhere, and you could use backticks for Flow annotations the same places you’re using `###` now. And best of all, this _still_ doesn’t bake Flow into the CoffeeScript language itself; just like improving comments, all such a PR would do is improve backticks capabilities generally. I think adding anything Flow-specific into the language would be a nonstarter, but allowing backticks to function in this way would be acceptable.",
      "I think that syntax would be a great improvement over the comments. But from a code transformation perspective I'm skeptical that it would work so universally.\r\n\r\nI'm also interested why adding a type syntax is a non-starter since JSX was added.",
      "JSX was added in a framework neutral way: it can be used with React, with Vue, with whatever else wants to support JSX in the future. JSX support was really just adding support for XML elements as a new string type, essentially.\r\n\r\nExplicitly supporting Flow, without a wrapper like comments or backticks, would be different. We don't want to lock the language into a particular downstream technology. It's also nowhere near as popular as JSX, or TypeScript for that matter. We might decide to try to support outputting to TypeScript in the future in some way, similar to how we're now supporting Flow.",
      "There's also the possibility that you could output to either. There's a very big overlap in syntaxes, I've been working on an AST that unifies both of them so that you could have generators to either syntax.",
      "I would be open to considering some kind of neutral CoffeeScript syntax that could translate into either. But mine isn't the only opinion that matters. Maybe let's take this to https://github.com/coffeescript6/discuss/issues/12, that's probably the thread with the most interested parties.",
      "My opinion on the matter of static typing syntax: #4563 \r\n\r\nI don't know of a more complete summary of Flow comment syntax than https://flow.org/en/docs/types/comments/, there might be a test somewhere. "
    ],
    "commit_messages": [
      "Fix #4747: Flow local variables (#4753)\n\n* Fix #4706: Comments before a PARAM_START token stay before that token\r\n\r\n* Simplify nodes\r\n\r\n* Add function-in-function test\r\n\r\n* Fix #4706: Comments after class name should go after the identifier that's after `class`, not the variable assigned to\r\n\r\n* Fix #4706: Top-level identifiers with trailing comments get wrapped in parentheses (around the comment too) so that Flow doesn't interpret it as a JavaScript label\r\n\r\n* Cleanup\r\n\r\n* If the source has parentheses wrapping an identifier followed by a block comment, output those parentheses rather than optimizing them away; this is a requirement of Flow, to distinguish from JavaScript labels\r\n\r\n* More tests for Flow comments\r\n\r\n* For local variables with trailing inline herecomments, output the comments up in the variable declarations line for Flow compatibility"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc883a21fa1e1f1a9e84",
    "number": 4750,
    "body": "Fixes https://github.com/webpack/webpack/issues/5831",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "I don't understand what you're doing here. `transpile` should not be `filename: filename` by default. We don't want a default, because we don't want to always transpile."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc893a21fa1e1f1a9e85",
    "number": 4744,
    "body": "Fixes #4742",
    "head_branch": "es-modules",
    "is_a_fork": true,
    "comments": [
      "Nice work! Thanks for taking this on."
    ],
    "commit_messages": [
      "Fix import/export list bug with aliased keywords (#4744)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc8a3a21fa1e1f1a9e86",
    "number": 4737,
    "body": "The handling of hoisted nodes in class bodies was incorrect, as the node was being unwrapped *before* checking if it was hoisted, meaning nodes that should have been hoisted would be output normally.\r\n\r\nThis affected `PassthroughLiteral`s as they were wrapped in a `Value`.\r\n\r\nFixes #4724.",
    "head_branch": "#4724",
    "is_a_fork": true,
    "comments": [
      "Excellent, thanks!"
    ],
    "commit_messages": [
      "Fix #4724 (#4737)\n\nThe handling of hoisted nodes in class bodies was incorrect, as the node\r\nwas being unwrapped *before* checking if it was hoisted, meaning nodes\r\nthat should have been hoisted would be output normally.\r\n\r\nThis affected `PassthroughLiteral`s as they were wrapped in a `Value`."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc8b3a21fa1e1f1a9e87",
    "number": 4736,
    "body": "Fixes #4706. Placement of comments around function parameter parentheses and around class names is improved; top-level identifiers with trailing comments are wrapped in parentheses, as required by Flow to distinguish them from JavaScript labels.\r\n\r\n@thejameskyle do you mind reviewing this? And especially testing it on a few non-trivial cases that you may have in your code. I think I covered all the cases you mentioned in #4706, except for the case of identifiers in an assignment wrapped in parentheses: `other = (arr ###: any ###)`. I think `other = arr: any` is always a syntax error, never a JavaScript label, so does it need parentheses? But all the other cases are covered; see `test/comments.coffee` in this PR.\r\n\r\n**EDIT**: Covered that last case.",
    "head_branch": "flow-generics",
    "is_a_fork": true,
    "comments": [
      "This looks awesome :)\r\n\r\n> I think `other = arr: any` is always a syntax error, never a JavaScript label, so does it need parentheses? \r\n\r\nI'm afraid Flow will only parse it as `other = (arr: any)`, the parenthesis are always required. ",
      "Okay, while I ponder that do you mind testing the other cases?",
      "Update: I figured out how to handle the `other = arr/*: any */` case. I think they’re all covered now.",
      "The use of Flow with CS2 is truly horrific. Nobody wants to see `###` all around. Instead Facebook assumed developers to miss `/*` and `*/` magically...You are totally ruining this.",
      "@stevefan1999 Sorry all these people are creating free stuff for you and expecting nothing in return.\r\n\r\nSorry people like @GeoffreyBooth and myself spend thousands of hours writing code, answering issues, writing documentation, speaking at conferences. Spending hundreds of thousands of dollars of our time and creating projects worth millions of dollars for which you pay nothing because we think it's the right thing to do. I can't imagine the pain you must be going through.\r\n\r\nI have an idea for you: Don't use it.\r\n\r\n@GeoffreyBooth Awesome, it's late now, but I'll take a look at this soon and try a bunch of stuff locally and report back.",
      "@thejameskyle I'm not trying to taunt @GeoffreyBooth but I would ditch Flow if I'm ever going to see a lot of `###`s, I'd call this \"pure anti-pattern\". And this would apply to probably everybody unless he/she is a sharps fanatic.\r\n\r\nOn the other hand, I'm sorry if I offended both you @thejameskyle @GeoffreyBooth",
      "@thejameskyle Thanks. I’m thinking it would be good to have a CoffeeScript file that included every part of the Flow comments-based syntax. Then I could test that the entire Flow syntax works by compiling that file to JS, then having Flow check it. This might become part of `cake test:integrations`.\r\n\r\nBut anyway that can be a separate pull request. If you can confirm that this PR works, I’ll merge it in, and if you have the time to generate such an example file, I’d love to include it in the project.",
      "@thejameskyle Do you think you’ll have time to check this soon?",
      "@thejameskyle or @connec, any notes on this? This is the last thing before we release 2.0.2.",
      "Hey sorry, been out of commission the last two days. I was looking for the parser tests in Flow but couldn't find them. I'll check this out now.",
      "```coffee\r\ntest \"#4706: Flow comments before class methods\", ->\r\n  eqJS '''\r\n  class Container\r\n    ###::\r\n    method: (number) => string;\r\n    method: (string) => number;\r\n    ###\r\n    method: -> true\r\n  ''', '''\r\n  var Container;\r\n\r\n  Container = class Container {\r\n    /*::\r\n    method: (number) => string;\r\n    method: (string) => number;\r\n    */\r\n    method() {\r\n      return true;\r\n    }\r\n\r\n  };'''\r\n\r\ntest \"#4706: Flow comments for class method params\", ->\r\n  eqJS '''\r\n  class Container\r\n    method: (param ###: string ###) -> true\r\n  ''', '''\r\n  var Container;\r\n\r\n  Container = class Container {\r\n    method(param/*: string */) {\r\n      return true;\r\n    }\r\n\r\n  };'''\r\n\r\n\r\ntest \"#4706: Flow comments for class method returns\", ->\r\n  eqJS '''\r\n  class Container\r\n    method: () ###: string ### -> true\r\n  ''', '''\r\n  var Container;\r\n\r\n  Container = class Container {\r\n    method()/*: string */ {\r\n      return true;\r\n    }\r\n\r\n  };'''\r\n```\r\n\r\nHere's some more tests cases for class methods",
      "There's also the question for how to handle class properties:\r\n\r\n```coffee\r\nclass Foo\r\n  prop: 1;\r\n```\r\n\r\nGet's compiled to:\r\n\r\n```js\r\nclass Foo {}\r\nFoo.prototype.prop = 1;\r\n```\r\n\r\nBut for that to work in Flow it needs a type annotation:\r\n\r\n```js\r\nclass Foo {\r\n  /*:: prop: number */\r\n}\r\nFoo.prototype.prop = 1;\r\n```\r\n\r\nThe easiest way to do that would be to write it like this:\r\n\r\n```coffee\r\nclass Foo\r\n  ###:: prop: number ###\r\n  prop: 1;\r\n```\r\n\r\nBut the output is currently:\r\n\r\n```js\r\nclass Foo {};\r\n\r\n/*:: prop: number */\r\nFoo.prototype.prop = 1;\r\n```",
      "Also with variables:\r\n\r\n```coffee\r\na ###: number ### = 1;\r\n```\r\n\r\nGenerates:\r\n\r\n```js\r\nvar a;\r\n\r\na/*: number */ = 1;\r\n```\r\n\r\nBut for that to work in Flow it should be:\r\n\r\n```js\r\nvar a/*: number */;\r\n\r\na = 1;\r\n```\r\n",
      "Another test case:\r\n\r\n```coffee\r\ntest \"#4706: Flow comments for function spread\", ->\r\n  eqJS '''\r\n  method = (...rest ###: Array<string> ###) =>\r\n  ''', '''\r\n  var method;\r\n\r\n  method = (...rest/*: Array<string> */) => {};'''\r\n```",
      "Class properties are still an experimental syntax, so they're only supported via backticks currently. #4724. So within that backticked block you could add the comment. \r\n\r\nSo aside from that, I should add these tests you're proposing, which I suppose all pass? Or you're welcome to, I've given you access. \r\n\r\nAnd then the only remaining thing for Flow is variable declarations? I'd rather tackle that in its own PR. Is everything in this one okay?",
      "@thejameskyle I’ve added the tests you posted above. See my last comment for class properties, and I’ve opened #4747 to track fixing comments to support Flow for local variable declarations.\r\n\r\nAnything else for this PR?",
      "@thejameskyle Please see also #4753. Once these two PRs are merged in I’ll cut a new release. Please try them on your project and let me know how it goes?"
    ],
    "commit_messages": [
      "Fix #4706: Flow generics (#4736)\n\n* Fix #4706: Comments before a PARAM_START token stay before that token\r\n\r\n* Simplify nodes\r\n\r\n* Add function-in-function test\r\n\r\n* Fix #4706: Comments after class name should go after the identifier that's after `class`, not the variable assigned to\r\n\r\n* Fix #4706: Top-level identifiers with trailing comments get wrapped in parentheses (around the comment too) so that Flow doesn't interpret it as a JavaScript label\r\n\r\n* Cleanup\r\n\r\n* If the source has parentheses wrapping an identifier followed by a block comment, output those parentheses rather than optimizing them away; this is a requirement of Flow, to distinguish from JavaScript labels\r\n\r\n* More tests for Flow comments"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc8c3a21fa1e1f1a9e88",
    "number": 4731,
    "body": "@cosmicexplorer @lydell This fixes the tests that have been failing in Windows. #4727.",
    "head_branch": "cosmicexplorer/fix-windows-test-failures",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #4727: Tests failing in Windows (#4731)\n\n* ?\r\n\r\n* ??\r\n\r\n* Revert the coffee.EXE approach\r\n\r\n* Explicitly define the PATH to include only the folders we need\r\n\r\n* Get spawnSync working in Windows\r\n\r\n* Simplify test to be cross-platform"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc8c3a21fa1e1f1a9e89",
    "number": 4730,
    "body": "This is a logical extension of #4525, adding support for `obj.set propertyName: propertyValue` etc.\r\n\r\n(Real-world example [here](https://github.com/philc/vimium/blob/abb32e2f2974832df08395ef7664561bb57c7324/background_scripts/commands.coffee#L43).)",
    "head_branch": "fix-4524",
    "is_a_fork": true,
    "comments": [
      "LGTM. @lydell?",
      "Looks good to me too.",
      "Thanks!"
    ],
    "commit_messages": [
      "Allow applying 'get'/'set' property to a bracketless object (#4730)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc8d3a21fa1e1f1a9e8a",
    "number": 4729,
    "body": "**Builds off of #4728, review that PR first.**\r\n\r\nThis PR makes `--transpile` work in the REPL:\r\n`coffee --interactive --transpile` or just `coffee --transpile`.\r\n\r\nTo test:\r\n```bash\r\n▶ ./bin/coffee --interactive --transpile\r\ncoffee> require('./test/importing/transpile_import').getSep()\r\n'/'\r\n```",
    "head_branch": "transpile-repl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Transpile REPL (#4729)\n\n* Fix #4725: apply transpile option to require’d .coffee files\r\n\r\n* Use the current module’s options if it has any, before going searching up the tree\r\n\r\n* Don’t mutate passed-in options object\r\n\r\n* If the REPL is run with `--transpile`, turn transpilation on for both the current REPL input and any files imported by that input\r\n\r\n* Use the command.coffee machinery for parsing arguments\r\n\r\n* Fix test for Windows"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc8e3a21fa1e1f1a9e8b",
    "number": 4728,
    "body": "Given these two files:\r\n\r\n`module.coffee`:\r\n```coffee\r\nimport path from 'path'\r\nexport getSep = -> path.sep\r\n```\r\n`main.coffee`:\r\n```coffee\r\nimport { getSep } from './module.coffee'\r\nconsole.log getSep()\r\n```\r\n\r\nRunning `coffee --transpile ./main.coffee` should print `/` (or `\\` on Windows). In other words, if the `--transpile` option is specified and we’re transpiling `main.coffee`, we should also transpile any .coffee files it imports. Fixes #4725.",
    "head_branch": "transpile-required-files",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #4725: apply transpile option to require’d .coffee files (#4728)\n\n* Fix #4725: apply transpile option to require’d .coffee files\r\n\r\n* Use the current module’s options if it has any, before going searching up the tree\r\n\r\n* Don’t mutate passed-in options object"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc8f3a21fa1e1f1a9e8c",
    "number": 4721,
    "body": "Fixes #3440. Currently `echo 'console.log \"hello, world!\"' | coffee --map --stdio` throws an exception, which isn’t good. This PR makes it print an error message instead.",
    "head_branch": "fix-stdio-map",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #3440: --stdio and --map don’t make sense to use together (#4721)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc903a21fa1e1f1a9e8d",
    "number": 4719,
    "body": "#4717, #4668 / #4712. http://rawgit.com/geoffreybooth/coffeescript/2.0.1/docs/v2/#changelog",
    "head_branch": "2.0.1",
    "is_a_fork": true,
    "comments": [
      "Looks good to me!"
    ],
    "commit_messages": [
      "2.0.1 (#4719)\n\n* 2.0.1 changelog\r\n\r\n* Version bump to 2.0.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc913a21fa1e1f1a9e8e",
    "number": 4718,
    "body": "Attempt to reproduce the official logo in ASCII :)",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Whoa, this is quite impressive. I guess a v2 release is a good a time as any to update this. @jashkenas?",
      "Fun!"
    ],
    "commit_messages": [
      "Update ASCII logo (#4718)\n\nAttempt to reproduce the official logo in ASCII :)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc923a21fa1e1f1a9e8f",
    "number": 4717,
    "body": "This PR finishes the “remove Babel as a dependency” work (#4703), and gets us out of the business of finding Babel’s options for it (#4713). The latter makes us more compatible with additional options, um, options, that Babel is introducing in Babel 7; and lessens our integration with Babel if we want to support additional transpilers in the future. The docs are also updated: http://rawgit.com/GeoffreyBooth/coffeescript/transpile-fixes/docs/v2/index.html\r\n\r\nI would appreciate help testing this, as there aren’t tests for running this via the command line. I’m also on a Mac, so anyone on Windows or Linux, your feedback would be especially appreciated. cc @loganfsmyth\r\n\r\nI think once this is merged in we should release a 2.0.1, that includes this and #4668 / #4712.\r\n\r\n@jashkenas, are you okay with the docs changes?",
    "head_branch": "transpile-fixes",
    "is_a_fork": true,
    "comments": [
      "I'm confused. I tried to trigger the \"you don't have babel installed\" error, but failed.\r\n\r\n```\r\n~/forks/coffeescript transpile-fixes\r\n❯ git log -1\r\ncommit 3528d8f1a0b035f905ee76cce83a08d2f3f59106 (HEAD -> transpile-fixes, geoffrey/transpile-fixes)\r\nAuthor: Geoffrey Booth <webmaster@geoffreybooth.com>\r\nDate:   2017-09-23 13:16:56 -0700\r\n\r\n    Docs cleanup\r\n\r\n~/forks/coffeescript transpile-fixes  \r\n❯ cd ..\r\n\r\n~/forks  \r\n❯ mkdir test\r\n\r\n~/forks  \r\n❯ cd test\r\n\r\n~/forks/test  \r\n❯ npm uninstall -g babel-core\r\nup to date in 0.046s\r\n\r\n~/forks/test  \r\n❯ look-up package.json .babelrc .babelrc.js\r\n\r\n~/forks/test  \r\n❯ node -e 'require(\"babel-core\")'\r\nmodule.js:491\r\n    throw err;\r\n    ^\r\n\r\nError: Cannot find module 'babel-core'\r\n    at Function.Module._resolveFilename (module.js:489:15)\r\n    at Function.Module._load (module.js:439:25)\r\n    at Module.require (module.js:517:17)\r\n    at require (internal/module.js:11:18)\r\n    at [eval]:1:1\r\n    at ContextifyScript.Script.runInThisContext (vm.js:44:33)\r\n    at Object.runInThisContext (vm.js:116:38)\r\n    at Object.<anonymous> ([eval]-wrapper:6:22)\r\n    at Module._compile (module.js:573:30)\r\n    at evalScript (bootstrap_node.js:435:27)\r\n\r\n~/forks/test  \r\n❯ echo test > test.coffee\r\n\r\n~/forks/test  \r\n❯ ../coffeescript/bin/coffee --transpile --compile test.coffee\r\n\r\n~/forks/test  \r\n❯ cat test.js\r\n// Generated by CoffeeScript 2.0.0\r\n(function () {\r\n  test;\r\n}).call(this);⏎                                                                        \r\n```\r\n\r\nIsn't the above supposed to have triggered the error? I'm on Ubuntu 16.04.",
      "@lydell I can’t explain what you’re seeing. I tried a controlled test using Docker. I created this Dockerfile:\r\n\r\n```dockerfile\r\nFROM node:latest\r\n\r\nCOPY ./entrypoint.sh /entrypoint.sh\r\n\r\nRUN chmod +x /entrypoint.sh\r\n\r\nENTRYPOINT /entrypoint.sh\r\n```\r\n\r\nwith this `entrypoint.sh`:\r\n\r\n```bash\r\n#!/bin/bash\r\n\r\nmkdir ~/project && cd ~/project\r\n\r\necho 'import path from \"path\"; echo path.sep' > ./test.coffee\r\n\r\nnpm install --global \\\r\n  https://github.com/GeoffreyBooth/coffeescript.git#transpile-fixes\r\n\r\ncoffee --transpile test.coffee || true\r\n\r\nnpm uninstall --global coffeescript\r\n\r\necho '{ \"private\": true }' > ./package.json\r\n\r\necho '{}' > ./.babelrc\r\n\r\nnpm install --save-dev \\\r\n  https://github.com/GeoffreyBooth/coffeescript.git#transpile-fixes\r\n\r\n./node_modules/.bin/coffee --transpile test.coffee || true\r\n```\r\n\r\nAnd ran `docker build . -t test` and then `docker run test`, and the latter produced this output:\r\n\r\n```\r\nnpm info it worked if it ends with ok\r\nnpm info using npm@5.3.0\r\nnpm info using node@v8.5.0\r\nnpm info lifecycle coffeescript@2.0.0~prepack: coffeescript@2.0.0\r\nnpm info lifecycle coffeescript@2.0.0~postpack: coffeescript@2.0.0\r\nnpm info lifecycle coffeescript@2.0.0~preinstall: coffeescript@2.0.0\r\nnpm info linkStuff coffeescript@2.0.0\r\n/usr/local/bin/coffee -> /usr/local/lib/node_modules/coffeescript/bin/coffee\r\n/usr/local/bin/cake -> /usr/local/lib/node_modules/coffeescript/bin/cake\r\nnpm info lifecycle coffeescript@2.0.0~install: coffeescript@2.0.0\r\nnpm info lifecycle coffeescript@2.0.0~postinstall: coffeescript@2.0.0\r\n+ coffeescript@2.0.0\r\nadded 1 package in 2.178s\r\nnpm info ok\r\nTo use --transpile with globally-installed CoffeeScript, you must have babel-core \r\ninstalled globally:\r\n  npm install --global babel-core\r\nAnd you must save options to configure Babel in one of the places it looks to\r\nfind its options, relative to the file being compiled or to the current folder.\r\nSee http://coffeescript.org/#transpilation\r\nnpm info it worked if it ends with ok\r\nnpm info using npm@5.3.0\r\nnpm info using node@v8.5.0\r\nnpm info lifecycle coffeescript@2.0.0~preuninstall: coffeescript@2.0.0\r\nnpm info lifecycle coffeescript@2.0.0~uninstall: coffeescript@2.0.0\r\nnpm info lifecycle coffeescript@2.0.0~postuninstall: coffeescript@2.0.0\r\nremoved 1 package in 0.062s\r\nnpm info ok\r\nnpm info it worked if it ends with ok\r\nnpm info using npm@5.3.0\r\nnpm info using node@v8.5.0\r\nnpm info lifecycle coffeescript@2.0.0~preinstall: coffeescript@2.0.0\r\nnpm info linkStuff coffeescript@2.0.0\r\nnpm info lifecycle coffeescript@2.0.0~install: coffeescript@2.0.0\r\nnpm info lifecycle coffeescript@2.0.0~postinstall: coffeescript@2.0.0\r\nnpm info lifecycle undefined~preshrinkwrap: undefined\r\nnpm info lifecycle undefined~shrinkwrap: undefined\r\nnpm notice created a lockfile as package-lock.json. You should commit this file.\r\nnpm info lifecycle undefined~postshrinkwrap: undefined\r\n+ coffeescript@2.0.0\r\nadded 1 package in 0.52s\r\nnpm info ok\r\nTo use --transpile, you must have babel-core installed:\r\n  npm install --save-dev babel-core\r\nAnd you must save options to configure Babel in one of the places it looks to\r\nfind its options.\r\nSee http://coffeescript.org/#transpilation\r\n```",
      "@lydell Wait, looking at your code again, it appears you’re running `bin/coffee` from a checkout of the repo? That could explain what you’re seeing, since the repo has a `devDependency` of `babel-core` and therefore `babel-core` is in the `node_modules` folder of the repo.\r\n\r\nWhat if you try `npm install`ing from this branch like I did? Or `npm install --no-optional coffeescript` (the released 2.0.0) and then manually replace the `lib` folder inside `/usr/local/lib/node_modules/coffeescript/` or `./node_modules/coffeescript` with the `lib` folder from this branch?",
      "Yep, when installing like you suggest I get the error message as expected.\r\n\r\nIsn’t that strange though? How can a babel-core installation in the node_modules/ of the coffeescript installation affect things?",
      "Yeah, but out of our responsibility I think. The mysteries of Node `require`.",
      "Looks pretty great! Thanks, @GeoffreyBooth.\r\n\r\nMy only minor quibble is that I'd probably try to trim down some of the language and redundancies around the transpilation instructions. Since (either now, or very shortly) you won't need Babel in order to use compiled CS2 for everything with the exception of JSX — it seems like we lean on folks a little too hard with instructions for installing it.",
      "@jashkenas will do, though it doesn’t look like Node is supporting `import` or `export` anytime soon: https://medium.com/the-node-js-collection/an-update-on-es6-modules-in-node-js-42c958b890c (from February 2017: “We’re currently looking at around a year _at least._”).\r\n\r\n@jashkenas and @lydell how do you feel about the use case of `--transpile` where we don’t know the filename?\r\n- Are there scenarios besides `--eval` or `stdin` that I’m not thinking of, where the compiler doesn’t know the filename?\r\n- Should we perhaps disallow `--transpile` in such scenarios (see @loganfsmyth’s comments above) or allow it while passing Babel the current folder to use to search for its options?\r\n\r\nThis is irrelevant for the Node API version of `transpile`, which always requires the options passed in directly as an object.",
      "I vote for using process.cwd for `--eval` and stdin.",
      "> @jashkenas will do, though it doesn’t look like Node is supporting import or export anytime soon: https://medium.com/the-node-js-collection/an-update-on-es6-modules-in-node-js-42c958b890c (from February 2017: “We’re currently looking at around a year at least.”).\r\n\r\nVery true, but if you're writing for Node with CS2 today, you can just use `require`. Much better than than transpiling w/Babel for Node.\r\n\r\n`process.cwd` for `--transpile` with no file sounds fine.\r\n\r\nIdle question, but does the `coffee` REPL work with `--transpile`? Should it?",
      "> does the `coffee` REPL work with `--transpile`? Should it?\r\n\r\nNo, and I think not at the moment. I don’t see any great need for REPL users to be able to use `import` statements or JSX. It might be nice to throw an error when someone runs `coffee --transpile --interactive` or `coffee --transpile`, but I don’t think that needs to be part of this PR.",
      "@jashkenas I’ve rewritten the transpilation section to make it slightly shorter and hopefully clearer:\r\nhttp://rawgit.com/GeoffreyBooth/coffeescript/transpile-fixes/docs/v2/index.html#transpilation\r\n\r\nI think the section should be somewhat hand-holdy, as there are a significant number of people out there who use the `coffee` command as the entirety of their build chain specifically because they want to avoid complexity, and I don’t want to scare them off from the complexity that `--transpile` adds to their process.\r\n\r\n@lydell and @jashkenas since you are good with the `process.cwd` approach, aside from the docs are there any other notes for this PR?"
    ],
    "commit_messages": [
      "Fix #4703, 4713: Transpile fixes (#4717)\n\n* Show an appropriate error if the user tries to use --transpile via the CLI and babel-core isn’t installed\r\n\r\n* Update documentation around global/local\r\n\r\n* Fix #4713: Use Babel’s built-in `filename` option to let Babel search for its options, rather than us doing so\r\n\r\n* Improve transpilation docs\r\n\r\n* Colons are good\r\n\r\n* Docs cleanup\r\n\r\n* Rewrite transpilation docs\r\n\r\n* Better identifier for compiled scripts that didn’t come from files; better resolving of paths"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc933a21fa1e1f1a9e90",
    "number": 4712,
    "body": "Reopened from #4668...",
    "head_branch": "backticked-expressions-in-class-body",
    "is_a_fork": true,
    "comments": [
      "@connec Any idea why the build failed? Something to do with force-pushing?\r\n\r\n@lydell do you have any notes on this?",
      "LGTM"
    ],
    "commit_messages": [
      "Fix #4464: backticked expressions in class body (#4712)\n\n* Fix #4464: backticked expressions in class body should be left in the body, not hoisted\r\n\r\n* Fix #4464: backticked expressions in class body should be left in the body, not hoisted\r\n\r\n* Simplify fix for #4464\r\n\r\nThis uses more of the existing machinery for moving class body\r\nexpressions into the initializer.\r\n\r\n* Clarify the purpose of Class::addInitializerExpression\r\n\r\n* Further clarify the purpose of Class::addInitializerExpression\r\n\r\n* Add reference to class fields; format\r\n comment wrapping\r\n\r\n* Reapply 1d3af8c4327791caa30f86d287c34036720b7254, that got lost because of rebase/force-push shenanigans\r\n\r\n* Updated output"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc943a21fa1e1f1a9e91",
    "number": 4709,
    "body": "I found [this discussion][1] talking about `let` and `const` to be\r\nhelpful to understand the decisions why these keywords were not added to\r\nCoffeeScript v2.\r\n\r\nIn particular, I think we can improve the documentation by linking to\r\nthese examples on the section about why they're unsupported. Basically,\r\nit comes down to using `do ->` to approximate `let` and `const`.\r\n\r\nI'm down to re-word anything here, and I also completely understand if\r\nthis is not something you want in the documentation.\r\n\r\n[1]: https://github.com/coffeescript6/discuss/issues/1",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "The issue with this is that such a detailed discussion of workarounds for the lack of `let` makes it sound like there’s some deficiency in the language, like “you can’t get block-scoped variables, but you need that functionality, so here’s the closest approximation of it.” The part about using function arguments to shadow outer variables is especially hacky; that’s basically taking advantage of a loophole in the compiler.\r\n\r\nIn the discussions around the design of CoffeeScript 2, it was seriously considered (https://github.com/coffeescript6/discuss/issues/62, https://github.com/coffeescript6/discuss/issues/58) that we would make a breaking change to make all variables block scoped, instead of always function scoped the way they are now. Ultimately we decided not to go that way because it would be a significant breaking change, that would prevent a huge number of projects from being able to upgrade; but I think it’s still on the table for a potential CoffeeScript 3. Ultimately I wanted CoffeeScript 2 to be a bridge to get all projects into the modern JS era, and to not fragment the community the way Python is split between 2 and 3. And we may still make the same decision about scoping when 3 comes along, as it might still be too drastic of a breaking change. The other option discussed was an operator where you could define whether a variable should be function-scoped or block-scoped (https://github.com/coffeescript6/discuss/issues/58), but that was rejected as then you lose the simplicity of not needing to think about variable declaration (all the more valued now that JavaScript has three ways to declare variables, between `var` and `const` and `let`, not to mention globals or function arguments etc.).\r\n\r\nI think ultimately if you’re needing to use `do ->` to create little pockets of scope, and especially if you’re using `do (outerVariable) ->` to shadow variables, you probably have functions that are way too long. That’s not a polite answer, which is why we don’t say that in the docs, but ultimately CoffeeScript is very much an opinionated language (this is one of its opinions) and the opinions make assumptions about how code should be written; see also the `get` and `set` keywords. Coffeelint looks like it’s getting updated for CS2, and there’s https://github.com/pwlmaciejewski/coffeelint-variable-scope that’s supposed to help catch errors involving variables across scopes, so maybe that’s another way to go."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc953a21fa1e1f1a9e92",
    "number": 4708,
    "body": "Fix doc",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Merge pull request #4708 from jz5/master\n\nFix link to logo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc963a21fa1e1f1a9e93",
    "number": 4707,
    "body": "- Fix #4702: Some changelog entries are too large.\r\n- Fix #4704: Back/forward not behaving as expected. Now new browser history items (which are cycled through by back and forward) only happen for user clicks on links; opening and closing Try CoffeeScript doesn’t count as a new history entry, and closing it retrieves the previous URL. The URLs still change on scroll, but scrolling doesn’t add to the browser history.\r\n- Eliminate the 1px jitter when initializing code editors.\r\n- Use Bootstrap’s breakpoints for the only-slightly-larger text on larger screens.\r\n- Use Bootstrap’s font size percentage and padding styling for the `<code>` element, to avoid misaligned baseline.\r\n- Buttons that just run the code block shouldn’t have a label, since in all the other examples the label signifies the command to be run.\r\n- Mobile Safari needs the code to be >= 16px, or else it will zoom in on it no matter what we put in the `<head>`.\r\n\r\nhttp://rawgit.com/GeoffreyBooth/coffeescript/docs-fixes/docs/v2/",
    "head_branch": "docs-fixes",
    "is_a_fork": true,
    "comments": [
      "This PR is mostly to double-check I didn’t break anything, since several recent commits did. And to clear that you both are okay with these changes.",
      "A few teeny adjustments:\r\n\r\n* Let's go from 1.5 to 1.7 on the body text line-height, to give it a little more breathing room.\r\n\r\n* Let's tweak the background padding on the `code {` rule to add:\r\n```\r\n    padding: 2px 8px;\r\n    line-height: 90%;\r\n```\r\n... so that the boxes slim down a little.\r\n\r\n* Let's set a `max-width` of `1050px` on the `section`s , to keep the text and code from stretching out awkwardly wide on big monitors.\r\n\r\n* On desktop-sized screens, for the code, let's go to font-size 14px, and line-height 20px (or em equivalents) to fit the code to the layout better. Let's unify that sizing across code, pre, and CodeMirror.\r\n\r\n* Not how to make the flexbox for it work, but it would be great if the sidebar had a max-width of around 380px, instead of continuing to expand on wide screens.\r\n\r\n* Our lists of resources and books need some margin. `margin-bottom: 20px` for the `li`s would do it.\r\n",
      "@jashkenas I’ve applied your notes, with a few caveats (let’s discuss):\r\n\r\n- The `code` was already `line-height: 90%` per Bootstrap, which comes to 20px. As for `padding: 2px 8px`, that makes the inline code background shorter but also wider; is that your intent? Were you meaning to adjust just the inline code, or the code blocks, or both?\r\n\r\n- I agree we should constrain the main column of text, but I want to avoid seeing word wrapping code in our side-by-side code examples. How about we follow [Bootstrap’s lead](https://getbootstrap.com/docs/4.0/getting-started/introduction/) and limit the width of text, while letting the editable code blocks fill all available width? Bootstrap does a `max-width: 80%` which feels about right. Since it’s a percentage, I’m only applying it to Bootstrap’s largest breakpoint (> 1200px).\r\n\r\n- I spent many fruitless hours trying to get the sidebar to have a “natural” width, the width it would get from the widest line of text, and no wider. That’s easily achievable with flexbox—_if_ you don’t use `position: fixed`. In other words, since the sidebar is outside of the flow of the main column, its flexboxness can’t “push against” the text of the main column, and an absolutely-positioned flexbox element naturally sizes to 100% wide. (It’s been a few weeks, so I’m sure I’m not explaining this correctly.) Long story short, I agree the sidebar is too damn wide on desktop, and it seems like slapping a `max-width` on there for large breakpoints should be an easy fix, but I dimly remember trying that and running into issues from that. So I left it as it is. Can we maybe punt that one to a future PR, so that it can get a more thorough review on its own? I know I ran into enough unexpected issues that it should get a more thorough check on various browsers, rather than messing with it quickly now.\r\n\r\n- I think all the list items could use some bottom margin, not just the ones in Resources. I gave them a little more than half the bottom margin that paragraphs get. I tried matching the paragraph bottom margin, but then they looked too spaced out IMO, especially in the changelog but also in the resources list (paragraphs get 21px). I gave a generous amount on the [announcement page](http://coffeescript.org/announcing-coffeescript-2/), though, but somehow I feel like it looks better there. Maybe because the lists are shorter.\r\n\r\nhttp://rawgit.com/GeoffreyBooth/coffeescript/docs-fixes/docs/v2/",
      "Looking good!\r\n\r\n* If we can't get the sidebar skinny on desktop for now, then yes, let's punt as a nice to have for later. I also tried with flexbox, and failed. I'm guessing a non-flex solution might work. \r\n\r\nOtherwise, looks great to me. Please merge.\r\n\r\n"
    ],
    "commit_messages": [
      "Docs fixes (#4707)\n\n* Mobile Safari needs the code to be >= 16px\r\n\r\n* Buttons that just run the code shouldn’t have a label, since in all the other examples the label signifies the command to be run\r\n\r\n* Use Bootstrap’s breakpoints\r\n\r\n* Use Bootstrap’s styling for the <code> element, to avoid misaligned baseline\r\n\r\n* Updated output\r\n\r\n* Fix #4704: use replaceState, so that back/forward only happen for user clicks on links; opening and closing Try CoffeeScript doesn’t count as a new history entry, and closing it retrieves the previous URL\r\n\r\n* Fix #4702: Some changelog entries are more equal than others\r\n\r\n* Updated output\r\n\r\n* Eliminate the 1px jitter when initializing code editors\r\n\r\n* On first time opening Try CoffeeScript, use just #try as the hash\r\n\r\n* Update output\r\n\r\n* Increase general body line spacing\r\n\r\n* Code styling per Jeremy\r\n\r\n* Don’t let the main text column grow unreasonably wide\r\n\r\n* Give list items some modest bottom margin (and use ems whenever possible)\r\n\r\n* Updated output"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc973a21fa1e1f1a9e94",
    "number": 4705,
    "body": "Just wanted to expand this so people know how to use both forms",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "This needs the generated output too: `cake doc:site`.",
      "Done",
      "Thanks!"
    ],
    "commit_messages": [
      "Add example of comment include type annotation (#4705)\n\n* Add example of comment include type annotation\r\n\r\n* build website"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc983a21fa1e1f1a9e95",
    "number": 4701,
    "body": "Okay folks, this is it. Since 2.0.0-beta5, PRs that involved changes to the compiler have been:\r\n- #4697: new `transpile` flag/option\r\n- #4698: source maps’ `sourcesContent` property\r\n- #4689: fix bug with comments in JSX\r\n\r\nChanges to the docs and build process have included a new separate page with a [CoffeeScript 2 announcement](http://rawgit.com/GeoffreyBooth/coffeescript/2.0.0/docs/v2/announcing-coffeescript-2/index.html), a big new section about [transpilation](http://rawgit.com/GeoffreyBooth/coffeescript/2.0.0/docs/v2/#transpilation), and revisions to lessen the “ES2015+” jargon in favor of plainer terms like “modern JavaScript.” Commits are now tested via Travis CI, and the docs have Google Analytics.\r\n\r\nThis PR makes the v2 docs the primary docs, with the v1 docs living on under `/v1/`. I also updated the v1 docs’ links and changed the “2 is coming” text. In this PR I removed the v1 docs source files from `master`, leaving just the generated output in the `docs/v1` folder; the v1 source files will live on in the `1` branch (the mirror of how things were when we had the `2` branch and v1 was on `master`). If the v1 docs ever need updating again, we can generate new v1 docs on the `1` branch and copy the generated `docs/v1` folder onto `master`, like I had been doing for the `2` branch.\r\n\r\nChanges to the docs in this PR include updating the changelog, links, and getting rid of `@next` from `coffeescript@next`: http://rawgit.com/GeoffreyBooth/coffeescript/2.0.0/docs/v2/\r\n\r\nSo . . . are we ready?",
    "head_branch": "2.0.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "2.0.0 (#4701)\n\n* Bump version to 2.0.0; bump dependencies versions\r\n\r\n* Make v2 docs the primary docs; jettison the v1 docs’ source: whenever the v1 docs need to be rebuild in the future, that can be done on the `1` branch and copied over; simplify folder tree\r\n\r\n* Updated v1 docs that reflect that v2 is out and have updated paths to reflect that the v2 docs are now the primary docs, and the v1 docs only live under /v1/\r\n\r\n* Add Google Analytics; track navigation, editing code and running code\r\n\r\n* 2.0.0 changelog\r\n\r\n* Fix link to root docs\r\n\r\n* No more @next; installing local copy should be --save-dev\r\n\r\n* Analytics on the browser-based tests page should prove fascinating . . .\r\n\r\n* Update annotated source\r\n\r\n* Add note to changelog clarifying scope"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc993a21fa1e1f1a9e96",
    "number": 4700,
    "body": "See https://github.com/jashkenas/coffeescript/pull/4697#issuecomment-329857443\r\n\r\nRevised the Transpilation section of the docs per @lydell’s suggestions. Also revised the CoffeeScript 2 and Compatibility sections.\r\n\r\nhttp://rawgit.com/GeoffreyBooth/coffeescript/transpilation-docs/docs/v2/",
    "head_branch": "transpilation-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update transpilation docs (#4700)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc9a3a21fa1e1f1a9e97",
    "number": 4698,
    "body": "Fixes #4342. This PR always outputs the `sourcesContent` property as part of the source map, whether inline map or written-to-disk map.\r\n\r\nCurrently we output `sourcesContent` only for inline maps, which doesn’t make much sense, as it’s really more useful to save in `.map` files. Babel outputs this property for both inline and saved-to-disk source maps, and I think we should do the same.",
    "head_branch": "sources-content",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #4342: Always output `sourcesContent` property as part of source map, whether inline map or written-to-disk map (#4698)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc9b3a21fa1e1f1a9e98",
    "number": 4697,
    "body": "See #4696. This PR adds a `--transpile` option that lets the user tell the CoffeeScript compiler to pipe its output through Babel, with source maps updated in the process.\r\n\r\nI discovered that Babel has [an option called `inputSourceMap`](https://github.com/babel/babel/issues/827) that takes a v3 source map object (like that we output) and it _updates it_ as needed after Babel’s transpilation. So I can just use that, I think, rather than doing any fancy footwork myself [like the Meteor package is doing](https://github.com/meteor/meteor/commit/73ed3ff27a6ba686c06438ca1bb8e8d34d628bac). Babel also will apparently automatically update inline source maps it finds in the code it is sent as input, but it won’t do both (update the object and the comment). Since we always generate the object, whether we output it inline in a comment or saved as a `.map` file, I chose to just always use `inputSourceMap` and we can convert it to the inline comment like we already were.\r\n\r\nThe tricky part of this was finding the options to send to Babel. It has automatic functionality to look for a `.babelrc` file up the path of whatever file it’s given as input, but the CoffeeScript compiler will always be sending Babel a string of code, rather than a string file path. So we need to find the `.babelrc` file (or a `package.json` file with a `babel` key) ourselves, and parse it and pass the options to Babel. For the Node API this is much easier, as the user can just pass an object as the value of the `transpile` option (and must, since the Node API always takes a string as input).",
    "head_branch": "transpile-with-babel",
    "is_a_fork": true,
    "comments": [
      "Okay @lydell I think this is ready for review. How to test the CLI (most common options):\r\n\r\n```bash\r\n➜  cd /tmp\r\n➜  mkdir transpile-test\r\n➜  cd transpile-test\r\n➜  npm install https://github.com/GeoffreyBooth/coffeescript.git#transpile-with-babel\r\n➜  npm install babel-core babel-preset-env\r\n➜  echo \"import path from 'path'\\nconsole.log path.sep\" > test.coffee\r\n➜  echo '{ \"presets\": [\"env\"] }' > .babelrc\r\n➜  coffee --transpile --bare --no-header --print ./test.coffee\r\n'use strict';\r\n\r\nvar _path = require('path');\r\n\r\nvar _path2 = _interopRequireDefault(_path);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconsole.log(_path2.default.sep);\r\n➜  coffee --transpile ./test.coffee\r\n/\r\n➜  coffee --transpile --eval \"import path from 'path'; console.log path.sep\"\r\n/\r\n➜  coffee --transpile --bare --no-header --compile --map --inline-map ./test.coffee\r\n➜  cat ./test.js.map\r\n{\r\n  \"version\": 3,\r\n  \"file\": \"test.js\",\r\n  \"sourceRoot\": \"\",\r\n  \"sources\": [\r\n    \"test.coffee\"\r\n  ],\r\n  \"names\": [],\r\n  \"mappings\": \";;AAAA,AAAO,AAAP;;;;;;AACA,AAAO,QAAC,AAAR,IAAY,AAAI,eAAC,AAAjB\",\r\n  \"sourcesContent\": [\r\n    \"import path from 'path'\\nconsole.log path.sep\\n\"\r\n  ]\r\n}\r\n➜  ./cat test.js\r\n'use strict';\r\n\r\nvar _path = require('path');\r\n\r\nvar _path2 = _interopRequireDefault(_path);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconsole.log(_path2.default.sep);\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRlc3QuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsQUFBTyxBQUFQOzs7Ozs7QUFDQSxBQUFPLFFBQUMsQUFBUixJQUFZLEFBQUksZUFBQyxBQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5jb25zb2xlLmxvZyBwYXRoLnNlcFxuIl19\r\n//# sourceURL=/private/tmp/test.coffee\r\n//# sourceMappingURL=test.js.map\r\n```\r\n\r\nThe key here is that I created a `.babelrc` file. You can also add a `babel` key to your `package.json`:\r\n```bash\r\n➜  rm .babelrc\r\n➜  coffee --transpile ./test.coffee\r\nTo use the transpile option, there must be a .babelrc file\r\n(or a package.json file with a \"babel\" key) in the path of the file\r\nto be compiled, or in the path of the current working directory.\r\nIf you are compiling a string via the Node API, the transpile option\r\nmust be an object with the options to pass to Babel.\r\nSee http://coffeescript.org/#usage\r\n➜  echo '{ \"name\": \"test\", \"version\": \"0.0.1\", \"babel\": { \"presets\": [\"env\"] } }' > package.json\r\n➜  coffee --transpile ./test.coffee\r\n/\r\n```\r\n\r\nI added tests for the various ways to use `transpile` from the Node API. Are there any additional tests that this needs?",
      "Thanks for checking the source maps. I was struggling to figure out how to write a test around those, without adding `source-map` as a dependency (which I guess wouldn’t be so bad, as it would only be a dev dependency). Is the current “merged source map” test robust enough, do you think? I guess all it really needs to do is test that the source map isn’t the same as CoffeeScript’s normal one, in which case Babel did _something,_ and if that something wasn’t correct it’s a bug on Babel’s part. I’m going at least a little beyond that though.",
      "I think the source map test is very clever and should be enough. Source maps are hard to test anyway. Not sure using the source-map package would help.",
      "Updated docs: http://rawgit.com/GeoffreyBooth/coffeescript/transpile-with-babel/docs/v2/\r\n\r\n(Updated the CoffeeScript 2 and Usage sections, added new Compatibility section, added new Usage: Transpilation subsection. Applied some of the same notes from #4695).",
      "Also I think we’re okay to go straight to 2.0.0 with this? Skipping one last beta.",
      "Yeah, I don’t think a beta is required for this feature.",
      "Do we want to provide a default configuration somehow? Like if they don’t specify a Babel config, it checks that `babel-preset-env` is installed and loads `{ \"presets\": [\"env\"] }`. Or is that too prescriptive?\r\n\r\nI’m just looking at http://coffeescript.org/v2/#transpilation and thinking it looks like a lot of steps.",
      "That sounds too magic to me. Besides, there's just three steps:\r\n\r\n```\r\nnpm install --save-dev babel-core babel-preset-env\r\necho '{ \"presets\": [\"env\"] }' > .babelrc\r\ncoffee --transpile ...\r\n```\r\n\r\nWhat you could to is reorganizing the transpilation in the docs. I'll come back with what I mean soon.",
      "My idea is to start the section in a TL;DR way so you can quickly find how to get something going, and then go into more details and explanations. For example, we could start the section something like this:\r\n\r\n---\r\n\r\nCoffeeScript 2 generates JavaScript that uses the latest, modern syntax. Your runtime might not support all of that syntax. If so, you need to _transpile_ the JavaScript. There are several tools that can do that. But to make things a little easier, CoffeeScript has built in support for the popular [Babel](http://babeljs.io/) transpiler. This is how you use it:\r\n\r\n```bash\r\nnpm install --save-dev babel-core babel-preset-env\r\necho '{ \"presets\": [\"env\"] }' > .babelrc\r\ncoffee --transpile --compile --map some-file.coffee\r\n```\r\n\r\nIn other words, if you have installed and configured Babel, the `--transpile` flag will tell `coffee` to use Babel on the generated JavaScript.\r\n\r\n----\r\n\r\n... and then glue the above into the rest of what you've written (which is great, btw). I don't know, you are a better documentation writer than me, but I hope you get what I mean and can come up with something :)",
      "Yeah, I like this. It's the “Quickstart” approach, where you drop some terse commands or steps first and then follow with the same instructions with explanation. Transpilation is important enough, and difficult enough, to be worth the detail I think.",
      "@loganfsmyth This feature is only a week old, so if there’s a better way you’d recommend users get config info into Babel I can still change it.\r\n\r\nThe reason we went down this road, of the CoffeeScript compiler searching for a `.babelrc` file or `package.json` with a `babel` key, is that I didn’t want the compiler to write an intermediate file and then tell Babel to transpile that; I wanted to take the JS output by the CoffeeScript compiler and send it as a string to Babel, and only write to disk what Babel returned. Since Babel wasn’t opening a file, it had no point of reference from which to search for a `.babelrc` file or similar; so we needed to pass in the config. This meant us replicating Babel’s functionality of searching for the `.babelrc` file or `package.json` `babel` key. We deliberately copied how Babel expects to do it, so that the systems would be interchangeable (i.e. if someone wants to transpile via Gulp or Webpack etc. instead of using `--transpile`, they’re already good to go). Is Babel 7 changing anything about where it expects to find options, e.g. `.babelrc` file or `package.json` `babel` key?\r\n\r\nThe reason not to send Babel a file path is because the compiler might be compiling a whole folder (or folder tree)’s worth of files, and calling Babel for each compiled file, and I didn’t want Babel to have to go read the options file every time. It’s more efficient if the CoffeeScript compiler reads the options into memory once, and just passes them to Babel over and over for each file.\r\n\r\nAssuming Babel 7 doesn’t have any API changes that will break this API, I’m happy to change the version constraint to `>=6` or whatever you’d recommend. And yes, I’m okay with Babel being automatically installed for most users. Most users will and should be transpiling CoffeeScript 2’s output. The only situation where you shouldn’t is if you’re running the output under Node 8 and you’re careful not to use modules or JSX. If you’re in that minority, or you want to use a different transpiler other than Babel (and you care if Babel appears in your `node_modules`) then yeah, they can do some research and install with `--no-optional`. But since most people will probably have Babel installed anyway, I don’t think it’s too much of a concern.\r\n\r\nAnd one final note: this is really aimed as a convenience for users running code via the `coffee` command. That’s a larger community than I would’ve thought, as dev ops shell-scripting people apparently love using CoffeeScript as an alternative to Bash `.sh` files (the two syntaxes do look a lot alike) and others just like the simplicity of not having to deal with sophisticated build chains. But most serious users I would expect are using something like Webpack or Gulp or Browserity with Coffeeify, and so they’ll chain Babel with that rather than using this option. Or if they do use this option with one of those tools, it will be via the Node API where the Babel options are required to be passed in as an object, so the “where to find the file” issue isn’t a concern.",
      "> The reason we went down this road, of the CoffeeScript compiler searching for a .babelrc file or package.json with a babel key, is that I didn’t want the compiler to write an intermediate file and then tell Babel to transpile that; I wanted to take the JS output by the CoffeeScript compiler and send it as a string to Babel, and only write to disk what Babel returned.\r\n\r\nYou can set `.filename` in options object for `babel.transform` and it'll resolve the `.babelrc` automatically. I agree that temporary files would be awful :)\r\n\r\n> Is Babel 7 changing anything about where it expects to find options, e.g. .babelrc file or package.json babel key?\r\n\r\nBabel 7.x includes a `.babelrc.js` support for arbitrarily generating a config based on environmental variables, and exposes a programmatic caching API so that the config is only re-evaluated if the env vars change, and we're planning to encourage people to move to that rather than the current `env` block we have now that confuses everyone.\r\n\r\nIn both 6.x and 7.x, `.babelrc` files can also include `extends` blocks that reference other files. With this logic, you've loaded that and passed it programmatically, so those paths will resolve relative to the wrong location.\r\n\r\n> The reason not to send Babel a file path is because the compiler might be compiling a whole folder (or folder tree)’s worth of files, and calling Babel for each compiled file, and I didn’t want Babel to have to go read the options file every time.\r\n\r\nBabel includes caching for all of the config lookups because of this exact concern, and in 7.x it's even better. Babel's own compilation steps are implemented as one-off calls to `babel-core` and at least since the caching was added long ago, I don't think we've ever heard complaints about it. I'd be extremely surprised if it was even a reasonable fraction of the total time Babel spends doing the actual transformation of files.\r\n\r\n> Assuming Babel 7 doesn’t have any API changes that will break this API, I’m happy to change the version constraint to >=6 or whatever you’d recommend.\r\n\r\nThe problem is that the user needs to know. None of Babel's core transforms are compatible across versions. The expectation is that users of Babel 7.x will use the `7.x` versions of Babel's plugins and presets. We've done our best not to _break_ APIs, so chances are things could work across versions fine, but all the plugins written for 7.x are probably going to have assertions that they are being processed with the right version of `babel-core`. If coffeescript included `>=7`, that means that when we release Babel 7.x, and people have established configs written with Babel 6.x in mind, it would break those users.\r\n\r\n> And one final note: this is really aimed as a convenience for users running code via the coffee command.\r\n\r\nI totally respect that goal, but I think if you want to achieve that, you'd have to fully bundle Babel, ditch resolution of config files entirely, and expose your own babel-specific config options from Coffeescript itself. The users need to know what version their plugins work on, and need to decide which version to use.",
      "So what do you recommend? I pass in to Babel’s `filename` the path and filename of the original source `.coffee` file, and it uses that to search for its options using its usual logic? And then I can remove all this code of the CoffeeScript compiler looking for the options. The instructions in the docs actually wouldn’t need to change, since the same rules would apply (?) for users to define how to configure Babel.\r\n\r\nAnd this only applies to `--transpile` from the CLI. Running CoffeeScript from Node doesn’t do any file system searching, it just requires the options get passed in as an object, which is forwarded on to Babel.",
      "Yep! As far as I'm aware passing `filename` should work nicely.",
      "Okay, and it won’t matter that it’s the filename of the `.coffee` file? Does Babel use `filename` for anything other than options lookup, and I’m assuming it also uses it to populate the source map object?\r\n\r\nAnd does any of this change in 7? Remember that I’m relying completely on the user to define their own options, so it’s on them to craft an appropriate `.babelrc` or `.babelrc.js` file that works for them and their installed version of Babel.",
      "> Okay, and it won’t matter that it’s the filename of the .coffee file?\r\n\r\n`.filename` is used for config resolution, source maps, error messages, and it is exposed to users in plugins. None of that cares about file extensions though, so you should be fine. We've got enough random file extensions going through Babel already with `.es6`,`.jsx`, and `.mjs` and such. One more won't hurt :)\r\n\r\n> And does any of this change in 7?\r\n\r\nNothing in the programmatic interface for Babel. If you wanted to limit things to 6.x until 7.x is out and official and tested, we export `.version` from `babel-core`, so you could add an assertion there for now and remove it later as a non-breaking change. That said, I don't expect anything breaking to change on the public interface of `babel-core`.",
      "@GeoffreyBooth\r\n\r\n> And yes, I’m okay with Babel being automatically installed for most users\r\n\r\nI thought we all agreed that we _don't_ want Babel to be automatically installed?",
      "> I thought we all agreed that we _don’t_ want Babel to be automatically installed?\r\n\r\nYes, that would be ideal. That’s what I thought `optionalDependencies` did, but clearly I was wrong. See https://github.com/jashkenas/coffeescript/issues/4703, let’s continue discussing this over there.",
      "One last question @loganfsmyth: Is the `filename` setting documented anywhere as the starting point for Babel to search for its options? In https://babeljs.io/docs/usage/api/#options all it says about `filename` is that it’s used for error reporting. I don’t want to rely on this setting and then someday Babel stops using it for compilations of strings, since perhaps someone else on the Babel team might not consider that a breaking change since the current behavior is undocumented.",
      "Nah it's definitely used for more than that, guess that's just our docs lacking detail. It'd break all kinds of things if that ever changed without a new major version, and that won't be changed in 7.x."
    ],
    "commit_messages": [
      "Option to transpile with Babel (#4697)\n\n* Upgrade Babeli (now babel-minify) which fixes the bug that was forcing us to run Babel twice for transpilation\r\n\r\n* Add --transpile option (WIP)\r\n\r\n* Node API always compiles a string, so it doesn’t need the option to pass a path to an options file, it can always just pass an object to `transpile`; get `transpile` working with `eval`\r\n\r\n* Not allowing argument to `--transpile` so don’t need to cover so many cases\r\n\r\n* Don’t need to worry about `sourceMaps` option to pass to Babel, `inputSourceMap` overrides it\r\n\r\n* Rewrite Webpack test to use Node API\r\n\r\n* Make the compiler safe again for browsers and Webpack/Browserify\r\n\r\n* Node version of CoffeeScript.compile passes reference to Babel if transpile is requested\r\n\r\n* Test Node API for transpile option\r\n\r\n* Test for merged source maps\r\n\r\n* Test for Node API error message\r\n\r\n* Only stop searching for Babel options if a package.json has a truthy \"babel\" key\r\n\r\n* Update docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc9c3a21fa1e1f1a9e99",
    "number": 4695,
    "body": "See https://github.com/GeoffreyBooth/coffeescript/blob/announcing-2/documentation/sections/announcing_coffeescript_2.md\r\n\r\nFeedback very much welcome. This feels too long, yet I also feel like I’m missing topics that should be covered. There are also no code samples in this, though I’m not sure where I’d add any (especially not if I want to avoid this getting really really long).\r\n\r\nFor the final product I’ll find a way to output this like the current docs page, and save it into `/docs/v2/announcing-coffeescript-2/index.html` so that it appears at http://coffeescript.org/announcing-coffeescript-2/ once we launch 2.0.0 and make the 2 docs the primary docs.\r\n\r\n@jashkenas @lydell @connec ",
    "head_branch": "announcing-2",
    "is_a_fork": true,
    "comments": [
      "I guess the question is, who is the audience for this article? I feel like it should probably be written for the developer who may have heard of ES6, but isn't clear that it's the same as ES2015; as in, people who don't follow these topics closely.\r\n\r\n_Does_ it feel too long, or should I not worry about length?",
      "I don’t think it’s too long.",
      "It's a 10-minute read for slow readers. It's perfect, no need to touch it. :)",
      "My thoughts:\r\n\r\n\"clean, elegant\" is a little horn-tooting. How about just \"clean\".\r\n\r\nAll of the \"ES2015+\" and \"ES2017\" monikers, and the ECMA history lesson is confusing, and a little beside the point. Let's just call it \"modern JavaScript\", or \"modern JS\", and later just \"JS\", and axe the \"Quick History Lesson\".\r\n\r\n`=>` was not adopted directly from CoffeeScript. It was in other languages earlier, and ES4 had it on the roadmap before CoffeeScript existed.\r\n\r\n> \"but simply put: let and const and named functions aren’t necessary for compatibility or interoperability with other libraries, and supporting them would add unwanted complexity to CoffeeScript\"\r\n\r\nIt's not so much about \"unwanted complexity\", just that they don't fit in to CoffeeScript. We purposefully leave them out.\r\n\r\nThe Future Compatibility section feels a little overly Babel-specific. Don't Traceur and Bublé work too? And whatever transpiler becomes popular next year? Seems like this section could be shrunk a bit to just state our Stage 4 syntax support policy and mention the transpilers you can use for broader compatibility.\r\n\r\nFinally, it would be nice to sneak in a small mention that CoffeeScript 1.X still does and will continue to exist. If you want to target lowest-common-denominator JS, which still exists under rocks and in dark corners (Illustrator, remote countries, embedded systems, grandparents), you still can.\r\n",
      "Agree with most of the above.\r\n\r\n> Finally, it would be nice to sneak in a small mention that CoffeeScript 1.X still does and will continue to exist. If you want to target lowest-common-denominator JS, which still exists under rocks and in dark corners (Illustrator, remote countries, embedded systems, grandparents), you still can.\r\n\r\nI would argue that if you want lowest-common-denominator JS, you should still use CS2 and just transpile your output. I don’t see any benefit to CS1 over CS2-plus-Babel, other than that compilation is faster. Though with CS1 and no transpilation, you need to be careful not to use modules or tagged template literals or generators, the “modern JS” features we added to CS1 without conversion down to ES3/ES5 compatibility. That’s quite a caveat to make sure to remember, though, so the docs should probably be conservative and recommend transpilation (i.e. a post-CoffeeScript compiler Babel step, or #4697) even for CS1, in which case CS1 offers nothing over CS2.",
      "Fair enough!",
      "@jashkenas I tried to revise per your notes. Not sure I got it quite right regarding `let`/`const`; maybe I’m better off just not giving a reason here and letting the docs speak for us, assuming you don’t have any notes to that section of the docs (?).\r\n\r\nI hadn’t heard of Bublé, it looks cool. Traceur Compiler hasn’t been updated in a year, so I’m not sure how bright its future is, though it is supported by Google. One thing that I found interesting is that all three transpilers support JSX. This reinforces my feeling that we were right to add support for JSX into CoffeeScript.",
      "Re: `var/let/const` — probably better to omit the reason from this page ... because this version ain't quite right either.\r\n\r\nWhile it's the case that everything in CoffeeScript is an expression, and we don't declare variables — that's not really the reason why we don't support `var/let/const`. We could have added different assignment operators for each, or allowed the standard prefix modifiers and just shifted them up to the declaration line at the top of the block.",
      "Okay, hopefully this should be it. Any last notes?\r\n\r\nIf this text is good I’ll convert this into an HTML file like our docs. I’ll just do it once semi-manually, I don’t think I want to create a new `cake` task for this that won’t ever get used again.",
      "Take a look: http://rawgit.com/GeoffreyBooth/coffeescript/announcing-2/docs/v2/announcing-coffeescript-2/\r\n\r\nWhat do you all think?"
    ],
    "commit_messages": [
      "CoffeeScript 2 announcement (#4695)\n\n* CoffeeScript 2 announcement, first draft\r\n\r\n* Lydell's notes\r\n\r\n* Jeremy’s notes; Rollup is not a transpiler\r\n\r\n* Revise “unsupported features” section\r\n\r\n* Fix links, invalid HTML\r\n\r\n* Announcing CoffeeScript 2 HTML page\r\n\r\n* Link to the announcement\r\n\r\n* Add some references\r\n\r\n* Fix anchors\r\n\r\n* Better example"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc9d3a21fa1e1f1a9e9a",
    "number": 4690,
    "body": "Adds a `.travis.yml` to build and test using Travis CI. This tests in both Node 6 and 8, using _all_ the tests (Node, browser compiler, integrations). This should help prevent future PRs that break the compiler in Node 6; PRs where the submitter forgets to commit the files in `lib` or to compile twice; and PRs that break the browser tests. See https://travis-ci.org/GeoffreyBooth/coffeescript/builds/273166849\r\n\r\nTask for future improvement: [integrate headless Chrome](https://docs.travis-ci.com/user/gui-and-headless-browsers/#Using-the-Chrome-addon-in-the-headless-mode) to load `test.html` and see if the tests all pass in a real browser, as opposed to Node masquerading as one.",
    "head_branch": "travis-ci",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "First pass at using Travis CI (#4690)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc9e3a21fa1e1f1a9e9b",
    "number": 4689,
    "body": "Fixes #4686, at least for the examples in that issue. @jaredp, can you please try this PR on some more complex code and let me know if it works for more complicated cases?\r\n\r\nSo CSX/JSX is really just a StringWithInterpolations where the `<`/`>` characters are treated as the string delimiters (i.e. like quotation marks). And just like with ES2015 template literals (strings delimited by backticks) braces are used to delimit interpolations; but where ES2015 uses `${` to denote the start of an interpolation, JSX uses just `{`. CoffeeScript’s version of JSX follows JSX’s lead.\r\n\r\nOne type of “interpolation,” as far as the compiler is concerned, is a child JSX tag:\r\n```jsx\r\n<div>\r\n  <div />\r\n</div>\r\n```\r\nYou _could_ write this with braces:\r\n```jsx\r\n<div>\r\n  {<div />}\r\n</div>\r\n```\r\nAnd it would be equivalent, and Babel’s JSX transform would produce exactly the same output. The braces here are redundant, like an extra pair of parentheses, so you won’t find much handwritten JSX code looking like this. The CoffeeScript compiler has a special check to omit these braces when compiling a JSX tag inside another JSX tag.\r\n\r\nThat special check, however, wasn’t accounting for comments. If there are comments attached to that inner `div`, that would cause them to appear on the line above the element, those comments need to trigger braces to wrap both the comments and inner JSX tag:\r\n\r\n```cjsx\r\n<div>\r\n  {\r\n    # comment\r\n    <div />\r\n  }\r\n</div>\r\n```\r\n```jsx\r\n<div>\r\n  {  // comment\r\n<div />}\r\n</div>;\r\n```\r\n\r\nAdmittedly, the indentation of the output is terrible, but Babel doesn’t care. It treats this comment as a comment, not part of the HTML content. Ditto for attributes:\r\n\r\n```cjsx\r\n<div>\r\n  <div anAttr={\r\n    # comment\r\n    \"value\"\r\n  } />\r\n</div>\r\n```\r\n```jsx\r\n<div>\r\n  {  // comment\r\n<div anAttr={\"value\"} />}\r\n</div>;\r\n```\r\n\r\nThis PR is a one-line fix, so ~~how much harm could it do~~ hopefully it doesn’t affect too much. @xixixao, do you mind taking a look?",
    "head_branch": "comments-in-jsx-bug",
    "is_a_fork": true,
    "comments": [
      "@lydell or @connec?",
      "A quote from the first section on coffeescript.org:\r\n\r\n> The compiled output is readable, pretty-printed\r\n\r\nI don't think the indentation of the output is acceptable. But it is definitely not enough to hold up the 2.0 release. It can always be improved later.\r\n\r\nI think this looks good to merge.",
      "There’s also #4692, I think fixing that one should cover fixing the indentation of the output.\r\n\r\n@jaredp, did you get a chance to try this PR on your project?",
      "lgtm"
    ],
    "commit_messages": [
      "Fix #4686: if a CSX interpolation contains comments, not just inner CSX (JSX) tags, it needs to be wrapped in braces (#4689)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfc9f3a21fa1e1f1a9e9c",
    "number": 4688,
    "body": "The CS2 docs are currently borderline unusable on a phone. This PR aims to fix that. In particular:\r\n\r\n- The code examples don’t become editable until you hover over (or tap/click) them. This lets us avoid initializing a few dozen copies of CodeMirror on startup. The non-editable code still has syntax highlighting generated by CodeMirror, but it’s generated at compile time and baked into the HTML. The initialization of CodeMirror should be almost unnoticeable.\r\n- “Try CoffeeScript” is now available on mobile.\r\n- On smaller breakpoints, the sidebar now slides over the main text rather than pushing the main column out of the way. This is much faster for browsers to render.\r\n- The code for the docs themselves is now compiled into JavaScript during docs compilation, not via the browser compiler when the docs load. (Previously, Safari 9 was throwing an error on some syntax we use in the docs code; and that’s too new of a browser to not support.) Having the docs code already in JavaScript (and minified) beforehand is faster anyway.\r\n- Various fixes for mobile styling and Bootstrap 4 Beta.\r\n- Improved handling of hashes, including avoiding `/#`.\r\n\r\nTake a look: http://rawgit.com/GeoffreyBooth/coffeescript/docs-perf/docs/v2/",
    "head_branch": "docs-perf",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Fix CS2 docs mobile issues, improve performance (#4688)\n\n* Get rid of offcanvas slide-in; fix sidebar\r\n\r\n* We need to transpile docs.coffee, since Safari 9 throws an error on it and that’s too new a browser not to support; but this should also speed things up\r\n\r\n* Fix some tabs\r\n\r\n* Fix scrollbar\r\n\r\n* Use Highlight.js to format placeholder code (during compilation, not rendering) before CodeMirror loads; match Highlight.js styles to CodeMirror styles as best we can\r\n\r\n* Improve hash management\r\n\r\n* Initialize CodeMirror on demand, on mouseover a particular code example, rather than all examples on startup\r\n\r\n* Replace highlight.js with Prism for placeholder syntax highlighting\r\n\r\n* Scratch Prism, use CodeMirror itself to do Node-based syntax highlighting, so that on CodeMirror initialization there’s no flash from mismatched highlighting\r\n\r\n* Update packages; there’s a new version of Jison! (doesn’t change much)\r\n\r\n* Fix mobile issues: use SVG play button icon, to avoid iOS blue square play button; make the code editor text 16px size explicit, to avoid unwanted mobile zoom; make the ‘code play’ buttons work even if the code examples are in placeholder (non-editable) mode, in case a user hasn’t moused over/tapped them\r\n\r\n* Update docs output\r\n\r\n* Whoops, CodeMirror is only a devDependency"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfca03a21fa1e1f1a9e9d",
    "number": 4683,
    "body": "@GeoffreyBooth in looking at #4673, it turned out to be related in a way to #4657 (which is a bug and should be open). So this should fix both\r\n\r\n#4673 has a lot of other broken cases (really most non-identifier splat \"variables\" in an object spread destructure) eg `{a.b...} = c`, `{{d}...} = e`. Including corresponding broken cases for destructured object params eg `({@a...}) ->`. I think all of these (including @connec's example in #4673) should compile based on what ES6 allows and what types of \"variables\" are allowed in other types of destructurings. But all are currently emitting crazy declarations for the \"variable\" eg `var a.b`\r\n\r\nSo it seemed like the cleanest way to get them all compiling correctly would be to fall back to `Assign`'s understanding of how to compile assignments with more complex left-hand-sides (including when to declare a `var`). This meant getting rid of `setScopeVar()`, which was sort of the culprit for these crazy `var` declarations, and just allowing `Assign` to take responsibility for the declarations\r\n\r\nIt's possible @zdenko introduced `setScopeVar()` partly because of #4657, which is about missing declarations when compiling functions that can't target ES6 destructuring (eg a non-last splat in a destructured array param). So to get both of these to correctly declare destructured vars (even in the presence of outer vars of the same name) was mostly a question of making sure `@param` was set on the various generated `Assign`s\r\n\r\nI then ran into top-level generated object destructurings no longer wanting to wrap themselves in parens, so I introduced a distinction between `@param = yes` and `@param = 'alwaysDeclare'` which I think corresponds to \"this is actually a param\" vs \"this needs to always get declared even if there's an outer var of the same name\". There may be a cleaner way to accomplish this and it's possible that not all of the `alwaysDeclare`s that I introduced are actually necessary to cover all of the cases\r\n\r\nBut it looks like it does cover the different cases, I added tests for some of the various more complex object spread \"variables\" both in destructured assignment and as params as well as a test for the example from #4657",
    "head_branch": "iss4673_destructured_object_spread",
    "is_a_fork": true,
    "comments": [
      "When I recompiled the compiler source as a result of this PR, I noticed lots of changes across every file. It turns out, as a result of this PR, function parameter default values were now getting redeclared inside functions:\r\n\r\n```coffee\r\nfn = (options = {}) ->\r\n  options.foo = yes\r\n```\r\n```js\r\nvar fn;\r\n\r\nfn = function(options = {}) {\r\n  var options;\r\n  return options.foo = true;\r\n};\r\n```\r\n\r\nThis doesn’t seem to have any practical effect—all the tests still pass—but it looks wrong.",
      "In general, though, this PR is an improvement. If there was one bit of general feedback from the object destructuring work, it was that those PRs didn’t use enough of “the machinery,” e.g. the classes and methods we already have written for determining things like setting scope and handling the left hand sides of assignments. My feeling was that a lot of the object destructuring code would ultimately be temporary, as hopefully object destructuring will reach Stage 4 soon and we can just compile to it rather than into `Object.assign`, so I wasn’t too concerned; but it doesn’t hurt to start that refactoring work sooner if we can.",
      "@GeoffreyBooth fixed param redeclaration - it also had to do with the `@param = yes` vs `@param = 'alwaysDeclare'` distinction. Not sure why those changes didn't show up in `lib/` when I'd compiled - I usually run `git checkout lib && bin/cake build:except-parser` but seems like for whatever reason this time `bin/cake build:full` was required\r\n\r\nAgreed that some of this stuff will hopefully be pretty temporary but this was a lot of cases where the compiler was emitting broken JS (even if the use cases for object-spread-destructuring into a non-simple variable are slightly obscure) so worth fixing",
      "That seemed to have done the trick. Looks good to me, but @connec should also review it.",
      "@jashkenas / @lydell / @connec / @helixbass I’m thinking of merging this in (once it gets approval from more people than just me) and releasing it as part of 2.0.0. So basically 2.0.0 would be beta5 plus this PR, assuming no more bugs get reported. So there’s some risk with this plan, in that 2.0.0 wouldn’t have had a group review like beta5 is getting; but I think that’s preferable to either a beta6 or holding this PR for 2.0.1. What do you think?\r\n\r\nAnd #4668 can be the first PR merged into 2.0.1, as it’s not a bugfix.",
      "@GeoffreyBooth yikes I don't want to be the guy who broke 2.0.0. But if @connec thinks it looks ok and you don't want to release another beta then I guess that makes sense. I do think it should get merged in pre-2.0.0 - it fixes a lot of cases (a la #4673) where the compiler is currently outputting invalid JS (not sure quite how obscure the broken cases are, basically any complex \"variable\" being used in an object spread destructuring) and #4657 does come up in real code (as evidenced by the naturally surfacing bug report)",
      "The code looks fine to me, the removal of `setScopeVar` is definitely the right thing to do. Unfortunately I'm 'low-tech' (phone+kindle - not the best development setup) for the next week so I can't really play with it, though the tests look good.\r\n\r\nOne thing I can't quite grok from the description+diff is the need for `alwaysDeclare` - is it just to handle 'params' that we also definitely need a `var` for (as opposed to most params, which we expect to be 'declared' in the function signature)? I have a memory of something in `Scope` already that forces a declaration, is that no use?",
      "@connec Assuming @helixbass has a good answer to your question, do you think this would be okay to merge in? Or would you rather we wait until you can get back and test it properly?",
      "@connec yup that's exactly what I was trying to accomplish with `alwaysDeclare`. If there's a way to do that more gracefully with `Scope` I'm not too familiar with it but happy to take a closer look",
      "I think this looks fine then. I can't remember (or check) enough to know if there's a scope method that can do this.  I'd say we merge it and enhance later if we find something.",
      "@lydell or @jashkenas any thoughts?"
    ],
    "commit_messages": [
      "[CS2] Fix destructuring bugs #4673 and #4657 (#4683)\n\n* destructuring fixes [Fixes #4673] [Fixes #4657]\r\n\r\n* test for destructured @prop\r\n\r\n* Add another test to cover #4657 cases\r\n\r\n* don't declare actual params"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfca13a21fa1e1f1a9e9e",
    "number": 4682,
    "body": "In this PR itself (see [updated docs](http://rawgit.com/GeoffreyBooth/coffeescript/2.0.0-beta5/docs/v2/)):\r\n\r\n- The docs are updated to use Bootstrap 4 beta, including refactoring a lot of our styles.\r\n- CodeMirror is updated to 5.29.0, which works on mobile.\r\n- “Try CoffeeScript” has been refactored to work on mobile, and a link to it has been added to the mobile nav.\r\n- Fix #4642, removed erroneous statement about named functions.\r\n\r\nAnd this rolls up _all_ the following fixes:\r\n\r\n- Fix async tests (#4680)\r\n- Don’t require async/await support to run `coffee` (#4679)\r\n- Fix #3098: Suppressed newline should be unsuppressed by semicolon (#4669)\r\n- Use `_extends` utility instead of `Object.assign()` for object spreads (#4675)\r\n- Fix #4651: object spread destructuring bug (#4652)\r\n- Fix v3 source map (#4671)\r\n- Fix #1768: Ignore space after `::` (#4670)\r\n- Refine #4666: add parens to chained do IIFE with params (#4672)\r\n- Add parens to chained `do` IIFE (#4666)\r\n- Fix #4576: Allow accessing a property of a function literal (like `.call`) via chaining syntax (#4665)\r\n- Fix #4589: Unquote all interpolated strings, not just CSX ones, so that quotation marks are not unnecessarily escaped in backtick-delimited strings/template literals (#4660)\r\n- Fix #4260 and #1349: Splat error with soak properties or expressions (#4644)\r\n- Fix #3709, #3789: `throw` an `if`, `for`, `switch`, `while` (#4664)\r\n- Fix #4575: Check for the previous token’s existence before comparing against it (#4663)\r\n- Fix #2870: Allow specifying output filename (#4661)\r\n- Fix #4578: Never look back past the start of the token stream (#4662)\r\n- Fix #4629: interpolations (whether in strings or CSX tags) with only comments (#4659)\r\n- Fix #4209: `--require` for filenames that are invalid identifiers (#4658)\r\n- Fix #4558: Stack trace line numbers for scripts that compile CoffeeScript (#4645)\r\n- Docs: Define functions used in loop examples (#4653)\r\n- Fix object spread destructuring bug (#4651)\r\n- Fix #4631: Expansion that becomes rest parameter causes runtime error (#4634)\r\n- Fix #4413: Generated variables in function parameters (#4640)\r\n\r\nThere’s one more PR pending:\r\n\r\n- Fix #4464: backticked expressions in class body (#4668)\r\n\r\n@connec or @lydell do either of you have a moment to review that one to hopefully slip it into this release? Otherwise it can catch the next train.",
    "head_branch": "2.0.0-beta5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] 2.0.0-beta5 (#4682)\n\n* Upgrade docs to Bootstrap 4 beta, including refactoring styles; upgrade docs jQuery and CodeMirror\r\n\r\n* Better style the docs for mobile, including Try CoffeeScript\r\n\r\n* Fix #4642, erroneous statement about named functions\r\n\r\n* Update packages\r\n\r\n* 2.0.0-beta5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfca23a21fa1e1f1a9e9f",
    "number": 4680,
    "body": "Not sure when this started happening, but our current test runs complete before waiting for the async tests to resolve, either passing or failing, so if an async test were to start failing we would never know. To remedy this, I check if a test function is an `instanceof Promise`, [as all async functions are](https://medium.com/@bluepnume/learn-about-promises-before-you-start-using-async-await-eb148164a9c8), and if it is, I save it to an `asyncTests` array. After the synchronous tests are all run, I do `Promise.all asyncTests` to wait for all the async tests to resolve. The consumers of the `runTests` function now expect a `Promise` to be returned; for non-async runtimes, I return an immediately-resolving `Promise` that resolves to whether or not all the tests passed. (I wanted to preserve the ability for the tests to run in Node 6 and non-async-capable runtimes, since it isn’t so much extra effort at least for now. Node 6 supports promises.)\r\n\r\nTo test this, break one of the tests (async and/or non-async) and make sure the failure appears when you run `cake test`. Do the same when running in Node 6.\r\n\r\n(This branches off of #4679, so that it’s possible to run `cake test` in Node 6. The diff should shrink once that PR is merged in.)",
    "head_branch": "wait-for-await-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Fix async tests (#4680)\n\n* Get `coffee` command working again in Node 6, by converting the ‘await’ wrapper in the REPL to use a Promise instead of the ‘await’ keyword; add tests for REPL ‘await’ wrapper, including test to skip async tests if the runtime doesn’t support them\r\n\r\n* Fix async tests: now if a test function is a Promise (which an `await` function is), we add it to an array of async test functions and wait for them all to resolve before finishing the test run, so that if any async tests fail we see those failures in the output\r\n\r\n* Code review\r\n\r\n* Unnecessary\r\n\r\n* Let's support Node 6+ if we can\r\n\r\n* Simplify the returned promise\r\n\r\n* Simplify async check"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfca33a21fa1e1f1a9ea0",
    "number": 4679,
    "body": "Aside from #4604, the `coffee` command runs in Node 6 (though the tests don’t). See #4676. I feel like we might as well support Node 6 if we can, and it seems that all we need to do so is convert one `await` into a `Promise`.\r\n\r\nI also added a test for the functionality added in #4604, plus a guard so that the tests (other than the async ones) can also run in Node 6.\r\n\r\nI noticed that `cake test` is returning before the async tests have completed; see #4680.",
    "head_branch": "dont-require-await-support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Don’t require async/await support to run `coffee` (#4679)\n\n* Get `coffee` command working again in Node 6, by converting the ‘await’ wrapper in the REPL to use a Promise instead of the ‘await’ keyword; add tests for REPL ‘await’ wrapper, including test to skip async tests if the runtime doesn’t support them\r\n\r\n* Code review\r\n\r\n* Let's support Node 6+ if we can"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfca43a21fa1e1f1a9ea1",
    "number": 4675,
    "body": "See #4674 \r\n\r\nThis replaces the direct calls to `Object.assign()` currently generated by object spreads with a call to a new utility function `_extends` (directly copied from Babel's equivalent, defaults to using `Object.assign` when it's supported)\r\n\r\nAdded `eqJS()` test that `_extends` is being generated and used when compiling object spread",
    "head_branch": "iss4674_object_assign_polyfill",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] use _extends utility instead of Object.assign() for object spreads (#4675)\n\n* _extends utility instead of Object.assign()\r\n\r\n* eqJS test for _extends\r\n\r\n* Test that a user-defined function named `_extends` doesn’t conflict with our utility function\r\n\r\n* IE8 polyfill note in docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfca43a21fa1e1f1a9ea2",
    "number": 4672,
    "body": "@connec pointed out that #4666 didn't handle `do <IIFE>` with arguments\r\n\r\nSo this extends #4666 to handle arguments. Added tests where the arguments are on separate lines and contain nested `PARAM_END` token",
    "head_branch": "iss3736_chain_after_do_iife_with_params",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Refine #4666: add parens to chained do IIFE with params (#4672)\n\n* add parens to chained do iife [Fixes #3736]\r\n\r\n* remove debug code\r\n\r\n* fixes from code review\r\n\r\n* handle iife with params\r\n\r\n* add test w/ destructured param from code review"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfca53a21fa1e1f1a9ea3",
    "number": 4671,
    "body": "Per discussion in #3075, in the `v3SourceMap` object:\r\n\r\n- Always now return `null` instead of empty strings, or an empty array instead of `['']`.\r\n- If `options.sourceFiles` (an undocumented Node API option) is unspecified, but `options.filename` is, generate the `v3SourceMap` `sources` field from `[options.filename]`. The API by definition is always only compiling one file.\r\n\r\nI don’t know if it’s worth documenting the source map `generatedFile` (maps to `v3SourceMap` `file`) or `sourceFiles` (maps to `sources`) or `sourceRoot` (maps to same) fields? They seem pretty obscure.",
    "head_branch": "fix-sources-field-in-v3sourcemap",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Fix v3 source map (#4671)\n\n* Per discussion in #3075: if `sourceFiles` is unspecified, but `filename` is, use `filename`; output null instead of an empty string for `sources` or `sourceRoot`\r\n\r\n* Update source map tests to reflect that now we return null instead of empty strings; check generated sources array\r\n\r\n* Update source map documentation; still leave more obscure options undocumented\r\n\r\n* Follow the TypeScript compiler’s example regarding v3SourceMap, but output empty strings instead of made-up filenames\r\n\r\n* Have `sources` default to ‘<anonymous>’"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfca63a21fa1e1f1a9ea4",
    "number": 4670,
    "body": "Fixes #1768. So as `Array:: isArray` becomes `Array.protoype.isArray`, now `Array:: [\"isArray\"]` becomes `Array.prototype[\"isArray\"]`.",
    "head_branch": "prototypes-cant-call",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #1768: Ignore space after `::` (#4670)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfca73a21fa1e1f1a9ea5",
    "number": 4669,
    "body": "Fixes #3098. Now an error is thrown if a semicolon follows an `=` or anything in the `UNFINISHED` group of tokens. No tests fail as a result of this PR, so presumably this isn’t a breaking change (aside from the case of `a = ; 5` which we want to throw an error).\r\n\r\n```coffee\r\n> ./bin/coffee -bpe 'a = ; 5'\r\n[stdin]:1:5: error: unexpected ;\r\na = ; 5\r\n    ^\r\n```",
    "head_branch": "semicolon-unsuppression",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #3098: Suppressed newline should be unsuppressed by semicolon (#4669)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfca83a21fa1e1f1a9ea6",
    "number": 4668,
    "body": "Fixes #4464, and allows backticks to provide a workaround for class properties (#4552).\r\n\r\nThis PR treats backticked expressions in a class body as a special case that doesn’t get hoisted; they just get output in the class body:\r\n\r\n```coffee\r\nclass A\r\n  `b: 3`\r\n  c: -> 4\r\n```\r\n```js\r\nvar A;\r\n\r\nA = class A {\r\n  b: 3;\r\n\r\n  c() {\r\n    return 4;\r\n  }\r\n\r\n};\r\n```\r\n\r\nThis allows backticks to be used for the not-yet-finalized feature of class properties, as shown above (#4552); or any other unsupported code people might want to put in a class body:\r\n\r\n```coffee\r\nclass A\r\n  `get x() { return 42; }`\r\n```\r\n```js\r\nvar A;\r\n\r\nA = class A {\r\n  get x() { return 42; };\r\n};\r\n```\r\n\r\nThe special case is triggered only when the entire expression is backticked. A line that mixes backticked and unbackticked code, assuming it doesn’t throw a compiler error, will be output as it is now (in the hoisted class body). And the backticked expressions are always output first, above the rest of the class body. @connec @xixixao",
    "head_branch": "backticked-expressions-in-class-body",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Clarify the purpose of Class::addInitializerExpression"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfca93a21fa1e1f1a9ea7",
    "number": 4666,
    "body": " Fixes #3736 \r\n\r\n@GeoffreyBooth this implements the behavior that @darky was looking for in #3736. I think the compilation he wants is almost always what someone would want when chaining after a `do -> ...` (as discussed, the only real use case for chaining off of a function literal (like now enabled by #4665) would seem to be `.call()/.apply()`). So I think it's actually sketchy that it currently (post-#4665) unintuitively compiles the chain against the function object\r\n\r\nSo now this:\r\n```\r\ndo ->\r\n  a\r\n.b\r\n```\r\nwill compile to:\r\n```\r\n((function() {\r\n  return a;\r\n})()).b;\r\n```\r\n(ie `(do -> a).b`)\r\nrather than the current:\r\n```\r\n(function() {\r\n  return a;\r\n}).b();\r\n```\r\n(ie `do ((-> a).b)`\r\n\r\nBut behavior for chained `do <non-IIFE>` shouldn't change, ie this:\r\n```\r\ndo a\r\n.b\r\n```\r\nshould continue to be treated as `do (a.b)`. This one has bitten me a couple times but I see how both ways could be considered intuitive and I've learned to avoid it\r\n\r\nSo the added rewriter pass just targets `do` followed by `->` or `=>` (ie an IIFE) whose body is followed by a `.`, and wraps the `do <IIFE>` in parens (added tests for indented and inline function bodies as well as that existing chained `do <non-IIFE>` behavior is preserved)\r\n\r\nI think the inconsistency this would introduce of chained `do <IIFE>` vs chained `do <non-IIFE>` is far outweighed by the unintuitive, non-useful current compilation of chained `do <IIFE>`",
    "head_branch": "iss3736_chain_after_do_iife",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] add parens to chained do IIFE (#4666)\n\n* add parens to chained do iife [Fixes #3736]\r\n\r\n* remove debug code\r\n\r\n* fixes from code review"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcaa3a21fa1e1f1a9ea8",
    "number": 4665,
    "body": "Implements the proposed syntax discussed in #4576:\r\n\r\n```coffee\r\n->\r\n  a\r\n.call(…)\r\n```\r\n\r\nThis doesn’t “fix” #4576 per se, because the output desired by that issue’s OP was simply incorrect and was fixed in 1.12.6; but this allows an alternative way to chain after function literals without needing to indent (“fixing” #4576 in the sense that the issue was about avoiding Christmas trees while chaining).\r\n\r\n@helixbass is this what you had in mind?",
    "head_branch": "deindented-function-chaining",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #4576: Allow accessing a property of a function literal (like `.call`) via chaining syntax (#4665)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcab3a21fa1e1f1a9ea9",
    "number": 4664,
    "body": "Fixes #3709 and #3789. If the expression to be thrown is of certain types (`If`, `For`, `Switch`, `While` or a nested `Throw`) wrap it in a closure, so that it becomes valid JavaScript.\r\n\r\nI’m sure there are probably other expression types that should get wrapped, so please suggest any you can think of and I’ll add them to the list. But these should be the most likely ones that people would think to put after `throw`, (other than another `throw`, which is so unlikely it feels silly to even cover the case). And now we have a way to handle all similar cases.\r\n\r\nI tried to find a way to deduce whether the expression should get wrapped in a closure, by looking at `shouldCache` or `isStatement` or the like, but I didn’t find a helper that was consistent. Ultimately I don’t think there are too many node types that make sense to put after `throw`, so just listing every possibility should hopefully be good enough.",
    "head_branch": "throw",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Fix #3709, #3789: ‘throw’ an ‘if’, ‘for’, ‘switch’, ‘while’ (#4664)\n\n* Fix #3709: throwing an if, for, switch or while should throw the returned value of the statement/loop\r\n\r\n* Fix #3789: don’t throw a throw (unless it’s in a closure)\r\n\r\n* LEVEL_LIST works better than a list of node types"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcac3a21fa1e1f1a9eaa",
    "number": 4663,
    "body": "Fixes #4575. Before:\r\n\r\n```\r\ncoffee -bpe '*'\r\nTypeError: Cannot read property '0' of undefined\r\n    at Lexer.literalToken (./coffeescript/lib/coffeescript/lexer.js:889:39)\r\n```\r\nAfter:\r\n```\r\n./bin/coffee -bpe '*'\r\n[stdin]:1:1: error: unexpected *\r\n*\r\n^\r\n```",
    "head_branch": "leading-asterisk",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #4575: Check for the previous token’s existence before comparing against it (#4663)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcad3a21fa1e1f1a9eab",
    "number": 4662,
    "body": "Fixes #4578. Before:\r\n\r\n```\r\ncoffee -bpe ':'\r\nTypeError: Cannot read property 'newLine' of undefined\r\n    at Rewriter.<anonymous> (/usr/local/lib/node_modules/coffeescript/lib/coffee-script/rewriter.js:316:113)\r\n```\r\nAfter:\r\n```\r\n./bin/coffee -bpe ':'\r\n[stdin]:1:1: error: unexpected :\r\n:\r\n^\r\n```",
    "head_branch": "leading-colon",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #4578: Never look back past the start of the token stream (#4662)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcae3a21fa1e1f1a9eac",
    "number": 4661,
    "body": "Fixes #2870. If the input is a file, not a folder; and `--output` is a path to a file, like `dist/file.js` or `build.js`; save as the desired output path/filename.\r\n\r\nExamples:\r\n```bash\r\ncoffee -co dist/testing.js test.coffee # Saves as dist/testing.js\r\ncoffee -co testing.js test.coffee      # Saves as testing.js\r\ncoffee -co dist test.coffee            # Saves as dist/test.js (same as current)\r\ncoffee -co dist src                    # Saves as dist/* (same as current)\r\n```",
    "head_branch": "output-file",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Fix #2870: Allow specifying output filename (#4661)\n\n* Fix #2870: If --output ends with a filename, and the input is a file and not a path, save as the desired filename\r\n\r\n* If an output path ends in a slash, force saving into an output folder even if that folder name would contain a period (e.g. /scripts.js/); if output filename is only periods, treat it as a path\r\n\r\n* Restrict exceptions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcaf3a21fa1e1f1a9ead",
    "number": 4660,
    "body": "Fixes #4589. `\"a\\\"#{1}\\\"b\"` now becomes `` `a\"${1}\"b` ``, not `` `a\\\"${1}\\\"b` ``. @greghuc @xixixao.\r\n\r\nYes, this PR changes only four characters.",
    "head_branch": "escaped-quotes-in-template-literals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #4589: Unquote all interpolated strings, not just CSX ones, so that quotation marks are not unnecessarily escaped in backtick-delimited strings/template literals (#4660)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcb03a21fa1e1f1a9eae",
    "number": 4659,
    "body": "Fixes #4629.\r\n\r\nAn optimization in interpolated strings (which CSX tags essentially are) ignored empty interpolations: `\"a#{}b\"` compiled to just `` `ab` ``, not `` `a${}b` ``. This meant that an interpolation that had nothing but comments, like `\"a#{### comment ###}b\"`, was also getting output as just `` `ab` ``, with the comment lost.\r\n\r\nThis PR preserves both the optimization and the comments. If an “empty” interpolation has no comments, the current behavior remains. However if it has comments but no other tokens, a zero-length `JS` token is created in the interpolation to hold the comments; and the optimization isn’t performed.",
    "head_branch": "interpolations-with-only-comments",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Fix #4629: interpolations (whether in strings or CSX tags) with only comments (#4659)\n\n* Fix #4629: interpolations (whether in strings or CSX tags) that contain nothing but comments should not be optimized out\r\n\r\n* Template literals need an expression inside their interpolations, so if we only have a comment to put in there, toss in an empty string as well"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcb13a21fa1e1f1a9eaf",
    "number": 4658,
    "body": "Fixes #4209. I hate that this adds 15K to the size of the compiler, but fortunately the increase is only in the Node version, not the browser version (which doesn’t include `command.coffee`).\r\n\r\nPreviously `--require hello-world.coffee` would fail because the compiler was prepending `hello-world = require('hello-world.coffee');`. Now the compiler checks that `hello-world` is a valid identifier before outputting it; if it’s invalid, the compiler just outputs `require('hello-world.coffee')` without the assignment.",
    "head_branch": "fix-require-filename",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Fix #4209: --require for filenames that are invalid identifiers (#4658)\n\n* When using --require, check that the variable we’re creating from the required file/module is a valid identifier name before assigning to it; fixes #4209\r\n\r\n* We don’t need no stinkin’ regex"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcb13a21fa1e1f1a9eb0",
    "number": 4653,
    "body": "A cleaner #4649 , based on branch '2'",
    "head_branch": "cherrypick",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Docs: Define functions used in loop examples (#4653)\n\n* Cherrypick changes from messy branch\r\n\r\n* Reorder function defs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcb23a21fa1e1f1a9eb1",
    "number": 4652,
    "body": "FIxes #4651. \r\nCompiler was throwing an error for object spread destructuring of values with properties (e.g. `@props`, `a.b.c`) or object literals. \r\n\r\n```coffeescript\r\n# {a: {b}, r...} = @props\r\n({\r\n  a: {b}\r\n} = ref = this.props);\r\nr = objectWithoutKeys(ref, ['a']);\r\n```\r\n\r\nBesides that, caching of the object literal value  is improved:\r\n\r\nBefore:\r\n```coffeescript\r\n# {a, r...} = {a:1, b:2}\r\n({a} = {a: 1, b: 2});\r\nr = objectWithoutKeys({a: 1, b: 2}, ['a']),\r\n```\r\n\r\nAfter:\r\n```coffeescript\r\n# {a, r...} = {a:1, b:2}\r\n({a} = ref = {a: 1, b: 2});\r\nr = objectWithoutKeys(ref, ['a']),\r\n```",
    "head_branch": "bug-fix-4651",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4652 from GeoffreyBooth/bug-fix-4651\n\n[CS2] Fix #4651: object spread destructuring bug"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcb93a21fa1e1f1a9eb2",
    "number": 4649,
    "body": "Added a couple basic functions to make the Array Comprehensions example code more self-explanatory. \r\n\r\nThe \"menu\" example especially was hard to read.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcba3a21fa1e1f1a9eb3",
    "number": 4645,
    "body": "Fixes #4558. Also fixes the `cake release` command, which broke somewhere around when Node 8 came out.\r\n\r\nFeedback welcome. So basically the issue in #4558 is that when you have a CoffeeScript file that itself has `CoffeeScript = require 'coffeescript'` and then something like `CoffeeScript.compile`, there’s basically a script within a script here and we need to preserve the source maps within the source maps, so that stack trace line numbers work correctly. Unfortunately the child scripts are all cached as `<anonymous>`, and the runtime always throws errors referencing the filename of the top-level script, so there’s some dark arts involved in picking which source map to use for patching the error stack trace. The method I’ve chosen isn’t foolproof, if you have multiple source maps that happen to have identical code or mappings, but it should work most of the time. I don’t see how to get a foolproof method without the runtime providing the full source of the “file” throwing the error, which it doesn’t (as far as I can tell). There’s more gory detail in the comments of the PR.",
    "head_branch": "fix-line-numbers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #4558: Stack trace line numbers for scripts that compile CoffeeScript (#4645)\n\n* Don't throw an error in the console when loading a try: URL\r\n\r\n* Handle the possibility of compiling multiple scripts with the same filename, or multiple anonymous scripts\r\n\r\n* Fix #4558: Much more robust caching of sources and source maps, more careful lookup of source maps especially for CoffeeScript code compiled within a Coffee script (. . . within a Coffee script, etc.)\r\n\r\n* Reimplement `cake release` to just use the shell to avoid the issues plaguing that command (something to do with module caching perhaps)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcbb3a21fa1e1f1a9eb4",
    "number": 4644,
    "body": "This is a fix for #4260 and #1349 when invalid JS is compiled if `Splat` contains soak accessor  (`?.`), or `if` statement.\r\n\r\nBefore:\r\n```javascript\r\n// [a if b...]\r\n[\r\n  ...  if (b) {\r\n    a;\r\n  }\r\n];\r\n\r\n// [a?.b...]\r\n[\r\n  ...  if (typeof a !== \"undefined\" && a !== null) {\r\n    a.b;\r\n  }\r\n]\r\n\r\n// arr.push(error.data?.errors...)\r\narr.push(...if ((ref = error.data) != null) {\r\n  ref.errors;\r\n});\r\n```\r\n\r\n\r\nAfter:\r\n```javascript\r\n// [a if b...]\r\n[...(b ? a : [])]\r\n\r\n// [a?.b...]\r\n[...(typeof a !== \"undefined\" && a !== null ? a.b : [])]\r\n\r\n// arr.push(error.data?.errors...)\r\narr.push(...((ref = error.data) != null ? ref.errors : []));\r\n```",
    "head_branch": "soak-splat-fix-cs2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Fix #4260 and #1349: Splat error with soak properties or expressions (#4644)\n\n* fix splat error with soak properties or expressions\r\n\r\n* Add test based on #4260\r\n\r\n* Add test based on #1349\r\n\r\n* tests for the leading splat variant\r\n\r\n* test for spaced prefix ...\r\n\r\n* fixed 'if' statement in parens\r\n\r\n* fixed replacing 'void 0' with '[]'\r\n\r\n* remove 'void 0' replacement; add Splat::compileNode\r\n\r\n* Use LEVEL_OP; follow style better"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcbc3a21fa1e1f1a9eb5",
    "number": 4643,
    "body": "This is a fix for #4260 and #1349 when invalid JS is compiled if `Splat` contains soak accessor  (`?.`), or `if` statement.\r\n\r\nBefore:\r\n```javascript\r\n// [a if b...]\r\nslice.call(  if (b) {\r\n    a;\r\n  });\r\n\r\n// [a?.b...]\r\nslice.call(  if (typeof a !== \"undefined\" && a !== null) {\r\n    a.b;\r\n  });\r\n\r\n// arr.push(error.data?.errors...)\r\narr.push.apply(arr, if ((ref = error.data) != null) {\r\n  ref.errors;\r\n});\r\n```\r\n\r\n\r\nAfter:\r\n```javascript\r\n// [a if b...]\r\nslice.call((b ? a : void 0));\r\n\r\n// [a?.b...]\r\nslice.call((typeof a !== \"undefined\" && a !== null ? a.b : void 0));\r\n\r\n// arr.push(error.data?.errors...)\r\narr.push.apply(arr, ((ref = error.data) != null ? ref.errors : void 0));\r\n```",
    "head_branch": "soak-splat-fix-cs1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS1] fix #4260 and #1349: splat error with soak properties or expressions (#4643)\n\n* fix splat error with soak properties or expressions\r\n\r\n* Add test based on #4260\r\n\r\n* Add test based on #1349\r\n\r\n* remove 'void 0' replacement; add Splat::compileNode"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcbc3a21fa1e1f1a9eb6",
    "number": 4640,
    "body": "See #4413. If a function parameter is an expression that triggers the creation of a generated variable (e.g. a variable named `ref` or `ref1` etc.), that variable needs to be declared in the parent scope, not the function scope.",
    "head_branch": "generated-variables-in-function-parameters",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4640 from GeoffreyBooth/generated-variables-in-function-parameters\n\n[CS2] Fix #4413: Generated variables in function parameters"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcbd3a21fa1e1f1a9eb7",
    "number": 4634,
    "body": "Closes #4631. \r\nAfter added support for the spread dots on the left side, dots in array slice, e.g. (`[a...b]`) were misinterpreted and the code was compiled to an implicit call. The error occurred when there was a space around the dots.\r\n\r\nExample:\r\n```coffeescript\r\n# wrong\r\narr[a ... b] => arr[a(...b)]\r\n```\r\n\r\n```coffeescript\r\n# correct\r\narr[a ... b] => arr.slice(a, b)\r\n```\r\n\r\n\r\n\r\n\r\n\r\n",
    "head_branch": "expansion-rest-bug",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Fix #4631: Expansion that becomes rest parameter causes runtime error (#4634)\n\n* expansion-rest bug fix\r\n\r\n* tests; improved implicit call recognition with dots on the left in the `rewriter`\r\n\r\n* whitespace cleanup\r\n\r\n* more tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcbe3a21fa1e1f1a9eb8",
    "number": 4630,
    "body": "Closes #2998. Now code like its example:\r\n\r\n```coffee\r\nknown_colors =\r\n   45:              'cyan'\r\n   52:              'sepia'\r\n  100:              'olive'\r\n  124:              'red'\r\n```\r\n\r\nwill throw an `unexpected indentation` error. Not sure if my error check is too specific, but it catches this case at least.",
    "head_branch": "indentation-mismatch-in-implicit-object",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcbf3a21fa1e1f1a9eb9",
    "number": 4628,
    "body": "Hopefully the last 2.0.0 beta. From the [changelog](http://rawgit.com/GeoffreyBooth/coffeescript/2.0.0-beta4/docs/v2/#changelog):\r\n\r\n*   This release includes all the changes from 1.12.6 to 1.12.7.\r\n*   Line comments (starting with `#`) are now output in the generated JavaScript.\r\n*   Block comments (delimited by `###`) are now allowed anywhere, including inline where they previously weren’t possible. This provides support for static type annotations using Flow’s comments-based syntax.\r\n*   Spread syntax (`...` for objects) is now supported in JSX tags: `<div {props...} />`.\r\n*   Argument parsing for scripts run via `coffee` is improved.\r\n*   CLI: Propagate `SIGINT` and `SIGTERM` signals when node is forked.\r\n*   `await` in the REPL is now allowed without requiring a wrapper function.\r\n*   `do super` is now allowed, and other accesses of `super` like `super.x.y` or `super['x'].y` now work.\r\n*   Splat/spread syntax triple dots are now allowed on either the left or the right (so `props...` or `...props` are both valid).\r\n*   Tagged template literals are recognized as callable functions.\r\n*   Bugfixes for object spread syntax in nested properties.\r\n*   Bugfixes for destructured function parameter default values.",
    "head_branch": "2.0.0-beta4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "2.0.0-beta4 (#4628)\n\n* 2.0.0-beta4 changelog\r\n\r\n* Recompile parser, update browser compiler\r\n\r\n* Updated annotated source and browser tests\r\n\r\n* Bump version to 2.0.0-beta4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcc03a21fa1e1f1a9eba",
    "number": 4627,
    "body": "A small fix for the #4623 (`do super` in constructor)\r\n\r\n```coffeescript\r\nclass b extends a\r\n  constructor: ->\r\n    do super\r\n```\r\n\r\n```javascript\r\nb = class b extends a {\r\n    constructor() {\r\n      super();\r\n    }\r\n}\r\n```",
    "head_branch": "do-super",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] fix for “`do super` in constructor” bug (#4627)\n\n* bug fix 'do super' in constructor\r\n\r\n* improve regex"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcc13a21fa1e1f1a9ebb",
    "number": 4625,
    "body": "When running commands like `coffee --nodejs --max_old_space_size=128 index.coffee` the coffee process doesn't forward signals to node process, which was already discussed in #4185.\r\n\r\nProblem is that tools that use flow SIGTERM, delay, SIGKILL leave zombie processes.\r\n\r\nThis fixes #4185.",
    "head_branch": "patch/propagate-signals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] CLI: Propagate SIGINT and SIGTERM signals when node is forked (#4625)\n\n* Propagate SIGINT and SIGTERM signals when node is forked\r\n\r\n* Use for loop for consistency"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcc23a21fa1e1f1a9ebc",
    "number": 4618,
    "body": "This is initial commit for object spread syntax in multiline objects without braces or commas (#4600).\r\nLeft and right position of spread dots are supported. \r\nIt's still rough around the edges and needs refinements. The trickiest part was detecting the starting position of the spread and detecting if next token is spread. \r\n\r\nExamples:\r\n\r\n```coffeescript\r\n# bar =\r\n#   foo...\r\n#   c: 3\r\nbar = Object.assign({}, foo, {\r\n    c: 3\r\n  });\r\n  \r\n# bar = a:1, foo...\r\nbar = Object.assign({a:1}, \r\n    foo);\r\n\r\n# bar = a:1, ...foo\r\nbar = Object.assign({a:1}, \r\n    foo);\r\n```\r\n\r\nFunction parameters compiles as usual.\r\n\r\n```coffeescript\r\n# f a:1, obj...\r\nf({\r\n    a: 1\r\n  }, ...obj);\r\n\r\n# f ...obj, a:1\r\nf(...obj, {\r\n   a: 1\r\n });\r\n\r\n# f {a:1, obj...}\r\nf(Object.assign({\r\n    a: 1\r\n  }, obj));\r\n```",
    "head_branch": "object-spread-syntax-without-braces",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcc33a21fa1e1f1a9ebd",
    "number": 4617,
    "body": "Tiny release, but I guess we’re not expecting any other 1.x updates anytime soon so might as well get these fixes out there.",
    "head_branch": "1.12.7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "1.12.7 (#4617)\n\n* 1.12.7: Update changelog and version number\r\n\r\n* Update dependencies\r\n\r\n* Improve formatting\r\n\r\n* Updated output\r\n\r\n* Disable regex Unicode test for runtimes lacking support. Fixes #4610.\r\n\r\n* More better\r\n\r\n* Bump date"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcc43a21fa1e1f1a9ebe",
    "number": 4611,
    "body": "@GeoffreyBooth I noticed an error with the object spread nested properties in branch `2`, e.g.\r\n```obj2 = {obj.a.b.c..., obj[\"a\"][\"b\"]...}```\r\n\r\nThis has been already fixed in #4493, but it seems that something went off in the latest commits.\r\nThis small PR restores the functionality back.\r\n\r\n@connec do you mind taking a look since your commits also include changes in the `grammar`?",
    "head_branch": "object-spread-nested-properties-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Fix object spread nested properties (#4611)\n\n* fix for object spread nested properties: obj2 = {obj.c..., obj[\"b\"][\"c\"]..., d: 55}\r\n\r\n* tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcc53a21fa1e1f1a9ebf",
    "number": 4607,
    "body": "This PR addresses the issue with CSX spread attributes (#4551).\r\n\r\nSince spread in JSX is special notation different from the ES6 generic spread syntax, CS will simply compile `{props...}` to `{...props}`.\r\n\r\n```coffeescript\r\n# <div {props...}>hello</div>\r\n<div {...props}>hello</div>\r\n\r\n# <div {props1...} id=\"tagId\" {props2...}>hello</div>\r\n<div {...props1} id=\"tagId\" {...props2}>hello</div>\r\n```\r\n\r\nThere is also an \"accidental\" side effect and this:\r\n```coffeescript\r\n<div {props..., a: \"x\"}>hello</div>\r\n<div {props1..., props2...}>hello</div>\r\n```\r\n\r\nwill compile to\r\n\r\n```javascript\r\n<div {...props} a=\"x\">hello</div>\r\n<div {...props1} {...props2}>hello</div>\r\n```",
    "head_branch": "csx-spreads",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] CSX spread attributes: <div {props…} /> (#4607)\n\n* CSX spread attributes: <div {props...} />\r\n\r\n* whitespace cleanup\r\n\r\n* Style\r\n\r\n* valid CSX attributes\r\n\r\n* added comments; cleanup\r\n\r\n* Fixed allowed CSX properties.\r\n\r\n* Cleanup\r\n\r\n* Typo\r\n\r\n* Improved RegEx\r\n\r\n* Reworked CSX attributes\r\n\r\n* small fix for CSX attribute validation\r\n\r\n* cleanup\r\n\r\n* tests\r\n\r\n* fix nested assignement; remove unused variable\r\n\r\n* cleanup; improve tests\r\n\r\n* fix esoteric case; improve tracking nested splats in CSX tag"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcc63a21fa1e1f1a9ec0",
    "number": 4606,
    "body": "See [#85](https://github.com/coffeescript6/discuss/issues/85).\r\n\r\n```coffeescript\r\n{a, b, r...} = {a:1, b:2}\r\n{a, b, ...r} = {a:1, b:2}\r\n\r\no = {obj1..., a:1, ...obj2}\r\na = [a, b, arr1..., c, d, ...arr2]\r\n\r\nf args...\r\nf ...args\r\n\r\n({a, r...}) ->\r\n({a, ...r}) ->\r\n\r\n```",
    "head_branch": "spread-dots-both-sides",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Spread syntax triple dots on either right or left (#4606)\n\n* Spread dots on both sides: {a:1, ...obj1, obj2...},  [a..., ...b], f ...a, b...\r\n\r\n* Optimization"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcc73a21fa1e1f1a9ec1",
    "number": 4605,
    "body": "See discussion in #4599 - this restricts the newly introduced `return` with indented arg syntax to just allow an indented object. So eg this is allowed:\r\n```\r\nreturn\r\n  a: 1\r\n```\r\nbut this is not:\r\n```\r\nreturn\r\n  a\r\n```\r\nCurrently non-implicit objects will also work:\r\n```\r\nreturn\r\n  {a: 1}\r\n```\r\nbut it should be possible (though perhaps ugly) to disallow this if desired, [here's](https://github.com/jashkenas/coffeescript/pull/4599#issuecomment-313183609) one idea how\r\n\r\nFixes the `return` equivalent of #3199 eg this will now not split the implicit object:\r\n```\r\nif 1 then return\r\n  a: 1\r\n  b: 2\r\n```\r\n\r\nAlso gets rid of some unintuitive cases that are currently allowed eg this will now not compile:\r\n```\r\n  return\r\n    a for b in c\r\n```\r\nrather than compile to the unintuitive:\r\n```\r\nfor (i = 0, len = c.length; i < len; i++) {\r\n  b = c[i];\r\n  return a;\r\n}\r\n```",
    "head_branch": "iss3199_throw_multiline_implicit_object_master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Restrict indented return arg to object (#4605)\n\n* throw multiline implicit object [Fixes #3199]\r\n\r\n* only return\r\n\r\n* fix from code review\r\n\r\n* test error on non-object\r\n\r\n* test error on call indented non-object\r\n\r\n* unique test names"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcc83a21fa1e1f1a9ec2",
    "number": 4604,
    "body": "I went ahead and made a fix for #4603 because I think it could be a really useful feature for playing with promise libraries.\r\n\r\nI took care to ensure non-await evaluations will still happen fully synchronously (e.g. `process.nextTick -> console.log 'async'` works as before).\r\n\r\nI didn't write any tests, because putting them in `test/repl.coffee` or `test/async.coffee` would involve quite a bit of copypasta. I did think of making the async test globally available (e.g. as `test.async` or `testAsync`) but that was a bigger change than I'd planned to make. If someone has an opinion on how to deal with it I'm happy to add some tests.\r\n\r\n---\r\n\r\nRather than compiling top-level await expressions directly, which will\r\nalways throw a syntax error, the REPL wrapper will now wrap them in a\r\nclosure and handle the returned promise before calling back to the REPL.\r\n\r\nFixes #4603.",
    "head_branch": "#4603",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Support `await` in REPL without wrapper function (#4604)\n\n* Support `await` in REPL without wrapper function\r\n\r\nRather than compiling top-level await expressions directly, which will\r\nalways throw a syntax error, the REPL wrapper will now wrap them in a\r\nclosure and handle the returned promise before calling back to the REPL.\r\n\r\nFixes #4603.\r\n\r\n* Cancel REPL callback after a SIGINT during an awaited evaluation\r\n\r\nThis change allows users to 'cancel' awaited expressions that they don't\r\nwant to see the result of. Ultimately, this *does not* prevent the\r\nexpression from completing (e.g. for `await fetch(url)`, `url` will\r\nstill be downloaded, but the user won't have to wait for it to finish\r\nand the result won't be printed)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcc93a21fa1e1f1a9ec3",
    "number": 4602,
    "body": "Noticed couple of typos while reading the v2 docs.",
    "head_branch": "fix-typos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Fix a couple of typos (#4602)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcca3a21fa1e1f1a9ec4",
    "number": 4601,
    "body": "Fixes #4467 \r\n\r\nI came to this issue from the other direction - I'd noticed in the grammar that `Invocation` (ie a function call) really ought to be a grammar `Value` - it simplifies things grammar-wise and makes intuitive sense. The one thing that I saw that that made legal (ie where previously you could use a `Value` but not an `Invocation`) was an `Invocation` as the \"function\" of a `TaggedTemplateLiteral` - so #4467 having been opened about that specific case validates my thinking\r\n\r\nBy making `Invocation` a grammar `Value`, its `Call` gets wrapped in a `new Value()` in places where it previously would've been an unwrapped `Call` (eg `a().b`). So mostly then had to go through and add some `.unwrap()`s in `nodes.coffee` where things were expecting an unwrapped `Call` but could now be getting a `Call` wrapped in a `Value`. There could be other places in `nodes.coffee` that should be updated in this way, I mostly just went through and found the places that were breaking tests\r\n\r\nOne interesting test breakage was the test in `test/parser.coffee` that checks the `locationData` of `a = new B().c(d)`. This led me through #619 which explains that the AST for `new` expressions like this aren't actually correct (ie don't match JS' interpretation, just generate the correct compiled JS). But the actual bug ended up being that the location data for `Value`s with properties don't include the properties. The test was previously passing because in the grammar rule `o 'Invocation Accessor', -> new Value $1, [].concat $2`, the `new Value()` is initialized with its property. But with the grammar change, the property was being `.add()`ed to the `Value` later. So this basically just exposed the bug that typical `Value`s with properties don't include the properties' locations in their location data. From my understanding this is because once `locationData` is set (at the time the grammar rule creating the `new Value()` is run), `updateLocationDataIfMissing()` will then ignore the subsequent (correct, expanded) location data that gets sent when the rule `o 'Value Accessor', -> $1.add $2` gets run. So I added a workaround for this specific case of `.add()`ing properties to `Value`s\r\n\r\nThere are a couple other little `nodes.coffee` cleanups included, I'll make some comments on the code @GeoffreyBooth ",
    "head_branch": "iss4467_tagged_template_literal_call",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Fix #4467: tagged template literal call (#4601)\n\n* working on making Invocation a grammar Value\r\n\r\n* cleanup\r\n\r\n* update location when adding value properties\r\n\r\n* test for #4467\r\n\r\n* more location data tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfccb3a21fa1e1f1a9ec5",
    "number": 4599,
    "body": "Fixes #3199 \r\n\r\nThe reason the kind of implicit object \"splitting\" described in #3199 happens is b/c the suppression of the `INDENT` following `throw` doesn't play nicely with the rewriter (`normalizeLines()` specifically). So to me it seems cleaner to preserve the `INDENT` and just add grammar rule `THROW INDENT Expression OUTDENT`\r\n\r\n@GeoffreyBooth this relates to #1263 and your [comment](https://github.com/jashkenas/coffeescript/issues/1263#issuecomment-298253381) there - as you found, `throw` with implicit object worked b/c of `INDENT`/`TERMINATOR` suppression (via `unfinished()`). But then #3199 shows that it doesn't always work. And the same breakage applies to how you implemented `return`ing implicit objects in #4532, ie this breaks:\r\n```\r\nif 1 then return\r\n  a: 1\r\n  b: 2\r\n```\r\nSo I applied the same idea here to `return` and replaced your `INDENT`-suppressing implementation in #4532 with a grammar rule `RETURN INDENT Expression OUTDENT` which un-breaks the above example\r\n\r\nIn a more general way, #3199 and #1263 seem to reflect our feeling that we should be able to pass indented implicit object literals to function-call-ish things like `throw` and `return` the way that we can pass them to an actual function call. I definitely feel that way and am glad that #4532 was added. This PR just changes the way that it's supported to avoid bugs like #3199, I'm unaware if there's any additional downside to doing it via grammar rules allowing `INDENT...OUTDENT` variations\r\n\r\nBut then it does feel a little weird that both how this PR supports it and the existing behavior for `throw` and for `return` (since #4532) allow *anything* to be passed on following lines, not just implicit objects (which is what I think our brains tell us we should be able to do). Eg this has been legal:\r\n```\r\nthrow\r\n  'abc'\r\n```\r\nAnd as of #4532, you can do eg:\r\n```\r\nreturn\r\n  x\r\n```\r\nI don't have a big problem with either of these but it does seem akin to how @jashkenas [apparently](https://github.com/jashkenas/coffeescript/issues/1113#issuecomment-744670) doesn't like the idea of this being legal:\r\n```\r\nfn\r\n  a\r\n```\r\nBecause basically all three of these (`throw`, `return`, and actual function calls) all \"feel\" like function calls, so it would make sense that they follow similar rules\r\n\r\nThere's some interesting related discussion in #3098 and #1263 - [this comment](https://github.com/jashkenas/coffeescript/issues/1263#issuecomment-961570) warns against allowing implicit indented objects with `return` and mentions `throw`, but given that the way it's supported for function calls is different from both existing support for `throw` (which the commenter @satyr added)/`return` (as of #4532) and from how this PR supports it, I'm not inclined to heed it\r\n\r\nPut list of tokens in `UNFINISHED` per @jashkenas' [request](https://github.com/jashkenas/coffeescript/commit/2ea51b02cc9a573a0a9f2b020e49118c2c00fb81#commitcomment-572436)",
    "head_branch": "iss3199_throw_multiline_implicit_object",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Fix #3199: throw multiline implicit object (#4599)\n\n* throw multiline implicit object [Fixes #3199]\r\n\r\n* restrict to Object\r\n\r\n* test error on non-object\r\n\r\n* test error on call indented non-object"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfccc3a21fa1e1f1a9ec6",
    "number": 4598,
    "body": "@GeoffreyBooth this fixes #4568 but still preserves @xixixao's fix for #4533 \r\n\r\nRefines #4534 by stopping the traversal up the `stack` (looking for implicit objects to tag as no longer being `sameLine`) once we see something non-implicit (eg an `EXPRESSION_START`)\r\n\r\nThis fixes @jo-soft's reported regression in #4568 (simplified):\r\n```\r\nfn bar: {\r\n  foo: 123\r\n} if not condition\r\n```\r\nBasically what was happening post-#4534 was that when it hit the `OUTDENT` after `123`, it was tagging the `bar: ...` implicit object as no longer being `sameLine`. The correct (and pre-#4534) behavior is that it should treat the `OUTDENT` as being contained to within the literal `{...}` (represented by the literal `{` being at the top of the `stack`). So we should stop traversing the stack tagging implicit objects as `sameLine: no` once we hit that literal `{`. But for cases like #4533, we can still preserve this approach of traversing the stack tagging `sameLine: no` as long as we're only traversing through implicit objects/calls",
    "head_branch": "iss4568_implicit_object_regression",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "refine sameLine implicit object tagging [Fixes #4568] (#4598)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfccc3a21fa1e1f1a9ec7",
    "number": 4597,
    "body": "@GeoffreyBooth here's `2` with post-#4585 `master` merged. The test case in #4585 needed to be updated due to the grammar changes introduced by #4493 (object spread)\r\n\r\nI wasn't sure how to resolve the merge conflict in `documentation/sections/introduction.md` - I deleted the \"CoffeeScript 2 is coming...\" conflict line b/c we're on `2` here but not sure how documentation works (for `master` vs `2`)?",
    "head_branch": "2_merge_master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "merge master (#4597)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfccd3a21fa1e1f1a9ec8",
    "number": 4596,
    "body": "This PR fixes issue #4577. \r\nRenamed destructured parameters with the same default value produced a compilation error: \r\n`multiple parameters named 0`.\r\n\r\n```\r\n({ a: aa = 0, b: bb = 0 }) ->\r\n  \"#{aa}, #{bb}\"\r\n```",
    "head_branch": "renamed-destructured-parameters",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix #4577; renamed destructured parameters with same default value (#4596)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcce3a21fa1e1f1a9ec9",
    "number": 4595,
    "body": "This PR fixes compilation error: `multiple parameters named 0` when same default values are used.\r\n\r\n```\r\n({ a: aa = 0, b: bb = 0 }) ->\r\n  \"#{aa}, #{bb}\"\r\n```",
    "head_branch": "renamed-destructured-parameters",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfccf3a21fa1e1f1a9eca",
    "number": 4594,
    "body": "From the changelog:\r\n\r\n*   [JSX](#4551) is now supported. [Docs.](http://rawgit.com/geoffreybooth/coffeescript/2.0.0-beta3/docs/v2/#jsx)\r\n*   [Object rest/spread properties](#4493) are now supported. [Docs.](http://rawgit.com/geoffreybooth/coffeescript/2.0.0-beta3/docs/v2/#splats)\r\n*   [Bound (fat arrow) methods are once again supported in classes](#4561); though an error will be thrown if you attempt to call the method before it is bound. See [breaking changes for classes](http://rawgit.com/geoffreybooth/coffeescript/2.0.0-beta3/docs/v2/#breaking-changes-classes).\r\n*   The REPL [no longer warns](#4559) about assigning to `_`.\r\n*   Bugfixes for destructured nested default values and issues related to chaining or continuing expressions across multiple lines.\r\n\r\nThe JSX documentation was added in #4583; this PR includes documentation for the other items above, as well as [breaking change info about `=>`](http://rawgit.com/geoffreybooth/coffeescript/2.0.0-beta3/docs/v2/#breaking-change-fat-arrow), which closes #4593.\r\n\r\nDocs preview: http://rawgit.com/geoffreybooth/coffeescript/2.0.0-beta3/docs/v2/",
    "head_branch": "2.0.0-beta3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "2.0.0-beta3 (#4594)\n\n* Don’t confuse the syntax highlighter\r\n\r\n* Comment Assign::compilePatternMatch a bit\r\n\r\n* Assignment expressions in conditionals are a bad practice\r\n\r\n* Rename `wrapInBraces` to `wrapInParentheses`, to set the stage for future `wrapInBraces` that uses `{` and `wrapInBrackets` that uses `[`\r\n\r\n* Correct comment\r\n\r\n* object destructuring\r\n\r\n* Allow custom position of the rest element.\r\n\r\n* Output simple array destructuring assignments to ES2015\r\n\r\n* Output simple object destructured assignments to ES2015\r\n\r\n* Compile shorthand object properties to ES2015 shorthand properties\r\n\r\nThis dramatically improves the appearance of destructured imports.\r\n\r\n* Don’t confuse the syntax highlighter\r\n\r\n* Comment Assign::compilePatternMatch a bit\r\n\r\n* Assignment expressions in conditionals are a bad practice\r\n\r\n* Rename `wrapInBraces` to `wrapInParentheses`, to set the stage for future `wrapInBraces` that uses `{` and `wrapInBrackets` that uses `[`\r\n\r\n* object destructuring\r\n\r\n* Allow custom position of the rest element.\r\n\r\n* rest element in object destructuring\r\n\r\n* rest element in object destructuring\r\n\r\n* fix string interpolation\r\n\r\n* merging\r\n\r\n* fixing splats in object literal\r\n\r\n* Rest element in parameter destructuring\r\n\r\n* merging with CS2\r\n\r\n* merged with CS2\r\n\r\n* Add support for the object spread initializer. https://github.com/tc39/proposal-object-rest-spread/blob/master/Spread.md\r\n\r\n* Fix misspellings, trailing whitespace, other minor details\r\n\r\n* merging with beta2\r\n\r\n* refactor object spread properties\r\n\r\n* small fix\r\n\r\n* - Fixed object spread function parameters.\r\n- Clean up \"Assign\" and moved all logic for object rest properties in single method (compileObjectDestruct).\r\n- Add helper function \"objectWithoutKeys\" to the \"UTILITIES\" for use with object rest properties,\r\n  e.g. {a, b, r...} = obj => {a, b} = obj, r = objectWithoutKeys(...)\r\n- Clean up \"Obj\" and moved all logic for object spread properties in single method (compileSpread).\r\n- Clean up \"Code\".\r\n- Add method \"hasSplat\" to \"Obj\" and \"Value\" for checking if Obj contains the splat.\r\n- Enable placing spread syntax triple dots on either right or left, per #85 (https://github.com/coffeescript6/discuss/issues/85)\r\n\r\n* Fixed typos\r\n\r\n* Remove unused code\r\n\r\n* Removed dots (e.g. splat) on the left side from the grammar\r\n\r\n* Initial release for deep spread properties, e.g. obj2 = {obj.b..., a: 1} or {obj[b][c]..., d: 7}\r\nTests need to be prepared!\r\n\r\n* 1. Object literal spread properties\r\n\r\nObject literals:\r\n- obj = { {b:{c:{d:1}}}..., a:1 }\r\n\r\nParenthetical:\r\n- obj = { ( body ), a:1 }\r\n- obj = { ( body )..., a:1 }\r\n\r\nInvocation:\r\n- obj = { ( (args) -> ... )(params), a:1 }\r\n- obj = { ( (args) -> ... )(params)..., a:1 }\r\n- obj = { foo(), a:1 }\r\n- obj = { foo()..., a:1 }\r\n\r\n2. Refactor, cleanup & other optimizations.\r\n\r\n* Merged with 2.0\r\n\r\n* Cleanup\r\n\r\n* Some more cleanup.\r\n\r\n* Fixed error with freeVariable and object destructuring.\r\n\r\n* Fixed errors with object spread properties.\r\n\r\n* Improvements, fixed errors.\r\n\r\n* Minor improvement.\r\n\r\n* Minor improvements.\r\n\r\n* Typo.\r\n\r\n* Remove unnecessary whitespace.\r\n\r\n* Remove unnecessary whitespace.\r\n\r\n* Changed few \"assertErrorFormat\" tests since parentheses are now allowed in the Obj.\r\n\r\n* Whitespace cleanup\r\n\r\n* Comments cleanup\r\n\r\n* fix destructured obj param declarations\r\n\r\n* refine fix; add test\r\n\r\n* Refactor function args ({a, b...})\r\n\r\n* Additional tests for object destructuring in function argument.\r\n\r\n* Minor improvement for object destructuring variable declaration.\r\n\r\n* refactor function args ({a, b...}) and ({a, b...} = {}); Obj And Param cleanup\r\n\r\n* fix comment\r\n\r\n* Fix object destructuring variable declaration.\r\n\r\n* more tests with default values\r\n\r\n* fix typo\r\n\r\n* Fixed default values in object destructuring.\r\n\r\n* small fix\r\n\r\n* Babel’s tests for object rest spread\r\n\r\n* Style: spaces after colons in object declarations\r\n\r\n* Cleanup comments\r\n\r\n* Simplify Babel tests\r\n\r\n* Fix comments\r\n\r\n* Fix destructuring with splats in multiple objects\r\n\r\n* Add test for default values in detsructuring assignment with splats\r\n\r\n* Handle default values when assigning to object splats\r\n\r\n* Rewrite traverseRest to fix handling of dynamic keys\r\n\r\n* Fix double parens around destructuring with splats\r\n\r\n* Update compileObjectDestruct comments\r\n\r\n* Improve formatting of top-level destructures with splats and tidy parens\r\n\r\n* Added a bigger destructuring-with-defaults test and fixed a bug\r\n\r\n* Refactor destructuring grammar to allow additional forms\r\n\r\n* Add a missing case to ObjSpreadExpr\r\n\r\n* These tests shouldn’t run in the browser\r\n\r\n* Fix test.html\r\n\r\n* Fix docs scroll position getting screwed up by CodeMirror initialization\r\n\r\n* Breaking change documentation about => (fixes #4593)\r\n\r\n* Spread/rest syntax documentation\r\n\r\n* Documentation about bound class methods\r\n\r\n* 2.0.0-beta3 changelog\r\n\r\n* Add note about ‘lib’\r\n\r\n* Fix accidentally converting this to tabs\r\n\r\n* Bump version to 2.0.0-beta3\r\n\r\n* Update annotated source and test.html"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcd03a21fa1e1f1a9ecb",
    "number": 4592,
    "body": "Surprisingly, just wrapping a `new Value()` around the `Super` in the grammar didn't seem to break anything and made `super.x.y` and `super['x'].y` work\r\n\r\nJust looking through references to `Super` in `nodes.coffee`, I didn't see anything that looked like it would need updating, but there could be gotchas I'm not aware of",
    "head_branch": "iss4591_super_multiple_accesses",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2]: Fix #4591: multiple accesses after super (#4592)\n\n* support multiple accesses after super [Fixes #4591]\r\n\r\n* addtl tests from code review"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcd13a21fa1e1f1a9ecc",
    "number": 4590,
    "body": "Per @connec's comment in #4588, distinguish between \"inline\" and line-break chaining when interpreting `->` followed by `.` in the token stream as `(->).`\r\n\r\nSo `a -> .b` will error (added test) while\r\n```\r\na ->\r\n.b\r\n```\r\nis still interpreted as `a(->).b` via #4588 ",
    "head_branch": "iss3845_no_inline_chain_after_func_glyph",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "disallow inline chained call after func glyph (#4590)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcd23a21fa1e1f1a9ecd",
    "number": 4588,
    "body": "The one \"unambiguous\" thing I saw in #1043 was that a `,` immediately following `->` or `=>` can indicate an empty function body, since otherwise it seems to be a syntax error (ie a function body can't start with a comma). So this uses the rewriter to interpret `-> ,` and `=> ,` that way\r\n\r\n@GeoffreyBooth I targeted `2`, I guess this could safely go on `master` since the previous meaning was a syntax error, but you seem to prefer only targeting `master` if really necessary?",
    "head_branch": "iss1043_comma_after_function_glyph",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Fix for comma after function glyph [#1043] (#4588)\n\n* comma after function glyph [#1043]\r\n\r\n* test fat arrow\r\n\r\n* chain after function glyph [#3446] [#3845]"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcd33a21fa1e1f1a9ece",
    "number": 4587,
    "body": "As explained in #4586, beyond just fixing the TypeError thrown by the compiler when trying to compile the examples in #3906, the examples (except @GeoffreyBooth's) should all actually successfully compile, which this fixes\r\n\r\nThe issue was with `@outdebt`. The common characteristic of the examples from that issue was an \"indented\" chained call followed by a further-indented block followed by another chained call, I added tests for all three of the examples. I could only reproduce the issue by having the code at the top level so used `CoffeeScript.eval()` in the tests. This led to something weird where a test in `test/repl.coffee` was failing b/c I assigned `a` inside my `CoffeeScript.eval()`'d test and it expected `a` to be `undefined` but clearly my scope bled into theirs and caused `a` to be defined when that test ran. So I just used a different name in my tests but don't know if that's an issue with test isolation?",
    "head_branch": "iss3906_error_on_indentation_2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Fix #3906: handle indentation inside indented chain (#4587)\n\n* safe missing end token error [Fixes #3906]\r\n\r\n* handle indentation inside indented chain [Fixes #3906]"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcd43a21fa1e1f1a9ecf",
    "number": 4586,
    "body": "Fixes #3906 \r\n\r\nThis fixes the TypeError thrown by the compiler when trying to compile the examples from #3906. All of the examples from that issue except @GeoffreyBooth's should really successfully compile though - I fixed that as well, but figure that the compiler-throwing-an-error part should be merged into `master` while the fix-wonky-indentation-behavior part should be merged into `2`? So I'll open a second pull request against `2` that makes those examples compile successfully",
    "head_branch": "iss3906_indent_compilation_error",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcd53a21fa1e1f1a9ed0",
    "number": 4585,
    "body": "Fixes #4283\r\n\r\n@lydell is this what you had in mind? I made the error message `unexpected implicit function call`, and it points to the identifier that was being implicitly called (almost seems like it should point to the space between the implicit function and its first arg, but this probably clarifies the error sufficiently?)",
    "head_branch": "iss4283_error_message_implicit_call",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4585 from helixbass/iss4283_error_message_implicit_call\n\nFix #4283: error message for implicit call"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcd63a21fa1e1f1a9ed1",
    "number": 4583,
    "body": "Adds a “JSX” section to the docs, and a note about the `<` and `>` operators to the breaking changes. Follows #4551. @xixixao, would appreciate your review.\r\n\r\nhttps://rawgit.com/GeoffreyBooth/coffeescript/2-docs/docs/v2/#jsx\r\n\r\nI also added some features to Try CoffeeScript to make it more similar to the Babel REPL. Now `location.hash` is set automatically whenever the code recompiles, and the Link button has been removed. We also save the user’s code automatically into `localStorage`, so it’s there the next time they return.\r\n\r\nI also fixed (I hope) the code editors’ handling of tab-indented code, to avoid “inconsistent indentation” errors. The editors will always indent with two spaces by default; only if you paste in tab-indented code will they behave in tab-indented mode. Once at least one line in the code block begins with a tab, the tab key indents with tabs and the enter key causes new lines to be tab-indented. @lydell, @jashkenas, any notes?",
    "head_branch": "2-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] JSX documentation, Try CoffeeScript improvements (#4583)\n\n* Update browser compiler\r\n\r\n* Argument parsing tests require CommonJS environment\r\n\r\n* JSX section in the docs\r\n\r\n* Breaking change note for < and > operators\r\n\r\n* Fix JSX example\r\n\r\n* Try CoffeeScript improvements: set the hash automatically, remove ‘link’ button, automatically save code in localStorage\r\n\r\n* Fix the code editors’ handling of tab-indented code\r\n\r\n* Fix JSX example to work with React\r\n\r\n* Compiled, not rendered"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcd73a21fa1e1f1a9ed2",
    "number": 4581,
    "body": "Fixes #4579 \r\n\r\nIn a multi-line implicit object, treats postfix `for` the same regardless of whether it's on the first line\r\n\r\nWhile writing tests, came across an orthogonal bug that I submitted as #4580. There's one test line that I marked as being able to be uncommented once #4580 is fixed\r\n\r\nLooks like `command.coffee` wasn't recompiled after a previous change? But tests pass so I'm assuming the recompiled `lib/coffeescript/command.js` should stay in the PR",
    "head_branch": "iss4579_postfix_for_in_object_literals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #4579: postfix for in object literals (#4581)\n\n* postfix for on first line of implicit object\r\n\r\n* issue numbers\r\n\r\n* handle until and while similarly"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcd83a21fa1e1f1a9ed3",
    "number": 4574,
    "body": "Fixes #4566\r\n\r\nAdded recursive assignment of `@lhs` to destructured objects (corresponding to the recursive assignment of `@lhs` that was already there for arrays)\r\n\r\nLooks like this won't cause a merge conflict with #4493 ",
    "head_branch": "iss4566_destructure_nested_defaults",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] destructured nested defaults [fixes #4566] (#4574)\n\n* destructured nested defaults [fixes #4566]\r\n\r\n* don't parenthesize nested assigns"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcd93a21fa1e1f1a9ed4",
    "number": 4572,
    "body": "This PR aims to reimplement how we compile comments—both block (`### ###` or `/* */`) and end-of-line (`#` or `//`). This would close #4290 per the discussion in #4541. It would also help provide better support for plugins, as discussed in #4540, #4529 and #4563. Once we get this working with comments, the same techniques could apply to embedded JavaScript, which will also help plugins or pre-/postprocessors.\r\n\r\nThe basic idea is that when the lexer consumes a comment, instead of making a token for it, the comment data is attached to a nearby token as a property like our current `locationData`. The comments property hitches a ride on that token through the parser and rewriter, possibly getting moved onto a different token by the rewriter as appropriate; and then in `nodes.coffee` the comment gets output before or after the token it stowed away on.\r\n\r\nBecause the comment never becomes a token, the grammar never touches it; and so you can put block comments anywhere: `foo = 2 ### yo! ### + 3`. The tricky part is that not all tokens make it through the parser; and some that do get jumbled. The rewriter has significant work to do to make sure that the comment makes it across attached to the nearest surviving token, with enough information preserved that the comment can be output sensibly.\r\n\r\nSo, have you ever wondered what magic awaits in the rewriter, where streams of tokens are mutated while being looped over? Ever glimpsed `parser.js` and pondered the mysterious `yy` variable and gargantuan `switch` statement? Read `grammar.coffee` and considered how the hell the function at the top somehow gets rendered into JavaScript in `parser.js`, and what it does there? Well, this PR is for you!",
    "head_branch": "comments",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Comments (#4572)\n\n* Make `addLocationDataFn` more DRY\r\n\r\n* Style fixes\r\n\r\n* Provide access to full parser inside our custom function running in parser.js; rename the function to lay the groundwork for adding data aside from location data\r\n\r\n* Fix style.\r\n\r\n* Fix style.\r\n\r\n* Label test comments\r\n\r\n* Update grammar to remove comment tokens; update DSL to call new helper function that preserves comments through parsing\r\n\r\n* New implementation of compiling block comments: the lexer pulls them out of the token stream, attaching them as a property to a token; the rewriter moves the attachment around so it lives on a token that is destined to make it through to compilation (and in a good placement); and the nodes render the block comment. All tests but one pass (commented out).\r\n\r\n* If a comment follows a class declaration, move the comment inside the class body\r\n\r\n* Style\r\n\r\n* Improve indentation of multiline comments\r\n\r\n* Fix indentation for block comments, at least in the cases covered by the one failing test\r\n\r\n* Don’t reverse the order of unshifted comments\r\n\r\n* Simplify rewriter’s handling of comments, generalizing the special case\r\n\r\n* Expand the list of tokens we need to avoid for passing comments through the parser; get some literal tokens to have nodes created for them so that the comments pass through\r\n\r\n* Improve comments; fix multiline flag\r\n\r\n* Prepare HereComments for processing line comments\r\n\r\n* Line comments, first draft: the tests pass, but the line comments aren’t indented and sometimes trail previous lines when they shouldn’t; updated compiler output in following commit\r\n\r\n* Updated compiler, now with line comments\r\n\r\n* `process` doesn’t exist in the browser, so we should check for its existence first\r\n\r\n* Update parser output\r\n\r\n* Test that proves #4290 is fixed\r\n\r\n* Indent line comments, first pass\r\n\r\n* Compiled output with indented line comments\r\n\r\n* Comments that start a new line shouldn’t trail; don’t skip comments attached to generated tokens; stop looking for indentation once we hit a newline\r\n\r\n* Revised output\r\n\r\n* Cleanup\r\n\r\n* Split “multiline” line comment tokens, shifting them forward or back as appropriate\r\n\r\n* Fix comments in module specifiers\r\n\r\n* Abstract attaching comments to a node\r\n\r\n* Line comments in interpolated strings\r\n\r\n* Line comments can’t be multiline anymore\r\n\r\n* Improve handling of blank lines and indentation of following comments that start a new line (i.e. don’t trail)\r\n\r\n* Make comments compilation more object-oriented\r\n\r\n* Remove lots of dead code that we don’t need anymore because a comment is never a node, only a fragment\r\n\r\n* Improve eqJS helper\r\n\r\n* Fix #4290 definitively, with improved output for arrays with interspersed block comments\r\n\r\n* Add support for line comments output interspersed within arrays\r\n\r\n* Fix mistake, don’t lose the variable we’re working on\r\n\r\n* Remove redundant replacements\r\n\r\n* Check for indentation only from the start of the string\r\n\r\n* Indentations in generated JS are always multiples of two spaces (never tabs) so just look for 2+ spaces\r\n\r\n* Update package versions; run Babel twice, once for each preset, temporarily until a Babili bug is fixed that prevents it from running with the env preset\r\n\r\n* Don’t rely on `fragment.type`, which can break when the compiler is minified\r\n\r\n* Updated generated docs and browser compiler\r\n\r\n* Output block comments after function arguments\r\n\r\n* Comments appear above scope `var` declarations; better tracking of generated `JS` tokens created only to shepherd comments through to the output\r\n\r\n* Create new FuncGlyph node, to hold comments we want to output near the function parameters\r\n\r\n* Block comments between `)` and `->`/`=>` get output between `)` and `{`.\r\n\r\n* Fix indentation of comments that are the first line inside a bare mode block\r\n\r\n* Updated output\r\n\r\n* Full Flow example\r\n\r\n* Updated browser compiler\r\n\r\n* Abstract and organize comment fragment generation code; store more properties on the comment fragment objects; make `throw` behave like `return`\r\n\r\n* Abstract token insertion code\r\n\r\n* Add missing locationData to STRING_START token, giving it the locationData of the overall StringWithInterpolations token so that comments attached to STRING_START end up on the StringWithInterpolations node\r\n\r\n* Allow `SUPER` tokens to carry comments\r\n\r\n* Rescue comments from `Existence` nodes and `If` nodes’ conditions\r\n\r\n* Rescue comments after `\\` line continuation tokens\r\n\r\n* Updated compiled output\r\n\r\n* Updated browser compiler\r\n\r\n* Output block comments in the same `compileFragments` method as line comments, except for inline block comments\r\n\r\n* Comments before splice\r\n\r\n* Updated browser compiler\r\n\r\n* Track compiledComments as a property of Base, to ensure that it’s not a global variable\r\n\r\n* Docs: split up the Usage section\r\n\r\n* Docs for type annotations via Flow; updated docs output\r\n\r\n* Update regular comments documentation\r\n\r\n* Updated browser compiler\r\n\r\n* Comments before soak\r\n\r\n* Comments before static methods, and probably before `@variable =` (this) assignments generally\r\n\r\n* Comments before ‘if exists?’, refactor comment before ‘if this.var’ to be more precise, improve helper methods\r\n\r\n* Comments before a method that contains ‘super()’ should output above the method property, not above the ‘super.method()’ call\r\n\r\n* Fix missing comments before `if not` (i.e. before a UNARY token)\r\n\r\n* Fix comments before ‘for’; add test for comment before assignment if (fixed in earlier commit)\r\n\r\n* Comments within heregexes\r\n\r\n* Updated browser compiler\r\n\r\n* Update description to reflect what’s now happening in compileCommentFragments\r\n\r\n* Preserve blank lines between line comments; output “whitespace-only” line comments as blank lines, rather than `//` following by whitespace\r\n\r\n* Better future-proof comments tests\r\n\r\n* Comments before object destructuring; abstract method for setting comments aside before compilation\r\n\r\n* Handle more cases of comments before or after `for` loop declaration lines\r\n\r\n* Fix indentation of comments preceding `for` loops\r\n\r\n* Fix comment before splat function parameter\r\n\r\n* Catch another RegexWithInterpolations comment edge case\r\n\r\n* Updated browser compiler\r\n\r\n* Change heregex example to one that’s more readable; update output\r\n\r\n* Remove a few last references to the defunct HERECOMMENT token\r\n\r\n* Abstract location hash creation into a function\r\n\r\n* Improved clarity per code review notes\r\n\r\n* Updated browser compiler"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcda3a21fa1e1f1a9ed5",
    "number": 4570,
    "body": "Fixes #4564 \r\n\r\nThe breaking example from that issue was:\r\n```\r\nfor key of fn k: v\r\n  a\r\n```\r\nThe general case is when an implicit object is followed by an indent, eg this also breaks:\r\n```\r\nif k: v\r\n  1\r\n```\r\n\r\nThe solution was to make implicit objects act more like implicit calls as far as how they behave when they see an `INDENT`. Basically the exception to them behaving the same is when the `INDENT` follows the `:` of an object key (at which point clearly an `INDENT` should not close the implicit object). Otherwise they should behave the same and this allows us to close multiple open implicit calls and/or implicit objects when we see an `INDENT` (like in the first example)\r\n\r\nTo make implicit objects act more like implicit calls, we need to push `CONTROL`s (ie suppressors of `INDENT`-closes-implicits behavior) onto the `stack` not just when we're (immediately) inside an implicit call (ie `inImplicitCall()`) but also when we're (immediately) inside an implicit object (ie `inImplicitObject()`)\r\n\r\nThis led to a slightly cleaner solution to handle things like `a: for x in y then x` than what @xixixao did in #3328. Basically if we see a `FOR` right after a `:`, we explicitly push a `CONTROL` (rather than having a special case represented by `@insideForDeclaration` that thwarts attempted `endImplicitObject()`s, that's what `CONTROL` is there to do). So I was able to get rid of all the `@insideForDeclaration` stuff from that PR\r\n\r\n@GeoffreyBooth if this is deemed potentially-breaking I can retarget it to `2`",
    "head_branch": "iss4564_indent_closes_implicit_object",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #4564: indent closes implicit object (#4570)\n\n* indent closes implicit object [Fixes #4564]\r\n\r\n* add test for just implicit object\r\n\r\n* remove stray lib file"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcdb3a21fa1e1f1a9ed6",
    "number": 4569,
    "body": "Fixes #4436.",
    "head_branch": "4436",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix immediately invoked named classes (#4569)\n\nFixes #4436."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcdc3a21fa1e1f1a9ed7",
    "number": 4565,
    "body": "Tests detailing the current behavior of the CS option parser with respect to `--`, `.coffee`, and joined arguments (e.g. `-bc`). #3946 has an attempt to fix this, along with changes to these tests.",
    "head_branch": "test/current-cli-optparse",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] CLI: Test option parsing for current CLI (#4565)\n\n* intermediate save\r\n\r\n* add note saying where OptionParser is used in coffee command\r\n\r\n* add some more work\r\n\r\n* fix flatten functions\r\n\r\n* refactor tests\r\n\r\n* add basic test\r\n\r\n* remove unused file\r\n\r\n* compilation now hangs\r\n\r\n* remove unnecessary changes\r\n\r\n* add tests!!!\r\n\r\n* clarify a test"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcdd3a21fa1e1f1a9ed8",
    "number": 4561,
    "body": "As discussed in coffeescript6/discuss#84 by @ryansolid @connec @GeoffreyBooth: restore bound methods with a runtime check to avoid silent breakage of code that under `2` would call the method before it was bound (ie a base class constructor calling a derived class bound method in a non-`this`-preserving way eg as a callback)\r\n\r\nMuch of the code and tests here are restored from pre-#4530, I’ll comment in the code on new stuff I’ve added\r\n\r\nAs I [commented](https://github.com/coffeescript6/discuss/issues/84#issuecomment-306605288) in coffeescript6/discuss#84, there seems to be a question of how to handle anonymous classes (with bound methods). If my suggestion (3) (give anonymous classes with bound methods a name) is deemed the best option, I can try and implement that behavior (instead of currently (2) (forgo the runtime check for anonymous classes))",
    "head_branch": "iss84_discuss_bound_method_runtime_check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Restore bound class methods via runtime check to avoid premature calling of bound method before binding (#4561)\n\n* bound method runtime check\r\n\r\n* restore bound method tests\r\n\r\n* bound method tests\r\n\r\n* test bound method in prop-named class\r\n\r\n* run check against parent class\r\n\r\n* dummy commit\r\n\r\n* remove comment\r\n\r\n* rename to boundMethodCheck\r\n\r\n* fixes from code review\r\n\r\n* use ref to own class for check\r\n\r\n* fixes from code review\r\n\r\n* remove unneeded param"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcde3a21fa1e1f1a9ed9",
    "number": 4559,
    "body": "Is no one ever using the REPL? The variable was never documented, but Node does this on its own, so you can access the last expression with both `_` and `__`. No more annoying messages!!!",
    "head_branch": "fix-repl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix REPL assignment (#4559)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcdf3a21fa1e1f1a9eda",
    "number": 4554,
    "body": "Fixes #4544. Also includes some little `rewriter.coffee` cleanups\r\n\r\nThe reason for the behavior @couchand describes in #4544 is that postfix `if`s are currently treated as implicit-object-literal-closing if they're on the first line of the object literal so that things like `x = a: b if c` work correctly. But it's assuming that it's a single-line object literal, so if the expected compilation described by @couchand is desired (which I think it is, ie you should be able to swap two lines of an object literal without anything weird happening) then this fixes it by sniffing ahead to see if we appear to be on the first line of a multi-line object literal\r\n\r\nAdded the examples given by @couchand as well as a few more cases to `test/objects.coffee`\r\n\r\n@GeoffreyBooth I figured you'd want this targeted against `2`?\r\n\r\n@GeoffreyBooth @lydell let me know if I should justify the correctness of any/all of the little cleanup refactorings",
    "head_branch": "iss4544_postfix_conditionals_in_object_literals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #4544: postfix conditional on first line of implicit object (#4554)\n\n* support postfix conditional on first line of implicit object\r\n\r\n* cleanup cleanup\r\n\r\n* also fixes #2051, added test"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfce03a21fa1e1f1a9edb",
    "number": 4553,
    "body": "This is not merge-ready (and not necessarily thinking that it should be merged, see below): there are some files included (`JSX_TODO` and `jsx_examples/`) that wouldn't be merged but may be of interest and there are some remaining features (from `JSX_TODO`) that I'd like to implement as part of this. But a PR seems like the right place to go into detail about what I've got working and raise some questions. @GeoffreyBooth: will retarget to `2`\r\n\r\nI've avoided React out of an aesthetic repulsion to JSX but decided to check it out this past week. Doesn't seem at all bad in a lot of ways but if I'm going to use it, I want to be able to use it *nicely* in Coffeescript (the *nicest* language). I love Haml's whitespace-indented syntax and to me the natural way to embed markup in Coffeescript is along those lines. Pretty and clean. JSXY. Normal JSX syntax (using Coffeescript instead of Javascript inside expressions) is supported as well.\r\n\r\nLike Haml, elements are specified using `%h1` syntax, with shorthands for `id` and `class` (aka `className`) attributes, and attributes can be specified using `{}` object syntax and/or `()` more HTML-esque syntax:\r\n```\r\n#page                            # implicit <div>, => <div id='page'>\r\n  .panel.clearfix                # implicit <div>, => <div className='panel clearfix'>\r\n    %section.container( title='Container' id={@id})    # => <section className=\"container\" title='Container' id={this.id}>\r\n      %form{ @onSubmit }         # => <form onSubmit={this.onSubmit}>\r\n        %input{                  # => <input type={'text'} value={value} onChange={this.onChange}></input>\r\n          type: 'text'           # multiline attributes, inside the {} this gets treated like a CS object literal\r\n          value, @onChange\r\n        }\r\n        %input(                  # => <input type='submit' value='Submit'></input>\r\n          type='submit'          # ()-style attributes can also be multiline\r\n          value='Submit' )\r\n                                 # </form></section></div></div>\r\n```\r\nAt the moment you can't compile the above as-is because line-ending comments aren't supported inside JSX elements - that's high on the TODO list but for now you'd have to strip out the comments.\r\n\r\nElement content can be inline or indented. In addition to the JSX `{...}` expression syntax, you can use Haml-style `=` syntax (inline or from the start of an indented line, with optional indented expression body) for expressions as well. With Coffeescript's everything-is-an-expression approach, this lets you do things like use a whitespace-indented `for` loop to generate a list of child elements (as opposed to `{ list.map( ...callback returning element )}`, which you can still use (with `{}` or `=` syntax) if you prefer). To nest child elements, you can use Haml-style elements or JSX tags. Like JSX, other element content is treated as text content.\r\n```\r\n%button{ @onClick } Login           # inline text content, => <button onClick={this.onClick}>Login</button>\r\n%button{ @onClick }= @loginText     # inline expression content using `=`, => <button onClick={this.onClick}>{this.loginText}</button>\r\n%button{ @onClick } {@loginText}    # inline expression content using `{...}`\r\n%button{ @onClick } Please {        # inline text content and expression which goes multiline\r\n  @resources\r\n  .getLoginText()\r\n}\r\n%button{ @onClick }                 # indented body with nested text, element, and expression content\r\n  Please\r\n  %b Please\r\n  { 'Please!' }\r\n  = @loginText\r\n<button onClick={@onClick}>        # same idea for JSX-style tags, you aren't then constrained to JSX-style syntax inside them\r\n  %b Please\r\n  = @loginText\r\n</button>\r\n\r\n%ul.ingredients\r\n  = for ingredient, i in @props.ingredients  # generates a for-expression that returns a list of elements\r\n    %li{ key: i }= ingredient\r\n# or alternatively, using `.map()` and `{...}`:\r\n%ul.ingredients\r\n  {@props.ingredients.map (ingredient, i) ->\r\n    %li{ key: i } {ingredient}\r\n  }\r\n```\r\nTo do conditional rendering inside an element body, you can again use `=` syntax, or `{...}` if you prefer. Currently if you use `=` syntax you have to indent in such a way that all subsequent expression lines (including `else`) are indented with respect to the initial (eg `= if ...`) line.\r\n```\r\nrender: ->\r\n  {isLoggedIn} = @state\r\n\r\n  %div\r\n    %Greeting{ isLoggedIn }\r\n    = if isLoggedIn\r\n      %LogoutButton( onClick={@handleLogoutClick} )\r\n     else\r\n      %LoginButton{ onClick: @handleLoginClick }\r\n    # or:\r\n    {if isLoggedIn\r\n      %LogoutButton( onClick={@handleLogoutClick} )\r\n    else\r\n      %LoginButton{ onClick: @handleLoginClick }\r\n    }\r\n```\r\nThe React [docs](https://facebook.github.io/react/docs/conditional-rendering.html#inline-if-with-logical--operator) also suggest the use of `&&` for conditional rendering - you can do that, but `= if` syntax seems just as clean and more readable:\r\n```\r\nMailbox = ({unreadMessages: {length}}) ->\r\n  %div\r\n    %h1 Hello!\r\n    = length and\r\n      %h2 You have {length} unread messages.\r\n    # vs:\r\n    = if length\r\n      %h2 You have {length} unread messages\r\n```\r\nYou can also use postfix `if`/`unless`/`for` (ie comprehension) syntax to an extent -- basically if you use JSX tag syntax for these then you're good to go because the end tag is explicit but if you use Haml-style elements then currently it only treats it as postfix if it immediately follows the tag (ie it can't have content/body):\r\n```\r\ngetButton: ->\r\n  return %LogoutButton if @props.loggedIn\r\n  %LoginButton\r\n\r\nrender: ->\r\n  .container\r\n    = %Item{ item } for item in @props.list\r\n    # or go nuts:\r\n    = <Item item={item}>Children of any {@kind}</Item> for item in @props.list\r\n```\r\n\r\nSo hopefully that's a decent overview of the syntax. I didn't give many examples of JSX-style syntax but it should basically mimic JSX just with Coffeescript in expressions instead of JS. One notable exception as also noted by @xixixao in #4551 is object spread syntax.\r\n\r\nAs far as how this relates to Coffeescript proper, I'll read some of the other threads that seem to be discussing similar questions but I was sort of figuring the options were (1) merge into `2` despite breaking changes (2) try to have some kind of plugin/option for enabling this within Coffeescript proper, though this does seem hard or (3) maintain this separate from Coffeescript proper. Interestingly, no existing tests (against 1.x) are currently failing, but this would be my understanding of the breaking changes:\r\n- `#id` syntax would break most comments that don't have a space after the `#`\r\n- `%div` syntax would break some code that doesn't leave a space after the `%` operator\r\n- `<div>` syntax would break some code that doesn't leave a space after the `<` operator\r\n- I'm trying to get a little fancy to allow leading `.class` implicit-div syntax in some places where it shouldn't be ambiguous with chained `.prop` syntax. So far I don't think I've introduced anything breaking there but am tempted to make a leading `.abc` after a blank line be treated as a `.class` element\r\n\r\nMy sense (ie my own sensibilities and my understanding of Coffeescript philosophy as espoused by @jashkenas) is that incorporating lots of code (including some breaking changes) just to support a syntax that in a few years may be passe is not the cleanest. However I do feel that this syntax (call it Coffeescript-JSX-Haml or if it's a bad idea to actually use the name Haml then Coffeescript-JSXY) is as Coffeescript-y as you're gonna get with adding JSX. So I wonder what the downsides are of maintaining this separately from Coffeescript proper but (hopefully \"officially\") promoting it as the (or one) way to use Coffeescript in a React project. Then people with existing (Coffeescript) codebases would just change an NPM dependency, fix any possible breaking changes, and start using the extended syntax? Is the hard part keeping it up to date with Coffeescript proper?\r\n\r\nI'd like to go through and comment on the code in detail for @GeoffreyBooth / @lydell / whomever might be reviewing it but that seems premature. And I'll save some of the thoughts on how this might relate to the future of Coffeescript for other threads where this seems to be being discussed, but I basically think if you're gonna add support for this, then make it **way nicer** than using JSX/Javascript. That was my immediate Reaction and I have to imagine there are lots of other coders out there who may want or have to use React but think JSX is (syntactically, at least) kind of gross and would jump at the chance to use it in a way that's more appealing in the same ways that Coffeescript will always be more appealing than Javascript",
    "head_branch": "jsx",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfce13a21fa1e1f1a9edc",
    "number": 4551,
    "body": "So here's a fully functional implementation of what I call CSX - the JSX equivalent for CoffeeScript. I tried to adhere as much as possible to the syntactical rules of JSX (as opposed to doing possible fancy stuff).\r\n\r\nFirst, let me address why I think it theoretically makes sense to include this in CoffeeScript:\r\n\r\n- To implement CSX properly, you need a fully functioning CoffeeScript parser. This is so difficult to do without using the actual implementation as it's practically impossible. Consider that https://github.com/jsdf/coffee-react-transform took over two years of development to get to its current state, with over 1200 lines of CS source code. This PR took me two nights and is adding 170 LOC to the compiler, while avoiding many issues that plagued the transform, f.e. https://github.com/jsdf/coffee-react-transform/issues/56\r\n- JSX is immensely popular. Although I personally would not pick XML as role-model for anything, it has took off and is now used widely outside of React. It basically allows second compilation mode for some expressions. If CoffeeScript cannot support it, it's gonna be a major driver for people moving to ES6/7 with Webpack etc. toolchain (the only other really big thing CoffeeScript is missing is static typing, which might eventually be its final nail in the coffin).\r\n- JSX has real merits over custom runtime replacements in terms of syntax, mainly ease of textual content surrounding other expressions.\r\n\r\nSecond, I implemented this on top of `2`, but the implementation would make it trivial to support it in original CoffeeScript too, provided we would have a way (option, pragma) to determine what target the CSX tags should compile to.\r\n\r\nSo how is this implemented and why: JSX is a super simple transform, provided you know you are looking at an expression in the surrounding language. Conceptually it works like this:\r\n```js\r\n<div /> → div()\r\n<div x=\"a\" /> → div({x: 'a'})\r\n<div>A</div> → div({}, 'A')\r\n```\r\nand so on. Of course `React` for example actually uses `Something('div')` instead of `div()`, but that doesn't really matter for the parsing phase. So I actually turn CSX into valid CoffeeScript tokens in the lexer. Note that some of the work could be done in the rewriter, the split between the lexer and the rewriter is very arbitrary, and I just found it easier to do this in the lexer, instead of having to pass bunch of information to the rewriter. But I think it would be doable to move most stuff outside of `csxToken` method there.\r\n\r\nOnce I do this conversion, it's actually tricky to tell which nodes were originally CSX. The Jison parser does not make it easy at all to pass adhoc info from the lexer to `nodes` (which compile the tree to JS), so I created a new token for the tag, and seed the info from there when compiling. The tagging of children nodes is not super clean, but I haven't done anything that wasn't at least a bit used before.\r\n\r\nNow, for differences between JSX, coffee-react-transform and CSX:\r\n\r\n1. CSX doesn't support inline comments inside interpolations, same as JSX\r\n2. bare expressions as attribute values are not supported, same as JSX\r\n3. there is no support for custom pragmas, the compiler outputs JSX\r\n4. **BREAKING CHANGE** `<x` **with leading space** is no longer supported. Supporting this leads to highly ambiguous syntax:\r\n```coffee\r\nx = a<b>c; # allowed\r\nx = a <b> c; # syntax error, missing closing tag\r\n```\r\n\r\n\r\nboth JSX and the transform handle this \"correctly\", allowing this code to be treated as comparison. I'm not sure that there is a way to allow this in CoffeeScript without making the resulting compilation ambiguous. JSX can do this easily, because `a <b/>` is not a valid JS epxression, but in CS it is simply `a(<b/>)`. I think the transform looks ahead to determine whether there is a closing tag, and we could do something similar, but I don't know how to do that without introducing incorrect edge cases. ~~Ideas welcome.~~ _(Update: I think restricting this to only unbalanced whitespace should alleviate most concerns)_\r\n\r\nYou can see these in the tests I added. Note that I removed some original coffee-react-transform tests, which were mainly testing the CoffeeScript parsing, not the CSX part.\r\n\r\nWhat's left?\r\n\r\nSpreads, blocked by #3894\r\nOne case which is broken, which boils down to this being invalid CoffeeScript:\r\n```\r\narticle({number: 2,\r\n  range: 1,\r\n},\"\\n\")\r\n```\r\n(there is a corresponding CSX test with a TODO).\r\n\r\nFixes #4529.",
    "head_branch": "csx",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Support for CSX - equivalent of JSX (#4551)\n\n* CSX implementation\r\n\r\n* fixed comment, used toJS, added error tests, fixed error in identifier regex, fixed interpolation inside attributes value and added test\r\n\r\n* added missing test for bare attributes, split attribute and indentifier regex, fixed checking for closing tags closing angle bracket\r\n\r\n* Refactor tests that compare expected generated JavaScript with actual generated JavaScript to use common helper; add colors to error message to make differences easier to read\r\n\r\n* Better match the style of the rest of the codebase\r\n\r\n* Remove unused function\r\n\r\n* More style fixes\r\n\r\n* Allow unspaced less-than operator when not using CSX\r\n\r\n* Replace includesCSX with a counter and simplify the unspaced operator logic\r\n\r\n* Fixed indexing and realized that I completely enabled the tight spacing, added a test for it too\r\n\r\n* Style fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfce23a21fa1e1f1a9edd",
    "number": 4550,
    "body": "Updated docs at http://rawgit.com/geoffreybooth/coffeescript/2.0.0-beta2/docs/v2/. From the [changelog](http://rawgit.com/geoffreybooth/coffeescript/2.0.0-beta2/docs/v2/#changelog):\r\n\r\n*   This release includes [all the changes from 1.12.5 to 1.12.6](http://rawgit.com/geoffreybooth/coffeescript/2.0.0-beta2/docs/v2/#1.12.6).\r\n*   Bound (fat arrow) methods in classes must be declared in the class constructor, after `super()` if the class is extending a parent class. See [breaking changes for classes](http://rawgit.com/geoffreybooth/coffeescript/2.0.0-beta2/docs/v2/#breaking-changes-classes).\r\n*   All unnecessary utility helper functions have been removed, including the polyfills for `indexOf` and `bind`.\r\n*   The `extends` keyword now only works in the context of classes; it cannot be used to extend a function prototype. See [breaking changes for `extends`](http://rawgit.com/geoffreybooth/coffeescript/2.0.0-beta2/docs/v2/#breaking-changes-super-extends).\r\n*   Literate CoffeeScript is now parsed entirely based on indentation, similar to the 1.x implementation; there is no longer a dependency for parsing Markdown. See [breaking changes for Literate CoffeeScript parsing](http://rawgit.com/geoffreybooth/coffeescript/2.0.0-beta2/docs/v2/#breaking-changes-literate-coffeescript).\r\n*   JavaScript reserved words used as properties are no longer wrapped in quotes.\r\n*   `require('coffeescript')` should now work in non-Node environments such as the builds created by Webpack or Browserify. This provides a more convenient way to include the browser compiler in builds intending to run in a browser environment.\r\n*   Unreachable `break` statements are no longer added after `switch` cases that `throw` exceptions.\r\n*   The browser compiler is now compiled using Babili and transpiled down to Babel’s `env` preset (should be safe for use in all browsers in current use, not just evergreen versions).\r\n*   Calling functions `@get` or `@set` no longer throws an error about required parentheses. (Bare `get` or `set`, not attached to an object or `@`, [still intentionally throws a compiler error](http://rawgit.com/geoffreybooth/coffeescript/2.0.0-beta2/docs/v2/#unsupported-get-set).)\r\n*   If `$XDG_CACHE_HOME` is set, the REPL `.coffee_history` file is saved there.\r\n\r\nI added a note about the bound class methods to the classes breaking changes section. I also renamed “Change Log” to “Changelog” since [that’s how Wikipedia spells it](https://en.wikipedia.org/wiki/Changelog).",
    "head_branch": "2.0.0-beta2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] 2.0.0-beta2 (#4550)\n\n* Breaking changes note about bound class methods\r\n\r\n* Changelog for 2.0.0-beta2, including renaming “Change Log” to “Changelog” (the preferred spelling per Wikipedia)\r\n\r\n* Update version to 2.0.0-beta2\r\n\r\n* 2.0.0-beta2 generated output"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfce33a21fa1e1f1a9ede",
    "number": 4548,
    "body": "From https://rawgit.com/GeoffreyBooth/coffeescript/1.12.6/docs/v1/#changelog:\r\n\r\n*   The `return` and `export` keywords can now accept implicit objects (defined by indentation, without needing braces).\r\n*   Support Unicode code point escapes (e.g. `\\u{1F4A9}`).\r\n*   The `coffee` command now first looks to see if CoffeeScript is installed under `node_modules` in the current folder, and executes the `coffee` binary there if so; or otherwise it runs the globally installed one. This allows you to have one version of CoffeeScript installed globally and a different one installed locally for a particular project. (Likewise for the `cake` command.)\r\n*   Bugfixes for chained function calls not closing implicit objects or ternaries.\r\n*   Bugfixes for incorrect code generated by the `?` operator within a termary `if` statement.\r\n*   Now `cake build:browser` just creates the browser build, without also running tests on it. New task `cake build:browser:full` creates the browser build and then tests it.\r\n*   Failing tests now result in a nonzero exit code.\r\n*   Fixed a too-permissive “reserved words” test, and fixed a REPL test that was broken in Node < 6.\r\n\r\nI’ve also changed the NPM module referenced in the installation instructions, README and elsewhere to be the `coffeescript` module, instead of `coffee-script`. The [installation instructions](https://rawgit.com/GeoffreyBooth/coffeescript/1.12.6/docs/v1/#installation) now also mention the bit about the local vs global `coffee` command.",
    "head_branch": "1.12.6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "1.12.6 (#4548)\n\n* Un-prefer global (#4543)\r\n\r\n* 1.12.6 changelog; update NPM module in documentation to be `coffeescript` instead of `coffee-script`; update installation to add note about global vs local `coffee` command\r\n\r\n* Update packages\r\n\r\n* Updated output\r\n\r\n* Simplify changelog"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfce33a21fa1e1f1a9edf",
    "number": 4546,
    "body": "Resend #4501",
    "head_branch": "fix/webpack",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[WIP][CS2] Module should be require-able in non-Node environments like Webpack and Browserify (#4546)\n\n* Add webpack support\r\n\r\n* Move Node.js-only code from src/coffee-script.coffee to src/index.coffee\r\n* Use lib/coffee-script/index.js as npm package's \"main\" script\r\n* Export CoffeeScript from src/browser.coffee\r\n* Set package.json's \"browser\" field to lib/coffee-script/browser.js (used by webpack as entry point)\r\n* Use lib/coffee-script/browser.js as bower package's \"main\" script\r\n\r\n* Use NOP moduleMain when generating parser with Jison\r\n\r\n* Remove legacy debug code from browser.coffee\r\n\r\n* Improve comments, style\r\n\r\n* Fix path\r\n\r\n* Remove stub that was only to avoid breaking browser tests; compensate for the lack of stub when running the browser tests in Node\r\n\r\n* Update output\r\n\r\n* Add test:webpack task to Cakefile\r\n\r\n* Update output files\r\n\r\n* Run browser tests against webpack build\r\n\r\n* Fix newline at end of file\r\n\r\n* Export webpack test bundle as CommonJS module\r\n\r\n* Remove build:webpack task\r\n\r\n* Save webpack build to tmpdir; suppress build output unless it fails"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfce43a21fa1e1f1a9ee0",
    "number": 4543,
    "body": "Closes #4049.\r\n\r\n- [x] Installing CoffeeScript no longer triggers NPM’s “prefer global” warning\r\n- [x] The `coffee` and `cake` commands now first check if you have a locally-installed CoffeeScript module under the current path, and execute that version if so, similar to how Gulp works; and fall back to the global version otherwise.\r\n\r\nThis enables using different versions of the CoffeeScript CLI on a per-project basis:\r\n\r\n```bash\r\n/tmp ▶ coffee -v\r\nCoffeeScript version 1.12.5\r\n/tmp ▶ mkdir coffeescript1.11\r\n/tmp ▶ cd coffeescript1.11\r\n/tmp/coffeescript1.11 ▶ npm install coffeescript@1.11.0\r\n/private/tmp/coffeescript1.11\r\n└── coffeescript@1.11.0\r\n\r\nnpm WARN enoent ENOENT: no such file or directory, open '/private/tmp/coffeescript1.11/package.json'\r\nnpm WARN coffeescript1.11 No description\r\nnpm WARN coffeescript1.11 No repository field.\r\nnpm WARN coffeescript1.11 No README data\r\nnpm WARN coffeescript1.11 No license field.\r\n/tmp/coffeescript1.11 ▶ coffee -v\r\nCoffeeScript version 1.11.0\r\n/tmp/coffeescript1.11 ▶ cd ..\r\n/tmp ▶ mkdir coffee-script1.11\r\n/tmp ▶ cd coffee-script1.11\r\n/tmp/coffee-script1.11 ▶ npm install coffee-script@1.11.0\r\n/private/tmp/coffee-script1.11\r\n└── coffee-script@1.11.0\r\n\r\nnpm WARN enoent ENOENT: no such file or directory, open '/private/tmp/coffee-script1.11/package.json'\r\nnpm WARN coffee-script1.11 No description\r\nnpm WARN coffee-script1.11 No repository field.\r\nnpm WARN coffee-script1.11 No README data\r\nnpm WARN coffee-script1.11 No license field.\r\n/tmp/coffee-script1.11 ▶ coffee -v\r\nCoffeeScript version 1.11.0\r\n/tmp/coffee-script1.11 ▶ cd ..\r\n/tmp ▶ mkdir coffeescript2\r\n/tmp ▶ cd coffeescript2\r\n/tmp/coffeescript2 ▶ npm install coffeescript@next\r\n/private/tmp/coffeescript2\r\n└─┬ coffeescript@2.0.0-beta1\r\n  └─┬ markdown-it@8.3.1\r\n    ├─┬ argparse@1.0.9\r\n    │ └── sprintf-js@1.0.3\r\n    ├── entities@1.1.1\r\n    ├── linkify-it@2.0.3\r\n    ├── mdurl@1.0.1\r\n    └── uc.micro@1.0.3\r\n\r\nnpm WARN enoent ENOENT: no such file or directory, open '/private/tmp/coffeescript2/package.json'\r\nnpm WARN coffeescript2 No description\r\nnpm WARN coffeescript2 No repository field.\r\nnpm WARN coffeescript2 No README data\r\nnpm WARN coffeescript2 No license field.\r\n/tmp/coffeescript2 ▶ coffee -v\r\nCoffeeScript version 2.0.0-beta1\r\n```\r\n\r\nIf you don’t have a globally-installed version, the `coffee` or `cake` commands don’t do anything; you either have to use the locally-installed module via Node, like a normal module, or access the CLI via `./node_modules/coffeescript/bin/coffee`.",
    "head_branch": "un-prefer-global",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Un-prefer global (#4543)\n\n* Don’t prefer global installation; the `coffee` or `cake` commands should try to run the locally-installed module if it exists, or the global version otherwise\r\n\r\n* Style"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfce53a21fa1e1f1a9ee1",
    "number": 4541,
    "body": "Closes #4290. Now it’s possible to put multiline comments in array literals, just like was already possible for objects:\r\n\r\n```coffee\r\narr = [\r\n  a\r\n  ###\r\n    Comment\r\n  ###\r\n  b\r\n]\r\n```\r\n___\r\n```js\r\nvar arr;\r\n\r\narr = [\r\n  a, /*\r\n    Comment\r\n   */, b\r\n];\r\n```\r\n\r\nAs part of this, I redid the grammar for array elements so that they now mirror the grammar for object properties; they were already very similar, but now they match.\r\n\r\nThe big change is that block comments are now expressions, not statements. This is probably a change worth making on its own merits, as embedded JavaScript blocks are expressions and [both tokens should probably behave the same way](https://github.com/jashkenas/coffeescript/issues/4540). The only breaking change that I can see as a result of this is that block comments are no longer ignored in directive prologues (the area where you put `use strict`). They really shouldn’t be, since if you type a block comment there you’re probably expecting it to appear in the output. I don’t think we should be engaging in special-casing anymore to create exceptions for the `use strict` directive. If people need it, they can either use modules, use classes, or use the Babel transform that adds it everywhere.",
    "head_branch": "comment-block-in-array-literal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfce63a21fa1e1f1a9ee2",
    "number": 4539,
    "body": "Closes #4187.",
    "head_branch": "fix-rewriter-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typo; closes #4187 (#4539)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfce73a21fa1e1f1a9ee3",
    "number": 4538,
    "body": "Fix #4020: No need for `break;` after a switch case that `throw`s. Solution [shamelessly stolen](https://github.com/jashkenas/coffeescript/issues/4020#issuecomment-118588369) from @lydell for all credit.\r\n\r\nNot sure how to test without checking for generated JavaScript. Not sure this really needs its own test. Current tests all still pass.",
    "head_branch": "no-break-after-throw",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #4020: No need for `break;` after a switch case that `throw`s (#4538)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfce83a21fa1e1f1a9ee4",
    "number": 4536,
    "body": "I’m trying to close all the open tickets regarding documentation, and make general docs improvements in preparation for 2.0.0-beta2. See live: https://rawgit.com/GeoffreyBooth/coffeescript/docs/docs/v2/index.html\r\n\r\n- [x] Rewrote “CoffeeScript 2” section to introduce CS2, explain what’s new and why 2 is important; moved practical info about transpilation into “Usage”\r\n- [x] #3551: Node module API\r\n- [x] #2360: Remove incorrect reference to Ruby variable scoping\r\n- [x] #3281: Add example `if item not in items`\r\n- [x] Better documentation of regular operators, including adding `from` and the JS equivalent for `in`\r\n- [x] #1631: Much more comprehensive documentation of the existential operator\r\n- [x] #4478: Fix destructuring’s comment about default values\r\n- [x] Move the chaining function calls documentation out of the changelog into its own section\r\n- [x] Spinoff separate sections for generator and async functions (from section on bound/fat arrow functions)\r\n- [x] #4530: Removed support for bound instance methods\r\n- [x] #4526: No more `extends` keyword for function prototypes\r\n- [x] #15, #4531: Named functions\r\n- [x] Add separate sidebar links for the sub-sections of “Unsupported ECMAScript Features” and “Breaking Changes from 1.x”\r\n\r\nI closed #2039, about comprehensions, as the docs as written matched it almost word for word. I guess someone forgot to close it after the docs were updated sometime long ago.",
    "head_branch": "docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Docs updates (#4536)\n\n* Docs: named functions and function declarations\r\n\r\n* No more prototypal `extends`; update docs and example\r\n\r\n* More comprehensive documentation of the existential operator; closes #1631\r\n\r\n* Better document operators, including `from`\r\n\r\n* No fat arrow class methods anymore\r\n\r\n* Destructuring shouldn’t say that default values are applied in case of undefined or null\r\n\r\n* Spinoff generator and async functions into their own sections; reorder things so that the sections on functions come just before classes, and destructuring goes next to the operators (which discuss assignment)\r\n\r\n* Rewrite “CoffeeScript 2” section, making it less practical and more explanatory; move practical info into “Usage”\r\n\r\n* Update “Variable Scoping and Lexical Safety” section to remove incorrect reference to Ruby (fixes #2360), add missing details about the safety wrapper, add note about `let`/`const`.\r\n\r\n* Updated browser compiler\r\n\r\n* Updated docs\r\n\r\n* Rewrite Literate CoffeeScript breaking changes\r\n\r\n* Split apart the “Breaking Changes” and “Unsupported Features” sections into separate sidebar items and files\r\n\r\n* Add example of `not in`, closes #3281\r\n\r\n* Fix words in bold that should be in backticks\r\n\r\n* Consolidate some breaking changes sections\r\n\r\n* Add Node API documentation; closes #3551\r\n\r\n* Move the chaining documentation out of the changelog into its own section"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfce93a21fa1e1f1a9ee5",
    "number": 4535,
    "body": "I think the code in #4150 is pretty horrible, and the fact that an inline ternary can continue after a method call in else just seems bizarre. But I do think that:\r\n```coffee\r\nif 0 then 1 else g\r\n  a: 1\r\n.h()\r\n```\r\nshould not compile (certainly not as `.h()` being called on the inline object inside the ternary).\r\n\r\nSo this PR makes it cause a syntax error, as it should. I would guess that implementation-wise this is not the right fix, but it works and I'm not an expert on the `rewriter` logic.",
    "head_branch": "method-after-ternary",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #4150: Correctly outdent ternary followed by method call (#4535)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcea3a21fa1e1f1a9ee6",
    "number": 4534,
    "body": "Fixes #4533.\r\n\r\nI looked through the other open and closed method chaining issues and this doesn't seem to fix any of them. It's possible it fixes some other issues I'm not aware of (I kinda feel like it should change some behavior, but we don't have any existing tests covering it).",
    "head_branch": "chains-in-object-literals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #4533: chained calls incorrectly wrapping enclosing implicit objects (#4534)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfceb3a21fa1e1f1a9ee7",
    "number": 4532,
    "body": "Fixes #1263, probably others. This now compiles:\r\n\r\n```coffee\r\nreturn\r\n  a: 1\r\n  b: 2\r\n```\r\n\r\nAs does the same for `export default`.",
    "head_branch": "return-object",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] `return` and `export default` can now accept implicit objects (#4532)\n\n* Start with the test I want to pass: return an implicit (braces-less) object\r\n\r\n* Update Rewriter class to follow pattern of nodes.coffee; move debugging snippet to where it’ll work in CS2\r\n\r\n* Allow export default implicit object\r\n\r\n* `return` assumes a continuation onto the next line *if* the next line is indented\r\n\r\n* Fix comment; improve test"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcec3a21fa1e1f1a9ee8",
    "number": 4531,
    "body": "Closes #15, the oldest open issue (from 2009!). With this PR, this:\r\n\r\n```coffee\r\nsquare = (x) -> x * x\r\n```\r\n\r\nnow compiles to this:\r\n\r\n```js\r\nvar square;\r\n\r\nsquare = function square(x) {\r\n  return x * x;\r\n};\r\n```\r\n\r\nNote the `function square(x)`, instead of just `function(x)`. This mimics [how Babel converts methods into ES5 functions](https://babeljs.io/repl/#?babili=false&evaluate=true&lineWrap=false&presets=env&targets=&browsers=&builtIns=false&debug=false&code=var%20obj%20%3D%20%7B%0A%20%20square%20(x)%20%7B%0A%20%20%20%20return%20x%20*%20x%3B%0A%20%20%7D%0A%7D).\r\n\r\nThe name is _not_ output for bound functions, which per ES spec must be anonymous; or for any function name that contains a period (`helpers.eq = ->`), bracket (`method[name] = ->`) or quotes (`'not': ->`). Those cases just stay anonymous like they are now.\r\n\r\nThe only breaking change caused by this is when a function returns a reference to itself, as illustrated by the test that needed updating:\r\n\r\n```coffee\r\n  changeMe = ->\r\n    changeMe = 2\r\n\r\n  changeMe() # This line was changed to `changeMe = changeMe()`\r\n  eq changeMe, 2\r\n```\r\n\r\nSince the first line now compiles to `changeMe = function changeMe() {`, the inner `return changeMe = 2` no longer overrides the variable name `changeMe` one level up. Hopefully this is a rare enough edge case that it shouldn’t come up too often?\r\n\r\nAnd there’s the question of whether this is doing at all at this point, now that debuggers can often infer function names from the names of the variables they’re assigned to. My instinct is that it is still worth doing, since it _does_ add some clarity to the output (presumably that’s by Babel does it) and there are probably some debugging tools that are helped by this.",
    "head_branch": "named-functions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfced3a21fa1e1f1a9ee9",
    "number": 4530,
    "body": "Bound methods are implemented as assignments to `this` in the constructor. In derived classes, where `this` is unavailable until after `super` has been called, the binding is applied and assigned after the `super` call. This means that any references to ‘bound’ methods reachable from the parent constructor will actually point to the unbound prototype methods.\r\n\r\nThis can lead to very subtle bugs where a method that is thought to be bound is handed off and later called with an incorrect context, and the only defence is for users to be vigilant about referencing bound methods in constructors.\r\n\r\n___\r\n\r\nThis is probably the most extreme solution to the problem, and would leave heavy users of bound methods with an unpleasant refactoring task, however the alternatives aren’t terribly appetising either:\r\n\r\n- Restrict the error to derived classes only. A common use of bound methods is for event handlers in frontend frameworks such as Backbone and React, both of which rely on extending base classes. Choosing this approach would not help these users, and would make bound instance methods even more of a fringe feature.\r\n\r\n- Hoist the entire method definition into the constructor, ensuring it isn’t assigned at all until `super` has been called. This would at least make any bugs easier to spot, and also looks very similar to the [class public fields ECMA Stage 2 proposal](https://babeljs.io/repl/#?babili=false&evaluate=true&lineWrap=true&presets=stage-2&targets=&browsers=&builtIns=false&debug=false&code=class%20A%20%7B%0A%20%20bound%20%3D%20()%20%3D%3E%20%7B%7D%0A%7D&experimental=false&loose=false&spec=false&playground=false). Matching some ES equivalent is probably the best strategy long term, but as this proposal is only Stage 2 we can’t rely on it not being changed.\r\n\r\n- Leave everything as it is. We would could simply document the caveats of bound method interactions with `super` and let everyone figure it out.\r\n\r\n*Edit:* #4512, #3093, and others propose a binding property access (as - @vendethiel would be quick to add - is [available Coco/LS](https://github.com/satyr/coco/wiki/additions#binding-access-)). This would make the necessary refactoring for this or option 1 slightly easier, and is also an [ES proposal](https://github.com/tc39/proposal-bind-operator).",
    "head_branch": "remove-bound-methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove support for bound instance methods (#4530)\n\nBound methods are implemented as assignments to `this` in the\r\nconstructor. In derived classes, where `this` is unavailable until\r\nafter `super` has been called, the binding is applied and assigned after\r\nthe `super` call. This means that any references to 'bound' methods\r\nreachable from the parent constructor will actually point to the unbound\r\nprototype methods.\r\n\r\nThis can lead to very subtle bugs where a method that is thought to be\r\nbound is handed off and later called with an incorrect context, and the\r\nonly defence is for users to be vigilant about referencing bound methods\r\nin constructors."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcee3a21fa1e1f1a9eea",
    "number": 4527,
    "body": "Closes #4513.",
    "head_branch": "dont-escape-forbidden-js",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "We no longer need to wrap in quotes JavaScript reserved words used as properties (#4527)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcef3a21fa1e1f1a9eeb",
    "number": 4526,
    "body": "Inspired by @connec’s [comment](https://github.com/coffeescript6/discuss/issues/65#issuecomment-267344468):\r\n\r\n- [x] Remove polyfill for `indexOf`, leaving the shortcut to the native function.\r\n- [x] Remove utility function for `bind` entirely, replacing its one usage with a call to the native `bind`.\r\n- [x] Unrelated but I slipped it in: updated the modules tests that were waiting on `class` to be supported\r\n\r\nThe one outlier is the utility function for `extends`, which remains. Now that we compile to native `class` and `extends`, there’s only one very narrow case where this helper still gets used:\r\n\r\n```coffee\r\n    o 'SimpleAssignable EXTENDS Expression',    -> new Extends $1, $3\r\n```\r\n\r\nwhich pairs with:\r\n\r\n```coffee\r\n#### Extends\r\n\r\n# Node to extend an object's prototype with an ancestor object.\r\n# After `goog.inherits` from the\r\n# [Closure Library](https://github.com/google/closure-library/blob/master/closure/goog/base.js).\r\nexports.Extends = class Extends extends Base\r\n  constructor: (@child, @parent) ->\r\n    super()\r\n\r\n  children: ['child', 'parent']\r\n\r\n  # Hooks one constructor into another's prototype chain.\r\n  compileToFragments: (o) ->\r\n    new Call(new Value(new Literal utility 'extend', o), [@child, @parent]).compileToFragments o\r\n```\r\n\r\nWe have zero tests covering this. I suppose the hundreds of `class` tests used to cover it in the 1.x codebase, but now that this only applies to straight prototypal inheritance we don’t have any tests that refer to that as opposed to classes. This is [mentioned](http://coffeescript.org/v2/#prototypal-inheritance) in the docs, but there’s no example, just a single half-sentence: “The `extends` operator can be used to create an inheritance chain between any pair of constructor functions”.\r\n\r\nAnyway for the purposes of this PR we can just leave it as is. Later on though we should probably decide whether or not we want to keep it (might as well, I suppose) and if we do keep it, it should get some tests of its own and probably an example in the docs.\r\n\r\n**EDIT**\r\n\r\n- [x] Removed `extends`.\r\n- [x] Added helper for `splice` just like `slice`.",
    "head_branch": "helpers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Remove unnecessary utility helper functions (#4526)\n\n* Uncomment module test that was waiting for classes to be supported\r\n\r\n* Rely on native indexOf\r\n\r\n* Replace `bind` helper with native `bind` (no shortcut necessary)\r\n\r\n* Update output\r\n\r\n* Update modules class tests\r\n\r\n* Remove helper for prototype extends\r\n\r\n* Update docs to reflect removed extends operator\r\n\r\n* Add shortcut for splice, like we have for slice"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcf03a21fa1e1f1a9eec",
    "number": 4525,
    "body": "Fixes #4524.",
    "head_branch": "fix-non-bare-get-set",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Fix non-bare `get` `set` when called with `@` argument (#4525)\n\n* Fixes #4524: `get` and `set` should be usable without parentheses when accessed via a period\r\n\r\n* More get/set tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcf13a21fa1e1f1a9eed",
    "number": 4523,
    "body": "Since Closure Compiler can’t minify our browser compiler until https://github.com/google/closure-compiler-js/issues/59 is fixed, I thought we should look into replacing it. Uglify is working on support for ES2015 in its `harmony` branch, but it seems a bit brittle to rely on a branch in our build. Hence Babili, a.k.a. Babel Compiler. It doesn’t have a Node API, hence the call via `execSync`, but it seems to work. It outputs a minified `coffeescript.js`, still using ES2015 syntax.\r\n\r\nThis raises the question of whether we should go a bit further and run the browser compiler through Babel itself, to transpile the ES2015 down. Babili and potentially Babel would still just be devDependencies, so we wouldn’t be adding Babel to the project proper as a regular dependency for everyone. Making the browser compiler safe for non-evergreen browsers feels like something we should probably do . . .",
    "head_branch": "babili",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Replace Closure Compiler with Babili, transform browser compiler into ES5-ish (#4523)\n\n* Swap Google Closure Compiler for Babili\r\n\r\n* Browser compiler, minified by Babili\r\n\r\n* Use Babel to transform, not just to minify; add process.env.TRANSFORM to disable transforming if we only want to minify. Unfortunately several browser tests fail when transformed . . .\r\n\r\n* Move `super()` calls so that the Babel-transformed browser compiler passes all the browser tests (in Node, at least)\r\n\r\n* Updated browser build\r\n\r\n* Update browser tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcf23a21fa1e1f1a9eee",
    "number": 4522,
    "body": "Per @GeoffreyBooth [request](https://github.com/jashkenas/coffeescript/pull/4498/files#r112801329), refactor `toJS()` to shared test helper (cleanup post-#4498)",
    "head_branch": "iss4248_unicode_code_point_escapes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Iss4248 unicode code point escapes (cleanup) (#4522)\n\n* Fix #4248: Unicode code point escapes\r\n\r\n* rewrite unicode code point escapes as unicode escapes\r\n\r\n* smarter defaults\r\n\r\n* and resimplify\r\n\r\n* correct surrogate pairs\r\n\r\n* fixes from code review\r\n\r\n* handle adjacent code point escapes\r\n\r\n* smarter regex\r\n\r\n* fix from code review\r\n\r\n* refactor toJS() to shared test helper"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcf23a21fa1e1f1a9eef",
    "number": 4521,
    "body": "Merge `master` into `2`",
    "head_branch": "2_merged_master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4521 from helixbass/2_merged_master\n\nmerge `master` into `2`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcf33a21fa1e1f1a9ef0",
    "number": 4520,
    "body": "Fixes #4248: contains the Unicode code point escape handling specific to `2` branch (as [suggested](https://github.com/jashkenas/coffeescript/pull/4498#issuecomment-293797878) by @lydell)\r\n\r\nThis currently also includes some commits from `master` (including my code point escape stuff targeted against `master` ie #4498) that haven't been merged into `2` yet. If it's preferable to separate that out, I can open a pull request for my `2_merged_master` branch (against `2` branch), which just contains `master` merged into `2`\r\n\r\nBut otherwise [here](https://github.com/helixbass/copheescript/compare/2_merged_master...helixbass:iss4248_unicode_code_point_escapes_on_2) is the diff of just my `2`-specific changes. Basically we just have to pass around the (he)regex `flags` in order to be able to distinguish non-`u`-regexes (whose code point escapes *should* be rewritten to normal Unicode escapes) from strings/`u`-regexes (whose code point escapes *should not* be rewritten)",
    "head_branch": "iss4248_unicode_code_point_escapes_on_2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Keep unicode code point escapes as is when possible (#4520)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcf43a21fa1e1f1a9ef1",
    "number": 4519,
    "body": "Copied from #3766 by @lumeet (I cleaned up the code slightly):\r\n\r\n> This addresses at least #3309 and #3738 and has to do with parenthesized existential operator. After turning it back and forth several times, I couldn’t find anything more elegant than this. I’m not sure if it requires something more fundamental to make the check with some more beauty. Additionally, in what case it could possibly generate extra parentheses now?\r\n\r\nThis looks good to me. It’s been waiting long enough. Pull the trigger? Merge it into `2`?",
    "head_branch": "3738",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix parenthesized conditions in if-else assignment (#4519)\n\n* Fix parenthesized conditions in if-else assignment\r\n\r\n* Add compiled output\r\n\r\n* Use ‘is’ instead of ‘==‘; ‘right’ is a poor name when you mean ‘correct,’ not the right-hand side of the assignments in this test"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcf53a21fa1e1f1a9ef2",
    "number": 4518,
    "body": "Added the missing ‘#’s for correct string interpolation. Seems like this went unnoticed because in these test cases, the `check` function tests if the compilation fails, which it does either way.\r\n\r\nFrom #4461 by @FabianLauer",
    "head_branch": "fix-reserved-words-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix 'future reserved words' test (#4518)\n\nAdded the missing '#'s for correct string interpolation. Seems like this went unnoticed because in these test cases, the `check` function tests if the compilation fails, which it does either way."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcf63a21fa1e1f1a9ef3",
    "number": 4510,
    "body": "Fixes #4502.\r\n\r\nA particular REPL test is broken in Node 4.8.2 because of a regression that was fixed in Node 5.11.0. This PR simply disables the test for Node < 6.",
    "head_branch": "fix-repl-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "A particular REPL test is broken in Node 4.8.2 because of a regression that was fixed in Node 5.11.0; just disable the test for Node < 6. Fixes #4502. (#4510)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcf73a21fa1e1f1a9ef4",
    "number": 4509,
    "body": "I went back to the drawing board and took a crack at reimplementing `invertLiterate` without Marked or Markdown-It or any other dependencies—but still passing the tricky additional tests added in #4345. I think I’ve succeeded, but @lydell and @billymoon you should please review this and see if there are additional test cases we should add to cover edge cases I’m not thinking of.\r\n\r\nThere are still a few breaking changes from 1.x:\r\n\r\n- As has been the case in all the v2 versions of Literate CoffeeScript, simply wrapping a code block in HTML tags is insufficient to get it to be treated as a comment. The code block must also have at least one line unindented.\r\n- A Literate CoffeeScript file needs to be consistently indented either always with tabs or always with spaces.\r\n- Putting a code block inside a list item means indenting _with spaces_ to the column of the first non-whitespace character of that list item, and then with your usual indentation beyond that point. \r\n\r\nThat last point is a little confusing, I concede. It could lead to mixing tabs and spaces, which otherwise would be verboten:\r\n\r\n```litcoffee\r\n *  A list item with a code block:\r\n\r\n    \ttest \"basic literate CoffeeScript parsing\", ->\r\n    \t\tok yes\r\n```\r\n\r\nThe `A` here is at column 5. This file is otherwise indented with tabs, so the `test` line is indented with four spaces _then_ one tab. Basically, being within a list resets the left column to be the same as the column of the first non-whitespace character in the list item body (i.e. the `A` in this example).\r\n\r\nI’m not sure Markdown-It handles this any better, so I’m not sure there’s anything to be gained at this point from adding the dependency. (We still have it as a `devDependency` for building the documentation.) What do you all think?",
    "head_branch": "litcoffee",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Literate CoffeeScript without dependencies (#4509)\n\n* Reimplement `invertLiterate` without any dependency, tracking indentation levels (including inside lists); update literate test files to also check that no tests are skipped\r\n\r\n* Drop Literate CoffeeScript’s support for executable code blocks inside list items (and also for second paragraphs or blockquotes in list items)\r\n\r\n* Update Literate CoffeeScript docs to reflect current supported syntax"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcf83a21fa1e1f1a9ef5",
    "number": 4508,
    "body": "Chrome 57.0 returns console error:\r\n`Error parsing a meta element's content: ';' is not a valid key-value pair separator. Please use ',' instead.`\r\nThis PR fixes the syntax to resolve this error.",
    "head_branch": "html-syntax",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcf93a21fa1e1f1a9ef6",
    "number": 4507,
    "body": "Fixes #4503.\r\n\r\nAlso, `cake build:browser` should just assemble the browser build, not also test it. Added `cake build:browser:full` to both build and run the tests. (We already had `cake test:browser`.)",
    "head_branch": "tests-exit-code",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4507 from GeoffreyBooth/tests-exit-code\n\nFailing tests exit code; separate building and testing browser compiler"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcfa3a21fa1e1f1a9ef7",
    "number": 4506,
    "body": "See #4505 ",
    "head_branch": "fix-links-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Fix links in v2 docs (#4506)\n\n* Update 2.0.0-beta1 docs\r\n\r\n* Fix broken links, update redirected links\r\n\r\n* Rebuild v2 docs with updated links\r\n\r\n* A few more fixed links"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcfb3a21fa1e1f1a9ef8",
    "number": 4505,
    "body": "Closes #4504 and tickets like it.",
    "head_branch": "fix-links",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix broken links, update redirected links (#4505)\n\n* Fix broken links, update redirected links\r\n\r\n* A few more fixed links\r\n\r\n* Update v2 docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcfc3a21fa1e1f1a9ef9",
    "number": 4501,
    "body": "Per discussions with @GeoffreyBooth, @timhuff and @connec in #4276 #4277 reported by @Radivarig, current coffee-script source cannot be packed with webpack due to references to Node.js-only modules in main script. \r\n\r\nExample error output of webpack:\r\n```\r\nError in ./~/coffee-script/lib/coffee-script/coffee-script.js\r\nModule not found: 'module' in project_root\\node_modules\\coffee-script\\lib\\coffee-script\r\n\r\n @ ./~/coffee-script/lib/coffee-script/coffee-script.js 168:23-40 208:17-34\r\n\r\nError in ./~/coffee-script/lib/coffee-script/register.js\r\nModule not found: 'module' in project_root\\node_modules\\coffee-script\\lib\\coffee-script\r\n\r\n @ ./~/coffee-script/lib/coffee-script/register.js 25:13-30\r\n\r\nError in ./~/coffee-script/lib/coffee-script/register.js\r\nModule not found: 'child_process' in project_root\\node_modules\\coffee-script\\lib\\coffee-scrip\r\n\r\n @ ./~/coffee-script/lib/coffee-script/register.js 7:18-42\r\n\r\nError in ./~/coffee-script/lib/coffee-script/command.js\r\nModule not found: 'child_process' in project_root\\node_modules\\coffee-script\\lib\\coffee-scrip\r\n\r\n @ ./~/coffee-script/lib/coffee-script/command.js 16:8-32\r\n\r\nError in ./~/coffee-script/lib/coffee-script/grammar.js\r\nModule not found: 'jison' in project_root\\node_modules\\coffee-script\\lib\\coffee-script\r\n\r\n @ ./~/coffee-script/lib/coffee-script/grammar.js 5:11-27\r\n\r\nError in ./~/coffee-script/lib/coffee-script/repl.js\r\nModule not found: 'repl' in project_root\\node_modules\\coffee-script\\lib\\coffee-script\r\n\r\n @ ./~/coffee-script/lib/coffee-script/repl.js 11:13-28\r\n```\r\n\r\n## Changes\r\n* Move Node.js-only code from `src/coffee-script.coffee` to `src/index.coffee`\r\n* Use `lib/coffee-script/index.js` as npm package's `\"main\"` script\r\n* Export `CoffeeScript` from `src/browser.coffee`\r\n* Set `package.json`'s `\"browser\"` field to `lib/coffee-script/browser.js` (used by webpack as entry point)\r\n* Use `lib/coffee-script/browser.js` as bower package's `\"main\"` script\r\n\r\n## Tests\r\n- [x] `cake build`\r\n- [x] `cake build:browser`\r\n- [x] `cake test`\r\n- [x] `cake test:browser`\r\n- [x] Manually tested packing with webpack\r\n- [x] Manually verified compiled browser bundle works in browser (with re-built doc site)",
    "head_branch": "fix/webpack",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcfd3a21fa1e1f1a9efa",
    "number": 4499,
    "body": "Following up #4494, here’s a possible release of 2.0.0-beta1. In this PR:\r\n\r\n- I noticed that I forgot to swap out Marked for Markdown-It in the browser build (that includes the Markdown-It minified .js file as part of its build) so this has been fixed.\r\n- 1.12.5’s updates have been merged into `2`.\r\n\r\nThe browser build is **unminified**. This isn’t intentional; the Closure Compiler [chokes on our latest build](https://github.com/google/closure-compiler-js/issues/59). I suspect it’s because it doesn’t fully support ES destructuring syntax, and that’s an ES feature we use rather extensively in the compiler codebase.\r\n\r\nSo I guess our options are to either release it unminified, at least until Closure Compiler supports whatever is causing it to choke; find yet another minifier; or add a Babel transpilation step before minification. I’m loathe to add Babel; what do you all think? I’m hoping that maybe an unminified browser compiler is fine for the 2.0.0 beta releases, and hopefully Closure Compiler will be patched before we release 2.0.0 out of beta.\r\n\r\nThe other consideration worth discussing is whether we should wait until #4493 is merged in before releasing this. I’m leaning toward releasing beta1 now and beta2 when #4493 is ready. Any thoughts?",
    "head_branch": "2.0.0-beta1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] 2.0.0-beta1 (#4499)\n\n* Fix browser build to incorporate Markdown-It, not Marked\r\n\r\n* Update Google Closure Compiler; recompile browser build but with MINIFY=false, because Closure Compiler throws an error on our current code; see https://github.com/google/closure-compiler-js/issues/59\r\n\r\n* Bump version to 2.0.0-beta1; do release build, with updated docs and annotated source"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcfe3a21fa1e1f1a9efb",
    "number": 4498,
    "body": "Fixes #4248 \r\n\r\nBasically uses the [suggestion](https://github.com/jashkenas/coffeescript/issues/4248#issuecomment-229264085) made by @lydell in that issue. Just changed a couple things:\r\n- According to [this blog post](https://mathiasbynens.be/notes/javascript-escapes) and the [spec](http://ecma-international.org/ecma-262/6.0/), the number of hex digits in a Unicode code point escape isn't limited (so treat one or more hex digits as valid)\r\n- Because of this, try to match through a closing `}` (rather than a fixed number of characters after `\\u{`) for error reporting\r\n\r\nWhile adding tests, found that a new `u` regex flag is required for unicode code point escapes to be processed, so added it to `VALID_FLAGS`. Not sure when Node added support for this (since it's required for these tests to pass)?",
    "head_branch": "iss4248_unicode_code_point_escapes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #4248: Unicode code point escapes (#4498)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfcff3a21fa1e1f1a9efc",
    "number": 4495,
    "body": "Per the changelog:\r\n\r\n*   Better handling of `default`, `from`, `as` and `*` within `import` and `export` statements. You can now import or export a member named `default` and the compiler won’t interpret it as the `default` keyword. #4492, #4483\r\n*   Fixed a bug where invalid octal escape sequences weren’t throwing errors in the compiler. #4490\r\n\r\nI also updated the docs generation using code from #4494, to use Markdown-It instead of Marked.",
    "head_branch": "1.12.5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "1.12.5 (#4495)\n\n* Use Markdown-It instead of Marked for generating the docs; update package versions\r\n\r\n* Fix links to v2 docs\r\n\r\n* Bump version to 1.12.5; update changelog and compiled docs output\r\n\r\n* Update compiled output for 1.12.5\r\n\r\n* Improve styling for tables"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd003a21fa1e1f1a9efd",
    "number": 4494,
    "body": "https://rawgit.com/GeoffreyBooth/coffeescript/2.0.0-beta1-docs/docs/v2/index.html\r\n\r\nI’ve updated the 2 docs to reflect:\r\n- #4478: Destructuring\r\n- #4485: Better parsing of Literate CoffeeScript\r\n- #4484: Throw and error on ambiguous `get` or `set` function calls\r\n\r\nI’ve removed Marked in favor of Markdown-It, so now we only have one Markdown parsing library across the project for both documentation and Literate CoffeeScript support. I also added syntax highlighting back in for the non-editable code blocks.\r\n\r\nThe release date for 2.0.0-beta1 is a wild guess that I expect we’ll revise as part of that actual release; I just thought these changes, especially the Markdown library swap, were significant enough to warrant their own PR and review.\r\n\r\nOn a side note, should we release beta1 now or wait for #4493 to land?\r\n\r\nPreview of docs in this PR: https://rawgit.com/GeoffreyBooth/coffeescript/2.0.0-beta1/docs/v2/",
    "head_branch": "2.0.0-beta1-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] 2.0.0-beta1 docs (#4494)\n\n* Update package versions; remove marked\r\n\r\n* Revise docs to use Markdown-It: tables are now GitHub-Flavored Markdown tables, avoid hack of blockquoted code blocks\r\n\r\n* Add anchors for sub-sections\r\n\r\n* Add syntax highlighting to uneducable code blocks; fix missing italics variant for comments font\r\n\r\n* Update docs about breaking changes in Literate CoffeeScript, move Breaking Changes section below Literate CoffeeScript section\r\n\r\n* Update docs regarding destructuring default values breaking change\r\n\r\n* Update changelog, with spitball release date for beta1\r\n\r\n* Fix highlight function return statement"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd013a21fa1e1f1a9efe",
    "number": 4493,
    "body": "Replacing https://github.com/jashkenas/coffeescript/pull/4473 and https://github.com/GeoffreyBooth/coffeescript/pull/4. From original descriptions by @zdenko:\r\n\r\nConnected to [#3894](https://github.com/jashkenas/coffeescript/issues/3894).\r\n\r\nIn CS2 emit\r\n\r\n```coffee\r\nobj = { x: 1, y: 2}\r\nobj1 = {obj..., z: 3}\r\n```\r\nto\r\n\r\n```coffee\r\nobj1 = {...obj, z: 3}\r\n```\r\n\r\nImprove destructuring assignment for object literal:\r\n\r\n```coffee\r\n{a, b, x...} = {a:1, b:2, c:3, d:4, e:5}\r\na = 1\r\nb = 2\r\nx = {c:3, d:4, e:5}\r\n```\r\n\r\n```coffee\r\n{c, x..., e} = {a:1, b:2, c:3, d:4, e:5}\r\nc = 3\r\ne = 5\r\nx = {a:1, b:2, d:4}\r\n```\r\n\r\n```cs\r\n{c, x..., a:p} = {a:1, b:2, c:3, d:4, e:5}\r\nc = 3\r\np = 1\r\nx = {b:2, d:4, e:5}\r\n```\r\n\r\n```coffee\r\nfuturists =\r\n  sculptor: \"Umberto Boccioni\"\r\n  painter:  \"Vladimir Burliuk\"\r\n  poet:\r\n    name:   \"F.T. Marinetti\"\r\n    address: [\r\n      \"Via Roma 42R\"\r\n      \"Bellagio, Italy 22021\"\r\n    ]\r\n\r\n{poet: {name, addr1...}} = futurists\r\naddr1 = {address: [ \"Via Roma 42R\",  \"Bellagio, Italy 22021\"]}\r\n\r\n{poet: {addr2..., name:title}} = futurists\r\naddr2 = {address: [ \"Via Roma 42R\",  \"Bellagio, Italy 22021\"]}\r\n```\r\n\r\nBasically, implement proposal for [rest properties for ECMAScript](https://github.com/tc39/proposal-object-rest-spread) in CS: `{a, b, c...} = x`\r\n\r\nSince this proposal isn't yet at stage-4, CS doesn't compile to ES.\r\nIn my PR I catch rest element and assign remaining values to it:\r\n`{a, b, c...} = x` compiles to:\r\n`a = x.a, b = x.b, c = extractObjectWithoutKeys(x, ['a', 'b'])`\r\n\r\nMultiple rest elements are disallowed. ES also requires the rest element to be the last, so compiler currently throws an error.\r\n\r\nIMHO, CS should allow rest element anywhere, just like for arrays.\r\n\r\nLater, when proposal reaches stage-4 we could implement similar conversion as you did for the function parameters, and ensure rest element is the last in the compiled JS.",
    "head_branch": "destructuring_object",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Destructuring object spreads (#4493)\n\n* Don’t confuse the syntax highlighter\r\n\r\n* Comment Assign::compilePatternMatch a bit\r\n\r\n* Assignment expressions in conditionals are a bad practice\r\n\r\n* Rename `wrapInBraces` to `wrapInParentheses`, to set the stage for future `wrapInBraces` that uses `{` and `wrapInBrackets` that uses `[`\r\n\r\n* Correct comment\r\n\r\n* object destructuring\r\n\r\n* Allow custom position of the rest element.\r\n\r\n* Output simple array destructuring assignments to ES2015\r\n\r\n* Output simple object destructured assignments to ES2015\r\n\r\n* Compile shorthand object properties to ES2015 shorthand properties\r\n\r\nThis dramatically improves the appearance of destructured imports.\r\n\r\n* Don’t confuse the syntax highlighter\r\n\r\n* Comment Assign::compilePatternMatch a bit\r\n\r\n* Assignment expressions in conditionals are a bad practice\r\n\r\n* Rename `wrapInBraces` to `wrapInParentheses`, to set the stage for future `wrapInBraces` that uses `{` and `wrapInBrackets` that uses `[`\r\n\r\n* object destructuring\r\n\r\n* Allow custom position of the rest element.\r\n\r\n* rest element in object destructuring\r\n\r\n* rest element in object destructuring\r\n\r\n* fix string interpolation\r\n\r\n* merging\r\n\r\n* fixing splats in object literal\r\n\r\n* Rest element in parameter destructuring\r\n\r\n* merging with CS2\r\n\r\n* merged with CS2\r\n\r\n* Add support for the object spread initializer. https://github.com/tc39/proposal-object-rest-spread/blob/master/Spread.md\r\n\r\n* Fix misspellings, trailing whitespace, other minor details\r\n\r\n* merging with beta2\r\n\r\n* refactor object spread properties\r\n\r\n* small fix\r\n\r\n* - Fixed object spread function parameters.\r\n- Clean up \"Assign\" and moved all logic for object rest properties in single method (compileObjectDestruct).\r\n- Add helper function \"objectWithoutKeys\" to the \"UTILITIES\" for use with object rest properties,\r\n  e.g. {a, b, r...} = obj => {a, b} = obj, r = objectWithoutKeys(...)\r\n- Clean up \"Obj\" and moved all logic for object spread properties in single method (compileSpread).\r\n- Clean up \"Code\".\r\n- Add method \"hasSplat\" to \"Obj\" and \"Value\" for checking if Obj contains the splat.\r\n- Enable placing spread syntax triple dots on either right or left, per #85 (https://github.com/coffeescript6/discuss/issues/85)\r\n\r\n* Fixed typos\r\n\r\n* Remove unused code\r\n\r\n* Removed dots (e.g. splat) on the left side from the grammar\r\n\r\n* Initial release for deep spread properties, e.g. obj2 = {obj.b..., a: 1} or {obj[b][c]..., d: 7}\r\nTests need to be prepared!\r\n\r\n* 1. Object literal spread properties\r\n\r\nObject literals:\r\n- obj = { {b:{c:{d:1}}}..., a:1 }\r\n\r\nParenthetical:\r\n- obj = { ( body ), a:1 }\r\n- obj = { ( body )..., a:1 }\r\n\r\nInvocation:\r\n- obj = { ( (args) -> ... )(params), a:1 }\r\n- obj = { ( (args) -> ... )(params)..., a:1 }\r\n- obj = { foo(), a:1 }\r\n- obj = { foo()..., a:1 }\r\n\r\n2. Refactor, cleanup & other optimizations.\r\n\r\n* Merged with 2.0\r\n\r\n* Cleanup\r\n\r\n* Some more cleanup.\r\n\r\n* Fixed error with freeVariable and object destructuring.\r\n\r\n* Fixed errors with object spread properties.\r\n\r\n* Improvements, fixed errors.\r\n\r\n* Minor improvement.\r\n\r\n* Minor improvements.\r\n\r\n* Typo.\r\n\r\n* Remove unnecessary whitespace.\r\n\r\n* Remove unnecessary whitespace.\r\n\r\n* Changed few \"assertErrorFormat\" tests since parentheses are now allowed in the Obj.\r\n\r\n* Whitespace cleanup\r\n\r\n* Comments cleanup\r\n\r\n* fix destructured obj param declarations\r\n\r\n* refine fix; add test\r\n\r\n* Refactor function args ({a, b...})\r\n\r\n* Additional tests for object destructuring in function argument.\r\n\r\n* Minor improvement for object destructuring variable declaration.\r\n\r\n* refactor function args ({a, b...}) and ({a, b...} = {}); Obj And Param cleanup\r\n\r\n* fix comment\r\n\r\n* Fix object destructuring variable declaration.\r\n\r\n* more tests with default values\r\n\r\n* fix typo\r\n\r\n* Fixed default values in object destructuring.\r\n\r\n* small fix\r\n\r\n* Babel’s tests for object rest spread\r\n\r\n* Style: spaces after colons in object declarations\r\n\r\n* Cleanup comments\r\n\r\n* Simplify Babel tests\r\n\r\n* Fix comments\r\n\r\n* Fix destructuring with splats in multiple objects\r\n\r\n* Add test for default values in detsructuring assignment with splats\r\n\r\n* Handle default values when assigning to object splats\r\n\r\n* Rewrite traverseRest to fix handling of dynamic keys\r\n\r\n* Fix double parens around destructuring with splats\r\n\r\n* Update compileObjectDestruct comments\r\n\r\n* Improve formatting of top-level destructures with splats and tidy parens\r\n\r\n* Added a bigger destructuring-with-defaults test and fixed a bug\r\n\r\n* Refactor destructuring grammar to allow additional forms\r\n\r\n* Add a missing case to ObjSpreadExpr\r\n\r\n* These tests shouldn’t run in the browser\r\n\r\n* Fix test.html"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd023a21fa1e1f1a9eff",
    "number": 4492,
    "body": "Fixes #4491 (I think)\r\n\r\nI'm not really familiar with the `import`/`export` syntax but it looks like the only the time that the import-/export-specific lexing controlled by `@seenImport`/`@seenExport` (which lexes `as`, `from`, `default` differently) needs to continue beyond a line break is if we're inside a `{...}` specifier list. So I added an `@importSpecifierList` (corresponding to the existing `@exportSpecifierList`), and unless one of these is set (indicating we're inside a specifier list) then seeing a `lineToken()` clears `@seenImport` and `@seenExport`\r\n\r\nNot sure if I should add additional tests for any of the other various `import`/`export` syntaxes?\r\n\r\n",
    "head_branch": "iss4491_import_export_specific_lexing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #4491: import- and export-specific lexing should stop (#4492)\n\n* Fix #4491: import- and export-specific lexing should stop\r\n\r\n* split up tests\r\n\r\n* fixes from code review"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd023a21fa1e1f1a9f00",
    "number": 4490,
    "body": "Fixes #4489\r\n\r\nSplits `INVALID_ESCAPE` regex into separate regexes `REGEX_INVALID_ESCAPE` (which doesn't match back-references eg `\\1`) and `STRING_INVALID_ESCAPE`, thus avoiding the special-case logic for regex back-references (which contained the bug)",
    "head_branch": "iss4489_regex_octal_escape_sequence_bug",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4490 from helixbass/iss4489_regex_octal_escape_sequence_bug\n\nFix #4489: Regex octal escape sequence bug"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd033a21fa1e1f1a9f01",
    "number": 4488,
    "body": "Fixes #4487\r\n\r\nAs described there, not sure if this fix could break enough existing code that it should be held back to 2.0?",
    "head_branch": "iss4487_outdentation_bug",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #4487: Outdentation bug (#4488)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd043a21fa1e1f1a9f02",
    "number": 4485,
    "body": "Fixes #4463.\r\n\r\nSo since #4345, code blocks in .litcoffee files that were indented with tabs were simply skipped over, and the code never executed. That’s why the tests were “passing,” because they were never running. Oops!\r\n\r\nI wanted the tests to be a bit more thorough, so I duplicated the `literate.litcoffee` file to a version where all the code blocks are indented with tabs. Now not only are we testing that tabbed code blocks work, but that they work in all the same scenarios as spaced code blocks.\r\n\r\nAfter a lot of investigation, and a detour in trying to implement this with [Illiterate](https://github.com/billymoon/illiterate) (see [branch](https://github.com/GeoffreyBooth/coffeescript/tree/litcoffee-bug-illiterate)) I think the root cause is that our Markdown parsing library [Marked](https://github.com/chjj/marked) just doesn’t handle tabbed code blocks properly. @billymoon was aware of this in his initial implementation, which had a magic token substituting for tabs, but it was buggy (for one thing, it was only replacing the first tab in the file, not all tabs or all leading tabs). I realized that since this input is just getting turned into JavaScript anyway, we might as well replace the leading tabs with spaces _before_ Marked does its parsing, to sidestep Marked‘s bug. This seems to have solved it.\r\n\r\nI went a little further to try to preserve correct line numbers for stack traces, which have also been completely blown away since we switched to using Marked. I pretty much have it fixed _if_ you don’t do your own word wrapping for list items, which of course we’re doing in our tests. (Maybe we shouldn’t; I doubt it’s common for people to manually word-wrap their Markdown.) Anyway improving it further could be the subject of another PR if anyone is interested.",
    "head_branch": "litcoffee-bug",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Fix handling of tabbed code blocks in .litcoffee files (#4485)\n\n* Add tabbed literate test; modernize Markdown title heading\r\n\r\n* Better parsing of Literate CoffeeScript files, including now correct parsing of tabbed .litcoffee files; and more accurate stack traces (assuming you don’t do your own word wrapping within list items)\r\n\r\n* Swap Marked for MarkdownIt for parsing the Markdown of Literate CoffeeScript files; use MarkdownIt’s `map` property to preserve correct line numbers\r\n\r\n* Literate CoffeeScript tests: remove trailing whitespace, fix spelling\r\n\r\n* Literate CoffeeScript tests: add block quote test\r\n\r\n* Literate CoffeeScript (tabbed, at least) seems to need a consistent starting indentation\r\n\r\n* Restore test\r\n\r\n* Reference links work now in MarkdownIt\r\n\r\n* Breaking change in Literate CoffeeScript: code blocks within HTML tags must be unindented\r\n\r\n* Breaking change in Literate CoffeeScript: code blocks within lists need a blank line separating them from the list item text"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd053a21fa1e1f1a9f03",
    "number": 4484,
    "body": "This PR implements [our consensus](https://github.com/coffeescript6/discuss/issues/17) for how to handle getters and setters, or more precisely the `get` and `set` keywords, in CS2:\r\n\r\nThe `get` and `set` shorthand syntax is too infrequently used, and a discouraged practice, for CoffeeScript to support directly. Getters and setters can be created via the [`Object.defineProperty` method](https://rawgit.com/jashkenas/coffeescript/2/docs/v2/index.html#unsupported), so they technically already *are* supported in CoffeeScript; supporting the shorthand syntax as well just makes them more convenient to use, but [Douglas Crockford argues](http://youtu.be/RO1Wnu-xKoY?t=21m22s) that we should rarely if ever be using them.\r\n\r\nSo the task for CS2 is to have the compiler throw an error when it appears that a `get` or `set` shorthand syntax keyword is being used. Things like the following:\r\n\r\n```coffee\r\nclass A\r\n  get b: ->\r\n\r\nc =\r\n  get d: ->\r\n\r\ne = ->\r\n  get f: ->\r\n```\r\n\r\nAnd `set` for all of the same. These should throw compiler errors, _without_ prohibiting people from using variables or functions named `get` or `set` elsewhere in the code. Basically when a call to a function named `get` or `set` is given an argument that is an object, and that function is called without parentheses, we throw an error. All someone has to do to use their function named `get` or `set` is to call it with parentheses, e.g. `get({b: ->})`\r\n\r\nIf we someday change our minds and decide to support `get` and `set` shorthand keywords, the work has already been done in this PR to recognize the tokens. They would need to be added to the grammar as keywords and output accordingly. Thanks to this PR, it wouldn’t be a breaking change.\r\n\r\n@connec @mrmowgli @carlsmith",
    "head_branch": "get-set-warning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Throw an error for ambiguous `get` or `set` keywords or function calls (#4484)\n\n* Throw an error for ambiguous `get` or `set` function calls or ES5 getter/setter keywords, to warn the user to use parentheses if they intend a function call (or to inform them that `get` or `set` cannot be used as a keyword)\r\n\r\n* Code golf\r\n\r\n* Catch get or set keyword before static method\r\n\r\n* DRY up getting the previous token\r\n\r\n* Throw an error if get or set are used as keywords before what looks like a function or method with an interpolated/dynamic name\r\n\r\n* Allow `get` or `set` parentheses-less function calls when first argument is a string without a colon (so a plain string, not a property accessor)\r\n\r\n* Revert \"Allow `get` or `set` parentheses-less function calls when first argument is a string without a colon (so a plain string, not a property accessor)\"\r\n\r\nThis reverts commit 2d1addf5a4d2ebdb4039aee8d9f751d2c50b50da.\r\n\r\n* Optimization\r\n\r\n* No longer throw an error on `get` or `set` function calls to objects with dynamic property names (introduces a way to circumvent our check for trying to avoid the `get` or `set` keywords, but not worth the complications for this tiny edge case)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd063a21fa1e1f1a9f04",
    "number": 4483,
    "body": "The lexer was treating every appearance of `default` within an `export` statement as the `default` keyword, leading to #4451. This PR treats `default` as a keyword in an export statement only when it follows `export` or `as`, or is already covered by the grammar as part of an `ExportSpecifier`, which fixes #4451.\r\n\r\nWe had the ability to import a module member named `default`, but not `export` one. This adds that ability, fixing #4481. Tests for these cases are included.",
    "head_branch": "fix-export-default",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4483 from GeoffreyBooth/fix-export-default\n\nFix #4451 and 4481: `default` in `export` statements"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd073a21fa1e1f1a9f05",
    "number": 4480,
    "body": "I've found some broken links in CS2 docs , so i try to fix it. \r\nIt should also works with `v1` docs.",
    "head_branch": "2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix broken links in 2 docs (#4480)\n\nThanks!"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd083a21fa1e1f1a9f06",
    "number": 4479,
    "body": "Sorry @GeoffreyBooth, I'd started working on a destructuring branch with a slightly different approach! Maybe there are some things in it that might be useful.\r\n\r\nFor comparison, my goal was to reuse as much of the compilation of `Arr` and `Obj` as possible. The main change is making them `isAssignable` and adding an `eachName` method for extracting variable names.\r\n\r\nCurrently, the whole assignment will bail if any entry is a special CS assignable such as default arguments, non-final splats, or soaked values. If I keep going it would be to refactor `compilePatternMatch` to only deal with these special cases, and otherwise delegate back into `Assign`.",
    "head_branch": "destructuring",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd093a21fa1e1f1a9f07",
    "number": 4478,
    "body": "The intent of this PR is to output CoffeeScript’s destructuring as ES2015+ destructured syntax whenever possible. Migrating the task from https://github.com/coffeescript6/discuss/issues/69, this:\r\n\r\n```coffee\r\nnumbers = [1, 2, 3]\r\npairs = { a: 1, b: 2, c: 3 }\r\n\r\n[one, two, three] = numbers\r\n{one, two, three} = pairs\r\n\r\nfoo = ->\r\n  [@a, @b, @c] = numbers\r\n  {@a, @b, @c} = pairs\r\n  return\r\n```\r\nwould compile to [this](https://babeljs.io/repl/#?babili=false&evaluate=true&lineWrap=true&presets=latest&experimental=false&loose=false&spec=false&code=var%20foo%2C%20numbers%2C%20one%2C%20pairs%2C%20three%2C%20two%3B%0A%0Anumbers%20%3D%20%5B1%2C%202%2C%203%5D%3B%0A%0Apairs%20%3D%20%7B%0A%20%20a%3A%201%2C%0A%20%20b%3A%202%2C%0A%20%20c%3A%203%0A%7D%3B%0A%0A%5Bone%2C%20two%2C%20three%5D%20%3D%20numbers%3B%0A(%7Bone%2C%20two%2C%20three%7D%20%3D%20pairs)%3B%0A%0Afoo%20%3D%20function()%20%7B%0A%20%20%5Bthis.a%2C%20this.b%2C%20this.c%5D%20%3D%20numbers%3B%0A%20%20(%7Ba%3A%20this.a%2C%20b%3A%20this.b%2C%20c%3A%20this.c%7D%20%3D%20pairs)%3B%0A%7D%3B%0A):\r\n```js\r\nvar foo, numbers, one, pairs, three, two;\r\n\r\nnumbers = [1, 2, 3];\r\n\r\npairs = {\r\n  a: 1,\r\n  b: 2,\r\n  c: 3\r\n};\r\n\r\n[one, two, three] = numbers;\r\n({one, two, three} = pairs);\r\n\r\nfoo = function() {\r\n  [this.a, this.b, this.c] = numbers;\r\n  ({a: this.a, b: this.b, c: this.c} = pairs);\r\n};\r\n```\r\nThe array destructuring, as you can see here, is pretty straightforward; but the object destructuring presents challenges. First, if we’re not declaring the variable at the same time (as we never do in CoffeeScript, hence the `var` line of declarations at the top of each scope) then we need to wrap the destructuring assignment in parentheses, [per MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Assignment_without_declaration). And if the target variable is attached to `this`, we need to use the [“assigning to new variable names” shortcut](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Assigning_to_new_variable_names) to destructure into our intended destination variable, unless people have a better suggestion for how to handle this.\r\n\r\nThere is an intentional breaking change in that CS2 destructuring, like CS2 function default parameters, will apply default values only when a variable is `undefined`, not falsy.",
    "head_branch": "destructuring",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Destructuring (#4478)\n\n* Output simple array destructuring assignments to ES2015\r\n\r\n* Output simple object destructured assignments to ES2015\r\n\r\n* Compile shorthand object properties to ES2015 shorthand properties\r\n\r\nThis dramatically improves the appearance of destructured imports.\r\n\r\n* Compile default values in destructured assignment to ES2015\r\n\r\n* Rename `wrapInBraces` to `wrapInParentheses`, and `compilePatternMatch` to `compileDestructuring`, for clarity; style improvements (no `==` or `!=`, etc.)\r\n\r\n* Don’t confuse the syntax highlighter\r\n\r\n* Comment Assign::compilePatternMatch a bit\r\n\r\n* Assignment expressions in conditionals are a bad practice\r\n\r\n* Optional check for existence that only checks `!== undefined`, not `!= null`, to follow ES convention that default values only apply when a variable is undefined, not falsy\r\n\r\n* Add comments; remove unnecessary array splats in function tests\r\n\r\n* The fallback destructuring code should apply default values only if `undefined`, not falsy, to follow ES spec\r\n\r\n* Support destructuring in function parameters (first pass); catch destructured reserved words\r\n\r\n* Destructured variables in function parameter lists shouldn’t be added to the function body with `var` declarations; treat splat array function parameters the legacy way to avoid rethinking #4005\r\n\r\n* Remove redundancy in undefined-only check for existence; fix passing option to check\r\n\r\n* Fix undefined redundancy\r\n\r\n* Simplify getting the variable name\r\n\r\n* Reimplement “check for existence if not undefined” without creating a new operator\r\n\r\n* `Obj::isAssignable` should not mutate; pass `lhs` property in from `Assign` or `Code` to child arrays and objects so that those child nodes are set as allowable for destructuring\r\n\r\n* Revert changes to tests\r\n\r\n* Restore revised test for empty destructuring assignment"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd0a3a21fa1e1f1a9f08",
    "number": 4475,
    "body": "& not `=>`\r\n\r\nThanks for the V2!",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd0b3a21fa1e1f1a9f09",
    "number": 4473,
    "body": "Connected to [#3894](https://github.com/jashkenas/coffeescript/issues/3894).\r\n\r\nIn CS2 emit\r\n\r\n```\r\nobj = { x: 1, y: 2}\r\nobj1 = {obj..., z: 3}\r\n```\r\nto\r\n\r\n`obj1 = {...obj, z: 3}`\r\n\r\n\r\nImprove destructuring assignment for object literal:\r\n\r\n```\r\n{a, b, x...} = {a:1, b:2, c:3, d:4, e:5}\r\na = 1\r\nb = 2\r\nx = {c:3, d:4, e:5}\r\n```\r\n\r\n```\r\n{c, x..., e} = {a:1, b:2, c:3, d:4, e:5}\r\nc = 3\r\ne = 5\r\nx = {a:1, b:2, d:4}\r\n```\r\n\r\n```\r\n{c, x..., a:p} = {a:1, b:2, c:3, d:4, e:5}\r\nc = 3\r\np = 1\r\nx = {b:2, d:4, e:5}\r\n```\r\n\r\n```\r\nfuturists =\r\n  sculptor: \"Umberto Boccioni\"\r\n  painter:  \"Vladimir Burliuk\"\r\n  poet:\r\n    name:   \"F.T. Marinetti\"\r\n    address: [\r\n      \"Via Roma 42R\"\r\n      \"Bellagio, Italy 22021\"\r\n    ]\r\n\r\n{poet: {name, addr1...}} = futurists\r\naddr1 = {address: [ \"Via Roma 42R\",  \"Bellagio, Italy 22021\"]}\r\n\r\n{poet: {addr2..., name:title}} = futurists\r\naddr2 = {address: [ \"Via Roma 42R\",  \"Bellagio, Italy 22021\"]}\r\n```",
    "head_branch": "objectSpread",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd0c3a21fa1e1f1a9f0a",
    "number": 4472,
    "body": "Previously, if the `$HOME` environmental variable was set, the `.coffee_history` file was written there. This is still the case, but first we check if `$XDG_CACHE_HOME` is set, and if so we write it there instead. This allows users who want to follow the [XDG Base Directory Specification](https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html) to do so. Actually, this helps out *all* users who want to keep their home directory a bit cleaner. It seems that using this standardized environmental variable is the cleanest way to do this, rather than involving configuration files or command line flags or anything else.\r\n\r\nFixes #3705.",
    "head_branch": "xdg-history",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Write .coffee_history in $XDG_CACHE_HOME (#4472)\n\n* Write .coffee_history in $XDG_CACHE_HOME\r\n\r\nPreviously, if the $HOME environmental variable was set, the\r\n.coffee_history file was written there. This is still the case, but\r\nfirst we check if $XDG_CACHE_HOME is set, and if so we write it\r\nthere instead. This allows users who want to follow the XDG Base\r\nDirectory Specification [0] to do so. Actually, this helps out *all*\r\nusers who want to keep their home directory a bit cleaner. It seems\r\nthat using this standardized environmental variable is the cleanest\r\nway to do this, rather than involving configuration files or command\r\nline flags or anything else.\r\n\r\nFixes #3705.\r\n\r\n[0] https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html\r\n\r\n* Stylistic corrections\r\n\r\nCorrected some style deficiencies, thanks to helpful advice from\r\n@GeoffreyBooth."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd0d3a21fa1e1f1a9f0b",
    "number": 4471,
    "body": "Previously, if the `$HOME` environmental variable was set, the `.coffee_history` file was written there. This is still the case, but first we check if `$XDG_CACHE_HOME` is set, and if so we write it there instead. This allows users who want to follow the [XDG Base Directory Specification](https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html) to do so. Actually, this helps out *all* users who want to keep their home directory a bit cleaner. It seems that using this standardized environmental variable is the cleanest way to do this, rather than involving configuration files or command line flags or anything else.\r\n\r\nFixes #3705.\r\n\r\n**Sorry for the noise. Of course I meant this to go against the `2` branch.**",
    "head_branch": "xdg-history",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd0e3a21fa1e1f1a9f0c",
    "number": 4469,
    "body": "First draft, looking for comments, and of course figure out where this would go on the site.",
    "head_branch": "2-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4469 from mrmowgli/2-docs\n\n[CS2] An explanation of why we don’t currently support certain features"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd0f3a21fa1e1f1a9f0d",
    "number": 4461,
    "body": "Fixes #4422.\r\n\r\nAlso fixed the string interpolation in the 'Future Reserved Words' test (7bf9e23) ...\r\n\r\n> Added the missing '#'s for correct string interpolation. Seems like this went unnoticed because in these test cases, the `check` function tests if the compilation fails, which it does either way.\r\n\r\n",
    "head_branch": "issue4422",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd103a21fa1e1f1a9f0e",
    "number": 4459,
    "body": "Fixes autoscrolling the page when starting MMB dragging on a code example.\r\n\r\nThe code examples auto-expand so you don't need to scroll them. You would want to scroll in Try CoffeeScript but CodeMirror doesn't support autoscrolling anyways, it only prevents it.\r\n\r\nNote: This likely breaks the MMB pasting found in some Linux systems, i.e. `X-selection-paste`.\r\nIf that's the case and is deemed unacceptable, we could at *least* allow autoscrolling on the readonly editors.",
    "head_branch": "mmb-scrolling",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd113a21fa1e1f1a9f0f",
    "number": 4448,
    "body": "This adds the `v2` folder (with the CS2 docs) to `master`. This doesn’t overwrite the CS1 docs.\r\n\r\nI also added a brief note in the introduction to the CS1 docs announcing CS2 and linking to the 2 docs.",
    "head_branch": "2-docs-on-master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4448 from GeoffreyBooth/2-docs-on-master\n\n2 docs on master"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd123a21fa1e1f1a9f10",
    "number": 4447,
    "body": "Looks like super calls need to explicitly specify their args now, so I added the\r\narg in `Call.prototype.updateLocationDataIfMissing`.\r\n\r\nAlso, the JS code hadn't updated, I guess due to the build failure, so re-run\r\n`bin/cake build` so `lexer.js` and `nodes.js` both get updated. This fixes the\r\ntests.",
    "head_branch": "fix-build-after-bare-super-merge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix CS2 build after merge pulled in a bare super call (#4447)\n\n[CS2] Fix CS2 build after merge pulled in a bare super call"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd133a21fa1e1f1a9f11",
    "number": 4445,
    "body": "This is an upstream port of https://github.com/decaffeinate/coffeescript/pull/24\r\n\r\nIn a case like `new A().b(c)`, the jison structure ends up being different from\r\nthe resulting AST. To the jison parser, this is the `new` unary operator applied\r\nto the expression `A().b(c)`. When the unary operator is applied, the\r\n`Call.prototype.newInstance` function traverses into the leftmost function call\r\nand sets the `isNew` flag to true, and the `Op` constructor returns the `Call`\r\nnode so that the call is used in place of the unary operator. However, the code\r\nwasn't updating the node location data, so this commit fixes that.\r\n\r\nIt's sort of hard to get the location data in `newInstance`, so we set a flag on\r\nevery affected node in `newInstance` and override `updateLocationDataIfMissing`\r\n(which is called with the location data after the fact) so that it updates just\r\nthe starting position.",
    "head_branch": "upstream-fix-new-location-data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4445 from alangpierce/upstream-fix-new-location-data\n\nProperly update location data when setting a call to use `new`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd143a21fa1e1f1a9f12",
    "number": 4444,
    "body": "This is an upstream port of https://github.com/decaffeinate/coffeescript/pull/17\r\n\r\nThe lexer generates fake tokens for interpolated heregexes, and the ending\r\ntokens were being placed where the start (inclusive) and end (inclusive) index\r\nwere one past the end of the heregex. This meant that in a case like\r\n`[a ///#{b}///]`, the end tokens of the heregex and also the implicit function\r\ncall end were all being placed at the `]`, so the AST location data would say\r\nthat the function call ends at the end of the `]`.\r\n\r\nTo fix, I can just subtract 1 from the position of those ending heregex tokens\r\nso that their end lines up with the end of the heregex itself. This is similar\r\nto previous fixes that changed `OUTDENT` and `CALL_END` tokens so that the end\r\nof the token lines up with the end of the AST node.",
    "head_branch": "upstream-fix-heregex-end-location",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4444 from alangpierce/upstream-fix-heregex-end-location\n\nPlace ending heregex tokens one index earlier"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd143a21fa1e1f1a9f13",
    "number": 4443,
    "body": "## CoffeeTags\r\n- tiny addition to the native CoffeeScript lexer and rewriter for rendering HTML\r\n- most useful with projects like Vuejs or React, but can be used by many others\r\n- no new language or syntax to learn, just use all the power of normal CoffeeScript\r\n- resembles HTML, but is actually active/executable code\r\n- invokes a render function to process tags for the target framework (React, Vue, etc.)\r\n- doesn't require tags to be closed, uses indentation level to determine\r\n- doesn't require tags to be predeclared to use (no more `{div, table, th, tr} = React.DOM`)\r\n- allows custom render function using `<!myRenderer!>` (the default render function is `h`)\r\n- allows selector-like syntax for tags (e.g. - `<div.active@menu>` yields `<div class=\"active\" id=\"menu\">`\r\n- allows default tag name of `div` (i.e. - `<>`, `<.note>`, and `<.active@sidebar!>` are all valid)\r\n- allows trailing `!` on tags for unescaped content (e.g. - `<span.note!> \"Note: #{text}\"`)\r\n- allows trailing `?` on tags for showing debugging output (e.g. - `<div?>`)\r\n- allows naked tags (e.g. - you don't have to type `div()`, you can just use `<div>`)\r\n- allows reserved words to be used as attributes (no more using `<div className: 'foo'`>)\r\n- allows attributes to be skipped (no more using `div null, \"Hello\"`)\r\n- allows children to be passed as a list without having to pass them as an explicit array\r\n- allows the first argument to indicate if the tag should be skipped (via truthy Boolean or Number)\r\n- TODO: allows dynamic tags (e.g. - <`\"h#{ level }\">` can produce `<h3>`)\r\n\r\n### Example\r\n#### CoffeeScript source\r\n\r\n``` coffee\r\nrender: (h) ->\r\n  <table.active.fixed@inbox>\r\n    <tr>\r\n      <th> 'From'\r\n      <th> 'Subject'\r\n      <th> 'Received'\r\n    for item in @list\r\n      <tr> class:item.tags,\r\n        <td> <p> item.from\r\n        <td> item.subj\r\n        <td> <p> item.date\r\n```\r\n#### CoffeeScript output\r\n\r\n``` javascript\r\nrender: function(h) {\r\n  var item;\r\n  return h('table.active.fixed@inbox', h('tr', h('th', 'From'), h('th', 'Subject'), h('th', 'Received')), (function() {\r\n    var i, len, ref, results;\r\n    ref = this.list;\r\n    results = [];\r\n    for (i = 0, len = ref.length; i < len; i++) {\r\n      item = ref[i];\r\n      results.push(h('tr', {\r\n        \"class\": item.tags\r\n      }, h('td', h('p', item.from)), h('td', item.subj), h('td', h('p', item.date))));\r\n    }\r\n    return results;\r\n  }).call(this));\r\n}\r\n```\r\n",
    "head_branch": "coffee-tags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd153a21fa1e1f1a9f14",
    "number": 4442,
    "body": "Hi there!  I haven't found an open Github issue for anything like this, but I wanted to take a shot at reducing duplication in compiled CoffeeScript output.  Not how this process typically works, so please let me know if this isn't the correct way to get a change into the upstream project, especially with the CS2 alpha coming!\r\n\r\nIn large coffeescript projects with hundreds of .coffee files, the \"extend\", \"hasProp\", \"bind\" etc.  utilities are duplicated at the top of every file.  Using a CommonJS `require` statement, its possible to\r\nsignificantly reduce compiled file sizes by referencing a common library that maintains those utility functions.  The TypeScript project implemented something similar in version 2.1 of its compiler, which\r\noptionally references common boilerplate from the [\"tslib\" module](https://github.com/Microsoft/tslib).\r\n\r\nAdding a new compiler option (\"--import-helpers\") allows coffeescript developers to opt into CommonJS `require`-based cost savings.\r\n\r\nCompiled output size difference by utility function, using `--import-helpers` (assuming unminified output):\r\n    * extend: -257 bytes/file\r\n    * bind: -59 bytes/file\r\n    * indexOf: -120 bytes/file\r\n    * modulo: -34 bytes/file\r\n    * hasProp: 0 bytes/file (unmodified; \"coffeelib.hasProp\" saves 0 bytes/file)\r\n    * slice: 0 bytes/file (unmodified; \"coffeelib.slice\" adds 7 bytes/file)\r\n\r\nFor a project with just 10 subclasses (one per file), compiling with `--import-helpers` saves 2kB in redundant compiled output, minus some constant overhead per-file for `coffeelib = require(\"coffeelib\"),` in\r\nthe hoisted `var` declarations.\r\n\r\nFor now, I've pushed the `coffeelib` module to [a personal repo](https://github.com/sjbarag/coffeelib), but **I haven't published anything to npm**.  In the event this PR gets accepted, I'll happily transfer ownership of that repo to whomever is running things these days, so they can publish the module when they're ready :smile:",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd163a21fa1e1f1a9f15",
    "number": 4441,
    "body": "Per the changelog:\r\n\r\n- [x] The `cake` commands have been updated, with new `watch` options for most tasks. Clone the [CoffeeScript repo](https://github.com/jashkenas/coffeescript) and run `cake` at the root of the repo to see the options.\r\n- [x] Fixed a bug where `export`ing a referenced variable was preventing the variable from being declared.\r\n- [x] Fixed a bug where the `coffee` command wasn’t working for a `.litcoffee` file.\r\n\r\nIncludes #4440, assuming that will be merged in soon. If that requires more work, I’ll merge that branch into this one as needed.",
    "head_branch": "1.12.4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4441 from GeoffreyBooth/1.12.4\n\n1.12.4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd173a21fa1e1f1a9f16",
    "number": 4440,
    "body": "- All the documentation tasks now have watch and non-watch versions.\r\n- New `cake release` task to cut a release.\r\n- Remove `install` task.\r\n- New `cake build:watch` and `cake build:watch:harmony` tasks to build and test and rebuild on changes to the source or tests; based on https://github.com/GeoffreyBooth/coffeescript-gulp",
    "head_branch": "cake",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Refactor Cake tasks (#4440)\n\n* Node comes with NPM nowadays, so there’s not really a reason to install CoffeeScript the non-NPM way\r\n\r\n* The cake documentation tasks should each have build and watch modes following the same form\r\n\r\n* Refactor the build tasks to be more foolproof, including the parser unless it’s explicitly excluded\r\n\r\n* Abstract out testing built code, to prepare for watching the build task\r\n\r\n* Cake task to cut a new release\r\n\r\n* cake build:watch, based on https://github.com/GeoffreyBooth/coffeescript-gulp\r\n\r\n* Coding style\r\n\r\n* Tests shouldn’t write files in a watched folder\r\n\r\n* Don’t crash if the REPL test history file is already gone by the time we try to delete it"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd183a21fa1e1f1a9f17",
    "number": 4439,
    "body": "Here we go . . . separate PR to follow to update `master` with the `docs/v2` folder, so that both versions’ docs can be hosted via GitHub; and to add a note to the v1 docs that 2.0.0-alpha1 is here (after we add it to NPM).",
    "head_branch": "2.0.0-alpha1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4439 from GeoffreyBooth/2.0.0-alpha1\n\n[CS2] 2.0.0-alpha1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd193a21fa1e1f1a9f18",
    "number": 4438,
    "body": "- http://rawgit.com/GeoffreyBooth/coffeescript/classes-docs/docs/v2/index.html#classes\r\n\r\n- http://rawgit.com/GeoffreyBooth/coffeescript/classes-docs/docs/v2/index.html#breaking-changes (ported from https://github.com/jashkenas/coffeescript/wiki/%5BWIP%5D-Breaking-changes-in-CoffeeScript-2)",
    "head_branch": "classes-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update docs for classes, breaking changes (#4438)\n\n* Update classes docs for CS2\r\n\r\n* Port breaking changes from https://github.com/jashkenas/coffeescript/wiki/%5BWIP%5D-Breaking-changes-in-CoffeeScript-2 into new docs section\r\n\r\n* Update browser compiler\r\n\r\n* Update re @connec’s notes; split classes section into two sections for classes and working with prototypes; make breaking changes examples editable whenever possible"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd1a3a21fa1e1f1a9f19",
    "number": 4435,
    "body": "Fixes #4434",
    "head_branch": "sourcemap-literate-compilation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "getSourceMap needs to pass literate flag to compile() (#4435)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd1b3a21fa1e1f1a9f1a",
    "number": 4432,
    "body": "Exports that referenced variables assigned in the module would prevent the referenced variables from being declared, resulting in ReferenceErrors at run time.\r\n\r\nFixes #4394.",
    "head_branch": "fix-export-declarations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4432 from connec/fix-export-declarations\n\nFix \"export\" squashing variable declarations"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd1c3a21fa1e1f1a9f1b",
    "number": 4430,
    "body": "Fixes https://github.com/jashkenas/coffeescript/issues/4406#issuecomment-274459754. @connec?",
    "head_branch": "destructured-parameter-evaluation-order",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Fix handling of parameters that are complex (#4430)\n\n* Add failing test per #4406\r\n\r\n* If a parameter is a function call, define it in an expression within the function body\r\n\r\n* Remove the space between `function` and `*` for generator functions, to follow usual ES idiom\r\n\r\n* We can collapse `isCall` into `isComplex`\r\n\r\n* Don’t need existence check here\r\n\r\n* Correct destructured parameter default evaluation order with an incrementing variable (or more generally any complicated parameter that isComplex)\r\n\r\n* Try to pull complex parameters out of the parameter list if their order of execution matters; but don’t pull _all_ complex parameters out of the parameter list, so that we don’t lose parameter default values\r\n\r\n* Add lots of comments about node special properties\r\n\r\n* Err on the side of caution in deciding whether a complex parameter is allowable in a function parameter list rather than the function body (there are lots more detections we could add to find additional “safe” parameters)\r\n\r\n* Follow the ES and CS2 convention of assigning parameter default values only when undefined, not when null or undefined\r\n\r\n* Along with arrays and empty objects, also let values whose bases are not complex be allowed in the function parameter list (like `obj.prop`)\r\n\r\n* Better way to check for undefined parameters when declaring them in a function body\r\n\r\n* Once we’ve put a complex parameter in the function body, all following complex parameters go into the function body; no need to create lots of exceptions of when to choose whether to put a complex param in the body\r\n\r\n* Rename `isComplex` to `shouldCache` for clarity"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd1d3a21fa1e1f1a9f1c",
    "number": 4429,
    "body": "We should release #4428 ASAP.",
    "head_branch": "1.12.3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4429 from GeoffreyBooth/1.12.3\n\n1.12.3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd1e3a21fa1e1f1a9f1d",
    "number": 4428,
    "body": "Fixes #4418, #4391, #3890.\r\n\r\nSo in #4399 we removed CoffeeScript’s patched `Error.prepareStackTrace`, because it was poorly implemented and threw exceptions when it shouldn’t. However, removing that patch is a major inconvenience (triggering #4418) as errors thrown by the runtime have incorrect line numbers. Just working with failing tests in the CoffeeScript codebase itself is a major pain in the ass, since the line numbers are meaningless for tests that throw errors.\r\n\r\nSo we need this patch back, but we should fix it so that it doesn’t cause the errors described in the other tickets. As I looked into it, it appears that `Error.prepareStackTrace`‘s original implementation went like this:\r\n1. Start with the filename of the file where the exception is being thrown.\r\n2. Reopen that file (per `getSourceMap` calling `exports._compileFile` calling `fs.readFileSync`).\r\n3. _Recompile_ the file, generating a source map that gets cached in memory.\r\n4. Use that source map to patch the stack trace.\r\n\r\nThe “reopen the file” part is hugely problematic, because the file might not still be available by the time the exception is thrown and this stack trace is requested; that’s what #3890 complains about. It also makes this code completely unusable in a browser, where `fs` doesn’t exist.\r\n\r\nIn #4399 @jashkenas complained that a file is compiled a second time just to generate a source map. Upon closer inspection, though, it seems to me that what’s happening is that a file gets recompiled to generate a source map _only when a stack trace is needed,_ which presumably should be a rare occurrence. I think this is the desired behavior; since the default compilation mode has source map generation off, we shouldn’t generate source maps all the time just so that we have them cached for stack traces. Recompiling only in the event of a stack trace should be faster than generating source maps all the time, whether they were requested or not. (I can see people disagreeing with me on this though; @jashkenas, what do you think?)\r\n\r\nWhat we _should_ cache, then, is the code of the file we compiled. That way when a stack trace needs to recompile it to get the source map, it’s already in memory; it doesn’t need to open a file. This lets us remove the `fs.readFileSync` and its associated exceptions, which fixes #3890.\r\n\r\nPerhaps unrelated, I patched Jison’s output to not assume that since `require` and `exports` are defined, `require(‘fs’)` must be as well. This closes #4391, and fixes edge cases in the browser compiler. I also submitted https://github.com/zaach/jison/pull/339 to try to push the fix upstream.",
    "head_branch": "fix-stack-trace",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix stack trace (#4428)\n\n* Revert aee27fbff03870c5479c6c33e6b1f1a32219420c\r\n\r\n* Patch Jison’s output so that it requires `fs` only if we’re truly in a CommonJS/Node environment, not a browser environment that may happen to have globals named `require` and `exports` (as would be the case if require.js is being used). Fixes #4391.\r\n\r\n* Temporary fix for exceptions getting thrown when trying to generate a stack trace for a file that has been deleted since compilation; fixes #3890, but not well. A better solution would not try to recompile the file when trying to retrieve its stack trace.\r\n\r\n* Save the test REPL history in the system temp folder, not in the CoffeeScript project folder\r\n\r\n* Rewrite `getSourceMap` to never read a file from disk, and therefore not throw IO-related exceptions; source maps are either retrieved from memory, or the related source code is retrieved from memory to generate a new source map. Fixes #3890 the proper way.\r\n\r\n* Add test to verify that stack traces reference the correct line number. Closes #4418.\r\n\r\n* Get the parser working in the browser compiler again; rather than detecting a CommonJS environment generally, just check for `fs` before trying to use it\r\n\r\n* Follow Node’s standard of 4-space indentation of stack trace data\r\n\r\n* Better .gitignore\r\n\r\n* Fix caching of compiled code and source maps; add more tests to verify correct line numbers in stack traces\r\n\r\n* Better fallback value for the parser source\r\n\r\n* Fix the stack traces and tests when running in a browser\r\n\r\n* Update the browser compiler so that @murrayju doesn’t have any extra work to do to test this branch"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd1f3a21fa1e1f1a9f1e",
    "number": 4427,
    "body": "Fixes #4406. Also revises output of generator functions to be `function*` rather than `function *`, to follow [accepted idiom](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*).\r\n\r\n@connec, any notes?",
    "head_branch": "destructured-parameter-evaluation-order",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Fix handling of parameters that are function calls (#4427)\n\n* Add failing test per #4406\r\n\r\n* If a parameter is a function call, define it in an expression within the function body\r\n\r\n* Remove the space between `function` and `*` for generator functions, to follow usual ES idiom\r\n\r\n* We can collapse `isCall` into `isComplex`\r\n\r\n* Don’t need existence check here"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd203a21fa1e1f1a9f1f",
    "number": 4426,
    "body": "Dynamic class keys were using the method scope for compilation, resulting in missing declarations and runtime errors.\r\n\r\nFixes #4425.",
    "head_branch": "class-dynamic-key-scope",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4426 from connec/class-dynamic-key-scope\n\n[CS2] Fix scope of assignments in dynamic class keys"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd213a21fa1e1f1a9f20",
    "number": 4424,
    "body": "Super quick first pass.  This breaks using `super` in non-methods, meaning several tests are failing. Self-compilation still works.\r\n\r\nAs I mentioned in https://github.com/coffeescript6/discuss/issues/22#issuecomment-273837748, the main decision to be made here is around support for `super` in non-class methods. Opinions from @jashkenas, @GeoffreyBooth, @lydell or anyone else very welcome!\r\n\r\nHere are a couple of the options:\r\n\r\n1. Go all in with ES2015, drop support for `super` outside of methods in class initializers. This would clean up some code in the compiler for tracking the classes of methods, special handling of prototype assignments in class bodies, etc.\r\n2. Why not both? If the super call is in a method in a class initializer, compile it to an ES2015 `super`, otherwise, compile it as we do now. This would just add a couple of special cases in the handling of `SuperCall` nodes.\r\n3. Try and devise some best of both worlds approach. Compile class method to ES2015. Since we can now use ES5+ method, we could drop `__super__`, method class recording, etc. and replace it all with `Object.getPrototypeOf(this.constructor)`. This could optionally turn `super` into a fully runtime feature that will compile anywhere, and would provide clean ES2015 output.\r\n\r\nPersonally, I'm leaning towards 1. for the significant impact I expect it will have on the compiler, and the fact that, realistically, the prototype-based approach is gonna be rare in an ES2015 world. If really, really needed, `super` in a dynamic method can still be specified explicitly (e.g. `BaseClass::method.apply(this, arguments)`).\r\n\r\nIf the compatibility break of such a move is too great, I'd be interested in exploring 3. I think that 2. would not be popular as it would force us to continue using class IIFEs to ensure correct parent class caching, etc. meaning 'ugly' JS output.",
    "head_branch": "es2015-super",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Compile all super calls to ES2015 super (#4424)\n\n* Compile all super calls to ES2015 super\r\n\r\nThis breaks using `super` in non-methods, meaning several tests are\r\nfailing. Self-compilation still works.\r\n\r\n* Use bound functions for IIFEs containing `super`\r\n\r\n`super` can only be called directly in a method, or in an arrow\r\nfunction.\r\n\r\n* Fix handling of `class @A extends A`\r\n\r\nThis behaviour worked 'for free' when the parent reference was being\r\ncached by the executable class body wrapper. There now needs to be\r\nspecial handling in place to check if the parent name matches the class\r\nname, and if so to cache the parent reference.\r\n\r\n* Fix tests broken by compiling ES2015 `super`\r\n\r\n* Disallow bare super\r\n\r\nThis removes syntax support for 'bare' super calls, e.g.:\r\n\r\n    class B extends A\r\n      constructor: -> super\r\n\r\n`super` must now always be followed with arguments like a regular\r\nfunction call. This also removes the capability of implicitly forwarding\r\narguments. The above can be equivalently be written as:\r\n\r\n    class B extends A\r\n      constructor: -> super arguments...\r\n\r\n* Support super with accessors\r\n\r\n`super` with following accessor(s) is now compiled to ES2015\r\nequivalents. In particular, expressions such as `super.name`,\r\n`super[name]`, and also `super.name.prop` are all now valid, and can be\r\nused as expected as calls (i.e. `super.name()`) or in expressions (i.e.\r\n`if super.name? ...`).\r\n\r\n`super` without accessors is compiled to a constructor super call in a\r\nconstructor, and otherwise, as before, to a super call to the method of\r\nthe same name, i.e.\r\n\r\n    speak: -> super()\r\n\r\n...is equivalent to\r\n\r\n    speak: -> super.speak()\r\n\r\nA neat side-effect of the changes is that existential calls now work\r\nproperly with super, meaning `super?()` will only call if the super\r\nproperty exists (and is a function). This is not valid for super in\r\nconstructors.\r\n\r\n* Prevent calling `super` methods with `new`\r\n\r\nThis fixes a bug in the previous super handling whereby using the `new`\r\noperator with a `super` call would silently drop the `new`. This is now\r\nan explicit compiler error, as it is invalid JS at runtime.\r\n\r\n* Clean up some old super handling code\r\n\r\nThis was mostly code for tracking the source classes and variables for\r\nmethods, which were needed to build the old lookups on `__super__`.\r\n\r\n* Add TODO to improve bare super parse error\r\n\r\n* Add some TODOs to improve some of the class tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd223a21fa1e1f1a9f21",
    "number": 4420,
    "body": "These edits for the CS2 docs should probably get made to the 1.x docs as well.",
    "head_branch": "backport-2-doc-changes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4420 from GeoffreyBooth/backport-2-doc-changes\n\nBackport documentation edits"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd233a21fa1e1f1a9f22",
    "number": 4417,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4417 from BrianRossmajer/patch-1\n\nShow a simple object extraction before complex one"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd243a21fa1e1f1a9f23",
    "number": 4416,
    "body": "",
    "head_branch": "copyright-year",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4416 from isabellatea/copyright-year\n\nUpdate copyright range to 2017"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd243a21fa1e1f1a9f24",
    "number": 4415,
    "body": "This loosens the compilation of `for` expressions to allow the index variable to be an `@` value, e.g.\r\n\r\n```coffee\r\ndo @visit for @node, @index in nodes\r\n```\r\n\r\nWithin `@visit`, the index of the current node (`@node`) would be available as `@index`.\r\n\r\nFixes #4411.",
    "head_branch": "@indices-in-loops",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4415 from connec/@indices-in-loops\n\nAllow `@` values as indices in `for` expressions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd253a21fa1e1f1a9f25",
    "number": 4410,
    "body": "Resolving #4409. Not sure is it proper place for fix, first time working with coffeescript internals.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix //= operator (#4410)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd263a21fa1e1f1a9f26",
    "number": 4407,
    "body": "Trailing whitespace is generally considered 'bad style' and is often linted against or even simply removed by text editors.\r\n\r\nOne of the tests in test/error_messages.coffee depended on trailing whitespace, making the file tricky to work with for people whose editor is configured to remove trailing whitespace. The alternative is to use a literal \"\\n\" and escape the line break.\r\n\r\nI suppose this is personal preference, but given the proliferation of tools to remove trailing whitespace it makes sense to not depend on them when there's an alternative.",
    "head_branch": "improve-test-with-whitespace",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4407 from connec/improve-test-with-whitespace\n\nTrivial: Remove trailing whitespace in test/error_messages.coffee"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd273a21fa1e1f1a9f27",
    "number": 4405,
    "body": "*   The browser compiler can once again be built unminified via `MINIFY=false cake build:browser`.\r\n*   The error-prone patched version of `Error.prepareStackTrace` has been removed.\r\n*   Command completion in the REPL (pressing tab to get suggestions) has been fixed for Node 6.9.1+.\r\n*   The [browser-based tests](http://coffeescript.org/v1/test.html) now include all the tests as the Node-based version.\r\n",
    "head_branch": "1.12.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4405 from GeoffreyBooth/1.12.2\n\n1.12.2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd283a21fa1e1f1a9f28",
    "number": 4404,
    "body": "This fixes the empty source file issue.\r\n\r\nAlso related and closes https://github.com/rails/ruby-coffee-script/issues/13\r\n\r\n",
    "head_branch": "fix_empty_source_file",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix empty source file when building with MINIFY=false, closes #4403 (#4404)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd293a21fa1e1f1a9f29",
    "number": 4402,
    "body": "Closes #4397",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix command completion under nodejs v6.9.1 (#4402)\n\n* Fix command completion under nodejs v6.9.1\r\nCloses #4397\r\n\r\n* Commit updated compiled version"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd2a3a21fa1e1f1a9f2a",
    "number": 4401,
    "body": "More improvements to the documentation:\r\n\r\n- All the content is now markdown, compiled into HTML at build/template render time.\r\n- The code examples are compiled into JavaScript at build/template render time, without a step that creates intermediate .js files. The compilation is so fast that the disk writes were slower.\r\n- `index.html` now requires sub-templates, to divide content into relevant sub-files. The build process reassembles everything. The sub-files are mostly inside a `documentation/v1` folder, giving the 2 docs source files a logical place to go.\r\n- `index.html` and `test.html` are now built via separate `cake` tasks, to avoid a gigantic function.\r\n- The browser-based tests run in `test.html` now run _all_ the tests, including `error_messages.coffee`, thanks to a fixed polyfill for `@throw`.",
    "head_branch": "improve-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Docs improvements: content in Markdown, organization into subtemplates, fixed tests (#4401)\n\n* Replace tiny bitmaps with base64-encoded URIs\r\n\r\n* Optimize SVGs; replace logo PNG with SVG\r\n\r\n* Modernize favicon\r\n\r\n* Embed CSS; a bit unorthodox, but we’re a single page so there’s no point in separate .css files and their separate HTTP requests\r\n\r\n* Documentation is now markdown, converted to HTML on compilation\r\n\r\n* Render the examples when we’re rendering index.html; they compile so quickly that there’s no need to pre-render them and save the intermediate .js files\r\n\r\n* Split apart index.html into components that Cakefile assembles, so that we can add in logic to include different files for v1 versus v2\r\n\r\n* Split building index.html and building test.html into two tasks; collapse the parts of `releaseHeader` into one compact function\r\n\r\n* Move include logic into templates\r\n\r\n* Get error messages tests to work in the browser\r\n\r\n* Update output index.html\r\n\r\n* Split body into nav and body\r\n\r\n* Watch subtemplates\r\n\r\n* Revert \"Split body into nav and body\"\r\n\r\nThis reverts commit ec9e559ec0c3f350bd009afd437652347789b180.\r\n\r\n* Add marked\r\n\r\n* Update gitignore\r\n\r\n* Use idiomatic markdown output for code blocks (<pre><code>)\r\n\r\n* Handle ids within the template, not in the Cakefile; remove marked’s auto-generated and conflicting ids\r\n\r\n* Move the `codeFor` function into versioned folders, so that v1 and v2 docs can have different example code blocks/editors\r\n\r\n* Update packages, including new highlight.js which supports our newer keywords and triple backticks (docs output is unchanged)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd2b3a21fa1e1f1a9f2b",
    "number": 4400,
    "body": "We have to include the version number (e.g. 1.12.1) in `package.json`; but there’s no reason to duplicate that anywhere else. We can `require 'package.json'`.",
    "head_branch": "dry-version",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "DRY on the version number: it should be in package.json and nowhere else (#4400)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd2c3a21fa1e1f1a9f2c",
    "number": 4399,
    "body": "to make sure that it never throws. Resolves jashkenas/coffeescript#4391.",
    "head_branch": "issue4391",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4399 from murrayju/issue4391\n\nAdd a try/catch in the Error.prepareStackTrace implementation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd2d3a21fa1e1f1a9f2d",
    "number": 4396,
    "body": "Some modernization before the fork toward the v2 docs. Now everything in the `docs/v1` folder is generated during build, for simplicity. Both v1 and v2 will share the same (updated) favicon files.\r\n\r\n@lydell if you want, I can regenerate the 1.12.1 release with this included if you think I should slip it in. (I probably should, and bump the date.)",
    "head_branch": "improve-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve docs (#4396)\n\n* Replace tiny bitmaps with base64-encoded URIs\r\n\r\n* Optimize SVGs; replace logo PNG with SVG\r\n\r\n* Modernize favicon\r\n\r\n* Embed CSS; a bit unorthodox, but we’re a single page so there’s no point in separate .css files and their separate HTTP requests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd2e3a21fa1e1f1a9f2e",
    "number": 4395,
    "body": "1.12.1, includes #4393 and #4388.",
    "head_branch": "1.12.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4395 from GeoffreyBooth/1.12.1\n\n1.12.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd2f3a21fa1e1f1a9f2f",
    "number": 4393,
    "body": "Per #4390, this should be valid:\r\n```coffee\r\nlines = [\r\n  {from: 0, to: 10}\r\n  {from: 3, to: 17}\r\n]\r\n\r\nfor {from, to} in lines\r\n  console.log from\r\n```\r\nBut it throws an error on thinking that `from` is a keyword. Since `from` has never been a reserved word (outside the context of an `import` or `export` statement), we should try to detect when a `from` on a `for` declaration line is really a keyword or rather a variable identifier.\r\n\r\nI’ve tried to make the detection by looking at the previous token. If the previous token is an identifier itself, like `for a from b` I think that that would mean that the present `from` is always a keyword. If the previous token is `{` or `[` or `,`, then we’re inside destructuring and `from` is always an identifier. If the previous token value is `from`, we have `for from from a` or `for a from from` and the first `from` is an identifier and the second is a keyword.\r\n\r\nAre there any other cases I haven’t thought of?",
    "head_branch": "for-from-when-from-isnt-a-keyword",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Detect when `from` in a `for` loop declaration is an identifier (#4393)\n\n* Try to detect when `from` in a `for` loop declaration is an identifier, not a keyword\r\n\r\n* Handle destructured arrays\r\n\r\n* from as a destructured, aliased object variable name in a for loop declaration"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd2f3a21fa1e1f1a9f30",
    "number": 4388,
    "body": "Closes #4387.\r\n\r\nApparently code like this is not only allowed in ES2015, [it’s common](https://github.com/kimroen/ember-cli-coffeescript/pull/124#issuecomment-263025341):\r\n```js\r\nimport { default } from 'lib';\r\n```\r\nAlthough `import default from 'lib';` is not allowed in ES.\r\n\r\nThis PR allows destructured import (and export-import) of module members named `default`.",
    "head_branch": "import-member-named-default",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4388 from GeoffreyBooth/import-member-named-default\n\nAllow imported module members to be named `default`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd303a21fa1e1f1a9f31",
    "number": 4385,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Runtime should support for...of (#4385)\n\n[Docs] Runtime should support for…of"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd313a21fa1e1f1a9f32",
    "number": 4383,
    "body": "Closes #4380.",
    "head_branch": "escape-template-literals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4383 from GeoffreyBooth/escape-template-literals\n\nEscape backticks and `${` within template literals; fixes #4380"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd323a21fa1e1f1a9f33",
    "number": 4381,
    "body": "@jashkenas @lydell I think we’re ready for 1.12.0.\r\n\r\nBesides the updated `lib` folder, browser compiler, docs, annotated source and change log, I snuck in a few more documentation improvements:\r\n\r\n- [x] Docs examples with quotation marks are fixed. (Try running `tim.age + \" \" + tim.height` on the current http://coffeescript.org.) Now `Cakefile` [properly escapes the quotes](http://stackoverflow.com/a/1082558/223225).\r\n- [x] Eligible HTML entities (basically, anything other than `&`, `<` or `>`) are now written as unicode characters, [a recommended practice](http://stackoverflow.com/a/436637/223225).\r\n- [x] Along those lines, quotation marks in regular text are now curly. Ellipses when used as text and not as splat code are now ellipses characters.\r\n- [x] A link to the browser tests (`test.html`) was added under Resources.",
    "head_branch": "1.12",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4381 from GeoffreyBooth/1.12\n\n[WIP] 1.12.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd333a21fa1e1f1a9f34",
    "number": 4378,
    "body": "This PR gets `test.html` working in the browser again. It had fallen a few years behind how tests were run in `Cakefile`, and over that time many tests started using helper functions from Node’s `assert` that aren’t available in the browser; and `test.html`‘s method of checking for test passes/fails diverged at some point from `Cakefile`‘s, so there were false positives (or incorrect negatives?) in the `test.html` test results. This PR fixes all of this, and refactors `Cakefile` and `test.html` so that shared code is not duplicated. The test for UTF-8 characters in comments (#4375) has been moved from `test.html` into `test/comments.coffee`.\r\n\r\nI didn’t commit any generated files output under `docs` because I don’t want to influence the current docs, so to see this in action after you’ve checked out this branch:\r\n- `cake build:browser`\r\n- `cake doc:site`\r\n- Open `docs/v1/test.html` in a browser (a `file://` link is fine)",
    "head_branch": "fix-browser-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4378 from GeoffreyBooth/fix-browser-tests\n\nFix browser tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd343a21fa1e1f1a9f35",
    "number": 4376,
    "body": "[closure-compiler-js](https://github.com/google/closure-compiler-js) can handle the CS2 input without complaint; and it also produces a compiled browser `.js` file half the size of Uglify.js, so why not use Closure Compiler for both branches?",
    "head_branch": "replace-uglify-js-with-closure-compiler-js",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Replace Uglify.js with Google Closure Compiler, JS version; let NPM finally reformat package.json the way it likes (#4376)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd353a21fa1e1f1a9f36",
    "number": 4375,
    "body": "Closes #4263, which is rather important because `test/test.html` has Japanese characters in a comment and therefore it doesn’t actually run in a browser without this fix 😄",
    "head_branch": "fix-script-unicode",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Browser compiler should convert the string to load to UTF-8, in case it is UTF-16 like the contents of a <script> block generally are (#4375)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd363a21fa1e1f1a9f37",
    "number": 4374,
    "body": "I’m working on the build process for the V2 docs, which will necessitate a flurry of merges into both `master` and `2` to deal with things like paths. The ones I hope are uncontroversial I’m going to simply merge in.",
    "head_branch": "docs-v2-prep",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix path to browser compiler (#4374)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd373a21fa1e1f1a9f38",
    "number": 4373,
    "body": "@lydell This adds `for…from` to the intro. Currently `for…from` is only mentioned in the context of generators, in that section; it’s not mentioned at all in the section on loops. I guess this is okay?",
    "head_branch": "for-from-note",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add `for…from` to list of ES2015 exceptions in the introduction (#4373)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd383a21fa1e1f1a9f39",
    "number": 4372,
    "body": "Docs for https://github.com/jashkenas/coffeescript/pull/4352. Demonstrates use of tagged template literals.",
    "head_branch": "tagged-template-literal-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Docs for tagged template literals (#4372)\n\n* Correct tagged template literal test.\r\n\r\nShould use Coffeescript form of interpolated\r\nstrings, not Javascript!\r\n\r\n* First pass at docs for tagged template literals.\r\n\r\n* Correct alerted variable.\r\n\r\n* Add note re checking runtime for tagged template literals\r\n\r\n* Fixed broken example.\r\n\r\n* Consistent style\r\n\r\n* Clarify that CoffeeScript isn’t handling the tagged template literal, the runtime is; fix CoffeeScript spelling\r\n\r\n* Collapse notes about generator functions and tagged template literals into the same sentence\r\n\r\n* Make tagged template literals example into a function\r\n\r\n* Make text less clunky.\r\n\r\n* More clarity on what CoffeeScript is doing versus what the runtime is doing, and emphasize runtimes vs Babel/Traceur"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd393a21fa1e1f1a9f3a",
    "number": 4371,
    "body": "#4008 is right, we don’t need a version number in bower.json. Make the project easier to maintain with one less place to update stuff.\r\n\r\nhttps://github.com/bower/spec/blob/master/json.md#version",
    "head_branch": "bower.json",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Bower.json per latest spec (#4371)\n\n* Remove moot `version` property from bower.json\r\n\r\nPer bower/bower.json-spec@a325da3\r\n\r\n* No need for bower to know about dev dependencies, and this is one less thing to keep in sync"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd3a3a21fa1e1f1a9f3b",
    "number": 4369,
    "body": "Documentation for #4357. Demonstrates the new triple-backtick syntax, and how to escape backticks and escaped escaped backticks.",
    "head_branch": "backticks-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Docs for triple-backticks and escaping backticks (#4369)\n\n* Documentation for triple backticks and escaping backticks\r\n\r\n* Better explanation of escaped backticks within triple-backticks block"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd3b3a21fa1e1f1a9f3c",
    "number": 4368,
    "body": "Documentation for #4355. This adds documentation for the new `for…from` syntax. I put it in the Bound and Generator Functions section, with a link from the Loops section. I’m open to persuasion that it should go the other way around.\r\n\r\nI also added a [note](https://github.com/GeoffreyBooth/coffeescript/blob/2dc35716478f58318540cc6be6fc44ca1c67620d/documentation/index.html.js#L109) that the CoffeeScript compiler does not, in fact, output JavaScript that can run in every JavaScript runtime. It’s a sad day, I know. But really we should’ve added this note when we added support for generators, and certainly for modules.",
    "head_branch": "for-from-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Docs for `for…from` (#4368)\n\n* Documentation of `for...from` for iterating over generator functions\r\n\r\n* Add note that the CoffeeScript compiler does not, in fact, generate JavaScript that runs in every JavaScript runtime :cry:"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd3c3a21fa1e1f1a9f3d",
    "number": 4367,
    "body": "Miscellaneous improvements to the v1 docs:\r\n\r\nThe generated JavaScript for the examples in the docs ends up within `index.html`, so we don’t need the intermediate generated .js files committed in the repo; also, even while .gitignored they should be under `docs`, with the rest of the generated files, not under `documentation`, where the source files are. Ignoring the generated example files will help avoid merge conflicts between the v1 and v2 docs.\r\n\r\nI found a bug as part of working on that: the `exec` call that was generating those intermediate JavaScript files was happening asynchronously, so it would really take two rounds of `cake doc:site` to get updated examples into the generated `index.html`. I changed `exec` to be synchronous.\r\n\r\nThe existential operator section really should get its own entry in the table of contents. Closes #4361.\r\n\r\nIn “Try CoffeeScript,” if you press the tab key it should type a tab character. Currently it just changes the focus to an HTML element I can’t find, which is clearly “broken” behavior. There was a PR for this, #3342, that I used code from to implement this; plus a touch of CSS to make it pretty. #3342 was closed because people had elaborate plans for implementing CodeMirror, which never happened; until it does, I think the tab key should just work.\r\n\r\nI also updated the output to reflect the newer version of highlight.js. My pull request https://github.com/isagalaev/highlight.js/pull/1357 was accepted, so as soon as that project issues a new release it will support CoffeeScript’s newer keywords.",
    "head_branch": "docs-improvements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Docs improvements (#4367)\n\n* The generated JavaScript for the examples in the docs ends up within index.html, so we don’t need the intermediate generated .js files committed in the repo; also, even while .gitignored they should be under `docs`, with the rest of the generated files, not under `documentation`, where the source files are.\r\n\r\n* Add “Existential Operator” to the table of contents. Closes #4361\r\n\r\n* Updated output due to newer version of highlight.js\r\n\r\n* Generated the JavaScript for the docs examples should be synchronous, so that index.html isn’t generated before the JavaScript is\r\n\r\n* In “Try CoffeeScript,” if you press the tab key it should type a tab character. Closes #3342.\r\n\r\n* Rename doc example folders from `js` and `coffee` to just `examples`\r\n\r\n* Add missing `yield` to the list of keywords to highlight until highlight.js catches up; update the class used to match highlight.js’ `keyword`\r\n\r\n* `cake doc:site` should watch the example files too, not just index.html.js\r\n\r\n* Remove examples folder, including underscore.coffee; remove link to annotated underscore.coffee"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd3d3a21fa1e1f1a9f3e",
    "number": 4365,
    "body": "In CS2, output interpolated strings as template literals.\r\nFollow on work from https://github.com/jashkenas/coffeescript/pull/4352",
    "head_branch": "interpolated-strings-as-template-literals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Output interpolated strings as template literals (#4365)\n\n* Output interpolated strings as template literals.\r\n\r\n* Update comments to use Markdown, so the annotated source reads well; remove TODOs per @lydell’s explanations"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd3d3a21fa1e1f1a9f3f",
    "number": 4363,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Revert to http://coffeescript.org until GitHub pages supports HTTPS for custom domains (#4363)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd3e3a21fa1e1f1a9f40",
    "number": 4360,
    "body": "This moves the generated documentation files into `docs/v1`, with `docs/index.html` symlinked to `docs/v1/index.html`. Static assets like images are moved under `docs/v1`. Generated source is under `docs/v1/annotated-source`. `Cakefile` is updated to save generated files into these new paths. See demo: https://geoffreybooth.github.io/coffeescript/\r\n\r\nOther updates:\r\n* The missing `underscore.html` is now in `docs/v1/annotated-source`. Closes #4295.\r\n* The included jQuery was removed in favor of Google’s hosted version.\r\n* Updated dependencies; removed check for `--harmony` before running generators tests.\r\n* All references to coffeescript.org now say **https**://coffeescript.org.\r\n\r\n@jashkenas Once this is merged in, go to the repo Settings page and under GitHub Pages change Source to `master branch /docs folder` **and** check `Enforce HTTPS`.",
    "head_branch": "branch-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4360 from GeoffreyBooth/branch-docs\n\nReorganize docs for v1/v2 split"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd3f3a21fa1e1f1a9f41",
    "number": 4357,
    "body": "Closes #1504 and #3760. Per [Jeremy’s comment from 2011](https://github.com/jashkenas/coffeescript/issues/1504#issuecomment-1554215), this adds support for “heredoc” JavaScript blocks, e.g.:\r\n\r\n    ```\r\n    var a = 1;\r\n    var b = 2;\r\n    ```\r\n    c = 3\r\n    ```var d = 4;```\r\n    eq a + b + c + d, 10\r\n\r\nEscaped backticks are output as just backticks:\r\n\r\n    ```var e = \\`hello, world${'!'}\\````\r\n    eq e, 'hello, world!'",
    "head_branch": "triple-backticks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Triple backticks to allow creation of JavaScript blocks (#4357)\n\n* Support JavaScript code blocks set apart by triple backticks (``` ... ```)\r\n\r\n* Add test for escaped backticks\r\n\r\n* Remove TODOs for things we’re never going to support\r\n\r\n* Convert escaped backticks to backticks; update tests\r\n\r\n* Block inline JavaScript can end with an escaped backtick character\r\n\r\n* Updated JavaScript token regexes per @lydell\r\n\r\n* In JavaScript blocks, escape backslashes when they immediately precede backticks; additional tests\r\n\r\n* Test that we don’t break backslash escaping in JavaScript literals"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd403a21fa1e1f1a9f42",
    "number": 4356,
    "body": "A simple but slightly more imaginative example of shorthand object notation.\r\n\r\nCloses #1808.",
    "head_branch": "docs-shorthand-object-notation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Docs shorthand object notation (#4356)\n\n* Docs shorthand object notation\r\n\r\nA simple but slightly more imaginative example of shorthand object notation.\r\n\r\nCloses #1808.\r\n\r\nSigned-off-by: Daniel Bayley <daniel.bayley@me.com>\r\n\r\n* Update for new documentation folder structure\r\n\r\n* Fix typo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd413a21fa1e1f1a9f43",
    "number": 4355,
    "body": "Trying to get #4306 over the finish line. There’s one significant change between that PR and this one: I moved the `\"own is not supported in for-from loops\"` test into `error_messages.coffee`, and improved the error message generated for that error.\r\n\r\nPreviously, code like `x for own x from [1, 2, 3]` would throw the above error but with `x` underlined. Since the error is about the `own`, it seems to me that the `own` is what should get emphasized. Getting the location data for the `own` tag (token?) entailed some trickery, though, as that token was basically discarded by the parser. See the new code added to `grammar.coffee` regarding `ownTag`—@lydell, is this kosher? Should I be calling this `ownToken` or something else? Or is there a better way to get this location data into `For`?\r\n\r\nThe other changes since #4306 involve fixing style and minimizing the impact of this PR, removing unnecessary changes.",
    "head_branch": "for-from",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add a `for .. from ..` loop for generators, see #4306, #3832 (#4355)\n\n* Added support for for-from loop, see #3832\r\n\r\n* for-from: remove extra newline and add support for ranges\r\n\r\n* for-from: tidy up the lexer\r\n\r\n* for-from: add support for patterns\r\n\r\n* for-from: fix bad alignment\r\n\r\n* for-from: add two more tests\r\n\r\n* for-from: fix test \"for-from loops over generators\"\r\n\r\nSee explanation here: https://github.com/jashkenas/coffeescript/pull/4306#issuecomment-257066877\r\n\r\n* for-from: delete leftover console.log\r\n\r\n* Refactor the big `if` block in the lexer to be as minimal a change from `master` as we can get away with\r\n\r\n* Cleanup to make more idiomatic, remove trailing whitespace, minor performance improvements\r\n\r\n* for-from: move code from one file to another\r\n\r\n* for-from: clean up whitespace\r\n\r\n* for-from: lexer bikeshedding\r\n\r\n* Move \"own is not supported in for-from loops\" test into error_messages.coffee; improve error message so that \"own\" is underlined\r\n\r\n* Revert unnecessary changes, to minimize the lines of code modified by this PR"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd423a21fa1e1f1a9f44",
    "number": 4354,
    "body": "OK, I've pushed what I believe is a more-or-less \"ready\" version of classes. I've adopted a similar approach to the previous PR, whereby valid methods are hoisted into an ES2015 class declaration, and other expressions are left as-is. I've also made it so that classes are compiled \"bare\", without an enclosing IIFE, where possible.\r\n\r\nI've standardised the hoisting thing a little bit. `hoist` is now a method on `Base`, meaning any node can be hoisted. Calling `hoist` mutates the source node and returns a new target node, which should be put in the tree at the desired output location. When the target is compiled, it returns a fragments placeholder. When the source is compiled, it updates the target's fragments. Finally, `Block#compileRoot` will expand all placeholder fragments before returning the result.\r\n\r\nI've not touched `super` outside constructors as that adds quite a bit of surface area and would be better handled separately, imo. The downside of this is that, for now, derived classes always need an enclosing IIFE. Handling `super` is something I'd be happy to look at as a subsequent PR, unless someone else wants to tackle it.\r\n\r\nThere is one remaining annoyance, which is the assignment. This is needed to allow `Literal` to be referenced in the second example below (and throughout the CS source). We could remove this, which would mean that classes created in expressions can only be referenced by the result of the expression (e.g. `exports.Foo = class Foo` could only be referenced as `exports.Foo`). I've erred on the side of compatibility for now, as it's easy to take this out later if we so choose.\r\n\r\nI've not added any test, the following would be good to have. Any test contributions would be great.\r\n\r\n- `@` params with/without `super`, including errors\r\n- bound functions with/without `super`, including errors\r\n- `super` in arrow functions in constructors\r\n- `super` and external constructors\r\n- ... any more anyone can think of\r\n\r\nAs a final note, the diff looks fairly large as I ended up rewriting the `Class` node, however a lot of the logic hasn't changed, its just been moved around to better line-up with the new usage of the node. I felt this was better than continuing to stretch the previous `Class` out of shape. Apologies to reviewers.\r\n\r\n<table>\r\n<tr>\r\n<td valign='top'>\r\n<pre lang='coffee'>\r\nclass Polygon\r\n  constructor: (@height, @width) ->\r\n<br>\r\n  area: ->\r\n    @calcArea()\r\n<br>\r\n  calcArea: ->\r\n    @height * @width\r\n</pre>\r\n</td>\r\n<td>\r\n<pre lang='js'>\r\nvar Polygon;\r\n<br>\r\nPolygon = class Polygon {\r\n  constructor(height, width) {\r\n    this.height = height;\r\n    this.width = width;\r\n  }\r\n<br>\r\n  area() {\r\n    return this.calcArea();\r\n  }\r\n<br>\r\n  calcArea() {\r\n    return this.height * this.width;\r\n  }\r\n<br>\r\n};\r\n</pre>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td valign='top'><pre lang='coffee'>\r\nexports.Literal = class Literal extends Base\r\n  constructor: (@value) ->\r\n<br>\r\n  compileNode: (o) ->\r\n    super\r\n</pre></td>\r\n<td><pre lang='js'>\r\nvar Literal;\r\n<br>\r\nexports.Literal = Literal = (function(superClass) {\r\n  class Literal extends superClass {\r\n    constructor(value) {\r\n      super(...arguments);\r\n      this.value = value;\r\n    }\r\n<br>\r\n    compileNode(o) {\r\n      return Literal.__super__.compileNode.call(this, ...arguments);\r\n    }\r\n<br>\r\n  };\r\n<br>\r\n  Literal.__super__ = superClass.prototype;\r\n<br>\r\n  return Literal;\r\n<br>\r\n})(Base);\r\n</pre></td>\r\n</tr>\r\n<tr>\r\n<td valign='top'><pre lang='coffee'>\r\nclass Animal\r\n  constructor: (@name) ->\r\n<br>\r\n  move: (meters) ->\r\n    alert @name + \" moved #{meters}m.\"\r\n<br>\r\nclass Snake extends Animal\r\n  move: ->\r\n    alert \"Slithering...\"\r\n    super 5\r\n<br>\r\nclass Horse extends Animal\r\n  move: ->\r\n    alert \"Galloping...\"\r\n    super 45\r\n<br>\r\nsam = new Snake \"Sammy the Python\"\r\ntom = new Horse \"Tommy the Palomino\"\r\n<br>\r\nsam.move()\r\ntom.move()\r\n</pre></td>\r\n<td><pre lang='js'>\r\n// Generated by CoffeeScript 2.0.0-alpha\r\nvar Animal, Horse, Snake, sam, tom;\r\n<br>\r\nAnimal = class Animal {\r\n  constructor(name) {\r\n    this.name = name;\r\n  }\r\n<br>\r\n  move(meters) {\r\n    return alert(this.name + (\" moved \" + meters + \"m.\"));\r\n  }\r\n<br>\r\n};\r\n<br>\r\nSnake = (function(superClass) {\r\n  class Snake extends superClass {\r\n    move() {\r\n      alert(\"Slithering...\");\r\n      return Snake.__super__.move.call(this, 5);\r\n    }\r\n<br>\r\n  };\r\n<br>\r\n  Snake.__super__ = superClass.prototype;\r\n<br>\r\n  return Snake;\r\n<br>\r\n})(Animal);\r\n<br>\r\nHorse = (function(superClass) {\r\n  class Horse extends superClass {\r\n    move() {\r\n      alert(\"Galloping...\");\r\n      return Horse.__super__.move.call(this, 45);\r\n    }\r\n<br>\r\n  };\r\n<br>\r\n  Horse.__super__ = superClass.prototype;\r\n<br>\r\n  return Horse;\r\n<br>\r\n})(Animal);\r\n<br>\r\nsam = new Snake(\"Sammy the Python\");\r\n<br>\r\ntom = new Horse(\"Tommy the Palomino\");\r\n<br>\r\nsam.move();\r\n<br>\r\ntom.move();\r\n</pre></td>\r\n</tr>\r\n</table>\r\n\r\nSupersedes #4330.",
    "head_branch": "es2015-classes-new",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Compile class constructors to ES2015 classes (#4354)\n\n* Compile classes to ES2015 classes\r\n\r\nRather than compiling classes to named functions with prototype and\r\nclass assignments, they are now compiled to ES2015 class declarations.\r\n\r\nBackwards compatibility has been maintained by compiling ES2015-\r\nincompatible properties as prototype or class assignments. `super`\r\ncontinues to be compiled as before.\r\n\r\nWhere possible, classes will be compiled \"bare\", without an enclosing\r\nIIFE. This is possible when the class contains only ES2015 compatible\r\nexpressions (methods and static methods), and has no parent (this last\r\nconstraint is a result of the legacy `super` compilation, and could be\r\nremoved once ES2015 `super` is being used). Classes are still assigned\r\nto variables to maintain compatibility for assigned class expressions.\r\n\r\nThere are a few changes to existing functionality that could break\r\nbackwards compatibility:\r\n\r\n- Derived constructors that deliberately don't call `super` are no\r\n  longer possible. ES2015 derived classes can't use `this` unless the\r\n  parent constructor has been called, so it's now called implicitly when\r\n  not present.\r\n\r\n- As a consequence of the above, derived constructors with @ parameters\r\n  or bound methods and explicit `super` calls are not allowed. The\r\n  implicit `super` must be used in these cases.\r\n\r\n* Add tests to verify class interoperability with ES\r\n\r\n* Refactor class nodes to separate executable body logic\r\n\r\nLogic has been redistributed amongst the class nodes so that:\r\n\r\n- `Class` contains the logic necessary to compile an ES class\r\n  declaration.\r\n- `ExecutableClassBody` contains the logic necessary to compile CS'\r\n  class extensions that require an executable class body.\r\n\r\n`Class` still necessarily contains logic to determine whether an\r\nexpression is valid in an ES class initializer or not. If any invalid\r\nexpressions are found then `Class` will wrap itself in an\r\n`ExecutableClassBody` when compiling.\r\n\r\n* Rename `Code#static` to `Code#isStatic`\r\n\r\nThis naming is more consistent with other `Code` flags.\r\n\r\n* Output anonymous classes when possible\r\n\r\nAnonymous classes can be output when:\r\n\r\n- The class has no parent. The current super compilation needs a class\r\n  variable to reference. This condition will go away when ES2015 super\r\n  is in use.\r\n- The class contains no bound static methods. Bound static methods have\r\n  their context set to the class name.\r\n\r\n* Throw errors at compile time for async or generator constructors\r\n\r\n* Improve handling of anonymous classes\r\n\r\nAnonymous classes are now always anonymous. If a name is required (e.g.\r\nfor bound static methods or derived classes) then the class is compiled\r\nin an `ExecutableClassBody` which will give the anonymous class a stable\r\nreference.\r\n\r\n* Add a `replaceInContext` method to `Node`\r\n\r\n`replaceInContext` will traverse children looking for a node for which\r\n`match` returns true. Once found, the matching node will be replaced by\r\nthe result of calling `replacement`.\r\n\r\n* Separate `this` assignments from function parameters\r\n\r\nThis change has been made to simplify two future changes:\r\n\r\n1. Outputting `@`-param assignments after a `super` call.\r\n   In this case it is necessary that non-`@` parameters are available\r\n   before `super` is called, so destructuring has to happen before\r\n   `this` assignment.\r\n2. Compiling destructured assignment to ES6\r\n   In this case also destructuring has to happen before `this`,\r\n   as destructuring can happen in the arguments list, but `this`\r\n   assignment can not.\r\n\r\nA bonus side-effect is that default values for `@` params are now output\r\nas ES6 default parameters, e.g.\r\n\r\n    (@a = 1) ->\r\n\r\nbecomes\r\n\r\n    function a (a = 1) {\r\n      this.a = a;\r\n    }\r\n\r\n* Change `super` handling in class constructors\r\n\r\nInside an ES derived constructor (a constructor for a class that extends\r\nanother class), it is impossible to access `this` until `super` has been\r\ncalled. This conflicts with CoffeeScript's `@`-param and bound method\r\nfeatures, which compile to `this` references at the top of a function\r\nbody. For example:\r\n\r\n    class B extends A\r\n      constructor: (@param) -> super\r\n      method: =>\r\n\r\nThis would compile to something like:\r\n\r\n    class B extends A {\r\n      constructor (param) {\r\n        this.param = param;\r\n        this.method = bind(this.method, this);\r\n        super(...arguments);\r\n      }\r\n    }\r\n\r\nThis would break in an ES-compliant runtime as there are `this`\r\nreferences before the call to `super`. Before this commit we were\r\ndealing with this by injecting an implicit `super` call into derived\r\nconstructors that do not already have an explicit `super` call.\r\nFurthermore, we would disallow explicit `super` calls in derived\r\nconstructors that used bound methods or `@`-params, meaning the above\r\nexample would need to be rewritten as:\r\n\r\n    class B extends A\r\n      constructor: (@param) ->\r\n      method: =>\r\n\r\nThis would result in a call to `super(...arguments)` being generated as\r\nthe first expression in `B#constructor`.\r\n\r\nWhilst this approach seems to work pretty well, and is arguably more\r\nconvenient than having to manually call `super` when you don't\r\nparticularly care about the arguments, it does introduce some 'magic'\r\nand separation from ES, and would likely be a pain point in a project\r\nthat made use of significant constructor overriding.\r\n\r\nThis commit introduces a mechanism through which `super` in constructors\r\nis 'expanded' to include any generated `this` assignments, whilst\r\nretaining the same semantics of a super call. The first example above\r\nnow compiles to something like:\r\n\r\n    class B extends A {\r\n      constructor (param) {\r\n        var ref\r\n        ref = super(...arguments), this.param = param, this.method = bind(this.method, this), ref;\r\n      }\r\n   }\r\n\r\n* Improve `super` handling in constructors\r\n\r\nRather than functions expanding their `super` calls, the `SuperCall`\r\nnode can now be given a list of `thisAssignments` to apply when it is\r\ncompiled.\r\n\r\nThis allows us to use the normal compiler machinery to determine whether\r\nthe `super` result needs to be cached, whether it appears inline or not,\r\netc.\r\n\r\n* Fix anonymous classes at the top level\r\n\r\nAnonymous classes in ES are only valid within expressions. If an\r\nanonymous class is at the top level it will now be wrapped in\r\nparenthses to force it into an expression.\r\n\r\n* Re-add Parens wrapper around executable class bodies\r\n\r\nThis was lost in the refactoring, but it necessary to ensure\r\n`new class ...` works as expected when there's an executable body.\r\n\r\n* Throw compiler errors for badly configured derived constructors\r\n\r\nRather than letting them become runtime errors, the following checks are\r\nnow performed when compiling a derived constructor:\r\n\r\n- The constructor **must** include a call to `super`.\r\n- The constructor **must not** reference `this` in the function body\r\n  before `super` has been called.\r\n\r\n* Add some tests exercising new class behaviour\r\n\r\n- async methods in classes\r\n- `this` access after `super` in extended classes\r\n- constructor super in arrow functions\r\n- constructor functions can't be async\r\n- constructor functions can't be generators\r\n- derived constructors must call super\r\n- derived constructors can't reference `this` before calling super\r\n- generator methods in classes\r\n- 'new' target\r\n\r\n* Improve constructor `super` errors\r\n\r\nAdd a check for `super` in non-extended class constructors, and\r\nexplicitly mention derived constructors in the \"can't reference this\r\nbefore super\" error.\r\n\r\n* Fix compilation of multiple `super` paths in derived constructors\r\n\r\n`super` can only be called once, but it can be called conditionally from\r\nmultiple locations. The chosen fix is to add the `this` assignments to\r\nevery super call.\r\n\r\n* Additional class tests, added as a separate file to simplify testing and merging.\r\nSome methods are commented out because they currently throw and I'm not sure how\r\nto test for compilation errors like those.\r\n\r\nThere is also one test which I deliberately left without passing, `super` in an external prototype override.\r\nThis test should 'pass' but is really a variation on the failing `super only allowed in an instance method`\r\ntests above it.\r\n\r\n* Changes to the tests. Found bug in super in prototype method. fixed.\r\n\r\n* Added failing test back in, dealing with bound functions in external prototype overrides.\r\n\r\n* Located a bug in the compiler relating to assertions and escaped ES6 classes.\r\n\r\n* Move tests from classes-additional.coffee into classes.coffee; comment out console.log\r\n\r\n* Cleaned up tests and made changes based on feedback.  Test at the end still has issues, but it's commented out for now.\r\n\r\n* Make HoistTarget.expand recursive\r\n\r\nIt's possible that a hoisted node may itself contain hoisted nodes (e.g.\r\na class method inside a class method). For this to work the hoisted\r\nfragments need to be expanded recursively.\r\n\r\n* Uncomment final test in classes.coffee\r\n\r\nThe test case now compiles, however another issue is affecting the test\r\ndue to the error for `this` before `super` triggering based on source\r\norder rather than execution order. These have been commented out for\r\nnow.\r\n\r\n* Fixed last test TODOs in test/classes.coffee\r\n\r\nTurns out an expression like `this.foo = super()` won't run in JS as it\r\nattempts to lookup `this` before evaluating `super` (i.e. throws \"this\r\nis not defined\").\r\n\r\n* Added more tests for compatability checks, statics, prototypes and ES6 expectations.  Cleaned test \"nested classes with super\".\r\n\r\n* Changes to reflect feedback and to comment out issues that will be addressed seperately.\r\n\r\n* Clean up test/classes.coffee\r\n\r\n- Trim trailing whitespace.\r\n- Rephrase a condition to be more idiomatic.\r\n\r\n* Remove check for `super` in derived constructors\r\n\r\nIn order to be usable at runtime, an extended ES class must call `super`\r\nOR return an alternative object. This check prevented the latter case,\r\nand checking for an alternative return can't be completed statically\r\nwithout control flow analysis.\r\n\r\n* Disallow 'super' in constructor parameter defaults\r\n\r\nThere are many edge cases when combining 'super' in parameter defaults\r\nwith @-parameters and bound functions (and potentially property\r\ninitializers in the future).\r\n\r\nRather than attempting to resolve these edge cases, 'super' is now\r\nexplicitly disallowed in constructor parameter defaults.\r\n\r\n* Disallow @-params in derived constructors without 'super'\r\n\r\n@-parameters can't be assigned unless 'super' is called."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd433a21fa1e1f1a9f45",
    "number": 4353,
    "body": "Rather than compiling splats to arrays built using `Array#concat`, splats are now compiled directly to ES2015 splats, e.g.\r\n\r\n```coffee\r\nf foo, arguments..., bar\r\n[ foo, arguments..., bar ]\r\n```\r\n\r\nWhich used to be compiled to:\r\n\r\n```js\r\nf.apply(null, [foo].concat(slice.call(arguments), [bar]));\r\n[foo].concat(slice.call(arguments), [bar]);\r\n```\r\n\r\nIs now compiled to:\r\n\r\n```js\r\nf(foo, ...arguments, bar);\r\n[ foo, ...arguments, bar ];\r\n```\r\n\r\nThis was really easy to implement, and mostly involved deleting code. No tests were broken, and I can't think of any extra tests to add.",
    "head_branch": "es2015-splats",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Compile splats in arrays and function calls to ES2015 splats (#4353)\n\nRather than compiling splats to arrays built using `Array#concat`, splats\r\nare now compiled directly to ES2015 splats, e.g.\r\n\r\n    f foo, arguments..., bar\r\n\r\n    [ foo, arguments..., bar ]\r\n\r\nWhich used to be compiled to:\r\n\r\n    f.apply(null, [foo].concat(slice.call(arguments), [bar]));\r\n\r\n    [foo].concat(slice.call(arguments), [bar]);\r\n\r\nIs now compiled to:\r\n\r\n    f(foo, ...arguments, bar);\r\n\r\n    [ foo, ...arguments, bar ];"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd443a21fa1e1f1a9f46",
    "number": 4352,
    "body": "Tested implementation of tagged template literals, as defined at: https://github.com/coffeescript6/discuss/issues/28#issuecomment-247861027\r\n\r\nFor CS2, we also get interpolated strings outputting as ES6 template literals. This fell out of the tagged template literal work.\r\n\r\n",
    "head_branch": "tagged-template-literals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "CS1 tagged template literals (and CS2 interpolated strings as template literals) (#4352)\n\n* Add initial support for template literals with no\r\ninterpolation\r\n\r\n* Change ‘unexpected string’ error message tests to\r\nuse number not identifier prefix.\r\n\r\nIdentifer prefixes are now valid as tagged\r\ntemplate literals\r\n\r\n* Test tagged template literals for non-interpolated\r\nstrings and tag function.\r\n\r\n* Tagged template literals work for pure Strings.\r\n\r\nPull tagged template definition up to Invocation\r\nlevel in grammar, enabling chained invocation calls.\r\n\r\nWe can view a tagged template is a special form\r\nof function call.\r\n\r\n* Readying for StringWithInterpolations work.\r\n\r\n* Tweaks.\r\n\r\n* Fix style\r\n\r\n* Pass StringWithInterpolations parameter straight\r\ninto Call constructor.\r\n\r\nStringWithInterpolations will be output as\r\ntemplate literal, so already in correct form for\r\noutputting tagged template literal.\r\n\r\n* Strip down compileNode for StringWithInterpolations\r\n\r\n* Done StringLiteral case for interpolated Strings\r\n\r\n* Remove need for TemplateLiteral\r\n\r\n* Simplify code.\r\n\r\n* Small code tidy\r\n\r\n* Interpolated strings now outputting as template literals.\r\n\r\nStill needs comprehensive testing.\r\n\r\n* Move error message tests into error_messages.coffee; remove test that is testing for a Node runtime error\r\n\r\n* Split up tests that were testing multiple things per test, so that each test tests only one thing\r\n\r\n* Edge cases: tagged template literals containing interpolated strings or even internal tagged template literals\r\n\r\n* Make more concise, more idiomatic style\r\n\r\n* Pull back extreme indentation\r\n\r\n* Restore and fix commented-out tests\r\n\r\n* Edge case: tagged template literal with empty string\r\n\r\n* Only use new ES2015 interpolated string syntax if we’re inside a tagged template literal; this keeps this PR safe to merge into CoffeeScript 1.x. Remove the code from this commit to make all interpolated strings use ES2015 syntax, for CoffeeScript 2.\r\n\r\n* Compiler now _doesn’t_ use template literals.\r\n\r\n* Expand tagged template literal tests\r\n\r\n* Move ‘Unexpected string’ error message tests into\r\ntagged template literal section.\r\n\r\n‘Unexpected string’ is not reported in these test\r\nscenarios anymore. Instead, we error that the\r\nprefixing literal is not a function.\r\n\r\n* Don’t unwrap StringWithInterpolations.\r\n\r\nSaw bug with program consisting of “#{2}” not\r\ncompiling with template literals. Root cause was\r\nthat Block.compileNode was unwrapping interpolated\r\nstring and so didn’t use compileNode logic at\r\nStringWithInterpolations level.\r\n\r\n* No need to bracket interpolated strings any more.\r\n\r\nWhen interpolated string looks like `hello ${2}`,\r\nno extract brackets are needed, as the `s mark the\r\nbeginning and end.\r\n\r\n* Show html templating with tagged template literals\r\n\r\n* Multiline should match multiline\r\n\r\n* Comment out unnecessary `unwrap`, which is only needed for CoffeeScript 2 all-ES2015 syntax output"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd453a21fa1e1f1a9f47",
    "number": 4351,
    "body": "Added async function documentation as suggested by @GeoffreyBooth, and fixed a documentation generation bug.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "keeping it simple"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd463a21fa1e1f1a9f48",
    "number": 4350,
    "body": "This is an upstream port of https://github.com/decaffeinate/coffeescript/pull/10\r\nSee that PR for links to the issues that this fixes.\r\n\r\nJust like OUTDENT and CALL_END tokens, close-curly-brace tokens can be generated\r\nwithout having a real location, and if that position overlaps with a later\r\ntoken, it can cause the AST to have bad location data. Just like the other two\r\ntoken types, we now give `}` tokens the position of the previous real token,\r\nwhich makes all AST nodes have reasonable locations.\r\n\r\nSee #4296 for more context.",
    "head_branch": "upstream-fix-generated-close-curly-location",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4350 from alangpierce/upstream-fix-generated-close-curly-location\n\nInclude generated } tokens when fixing closing token positions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd473a21fa1e1f1a9f49",
    "number": 4348,
    "body": "Hi, I've just hooked up coffee-coverage into coffee compiler itself to enable self-coverage as a proof of concept.\r\n\r\nIndeed, this is very rough implementation (I've shamelessly just deleted some misbehaving test files and added hideous api just to work..). But it's mostly working fine. I've attached the result screenshots.\r\n\r\nI think test coverage is a good thing for quality source code, so I want a good coverage support for CoffeeScript. Thereby, I'm trying to make it a first-class citizen by enabling it for the CoffeeScript itself (i.e., self-coverage akin to self-compile)!\r\n\r\nIf we can agree with this view, I'm happily invest some time for finishing it up! :)\r\n\r\nhttps://github.com/benbria/coffee-coverage/pull/81\r\n",
    "head_branch": "coffee-self-coverage",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd483a21fa1e1f1a9f4a",
    "number": 4347,
    "body": "@GeoffreyBooth To address your JS interoperability concerns in #3757, this PR enables usage of CS-only keywords as local names in import lists and as any name in export lists. This will enable people to do the following\n\n``` js\n// now possible\nimport {unless as someLocalName} from 'foo'\n\n// but not\nimport {someImportedName as unless} from 'bar'\n\n// for exports CS keywords are allowed everywhere\nexport {someLocalVar as unless}\nexport {unless, loop as until} from 'baz'\n```\n",
    "head_branch": "es-modules",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Selectively ignore CS-only keywords in ES imports and exports (#4347)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd493a21fa1e1f1a9f4b",
    "number": 4346,
    "body": "## CoffeeTags\n- tiny addition (just 27 lines total) to the native CoffeeScript compiler for rendering HTML\n- most useful with projects like Vuejs or React, but can be used by many others\n- no new language or syntax to learn, just use all the power of normal CoffeeScript\n- resembles HTML, but is actually active/executable code\n- doesn't mess with CoffeeScript syntax, takes a previously invalid syntax and makes it legal\n- doesn't require tags to be closed, uses indentation level to determine\n- doesn't require tags to be predeclared to use (no more `{div, table, th, tr} = React.DOM`)\n- allows selector-like syntax for tags (e.g. - `<div.active@menu>` yields `<div class=\"active\" id=\"menu\">`\n- allows naked tags (e.g. - you don't have to type `div()`, you can just use `<div>`)\n- allows raw HTML using a trailing exclamation point in the tag name (e.g. - `<span.note!> \"Note: #{text}\"`)\n- allows default tag name of `div` (i.e. - `<>`, `<.note>`, and `<.active@sidebar!>` are all valid)\n- allows reserved words to be used as attributes (no more using `className: 'foo'`)\n- allows attributes to be skipped (no more using `div null, \"Hello\"`)\n- allows children to be passed as a list without having to pass them as an explicit array\n- allows the first argument to indicate if the tag should be skipped (via truthy Boolean or Number)\n- invokes a render function (by convention, 'h') to process tags for the target framework (React, Vue, etc.)\n- a companion helper for Vuejs is found at https://github.com/vuejs/vue/pull/4016\n- TODO: allows dynamic tags (e.g. - <`\"h#{ level }\">` can produce `<h3>`)\n- TODO: allows closing tags (they are ignored, but might help some with readability)\n### Example\n#### CoffeeScript source\n\n``` coffee\nrender: (h) ->\n  <table.active.fixed@inbox>\n    <tr>\n      <th> 'From'\n      <th> 'Subject'\n      <th> 'Received'\n    for item in @list\n      <tr> class:item.tags,\n        <td> <p> item.from\n        <td> item.subj\n        <td> <p> item.date\n```\n#### CoffeeScript output\n\n``` javascript\nrender: function(h) {\n  var item;\n  return h('table.active.fixed@inbox', h('tr', h('th', 'From'), h('th', 'Subject'), h('th', 'Received')), (function() {\n    var i, len, ref, results;\n    ref = this.list;\n    results = [];\n    for (i = 0, len = ref.length; i < len; i++) {\n      item = ref[i];\n      results.push(h('tr', {\n        \"class\": item.tags\n      }, h('td', h('p', item.from)), h('td', item.subj), h('td', h('p', item.date))));\n    }\n    return results;\n  }).call(this));\n}\n```\n#### An example component (this one uses VueJS)\n\nIt's important to note that, just by adding a new legal token to `CoffeeScript`, this is totally valid `CoffeeScript` code (ie - there is no \"transformation\" step, it's just \"normal\" `CoffeeScript` source):\n\n![messages coffee lite 2016-10-23 00-48-13](https://cloud.githubusercontent.com/assets/142875/19624249/74a5387c-98ba-11e6-8e38-8c7767931ce5.png)\n",
    "head_branch": "coffee-tags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd4a3a21fa1e1f1a9f4c",
    "number": 4345,
    "body": "I merged the #3924 pull request onto the `2` branch and updated it slightly, to [fix #3924’s inability to work in browsers](https://github.com/jashkenas/coffeescript/pull/3924#issuecomment-255548485) and to [replace a magic string with a generated one that we check for uniqueness](https://github.com/jashkenas/coffeescript/pull/3924#issuecomment-255560738). This fixes #4336 (the bug introduced by #4313).\n\nPer #3924, this uses the `marked` library to detect Markdown within `.litcoffee` files, to avoid false-positive markdown matches by the CoffeeScript compiler. The reason #3924 was never merged was because it introduced a non-development dependency, `marked`, which meant that the browser version of the CoffeeScript compiler was broken. I updated `Cakefile` to include `node_modules/marked/lib/marked.js` as part of the browser build, so now the browser compiler works with #3924. This immediately makes the browser version of CoffeeScript 20K larger, but I don’t think anyone’s using the browser version of CoffeeScript outside of testing environments like http://coffeescript.org/#try or http://js2.coffee/ so it probably doesn’t matter.\n\nWhat do you all think? This at least fixes the broken test that plagues the `2` branch, is it worth merging into `master` as well?\n",
    "head_branch": "fix-litcoffee",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix tabbed Literate CoffeeScript (#4345)\n\n* failing test case\r\n\r\n* add markdown parser for literate coffeescript\r\n\r\nthis should help to handle ligitimate markdown with indentation correctly\r\n\r\n* Update generated code\r\n\r\n* Update package.json\r\n\r\n* Add `marked` dependency to browser version of CoffeeScript\r\n\r\n* Update invertLiterate to use a randomly-generated token that we check for uniqueness, rather than a magic number that we hope might not occur in the code\r\n\r\n* Fix typos"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd4b3a21fa1e1f1a9f4d",
    "number": 4344,
    "body": "This is an upstream port of https://github.com/decaffeinate/coffeescript/pull/9\n\nThe existing logic for computing the end location of a string was to take the\nend of the string contents, then add the delimiter length to last_column. For\nexample, `\"\"\"abc\"\"\"` would have an end position three characters after the `c`.\nHowever, if a string ended in a newline, then the end location for the string\ncontents would be one line above the end location for the string, so the proper\nfix is to move the end location to the next line, not just to shift it to the\nright.\n\nThis avoids a bug where the location data would sometimes reference a\nnon-existent location (one past the end of its line). It fixes the AST location\ndata, although as far as I know, it never has caused correctness issues in the\nCoffeeScript output.\n",
    "head_branch": "upstream-fix-multiline-string-location",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Properly set location for string tokens ending in a newline (#4344)\n\nThis is an upstream port of https://github.com/decaffeinate/coffeescript/pull/9\r\n\r\nThe existing logic for computing the end location of a string was to take the\r\nend of the string contents, then add the delimiter length to last_column. For\r\nexample, `\"\"\"abc\"\"\"` would have an end position three characters after the `c`.\r\nHowever, if a string ended in a newline, then the end location for the string\r\ncontents would be one line above the end location for the string, so the proper\r\nfix is to move the end location to the next line, not just to shift it to the\r\nright.\r\n\r\nThis avoids a bug where the location data would sometimes reference a\r\nnon-existent location (one past the end of its line). It fixes the AST location\r\ndata, although as far as I know, it never has caused correctness issues in the\r\nCoffeeScript output."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd4c3a21fa1e1f1a9f4e",
    "number": 4341,
    "body": "Node 6 [deprecated `new Buffer` in favor of `Buffer.from` and `Buffer.alloc`](https://nodejs.org/api/buffer.html#buffer_buffer_from_buffer_alloc_and_buffer_allocunsafe). This PR updates our calls to `Buffer` to use the new syntax. As a result of that, I also set the required version of Node per `package.json` to be >= 6.9.1, and set the overall version of the project to be 2.0.0-alpha for now.\n",
    "head_branch": "buffer-deprecations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Require Node 6.9.1+ (#4341)\n\n* Node 6 deprecated `new Buffer` in favor of `Buffer.from` and `Buffer.alloc`; update our calls, and set the required version of Node to be >= 6.9.0, and set this to be 2.0.0-alpha for now\r\n\r\n* Bump to Node version 6.9.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd4c3a21fa1e1f1a9f4f",
    "number": 4340,
    "body": "Node 7-nightly throws deprecation warnings when calling `fs` non-`Sync` functions without callbacks, for example `fs.close fd` instead of `fs.closeSync fd`. We always want the synchronous versions, so we should just call the *`Sync` methods in the first place.\n\nAs far as I know this should be backward-compatible through ancient versions of Node, so I’m submitting this against `master`. I couldn’t get Node 0.8.0 to run on my machine, but I tested this in both 0.12.17 and 6.9.0 and in each version the code built and the tests pass.\n",
    "head_branch": "node-deprecations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4340 from GeoffreyBooth/node-deprecations\n\nCall synchronous `fs` methods using the `Sync` variants"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd4d3a21fa1e1f1a9f50",
    "number": 4339,
    "body": "See [this comment](https://github.com/jashkenas/coffeescript/pull/4300#pullrequestreview-4370786).\n\nWe had a test for making sure the compiler wasn’t allowing `export class` (without a name given for the class) but it was a poorly written test, and wasn’t actually checking that the export wasn’t happening. The error message it was checking for was actually getting thrown by the Node runtime (for not understanding the `export` keyword) rather than checking that anonymous classes can’t be exported.\n\nI added a check in `nodes.coffee` that exported classes have names, and I fixed the test.\n",
    "head_branch": "fix-export-anonymous-class",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4339 from GeoffreyBooth/fix-export-anonymous-class\n\nDisallow exporting anonymous classes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd4e3a21fa1e1f1a9f51",
    "number": 4338,
    "body": "This is a fairly small change that simplifies the code generation for computed properties as they're now generated in the object initializer like regular properties.\n\nI ended up doing this whilst working on fully switching to ES2015 splats. Targets the `2` branch since the output won't compile without ES2015 support.\n- [x] Tests pass (excepting #4336)\n- [x] Compiles the CoffeeScript code base without modifications\n- [ ] Compiles a codebase making significant use of computed keys - any suggestions?\n",
    "head_branch": "es2015-dynamic-keys",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Compile computed properties to ES2015 equivalent (#4338)\n\n* Add missing compiled files\r\n\r\n* Compile computed properties to ES2015 equivalent\r\n\r\nThis is a fairly small change that simplifies the code generation for computed\r\nproperties as they're now generated in the object initializer like regular\r\nproperties."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd4f3a21fa1e1f1a9f52",
    "number": 4335,
    "body": "This is an upstream port for the patch https://github.com/decaffeinate/coffeescript/pull/8\n\nSee https://github.com/decaffeinate/decaffeinate/issues/291 for the bug that this fixed.\n\nFor the most part, CoffeeScript and JavaScript have the same precedence rules,\nbut in some cases, the intermediate AST format didn't represent the actual\nevaluation order. For example, in the expression `a or b and c`, the `and` is\nevaluated first, but the parser treated the two operators with equal precedence.\nThis was still correct end-to-end because CoffeeScript simply emitted the result\nwithout parens, but any intermediate tools using the CoffeeScript parser could\nbecome confused.\n\nHere are the JS operator precedence rules:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\n\nFor the most part, CoffeeScript already follows these. `COMPARE` operators\nalready behave differently due to chained comparisons, so I think we don't need\nto worry about following JS precedence for those. So I think the only case where\nit was behaving differently in an important way was for the binary/bitwise\noperators that are being changed here.\n\nAs part of this change, I also introduced a new token tag, `BIN?`, for the\nbinary form of the `?` operator.\n",
    "head_branch": "fix-operator-precedence",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4335 from alangpierce/fix-operator-precedence\n\nDefine proper operator precedence for bitwise/logical operators"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd503a21fa1e1f1a9f53",
    "number": 4330,
    "body": "I started looking at adding some tests for executable class bodies to check for regressions when we begin to compile ES2015 classes, and I ended up writing an implementation. Sorry if this clashes with anyone else's work for https://github.com/coffeescript6/discuss/issues/22.\n\nThis is some unfinished, work in progress changes to compile CoffeeScript classes into ES2015 classes. I've only committed the source files, so if y ou want to run it you'll need to `cake build && cake build:parser`.\n\nThe compiler successfully self hosts, however **THERE ARE DEFINITELY A LOT OF BUGS AND THE CODE IS NOT PRETTY**. It might be useful as prior art and/or to resolve some discussions on how CS should proceed with ES2015 classes.\n\nI tried not to remove any CS functionality, including executable class bodies, soaked super invocations, etc. Quite a bit of code could be removed/cleaned up if they were removed.\n\nI'll add some comments in-line, and later update this with a TL;DR of the significant issues.\n\nSee https://github.com/coffeescript6/discuss/issues/22 for more context.\n\nTop issues:\n- Dynamic method names referencing variables that change in the class body is broken.\n- Dynamic method names need to be cached.\n- Super referencing is convoluted.\n- Class method hoisting is hacky.\n",
    "head_branch": "es2015-classes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd513a21fa1e1f1a9f54",
    "number": 4329,
    "body": "Fixes 'cake test', which was failing due to \"\\r\\n\" terminators\n",
    "head_branch": "strip-cr-if-present",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4329 from shreeve/strip-cr-if-present\n\nstrip \\r (if present) before final \\n"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd523a21fa1e1f1a9f55",
    "number": 4327,
    "body": "Thought it’d be nice to get the regression fixes since 1.11.0 out. Feedback on the changelog much appreciated. The idea is to release on October 2.\n",
    "head_branch": "1.11.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4327 from lydell/1.11.1\n\n1.11.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd533a21fa1e1f1a9f56",
    "number": 4322,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4322 from fliptheweb/patch-1\n\nFix minor typo in changelog for 1.11.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd543a21fa1e1f1a9f57",
    "number": 4319,
    "body": "I had problems running the REPL tests on my machine because `output.lastWrite()` returns the last line with a `\\r` in it, causing `eq` to fail with error messages like `AssertionError: Expected 2 to equal 2`.\n",
    "head_branch": "fix-repl-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd553a21fa1e1f1a9f58",
    "number": 4318,
    "body": "See https://github.com/coffeescript6/discuss/issues/45\n\nNote: I'm deliberately creating this PR towards branch 2 because it is not opt-in and I'm not sure how many current JS environments implement the binary and octal literals as ES2015 does.\n",
    "head_branch": "octal-and-binaries-as-is",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4318 from GeoffreyBooth/octal-and-binaries-as-is\n\nPass through octal and binary literals as-is"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd563a21fa1e1f1a9f59",
    "number": 4315,
    "body": "I'd love feedback on the first two commits (CLI flags update and changelog). The plan is to release on Saturday.\n\n@jashkenas @GeoffreyBooth @vendethiel \n",
    "head_branch": "1.11.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4315 from lydell/1.11.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd573a21fa1e1f1a9f5a",
    "number": 4313,
    "body": "This extends (and includes) pull request #4312.\n\nMixing tabs and spaces is not allowed ‘horizontally’ (on the same line) and also not ‘vertically’ (in the same code block).\n\nIt’s still allowed in the same file, when used in different code blocks (starting at indentation level 0)\n",
    "head_branch": "no-whitespace-mixing-strict",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4313 from eelco/no-whitespace-mixing-strict\n\nDon’t allow mixing spaces and tabs for indentation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd583a21fa1e1f1a9f5b",
    "number": 4312,
    "body": "This is a follow up of #4303, but takes more or less the opposite approach:\n\nThis is a proposal to make the parser more strict, and ensure that indentation always matches the literal indentation that came before it.\n\nIt makes this code not parse anymore:\n\n```\nnew Layer\n x: 0\n    y: 1\n```\n\n(2nd line uses a space, 3rd line a tab, this is currently legal code.)\n\nThis prevents using a different style of indentation (e.g. mixing spaces and tabs) in the same ‘block’ of code (where indentation > 0).\n\nMixing is still allowed if each line uses the same mix and if the indentation level returns to 0. (Each block can use it own style.)\n\n(Breaks the literate coffeescript test that mixes spaces and tabs.)\n",
    "head_branch": "no-whitespace-mixing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd593a21fa1e1f1a9f5c",
    "number": 4311,
    "body": "**WIP**. Just thought I’d get the ball rolling and try to establish a precedent for merging into the `2` branch. I’ve only spent a few minutes on this, and I was surprised how easy it was to get `=>` to output as `=>`; although I get the sense that there are a lot of considerations to `=>` that I’m not considering. Please enlighten me.\n\nOnly two tests fail with this patch, but I’m not sure that they should pass:\n\n``` coffee\ntest \"`new` works against bare function\", ->\n  eq Date, new ->\n    eq this, new => this\n    Date\n\ntest \"#2009: don't touch `` `this` ``\", ->\n  nonceA = {}\n  nonceB = {}\n  fn = null\n  (->\n    fn = => this is nonceA and `this` is nonceB\n  ).call nonceA\n  ok fn.call nonceB\n```\n\n@lydell actually [commented](https://github.com/jashkenas/coffeescript/pull/4198#issuecomment-178812597) back when he wrote the second test that it would fail when we output `=>`. So maybe it’s time to remove that test?\n\nAs for the first one, I get the sense that the test was written expecting the arrow function to be wrapped by an IIFE. I presume that the point of outputting `=>` for `=>` is to get our output closer to its input, and therefore we shouldn’t be dropping unexpected wrapper functions into the output:\n\n``` bash\n./bin/coffee -bpe 'foo = (bar) => console.log bar, @'\n```\n\n``` js\nvar foo;\n\nfoo = (bar) => {\n  return console.log(bar, this);\n};\n```\n\nIs this correct? Or should this test pass somehow?\n\nThere must be lots of additional code scattered across the repo that can be removed now that we needn’t do so much work to parse `=>`. What cleanup needs to be done?\n",
    "head_branch": "arrow-functions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Output ES2015 arrow functions, default parameters, rest parameters (#4311)\n\n* Eliminate wrapper around “bound” (arrow) functions; output `=>` for such functions\r\n\r\n* Remove irrelevant (and breaking) tests\r\n\r\n* Minor cleanup\r\n\r\n* When a function parameter is a splat (i.e., it uses the ES2015 rest parameter syntax) output that parameter as ES2015\r\n\r\n* Rearrange function parameters when one of the parameters is a splat and isn’t the last parameter (very WIP)\r\n\r\n* Handle params like `@param`, adding assignment expressions for them when they appear; ensure splat parameter is last\r\n\r\n* Add parameter names (not a text like `'\\nValue IdentifierLiteral: a'`) to the scope, so that parameters can’t be deleted; move body-related lines together; more explanation of what’s going on\r\n\r\n* For parameters with a default value, correctly add the parameter name to the function scope\r\n\r\n* Handle expansions in function parameters: when an expansion is found, set the parameters to only be the original parameters left of the expansion, then an `...args` parameter; and in the function body define variables for the parameters to the right of the expansion, including setting default values\r\n\r\n* Handle splat parameters the same way we handle expansions: if a splat parameter is found, it becomes the last parameter in the function definition, and all following parameters get declared in the function body. Fix the splat/rest parameter values after the post-splat parameters have been extracted from it. Clean up `Code.compileNode` so that we loop through the parameters only once, and we create all expressions using calls like `new IdentifierLiteral` rather than `@makeCode`.\r\n\r\n* Fix parameter name when a parameter is a splat attached to `this` (e.g. `@param...`)\r\n\r\n* Rather than assigning post-splat parameters based on index, use slice; passes test “Functions with splats being called with too few arguments”\r\n\r\n* Dial back our w00t indentation\r\n\r\n* Better parsing of parameter names (WIP)\r\n\r\n* Refactor processing of splat/expansion parameters\r\n\r\n* Fix assignment of default parameters for parameters that come after a splat\r\n\r\n* Better check for whether a param is attached to `this`\r\n\r\n* More understandable variable names\r\n\r\n* For parameters after a splat or expansion, assign them similar to the 1.x destructuring method of using `arguments`, except only concern ourselves with the post-splat parameters instead of all parameters; and use the splat/expansion parameter name, since `arguments` in ES fat arrow functions refers to the parent function’s `arguments` rather than the fat arrow function’s arguments/parameters\r\n\r\n* Don’t add unnamed parameters (like `[]` as a parameter) to the function scope\r\n\r\n* Disallow multiple splat/expansion parameters in function definitions; disallow lone expansion parameters\r\n\r\n* Fix `this` params not getting assigned if the parameter is after a splat parameter\r\n\r\n* Allow names of function parameters attached to `this` to be reserved words\r\n\r\n* Always add a statement to the function body defining a variable with its default value, if it has one, if the variable `== null`; this covers the case when ES doesn’t apply the default value when `null` is passed in as a value, but CoffeeScript expects `null` and `undefined` to act interchangeably\r\n\r\n* Aftermath of having both `undefined` and `null` trigger the use of default values for parameters with default values\r\n\r\n* More careful parsing of destructured parameters\r\n\r\n* Fall back to processing destructured parameters in the function body, to account for `this` or default values within destructured objects\r\n\r\n* Clean up comments\r\n\r\n* Restore new bare function test, minus the arrow function part of it\r\n\r\n* Test that bound/arrow functions aren’t overwriting the `arguments` object, which should refer to the parent scope’s `arguments` (like `this`)\r\n\r\n* Follow ES2015 spec for parameter default values: `null` gets assigned as as `null`, not the default value\r\n\r\n* Mimic ES default parameters behavior for parameters after a splat or expansion parameter\r\n\r\n* Bound functions cannot be generators: remove no-longer-relevant test, add check to throw error if `yield` appears inside a bound (arrow) function\r\n\r\n* Error for bound generator functions should underline the `yield`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd5a3a21fa1e1f1a9f5d",
    "number": 4309,
    "body": "First draft. Relies on #4308.\n",
    "head_branch": "modules-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add modules documentation (#4309)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd5a3a21fa1e1f1a9f5e",
    "number": 4308,
    "body": "While writing the documentation for modules, I stumbled across a bug. Yes, I broke it already.\n\nI was writing this as an example:\n\n``` coffee\nexport square = (x) -> x * x\n```\n\nWhich choked on the `*`, because our check for whether `*` should be treated as `EXPORT_ALL` was whether we’ve seen an `EXPORT` token and that the indent was 0. [I knew that indent check was going to be trouble](https://github.com/GeoffreyBooth/coffeescript/pull/2#issuecomment-241963249); but I gave it a lot more thought this time, and noticed two things:\n- In `import` statements, an `*` always precedes an `as`.\n- In `export` statements, the only time `*` can appear is in a statement like `export * from 'lib'`\n\nSo I made the check for converting `*` to `IMPORT_ALL` or `EXPORT_ALL` much narrower, based on these two rules. This made my example compile properly, and broke no other tests. I added two new tests like this example, where `*` is used on the same line (and indentation level) as an `export` keyword. I also re-ran the [Meteor todos test](https://github.com/GeoffreyBooth/coffeescript-modules-test-meteor-todos).\n\n@lydell you were wondering why we can’t just put `*` in the grammar? It’s because the lexer converts `*` to tag `MATH`, and I don’t want to write grammar like `EXPORT MATH FROM String`. That doesn’t make much sense, and then in `ExportAllDeclaration` I would need to filter whether `MATH` was an `*` and throw an error otherwise. Better to intercept `*` in the lexer and convert it to `IMPORT_ALL` or `EXPORT_ALL` there rather than `MATH`.\n",
    "head_branch": "import-export",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4308 from GeoffreyBooth/import-export\n\nBe much more careful about parsing `*` in import and export statements"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd5b3a21fa1e1f1a9f5f",
    "number": 4306,
    "body": "This implements a `for x from g` loop as argued for in [this comment](https://github.com/jashkenas/coffeescript/issues/3832#issuecomment-203739975).\n\nCurrently CoffeeScript supports generators using `yield` and `yield from`, but it doesn't support a way to _use_ these generators like `for (x of g)` in ES6.\n\nCoffeeScript already has `for in` (for Arrays) and `for of` (for Objects), however users expect both to generate es5-compatible code. It's impossible to modify either of these syntaxes to have all three of es5 compatibility, efficiency and support for generators/iterables.\n\nThat means the choice is either a compile-time flag or a new loop syntax. A compile-time flag is likely to create subtle bugs: if the code is expected to be compiled in es6 mode but is actually compiled in es5 mode, then a `for in` loop over an iterator will be a normal for loop `for (var i = 0; i < iterator.length; i++)`. Iterators are objects, and `.length` on an iterator is usually 0. The loop will therefore silently fail to run, with no error message.\n\nThat leaves a new loop syntax.\n\nThe best argument for introducing a new for loop syntax for generators is that they are fundamentally different from either arrays or objects. Iterating over a generator _mutates_ that generator, the next time you iterate over it, it will be empty. Generators cannot be iterated over in reverse order (because they are not indexed). Generators can be infinite.\n\nSo aside from being the only option, a new syntax has the benefit of making it clear from the code which loops are meant for Arrays, and which loops are meant for generators (or any iterable).\n\nAs for the specific syntax, `for x from y` is a nice complement to `yield from y`.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd5c3a21fa1e1f1a9f60",
    "number": 4303,
    "body": "[“CoffeeScript just counts tabs and counts spaces -- you can't possibly expect it to guess how wide your text editor is configured to visually show tab characters.”](https://github.com/jashkenas/coffeescript/issues/2141#issuecomment-4180847)\n\nBut, what if you could tell CoffeeScript how wide a tab stop is? Following the [Robustness principle](https://en.wikipedia.org/wiki/Robustness_principle) I think it would be great if you could instruct CoffeeScript to treat indentation just as it is visually. This of course requires cooperation of the editor / environment or explicit configuration by the user, making this an opt-in feature ([we](https://framerjs.com) can do this).\n\nI’ve read the discussions about tabs/spaces in a couple of issues and have seen that the sentiment generally is to not allow mixing, although it’s currently not enforced. However, while CoffeeScript is a really nice language to learn to program, the requirement to carefully manage your whitespace is quite unfriendly. The current behavior, where a tab is equivalent to a space in width is imho a poor choice: no editor is configured like that. (Python 2’s behavior of having a tabstop width of 8 makes a bit more sense).\n\nThe implementation in this pull request is mostly a ‘proof of concept’, to show what I’m talking about. Having this option would make parsing dependent on a specific option, meaning that some files won’t parse unless the exact right size is passed. A better way to do it (albeit still breaking backwards compatibility) might be to have it set via modeline at the start of the file.\n\nI’m interested to hear from the maintainers and the community if anybody thinks pursuing a feature like this has merit.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd5d3a21fa1e1f1a9f61",
    "number": 4300,
    "body": "This pull request adds support for ES2015 modules, by recognizing `import` and `export` statements. The following syntaxes are supported, based on the MDN [import](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) and [export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) pages:\n\n``` js\nimport \"module-name\"\nimport defaultMember from \"module-name\"\nimport * as name from \"module-name\"\nimport { } from \"module-name\"\nimport { member } from \"module-name\"\nimport { member as alias } from \"module-name\"\nimport { member1, member2 as alias2, … } from \"module-name\"\nimport defaultMember, * as name from \"module-name\"\nimport defaultMember, { … } from \"module-name\"\n\nexport default expression\nexport class name\nexport { }\nexport { name }\nexport { name as exportedName }\nexport { name as default }\nexport { name1, name2 as exportedName2, name3 as default, … }\n\nexport * from \"module-name\"\nexport { … } from \"module-name\"\n```\n\nAs a subsitute for ECMAScript’s `export var name = …` and `export function name {}`, CoffeeScript also supports:\n\n``` js\nexport name = …\n```\n\nCoffeeScript also supports optional commas within `{ … }`.\n\nThis PR converts the supported `import` and `export` statements into ES2015 `import` and `export` statements; it **does not resolve the modules**. So any CoffeeScript with `import` or `export` statements will be output as ES2015, and will need to be transpiled by another tool such as Babel before it can be used in a browser. If this PR is accepted, we will need to add a warning to the documentation explaining this.\n\nThis should be fully backward-compatible, as `import` and `export` were previously reserved keywords. No flags are used.\n\nThere are extensive tests included, though because no current JavaScript runtime supports `import` or `export`, the tests compare strings of what the compiled CoffeeScript output is against what the expected ES2015 should be. I also conducted two more elaborate tests:\n- I forked the [ember-piqu](https://github.com/pauc/piqu-ember) project, which was an Ember CLI app that used ember-cli-coffeescript and [ember-cli-coffees6](https://github.com/alexspeller/ember-cli-coffees6) (which adds “support” for `import`/`export` by wrapping such statements in backticks before passing the result to the CoffeeScript compiler). I removed `ember-cli-coffees6` and replaced the CoffeeScript compiler used in the build chain with this code, and the app built without errors. [Demo here.](https://github.com/GeoffreyBooth/coffeescript-modules-test-piqu)\n- I also forked the [CoffeeScript version of Meteor’s Todos example app](https://github.com/meteor/todos/tree/coffeescript), and replaced all of its `require` statements with the `import` and `export` statements from the original ES2015 version of the app on its `master` branch. I then updated the `coffeescript` Meteor package in the app to use this new code, and again the app builds without errors. [Demo here.](https://github.com/GeoffreyBooth/coffeescript-modules-test-meteor-todos)\n\nThe discussion history for this work started [here](https://github.com/jashkenas/coffeescript/pull/4160) and continued [here](https://github.com/GeoffreyBooth/coffeescript/pull/2). @lydell provided guidance, and @JimPanic and @rattrayalex contributed essential code.\n",
    "head_branch": "import-export",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Support import and export of ES2015 modules (#4300)\n\nThis pull request adds support for ES2015 modules, by recognizing `import` and `export` statements. The following syntaxes are supported, based on the MDN [import](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) and [export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) pages:\r\n\r\n```js\r\nimport \"module-name\"\r\nimport defaultMember from \"module-name\"\r\nimport * as name from \"module-name\"\r\nimport { } from \"module-name\"\r\nimport { member } from \"module-name\"\r\nimport { member as alias } from \"module-name\"\r\nimport { member1, member2 as alias2, … } from \"module-name\"\r\nimport defaultMember, * as name from \"module-name\"\r\nimport defaultMember, { … } from \"module-name\"\r\n\r\nexport default expression\r\nexport class name\r\nexport { }\r\nexport { name }\r\nexport { name as exportedName }\r\nexport { name as default }\r\nexport { name1, name2 as exportedName2, name3 as default, … }\r\n\r\nexport * from \"module-name\"\r\nexport { … } from \"module-name\"\r\n```\r\n\r\nAs a subsitute for ECMAScript’s `export var name = …` and `export function name {}`, CoffeeScript also supports:\r\n```js\r\nexport name = …\r\n```\r\n\r\nCoffeeScript also supports optional commas within `{ … }`.\r\n\r\nThis PR converts the supported `import` and `export` statements into ES2015 `import` and `export` statements; it **does not resolve the modules**. So any CoffeeScript with `import` or `export` statements will be output as ES2015, and will need to be transpiled by another tool such as Babel before it can be used in a browser. We will need to add a warning to the documentation explaining this.\r\n\r\nThis should be fully backwards-compatible, as `import` and `export` were previously reserved keywords. No flags are used.\r\n\r\nThere are extensive tests included, though because no current JavaScript runtime supports `import` or `export`, the tests compare strings of what the compiled CoffeeScript output is against what the expected ES2015 should be. I also conducted two more elaborate tests:\r\n\r\n* I forked the [ember-piqu](https://github.com/pauc/piqu-ember) project, which was an Ember CLI app that used ember-cli-coffeescript and [ember-cli-coffees6](https://github.com/alexspeller/ember-cli-coffees6) (which adds “support” for `import`/`export` by wrapping such statements in backticks before passing the result to the CoffeeScript compiler). I removed `ember-cli-coffees6` and replaced the CoffeeScript compiler used in the build chain with this code, and the app built without errors. [Demo here.](https://github.com/GeoffreyBooth/coffeescript-modules-test-piqu)\r\n* I also forked the [CoffeeScript version of Meteor’s Todos example app](https://github.com/meteor/todos/tree/coffeescript), and replaced all of its `require` statements with the `import` and `export` statements from the original ES2015 version of the app on its `master` branch. I then updated the `coffeescript` Meteor package in the app to use this new code, and again the app builds without errors. [Demo here.](https://github.com/GeoffreyBooth/coffeescript-modules-test-meteor-todos)\r\n\r\nThe discussion history for this work started [here](https://github.com/jashkenas/coffeescript/pull/4160) and continued [here](https://github.com/GeoffreyBooth/coffeescript/pull/2). @lydell provided guidance, and @JimPanic and @rattrayalex contributed essential code."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd5e3a21fa1e1f1a9f62",
    "number": 4296,
    "body": "This is a fix in the CoffeeScript lexer that solved an issue in decaffeinate: https://github.com/decaffeinate/decaffeinate/issues/371. The original PR was here: https://github.com/decaffeinate/coffeescript/pull/4.\n\nAs far as I know, it has no effect on the actual CoffeeScript compiler (since I think\nthis location data is ignored), but you're welcome to incorporate it to make the\nAST a little more sane if that's useful.\n\nThe change seems a little risky, but we've been using it for a while without any\ntrouble, and it makes the location data much nicer in some complicated cases.\n\nAlso note that this has a minor merge conflict with #4291: this adds a test in the\nsame place that that other PR adds a test. Probably both tests make sense.\n\nHere's the original commit message:\n\nThis commit adds another post-processing step after normal lexing that sets the\nlocationData on all OUTDENT tokens to be at the last character of the previous\ntoken. This does feel like a little bit of a hack. Ideally the location data\nwould be set correctly in the first place and not in a post-processing step, but\nI tried that and some temporary intermediate tokens were causing problems, so I\ndecided to set the location data once those intermediate tokens were removed.\nAlso, having this as a separate processing step makes it more robust and\nisolated.\n\nThis fixes the problem in https://github.com/decaffeinate/decaffeinate/issues/371 .\nIn that issue, the CoffeeScript tokens had three OUTDENT tokens in a row, and\nthe last two overlapped with the `]`. Since at least one of those OUTDENT tokens\nwas considered part of the function body, the function expression had an ending\nposition just after the end of the `]`.\n\nOUTDENT tokens are sort of a weird case in the lexer anyway, since they often\ndon't correspond to an actual location in the source code. It seems like the\ncode in `lexer.coffee` makes an attempt at finding a good place for them, but in\nsome cases, it has a bad result. This seems hard to avoid in the general case.\nFor example, in this code:\n\n``` coffee\n[->\n  a]\n```\n\nThere must be an OUTDENT between the `a` and the `]`, but CoffeeScript tokens\nhave an inclusive start and end, so they must always be at least one character\nwide (I think). In this case, the lexer was choosing the `]` as the location,\nand the parser ended up generating correct location data, I believe because\nit ignores the outermost INDENT and OUTDENT tokens. However, with multiple\nOUTDENT tokens in a row, the parser ends up producing location data that is\nwrong.\n\nIt seems to me like there isn't a solid answer to \"what location do OUTDENT\ntokens have\", since it hasn't mattered much, but for this commit, I'm defining\nit: they always have the location of the last character of the previous token.\nThis should hopefully be fairly safe because tokens are still in the same order\nrelative to each other. Also, it's worth noting that this makes the start\nlocation for OUTDENT tokens awkward. However, OUTDENT tokens are always used to\nmark the end of something, so their `last_line` and `last_column` values are\nalways what matter when determining AST node bounds, so it is most important for\nthose to be correct.\n",
    "head_branch": "move-outdents-to-previous-token",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4296 from alangpierce/move-outdents-to-previous-token\n\nChange OUTDENT tokens to be positioned at the end of the previous token"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd5f3a21fa1e1f1a9f63",
    "number": 4291,
    "body": "In f609036beef3aa1529c210ffad3ced818ee94cce, a line was changed from\n`if length > 0 then (length - 1) else 0` to `Math.max 0, length - 1`. However,\nin some cases, the `length` variable can be `undefined`. The previous code would\ncorrectly compute `lastCharacter` as 0, but the new code would compute it as\n`NaN`. This would cause trouble later on: the end location would just be the end\nof the current chunk, which would be incorrect. This confuses tools that rely on\nthe CoffeeScript parser and need the location info to be correct.\n\nHere's a specific case where the parser was behaving incorrectly:\n\n```\na {\n  b: ->\n    return c d,\n      if e\n        f\n}\ng\n```\n\nThe OUTDENT tokens after the `f` had an undefined length, so the `NaN` made it\nso the end location was at the end of the file. That meant that various nodes in\nthe AST, like the `return` node, would incorrectly have an end location at the\nend of the file.\n\nTo fix, I just reverted the change to that particular line.\n",
    "head_branch": "fix-outdent-location-data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4291 from alangpierce/fix-outdent-location-data\n\nFix incorrect location data in OUTDENT nodes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd603a21fa1e1f1a9f64",
    "number": 4289,
    "body": "Found a few misspelled words as I was reading through the comments . . .\n",
    "head_branch": "fix-typos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4289 from GeoffreyBooth/fix-typos\n\nFix misspellings"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd613a21fa1e1f1a9f65",
    "number": 4274,
    "body": "In for example `for` loops, a variable called `i` is generated (for the\nloop index). If that name is unavailable, `j` is used instead, then `k`,\n`l`, etc. all the way to `z`. Then, `aa`, `ab`, `ac` etc. are used.\n\nThis meant that, eventually, `do` would be used, but that's not a valid\nvariable name since `do` is a JavaScript keyword.\n\nThis logic was also inefficiently implemented. For example, going from\n`aa` to `ab` or from `az` to `ba` required lots of loop iterations.\n\nThis commit changes the variable naming convention. Now, `i`, `j`, `k`,\netc. to `z` are used like before. Then comes `i1`, `j1`, `k1`, etc. Then\n`i2`, `j2`, `k2` and so on. This is simpler, efficient and easier to\nunderstand. `i1` is more obvious to be a loop index than `aa`.\n\nFixes #4267.\n",
    "head_branch": "for-variables",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4274 from lydell/for-variables\n\nImprove naming of generated 'i-variables'"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd623a21fa1e1f1a9f66",
    "number": 4253,
    "body": "Fixes issue #4252.\n\n> Running a simple coffee REPL with `coffee`, and exiting with `.exit`, it outputs this error:\n> \n> ```\n> fs.js:60\n>       throw err;  // Forgot a callback but don't know where? Use NODE_DEBUG=fs\n>       ^\n> Error: EBADF: bad file descriptor, write\n>   at Error (native)\n> ```\n> \n> It appears to be because it's trying to fd.write after fd.close() has been called.\n> This seems like a simple thing, I'm surprised no one's reported this yet (looking at repo-issue and google searches). Am I missing something?\n\nThe issue only manifests with `.exit`, not `ctrl+d`, so this fixes it simply by not trying to write on `.exit`.\n\nThank you.\n",
    "head_branch": "fix-repl-fd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix 'Error: EBADF: bad file descriptor, write' on `.exit` in REPL\n\nFixes issue #4252."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd633a21fa1e1f1a9f67",
    "number": 4238,
    "body": "resolves #4235 \n",
    "head_branch": "issue-4235",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd643a21fa1e1f1a9f68",
    "number": 4234,
    "body": "``` coffeescript\nclass UserSearch\n\n  consturctor: () ->\n    @sort = {rel: \"name\", order: 1}\n\n  orderby: ~> \"#{if @sort.order then ASCENDING else DESCENDING} #{@sort.rel}\"\n\n  search: (query) ->\n    {promise, resolve, reject} = Promse.defer()\n\n    request =\n      where: name: like: query\n      orderby: @orderby\n\n    failed = (err) ->\n      reject err\n\n    finished = (user) ->\n      resolve user\n\n    User.query request\n      .then finished\n      .catch failed\n\n    promise\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd653a21fa1e1f1a9f69",
    "number": 4227,
    "body": "One of the [top CoffeeScript projects on GitHub](https://github.com/search?l=CoffeeScript&q=stars%3A%3E1&s=stars&type=Repositories).\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd653a21fa1e1f1a9f6a",
    "number": 4226,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd663a21fa1e1f1a9f6b",
    "number": 4223,
    "body": "- Inline source maps are now shorter by not using pretty-printed JSON.\n- `.register()`ed files are now given more information in their inline source\n  maps: The name and contents of the source file.\n- Some code cleanup.\n\nIf you decode the inline source map generated (when using `.register()`) for a\nfile test.coffee with the contents `console.log \"it works!\"`, here is the\noutput:\n\nBefore:\n\n```\n{\n  \"version\": 3,\n  \"file\": \"\",\n  \"sourceRoot\": \"\",\n  \"sources\": [\n    \"\"\n  ],\n  \"names\": [],\n  \"mappings\": \"AAAA;EAAA,OAAO,CAAC,GAAR,CAAY,eAAZ;AAAA\"\n}\n```\n\nAfter:\n\n```\n{\"version\":3,\"file\":\"\",\"sourceRoot\":\"\",\"sources\":[\"test.coffee\"],\"names\":[],\"mappings\":\"AAAA;EAAA,OAAO,CAAC,GAAR,CAAY,WAAZ;AAAA\",\"sourcesContent\":[\"console.log \\\"it works!\\\"\\n\"]}\n```\n\nRelated: #4214.\n",
    "head_branch": "inline-maps",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 841b3cd2ad7e1eea8115a7d1e5ceafdf01bb9259 into cbc72a29bf85cdc0fa41dd1d8664980541a3afc2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd673a21fa1e1f1a9f6c",
    "number": 4221,
    "body": "- Show the same type of error message for compound assignment as for `=`\n  assignment when the LHS is invalid.\n- Show the same type of error message when trying to assign to a CoffeeScript\n  keyword as when trying to assign to a JavaScript keyword.\n- Now longer treat `&& =` as `&&=`. The same goes for `and=`, `||=` and `or=`.\n- Unify the error message to: `<optional type> '<value>' can't be assigned`.\n",
    "head_branch": "assignment-errors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd683a21fa1e1f1a9f6d",
    "number": 4220,
    "body": "- Split out a PROPERTY token from the IDENTIFIER token.\n- Split out Property from the Identifier in the grammar.\n- Split out PropertyLiteral from IdentifierLiteral.\n",
    "head_branch": "propertyliteral",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd693a21fa1e1f1a9f6e",
    "number": 4219,
    "body": "Fixes #4218.\n",
    "head_branch": "infinity-nan",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd6a3a21fa1e1f1a9f6f",
    "number": 4212,
    "body": "In the documentation there is a Digital Web article that link nowhere.\nI updated the url that bring to the same resource.\nThe site is still alive but changed to another IP which doesn't bind to original domain name.\n",
    "head_branch": "issue4042",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd6b3a21fa1e1f1a9f70",
    "number": 4204,
    "body": "The call `path?.extname(filename) in exports.FILE_EXTENSIONS` fails for extension \".coffee.md\" because extname return only \".md\". This produce  incorrect line numbers The current approad fixes the issue by testing if the end of the filename match at least one extension.\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd6c3a21fa1e1f1a9f71",
    "number": 4199,
    "body": "Remove extra `the`\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd6d3a21fa1e1f1a9f72",
    "number": 4198,
    "body": "Previously, the parser created `Literal` nodes for many things. This resulted in\ninformation loss. Instead of being able to check the node type, we had to use\nregexes to tell the different types of `Literal`s apart. That was a bit like\nparsing literals twice: Once in the lexer, and once (or more) in the compiler.\nIt also caused problems, such as ``this`` and `this` being indistinguishable\n(fixes #2009).\n\nInstead returning `new Literal` in the grammar, subtypes of it are now returned\ninstead, such as `NumberLiteral`, `StringLiteral` and `IdentifierLiteral`. `new\nLiteral` by itself is only used to represent code chunks that fit no category.\n\n`StringWithInterpolations` has been added as a subtype of `Parens`, and\n`RegexWithInterpolations` as a subtype of `Call`. This makes it easier for other\nprograms to make use of CoffeeScript's \"AST\" (nodes). For example, it is now\npossible to distinguish between `\"a #{b} c\"` and `\"a \" + b + \" c\"`. Fixes #4192.\n\n`SuperCall` has been added as a subtype of `Call`.\n\nNote, though, that some information is still lost, especially in the lexer. For\nexample, there is no way to distinguish a heredoc from a regular string, or a\nheregex without interpolations from a regular regex.\n\nAfter the new subtypes were added, they were taken advantage of, removing most\nregexes in nodes.coffee. `SIMPLENUM` (which matches non-hex integers) had to be\nkept, though, because such numbers need special handling in JavaScript (for\nexample in `1..toString()`).\n\nAn especially nice hack to get rid of was using `new String()` for the token\nvalue for reserved identifiers (to be able to set a property on them which could\nsurvive through the parser). Now it's a good old regular string.\n\nIn range literals, slices, splices and for loop steps when number literals\nare involved, CoffeeScript can do some optimizations, such as precomputing the\nvalue of, say, `5 - 3` (outputting `2` instead of `5 - 3` literally). As a side\nbonus, this now also works with hexadecimal number literals, such as `0x02`.\n\nFinally, this also improves the output of `coffee --nodes`:\n\n```\n# Before:\n$ bin/coffee -ne 'while true\n  \"#{a}\"\n  break'\nBlock\n  While\n    Value\n      Bool\n    Block\n      Value\n        Parens\n          Block\n            Op +\n              Value \"\"\"\"\n              Value\n                Parens\n                  Block\n                    Value \"a\" \"break\"\n\n# After:\n$ bin/coffee -ne 'while true\n  \"#{a}\"\n  break'\nBlock\n  While\n    Value BooleanLiteral: true\n    Block\n      Value\n        StringWithInterpolations\n          Block\n            Op +\n              Value StringLiteral: \"\"\n              Value\n                Parens\n                  Block\n                    Value IdentifierLiteral: a\n      StatementLiteral: break\n```\n",
    "head_branch": "node-types",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd6e3a21fa1e1f1a9f73",
    "number": 4193,
    "body": "@michaelficarra Is this what you are talking about?\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd6f3a21fa1e1f1a9f74",
    "number": 4180,
    "body": "To reproduce this bug, create a coffee file (for example abc.coffee) with approximately 150 lines of Unicode string, like this:\n\n``` coffee\na = \"\"\"\n一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一\n一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一\n一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一\n一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一\n一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一\n一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一\n一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一\n一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一\n一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一\n一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一\n<the remaining 140 lines>\n\"\"\"\n```\n\nThen in node console:\n\n```\ninput=fs.readFileSync(\"abc.coffee\",{encoding:\"utf8\"})\n```\n\nThen:\n\n```\nchild_process.execSync(\"coffee -bcs\",{encoding:\"utf8\",input:input})\n```\n\nThe return value will contain this:\n\n```\n一一一\\\\n一一一一一一一一一一一一一���一一一一一一一一一一一一一一一一一一一一一一\n```\n\nThis can be reproduced on OS X, but seems not on Windows or Linux, maybe because Linux and Windows has a larger buffer size.\n\nReason: The current code uses \"first convert then concat\", but should be \"first concat then convert\".\n\nThe modified code has been tested. The built JS isn't included in this commit.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd703a21fa1e1f1a9f75",
    "number": 4169,
    "body": "Update copyright year\n\nHappy new year!\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd713a21fa1e1f1a9f76",
    "number": 4167,
    "body": "I understand these are generated files, but there's an error in the generated javascript. The `ext` variable isn't scoped, so the `ext` in the error string is always the last value in the array, regardless of what the actual error is.\n\nI expect you will decline this PR, but I hope this will point you in the right direction.\n",
    "head_branch": "localize-errorstring",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd723a21fa1e1f1a9f77",
    "number": 4160,
    "body": "per issue #3162\n\nallows one to write es6 module import / export statements without backticks\n\ntests included, comments welcome\n",
    "head_branch": "es6-module-syntax",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd733a21fa1e1f1a9f78",
    "number": 4155,
    "body": "# Summary\n\nCurrently, CoffeeScript provides no reliable way to retain comments through\ncompilation.\n\nBlock comments are just fine most of time, however we're faced to a\nkind-of-hard dilemma described below.\n\nSimply put, we want some comments used for annotation are passed down to the\ncompiled JavaScript as is and at the exact position of arbitrary token boundary\nas long as they are allowed. Currently supported block comments aren't suffice.\n# Problem background\n\nWe are developing an Angular app with CoffeeScript using ng-annotate.\nThen, we stumbled upon this issue (ref).\n\n(As for justification of annotation itself, I actually don't want to resort to\nsuch things. Though, Angular practically requires such practice otherwise we're\nforced to write many repetition for the Dependancy-Inject thingy..)\n# Problem\n\n``` CoffeeScript\n# ??? means some annotation syntax\n\n???@ngInject???\nMainCtrl = (Page) ->\n  console.log(\"say hello\")\n```\n\nWe want the above CoffeeScript code is compiled likes this:\n\n``` JavaScript\n/* @ngInject */\nMainCtrl = function(Page) {\n  return console.log(\"say hello\");\n};\n```\n\nThen, JavaScript code is fed into ng-annotate, producing this as a final result:\n\n``` JavaScript\n/* @ngInject */\nMainCtrl = function(Page) {\n  return console.log(\"say hello\");\n};\nMainCtrl.$inject = [\"Page\"];\n```\n# Current working solution\n\nthe \"use strict\" style:\n\n``` CoffeeScript\nMainCtrl = (Page) ->\n  \"ngInject\"\n  console.log(\"say hello\")\n```\n\n=>\n\n``` CoffeeScript\nbash-4.3$ cat examples/annotate.coffee | ./bin/coffee --compile --stdio --bare --no-header | ng-annotate --add -\nvar MainCtrl;\n\nMainCtrl = [\"Page\", function(Page) {\n  \"ngInject\";\n  return console.log(\"say hello\");\n}];\n```\n\nHowever this isn't applicable to more complex annotation usage.\n# Almost working solution: the block comment style\n\n``` CoffeeScript\n### @ngInject ###\nMainCtrl = (Page) ->\n  console.log(\"say hello\")\n\n### @ngInject ###\nMainCtrlNotAtTop = (Page) ->\n  console.log(\"say hello\")\n\n```\n\n=>\n\n``` JavaScript\n/* @ngInject */\nvar MainCtrl, MainCtrlNotAtTop;\n\nMainCtrl = function(Page) {\n  return console.log(\"say hello\");\n};\n\n\n/* @ngInject */\n\nMainCtrlNotAtTop = function(Page) {\n  return console.log(\"say hello\");\n};\nMainCtrlNotAtTop.$inject = [\"Page\"];\n```\n\nThe first block comment is moved at the first of file. I believe this is intentional,\nafter all, there is ambiguity between a given block comment at the first of file is\na file header comment or commenting about the following code..\n\nHowever this isn't applicable to more complex annotation usage.\n# Almost working solution: javascript comment inside javascript label\n\n``` CoffeeScript\n`/* @ngInject */`\nMainCtrl = (Page) ->\n  console.log(\"say hello\")\n\n`/* @ngInject */`\nMainCtrlNotAtTop = (Page) ->\n  console.log(\"say hello\")\n```\n\n=>\n\n``` JavaScript\n/* @ngInject */;\nvar MainCtrl, MainCtrlNotAtTop;\n\nMainCtrl = function(Page) {\n  return console.log(\"say hello\");\n};\n\n/* @ngInject */;\n\nMainCtrlNotAtTop = function(Page) {\n  return console.log(\"say hello\");\n};\n```\n\nMaybe the `;` is preventing ng-annotate from working correctly...\n\nThere is top of file or scope does exist here as well..\n\nAlso, this isn't applicable to more complex annotation usage.\n## Proposed solution: introducing _annotation-comment_ syntax\n\nThe newly-introduced syntax: 'Annotation comment'\n\nSo, we resorted to make changes to the CoffeeScript to implement a\ngeneral-purpose transpilation-resistent annotation comment syntax.\n\nIf this change would be accepted, I'd commit my available time to realize it.\n\nCurrently, I've just hacked up a very proof-of-concept pull request.\n## New syntax considerations\n\n```\n`/* ngInject */`\n```\n- good: maximum compatibility is retained\n- bad: more chars\n\n```\n#`ngInject`\n```\n- good: less chars\n- bad: moderate compatibility is retained\n- bad: hard to parse because we're trained to ignore the whole line (subjective?)\n\nref: https://github.com/olov/ng-annotate/issues/152\n",
    "head_branch": "annotation-comment",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd743a21fa1e1f1a9f79",
    "number": 4146,
    "body": "Remove two duplicated words.\n",
    "head_branch": "minor-document-typos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd743a21fa1e1f1a9f7a",
    "number": 4145,
    "body": "Hi,\n\nWhile reading the annotated source code, I noticed what seems to be a spelling mistake in a annotation comment.\nAs English isn't my mother tongue I'm not quite sure about that.\n\nRegards,\n\nRémi Andruccioli\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd753a21fa1e1f1a9f7b",
    "number": 4144,
    "body": "Pipe operator `|>` adds its right hand expression as first argument to the left hand function invocation.\n\nSelecting first operand was a smart choice in Elixir as they don't have function currying. I think it's also a good choice for CoffeeScript, because of JS libraries common structure on accepting \"subject\" (i.e. `Object|Array|String|...`) as first arg.\n\nAn answer to #1339 and #3600\n\n``` coffeescript\n_ = require 'lodash'\n\nusers = [\n  { user: 'barney',  active: false, age: 37}\n  { user: 'fred',    active: true,  age: 21}\n  { user: 'pebbles', active: true,  age: 19}\n]\n\nyoungest = users\n  |> _.select('active')\n  |> _.sortBy('age')\n  |> _.first\n  |> _.get('user')\n  |> _.capitalize\n\nconsole.log youngest\n```\n",
    "head_branch": "pipe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd763a21fa1e1f1a9f7c",
    "number": 4140,
    "body": "Previously, `catch`-less `try`s named the caught error `undefined`, instead of\n`error` like usual.\n\nI don’t know how/if to test this, which is why I included no test.\n",
    "head_branch": "issue-4137",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd773a21fa1e1f1a9f7d",
    "number": 4136,
    "body": "I decided to take a stab at implementing #3949 and allow splats to occur at the end of loop bodies, allowing you to 'flat map' within a comprehension:\n\n``` coffee\nfor a in [1..3]\n  (a * b for b in [1..3])...\n# [ 1, 2, 3, 2, 4, 6, 3, 6, 9 ]\n```\n\n**Compiling**\n\nAs splats will now parse almost anywhere, a `safe` flag has been added to the `Splat` node.  If this is not true, then calling `splat.compileToFragments` will throw a parse error: \"Splats are not allowed here\".  This is used when building a splat param.\n\nFor the same reason, `Splat` no longer implements `unwrap` (we want to compile the splat itself, no longer just the name).\n\nIn other cases, consumers of splats need to call `compileSplat` instead of `compileToFragments` (currently only `Splat` itself, as all other access happens through `Splat.compileSplattedArray`).\n\n**Parsing**\n\nMy first instinct was to add `Splat` as a branch of `Expression`, however this leads to ambiguity.  After some trial and error, adding `Splat` as another branch of `Line` produces an unambiguous grammar.  I'm not terribly happy with how it parses, some issues include:\n- You can splat a comprehension without parentheses:\n  \n  ```\n  for a in [1..3]\n    a * b for b in [1..3]...\n  # actual: [ 1, 2, 3, 2, 4, 6, 3, 6, 9 ]\n  # desired: Splats are not allowed here\n  # [1..3]...\n  # ^^^^^^^^^\n  ```\n- You **must** use parentheses when using postfix:\n  \n  ```\n  arrayOfArrays = [ [ 1, 2 ], [ 3, 4 ] ]\n  array... for array in arrayOfArrays\n  # actual: unexpected for\n  # array... for array in arrayOfArrays\n  #          ^^^\n  # desired: [ 1, 2, 3, 4 ]\n  ```\n\nAny hints at how to tackle this?\n",
    "head_branch": "splats-in-loops",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd783a21fa1e1f1a9f7e",
    "number": 4135,
    "body": "Throwing `null` results in a `TypeError` due to a property check in `helpers.updateSyntaxError` and an `err.stack` access in `command.compileScript()`\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd793a21fa1e1f1a9f7f",
    "number": 4131,
    "body": "",
    "head_branch": "issue-4130",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd7a3a21fa1e1f1a9f80",
    "number": 4126,
    "body": "Firefox debugging with source maps and multiple in browser transpiled coffeescript segments fails miserably.\nAdding index helps debugger to be able to use breakpoints etc.\n",
    "head_branch": "deram-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd7b3a21fa1e1f1a9f81",
    "number": 4120,
    "body": "Removed a test in `repl.coffee` that fails in newer node version, because node repl behavior changed.\n\nRemoved unnecessary parenthesis unwrapping in repl.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd7c3a21fa1e1f1a9f82",
    "number": 4112,
    "body": "`({a = 1}) ->` and `({a: b}) ->` worked, but not the combination of the two:\n`({a: b = 1}) ->`. That destrucuring worked for normal assignments, though:\n`{a: b = 1} = c`. This commit fixes the param case.\n",
    "head_branch": "renamed-destrucured-params-with-defaults",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4b4675de3055ec0bc29a63887ba27b6580f35d5f into 36e80d7f5c9b5bf598fbf87bbc84ef7ee9933d36"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd7c3a21fa1e1f1a9f83",
    "number": 4111,
    "body": "This closes #3678 and is similar to #3697, however this PR also add's inline maps to \"coffee-script/register\" and reuses existing \"browser.coffee\" generation. This also allows for file names to be used in the source map.\n\nIt also allows CS to work with node-inspector by directly using register.\n\n---\n\nCLI Usage:\n\n``` console\ncoffee -c -M myFile.coffee\ncoffee -c --inline-map myFile.coffee\n```\n\nRequire Hook Usage:\n\n``` javascript\nrequire(\"coffee-script/register\");\nrequire(\"myFile.coffee\");\n```\n\n---\n\nLet me know if any modifications are needed for this PR as it is my first to coffeescript.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 347a625525a762acab5309576c7014751160c937 into 2df011f37815fa77c0f663ddb9333d589abc99cd"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfd7d3a21fa1e1f1a9f84",
    "number": 4102,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd7e3a21fa1e1f1a9f85",
    "number": 4101,
    "body": "",
    "head_branch": "fix-doc-typos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd7f3a21fa1e1f1a9f86",
    "number": 4099,
    "body": "Fixes #4097. Also happens to fix #4096. I also took the liberty to simplify the\nerror message for invalid use of `yield`.\n",
    "head_branch": "yield-return",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd803a21fa1e1f1a9f87",
    "number": 4095,
    "body": "This breaks compatibility with\n\n``` coffee\n->\n  yield for i in [1..3]\n    i * 2\n```\n\nand\n\n``` coffee\n->\n  yield\n    i * 2\n```\n\nyield's behaviour now mirrors that of return in that it can be used stand alone as well as with expressions. Thus, it currently also inherits the above limitations.\n",
    "head_branch": "standaloneyieldd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c1a9cfa0446bd82a3349717340906e95719a2ad1 into da23a2f7021187916cf5288267e6c68fa9e9b4d1"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd813a21fa1e1f1a9f88",
    "number": 4094,
    "body": "Rebuilt files.\n",
    "head_branch": "removeuncaughterrorvars",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd823a21fa1e1f1a9f89",
    "number": 4093,
    "body": "This removes unnecessary brackets and empty spaces around yield when not needed. We still need brackets for if(a === (yield)).\n",
    "head_branch": "betteryieldcompilation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b1ef5a99967db7f577c426bfc70d6e4c3199a6ab into d1c6db476bb4c00621dfab695aa07f41942cc13c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd833a21fa1e1f1a9f8a",
    "number": 4089,
    "body": "I don’t know how to test this, which is why I didn’t write any tests.\n",
    "head_branch": "issue-4088",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd843a21fa1e1f1a9f8b",
    "number": 4085,
    "body": "The help does not describe how to require multiple modules (`-r first -r second`) but that star makes it look like there is some shortcut (which there isn't). Unless this is some UNIX convention I am not aware of.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd853a21fa1e1f1a9f8c",
    "number": 4083,
    "body": "The example code in documentation/coffee/_.coffee accidentally had duplicate\ncompiled .js versions committed: Both as documentation/js/_.js and as\ndocumentation/coffee/*.js.\n\nThe former is generated when running `cake doc:site`, while the latter has no\ncake task to be generated. Removing the former and then re-compiling index.html\nresults in all the code examples being missing in the resulting HTML, while\nremoving the latter makes no difference.\n\nIn conclusion, documentation/coffee/*.js must be the unnecessary duplicates.\nThey are removed by this commit.\n",
    "head_branch": "remove-unnecessary-files",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ae65875c8b9cb6454268dade7d44ee987b461e3a into d742a7dd1f09cf8b1a8627408baff61edb9a97dc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd863a21fa1e1f1a9f8d",
    "number": 4082,
    "body": "",
    "head_branch": "changelog-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd873a21fa1e1f1a9f8e",
    "number": 4081,
    "body": "try without catch/finally is not documented #3958\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd883a21fa1e1f1a9f8f",
    "number": 4080,
    "body": "This was done by first checking all files in the repository root by hand, and\nthen by doing the following:\n\n```\n$ npm i get-stdin@4\n$ cat clean.coffee\nfs = require 'fs'\nstdin = require 'get-stdin'\n\nstdin (text) ->\n  for file in text.trim().split('\\n')\n    contents = fs.readFileSync file\n      .toString().replace /\\s*$/, '\\n'\n    fs.writeFileSync file, contents\n  return\n$ ls !(node_modules)/**/*.coffee | coffee clean.coffee\n```\n\nIdeally merged _after_ #4079.\n",
    "head_branch": "single-newline-at-eof",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd893a21fa1e1f1a9f90",
    "number": 4079,
    "body": "I followed the steps I wrote after having made the 1.9.3 PR: https://github.com/jashkenas/coffeescript/wiki/%5BHowto%5D-Hacking-on-the-CoffeeScript-Compiler#11-preparing-a-new-release\n\nStep 8:\n\n> Make sure that you haven’t forgot to update the version number somewhere. If you update from 1.9.9, git grep '1.9.9' should only find matches in the change log.\n\nHowever:\n\n```\ndocumentation/coffee/aliases.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/array_comprehensions.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/block_comment.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/cake_tasks.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/chaining.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/classes.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/comparisons.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/conditionals.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/constructor_destructuring.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/default_args.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/do.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/embedded.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/existence.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/expansion.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/expressions.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/expressions_assignment.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/expressions_comprehension.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/expressions_try.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/fat_arrow.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/functions.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/generators.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/heredocs.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/heregexes.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/interpolation.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/modulo.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/multiple_return_values.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/object_comprehensions.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/object_extraction.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/objects_and_arrays.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/objects_reserved.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/overview.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/parallel_assignment.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/patterns_and_splats.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/prototypes.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/range_comprehensions.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/scope.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/slices.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/soaks.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/splats.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/splices.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/strings.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/switch.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/switch_with_no_expression.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/try.js:// Generated by CoffeeScript 1.9.3\ndocumentation/coffee/while.js:// Generated by CoffeeScript 1.9.3\ndocumentation/index.html.js:      <%= releaseHeader('2015-09-04', '1.10.0', '1.9.3') %>\ndocumentation/index.html.js:      <%= releaseHeader('2015-05-27', '1.9.3', '1.9.2') %>\nindex.html:  <a href=\"https://github.com/jashkenas/coffeescript/compare/1.9.3...1.10.0\">1.10.0</a>\nindex.html:      <div class=\"anchor\" id=\"1.9.3\"></div>\nindex.html:  <a href=\"https://github.com/jashkenas/coffeescript/compare/1.9.2...1.9.3\">1.9.3</a>\n```\n\nI’m very confused by the `documentation/coffee/*.js` files. The various commands I ran seem to have updated `documentation/js/*.js`, but not the ones in the `coffee` directory. Apparently @jashkenas updated those after my 1.9.3 PR (commit c37f284).\n\nIt feels like all `documentation/coffee/*.coffee` files have duplicate compiled versions comitted. There seems to be no `cake` command to update the `documentation/coffee/*.js` ones. What’s up here, and which ones are actually used?\n\n---\n\nRegarding the changelog, it might feel really small at only three items, but the last item (”Several minor bug fixes.”) includes _a lot_ of really good fixes. I just didn’t feel necessary to note them all in the changelog, since they don’t affect most CoffeeScript users.\n\nSuch a short changelog might also raise the question if we should release a version at all, but remember:\n- Destructuring defaults have been awaited for a _long_ time. Let’s get ’em out.\n- Those small bug fixes are of course fixed for a reason.\n- We want to get the more responsive documentation site out.\n- I don’t see anything coming that we should wait for to include in the release.\n",
    "head_branch": "v1.10.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd8a3a21fa1e1f1a9f91",
    "number": 4075,
    "body": "- Make the site easier to use on phones and other less wide screens.\n- Get rid of the deprecated `<tt>` tag.\n\nBefore:\n\n![before](https://cloud.githubusercontent.com/assets/2142817/9566839/6fc3375e-4f15-11e5-9fae-ced1e100a8a0.png)\n\nAfter:\n\n![navbar](https://cloud.githubusercontent.com/assets/2142817/9566840/7744e09a-4f15-11e5-8bc1-53cedfd733ce.png)\n![code](https://cloud.githubusercontent.com/assets/2142817/9566841/78bb10de-4f15-11e5-8076-ccc8ff44b0e1.png)\n",
    "head_branch": "documentation-improvements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd8b3a21fa1e1f1a9f92",
    "number": 4074,
    "body": "A suggestion on how to document this new and shiny feature :) Feedback most welcome.\n",
    "head_branch": "destructuring-defaults-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd8b3a21fa1e1f1a9f93",
    "number": 4073,
    "body": "",
    "head_branch": "issue-3926",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd8c3a21fa1e1f1a9f94",
    "number": 4071,
    "body": "",
    "head_branch": "lone-expansion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd8d3a21fa1e1f1a9f95",
    "number": 4069,
    "body": "This let's you do things like:\n\n```\nfullName = ({first = 'John', last = 'Doe'}) -> \"#{first} #{last}\"\n```\n\nNote: CoffeeScrits treats `undefined` and `null` the same, and that's true in\nthe case of destructuring defaults as well, as opposed to ES2015 which only uses\nthe default value if the target is `undefined`. A similar ES2015 difference\nalready exists for function parameter defaults. It is important for CoffeeScript\nto be consistent with itself.\n\n```\nfullName2 = (first = 'John', last = 'Doe') -> \"#{first} #{last}\"\nassert fullName('Bob', null) is fullName2(first: 'Bob', last: null)\n```\n\nFixes #1558, #3288 and #4005.\n",
    "head_branch": "destructuring-defaults",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd8e3a21fa1e1f1a9f96",
    "number": 4068,
    "body": "",
    "head_branch": "issue-1192",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd8f3a21fa1e1f1a9f97",
    "number": 4059,
    "body": "Let me know if there's something I should be doing differently as this is my first contribution to coffeescript.\n\nI fixed the reported issue where a generated variable could clash with a user-defined one in a try/catch block.\n\nI added a test for a few scenarios with different variable names for a try/catch, to confirm the fix and avoid regressions.\n",
    "head_branch": "hotfix/4036-try-variable-improvement",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd903a21fa1e1f1a9f98",
    "number": 4056,
    "body": "Will solve #4048\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd913a21fa1e1f1a9f99",
    "number": 4031,
    "body": "I was unable to find the instructions for compiling from source in any of the documentation. After poking at it, this is what I figured out. Apologies in advance if I missed the instructions somewhere or left something out.\n\nI was inspired by this SO post: http://stackoverflow.com/questions/31185576/compiling-coffeescript-with-itself/31291745\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd923a21fa1e1f1a9f9a",
    "number": 4029,
    "body": "The #1714 bug still occurs when the lexer is used multiple times, e.g. in the REPL:\n\n``` coffeescript\n$ coffee\ncoffee> 0 for [1..2]\n[ 0, 0 ]\ncoffee> 'a' in ['b']\n[stdin]:1:5: error: unexpected in\n'a' in ['b']\n    ^^\ncoffee> 'a' in ['b']\nfalse\n```\n\nThis PR fixes it by setting `@seenFor = no` in the same place the rest of the lexer state is initialized.\n",
    "head_branch": "reset-seenfor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd933a21fa1e1f1a9f9b",
    "number": 4019,
    "body": "Causes an error in io.js where strict-mode is set on internal modules.\n\nFixes: https://github.com/jashkenas/coffeescript/issues/3810\n\nI'm trying to use CoffeeScript as part of the smoke tests for io.js releases and this is the blocker because it just doesn't run.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd943a21fa1e1f1a9f9c",
    "number": 4008,
    "body": "Per bower/bower.json-spec@a325da3\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd953a21fa1e1f1a9f9d",
    "number": 4003,
    "body": "support `:foo == \"foo\"` \n",
    "head_branch": "symbols",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd963a21fa1e1f1a9f9e",
    "number": 3990,
    "body": "This pull request adds coverage reporting using [nyc](https://www.npmjs.com/package/nyc):\n- run `npm run coverage` to get a human readable coverage report.\n- run `npm run coverage -- --reporter=lcov` to get an HTML report over coverage in the /coverage folder.\n\n``` shell\npassed 636 tests in 5.99 seconds \n-----------------------|-----------|-----------|-----------|-----------|\nFile                   |   % Stmts |% Branches |   % Funcs |   % Lines |\n-----------------------|-----------|-----------|-----------|-----------|\n   bin/                |       100 |       100 |       100 |       100 |\n      cake             |       100 |       100 |       100 |       100 |\n      coffee           |       100 |       100 |       100 |       100 |\n   lib/coffee-script/  |     89.38 |     85.81 |     86.02 |     89.75 |\n      cake.js          |     62.69 |     22.22 |     66.67 |     62.69 |\n      coffee-script.js |     90.73 |     77.24 |     80.77 |     92.59 |\n      command.js       |     30.26 |     22.35 |      12.5 |     30.49 |\n      helpers.js       |     87.34 |     74.12 |        92 |     87.34 |\n      index.js         |       100 |       100 |       100 |       100 |\n      lexer.js         |     97.26 |     95.42 |     97.73 |     97.73 |\n      nodes.js         |     97.32 |     93.04 |     97.83 |     97.44 |\n      optparse.js      |      80.9 |     78.57 |      87.5 |      80.9 |\n      parser.js        |     90.82 |     89.46 |     64.29 |     90.98 |\n      register.js      |     95.45 |     57.14 |       100 |     95.45 |\n      repl.js          |     89.06 |     69.39 |     82.35 |     89.06 |\n      rewriter.js      |     96.71 |     91.72 |     97.87 |     97.58 |\n      scope.js         |     94.68 |     85.71 |     94.12 |      97.8 |\n      sourcemap.js     |     92.93 |     81.82 |     92.31 |     92.93 |\n-----------------------|-----------|-----------|-----------|-----------|\nAll files              |      89.4 |     85.81 |     86.02 |     89.77 |\n-----------------------|-----------|-----------|-----------|-----------|\n```\n",
    "head_branch": "coverage",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd973a21fa1e1f1a9f9f",
    "number": 3985,
    "body": "Testing with `'[object Array]' is Object::toString.call element` allows arrays from another JS context to be properly handled. The specific use case here is to support jest, which sets up JS contexts using Node/io.js's \"vm\" module. This approach works in ES3 environments in contrast with ES5's `Array.isArray`.\n",
    "head_branch": "array-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2087923163f90b9d4898d606f8b67623fc7df67f into e339f5f2da469913e977a96d2766622728f48cb9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd983a21fa1e1f1a9fa0",
    "number": 3984,
    "body": "Testing with `'[object Array]' is Object::toString.call element` allows arrays from another JS context to be properly handled. The specific use case here is to support jest, which sets up JS contexts using Node/io.js's \"vm\" module. This approach works in ES3 environments in contrast with ES5's `Array.isArray`.\n",
    "head_branch": "array-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd983a21fa1e1f1a9fa1",
    "number": 3980,
    "body": "There are a few nice bugfixes just waiting to be released :) The most important ones, IMO, are the source map fix and REPL error messages fix. There’s also a bunch of new documentation that would be nice to get out.\n",
    "head_branch": "v1.9.3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b58772e8a74bc8156aeb52e278f9b6b30129e0d9 into 769f02ec05c7e329a33ae0f49281457d12387324"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfd993a21fa1e1f1a9fa2",
    "number": 3979,
    "body": "Before:\n\n```\n$ ./bin/coffee -bpe '###\n> # paragraph 1\n> #\n> # paragraph 2\n> ###'\n/*\n * paragraph 1\n#\n * paragraph 2\n */\n```\n\nAfter:\n\n```\n$ ./bin/coffee -bpe '###\n# paragraph 1\n#\n# paragraph 2\n###'\n/*\n * paragraph 1\n *\n * paragraph 2\n */\n```\n\nThis does not re-break #3638:\n\n```\n$ ./bin/coffee -bpe '###\n> #/\n> ###'\n/*\n#/\n */\n```\n",
    "head_branch": "herecomments-formatting",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd9a3a21fa1e1f1a9fa3",
    "number": 3974,
    "body": "Sorry about the noise. One of those days.\n",
    "head_branch": "issue3958",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8e8f6d13bdb64bb9bcf876b2a358603ef9cf48a3 into b6667f0735df7419bad6fe829aeb32178e1aa58f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd9b3a21fa1e1f1a9fa4",
    "number": 3973,
    "body": "Just made it a bit cleaner.\n",
    "head_branch": "iss3958",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd9c3a21fa1e1f1a9fa5",
    "number": 3970,
    "body": "",
    "head_branch": "docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd9d3a21fa1e1f1a9fa6",
    "number": 3969,
    "body": "... and use it for \"reserved word can't be assigned\" errors. Fixes #2306.\n",
    "head_branch": "alias-origin",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd9e3a21fa1e1f1a9fa7",
    "number": 3968,
    "body": "If you passed an array of tokens (as opposed to a string of code) to\n`CoffeeScript.nodes`, its attempts to prettify error messages would break. Now\nit does not attempt to prettify error messages in that case anymore (because it\nis not possible to prettify the errors without a string of code).\n\nThe repl was affected by the above bug.\n\nFixes #3887.\n",
    "head_branch": "nodes-tokens-errors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfd9f3a21fa1e1f1a9fa8",
    "number": 3967,
    "body": "",
    "head_branch": "implicit-call-implicit-obj",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfda03a21fa1e1f1a9fa9",
    "number": 3966,
    "body": "Instead of mapping all generated spaces and semicolons and newlines\nto the source position (0,0), we avoid generating sourcemap information\nfor generated space-or-semicolon-only fragments.\n\n(In addition to shortening sourcemaps, this fixes a correctness issue\nwhere an empty fragment at the beginning of each line maps from (0,0),\nbut in a bare program, that position at the begining of the line\nshould map from the actual source line.  When this conflict occurred,\n(0,0) would win, resulting in an incorrect sourcemap, where each\ntop-level function call mapped to (0,0).)\n",
    "head_branch": "simplesourcemaps",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfda13a21fa1e1f1a9faa",
    "number": 3953,
    "body": "You can see history file remains open if you connect the repl via socket.\n\n```\nrepl = require 'coffee-script/repl'\nnet = require 'net'\n\nnet.createServer (socket) ->\n  repl.start\n    prompt: 'test> '\n    input: socket\n    output: socket\n    historyFile: __dirname + '/history'\n  .on 'exit', ->\n    socket.end()\n.listen 5001\n```\n",
    "head_branch": "fix_repl_fd_leak",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfda23a21fa1e1f1a9fab",
    "number": 3952,
    "body": "if repl.outputStream is a socket, it is closed when 'exit' event\noccurred, so write throws an exception\n\nThis is the test application code.\n\n```\nrepl = require 'coffee-script/repl'\nnet = require 'net'\n\nnet.createServer (socket) ->\n  repl.start\n    prompt: 'test> '\n    input: socket\n    output: socket\n  .on 'exit', ->\n    socket.end()\n.listen 5001\n```\n",
    "head_branch": "fix_write_after_fin",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfda33a21fa1e1f1a9fac",
    "number": 3946,
    "body": "Pass arguments to executable script unchanged if using \"#!/usr/bin/env\ncoffee\". (Previously, \"./test.coffee -abck\" would be turned into \"-a -b -c -k\",\nfor example.)\n\nFixes #1752.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CS2] Add #! support for executable scripts on Linux. (#3946)\n\n* Add #! support for executable scripts on Linux.\r\n\r\nPass arguments to executable script unchanged if using \"#!/usr/bin/env\r\ncoffee\". (Previously, \"./test.coffee -abck\" would be turned into \"-a -b -c -k\",\r\nfor example.)\r\n\r\nFixes #1752.\r\n\r\n* refactor option parsing\r\n\r\nclean up parsing code and in the process fix oustanding bug where coffeescript\r\nmodified arguments meant for an executable script\r\n\r\n* address comments\r\n\r\n* intermediate save\r\n\r\n* add note saying where OptionParser is used in coffee command\r\n\r\n* add some more work\r\n\r\n* fix flatten functions\r\n\r\n* refactor tests\r\n\r\n* make argument processing less confusing\r\n\r\n* add basic test\r\n\r\n* remove unused file\r\n\r\n* compilation now hangs\r\n\r\n* remove unnecessary changes\r\n\r\n* add tests!!!\r\n\r\n* add/fix some tests\r\n\r\n* clarify a test\r\n\r\n* fix helpers\r\n\r\n* fix opt parsing\r\n\r\n* fix infinite loop\r\n\r\n* make rule building easier to read\r\n\r\n* add tests for flag overlap\r\n\r\n* revamp argument parsing again and add more thorough testing\r\n\r\n* add tests, comment, clean unused method\r\n\r\n* address review comments\r\n\r\n* add test for direct invocation of shebang scripts\r\n\r\n* move shebang parsing test to separate file and check for browser\r\n\r\n* remove TODO\r\n\r\n* example backwards compatible warnings\r\n\r\n* add correct tests for warning 1\r\n\r\n* add tests for warnings\r\n\r\n* commit output js libs and update docs\r\n\r\n* respond to review comments\r\n\r\nalso add tests for help text\r\n\r\n* respond to review comments\r\n\r\n* fix example output\r\n\r\n* Rewrite argument parsing documentation to be more concise; add it to sidebar and body; add new output\r\n\r\n* Don’t mention deprecated syntax; clean up variable names"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfda43a21fa1e1f1a9fad",
    "number": 3942,
    "body": "See https://github.com/jashkenas/coffeescript/issues/3937\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfda53a21fa1e1f1a9fae",
    "number": 3931,
    "body": "This is a followup to #3867 adding -E (for eval + print) and making the -r option able to require global modules.\n\nAt last, I can do this:\n\n``` shell\n$ coffee -E '1 + 1'\n2\n```\n\nAnd this:\n\n``` shell\n$ coffee -r _=underscore -r fs -E \"_.sample(fs.readFileSync('/usr/share/dict/words', 'utf8').split('\\n'), 5)\"\n[ 'reassume', 'beachless', 'tourette', 'troublesome', 'unjostled' ]\n```\n\nHappy for feedback. In particular I think the global require hack is pretty gross, but it's the best thing I could find.\n",
    "head_branch": "cmdline-improvements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfda63a21fa1e1f1a9faf",
    "number": 3924,
    "body": "There are many false positive matches for code blocks made by the current coffee-script parser which are not really code blocks in the markdown. This fixes it by using a markdown parser to identify code blocks.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfda73a21fa1e1f1a9fb0",
    "number": 3922,
    "body": "Comparison of 100000 iterations heap memory ->\n\nBefore:\n![image](https://cloud.githubusercontent.com/assets/1727302/6888677/5ff097f6-d67d-11e4-865b-bd525734ab6e.png)\n\nAfter:\n![image](https://cloud.githubusercontent.com/assets/1727302/6888663/28eacdc6-d67d-11e4-9088-d8d35bc86602.png)\n\nScript source used and other comparisons [here](https://github.com/jashkenas/coffeescript/issues/3236#issuecomment-85102994)\n\nThis also results in being 5 times faster than it's predecessor.\n\ncloses #3236 \n",
    "head_branch": "apply-constructor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfda83a21fa1e1f1a9fb1",
    "number": 3911,
    "body": "To avoid uncaught error \"Cannot read property 'isTTY' of undefined\" with browserify and ect\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfda83a21fa1e1f1a9fb2",
    "number": 3893,
    "body": "Reattempt #3885.\n\nJust escaping the `]` this time.\n\n/cc @sstephenson @jashkenas @michaelficarra \n",
    "head_branch": "escape-literal-bracket-regexp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfda93a21fa1e1f1a9fb3",
    "number": 3892,
    "body": "Currently, browserify adds a shim of `process` to the global scope. The problem is that the shim created doesn't properly implement the process api, in particular it doesn't implement the `stdin` field. This leads to a `TypeError: Cannot read property 'isTTY' of undefined` in `helpers.js#syntaxErrorToString`.\n\nThe best solution is probably to also patch browserify but in this case the fix is quite small on the coffeescript side and makes the compiler usable in more environments.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdaa3a21fa1e1f1a9fb4",
    "number": 3888,
    "body": "coffee throw error when syntax error on coffee REPL environment.\nThis PR fix the following bug.\n\n``` coffee\ncoffee> {aaa:1,[1]}\nTypeError: undefined is not a function\n  at SyntaxError.syntaxErrorToString [as toString] (/usr/local/lib/node_modules/coffee-script/lib/coffee-script/helpers.js:226:39)\n  at Object.exports.updateSyntaxError (/usr/local/lib/node_modules/coffee-script/lib/coffee-script/helpers.js:198:27)\n  at Object.nodes (/usr/local/lib/node_modules/coffee-script/lib/coffee-script/coffee-script.js:37:23)\n  at REPLServer.replDefaults.eval (/usr/local/lib/node_modules/coffee-script/lib/coffee-script/repl.js:39:28)\n  at bound (domain.js:254:14)\n  at REPLServer.runBound [as eval] (domain.js:267:12)\n  at repl.js:279:12\n  at REPLServer.<anonymous> (/usr/local/lib/node_modules/coffee-script/lib/coffee-script/repl.js:79:9)\n  at REPLServer.emit (events.js:129:20)\n  at REPLServer.Interface._onLine (readline.js:214:10)\n  at REPLServer.Interface._line (readline.js:553:8)\n  at REPLServer.Interface._ttyWrite (readline.js:830:14)\n  at ReadStream.onkeypress (readline.js:109:10)\n  at ReadStream.emit (events.js:129:20)\n  at readline.js:1175:14\n  at Array.forEach (native)\n  at emitKeys (readline.js:993:10)\n  at ReadStream.onData (readline.js:910:14)\n  at ReadStream.emit (events.js:107:17)\n  at readableAddChunk (_stream_readable.js:163:16)\n  at ReadStream.Readable.push (_stream_readable.js:126:10)\n  at TTY.onread (net.js:529:20)\n```\n\nfix\n\n``` coffee\ncoffee> {a:1,[1]}\n[stdin]:1:7: error: unexpected [\n({a:1,[1]})\n\n      ^\ncoffee>\n```\n",
    "head_branch": "fix_typeerror_on_repl_syntaxerror",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdab3a21fa1e1f1a9fb5",
    "number": 3886,
    "body": "Reverts jashkenas/coffeescript#3885\n",
    "head_branch": "revert-3885-escape-literal-bracket-regexp",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdac3a21fa1e1f1a9fb6",
    "number": 3885,
    "body": "Regexps parsing regexps always causing trouble.\n\nIt'd be nice if we could escape the literal `[` in within the character class here to improve compatibility with \"stricter ES5 regexp engines\".\n\nFor context, I'm trying to get the CoffeeScript parser running under the [Duktape interpreter](http://duktape.org). It has a stricter regexp parser https://github.com/svaarala/duktape/issues/86 https://github.com/svaarala/duktape/issues/74\n\n/cc @sstephenson @jashkenas \n",
    "head_branch": "escape-literal-bracket-regexp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdad3a21fa1e1f1a9fb7",
    "number": 3883,
    "body": "fixes https://github.com/jashkenas/coffeescript/issues/3882\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdae3a21fa1e1f1a9fb8",
    "number": 3881,
    "body": "Filenames made of two extensions are not handled inside the \"getSourceMap\" function. The previous implementation using \"path.extname\" only return the first extension.\nI check and couldn't find any test checking filenumber while importing \".litcoffee\" or \".coffee.md\" so I'm not including any test either. Let me know if you wish to add one and i'll send you a complete push request.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdaf3a21fa1e1f1a9fb9",
    "number": 3877,
    "body": "for example:\n\n``` diff\n-test \"#1024\", ->\n+test \"#1024: destructure empty assignments to produce javascript-like results\", ->\n   eq 2 * [] = 3 + 5, 16\n```\n\nthe tests mostly covered edge cases. one had a `#TODO` to verify that the test was doing anything useful; I did that, and hopefully my description will prevent similar confusion from arising in future.\n",
    "head_branch": "ocd-test-description-details",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6645fbb895d26271ef827df084a0d2b29da4d5f5 into c2758da9ebee163de283c107a8b387e0942371c2"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfdb03a21fa1e1f1a9fba",
    "number": 3875,
    "body": "Avoid Error on https://github.com/jashkenas/coffeescript/issues/3874 . But doesn't work `repl` mode.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdb13a21fa1e1f1a9fbb",
    "number": 3873,
    "body": "In Internet Explorer version 8 and below is not supported getting of character from a string by using indexer. Instead of indexer need to use the `charAt` method.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdb23a21fa1e1f1a9fbc",
    "number": 3872,
    "body": "- Add link of changelog to`README.md` to find it more easily\n- `README` is migrated to use markdown here (https://github.com/jashkenas/coffeescript/pull/3393), However it seems accidentally reverted: https://github.com/jashkenas/coffeescript/commit/f0764096e932a988cd2a8612a65d513b1253aeac#diff-c47c7c7383225ab55ff591cb59c41e6b, So remove again.\n",
    "head_branch": "add-link-of-changelog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ef6f90753a7caaee86191554c25fe5d71685a38f into 8f5c77c3ce8e4d58e8c206425db8081bbf7ab906"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdb33a21fa1e1f1a9fbd",
    "number": 3871,
    "body": "\"As of jQuery 1.7, the .on() method provides all functionality required for attaching event handlers\" per http://api.jquery.com/on/ and I expect .bind will be deprecated at some point. Plus, the multiple meanings of \"bind\" in this section could be a bit confusing for newcomers.\n",
    "head_branch": "doc_tweak",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 88529bc3395e74150cff94d2edd528ebff986612 into f37f9d1eda843f9a01e5d88e7eaef821069f2777"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdb33a21fa1e1f1a9fbe",
    "number": 3867,
    "body": "Hi,\n\nI've added a Ruby-style `-r` option, which allows you to require a module before execution with `--eval` or `--interactive`:\n\n```\n$ touch mylib.coffee\n$ coffee -r ./mylib\ncoffee> mylib\n{}\n```\n\n```\n$ coffee -r crypto -e 'console.log crypto.createHash(\"sha1\").update(\"hello\").digest(\"hex\")'\naaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d\n```\n\n```\n$ # You need to have underscore in ./node_modules or ~/.node_modules\n$ coffee -r _=underscore -e 'console.log _.intersection [1,2,3], [3,4,5]'\n[ 3 ]\n```\n\nThe first example has been particularly useful for me when I want to use the repl to play around with a module I'm writing. Having to type `mylib = require './mylib'` every time is a pain, and it's usually too far back in the command history to find easily.\n\nThe second and third examples go to a vision of the coffee command being suitable for quick shell one-liners, and if that sounds good I'd also like to suggest adding the global `node_modules` to the search path when you use `-e` and adding a `-E` eval+print option like node's `-p` so you don't have to type `console.log` so much. (happy to do pull requests for those too)\n\nIf you're not a fan of this approach, I could alternatively solve my main pain point by allowing `-e` and `-i` to coexist, in which case example 1 would look like: `coffee -e 'mylib = require \"./mylib\"' -i` which I think is less nice, but also less code.\n\nI'm happy to add tests and clean up any style issues, but I wanted to get opinions before I went any further.\n",
    "head_branch": "require-option",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 836175baab1eb0fa58125f703daf6fe296b40cf6 into 7395ac1d4fbcf729215fb0c8944d366ed75ea00a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdb43a21fa1e1f1a9fbf",
    "number": 3861,
    "body": "",
    "head_branch": "heredoc-undefined",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdb53a21fa1e1f1a9fc0",
    "number": 3858,
    "body": "See https://github.com/jashkenas/coffeescript/issues/3855\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 25d97aa1365baee5aa44b647fda106751a0669dd into 7c8849cc211768365a4315c0047af47081a097aa"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdb63a21fa1e1f1a9fc1",
    "number": 3854,
    "body": "Fixes https://github.com/jashkenas/coffeescript/issues/3837\n",
    "head_branch": "fixyieldreturn",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdb73a21fa1e1f1a9fc2",
    "number": 3853,
    "body": "I don't think this will actually appear in any real code, but I found this issue when I was adding more tests (see https://github.com/jashkenas/coffeescript/pull/3852) and fixed it.\n",
    "head_branch": "fixyieldthrow",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e3f6e1995068527efc0a2776e4eeff69641a7239 into b49b41320ef21bba3b17e3c0374d59ee02103129"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdb83a21fa1e1f1a9fc3",
    "number": 3852,
    "body": "more tests as requested per https://github.com/jashkenas/coffeescript/issues/3837#issuecomment-73723672\n",
    "head_branch": "moretests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdb93a21fa1e1f1a9fc4",
    "number": 3851,
    "body": "While looking into the issues that were plaguing reactjs/react-ruby (https://github.com/jashkenas/coffeescript/issues/3829#issuecomment-74134197) I found that the browser JS file did not match the compiled output from the 1.9.0 source code. I believe this is why the error was occurring.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdba3a21fa1e1f1a9fc5",
    "number": 3850,
    "body": "Now the same hack as for reserved identifier tokens in the lexer is used\ninstead.\n\n@swang Does this solve your problem?\n",
    "head_branch": "implicit-object-start-token",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 57846ea5c0647a5abbd107b1e8137d9742ee5aff into 8130e63e43d3932180a90049c34154b322086a1c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdbb3a21fa1e1f1a9fc6",
    "number": 3849,
    "body": "",
    "head_branch": "regex-end-invalid-escape",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdbc3a21fa1e1f1a9fc7",
    "number": 3842,
    "body": "Updated the copyright from `2014` to be `2015`.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e0e4967ad8c17c8053411494f3f6b9a9239d1027 into 53c789159937ba432f179b1a5b2bea0d0057a022"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdbd3a21fa1e1f1a9fc8",
    "number": 3841,
    "body": "",
    "head_branch": "last",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdbe3a21fa1e1f1a9fc9",
    "number": 3840,
    "body": "The following is now allowed:\n\n```\no =\n  a: 1\n  b: 2\n  \"#{'c'}\": 3\n  \"#{'d'}\": 4\n  e: 5\n  \"#{'f'}\": 6\n  g: 7\n```\n\nIt compiles to:\n\n```\no = (\n  obj = {\n    a: 1,\n    b: 2\n  },\n  obj[\"\" + 'c'] = 3,\n  obj[\"\" + 'd'] = 4,\n  obj.e = 5,\n  obj[\"\" + 'f'] = 6,\n  obj.g = 7,\n  obj\n);\n```\n- Closes #3039. Empty interpolations in object keys are now _supposed_ to be\n  allowed.\n- Closes #1131. No need to improve error messages for attempted key\n  interpolation anymore.\n- Implementing this required fixing the following bug: `(\"\" + a): 1` used to\n  error out on the colon, saying \"unexpected colon\". But really, it is the\n  attempted object key that is unexpected. Now the error is on the opening\n  parenthesis instead.\n- However, the above fix broke some error message tests for regexes. The easiest\n  way to fix this was to make a seemingly unrelated change: The error messages\n  for unexpected identifiers, numbers, strings and regexes now say for example\n  'unexpected string' instead of 'unexpected \"\"\"some #{really long} string\"\"\"'.\n  In other words, the tag _name_ is used instead of the tag _value_.\n  This was way easier to implement, and is more helpful to the user. Using the\n  tag value is good for operators, reserved words and the like, but not for\n  tokens which can contain any text. For example, 'unexpected identifier' is\n  better than 'unexpected expected' (if a variable called 'expected' was used\n  erraneously).\n- While writing tests for the above point I found a few minor bugs with string\n  locations which have been fixed.\n",
    "head_branch": "dynakeys",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdbf3a21fa1e1f1a9fca",
    "number": 3834,
    "body": "- Erraneous tokens are now fully underlined with ^:s.\n- The error messages are now a bit more consistent.\n",
    "head_branch": "better-lexer-errors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 213225418a7212c864a72b55825d1d571da39fe2 into 3b3e52097a4fc6ee181b7e18ffa52a5efc5a39b3"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfdc03a21fa1e1f1a9fcb",
    "number": 3833,
    "body": "- Invalid `\\x` and `\\u` escapes now throw errors.\n- U+2028 and U+2029 (which JavaScript treats as newline characters) are now\n  escaped to `\\u2028` and `\\u2029`, respectively.\n- Octal escapes are now forbidden not only in strings, but in regexes as well.\n- `\\0` escapes are now escaped if needed (so that they do not form an octal\n  literal by mistake). Note that `\\01` is an octal escape in a regex, while `\\1`\n  is a backreference. (Added a test for backreferences while at it.)\n- Fixed a bug where newlines in strings weren't removed if preceded by an\n  escaped character.\n",
    "head_branch": "escapes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 72ceec5680c5fe1458fe552d86063dbb7639432b into 5a220d4e13cc755d0ff3d6d4f6850885cd6bcb3d"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfdc13a21fa1e1f1a9fcc",
    "number": 3830,
    "body": "The third element in a token should just be an object containing line number and column info. This PR fixes the problem with one of the tokens being set incorrectly.\n",
    "head_branch": "fix_incorrect_token",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 92e5ab2857286f7055779a4d80ef43b2e38da158 into 64632e3332184c1b1d8d4ac8ddcde2344220894b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdc23a21fa1e1f1a9fcd",
    "number": 3828,
    "body": "This change addresses  #3520. I wasn't sure if there is a consensus on that issue, but I think that it's a simple change that could clean up code in some places. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdc23a21fa1e1f1a9fce",
    "number": 3827,
    "body": "",
    "head_branch": "unexpected-regex",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ffa25aae77b7e4526b96eb3c5a197fbe4b2e74c3 into c0e1f23f23b49d60016b51312996a069543eec96"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfdc33a21fa1e1f1a9fcf",
    "number": 3826,
    "body": "",
    "head_branch": "string-locations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f8c366c4791ded6eb5441eee9275b24fc23fe25e into 934bd2acc7a328ef795d2e5f060146f5deb5cb95"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfdc43a21fa1e1f1a9fd0",
    "number": 3821,
    "body": "For example, `ref` not `_ref`. It's cleaner.\n\nThis also fixes #3816.\n",
    "head_branch": "no-underscore",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4d7a0d2470c57308f7de4ad59278a825d072baf0 into c2abe253a1a6f6637e2f2fe53cc374e4282cccd1"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfdc53a21fa1e1f1a9fd1",
    "number": 3814,
    "body": "\"npm\" is not an abbreviation for \"Node Package Manager\". It is a recursive bacronymic abbreviation for \"npm is not an acronym\". See https://docs.npmjs.com/misc/faq for details.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdc63a21fa1e1f1a9fd2",
    "number": 3813,
    "body": "I'm aware of #3757 but I don't think that we should speak in terms of the future ES7, let stay in the pragmatic domain. This PR is intended to start a discussion and research in this field.\nI've discovered that await semantics can be achieved by a tiny utility, much more simple than that of #3757 \nHere it is:\n\n``` javascript\n    function (fn) {\n      return function () {\n        var gen = fn.apply(this, arguments);\n        try {\n          return resolved();\n        } catch (e) {\n          return Promise.reject(e);\n        }\n        function resolved(res) { return next(gen.next(res)); }\n        function rejected(err) { return next(gen.throw(err)); }\n        function next(ret) {\n          var val = ret.value;\n          if (ret.done) {\n            return Promise.resolve(val);\n          } else try {\n            return val.then(resolved, rejected);\n          } catch (_) {\n            throw new Error('Expected Promise/A+');\n          }\n        }\n      };\n    }\n```\n\nAlso small tweaks in compiler enable async'ed functions to be used as inheritable methods of CS classes, and even more - as constructors (in both cases `super` is available), so the inheritance and extends will not cause any issues (like they do for ordinary generators when used with `co`).\n\nI've chosen a bit ridiculous syntax for async'ed functions: `-<>` and `=<>`  and kept `yield` for resolving promises (instead of `await`). This is not critical and easily can be refactored into `await` and `await return` style as of @GabrielRatener (and keep `->` and `=>`).\n\nYou can review the test (/test/generators/async).\n\nAlso I've moved all generator-related test stuff into separate directory, and removed --harmony flag sniffing (is my way of detecting generators valid enough?) - this is separate commit.\n\nAlso in the separate commit I've extended testing framework to be capable for dealing with promises.\n\nThe main question is: is the proposed semantics useful enough to be included into language in some way?\n\nI think that  generators+promises coding patterns will be very popular at the server side (especially with io.js)\nand there are so tiny conservative changes needed from the language to enable brand new type of libraries/packages to emerge.\n\n@GabrielRatener, @jashkenas, @alubbe, @michaelficarra and other guys - what are you thinking about it?\n\nP.S. All discussed things are already implemented in this PR\n",
    "head_branch": "diamond",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdc73a21fa1e1f1a9fd3",
    "number": 3812,
    "body": "Node comes with npm installed and \"npm\" is not an abbreviation for \"Node Package Manager\".\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f288d20409ab130fb7139cd2a28eee1a3583fe6e into dca915af60d54f27747bbfa4c2bbcb487c256206"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdc83a21fa1e1f1a9fd4",
    "number": 3808,
    "body": "As evidenced in #3804, commit 8ab15d7 broke the CoffeeScript API. The REPL uses\nthose APIs, but wasn't updated in that commit. Still, that shouldn't have\n_broken_ the REPL. The reason it broke is because the added _option_\n'referencedVars' wasn't actually _optional;_ if it was omitted code that relies\non it being set broke. This commit defaults that option to an empty array, which\nmakes things behave exactly like before when the 'referencedVars' option is\nomitted.\n",
    "head_branch": "api-break-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 54a45603400aa25af21cec1cf604e6f4bd242773 into 518d7c16b735f14362d5b1590db3c59ab50a474f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdc93a21fa1e1f1a9fd5",
    "number": 3807,
    "body": "Supersedes #3805. Here is a comparison of master, #3805 and this commit:\n\n```\n# master\n$ bin/coffee\ncoffee> 1 %% 2\nTypeError: Array.prototype.indexOf called on null or undefined\n\n# #3805\n$ bin/coffee\ncoffee> 1 %% 2\n1\ncoffee> (_results = null; i) for i in [1, 2, 3]\nTypeError: Cannot call method 'push' of null\n\n# this commit\n$ bin/coffee\ncoffee> 1 %% 2\n1\ncoffee> (_results = null; i) for i in [1, 2, 3]\n[ 1, 2, 3 ]\n```\n",
    "head_branch": "repl-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8ed691e2667708c98fd3cfd21d41c051d2307033 into 68c0e2dc0f7278f83ccec0b0c69febf0b0440410"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdca3a21fa1e1f1a9fd6",
    "number": 3805,
    "body": "This fixes #3804 \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdcb3a21fa1e1f1a9fd7",
    "number": 3802,
    "body": "#3761 appears to only be an issue when the multiline comment is indented, and it appears at the end of an object definition\n\nincludes test\n\nIssue #3735 appears to be unaffected by this patch - that may not be caused by rewriter.coffee at all.\n",
    "head_branch": "multiline_comment_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdcc3a21fa1e1f1a9fd8",
    "number": 3800,
    "body": "Make coffee completely independent.\nAs such a great project, coffee should keep as light as possible. Let's decouple the last one~\n",
    "head_branch": "decouple_mkdirp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 90a1cbac4938dc510c7a6e69aad7b9dc5a507872 into 06e8be5d945b09de02ee2e235efa53c21f21b7b2"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdcd3a21fa1e1f1a9fd9",
    "number": 3798,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 42dde388426928be219a067d73d89fb90f814d9e into 7d6f6174d5311354683540c00f88c7c3b52d4e72"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdcd3a21fa1e1f1a9fda",
    "number": 3794,
    "body": "Since zaach/jison commit 3548861b, `parser.lexer` is never modified anymore (a\ncopy of it is made, and that copy is modified instead). CoffeeScript itself\nmodifies `parser.lexer` and then accesses those modifications in the custom\n`parser.yy.parseError` function, but that of course does not work anymore. This\ncommit puts the data that `parser.yy.parseError` needs directly on the `parser`\nso that it is not lost.\n\nSupersedes #3603. Fixes #3608 and zaach/jison#243.\n",
    "head_branch": "jison-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 28c07d30cbd2add7ee762c7d532b2c9c972e441a into 669e7fed1008fa8a07b240434ab25f5d219a24ee"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdce3a21fa1e1f1a9fdb",
    "number": 3792,
    "body": "No matter if they have interpolations or not.\n",
    "head_branch": "issue-3194",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdcf3a21fa1e1f1a9fdc",
    "number": 3791,
    "body": "",
    "head_branch": "issue-3502",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdd03a21fa1e1f1a9fdd",
    "number": 3790,
    "body": "Using the static property `Scope.root` for the top-level scope of a file is a\nhack, which makes it impossible to have several independent `Scope` instances\nat the same time (should we ever need that).\n\nThis commit makes every instance have a reference to its root instead.\n",
    "head_branch": "scope-root",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 22f19522fffd20c95cb3edebcb0ce009f5fac25e into 9fa77af57698a99d43d401940a4444eaabd77384"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdd13a21fa1e1f1a9fde",
    "number": 3788,
    "body": "",
    "head_branch": "unexpected-call-end",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdd23a21fa1e1f1a9fdf",
    "number": 3787,
    "body": "Instead of compiling to `\"\" + + (+\"-\");`, `\"#{+}-\"'` now gives an appropriate\nerror message:\n\n```\n[stdin]:1:5: error: unexpected end of interpolation\n\"#{+}-\"\n    ^\n```\n\nThis is done by _always_ (instead of just sometimes) wrapping the interpolations\nin parentheses in the lexer. Unnecessary parentheses won't be output anyway.\n\nI got tired of updating the tests in test/location.coffee (which I had enough of\nin #3770), which relies on implementation details (the exact amount of tokens\ngenerated for a given string of code) to do their testing, so I refactored them\nto be less fragile.\n",
    "head_branch": "single-token-interpolation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdd33a21fa1e1f1a9fe0",
    "number": 3786,
    "body": "The following two lines might seem equivalent:\n\n```\nfor n in [1, 2, 3] by  a then a = 4; n\nfor n in [1, 2, 3] by +a then a = 4; n\n```\n\nBut they used not to be, because `+a` was cached into a `_ref`, while the plain\n`a` wasn’t. Now even simple identifiers are cached, making the two lines\nequivalent as expected.\n",
    "head_branch": "loop-safety",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdd43a21fa1e1f1a9fe1",
    "number": 3785,
    "body": "As discussed in https://github.com/jashkenas/coffeescript/issues/3039#issuecomment-68916918.\nThis is the first step to implement dynamic object literal keys (see #3597).\n\nThis also fixes #1392.\n\nIn short, `super` is now allowed:\n\n```\n# in class definitions:\nclass A\n  instanceMethod: -> super\n  @staticMethod: -> super\n  @staticMethod2 = -> super\n\n# in assignment where the next to last property is 'prototype':\nA::m = -> super\nA['prototype'].m = -> super\na.b()[5]::m = -> super\nA::[x()] = -> super\nclass B\n  @::m = -> super\n```\n",
    "head_branch": "super",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdd53a21fa1e1f1a9fe2",
    "number": 3784,
    "body": "",
    "head_branch": "unique-generated-vars",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdd63a21fa1e1f1a9fe3",
    "number": 3783,
    "body": "Allow the `by c` part in `for [a..b] by c then`.\n\nContinue disallowing a `when d` part, since it makes no sense having a guard\nthat isn't given access to anything that changes on every iteration.\n",
    "head_branch": "issue-3671",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a63009fccbce507fc207b86f67a07a55a368cc3e into e769423d525d7a2131347070ac5dfb2a200a1409"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdd73a21fa1e1f1a9fe4",
    "number": 3782,
    "body": "A regex may not follow a specific set of tokens. These were already known before\nin the `NOT_REGEX` and `NOT_SPACED_REGEX` arrays. (However, I've refactored them\nto be more correct and to add a few missing tokens). In all other cases (except\nafter a spaced callable) a slash is the start of a regex, and may now start with\na space or an equals sign. It’s really that simple!\n\nA slash after a spaced callable is the only ambigous case. We cannot know if\nthat's division or function application with a regex as the argument. The\nspacing determines which is which:\n\nSpace on both sides:\n- `a / b/i`  -> `a / b / i`\n- `a /= b/i` -> `a /= b / i`\n\nNo spaces:\n- `a/b/i`    -> `a / b / i`\n- `a/=b/i`   -> `a /= b / i`\n\nSpace on the right side:\n- `a/ b/i`   -> `a / b / i`\n- `a/= b/i`  -> `a /= b / i`\n\nSpace on the left side:\n- `a /b/i`   -> `a(/b/i)`\n- `a /=b/i`  -> `a(/=b/i)`\n\nThe last case used to compile to `a /= b / i`, but that has been changed to be\nconsistent with the `/` operator. The last case really looks like a regex, so it\nshould be parsed as one.\n\nMoreover, you may now also space the `/` and `/=` operators with other\nwhitespace characters than a space (such as tabs and non-breaking spaces) for\nconsistency.\n\nLastly, unclosed regexes are now reported as such, instead of generating some\nother confusing error message.\n\nIt should perhaps also be noted that apart from escaping (such as `a /\\ b/`) you\nmay now also use parentheses to disambiguate division and regex: `a (/ b/)`. See\nhttps://github.com/jashkenas/coffeescript/issues/3182#issuecomment-26688427.\n",
    "head_branch": "regex",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdd83a21fa1e1f1a9fe5",
    "number": 3777,
    "body": "Before commit c056c93e `Op::isComplex()` used to return true always. As far as I\nunderstand, that commit attempts to exclude code such as `+1` and `-2` from\nbeing marked as complex (and thus getting cached into `_ref` variables\nsometimes). CoffeeScript is supposed to generate readable output so that choice\nis understandable. However, it also excludes code such as `+a` (by mistake I\nbelieve), which can cause `a` to be coerced multiple times. This commit fixes\nthis by only excluding unary + and - ops followed by a number.\n",
    "head_branch": "unary-plus-minus-refs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 24398774fc1b2254d083f73745faee49ad166e7b into e0ad0d795da4f98a56b4f6a2749b4cf1656ec74d"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdd93a21fa1e1f1a9fe6",
    "number": 3774,
    "body": "It is possible to match only valid JavaScript identifiers with a really long\nregex (like coco and CoffeeScriptRedux does), but CoffeeScript uses a much\nsimpler one, which allows a bit too much.\n\nQuoting jashkenas/coffeescript#1718 #issuecomment-2152464 @jashkenas:\n\n> But it still seems very much across the \"worth it\" line. You'll get the\n> SyntaxError as soon as it hits JS, and performance aside -- even the increase\n> in filesize for our browser coffee-script.js lib seems too much, considering\n> this is something no one ever does, apart from experimentation.\n\nIn short, CoffeeScript treats any non-ASCII character as part of an identifier.\nHowever, unicode spaces should be excluded since having blank characters as part\nof a _word_ is very confusing. This commit does so, while still keeping the\nregex really simple.\n",
    "head_branch": "unicode-spaces",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9ec427ba806c08cc7f1cc7bfb0787e143ddece6b into c478f283f4c5da1ca643b9d4c8721007c3bf0c8e"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfdda3a21fa1e1f1a9fe7",
    "number": 3771,
    "body": "I'm resubmitting this pull request, I've used a fresh fork of the latest coffeescript master branch and applied my previous changes.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8e299b09cc4a16697ea754241cf31972437ec970 into b70f6571bde671f0b990a35400aae38c922e222c"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfdda3a21fa1e1f1a9fe8",
    "number": 3770,
    "body": "See the commit messages for details.\n\nI’m sorry about the size of the first commit, but I don’t think I could have split it up.\n\nFixes #3621, #3301, #3394, #3348, #2388, #2321.\n",
    "head_branch": "interpolations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ae6df88c5c15c6c69efb407ffa10b6c5c387bb97 into 8e4fb1b9378a08cbeafd3659995de178d4c81588"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfddb3a21fa1e1f1a9fe9",
    "number": 3766,
    "body": "This addresses at least #3309 and #3738 and has to do with parenthesized existential operator. After turning it back and forth several times, I couldn't find anything more elegant than this. I'm not sure if it requires something more fundamental to make the check with some more beauty. Additionally, in what case it could possibly generate extra parentheses now?\n",
    "head_branch": "3738",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfddc3a21fa1e1f1a9fea",
    "number": 3763,
    "body": "I kept the changes at a minimum and simply introduced additional tags.\nStill working on test cases for this.\n\nHere is a sample coffee-script\n\n``` coffeescript\na = ->>\n    foo = 2\n    bar = 3\n\nb = =>>\n    foo = 2\n    bar = 3\n```\n\nwhich gets compiled to\n\n``` javascript\n// Generated by CoffeeScript 1.8.0\nvar a, b;\n\na = function() {\n  var bar, foo;\n  foo = 2;\n  bar = 3;\n};\n\nb = (function(_this) {\n  return function() {\n    var bar, foo;\n    foo = 2;\n    bar = 3;\n  };\n})(this);\n```\n",
    "head_branch": "gh-3762",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfddd3a21fa1e1f1a9feb",
    "number": 3758,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdde3a21fa1e1f1a9fec",
    "number": 3757,
    "body": "Temporary fix for bug #3750, tried it, it works.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Implicit Async Functions (#3757)\n\n* changed jison acceptable versions\r\n\r\n* added await support\r\n\r\n* wrong function bug fix\r\n\r\n* added tests for async/await\r\n\r\n* invalid to have await, yield(from) in same function\r\n\r\n* changed error handling and tests\r\n\r\n* bug fix\r\n\r\n* made error handling test more rigorous\r\n\r\n* consolidated harmony test files\r\n\r\n* added async constructor support and tests\r\n\r\n* removed .orig files\r\n\r\n* Fixed browser testing issue\r\n\r\n* Minor cleanup\r\n\r\n* Async test-suite and Cake support, simplified/removed funky tests\r\n\r\n* Skip async/await tests when not supported in runtime\r\n\r\n* cleanup\r\n\r\n* Replaced polyfill with native JS async/await\r\n\r\n* Oops\r\n\r\n* Make 'async' reserved word\r\n\r\n* Remove all async polyfills\r\n\r\n* fix merge conflict\r\n\r\n* make async testing opt-in\r\n\r\n* restore test, remove confusing polyfill language\r\n\r\n* Revert changes to test runners\r\n\r\n* Only run async tests where async/await is supported (Node 7+ with --harmony, for now)\r\n\r\n* remove 'async' from JS reserved words\r\n\r\n* The async tests should use their own special async-capable version of `global.test`, which is only loaded for the async tests and only loaded by async-capable environments\r\n\r\n* Reverting rename of `async`, it’s not a reserved word so there’s no longer a need for this change\r\n\r\n* async test refactoring and additions\r\n\r\n* oops\r\n\r\n* sync\r\n\r\n* better error reporting for `await`\r\n\r\n* more stuff geoffrey wants\r\n\r\n* fixed litcoffee tests\r\n\r\n* change test title"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfddf3a21fa1e1f1a9fed",
    "number": 3755,
    "body": "This is causing bugs in a project I'm working on that emulates Node's require functionality. \n\nI would be very appreciative of anyone who is able to provide me some documentation on the value/meaning/... of 'this' inside normal Node modules. Then I might be able to implement a similar reference in my own project.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfde03a21fa1e1f1a9fee",
    "number": 3754,
    "body": "I was looking at some of the strict tests added in 66eb186a74376acded0f637dd504cfc98fc6d44b (by @geraldalewis) and noticed some are generating invalid output. The test only checks if the code can be generated but not evaluated.\n\nThere was two different types of errors.\n\n``` coffee\n(@case, _case) ->\n```\n\ngenerates\n\n``` js\n(function(_case, _case) {\n  this[\"case\"] = _case;\n});\n```\n\nSo theres a bug in the variable renaming here.\n\nThe second is a little worse.\n\n``` coffee\n(@case, _case...) ->\n```\n\ngenerates\n\n``` js\nvar __slice = [].slice;\n\n(function() {\n  var case, _case;\n  _case = arguments[0], _case = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n  this[\"case\"] = _case;\n});\n```\n\nAn unused and reversed local is created for `case`.\n\nI haven't looked into a fix yet, but I figured I'd open an patch with tests and maybe someone much more familiar will know what to do.\n",
    "head_branch": "reserved-keyword-params",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfde13a21fa1e1f1a9fef",
    "number": 3748,
    "body": "Add the vector logo files as an SVG to the images directory.  This will aid future site \"retina-tizing\" and other high-dpi logo uses.\n\nResolves #3496 and #3627 \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 931b74e4496a352d5a8d09f8d8b47d211654d1e8 into 4199f4f325fb1eb3fb82576069a70996791f99d0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfde23a21fa1e1f1a9ff0",
    "number": 3734,
    "body": "Fixes https://github.com/jashkenas/coffeescript/issues/3665\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5950d6328d38e2c548bec6438c8f18552c9d06cd into 485aa8efcf9c02566dc2e38572627eb7947eaf46"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfde33a21fa1e1f1a9ff1",
    "number": 3731,
    "body": "While this PR might seem like an uncalled attempt of bringing [a weird operator from JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void) nobody seems to miss back to CoffeeScript, it's _actually_ a little stab at trying to solve #2477, i.e., \"Remove implicit returns?\".\n\nBut without removing implicit returns :smiley_cat:\n### tl;dr\n\n`void` allows fixing the problems [cited by @Zyphrax](https://github.com/jashkenas/coffeescript/issues/2477#issuecomment-61563076) in an arguably more elegant way than adding `return`s everywhere. For example, [this tricky jQuery event handler problem](http://jsfiddle.net/63fUY/) ([source](https://news.ycombinator.com/item?id=5389245)) can be fixed by \"voiding\" the last boolean assignment:\n\n``` coffeescript\n# Toggle when the toggle button is clicked\nnextState = off\n$('#btn').click ->\n  $('#state').text if nextState then \"On\" else \"Off\"\n  void nextState = !nextState\n```\n\n↓\n\n``` javascript\nvar nextState;\n\nnextState = false;\n\n$('#btn').click(function() {\n  $('#state').text(nextState ? \"On\" : \"Off\");\n  nextState = !nextState;\n});\n```\n\nOr, if you want to avoid [creating a big array](http://programmaticallyspeaking.com/why-i-hate-implicit-return-in-coffeescript.html) because the last expression of your function is a `for` comprehension, `void` can save you there too!\n\n``` coffeescript\nx = (n) ->\n  void for i in [0...n]\n    dostuff i\n```\n\n↓\n\n``` javascript\nvar x;\n\nx = function(n) {\n  var i, _i;\n  for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {\n    dostuff(i);\n  }\n};\n```\n\nThis way, `void` retains basically the same meaning from JS: it evaluates the expression we pass it and returns `undefined`, with the added benefit of the compiler being able to avoid generating a `return` statement if `void` is the last expression of a block because it knows about its semantics.\n### But why not a different function symbol?\n\nI actually [was in favour](https://github.com/jashkenas/coffeescript/pull/2726#issuecomment-14139799) of using `!->` or `-/>` to denote procedures. But it has quite a nasty problem: the combinatorial complexity of having various \"modifier\" behaviours for functions. Now we have only one modifier, whether the function is \"bound\" or not, so we have two symbols: `->` and `=>`. Adding an extra modifier, whether it returns useful values or not, would require having _four_ symbols: `->`, `=>`, `!->` and `!=>`. Now image if we decided to implement generators as yet another modification of the function syntax... yes, _eight_(!!!) symbols: `->`, `=>`, `!->`, `!=>`, `->*`, `=>*`, `!->*` and `!=>*`.\n\nIt's not only about the grammar complexity, but mostly about the cognitive load of having to pick between many different function types whenever you want to write a damn function. Right now the picking is pretty easy: always pick `->`, and if later on i discover that i need the `this` of the parent context, change it to `=>`. Done. And it should stay that simple :wink: \n### So, why `void` then?\n\nI don't know, it just occurred to me when considering alternative solutions for the sour #2477 issue. At first i thought it was a stupid idea, but after giving it a try it started to make some sense.\n\nFirst, i think it fits Coffee's philosophy of \"everything is an expression\" quite nicely. `void <expr>` is itself just an expression, that just happens to always be `undefined`.\n\nAlso, i think that Coffee/Ruby programmers develop a habit of looking at the bottom of blocks to see what they evaluate to. Ideas like the `!->` function syntax or [specifying the return value before the function body](https://github.com/jashkenas/coffeescript/issues/3583) break that expectation, while `void` doesn't.\n\nThe fact that `void` concept is independent of the \"function type\" is also a big win. It avoids the possible combinatorial explosion of complexity mentioned above.\n\nAnd it's also worth noting that `void` is already a part of JavaScript; it's not a new concept. It's even a reserved keyword on today's CoffeeScript, so it's not like this change could break code that uses `void` as an identifier.\n### Sooo... should i then start using void at the end of most of my functions?\n\nSimply put: no! I mean, you can. But it's not in the spirit of this proposal to have `void` as something one would use in the general case of writing procedural functions. \n\nFor example, it doesn't make sense to have all your test case functions end on `void` because you don't care about the return value. If you don't care, just leave the last expression be returned, and trust that the testing framework won't care about that return value either.\n\n`void` should be used sparingly, to mark cases where it _is_ important that the function returns undefined:\n\n``` coffeescript\nsecretLocked = yes\n$('#hidden-secret-unlocker').click -> void secretLocked = no # We don't want the click event to stop bubbling up.\n```\n\n---\n\nWell, that's all, i hope this proposal can bring an adequate solution for people having trouble with implicit returns, while at the same time not make the language much uglier for people not having problems with them.\n\nWhat do you people think? :smiley_cat: \n",
    "head_branch": "void",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfde43a21fa1e1f1a9ff2",
    "number": 3715,
    "body": "",
    "head_branch": "gh-pages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 71c66c0237695736f46dbbf4496a0f106231703b into a748ab4d30ba7f413680c7bef57c783f627dbb51"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfde53a21fa1e1f1a9ff3",
    "number": 3713,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfde63a21fa1e1f1a9ff4",
    "number": 3706,
    "body": "By using `data-src` instead, this would avoid double script loading.\n",
    "head_branch": "script-data-src",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfde73a21fa1e1f1a9ff5",
    "number": 3703,
    "body": "Is it possible to add support for bower?\n#3701\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4035e7caabe5008ea28cd43e10308ab7180a3ff4 into f2a3f7507ea944b7049ea514e3177dc1ff6807a9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfde83a21fa1e1f1a9ff6",
    "number": 3697,
    "body": "--inline-map\nPuts a base64-encoded (v3)sourcemap at the end of a .js file\nsee #3678\nWorks in Chrome, doesn't work in FF.\nHad to add a new dependency: btoa (for base64 encoding).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfde93a21fa1e1f1a9ff7",
    "number": 3696,
    "body": "Using this module https://github.com/evanw/node-source-map-support\n\nbin/coffee -c -m --nodejsmap test.cs\nnodejs test.js\n\nauiua()\n^\nReferenceError: auiua is not defined\n    at Object.<anonymous> (/home/xapantu/coffeescript/test.cs:1:1)\n    at Object.<anonymous> (/home/xapantu/coffeescript/test.cs:1:1)\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Function.Module.runMain (module.js:497:10)\n    at startup (node.js:119:16)\n    at node.js:902:3\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdea3a21fa1e1f1a9ff8",
    "number": 3677,
    "body": "Fixes https://github.com/jashkenas/coffeescript/issues/3674 & https://github.com/jashkenas/coffeescript/pull/3676\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdeb3a21fa1e1f1a9ff9",
    "number": 3676,
    "body": "I've added a test case for the `yield` precedence. Discussed in https://github.com/jashkenas/coffeescript/issues/3674\n\n``` coffeescript\n test \"symbolic operators has precedence over the `yield`\", ->\n\n  symbolic   = '+ - * / << >> & | || && ** ^ // or and'.split ' '\n  compound   = (\"#{op}=\" for op in symbolic)\n  relations  = '< > == != <= >= is isnt'.split ' '\n\n  operators  = [symbolic..., '=', compound..., relations...]\n\n  collect = (gen) -> ref.value until (ref = gen.next()).done\n\n  values = [0, 1, 2, 3]\n\n  for op in operators\n\n    expression = \"i #{op} 2\"\n\n    yielded    = CoffeeScript.eval \"(arr) ->  yield #{expression} for i in arr\"\n    mapped     = CoffeeScript.eval \"(arr) ->       (#{expression} for i in arr)\"\n\n    expected   = mapped values\n    actual     = collect yielded values\n\n    arrayEq actual, expected\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ec44aba71ad1e44116d212b434574a414461923c into 158ca0d86958afa16ffd87ef629744feb74ab05c"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdeb3a21fa1e1f1a9ffa",
    "number": 3661,
    "body": "The customFds option in spawn is deprecated.\nhttp://nodejs.org/docs/latest/api/child_process.html#child_process_child_process_spawn_command_args_options\n\nAlthough it's actually converted for now, I don't want to see the annoying deprecated message.\nhttps://github.com/joyent/node/blob/master/lib/child_process.js#L808\n\nCould you consider to merge this?\n\n<!-- Reviewable:start -->\n\n[<img src=\"https://reviewable.io/review_button.png\" height=40 alt=\"Review on Reviewable\"/>](https://reviewable.io/reviews/jashkenas/coffeescript/3661)\n\n<!-- Reviewable:end -->\n",
    "head_branch": "fix-deprecated-option",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdec3a21fa1e1f1a9ffb",
    "number": 3638,
    "body": "Current version of CS may produce an invalid JS due to its block comments compilation feature.\n\nFor example, the following presumably valid CS\n\n``` coffee\n###\n#/foo/bar/baz\n###\n```\n\n[compiles to](http://coffeescript.org/#try:%23%23%23%0A%23%2Ffoo%2Fbar%2Fbaz%0A%23%23%23%0A) invalid JS\n\n``` js\n/*\n */foo/bar/baz\n */\n```\n\nI'm not sure how it should be fixed.\nProbably, CS compiler should force a whitespace between `*` and the first symbol of a block comment.\nBut maybe there is a better solution.\n\n**P.S. [Originally posted on StackOverflow](http://stackoverflow.com/q/25876506/1202461).**\n",
    "head_branch": "issue3638",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 77d5b952600b2e320046203fdd5c5ba61ac30290 into a78cbe78a15175452a640f2d18b8585a397e41fb"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfded3a21fa1e1f1a9ffc",
    "number": 3622,
    "body": "It's a little addition to the web REPL console, snapshot below:\n![screen shot 2014-08-31 at 19 07 41 pm](https://cloud.githubusercontent.com/assets/149541/4101706/b38a6946-3100-11e4-9cb6-13a93d60abc5.png)\n",
    "head_branch": "literate-in-web-console",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdee3a21fa1e1f1a9ffd",
    "number": 3618,
    "body": "I feel honored to have one of my early CoffeeScript projects listed on the homepage, but nack isn't the shining example of .coffee source it was back in the early days. I feel like its wasting that spot.\n\nIf I may, I'd like to nominate another project, [The Atom editor](https://github.com/atom/atom). Its an enormous project written in CoffeeScript and I'd say is a phenomenal .coffee authoring tool itself because of that bias.\n\n/cc @jashkenas @michaelficarra\n",
    "head_branch": "update-site-example-projects",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9dfd71b0e453aad3e169bac2a5644c1759284875 into 8b066f125d8792a0d15f218142dbcc5197f32847"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdef3a21fa1e1f1a9ffe",
    "number": 3616,
    "body": "Just a couple of quick typo fixes.\n",
    "head_branch": "spelling",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 94c467b5208b793faccde671112d679ac02bce1a into 81047d45ee823dbfd534b7aa518d800ae5cedd6c"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdf03a21fa1e1f1a9fff",
    "number": 3611,
    "body": "- Run all `cake doc:*` tasks.\n- Gone through all [commits since 1.7.1](https://github.com/jashkenas/coffeescript/compare/1.7.1...master) and added everything worth noting to the changelog. I tried to make each entry short. Please tell me if I’ve missed something, if something is too minor to be mentioned and if something needs rewording.\n\nNote that I’ve set the release date to 2014-08-26.\n",
    "head_branch": "release-1.8.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdf13a21fa1e1f1aa000",
    "number": 3603,
    "body": "build:parser followed by build:full is broken by the latest jison\nreleases.  I haven't tracked down the problem, but to make the\nbuild work, we should set this to 0.4.13.\n",
    "head_branch": "jisonversion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdf23a21fa1e1f1aa001",
    "number": 3601,
    "body": "This change annotates nodes with types, and in a couple cases where rewrites\nresult in lost token position information, it adds references to\nthe original tokens.\n\nIt is used by the visual block editor at [pencilcode.net](http://pencilcode.net/edit/intro). It shouldn't affect other users of CoffeeScript.\n",
    "head_branch": "astsrc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdf33a21fa1e1f1aa002",
    "number": 3592,
    "body": "...or a source map.\n\nCurrently CoffeeScript reports a success even if it failed to write a\ncompiled file to disk. This behavior confuses automated tools such as\ntest runners which may return false positives if a test failed to\ncompile because of a file lock.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b5734028d9156be710916424303d03b5dd9ea012 into ab6f69c7416099e6387b38a42262282125428553"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdf43a21fa1e1f1aa003",
    "number": 3578,
    "body": "two extra quotes were present, causing \"Uncaught SyntaxError: Unexpected string\" error in console rather than the expected alert.\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdf53a21fa1e1f1aa004",
    "number": 3577,
    "body": "This version is directly executable, and illustrates more directly the concept. One can comment out line #3 and run again to see the difference.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdf63a21fa1e1f1aa005",
    "number": 3564,
    "body": "RubyForge is gone, so several links broke.\n",
    "head_branch": "rubyforge-doc-updates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdf63a21fa1e1f1aa006",
    "number": 3561,
    "body": "Addresses jashkenas/coffeescript#3297\n",
    "head_branch": "js-map-file-ext",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2ec6e7e94421316ef03d41606f3f7474965e3b96 into fbbda3f85f6a96b1cf3f430effd4ba0f7239d475"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdf73a21fa1e1f1aa007",
    "number": 3552,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdf83a21fa1e1f1aa008",
    "number": 3545,
    "body": "Since the name change, `bin/cake` will be in `coffeescript`, not `coffee-script`.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5c1daf966a28a512ec4386c9621fda21c390f20e into df8529fbfbed5042838416f92d0779c0bcb8ed4c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdf93a21fa1e1f1aa009",
    "number": 3543,
    "body": "When using tab for code indent, the error marker will be wrongly positioned.\n\nFor example see the newly added test case f7b36054fcbcc0c26f\n",
    "head_branch": "err_info_issue",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3465e7554d0d11dcf19b6b5c599208964c0c30f9 into 3ec10df4a1f71b2d25e269587bf2b444dc3b8fa0"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfdfa3a21fa1e1f1aa00a",
    "number": 3539,
    "body": "The location of heregex interpolation is broken.\nI added 8 test cases for this problem and fixed.\n\nHeregex code:\n\n```\n///\n#{a}\nb\n#{c}\n///\n```\n\nTokenize without this patch:\n\n```\n[ 'IDENTIFIER',\n  'a',\n  { first_line: 0, first_column: 3, last_line: 0, last_column: 3 } ] [ 'STRING',\n  '\"b\"',\n  { first_line: 1, first_column: 1, last_line: 1, last_column: 3 } ] [ 'IDENTIFIER',\n  'c',\n  { first_line: 2, first_column: 1, last_line: 2, last_column: 1 } ]\n```\n\nTokenize with this patch:\n\n```\n[ 'IDENTIFIER',\n  'a',\n  { first_line: 1, first_column: 2, last_line: 1, last_column: 2 } ] [ 'STRING',\n  '\"b\"',\n  { first_line: 1, first_column: 4, last_line: 2, last_column: 1 } ] [ 'IDENTIFIER',\n  'c',\n  { first_line: 3, first_column: 2, last_line: 3, last_column: 2 } ]\n```\n",
    "head_branch": "fix-heregex-interpolation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdfb3a21fa1e1f1aa00b",
    "number": 3537,
    "body": "Fixes #3536. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdfc3a21fa1e1f1aa00c",
    "number": 3533,
    "body": "String interpolation issue like #3524.\nThe location of token in 1 double quoted string is broken. \n\nStarting with `\\n`:\n\n```\n\"\n#{a}\nb\n#{c}\n\"\n```\n\nThe location is:\n\n```\n[ 'IDENTIFIER',\n  'a',\n  { first_line: 1, first_column: 1, last_line: 1, last_column: 1 } ]\n[ 'IDENTIFIER',\n  'c',\n  { first_line: 3, first_column: 1, last_line: 3, last_column: 1 } ]\n```\n\nThis patch makes the location collect position:\n\n```\n[ 'IDENTIFIER',\n  'a',\n  { first_line: 1, first_column: 2, last_line: 1, last_column: 2 } ]\n[ 'IDENTIFIER',\n  'c',\n  { first_line: 3, first_column: 2, last_line: 3, last_column: 2 } ]\n```\n\nI added 4 tests for this problem, and added 1 test for #3524 just in case.\n",
    "head_branch": "fix-string-interpolation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5920939e23f368f5996d7eee3dad86519742e987 into 2bab1b6aa16768bf076a40b50127c990e837376a"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfdfd3a21fa1e1f1aa00d",
    "number": 3527,
    "body": "This should fix the issue specified in issue #3498.\n\nThere seems to be another issue in Node 0.11.9+ whereby REPL doesn't end after an exception occurs. I felt it easier for you to follow my changes if I submitted issue #3498 changes before working on REPL fix, I'll post another issue for that if one doesn't exist.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdfe3a21fa1e1f1aa00e",
    "number": 3524,
    "body": "Fix another case about #3514\nIn the case that heredoc starts with `\\n`, location in tokens are broken.\n\n``` coffeescript\n\"\"\"\n#{b}\n\"\"\"\n```\n\nWithout this patch, `b`'s token is:\n\n```\n[ 'IDENTIFIER',\n  'b',\n  { first_line: 1, first_column: 1, last_line: 1, last_column: 1 } ]\n```\n\nWith this patch:\n\n```\n[ 'IDENTIFIER',\n  'b',\n  { first_line: 1, first_column: 2, last_line: 1, last_column: 2 } ]\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfdff3a21fa1e1f1aa00f",
    "number": 3521,
    "body": "I built a new favicon that includes a 32x32 version to support retina displays.\n\nThe 32x32 asset looks like:\n![cs-32](https://cloud.githubusercontent.com/assets/220979/3359513/f9dfac9c-fae8-11e3-8cc4-fb360f65ae65.png)\n\nI included the **Existing 16x16** asset in favicon.ico. However, I noticed that this icon doesn’t match the icon in the CoffeeScript logo exactly. I made a **New 16x16** asset that’s just a resampled version of the 32x32 version.\n\n| Existing 16x16 | New 16x16 |\n| --- | --- |\n| ![existin](https://raw.githubusercontent.com/jashkenas/coffeescript/master/documentation/images/favicon.ico) | ![cs-16](https://cloud.githubusercontent.com/assets/220979/3359536/3aa7334e-fae9-11e3-8c7e-5044e402aa8c.png) |\n\nIf you want me to update favicon.ico with the **New 16x16** asset, just let me know. It’s a trivial amount of work.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ba4157b5e2fd49b7421bfebc6d13c55a734d3d9b into 4f82e5912e2fbdb635036c36a1ae03f3c076ef59"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe003a21fa1e1f1aa010",
    "number": 3514,
    "body": "An off-by-one error in tokenization caused bugs like seen in #3348:\n\n```\n*\n[stdin]:1:1: error: unexpected *\n*\n^\n\n\"#{*}\"\n[stdin]:1:3: error: unexpected *\n\"#{*}\"\n  ^\n\n\"#{\"#{*}\"}\"\n[stdin]:1:5: error: unexpected *\n\"#{\"#{*}\"}\"\n    ^\n```\n\nThis should fix, I think.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe013a21fa1e1f1aa011",
    "number": 3509,
    "body": "1. It just seems like a bad practice to encourage people to run npm with `sudo`\n2. The doc wasn’t consistent with itself — down below in the full “Installation” section the same command did _not_ include `sudo`\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe023a21fa1e1f1aa012",
    "number": 3508,
    "body": "Please correct me if I'm wrong, but as far as I can tell we don't need docco as a dependency.\nIt's definitely needed as a devDependency, but I only see docco being used in the cakefile.\nShould be safe to remove? Or is there a reason it's there?\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge df2b79fa56c245951dfb79c597a8c976b3469963 into c4f9c3abf593e72e3978e9126cddfa7855b4a201"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe033a21fa1e1f1aa013",
    "number": 3503,
    "body": "Node 0.11 switched to storing the REPL commands dotless internally.\n\nThis PR fixes two problems, when using coffee with node 0.11:\n- coffee doesn't choke on the adapted help for .load (problem brought up in #3450)\n- .history works again (previously you had to enter ..history)\n",
    "head_branch": "handle-dotless-commands",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe033a21fa1e1f1aa014",
    "number": 3494,
    "body": "Link's been broken with the recent GitHub re-arrangement. This is the closest thing I could find to what that link used to lead to.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7e016724790e565287cde405460e82805466ace7 into ddc023b28bd4a3318ff3fa62c24e9f44ec837c69"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe043a21fa1e1f1aa015",
    "number": 3492,
    "body": "Fix PR #3491 as per @michaelficarra comment\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c65f584112d49b196a623ca7f59b2f39be7ba67e into 70a9a341acca4eb9e53321dc574ea4b64e894474"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe053a21fa1e1f1aa016",
    "number": 3491,
    "body": "In PR #3487 I was told that my change \"would break a lot of code\" but it did not break any test. It would have broken those tests.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe063a21fa1e1f1aa017",
    "number": 3490,
    "body": "closes #3489\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe073a21fa1e1f1aa018",
    "number": 3487,
    "body": "I don't see any reason why it would need to be declared in the outer scope (and I have a stupid reason for preferring it in the inner scope: a my jshint version has a bug that makes it think the variable is global when it's not in the inner scope)\n\nExample before:\n\n```\n$ bin/coffee -ce 'd = (v for v of {})'\n// Generated by CoffeeScript 1.7.1\n(function() {\n  var d, v;\n\n  d = (function() {\n    var _results;\n    _results = [];\n    for (v in {}) {\n      _results.push(v);\n    }\n    return _results;\n  })();\n\n}).call(this);\n```\n\nExample after:\n\n```\n$bin/coffee -ce 'd = (v for v of {})'\n// Generated by CoffeeScript 1.7.1\n(function() {\n  var d;\n\n  d = (function() {\n    var v, _results;\n    _results = [];\n    for (v in {}) {\n      _results.push(v);\n    }\n    return _results;\n  })();\n}).call(this);\n```\n\nI have not looked at the test system yet, but I can try to make some tests if you think it is useful\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe083a21fa1e1f1aa019",
    "number": 3479,
    "body": "I ran into a strange issue with coffee script executable. Enabling `--harmony` seems to mess up IPC with node's `child_process.fork`\n\n``` coffee\n\n# parent.coffee\n\nspawn = require('child_process').spawn\n\nchild = spawn('/usr/local/bin/coffee', [ '--nodejs', '--harmony-generators', './child.coffee' ], {\n    stdio: [0, 1, 2, 'ipc']\n})\n\nchild.on('message', console.log.bind(console, 'from child'))\nchild.send({ hello: 'child' })\n```\n\n``` coffee\n\n# child.coffee\n\n# comment\nprocess.on('message', console.log.bind(console, 'from parent'))\nprocess.send({ hello: 'parent' })\n\ngen = `function *() {\n}`\n\ngen()\n```\n\nIn the above code, if you remove `'--nodejs', '--harmony-generators'`, IPC works correctly but generators won't be enabled. Once you add the params in, IPC breaks (process.send is  undefined), but generators are enabled.\n#3450 May be related to this.\n\nnode@0.11.12\ncoffee-script@1.7.1\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe093a21fa1e1f1aa01a",
    "number": 3477,
    "body": "As discussed in #3472.\n\nThe deprecation warning should convey three points:\n- the deprecation of `--join`;\n- the reason for the deprecation; and\n- a straightforward migration.\n\nThe reason for the deprecation is that having different files share scope is surprising. Initially the message said so explicitly, but the current wording is much shorter and still suggests that the practice is distasteful.\n\nTo simulate `--join`, first concatenate the files, then pipe the output to `coffee`. To avoid clouding this message, I think it best to ignore the possible complications: files without a trailing newline, and completely indented files. (`cat` is really just a placeholder for _an external tool which concatenates files_.)\n",
    "head_branch": "deprecate-join",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1cd48a9f5d38e823434c6c00ba41846270535a47 into d8b7a55eb9e10ca05af8e0eab2749bcdc96ad5d5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfe0a3a21fa1e1f1aa01b",
    "number": 3473,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe0b3a21fa1e1f1aa01c",
    "number": 3464,
    "body": "One of the current examples for destructuring assignment, the literary critic, invokes an alert statement using `alert(\"first + \" \" + last\");`. This causes the alert to not fire due to a SyntaxError.\n\nInstead, the leading and trailing `\"` should be removed, so that `+` concatenates the strings correctly.\n\nThis fixes that change, changing the code to `alert(first + \" \" + last);`. It also changes the text visible to the reader to match the amended code.\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe0c3a21fa1e1f1aa01d",
    "number": 3463,
    "body": "One of the current examples for destructuring assignment, the futurist poet, invokes an alert statement using `alert(\"name + \"-\" + street\");`. This causes **name** and **street** to be incorrectly cast to Number, resulting in a reader seeing \"NaN\".\n\nInstead, the leading and trailing `\"` should be removed, so that the `-` operator is not used, and instead `+` concatenates the strings correctly.\n\nThis fixes that change, changing the code to `alert(name + \"-\" + street);`.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe0d3a21fa1e1f1aa01e",
    "number": 3461,
    "body": "An attempt to go back to the original intent of #3240, with additional support for `yield from` rather than `yield*`. `-g` command line flag forks Node with a `--harmony-generator` flag. Additionally, per @devongovett 's suggestion, there is support for creation of empty generators with a `yield` statement at the end of a function.\n\nExamples:\n\n``` CoffeeScript\nfib = ->\n  [a, b] = [0, 1]\n  loop\n    yield a\n    [a, b] = [b, a + b]\n\nseq = fib()\nseq.next() for i in [1..5]\n# outputs: \n# [ { value: 0, done: false },\n#   { value: 1, done: false },\n#   { value: 1, done: false },\n#   { value: 2, done: false },\n#   { value: 3, done: false } ]\n```\n\n``` CoffeeScript\ngen = -> yield\n```\n\ncreates JavaScript:\n\n``` JavaScript\n(function() {\n  var x;\n\n  x = function*() {};\n\n}).call(this);\n```\n\nNote: this commit also includes the rough fix for #3395 for the sake of testing (#3450), but fails 3 CoffeeScript tests.\n\nrun tests for generators with `node --harmony-generators ./bin/cake test`\n",
    "head_branch": "generators_final",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe0d3a21fa1e1f1aa01f",
    "number": 3460,
    "body": "The help for .load in the REPL is misleading because it was inherited from the node REPL. Currently it says\n\n```\nLoad JS from a file into the REPL session\n```\n\nThis patch changes the message to \n\n```\nLoad code from a file into this REPL session\n```\n",
    "head_branch": "correct-repl-help",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3fdc3a4758ba121ed0ecca662455b0d78edf50c2 into e02c8abb1afc438f4a0dfb21ca9ff1e979a0b96f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe0e3a21fa1e1f1aa020",
    "number": 3450,
    "body": "Node changed their repl so that it inherits from readline.Interface.\nThis means that `prompt` is now the rli function and not the original\nprompt string.  This may be a little hacky, but I figure it would give\nsomeone a start if they want to do a better fix.\n\nThe commit that changed this in Node is joyent/node@3ae0b17c76f693dd2e68a46f78c7dc7f595b33c6\n\nThis bug was mentioned in Issue #3395.\n",
    "head_branch": "node11repl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe0f3a21fa1e1f1aa021",
    "number": 3448,
    "body": "This is done by adding a root level wrapper script for\nlib/coffee-script/repl, similar to how the register script is wrapped.\nThis allows user programs to embed a CoffeeScript REPL without digging\ninto CoffeeScript's internals.\n",
    "head_branch": "export-repl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe103a21fa1e1f1aa022",
    "number": 3438,
    "body": "I want TypeErrors when trying to add properties to sealed objects - without 'use strict' statement, these fail silently.\n\nTherefore i'd like to have an option that generates 'use strict' statements in the top-level function safety wrapper.\n\nSee #2337.\n",
    "head_branch": "strict_statement",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe113a21fa1e1f1aa023",
    "number": 3433,
    "body": "This is a quick fix for #3399.\n\nBasically, it copies the `node` command and [passes `terminal: false` to the REPL](https://github.com/joyent/node/blob/6cbfcdad46d733bb04332063727e304e449dc86b/src/node.js#L137) if `NODE_NO_READLINE` env var is set.\n\nNow users that prefer to have the nice readline features like <kbd>ctrl</kbd>+<kbd>R</kbd> (history search) can do:\n\n``` bash\nalias coffee=\"env NODE_NO_READLINE=1 rlwrap coffee\"\n```\n\nSide note: may i add a comment with that Bash alias to the changelog so more users can see it? Is there some problem with doing that alias?\n\nShould we also copy the NODE_DISABLE_COLORS (what's up with Node and negated boolean names?) [configuration](https://github.com/joyent/node/blob/6cbfcdad46d733bb04332063727e304e449dc86b/src/node.js#L140)?\n",
    "head_branch": "node-no-readline",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe123a21fa1e1f1aa024",
    "number": 3425,
    "body": "Rebase of #1728\n",
    "head_branch": "compile_errors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe133a21fa1e1f1aa025",
    "number": 3424,
    "body": "Extra quotations resulted in subtracting two strings and then a\njavascript syntax error\n",
    "head_branch": "fix_index",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 15b64addbffa9285445d9ca05834267401a7c8f1 into 4547612e50ec612eb8c8ccc73888af02dd049cc9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe143a21fa1e1f1aa026",
    "number": 3423,
    "body": "Was alerting NaN because was subtracting two strings.\nThe second was simply hitting an error and thus not alerting at all.\n",
    "head_branch": "fix_index",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe153a21fa1e1f1aa027",
    "number": 3419,
    "body": "",
    "head_branch": "patch-6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe163a21fa1e1f1aa028",
    "number": 3418,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9c15b13a9681a5bbb3ea5dec9174311808c7d2af into 63acf6a5ffa6f1a88984c692fba693d0fea29243"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe163a21fa1e1f1aa029",
    "number": 3417,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe173a21fa1e1f1aa02a",
    "number": 3415,
    "body": "Per https://www.npmjs.org/doc/json.html#preferGlobal\n\n> If your package is primarily a command-line application that should be installed globally, then set this value to true to provide a warning if it is installed locally.\n> \n> It doesn't actually prevent users from installing it locally, but it does help prevent some confusion if it doesn't work as expected.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c2db81d892cf640187c39d1598842e7e0e52315e into 8b15d8218d801a8b312fe5abf87dec35353aab70"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe183a21fa1e1f1aa02b",
    "number": 3401,
    "body": ":up: \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge bfc9d4d594c83cdae8613382b43548023f0b3d06 into ab5728c0303722acc3a42f84e23cbe59073be49d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe193a21fa1e1f1aa02c",
    "number": 3393,
    "body": "This pull request renames `README` to `README.md` as well as adding various Markdown goodies to make it look better on the web.\n",
    "head_branch": "markdown-readme",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a2dbfdc2f4d32c7ae0b4d50f51dc9b607e6523e3 into 0a82ac7d696e43b88cd47b666f1b3975523b4892"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe1a3a21fa1e1f1aa02d",
    "number": 3392,
    "body": "Includes test for #3379 as requested in #3380.\n",
    "head_branch": "unterminated-strings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe1b3a21fa1e1f1aa02e",
    "number": 3386,
    "body": "This patch fixes issue #3349, by prints deprecation warning for\nusers who depends on old(<1.7.0) implicit module registration.\n\nI've done local tests, but I have no idea where to put my test cases because existing tests are executed after registering coffee extension.\n\nMy tests are pasted below. Let me know where to put(or not) these tests then I'll do.\n\n``` javascript\n// test.js\nrequire('./lib/coffee-script');\nrequire('./test/importing/import.coffee'); // expects throwing\n```\n\n``` javascript\nrequire('./register');\nrequire('./lib/coffee-script');\nrequire('./test/importing/import.coffee'); // expects nothing\n```\n\n``` javascript\nrequire('./lib/coffee-script');\nrequire('./register');\nrequire('./test/importing/import.coffee'); // expects nothing\n```\n\nThanks @epidemian for this idea.\n",
    "head_branch": "deprecate_warning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe1c3a21fa1e1f1aa02f",
    "number": 3383,
    "body": "The lexer emits comment tokens inline since they don't interfere semantically. In the generated AST they are added to the root node as a \"comments\" property because they cannot (easily) be put directly into the nodes where valid comments might appear. This is similar to how Esprima handles parsed comments in the generated AST:\n\n``` js\n> parse('1 + // foo\\n1', { comment: true })\n{ type: 'Program',\n  body:\n   [ { type: 'ExpressionStatement',\n       expression: [Object] } ],\n  comments: [ { type: 'Line', value: ' foo' } ] }\n```\n\nI tried searching for something similar to this in the coffee-script issues but never found one. There were a bunch of discussions about how hard it would be to support attaching comment nodes to their nearest node, and I agree that is hard.\n#### Goals\n- allow extracting the single-line comments from CoffeeScript source, for example to facilitate a [recast](https://www.npmjs.org/package/recast)-style re-writer for CoffeeScript\n#### Non-Goals\n- emit single-line comments in the generated JavaScript\n- include comments in the generated AST or token list by default\n\nI probably did something wrong in this PR and am mostly looking for comments to improve the approach I've taken. I don't especially care that this is merged, though it would make the project I'm working on (the single example from \"Goals\" above) easier to realize as an open source project rather than an internal tool at my company.\n",
    "head_branch": "process-comments-into-ast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe1d3a21fa1e1f1aa030",
    "number": 3382,
    "body": "This changes the visual presentation ever so slightly:\n\n![Before](https://f.cloud.github.com/assets/210406/2197655/a8a77f8a-98be-11e3-889d-1e93667cd4ba.png)\n\n![After](https://f.cloud.github.com/assets/210406/2197656/adccb142-98be-11e3-9117-f172634e3d62.png)\n\nI was able to avoid the need for the `document.createElement('time')` trick (for old IEs) by having the time element inherit all its styles from its parent element. This involved reducing the font-size of the parent element from 12px to 11px. To offset this change, I bumped up the en dash to an em dash. The result is satisfactory visually, and the markup is significantly more meaningful as a result.\n\nIt's safe to change the styling of `.timestamp` elements as they're used exclusively for marking up release dates in the change log.\n",
    "head_branch": "time-elements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe1e3a21fa1e1f1aa031",
    "number": 3381,
    "body": "Just a little cleaner.\n",
    "head_branch": "inline-css",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 81e2253a55c15fb7f6630d9981857ed7268e81cc into c41a14f447b1c9041f101d0d0f1a1aac2ee745fd"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfe1f3a21fa1e1f1aa032",
    "number": 3380,
    "body": "#3379\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a323160d147785221b5af2c5476754d91aaa55c1 into a216f93b54857e98c940ce9beac263741c721c93"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe203a21fa1e1f1aa033",
    "number": 3376,
    "body": "The rationale is the same as for jashkenas/underscore#1437, though the CoffeeScript banner makes it a little more difficult to have the browser jump to the correct scroll offset.\n",
    "head_branch": "anchors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe213a21fa1e1f1aa034",
    "number": 3370,
    "body": "I could be wrong, but I guess you should OUTDENT by the same size you'll move out.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe223a21fa1e1f1aa035",
    "number": 3368,
    "body": "It seems reasonable to expect that requiring .coffee files from within a `Cakefile` works out-of-the-box.\n",
    "head_branch": "cake-register-by-default",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e7ba29514d1da1f388176fe99722a74c5927e064 into a2c0106b3f2e0edce7de1a648d80b38ec4f44d51"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe223a21fa1e1f1aa036",
    "number": 3365,
    "body": "Introducing the `->>`, `=>>`, and the `yield from` syntax.\n\nPlease see @xixixao's [PR](https://github.com/jashkenas/coffee-script/pull/3316#issuecomment-33292891) for detail.\n\nUnfixed error from https://github.com/bevry/docpad/issues/723\n",
    "head_branch": "yags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe233a21fa1e1f1aa037",
    "number": 3362,
    "body": "A very straightforward solution to #3361.\n\nOther solutions could have been:\n\nForcing the coercion at the `__modulo` call site. Compiling `0 %% valueOf: -> console.log \"!\"` to:\n\n``` javascript\nvar __modulo = function(a, b) { return (a % b + b) % b; };\n\n__modulo(0, +{\n  valueOf: function() {\n    return console.log(\"!\");\n  }\n});\n```\n\n(notice the `+` sign added to the call and removed from the `__modulo` definition)\n\nOr inlining the whole thing:\n\n``` javascript\nvar __ref;\n\n(__ref = +{\n  valueOf: function() {\n    return console.log(\"!\");\n  }\n}, (0 % __ref + __ref) % __ref);\n```\n\nBut i prefer the solution in this PR because it results in the cleanest code on the call site (it also was the easiest to implement :stuck_out_tongue: ):\n\n``` javascript\nvar __modulo = function(a, b) { b = +b; return (a % b + b) % b; };\n\n__modulo(0, {\n  valueOf: function() {\n    return console.log(\"!\");\n  }\n});\n```\n",
    "head_branch": "fix-modulo-coercion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0ad30e9b3ffd5874e68e6363d99551754faf072b into 46f55d1bb4185e3d80a1a71d4b74d08f03771c59"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfe243a21fa1e1f1aa038",
    "number": 3360,
    "body": "- Simplify the command to install latest master.\n- Promote using `--save` when installing locally, since it automatically\n  locks the minor version, protecting users from accidentally installing\n  breaking updates.\n",
    "head_branch": "install-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe253a21fa1e1f1aa039",
    "number": 3359,
    "body": "In V8, the `stack` property of errors contains a prelude and then the\nstack trace. The contents of the prelude depends on whether the error\nhas a message or not.\n\nIf the error has _not_ got a message, the prelude contains the name of the\nerror and a newline.\n\nIf the error _has_ got a message, the prelude contains the name of the\nerror, a colon, a space, the message and a newline.\n\nIn other words, the prelude consists of `error.toString() + \"\\n\"`\n\nBefore, coffee-script’s patched stack traces worked exactly like that,\nexcept that it _always_ added a colon and a space after the name of the\nerror.\n\nThis fix is important because it allows for easy and consistent\nconsumption of the stack trace only:\n\n`stack = error.stack[error.toString().length..]`\n",
    "head_branch": "v8-consistent-stacktraces",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4bbd63c88376b653904ff9f9dcc5e922757106ad into eda4f0c55bba462358719c57789a746a463d17c5"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfe263a21fa1e1f1aa03a",
    "number": 3356,
    "body": "This just documents current behavior. I'm starting to work on https://github.com/jashkenas/coffee-script/issues/3158 and wanted to make sure I didn't break this.\n",
    "head_branch": "for-syntax-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe273a21fa1e1f1aa03b",
    "number": 3355,
    "body": "This was added in f4a7cca0755b61fe70db0f7dc5b841aec44022ae to fix #1038 for CoffeeScript 1.0.1. `.isUndefined` was removed in caf3da2f664f65f3aead70a6292385dea18da9ba but this code was never updated. That actually caused the behavior of this code to change (trailing `undefined` and `return undefined` statements no longer got optimized away) when CoffeeScript 1.3.2 was released, but the new behavior was deemed correct in https://github.com/jashkenas/coffee-script/issues/1038#issuecomment-14427560.\n\nI also added some tests to document the current behavior, since it's not clear that the change in behavior was noticed when it occurred.\n",
    "head_branch": "kill-isUndefined",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe283a21fa1e1f1aa03c",
    "number": 3353,
    "body": "Though not production ready, I know a couple people were asking about this, so I began the coding for it. The hard part about implementing this was that the styling on `.navigation` were completely skewing the positions of all the CodeMirror elements, so I ended up moving the editor out and away from the flyout bar.\nThis is a proof of concept moreover, and is not ready to be implemented until _lazy loading_ is implemented, and the styles are nicer.\n[http://zombiehippie.github.io/coffee-script/](http://zombiehippie.github.io/coffee-script/)\n\nI might be working on CodeMirror's coffeescript tokenizer later to highlight it more like highlighter.js\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe293a21fa1e1f1aa03d",
    "number": 3346,
    "body": "Since #1953, a bell has been warning the user on compilation failures with `--watch`.  In recent versions of OS X, the Terminal icon bounces in the Dock twice for each bell, even if the audible (and visual) bell is turned off.  This patch aims to provide a remedy.\n",
    "head_branch": "no-beep",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe2a3a21fa1e1f1aa03e",
    "number": 3343,
    "body": "Is there any interest in supporting a shorthand for invoking methods on an entire array/object?\n\nSomething like:\n\n``` coffeescript\nitems..foo()\n```\n\nWhich would translate to something like:\n\n``` coffeescript\nitem.foo() for item in items\n```\n\nOr perhaps something that worked within array comprehentions, except lacking an iterator:\n\n``` coffeescript\n..foo() for items\n..foo() for items by 2\nfor items ..foo()\nfor items by 2 ..foo()\n```\n\nI feel like it's one of the most common patterns in programming, an a prime candidate for some sugar. I haven't implemented it but I would like to hear some feedback about whether it would be worth the effort.\n",
    "head_branch": "function-invokation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe2b3a21fa1e1f1aa03f",
    "number": 3342,
    "body": "Use the tab character in the try-it editor's textbox\n",
    "head_branch": "try-it-tabs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe2c3a21fa1e1f1aa040",
    "number": 3340,
    "body": "`options.fileName` was used instead of `options.filename`.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe2d3a21fa1e1f1aa041",
    "number": 3337,
    "body": "The commas separating these keywords are not code themselves – not what the user would write – so they should be outside of the `<tt>` tags.\n\nEdits the table in the section [Operators and Aliases](http://coffeescript.org/#operators).\n\nBefore:\n\n![portion of the operators table before my change](https://f.cloud.github.com/assets/79168/2026104/7bb34a3a-8889-11e3-8d2a-cda58a194f28.png)\n\nAfter both commits:\n\n![portion of the operators table after my change](https://f.cloud.github.com/assets/79168/2026156/c3d8215e-888a-11e3-9874-a45ada1ccd67.png)\n",
    "head_branch": "fix-operator-docs-commas",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe2e3a21fa1e1f1aa042",
    "number": 3336,
    "body": "In the documentation, surround the new `**`, `//`, and `%%` operators with `<tt>` tags instead of Markdown-style backticks <code>``</code>, since this is HTML.\n\nChanges the section [Operators and Aliases](http://coffeescript.org/#operators).\n\nI used [`<tt>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tt) tags instead of [`<code>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code) tags because that’s what all the other operators in that sections are wrapped in.\n",
    "head_branch": "fix-math-operator-docs-markup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a5fef527517d2b68a9f3f76f921ce27a9d073395 into 734fcedc0666dc597823a82cea90c6ce0ff2b73f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe2e3a21fa1e1f1aa043",
    "number": 3334,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e4c8bcf8f65b59e159696061db1a45d9988caec6 into a3ae0c5c759208fcbbe35ddd1e8ff58676fd0345"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe2f3a21fa1e1f1aa044",
    "number": 3333,
    "body": "I have intentionally split this up into separate commits, the first one is the actual change from Ruby to Node. Having the whole `_.template` function in Cakefile is not ideal (I cut it down though), but at least doesn't add another dependency. Better solutions welcome.\n\nI've done this after three pints, so peer review would be highly welcomed.\n\nLittle note: Highlight.js parses object `keys` as `attribute`, so I deleted it from the `css` file to keep an equivalent style.\n\nSecond note: @michaelficarra the `run` expressions are javascript expressions, so we can't use `#{}`\n",
    "head_branch": "release1.7.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe303a21fa1e1f1aa045",
    "number": 3331,
    "body": "And the motto of the day: Less is better.\n\nI moved the tests and added the test for implicit inline objects. This was broken:\n\n``` coffee\ncall key: value\n.method()\n```\n",
    "head_branch": "inlineobjectchain",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe313a21fa1e1f1aa046",
    "number": 3330,
    "body": "Shebang lines are currently ignored when CoffeeScript files are compiled to JavaScript. This makes it quite hard ( although not impossible ) to create executable scripts on Unix-based systems.\n\nThe resulting JavaScript file should preserve the shebang line from original CoffeeScript file if present and if it is on the first line of the document.\n\nSince I am not that skilled to implement this functionality in the compiler myself I am at least sending the tests describing the expected functionality.\n\nPS. This has been already discussed in #2216 although a conclusion has not been reached there.\nThank you!\n",
    "head_branch": "preserve-shebang-lines",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe323a21fa1e1f1aa047",
    "number": 3329,
    "body": "Fixes #3325. Fixed both implicit and explicit cases.\n",
    "head_branch": "issue3325",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe333a21fa1e1f1aa048",
    "number": 3328,
    "body": "Fixes #3216, along with unreported cases (`when` and `by`).\n\nSuper ugly, if anyone has any better ideas...\n",
    "head_branch": "issue3216",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c2727d964c9a3493b8242e2b1d0807a229e9621b into a5d6285cfd2fbb1b210811d645b9c7dde6e016a0"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe343a21fa1e1f1aa049",
    "number": 3327,
    "body": "Oh well.\n",
    "head_branch": "forexpansion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge bd6b4142fec0e5d2033ee265bdf50cbc5fa7f2e3 into daa6ad5470ee04c84f0dda7f0ffdf5c3e502a322"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe353a21fa1e1f1aa04a",
    "number": 3326,
    "body": "I went through every commit and tried to keep the changes brief. The chaining example is obviously not ideal, ideas welcome. This is happening (hopefully). @jashkenas\n",
    "head_branch": "release1.7.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe363a21fa1e1f1aa04b",
    "number": 3324,
    "body": "Fixes namely https://github.com/jashkenas/coffee-script/issues/1871#issuecomment-32242892.\n\n``` coffee\n# coffee -bpe 'a: b if c'\nif (c) {\n  ({\n    a: b\n  });\n}\n```\n",
    "head_branch": "issue1871",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe373a21fa1e1f1aa04c",
    "number": 3322,
    "body": "",
    "head_branch": "issue1099",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 26dcf025f4d3d74e49d79ab0eb8ee1d1dd9c1af3 into d2f90d2236ab93cb0edbe908ca834786bd3ca6eb"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe383a21fa1e1f1aa04d",
    "number": 3320,
    "body": "Fixes #1275 along with its duplicates, but to make sure I checked all these:\n#1275\n\n``` coffee\n->\n  (\n    a\n   )\n  b\n->\n  (\n      a\n     )\n  b\n```\n#1769\n\n``` coffee\nclass Example\n\n    @STATIC_OBJECT = {\n                       'a':1,\n                       'b':2,\n                       'c':3,\n                       'd':4\n                     }\n\n    constructor: () ->\n        alert('This is working!')\n```\n#1957\n\n``` coffee\nmyObject =\n    foo:\n        bar:\n            baz: [\n                   \"hey\"\n               ] #indent me!\n        quux: \"yo\"\n```\n#2221\n\n``` coffee\nprop: ->\n  foo\n    .bar 'baz', ->\n      bliz\n        .blaz 'zing', ->\n          somethingHere()\n        .fooz()\n  someMoreStuffHere()\n```\n#2341\n\n``` coffee\ndescribe \"test\", () ->\n  x = [\n    1, 2\n   ] # <-- A space at the beginning of this line\n  describe \"innerTest\", () ->\n    \"Wrong indentation\"\n```\n#2432\n#2981\n\n``` coffee\n  alert 'hello'\nalert 'world'\n# now throws an error even on command line\n```\n#2981\n\n``` coffee\n  alert 'hello'\nalert 'world'\n# now throws an error even on command line\n```\n#2462\n\n``` coffee\n$(document)\n  .on \"click\", (event) ->\n     $(\".xyz\").click( -> \n            false\n      )\n     false\n```\n#2688\n\n``` coffee\nif true and true and\n        true and (\n            true or true\n        )\n    alert(\"\")\n```\n#2734\n\n``` coffee\ntest2 = ->\n           examples = if true\n                        \"yes\"\n                      else \"no\"\n           console.log(examples)\n```\n#3025\n\n``` coffee\njQuery ->\n  $('body').each -> (\n    console.log(\"foo\")\n   )\n  console.log('bar')\n```\n#3035\n\n``` coffee\narray = [\n    n: [\n        \"a\"\n      ] # here the bracket is indented\n    c: \"hello\"\n]\n```\n#3117\n\n``` coffee\na = ->\n    foo = [\n           3\n          ]\n    bar = baz\n```\n",
    "head_branch": "issue1275",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c3391e1dd89462f44d292d03dfda2cbe8536d607 into b3463a1378132ad6111e94bbb43311e3ab186b37"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfe393a21fa1e1f1aa04e",
    "number": 3319,
    "body": "Ok, here we go. Fixes #1096, #1131, #1828 and hopefully the hundred duplicates out there.\n\nPointing out errors not handled by this would be welcomed.\n\n``` coffee\n# Unexpected interpolation\n    [stdin]:1:3: error: unexpected string interpolation\n    {\"#{key}\": val}\n      ^^\n  # Implicit ends\n    [stdin]:1:3: error: unexpected ,\n    a:, b\n      ^\n  # Explicit ends\n    [stdin]:1:4: error: unexpected )\n    (a:)\n       ^\n  # Unexpected end of file\n    [stdin]:1:3: error: unexpected end of input\n    a:\n      ^\n  # Unexpected implicit object\n    [stdin]:1:13: error: unexpected :\n    for i in [1]:\n                ^\n```\n",
    "head_branch": "issue1096",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe3a3a21fa1e1f1aa04f",
    "number": 3317,
    "body": "After adding chaining syntax in #3263 there has been a problem that kept bugging me:\n\n``` coffee\ncallA callB ->\n  body\n.method()\n# and\ncallA callB -> body\n.method()\n# Compiles to:    callA(callB(function() { return body; }).method());\n```\n\nbut\n\n``` coffee\ncallA callB expression\n.method()\n# Compiles to:    callA(callB(expression)).method();\n```\n\nThis fixes the issue and makes functions and objects behave as any other argument.\n",
    "head_branch": "chainafteroutdent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 39cb8815f7b256fe4c62f5e5c9847580c88b4d6e into 21db08a23d43be4c34b13dd359d2020d46b2a5fa"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe3b3a21fa1e1f1aa050",
    "number": 3316,
    "body": "Alternative to @alubbe's https://github.com/jashkenas/coffee-script/pull/3240, this one has `-->` and `==>` and more importantly `yield from x`. Also no implicit return as per discussion.\n\n@jashkenas said he isn't sold on `*` syntax, so here's a (not suprising) variation.\n",
    "head_branch": "yieldfrom",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe3b3a21fa1e1f1aa051",
    "number": 3308,
    "body": "Tested on IE 11, Chrome 31\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe3c3a21fa1e1f1aa052",
    "number": 3293,
    "body": "Fixes #2919 by simply leaving `execPath` alone. (Currently `bin/coffee` is called with node's `execOptions`.)\n\nThe `coffee` \"binary\" is now used as the module with the actual `.coffee`-module as its first argument. This also makes the patch work on Windows (the friendly OS where executability is determined by file extension and shebangs don't exist).\n\nAlso fixes `.fork` calls without an arguments array. (Currently `options` is set to `[]`)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe3d3a21fa1e1f1aa053",
    "number": 3292,
    "body": "Resolves #2496 and brings the CLI behavior for directories in line with redux, node and coco/LS. Runs either `index.coffee`, `index.litcoffee` or `index.coffee.md` (just like `require DIR` does already).\n\n`coffee --watch DIR` watches and (re-)runs only the index file (and no longer all contained coffee files and subdirectories). This behavior is copied from coco/LS and provides a nice symmetry between invocations with and without `--watch`, but I'm not entirely sure about potential use cases...\n",
    "head_branch": "CLI",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe3e3a21fa1e1f1aa054",
    "number": 3289,
    "body": "After some discussion with @jashkenas, this pull request adds a feature similar to the long dead \"extended\" hook (#710, #841, #1960), but it places the hook at the end of the executable class body, with some (hopefully) reasonable real-world use cases:\n\nThere's a new library I'm writing which aims to sit atop [Bookshelf](http://bookshelfjs.org) and mimic Rails' ActiveRecord as closely as possible. I haven't quite hammered out all of the syntax/implementation yet, but let's take this as an example:\n\n``` coffee\nclass User extends ActiveRecord\n\n  tableName: 'users'\n\n  scopes:\n    moderators: -> @where('account_type', 'moderator')\n    active: -> @where('activated', true)\n    pending: -> @where('activated', false)\n\n  relations:\n    accounts: -> @hasMany(Account)\n    posts: -> @hasMany(Post)\n    site: -> @belongsTo(Site)\n\n  callbacks:\n    creating: ['checkEmail', 'checkUsername']\n\n  validators:\n    presence: ['name', 'login', 'email']\n    #...\n```\n\nIn this case, the `extended` hook would be used to go through specific namespaces in the extending class (in this example, \"scopes\" and \"relations\"), and attach/wrap the methods as both static and prototype methods, so they can be chained like so:\n\n``` coffee\nUser\n  .active()\n  .moderators()\n  .take(5)\n  .then (moderatingUsers) ->\n    console.log(JSON.stringify(moderatingUsers))\n  .catch ActiveRecord.NotFound, (err) ->\n    res.json({error: err.message})\n  .catch (err) ->\n    console.log(err.stack)\n\nUser.posts().then(...\nUser.active().posts().then(...\n```\n\nThe next example deals also with the Bookshelf.js project. The current `Bookshelf` object is a constructor, maintaining the underlying database connection information, exposing a `Model` and `Collection` from which objects can inherit:\n\n``` coffee\nPG = new Bookshelf {...postgres connection info...}\n\nclass User extends PG.Model\n  tableName: 'users'\n\nclass Users extends PG.Collection\n  model: User\n```\n\nThis works fine, except that by tying the models to a specific database, you lose the ability to have a base class used by multiple databases. I'm looking to move to the following:\n\n``` coffee\nPostgres = Bookshelf.database {...postgres connection info...}\nSqlite   = Bookshelf.database { ...sqlite connection info... }\n\nclass User extends Bookshelf.Model\n  tableName: 'users'\n  accounts: ->\n    @hasMany(Account)\n\nclass PGUser extends User  \n  db: Postgres\n\nclass SqliteUser extends User\n  db: Sqlite\n```\n\nBy late-binding the database to the class, it's possible for both the `PGUser` and `SqliteUser` to be an `instanceof User`. \n\nAny methods specific to the data store being attached could be contained in the `db` object and late-bound to the extended class's prototype(s) during the `extended` hook, replacing base methods which are stubbed out as a rejected promises in the base Model; creating something of a pseduo-abstract class in JS.\n\nAs @jashkenas pointed out in the other ticket, there can be arguments made for adding an `extended` hook both before and after the class body execution. I believe the use cases for having an `extended` before the class body are less compelling - if you'd like a class method to exist, you'd typically define it on the parent class - and if you needed to get rid of it during extension, you could do so in this new `extended` hook. The only cases where it'd be necessary to have the hook \"before\" would be to add a method/property just to be able to immediately reference it, which seems a bit inefficient (why not just define it on the extended class).\n\nHaving an `extended` hook after the class body is executed is hopefully a more convincing case which could help build some good looking class interfaces.\n\n(Note: First time playing around with the CS source, so if there's a better way to do what I set out for in this PR, I'm all ears)\n",
    "head_branch": "extended",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe3f3a21fa1e1f1aa055",
    "number": 3285,
    "body": "I built. Amazing.\n\nI think these should be formatted well, so that the code and PRs like #2860 are actually readable.\n",
    "head_branch": "formatutils",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1cc8463b9cb04d854ef87d1c6cbfca3d66f7d328 into 6c786f0fb7158677dfffe08944ea5917e85cd626"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfe403a21fa1e1f1aa056",
    "number": 3284,
    "body": "Fixes https://github.com/jashkenas/coffee-script/issues/3056.\n",
    "head_branch": "issue3056",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d7862647d9ecde0a4a25202f09bae5d03eaac225 into 308299fe04cfb01bf316345f34b3966823422b2d"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe413a21fa1e1f1aa057",
    "number": 3283,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge cc345def4619ea3b6e27c490651244cc25708ff8 into 818983b6a485278e694131964527225b92e83b3e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe423a21fa1e1f1aa058",
    "number": 3280,
    "body": "..., idioms: calls and comprehensions\n\nAnother take at examples, after: #3271.\n\nFeel free to point out where I went too far, these files are 4 years old and their purpose isn't clear.\n",
    "head_branch": "issue3271",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe433a21fa1e1f1aa059",
    "number": 3279,
    "body": "Ref #3141, #3054, #2323.\n",
    "head_branch": "fix-require.extensions-registration",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 08a57898a75e675b839d56806096d20a4ff07804 into 94e22ab8193a49bf57686510d7b72c59976b88a9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe443a21fa1e1f1aa05a",
    "number": 3277,
    "body": "Links to publisher page for new book.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe453a21fa1e1f1aa05b",
    "number": 3276,
    "body": "Thanks @shesek\n",
    "head_branch": "issue1495fixup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge bc975e556ecc6eb0403a35afa8e27a42158ce1da into 26200f46406f524309baaeef37aba310f6b03f5b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe463a21fa1e1f1aa05c",
    "number": 3275,
    "body": "- Fixes #3267 (Source maps don't get deleted when using `--watch`)\n- Suppress `EPERM` errors from watchers (see also below)\n- Minor readability improvements\n  - Remove unnecessary parameter of `removeSource`\n  - Explicitly declare `watcher` at scope start\n  - Consistent use of `err` for errors and exceptions\n#### Suppressing `EPERM`\n\nIf a watched directory gets deleted its `fs.FSWatcher` throws `EPERM` (not to be confused with `EACCESS`). The same happens for the watchers of contained files and `fs.unlink`. We have to fix it on our end because it will not be fixed in node (see joyent/node#4337).\n\nThis PR simply suppresses the error. I also refrained from adding `if process.platform is 'win32'` tests. All other causes of `EPERM` should break the actual compilation, i.e. when reading and writing files.\n",
    "head_branch": "CLI",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe463a21fa1e1f1aa05d",
    "number": 3271,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe473a21fa1e1f1aa05e",
    "number": 3268,
    "body": "Implements #156 (oldest open issue currently).  Namely @epidemian's [proposal](https://github.com/jashkenas/coffee-script/issues/156#issuecomment-17941507) (same as #870).\n\n``` coffee\n[first, middle..., last] = array # works today\n[first, ..., last] = array # works with this PR\n\n[..., last] = ratherLongVariableName\nlast = ratherLongVariableName[ratherLongVariableName.length - 1] # rather long\n[..., last] = a\nlast = a[a.length - 1] # still longer, repetitive \n```\n\nThis matches nicely the ability of taking first `n` elements out of an array.\n\n``` coffee\n[first, ..., last] = tuple # first = tuple[0], last = tuple[tuple.length - 1];\n```\n\n_edited to match final PR_\n",
    "head_branch": "issue156",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe483a21fa1e1f1aa05f",
    "number": 3263,
    "body": "Implements #1495 and parts of its sibling issues.\n\n@jashkenas was against this [3 years ago](https://github.com/jashkenas/coffee-script/issues/944#issuecomment-620690) saying:\n\n> This has come up before, and I'm still of the opinion that it's an abuse of indentation. Leading dot accessors should attach to the final value of the previous line, and not cause the previous line to be implicitly wrapped in parentheses.\n\nThis sounds reasonable, but in practice I was unable to find any occurrences of the pattern\n\n``` coffee\na b\n.c() #a(b.c())\n```\n\nvs hundreds of cases of\n\n``` coffee\na.b(c)\n .d(e)\n```\n\nThis has also been highly requested and discussed syntax. There have been many proposals, a lot of them dealing with indentation. I think that we can agree that the change should be as simple and useful as possible.\n\nThere are several examples already where our code looks similar to the proposal:\n\n``` coffee\na b,\n  c\n.something() # a(b, c).something()\n\na\n  b: c\n.something()  # a(b: c).something()\n\na ->\n  b c\n.something()  # a(function () {return b(c);}).something()\n```\n\nThis PR brings normal argument list on par with these, and also solves cases of nested calls and inline functions. This is now valid:\n\n``` coffee\nresult = range 1, 3\n  .concat range 4, 6\n  .map (x) -> x * x\n  .filter (x) -> x % 2 is 0\n\nconsole.log result # [4, 16, 36]\n```\n\nYet the syntax is indentation agnostic. The rule is simply that a dot accessor on a new line closes all implicit calls, or that it \"attaches to the outermost preceding value\".\n\noldschool P.S.:\n\n``` coffee\n$ 'body'\n.click (e) ->\n  $ '.box'\n  .fadeIn 'fast'\n  .addClass '.active'\n  .css 'marginRight', '10px'\n```\n",
    "head_branch": "issue1495",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe493a21fa1e1f1aa060",
    "number": 3262,
    "body": "Fixes #1766. Seems simple enough, probably more descriptive than any short verbal explanation. We should either fix this or close the issue (saying this is obvious - though for non JS skilled it isn't).\n",
    "head_branch": "issue1766",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ac6a76ee104c7055d1a4d8ea212f975f90dacff0 into 873ed071d4c035779a454390b6443ed43fa623b7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe4a3a21fa1e1f1aa061",
    "number": 3261,
    "body": "Fixes #1273. There are two main fixes to master:\n\n``` coffee\n# in last release:\n[\n  '\\\n  '     # didn't compile at all\n  \"\\\n  \"\n  '''\\\n  '''\n  \"\"\"\\\n  \"\"\"\n] # the rest did compile to [\"\\  \", '\\', \"\\\"];\n# on current master we get ['\\', \"\\\", '\\', \"\\\"];\n```\n\nwith this PR it compiles to:\n\n``` javascript\n['', \"\", '', \"\"];\n```\n\nSecond, escaping quotes at the end of heredoc:\n\n``` coffee\n\"\"\"\\\"\"\"\n```\n\nused to compile to `\"\\\";`. Now throws as expected:\n\n```\nerror: missing \", starting\n\"\"\"\\\"\"\"\n      ^\n```\n\nAnd I also fixed trailing backslashes (hence the added tests).\n",
    "head_branch": "issue1273",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe4b3a21fa1e1f1aa062",
    "number": 3260,
    "body": "Since compiler hacking is way more fun than CLI fixing, here's my version of \"Fix #2489 again\"\n- Adds a \"private\" `_bindMethods` function wherein all binding takes place.\n  This preserves the readability of the compiled constructor and avoids any potential memory leaks (related: #3143).\n- Wrappers clone the parameters of the wrapped method and therefore have the same number of parameters and, for the most part (see example below), the same parameter names.\n- Superclass constructors do neither override previously bound methods (as in redux) nor mindlessly wrap already wrapped methods (as is currently happening)\n\nThis comes with a hefty dose of ugly. Though I doubt the compilation could get much nicer. Compare #3258 which fixes this issue in a different way (prettier classes but more helpers).\n\nBased upon prior art by @epidemian and @michaelficarra. Feel free to bash...\n#### Side effect\n\nThis PR unintentionally \"fixes\" #1819 (the same way redux does). This  breaks other fun stuff:\n\n``` coffee\nclass Nobody then expect: => console.log 'fluffy bunny'\ncallback = (new Nobody).expect\n# ...\nsetTimeout callback, 1000\n# ...\nNobody::expect = -> console.log 'spanish inquisition'\n```\n\nI can't really assess the severity of this change since I can't imagine why anybody would ever do anything like that (or #1819 for that matter).\n#### Example compilation\n\n``` coffee\nclass Foo extends Bar\n  baz: (@this=1, that, [which, what]) =>\n  qux: (args...) =>\n```\n\n``` js\n/* ... */\n\nFoo = (function(_super) {\n  var _bindMethods;\n\n  __extends(Foo, _super);\n\n  _bindMethods = function(_this) {\n    if (Foo.prototype.baz === _this.baz) {\n      _this.baz = function(_this1, that, _arg) {\n        return Foo.prototype.baz.apply(_this, arguments);\n      };\n    }\n    if (Foo.prototype.qux === _this.qux) {\n      _this.qux = function() {\n        var args;\n        return Foo.prototype.qux.apply(_this, arguments);\n      };\n    }\n  };\n\n  function Foo() {\n    _bindMethods(this);\n    return Foo.__super__.constructor.apply(this, arguments);\n  }\n\n  Foo.prototype.baz = function(_this, that, _arg) {\n    /* ... */\n  };\n\n  Foo.prototype.qux = function() {\n    /* ... */\n  };\n\n  return Foo;\n\n})(Bar);\n```\n",
    "head_branch": "issue2489",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe4c3a21fa1e1f1aa063",
    "number": 3258,
    "body": "Hi, this is yet another approach trying to fix #2489 .\n\nI read through the discussion of #2489 #2872 , and I came up with this lighter solution. Since `__bind` is not a public part, patching it will not break anything.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe4d3a21fa1e1f1aa064",
    "number": 3257,
    "body": "I'm using `coffee-script` and `connect.js`. I came into a problem and digged into `connect`'s source code, and I find on  [this line](https://github.com/senchalabs/connect/blob/2c574468dacca18eb1a81053d9c48b9110357b29/lib/proto.js#L185), connect uses [Function.length](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length) to determine the type of a handler. And then I found `coffee-script` failed to **perserve arities in bound functions of a class**.\n\nTo indicate the issue, I added two test cases. The first one passed, but the second one failed. I'll try to submit a patch later.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe4e3a21fa1e1f1aa065",
    "number": 3256,
    "body": " Implements #3249, #1994. This brings heredocs on par with simple strings. I also fixed trailing whitespace after escaped backslashes. Thanks to @jashkenas for the awesome regex (I changed the original so the callback is being called only when needed).\n",
    "head_branch": "issue3249",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 35d327a304210b847e33a7a4bec33b8790791410 into e3e8b1c50164c65f78e83c90bc16c009e35db0dd"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfe4f3a21fa1e1f1aa066",
    "number": 3255,
    "body": "- Fixes #3235 and a similar bug where some files might be unwatched.\n- Fixes a whole slew of bugs I seem to have introduced with #3234 (`node -cw SOME_DIR some_file` ignoring `some_file`, initial compilation with `--join` not happening when a subdirectory contains non-source files, ...) \n- Should make the code for compiling and watching less brittle and easier to understand.\n\nThis done by\n- using only absolute paths (for sources and targets)\n- using `path.*` functions instead of string methods\n- consolidating path filtering and management of `sources`\n- removing some unnecessary asynchronicity\n\nAny mention of `path.exists*` is also being removed. It was moved to `fs` in node 0.7.1 and our `package.json` lists node >=0.8.0 as dependency.\n\n---\n\nSorry for the monstrous size of this PR. The individual commits, however, should be bite-sized.\n\nIt would be extremely helpful if somebody with some time on their hands could pull the code and really try to break it. I'm somewhat limited in testing environments and mischievous imagination. Known issues (and kind of a roadmap):\n- When a watched file is deleted, its source-map is not removed (while the corresponding `.js` file is).\n- Windows: Deleting a watched directory results in an unhandled `EPERM`\n- Paths in source-maps are sometimes more complex than they need to be.\n",
    "head_branch": "CLI",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 52a54a76814a391ef84b777b7add88a39c60667e into f047ba52b21805751d68c95f1a2c8aac18601b01"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe503a21fa1e1f1aa067",
    "number": 3250,
    "body": "https://github.com/jashkenas/coffee-script/pull/3246#issuecomment-28819112\n",
    "head_branch": "issue3229",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 130899a39fbb53912f2d174316518843f4009a17 into 6847400ccbec4846b1a4543ba2ddef5638c6e77c"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe513a21fa1e1f1aa068",
    "number": 3246,
    "body": "Implements #3229. Please scrutinize. `trimAndEscapeLines` might not be the best method name under the sun. All feedback welcome.\n",
    "head_branch": "issue3229",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe523a21fa1e1f1aa069",
    "number": 3240,
    "body": "See discussion https://github.com/jashkenas/coffee-script/pull/3078\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge efca2861a65ec29ddf7304d6cb1175d1ec165d63 into b407a59baf892ce2fa3f0fcebc7fa1d13b65bbf5"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe533a21fa1e1f1aa06a",
    "number": 3237,
    "body": "- `super` compiles now in static methods with reserved names (#2949)\n- `@fn: -> super` and `@fn = -> super` produce the same compilation (#3232)\n- `super` will no longer compile for ambiguous / wrong super-targets (see Implications below)  \n#### Theory of Operation / Changes\n\n`super` compiles only within a `Code` node that either\n- is marked as a constructor (by `Class`)\n- has both `.name` and `.klass` set\n- has no own `.name` but is contained by another `Code` with both properties\n\nIf the `Code` node also has a truthy `.static` the super call will be compiled accordingly.\n\n`.static` is set by `Class` for object assigns with a `@`. **Changed**: 97d9a63 looks also at non-object assignments. This fixes #3232.\n\n`.klass` is set by\n- `Class` to all its functions (on the class-level, not nested functions)\n- `Assign` to prototype functions, i.e. if the LHS begins with the form {CLASS_NAME}.prototype.{IDENTIFIER|INDEX}. This has been **changed** to match only this exact form. (see also below)\n\n`.name` is set by `Assign` which inspects its LHS with the help of the `METHOD_DEF` regexp. (Except constructors, they get their name from `Class.ensureConstructor`.)             \n\n**Changed**: 138c25f restricts `METHOD_DEF` to match only \n- assignments to a prototype property, e.g. `C::f = ->`\n  But no longer to properties of objects on prototypes, e.g. `C::f.g = ->`\n- assignments to a property of a possible class, e.g. `C.static = ->`\n  But no longer to anything else that ends with an IDENTIFIER, e.g. `C.a.b = ->`\n\nBoth cases are now detected in the same way. This fixes #2949.\n#### Implications\n\nThe following examples do not work anymore and will throw a 'cannot call super ...' error. None of those look correct or useful to me.  \n\n``` coffee\n    class Foo \n      bar = -> super\n      # bar = function() {\n      #   return Foo.__super__.bar.apply(this, arguments);\n      # };\n\n      bar.baz.qux = -> super\n      # bar.baz.qux = function() {\n      #   return Foo.__super__.qux.apply(this, arguments);\n      # };\n\n      # This (regrettably) still works\n      bar.baz = -> super\n\n    Foo::bar.baz = ->\n    # Foo.prototype.bar.baz = function() {\n    #   return Foo.__super__.bar.apply(this, arguments);\n    # };  \n```\n\nThe following examples will no longer throw 'cannot call super ...' but compile. (This is related to #1606 -- but by no means complete or usable).   \n\n``` coffee\n    class Foo\n      @bar: ->\n        baz = -> super\n        # return baz = function() {\n        #   return Foo.__super__.constructor.bar.apply(this, arguments);\n        # };\n\n    Foo::bar = ->\n      baz = -> super\n      # return baz = function() {\n      #   return Foo.__super__.bar.apply(this, arguments);\n      # };\n```\n",
    "head_branch": "fixSuper",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe543a21fa1e1f1aa06b",
    "number": 3234,
    "body": "Fixes #3087 by using synchronous `fs` functions, as @jashenkas [suggested](https://github.com/jashkenas/coffee-script/pull/3087#issuecomment-26680461).\n\n(Also removed a never used variable.)\n#### Why this is safe\n\n`compilePath` is called by:\n- `run` -- the \"main\" function, only invoked by `bin/coffee` (and by no means an API). This is exactly the place where we need less asynchronicity.\n- `compilePath` itself (See also below)\n- the `setTimeout` callback in `watchDir`. This just runs once it's started and nothing depends on its timing.\n\n`compilePath` itself is now synchronous / blocking (it does not call any asynchronous functions). This means that watchers will now predictably run only after `compilePath` has finished (and not possibly in the midst of it).\n\nPerformance impact (if any) should be negligible since compilation is largely CPU bound.\n",
    "head_branch": "issue3087",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 96ae98fadea2aa46b15369a20b75a8de4421fbc8 into efb9809d3b4c67cfb483dcdc4563e8c1548f6cb1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe543a21fa1e1f1aa06c",
    "number": 3233,
    "body": "As per the discussion here https://github.com/jashkenas/coffee-script/commit/e7ebdce60fadb4349318f14a4409d1a077a63ebf#commitcomment-4379191 I removed the existential check. I also removed the unnecessary `+` typing, since `-` operator does that already.\n",
    "head_branch": "issue2953cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe553a21fa1e1f1aa06d",
    "number": 3228,
    "body": "This fixes a side effect of 392767a0. Unnecessary wrappers are created for:\n- bound functions in class bodies, that are not methods (This is related to #1947, which can be closed.)\n- bound function within bound functions\n\nCompilation examples at https://gist.github.com/marchaefner/7284379\n\n(PR also removes an assignment to an unused variable.)\n#### Theory of Operation\n- The context (i.e. `this`) within bound functions will be replaced with the `.context` of the function / `Code` node. (in `Literal::compileNode`)\n- `Class` sets `.context` on contained bound functions (but not instance methods) to its name.\n- A bound function within a bound function will inherit its context. (This is currently done too late, after deciding whether to wrap.)\n- If the context has not been set, and only then, we need to set it to `_this` and wrap the function. (Currently the context is set unconditionally and possibly overridden afterward.)\n",
    "head_branch": "fixClassCompilation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d41d87a87463ac563a359dd1459cb905269373c0 into ab40571ffc5846b9bed6db171b2c61d9084ab74e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe563a21fa1e1f1aa06e",
    "number": 3227,
    "body": "Closes #3008\n- Make scope of `Code` externally accessible.\n- Explicitly construct `Code` and `Call` nodes in `Class.compileNode`\n  This allows for easier access to scope, code parameters and call arguments.\n- `Closure` already started to come apart while doing the above, so I went ahead and dissolved it completely.\n\nChanges in compilation:\n- Reference to external constructor is now within the scope of the class IIFE.\n- IIFE of classes with bound functions (that are not methods) will not be invoked via `.call(this, ...)` (Safe because the outer context is irrelevant for the class, all occurrences of `this` within the class body are replaced with the class name.)\n",
    "head_branch": "fixClassCompilation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5d13d14de98a163c95a2c01eec78450464af0acd into 45b60c9a527024453713a0814c7c94be59153615"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfe573a21fa1e1f1aa06f",
    "number": 3224,
    "body": "- Don't put `__extends` call above directive prologue.\n- (Partial) fix for #3008: Don't add unnecessary `_ref` for implicit calls to super / external constructor (see discussion below). Plus some code simplification.\n#### Discussion\n\nAn implicit call to super is only generated when no constructor exists. \n\nMethod bindings must happen before the implicit call to super or an external constructor:\n- It's been like that since (at least) 9a5546c8 (except for 1.6.0)\n- The superclass's or external constructor should be able to use overwritten methods (that are properly bound).\n- Otherwise the superclass would have to iterate over the prototype chain to determine which methods will be bound later on by any subclass constructors.\n- A class without a constructor should behave as if the constructor was\n  `-> super`\n\nGiven the above points (and contrary to a previous [comment](https://github.com/jashkenas/coffee-script/issues/3008#issuecomment-18802022)): The implicit call to super / external constructor is always the last expression. This allows the removal of `_ref`, circumventing any scope issues.\n\nStill to fix:\n- The `_class` reference to an external constructor is leaking into the outer scope. (See comments in #3008.) \n- Binding is done unconditionally. Bound methods that were overridden in subclasses are wrapped multiple times. (It is also not possible to override a bound method with an unbound one.)\n",
    "head_branch": "fixClassCompilation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe583a21fa1e1f1aa070",
    "number": 3218,
    "body": "...as per discussion in #3214.\n\n(Plus a pair of forgotten parentheses.)\n#### Implementation Note\n\nIf the heregex has interpolations the compilation of escaped linebreaks and literal `\\n` is slightly different (but semantically the same):\n\n```\n/// \\n\\\n#{x} ///\n```\n\ncompiles to:\n\n```\nRegExp(\"\\\\n\\n\" + x);\n```\n",
    "head_branch": "issue3059",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0d662c3ad2f6bfbe923b19b45a9805947a42a297 into 54840c0cbf0571e083ea74c47cf6b5cb719ce5b0"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfe593a21fa1e1f1aa071",
    "number": 3214,
    "body": "Escaped whitespace and slashes in Heregexes\n- Resolves #3059: Don't remove escaped whitespace.\n- Fixes #2238: Prevent escaping slashes that are already escaped.\n- Fix detection of end of heregex with escaped slashes.\n\nEscaped whitespaces and slashes in Heregexes\n\nIt's a bit ugly but it implements #3059 and fixes #2238.\n(Google and MSDN say this should work with all relevant JS engines.)\n\nThis PR also fixes the `HEREGEX` regex, so this is a thing now:\n\n```\nthreeSlashes = /// \\/// ///\n```\n#### Notes\n- Linebreaks are excluded from the escapable characters to avoid any confusion. (A backslash at the end of a line usually denotes a continuation on the next line but would mean the exact opposite here.)\n- Whitespace escaping introduces a potential pitfall:\n  \n  ```\n  /// this\\ #is not a comment ///\n  ```\n  \n  It would be possible to treat this as a comment but that would be somewhat inconsistent and break other constructs (e.g. `/// ^[\\ #].* ///`).\n",
    "head_branch": "issue3059",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 91ac3fa0311e8fdbe7451fabe7e2e9cb291469f9 into c22707cd53efb72ae2b81683562a6abdb9434fa9"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfe5a3a21fa1e1f1aa072",
    "number": 3212,
    "body": "See issue: https://github.com/jashkenas/coffee-script/issues/3210\n\nAdd a new cli option: `-g --polling [SPAN]`\n\n```\nIf state polling mode is enabled, use it.\nElse use the native api.\n\nThis is useful while watching remote directory.\nSuch as the `fs.watch` won't catch the SMB server's file change event.\n```\n",
    "head_branch": "issue3210",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe5b3a21fa1e1f1aa073",
    "number": 3211,
    "body": "Fixes two errors with conditional assignments as subexpressions:\n1.  #2181: `||=` and `&&=` are not properly parenthesized.\n   \n   Straightforward fix, analogous to the other assignment variants.\n2.  Variable caching for `?=` is broken. (Could not find a related issue.)\n   \n   ``` coffee\n   x = foo().bar ?= baz\n   ```\n   \n   compiles to\n   \n   ``` javascript\n   x = (_base = foo()).bar != null ? (_base = foo()).bar : _base.bar = baz;\n   ```\n   \n   Fixed by constructing the `If` directly in `Assign.compileConditional` instead of delegating to `Op` and losing the reference (`_base.bar`) in the process.\n   \n   Compilation is now (as it should be):\n   \n   ``` javascript\n   x = (_base = foo()).bar != null ? _base.bar : _base.bar = baz;\n   ```\n",
    "head_branch": "issue2181",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe5c3a21fa1e1f1aa074",
    "number": 3209,
    "body": "If you don't want this feature, I totally understand and you can close this PR. I'm just doing this since I've already written the code for personal use.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe5d3a21fa1e1f1aa075",
    "number": 3208,
    "body": "At the moment, if you're using coffee-script in a node project, it will change your `require.extensions` so that `.coffee`, `.litcoffee`, and `.coffee.md` files are compiled by coffee-script before they are evaluated by node.\n\nWhen you require another project that also uses coffee-script, it will again change `require.extensions`, but this time with whatever version of coffee-script got required by that project. This results in some pretty strange bugs.\n\nFor example, in one particular project I use both coffee-script version 1.6.3 and [grunt](https://github.com/gruntjs/). For backwards-compatibility reasons, grunt requires coffee-script version 1.3.3 (see gruntjs/grunt#911). As soon as I require grunt, I am no longer using coffee-script 1.6.3 -- now I am using 1.3.3.\n\nSeems to me that the overarching project should be able to set the version, and required dependencies should not be able to change it.\n",
    "head_branch": "prevent_coffeescript_overwrite",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe5e3a21fa1e1f1aa076",
    "number": 3198,
    "body": "Preview here: http://s.jiyinyiyong.info/coffee-script/index.html\n\nUse `highlight.js` and `eco` to replace `uv` and `erb` which were previously used.\nFor the theme, I forked `hightlight.js`'s `tomorrow.css`, make it look like current one as much as possible.\nAnd I have checked, the obvious links on the page are working now.\n`Rakefile` is removed in `gh-pages` branch.\n\nRelated issue: https://github.com/jashkenas/coffee-script/issues/2193#issuecomment-25814876\n",
    "head_branch": "doc-in-echo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9d397de8088d46c5fe77aa027383b2b0cd288c8c into 40943996d7f5a364c163af2df04549445e76657e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfe5f3a21fa1e1f1aa077",
    "number": 3193,
    "body": "Replaced some parentheses with curly-braces to prevent HCl formation in H2O vapor.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 18e5b6b199b91a56f30674dff6cb34fcaa0f61ed into 6da2306fe2266402cd6028982b6610fda928a492"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe603a21fa1e1f1aa078",
    "number": 3189,
    "body": "Moves call to `require.resolve` inside a conditional as suggested here (jashkenas/coffee-script#3107) in order to resolve #3186.\n",
    "head_branch": "issue3186",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a8e4b788036b7b7f4546b6017ce3bf57100c90cc into a3be1f6e48f291a0df3738fabe9a11505c857185"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe603a21fa1e1f1aa079",
    "number": 3174,
    "body": "The modifications imply that the following now compiles correctly:\n\n```\n[1..2e3]\n[1..0o777]\n[0b1101..9]\n[0xfe..0o4]\n```\n\nDecimal number in ranges now also compile properly:\n\n```\n[1..42.42]\n\nBefore:\nfor (var _i = 1; 1 <= 42.42 ? _i <= 42.42 : _i >= 42.42; 1 <= 42.42 ? _i++ : _i--){ _results.push(_i); }\n\nNow:\nfor (_i = 1; _i <= 42.42; _i++){ _results.push(_i); }\n```\n\nThe tests are passing; I wouldn't mind someone checking that I didn't break anything though.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 89ef3d411790552bdc0283c501ed80d7d18dae69 into 4cf75ec0273ce566bd69f03a1523af95d28ff6e8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfe613a21fa1e1f1aa07a",
    "number": 3171,
    "body": "Here's the macro system we've been using internally. It's not very lispy, but that might be a good thing to most. :) I'd say it's pretty clean, well, for a macro system anyway...\n\nSome examples. Optionally compiled debug info:\n\n``` coffeescript\nmacro debug (args...) -> new macro.Call(new macro.Literal(\"debugImpl\"), args) if @debugging\nmacro -> @debugging = true\ndebug \"test\", 123 # console.log gets generated\nmacro -> @debugging = false\ndebug \"test\", somethingHeavy() # nothing gets into the output js\n```\n\nThe mandatory swap example. Cheating a bit by using deconstruction, but this does show some of the more interesting features. The coffeescript code \"[x,y] = [y,x]\" get translated to nodes, and then an identifier substitution replaces x and y by whatever nodes are the arguments.\n\n``` coffeescript\nmacro swap (a,b) -> (macro.codeToNode -> [x,y] = [y,x]).subst {x:a,y:b}\nswap var1, var2\nswap d[123], e[f].g\n```\n\nIf you want, you can go pretty crazy with this. Non-sense from the unit test:\n\n``` coffeescript\ntst = (a,b) -> a*b\ntst2 = -> 4\nmacro calc (c1,c2,c3,c4) ->\n  func = macro.codeToNode ->\n    x = (a) -> tst(a,c1) * c2\n    x(c3) + x(c4)\n  func.subst {c1,c2,c3,c4}\neq 144, calc 6, 3, 5, 3\neq 144, calc (macro.codeToNode -> tst2()+2), 3, 5, 3\n```\n\nOne thing we're using compile-time logic for, is resource versioning of web resources (so we can have clients cache them permanently, and all references to them will automatically change the (otherwise ignored) version number whenever the resource is updated.\n\n``` coffeescript\nmacro -> @getFileVer = (file) -> 13 # stub\nmacro resUrl (name) ->\n    name = macro.nodeToVal name\n    macro.valToNode \"/data/#{name}?v=\" + @getFileVer(\"static/#{name}\")\nsomeImg.src = resUrl 'test.png'\n```\n\nAlso one of the more interesting applications (for us), is string translations.\n\n``` coffeescript\ninterpolateAndPluralize = (msg,arg) -> msg.replace(\"%1\",arg).replace(/[\\[\\]]/g,'') # stub\n\nmacro -> @transDict = waterBottles: \"%1 bottle[s] of water\" # can be loaded from a file\n\nmacro trans (args...) ->\n  args[0] = macro.valToNode @transDict[macro.nodeToId args[0]]\n  new macro.Call(new macro.Literal(\"interpolateAndPluralize\"), args)\n\nsomeExample = trans waterBottles, 17\n```\n\nIn this example, we're just doing the actual translation compile-time, but one could easily improve upon this by resolving the string insertions at compile time, and generating custom code for the pluralizations.\nOne could even accept the coffeescript string interpolation syntax. Eg:\n\n``` coffeescript\nconsole.log trans \"I'm to be translated within #{days} day[[s]]!\"\n```\n\nwould translate to:\n\n``` coffeescript\nconsole.log \"Vertaal mij binnen #{days} dag#{days==1?'':'en'}!\"\n```\n\nI'm quite curious to hear any thoughts on this approach...\n\nRegards,\nFrank\n",
    "head_branch": "macro",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe623a21fa1e1f1aa07b",
    "number": 3166,
    "body": "This PR resolves #2353 **Make \"// Generated by CoffeeScript\" optional**.\n\nAlthough the header can be suppressed programmatically with `options.header`, this allows the header to be  also be suppressed from command-line invocation with the -g/--generated flag.\n\nAdditionally, there are cases where the first line of a file is required to be non-JS (i.e. for a shebang).  The author may still want to retain the CoffeeScript version information while allowing custom formatting.  Therefore `options.generated` can be set to a formatting function which is passed the compiled JS and `CoffeeScript.VERSION`, and returns the formatted output.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe633a21fa1e1f1aa07c",
    "number": 3165,
    "body": "The last 2 examples in the [Destructuring Assignment](http://coffeescript.org/#destructuring) section of the docs both call `run: contents.join(\"\")` but the last example doesn't include any variables named `contents` (copy-paste error).\n\nI only started coffee-script yesterday so if this example is trying to demonstrate something else or would be better off with <code>code_for('constructor_destructuring', <strong>executable=false</strong>)</code>, let me know!\n\nThanks for the language!  :smile: \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe643a21fa1e1f1aa07d",
    "number": 3151,
    "body": "Some places used 4 spaces instead of 2.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 999a3db49901fe6a5c3090dcc21c98316abfa12f into 1765a7ae0ce637580280570d2fd59a80504142f1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe653a21fa1e1f1aa07e",
    "number": 3150,
    "body": "... via option `.useGlobal`.\n\nNote that, at least for now, CoffeeScript's own REPL _CLI_ still uses a\nnon-global context, rendering modules such as `color`, which attempt to\nmodify the prototypes of JavaScript primitives, ineffective. By\ncontrast, node's own CLI does use the global context.\n",
    "head_branch": "fix-repl-module-global-context-support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ae4535d639e33b276fd4e31cba9c542af13df446 into c5120c798086035f263428f00e888785094a5ed6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe663a21fa1e1f1aa07f",
    "number": 3147,
    "body": "```\n$ echo 'process.exit 1' > foo.coffee\n$ coffee foo.coffee ; echo $?\n1\n$ coffee --nodejs --no-deprecation foo.coffee ; echo $?\n0\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe673a21fa1e1f1aa080",
    "number": 3146,
    "body": "This is a straightforward fix to the broken formatting found on the official CoffeeScript site. The [top search result for 'Underscore CoffeeScript'](http://bit.ly/google-search-underscore-coffeescript) is this page.  Having a well formatted project page makes the project that much more approachable to potential new adopters. No source files were changed. See screenshots below for comparison. The syntax highlighting, alignment, and responsive formatting have been fixed.\n## Before\n\n![broken](https://f.cloud.github.com/assets/1577682/1051297/88363f9e-10c8-11e3-868f-5d2a28f0ad7d.jpg)\n## After\n\n![fixed](https://f.cloud.github.com/assets/1577682/1051299/927659bc-10c8-11e3-9415-bd4a9daf4392.jpg)\n",
    "head_branch": "fix-underscore-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ce14ad764ae7ae1e814049a1ab71954ce3a7fe69 into 96e807c67743d78435f1f2837d069645ac60307a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe683a21fa1e1f1aa081",
    "number": 3144,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe693a21fa1e1f1aa082",
    "number": 3132,
    "body": "This is probably not a big deal, but I just don't like the way this works:\n\n``` coffee\n###\n# This is a block comment, with important details!\n###\n```\n\nOutputs to\n\n``` js\n/*\n# This is a block comment, with important details!\n*/\n```\n\nI feel like it would be better to format block comments more like\n\n``` js\n/*\n * This is a block comment, with important details!\n */\n```\n\nI don't think this would be terribly difficult to implement - so I might take a stab at it. The only reason it bothers me is because it looks so unclean and weird.\n\nSo, I dunno, is it worth taking a stab at?\n",
    "head_branch": "issue-3132",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe6a3a21fa1e1f1aa083",
    "number": 3130,
    "body": "Use docco to regenerate documentation for underscore.coffee. Per @ruanp suggestion, screenshots are attached. The syntax highlighting, alignment, and responsive formatting have been fixed.\n## Before\n\n![broken](https://f.cloud.github.com/assets/1577682/1051297/88363f9e-10c8-11e3-868f-5d2a28f0ad7d.jpg)\n## After\n\n![fixed](https://f.cloud.github.com/assets/1577682/1051299/927659bc-10c8-11e3-9415-bd4a9daf4392.jpg)\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe6a3a21fa1e1f1aa084",
    "number": 3113,
    "body": "This will make packages that modify native prototypes - e.g. [`colors`](https://github.com/Marak/colors.js), [`sugar`](https://github.com/andrewplummer/Sugar) - work as expected.\n\nTo verify that the `node` REPL _CLI_ uses the global context, run `node` in a shell and execute `global\n=== module.exports.repl.context`.\n\n**Note**: By contrast, _programmatic_ use (`require 'repl'`) will continue to default to a NON-global context, which is, again, consistent with node's behavior.\n\nSimple test for whether the fix is effective: install package `colors` and execute the following in the REPL: `require 'colors'; console.log \"I'm blue\".blue` - in a global context, the string will be printed in blue; in a non-global context, it will simply print 'undefined'.\n",
    "head_branch": "make-repl-use-global-context",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe6b3a21fa1e1f1aa085",
    "number": 3111,
    "body": "There was an embarrassing bug in the way column numbers were computed.  :)\n\nThe results from http://sokra.github.io/source-map-visualization are not as perfect as they could be - there's definitely some fine tuning to be done in terms of what gets mapped to what - but the results are obviously _miles_ better than they were.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3ad332d5d4be3712f197d22fa2435f4b01cbb918 into 15517df417370a286d2ad91111ac91222d393c7a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe6c3a21fa1e1f1aa086",
    "number": 3107,
    "body": "This solves two potential problems when it comes to forking:\n1. Forking will now work correctly even when `coffee` is not installed  \n   globally.\n2. Forking when using a locally installed version of `coffee` will fork  \n   using that version, and not fallback to a globally installed version.\n\nFixes #2957\n\n---\n##### A Note About Tests\n\nNo additional tests have been added for this PR, however existing cluster tests continue to pass, and no longer throw `execvp(): No such file or directory` / `Error: spawn ENOENT` errors when coffee-script is not installed globally.\n",
    "head_branch": "issue2957",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3c2f0d174e91e1ece45baa9b5bef61fba9cfb9c0 into 8cf6f62ea4766e73eb4eadf18d861e37a9ef5408"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe6d3a21fa1e1f1aa087",
    "number": 3104,
    "body": "",
    "head_branch": "recompile",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f5f99b3022120ed3fbd687c7d90253c56a2cf6e8 into dc3d70e6968d4a7e52a61efe6cbfa36139fbd071"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe6e3a21fa1e1f1aa088",
    "number": 3103,
    "body": "Sorry @jashkenas, I was too slow (or you were too fast). I have realized that when original `mkdir -p` is used, it should call `compile()` upon its success only. Feel free to ditch this, if such fix is not necessary.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe6f3a21fa1e1f1aa089",
    "number": 3101,
    "body": "Tried for solution of jashkenas/coffee-script#2027 using [node-mkdirp](https://github.com/substack/node-mkdirp)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e644f7244df3f712ef5a1d997695c19bd4e200bb into f48aa4438621df69fe30d90ce43148f9722c381e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe703a21fa1e1f1aa08a",
    "number": 3100,
    "body": "This PR is an attempt at fixing #3023 and make the display of compiler errors less problematic/fragile.\n\nInstead of throwing the syntax errors with their source file location and needing to then catch them and call a `prettyErrorMessage` function in order to get the formatted error message, now syntax errors know how to pretty-print themselves (their `toString` method gets overridden).\n\nAn intermediate `catch` & re-`throw` is needed at the level of `CoffeeScript.compile` function and friends to add the source file information to the errors. But the benefit of this approach is that now libraries (or people =P) that use the `CoffeeScript` object directly don't need to bother catching the possible compilation errors and calling a special function in order to get the nice error messages; they can just print the error itself (or let it bubble up) and the error will know how to pretty-print itself.\n\nThe bit about overriding the `stack` property of the syntax errors (2b4a37296ff8fd2559364f59c386f9d37aab3e49) is a little involved i think, but that's basically what fixes #3023. Originally, i though that overriding the `toString` method and deleting the `stack` property [was enough](https://github.com/epidemian/coffee-script/commit/3f9cdcf1faaa34ce7322cea79be724003c57d51e#L6R146) to make the formatted error messages appear on Node.js. It turns out that only on Node's _REPL_ (and Coffee's REPL too) the `toString` method of the error is used to display the message if the error doesn't have a `stack`. On vanilla Node only the error's `stack` is shown, and if it doesn't have one it just shows the `<ErrorClass>: <message>` style of message.\n\nExample using current Coffee's master to compile some broken code using the compiler as a library (and relying on the require extension, which is basically what Mocha [does](https://github.com/jashkenas/coffee-script/issues/3023#issuecomment-19172246)):\n\n```\n$ echo 'class class class' > /tmp/error.coffee\n$ node -e 'require(\"coffee-script\"); require(\"/tmp/error.coffee\");'\n\n/usr/lib/node_modules/coffee-script/lib/coffee-script/coffee-script.js:183\n      throw err;\n            ^\nSyntaxError: unexpected CLASS\n  at Object.exports.throwSyntaxError (/usr/lib/node_modules/coffee-script/lib/coffee-script/helpers.js:197:13)\n  at Object.parser.yy.parseError (/usr/lib/node_modules/coffee-script/lib/coffee-script/coffee-script.js:273:20)\n  at Object.parse (/usr/lib/node_modules/coffee-script/lib/coffee-script/parser.js:616:22)\n  at exports.compile.compile (/usr/lib/node_modules/coffee-script/lib/coffee-script/coffee-script.js:38:24)\n  at compileFile (/usr/lib/node_modules/coffee-script/lib/coffee-script/coffee-script.js:174:16)\n  at Object.loadFile (/usr/lib/node_modules/coffee-script/lib/coffee-script/coffee-script.js:190:14)\n  at Module.load (/usr/lib/node_modules/coffee-script/lib/coffee-script/coffee-script.js:219:36)\n  at Function.Module._load (module.js:312:12)\n  at Module.require (module.js:364:17)\n  at require (module.js:380:17)\n  at [eval]:1:27\n  at Object.<anonymous> ([eval]-wrapper:6:22)\n  at Module._compile (module.js:456:26)\n  at evalScript (node.js:532:25)\n  at startup (node.js:80:7)\n  at node.js:901:3\n```\n\nNot a very helpful error if you want to know where the heck is the problem.\n\nOnly deleting the `stack` property:\n\n```\n$ node -e 'require(\"coffee-script\"); require(\"/tmp/error.coffee\");'\n\n/usr/lib/node_modules/coffee-script/lib/coffee-script/coffee-script.js:197\n      throw err;\n            ^\nSyntaxError: unexpected CLASS\n```\n\nLess noisy but still not very helpful.\n\nOverriding the `stack`:\n\n```\n$ node -e 'require(\"coffee-script\"); require(\"/tmp/error.coffee\");'\n\n/usr/lib/node_modules/coffee-script/lib/coffee-script/coffee-script.js:197\n      throw err;\n            ^\n/tmp/error.coffee:1:7: error: unexpected CLASS\nclass class class\n      ^^^^^\n```\n\nYeah! _Now_ i know which `class` is wrong! :stuck_out_tongue_closed_eyes:  (the example is very simple; but image a many-hundred LOC file with an error somewhere in the middle; the error location and highlight helps a lot in those cases)\n",
    "head_branch": "issue3023",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9e716b310d78fb4ea97e6f065e76d512a93ba5f8 into e44bf9ae810b388184a25b649394c7b9bed0aeef"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfe713a21fa1e1f1aa08b",
    "number": 3097,
    "body": "I must admit I don't like it as much as I think I would've.\nDoesn't really cleans up anything, considering all actions are very basic.\n",
    "head_branch": "ditto",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe723a21fa1e1f1aa08c",
    "number": 3096,
    "body": "Fix for #2994 and some minor cleanup.\n### Discussion / Motivation\n\nThis is done primarily to avoid confusion for people coming from a Python background.\n\nWhy not implement a Python-like `else` clause? This would not be very useful in CoffeeScript because we don't have (enough) statements. The quintessential use case for this feature:\n\n``` python\n    x = default_value if is_normal else special_value\n```\n\nwould not work in CoffeeScript because the above line would be equivalent to:\n\n``` coffee\n    (x = default_value) if is_normal else special_value\n```\n### Implementation Note\n\nThis fix is slightly ugly, since now even more functionality from `removeMidExpressionNewlines` is handled by `addImplicitIndentation`. (It already started with the `TERMINATOR THEN` case.)\n\nIt is possible (and easy) to merge the two functions ([here](https://github.com/marchaefner/coffee-script/blob/fdd5796f5ebfbe67817558d26f4b7a7d83d8ab4b/src/rewriter.coffee#L376-L378)).\n",
    "head_branch": "issue2994",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe733a21fa1e1f1aa08d",
    "number": 3094,
    "body": "I was working on something else and noticed that the compiled JS files were not up-to-date with some of the latest changes. \n\nTo avoid mixing things up, here's a standalone PR just for updating that stuff. \n\nAll tests still passing.\n",
    "head_branch": "compile-js",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 51c625205bdd27f2028c89c614f226d091ed17e3 into e581f7d2f0acb9a2aba139f4d82fcf2ceafb9c51"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe743a21fa1e1f1aa08e",
    "number": 3087,
    "body": "I expected this to produce a JavaScript file containing the compiled output of each of the three source files in the specified order:\n\n``` make\ndist/quux.js: src/foo.coffee src/bar.coffee src/baz.coffee\n    @node_modules/.bin/coffee --compile --print $+ > $@\n```\n\nApparently this usage was not anticipated, as order in which the compiled code is written to stdout in nondeterministic (i.e. not necessarily _foo_ then _bar_ then _baz_).\n",
    "head_branch": "deterministic",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe753a21fa1e1f1aa08f",
    "number": 3083,
    "body": "https://github.com/jashkenas/coffee-script/issues/3082\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe753a21fa1e1f1aa090",
    "number": 3078,
    "body": "Generators have landed in V8 and Node.JS and they're pretty useful. I think CoffeeScript should have support.\n\nI've hacked in basic support, I'm sure more work is needed but I thought it would be useful to start the discussion.\n\nI'm interested in what the CoffeeScript policy is for features not supported by all JS engines, should they be left out or would it be useful to have a fallback implementation (based on a CPT and a Trampoline?) as a command line option? Neither seem satisfactory but then neither does restricting CoffeeScript user's use of exciting new JavaScript features :)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe763a21fa1e1f1aa091",
    "number": 3071,
    "body": "[fix bug] create a '-p' directory when run coffee command in windows.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe773a21fa1e1f1aa092",
    "number": 3067,
    "body": "Would love to see the bottom of the nav-menu on my small monitor. :)\n",
    "head_branch": "gh-pages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe783a21fa1e1f1aa093",
    "number": 3054,
    "body": "`require.extensions` should not be modified in the top level. For example, variable `require.extensions` of a script file that loads coffee script by using `var coffee = require('coffee-script')` is modified unexpectedly. `require.extensions` should remains as-is until 'run' is explicitly called.\n\nBy implementing this, I created another script file named `compile-helper.coffee` and moved some functions from `coffee-script.coffee` to it. In 'compile-helper.coffee' the new function is named `registerRequire`, which replaced the code in the top level before. `registerRequire` is called in function `run` of `coffee-script.coffee`.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe793a21fa1e1f1aa094",
    "number": 3051,
    "body": "For the reasons mentioned [here](http://updates.html5rocks.com/2013/06/sourceMappingURL-and-sourceURL-syntax-changed), the syntax for Source Maps has changed from;\n\n``` javascript\n//@ sourceMappingURL\n```\n\nto\n\n``` javascript\n//# sourceMappingURL\n```\n",
    "head_branch": "source-map-syntax-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 34c170428621d929b78943b9a21ca7cf41279331 into 0c9f0fd09975185a2cd14f1a9539d94fc7505613"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe7a3a21fa1e1f1aa095",
    "number": 3049,
    "body": "In #3026, an extensions variable was introduced with file-level scope\nthat defined the filetypes that CoffeeScript can compile. However, the\nModule::load patching calls findExtension() which uses a local variable\ncalled \"extensions\", which was overriding the outer level one and\ncausing getSourceMap() to fail.\n",
    "head_branch": "extensions-scope",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7f1088054c91f5ab3bf1ea1098b6ebffaa29a5a9 into ef5f58e30e716f7a9fbee86f89ee26b5d0834f90"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe7b3a21fa1e1f1aa096",
    "number": 3045,
    "body": "Some tests fail under Windows due to hardcoded *nix path separators.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 13024e69119a6067d7641a8964e4cbde213dec0c into 32e8e562eafeee68b41200c752a9f614b2e31972"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfe7c3a21fa1e1f1aa097",
    "number": 3044,
    "body": "Add optional to treat literate coffeescript file by its suffix, so this would works too:\n\n``` html\n<script type=\"text/coffeescript\" src=\"foobar.litcoffee\"></script>\n<script type=\"text/coffeescript\" src=\"foobar.coffee.md\"></script>\n```\n\nThe same logic applying [here](https://github.com/jashkenas/coffee-script/blob/f277a43/src/command.coffee#L320).\n",
    "head_branch": "literate-optional",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe7d3a21fa1e1f1aa098",
    "number": 3043,
    "body": "The `path` only available in Node.js, should have it checked first.\n",
    "head_branch": "reference-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7fdac5c3b92f601034124eecc040b873de51c2ad into b68fd9d76ef23c0df5ca422de1eaa97a8a45571d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe7e3a21fa1e1f1aa099",
    "number": 3042,
    "body": "Fixes #2844 by not searching for missing `locationData` on nodes that (provably) have it already set.\n\nThe effect (on my humble computing machine):\n\n```\n$ cake bench                          $ cake bench\nLex      426 ms (28534 tokens)        Lex      418 ms (28534 tokens)\nRewrite  775 ms (31761 tokens)  ___\\  Rewrite  644 ms (31761 tokens)\nParse   4946 ms                    /  Parse    629 ms\nCompile  717 ms (177853 chars)        Compile  723 ms (177853 chars)\ntotal   6864 ms                       total   2414 ms\n```\n\nBecause the relevant code is somewhat complex, here's a lengthy discussion as to how everything works, what goes wrong and how this PR fixes it:\n### `locationData` on AST nodes - Theory of Operation\n\nAST nodes are constructed by:\n- parser actions\n- node constructors\n- `If.addElse` via `@ensureBlock`\n- compilation-methods of nodes\n\nThe `locationData` on AST nodes is set (solely) by the `updateLocationDataIfMissing` method which in turn is (only) invoked by the `addLocationDataFn` helper. The helper is used in parser actions implicitly for each action result or explicitly by `LOC`.\n\n`updateLocationDataIfMissing` sets the `locationData` on a node and then recursively traverses down its child nodes. The latter ensures that all child nodes have their `locationData` set, allowing for simpler parser actions (not littered with `LOC` invocations).\n### The speed bump\n\nWhile the behaviour described above might seem innocuous, it means that for almost every production all subjacent AST fragments are wholly traversed, in search of a missing `locationData` attribute.\n### Fixing it\n\nThis PR fixes one issue (see below) to ensure that for all nodes that have `locationData`, all of their child nodes do too. Thus `updateLocationDataIfMissing` only needs to operate on \"location-less\" nodes.\n\nThis is fairly simple: We don't need to care about nodes constructed during compilation at all (as they are not involved in any of this).\n\nAlmost all nodes constructed in parser actions and subsequently in constructors are (part of) the return value and will be processed by `LOC`/`addLocationDataFn`.\n\nThe only exception is the second `if` of `IfBlock ELSE IF ...` which is added to `IfBlock` via `If::addElse` which returns the (first) `IfBlock` (that already has a `locationData`). This is fixed by explicitly calling `LOC`.\n\n`If::addElse` does also construct a `Block` node. Its `locationData` is now set to that of the wrapped `elseBody`. This is just for completeness sake, so that all AST nodes always have `locationData`.\n",
    "head_branch": "issue2844",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 25c6001a6c2bc553acdc234bd2ba3665563175ec into 7250fdd576b44c32162d1a7d434a87ae307330e3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe7f3a21fa1e1f1aa09a",
    "number": 3034,
    "body": "Better handling of initial indent at file start.\n- Detect initial indentation before the first token and enforce it.\n  \n  Throw an appropriate error if a token is less indented. This fixes #2981.\n  \n  Note that under-indentation is _still_ possible for comments, strings and here-regexes.\n- Don't add `INDENT` token (or the matching `OUTDENT, TERMINATOR`).\n  \n  This avoids a different token stream for \"base-indented\" code, in particular literate code, which fixes #2955.\n\nIt would be possible to allow under-indented code (via a shrinkable `@baseIndent`), but i assume that a missing indentation is almost always by mistake.\n\nThis PR is an alternative to #2985 and basically the solution @Nami-Doc suggested in #2981 (except the weird errors, i hope).\n",
    "head_branch": "baseIndent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4fd5e9a3ab0c65bcebb3e0606fe901b086aa8f01 into ba7cb3ab6994e11bf2e8b8a6a816a002e6b6369b"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe803a21fa1e1f1aa09b",
    "number": 3031,
    "body": "As per discussion in https://github.com/jashkenas/coffee-script/pull/3026. The patch:\n- enables stack line patching to be on by default \n- optimizes source map generation required for line numbers \n- changes generated stack line number to be the same format as original JS\n",
    "head_branch": "stack-trace-patch-optimizations-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3785996c44e4634d75a2a58dc72c4d91653615ca into b7f8443052cb2f34bc032128f8f933cf7b7e82a1"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfe813a21fa1e1f1aa09c",
    "number": 3029,
    "body": "compile the coffeescript has block comment like:\n\n``` coffeescript\n###\ntest comment\n###\n\ndefine (require, exports, module) ->\n\n  ###\n  test comment\n  ###\n  exports.setName = ->\n    \"wx\"\n\n  ###\n  test comment\n  ###\n  exports.setAge  = ->\n    88\n```\n\nit will output:\n\n``` javascript\n/*\ntest comment\n*/\n\ndefine(function(require, exports, module) {\n  /*\n  test comment\n  */\n\n  exports.setName = function() {\n    return \"wx\";\n  };\n  /*\n  test comment\n  */\n\n  return exports.setAge = function() {\n    return 88;\n  };\n\n```\n\nthe block comment close to the prev statement.\nI want to compile coffee output comment close to the next statement.\n\nafter the pull request, compile  coffee src will output:\n\n``` javascript\n/*\ntest comment\n*/\ndefine(function(require, exports, module) {\n\n  /*\n  test comment\n  */\n  exports.setName = function() {\n    return \"wx\";\n  };\n\n  /*\n  test comment\n  */\n  return exports.setAge = function() {\n    return 88;\n  };\n});\n\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 183ec483083c6a7058b1a41c09a079b80738006d into 13187b0199ea867d1da58e45fc9f1b03a83f418c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe823a21fa1e1f1aa09d",
    "number": 3026,
    "body": "Love the `patchStackTrace` in 1.6.3. However, it's only applied when executing with `coffee` or `cake` because they call `run()`. There are other cases when entry to the application is not `coffee` (for example node-dev, mocha, jasmine, a custom `server.js` for amazon, etc). To be able to utilize patched stack traces, I've exposed the `patchStackTrace` and created `unpatchStackTrace` to reverse it.\n\nAlso, I noticed that source maps were being generated during `require()` calls and ONLY used to patch stack traces. I've changed moved source map generation to happen only during stack error patching. There's a tiny bit of penalty there, but it's better to do a little extra work then, rather at boot up time.\n\nOpinions?\n",
    "head_branch": "patch-stack-trace-optimizations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe823a21fa1e1f1aa09e",
    "number": 3024,
    "body": "Hi,\n\nI've added combined comparison operator (<=>), which present in Ruby. It would be useful in `.sort()` method of array.\n\nThe following code...\n\n``` coffeescript\n[ 1, 3, 2 ].sort ( left, right ) -> left <=> right\n```\n\nis equivalent to...\n\n``` coffeescript\n[ 1, 3, 2 ].sort ( left, right ) ->\n  return 0 if left is right\n  return -1 if left < right\n  1\n```\n\nbut much shorter and pretty :)\n",
    "head_branch": "combined-comparison-operator",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe833a21fa1e1f1aa09f",
    "number": 3014,
    "body": "Hi, this is a fix for unexpected behaviour when compiling with the -c switch and './' value. See below, please. Thanks.\n\nWhen coffee is invoked with the -c parameter and './' value, first two characters of the directory into which the compiled files are stored get chopped off.\nExample: if compilation invoked like this: 'coffee -o ../lib/ -cw ./', then\nSource file: ./OutputFolder/file.coffee, compiled output: ./../lib/tputFolder/\nThe code only expected '.' to mark the local folder. However, './' is equally valid.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f277a43645584222c51c2a82b835bfcfb6d6d048 into 2e408648aad42901d96df01fe8475a18054e32c2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe843a21fa1e1f1aa0a0",
    "number": 3012,
    "body": "turn this:\n![before](https://f.cloud.github.com/assets/149541/591983/5bee23de-ca0f-11e2-8dd7-394cac83bfd9.png)\ninto this:\n![after](https://f.cloud.github.com/assets/149541/591987/6277b030-ca0f-11e2-8736-23d7462ade76.png)\n\nbtw: they're actual screen capture, not PhotoShopping...\n",
    "head_branch": "parallel-loading",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe853a21fa1e1f1aa0a1",
    "number": 3002,
    "body": "Resolves #3001\n",
    "head_branch": "issue3001",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b3ffd253393c383609ee5d02686a5c36dd6b246a into 088b8b3ec5a34f052b1fff9760b9f793d7ada318"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe863a21fa1e1f1aa0a2",
    "number": 3000,
    "body": "Okay, here it is.\n\nI spent a bit of time thinking about how best to make this both past and future safe. I don't want to clobber anyone else's patch to the module loader, in case they're doing that for some good reason. I also want to have it fail gracefully if (heaven forfend!) the module loader code is ever changed in node.\n\nThe last modification to module.prototype.load was joyent/node@46513483cd96438f33a67fb870b784d1d1f55dd0 - 2 years ago on node 0.3.8 for the inclusion of node_modules. So in the end I just included the source for the original function and did a string comparison. If someone wants to run coffee-script on a node earlier than that I suspect they will have other problems.\n\nObviously this will get a little hairy if multiple projects end up using the same technique. In that case, mediating between them would need to fall to some more complex arrangement which is a bit out of scope for what we need. If a system like that were implemented in another module, though, it would correctly trip the string comparison here, so I feel like this is fairly future-proof.\n\nThe only other thing is testing. I've just basically copied tests/importing.coffee to importing.coffee.md which failed and now passes, but that's not exactly comprehensive. I ran the original code through the node tests when it was a pull request against node. Should I attempt to duplicate some of those tests here?\n\nComments welcome!\n",
    "head_branch": "require-extensions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 012e3c019c97323e4042b9c598f6f00f7e6f747f into 5e06f7e8590f2ca73d6a4c632e20d8fd9b8c6bee"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe873a21fa1e1f1aa0a3",
    "number": 2985,
    "body": "To fix #2981, an example of going the way of checking for **EOF**, which probably should be done, to avoid problems such as #2984 (this PR includes that fix).\n\nOne thing to watch out for is that someone might be relying on generated tokens and this obviously adds the `EOF` token to the list, changing the compiler's output.\n\n(parser compiled with Jison 0.4.4)\n",
    "head_branch": "issue2981",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe883a21fa1e1f1aa0a4",
    "number": 2984,
    "body": "Makes this test run. The test has been ignored thanks to #2981, and until that is fixed, we can't be sure whether all tests run or not (but in fact this is the only test ignored by this bug at the moment).\n",
    "head_branch": "literatetest",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge fd47920c63ac98e1bd18ad212ef4fbe01bdb2570 into 7c4128ee3be188c918e42576d404f23b24bdb8ed"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe893a21fa1e1f1aa0a5",
    "number": 2978,
    "body": "Does what it says on the tin.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge afd9b44deafbd8b181535ea7f999f8b55282b60d into 3650d6eb4ee01036a6984aab14aa4ee81a7a227f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe8a3a21fa1e1f1aa0a6",
    "number": 2968,
    "body": "Recent addition of source map to coffee script nicely shows coffee script lines and columns in the stack trace. It would be much more helpful if we also add source map support to require() so that we can also view correct lines and columns in the require()d coffee script. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b54db2ea074c82d407de749c14444db21eeb9379 into 5e06f7e8590f2ca73d6a4c632e20d8fd9b8c6bee"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe8b3a21fa1e1f1aa0a7",
    "number": 2965,
    "body": "- 7be996c\n  Use new `repeat` helper, remove array-to-js conversion, and of course : style cleanup. I tried to be as consistent as possible (if there's a `@makeCode(\"\\n\")` in the beginning of the line and on the end, they'll both be written the same way).\n- 4ff7fef\n  Remove jsl config file and doc line about it.\n",
    "head_branch": "style-cleanup1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 63bc7fe3543363071d3fbb81f34b70d097a4ed91 into f4332475b5d4e9466830ab395f262772096550b9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe8c3a21fa1e1f1aa0a8",
    "number": 2963,
    "body": "Removes `--lint` flag.\nI decided to keep the flag because it's useful on its own :).\n#2894 : rebuild and fix docs\n",
    "head_branch": "lint-flag-removal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4da00e8296e17b359e2fa2686825881f6f73760f into f451bb5f6196daf12b3e708563b4e801a2c8d71e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe8d3a21fa1e1f1aa0a9",
    "number": 2954,
    "body": "This is the most aggressive of the proposals, but also most consistent - no apparently non-callable literals are allowed to be used as functions.\n\nGood news:\nThis also fixes bugs such as:\n\n```\ndo \"hello\"\n```\n\nBad news:\nI couldn't get interpolated strings to not be callable non-implicitly. This is because the information about them being a string literal is lost during rewrite.\n\nI suppose the test could be moved to test/compilation. \n",
    "head_branch": "issue1069",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e7ebdce60fadb4349318f14a4409d1a077a63ebf into 3650d6eb4ee01036a6984aab14aa4ee81a7a227f"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfe8e3a21fa1e1f1aa0aa",
    "number": 2951,
    "body": "",
    "head_branch": "issue1437",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7b9699c5fa85c385c1671f7d20ff25966a35a532 into 8a59558e2db88b43b6a0134cdcacf59a178df9eb"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe8e3a21fa1e1f1aa0ab",
    "number": 2946,
    "body": "",
    "head_branch": "issue2944",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1917bb69edd6fcd21b4f1ef2903376acfa55a5bd into 5162472f16765ff85b41057993188955b947a8e3"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe8f3a21fa1e1f1aa0ac",
    "number": 2945,
    "body": "",
    "head_branch": "winrepl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe903a21fa1e1f1aa0ad",
    "number": 2943,
    "body": "The history file was set to close on process exit, when it\nshould close on REPL exit. Listening to the process exit\nevent causes a warning when more than 10 CoffeeScript REPL\ninstances are opened in the same program, which happens in\nthe test.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 71aea4b86294b796fae6573d84a1d1d3d2ace180 into 4b4818d819cc9e1b5cfb723bc0d9dbb97c33ceb0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe913a21fa1e1f1aa0ae",
    "number": 2940,
    "body": "before patching\n\n```\n->\n  debugger\n  a()\n```\n\nis compiled to\n\n```\n  (function() {\n    debugger;    return a();\n  });\n```\n\nthis commit will add \"\\n\" between pure literal header and function body if neither of them is empty, it will be compiled to\n\n```\n  (function() {\n    debugger;    \n    return a();\n  });\n```\n",
    "head_branch": "issue2908",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 337ebd3ce9c5fdc2f94c33de9d882c6e45a1e2f3 into e06a17d929d5006d76973841e9e182a0f548dc17"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe923a21fa1e1f1aa0af",
    "number": 2935,
    "body": "Hi there! I've seen issues about symbol-like strings. But still haven't understood why don't you like this. Sure, it's not good idea to replace symbols with numbers, but i think it's good enough as shortcut in some cases. Like this\n\n``` coffee\n$.ajax\n  type: :json\n  data:\n    val:        :smth\n    other_val:  :smth_else\n#instead of\n$.ajax\n  type: 'json'\n  data:\n    val:        'smth'\n    other_val:  'smth_else'\n```\n\nI've implemented this feature, it has taken just few lines and hasn't broken anything :)\n\nHope you'll like it!\n",
    "head_branch": "symbols",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe933a21fa1e1f1aa0b0",
    "number": 2934,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe943a21fa1e1f1aa0b1",
    "number": 2933,
    "body": "Simple fix for #2916: Use `@matchTags` to skip herecomments only _after_ the current token has been recognized as `IMPLICIT_FUNC`.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 05b74f3743184716466ead5c61500ba6530c839e into 174cd7eaa0d4c4e8e7f83bb53b5f1f63e2bb57ab"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe953a21fa1e1f1aa0b2",
    "number": 2930,
    "body": "- Don't end single-line functions at `catch` or `finally`.\n  \n  Implicit in/outdentation before those keywords is already inserted for a preceding `TRY` or `THEN` token.\n  \n  A `catch` or `finally` in a single-line expression that is not preceded by a `try` or `catch ... then` is always (and should be) a syntax error. (See Example 3)\n\nSome cleanup:\n- Removed testing whether `IF` started a single-line expression (it never does).\n- Removed `IMPLICIT_BLOCK` (was used in `addImplicitParentheses` which was removed by 1666716c3168f70e9eb6c997e0fff5f2b7815fc0)\n\n---\n\nExamples:\n1. Illegal before, possible after this fix:\n\n``` coffeescript\n    x = -> try do f finally do cleanup\n```\n1. Possible before and after:\n\n``` coffeescript\n    x = try f -> catch err then -> finally do cleanup\n```\n1. Illegal before and after:\n\n``` coffeescript\n    try f\n      cb: -> finally do cleanup\n```\n",
    "head_branch": "Issue1057",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 69d66a1d4d11f6ea66db101bfbadf3963fae5e92 into 5496a189bc1e6150e93425858e907cf70b1a678e"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe963a21fa1e1f1aa0b3",
    "number": 2929,
    "body": "### Before:\n\n``` coffee\n###Foobar###\n###\nbaz\n###\n```\n\nbecomes\n\n``` js\n/*Foobar\n*/\n/*\nbaz\n*/\n```\n### After:\n\n``` coffee\n###Foobar###\n###\nbaz\n###\n```\n\nbecomes\n\n``` js\n/*Foobar*/\n/*\nbaz\n*/\n```\n### The reason...\n\n...for this is that some [frameworks](http://docs.turbulenz.com/starter/getting_started_guide.html#using-javascript-libraries)/[tools](http://www.stack.nl/~dimitri/doxygen/helpers.html) use specially crafted comments as directives. In the former case, since they use `/*{` and `}*/` as delimiters, it is impossible to use coffeescript because of the current behavior. With this pull-request, it becomes possible by using `###{` and `}###` on one line.\n\nLast and least,\n\n``` js\n/* Foo\n*/\n```\n\njust looks wrong.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ccc7c4404ddd57f597f080f9ce7ae2288860fd96 into c6398e16b176fe28e97151987a92999897129e94"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe973a21fa1e1f1aa0b4",
    "number": 2925,
    "body": "Use the newfangled `Base::error` method instead of just throwing a SyntaxError.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge af81f6de7022c96dbd7ef60ee99014378e931a23 into f21dc7a96ed08f5c349800332af4cfe690ca79ab"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe983a21fa1e1f1aa0b5",
    "number": 2924,
    "body": "Straight-forward implementation of #2900.\n\nAlso removed dead and unnecessary code from `Try::compileNode` (left by f8c6b494aaa3ace561ffc3fe97e5b385aeb22003)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge cf07fcb4b1d966e61856aa6576540bdb5956f64e into 740a7bcb45732cb8e3cab8770e9577e14aa76608"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe993a21fa1e1f1aa0b6",
    "number": 2914,
    "body": "Addresses comments in #2886\n- Replace large comprehension with much simpler code\n- fix comment to reference maxSize instead of previous 10KB limit\n- only pop a history entry if the file size is actually bigger than maxSize\n- only add items to the history if they are different from the last item by storing the last line and loading it on startup.\n",
    "head_branch": "repl-history",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0e2d2ea6375199d57a626da1d4c334121dcd2085 into 170f3111017999004b1c4afda1f330c7ec18f0ac"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe9a3a21fa1e1f1aa0b7",
    "number": 2902,
    "body": "Right now if class A extends class B, and there are accessor properties defined on A, the getter is invoked and the returned value set on B, instead of the property being copied.\n\nthis patch copies properties using effectively:\n\n``` js\n  Object.defineProperty(B, propName, Object.getOwnPropertyDescriptor(A, propName))\n```\n",
    "head_branch": "copy-properties",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe9b3a21fa1e1f1aa0b8",
    "number": 2894,
    "body": "Add `-L` or `--literate` command line flags (lowercase `l` is already taken) to allow literate coffee script to be read in from `stdio`\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d8d7495767545b28bd12fc5d388c7fd41fb61aff into 4b4f6ac2229bb52629831d10de0c20dfddd17620"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe9b3a21fa1e1f1aa0b9",
    "number": 2892,
    "body": "Addressing https://github.com/jashkenas/coffee-script/issues/2891\nCurrently `fork()` for `.coffee` files requires Node.js 0.9+\nIgnore the test when process.version does not match the requirement.\n",
    "head_branch": "fix-2891",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe9c3a21fa1e1f1aa0ba",
    "number": 2890,
    "body": "(I know I can commit to master, but since I've been appointed to issues, I'll avoid it for now)*\n#2846\n",
    "head_branch": "issue2846",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 53a5f26430bdd98e58d8ea6646ec614d29bef470 into 718224f99a2a98031eebf222357580400fd24a88"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe9d3a21fa1e1f1aa0bb",
    "number": 2887,
    "body": "This is an attempt to ([finally](https://github.com/jashkenas/coffee-script/pull/2026#issuecomment-5049478)) include a new set of mathematical operators beyond what JavaScript provides.\n\nIncluded on this PR are the operators that seemed the most consensually accepted by the community and that seemed the most practical and intuitive in terms of syntax to me:\n- the power operator `**`,\n- the floor division operator `//` and\n- the (correct) modulo operator `%%`.\n\nOther operators might be useful, but i think it's important not to over do it and try to convert every function on `Math` into a new operator.  So i deliberately left out more sophisticated operators like LiveScript's chainable maximum and minimum operators (`<?` and `>?`) or a unicode `√` operator for square roots :smile_cat: \n\nThat being said, this is an open pull request, so if you think other operators deserve to make it in (or some of these doesn't deserve it), please comment. \n\n---\n##### Small caveat\n\nThe floor division operator token clashes with the current empty regex token: `//`. I think there's no way to have them both; even if we did some grotesque lexer + parser magic introducing some ambiguity in the lexer (say, a FLOOR_DIV_OR_EMPTY_REGEX token) and then trying to disambiguate it in the parser, there are ugly corner cases, like `a //i`, which is valid on the current master as a call to `a` with an empty regex and is also valid in this PR as a floor division between `a` and `i`.\n\nI opted to remove the support for empty regexes in this PR (notice a missing regex test), but i don't know if this is an acceptable removal. I would expect that nobody would ever use an empty regex, as i see no point in doing so, but i've been very mistaken about guessing what other people _don't_ do on their code in the past. So, if we decide to remove the empty regex token, could we make an intermediate minor release that marks that token as a syntax error and some time after that release these new set of operators?\n",
    "head_branch": "more-math-operators",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe9e3a21fa1e1f1aa0bc",
    "number": 2886,
    "body": "...sessions using a ~/.coffee_history file in a similar way to bash. Code based on repl.history and Node pull request 3178 with modifications.\n\nhttps://github.com/tmpvar/repl.history\nhttps://github.com/joyent/node/pull/3178/files\n\nModifications:\n- Converted to CoffeeScript\n- Use ~/.coffee_history filename by default\n- Only read up to 10240 bytes of history instead of everything\n- Set default history index to -1 (i.e. pressing up will then show the last saved command first)\n- Make history file optional, disabled with {historyFile: false} in `repl.start` opts\n- Added unit test to read and process a line from a dummy history file\n\nTested locally on Mac with Node 0.10 and CoffeeScript 1.6.2 and it is working very nicely for me. There may be path issues between different operating systems, however.\n",
    "head_branch": "repl-history",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4dbd9dc264c6a0ab7e4e88aec2dd69614c384f8e into cc84d6ea67639a9a88d1848baa97144312452b38"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfe9f3a21fa1e1f1aa0bd",
    "number": 2885,
    "body": "Added example showing some possible uses. Testing the example can be done like so:\n\n```\n$ coffee examples/interpreter.coffee\nWelcome to the CoffeeScript interpreter!\ninterpreter> myAssert.ok true\nundefined\ninterpreter> new MyObj().sayHello()\nHello, world!\nundefined\ninterpreter> multiply 2, 4\n8\ninterpreter> \n```\n",
    "head_branch": "expose-repl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfea03a21fa1e1f1aa0be",
    "number": 2884,
    "body": "This makes it dead simple to see which version of CoffeeScript and Node you are using, as well as providing some extra information about possible commands. Can be disabled in the code by passing { welcome: '' } in the options to repl.start.\n\nExample output:\n\n```\n$ coffee\nCoffeeScript 1.6.2 on Node 0.10.0\nType '.help' for more information\ncoffee> \n```\n",
    "head_branch": "repl-version-info",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfea13a21fa1e1f1aa0bf",
    "number": 2872,
    "body": "So, here's another attempt at fixing #2489. This one has a more straightforward output, it's basically the old `__bind` but inlined.\n\nSample input:\n\n``` coffeescript\nclass Foo \n  method: (a, b) => one\n\n  'bar:baz': (bar) => two\n\n  '--more crazy methods--': (lol) => tres\n```\n\nOld bare output:\n\n``` javascript\nvar Foo,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\nFoo = (function() {\n  function Foo() {\n    this['--more crazy methods--'] = __bind(this['--more crazy methods--'], this);\n    this['bar:baz'] = __bind(this['bar:baz'], this);\n    this.method = __bind(this.method, this);\n  }\n\n  Foo.prototype.method = function(a, b) {\n    return one;\n  };\n\n  Foo.prototype['bar:baz'] = function(bar) {\n    return two;\n  };\n\n  Foo.prototype['--more crazy methods--'] = function(lol) {\n    return tres;\n  };\n\n  return Foo;\n\n})();\n```\n\nThis PR's output:\n\n``` javascript\nvar Foo;\n\nFoo = (function() {\n  function Foo() {\n    var _bound, _bound1, _method,\n      _this = this;\n    _method = this.method;\n    this.method = function(a, b) {\n      return _method.apply(_this, arguments);\n    };\n    _bound = this['bar:baz'];\n    this['bar:baz'] = function(bar) {\n      return _bound.apply(_this, arguments);\n    };\n    _bound1 = this['--more crazy methods--'];\n    this['--more crazy methods--'] = function(lol) {\n      return _bound1.apply(_this, arguments);\n    };\n  }\n\n  Foo.prototype.method = function(a, b) {\n    return one;\n  };\n\n  Foo.prototype['bar:baz'] = function(bar) {\n    return two;\n  };\n\n  Foo.prototype['--more crazy methods--'] = function(lol) {\n    return tres;\n  };\n\n  return Foo;\n\n})();\n```\n\nAs you can see, the parameter names and number is preserved in the bound version of the method, thus making `length` work as expected.\n\nNow, this PR works, but the code is _very bad_ :poop:. Or at least it contains a couple of really ugly hacks that i'm not proud of having produced. When i started with this i though that it would be just a matter of reverting this commit 67de35ff2959038018a71a917a24ad1a853d97e0 and then changing the `Class#addBoundFunctions` method a bit to make the compiled output match what i wanted. But things got pretty hairy pretty quick. Scoping issues, mutable state in destructuring parameters that prevented them from being used in more than one function (BTW, as of now, this produces some unnecessary code for bound methods with destructuring parameters), etc.\n\nSo, it's not production ready, but i wanted to open the PR to see if it would be a reasonable change or not. I personally wouldn't mind this being included or not, as i don't have much sympathy for bound methods.\n",
    "head_branch": "issue2489",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfea23a21fa1e1f1aa0c0",
    "number": 2869,
    "body": "Windows accepts forward and backward slashes as path separator.\n\nThis fix changes `helpers.baseFileName` to expect a flag (instead of the actual path separator) and then use either `/` (default) or both `\\\\` and `/`.\n\nThis closes #2857 (and #2866).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1b2fe69a1830b45ed43b4661f6a2e624e5accdc0 into c159a64b586568f12b9eebc4f84a59d2f4fa3856"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfea33a21fa1e1f1aa0c1",
    "number": 2867,
    "body": "Addressing https://github.com/jashkenas/coffee-script/issues/2853,\n\nThis change escapes unicode characters in the source code for base64 encoding.\nAlthough the unicode characters themselves are **not recoverable** in the web inspector, any ascii characters will be intact.\n\nAfter a quick reading of the web inspector [source code](http://goo.gl/cbPE4), I don't think it is possible to safely encode unicode characters for now.\n\nAlso added a test that ensures that unicode characters are properly escaped from now on.\n",
    "head_branch": "2853",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b2d6997eff8ebb8180ac98a01556adbc7801ed4d into e26f982c24fae2b13ad67e98157ff40b458f8744"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfea43a21fa1e1f1aa0c2",
    "number": 2865,
    "body": "Addressing https://github.com/jashkenas/coffee-script/issues/2861\nPlease see https://github.com/jashkenas/coffee-script/pull/2863#issuecomment-15161344 for detailed explanation.\n",
    "head_branch": "inline",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e091c9d6b4fd4ae86b3e61a7f91bbdd109329501 into 57d3cfd67f51a90de06e99596e93571bce1be760"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfea53a21fa1e1f1aa0c3",
    "number": 2863,
    "body": "Addressing https://github.com/jashkenas/coffee-script/issues/2861\n",
    "head_branch": "inline",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfea63a21fa1e1f1aa0c4",
    "number": 2862,
    "body": "Addressing https://github.com/jashkenas/coffee-script/issues/2861\n",
    "head_branch": "2861",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfea73a21fa1e1f1aa0c5",
    "number": 2860,
    "body": "(I am using WebKit Developer Tools in Chrome,\nwhich types objects using GetConstructorName()\n[WebKit](http://www.webkit.org/building/checkout.html)/Source/WebCore/bindings/v8/custom/V8InjectedScriptHostCustom.cpp)\n\n```\nclass A\nclass B extends A\nclass C extends B\n```\n\nCurrent:\n\n```\nx = new C\nx.__proto__                     # ctor\nx.__proto__.__proto__           # ctor\nx.__proto__.__proto__.__proto__ # A\n```\n\nModified:\n\n```\nx = new C\nx.__proto__                     # C\nx.__proto__.__proto__           # B\nx.__proto__.__proto__.__proto__ # A\n```\n\nThis is what the inheritance of native objects like HTMLDivElement looks like.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfea83a21fa1e1f1aa0c6",
    "number": 2856,
    "body": "This PR should fix #2849.\n\nAs CS source files can be `require()`d on the fly when using the `coffee` command, the `file` and `input` arguments that are [passed to `compileScript`](https://github.com/jashkenas/coffee-script/blob/f217a10721ca4461f68fcce5990ff0bb92395ac4/src/command.coffee#L115) may not match with the actual file being compiled and run (which could potentially throw compilation errors).\n\nThis patch modifies the `CoffeeScript.compile` function (which is in turn used by `compileScript` and the Node.js `require.extensions` mechanism used to `require()` CS files) so in case a compiler error is raised there, the filename and source information will be attached to it and then used to correctly report errors.\n\nThis means that if one runs `coffee a.coffee` and that file, in turn, does `require './b'` and  the `b.coffee` file has syntax errors, the error messages will now correctly point to `b.coffee`.\n",
    "head_branch": "issue2849",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3c880bf60114b623f729ca01e38097850dc0b195 into 426ae97e4978649ed8ae4ea8d1d9356a16ccec35"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfea83a21fa1e1f1aa0c7",
    "number": 2851,
    "body": "Hi,\n\nI'm adding coffee-script support for a node-webkit application. When it comes to node or window context, things can get quite weird over there:\n  https://github.com/rogerwang/node-webkit/wiki/Transfer-objects-between-window-and-node\n\nWhen loading `browser.coffee` in the (`node-webkit`) browser, a couple of exceptions were raised at places where an explicit `window` context was needed.\n\nI've fixed them with this PR. I figured it might be interesting for others..\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6dd61626d218c567c893f000e91e9b1178e64524 into 78d10f30a05a6de7fa458977c3ef55eb03cc8aac"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfea93a21fa1e1f1aa0c8",
    "number": 2847,
    "body": "Addressing https://github.com/jashkenas/coffee-script/issues/2780\n- It may need a refresh to show the source map.\n- Does not work in `incognito`\n\nCombining the behaviour above, it suggested that some kind of browser caching is involved.\n\nAlthough safety check are performed, I still need help testing in IE and older browsers in case it crash.\n",
    "head_branch": "browser-source-map",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 011d7dc2450b453e91325b93084fe2c00ec389de into fd0b1ffc4d5b32a067fd7dafcd62c43b1588b6b1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfeaa3a21fa1e1f1aa0c9",
    "number": 2840,
    "body": "amending initial pull request (2802) to not push path dependency into helpers.js\n\nfixes issues recursively compiling coffee files on Windows\n",
    "head_branch": "windows_paths",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f217a10721ca4461f68fcce5990ff0bb92395ac4 into 56413ba3b4f7bd534f0df11d6515ae7acab2f1cf"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfeab3a21fa1e1f1aa0ca",
    "number": 2839,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfeac3a21fa1e1f1aa0cb",
    "number": 2838,
    "body": "- Expect a blank line as delimiter between text and code (#2821).\n- Don't change indentation of code. It is not necessary and leads to\n  erroneous locationData. (#2835)\n- Don't modify blank lines and reverse the change in the lexer.\n- Don't ignore indentation with mixed whitespace.\n\nThere are still open problems:\n- Some markdown processors will need an indentation of 8 space in/after a list to indicate code (nested lists require 4 more spaces for each level). So it's either markdown-parsing or some restriction on support.\n- Multiline tokens can consume the non-code part of the document. E.g.\n  \n  ```\n  some text\n  \n      str = \"\"\"\n  \n  this line will get a # and be a string\n  \n      \"\"\"\n  ```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b8d695a4e16dcd17769c01c2551959cc116170ea into 4386f2abc7196513400d5c0233e300d0ef503ae1"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfead3a21fa1e1f1aa0cc",
    "number": 2827,
    "body": "Continued from https://github.com/jashkenas/coffee-script/pull/2820:\n@jashkenas ~~I'm not very sure why, but it seem to fix the line numbers.~~\n~~I would suggest that don't merge this until we could figure out why and/or after a rebase to clean up the log, as suggested by https://github.com/jashkenas/coffee-script/pull/2819#issuecomment-14837856~~\n",
    "head_branch": "lineno",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d4254a40a9b809d93e3dc7a8d950ce4f25152b3a into 2f5b11b2954cbbdcf4b9f97674ccfe8d58bb1378"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfeae3a21fa1e1f1aa0cd",
    "number": 2826,
    "body": "The CoffeeScript REPL does not work for Node versions lower than 0.8 (#2813). \n\nThis PR bumps the version number on `engines.node` on the `package.json` file so that a warning is raised if someone tries to install CoffeeScript with an older Node version (CS is still installed though, [as long as the field `enginesStrict` is not set to `true`](https://npmjs.org/doc/json.html)). \n\nThis is how the warning looks like:\n\n```\n$ nvm use 0.6\nNow using node v0.6.21\n$ npm install /home/demian/Programming/coffee-script/\nnpm WARN engine coffee-script@1.6.1: wanted: {\"node\":\">=0.8.0\"} (current: {\"node\":\"0.6.21-pre\",\"npm\":\"1.1.37\"})\ncoffee-script@1.6.1 node_modules/coffee-script\n```\n\nI totally understand if this change is not acceptable though :relaxed: \n",
    "head_branch": "bump-engines-node",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9787ce543dc8aa2e3ef631b318243e007ea3e352 into 4ac223b684fea6e008c62a30d60358871602376f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfeaf3a21fa1e1f1aa0ce",
    "number": 2824,
    "body": "while running coffeescript 1.5.0+ works with node 0.6, the repl doesn't, and needs a warning for it, per discussion in issue#2813\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 70e83030a7624430eb8a89f5d0101898b9ea4aef into e1c6b083f8c06402261d2c2a2c736685c35210cd"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfeb03a21fa1e1f1aa0cf",
    "number": 2820,
    "body": "Addressing https://github.com/jashkenas/coffee-script/issues/2787\nPorted stack trace [patch](https://github.com/michaelficarra/CoffeeScriptRedux/blob/master/src/run.coffee) from Redux.\npassed `cake test` on node v0.8.17\n\nThis enables source mapping in `exports.run` by default, I would like to know your opinion.\nAnybody think it's appropriate?\n",
    "head_branch": "source-maps-in-node",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9b6772a390385a367eca56871c949da6112bbf05 into 20d98c71064dbf8ad8c20226735dafef61f9bd9a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfeb13a21fa1e1f1aa0d0",
    "number": 2819,
    "body": "Addressing https://github.com/jashkenas/coffee-script/issues/2818\n",
    "head_branch": "fix-path",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7d08dbb86cdb22e02f4985a6e9dd739f6663f35e into 54258e441ddbf12525f74255266eebd97880ee68"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfeb23a21fa1e1f1aa0d1",
    "number": 2817,
    "body": "I don't know if there's an open issue for this, but basically this patch makes the REPL keep running after runtime errors instead of terminating (which i've found quite annoying a couple of times).\n",
    "head_branch": "keep-repl-running",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 45bcd9fa2f6a33e01ff0994fe730a0bfe116e360 into 71bb6108fbb813dfce7691a304cead39a6865fd1"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfeb33a21fa1e1f1aa0d2",
    "number": 2814,
    "body": "This little fix should make variable declarations work properly on the REPL.\n\nBefore this patch:\n\n```\ncoffee> a = 1\n1\ncoffee> do -> a = 2\n2\ncoffee> a\n1\n```\n\nNow:\n\n```\ncoffee> a = 1\n1\ncoffee> do -> a = 2\n2\ncoffee> a\n2\n```\n\nAnd, probably more important, before:\n\n```\ncoffee> b = null\nnull\ncoffee> b ?= 42\nrepl:1:1: error: the variable \"b\" can't be assigned with ?= because it has not been declared before\nb ?= 42\n^\n```\n\nAfter:\n\n```\ncoffee> b = null\nnull\ncoffee> b ?= 42\n42\n```\n",
    "head_branch": "issue1829",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5a004425ca69c55ad18b9f4e447cd8e85351fe58 into 69f6500ba97ca815223dc9741aef0810aeb843df"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfeb43a21fa1e1f1aa0d3",
    "number": 2810,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge af0bdae675ee8a36c250dc21ae278a5a3df92bdd into 0d45287057838e373df30457fb90f4a74b91686c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfeb53a21fa1e1f1aa0d4",
    "number": 2803,
    "body": "As discussed.  Now all these values can be set as options.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c4f50b52d7f59bffec4308af262b934e85a52eae into 8f7f3627e01676d6e090a2d34c3a96d6f9ad8db6"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfeb53a21fa1e1f1aa0d5",
    "number": 2802,
    "body": "replace hardcoded path separators with path.sep\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfeb63a21fa1e1f1aa0d6",
    "number": 2795,
    "body": "added tests for `baseFileName` helper.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 18fec7e2024ecfc1dfe3fb2e4865b986235fec9d into de8ec2beb0bc047fbae5d5cb943c8be2514452e9"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfeb73a21fa1e1f1aa0d7",
    "number": 2793,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 185b2ce632f5371a8a90cf72cb1b6f05c18708ab into de8ec2beb0bc047fbae5d5cb943c8be2514452e9"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfeb83a21fa1e1f1aa0d8",
    "number": 2785,
    "body": "Non-alphanumeric bound members were causing an error during\nconstruction. This fixes that.\n",
    "head_branch": "issue2782",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfeb93a21fa1e1f1aa0d9",
    "number": 2776,
    "body": "This is done by pre-processing Literate CoffeeScript files sent through the --join handling before they are mashed together into a single string.\n",
    "head_branch": "fix-2768",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge fca68717ff211f91e8ef5b05b03b5411f4bd1b8a into 903e9c994c7f39d58c92d86aa73054f17cf29185"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfeba3a21fa1e1f1aa0da",
    "number": 2772,
    "body": "- INDENT tokens span only the whitespace in front of (indented) code.\n- Generated `{` for braceless object notation gets location from the first key.\n- Small fix and cleanup.\n\nWhy:\n- Fixes locationData of object and block AST nodes containing preceding blank lines or comments.\n- Allows for better error reporting for unexpected INDENT.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge dcd74d3e59a99689e467155f9f4624c978b5b435 into eef83a9fcbc01cefb2c7b1bb0d2fffa927aa7512"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfebb3a21fa1e1f1aa0db",
    "number": 2770,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge add84bfddc264553669e82f93808771005000f64 into 26102a0970377c1ab7045dd75606a4f6937a8ff0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfebc3a21fa1e1f1aa0dc",
    "number": 2767,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfebd3a21fa1e1f1aa0dd",
    "number": 2764,
    "body": "Two more occurrences as mentioned in #2763\n",
    "head_branch": "map-option-rename-fix-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfebe3a21fa1e1f1aa0de",
    "number": 2763,
    "body": "Small typo fix (:\n\nLooks like `compileOptions` wasn't updated when the flag was changed.\n",
    "head_branch": "source-map-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3c42a8e01c09e6f259a89da59e1b959dcaf4b09e into 9f614fedec5013dd315cfe498c4d137925584f7b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfebf3a21fa1e1f1aa0df",
    "number": 2758,
    "body": "not sure if there's a cleaner way instead of splicing :). Could rewrite the old token but that seems as bad (using `poppedToken`?)\n",
    "head_branch": "issue2490",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfec03a21fa1e1f1aa0e0",
    "number": 2752,
    "body": "This addresses the [line number mismatch](https://github.com/jashkenas/coffee-script/issues/1027#issuecomment-668798) of issue #1027.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3c38a34ab2ef110e5409969ca00f7933c4d6ac8f into 5dea70b82e6dcc68b0f1c40642ba9a1bb1396a1b"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfec13a21fa1e1f1aa0e1",
    "number": 2751,
    "body": "To use:\n\n```\ncoffee -c -m file.coffee\n```\n\nThis will generate a \"file.js\" and a \"file.map\" file, in the same directory.  The \"//@ sourceMappingURL\" is automagically added to the .js file if you also generate a map.\n## How it works:\n\nThis is obviously building on my previous changes to location awareness in the parser.  The big change here is that, in nodes.coffee, we now have a `compileToFragments()` method which compiles nodes to a list of CodeFragment objects instead of to a great big string.  the `compile()` method still exists, although now it's implemented in terms fo `compileToFragments()`.\n\nA CodeFragment is just a snippet of code, and some information about where it came from.  When it comes time to generate the final js file, all we need to do is cat together all the strings from all the CodeFragment objects.  By keeping track of what line number/column each CodeFragment gets written to, and by using the original location data stored in the CodeFragment object, we can generate source maps.\n\nThis obviously makes the compiler a bit more complicated, but brings with it some serious advantages.  Source map support is the obvious one, but also when debugging compiler problems (\"Why are you putting a /n there!?  WHY!?\") you can do some cool tricks, like modifying this line in coffee-script.coffee:\n\n  js += fragment.code\n\nto:\n\n  js += \"[[#{fragment.type}]]fragment.code\"\n\nThis will prefix every fragment with the type of node which created it, which makes it easy to figure out where something is coming from.  I used this quite a bit when I was tracking down problems I'd introduced while making this change. :D\n## Why write sourcemap.coffee?\n\nThere is a [source-map](https://github.com/mozilla/source-map) implementation for Node.js from Mozilla.  Why write our own implementation?  Because the Mozilla version is BSD licensed; many organizations avoid BSD because of the \"obnoxious BSD advertising clause\", so rather than impose such a license on coffee-script (and by extension all products that use coffee-script), I just wrote my own (I'll probably flesh this out a bit more and spin it out into a separate npm module at some point, as the redux compiler would also benefit from something with a more open license.)\n",
    "head_branch": "sourcemaps",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 979e110a84c370a362cef204d3bcd42ab39d794d into 37a6ea63b16be5be7422002a64cab912e888b2e7"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfec13a21fa1e1f1aa0e2",
    "number": 2746,
    "body": "f\n  a\n\nand only allow cases like:\n\nf\n  a: 1\n",
    "head_branch": "implicit-calls-with-overhang-on-first-argument-only-on-implicit-object",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 71e04d98395ddd5e5ea6da483fbbe452c9eb97ee into 2970d5939563ef8cb6149db1ace6ccb94ee9ac89"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfec23a21fa1e1f1aa0e3",
    "number": 2743,
    "body": "This pull request reverts the changes on #2599.\n\nIt also adds a couple of tests to sort of document the (broken) behaviour of other typed constructors.\n\nI hope i didn't break any of the source location changes with this.\n",
    "head_branch": "revert-2599",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4469d062e183b1630dbbb78750b688dc2019e985 into 23d8cd6c2ae3dff80b70a627cbc1fc64ffab7134"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfec33a21fa1e1f1aa0e4",
    "number": 2741,
    "body": "Attempt to fix @satyr 's newly found issue with #2712\n\nThere may be more constructs that should be saved from being broken up, when only encountering a perhaps legitimate INDENT. If you find them, please make tests, and I will take a look at them.\n",
    "head_branch": "implicit-call-try-catch-finally",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge cb187fd900d68e8ee04005edec63f50f4c56987b into c6f30935a811ff61af1763be625feb7d237a1bcd"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfec43a21fa1e1f1aa0e5",
    "number": 2740,
    "body": "See #2733. As it was written, so it has been done.\n",
    "head_branch": "hoist-build",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b2e17c30453466bffefdf94f2fdb9ae63fa064f7 into ac2c5f02017caaa6040190decab6a1aaa5a2d80b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfec53a21fa1e1f1aa0e6",
    "number": 2739,
    "body": "See #2737.\n\n`process.execPath` must be set to the location of the CoffeeScript interpreter when running a CoffeeScript file, in order to allow the `cluster` module (as well as `child_process.fork`) to know how to run workers written in CoffeeScript.\n\nThis also adds in a test to ensure that this functionality continues to work.\n",
    "head_branch": "fix-2737",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c98fae59fceb060b73d194c4bb4b74a19a991e40 into 3b25aea168b1941dec8d80067bd203d8af631881"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfec63a21fa1e1f1aa0e7",
    "number": 2738,
    "body": "This addresses #2736.\n\nSource file name processing is moved to `helpers.coffee` and standardized. The new function also accounts for the fact that `path.extname` only returns the last file extension - returning only `.md`, rather than the full `.coffee.md`.\n",
    "head_branch": "coffee-md",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1a8354482a0a07e99a8c4841b7bb486be1fecf96 into 32eb1bf58f1d78236d48b3087bf1cb20748f3c0f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfec73a21fa1e1f1aa0e8",
    "number": 2733,
    "body": "Hi, I know that this topic has already been discussed:\nhttps://github.com/jashkenas/coffee-script/issues/2404\nhttps://github.com/jashkenas/coffee-script/pull/1822\nhttps://github.com/jashkenas/coffee-script/pull/1030\n\nAnd your opinion is that _cake_ should be a pretty simple.\nBut this small fix (2 lines of code) solves the previous issues and some more\n_Cakefile_ in this repository will be better:\n\n```\ntask 'build', 'build the CoffeeScript language from source', (options, cb) ->\n  files = fs.readdirSync 'src'\n  files = ('src/' + file for file in files when file.match(/\\.(lit)?coffee$/))\n  run ['-c', '-o', 'lib/coffee-script'].concat(files), cb\n\n\ntask 'build:full', 'rebuild the source twice, and run the tests', ->\n  invoke 'build', ->\n    invoke 'build', ->\n      csPath = './lib/coffee-script'\n      csDir  = path.dirname require.resolve csPath\n\n      for mod of require.cache when csDir is mod[0 ... csDir.length]\n        delete require.cache[mod]\n\n      unless runTests require csPath\n        process.exit 1\n```\n\ninstead:\n\n```\ntask 'build', 'build the CoffeeScript language from source', build = (cb) ->\n  files = fs.readdirSync 'src'\n  files = ('src/' + file for file in files when file.match(/\\.(lit)?coffee$/))\n  run ['-c', '-o', 'lib/coffee-script'].concat(files), cb\n\n\ntask 'build:full', 'rebuild the source twice, and run the tests', ->\n  build ->\n    build ->\n      csPath = './lib/coffee-script'\n      csDir  = path.dirname require.resolve csPath\n\n      for mod of require.cache when csDir is mod[0 ... csDir.length]\n        delete require.cache[mod]\n\n      unless runTests require csPath\n        process.exit 1\n```\n\n_build = (cb) ->_ - is not simply and breaks \"option\" argument \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfec83a21fa1e1f1aa0e9",
    "number": 2730,
    "body": "This fixes the part of #2715 where\n\n``` coffeescript\ntest = (obj) -> obj.value\ntrans = (obj) -> obj\n\ntest trans\n  value: 'test'\n```\n\nends up compiling to\n\n``` javascript\n(function() {\n  var test, trans;\n\n  test = function(obj) {\n    return obj.value;\n  };\n\n  trans = function(obj) {\n    return obj;\n  };\n\n  test(trans)({\n    value: 'test'\n  });\n\n}).call(this);\n```\n\nrather than\n\n``` javascript\n(function() {\n  var test, trans;\n\n  test = function(obj) {\n    return obj.value;\n  };\n\n  trans = function(obj) {\n    return obj;\n  };\n\n  test(trans({\n    value: 'test'\n  }));\n\n}).call(this);\n```\n\nAt the same time,\n\n``` coffeescript\npass = ->\n  true\n\nresult = if pass 1\n  one: 1\neq result.one, 1\n```\n\nstill compiles to\n\n``` javascript\n(function() {\n  var pass, result;\n\n  pass = function() {\n    return true;\n  };\n\n  result = pass(1) ? {\n    one: 1\n  } : void 0;\n\n  eq(result.one, 1);\n\n}).call(this);\n```\n\nThe main heuristic used here is that the object in the second CoffeeScript snippet follows a statement (`if` in this case, though `for`, `while`, etc. are also considered) where it is more likely to serve as a return value.\n",
    "head_branch": "fix-2715",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfec93a21fa1e1f1aa0ea",
    "number": 2729,
    "body": "There are a bunch of different ways to tunnel errors through asynchronous functions.\n\n``` coffeescript\n# You could use an if clause and indent your code.\n# This is ugly, and inflates your indentation level.\nprocessFile = (file, cb) ->\n  fs.readFile file, 'utf8', (err, data) ->\n    if err?\n      cb err\n    else\n      cb undefined, doSomething(data)\n\n# You could add a return statement to the end of your if clause.\n# This can be hard to read, and still isn't a one-liner.\nprocessFile = (file, cb) ->\n  fs.readFile file, 'utf8', (err, data) ->\n    if err?\n      cb err\n      return\n\n    cb undefined, doSomething(data)\n\n# Or, you could return the call to the callback.\n# This, though, leaks the callback return value,\n# and is kind of an abuse.\nprocessFile = (file, cb) ->\n  fs.readFile file, 'utf8', (err, data) ->\n    return cb(err) if err?\n    cb undefined, doSomething(data)\n\n# You could use parentheses to combine the callback call\n# and return statement.\n# This requires the usage of semi-colons, and an extra set\n# of parentheses.\nprocessFile = (file, cb) ->\n  fs.readFile file, 'utf8', (err, data) ->\n    (cb err; return) if err?\n    cb undefined, doSomething(data)\n```\n\n---\n\nI propose adding a postfix return statement - that is, adding `then return` to the end of an expression would execute the expression and then return nothing.\n\nSo, this:\n\n``` coffeescript\nprocessFile = (file, cb) ->\n  fs.readFile file, 'utf8', (err, data) ->\n    cb err then return if err?\n    cb undefined, doSomething(data)\n```\n\nWould compile to this:\n\n``` javascript\n(function() {\n  var processFile;\n\n  processFile = function(file, cb) {\n    return fs.readFile(file, 'utf8', function(err, data) {\n      if (err != null) {\n        cb(err);\n        return;\n      }\n      return cb(void 0, doSomething(data));\n    });\n  };\n\n}).call(this);\n```\n\nThis doesn't break any existing functionality, as `<expression> and return` is already a parse error.\n\nA more complex example:\n\n``` coffeescript\nreadFiles = (directory, cb) ->\n  fs.readdir directory, (err, files) ->\n    cb err then return if err?\n    output = {}\n    for file in files then do (file) ->\n      fs.readFile path.join(directory, file), 'utf8', (err, data) ->\n        cb err then return if err?\n        output[file] = data\n        files.pop()\n        cb undefined, output if files.length is 0\n```\n\n---\n\nIn the attached implementation (which includes tests), `and return`, appended to a statement, is rewritten to a `POST_RETURN` token (the rewriter watches for a `LOGIC/&&` token followed by a `RETURN/return` token). This then triggers a special case on the `Return` node.\n\nThoughts?\n",
    "head_branch": "and-return",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfeca3a21fa1e1f1aa0eb",
    "number": 2726,
    "body": "\"Procedures\" are functions that do not ~~implicitly~~ return a value:\n\n``` coffeescript\ntest = ->> 'hi'\ntest() # undefined\n```\n\n~~They can, however, manually return a value.~~ Trying to return a value from a procedure will throw a SyntaxError, as it does if you try to return a value from a constructor:\n\n``` coffeescript\ntest = ->> return 'hi'\n# SyntaxError: In j.coffee, cannot return a value from a constructor or procedure.\n```\n\nProcedures are created with the `->>` glyph. Like regular functions, they can be bound to the current \"this\" context, using the `=>>` glyph.\n\nI figured I'd get the ball rolling on this by putting together some code. It was a relatively simple change - just adding in the additional symbols, and having the `Code` node set the `@noReturn` flag to `true` if the tag is `procedure` or `boundprocedure`. Tests are included, and it passes all current ones.\n\nI know this has been brought up before (specifically in #899, #1812, #1836, #1855,...), but perhaps with a concrete implementation, this could actually go somewhere.\n\nThoughts?\n",
    "head_branch": "procedures",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfecb3a21fa1e1f1aa0ec",
    "number": 2725,
    "body": "See #2716 and the commit log for more info. The issue seems to have been introduced in be9707f8, during the final refactoring of the REPL code, when a statement was (inadvertently?) moved out from under a try/catch clause.\n\nThis also fixes a strange behavior where a blank line in the REPL triggered an error, yet still passed the \"empty command evaluates to undefined\" test because erroring statements that didn't crash the REPL still happened to return `undefined`.\n",
    "head_branch": "repl-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5698e425fd2179247d14ece75f543eabb0439211 into 8b0dd9d2249beb908a43523daa98e3657cf84c4e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfecc3a21fa1e1f1aa0ed",
    "number": 2723,
    "body": "So, the awesome pull request by @jwalton, #2696, added source location tracking to the compiler. With that, we can have much better error messages :smile_cat: \n\nIf we have a problematic file:\n\n``` coffeescript\n# error.coffee\nfor {wat} in [1..10]\n  wat?\n```\n\nError messages before pull request:\n\n```\nSyntaxError: In error.coffee, cannot pattern match over range loops\n    at SyntaxError (unknown source)\n    at new For (/home/demian/Programming/coffee-script/lib/coffee-script/nodes.js:2550:15)\n    at Object.anonymous (/home/demian/Programming/coffee-script/lib/coffee-script/parser.js:325:58)\n    at Object.parse (/home/demian/Programming/coffee-script/lib/coffee-script/parser.js:565:36)\n    at Object.exports.compile.compile (/home/demian/Programming/coffee-script/lib/coffee-script/coffee-script.js:46:20)\n    at compileScript (/home/demian/Programming/coffee-script/lib/coffee-script/command.js:182:33)\n    at fs.stat.notSources.(anonymous function) (/home/demian/Programming/coffee-script/lib/coffee-script/command.js:152:18)\n    at fs.readFile (fs.js:176:14)\n    at Object.oncomplete (fs.js:297:15)\n```\n\nAfter pull request:\n\n```\nerror.coffee:2:5: error: cannot pattern match over range loops\nfor {wat} in [1..10]\n    ^^^^^\n```\n\nAs you can see, the error message conforms to the format most compilers follow: `<filename>:<line>:<col>: <message>`, and includes the problematic error line plus a useful marker to see where we screwed up. I removed the stack trace because i think it's not of much value to the end user.\n\nAnd it works for lexer, parser and compiler errors! All with the same format. The consistent format should help both humans and development tools to find where the errors are in the code :smiley_cat: \n\n---\n\nThis pull request still needs some love though. These are some of the things that i plan to do in the upcoming days:\n- Fix a bug in the parser error messages. The wrong token is being marked (one before from the one that should be marked).\n- Implement some way to show multi-line errors. Any ideas on this?\n- :sparkles: Colored output :sparkles:\n- Integrate this into the on-line compiler at coffeescript.org. Haven't event though about this yet. Maybe now that we have more information about the errors we can display them differently. @michaelficarra do you know if Ace has some in-line error reporting feature?\n- Integrate it in the REPL.\n- More thorough testing. There're probably lots of edge cases that i'm missing.\n\n---\n\nBut anyway, i wanted to open the pull request ASAP to see if it would be a welcomed change, and maybe gather some feedback/constructive criticism. Cheers! \n",
    "head_branch": "improved-error-messages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f0fcf4aee07563014cd7991ba549e5ea6b7852d3 into 838e5e1163050af1c9d8eb5ec31e309a1f835c42"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfecd3a21fa1e1f1aa0ee",
    "number": 2721,
    "body": "I stumbled upon an unexpected compiler error while compiling `super()`:\n\n```\n$ coffee -cs <<<'super()'\nTypeError: Cannot read property 'name' of null\n    at Scope.exports.Scope.Scope.namedMethod (/usr/lib/node_modules/coffee-script/lib/coffee-script/scope.js:42:22)\n    at Call.exports.Call.Call.superReference (/usr/lib/node_modules/coffee-script/lib/coffee-script/nodes.js:805:24)\n    at Call.exports.Call.Call.compileNode (/usr/lib/node_modules/coffee-script/lib/coffee-script/nodes.js:927:21)\n    at Call.exports.Base.Base.compile (/usr/lib/node_modules/coffee-script/lib/coffee-script/nodes.js:48:21)\n...\n```\n\nIt seems the error has been there for quite some time (since 1.3.2), introduced in commit 34be878257b9206e02046cb4ab10101e6266cd9f.\n\nThe error is gone after adding a little `?` in the right place, but really...\n\n![](http://cdn.memegenerator.net/instances/400x/31450812.jpg)\n\nThe error message for `super()` now seems good:\n\n```\n$ bin/coffee -cs <<<'super()'\nSyntaxError: cannot call super outside of a function.\n    at SyntaxError (unknown source)\n    at Call.exports.Call.Call.superReference (/home/demian/Programming/coffee-script/lib/coffee-script/nodes.js:807:15)\n    at Call.exports.Call.Call.compileNode (/home/demian/Programming/coffee-script/lib/coffee-script/nodes.js:927:21)\n    at Call.exports.Base.Base.compile (/home/demian/Programming/coffee-script/lib/coffee-script/nodes.js:48:21)\n...\n```\n\nBut the error message for `-> super()` is also \"cannot call super outside of a function\", which doesn't make any sense, because it's inside a function. And [it seems it should say](https://github.com/jashkenas/coffee-script/blob/5e498ca395d0dc7024c5ea7d9f373c26c4afe941/src/nodes.coffee#L523) \"cannot call super on an anonymous function\" instead, which would make much more sense. \n\nSo, i have no idea how Scope works or if it's really that class the source of the problem. Could someone more seasoned have a look this?\n",
    "head_branch": "fix-super",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfecd3a21fa1e1f1aa0ef",
    "number": 2720,
    "body": "e.g\n\n``` coffeescript\n@$el.html @template\n  variable: 42\n```\n",
    "head_branch": "test-2715",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfece3a21fa1e1f1aa0f0",
    "number": 2719,
    "body": "More of these minor code fixes. \n\nBTW, is there any convention on submitting this kind of little patches? (Are they welcome? xD)\n",
    "head_branch": "minor-embellishments",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge dcdfe9bc344b0eaa58fb8be9d64164c68ef9a0ae into c39723c053691aaa7e7c53cf2f43aaae6542c9aa"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfecf3a21fa1e1f1aa0f1",
    "number": 2718,
    "body": "This branch allows users of the browser-ready `extras/coffee-script.js` file to embed [Literate CoffeeScript](http://coffeescript.org/#literate) in web pages. For example:\n\n``` html\n<script src=\"extras/coffee-script.js\"></script>\n<script type=\"text/literate-coffeescript\">\nThis is a Literate CoffeeScript example.\n\n    console.log \"Success!\"\n</script>\n```\n\nThis results in \"Success!\" being displayed in the JavaScript console.\n\nContributors are urged by `CONTRIBUTING.md` to add their own tests. There are, however, no existing tests for the browser scripts functionality except for the test wrapper itself in `tests/test.html` For that reason, I have not added any new tests. I have of course tested that the code works on the web.\n\n**EDIT**: The original submission used `text/coffeescript+literate`. This was changed to `text/literate-coffeescript` in a later squashed commit due to a suggestion from @jashkenas.\n",
    "head_branch": "sbp-literate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 881ae5528dce395db67375d3ec0353fa3533989c into 32eb1bf58f1d78236d48b3087bf1cb20748f3c0f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfed03a21fa1e1f1aa0f2",
    "number": 2712,
    "body": "A somewhat involved patch, merging addImplicitBraces and addImplicitParentheses so making implicit function application and braces having the same precedence and being mostly associative with each other left to right.\n\nIt solves a wide variety of issues including but far from limited to: \n#2292, #2297, #2706, #2549, #2608, #1865, #1896 and removes a great deal of headaches I've had with coffeescript.\n",
    "head_branch": "implicit-object-implicit-call-stuff",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1666716c3168f70e9eb6c997e0fff5f2b7815fc0 into 965237e0da9c8413f569343b3462723c29bc4d16"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfed13a21fa1e1f1aa0f3",
    "number": 2711,
    "body": "Apparently #1435 is caused by a tiny typo. This should fix it.\n",
    "head_branch": "fix-1435",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a320e1e53501f4aae1067e5eab4b9f816b9e6338 into 8f0a7774f91174797bd087ef003bac8fe64949b1"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfed23a21fa1e1f1aa0f4",
    "number": 2710,
    "body": "I've noticed that build:full sometimes doesn't run tests with the newly compiled compiler. This patch makes a thorough cleansing of node.js's cache making sure that all modules in the coffee-script dir (and below if exist) get thrown out, to be loaded again when required the next time. \n",
    "head_branch": "fix-full-build-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7f8b56eadd637bc7e70f879ab55b4ac64c2f18e0 into 385d93e332f793799d738df2e5924118e2211c30"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfed33a21fa1e1f1aa0f5",
    "number": 2709,
    "body": "Nothing fancy really. Just some minor code tweaks that i had TODO'ed when grokking the compiler's code.\n",
    "head_branch": "minor-embellishments",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9ed804d9b15590ceef8c73978287963961635e88 into fa1ffa66d38974f34c6158a3045cdf40481e87cc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfed43a21fa1e1f1aa0f6",
    "number": 2701,
    "body": "<table>\n  <tr>\n    <th>Old URL</th>\n    <th>New URL</th>\n    <th>Reason</th>\n  </tr>\n  <tr>\n    <td>http://riakjs.org</td>\n    <td>http://riak-js.org</td>\n    <td>Wrong URL</td>\n  </tr>\n  <tr>\n    <td>http://www.basho.com/Riak.html</td>\n    <td>http://www.basho.com/</td>\n    <td>404 Not Found</td>\n  </tr>\n</table>\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfed53a21fa1e1f1aa0f7",
    "number": 2696,
    "body": "This change makes it so that the coffee-script compiler keeps track of where tokens came from in the original .coffee source, and passes this data along to Jison, which will imbed it in the AST.  This can serve as the foundation for source-maps in CoffeeScript.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e1a2e11de44675b20a863dd50967cb26a2c94dad into d43b50b1ca41a3f9bb1babfc8b0ab744b5ec1a58"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfed63a21fa1e1f1aa0f8",
    "number": 2685,
    "body": "this way you can get this info from the rubygems.org API\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge bf4d91dd38488b52bdd411a869a0c62253bcd866 into a106fb451b697f99989b9dafed8a70d30838a857"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfed73a21fa1e1f1aa0f9",
    "number": 2682,
    "body": "Obsoletes #2669 and #2600. Ping @jashkenas for final approval.\n\nShould we squash some of these commits or just keep them all separate? We still have the somewhat-hacky replacement of newlines with a reserved unicode character when in multiline mode. I don't know a better solution, and it's not terrible as is. We could also use a few more tests, but that can wait. It's already in a better state than the current REPL.\n",
    "head_branch": "repl-rewrite",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge b1300bdd79b19bb78d3b281c145fb4e16c865c9e into 955afe0c9f1a47b54a6b7e6544dc7412b97fdfb1"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfed83a21fa1e1f1aa0fa",
    "number": 2669,
    "body": "Per discussion in #2626, here's a pull request to replace coffee's hand-rolled REPL with a REPL that heavily leverages Node's REPL implementation by implementing a custom line eval function.\n\nhttp://nodejs.org/api/repl.html\n\nWith this you get all the features of the Node REPL including tab completion, commands and the ability to provide any of the options to the coffee REPL that you can pass to Node's.\n\nWhat you don't get is multi-line mode. It looks possible but will require some serious overriding of the Node REPL's line input handling.\n",
    "head_branch": "node_repl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 69d80e2dede6a4e226f32cd35cad9c7246b905ae into 955afe0c9f1a47b54a6b7e6544dc7412b97fdfb1"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfed93a21fa1e1f1aa0fb",
    "number": 2666,
    "body": "As proposed by @rlidwka in jashkenas/coffee-script#15\n\n@pke, could you have a look and see if this does what you expect? I tested the patch with our app and at least it still works :trollface: \n",
    "head_branch": "1.4.0_with_named_functions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfeda3a21fa1e1f1aa0fc",
    "number": 2663,
    "body": "CoffeeScript is amazing.  I just found out that it supports destructuring assignment even inside the parameter list of a function.  It's a great feature and so I thought it'd be good to call it out in the documentation.\n\nIt looks like there was some discussion about this in class constructors in #1607 and #2378 and it just needed to get added.  So here's a pull request for documenting its use in a plain function, rather than the more complicated of a class method.\n\nThanks!\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfedb3a21fa1e1f1aa0fd",
    "number": 2661,
    "body": "Add `transient` to the list of reserved words in JavaScript\n",
    "head_branch": "add-transient-keyword",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfedb3a21fa1e1f1aa0fe",
    "number": 2660,
    "body": "The existing documentation explains:\n\n> When using a JavaScript loop to generate functions, it's common to insert a closure wrapper in order to ensure that loop variables are closed over, and all the generated functions don't just share the final values. CoffeeScript provides the do keyword, which immediately invokes a passed function, forwarding any arguments.\n\nVersion 1.3.1 added the ability to use `do` to protect variables from being hoisted:\n\n```\nx = 0\ndo (x = 1, y = undefined) ->\n  alert(x) # alerts '1'\nalert(x) # alerts '0'\n```\n\nThis commit documents this pattern under the variables and scoping section.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfedc3a21fa1e1f1aa0ff",
    "number": 2646,
    "body": "Reduce brackets of If statement, which reduces the compiled js size.\nAdd a hasReturn variable to detect whether the block makes a return\nexpression. unwrap the block, and only reduce brackets when\nsubexpression is Assign, Call or Return.\n\nWe can't reduce brackets when subexpression is For statement,\nBecause For statement makes variable declaration for index variable.\n\nall cake test passed.\n\nRegards, Yo-An\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfedd3a21fa1e1f1aa100",
    "number": 2634,
    "body": "### The noglobals compile option\n\nThese changes make it easier to to pass generated code on to other systems,\nsuch as MongoDB.\n\nConsider a reduce function:\n\n``` coffeescript\n(key, [result, values...]) ->\n    for value in values\n        result = binop result, value\n    result\n```\n\nWithout noglobals:\n\n``` javascript\nvar __slice = [].slice;\n\n(function(key, _arg) {\n  var result, value, values, _i, _len;\n  result = _arg[0], values = 2 <= _arg.length ? __slice.call(_arg, 1) : [];\n  for (_i = 0, _len = values.length; _i < _len; _i++) {\n    value = values[_i];\n    result = binop(result, value);\n  }\n  return result;\n});\n```\n\nWith noglobals:\n\n``` javascript\n(function(key, _arg) {\n  var result, value, values, _i, _len,\n    __slice = [].slice;\n  result = _arg[0], values = 2 <= _arg.length ? __slice.call(_arg, 1) : [];\n  for (_i = 0, _len = values.length; _i < _len; _i++) {\n    value = values[_i];\n    result = binop(result, value);\n  }\n  return result;\n});\n```\n### Classes with external constructors\n\nConsider:\n\n``` coffeescript\nclass Foo\n    constructor: Whatever\n```\n\nCurently this compiles to:\n\n``` javascript\nvar Foo, _class;\n\nFoo = (function() {\n\n  function Foo() {\n    return _class.apply(this, arguments);\n  }\n\n  _class = Whatever;\n\n  return Foo;\n\n})();\n```\n\nAfter SHA: 346c2da25f65d738fd833cfecf2688010d7b63f7\n\n``` javascript\nvar Foo;\n\nFoo = (function() {\n  var constructor;\n\n  function Foo() {\n    return constructor.apply(this, arguments);\n  }\n\n  constructor = Whatever;\n\n  return Foo;\n\n})();\n```\n\nWhile I was at it, I fixed a minor edge case in SHA: 847f9c4e7f8ebefbd9dc0c8a664ec480ee6a9508.\n### Potential next steps\n\nIt would be nice to be able to tighten down the 'var ...' declarationsin the\ngenerated code too.  However this wasn't necenssary in my current application,\nso I note it mainly as an idle curiosity.\n\nI considered introducing a similar constructor closure variable for internal\nconstructors too, but that seemed a bit like scope creep given my goals.\n",
    "head_branch": "noglobals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfede3a21fa1e1f1aa101",
    "number": 2632,
    "body": "",
    "head_branch": "update-uglify",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9e3d43193dc9de6ada33f6a9d58eba215904f544 into 35787ef79b4e40ddce7d2c60e822a389d1d01f73"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfedf3a21fa1e1f1aa102",
    "number": 2631,
    "body": "Hi,\n\nWhen cake build:browser will fail because of the incompatibility with the new uglify-js, this is a quick workaround.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfee03a21fa1e1f1aa103",
    "number": 2627,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 847ab4d18ef03f34495ac0a19e963e30fa649f3c into cd2444e546055bf962807d4683e6337308e69edc"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfee13a21fa1e1f1aa104",
    "number": 2600,
    "body": "Now with no dependency\n",
    "head_branch": "repl-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3284f6af18e7993762ab659fb94cf8e424c4b0d7 into 955afe0c9f1a47b54a6b7e6544dc7412b97fdfb1"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfee23a21fa1e1f1aa105",
    "number": 2599,
    "body": "Here's an attempt to fix #2359. \n\nI opened the original issue quite long ago, but procrastinated ad-infinitum after feeling intimidated with `nodes.coffee`. #2596 encouraged me to give it another shot :)\n\nThis pull request basically re-introduces the ability to extend native objects without defining a constructor:\n\n``` coffeescript\nclass MyError extends Error\nconsole.log new MyError instanceof MyError # -> true\n\nclass Foo extends Object\nconsole.log new Foo instanceof Foo # -> true\n```\n\nAnd also forbids returning any value from the constructor. This throws a SyntaxError:\n\n``` coffeescript\nclass Foo\n  constructor: -> \n    return 5\n```\n\nEmpty returns are allowed though:\n\n``` coffeescript\nclass Foo\n  constructor: ->\n    if mustReturnEarly\n      return # OK\n    @doSomeWork()\n```\n\nThis is, however, at the expense of losing the ability to define \"other typed\" constructors. That is, constructors that return objects other than `this`. So it's a backward-incompatible change ([one test](https://github.com/jashkenas/coffee-script/blob/40431241357e04bda357e59139c2d8403102feb4/test/classes.coffee#L598-601) had to be removed).\n",
    "head_branch": "issue2359",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 52b0f76eb2fea16075078154e674c66576614ebb into de29613d918669351448151d4964ebac387d2b4a"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfee33a21fa1e1f1aa106",
    "number": 2597,
    "body": "This is my attempt at implementing partial application as proposed in #2585.\n\nTo summarize:\n\n``` coffeescript\nadd = (a,b) -> a + b\nadd_3 = add 3, ...\n7 == add_3 4\n\nclass A\n  constructor: (@value = 0) ->\n  increment_by: (num) -> @value += num\n  increment: @increment_by(1, ...)\n\na = new A\na.increment()\na.value == 1\n```\n\n``` javascript\nvar A, a, add, add_3,\n  __slice = [].slice;\n\nadd = function(a, b) {\n  return a + b;\n};\n\nadd_3 = function() {\n  return add.apply(this, [3].concat(__slice.call(arguments)));\n};\n\n7 === add_3(4);\n\nA = (function() {\n\n  function A(value) {\n    this.value = value != null ? value : 0;\n  }\n\n  A.prototype.increment_by = function(num) {\n    return this.value += num;\n  };\n\n  A.prototype.increment = function() {\n    return this.increment_by.apply(this, [1].concat(__slice.call(arguments)));\n  };\n\n  return A;\n\n})();\n\na = new A;\n\na.increment();\n\na.value === 1;\n```\n\nThis is my first attempt at hacking CS source, so I assume that there is probably something wrong with this code, I will try to fix some of the issues I find.\n### TODO\n- <del>Add suitable documentation.</del>\n- <del>Nicer formatting of outputted code.</del>\n- <del>Implement soaks (although I'm really not sure of a use-case for these, it needs to be done for the sake of consistency).</del>\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfee43a21fa1e1f1aa107",
    "number": 2587,
    "body": "This simplifies the code generated by `new Thing(args...)`\n",
    "head_branch": "pullreq",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 25bdde85a986786ade4b1208aa0e2b3eabfde29f into d8905e2f8799931013e227b869b1c6f6c85122f0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dfee53a21fa1e1f1aa108",
    "number": 2574,
    "body": "Ignoring comments, output in inspect mode, variable saving\n",
    "head_branch": "repl-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfee63a21fa1e1f1aa109",
    "number": 2546,
    "body": "I used those directory structure in my projects:\n\n```\n ./\n├── js\n└── src\n    ├── collections\n    │   └── init.coffee\n    ├── models\n    │   └── init.coffee\n    └── views\n        └── init.coffee\n```\n\nI changed current directory to src and run coffee compiler with options `-co ../js ./`\n\nAnd got truncated directories names:\n\n```\n./\n├── js\n│   ├── dels\n│   │   └── init.js\n│   ├── ews\n│   │   └── init.js\n│   └── llections\n│       └── init.js\n└── src\n    ├── collections\n    │   └── init.coffee\n    ├── models\n    │   └── init.coffee\n    └── views\n        └── init.coffee\n```\n\nAs I know _dot-slash_ also (as is _dot_) used for reference to current directory.\n",
    "head_branch": "issue2545",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfee73a21fa1e1f1aa10a",
    "number": 2535,
    "body": "",
    "head_branch": "issue2534",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 78423e9a14494532a195bc3ff50e4148f2e3a942 into 1b14c035e70c52330823aa36fe0eea1f4d58f2f0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfee73a21fa1e1f1aa10b",
    "number": 2527,
    "body": "Fixes font antialiasing on pre and code elements \n\n**Before:**\n![before](http://ubuntuone.com/0AUGmRVn8cvplVPzp14Xd3)\n**After:**\n![after](http://ubuntuone.com/4goMJ517F1mBvpdAqSIybA)\n",
    "head_branch": "fix_doc_fonts",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfee83a21fa1e1f1aa10c",
    "number": 2513,
    "body": "Prefix assignments with the 'export' keyword, to cause their 'var' definitions to move up one level of scope. The keyword can be repeated to move even higher up in the scope.\n\nThe common use-case is probably at the top level scope, where it will allow your variables to be defined outside the top-level function wrapper. For instance, we are concatenating the output of multiple CoffeeScript compiles into UglifyJS, and this allows us to not pollute the window object, while having access to exported symbols without going through an object. Also, Javascript compressors can work with these exports (as long as they don't reach the window object), but will leave object property key uncompressed.\n\nIt can be quite convenient in deeper scopes within a file too.\n\nDoes this seem useful to anybody else, or are we alone in this?\n\nPlease note: This is not meant as an alternative to the 'exports' object de facto standard. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfee93a21fa1e1f1aa10d",
    "number": 2486,
    "body": "It seems like there's a big enough lag when vim saves a file (but not when gedit saves) that the file appears to be removed to the --watch --compile functionality.\n\nI was able to fix the issue I was having with this timeout.  I'm not sure if anyone else has been having this issue (vim v7.3.600)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfeea3a21fa1e1f1aa10e",
    "number": 2484,
    "body": "",
    "head_branch": "remove-register-extension",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c29597b3bca50c970cf4c59f2e01bd840401fe0a into 5d7a83468abce3abe5ac236342201dd3ce6653a7"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfeeb3a21fa1e1f1aa10f",
    "number": 2483,
    "body": "Regarding line-number mappings (#558): at Rentenna, we use this simple naive implementation -- thought it a good idea to share our solution.\n\nWe monkey-patch the parser to attach yylineno to any nodes created, and then once parsing is completed, we enforce the constraint that any node's line number can be at most the minimum of any of its children.\n\nWe find this to produce highly accurate source line-mappings.\n\nOnce we have attached line numbers to nodes, we insert text of the form \"{{=LINE_NUMBER=}}\" into the source js and then pull them out to produce the map. This is certainly a hack, but we found it to be a minimally invasive approach. Ideally, we could attach some metadata to the strings returned by compile, but it would probably require a major rewrite of the compile methods.\n\nThere were some problems with certain nodes where behavior depended on the compiled value. We disabled lineno printing for Value, Literal and Comment to avoid this issue.\n\nThe output map is a simple list of 0-based offsets. The length of the list is equal to the length of the generated coffeescript file, and the value of each element is the 0-based line in the original source.\n\nWe use these maps internally to generate sourcemaps for our application after combining several files, so this format works for us, but I would expect it would be preferable to generate sourcemaps directly in coffeescript.\n\nIn any case, I'm sure this misses some corner cases and the {{==}} hack does not seem ideal, but just thought we'd share our work. Thanks for creating an amazing tool.\n\nExample stacktrace from our testing application: http://imgur.com/pBS0M\n",
    "head_branch": "lineno",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfeec3a21fa1e1f1aa110",
    "number": 2480,
    "body": "Testing with CoffeeScript is a new, free eBook about building CoffeeScript apps through BDD (Jasmine). This commit is adding TwC to the list of books on http://coffeescript.org.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7c53d8c120e7682e006f8e79f0f8a876c14dbf3e into 46ecfd3c1aa146e621173ccd244cf92d01dc715d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfeed3a21fa1e1f1aa111",
    "number": 2467,
    "body": "This may be due to a node.js bug. If so, could anyone please tell me how to report this bug upstream.\n\nNevertheless this commit fixes the problem, ash all the existing tests are still passing.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfeee3a21fa1e1f1aa112",
    "number": 2461,
    "body": "If you use either of these words in your code you are asking for trouble. It will be nice if CoffeeScript does the 2-pass parser thing at some point so this isn't needed but for now this will reduce unexpected annoying things :)\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfeef3a21fa1e1f1aa113",
    "number": 2431,
    "body": "Allows one to run the tests using `npm test`.\n",
    "head_branch": "npm-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 81c0964e482259e860d915320dc00592a43a6e5a into 2a56f0cdf76200d4507c9908e404bbd25599c430"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfef03a21fa1e1f1aa114",
    "number": 2430,
    "body": "Allows people to author their .coffee files with UTF-8 BOMs at the start, because sometimes that happens. Fixes #798.\n",
    "head_branch": "bom",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c9388ce767278ec968a5a8ee8874a9b624d0b749 into 219726a9c5d15b470b11cb587d3236bab79a5c87"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfef13a21fa1e1f1aa115",
    "number": 2421,
    "body": "...to fs.existsSync\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfef23a21fa1e1f1aa116",
    "number": 2417,
    "body": "Added the following to the docs in the Switch section:\n\nSwitch statements can also be used without a control expression, turning them in to a cleaner alternative to if/else chains.\n\nscore = 76\ngrade = switch\n  when score < 60 then 'F'\n  when score < 70 then 'D'\n  when score < 80 then 'C'\n  when score < 90 then 'B'\n  else 'A'\n# grade == 'C'\n",
    "head_branch": "doc_for_switch_with_no_control_expression",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 334dcbd162784dce8056e49156283483c929310d into f8c6b494aaa3ace561ffc3fe97e5b385aeb22003"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfef23a21fa1e1f1aa117",
    "number": 2411,
    "body": "Compatibility is kept for path.exists. Versions of node that have made the change will use fs.exists, while older versions will fall back to path.exists. The same goes for path.existsSync.\n\nThis patch successfully passes `cake build:full`.\n",
    "head_branch": "fix-path-exists",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2a56f0cdf76200d4507c9908e404bbd25599c430 into 6417cf4d1ba1da314b53901214b262267b5fcdc4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfef33a21fa1e1f1aa118",
    "number": 2395,
    "body": "I've made these small changes in order to get it published to the Jam package repository: http://groundcomputing.co.uk/code/jam/packages/#/details/coffee-script\n\nIt would be great if this was added upstream so I don't have to maintain a fork for these trivial changes, but I understand if you don't want to add a browser-focused package manger to your package.json, and prefer to keep it focused on Node.js.\n\nLet me know, either way.\n\nThanks\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfef43a21fa1e1f1aa119",
    "number": 2391,
    "body": "Fix for issue https://github.com/jashkenas/coffee-script/issues/2215 issue #2215\n",
    "head_branch": "shebang",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfef53a21fa1e1f1aa11a",
    "number": 2389,
    "body": "This commits adds support for UTF8 byte order markers. It works in two ways:\n- .coffee files containing a BOM will filter it out, preventing it from appearing in the middle of the generated JavaScript\n- when writing .js files, an optional command line switch -u or --utf8bom will prepend a BOM to the generated file\n\nThis is somewhat of a hot fix because post-processing the generated files with iconv takes too much time out of our build process, but maybe some other users find this useful, too.\n\nCC @pke @superquadratic @doo \n",
    "head_branch": "utf8bom",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfef63a21fa1e1f1aa11b",
    "number": 2378,
    "body": "Per our conversation: https://github.com/jashkenas/coffee-script/issues/1607#issuecomment-6168350\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7fdd21b26dfc65f3973c18d9408bd8ae52f95bf4 into 7595cb689ae1fca537e4fd781672f7cd33dcd3cd"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfef73a21fa1e1f1aa11c",
    "number": 2373,
    "body": "In Node 0.7+ existsSync and exists are on fs and deprecated on path.\nUpdated cake and command to reflect this, but maintain backwards\ncompatibility. Tested on 0.7.9 and 0.6.1.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfef83a21fa1e1f1aa11d",
    "number": 2371,
    "body": "This line is unused.\n",
    "head_branch": "del_unused",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge bc7e0cf09a37bdf606c87dc17b07957d71668d4f into 7c29ea4d38928f829315ea4bd630219fb1e3ac30"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfef93a21fa1e1f1aa11e",
    "number": 2370,
    "body": "### Wtf is this shit?\n\nThis patch enables using dashes in identifier names and mangles letters after them to uppercase.\nE.g. `for-each` would be compiled to `forEach`.\n\nThis greatly improves readability sticking to idiomatic js output, because you're able to write code in idiomatic js style and everyone would be able to use it without bullshit.\n\nSee [underscores are stupid](http://devblog.avdi.org/2012/05/15/underscores-are-stupid/). tl;dr: you need to use `shift` to write underscores and camelcase etc.\n### Simplicity\n\nThe main point of this pull request is that when you do shit simply, everything is ok.\n\nOne simple rule is used: **identifiers** always mangled. Others aren't.\n- `{parse-int}` would be compiled to `{parseInt: parseInt}`.\n- `{'parse-int'}` would be compiled to `{'parse-int': 'parse-int'}` because **string ain't an identifier**.\n- Same with `object['to-string']`, it's compiled to `object['to-string']`\n### What about interoperability with javascript?\n\n> If you always have to do the mental translation between the two names, interoperability suffers\n\nis weak argument because you already need to do mental translation for:\n- `yes`, `on` compiles to `true`, `no`, `off` to false\n- `return` is automatically applied to every last statement in function and everything is a statement\n- there is no `var` so you can accidentally reassign some function and spend a hour looking for the bug\n- there are inclusive and exclusive ranges. and `...` / `..` don't give any clarity which one is inclusive.\n- there is `isnt` and there is `is not`, but they are not the same\n- `for-in` isn't the same as in js, `for-of` isn't the same as in ecmascript 6\n- `a- b` vs `a -b`\n### Backwards compat\n\nExisting codebases are easy to transfer. Just replace `(\\w)([+-*/])(\\w)` with `$1 $2 $3` in all files.\n### Example 1:\n\nCoffeeScript source rewritten with dashes: https://github.com/paulmillr/coffee-script/tree/topics/use-dashes.\n\nScript used for auto-replacing: https://gist.github.com/2901194.\n### Example 2:\n\n``` coffeescript\nuser = document.query-selector('.user')\nuser.add-event-listener 'click', ((event) -> console.log event), yes\n\nid = window.set-interval ->\n  console.log 'hello'\n, 1000\nwindow.set-timeout (-> window.clear-timeout id), 1500\n\nencoded = encode-URI-component string\nnumber = parse-int '5'\nstring = number.to-string()\n\npage-text = document.query-selector('body').inner-text\nlogged-in = $('body').has-class 'logged-in'\nobj = {a: 1, b: 2}\ndescriptors = Object.get-own-property-names(obj)\n  .map((name) -> Object.get-property-descriptor obj, name)\n```\n\ncompiles to\n\n``` javascript\nvar descriptors, encoded, id, loggedIn, number, obj, pageText, string, user;\n\nuser = document.querySelector('.user');\n\nuser.addEventListener('click', (function(event) {\n  return console.log(event);\n}), true);\n\nid = window.setInterval(function() {\n  return console.log('hello');\n}, 1000);\n\nwindow.setTimeout((function() {\n  return window.clearTimeout(id);\n}), 1500);\n\nencoded = encodeURIComponent(string);\nnumber = parseInt('5');\nstring = number.toString();\n\npageText = document.querySelector('body').innerText;\n\nloggedIn = $('body').hasClass('logged-in');\n\nobj = {\n  a: 1,\n  b: 2\n};\n\ndescriptors = Object.getOwnPropertyNames(obj).map(function(name) {\n  return Object.getPropertyDescriptor(obj, name);\n});\n```\n\nCloses #2345. Thanks @goatslacker for initial work.\n",
    "head_branch": "topics/dash-in-identifiers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfefa3a21fa1e1f1aa11f",
    "number": 2369,
    "body": "I added a simple way to gather and output lines of source context to display with compiler error messages.\n",
    "head_branch": "issue1351",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfefb3a21fa1e1f1aa120",
    "number": 2352,
    "body": "This is my proposal for disallowing object initialisers with duplicate keys. Opened [at the request of @jashkenas](https://github.com/jashkenas/coffee-script/commit/81f780f1fbf25985709e51191c8f5506b79cc278#commitcomment-1356293).\n",
    "head_branch": "restrictDuplicateKeys",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfefc3a21fa1e1f1aa121",
    "number": 2347,
    "body": "The readline interface of node has changed in [aad12d0](https://github.com/joyent/node/commit/aad12d0) and because of\nthat the autocompletion and key movement didn't work anymore. This\ncommit fixes this by checking whether stdin is in raw mode (i.e. invoked\nas a script) or not (as a repl).\n",
    "head_branch": "fix-repl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 01d4e87f57e10274785bd508b928dc2d686356d7 into 972a5299d54d75aefaba941472736e22191448a6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfefd3a21fa1e1f1aa122",
    "number": 2346,
    "body": "The idea is to prepare the ground for support of source maps and passing column numbers as well as\nthe already existing line numbers is the first step.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfefe3a21fa1e1f1aa123",
    "number": 2337,
    "body": "This will auto-add `'use strict';` to every coffeescript file if `—bare` wasn't passed to options.\n\nCloses #2335.\n",
    "head_branch": "topics/use-strict",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfefe3a21fa1e1f1aa124",
    "number": 2334,
    "body": "I don't really like my solution very much, so I've opened a pull request to see if anyone wants to take a stab at refactoring. **+1** if you think it's fine the way it is, and I'll merge it.\n",
    "head_branch": "issue2333",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f31ff7774a523e6499776afc56a997a38e7febf7 into 5c66e552d70ee7e3207d727a83d48a3c2e366bc7"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfeff3a21fa1e1f1aa125",
    "number": 2329,
    "body": "This PR provides hooks for setting prototype properties, static properties, and the extends hook.\n\nGiven  a class like this:\n\n``` coffeescript\nclass Tower.Model extends Tower.Class\n  @field: (name, options) ->\n\n  errors: null\n```\n\n... the generated javascript has 2 hooks defined: `__defineStaticProperty` and `__defineProperty`:\n\n``` javascript\nvar __defineStaticProperty = function(clazz, key, value) {\n  if(typeof clazz.__defineStaticProperty == 'function') return clazz.__defineStaticProperty(key, value);\n  return clazz[key] = value;\n},\n  __defineProperty = function(clazz, key, value) {\n  if(typeof clazz.__defineProperty == 'function') return clazz.__defineProperty(key, value);\n  return clazz.prototype[key] = value;\n},\n  __hasProp = {}.hasOwnProperty,\n  __extends =   function(child, parent) { \n    if(typeof parent.__extend == 'function') return parent.__extend(child);\n\n    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } \n    function ctor() { this.constructor = child; } \n    ctor.prototype = parent.prototype; \n    child.prototype = new ctor; \n    child.__super__ = parent.prototype; \n    if(typeof parent.extended == 'function') parent.extended(child); \n    return child; \n};\n\nTower.Model = (function(_super) {\n  var Model;\n\n  function Model() {\n    return Model.__super__.constructor.apply(this, arguments);\n  }\n\n  Model = __extends(Model, _super);\n\n  __defineStaticProperty(Model, 'field', function(name, options) {\n\n  });\n\n  __defineProperty(Model,  \"errors\", null);\n  // ...\n```\n\nThis PR also includes a simple `__extends` hook.  All 3 of these \"hooks\" just check for a property defined on the class being created, otherwise it defaults to the original CoffeeScript implementation.\n\nThat allows you to do this:\n\nhttps://github.com/viatropos/tower/blob/7fc992c730818ca40893f3601ff4391df4cdeaac/src/tower/support/class.coffee#L1\n\n``` coffeescript\ncoffeescriptMixin =\n  __extend: (child) ->\n    object = Ember.Object.extend.apply(@)\n    object.__name__ = child.name\n    @extended.call(object) if @extended\n    object\n\n  __defineStaticProperty: (key, value) ->\n    object = {}\n    object[key] = value\n    @[key] = value\n    @reopenClass(object)\n\n  __defineProperty: (key, value) ->\n    object = {}\n    object[key] = value\n    @reopen(object)\n\nEmber.Object.reopenClass(coffeescriptMixin)\nEmber.Namespace.reopenClass(coffeescriptMixin)\nEmber.Application.reopenClass(coffeescriptMixin)\nEmber.ArrayProxy.reopenClass(coffeescriptMixin)\nEmber.State.reopenClass(coffeescriptMixin)\nEmber.StateManager.reopenClass(coffeescriptMixin)\n```\n\nThere is no decrease in performance, and all of the tests pass.  What are your thoughts?\n\nBy being able to do this, I can now use CoffeeScript in a much more powerful way.  All it takes is this very minor change.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff003a21fa1e1f1aa126",
    "number": 2320,
    "body": "\"chaching\" -> \"caching\".\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge fa899ab810986b8cc912e2ef4f093e8b080b3556 into fdcd99dfef6a9830307e318c1a8d4589eac2c749"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff013a21fa1e1f1aa127",
    "number": 2311,
    "body": "Sorry if this is naive. I just did the minimum to get my two new tests to pass...which is probably missing a billion things.\n\nHopefully, if some one thinks this has real value, it might motivate them to pick it up. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff023a21fa1e1f1aa128",
    "number": 2299,
    "body": "([2213](https://github.com/jashkenas/coffee-script/pull/2213) refers to the pull request where the remaining issues with the #2211 were discussed.)\n\nAddresses @satyr's `([f()])->` case.\n\nChecks for `Value`s, `Splat`s and `Assigns` as params, and errors on any other type of `node`.\n",
    "head_branch": "2213-no-method-is-array",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f1b286469aca5ca2fa9a363de0ae4d4ac5d3140a into fa899ab810986b8cc912e2ef4f093e8b080b3556"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff033a21fa1e1f1aa129",
    "number": 2289,
    "body": "This commit adds a little loophole into the rewriter to allow syntax like:\n\n```\nclass Foo\n  bar: ->\n    \"Bang!\"\n\nfaz = new Foo!\nfaz.bar! # Bang!\n```\n\nI think it makes extending into objects when you need to use functions a\nlot cleaner:\n\n```\nNumber.prototype.seconds = ->\n   this * 1000\n\n4.seconds! # 4000\n```\n\nPerhaps it's a case of parens-itis. Or perhaps it's awesome! I\nthink it'll end up making quick little calls to methods a little less\npainful. One character less.\n\nThis was originally inspired by @joshuaclayton's tweet:\n\nhttps://twitter.com/#!/joshuaclayton/statuses/190496586533576705\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff043a21fa1e1f1aa12a",
    "number": 2286,
    "body": "...to CoffeeScript's grammar.\n\nThis is my first step in an attempt to create a maintainable fork of CoffeeScript that supports Closure Library-style annotations. For example, the following CoffeeScript:\n\n```\nclass Animal\n  constructor: (`string` @name) ->\n\n  move: (`number` meters) ->\n    alert @name + \" moved #{meters}m.\"\n```\n\nWould ideally become:\n\n```\ngoog.provide('Animal');\n\n/**\n * @param {string} name\n * @constructor\n */\nAnimal = function(name) {\n  this.name = name;\n};\n\n/** @param {number} meters */\nAnimal.prototype.move = function(meters) {\n  return alert(this.name + (\" moved \" + meters + \"m.\"));\n};\n```\n",
    "head_branch": "official_branch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff053a21fa1e1f1aa12b",
    "number": 2281,
    "body": "What's going on: inside of Coffee-generated closures, calling `super()` is implicitly making use of `this` (or explicitly doing so if you look at the output code).  Whenever we use `super()` within a closure, we have to pass `this` through closures as if `@` is being accessed.  The solution is just add one more condition to the list in `Closure::literalThis`\n",
    "head_branch": "bugfix_1183b",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3e95d7f2d06f42af929ec36cfefdbb11a50caa1f into c3159e48c80392d8a5a8b8a38b734a258015926c"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff063a21fa1e1f1aa12c",
    "number": 2277,
    "body": "After my first pass at #2211, @satyr found a bug in `(0: a, 1: a) ->`. It looks like my original implementation didn't correctly identify the `a` identifier as the (so-to-speak) param name. This patch addresses that issue. I also added a specific test for splatted destructured params (the original issue in #2211).\n",
    "head_branch": "2213-dup-destructured-params",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 99394e1011ac1526163d1f73fe3492523a153e8c into 3b1a566117ad6cf19a436874fbb38f6445d1abe4"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff073a21fa1e1f1aa12d",
    "number": 2272,
    "body": "... meaning.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff083a21fa1e1f1aa12e",
    "number": 2266,
    "body": "This is regarding [issue 2247](https://github.com/jashkenas/coffee-script/issues/2247#issuecomment-5085258)\n\nI'm still having issues reattaching listeners to the REPL. I'd like some comments though\n\nTo invoke the editor press ctrl+e, defaults to vi if $EDITOR is not set.\n",
    "head_branch": "issue2247",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff093a21fa1e1f1aa12f",
    "number": 2264,
    "body": "Hello,\n\nfirst of all thanks for this awesome project which brought back the joy of coding javascript to my life.\n\nSince am a devoted ruby developer I appreciate very much the presence of an extensive test suite on the project, but I think it lacks a ci server integration so I decided to write one for travis-ci, a very nice service which has hooks for github. I added just a few lines of code, just making sure the test process exits returning the number of failures encountered so to be friendly to travis. I also updated the readme file adding the travis badge which shines in green showing all tests are passing. I renamed the file to README.md, so github can parse correctly the image code.\n\nHope you will appreciate my little contribution, if you have a contributors list and decide to accept this pull request I would love to be mentioned in it.\n\nHave a nice weekend\n\nAndrea Longhi\n",
    "head_branch": "travis",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff093a21fa1e1f1aa130",
    "number": 2262,
    "body": "This will allow use of `@constructor.__name__` for building great dynamic apps.\n\n``` coffeescript\nclass Tweet\nconsole.log Tweet.__name__\n# => 'Tweet'\n\nclass View\n  initialize: ->\n    super\n    templateName = underscorize(@constructor.__name__).replace(/_view$/, '')\n    @template ?= require \"./templates/#{templateName}\"\n\nclass TweetView extends View\n```\n\nCoffeeScript 1.3.1 already uses `@constructor.name` for this purpose, but as we've seen, it breaks `'use strict'` mode because `@constructor.name` is a read-only property.\n\nRelated: #494, #2052, #2249, #2250, f3a1f466793ede9da1fe164111d482831392270c.\n",
    "head_branch": "constructor-__name__",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff0a3a21fa1e1f1aa131",
    "number": 2261,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ea60dfa44df83ec240f0176decd7cab928f7d698 into 53a82da3f3a031c637a1328253a53c9416f2dd33"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff0b3a21fa1e1f1aa132",
    "number": 2260,
    "body": "`this` should be `window` rather than clicked \"Run\" button in \"Try CoffeeScript\" interpreter.\n\nOn current coffeescript.org website, click \"TRY COFFEESCRIPT\" and enter:\n\n```\n alert [this == window, this, window]\n console.assert this == window, \"this is \", this, \"instead of of window\", window\n```\n\nand then click the \"Run\" button. \n\n```\nfalse,[object HTMLDivElement],[object DOMWindow]\n```\n\n**Assertion failed**: this is  &lt;div class=​\"minibutton dark run\" title=​\"Ctrl-Enter\"&gt;​Run​&lt;/div&gt;\n instead of of window DOMWindow \n\nConfusing to people coming to the site for the first time or trying to check values in the Web Console.\n\njQuery bound `this` to the html element clicked. Now unbound so `this == window`.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff0c3a21fa1e1f1aa133",
    "number": 2252,
    "body": "This should fix #1183. Fixing the compiler error revealed a couple of bugs in the runtime (`_this` versus `this` and also passing `this` through closures).  There might be other runtime cases that I missed, since the two cases I tried (wraps and fat-arrows) needed to be handled separately.\n",
    "head_branch": "bugfix_1183",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b03bea14fab4cf3c28d8f14a057fa7f57922a68a into 40431241357e04bda357e59139c2d8403102feb4"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dff0d3a21fa1e1f1aa134",
    "number": 2228,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff0e3a21fa1e1f1aa135",
    "number": 2226,
    "body": "Pretty simple:\n\n```\n$ coffee -bpe 0o644\n0x1a4 /* 0o644 */;\n$ \n```\n\nI expect some pushback from @jashkenas, so I'll open a pull request for it.\n",
    "head_branch": "preserveFormattedNumbers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff0f3a21fa1e1f1aa136",
    "number": 2222,
    "body": "fix for [issue 2215](https://github.com/jashkenas/coffee-script/issues/2215)\n\nFixes the following fail:\n\n```\n$ cat hello.coffee\n#!/usr/bin/env coffee\nconsole.log(\"hey\")\n\n$ ./hello.coffee\nhey\n\n$ coffee -c hello.coffee\n\n$ ./hello.js\n./hello.js: line 1: syntax error near unexpected token `('\n./hello.js: line 1: `(function() {'\n```\n",
    "head_branch": "shebang",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff103a21fa1e1f1aa137",
    "number": 2220,
    "body": "Another possible fix for issue 2217 https://github.com/jashkenas/coffee-script/issues/2217\n",
    "head_branch": "build-windows",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff113a21fa1e1f1aa138",
    "number": 2219,
    "body": "One possible fix for issue 2217 https://github.com/jashkenas/coffee-script/issues/2217\n",
    "head_branch": "build-windows-alternative",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7e32c320572722de0750ae4d33286a266f5ead05 into 34be878257b9206e02046cb4ab10101e6266cd9f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff123a21fa1e1f1aa139",
    "number": 2213,
    "body": "#2211 **Splat Value \"xx\" has no method 'isArray'**\n\nOpened by @nikita-volkov on **March 22, 2012**\n\nThe problem:\n\n``` bash\ncoffee -bpe '([a...]) ->'\n```\n\nwould throw the following error:\n\n``` bash\nTypeError: Object \nSplat\n  Value \"a\" has no method 'isArray'\n  at Param.names (.../nodes.js:1738:24)\n```\n\nThe solution: A check for `Splat`s in the `Parameter::names` method. If a splat is detected, its base name is added to the array of parameter names.\n",
    "head_branch": "2211-destructed-splats",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c5737764b558fc36b86257a16f4de555d187de4c into 46ff7705eef75e8ea8dc9329f5bf1d32bbfeed26"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff133a21fa1e1f1aa13a",
    "number": 2202,
    "body": "Hello!\n\nThis is just a proof of concept for this idea I had. It's a bit like IcedCoffeeScript, but instead of using async/defer, it uses the `<-` operator to turn sequential code into CPS, just like Haskell. I think it looks \"cleaner\" and fits more with the rest of CoffeeScript, plus, `<-` makes a lot of sense, since it's the opposite of `->` ;)\n\nThis is nowhere as advanced as @maxtaco 's fork, and the code quality isn't that good, but since it's just a proof of concept, here it goes...\n\nSo, it turns this:\n\n```\ntest = ->\n  id = (v,f) ->\n    f(v)\n  a <- id(1)\n  b <- id(a)\n  c <- id(b)\n  console.log(c)\n```\n\nInto this (generated by CoffeeScript):\n\n```\n(function() {\n  var test;\n\n  test = function() {\n    var id;\n    id = function(v, f) {\n      return f(v);\n    };\n    id(1, function(a) {\n      id(a, function(b) {\n        id(b, function(c) {\n          return console.log(c);\n        });\n      });\n    });\n  };\n\n  test();\n\n}).call(this);\n```\n\nAs I said, it's not production-quality code. Particularly, the algorithm that searches and replaces nodes downward on node.coffee is hack-ish and has a lot of duplication (the getSiblings should be on Base), but I wanted to keep it short, so...\n\nOh, you have to rebuild the parser for it to work, btw...\n\nSo, what do you folks think? Yay? Nay? Way too close to monad-land?\n\nThanks!\n",
    "head_branch": "48683760633068a3fe535d4404a9d1146ab50450",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff143a21fa1e1f1aa13b",
    "number": 2187,
    "body": "Returned true when called with non-string identifier argument (like 12)\nReturn true for empty string\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff153a21fa1e1f1aa13c",
    "number": 2177,
    "body": "[#2176](https://github.com/jashkenas/coffee-script/issues/2176) and [#1632](https://github.com/jashkenas/coffee-script/issues/1632)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff153a21fa1e1f1aa13d",
    "number": 2173,
    "body": "Like in Ruby we can now do this:\n\n```\nclass Person\n    attr_reader: [\"sex\"]\n    attr_writer: [\"age\"]\n    attr_accessor: [\"name\"]\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff163a21fa1e1f1aa13e",
    "number": 2147,
    "body": "Because of wrong condition method temporary return same result for index 0 and 1\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff173a21fa1e1f1aa13f",
    "number": 2121,
    "body": "See #2120. @thejh: is this what you wanted?\n",
    "head_branch": "issue2120",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 12d6461bbed0f5c6f2854b1c161cbf52e3365261 into 28a1101b91422c99aebe068ee509b9588498fd4d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dff183a21fa1e1f1aa140",
    "number": 2119,
    "body": "Against current master, given this script as index.coffee:\n\n```\nfork = require('child_process').fork\n\nif process.send?\n  process.send \"Done\"\n  process.exit()\nelse\n  child = fork __filename\n  child.on \"message\", (msg) ->\n    console.log msg\n    process.exit()\n```\n\nwe have:\n\n```\n$ coffee index.coffee\nenv: node: No such file or directory\n```\n\nand:\n\n```\n$ coffee -c index.coffee; node index.js\nDone\n```\n\nThe problem here is that https://github.com/joyent/node/blob/3f43b1c039727e12c7a27fb31010aa309a4a35d8/lib/child_process.js#L209 clears env before spawning a new coffeescript process, and so the shebang in the coffee executable (#!/usr/bin/env node) fails because PATH is unset. This env-clearing behavior in absence of a specified 'env' object is inconsistent with the other child_process methods, so I will file an issue with node to check if this is a bug, but this PR will fix the issue in the meantime.\n",
    "head_branch": "child_process.fork",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff193a21fa1e1f1aa141",
    "number": 2117,
    "body": "Currently, the only mention of heregexes' support for interpolation is in the change log. This feature is useful enough to warrant a mention in the heregex section itself.\n\nI also felt that the heregex section was a bit less clear than it could be, so I slightly reworded it.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2e78508016f4b23d86365b1f4645012395067e5b into bc2ca1ef734da178ab492074f7c9c6229158dc32"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dff1a3a21fa1e1f1aa142",
    "number": 2116,
    "body": "```\ncoffee> (arguments) ->\nSyntaxError: In repl, parameter name \"true\" is not allowed\n```\n\nRoughly the same fix as in #2054.\n",
    "head_branch": "illegal-parameter-name-error-message",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge eb8e20c3efae34f0674ff6abe26d86e99eba23c5 into cb0003d894e5eb327b2e762716536abafe642ccf"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff1b3a21fa1e1f1aa143",
    "number": 2106,
    "body": "Make REPL continuation work better. Check for trailing \"\\\" fails when\nrun function is called with buffer terminated by newline. Chomp'ing\nbuffer to remove newline fixes this issue.\n",
    "head_branch": "issue2105",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge cb0003d894e5eb327b2e762716536abafe642ccf into 13f834856843619e4ace955abef4cc1569b7f29b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff1c3a21fa1e1f1aa144",
    "number": 2102,
    "body": "Was 'interited', changed to 'inherited'. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d6e2ae292ec6dce92ca34c1f7d9b9f369ce0a67a into e42f96b76d92db8e9ea793d5617e531a7f68c2b4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff1d3a21fa1e1f1aa145",
    "number": 2101,
    "body": "A few tiny whitespace fixes.\n",
    "head_branch": "style-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 40a9196c7f9b862ecccc45a327b205c8faac197d into c0dac45fe10cd8cc7bf1bfcf14acbd4e024bd224"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dff1e3a21fa1e1f1aa146",
    "number": 2091,
    "body": "I've added a couple of lines to command.coffee to detect whether or not node is running on Windows so the correct mkdir command is executed. Without this, when using the full file path the build process creates a '-p' folder.\n",
    "head_branch": "windows-mkdir",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff1f3a21fa1e1f1aa147",
    "number": 2087,
    "body": "Hi, Jeremy! I wrote some code on my work. All code was for the browsers and I need to protect classes by packing them into packages. My preparsers was dirty with regexps, but now I decide to make it right and I want to suggest using packages as standart coffeescript tool. By the way thx a lot for coffee, it awesome!\n\nUsage example, this code creates class cafe.dom.Window:\n\n<pre>\n  package \"cafe.dom\"\n\n    class Window\n\n      @getViewPortSize: () ->\n        myWidth = 0\n        myHeight = 0\n\n        if typeof window.innerWidth is 'number'\n          #Non-IE\n          myWidth  = window.innerWidth\n          myHeight = window.innerHeight\n        else if (doc = document.documentElement) and (doc.clientWidth or doc.clientHeight)\n          #IE 6+ in 'standards compliant mode'\n          myWidth  = doc.clientWidth\n          myHeight = doc.clientHeight\n          doc = null\n        else if (body = document.body) and (body.clientWidth or body.clientHeight)\n          #IE 4 compatible\n          myWidth  = body.clientWidth\n          myHeight = body.clientHeight\n\n        return {\n          width : myWidth\n          height: myHeight\n        }\n</pre>\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff1f3a21fa1e1f1aa148",
    "number": 2085,
    "body": "The ultraviolet gem doesn't work with Ruby 1.9, instead we need to use the updated 'spox' versions of these gems: spox-ultraviolet, spox-plist\n\nThis new rake task: \n\n```\nrake install_coffeescript_syntax\n```\n\nloads either the original gems if running Ruby < 1.9 or the 'spox' versions if running on Ruby 1.9.x.\n\nThe task then uses he selected plist gem to generate the ruby object and writes the yaml syntax file directly into the correct location into the selected ultraviolet gem.\n\nIf acceptable this would replace the cake task: `build:ultraviolet`\n",
    "head_branch": "ruby-1-9-generate-coffeescript-syntax",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge deae3e53f5fa2324ed3e4166180a47d28f6c0a44 into f038d0514a7f21705f9d93b7ba9813ed388e7702"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff203a21fa1e1f1aa149",
    "number": 2070,
    "body": "Heyo,\n\nHere's some documentation for default slice indexes. Let me know if you want examples tweaked or anything like that.\n\nThanks,\nMatt\n",
    "head_branch": "slice-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d74c9099301cdecc9e903bb8090b0bedab76df09 into 53fe10e4ada1d452542744d3dc05399563be3d87"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff213a21fa1e1f1aa14a",
    "number": 2062,
    "body": "Heyo.\n\nHere are a couple of small stylistic indentation and whitespace fixes. Thanks.\n\nMatt\n",
    "head_branch": "lint-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f40ba672dbfda8176fbfef4ce410a94ef7000765 into e0ec39704631d77860dd17d1be4dfc806e249fa6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff223a21fa1e1f1aa14b",
    "number": 2061,
    "body": "Disallows uppercase radix prefixes and exponential notation.\n\nI also tweaked the error code for octal literals.\n\n---\n\nUppercase radix prefixes.\n\n``` bash\n$ bin/coffee -bpe '0B0'\nSyntaxError: radix prefixes must be lowercase '0B0' on line 1\n\n$ bin/coffee -bpe '0O0'\nSyntaxError: radix prefixes must be lowercase '0O0' on line 1\n\n$ bin/coffee -bpe '0X0'\nSyntaxError: radix prefixes must be lowercase '0X0' on line 1\n```\n\nUppercase exponential notation.\n\n``` bash\n$ bin/coffee -bpe '0E0'\nSyntaxError: exponential notation must be indicated with a lowercase 'e' on line 1\n```\n\nDeprecated octal literal notation.\n\n``` bash\n$ bin/coffee -bpe '00'\nSyntaxError: octal literals '00' must be prefixed with '0o' on line 1\n```\n\n`0`-prefixed decimals.\n\n``` bash\n$ bin/coffee -bpe '08'\nSyntaxError: decimal literals '08' must not be prefixed with '0' on line 1\n```\n",
    "head_branch": "uppercase_radix_prefixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 34e517de09d86aeba694619f055f4cbcfabe7470 into 8ac440fd52312f3cc0b7737c13a2f0b6943e471d"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dff233a21fa1e1f1aa14c",
    "number": 2058,
    "body": "For example, you can do:\n\n``` coffeescript\npeople =\n  jeff: 1\n  shari: 2\n\nlog people['wesley', 10]\n```\n\nwhich will compile into:\n\n``` javascript\nvar people;\n\npeople = {\n  jeff: 1,\n  shari: 2\n};\n\nlog('wesley' in people ? people['wesley'] : 10);\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff243a21fa1e1f1aa14d",
    "number": 2057,
    "body": "Address's #2054\nOpened by @satyr\n\n`bin/coffee -bpe \"{arguments}\"`\n\nincorrectly resulted in:\n\n```\nSyntaxError: variable name may not be \"true\"\n```\n\n---\n\nFixes error message: 'SyntaxError: variable name may not be \"true\"'\n\nPermits assigning to \"arguments\" and \"eval\" properties in object literals. (`eval` and `arguments` as property names is legal in `strict`.\n\nUpdated tests for destructuring assignments.\n\nThanks @satyr!\n",
    "head_branch": "2054_{arguments}",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c3a8a4f81f4e43cb763697a0567881f764d0a0c1 into 7c56da26f637f82d7e97361252a346afea782393"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff253a21fa1e1f1aa14e",
    "number": 2050,
    "body": "This includes #2000. Fixes #558 for coffee code in node.js that gets compiled on load (apart from string interpolation issues, they have completely wrong positions).\n\nYes, it still isn't perfect and there's a lot of good features it doesn't have yet, and in some cases it doesn't know the source line although that should be possible, but I think this should be merged soon anyway because we're quickly going to get a lot more merge conflicts - many things in nodes.coffee were changed.\n",
    "head_branch": "line-mapping",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff263a21fa1e1f1aa14f",
    "number": 2049,
    "body": "See #1953 and #2048\n",
    "head_branch": "6d69812046942ae8faacdfb7d715b5bb5e51855c",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6d69812046942ae8faacdfb7d715b5bb5e51855c into de8d16f5e722b1f69a9aab291f790277b5357b5d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff273a21fa1e1f1aa150",
    "number": 2048,
    "body": "See #1953\n",
    "head_branch": "beep-on-compile-error",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b4712c6a933b00608066f2f45e465bd81f1046f7 into 3fc4f10248594dab11201e34dbf0df84926e4871"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff283a21fa1e1f1aa151",
    "number": 2038,
    "body": "Hi,\n\nI'm new to CoffeeScript and loving it so far.  You have done a fantastic job!\n\nI think I found a minor typo in the documentation.  I ran the code from your comprehensions section:\n\n```\n   coffee> eat food for food in foods when food isnt 'chocolate'\nTypeError: Property 'eat' of object #<Object> is not a function\n    at evalmachine.<anonymous>:8:45\n    at evalmachine.<anonymous>:11:2\n    at Object.eval (/usr/local/lib/node_modules/coffee-script/lib/coffee-script/coffee-script.js:125:17)\n    at Interface.<anonymous> (/usr/local/lib/node_modules/coffee-script/lib/coffee-script/repl.js:51:34)\n    at Interface.emit (events.js:67:17)\n    at Interface._onLine (readline.js:162:10)\n    at Interface._line (readline.js:426:8)\n    at Interface._ttyWrite (readline.js:603:14)\n    at ReadStream.<anonymous> (readline.js:82:12)\n    at ReadStream.emit (events.js:88:20)\n```\n\nI think the comprehension just needs to be assigned to the `eat` var.\n\n```\ncoffee> eat = food for food in foods when food isnt 'chocolate'\n[ 'broccoli', 'spinach' ]\n```\n\nThanks for making client-side scripting bearable!\n\nChip\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff293a21fa1e1f1aa152",
    "number": 2033,
    "body": "**Original Issue**: #1534 class then 'use strict'\n**Opened by**: @satyr\n**Milestone**: [as soon as a patch is available](https://github.com/jashkenas/coffee-script/issues?milestone=10&state=open)\non July 20, 2011\n\nThe `'use strict'` directive was being displaced inside `Class` bodies:\n\n``` coffeescript\nclass then 'use strict'\n```\n\n``` javascript\n(function() {\n  function _Class() {}\n  'use strict';\n  return _Class;\n})();\n\n```\n\n As `use strict` is only in effect when it is the first line in a function statement/declaration or Global code, this would prevent `strict` from applying.\n\nTies in with #2021 (`use strict`)\n",
    "head_branch": "hoist_strict",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ee9311c025fee2da0e67c3ae371efe1d29a44476 into b6310d03657b172c2b8c6848d883f67fa31edfd0"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dff2a3a21fa1e1f1aa153",
    "number": 2026,
    "body": "It's annoying to have to write `Math.pow` all the time when you're doing mathsy stuff in CoffeeScript, so I've implemented a power operator as `**`.\n\nIt's right associative and has higher precedence than the multiplicative operators (`*`, `/`, `%`)\n",
    "head_branch": "power-operator",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff2b3a21fa1e1f1aa154",
    "number": 2021,
    "body": "I wanted to get the ball rolling on #1547 \"CoffeeScript `use strict`\".\n\nThis patch does not enable `strict` mode. However, it does enforce `strict` mode's \"early errors\". These are sensible constraints that most JS devs adhere to anyway. As anecdotal evidence, almost no existing CoffeeScript compiler code needed to be rewritten to conform to `strict mode`.\n\nEach \"early error\" gets its own discrete patch. Most commits are only a line or two; this isn't as big a change as it may appear. This `pull` is in the early stages of development, and there are surely some edge cases to address and some code to clean up: my intention is to engender discussion on adopting what we can of `strict` mode.\n\nThe following are now considered errors. Links are provided to the relevant commit.\n\n[**7.8.3** Numeric Literals](http://es5.github.com/#x7.8.3)\n\n```\noct = 0121            # octals\n```\n\nCommit 6a44f2c1\n\n[**B.1.2** String Literals](http://es5.github.com/#B.1.2)\n\n```\noctEscSeq = \"\\121\"    # octal escape sequences\n```\n\nCommit 3fb064f2\n\n[**11.1.5** Object Initialiser](http://es5.github.com/#x11.1.5) \n\n```\nx: 1, x: 1            # duplicate prop names in object literal\n```\n\nCommit b74efbf9\n\n[**11.4.1** The delete Operator](http://es5.github.com/#x11.4.1) \n\n```\nx = 1; delete x       # delete var\ndelete undefined      # delete undefined \n(x)-> delete x        # delete function argument \n```\n\nCommit 6bbc5ae7\n\n[**13** Function Definition (13.1 Strict Mode Restrictions)](http://es5.github.com/#x13)\n\n```\n(x,x)->               # duplicate formal param\n```\n\nCommit 6c9ded83\n\n[**7.6.1.2** Future Reserved Words](http://es5.github.com/#x7.6.1.2)\n\n```\nimplements = 1        # assigning to future reserved keyword\ninterface = 1\nlet = 1\npackage = 1\nprivate = 1\nprotected = 1\npublic = 1\nstatic = 1\nyield = 1\n```\n\nCommit 696d8734\n\n**`eval` and `arguments` restrictions**\n\n[**12.14** The try Statement (12.14.1 Strict Mode Restrictions)](http://es5.github.com/#x12.14)\n\n```\ntry e catch eval      # catch identifier eval\ntry e catch arguments # catch identifier arguments\n```\n\n[**13** Function Definition (13.1 Strict Mode Restrictions)](http://es5.github.com/#x13.1)\n\n```\n(eval)->              # identifier \"eval\" in formal params\n(arguments)->         # identifier \"arguments\" in formal params\nclass eval            # function declaration `function eval(){}`\nclass arguments       # function declaration `function arguments(){}`\n```\n\n[**11.13.1** Simple Assignment](http://es5.github.com/#x11.13.1)\n\n```\neval = 1              # assigning to eval\narguments = 1         # assigning to arguments\n```\n\n[**11.3.1** Postfix Increment Operator](http://es5.github.com/#x11.3.1)\n\n```\neval++                # incrementing eval\narguments++           # incrementing arguments\n```\n\nCommit 423f54dc\n\n---\n\nTests a9cfd065\n\n---\n\nThanks!\n",
    "head_branch": "strict",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge bf8e0aa1ea7739f5525eb095de50998236bb7163 into 6e1e77d46d305156b8fa056a2e6fbc0813079239"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dff2b3a21fa1e1f1aa155",
    "number": 2007,
    "body": "The following returns a compile error (Parse error on line 3: Unexpected 'TERMINATOR'):\n\n```\ny = for x in [1,2]\n  foo: \"foo\"\n  bar: \"bar\"\n```\n\nThis works, however:\n\n```\ny = for x in [1,2]\n  null\n  foo: \"foo\"\n  bar: \"bar\"\n```\n\nAnd compiles to:\n\n```\nvar x, y;\n\ny = (function() {\n  var _i, _len, _ref, _results;\n  _ref = [1, 2];\n  _results = [];\n  for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n    x = _ref[_i];\n    null;\n    _results.push({\n      foo: \"foo\",\n      bar: \"bar\"\n    });\n  }\n  return _results;\n})();\n```\n\nI'd expect the first example to convert to the same code, except without the `null` statement in between.\n\nAny idea what might be going on? I'd be happy to attempt to create a patch, but for now I'm not sure where to start.\n",
    "head_branch": "object_literals_in_compr",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 64b0e506093a7098599460daa02f840264696444 into c0dac45fe10cd8cc7bf1bfcf14acbd4e024bd224"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff2c3a21fa1e1f1aa156",
    "number": 2017,
    "body": "Fixes #1896 and #1865.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff2d3a21fa1e1f1aa157",
    "number": 2011,
    "body": "When running `cake` command without parameters, a list of tasks/options should be printed based on current Cakefile. In **v0.4** this is broken:\n\n```\n$ cake\n\nnode.js:134\n        throw e; // process.nextTick error, or 'error' event on first tick\n        ^\nTypeError: Object #<Object> has no method 'relative'\n    at .../node_modules/coffee-script/lib/coffee-script/cake.js:69:35\n...\n```\n\nThe reason for this is that `path.relative` was introduced in **v0.6**. Attached is a suggested workaround.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f98c613ecc4cea9629541f2298974d6b3e0467bd into 642fcbbbfe1326b27f967e332ee948ea7e1bef35"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff2e3a21fa1e1f1aa158",
    "number": 2003,
    "body": "My fix for #2001. Also see #2002, @TrevorBurnham's fix.\n\n**note:** this patch also handles lines ending in `\\` to support continuation\n",
    "head_branch": "issue2001",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8ec3ec54d7e32566420b033afe7c97a57248f5ca into bf8e0aa1ea7739f5525eb095de50998236bb7163"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff2f3a21fa1e1f1aa159",
    "number": 2002,
    "body": "This is a fairly simple patch that allows you to write\n\n```\necho \"console.log 'foo'\" | coffee\n```\n\nand get the output\n\n```\ncoffee> console.log 'foo'\n\nfoo\n```\n\nThis patch isn't ideal; it just passes all of the piped input straight to `CoffeeScript.eval`. Unfortunately, the `readline` module that we're using for the REPL doesn't seem to take anything but a true `stdin`, so there's no easy way that I can think of to allow an arbitrary pipe to interact with the REPL. Still, it's an improvement compared to the error Michael reported at #2001.\n",
    "head_branch": "repl_pipe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff303a21fa1e1f1aa15a",
    "number": 2000,
    "body": "This commit is the first step towards source file mapping. I'm offering it up now in case you want to get it merged in while I figure out the least disruptive way to track the JavaScript source code generation side of things. Also if you'd like it coded a different way now would be a perfect time to find out. :)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff313a21fa1e1f1aa15b",
    "number": 1996,
    "body": "When starting REPL, loads and runs the file `.coffeerc` if present in the current directory.\n",
    "head_branch": "coffeerc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff323a21fa1e1f1aa15c",
    "number": 1995,
    "body": "Addresses #1829\n",
    "head_branch": "1829-repl-scope",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff333a21fa1e1f1aa15d",
    "number": 1975,
    "body": "This simple change makes it easy to implement identity maps (see included tests for example).  Been needing something like this for my work with Backbone recently.\n\nI left external constructors alone for now, as I don't fully understand their purpose as defined by the current test suite (external constructors return their own instances but are expected to behave as the calling class?):\n\n```\n  #1182: external constructors with bound functions \n  TypeError: Cannot call method 'call' of undefined\n    at Function.<anonymous> (/Volumes/HD2/devel/opensource/coffee-script/test/classes.coffee:1042:30)\n    at /Volumes/HD2/devel/opensource/coffee-script/Cakefile:203:12\n    at Object.<anonymous> (/Volumes/HD2/devel/opensource/coffee-script/test/classes.coffee:1007:3)\n    at Object.<anonymous> (/Volumes/HD2/devel/opensource/coffee-script/test/classes.coffee:1232:4)\n    at Module._compile (module.js:432:26)\n    at Object.run (/Volumes/HD2/devel/opensource/coffee-script/lib/coffee-script/coffee-script.js:66:25)\n    at /Volumes/HD2/devel/opensource/coffee-script/Cakefile:271:22\n    at Object.action (/Volumes/HD2/devel/opensource/coffee-script/Cakefile:285:12)\n    at /Volumes/HD2/devel/opensource/coffee-script/lib/coffee-script/cake.js:39:26\n    at Object.run (/Volumes/HD2/devel/opensource/coffee-script/lib/coffee-script/cake.js:62:21) \n  test/classes.js: line unknown, column unknown \n  function () {\n    var A, B, fn, _class;\n    fn = function() {\n      return {\n        one: 1\n      };\n    };\n    B = (function() {\n\n      function B() {\n        var instance = this;\n        return instance;\n      }\n\n      return B;\n\n    })();\n    A = (function() {\n\n      function A() {\n        this.method = __bind(this.method, this);\n        var instance = this;\n        instance = _class.apply(this, arguments);\n        return instance;\n      }\n\n      _class = fn;\n\n      A.prototype.method = function() {\n        return this instanceof A;\n      };\n\n      return A;\n\n    })();\n    return ok((new A).method.call(new B));\n  }\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff343a21fa1e1f1aa15e",
    "number": 1970,
    "body": "I'm not 100% on this, but it seems better than the alternative, which would be to treat the return value of already-defined functions differently when pointed to as an external constructor.\n\n**edit:** I'm pretty comfortable with it now. See my comment below.\n",
    "head_branch": "issue1966",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 080ed2e8dd98bba1bff85dd413fa11f1d4014e92 into c8059a752f2fa954655b90321b9347c764ef7ce7"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff353a21fa1e1f1aa15f",
    "number": 1968,
    "body": "See #1023 and #1967. In command.coffee, we mix `EventEmitter` in to the CoffeeScript object so that we can have compilation events. But compilation events are useful elsewhere, including the browser. This patch adds a tiny (9-line) EventEmitter-alike to the CoffeeScript object and has it emit events from the `compile` function in the same way that it was doing in `command.coffee`.\n",
    "head_branch": "EventEmitter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff363a21fa1e1f1aa160",
    "number": 1967,
    "body": "This patch fires an event with jquery after all coffee scripts are loaded. I would understand if you're opposed to mixing a jqueryism in here, so other ideas on how to notify the world that we're done loading would be awesome.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff363a21fa1e1f1aa161",
    "number": 1964,
    "body": "Replaces botched pull request #1963.\n\nThis patch may feel a bit excessive, but it seems to produce consistent behavior under Coda, TextMate 2, git, and all the other edge cases we've encountered with `fs.watch`. Further testing is very welcome.\n",
    "head_branch": "rewatch2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 65d21766b77ea8cd62886a2896d476016f3ec6b0 into d3f60599e847f771a9f12bbb9fd8abbfc86fdefd"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff373a21fa1e1f1aa162",
    "number": 1963,
    "body": "See discussion at #1853. Somehow, at least one application (the TextMate 2 alpha) is saving files in such a way that a single `change` event is emitted—and then the file no longer emits events, as if it had been deleted. My hunch is that the `change` event is somehow shadowing a `rename` event.\n\nIt's unclear whose bug this really is. Maybe it's something that can be fixed in `fs.watch`? Or maybe TM2 is doing something it shouldn't do? But we can work around it by re-watching files on every `change`, just as we re-watch them on every `rename`. With this patch, `coffee --watch` treats all file events as synonymous, hopefully giving us more consistent behavior.\n",
    "head_branch": "rewatch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff383a21fa1e1f1aa163",
    "number": 1960,
    "body": "I say we go for it.\n",
    "head_branch": "bringingBackExtendedHook",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff393a21fa1e1f1aa164",
    "number": 1959,
    "body": "",
    "head_branch": "issue1910",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge c6c527e83008188b6579ed1bd108994b58733789 into 5b7366583d6a09d9d97ca0fdc2b7a8e90f4bd51c"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dff3a3a21fa1e1f1aa165",
    "number": 1956,
    "body": "Jeremy suggested I add the new course to the list and separate these two sections.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 01e03ae2d864b3fb95b2ab029c876cbde3a95552 into 8a1deee8d8457807603ba07aa4b6960903b3c6ac"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff3b3a21fa1e1f1aa166",
    "number": 1955,
    "body": "Hey there,\n\nThis is a small patch to the grammar to allow both end-points of a slice to be omitted and thus default to the end points of the array. Here's an example:\n\n```\n coffee> x = [1, 2, 3]\n [ 1, 2, 3 ]\n coffee> x[..]\n [ 1, 2, 3 ]\n```\n\nThis patch gives three nice things:\n- Consistency with the existing slice operations, since they allow either end-point to be omitted, but not both (throws an \"Unexpected Index End error\")\n- A nice little idiom for copying arrays.\n- Consistency with other languages slice implementations, like Python.\n\nIf you think it belongs, I'd be more than happy to add an example to the docs. If not, thanks anyway.\n\nMatt\n\nPS - I checked in the lib/*.js files and I'm not sure that makes sense, because I don't think parser.js had been checked in some time and had many unrelated changes. If you want to accept this patch and that's wrong, let me know and I'll clean it up.\n",
    "head_branch": "implicit-slice",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2e06316e31b3bb632d944a5761ed9c56b221ac81 into 0f1dbffa40ba23ea17ec3c98d0d48a8bc4b8f4b6"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff3c3a21fa1e1f1aa167",
    "number": 1953,
    "body": "I fairly regularly fail to notice when an update to my .coffee source has compilation errors, and so end up testing a previous version when I reload in the browser, causing confusion/frustration. This tiny enhancement is aimed to help with that. How do people feel about it?\n",
    "head_branch": "beep-on-compile-error",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ec55335092465fdff76fe026c6b137d5f72dcee3 into 233cd27d70d7853edd7ee5cbcfb66458a7893be2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff3d3a21fa1e1f1aa168",
    "number": 1946,
    "body": "Hey all,\n\nHere's a small patch to add [Travis CI](http://travis-ci.org/) configuration to CoffeeScript. If you haven't been following Travis CI, it's a [continuous integration](http://en.wikipedia.org/wiki/Continuous_integration) service for open source projects. I think CI is a great addition to any software project because it gives you two very valuable things a) a notification whenever you push broken code (happens to everybody sometimes) and b) knowledge of the last working commit, so the search space for finding the cause of bugs is very small and clearly recorded.\n\nYou can see examples of successful and failing builds on my own branch [here](http://travis-ci.org/#!/clutchski/coffee-script/builds). The failing build is just a demonstration. I added a broken test on a branch that isn't included in this request.\n\nAnyway, if you're interested, you'll have to configure your own repository (and whatever branches and notifications you'd like as well). Check out [their docs](http://about.travis-ci.org/docs/user/getting-started) for that.\n\nThanks,\nMatt\n",
    "head_branch": "travis",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff3e3a21fa1e1f1aa169",
    "number": 1944,
    "body": "So, the `fs.watch` API has a problem that forces us to get a little messy: If you try to `fs.watch` a nonexistent file, an error will be thrown. There's no \"async\" version of `fs.watch`. Since there's always a chance that a file will be deleted between a `path.exists` or `fs.stats` call and an `fs.watch` inside of it (in fact, in tests I found that this happened frequently when using tools like git), the only safe fix is to catch those `ENOENT` errors and handle them properly. That's the main thing this patch does.\n\nThe other thing is that it wraps watched file compilation in a timeout that gets reset if the file is modified again within 25ms. That's small enough that the delay shouldn't be noticeable, but large enough to get rid of those annoying duplicate\n\n```\n compiled foo.coffee\n compiled foo.coffee\n```\n\nmessages that happen when a tool blanks the file to 0 length before overwriting it.\n",
    "head_branch": "issue1941",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge dfc602159e236f3d6bff65b4192fa9fcf2aee961 into cda95afd3ee594cbf9079567c7d73b86e87e2734"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff3e3a21fa1e1f1aa16a",
    "number": 1943,
    "body": "Hello all,\n\nThis  patch marks implicit parentheses generated and adds a helper function for marking tokens generated. It's a fall-out from the discussion in issue #1921.\n\nThanks a lot,\nMatt\n",
    "head_branch": "generated",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 347409e354bc12abd649d2ea130b22dd35101957 into 460b5d6edbb80afc4c2e50f79c8eac0f1b5c6fb8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff403a21fa1e1f1aa16b",
    "number": 1942,
    "body": "Here's a first stab at a tame pull request, comments welcome.  See [TAME.md](https://github.com/maxtaco/coffee-script/blob/tame/TAME.md) for more details.\n",
    "head_branch": "tame",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff403a21fa1e1f1aa16c",
    "number": 1938,
    "body": "This is only slightly problematic for the most pathological of cases where a prelude is followed by a set of statements, none of which generate top-level variables or attempt to return. In these cases, the non-prelude statements will be indented. See related discussion at e4b3e838e2f308d5d39eb54361374fb171ef58c9.\n",
    "head_branch": "e4b3e838e",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 38b6a43e267c6953ea5427bcdb2066f77bdf0bc8 into 121009dec4beb4d5d55bbbdc5dd71be758f2b526"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff413a21fa1e1f1aa16d",
    "number": 1927,
    "body": "Hey all,\n\nA small fix for the docs.\n\n```\n> var nodes = CoffeeScript.nodes('1234');\nundefined\n> nodes.traverse\nundefined\n> nodes.traverseChildren\nfunction (a,b){ ...}\n```\n\nMatt\n",
    "head_branch": "traverse-children",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0ad9d4bf1688a35f391c7f6a0c012f44e426eb00 into 621e5648e3ad34b0b47dc9179777428ccc765140"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff423a21fa1e1f1aa16e",
    "number": 1916,
    "body": "which in turns makes coffee-script incompatible with node v0.6.\nthis patch makes it so it should at minimum use any of the latest minor releases of Jison, which _is_ compatible with node v0.6.*\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5debc3c903fe7a39eed869b53fb6b89c6612d066 into 0ce332edcac04abf7f966882e9fe097b5f743c1d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff433a21fa1e1f1aa16f",
    "number": 1912,
    "body": "",
    "head_branch": "issue1896",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff443a21fa1e1f1aa170",
    "number": 1892,
    "body": "I spent some time working on block scope, but found the compilation process too tangled to really do this without spending days reorganizing things. So I'm probably not going to go through with it.\n\nI did spot two tiny bugs in the process, which are fixed by the attached patches.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 26d5c995700ff7c8fd2df9005a09fe467e1217bb into 7d22a011abfeac957994020fd69c562f6bead3b6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff453a21fa1e1f1aa171",
    "number": 1888,
    "body": "This pleasently surprised but also confused me when it worked. Now it's\ndocumented. No example (yet), alas, but better than nothing.\n\nOriginally added in/around 07e66dd2.\n",
    "head_branch": "fat-arrow-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d2c3b79617e55cbe95d89ee0cbbc259f0edc1c52 into 03b8222c9eeeb68c84816418455f561ddb7772b0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff463a21fa1e1f1aa172",
    "number": 1887,
    "body": "This confused me every time I Ctrl+F'ed the home page for \"index\" and only got\nthis cryptic statement:\n\n\"Comprehensions replace (and compile into) for loops, with optional guard clauses\nand the value of the current array index.\"\n\nNow I can see how the index is used in the code.\n\n---\n\nHm, I didn't know how to regenerate index.html? Hope it's OK like this.\n\nOh, and feel free to close this pull request if it's not to your liking, obviously. Perhaps there is a better way to make the index feature more explicit.\n",
    "head_branch": "index-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 57e109ff11cd778a2bc61271025e49db5954758b into 30614c572199e41ba29624944e9c47a8abce9cd7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff473a21fa1e1f1aa173",
    "number": 1868,
    "body": "**Issue**: #1840 Referencing the prototype of a function call results in a TypeError (1.1.3)\n**By**: @hornairs\n**Opened**: November 9, 2011\n**Milestone**: none\n\n**Issue** \n`fn()::prop` would fail to compile. Pull #1590 introduced a regression where the array of `Accessor`s created by `prototype` property access was being inserted into a new array instead of being used as is.\n\n**Solution**\n`Accessors` following invocation are now concat'd to an empty array so that a solitary `Accessor` object or an array of `Accessors` can be acceptable values.\n\nThanks to @TrevorBurnham for bisecting and bringing this to my attention.\n",
    "head_branch": "1840_invocation_prototype_prop_access",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8762e37e583e4a5fc3044e734c174e0351ba9caf into d0b8cded6b1c771331bb18ca1e8d1f5099faf8a7"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff483a21fa1e1f1aa174",
    "number": 1866,
    "body": "On the current master, while using an invalid task name produces a simple message, an invalid option (flag) produces a stack trace, because the exception thrown by `OptionParser` isn't caught (#1862). This pull request corrects that, instead producing, for example:\n\n```\n> cake --help\nNo such option: \"--help\"\n\nTo see a list of all tasks/options, run \"cake\"\n```\n\nThe other thing this patch does is preface the task list with a message like this:\n\n```\nCakefile defines the following tasks:\n```\n\nThis becomes useful when the relevant `Cakefile` is in a parent directory (feature introduced by #1687), as it will then say\n\n```\n../Cakefile defines the following tasks:\n```\n\nmaking things much easier for folks with a hierarchy of `Cakefile`s.\n",
    "head_branch": "issue1862",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 73acfa18a3d3cb49aeba33f598f7d5a7f42978ac into 5bf8b422f80b6a2acceaa268719c7f29a724e1a7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff493a21fa1e1f1aa175",
    "number": 1851,
    "body": "also, declarations with assignment look a little prettier now\n",
    "head_branch": "issue1844",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 496978abdd4fde75f7c6b59177875a16ac3d3dab into fe78e65b16716e46959b64fa2471844670fa0734"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff4a3a21fa1e1f1aa176",
    "number": 1847,
    "body": "Some editors (e.g. Coda) rename temp files rather than directly overwriting files on save; `fs.watch` loses track of the file at that point. This patch makes `fs.watch` re-bind itself on `\"rename\"` events. See discussion at #1803, #1846, and at https://github.com/joyent/node/issues/2062.\n",
    "head_branch": "rewatch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1ce92d1aebedda23078da553e6471e3b47682342 into a2969577718d851263d36e30b2e029f3c15d7c29"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff4a3a21fa1e1f1aa177",
    "number": 1846,
    "body": "This isn't elegant, but at least it doesn't do platform-sniffing. Instead, it:\n- Improves backward compatibility (since it uses `fs.watchFile` under Node 0.4.x),\n- Future-proofs us (in case `fs.watchFile` is removed in a future release), and\n- Allows us to use the less-buggy `fs.watchFile` on non-Windows systems (see [discussion at #1803](https://github.com/jashkenas/coffee-script/issues/1803#issuecomment-2683842))\n\nI've tested that it works on the Mac (detecting saves from Coda and everything); someone else will have to give it a whirl under Windows.\n",
    "head_branch": "issue_1803",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff4b3a21fa1e1f1aa178",
    "number": 1845,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 65930224ee059c4002aecb387778dd2898314a52 into 97d1eedd5a4fe3babd2db0a4838341595be27447"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff4c3a21fa1e1f1aa179",
    "number": 1839,
    "body": "my preferred solution\n",
    "head_branch": "issue1832",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 11544f271737146e38a97d0371076f52949820fa into 74501f643cd54d7ca2d773ebe88ccd191ec79e14"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff4d3a21fa1e1f1aa17a",
    "number": 1837,
    "body": "See discussion at #1803. Someone else needs to test that this actually works under Windows.\n",
    "head_branch": "fs_watch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff4e3a21fa1e1f1aa17b",
    "number": 1826,
    "body": "Hi guys,\n\nThis is a simple patch to enable AMD loading for the browser version of coffee-script.js.\n\nI've tested this in the browser (both included directly and via RequireJS). Just for laughs, I also tested it via the RequireJS r.js Node adapter - it works, though I don't suspect anyone would care as they should probably be using the npm package ;)\n\nI was considering adding this support somewhere other than in the Cakefile build:browser target, but the RequireJS site recommends against letting r.js scan node_modules, instead it just uses standard Node require() calls. Given that CoffeeScript will almost always live in node_modules, I came to the conclusion that AMD support in the standard package is not really that useful.\n\nI couldn't come up with an immediately obvious way to write a test for this, so I didn't write any :)\n\nThanks for your time.\n",
    "head_branch": "amdsupport",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8a41ee95c770ab086ad5daec06fba9da658fe5d3 into 5ae4e06770d4671ddb301c8564308d5496be8078"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dff4f3a21fa1e1f1aa17c",
    "number": 1824,
    "body": "This allows '[' to be preceded by whitespace and still get recognized when following the '::' operator.\n\nIn other words, \n\n```\nArray:: ['isArray']\n```\n\nwill now compile as expected (though I'm not sure I would have expected this!)\n\nI didn't write a test, as I don't know how to do tests for coffeescript.  If you want me to write a test, I can try but I may need some help getting started.\n",
    "head_branch": "fix/issue_1768",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff503a21fa1e1f1aa17d",
    "number": 1823,
    "body": "This commit allows the user to specify an option on the command line (--crlf) that will turn on CRLF line endings for the output of the compile step.  I had a lot of trouble getting things going on windows, so I wasn't really able to run tests to cover this change.  If you want it as is, I'm offering it, as I'm pretty sure you could modify the tests pretty easily (if even needed) to test this feature.  If you'd rather tell me a bit more about how you'd like this commit to look, I'll be happy to go back and get my linux VM set up to compile coffeescript and make the appropriate changes to the tests.\n\nWe needed this change for our usage of coffeescript since we use CRLF throughout our project's JS files and it was giving us fits in git using the CS compiler to compile files that we checkin (stupid core.autocrlf crap in git that I'm pretty sure everyone hates).\n\nAnyway, you're welcome to take this as is, or recommend how I can improve it and I'll try to do so.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff513a21fa1e1f1aa17e",
    "number": 1822,
    "body": "Right now, you're kind of screwed if you need to use async code in a subtask from cake.  This branch adds an extra callback argument to invoke so that you can supply a completion callback to an asynchronous subtask.\n",
    "head_branch": "cake-async",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff523a21fa1e1f1aa17f",
    "number": 1821,
    "body": "depends on the acceptance of the proposal in #1819\n",
    "head_branch": "issue1819",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff533a21fa1e1f1aa180",
    "number": 1820,
    "body": "As discussed at #1494, this pull request allows you to tell `CoffeeScript.compile` that you don't want helpers/utilities like `__hasProp` to show up in the compiled output. That way, if you have a large number of modules that you're compiling for front-end deployment, you can just put the helpers in one file and eliminate them in the other. This was discussed briefly on Twitter today:\n\nhttp://twitter.com/#!/ryanflorence/status/132122428913614849\nhttp://twitter.com/#!/CoffeeScript/status/132156500364894208\nhttp://twitter.com/#!/jashkenas/status/132161592451268608\n\nExample:\n\n```\ncoffee> CoffeeScript.compile 'x in arr', bare: true\n'var __indexOf = Array.prototype.indexOf || function(item) {\\n  for (var i = 0, l = this.length; i < l; i++) {\\n    if (this[i] === item) return i;\\n  }\\n  return -1;\\n};\\n__indexOf.call(arr, x) >= 0;'\ncoffee> CoffeeScript.compile 'x in arr', bare: true, utilities: false\n'__indexOf.call(arr, x) >= 0;'\n```\n\nThis does not affect the `coffee` command. It's purely to give other compilation tools more flexibility.\n",
    "head_branch": "disable_helpers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff543a21fa1e1f1aa181",
    "number": 1808,
    "body": "salary = 50\nname = \"Joe\"\ndept = \"Accounting\"\nemployee = {salary, name, dept}\noutput = \"#{employee.name} works in #{employee.dept}\"\n\nadded to the docs\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff543a21fa1e1f1aa182",
    "number": 1807,
    "body": "Minimal fix, as proposed [here](https://github.com/jashkenas/coffee-script/issues/1798#issuecomment-2505072). Related: previous pull request at #1801.\n",
    "head_branch": "console_io",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c77f7737a5d94a05a999109810ea7634f540e1e2 into 91cb433b66a928ec34ca6521927b0a9a6a9ff4b2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dff553a21fa1e1f1aa183",
    "number": 1801,
    "body": "See discussion at #1798. This may break compatibility with pre-0.4 versions of Node, but our package.json already states that 0.4+ is required.\n",
    "head_branch": "console_io",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 41f2d2f7890c9d68f433b2788f8850b3344547b7 into 64bd4b3f74deb00912c9bb503bf20fe1305b79af"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dff563a21fa1e1f1aa184",
    "number": 1793,
    "body": "The proposal at #1778 seemed to get a favorable reception. Here's an implementation. As discussed:\n- The option is on the `CoffeeScript.compile` function. It's disabled by default.\n- The header is added to all JS files generated with the `coffee` command (`-c`), but not to stdio output (e.g. `-p`).\n\nThoughts? Refinements?\n",
    "head_branch": "header",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 86e4d79ffbed374ad3a4cbb338830e68fb816c0b into 806df9bc1eea4d7d10011c3b4fb848fc1815e0e4"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff573a21fa1e1f1aa185",
    "number": 1789,
    "body": "As discussed at the issue jashkenas/coffee-script#1786\nThis patch enables very beautiful literate programming.\n\nIf it pleases @jashkenas, adding a magic test (instead or in conjunction with the filename test) shall be implemented as well.\n\nUpdate:\nImplemented [magic test](https://github.com/jashkenas/coffee-script/issues/1786#issuecomment-2508130).\n",
    "head_branch": "literate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff583a21fa1e1f1aa186",
    "number": 1788,
    "body": "",
    "head_branch": "issue1721",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff593a21fa1e1f1aa187",
    "number": 1787,
    "body": "As stated on jashkenas/coffee-script#1780, this enables binary notation literals in CoffeeScript as integers.\n",
    "head_branch": "binary",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 620d8ce9edd35f128a580350f3caa45577433586 into 3f4daaf2adea7447bcd35ef13b7d9db8efefe2d4"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dff5a3a21fa1e1f1aa188",
    "number": 1785,
    "body": "Support for binary literals (where, say, 0b100 is like 0x04, as is the case in Ruby, Python, and in a different way Erlang).\nImplements issue jashkenas/coffee-script#1780 non-invasively (which I believe @jashkenas will like) with a single test case, which basically just checks that binary literals are understood as would be integers. And it passes.\n\nIt also implements issue jashkenas/coffee-script#1786 which is to consider all `.literatecoffee` files as literate code. _Very_ literate; and beautiful.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff5b3a21fa1e1f1aa189",
    "number": 1777,
    "body": "This needs a good looking over before it's merged.\n",
    "head_branch": "issue1771",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff5c3a21fa1e1f1aa18a",
    "number": 1776,
    "body": "",
    "head_branch": "issue1772",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff5d3a21fa1e1f1aa18b",
    "number": 1757,
    "body": "There are a few terminal environments that don't support colorized output. This adds a cake flag to output only plain text:\n\n```\nbin/cake --nocolor build \n```\n",
    "head_branch": "nocolor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0ded5b3ff33a9ad73b6efa8e4f65d8e5fe90f3c9 into 054fe344345486bc7b0d95f2a1a89302e14e0386"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dff5e3a21fa1e1f1aa18c",
    "number": 1749,
    "body": "This is a patch that adds JISON line numbers to the node objects.  They can be exported with third party utilities that reference CoffeeScript.nodes.  Example use cases:\n1. Linters\n2. Code analyzers/visualizers.\n3. Editor plugins.\n4. Compiler troubleshooting.\n",
    "head_branch": "0b98dbae2c4920959c6326fed2864454507f3f63",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff5f3a21fa1e1f1aa18d",
    "number": 1745,
    "body": "As requested.  Not sure about a batch file, might be better to get npm working on windows and then get it to automatically generate .BAT files.  (gem does this under windows)\n\nI've just put the instructions at the bottom of the file since they're quite long and would break the flow of the main text.  I've been using this technique successfully for a good week, and I've encountered no problems.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff5f3a21fa1e1f1aa18e",
    "number": 1730,
    "body": "The current format is confusing since it looks like a class but does not use the format for creating classes that was just introduced.\n",
    "head_branch": "function-binding-example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff603a21fa1e1f1aa18f",
    "number": 1729,
    "body": "This makes the change discussed in #1627.\n\n> We should probably make x ?= y and x or= y ... be compile-time errors if x is not present in lexical scope.\n\n```\n$ bin/coffee -bce \"x ?= 2\"\nError: x can't be re-assigned with ?= because it's not defined in lexical scope.\n```\n\n<!-- -->\n\n```\n$ bin/coffee -bce \"x or= 2; x = 10\"\nError: x can't be re-assigned with ||= because it's not defined in lexical scope.\n```\n\n<!-- -->\n\n```\n$ bin/coffee -bce \"x = null; x ?= 2\"\nvar x;\n\nx = null;\n\nif (x == null) x = 2;\n```\n\n<!-- -->\n\n```\n$ bin/coffee -bce \"x = null; (-> x ?= 2)()\"\nvar x;\n\nx = null;\n\n(function() {\n  return x != null ? x : x = 2;\n})();\n```\n\nA few test cases relied upon the old behaviour; I've removed them and added some tests for the new behaviour. \n",
    "head_branch": "fix-conditional-assignment",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3484ca5e646f892aa5e38b8e344fcf09b35c3058 into 6e1e77d46d305156b8fa056a2e6fbc0813079239"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff613a21fa1e1f1aa190",
    "number": 1728,
    "body": "The error message the display for a compile error in Try CoffeeScript isn't very noticeable, and is often cut off because of the lack of room.\n\n![](http://i.stack.imgur.com/vNSy6.png)\n\nThis change displays the compile error in red where the compiled source code would be, and dims the \"Run\" button to indicate that it's disabled.\n\n![](http://i.stack.imgur.com/SrOu9.png)\n\nYou can see this [running on my `gh-pages` branch](http://jeremybanks.github.com/coffee-script/#try:alert%20%22Hello%20CoffeeScript!%22%20invalid).\n",
    "head_branch": "doc-clearer-compile-errors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff623a21fa1e1f1aa191",
    "number": 1719,
    "body": "I wanted to use jQuery's newer features in a linked example, but the CoffeeScript documentation page only includes jQuery 1.4.2. Upgrading to 1.6.4 would be helpful and doesn't break anything. You can [see it in my fork here](http://jeremybanks.github.com/coffee-script/#try_src:inASec%20%3D%20%28x%29%20-%3E%0A%20%20%20%20%23%20returns%20a%20promise%20that%20will%20be%20resolved%20with%20x%20in%20a%20second.%0A%20%20%20%20d%20%3D%20new%20%24.Deferred%0A%20%20%20%20setTimeout%20%28-%3E%20d.resolve%20x%29%2C%201000%0A%20%20%20%20d.promise%28%29%0A%0AinASec%282%29.then%20%28x%29%20-%3E%0A%20%20%20%20alert%20%22Got%20%23%7Bx%7D!%22%0A).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge dd82b15b78b9d9d39c0df8fbe4478bedc5181fd1 into 3d91b109277aaabf36f82511aaaef496047f4826"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff633a21fa1e1f1aa192",
    "number": 1711,
    "body": "(Replacing #1628.) This adds a button to the \"Try CoffeeScript\" interface which is a permalink to the current source code. [Here's an example on my fork](http://jeremybanks.github.com/coffee-script/#try_src:frame%20%3D%20%24%28%22%3Cdiv%20%2F%3E%22%29%0A%0Aframe.text%20%22Making%20API%20request...%22%0Aframe.animate%20%28opacity%3A%200.8%2C%20bottom%3A%200%29%2C%20300%0A%0AapiUrl%20%3D%20%22https%3A%2F%2Fapi.github.com%2Frepos%2Fjashkenas%2Fcoffee-script%2Fpulls%2F1711%3Fcallback%3D%3F%22%0A%0AjQuery.ajax%0A%20%20%20%20url%3A%20apiUrl%0A%20%20%20%20dataType%3A%20%22jsonp%22%0A%20%20%20%20async%3A%20%22async%22%0A%20%20%20%20success%3A%20%28response%29%20-%3E%0A%20%20%20%20%20%20%20%20comments%20%3D%20response.data.comments%0A%20%20%20%20%20%20%20%20frame.animate%20%28opacity%3A%200.0%2C%20right%3A%20%22%2B%3D4em%22%2C%20left%3A%20%22-%3D4em%22%29%2C%20200%0A%20%20%20%20%20%20%20%20frame.queue%20-%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20frame.text%20%22This%20pull%20requests%20has%20%23%7Bcomments%7D%20comments.%22%0A%20%20%20%20%20%20%20%20%20%20%20%20frame.dequeue%28%29%0A%20%20%20%20%20%20%20%20frame.animate%20%28opacity%3A%200.96%2C%20bottom%3A%20%22100px%22%29%2C%20300%0A%20%20%20%20%20%20%20%20frame.animate%20%28left%3A%20%22%2B%3D8em%22%2C%20right%3A%20%22-%3D8em%22%29%2C%205000%0A%20%20%20%20%20%20%20%20frame.animate%20%28opacity%3A%200%2C%20bottom%3A%20%22-1em%22%29%2C%20300%0A%20%20%20%20%20%20%20%20frame.animate%20%28left%3A%20%225em%22%2C%20right%3A%20%225em%22%29%2C%200%0A%20%20%20%20error%3A%20-%3E%0A%20%20%20%20%20%20%20%20frame.text%20%22API%20requst%20failed.%22%0A%20%20%20%20%20%20%20%20frame.animate%20%28opacity%3A%200%29%2C%205000%0A%0Aframe.css%0A%20%20%20%20position%3A%20%22fixed%22%0A%20%20%20%20bottom%3A%20%22-1em%22%0A%20%20%20%20right%3A%20%225em%22%0A%20%20%20%20left%3A%20%225em%22%0A%20%20%20%20textAlign%3A%20%22center%22%0A%20%20%20%20cursor%3A%20%22pointer%22%0A%20%20%20%20opacity%3A%200%0A%20%20%20%20padding%3A%20%22.5em%20.3em%22%0A%20%20%20%20background%3A%20%22%23F8F8F8%22%0A%20%20%20%20zIndex%3A%201000%0A%20%20%20%20border%3A%20%221px%20solid%20%23000%22%0A%20%20%20%20boxShadow%3A%20%220.5px%200.5px%203px%20%23444%22%0A%20%20%20%20fontSize%3A%20%221.7em%22%0A%0Aframe.appendTo%28%22body%22%29).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge de0122dc17290550e901047e289c1efcc329287e into 54110c98d907e3574c2a356f10d3051f969d221d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff643a21fa1e1f1aa193",
    "number": 1697,
    "body": "This patch splits out the Usage section in the website.\n",
    "head_branch": "doc-usage",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b8d60a9cf1ab3d0d8fcd2e884d63cea224017da4 into 69d49e137a1c1b765ffbe6314ac493a72f9b48e8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff653a21fa1e1f1aa194",
    "number": 1696,
    "body": "Please see 97de3a59, which splits out a Usage section in the docs.  Right now the \"Installation and Usage\" section is a bit long, especially considering most folks only need to read about Installation once, but they'll often come back for Usage.\n\nI was not able to run \"rake doc\" to verify the fix, as my Ruby install is kind of broken.\n\nThe first two commits in the pull request should be ignored.  I don't know how to remove these via Github.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff663a21fa1e1f1aa195",
    "number": 1691,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 98cc7eb14973e007e829e639ef0f445d164db5f8 into 0b57b3136c35058dccef6e9e274082cc0d1ce118"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff673a21fa1e1f1aa196",
    "number": 1689,
    "body": "I would expect\n\n```\ncoffee -c myfile.coffee.template\n```\n\nto compile `myfile.coffee.template` into a file named `myfile.js.template`. Currently, it yields `myfile.coffee.js` which is rather pointless. As an alternative, I suppose, one could also let the user specify the output filename.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff683a21fa1e1f1aa197",
    "number": 1687,
    "body": "Might be controversial, but figured I'd put it out there. Rake will crawl look for a Rakefile in parent directories, unless you specify the `-nosearch` flag. Been a decade since I used Make, but I believe it does the same as well. Cake does not.\n\nI'm a CS novice, so apologies for any non-idiomatic code. Happy to make revisions.\n\nWas issue #1686\n",
    "head_branch": "1686_cakefile_parent_dirs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6c98480a1e3cba317da52b66773183db9902a310 into 2d6cda7f32034be4d62b67e4821a97663dec9f58"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff683a21fa1e1f1aa198",
    "number": 1684,
    "body": "Hope this helps to close issue #1509\nhttps://github.com/jashkenas/coffee-script/issues/1509\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff693a21fa1e1f1aa199",
    "number": 1673,
    "body": "Brevity's a pain, but I think this captures the gist of it better.\n",
    "head_branch": "watch-help",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d6ec5e40ccfe5a591769c2edbe6e74212eac8adb into a0d4242da4e8dd7339a0963a4cbb1b3209a103e6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff6a3a21fa1e1f1aa19a",
    "number": 1670,
    "body": "",
    "head_branch": "issue1667",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff6b3a21fa1e1f1aa19b",
    "number": 1666,
    "body": "**Issue**: #1643 Compiler: Destructured Assignment + Splat + Object.key\n**By**: @lwille\n**Opened**: September 1, 2011\n**Milestone**: related to, but not included in [next minor (1.2)](https://github.com/jashkenas/coffee-script/issues?milestone=9&state=open)\n\n**This patch may not be ready to be merged; there's some gnarly tests that could use some review.** (see comments [43a8b46](https://github.com/geraldalewis/coffee-script/commit/43a8b46))\n\nCurrent behavior:\n\n``` coffeescript\n[@a...] = arr\n```\n\n~>\n\n``` javascript\nvar this.a;\nvar __slice = Array.prototype.slice;\nthis.a = 1 <= arr.length ? __slice.call(arr, 0) : [];\n```\n\nNote the `this.a` `var` declaration.\n\nThis patch fixes access within splats in destructuring assignments:  dot access, prototype, index, invocation, w/ parens, @-props, existential and existential invocation.\n\n`o.a...`, `C::a...`, `C::...`, `o[\"a\"]...`, `(o.a)...`, `f().a...`, `(o.a).a...`, `@o.a...`, `o?.a...`, `f?().a...`\n\nThanks to @satyr for the help with the existential stuff :)\n",
    "head_branch": "1643_splatted_access",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 447c3639e7dfda01e0615b15698924e325960278 into ad1bc1e0b858bf58fdd1df38f29915eec65d04de"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dff6c3a21fa1e1f1aa19c",
    "number": 1663,
    "body": "package.json has long said\n\n```\n\"engines\":      {\n  \"node\":       \">=0.2.5\"\n},\n```\n\nbut `repl.coffee` has a `require 'vm'` in it; the vm module didn't exist in 0.2.x, so CoffeeScript has actually required a more recent version for a while (for the REPL, anyway). At any rate, at this point I don't think there's any reason to accomodate versions prior to 0.4.0. Agreed?\n",
    "head_branch": "node_version",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6d68b1f5adfd2be05ad0fdf45e958af8977955dd into c88cb5c8b55341dc1d9a0e008c4578c8c9ac87f4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff6d3a21fa1e1f1aa19d",
    "number": 1662,
    "body": "**Issue**: #1195 Significant last semicolon in a one liner function\n**By**: @OnesimusUnbound\n**Opened**: March 10, 2011\n**Milestone**: [next minor (1.2)](https://github.com/jashkenas/coffee-script/issues?milestone=9&state=open)\n\n**This is a breaking change**\n\n**This is a new patch that supersedes #1650; it uses @jashkenas's suggestion of lexing out the semicolons instead of removing them during the rewrite stage.**\n\nSemicolons before linebreaks and at the end of a program are now ignored.\n\n---\n\n**End of Program**\nThe following code: \n\n``` coffeescript\n-> a;\n```\n\n...will no longer produce an error.\n\n---\n\n**Preceding a Newline**\n\n``` Coffee-Script\n-> a;\nb\n```\n\nwill now compile to:\n\n``` JavaScript\n(function() {\n  return a;\n});\nb;\n```\n\ninstead of:\n\n``` JavaScript\n(function() {\n  a;  return b;\n});\n```\n\nIt should be noted that @michaelficarra sees semicolons differently: as Coffee's `comma` operator.\n",
    "head_branch": "1195_trailing_semicolons",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 49e3a91d6769226e050bf0127a1a4672fb9bcd64 into a8185407fafef4ad6ec8f87cf3c3af822ac128df"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dff6e3a21fa1e1f1aa19e",
    "number": 1661,
    "body": "See #1654. The change here is very simple: Rather than specifically listing the globals we want to preserve on the REPL, we list the ones we want to exclude (which are just references to the \"real\" `global`/`root`). This has no effect on the REPL environment whatsoever except when a user `require`s something that modifies `global`, either with a command or with the `-r` flag.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6bec3726848504540e9919a2ac6f4b70ef8e6287 into d359764fba09272b3fbd4e277d8695f32ebbe78a"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dff6f3a21fa1e1f1aa19f",
    "number": 1659,
    "body": "Hey, \n\nIt was always adding to the root object whereas underscore only does it if modules does not exist.\nI matched what underscore does in coffeescript.\n\nTom \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff703a21fa1e1f1aa1a0",
    "number": 1653,
    "body": "I've splitted the patch in two commits.\nThe magic identifiers base on operator =~, so cannot split them in two pull requests\n\nAdd regexp operator =~\nFor $1 use in grammar.coffee and is valid variable so I decide use \\1 instead.\nThen the varibables are\n__matches(reserved): __matches has the same scope as __bind, it initialize with null and will store the return of method .match\n~ = __matches\n\\& = __matches[0]\n\\1..9 = __matches[1..9]\n\nTest passed\n\n<pre>\n  m = '3-4' =~ /^\\d+-(\\d+)$/\n  ok \\& is '3-4'\n  ok \\1 is '4'\n  ok m is \\~\n  ok m[0] is \\~[0]\n  ok m[1] is \\1\n</pre>\n\n\n<pre>\ndo ->\n  if '3-4' =~ /^\\d+-(\\d+)$/\n    console.info \\~, \\&, \\1\n\n  unless 'abc' =~ /\\d+/\n    console.info true\n</pre>\n\nwill translate to\n\n<pre>\nvar __matches = null;\n(function() {\n  if ((__matches = '3-4'.match(/^\\d+-(\\d+)$/))) {\n    console.info(__matches, __matches[0], __matches[1]);\n  }\n  if (!(__matches = 'abc'.match(/\\d+/))) return console.info(true);\n})();\n</pre>\n",
    "head_branch": "with_regex_splitted",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff713a21fa1e1f1aa1a1",
    "number": 1652,
    "body": "Add regexp operator =~\nFor $1 use in grammar.coffee and is valid variable so I decide use \\1 instead.\nThen the varibables are\n__matches(reserved): __matches has the same scope as __bind, it initialize with null and will store the return of method .match\n~ = __matches\n& = __matches[0]\n\\1..9 = __matches[1..9]\n\nTest passed\n\n<pre>\n  m = '3-4' =~ /^\\d+-(\\d+)$/\n  ok \\& is '3-4'\n  ok \\1 is '4'\n  ok m is \\~\n  ok m[0] is \\~[0]\n  ok m[1] is \\1\n</pre>\n",
    "head_branch": "with_regex",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff723a21fa1e1f1aa1a2",
    "number": 1650,
    "body": "**SEE #1662 FOR THE UPDATED PATCH**\n\n**Issue**: #1195 Significant last semicolon in a one liner function\n**By**: @OnesimusUnbound\n**Opened**: March 10, 2011\n**Milestone**: [next minor (1.2)](https://github.com/jashkenas/coffee-script/issues?milestone=9&state=open)\n\n**This is a breaking change**\n\nSemicolons before linebreaks and at the end of a program are now ignored.\n\n---\n\n**End of Program**\nThe following code: \n\n``` coffeescript\n-> a;\n```\n\n...will no longer produce an error.\n\n---\n\n**Preceding a Newline**\n\n``` Coffee-Script\n-> a;\nb\n```\n\nwill now compile to:\n\n``` JavaScript\n(function() {\n  return a;\n});\nb;\n```\n\ninstead of:\n\n``` JavaScript\n(function() {\n  a;  return b;\n});\n```\n\nIt should be noted that @michaelficarra sees semicolons differently: as Coffee's `comma` operator.\n",
    "head_branch": "semicolon_terminators_1_liners",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff733a21fa1e1f1aa1a3",
    "number": 1649,
    "body": "Hello jashkenas,\nI add two features about string, \none is ruby symbol like style, \n\n<pre>\nconsole.info :hello, :world\n</pre>\n\n\nthe other is super long string supported.\n\n<pre>\nconsole.info &lt;&lt;&lt; one\n  two\n  three\n</pre>\n\nMore about them http://www.jiangmiao.org/blog/2299.html\nAre they helpful and will you consider add them to CoffeeScript?\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff743a21fa1e1f1aa1a4",
    "number": 1647,
    "body": "Adding a link to the change log to the current version area on the webpage, to make it easier to see what's changed.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ee6eccbfe1e8c3b4489d4c3176b81936fa711112 into d37cfc69d90a5ddbb7bb63025bb8406e908faf0e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff743a21fa1e1f1aa1a5",
    "number": 1641,
    "body": "**Issue**: #1591 splatted expressions in destructuring assignment **and** #1101 [f()...] = a\n**By:** @michaelficarra (#1591) @satyr (#1101)\n**Opened**: August 11, 2011\n**Milestone**: [next minor (1.2)](https://github.com/jashkenas/coffee-script/issues?milestone=9&state=open)\n\nExpressions in splatted destructuring assignments weren't being tested for assignability. This patch adds a simple test to ensure the splatted expression is assignable.\n",
    "head_branch": "1591_splats_in_destructuring",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3a6c8c92b344700d131e0f54b1562e342e64cef6 into c0e0ede09f33a205593612615b75ed294a75fa09"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff753a21fa1e1f1aa1a6",
    "number": 1636,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a4425471fd5f51c183d06ca0f8f06c0b1549c2d8 into b4e2240edeb25f979d53cd05aa5f36c1f85b9e68"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff763a21fa1e1f1aa1a7",
    "number": 1634,
    "body": "The following capabilities were added to the --watch option:\n- new coffee scripts are discovered and compiled\n- removed coffee scripts have their corresponding javascript files removed\n- new directories are watched \n- removed directories are removed from the output directory \n- the --join option now works with --watch\n\nNote:  The compileScripts function now uses synchronous file operations. This reduces and simplifies the code. And makes the function usable for --watch updates.\n\nI have only sent a few pull requests so apologies if this isn't done correctly :)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff773a21fa1e1f1aa1a8",
    "number": 1628,
    "body": "This updates `location.hash` as the user types code into **Try CoffeeScript**. The URL be copied and shared with others; when it loads it will open **Try CoffeeScript** and compile the code. [Here's an example in my branch](http://jeremybanks.github.com/coffee-script/#src:%5Bx%2C%20y%2C%20z%5D%20%3D%20%5B1%2C%202%2C%203%5D%0Ado%20%28x%2C%20y%29%20-%3E%0A%20%20%20%20a%20%3D%202%20*%20x%0A%20%20%20%20b%20%3D%204%20*%20z%20%2B%20y%0A%20%20%20%20alert%28a%20%2F%20b%29%0A).\n\nI think can be helpful when explaining short pieces of CoffeeScript to other developers. For example, [I use it in this Stack Overflow post](http://stackoverflow.com/questions/7170446/how-to-write-this-lambda-closure-in-coffeescript/7170504#7170504).\n",
    "head_branch": "gh-pages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d6449d39f5bc5224458aa98a1f7c77f649e53f62 into b02ac3a733058ee2d39350ea978d0fc755804e99"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff783a21fa1e1f1aa1a9",
    "number": 1626,
    "body": "I was hoping to have a --jsonast option added to the command line syntax.  The current output from --nodes is a bit difficult to manipulate for walking the AST in utilities like code visualizers, linters, translators, etc.\n\nThe current patch has the benefit of writing to JSON, but there might be a slightly better canonical form for the AST (i.e. still in JSON, but perhaps with the data structure flattened in some way).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff793a21fa1e1f1aa1aa",
    "number": 1625,
    "body": "Addresses #1535\n",
    "head_branch": "gh-pages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f2c0ea7fa41881afd97e1c37413a08fdd35bc9ea into 216ad777de74cc7e49be0e8c65e42829b0c1a255"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff7a3a21fa1e1f1aa1ab",
    "number": 1624,
    "body": "Resolved an issue that could occur while compiling with the --join option which would cause the compiler to silently fail with no resulting output file.\n\nWhile recursively traversing a source directory, if a directory was encountered containing either no .coffee files (ex. an .svn metadata directory) or where the last file processed in that directory was not a .coffee file, compileJoin() might never be called.\n\nThis issue was originally introduced by a (well-needed) optimization in commit dc272a680bdca83948c5.\n\nIn join mode, anytime the 'unprocessed' count is decremented, the remaining file count should be evaluated to determine if it is time to run compileJoin().  Previously, compileJoin() would only ever be called in one of the four possible terminating branches of this recursive asynchronous operation.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0bf0f6d72164475f1d6e3724848479d877eb8801 into 3ef0c1c88a0e7a478fd098311146b57136814f11"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff7b3a21fa1e1f1aa1ac",
    "number": 1613,
    "body": "The docs appear to contain a small typo in the demonstration of using the existential operator in a chain of method calls.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff7c3a21fa1e1f1aa1ad",
    "number": 1605,
    "body": "**Issue**: #1513 {}?\n**Reported by**: @satyr\n**Milestone**: [1.1.3](https://github.com/jashkenas/coffee-script/issues?milestone=7&state=open)\n_July 14, 2011_\n\nThanks to @satyr for [a hint to the solution](https://github.com/satyr/coco/commit/bcca1c936366fc9bf24849834faf73d44781d3a5) and to @michaelficarra for pointing out the related unary op issue!\n\n**Problem**: The node's `front` property (which ensures bare obj literals are wrapped in parens in the top level) wasn't being copied in existence and unary operations.\n\n**Solution**: Copying `Op`#front and `Existence`#front to their child expressions (except for `chainable` `Op`s; they're already wrapped).\n### Target Compilations\n\nExistence \n\n```\n'{}?'\n({}) != null;\n```\n\nUnary Ops  \n\n```\n'{}.a++'\n({}).a++;\n```\n\nChained Compares  \n\n> An initial solution incorrectly wrapped the initial {} in parens.\n> This has no test case, since compilation output isn't tested:\n\n```\n'{}.a < 10 > {}.b'\n({}.a < 10 && 10 > {}.b);\n```\n\nThe remaining (binary) `Operations` [already compile correctly](https://github.com/jashkenas/coffee-script/blob/7e4d6198d4d85ed9c5be16a6c4043abb2310ed24/src/nodes.coffee#L1331)\n",
    "head_branch": "1513_obj_front_ops",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f3253f4f5c1302bc5dd84f5aa1499b8863f6e016 into 7e4d6198d4d85ed9c5be16a6c4043abb2310ed24"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff7d3a21fa1e1f1aa1ae",
    "number": 1590,
    "body": "**Issue #1234**: Applying a splat to a prototype using :: applies the splat to the wrong object\n**Opened by**: @Dykam\n**Date opened**: March 25, 2011\n**Milestone**: [1.2](https://github.com/jashkenas/coffee-script/issues?milestone=9&state=open)\n\nThanks to @michaelficarra for pointing to a solution and review!\n\nDykam's illustrative code:\n\n```\nA.prototype.method array... # Compiles correctly\nA::method array... # Compiles incorrectly\n\nvar _ref;\n(_ref = A.prototype).method.apply(_ref, array); // Correct\nA.prototype.method.apply(A, array); // Incorrect\n```\n\n**Solution**: Adding an intermediary `prototype` `Access` node between the class and the method within the grammar.\n\nI have some [questions](https://github.com/geraldalewis/coffee-script/commit/29a44b84d541499b121365458ea891ae7018beb8) regarding some possible refinements posted in the `src/` commit.\n\nThis issue ties into a larger issue on how `::` is handled ( with respect to `@` ) -- I will open a new issue that addresses the super-issue within two days.\n",
    "head_branch": "proto_access",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 197d07cc85cf2ac57483b2b4e8932d4e00ad4728 into fa2fbf0c604803c05ca65ca86ffc91a23e484c63"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff7e3a21fa1e1f1aa1af",
    "number": 1587,
    "body": "rebuilt the browser script. Makes the test:browser pass again.\n",
    "head_branch": "rewrite-browser",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff7e3a21fa1e1f1aa1b0",
    "number": 1585,
    "body": "When I run cake build:parser, git winds up showing my parser.js as modified. All tests still pass though. Wondering if this wasn't checked in because of the Cakefile problems\n",
    "head_branch": "parser-mod",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff7f3a21fa1e1f1aa1b1",
    "number": 1584,
    "body": "",
    "head_branch": "grammar_path",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8c5027abb9e72375b163c6295f6f66fceccfbb6f into 064f2b5787bef145a3f656e8205f058dd1d80146"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff803a21fa1e1f1aa1b2",
    "number": 1576,
    "body": "`npm install` in a coffee-script checkout will install uglify-js and jison to the `node_modules` directory to ensure everyone has the same version.\n",
    "head_branch": "dev-dependencies",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d665c3a75fc6d83e302d65bdb3d09bd280ba2fbf into 0ed9be4665cdda816240bf2c207221f5e582b659"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff813a21fa1e1f1aa1b3",
    "number": 1573,
    "body": "**Issue #1464** _Static fat functions don't keep context_\n**Opened by**: @maccman\n**Date opened**: June 24, 2011\n**Milestone**: 1.2\n\nGiven the input:\n\n```\nclass C then @static: =>\n```\n\n... currently compiles to:\n\n```\nvar C;\nvar __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\nC = (function() {\n  function C() {\n    this.C = __bind(this.C, this);\n  }\n  C.static = function() {};\n  return C;\n})();\n```\n\n_note_ that `static` is not `bound` to `C`, and `C` is bound to itself.\nThis patch produces the following output:\n\n```\nvar C;\nvar __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\nC = (function() {\n  function C() {}\n  C.static = __bind(function() {}, C);\n  return C;\n}).call(this);\n```\n\n`static` is now properly bound to `C`.\n",
    "head_branch": "1464_bound_static_methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0e0d625adb098499ffd1fa577aa4130ec1bf29ce into a03f2fe93791da6db70b656a27e33895c12a8482"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff823a21fa1e1f1aa1b4",
    "number": 1572,
    "body": "**Issue #1464** _Static fat functions don't keep context_\n**Opened by**: @maccman\n**Date opened**: June 24, 2011\n**Milestone**: 1.2\n\nGiven the input:\n\n```\nclass C then @static: =>\n```\n\n... currently compiles to:\n\n```\nvar C;\nvar __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\nC = (function() {\n  function C() {\n    this.C = __bind(this.C, this);\n  }\n  C.static = function() {};\n  return C;\n})();\n```\n\n_note_ that `static` is not `bound` to `C`, and `C` is bound to itself.\nThis patch produces the following output:\n\n```\nvar C;\nvar __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\nC = (function() {\n  function C() {}\n  C.static = __bind(function() {}, C);\n  return C;\n}).call(this);\n```\n\n`static` is now properly bound to `C`.\n",
    "head_branch": "1464_bound_static_methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff833a21fa1e1f1aa1b5",
    "number": 1571,
    "body": "this will shorten one of the really long ternaries mentioned in issue 1491\n",
    "head_branch": "fix-ternary",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 15fed8d17f4186debc462432a5dcf39872a67ba0 into 4e71aad124f3a6b3821830d111dab77239c83a4e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff843a21fa1e1f1aa1b6",
    "number": 1566,
    "body": "I know you are hard at work revamping this more than likely but hopefully some of what I have committed is useful. \n\nI modeled the testing after that of Node.js's REPL. It only works via the command line `coffee repl.coffee` in `/test`. \n\nI also added a listener in the REPL itself that looks for `:exit` and does process.exit().\n\nThis does not seem to break anything but...more testing needed?\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff853a21fa1e1f1aa1b7",
    "number": 1543,
    "body": "#1002 identical params (revised)\n\nProposed by @TrevorBurnham \nMilestone 1.1.3\n\nThrows a SyntaxError if two parameters share the same name. As **satyr** points out, this brings CoffeeScript's params in line with use strict under the ES5 spec.\n\n[**Original Pull Request #1531**](https://github.com/jashkenas/coffee-script/pull/1531)\n[_Diff of previous patch and this version_](https://gist.github.com/1104521)\n\n**_Revised**_  \n- eliminated a nested loop (param names are now added to an array, and _then_ that array is checked for dupes). (thanks @jashkenas)\n- simple param names are added to `scope` immediately so that compiler-generated param names don't conflict with user-defined param names. `({},_arg)->` was causing errors in the previous patch since the compiler generating the param name `_arg` for `{}` (thanks @michaelficarra)\n- added more tests\n",
    "head_branch": "1002_identical_params_revised",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff863a21fa1e1f1aa1b8",
    "number": 1542,
    "body": "https://github.com/jashkenas/coffee-script/issues/1541\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 178af9de564f66694ac1d49e6db0fffa7e81b7a2 into 9f89a83c27ea1595044f8ab65585f2c6cd7c1768"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff873a21fa1e1f1aa1b9",
    "number": 1533,
    "body": "Fix for [Issue #1455](https://github.com/jashkenas/coffee-script/issues/1455).  When I first looked at the generated code from the [Class example](http://jashkenas.github.com/coffee-script/#classes) on the website, I couldn't figure out how it wasn't throwing an error.  Explained why it works and how it can be confusing in the issue description.\n\nQuestion: If the patch is accepted, will the class example be automatically updated once the project is rebuilt?\n\n(It's my first time committing so I apologize if I did something incorrectly.  I made changes in a local branch 'fix_1455', then merged with my master, then submitted a pull request as described in the git tutorial found [here](http://www.silverwareconsulting.com/index.cfm/2010/9/15/A-Git-Workflow-for-Open-Source-Collaboration--Part-II--Getting-Started))\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff883a21fa1e1f1aa1ba",
    "number": 1531,
    "body": "#1002 identical params\n\nProposed by @TrevorBurnham \nMilestone 1.1.3\n\nThrows a `SyntaxError` if two parameters share the same name. As @satyr points out, this brings CoffeeScript's params in line with `use strict` under the ES5 spec.\n\nThis patch handles params that are: simple identifiers, @ property params, arrays, objects, splats and assignments. Also tackles some tricky issues, like ensuring compiler-generated param names don't clash with user-defined names `(@case, _case)->` and `({}, _arg)->` (Though I'm waiting for **satyr** to post an amazing one-liner that breaks the patch in ways I'd never imagined... ;)\n\n@michaelficarra I too like your convention of using `_` for placeholder param names that won't be used. I just added more underscores to keep them unique: `(_, __, ___)->`\n\n@jashkenas Thanks for reminding me to use `hasOwnProperty` to check for the existence of names\n\n**michaelficarra** You asked that this patch also bring our code in compliance with the `strict mode` behavior of: `Attempts in strict mode code to define an ObjectLiteral that has multiple data property assignments with the same name`. I'd like to create a separate issue/patch for that if that's okay?\n",
    "head_branch": "1002_identical_params",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff893a21fa1e1f1aa1bb",
    "number": 1527,
    "body": "The fix for this was easy enough:  just add `throw err if err` to `fs.readdir` and `fs.readFile` callbacks.\n\nTo test:\n\n```\ntouch testing.coffee\nchown 000 testing.coffee\ncoffee testing.coffee            # Verify this throws unrelated exception\nbin/coffee testing.coffee       # Verify this throws permission denied exception\n```\n",
    "head_branch": "fix_1446",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2d54fea90c8a63c1a43d64a418d21d578a91c1ed into 37019dab1cc697ba3cafdfbd13aff8db4e3e8711"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff893a21fa1e1f1aa1bc",
    "number": 1526,
    "body": "The fix for this was easy enough.  Just add \"throw err if err\" to the fs.readdir and fs.readFile callbacks.  How to test:\n\n```\ntouch testing.coffee\nchown 000 testing.coffee\ncoffee testing.coffee        # Verify that this throws an unrelated exception\nbin/coffee testing.coffee   # Verify that this throws an appropriate access denied exception\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff8a3a21fa1e1f1aa1bd",
    "number": 1522,
    "body": "Does a simple check to see if, when the file doesn't exist, it also doesn't have a \".coffee\" extension.  If it doesn't, we recursively call compile with the filename + \".coffee\" and see if that file exists.\n",
    "head_branch": "fix_1470",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 479a2e038388ec6d830b1ac25e963f2ebfcf6e0f into 8931e31991abc62c0f1fc94e5b13afc45996f9b2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff8b3a21fa1e1f1aa1be",
    "number": 1521,
    "body": "Not yet done, just opening this to get nice combined diffs and as a placeholder.\n\nExpand the suppressed JS diffs for some compilation examples.\n",
    "head_branch": "annotated_param_lists",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff8c3a21fa1e1f1aa1bf",
    "number": 1518,
    "body": "`args` are removed at 094b876a384bed5504f5.\n",
    "head_branch": "fix_pluckDirectCall",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ecdaad2fd6e9a2174f5b02a840bdbe0f5d94bee6 into c2b32df22b10a3eda3a0f96583b4335f6efb46c1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff8d3a21fa1e1f1aa1c0",
    "number": 1517,
    "body": "In situations like \n\n```\n(0;0)\n```\n\nThe compiled output can have multiple semicolons at the end.  This is because the `Block` node didn't handle the case where it had another `Block` as a child.  Fixed by adding a check for this in `compileNode()` so that we just had the sub-block's compiled code directly to our block instead of treating the block itself as a child.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8a4a28bd3335e0a53a9d814540146e7afe6da46b into 7790df0df6836b1252f1ffea49825bde90efdf93"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dff8e3a21fa1e1f1aa1c1",
    "number": 1516,
    "body": "Currently there is no documentation on http://jashkenas.github.com/coffee-script/ that indicates that you can execute a .coffee file using `coffee file.coffee`. I've been playing with coffeescript for months, and I just discovered it yesterday! There is line that says the `coffee` command can execute scripts, but no examples or any other indication of the most basic form of the coffee command.\n\nThis pull request updates the documentation on the `coffee` command, adds an example of calling `coffee file.coffee`, and adds a section on writing shell scripts in CoffeeScript. Also, a misleading example of using `coffee` is fixed in README.\n\nI'm not including the processed index.html because some syntax highlighting was messed up when I ran ran `rake doc` on my machine. `rake doc` will need to run once this branch is merged.\n\nAnother place that needs to be changed is the help docs when you run `coffee --help`. There is currently no indication there that you can run `coffee file.coffee` to execute a .coffee script. Also, it is not clear there that running `coffee` with no args will launch the REPL.\n\nIt'd be great if someone could update command.coffee to clarify those two cases, but I didn't know the best way to do so myself.\n\nThese changes are based off the master branch since gh-pages seemed to be far behind. If this should be based of another branch, please let me know.\n\nThanks! I appreciate any feedback, clarifications, or questions.\n",
    "head_branch": "document-exec-script",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff8f3a21fa1e1f1aa1c2",
    "number": 1501,
    "body": "Amazing work so far! I was noticing that this example seems to be incorrect, hopefully my proposed change better matches your intentions.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff903a21fa1e1f1aa1c3",
    "number": 1498,
    "body": "As part of my effort to learn the CoffeeScript source code, I thought it would be good to read every line and fix any typos or missing documentation in the comments while I was doing so.\n\nOne problem with this that I can't figure out: take a look at the diff for the built index.html.  My Ultraviolet seems to be screwing up the syntax highlighting code for some of the examples, though if you look in index.html.erb, there are no obvious changes that would cause this.  Has anyone seen this behavior before?\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge eb5367067671051c7e5c559e215c20e668f774fc into cb8e1472123393c9f52fba97b33b5aa6b9d05147"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff913a21fa1e1f1aa1c4",
    "number": 1487,
    "body": "Read [my comment at #1035](https://github.com/jashkenas/coffee-script/issues/1035#issuecomment-1509076) first.\n\nThis patch makes CoffeeScript's REPL behave a bit more like Node's. Node creates the `module` instance for its REPL like so:\n\n```\nvar replModule = new Module('repl');\n```\n\nBeyond that, things get a bit tricky. `require` is actually defined inside of a `module` function and stores an internal reference to `this`; there's no way to get either the `require` function from a `module` or vice versa. Fortunately, `require` is just a one-liner:\n\n```\nfunction require(path) {\n  return Module._load(path, self);\n}\n```\n\nIn this patch, it's reverse-engineered as\n\n```\nsandbox.require = (path) -> Module._load path, sandbox.module\n```\n\nIdeally we wouldn't use Node's internal API, but I don't see a good alternative...\n\nThis patch also\n1. Removes the code duplication between `repl.coffee`'s `run` and `coffee-script.coffee`'s `eval`. Both were defining `sandbox` identically, even though `run` always calls `eval`. With this patch, `run` just sets `sandbox` to `{}`, and `eval` fills in the gaps (currently by testing whether `sandbox.require` is defined).\n2. Makes a few other minor changes to the sandbox for consistency with Node's REPL: `exports` is undefined instead of `{}`, and `__dirname` and `__filename` can be modified.\n\n[**Edit**: The issue described below was fixed by the second commit in the pull request, which further emulates the way `require` is instantiated by Node.]\n\nEverything seems to run smoothly under this patch, with the exception of one notable quirk: Neither `module.paths` nor `require.paths` are defined. However, lines like\n\n```\nrequire 'coffee-script'\n```\n\nrun fine. I'm not sure what's going on there, and being able to modify `require.paths` in the REPL (as it can be in Node's REPL) certainly seems desirable. Further investigation required.\n",
    "head_branch": "repl_module",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff923a21fa1e1f1aa1c5",
    "number": 1480,
    "body": "I have made [a compiler hook adding Scala-like placeholder syntax](https://github.com/taku0/placeholder_syntax_for_coffeescript).\n\nThe hook should have no impact for the existing code, so that I added the `--require` option to the Cakefile to see the hook passes cake build:full.\n\nAdding experimental language features as a plugin would be lightweight than modifing the compiler.  To encourage language experiments, would you merge the commit?\n",
    "head_branch": "cakefile_with_require_option",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff923a21fa1e1f1aa1c6",
    "number": 1476,
    "body": "\"catch e\" should create its own shared scope with e in it.\nCurrent implementation simply add e to current scope.\nHowever, in compiled JavaScript, e is local to catch clause.\nThis mismatch breaks lexical scope of CoffeeScript.\n\nNeither simply adding e to current scope, nor creating non-shared scope passes the following test:\n\n```\ntest \"catch statements should create shared scope with their argument\", ->\n  g = ->\n    try\n    catch e\n    e = 2 # e should local to g\n    try\n      throw \"error\"\n    catch e\n      e = 3 # e should local to catch clause\n      x = 1 # x should local to g, not catch clause\n\n    ok e is 2\n    ok x is 1\n\n  e = 1 # this e should be different to e in g\n  g()\n  ok e is 1\n```\n",
    "head_branch": "catch_clause_create_its_own_scope",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff933a21fa1e1f1aa1c7",
    "number": 1474,
    "body": "because these are also keywords in js, \nwe should make sure they get quoted when \nused as object keys.  There are technically others \nthat arn't actually used but are still reserved,\nbut I am assuming there was a reason for not including\neverything.  If not, then I think _all_ reserved words\nshould be quoted.\n\nsee: http://javascript.crockford.com/survey.html\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff943a21fa1e1f1aa1c8",
    "number": 1460,
    "body": "This fixes --print in combination with --join... I realize join takes a filename... currently --print takes precedence (not saving a file)... but this patch corrects the behavior of print in combination with join.  Previously each iteration thru the loop printed output:\n\n[file1 compiled]\n[file1+file2 compiled]\n[file1+file2+file3 compiled]\n\nThis patch fixes that behavior.\n",
    "head_branch": "fix_print_with_join",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge cd65c66cf9702c0de83d899f34cd71f30270596c into 8fe59ed88837bf3277191756c1953cce66a29674"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff953a21fa1e1f1aa1c9",
    "number": 1458,
    "body": "",
    "head_branch": "issue1150",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6f64fc266d9fcc5bb5129b732b632963b0058e95 into 1d7d8cb4d286292094fdbe8bb45c441974ea3612"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff963a21fa1e1f1aa1ca",
    "number": 1450,
    "body": "This fixes #1416 and adds a test.\n\n```\nnew new f a\n```\n\ncompiles to\n\n```\nnew new f(a);\n```\n",
    "head_branch": "bugfix-1416",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 73af3b17b1344b00cbd85075dd28bf7f4502d440 into e38aeefb5cd0955b15fb5390649db185e882ec94"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff973a21fa1e1f1aa1cb",
    "number": 1448,
    "body": "A little change in the lexer, when an identifier is forced, nothing is a special keyword. See #1436.\n",
    "head_branch": "bugfix-1436",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 969905922688b24cb600ed34208dfd1017897b67 into c93fc3ec7695fd71b264edca873cc26a995c3613"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff983a21fa1e1f1aa1cc",
    "number": 1447,
    "body": "Example:\n\n```\no.scope.parameter v = v.compile o for *v in vars unless splats\n```\n\ninstead of\n\n```\no.scope.parameter vars[i] = v.compile o for v, i in vars unless splats\n```\n\nThe example compiles to this code:\n\n```\nvar _i, _len;\nif (!splats) {\n  for (_i = 0, _len = vars.length; _i < _len; _i++) {\n    o.scope.parameter(vars[_i] = vars[_i].compile(o));\n  }\n}\n```\n\nThe star means that every access and assignment to `v` should be compiled to an array access.\n",
    "head_branch": "loop-var-alias",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff993a21fa1e1f1aa1cd",
    "number": 1426,
    "body": "This one's mostly for @jashkenas. We should be promoting the use of interpolation by including it throughout the documentation.\n",
    "head_branch": "documentationInterpolations",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 47f12c453aaa2b9e2c58aa023f7dde4a2ce1c10e into 54dbc0fdf865d6df71489c95888e530c827b1ed9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff9a3a21fa1e1f1aa1ce",
    "number": 1422,
    "body": "- added single description line in the documentation\n- added code example\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff9b3a21fa1e1f1aa1cf",
    "number": 1421,
    "body": "It makes sense for the body of `Block`s to be compiled as comma-separated expressions because it generates more compressed output than the alternative compilation of an immediately-invoked function expression. But the output is much less readable that way. So I changed the behaviour so that now `Block`s are always treated as statements, resulting in the IIFE compilation every time. This change also resolves a minor side issue where a block within parentheses (such as `(0;0)`) generates consecutive semicolons.\n\nSee the diff, it will explain everything better than I can.\n\nAnyway, I'm not sure if this is an improvement or not yet, so I'd like to hear some opinions. And if the patch is voted down, we should look into some alternative solutions for the minor consecutive semicolon issue.\n",
    "head_branch": "blocksAreStatements",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff9c3a21fa1e1f1aa1d0",
    "number": 1408,
    "body": "`bind` helper now uses native `Function::bind` when it is available and our custom version, supplied for environments without `Function::bind`, is now ES5 compliant with respect to construction (`new`) of bound functions (`=>`)\n\n---\n\nYou may remember that this was on `master` until @jashkenas [decided to take it off](https://github.com/jashkenas/coffee-script/commit/8d6e33c2cf6aedd3a1243b2113d660180b0c647d#commitcomment-404842) without a good alternative for the errant test case and broken bind function.\n\nI don't think we should have bound function literals\n\n```\n=> ...\n```\n\nif they don't behave exactly as\n\n```\n(-> ...).bind(this)\n```\n\nwould in an environment with ES5's `Function::bind`.\n",
    "head_branch": "es5_bind",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff9c3a21fa1e1f1aa1d1",
    "number": 1396,
    "body": "## Debug mode for running .coffee scripts #558, #987\n\nAdds a --debug option for .coffee scripts that outputs more helpful error messages (mapping compiled .js lines of code to the input .coffee file's lines).\n\n**This branch should be considered experimental at the moment -- it serves as a proof-of-concept and to expose additional issues with adding debugging support to CoffeeScript. I.e., don't merge it into master :)**\n\nCurrent output:  \n\n```\nTypeError: string is not a function\n    at String.CALL_NON_FUNCTION (native)\n    at Object.<anonymous> (/Users/geraldlewis/Work/Interactive/projects/coffee-script/errs/err.coffee:10:3)\n    at Module._compile (module.js:420:26)\n    at Object.run (/Users/geraldlewis/Work/Interactive/projects/coffee-script/coffee-script/lib/coffee-script.js:68:12)\n    at /Users/geraldlewis/Work/Interactive/projects/coffee-script/coffee-script/lib/command.js:120:29\n    at /Users/geraldlewis/Work/Interactive/projects/coffee-script/coffee-script/lib/command.js:90:26\n    at [object Object].<anonymous> (fs.js:107:5)\n    at [object Object].emit (events.js:61:17)\n    at afterRead (fs.js:970:12)\n    at wrapper (fs.js:245:17)\n```\n\n--debug Output:  \n\n```\n  TypeError: string is not a function\n\n  in err.js on line 10\n  --------------------\n  > 10 |   s();\n\n  in err.coffee on line 10\n  ------------------------\n   7 | \n   8 | \n   9 | for k,v in [1,2,3]\n> 10 |   s()\n  11 |   try\n  12 |     #log undef\n```\n- Uses a few strategies outlined in #558, namely @atrefz 's `--debug` compiler option with line number comments, @andrewschaaf 's \"FUGLY\" option (though modified so that the end user never sees the ugly JS line number comments)\n- Speaking of, @andrewschaaf has done some great work on this same issue, which I'm having trouble locating at the moment \n- Uses @aseemk 's suggestion for Stylus style error messages (#1351)\n- Also fixes #987 (stack trace refers to [filename].js instead of [filename].coffee)\n\n**Caveats**  \n- only works with node.js at the moment\n- only works for `run`ning and `eval`-ed .coffee scripts (see below)\n- needs **a lot** of testing; I've not tested it with a lot of sample bugs\n\nHere's the branch:\n    https://github.com/geraldalewis/coffee-script/tree/debug\n\nHere's the commit:\n  https://github.com/geraldalewis/coffee-script/commit/9d0fa7cc4d4b73e8de1a0a8179753ba3fa0df1b8\n\n=What works=\n### Running .coffee files\n\n```\nbin/coffee -d ../errs/err.coffee \n\n  TypeError: string is not a function\n\n  in err.js on line 11\n  --------------------\n  > 11 |     s();\n\n  in err.coffee on line 10\n  ------------------------\n   7 | \n   8 | \n   9 | for k,v in [1,2,3]\n> 10 |   s()\n  11 |   try\n  12 |     #log undef\n```\n### Eval\n\n...**Sort of** -- this works:\n\n```\nbin/coffee -bed 'i = 0; undef()'\n```\n\nbut this fails for some reason (some bug in the `DebugCSFile.error`, I think -- seems to happen if < 2 lines of .js)\n\n```\nbin/coffee -bed 'undef()'\n```\n## What doesn't work\n\nThere are a few classes of errors I'm struggling to get debug info from. I have no solutions at the moment, but some ideas below.\n### Errors in CoffeeScript\n\n@jashkenas 's first question to me was what kind of output he'd see if there was an error in `src/scope.coffee`. I inserted a bug into `Scope`'s constructor (a call to `undef()`), recompiled CoffeeScript, and ran coffee -bed 'i = 1'  \n\n```\ndev:coffee-script(debugging)$ coffee -bed 'i = 1'\nReferenceError: undef is not defined\n    at new Scope (/Users/geraldlewis/Work/interactive/projects/coffee-script/coffee-script/lib/scope.js:10:7)\n    ...\n```\n\nClearly, `debug` didn't work -- we have the same `node.js` error message output, instead of the expected:\n\n```\nReferenceError: undef is not defined\n\nin scope.coffee on line 21\n--------------------------\n  19 |constructor: (@parent, @expressions, @method) ->\n> 21 |  undef()\n  22 |  @variables = [{name: 'arguments', type: 'arguments'}]\n```\n\nMy mistake was forgetting that `coffee` uses pre-compiled .js files to run CoffeeScript. `debug` relies on CoffeeScript compiling a .coffee file -- the .coffee file needs to be present so that the executing .js file's line numbers can be mapped to their CoffeeScript source. Since we no longer have a reference to the original `scope.coffee` file, we don't have any way of associating the lines of code where an error occured in `scope.js`.\n\nCompounding the issue: because `debug` needs to re-compile the source .coffee file(s) (to insert the line-number comments mapping the line of .js to its respective line of .coffee) **a bug in the `compile` pipeline is a bug in `debug`**... \n### Possible Solutions\n\n 1) `cake build` ensures a clean, working copy of CoffeeScript is available even if a bug is introduced into its source\n 2) introduce a bug into the source of CoffeeScript\n\n```\n    # in source.coffee\n    constructor: ()->\n      undef()\n```\n\n 3) compile the buggy CoffeeScript via `cake build`\n 4) run a bug-free script to see if an error occurs\n\n```\n    bin/coffee -be 'i = 1'\n```\n\n 5) on error, grab the buggy .js file from the error stack\n\n```\n    at new Scope (coffee-script/lib/scope.js:10:7)\n```\n\n 6) _somehow_ get the .js file's associated .coffee file\n\n```\n    # in scope.js\n    //@source_file:coffee-script/src/scope.coffee\n```\n\n 7) and send it to the _clean working copy of CoffeeScript_\n 7) output that debug message...\n## Docco\n\nDebugging Docco represents a subtly different class of issues than debugging CoffeeScript. Like CoffeeScript, `docco.coffee` has already been compiled to `docco.js` when `bin/docco` `require`s it:  \n\n```\n#!/usr/bin/env node\n\nvar path = require('path');\nvar fs = require('fs');\nvar lib = path.join(path.dirname(fs.realpathSync(__filename)), '../lib');\n\nprocess.ARGV = process.argv = process.argv.slice(2, process.argv.length);\nrequire(lib + '/docco.js'); #completely bypasses the .coffee compilation stage\n```\n\nWe have the same issue -- since we no longer have a reference to the original `.coffee` script, we don't have any way of associating the line of JavaScript code with its originating CoffeeScript line.\n### Possible solutions:\n\n1) `run` `docco` via bin/coffee  \n- modify `command.coffee` `run` to allow args to be sent via \"<\" to the running script if the `-d` option is set:  \n  \n  ```\n  coffee -d src/docco.coffee < src/some_project.coffee\n  # for the `run`ning src/docco.coffee script, process.ARGV would = process.ARGV[2..]\n  ```\n\n2) a `--debugsource` flag (oof?)  \n- not sure how this would work exactly, but some loose ideas:\n- `debugsource` points to the .coffee source file or src/ folder for the running script\n- if an error is encountered in the `node.js` runtime\n- use `process.on 'uncaughtException'` to catch it and save details as \"`stack`\"\n- run `coffee-script.debug ( debugsource, stack ... )` \n- (this recompiles the debugsource so that the CoffeeScript lines can be associated with their JS counterparts )\n  \n    docco --debugsource=src/docco.coffee src/some_project.coffee\n",
    "head_branch": "debug",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff9d3a21fa1e1f1aa1d2",
    "number": 1388,
    "body": "The command-line compiler fails silently with no output when the --join option is specified and the source files specified include directories.\n\nThe current --join handling logic in compile() assumes that the source being compiled is among the explicit list of source files specified for compilation.  When one of those source files is a directory, compile() is called recursively with files that were not among the original explicitly specified list of source files, invalidating that assumption.\n\nThis patch tweaks the compileScript logic to ensure that the recursively read directory content is aggregated and joined, while still preserving the content order of the original source files specified at the command line.\n\nFor instance:\n\n```\ncoffee --join output.js --compile src/Main.coffee src/model/ src/service/\n```\n\nwould join Main.coffee + all .coffee files (recursively) in src/model + all .coffee files (recursively) in src/service/\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 371ff5e726eb0e8699795c75ea10f91cf689b270 into 454aa8433b2bb13b40a443f830be8f9c42ea6af5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff9e3a21fa1e1f1aa1d3",
    "number": 1374,
    "body": "Currently after heregexps the line numbers in the tokens and therefore in the error messages are get broken. The number of lines in the regexps are not taken into account. Not sure if this is the right place to fix it though.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dff9f3a21fa1e1f1aa1d4",
    "number": 1357,
    "body": "Hey Guys,\n\nGreat work on coffee-scrpt, I was playing with cake, which is AWESOME! and added a \"ask\" method to make it easy to prompt for user input, while creating my Cakefiles.  I wanted to go ahead and submit in case you are interested in incorporating the functionality into main code base.  \n\nI would love to write a test and submit, but I am unsure the best way to do it.  I looked for cake tests in the test folder as examples, but could not find any.  Any help would be appreciated.  If you decide not to include this method in the cake file, do you have any suggestions or best practices to writing extensions or plugins for cake to add these type of helper methods.\n\nThanks\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffa03a21fa1e1f1aa1d5",
    "number": 1353,
    "body": "Fixes #1216 and pull #1348 without breaking the semantics. Thanks again :)\n",
    "head_branch": "1216_1348",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge bd8d82809b9f86321897429faa29edb788dffc98 into 6c9ef76b95e15b907d4acc1bbaa749a76a4b6d3b"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffa13a21fa1e1f1aa1d6",
    "number": 1348,
    "body": "Suggested by @michaelficarra March 21, 2011 in issue #1216\n\n`bin/coffee -bpe 'a = 0; a ?= b'`  \n\nwill now compile to:  \n\n```\nvar a;\na = 0;\nif (a == null) {\n  a = b;\n};\n```\n\ninstead of:\n\n```\nvar a;\na = 0;\nif (a != null) {\n  a;\n} else {\n  a = b;\n};\n```\n\nThanks again @michaelficarra :)\n",
    "head_branch": "1216_existential_equals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2212e959ac83a142322a64a807db781bb5648f83 into d4d027159f85293f4378b09174b3edb58a3b733f"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661dffa23a21fa1e1f1aa1d7",
    "number": 1346,
    "body": "Splat scope fixes now on a branch. (original request #1336)\n\nThe only real changes here are in src/nodes.coffee and the two new tests, (everything else is downstream of cake and rake)\n",
    "head_branch": "fixedsplatscope",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 395a97ef07ab2edbf534c27e2a163abe35958620 into 01b0cfc8ab72c05dea8e7198e29e2ed0e78b24c2"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffa33a21fa1e1f1aa1d8",
    "number": 1345,
    "body": "Hi,\n\nsudo bin/cake install doesn't work on my Ubuntu setup.\n\nI've fixed two problems:\n-  My user isn't in the same group as the root user. So the files copied to /usr/local/lib/coffee-script are not accessible to me.\n-  My sudoers has always_set_home and so the coffee-script node module is installed in the inaccessible /home/root/.node_libraries rather than /home/username/.node_libraries [1]\n\nregards,\n--Will\n\n[1] Even ~/.node_libraries isn't necessary readable by all users, so this is fixed as well.\n",
    "head_branch": "dd441b1850619a6738a92c537dc5b8758f0dab8d",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffa43a21fa1e1f1aa1d9",
    "number": 1337,
    "body": "So I can start another one.\n",
    "head_branch": "fix1336",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffa53a21fa1e1f1aa1da",
    "number": 1336,
    "body": "Hi,\n  I just started with coffee script and I came across a bug.  (I'm going to try and convert my projects to it).\n\n<pre>\n# This shows the how the x parameter to oops is improperly scoped by coffeescript\nx = 'x'\noops = (x,args...) -> alert(x)\noops(1,2,3)\nalert(x) # x should be 'x', but now it's 1\n</pre>\n\n\nThis pull request has a test in tests/scope.coffee and a fix in src/nodes.coffee, the other changes\nare all downstream of cake and rake tasks.\n\nThanks!\n              -Adam\n\nP.S. There's a test which fails on my machine, it failed before and it seemed subtle so I didn't attempt it (yet).\nActually, the change which occured to documentation/js/classes.js is probably related (I don't think my change to nodes.coffee is).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffa63a21fa1e1f1aa1db",
    "number": 1330,
    "body": "`by` value is now cached in comprehensions. Tests ensure `by` is cached in `For`'s `compile` method, and `Range`'s `compile` and `compileSimple` methods.\n\nThanks @satyr and @michaelficarra :) Let me know if there's anything I can do to polish it up!\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0e978a0d99130fbe3fbfc2038a87fad8f19ea425 into 4046fcf971ec08642c2ae20c5fc71b57e17d90cb"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffa63a21fa1e1f1aa1dc",
    "number": 1327,
    "body": "This patch resolves #1312 by allowing you to use the command\n\n```\ncoffee -wo lib src\n```\n\nto mean \"watch the files in `src` and recompile them only when changed\" (the behavior of `-cwo` remains the same).\n\nAlso, this patch makes `coffee` quit with an error message when `-w` and `-j` are used together (#1075) rather than just ignoring `-w`.\n",
    "head_branch": "command-flags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffa73a21fa1e1f1aa1dd",
    "number": 1324,
    "body": "No behavior changes here; just replacing 3 lines with 1. `require.main` is apparently the canonical way of getting the main module, even though it isn't currently mentioned in the Node docs. (See https://github.com/joyent/node/issues/997)\n\nAlso changing the variable name from `root` to the less ambiguous `mainModule`.\n",
    "head_branch": "node-modules",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b9d3bc5b441280bc8ae63c0aa25bf7db00ede408 into f3758e4af000381e72a36d3a4450158ca72c8e29"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffa83a21fa1e1f1aa1de",
    "number": 1321,
    "body": "Some quick optimizations.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffa93a21fa1e1f1aa1df",
    "number": 1320,
    "body": "This is one way to solve issue #1313.  We always move the constructor so it appears first, with any \"extend\" second, and then all the prototype additions safely later.\n\nBut this subtly changes some semantics -- see the failing unit test \"variables in constructor bodies are correctly scoped\".  It's not really that we're breaking scope, but we're silently reordering assignments.\n\nI don't see a way to fix the bug without breaking this, but maybe someone else will.\n",
    "head_branch": "constructor_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffaa3a21fa1e1f1aa1e0",
    "number": 1314,
    "body": "Following up on #1309, I thought I'd add some unit tests for `eval`. I noticed that the simple test\n\n```\nok CoffeeScript.eval 'true'\n```\n\nwas failing because without the `bare` option, `eval` was generating the JS\n\n```\n(function() {\n  var _;\n  _ = true;\n}).call(this);\n```\n\nSince it doesn't make sense for `_` to be used that way when it's within the function scope, this patch removes `_` and adds a `return` when the `bare` option isn't set. Also adds a test case. (More `eval` tests to follow, since we don't have any good way of testing the REPL directly yet...)\n",
    "head_branch": "non-bare-eval",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffab3a21fa1e1f1aa1e1",
    "number": 1309,
    "body": "On the current master, `process`, `setInterval`, and several other globals are unavailable (except as `global.process`, `global.setInterval`, etc.). I tracked the cause down to [commit 63ce244359688ac348e9](https://github.com/jashkenas/coffee-script/commit/63ce244359688ac348e95878f0c189e5c331b5ec). (The previous commit had the opposite problem: `process` was available, `global.process` wasn't.)\n\nThe problem is that the REPL runs in the context of an object called `sandbox`, and `sandbox.global` is something else—so `global` isn't the global context. The solution is to make\n\n```\ncoffee> this is global\n```\n\nbe `true`, as it is in the Node REPL. This commit sets `sandbox.global` to `sandbox` itself.\n\nOverall, I'm totally psyched about the new REPL. Thanks for the good work, Michael.\n",
    "head_branch": "sandbox",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 824e0810053e73d289469723dc20ad991f1112ac into a91509ba72b64b63fdc57ff3d6f0a5849a5e8e76"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffac3a21fa1e1f1aa1e2",
    "number": 1308,
    "body": "I've reintroduced an updated version of my original in-order script loading patch and fixed `test.html`. The homepage is functioning as expected, and all the unit tests pass.\n",
    "head_branch": "script-loading",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffad3a21fa1e1f1aa1e3",
    "number": 1307,
    "body": "Issue #1303 set `process.argv[0]` to `coffee`. However, `process.execPath` still gives the absolute path of `node`, not `coffee`. This patch corrects that by using the value of `__filename` from `coffee` as `process.execPath` when running a `.coffee` file.\n",
    "head_branch": "execPath",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge fc992ba380144e33b3af39d3f67ad66e5b582e7e into 5cdf02f840784089aa2e4932f8efd305730d2bb8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffae3a21fa1e1f1aa1e4",
    "number": 1306,
    "body": "The fix introduced by @jashkenas in a91509ba72b64b63fdc57ff3d6f0a5849a5e8e76 solved the issue, but here's an alternative version of my original patch, just in case. The homepage works as expected now.\n",
    "head_branch": "script-loading",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffae3a21fa1e1f1aa1e5",
    "number": 1305,
    "body": "Updated for npm 1.0: the -g option installs to the global npm bin directory.\n\nWithout -g, the bin is created in node-modules/.bin/coffee, which isn't expected to be in the path. This is not equivalent to cake install /usr/local/bin where it installs by default in /usr/local/bin, which is expected to be in the path.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 19036348a5fc4a936cc862ae4806ae8b9d82da36 into 83e7d442fbde2db41eeb8c2d5840331f99a46d72"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffaf3a21fa1e1f1aa1e6",
    "number": 1303,
    "body": "As discussed at #1301 (and several other issues Michael linked to from there), the current behavior of `process.argv` is to preserve `'node'` as the first array value. I wasn't convinced that this mattered when the issue was first raised, but I've since come around. The very **purpose** of `argv` is that it tells you how to run the current program; if you run\n\n```\ncoffee foo.coffee\n```\n\nand `process.argv` is\n\n```\n['node', 'foo.coffee']\n```\n\nthen you can't do that. It's internally inconsistent, and in practical terms, it means you can't use raw `coffee` files with libraries like multi-node (see #1283) and Cluster, which use `process.argv` to fork processes. Granted, it's a good practice to compile to JS before deployment in such an environment, but there are circumstances under which using `coffee` files directly is much more convenient. I see no advantage to the current behavior.\n",
    "head_branch": "argv",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merged fe889b8428597ce2be5b13d75aac265de77b5c33 into a27feb41578a43ca93ceb74c6236646f7fad5a96"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffb03a21fa1e1f1aa1e7",
    "number": 1300,
    "body": "",
    "head_branch": "issue1106",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5cd5821c18c48ce7f5ea7e92b5abda3bba721efe into 7efea4bb23dadebef78a733277ecbf9bd3e58d8a"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffb13a21fa1e1f1aa1e8",
    "number": 1298,
    "body": "Just a small typo in the docs, and a great chance to try out github's new edit functionality, which seemed appropriate to try in this instance.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merged 937f027f3ca8629c12ed5f6509eda7c0ef2b74b4 into da1453829936053f3a69f41fb00fa1a930a02791"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffb23a21fa1e1f1aa1e9",
    "number": 1295,
    "body": "Added a clarification of the meaning of ->, and elaborated on the implications of try/catch being usable as an expression.\n",
    "head_branch": "gh-pages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffb33a21fa1e1f1aa1ea",
    "number": 1292,
    "body": "The standalone script combines all the coffee-script sources into a single file\nand so allows easier deployment.\n",
    "head_branch": "standalone-script",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffb43a21fa1e1f1aa1eb",
    "number": 1285,
    "body": "Including a warning related to Oniguruma dependency with native development library.\n\nBecause building the docs should be a snap, and loosing time digging for the exact missing OS dev library sucks ;)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffb53a21fa1e1f1aa1ec",
    "number": 1277,
    "body": "Apart from enforcing execution order for scripts loaded asynchronously, I've also cleaned up and rewritten `browser.coffee`:\n- The code no longer terminates early if a global `window` object is not present. Instead, the necessary browser features are detected and used if available.\n- An internal `create` function has been added to create a new `XMLHttpRequest` object in Internet Explorer and W3C-compliant browsers.\n- `CoffeeScript.load` now accepts an optional `callback` function with two arguments: an error object if the script could not be loaded or failed to run, and the result of executing the script using `CoffeeScript.run`.\n- The internal `runScripts` function now enforces execution order for external scripts.\n",
    "head_branch": "execution-order",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffb63a21fa1e1f1aa1ed",
    "number": 1272,
    "body": "Provide this.constructor.name for environments where it's not automatically defined.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffb73a21fa1e1f1aa1ee",
    "number": 1268,
    "body": "",
    "head_branch": "issue1266",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffb83a21fa1e1f1aa1ef",
    "number": 1248,
    "body": "Hello,\nthis fixes #1124 and uglifies the generated code a little bit.\n",
    "head_branch": "bugfix-1124",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffb93a21fa1e1f1aa1f0",
    "number": 1245,
    "body": "fixes #1157: when compiling multiple scripts, compile them if at least one of them isn't empty\n",
    "head_branch": "bugfix-1157",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffb93a21fa1e1f1aa1f1",
    "number": 1243,
    "body": "As mentioned by @satyr in #1108: `[v] = a ? b` must compile to\n    v = (typeof a != \"undefined\" && a !== null ? a : b)[0]\nand not to:\n    v = typeof a != \"undefined\" && a !== null ? a : b[0]\n",
    "head_branch": "bugfix-1108",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffba3a21fa1e1f1aa1f2",
    "number": 1242,
    "body": "See issue #1099: Compile `a in []` to `false` instead of an empty string (which is wrong syntax).\n",
    "head_branch": "bugfix-1099",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffbb3a21fa1e1f1aa1f3",
    "number": 1233,
    "body": "Node v0.4 added a bunch of magic to automatically require packages from `node_modules` directories.\n\nDue to the way `CoffeeScript.run` evals files, it doesn't work correctly for interpreted code. Everything works as expected if you just compile and run the pure `.js`.\n\n```\n# paths.js\nconsole.log(module.paths)\n\n$ node paths.js\n[ '/Users/josh/Desktop/node_modules',\n  '/Users/josh/node_modules',\n  '/Users/node_modules',\n  '/node_modules' ]\n```\n\n`module.paths` is correctly set to the current directory's `node_modules` hierarchy.\n\nBut if you try the same on a coffee file,\n\n```\n# paths.coffee\nconsole.log module.paths\n\n$ coffee paths.coffee\n[ '/usr/local/lib/node_modules/coffee-script/bin/node_modules',\n  '/usr/local/lib/node_modules/coffee-script/node_modules',\n  '/usr/local/lib/node_modules' ]\n```\n\nThe paths are relative to the `coffee` binary rather than the file you are executing.\n\nThis affects `Cakefile`s as well.\n\nThe fix is to mimic node's `Module.load` more accurately. [Module.prototype.load](https://github.com/joyent/node/blob/master/lib/module.js#L335) definition.\n",
    "head_branch": "module-loading",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffbc3a21fa1e1f1aa1f4",
    "number": 1228,
    "body": "Basic idea: When we can have multidimensional arrays (like `fields[row][column]`), we should also be able to easily loop through them:\n\n``` coffee\n    for field, column, row in fields\n      console.log \"(#{row}|#{column}) has value #{field}\"\n```\n\nThe old way for this is (or at least that's how I always did it):\n\n``` coffee\n    for row, rowid in fields\n      for field, columnid in row\n        console.log \"(#{rowid}|#{columnid}) has value #{field}\"\n```\n\n_(edit: corrected that example, thanks michaelficarra)_\n\nAnother example (from the testcase):\n\n``` coffee\n    cells = [[0,1],[3,4]]\n    cellsIncreased = (cell+1 for cell, y, x in cells)\n```\n\n`cellsIncreased` is `[[1,2],[4,5]]` now\n\nThe syntax is:\n\n``` coffee\n    for <name>, <lastindex>, ..., <secondindex>, <firstindex> in <array>\n```\n",
    "head_branch": "multidimensional-loops",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffbd3a21fa1e1f1aa1f5",
    "number": 1227,
    "body": "Hello,\nthese commits add the possibility to specify defaults for object unpacking. The syntax is:\n    {<key>[ or <default>][: <variable>]}\nIf the value inside the object is null or undefined, the default is used instead.\nSome examples:\n    {a||2} = list\ncompiles to\n    a = (_ref = list.a) != null ? _ref : 2\nand\n    {a: {x||0, y||0}, b||3: bar} = list\ncompiles to\n    _ref = list.a, x = (_ref2 = _ref.x) != null ? _ref2 : 0, y = (_ref3 = _ref.y) != null ? _ref3 : 0, bar = (_ref4 = list.b) != null ? _ref4 : 3\n",
    "head_branch": "unpack-defaults-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffbe3a21fa1e1f1aa1f6",
    "number": 1224,
    "body": "nothing major\n",
    "head_branch": "improvedRangeCompilation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffbf3a21fa1e1f1aa1f7",
    "number": 1200,
    "body": "Function arguments declared as splats, e.g. `-> (splat...)` do not get declared with `var` in the compiled function body if the parent scope contains a binding for that name. This means that invoking a function with splat args can clobber variables in the parent scope.\n\nThis patch fixes this, though I'd like feedback on whether I'm using the internal API properly -- I've only just started using Coffee.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffc03a21fa1e1f1aa1f8",
    "number": 1171,
    "body": "Simply because I thought the statement in bug #1170 was particularly interesting, I took it upon myself to document it in some way. This might not be the right place or optimal wording, but by making a patch I'm assuming that if it's not then someone will at least be irritated enough to document it the right way. ^_^\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffc13a21fa1e1f1aa1f9",
    "number": 1137,
    "body": "Two additions to the resource list in this patch to the documentation ERB. (I couldn't get the doc build to work on my system—my apologies.)\n\nOf course, it may be high time the resources section of CoffeeScript.org get moved to the wiki, for easier maintenance and what-not. Couldn't hurt to sort the resources into subcategories, maybe alphabetize them... What do y'all think?\n",
    "head_branch": "stable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffc23a21fa1e1f1aa1fa",
    "number": 1130,
    "body": "these commits add some metadata that will show up as links on the npm site; using http://search.npmjs.org/#/q as an example, the two github links at the top are added by the homepage and repo metadata.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffc33a21fa1e1f1aa1fb",
    "number": 1127,
    "body": "How about Cmd-Enter as a shortcut for Run? And Escape to dismiss?\n",
    "head_branch": "keyboard",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffc33a21fa1e1f1aa1fc",
    "number": 1126,
    "body": "",
    "head_branch": "gh-pages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffc43a21fa1e1f1aa1fd",
    "number": 1092,
    "body": "This is a fix for [issue 1087](https://github.com/jashkenas/coffee-script/issues/1087).\n\nQuite simply, `process.argv[1]` should equal `__filename` (the name of the script being run); but currently, only `__filename` is being set. So if you run `coffee foo.coffee`, then `__filename` is `foo.coffee` but `process.argv[1]` is the location of `coffee`. With this patch, `process.argv[1]` should always equal `__filename`.\n\nThis makes the behavior of\n\n```\ncoffee foo.coffee\n```\n\nmore consistent with that of\n\n```\ncoffee -c foo.coffee\nnode foo.js\n```\n",
    "head_branch": "process_filename",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffc53a21fa1e1f1aa1fe",
    "number": 1074,
    "body": "Scratching my own itch, the coffee-script repl breaks in node v0.3.6 (current latest). The readline interface now expects (in, out, complete), where the coffee-script repl passes (stdio, complete). This leads to a broken repl. I patched this in my fork.\n\nThis is untested in prior versions of Node. Since readline isn't even documented on the Node.js website, I'm guessing the API is a moving target, so it may not be worth pulling this in. But if you like, here it is.\n",
    "head_branch": "readline0.3.6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffc63a21fa1e1f1aa1ff",
    "number": 1061,
    "body": "Modifies AST by moving values from within implicit objects to surrounding function call.\n\nFixes: jashkenas#618\nRelated: jashkenas#1008 jashkenas#873 jashkenas#631\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffc73a21fa1e1f1aa200",
    "number": 1059,
    "body": "Removed dependency on the `util` module so that coffee-script will work on node version 0.2.5.\n",
    "head_branch": "1.0-stable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffc83a21fa1e1f1aa201",
    "number": 1058,
    "body": "See [issue 1054](https://github.com/jashkenas/coffee-script/issues/issue/1054/) for a description of the problem. This patch ensures that CoffeeScript runs in the order in which the `<script type=\"text/coffeescript\">` tags occur.\n\nIt does not attempt to do anything with respect to the order of mixed JavaScript and CoffeeScript; generally, all JavaScript will run before any CoffeeScript runs. It would be ideal to be able to mix JavaScript and CoffeeScript in any order, but to my knowledge, there's no way to use one script to prevent a later `<script type=\"text/javascript\">` tag from being evaluated.\n",
    "head_branch": "browserorder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffc93a21fa1e1f1aa202",
    "number": 1053,
    "body": "",
    "head_branch": "issue1050",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffca3a21fa1e1f1aa203",
    "number": 1045,
    "body": "Currently, `coffee -r \"./foo.coffee\"` (in conjunction with `-e` or `-c`) will `require` foo.coffee each time a file is compiled. In addition to the obvious inefficiency, there's a loss of functionality: You can't use the flag to require a file before entering the REPL.\n\nThis patch fixes that; `coffee -r \"./foo.coffee\"` now requires `foo.coffee` and then enters the REPL. It also (temporarily) changes `module.filename` before doing the `require`; it feels a little kludgy, but it means that you can write\n\n```\ncoffee -epr ./ext '1 + 1'\n```\n\ninstead of having to specify `./ext.coffee` or `./ext.js`, thus better mirroring the `require` syntax.\n",
    "head_branch": "requirecommand",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffcb3a21fa1e1f1aa204",
    "number": 1037,
    "body": "Since undefined == null and null == null, but everything else != null, I think the simplification should work.\n\nIt passes all the tests, too.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffcc3a21fa1e1f1aa205",
    "number": 1031,
    "body": "",
    "head_branch": "cmdline",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffcc3a21fa1e1f1aa206",
    "number": 1030,
    "body": "Enhances cake to handle asynchronous operations. See test/Cakefile\n- Asynchronous tasks via optional second parameter\n      task 'foo', (options, done) -> done()\n- Invoke multiple targets with optional callback\n      invoke 'foo', 'bar', 'baz', -> \n        beCool()\n",
    "head_branch": "cake-async-deps",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffcd3a21fa1e1f1aa207",
    "number": 1022,
    "body": "Addresses #1014 https://github.com/jashkenas/coffee-script/issues/#issue/1014 **\"`arguments` in ranged array bug\"** @satyr  dug up:\n\n```\nseq = -> [1..arguments[0]]\nconsole.log seq 3\n[] # returns an empty array instead of the expected [ 1, 2, 3 ]\n```\n\nThe above code should have output `[ 1, 2, 3 ]`, not an empty array.\n\nThe issue was that `arguments` weren't being sent to the lambda that wrapped the array. I just edited `nodes.coffee > compileArray` method to output `apply(this,arguments)` instead of `call(this)`\n\nThanks Michael :)\n",
    "head_branch": "issue#1014",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffce3a21fa1e1f1aa208",
    "number": 1021,
    "body": "",
    "head_branch": "issue1011",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffcf3a21fa1e1f1aa209",
    "number": 1016,
    "body": "Provides a convenient and readable syntax for specifying that tasks rely on the completion of other tasks. Use it as the action in a task definition.\n\n```\n task 'pre-build', 'Performs some common pre-build tasks', ->\n   Pre-build stuff\n\n task 'build', 'Builds the project', dependsOn 'pre-build', ->\n   Build stuff\n\n task 'test:db:clean', 'Cleans the test database.', ->\n   Some cool stuff here that truncates tables\n\n task 'test', 'Runs the tests in the project.',\n dependsOn: 'build', 'test:db:clean', ->\n   Run the tests, buddy!\n```\n\nI guess the only file that I _really_ changed is _cake.coffee_, but I generated the _cake.js_ and _cake.html_ files, as well, because they existed already in the repository.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffd03a21fa1e1f1aa20a",
    "number": 1014,
    "body": "Addresses #1012 https://github.com/jashkenas/coffee-script/issues/#issue/1012 **\"`arguments` in ranged array bug\"** @satyr  dug up:\n\n```\nseq = -> [1..arguments[0]]\nconsole.log seq 3\n[] # returns an empty array instead of the expected [ 1, 2, 3 ]\n```\n\nThe above code should have output `[ 1, 2, 3 ]`, not an empty array.\n\nThe issue was that `arguments` weren't being sent to the lambda that wrapped the array. I just edited `nodes.coffee > compileArray` method to output `apply(this,arguments)` instead of `call(this)`\n\nThis is my first patch to CoffeeScript (actually, to any project); hope I'm doing this alright :)\n\nI've tested that this patch outputs the expected `[ 1, 2, 3 ]`, and that it passes the test suite, but no more beyond that.\n\nThanks!\n",
    "head_branch": "array_with_arguments",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffd13a21fa1e1f1aa20b",
    "number": 1010,
    "body": "Performed the massive reorganization detailed here: https://spreadsheets.google.com/pub?key=0ArUxs4h7Xd-ydHFDcHJCWkdXb0otWXNZLUtUSllzN1E&hl=en&gid=9 . `current` is the way things _were_, `proposed` is the new organization.\n\nAlso did some refactoring along the way.\n\n`grep -r TODO test` should show everything that's left for the test refactoring. Some of them are big, some are tiny.\n",
    "head_branch": "refactorTests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffd23a21fa1e1f1aa20c",
    "number": 1000,
    "body": "Hi again,\n\nHere's two commits to improve the documentation a little.  I can't install ultraviolet because oniguruma is not compatible with Ruby 1.9, so I haven't regenerated index.html from the erb source; you may want to amend the second commit.  Sorry!\n\nJo\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffd33a21fa1e1f1aa20d",
    "number": 990,
    "body": "This is my take on jashkenas/coffee-script#975. It seems to be working, but I had a hard time writing tests for it (the most interesting part – completing local variables – is not tested at all). I would appreciate any ideas on how to make the tests and the code better.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffd43a21fa1e1f1aa20e",
    "number": 972,
    "body": "Congrats on version 1.0.0!  Here's a patch to improve \"bin/cake install\":\n\n```\nCakefile: install verbosely; symlink with ln -n\n\nWithout the -n option, ln will place a symlink inside the\n~/.node_libraries/coffee-script directory if it exists already, rather\nthan overwriting the existing symlink.\n```\n\nI think installing verbosely is more common, and I personally like it a lot better if I can see where my stuff gets installed.\n\nI thought about interspersing the commands with\n\n```\n\"echo --- Installing CoffeeScript to #{lib} ---\"\n\"echo --- Linking binaries into #{bin} ---\"\n\"echo --- Linking library into #{node} ---\"\n```\n\nbut since the verbose output of mkdir, cp and ln might go to either stdout or stderr (you never know), we can't be sure that the echo output actually intersperses properly (unless we do 2>&1 redirects, but that's too cute).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffd53a21fa1e1f1aa20f",
    "number": 955,
    "body": "- parser.js build with npm's latest jison (0.2.0)\n- All tests pass: <code>cake build && cake build:parser && cake build:full</code>\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffd63a21fa1e1f1aa210",
    "number": 953,
    "body": "This small commit allows for one to use the `--nodejs` argument of coffee more than once. This allows one to alias coffee as `coffee --node --debug` and still pass the alias additional node arguments through the use of additional `--nodejs` flags: `coffee-alias --nodejs \"--whatever-node -wants\"`. This also allows one to pass separate node arguments in separate, unquoted coffee arguments rather than quoting them and concatenating them together. This makes it easier for automated programs to call a list of node arguments.\n\nMore justification:\n- `coffee -b -b` sets `-b` flag twice -- no unintended consequences from using the flag more than once\n- `coffee -o ~ -o .` sets `output` flag twice, allowing one to specify default output dir in an alias and override it on specific command-line invocations\n",
    "head_branch": "issue910",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffd63a21fa1e1f1aa211",
    "number": 952,
    "body": "As I mentioned in issue #928, using an implicit object in a function call puts the parser in a weird state:\n\n```\nfoo\n  bar: 'bar'\n  baz: 'baz'\n  (x) -> x\n```\n\nProduces:\n    foo({\n      bar: 'bar',\n      baz: 'baz'\n    });\n    (function(x) {\n      return x;\n    });\n\nWhich should produce the following or give an indent error:\n    foo({\n      bar: 'bar',\n      baz: 'baz'\n    }, function(x) {\n      return x;\n    });\n\nI think the condition modified here is to handle an OUDENT token but the token is redundantly handled in line 134 but I don't have a really firm grasp on the code flow. This does pass all tests in the suite and all the edge cases I could come up with last night when trying to figure out why this condition was there.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffd73a21fa1e1f1aa212",
    "number": 951,
    "body": "coffee-script 0.9.6 unpacks to 8.7M! Looks like a ton of docs and nonessential files are being packaged.\n\nThis ignore config brings the package down to 336K.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffd83a21fa1e1f1aa213",
    "number": 945,
    "body": "Usage as follows: `coffee --print -e --node \"--debug -v --whatever\" --lint -b`\n\n`--node` argument takes a string containing an argument list to be passed to node and can be placed anywhere in coffee's argument list.\n\nDocumentation will have to be written, I have neither the time nor the patience for that right now.\n",
    "head_branch": "issue910",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffd93a21fa1e1f1aa214",
    "number": 939,
    "body": "See #911 for a description of what this is. Please look over it if you have time before _jashkenas_ pulls it this afternoon. I want to try to get as many eyes on it as possible.\n\nThis also closes #930.\n",
    "head_branch": "refactorTests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffda3a21fa1e1f1aa215",
    "number": 919,
    "body": "changes the examples so that they use a variation of the \"twilight\" colours\n\nalso, updated the look of the minibuttons a little\n\nscreenshots:\n- http://i.imgur.com/BdAr8.png\n- http://i.imgur.com/jBwNv.png\n- http://i.imgur.com/rYQTm.png\n",
    "head_branch": "websiteSyntaxHighlighting",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffdb3a21fa1e1f1aa216",
    "number": 913,
    "body": "Background: [issue 632](https://github.com/jashkenas/coffee-script/issues/issue/632) (raised again independently as [issue 857](https://github.com/jashkenas/coffee-script/issues/issue/857)).\n\nI see this as a \"why not?\" feature addition; a handful of folks really want it, and it won't affect anyone else, except to the extend that they might have to figure out what `1_000` means when reading someone else's code (a question immediately answered by the JavaScript output). Let's get it in before 1.0.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffdc3a21fa1e1f1aa217",
    "number": 911,
    "body": "I'm in the process of some general refactoring of the test suite. This includes organizing, documenting, formatting, and standardizing. I've completed 6 files so far. These can be pulled at any time, whenever we feel they are polished. The pull request can be left open, as it will automatically gather any new commits I make. Discussion and critiques in this thread are welcome (read: encouraged).\n\nA rough list of goals:\n- comment every test (can be more than one assertion per test, that's fine)\n- list issue numbers next to regression tests associated with particular issues (could use some help with this one)\n- use simple variable names\n- make use of a nonce where applicable to test that the same reference is returned rather than the same value\n- when not applicable, test using the simplest values possible (remove `\"orange\"`, `1.23e-4`,`throw \"up\"`)\n- use closures to indicate scope of a test's local variables and stop tests from bleeding into each other\n- group related tests\n- organize groups/tests in a meaningful way\n- use `eq` over `ok` when equality is being tested\n- when expecting a certain value, state what is expected before the value (`eq expected, actual`)\n- rename files (removing unnecessary `test_` prefix)\n- make sure tests are rigorous, adding new ones if necessary (already added 125!)\n- make sure all CS features are tested (this is a tough one, could use some help with this one too)\n- above all, be _consistent_; spacing, naming, **everything**\n- get everything done before 1.0 (24 Dec 2010)\n",
    "head_branch": "refactorTests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffdd3a21fa1e1f1aa218",
    "number": 909,
    "body": "... for now. I still need someone more knowledgeable than myself to take a look at line 1232 of `src/nodes.coffee` and come up with the right logic for stripping parens... or figure out how to not generate them in the first place. But for now this fixes that issue. If a similar issue comes up, line 1232 can be removed entirely and we can just deal with extra parens floating around.\n",
    "head_branch": "issue908",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffde3a21fa1e1f1aa219",
    "number": 906,
    "body": "An implicit cast of +\" + 1\" was being done. It was a pretty hack method of trying to do two things with one value before, whereas now it actually uses two different values for adding 1 and for appending \" + 1\".\n",
    "head_branch": "fixSplices",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffdf3a21fa1e1f1aa21a",
    "number": 903,
    "body": "These changes correspond to https://github.com/jashkenas/coffee-script/issues#issue/645\nI would appreciate if you could take a look at it.\n\nThanks,\n\nPaul\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffe03a21fa1e1f1aa21b",
    "number": 900,
    "body": "discussion about this bug can be seen in [the commit log for 63cbb643](https://github.com/jashkenas/coffee-script/commit/63cbb64341425c6bbb8a2594aedcc2c41e859778#commitcomment-209643)\n",
    "head_branch": "freeVariableBugfix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffe13a21fa1e1f1aa21c",
    "number": 893,
    "body": "See [issue 877](https://github.com/jashkenas/coffee-script/issues#issue/887).\n\nCurrent:\n\n```\nCompiled a.coffee\nCompiled a.coffee\n```\n\nWith the patch:\n\n```\nCompiled a.coffee\n2010-12-02 13:39:18 Recompiled a.coffee\n```\n\nThere are two small improvements here. First, the timestamps themselves, as requested by rmatta, which may provide useful documentation to some users. Second, I think it's very nice (both aesthetically and functionally) to distinguish the initial compilation from additional recompiles triggered by watch mode.\n",
    "head_branch": "timestamp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffe13a21fa1e1f1aa21d",
    "number": 892,
    "body": "Test is included. Also note the fixed faulty test case in test/test_switch.coffee.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffe23a21fa1e1f1aa21e",
    "number": 876,
    "body": "tests are included\n",
    "head_branch": "nullContext",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffe33a21fa1e1f1aa21f",
    "number": 849,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffe43a21fa1e1f1aa220",
    "number": 847,
    "body": "I'll leave you to run `rake doc` as I had trouble getting it to work on my system. Thanks!\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffe53a21fa1e1f1aa221",
    "number": 838,
    "body": "I'm weird, I'm sorry :(\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffe63a21fa1e1f1aa222",
    "number": 837,
    "body": "Here is a fix for coffee -s which broke because a nonexisting file name 'stdio' was passed to compileScript().\n\nIt would be really nice to have a test for this, but I wasn't sure if there is a way to test stdin from cake, probably not.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffe73a21fa1e1f1aa223",
    "number": 819,
    "body": "Currently, 0.9.4 accepts `--no-wrap` and not `-b`/`--bare`, while master accepts `-b`/`--bare` and not `--no-wrap`. This has led some users to be frustrated, as their tools (e.g. editor bundles) use `--no-wrap`.\n\nThe patch I'm submitting allows `coffee` to accept `--no-wrap`, with a warning. If you call `coffee -h`, `--no-wrap` isn't mentioned. This will allow for a much smoother transition and give people time to update their tools; `--no-wrap` can easily be removed altogether in future versions.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffe83a21fa1e1f1aa224",
    "number": 807,
    "body": "It's never better to use modulo to check parity than to just check the last bit.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffe93a21fa1e1f1aa225",
    "number": 796,
    "body": "They have replaced the `sys` module with the `util` module. Users of node 0.3+ will receive deprecation notices with every run of `cake` or `coffee` without this fix. A safe fallback to `sys` for users of node <0.3 is provided as well.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffea3a21fa1e1f1aa226",
    "number": 781,
    "body": "Now that index variables are definitely preserved from loops ([issue 118](http://github.com/jashkenas/coffee-script/issues/issue/118)), I think it behooves us to correct this behavior:\n\n```\nconsole.log i for i in [1, 2, 3]\nconsole.log i # 3\n(-> 'func') i for i in [1..3]\nconsole.log i # 3\nconsole.log i for i in [1..3]\nconsole.log i # 4\n```\n\nI'd call that last case a bug; the fix is to undo one step at the end of any `for` loop where the index variable is named.\n\nAlso, `i` should always have the last step in case of a `break` or `return`, but `i`'s value is never set at all if there's a closure and a `break` or `return` anywhere!\n\n```\ni = 0\nfor i in [1..3]\n  -> 'func'\n  break if false\nconsole.log i # 0\n```\n\nI've added corresponding test cases to `test_comprehensions.coffee` and patched `nodes.coffee`. Yes, the hairiest method in the CoffeeScript compiler just got slightly hairier...\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffeb3a21fa1e1f1aa227",
    "number": 780,
    "body": "Fixes #773, #600, #700, #763, and #774.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffeb3a21fa1e1f1aa228",
    "number": 772,
    "body": "After getting some issues ([11](http://github.com/mishoo/UglifyJS/issues/issue/11), [27](http://github.com/mishoo/UglifyJS/issues/issue/27)) fixed, [UglifyJS](http://github.com/mishoo/UglifyJS) can now successfully build _extras/coffee-script.js_ with impressive speed and compressibility (209KB without name mangling).\n\nThis branch makes `cake test:browser` use UglifyJS API instead of `rake browser`.\n",
    "head_branch": "uglify",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffec3a21fa1e1f1aa229",
    "number": 770,
    "body": "I believe this should fix #768. I'd like it to be highly scrutinized since this is my first contribution to CoffeeScript.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffed3a21fa1e1f1aa22a",
    "number": 766,
    "body": "I found the tiniest possible copy edit for `index.html` and resolved to submit a patch.\n\nThanks,\nDaniel\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffee3a21fa1e1f1aa22b",
    "number": 760,
    "body": "Ref. #757.\n",
    "head_branch": "browser-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dffef3a21fa1e1f1aa22c",
    "number": 755,
    "body": "The `noWrap: true` option to `CoffeeScript.compile` is convenient for the command-line utility but makes for a warty API everywhere else. Let's change it to `wrap: false`, while still keeping the wrapper enabled when you don't specify any option at all.\n\nA second commit adds back support for `noWrap`, but with a deprecation notice on platforms that support `console.warn`.\n",
    "head_branch": "nowrap",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfff03a21fa1e1f1aa22d",
    "number": 731,
    "body": "This fixes the previously reported issue #723.\n\nThe problem was that the switch cases were not being iterated by `eachChild`, because the `flatten` helper did not flatten deep enough. (`cases` is a list of pairs.)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfff13a21fa1e1f1aa22e",
    "number": 729,
    "body": "This _should_ allow us to have classes with a `name` property that corresponds to the actual class name without causing the weird IE scoping error. It's listed [here](http://kangax.github.com/nfe/#alt-solution) as a solution, but I haven't actually tested it, so it'd be swell if someone could give that a go.\n\nNote that we could do this for all of our functions, but things would get overly complicated way too quickly with the extra closure that this solution uses, and that's not really in the spirit of Coffeescript.\n",
    "head_branch": "named-classes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfff23a21fa1e1f1aa22f",
    "number": 718,
    "body": "Because they\n- don't have test.\n- define unused variables.\n- are wrapped in a redundant namespace.\n- have some quirks e.g.:\n  - `count` is slow because it uses our `indexOf` (which happens to work) instead of the native one.\n  - `extend` collects values into an array which is never used.\n  - `flatten` has wrong description.\n  - etc.\n",
    "head_branch": "helpers-refactor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfff33a21fa1e1f1aa230",
    "number": 708,
    "body": "Refactored some regexes, method calls and logical flows.\n\nPerf gain is about 10%. (185ms -> 165ms [tokenizing _examples/underscore.coffee_](http://gist.github.com/593175))\n",
    "head_branch": "lexer-refactor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfff43a21fa1e1f1aa231",
    "number": 704,
    "body": "This makes it possible to insert trailing newlines in an indented heredoc when your editor is configured to strip trailing whitespace.\n",
    "head_branch": "01c14bc6402198b09f1a7f23f67e4ff05e8c562c",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfff53a21fa1e1f1aa232",
    "number": 703,
    "body": "```\n$ bin/coffee --no-wrap -pe 'k for all k of o'\nvar _i, _ref, k;\n_ref = o;\nfor (k in _ref) {\n  _i = _ref[k];\n  k\n}\n```\n\nNote the `_i`.\n",
    "head_branch": "for-of-diet",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfff63a21fa1e1f1aa233",
    "number": 701,
    "body": "> made browser.coffee override Node dependent exported methods\n\nAs well as a little more readable.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfff73a21fa1e1f1aa234",
    "number": 693,
    "body": "Here's my attempt at fixing my own issue report on function soaks and `this`.\n\nFor reference, this snippit:\n\n```\ndoh.re.mi().fa.sol.la?()\n```\n\nNow compiles as:\n\n```\n(function() {\n  var _a;\n  (typeof (_a = doh.re.mi().fa.sol).la === \"function\" ? _a.la() : undefined);\n})();\n```\n\nIt's a small patch, but you should probably review carefully. This is the first time I've dealt with an AST. ;)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfff83a21fa1e1f1aa235",
    "number": 679,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfff83a21fa1e1f1aa236",
    "number": 672,
    "body": "Take this case for instance:\n\n```\n# file: require.coffee\nsys = require 'sys'\nCoffeeScript.on 'compile', (task) ->\n  sys.debug task.fileName\n```\n\nthen used such as:\n\n```\ncoffee --require require.coffee other.coffee\n```\n\nwill produce something like `DEBUG: require.coffee`. A temporary work around is to access `task.options.fileName` in the event handler. The [cause](http://github.com/jashkenas/coffee-script/blob/9290e508c69ad20f2b02a30a986592e70cc733e0/src/command.coffee#L99) is a bad variable name in the task which overrides the filename.\n\nThe fix is attached.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661dfff93a21fa1e1f1aa237",
    "number": 671,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  }
]