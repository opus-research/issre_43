[
  {
    "_id": "6623a224d9087c4d6d3762ee",
    "number": 10437,
    "body": "resolves #10391 \r\ndecided to go with the config option here since adding exclusions for only ender eyes seems unreasonable",
    "head_branch": "add-structure-world-border-config",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a225d9087c4d6d3762ef",
    "number": 10436,
    "body": "fixes #10432 ",
    "head_branch": "fix-leash",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix inventory desync with PlayerLeashEntityEvent (#10436)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a225d9087c4d6d3762f0",
    "number": 10435,
    "body": "Closes https://github.com/PaperMC/Paper/issues/10431",
    "head_branch": "feature/fluid-ticking",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add API for ticking fluids (#10435)\n\n* Add API for ticking fluids\r\n\r\n* update javadocs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a226d9087c4d6d3762f1",
    "number": 10424,
    "body": "update",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a228d9087c4d6d3762f2",
    "number": 10423,
    "body": "The main thing we lose from the 1.11 snapshots is a recent fix for redundant casts.",
    "head_branch": "vineflower-1_10_1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "\"Downgrade\" Vineflower to 1.10.1 release (#10423)\n\n* \"Downgrade\" Vineflower to 1.10.1 release\r\n\r\nThe main thing we lose from the 1.11 snapshots is a recent fix for redundant casts.\r\n\r\n* Thanks intellij\r\n\r\n* a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a229d9087c4d6d3762f3",
    "number": 10416,
    "body": null,
    "head_branch": "feature/death-event-damage-source",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a22ad9087c4d6d3762f4",
    "number": 10415,
    "body": "The old bungee component methods still use the old limit but i'm not sure if it's worth to fix them here.",
    "head_branch": "fix/bookdoc",
    "is_a_fork": true,
    "comments": [
      "Page limits? Where we're going, we don't need *page limits*"
    ],
    "commit_messages": [
      "[ci skip] Update book page/char limit for book meta doc (#10415)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a22bd9087c4d6d3762f5",
    "number": 10413,
    "body": "Changing this default will not affect anything unless `proxies.velocity.enabled` is also true, and discouraging piracy is always nice.",
    "head_branch": "change-online-mode-default",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Change online mode default for Velocity configuration (#10413)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a22cd9087c4d6d3762f6",
    "number": 10412,
    "body": "Changing this default will not affect anything unless `proxies.velocity.enabled` is also true, and discouraging piracy is always nice.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a22cd9087c4d6d3762f7",
    "number": 10411,
    "body": "I've had this patch to remove dead code since June, is there any interest in it? If there is I'll merge it in properly and submit it.",
    "head_branch": "remove-dead-code/LegacyResult",
    "is_a_fork": true,
    "comments": [
      "Yeah I'll adapt the original patch if there's interest. It's just that I didn't want to touch the Adventure patch if there's no interest.\r\n\r\nI've had a look over it again, the only reason this code exists is to support chat preview, which was removed after a very brief existence in minecraft. I don't understand why AsyncPlayerChatPreviewEvent is still being fired if the feature was removed, it's a nonsense event.",
      "Does upstream still fire that event? The concept of chat decoration is still very much a thing, even if previews aren't. Notice that our events are called \"ChatDecorate\" instead of \"ChatPreview\". If upstream isn't firing their event anymore during that process, I am fine removing our calling of it.",
      "There's no reference to it in the craftbukkit repo.",
      "I'll update this pull request tonight/tomorrow with a proper commit.\r\n\r\nBy the way it looks like github built the change before there was a review, is that supposed to happen? If not then it might be because this is a draft.",
      "Yeah, I can't find any reference to it either in their source, so we can remove our calls to it.",
      "All of the changes in ChatDecorator.java (ModernResult and Result) can probably be removed with a larger refactor. \"Inline constant arguments\" is a move in that direction but can be ignored if you want.",
      "> All of the changes in ChatDecorator.java (ModernResult and Result) can probably be removed with a larger refactor. \"Inline constant arguments\" is a move in that direction but can be ignored if you want.\r\n\r\nYeah, I think we should go all the way here, not partially remove stuff",
      "This is the merged commit, you can see the individual refactoring steps [here](https://github.com/brickmonster/Paper-remove-LegacyFormat/tree/unmerged). I suggest cloning, applying patches, and looking through each step in Paper-Server to spot any mistakes."
    ],
    "commit_messages": [
      "Remove dead code (LegacyResult) (#10411)\n\n* Stop firing AsyncPlayerChatPreviewEvent as chat preview was removed in 1.19.3. This is in parity with upstream\r\n\r\n* formatting and small tweaks\r\n\r\n* correctly set MESSAGE_CHANGED flag for modern modifications\r\n\r\n---------\r\n\r\nCo-authored-by: Jake Potrebic <jake.m.potrebic@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a22dd9087c4d6d3762f8",
    "number": 10410,
    "body": "I've had this patch to remove dead code since June, is there any interest in it? If there is I'll merge it in properly and submit it.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a22fd9087c4d6d3762f9",
    "number": 10409,
    "body": "Hi,\r\nAs mentioned by #10393 , the advancement criteria was being trigged before the Target Block could update. The only change being that the function call to grant the advancement is now after the call for `setOutputPower()`.",
    "head_branch": "main",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix hit criteria advancement triggered before changing state (#10409)\n\n* Fix hit criteria advancement being triggered before changing block state.\r\n\r\n* Rebase\r\n\r\n---------\r\n\r\nCo-authored-by: Bjarne Koll <lynxplay101@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a230d9087c4d6d3762fa",
    "number": 10408,
    "body": "paper previously migrated away from using executeIfPossible as this throws a RejectedExecutionException when the server is shutting down, which is then picked up by the Connection handler object and causes the player to be kicked without the intended disconnection message that comes from commands such as /stop, /restart\r\n\r\nThis was fine, because previously changes made in spigot would just prevent these packets from being executed anyways. Instead, we'll just use a marker exception to try to detect this specific state.\r\n\r\nFixes #10404\r\n\r\nI did originally drop the removed patch in this PR, however, ended up writing an alternative solution for what the OG patch was trying to resolve",
    "head_branch": "fix/stackoverflow-on-stop",
    "is_a_fork": false,
    "comments": [
      "Just re-based my fork on to this, I got 0/10 failures whereas before I would get 9/10 failures."
    ],
    "commit_messages": [
      "Fix StackOverflowException thrown on shutdown (Fixes #10404) (#10408)\n\npaper previously migrated away from using executeIfPossible as this throws a\r\nRejectedExecutionException when the server is shutting down, which is then picked\r\nup by the Connection handler object and causes the player to be kicked without\r\nthe intended disconnection message that comes from commands such as /stop, /restart\r\n\r\nThis was fine, because previously changes made in spigot would just prevent these\r\npackets from being executed anyways. Instead, we'll just use a marker exception\r\nto try to detect this specific state."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a231d9087c4d6d3762fb",
    "number": 10406,
    "body": null,
    "head_branch": "feat/vineflower",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update patches to handle vineflower decompiler (#10406)\n\n* Update patches to handle vineflower decompiler\r\n\r\n* update patches again to handle inlined simple lambdas\r\n\r\n* update vf again and re-apply/rebuild patches\r\n\r\n* update patches after removal of verify-merges flag\r\n\r\n* fix compile issue\r\n\r\n* remove maven local\r\n\r\n* fix some issues\r\n\r\n* address more issues\r\n\r\n* fix collision patch\r\n\r\n* use paperweight release\r\n\r\n* more fixes\r\n\r\n* update fineflower and fix patches again\r\n\r\n* add missing comment descriptor\r\n\r\n---------\r\n\r\nCo-authored-by: Jason Penilla <11360596+jpenilla@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a232d9087c4d6d3762fc",
    "number": 10400,
    "body": "## Introduction\r\n\r\nThis patch added an API to get the player's proxy address.\r\nIt will be useful if the server uses multiple proxy instances that support HAProxy Protocol (frp, nginx, etc.) and wants to know which proxy instance the player uses.\r\n\r\n## How?\r\n\r\nI added a method, which is `Player#getProxyAddress`. This method returns an `InetSocketAddress`, if the server didn't enable Proxy Protocol, or the player didn't connect with an HAProxy instance, then it will return null.\r\n\r\n## Example\r\n\r\n```kotlin\r\n@EventHandler\r\nfun playerJoinEvent(event: PlayerJoinEvent) {\r\n    val player = event.player\r\n    val proxyAddr = player.proxyAddress\r\n\r\n    if (proxyAddr == null) {\r\n        logger.info(\"Player ${player.name} didn't connect with a proxy!\")\r\n        return\r\n    }\r\n\r\n    logger.info(\"Player ${player.name} is using proxy: ${proxyAddr.hostString}:${proxyAddr.port}\")\r\n}\r\n```",
    "head_branch": "dev/api-to-get-proxy-address",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a233d9087c4d6d3762fd",
    "number": 10399,
    "body": "## Introduction\r\n\r\nThis patch added an API to get the player's proxy address.\r\nIt will be useful if the server uses multiple proxy instances that support HAProxy Protocol (frp, nginx, etc.) and wants to know which proxy instance the player uses.\r\n\r\n## How?\r\n\r\nI added a method, which is `Player#getProxyAddress`. This method returns an `InetSocketAddress`, if the server didn't enable Proxy Protocol, or the player didn't connect with an HAProxy instance, then it will return null.\r\n\r\n## Example\r\n\r\n```kotlin\r\n@EventHandler\r\nfun playerJoinEvent(event: PlayerJoinEvent) {\r\n    val player = event.player\r\n    val proxyAddr = player.proxyAddress\r\n\r\n    if (proxyAddr == null) {\r\n        logger.info(\"Player ${player.name} didn't connect with a proxy!\")\r\n        return\r\n    }\r\n\r\n    logger.info(\"Player ${player.name} is using proxy: ${proxyAddr.hostString}:${proxyAddr.port}\")\r\n}\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a234d9087c4d6d3762fe",
    "number": 10398,
    "body": "This exposes some functionality of the underlying ChunkTrackingView.\r\n\r\nWhen adding certain objects to chunks, it is often desirable to have actual knowledge about who is currently seeing this chunk, in order to selectively send informations to those viewers.\r\n\r\nThis can be useful for holograms and similar functionality.",
    "head_branch": "chunk-tracking-api",
    "is_a_fork": true,
    "comments": [
      "I don't see anywhere that the chunk tracking view is actually maintained?",
      "> I don't see anywhere that the chunk tracking view is actually maintained?\r\n\r\nIm also just finding out that the chunkTrackingView is pretty much unused? The getter and setter for this field are never called.\r\nI should change the backbone to the RegionizedPlayerChunkLoader...",
      "I think you should return a collection of chunks rather than the keys. If you use the getChunkAt method and pass `false` as the second argument, it'll just construct the chunk without generating it.",
      "> I think you should return a collection of chunks rather than the keys. If you use the getChunkAt method and pass `false` as the second argument, it'll just construct the chunk without generating it.\r\n\r\nAt least optionally. Keys is best overall but the overload could be nice.",
      "> I think you should return a collection of chunks rather than the keys. If you use the getChunkAt method and pass `false` as the second argument, it'll just construct the chunk without generating it.\r\n\r\nI specifically chose Set because it conveys an important property: There are no duplicates in the returned collection.\r\nAn overload method returning Chunks wont be added again. I initially had it but had a convo that made me remove it.\r\n",
      "If you're referring to the conversation with electroniccat, he probably missed the boolean parameter.\r\nUsing it that way just constructs a chunk, nothing else. It's pretty much a tuple of chunk coordinates\r\nwith the added benefit of a world - which is still much cleaner than a set of magic numbers.",
      "They aren't magic numbers, they are explicitly derived values that correspond with Chunk Coordinates and commonly represent a lighter way to store data about chunks, (longs vs a Chunk object). \r\n\r\nGranted, a `CraftChunk` is still a pretty small class, but there is at least a non-zero performance impact of the mapping and allocations of `sentChunks` from long->chunk (and players usually have many hundreds of chunks loaded). \r\n\r\nI'd still advocate for having both options, but perhaps the higher-ups should weigh in.",
      "I did clarify on the conversation that I did miss the change to the behavior of getChunkAt, but at least, IMHO, that is part of the headache here, I guess most of my concerns are somewhat mitigated by the fact that we can generally assure that it's not going to create some fun and interesting issues due to world switching if you put the CraftChunk alloc in the correct place",
      "> They aren't magic numbers, they are explicitly derived values that correspond with Chunk Coordinates and commonly represent a lighter way to store data about chunks, (longs vs a Chunk object).\r\n> \r\n> Granted, a `CraftChunk` is still a pretty small class, but there is at least a non-zero performance impact of the mapping and allocations of `sentChunks` from long->chunk (and players usually have many hundreds of chunks loaded).\r\n> \r\n> I'd still advocate for having both options, but perhaps the higher-ups should weigh in.\r\n\r\nThat's what I thought about block keys until they changed world height and got rid of them...\r\n\r\nYou're already returning the copy as a set of boxed longs, might as well convert them to Chunks while you're at it.",
      "Honestly the last thing I'd change is to avoid copying the long set when converting to a chunk set. Looks great otherwise.",
      "I made a few changes in https://github.com/Flo0/Paper/pull/1 specifically to avoid unnecessary cloning and boxing, now you've made the Set both immutable and a clone..?",
      "I made those changes as we were preparing this for a merge today.\n\nWe need to clone both, your proposed changes would end up with an unmodifiable view returned by getSentChunkKeys (one that is updated when the player moves) while getSentChunks is a normal clone.\n\nAdditional, a view is a dangerous thing given the fact that the server maintained set is not save for concurrent access. Callers would have to clone the returned view when trying to use it off the main thread, otherwise they'll run into terribly obscure errors when trying to access the unmodifiable view from getChunkKeysSent while the server mutates the underlying set as fast util collections don't have extensive error messages for concurrent modifications.",
      "> I made those changes as we were preparing this for a merge today.\r\n> \r\n> We need to clone both, your proposed changes would end up with an unmodifiable view returned by getSentChunkKeys (one that is updated when the player moves) while getSentChunks is a normal clone.\r\n> \r\n> Additional, a view is a dangerous thing given the fact that the server maintained set is not save for concurrent access. Callers would have to clone the returned view when trying to use it off the main thread, otherwise they'll run into terribly obscure errors when trying to access the unmodifiable view from getChunkKeysSent while the server mutates the underlying set as fast util collections don't have extensive error messages for concurrent modifications.\r\n\r\nI disagree. It being an unmodifiable view is clearly documented, and storing such a view for future (especially asynchronous) access is bad practice, and should be avoided precisely because of the pitfalls you describe. If you need the collection later, be it on the main server thread or on another, you clone it; the point of using a view is to leave agency over that to the caller. This is why it is documented as such.\r\n\r\nOne could argue that exposing a view introduces a greater risk of programmer error. But I would argue that eliminating such risk is, generally, not what we are here to do, nor is it possible in its entirety. The semantics and behaviour of the returned collection are documented and it is on the caller to act in accordance with those semantics -- just as it is expected that one should not try modifying an unmodifiable collection.",
      "Did I miss anything in the java docs regarding this being supposed to be a view?\n\nIt wasn't even a view in the initially proposed pr given it used Set.copyOf, which constructs an array based set.\n\nThis would also still not fix the issue that youd have getChunkKeysSent returning a view while getChunksSent would not. We could work around this with a transforming collection, but I honestly do not see the point of this being a view in the first place?\n\nYou'd save yourself a single internal clone of the hash table, and that is *only* the case if you need to iterate over all sent chunks as the *isChunkSent* methods do not need the clone in the first place.\n\nYour argument that we are not here to eliminate risks in exposed API is confusing to me. I'd give it to you if the exposed view would throw a proper exception if it is incorrectly used down the line that points out the offending plugin, but this will generally not be the case with fastutil exceptions.\nIdk what documentation you referred to, nothing in this PR at least goes indepth of the dangers that using a view on a different thread poses.\n",
      "> Did I miss anything in the java docs regarding this being supposed to be a view?\r\n> \r\n> It wasn't even a view in the initially proposed pr given it used Set.copyOf, which constructs an array based set.\r\n>\r\n> Idk what documentation you referred to, nothing in this PR at least goes indepth of the dangers that using a view on a different thread poses.\r\n\r\nTo clarify, I am referring to the modifications proposed by @Vrganj, in his [PR](https://github.com/Flo0/Paper/pull/1) wherein the methods are annotated with the documenting annotations, [@UnmodifiableView](https://javadoc.io/doc/org.jetbrains/annotations/20.1.0/org/jetbrains/annotations/UnmodifiableView.html) and @Unmodifiable, respectively. This should be sufficient. If it is not, the semantics of a view can be explicitly noted on the method javadoc, but this defeats the point of using annotations for that purpose.\r\n\r\n> This would also still not fix the issue that youd have getChunkKeysSent returning a view while getChunksSent would not. We could work around this with a transforming collection, but I honestly do not see the point of this being a view in the first place?\r\n\r\nI do not see how this is an issue.\r\n\r\n> You'd save yourself a single internal clone of the hash table, and that is _only_ the case if you need to iterate over all sent chunks as the _isChunkSent_ methods do not need the clone in the first place.\r\n\r\nGiven how the returned collections are unmodifiable, there is not much else to be done with them apart from calling ``Set::contains`` or iterating over them. As you correctly pointed out, ``Set::contains`` is already covered by ``isChunkSent``, so ``getChunkKeysSent`` should be optimized for iteration in turn, as that is what it will be primarily, perhaps exclusively, used for. I agree that we could use a transforming collection view for ``getChunksSent`` and in fact I would quite prefer this.\r\n\r\n> Your argument that we are not here to eliminate risks in exposed API is confusing to me. I'd give it to you if the exposed view would throw a proper exception if it is incorrectly used down the line that points out the offending plugin, but this will generally not be the case with fastutil exceptions. Idk what documentation you referred to, nothing in this PR at least goes indepth of the dangers that using a view on a different thread poses.\r\n\r\nYou are right in that many of the fastutil iterators are not fail-fast, but keep in mind that sensible CME errors are in no way guaranteed by fail-fast iterators, either, and iterating over an asynchronously modified (non-thread-safe) collection is inherently unpredictable. Also, note that the 'offending plugin' will be pointed out by any exception still thrown, as fastutil's reading methods are pure, and therefore cannot cause exceptions on our end; only calls made by the holder of the view can result in exceptions, which will in turn point out the offending plugin.\r\n\r\nExposing views is nothing new or out of the norm, and, in my opinion, a certain degree of competence and reviewing of the documentation should be expected of users. The only exception to this expectation that I will admit to is the integrity of the internal server state: exposing the long set as a mutable collection, for example, would be unacceptable. Exposing it as an unmodifiable view, however, poses no risk to internal correctness, and threfore by my measure it is acceptable.\r\n\r\nResponsibility for the correctness of user code, provided that easily-accessible documentation exists to ensure ahead of time confidence in it, rests on the user writing it.\r\n\r\nFinally, said PR also eliminates an accidental case of long boxing in the chunk key -> chunk conversion. Even if you do not go through with the view, I implore you to use a primitive iterator as in the PR.",
      "I'll bring up the use of view again in todays merge party regarding this.\r\n\r\nA plugin incorrectly using this method and potentially screwing themselves terribly feels, at least to me, worth the \"cost\" of  copying the open hash set once. We can throw annotations at it as much as we want, that does not mean we are going to get a nice user experience in case people misuse this.\r\n\r\nAt least after a my first initial search through the source, I don't see many unmodifiable views being returned by the API in general, setting some form of precedent. In the case of e.g. Bukkit#getOnlinePlayers, the underlying collection is at least a COWArrayList.\r\nBut I digress, I'll bring it up again as promised and have some other peeps on the team give their input, this might just be a personal preference of mine in the end. Thank you for the detailed description of your opinion tho, was a nice read :)\r\n\r\nThe long boxing is a good spot, will be included.",
      "Alright, talked it over with the view vs non view thing with some of the team.\r\nGenerally, my argument \"protecting someone from getting the set, storing it and then using it off thread\" is somewhat weak, agree with you on that end.\r\n\r\nThe argument of \"api precedent\" however, is what we are going to base the decision of copying the set on.\r\nThere is little to no views, as said early, on the API that directly reference internal server state (as in java Collection views, Entity interface being a \"view\" is separate).\r\nAs such, introducing a view would again be a potential unfriendly move towards developers, no just because of the inability of iterating off thread (even tho that argument is weak) but also regarding the behaviour of the returned set, specifically its mutability.\r\n\r\nI went ahead and avoided the long boxing as well as moved to a faster clone method that directly clones the long[] instead of running an addAll() over the contents of the source set.\r\n\r\nWhile I understand that this might not please you, I hope you understand where I am coming from on this decision.\r\nThank you again for your input on this. The discussion was certainly worth having and reconsidering the usage of a view in depth was not a waste of time, even if it did not end up being used :+1:\r\n\r\n//edit[0]: Went ahead and also marked these methods as experimental for now, allowing us to potentially revisit your points in the future if a majority of API consumers feel as strongly about this as you do.",
      "Sounds reasonable. Discourse over the matter is good enough for me. It's not that significant of a difference in terms of performance for most users, anyway. ~and I can always reflect/nms into it if i need to, har har har~ I just wanted to bring up the topic to make sure it gets its due consideration before us committing to any given API contract."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a235d9087c4d6d3762ff",
    "number": 10396,
    "body": "Fixes #8749.",
    "head_branch": "work/jblackquill/cartography-item-event",
    "is_a_fork": true,
    "comments": [
      "Tested with: \r\n```java\r\n@EventHandler\r\npublic void onCartographEvent(CartographyItemEvent event) {\r\n    final CartographyInventory inventory = event.getInventory();\r\n    inventory.setResult(new ItemStack(Material.ACACIA_BOAT));\r\n    event.setCancelled(true);\r\n    event.setResult(Event.Result.DENY);\r\n}\r\n ```\r\nResult:\r\nResult cannot not be taken from inventory.\r\n![image](https://github.com/PaperMC/Paper/assets/6745190/a719f5a6-80aa-472c-8d31-7cfea89efd02)\r\n---\r\nTested with: \r\n```java\r\n@EventHandler\r\npublic void onCartographEvent(CartographyItemEvent event) {\r\n    event.setCurrentItem(new ItemStack(Material.ACACIA_BOAT));\r\n}\r\n```\r\n\r\nResult:\r\nResult is not changing with that code.\r\n![image](https://github.com/PaperMC/Paper/assets/6745190/4cb5f8d4-e85c-46ef-9888-597efaac4788)\r\n\r\nIs this an expected behaviour that `setCurrentItem` does not change the item?",
      "poke"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a236d9087c4d6d376300",
    "number": 10395,
    "body": "Hello,\r\nAs requested by #10211 , I added some reference about ```InventoryDragEvent``` in ```InventoryClickEvent``` javadoc. I chose to describe the behaviour between Drag and Click events a bit, instead of just referecing with an ```@see``` tag. Is this ok regarding the overall convention about paper javadoc, or is this unnecessary?",
    "head_branch": "10211",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Referenced InventoryDragEvent in documentation of InventoryClickEvent (#10395)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a237d9087c4d6d376301",
    "number": 10392,
    "body": "This enables listing, unlisting and updating any of [latyncy, gamemode, displayname] for PlayerProfiles in the tablist.\r\n\r\nBurden of tracking those listings is on the caller.\r\n\r\nExtends the ClientboundPlayerInfoUpdatePacket class and its nested Entry class for ease of use.\r\n\r\n[Test video](https://i.imgur.com/Ust0U15.mp4)",
    "head_branch": "player-profile-listing-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a238d9087c4d6d376302",
    "number": 10388,
    "body": "https://discord.com/channels/289587909051416579/925530366192779286/1225482929333997609",
    "head_branch": "deprecate/bukkit-logger",
    "is_a_fork": true,
    "comments": [
      "I'd propose additionally wiring it into the SysoutCatcher or similar, so that it nags authors to stop using it. As demonstrated by the SysoutCatcher, an effective way to get plugin authors to stop using something is to get half their userbase to nag them about it.",
      "Perhaps note in the deprecation message *why* this is a bad idea to use?",
      "> I'd propose additionally wiring it into the SysoutCatcher or similar, so that it nags authors to stop using it. As demonstrated by the SysoutCatcher, an effective way to get plugin authors to stop using something is to get half their userbase to nag them about it.\r\n\r\nnot instantly, that would be meh, at least give people one cycle to notice the deprecation",
      "> Perhaps note in the deprecation message _why_ this is a bad idea to use?\r\n\r\nDo you have a preferred message?",
      "This could be merged in the patch \"Fix Spigot annotation mistakes\""
    ],
    "commit_messages": [
      "Deprecate Bukkit#getLogger (#10388)\n\n* Deprecate Bukkit#getLogger\r\n\r\n* fix typo in MaterialSetTags\r\n\r\n* change to Internal and squash into other patch\r\n\r\n* improve api note message\r\n\r\n---------\r\n\r\nCo-authored-by: Jake Potrebic <jake.m.potrebic@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a239d9087c4d6d376303",
    "number": 10387,
    "body": "Serializing multiple items to bytes isn't trivial, so often beginners fall into the trap of using output IO streams and Bukkit serialization instead, so these provide helpful extra methods to deal with item arrays.\r\n\r\nAlso kept the serialization methods exposed in API as a sort of textbook example/nudge in the right direction of what should be used instead of object streams",
    "head_branch": "weee",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a23ad9087c4d6d376304",
    "number": 10383,
    "body": "This PR fixes these 2 issues (https://github.com/PaperMC/Paper/issues/10022 and https://github.com/sachingorkar102/Lootin-plugin/issues/24) but for existing worlds\r\n\r\nWhen a chunk loads it checks all the existing block entities and makes sure they are valid, if they are not the block entities are removed from the world.",
    "head_branch": "remove-invalid-block-entity",
    "is_a_fork": true,
    "comments": [
      "This seems more like a bandaid fix, where exactly are these block entities being added from? I would think it would be better to patch where these are coming from.",
      "> This seems more like a bandaid fix, where exactly are these block entities being added from? I would think it would be better to patch where these are coming from.\r\n\r\nThese block entities are coming from this other issue (https://github.com/PaperMC/Paper/pull/10375), the other PR fixes it only for new worlds and this one is a fix for existing ones",
      "Is this only an issue for old worlds that use the custom generator override stuff but then load those chunks?",
      "> Is this only an issue for old worlds that use the custom generator override stuff but then load those chunks?\r\n\r\nYes, because they would have a Sculk Sensor block entity where there is a Sculk Catalyst block",
      "Then maybe we should have this under a config. Not many plugins use this system, and i'd hate to keep this workaround forever. ",
      "adding a config option generally offers a level of commitment beyond just having something sitting around for a while, otherwise, we'd need to investigate putting it as part of the forceUpgrade pathway so that we can tell people to just run that before we remove it, but, that seems meh",
      "> adding a config option generally offers a level of commitment beyond just having something sitting around for a while, otherwise, we'd need to investigate putting it as part of the forceUpgrade pathway so that we can tell people to just run that before we remove it, but, that seems meh\r\n\r\nI didn't check how the forceUpdate flag works in the code but that sounds like a good idea, it's something that doesn't run everytime a chunk loads and it's a thing that servers with corrupted worlds would have to run only once",
      "not all hosts offer the means to do stuff like that, however; is part of the concern; but, if it was a patch that we wanted to only keep for a short period of time, considering that it causes crashes, we'd need at least some tool that we can recommend to people in order to scan their worlds and clean up such busted state",
      "After a bit of discussion, I'll have a look at simply porting this check to a plugin that can perform this check via command.\r\nMaintaining this fix in paper for a single issue caused by a shitty spigot api implementation is rather annoying, so a plugin for people affected by this seems more friendly.\r\n\r\nI'll leave this open in case my timeline tomorrow explodes and I don't find the time for this soon.",
      "Threw together a quick plugin to iterate and process all chunks to find and remove these invalid block entities: \r\n \r\nhttps://github.com/lynxplay/block-entity-bin\r\n\r\nPeople that had their worlds corrupted by the respective bug may use the plugin to fix their chunk data.\r\nAny form of issue regarding the plugin is to be opened on the plugin's github page, not paper's repository.\r\nAs with any form of world data shenanigans, backup your data before running this. "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a23bd9087c4d6d376305",
    "number": 10380,
    "body": "since people on the discord have been asking about this frequently and it doesn't require more maintenance i think it is fine to add a config option to allow players to enable this.",
    "head_branch": "allow-string-duping",
    "is_a_fork": true,
    "comments": [
      "Doing a double steal to make the original PR author the author of this commit (and please don't call any PR \"allow x dupe\" 😿)",
      "i am going to charge you for theft lol "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a23cd9087c4d6d376306",
    "number": 10379,
    "body": "```[tasklist]\n### TODO\n- [x] Remove/Deprecate TrimPattern/TrimMaterial Translatable\n- [x] AbstractArrow#getItem vs AbstractArrow#getItemStack\n- [x] LivingEntity#getActiveItem vs LivingEntity#getItemInUse\n```\n\n----\n\nUpstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\n\nBukkit Changes:\nf02baa38 PR-988: Add World#getIntersectingChunks(BoundingBox)\n9321d665 Move getItemInUse up to LivingEntity\n819eef73 PR-959: Add access to current item's remaining ticks\nc4fdadb0 SPIGOT-7601: Add AbstractArrow#getItem\nbe8261ca Add support for Java 22\n26119676 PR-979: Add more translation keys\n66753362 PR-985: Correct book maximum pages and characters per page documentation\nc8be92fa PR-980: Improve getArmorContents() documentation\nf1120ee2 PR-983: Expose riptide velocity to PlayerRiptideEvent\n\nCraftBukkit Changes:\ndfaa89bbe PR-1369: Add World#getIntersectingChunks(BoundingBox)\n51bbab2b9 Move getItemInUse up to LivingEntity\n668e09602 PR-1331: Add access to current item's remaining ticks\na639406d1 SPIGOT-7601: Add AbstractArrow#getItem\n0398930fc SPIGOT-7602: Allow opening in-world horse and related inventories\nffd15611c SPIGOT-7608: Allow empty lists to morph to any PDT list\n2188dcfa9 Add support for Java 22\n45d6a609f SPIGOT-7604: Revert \"SPIGOT-7365: DamageCause blocked by shield should trigger invulnerableTime\"\n06d915943 SPIGOT-7365: DamageCause blocked by shield should trigger invulnerableTime\nca3bc3707 PR-1361: Add more translation keys\n366c3ca80 SPIGOT-7600: EntityChangeBlockEvent is not fired for frog eggs\n06d0f9ba8 SPIGOT-7593: Fix sapling growth physics / client-side updates\n45c2608e4 PR-1366: Expose riptide velocity to PlayerRiptideEvent\n29b6bb79b SPIGOT-7587: Remove fixes for now-resolved MC-142590 and MC-109346",
    "head_branch": "upstream-update",
    "is_a_fork": true,
    "comments": [
      "(for the current changes, expecting the todos to be fine as well. no amending for the todos so it's easier to review plz)"
    ],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#10379)\n\nUpdated Upstream (Bukkit/CraftBukkit)\r\n\r\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nf02baa38 PR-988: Add World#getIntersectingChunks(BoundingBox)\r\n9321d665 Move getItemInUse up to LivingEntity\r\n819eef73 PR-959: Add access to current item's remaining ticks\r\nc4fdadb0 SPIGOT-7601: Add AbstractArrow#getItem\r\nbe8261ca Add support for Java 22\r\n26119676 PR-979: Add more translation keys\r\n66753362 PR-985: Correct book maximum pages and characters per page documentation\r\nc8be92fa PR-980: Improve getArmorContents() documentation\r\nf1120ee2 PR-983: Expose riptide velocity to PlayerRiptideEvent\r\n\r\nCraftBukkit Changes:\r\ndfaa89bbe PR-1369: Add World#getIntersectingChunks(BoundingBox)\r\n51bbab2b9 Move getItemInUse up to LivingEntity\r\n668e09602 PR-1331: Add access to current item's remaining ticks\r\na639406d1 SPIGOT-7601: Add AbstractArrow#getItem\r\n0398930fc SPIGOT-7602: Allow opening in-world horse and related inventories\r\nffd15611c SPIGOT-7608: Allow empty lists to morph to any PDT list\r\n2188dcfa9 Add support for Java 22\r\n45d6a609f SPIGOT-7604: Revert \"SPIGOT-7365: DamageCause blocked by shield should trigger invulnerableTime\"\r\n06d915943 SPIGOT-7365: DamageCause blocked by shield should trigger invulnerableTime\r\nca3bc3707 PR-1361: Add more translation keys\r\n366c3ca80 SPIGOT-7600: EntityChangeBlockEvent is not fired for frog eggs\r\n06d0f9ba8 SPIGOT-7593: Fix sapling growth physics / client-side updates\r\n45c2608e4 PR-1366: Expose riptide velocity to PlayerRiptideEvent\r\n29b6bb79b SPIGOT-7587: Remove fixes for now-resolved MC-142590 and MC-109346"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a23dd9087c4d6d376307",
    "number": 10378,
    "body": "We had different versions of asm on the classpath which is just annoying when searching for stuff.",
    "head_branch": "chore/sync-asm",
    "is_a_fork": true,
    "comments": [
      "Closing since you have already (have to) bump it in the upstream pr"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a23ed9087c4d6d376308",
    "number": 10375,
    "body": "This patch fixes https://github.com/PaperMC/Paper/issues/10022 and https://github.com/sachingorkar102/Lootin-plugin/issues/24\r\n\r\nWhen using WorldGenRegion#setBlock on a block position where a BlockEntity exists it doesn't remove the old one, this creates a broken state in the world and makes the clients crash due to an internal server error.\r\n\r\nTo fix these issue, I'm removing the BlockEntity when WorldGenRegion#setBlock is set (to fix new worlds) and I've changed the LevelChunk#tick method to remove the invalid BlockEntity (to fix the existing worlds)",
    "head_branch": "fix-invalid-block-entities",
    "is_a_fork": true,
    "comments": [
      "@electronicboy  I found another issue related to this (even if it's not the same) so I'm going to make another PR to fix it\r\n\r\nBasically, if a Sculk Sensor is in a broken state (Block and Block Entity aren't right) the vibration system makes the player crash, this PR doesn't fix it\r\n\r\n`net.minecraft.ReportedException: Ticking player\r\n\tat net.minecraft.server.level.ServerPlayer.doTick(ServerPlayer.java:856) ~[main/:?]\r\n\tat net.minecraft.server.network.ServerGamePacketListenerImpl.tick(ServerGamePacketListenerImpl.java:338) ~[main/:?]\r\n\tat net.minecraft.network.Connection.tick(Connection.java:592) ~[main/:?]\r\n\tat net.minecraft.server.network.ServerConnectionListener.tick(ServerConnectionListener.java:234) ~[main/:?]\r\n\tat net.minecraft.server.MinecraftServer.tickChildren(MinecraftServer.java:1746) ~[main/:?]\r\n\tat net.minecraft.server.dedicated.DedicatedServer.tickChildren(DedicatedServer.java:447) ~[main/:?]\r\n\tat net.minecraft.server.MinecraftServer.tickServer(MinecraftServer.java:1525) ~[main/:?]\r\n\tat net.minecraft.server.MinecraftServer.runServer(MinecraftServer.java:1226) ~[main/:?]\r\n\tat net.minecraft.server.MinecraftServer.lambda$spin$0(MinecraftServer.java:319) ~[main/:?]\r\n\tat java.lang.Thread.run(Thread.java:833) ~[?:?]\r\nCaused by: java.lang.IllegalArgumentException: Cannot get property EnumProperty{name=sculk_sensor_phase, clazz=class net.minecraft.world.level.block.state.properties.SculkSensorPhase, values=[inactive, active, cooldown]} as it does not exist in Block{minecraft:sculk_catalyst}\r\n\tat net.minecraft.world.level.block.state.StateHolder.getValue(StateHolder.java:95) ~[main/:?]\r\n\tat net.minecraft.world.level.block.SculkSensorBlock.getPhase(SculkSensorBlock.java:216) ~[main/:?]\r\n\tat net.minecraft.world.level.block.SculkSensorBlock.canActivate(SculkSensorBlock.java:220) ~[main/:?]\r\n\tat net.minecraft.world.level.block.entity.SculkSensorBlockEntity$VibrationUser.canReceiveVibration(SculkSensorBlockEntity.java:129) ~[main/:?]\r\n\tat net.minecraft.world.level.gameevent.vibrations.VibrationSystem$Listener.handleGameEvent(VibrationSystem.java:292) ~[main/:?]\r\n\tat net.minecraft.world.level.gameevent.GameEventDispatcher.lambda$post$0(GameEventDispatcher.java:50) ~[main/:?]\r\n\tat net.minecraft.world.level.gameevent.EuclideanGameEventListenerRegistry.visitInRangeListeners(EuclideanGameEventListenerRegistry.java:74) ~[filteredMinecraft.jar:?]\r\n\tat net.minecraft.world.level.gameevent.GameEventDispatcher.post(GameEventDispatcher.java:62) ~[main/:?]\r\n\tat net.minecraft.server.level.ServerLevel.gameEvent(ServerLevel.java:1833) ~[main/:?]\r\n\tat net.minecraft.world.entity.Entity.vibrationAndSoundEffectsFromBlock(Entity.java:1332) ~[main/:?]\r\n\tat net.minecraft.world.entity.Entity.move(Entity.java:1226) ~[main/:?]\r\n\tat net.minecraft.world.entity.LivingEntity.handleRelativeFrictionAndCalculateMovement(LivingEntity.java:2958) ~[main/:?]\r\n\tat net.minecraft.world.entity.LivingEntity.travel(LivingEntity.java:2892) ~[main/:?]\r\n\tat net.minecraft.world.entity.player.Player.travel(Player.java:1682) ~[main/:?]\r\n\tat net.minecraft.server.level.ServerPlayer.travel(ServerPlayer.java:1726) ~[main/:?]\r\n\tat net.minecraft.world.entity.LivingEntity.aiStep(LivingEntity.java:3474) ~[main/:?]\r\n\tat net.minecraft.world.entity.player.Player.aiStep(Player.java:570) ~[main/:?]\r\n\tat net.minecraft.world.entity.LivingEntity.tick(LivingEntity.java:3066) ~[main/:?]\r\n\tat net.minecraft.world.entity.player.Player.tick(Player.java:274) ~[main/:?]\r\n\tat net.minecraft.server.level.ServerPlayer.doTick(ServerPlayer.java:770) ~[main/:?]\r\n\t... 9 more`",
      "> The paper start comment should be moved a line up and that diff can be somewhat reduced, and the end command should copy the start description; merger can deal with this, however, if desired\r\n\r\nI can move the line up, how do I reduce the diff?",
      "cleaning up the diff is moreso just accepting that the thing is going to look at bit messy, i.e. reverting the indentation changes;\r\n\r\nI was hoping that the tick logic would get to the block entity before it blew up, will probably have to just make the server check that the blockstate is valid for any block entity sets during loading in order to remove them earlier",
      "> cleaning up the diff is moreso just accepting that the thing is going to look at bit messy, i.e. reverting the indentation changes;\r\n> \r\n> I was hoping that the tick logic would get to the block entity before it blew up, will probably have to just make the server check that the blockstate is valid for any block entity sets during loading in order to remove them earlier\r\n\r\nYes, that's a better way to do it, do you want me to add that in this PR or another one?",
      "generally that sorta thing would be done as a separate PR"
    ],
    "commit_messages": [
      "Fix invalid block entities created during world gen (#10375)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a240d9087c4d6d376309",
    "number": 10374,
    "body": "This patch fixes https://github.com/PaperMC/Paper/issues/10022 and https://github.com/sachingorkar102/Lootin-plugin/issues/24\r\n\r\nWhen using WorldGenRegion#setBlock on a block position where a BlockEntity exists it doesn't remove the old one, this creates a broken state in the world and makes the clients crash due to an internal server error.\r\n\r\nTo fix these issue, I'm removing the BlockEntity when WorldGenRegion#setBlock is set (to fix new worlds) and I've changed the LevelChunk#tick method to remove the invalid BlockEntity (to fix the existing worlds)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a241d9087c4d6d37630a",
    "number": 10371,
    "body": null,
    "head_branch": "feat/async-teleport-flags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat: Entity#teleportAsync method with TeleportFlags (#10371)\n\n* feat: Entity#teleportAsync method with TeleportFlags\r\n\r\n* use method-local class\r\n\r\n---------\r\n\r\nCo-authored-by: Jake Potrebic <jake.m.potrebic@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a242d9087c4d6d37630b",
    "number": 10369,
    "body": "Fixes #10367.\r\n\r\nTitle. Don't slow an item entity down vertically when they have friction disabled, just like we currently do horizontally.",
    "head_branch": "fix/item-upwards-air-friction",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Disable vertical air friction when item entities have friction disabled (#10369)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a243d9087c4d6d37630c",
    "number": 10366,
    "body": "Closes https://github.com/PaperMC/Paper/issues/10363",
    "head_branch": "fix/npe-drops",
    "is_a_fork": true,
    "comments": [
      "Should probably also be noted on the method javadoc?",
      "yes, updated the doc thanks"
    ],
    "commit_messages": [
      "Don't throw NPE for unplaced blockstate on #getDrops (#10366)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a244d9087c4d6d37630d",
    "number": 10365,
    "body": "Backport some relevant stuff from the generators branch that fit into the main branch\r\n\r\n- Mark the bundle item as experimental, the sounds are so there are no reason to not mark them\r\n- Add `PinkPetals#getMinimumFlowerAmount`, like MachineMaker said in the original PR any int property that doesn't start from zero should have a minimum method (exception is the composter caused by the levelled interface).\r\n- Deprecate `MemoryKey#SNIFFER_EXPLORED_POSITIONS`, this key use the wrong generic type and will (once the sniffer already have a memory key) throw an error on the getter, and corrupt the nbt data on the setter\r\n- Add missing breeze in the bukkitMap for the mob goal generator (the tests have been removed)",
    "head_branch": "from-gen",
    "is_a_fork": true,
    "comments": [
      "I would deprecate `MemoryKey#SNIFFER_EXPLORED_POSITIONS` for removal, if it causes corruption issues."
    ],
    "commit_messages": [
      "Backport some stuff from the generators branch (#10365)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a245d9087c4d6d37630e",
    "number": 10361,
    "body": null,
    "head_branch": "pw-gradle-update",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "build: Update paperweight to 1.5.12 and Gradle Wrapper to 8.7 (#10361)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a246d9087c4d6d37630f",
    "number": 10359,
    "body": "Allow Minecarts and boats to be ticked from any distance",
    "head_branch": "ignore-minecart-in-activation-range",
    "is_a_fork": true,
    "comments": [
      "Proper Paper comments are missing. \nSee the formatting section in the contributing guidelines. \nYour stream was still fun to watch xd. ",
      "Maybe should add a configuration option for this?"
    ],
    "commit_messages": [
      "Ignore minecart in activation range (#10359)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a247d9087c4d6d376310",
    "number": 10358,
    "body": "This is supported behavior by the client, there is no real reason, to my understanding, to prevent this",
    "head_branch": "api/allow-self-unlist",
    "is_a_fork": false,
    "comments": [
      "Maybe we could add a configuration option for that?\r\nEdit: okay, I mistook it for something else",
      "API behaviour should generally not be gated by a config file, if we wanted to keep the existing behaviour we'd need an allowSelf boolean, but, I generally do not see the need for that"
    ],
    "commit_messages": [
      "Allow player-list API to self un/list (#10358)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a248d9087c4d6d376311",
    "number": 10357,
    "body": "- Structure (can already be defined inline in datapacks\r\n- PatternType (can be defined inline in 1.20.5 data components)\r\n- MusicInstrument (same as above)",
    "head_branch": "fix/deprecate-getKey",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Deprecate several Keyed#getKey methods (#10357)\n\n- Structure (can already be defined inline in datapacks\r\n- PatternType (can be defined inline in 1.20.5 data components)\r\n- MusicInstrument (same as above)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a249d9087c4d6d376312",
    "number": 10353,
    "body": "A redo of #10298 since the original author doesn't have enough time to work on their PR. ",
    "head_branch": "KnockbackEventCause",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a24ad9087c4d6d376313",
    "number": 10349,
    "body": "Mostly fixes for when a mutable type is used as a parameter, making sure to clone it before assigning it to a field to prevent unexpected mutation if you mutate the object after using it as a parameter.",
    "head_branch": "fix/mutable-issues",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a24bd9087c4d6d376314",
    "number": 10348,
    "body": "For release notes of this update, They can be found [here](https://docs.gradle.org/8.7/release-notes.html).",
    "head_branch": "gradle-8.7",
    "is_a_fork": true,
    "comments": [
      "After internal discussion, we've decided on having team members handle Gradle updates.",
      "Pwned my PR then."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a24cd9087c4d6d376315",
    "number": 10347,
    "body": "Hey! \r\nWhenever I code plugins, I must choose between saving my game data via PersistentDataContainers or a separate solution.\r\nNormally, I prefer the PersistentDataContainer since you don't have to worry about the data being saved by the Minecraft server.\r\nHowever, if you want to store larger objects with PersistentDataContainers it gets quite handy to store all the data.\r\n\r\nThat is why I have implemented PersistentDataObjects. They are added to PersistentDataContainers and implement serialization functions. It looks similar to the nbt read and write functions of particular types in nms.\r\n\r\nThe benefit of such a system:\r\n\r\nYou can work with objects that can be manipulated with state-changing methods. The serialization of those objects happens when the PersistentDataContainer is serialized.\r\n\r\nCurrent flaws of this system:\r\nSome PersistentDataContainers are serialized after plugins have been unloaded (e.g. Chunks) which results in ClassLoader Problems. Thus, the data containers that contain PersistentDataObjects need to save all objects to the pdc and clear their cache. Currently, a weak datastructure is used to cache all data containers that hold potential objects so they can be saved before plugins are unloaded.\r\n\r\nQuick example:\r\n\r\n```\r\npublic class TestData implements PersistentDataObject {\r\n    public static TestData getTestData(PersistentDataHolder persistentDataHolder){\r\n        return persistentDataHolder.getPersistentDataContainer().getPersistentDataObjectCache().loadOrCreatePersistentDataObject(new NamespacedKey(\"test\",\"test_persistent_data_object\"), new TestData());\r\n    }\r\n    public int testData = 1;\r\n    \r\n    @Override\r\n    public PersistentDataContainer serialize(@NotNull PersistentDataAdapterContext context) {\r\n        PersistentDataContainer persistentDataContainer = context.newPersistentDataContainer();\r\n        persistentDataContainer.set(new NamespacedKey(\"test\",\"test_data\"), PersistentDataType.INTEGER, testData);\r\n        return persistentDataContainer;\r\n    }\r\n\r\n    @Override\r\n    public void deSerialize(PersistentDataContainer persistentDataContainer) {\r\n        if(persistentDataContainer.has(new NamespacedKey(\"test\",\"test_data\"), PersistentDataType.INTEGER))\r\n            this.testData = persistentDataContainer.get(new NamespacedKey(\"test\",\"test_data\"), PersistentDataType.INTEGER).intValue();\r\n    }\r\n\r\n    public TestData setTestData(int testData) {\r\n        this.testData = testData;\r\n        return this;\r\n    }\r\n\r\n    public int getTestData() {\r\n        return testData;\r\n    }\r\n}\r\n```",
    "head_branch": "feature/persistent_data_objects",
    "is_a_fork": true,
    "comments": [
      "Welcome to paper 🎉\n\nGenerally, i can see the need to delay serialisation. Iirc we actually chatted about this a while back.\n\nA major major problem I have with this, is the fact that we are now leaking instances and their respective plugin class loaders into the server state. This means that, if plugin A stores it's persistent data object on player 1, plugin A dies or gets disabled, we now have the server hold onto an object created from a class that is loaded from plugin As class loader even tho that class loader should have long been gone.\n\nIf we don't care about this issue and are fine with leaking this stuff, a way nicer implementation is probably to expand the set method on the PDC to allow users to define if their passed object is serialised directly or not.\n\nThe PDC can just store the passed data object and the persistent data type passed by user to e.g.\n\n```java\nset(NamespacedKey key, PersistentDataType<P,C> type, P instance, bool serialise)\n```\n\nAlternatively we can shift this logic into potentially custom persistent data type implementations.\nEither way I'd much preferred an implementation (if we do, which I am not a fan of in the first place for the previously mentioned issue), to not completely invert an existing API but now having serialisation in two places (PDT and your persistence objects).\n\nWhat also needs to be considered is that, at least rn, the PDC does a proper full copy of the passed data as it serialises it.\nA change like this screams for plugin Devs to be lazy and mutate their passed data objects after passing it to the pdc, which would work but kinda breaks the API contract of the PDC to some degree as people might accidentally mutate data when they previously would not.",
      "We would like to thank you for your contribution here, however, such a feature is a bit too expansive for us to have in the API.\r\nMainly, we prefer that plugins defer the logic for saving themselves here.\r\n\r\n> Some PersistentDataContainers are serialized after plugins have been unloaded (e.g. Chunks) which results in ClassLoader Problems\r\nInstead, plugins should try to store primitive data whenever possible, to prevent issues like this.\r\n\r\nBut as mostly explained by Lynx, this API has some issues in itself that would need to be resolved, but is also something I do not think we are interested in upkeeping.\r\n\r\nThank you very much, we hope to see you again."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a24dd9087c4d6d376316",
    "number": 10346,
    "body": "This moves setting an entity invisible from living entities up to all entities (since vanilla supports it) \r\n\r\nWhy?\r\nEven for default \"invisible\" entities like interaction or item_display the Hitbox and line of sight is always visible when pressing F3+B. This can be a problem if they should be hidden.",
    "head_branch": "invisible",
    "is_a_fork": true,
    "comments": [
      "(Note for PR author, this is being resolved by the merger)"
    ],
    "commit_messages": [
      "Move invisible setting up to entities (#10346)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a24ed9087c4d6d376317",
    "number": 10345,
    "body": "As title says it - for commit history of this dependency, check [here](https://github.com/tibdex/github-app-token/compare/v1.8.0...v2.1.0).",
    "head_branch": "ci-20032024",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a24fd9087c4d6d376318",
    "number": 10342,
    "body": "[That](https://github.com/PaperMC/Paper/pull/10341) but on new branch. :)",
    "head_branch": "particle-builder-additions",
    "is_a_fork": true,
    "comments": [
      "Welcome to paper :tada: \r\n\r\nThank you for first first PR to the project!\r\nYour patch change was incorrect as it did not update the patch index numbers, I fixed that for you.\r\nMake sure to check up on the CONTRIBUTING.md file.\r\n\r\nAdditionally, I changed the nullability of the passed colours to NotNull.\r\n\r\nBeyond that, the changes look good tho :)\r\nCan you review my changes to make sure this still fits what you were hoping to get merged :)",
      "~~We should create a follow up issue targeting 1.21 / 1.20.5 adding support for argb.~~\r\nOr we just use Color.fromARGB(int) to address it. That method is present on org.bukkit.Color already.",
      "Note this is a bit misleading as a lot of other particles can have colors that may not have it defined this way. (Off top of my head, music notes)"
    ],
    "commit_messages": [
      "Add color transition and clone functions to ParticleBuilder (#10342)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a250d9087c4d6d376319",
    "number": 10341,
    "body": "Hello,\r\n\r\nI noticed that the ParticleBuilder class was missing methods for setting the color transition data and lacked the functionality to be cloned. So I added them with the same logic as the other methods so it fits with the rest of the class.\r\n\r\nThank you :)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a251d9087c4d6d37631a",
    "number": 10338,
    "body": "[That](https://github.com/PaperMC/Paper/pull/10337) but on new branch cuz i forgotten.",
    "head_branch": "ci-18032024",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Upstream dependencies in workflow scripts. (#10338)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a252d9087c4d6d37631b",
    "number": 10337,
    "body": "1. Updates the wrapper-validation-action to [v2](https://github.com/gradle/wrapper-validation-action/compare/v2.0.0...v2.1.1),\r\n2. Superseds the old [gradle-build-action](https://github.com/gradle/gradle-build-action) with the new [actions/setup-gradle](https://github.com/gradle/actions) step instead,\r\n3. Updates github-script to [v7](https://github.com/actions/github-script/compare/v7.0.0...v7.0.1).",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a253d9087c4d6d37631c",
    "number": 10335,
    "body": "Problem:\nIf you want to allow builders or other members to build at the spawn but don't want to give them an operator. So Vanilla does not currently offer any possibility. \n\nSolution:\nWithout doing anything hacky, the PR adds a configuration option to Misc on Paper which overrides this problem in combination with a permission.\n\nTest possibility:\n- 2 players join the server\n- One of two gets OP, player 2 can no longer mine within the spawn protection\n\nHere is the JoinEvent test how to test this:\n```java\n    @EventHandler\n    public void onJoin(PlayerJoinEvent event) {\n        PermissionAttachment permissionAttachment = event.getPlayer().addAttachment(this);\n        permissionAttachment.setPermission(\"bukkit.environment.spawnprotection.ignore\", true);\n    }\n``` \n",
    "head_branch": "feature/add-permission-check-for-spawn-protection",
    "is_a_fork": true,
    "comments": [
      "What is the gain of this over just disabling spawn protection and e.g. locking it down with world guard?",
      "To keep the vanilla style and not be dependent on 2 plugins.\r\nIn the problem section it is described that it is specifically intended for vanilla without having to build up your vanilla server. ",
      "Not fond of the perm node, we're not bukkit, it's it's a bypass, not an ignore\r\nConfiguration file changes go into the configuration patch\r\nand the comment needs updating\r\n\r\nI really dislike the notion of having a 1 liner patch for based around mechanism we generally do not encourage people to use, bleh",
      "Yea I mean \"vanilla does not have that ability\" I guess is true, but this isn't vanilla and spawn protection is far from a best practice to use when trying to limit build access. It doesn't have a flag system like world guard nor can you deploy it in different regions.\n\nIt is also easily bypassed by pistons, had weird quirks like not being active without an operator etc.\nMob griefing also iirc works in there? It's far far from a good solution for servers. A bandaid permission that people can use when the proper way is a protection plugin seem more like a false sense of security than anything.",
      "The goal is not to be the \"best solution\", but simply to give players the opportunity to build on the spawn without having to come straight to them with operators. \r\nOperators could then ban players or do other things. In this sense, a permission here would make more sense than coming around the corner with the operator or the whole plugin horde.",
      "I would like to point out that either nobody is allowed to have OP or the spawn protection must be set to 0. There is no in-between. This would be a way to allow this intermediate path and keep the server vanilla as much as possible. Because WorldEdit/FAWE and WorldGuard on top only to allow people to build on spawn via \"flags\". I think that's excessive from my admin and dev point of view\r\n",
      "I mean, this way you are adding a permissions plugin into the mix.\r\nSomething that may also not be present on the \"vanilla\" server. The plugin \"horde\" is now 1 plugin instead of 2. Still with the same previously stated issues and now you install one permissions plugin instead of two (WG + WE) to allow builders to make use of a barely functioning protection mechanism.\r\n\r\nI digress however, while I personally don't care for this patch, other members might so we can leave this up for discussion.",
      "With a heavy heart, I'll close this PR after some more discussion.\r\nThe spawn protection logic exists, but is by far enough to protect your spawn.\r\n\r\nIf you want builders to be the only ones building and changing your spawn, you'll need a proper plugin like WG anyway.\r\nThe fact that WG requires WorldEdit is, to that degree, annoying and I am unsure if you can lobby them to bundle some form of \"minimal region selection\" bs, but it doesn't change the fact that this permission flag is not useful for anything beyond the false hope that spawn protection is a proper region protection concept.\r\n\r\nThis patch makes sense in forks that care for such a niche usecase on their specific server setup, but on the broad spectrum that is paper I don't think it is worth adding :+1: ",
      "Thanks for the feedback. I will hold it in my own fork"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a254d9087c4d6d37631d",
    "number": 10334,
    "body": "Fixes #10331 ",
    "head_branch": "add-entity-physics-modify-methods",
    "is_a_fork": true,
    "comments": [
      "As requested:\r\n* Changed entity physics modify methods, moved to `Missing Entity API` patch\r\n* Merged `Improve Arrow API` patch to `More Projectile API` patch (there was only one method there - `getItemStack()`)",
      "what is this diff bruh",
      "> what is this diff bruh\r\n\r\nYou mean a lot of modified files? One patch was dropped (merged into other), so patches with higher numbers (after dropped patch) had their name changed"
    ],
    "commit_messages": [
      "Add methods to change entity physics (#10334)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a255d9087c4d6d37631e",
    "number": 10333,
    "body": null,
    "head_branch": "fix/BlockData-clone",
    "is_a_fork": true,
    "comments": [
      "Updated this PR to clone mutable types like Location, Vector, and BlockData in event getters in cases where any mutations to them are of no consequence to the server. This prevents event listeners from accidentally mutating the value that subsequent event listeners are trying to access."
    ],
    "commit_messages": [
      "Clone mutable types in events when changes are discarded (#10333)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a256d9087c4d6d37631f",
    "number": 10328,
    "body": "This is a PR for the issue right below\r\n--> #10274 <--\r\n\r\nA quick PR that adds 2 new methods to the `Hopper` interface:\r\n`setTransferCooldown()` and `getTransferCooldown()`\r\nThey change the transfer cooldown of the hopper before it does an item transfer or sucks in an item.",
    "head_branch": "hopper-api",
    "is_a_fork": true,
    "comments": [
      "just wantet to say very nice that this was added. really wantet that for a bit now. "
    ],
    "commit_messages": [
      "Expand Hopper BlockState API (#10328)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a258d9087c4d6d376320",
    "number": 10327,
    "body": "\r\n# EntityDamageDoorEvent: Handle Door Damage Interactions\r\n\r\n## Description\r\nI've introduced a new event called `EntityDamageDoorEvent` in the PaperMC server software. This event is triggered when an entity (currently limited to Zombies and Pillagers by default) damages a door. It provides essential information about the damaged door, the break time, and the total door break time.\r\n\r\nThis implementation takes into account differences in breaking time between zombies (240 ticks) and pillagers (60 ticks).\r\n\r\n## Event Details\r\n- **Event Name**: `EntityDamageDoorEvent`\r\n- **Trigger**: When an entity damages a door\r\n- **Purpose**: To allow developers to handle door damage interactions\r\n\r\n## Key Components\r\n1. **Entity**: The damaging entity (e.g., Zombie, Pillager).\r\n2. **Door**: The door being damaged.\r\n3. **Break Time**: The ticks spent breaking the door.\r\n4. **Door Break Time**: The total ticks required to break the door.\r\n\r\n## Usage Example\r\n```java\r\n@EventHandler\r\npublic void onEntityDamageDoor(EntityDamageDoorEvent event) {\r\n    Entity damagingEntity = event.getEntity();\r\n    Door damagedDoor = event.getDamagedDoor();\r\n    int breakTime = event.getBreakTime();\r\n    int totalBreakTime = event.getDoorBreakTime();\r\n    \r\n    float percentage = ((float) breakTime / totalBreakTime) * 100f;\r\n    if (percentage > 50.0f) {\r\n        e.getNearbyEntities(5, 3, 5).stream()\r\n            .filter(Player.class::isInstance)\r\n            .map(Player.class::cast)\r\n            .forEach(p -> p.sendMessage(\"Your home door is halfway broken, watch out dude :(\"));\r\n    }\r\n    // Additional logic...\r\n}\r\n```",
    "head_branch": "entity-door-damage-event",
    "is_a_fork": true,
    "comments": [
      "If you don't know what lynxplay is talking about: Read the contributing guidelines here: https://github.com/PaperMC/Paper/blob/master/CONTRIBUTING.md",
      "yes I noticed I forgot to merge my patches :(\r\n",
      "Are you going to fix the patch situation or do you want me to do that?",
      "> Are you going to fix the patch situation or do you want me to do that?\r\n\r\nYes please. I truly don't know how to do it. I tried merging my patches and it became even worse."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a259d9087c4d6d376321",
    "number": 10326,
    "body": "# EntityDamageDoorEvent: Handle Door Damage Interactions\r\n\r\n## Description\r\nI've introduced a new event called `EntityDamageDoorEvent` in the PaperMC server software. This event is triggered when an entity (currently limited to Zombies and Pillagers by default) damages a door. It provides essential information about the damaged door, the break time, and the total door break time.\r\n\r\nThis implementation takes into account differences in breaking time between zombies (240 ticks) and pillagers (60 ticks).\r\n\r\n## Event Details\r\n- **Event Name**: `EntityDamageDoorEvent`\r\n- **Trigger**: When an entity damages a door\r\n- **Purpose**: To allow developers to handle door damage interactions\r\n\r\n## Key Components\r\n1. **Entity**: The damaging entity (e.g., Zombie, Pillager).\r\n2. **Door**: The door being damaged.\r\n3. **Break Time**: The ticks spent breaking the door.\r\n4. **Door Break Time**: The total ticks required to break the door.\r\n\r\n## Usage Example\r\n```java\r\n@EventHandler\r\npublic void onEntityDamageDoor(EntityDamageDoorEvent event) {\r\n    Entity damagingEntity = event.getEntity();\r\n    Door damagedDoor = event.getDamagedDoor();\r\n    int breakTime = event.getBreakTime();\r\n    int totalBreakTime = event.getDoorBreakTime();\r\n    \r\n    float percentage = ((float) breakTime / totalBreakTime) * 100f;\r\n    if (percentage > 50.0f) {\r\n        e.getNearbyEntities(5, 3, 5).stream()\r\n            .filter(Player.class::isInstance)\r\n            .map(Player.class::cast)\r\n            .forEach(p -> p.sendMessage(\"Your home door is halfway broken, watch out dude :(\"));\r\n    }\r\n    // Additional logic...\r\n}\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a259d9087c4d6d376322",
    "number": 10320,
    "body": "The streams/collect optimization for findPath accidentally removed a call to profiler.pop() this causes the vanilla profiler to give errors and makes the final profile unusable. This PR fixes that patch to put the profiler.pop() back in. We've been running a built with this patch in as a test and everything seems to work as expected.\r\nThe vanilla profiler is useful in combiniation with spark/build in timings as it gives information neither of these profilers give. \r\n\r\nBefore fix: \r\n```\r\nperf start\r\n[13:36:05 INFO]: Started 10 second performance profiling run (use '/perf stop' to stop early)\r\n[13:36:06 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root.tick'). Mismatched push/pop?\r\n[13:36:06 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root.tick'). Mismatched push/pop?\r\n[13:36:06 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root'). Mismatched push/pop?\r\n[13:36:06 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root'). Mismatched push/pop?\r\n[13:36:07 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root.tick'). Mismatched push/pop?\r\n[13:36:07 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root.tick'). Mismatched push/pop?\r\n[13:36:07 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root'). Mismatched push/pop?\r\n[13:36:07 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root'). Mismatched push/pop?\r\n[13:36:08 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root.tick'). Mismatched push/pop?\r\n[13:36:08 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root.tick'). Mismatched push/pop?\r\n[13:36:08 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root'). Mismatched push/pop?\r\n[13:36:08 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root'). Mismatched push/pop?\r\n[13:36:09 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root.tick'). Mismatched push/pop?\r\n[13:36:09 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root.tick'). Mismatched push/pop?\r\n[13:36:09 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root'). Mismatched push/pop?\r\n[13:36:09 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root'). Mismatched push/pop?\r\n[13:36:10 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root.tick'). Mismatched push/pop?\r\n[13:36:10 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root.tick'). Mismatched push/pop?\r\n[13:36:10 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root'). Mismatched push/pop?\r\n[13:36:10 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root'). Mismatched push/pop?\r\n[13:36:11 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root.tick'). Mismatched push/pop?\r\n[13:36:11 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root.tick'). Mismatched push/pop?\r\n[13:36:11 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root'). Mismatched push/pop?\r\n[13:36:11 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root'). Mismatched push/pop?\r\n[13:36:12 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root.tick'). Mismatched push/pop?\r\n[13:36:12 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root.tick'). Mismatched push/pop?\r\n[13:36:12 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root'). Mismatched push/pop?\r\n[13:36:12 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root'). Mismatched push/pop?\r\n[13:36:13 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root.tick'). Mismatched push/pop?\r\n[13:36:13 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root.tick'). Mismatched push/pop?\r\n[13:36:13 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root'). Mismatched push/pop?\r\n[13:36:13 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root'). Mismatched push/pop?\r\n[13:36:14 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root.tick'). Mismatched push/pop?\r\n[13:36:14 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root.tick'). Mismatched push/pop?\r\n[13:36:14 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root'). Mismatched push/pop?\r\n[13:36:14 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root'). Mismatched push/pop?\r\n[13:36:15 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root.tick'). Mismatched push/pop?\r\n[13:36:15 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root.tick'). Mismatched push/pop?\r\n[13:36:15 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root'). Mismatched push/pop?\r\n[13:36:15 ERROR]: Profiler tick ended before path was fully popped (remainder: 'root'). Mismatched push/pop?\r\n[13:36:16 INFO]: Stopped performance profiling after 10.04 second(s) and 206 tick(s) (20.52 tick(s) per second)\r\n[13:36:16 INFO]: Flushed metrics to C:\\Users\\suppergerrie2\\AppData\\Local\\Temp\\minecraft-profiling11374737644406307100\\server\\metrics\\event-loops.csv\r\n[13:36:16 INFO]: Flushed metrics to C:\\Users\\suppergerrie2\\AppData\\Local\\Temp\\minecraft-profiling11374737644406307100\\server\\metrics\\cpu.csv\r\n[13:36:16 INFO]: Flushed metrics to C:\\Users\\suppergerrie2\\AppData\\Local\\Temp\\minecraft-profiling11374737644406307100\\server\\metrics\\jvm.csv\r\n[13:36:16 INFO]: Flushed metrics to C:\\Users\\suppergerrie2\\AppData\\Local\\Temp\\minecraft-profiling11374737644406307100\\server\\metrics\\ticking.csv\r\n[13:36:16 ERROR]: Negative index in crash report handler (18/19)\r\n[13:36:16 ERROR]: Negative index in crash report handler (18/19)\r\n[13:36:17 ERROR]: Negative index in crash report handler (18/19)\r\n[13:36:18 INFO]: Compressed to debug\\profiling\\2024-03-13_13_36_17-world-1_20_4.zip\r\n[13:36:18 INFO]: Created debug report in 2024-03-13_13_36_17-world-1_20_4.zip\r\n```\r\n\r\nAfter fix:\r\n```\r\nperf start\r\n[13:27:59 INFO]: Started 10 second performance profiling run (use '/perf stop' to stop early)\r\n[13:28:09 INFO]: Stopped performance profiling after 10.02 second(s) and 203 tick(s) (20.26 tick(s) per second)\r\n[13:28:09 INFO]: Flushed metrics to C:\\Users\\suppergerrie2\\AppData\\Local\\Temp\\minecraft-profiling7339135420459383361\\server\\metrics\\event-loops.csv\r\n[13:28:09 INFO]: Flushed metrics to C:\\Users\\suppergerrie2\\AppData\\Local\\Temp\\minecraft-profiling7339135420459383361\\server\\metrics\\cpu.csv\r\n[13:28:09 INFO]: Flushed metrics to C:\\Users\\suppergerrie2\\AppData\\Local\\Temp\\minecraft-profiling7339135420459383361\\server\\metrics\\ticking.csv\r\n[13:28:09 INFO]: Flushed metrics to C:\\Users\\suppergerrie2\\AppData\\Local\\Temp\\minecraft-profiling7339135420459383361\\server\\metrics\\jvm.csv\r\n[13:28:10 ERROR]: Negative index in crash report handler (18/19)\r\n[13:28:10 ERROR]: Negative index in crash report handler (18/19)\r\n[13:28:10 ERROR]: Negative index in crash report handler (18/19)\r\n[13:28:12 INFO]: Compressed to debug\\profiling\\2024-03-13_13_28_11-world-1_20_4.zip\r\n[13:28:12 INFO]: Created debug report in 2024-03-13_13_28_11-world-1_20_4.zip\r\n```",
    "head_branch": "fix_profiler",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix missing profiler.pop() in PathFinder::findPath (#10320)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a25ad9087c4d6d376323",
    "number": 10318,
    "body": "tempermental -> temperamental",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Update CONTRIBUTING.md (#10318)\n\ntempermental -> temperamental"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a25cd9087c4d6d376324",
    "number": 10314,
    "body": "I fixed this in my Paper fork, I figured this was a good enough change to PR upstream so other people can enjoy the fix!\r\n\r\nIt works by accessing the settings of the NoiseBasedChunkGenerator and checking if it has amplified or large biome settings! and I've tested it to make sure it works too\r\n\r\nFirst time making a PR to a project like this, so hopefully I did it correctly!",
    "head_branch": "world_type_fix",
    "is_a_fork": true,
    "comments": [
      "After some more discussion, I think the immediate solution is to add this fix, but at the same time, also add the missing options to WorldType, which include the missing NoiseGeneratorSettings types, like caves, and floating islands. ",
      "> After some more discussion, I think the immediate solution is to add this fix, but at the same time, also add the missing options to WorldType, which include the missing NoiseGeneratorSettings types, like caves, and floating islands.\r\n\r\nAlright I can do that\r\n\r\nWhat about my idea of also adding `isFlat()`, `isAmplified()` methods? should I add that too or leave it be for you guys to figure out a better plan?",
      "> What about my idea of also adding isFlat(), isAmplified() methods?\r\n\r\nNo, I don't think so."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a25dd9087c4d6d376325",
    "number": 10313,
    "body": "I fixed this in my Paper fork, I figured this was a good enough change to PR upstream so other people can enjoy the fix!\r\n\r\nIt works by accessing the settings of the NoiseBasedChunkGenerator and checking if it has amplified or large biome settings! and I've tested it to make sure it works too\r\n\r\nFirst time making a PR to a project like this, so hopefully I did it correctly!",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a25ed9087c4d6d376326",
    "number": 10312,
    "body": "This is a PR as a response to #10309.\r\n\r\nWhat i have done here is by no means final and just an attempt to find a way to check if it is the \"initial\" start of a server. \r\n~~I decided to go for the `server.properties` file because this is the first file that came to my mind that you wouldnt really delete.~~ I am now using the global configuration to determine if it's the initial start. \r\n\r\nBasically, I am checking if the file exists and set a boolean if it doens't. After the server has been started, I check that boolean and print a message if it's the initial start. \r\nObviously, you could just delete the file and get that message again so it wouldn't be the \"initial\" start anymore. So, if you have any other idea how to handle this, please leave feedback. \r\n\r\nThe GUI is also modified to contain a message and links to the onboarding page. \r\nThe message is also not final. \r\n\r\nThis would also allow for a `InitialServerStartEvent` later on once this is merged.",
    "head_branch": "initialStartInfo",
    "is_a_fork": true,
    "comments": [
      "I think most of the time people that are starting the server for the first time see the eula message, I think it may be good enough to just add the additional info with the link to documentation after/before the eula message",
      "> I think most of the time people that are starting the server for the first time see the eula message, I think it may be good enough to just add the additional info with the link to documentation after/before the eula message\r\n\r\nI think that would be too early. ",
      "I like the idea of improving the onboarding process",
      "I'm not 100% sure about storing Paper things in the server.properties file. This would be the first time for Bukkit, Spigot and Paper to add a new value there.\nWhile it's not really gonna cause issues, this doesn't seem like the proper thing to do. IMO just using the paper global configuration would be fine - yes you get the message again if you delete your config, but it's just a log message, not a big deal, and idk if the event really is needed. There's a good chance users have no plugins installed during the first startup anyways. \n\nI do agree that the EULA is too early though. Some panels also realise EULA acceptance with a checkbox or similar, so not everyone will see it. \n",
      "> I'm not 100% sure about storing Paper things in the server.properties file.\n\nI'm not sure if I'm actually storing something in the server.properties. Besides that,  thinking further this might still be too early. ~~Ideally the message would be shown after the first successful server start. So if a plugin crashes the server the message won't be shown at all since at the next startup the server.properties file already exists.~~\n",
      "You are absolutely right. This is generally for people who set up a server for their first time. They won't have plugins if they do it for their first time. I will change it to the global config tomorrow. \n\nAnother thing: We could send the same message to the first person joining the server. Or would that be too much? ",
      "> Another thing: We could send the same message to the first person joining the server. Or would that be too much?\r\n\r\nYeah I definitely wouldn't be sending the message to the first person joining. Just having it in console is fine in my opinion.\r\n",
      "If we're going to add an onboarding message, we really should have an onboarding docs page. Just linking to a category is not really accessible, IMHO, and just leaves more \"where do I go\" questions than it answers;\r\n\r\nWe might also want to consider adding a header message to the GUI app too, in order to provide a clickable link for people not using a terminal",
      "> If we're going to add an onboarding message, we really should have an onboarding docs page. Just linking to a category is not really accessible, IMHO, and just leaves more \"where do I go\" questions than it answers;\n\nThat was the plan anyway I think. \n\n> We might also want to consider adding a header message to the GUI app too, in order to provide a clickable link for people not using a terminal\n\nGood idea. \n\n",
      "I addressed the comments and added a message in the GUI. It is centered by default, idk if we leave it that way. Also, should we display it always? IMO yeah. \r\n![image](https://github.com/PaperMC/Paper/assets/59799222/44b430a2-d947-4a5f-8197-5878e5e80143)\r\n",
      "Looks good GUI wise - is the link clickable? It can stay for the entire of the first launch I think. \r\n\r\nOnce I have made my page you can use that as a link - PR blocked by docs for now. ",
      "> It can stay for the entire of the first launch I think.\r\n\r\nI am more talking of a permanent component of this GUI. Like it doesn't really take up that much space and I think the GUI is used by relatively new people anyways. \r\n\r\n> is the link clickable?\r\n\r\nyes.\r\n\r\n> Once I have made my page you can use that as a link - PR blocked by docs for now.\r\n\r\nObviously, I just used it as a placeholder. ",
      "1. add a colon after \"you can visit\"   `...you can visit: <link>`\r\n1. make it obvious that the link is clickable, e.g. underlined and set to the color blue\r\n\r\n> I am more talking of a permanent component of this GUI. Like it doesn't really take up that much space and I think the GUI is used by relatively new people anyways.\r\n\r\nWouldn't hurt to permanently have it available in the GUI. It could also be abstracted into some kind of banner with rotating text.",
      "Docs have been merged :) - https://docs.papermc.io/paper/next-steps",
      "Thanks Ollie. \r\nI changed the link, made it clear that its clickable (decided against a blue link since i don't think it would fit in the GUI if everything else is just black) and added more catches.  \r\n![image](https://github.com/PaperMC/Paper/assets/59799222/000fdcd2-d914-4e67-9fe7-b713ac84f858)\r\n",
      "Yeah I like that, nice work"
    ],
    "commit_messages": [
      "Add onboarding message for initial server start (#10312)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a25fd9087c4d6d376327",
    "number": 10308,
    "body": null,
    "head_branch": "fix/missed-overrides",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add param to overrides to the correct method is called (#10308)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a260d9087c4d6d376328",
    "number": 10307,
    "body": "Uses the correct entity in the EntityDamageByEntity event Returns the correct entity for API's DamageSource#getCausingEntity\r\n\r\nSuperceeds https://github.com/PaperMC/Paper/pull/10275\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-10307.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/1332142312.zip)",
    "head_branch": "fix/DamageSource-API",
    "is_a_fork": true,
    "comments": [
      "In a fast check i wanna ask.. this make the thing i mention in upstream about now DamageEvent#getDamager is not the same than DamageSource#getEntity? if that is the case this make a inconsistence beetween plugins running in Paper and Spigot not? (well that its not relevant...)",
      "For explosions looks is working fine.\r\nFor tests cases where now is used customCausingEntity the DamageSource has null direct/causing entity causing like i said this sounds inconsistent.. and make a user better handle in the event for damager rather than try to use DamageSource for that info\r\n\r\nthe change in how name the field sounds like a thing i mention in discord when discuss this topic (https://canary.discord.com/channels/289587909051416579/555462289851940864/1215314826469834823) but for lazy i dont try make that change.. not sure if sounds good backport that part of the change or just ignore."
    ],
    "commit_messages": [
      "Fix DamageSource API (#10307)\n\nUses the correct entity in the EntityDamageByEntity event\r\nReturns the correct entity for API's DamageSource#getCausingEntity"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a261d9087c4d6d376329",
    "number": 10306,
    "body": "Fire `EntityChangeBlockEvent` after a Bee is released from a Beehive, when bee deposits nectar to the beehive.\r\n\r\n\r\n**Can be used to e.g.:**\r\n* change amount of deposited nectar, modify final hive's honey level after deposition (deposited nectar amount is normally 1 or 2, we can set the value to e.g. 5)\r\n* use in various mechanisms\r\n* just cancel deposit of nectar to the hive",
    "head_branch": "beehive-nectar-deposit-event",
    "is_a_fork": true,
    "comments": [
      "So I started testing\r\n\r\nI changed Paper-server code of BeehiveBlockEntity as follows:\r\n```java\r\n// Paper start - Fire EntityChangeBlockEvent in more places\r\nBlockState newBlockState = iblockdata.setValue(BeehiveBlock.HONEY_LEVEL, i + j);\r\n\r\nif (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(entitybee, blockposition, newBlockState)) {\r\n    world.setBlockAndUpdate(blockposition, newBlockState);\r\n}\r\n// Paper end - Fire EntityChangeBlockEvent in more places\r\n```\r\nand modified my test plugin:\r\n```java\r\n@EventHandler\r\npublic void onNectarDeposit(EntityChangeBlockEvent e) {\r\n    if (!(e.getBlockData() instanceof Beehive newBeeHive)) return;\r\n    if (!(e.getEntity() instanceof Bee bee)) return;\r\n\r\n    Beehive oldBeeHive = (Beehive) e.getBlock().getBlockData();\r\n\r\n    int oldHoneyLevel = oldBeeHive.getHoneyLevel();\r\n    int newHoneyLevel = newBeeHive.getHoneyLevel();\r\n    int difference = newHoneyLevel-oldHoneyLevel;\r\n\r\n    Location beehiveLoc = e.getBlock().getLocation();\r\n\r\n    String debug = \"[NectarDepositListener] <yellow>Bee \" + e.getEntity().getUniqueId() +\r\n            \" <white>dropped <gold>\" + difference +\r\n            \" nectars <white>into \"+\r\n            \" <yellow>Beehive at x: \" + beehiveLoc.getBlockX() + \", y: \" + beehiveLoc.getBlockY() + \", z: \" + beehiveLoc.getBlockZ() + \"<white>.\" +\r\n            \" The <aqua>old honey level <white>is <aqua>\" + oldHoneyLevel + \"<white>, <light_purple>new honey level <white>is <light_purple>\" + newHoneyLevel;\r\n\r\n    Bukkit.getServer().sendMessage(MiniMessage.miniMessage().deserialize(debug));\r\n\r\n    ((Beehive) e.getBlockData()).setHoneyLevel(5);\r\n}\r\n```\r\n\r\nThe output from plugin (debug message) is sent correctly - it shows values *before* modifying:\r\n![image](https://github.com/PaperMC/Paper/assets/46265094/19a14775-617d-46ef-ba3d-ada4b6b752ec)\r\n\r\nBut the honey level of the hive does not change, it increases as if its value is not changed. No errors in console. Are you sure that the new block state is mutable/effective?\r\n",
      "It technically is, however the existing logic does not feed it back.\r\nyou are passing the NMS one. @Machine-Maker given no other call seems to respect \"mutating\" the block data of entity block change event, what is the best way to process here?\r\n\r\nI mean, tbf, we could just stick to cancel + set yourself.",
      "Sure, I understand - I was planning to change this to fire EntityChangeBlockEvent, just will look into it when I have some time :>",
      "Done"
    ],
    "commit_messages": [
      "Fire EntityChangeBlockEvent on beehive nectar deposit (#10306)\n\n* Add BeehiveNectarDepositEvent\r\n\r\n* Fire EntityChangeBlockEvent instead of a separate event"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a262d9087c4d6d37632a",
    "number": 10304,
    "body": "resolves #10295 \r\ni wasn't able to prevent the player from trying to stop using the item so i just added a little warning to the startUsingItem method. \r\n(Also there is a \"Add LivingEntity#clearActiveItem\" patch which could be merged into this patch. But because i am not a lunatic and i don't find fun in spending my day rebasing 500 renamed files, i will leave that to a paper dev if anyone wants to merge them)",
    "head_branch": "item-use-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add more item use API (#10304)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a263d9087c4d6d37632b",
    "number": 10303,
    "body": null,
    "head_branch": "bump-tiny-remapper",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "build: Update tiny-remapper to 0.10.1 & remove unused repo from dev bundle config (#10303)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a264d9087c4d6d37632c",
    "number": 10302,
    "body": "Fixes #10186.\r\n\r\n~~Patch previously modified the power of the projectile, which actually controls how fast it accelerates. It now uses `AbstractHurtingProjectile#setDirection`, which also sets the power, but uses the default magnitude of `0.1`.~~\r\n\r\n~~Considered also directly exposing the power, but was unsure exactly on the best approach of implementing it. `AbstractHurtingProjectile#setDirection` assumes a magnitude of `0.1`, which would need changing if power could be changed. Could either calculate the magnitude from the current power on setting direction, which would need some consideration for when the projectile is created, or including a field for it that's set when the power is modified.~~\r\n\r\nNow entirely reverts the original patch, and adds a javadoc comment to `Fireball#setVelocity` to note that fireballs accelerate in the direction of their power. Also added `Fireball#setPower` and `Fireball#getPower` to control the power of the projectile. Currently `Fireball#getDirection` and `Fireball#getPower` do the same thing - should I remove `Fireball#getPower` or deprecate `Fireball#getDirection` for its misleading name?",
    "head_branch": "fireball-velocity",
    "is_a_fork": true,
    "comments": [
      "~~On second thought, is setting the direction when you set the velocity even a sensible thing to do? Perhaps just a javadoc note on `Fireball#setVelocity` is necessary to clarify that setting the velocity does not change the direction the fireball accelerates?~~ Ended up doing this."
    ],
    "commit_messages": [
      "Expose power on fireballs (#10302)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a265d9087c4d6d37632d",
    "number": 10301,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n7ca2b46c SPIGOT-7594: Fix typo and include missing MinecraftExperimental annotation in Loot Table enum\r\n\r\nCraftBukkit Changes:\r\n176c0ad39 Fix copying BlockStates with fields (eg, Banner)\r\nee685bd2a Fix Camel not standing up when hurt\r\n619936d4b Increase outdated build delay",
    "head_branch": "update-upstream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#10301)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n7ca2b46c SPIGOT-7594: Fix typo and include missing MinecraftExperimental annotation in Loot Table enum\r\n\r\nCraftBukkit Changes:\r\n176c0ad39 Fix copying BlockStates with fields (eg, Banner)\r\nee685bd2a Fix Camel not standing up when hurt\r\n619936d4b Increase outdated build delay"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a266d9087c4d6d37632e",
    "number": 10300,
    "body": "Added a `BlockBreakProgressUpdateEvent`, which allows you to listen for block break animation progress updates",
    "head_branch": "feat/progress-event",
    "is_a_fork": true,
    "comments": [
      "updated to use Event#callEvent"
    ],
    "commit_messages": [
      "Add BlockBreakProgressUpdateEvent (#10300)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a267d9087c4d6d37632f",
    "number": 10298,
    "body": "[https://github.com/PaperMC/Paper/issues/10296](url)",
    "head_branch": "feat/add-causes-to-EntityKnockbackByEntityEvent",
    "is_a_fork": true,
    "comments": [
      "Why was this closed?",
      "> Why was this closed?\n\nSorry, but I don't have free time to work on this PR at the moment"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a268d9087c4d6d376330",
    "number": 10297,
    "body": "[https://github.com/PaperMC/Paper/issues/10296](url)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a269d9087c4d6d376331",
    "number": 10290,
    "body": "This leads to discussion in regards to `ItemStack#setType`, which currently is not supported by vanilla, but is reintroduced by spigot.\r\n\r\nThis method possibly allows for unsafe behavior, as illegal item types can be passed in places that may occur after item validation.\r\n\r\nThis is most evident in event calls, where it is possible to induce server crashes in some cases due to developers putting illegal item types in ItemStacks in the wrong places.\r\n\r\n ",
    "head_branch": "preemptive-item-work",
    "is_a_fork": true,
    "comments": [
      "Any chance for something like `ItemStack#withType` which will return a new ItemStack with desired type and applicable ItemMeta?",
      "withType has been added.",
      "Resolved, thanks lulu."
    ],
    "commit_messages": [
      "Deprecate ItemStack#setType & add ItemStack#withType (#10290)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a26ad9087c4d6d376332",
    "number": 10288,
    "body": "resolves #10137 \r\nno idea if there are any other blocks that grant effects, conduits and beacons are the only ones i know of",
    "head_branch": "Add-BlockPlayerSearchEvent",
    "is_a_fork": true,
    "comments": [
      "`BlockSearchPlayerEvent` sounds better IMO",
      "I agree, however i will wait since i am sure maintainers are gonna have something to say about the naming too",
      "I'd say BlockSearchPlayersEvent "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a26bd9087c4d6d376333",
    "number": 10285,
    "body": "Avoids an issue where unstackable items are checked against themselves when an inventory is full of items.\r\n\r\nFor more context to paper devs who are in the purpur discord: https://discord.com/channels/685683385313919172/697248751575761057/1211147576213119006\r\n\r\nThis can and should be merged into a pre-existing patch - I'm not sure which one so I've left it as it's own for now.",
    "head_branch": "fix/inventory-itemstack-check",
    "is_a_fork": true,
    "comments": [
      "> I believe that there is already a semi-related patch which does something similar elsewhere that this could be merged in-to as said\r\n\r\nThis patch only partially fixes the problem, because the server will be overloaded with sending notifications that will show up as broadcastChanges() in spark.lucko.me.",
      "sending/dealing with a lot of nested data is always going to suck, theres not too much that can be done about that unless you have full control over stuff"
    ],
    "commit_messages": [
      "check if itemstack is stackable first (#10285)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a26cd9087c4d6d376334",
    "number": 10284,
    "body": "resolves #9889 \r\n\r\n# TODO:\r\n\r\n- [ ] Implement and call event\r\n- [ ] finish implementing BiomesSnapshot\r\n- [ ] add a handle to Chunk\r\n- [ ] test api with plugin\r\n- [ ] test compatibility with plugins using PlayerChunkLoadEvent\r\n- [ ] reduce diff\r\n- [ ] add paper comments",
    "head_branch": "issue/9889-chunk-biome-packets",
    "is_a_fork": true,
    "comments": [
      "~~We have a more generalized idea for something like this via our registry api, prolly better to wait.~~\r\n\r\n~~Would allow us to make any registry modifiable.~~\r\n Nvm, wrong thing.",
      "I'm thinking it would still be useful to get the biomes being sent by vanilla. Right now, the event is only dealing with any overrides. Implementing this might also be way nicer if this event was implemented on the server side. So the creation of BiomeSnapshots could be done in a lazy fashion to avoid creating snapshots for everything just to call the event.",
      "post hard fork pr: https://github.com/PaperMC/Paper/pull/11799"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a26dd9087c4d6d376335",
    "number": 10283,
    "body": "Previously paper disabled the abilities for entities to teleport via end gateways if they were being used as a vehicle.\r\n\r\nWhile the behaviour generally worked fine for entities riding other entities, players would quickly end up in an invalid state, not seeing their passenger anymore.\r\n\r\nThis commit removes the paper introduced limitation by now properly updating the passengers location of a player when they are teleporting through an end gateway.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-10283.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/1312163367.zip)",
    "head_branch": "enhancement/allow-for-safe-passanger-teleport-via-endgateway",
    "is_a_fork": true,
    "comments": [
      "Successor of #9521",
      "passangers -> passengers 😅"
    ],
    "commit_messages": [
      "Allow passenger retaining teleport via end gateway (#10283)\n\nPreviously paper disabled the abilities for entities to teleport via end\r\ngateways if they were being used as a vehicle.\r\n\r\nWhile the behaviour generally worked fine for entities riding other\r\nentities, players would quickly end up in an invalid state, not seeing\r\ntheir passenger anymore.\r\n\r\nThis commit removes the paper introduced limitation by now properly\r\nupdating the passengers location of a player when they are teleporting\r\nthrough an end gateway."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a26fd9087c4d6d376336",
    "number": 10281,
    "body": "Expands the existing close_invalid_prs workflow to also close prs that were opened from repositories not owned by user accounts. This is required as such PRs cannot be edited by maintainers.\r\n\r\nThe implementation re-uses the existing job instead of creating a new job to limit the amount of checks to the bare minimum.",
    "head_branch": "enhancement/close-org-opened-prs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Close PRs opened from orgs or bot accounts (#10281)\n\nExpands the existing close_invalid_prs workflow to also close prs that\r\nwere opened from repositories not owned by user accounts.\r\nThis is required as such PRs cannot be edited by maintainers.\r\n\r\nThe implementation re-uses the existing job instead of creating a new\r\njob to limit the amount of checks to the bare minimum."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a270d9087c4d6d376337",
    "number": 10279,
    "body": "Fix corrupted plugin.yml file in one plugin not loading any plugins by the server.\r\n\r\nSupersedes #10268",
    "head_branch": "bugfix/respect-error-in-plugin-updating",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix corrupted plugin.yml breaking plugin loading (#10279)\n\nFix corrupted plugin.yml file in one plugin not loading any plugins by\r\nthe server.\r\n\r\nCo-authored-by: Aleksander Jagiello <themolkapl@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a271d9087c4d6d376338",
    "number": 10278,
    "body": null,
    "head_branch": "weeee",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a272d9087c4d6d376339",
    "number": 10277,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n9a80d38c SPIGOT-336, SPIGOT-3366, SPIGOT-5768, SPIGOT-6409, SPIGOT-6861, PR-722: Add EntityRemoveEvent 258086d9 SPIGOT-7417, PR-967: Add Sign#getTargetSide and Sign#getAllowedEditor ffaba051 SPIGOT-7584: Add missing Tag.ITEMS_NON_FLAMMABLE_WOOD\r\n\r\nCraftBukkit Changes:\r\n98b6c1ac7 SPIGOT-7589 Fix NullPointerException when bans expire a2736ddb0 SPIGOT-336, SPIGOT-3366, SPIGOT-5768, SPIGOT-6409, SPIGOT-6861, PR-1008: Add EntityRemoveEvent 5bf12cb89 SPIGOT-7565: Throw a more descriptive error message when a developer tries to spawn an entity from a CraftBukkit class 76d95fe7e SPIGOT-7417, PR-1343: Add Sign#getTargetSide and Sign#getAllowedEditor\r\n\r\nSpigot Changes:\r\ne9ec5485 Rebuild patches\r\nf1b62e0c Rebuild patches",
    "head_branch": "up",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#10277)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n9a80d38c SPIGOT-336, SPIGOT-3366, SPIGOT-5768, SPIGOT-6409, SPIGOT-6861, PR-722: Add EntityRemoveEvent\r\n258086d9 SPIGOT-7417, PR-967: Add Sign#getTargetSide and Sign#getAllowedEditor\r\nffaba051 SPIGOT-7584: Add missing Tag.ITEMS_NON_FLAMMABLE_WOOD\r\n\r\nCraftBukkit Changes:\r\n98b6c1ac7 SPIGOT-7589 Fix NullPointerException when bans expire\r\na2736ddb0 SPIGOT-336, SPIGOT-3366, SPIGOT-5768, SPIGOT-6409, SPIGOT-6861, PR-1008: Add EntityRemoveEvent\r\n5bf12cb89 SPIGOT-7565: Throw a more descriptive error message when a developer tries to spawn an entity from a CraftBukkit class\r\n76d95fe7e SPIGOT-7417, PR-1343: Add Sign#getTargetSide and Sign#getAllowedEditor\r\n\r\nSpigot Changes:\r\ne9ec5485 Rebuild patches\r\nf1b62e0c Rebuild patches"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a273d9087c4d6d37633a",
    "number": 10275,
    "body": "This fix #10273 making the damager selector use the same logic than Projectile for every case, directEntity is who cause the damage (the damager).\r\n\r\nif any can enable the jar for allow users test another bahaviours.. i test the basic based in my upstream PR for make sure this change not break any thing.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-10275.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/1267366590.zip)",
    "head_branch": "fix/10273/damager-for-explosion-in-damage-events",
    "is_a_fork": true,
    "comments": [
      "This does indeed fix the problem with fireworks.\r\n\r\nThe issue with the causing entity for some other explosions (i.e. TNT) being wrong is still a thing, though. As far as I can tell, the usage of `DamageSource#customCausingEntity` here:\r\nhttps://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/browse/nms-patches/net/minecraft/world/level/Explosion.patch#42-43\r\nIs unnecessary as a result of this patch, as the direct entity and the set custom causing entity here are always the same, after checking the usages of `Explosion`. Whenever the `damagesource` is non-null, its direct entity is always the source entity passed to the constructor, and `world.damageSources().explosion(this)` uses the `Explosion`'s source entity for the direct entity. Reverting this line should fix that issue.\r\n",
      "> This does indeed fix the problem with fireworks.\r\n> \r\n> The issue with the causing entity for some other explosions (i.e. TNT) being wrong is still a thing, though. As far as I can tell, the usage of `DamageSource#customCausingEntity` here: https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/browse/nms-patches/net/minecraft/world/level/Explosion.patch#42-43 Is unnecessary as a result of this patch, as the direct entity and the set custom causing entity here are always the same, after checking the usages of `Explosion`. Whenever the `damagesource` is non-null, its direct entity is always the source entity passed to the constructor, and `world.damageSources().explosion(this)` uses the `Explosion`'s source entity for the direct entity. Reverting this line should fix that issue.\r\n\r\nYeah i notice that in a few test... I remember set that for a reason.. and i forgot that reason now xd\r\nMy approach is more edit the method where the custom causing entity is set and make ignore the set if the entity passed is the direct entity, or the customCausingEntity is already set or if the entity passed is null for avoid mess in the CB bahaviour",
      "@TonytheMacaroni PR updated for avoid the customCausingMethod set the value if.\r\n- The customCausingEntity is already set\r\n- The causingEntity is the same than the entity passed\r\n- The directEntity is the same than the entity passed\r\n\r\nthis can solve the most of issues related to this auxiliar field...",
      "That would fix the issue with TNT, but still, the call to `customCausingEntity` isn't needed in `Explosion`? That's the only area that that method causes this specific issue.\r\n\r\nAnd the behavior of `customCausingEntity` is still quite suspect. Take evoker fangs, if it has an owner, the direct entity is the fangs and the owner is the causing entity. But without an owner, `customCausingEntity` makes the fangs the causing entity and doesn't set a direct entity. Similar issue with its usage with ender pearls and lightning - they each can have their own owners that should be the causing entity, and the direct entity is also never set in these cases. The inconsistency wouldn't really matter if `net.minecraft.world.damagesource.DamageSource#getCausingEntity` was only used for the damage events, but it's also exposed in the API as `org.bukkit.damage.DamageSource#getCausingEntity`.",
      "> That would fix the issue with TNT, but still, the call to `customCausingEntity` isn't needed in `Explosion`? That's the only area that that method causes this specific issue.\r\n> \r\n> And the behavior of `customCausingEntity` is still quite suspect. Take evoker fangs, if it has an owner, the direct entity is the fangs and the owner is the causing entity. But without an owner, `customCausingEntity` makes the fangs the causing entity and doesn't set a direct entity. Similar issue with its usage with ender pearls and lightning - they each have their own owners that should be the causing entity, and the direct entity is also never set in these cases. The inconsistency wouldn't really matter if `net.minecraft.world.damagesource.DamageSource#getCausingEntity` was only used for the damage events, but it's also exposed in the API as `org.bukkit.damage.DamageSource#getCausingEntity`.\r\n\r\nThe WindCharge make a few things to the damagesource... i point to the upstream PR where talking with Machine suggest a form to handle the static field in the explosion. https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/pull-requests/1180/overview?commentId=12404\r\n\r\nabout the Bukkit class and the using of getCausingEntity add the another comment where this was mentioned too. https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/pull-requests/1180/overview?commentId=12426",
      "Just to note, I don't have an account to view the upstream comments you're referring to.",
      "> Just to note, I don't have an account to view the upstream comments you're referring to.\r\n\r\noh...\r\n\r\n- The customCausingEntity was make for allow the old static damager set using a static field in CB then need handle that in all places where was placed.. in the case of explosions in the constructor or in another case pass a custom damagesource for that, for this i rewrite a little the method where set the custom causing entity for avoid mistakes\r\n- This customCausingEntity is taken over the causingEntity from vanilla for make DamageSource in bukkit side reflect the custom changes in CB/Paper and avoid things like DamageSource show WindCharge with not causing or direct entity and CB set the causing entity for that\r\n\r\ni hope all this can help... i make more tests and the results for projectiles and another explosions looks valid.",
      "Minor spelling issue: `priorice` > `prioritise`/`prioritize`. Present both in [comment](https://github.com/PaperMC/Paper/pull/10275/files#diff-e7daef737934ff92ad2e55ec883170e33ddaa94f42a33bcd7861add5107356c8R27), PR title, and commit message, though only the first might matter for future context.",
      "Superseded by https://github.com/PaperMC/Paper/pull/10307 , Thank you for your contribution regardless. 😄 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a274d9087c4d6d37633b",
    "number": 10268,
    "body": "Fix corrupted plugin.yml file in one plugin (or more) not loading any plugins by the server.\r\n\r\nThe bug puts the server in a dangerous state where vanilla worlds (overworld, nether and the end) are loaded, server is accessible to players, but no plugins are loaded and enabled. To reproduce the bug 1) create `update` directory inside `plugins`, 2) put a valid and a corrupted plugin JAR in `plugins`. By \"corrupted\" I mean plugin that is eg. missing the `plugin.yml` file, or the file has the wrong YAML syntax. 3) Start the server\r\n\r\nThe issue has been discovered by one of our clients, we reproduced it, fixed and sent to you to merge it to upstream.",
    "head_branch": "fix-corrupted-plugin-yml-files",
    "is_a_fork": true,
    "comments": [
      "Future plans, we certainly need to stricten server starting anyways. As plugins get more and more important for the server lifecycle, data loss will be possible in the future.\r\n\r\nI think this should be fine for now.",
      "Wouldn't the better place to catch this be in the `DirectoryProviderSource`'s prepareContext ?\r\n\r\nThis is treating a single symptom instead of the fact that we currently do not catch exceptions in walkFiles on there.",
      "Yes the general catching here could prolly be expanded.",
      "Implemented by https://github.com/PaperMC/Paper/pull/10279, thank you!\r\n\r\nFor future PRs, please open them from a user account.\r\nOrg owned forks cannot be modified by maintainers so we had to open a new PR instead of being able to reuse yours."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a275d9087c4d6d37633c",
    "number": 10267,
    "body": "I haven't contributed to Paper yet so I'm not sure if this is all correct. I feel like this is useful since healing an entity is a pretty common use case and there already is a heal method in NMS.",
    "head_branch": "entity-heal-api",
    "is_a_fork": true,
    "comments": [
      "I've added the missing annotations required by the tests. However after some discussion on Discord I believe the healing either needs to happen without calling an event or there needs to be some sort of flag to control whether or not the EntityRegainHealthEvent is called."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a276d9087c4d6d37633d",
    "number": 10266,
    "body": "This allows to limit the maximum fluid and blocks ticks per server tick. I used this option limit the performance impact of large redstone contraptions; Specifically large glow berry farms with a lot of flowing water.",
    "head_branch": "max-ticks",
    "is_a_fork": true,
    "comments": [
      "> This allows to limit the maximum fluid and blocks ticks per server tick. I used this option limit the performance impact of large redstone contraptions; Specifically large glow berry farms with a lot of flowing water.\r\n\r\nI don't know about which blocks are affected by 'max-block-ticks'. And can you tell me what values you are using for optimization?"
    ],
    "commit_messages": [
      "Configurable max block/fluid ticks (#10266)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a277d9087c4d6d37633e",
    "number": 10263,
    "body": "Hello,\r\n\r\nI would like to propose the addition of a new event to Paper that would be called before a player's teleportation attempt.\r\n\r\nIn my current scenario, I have a cosmetic plugin that adds a passenger to the player (a TextDisplay), and all teleportations are blocked because the player has at least one passenger, with no event being called to remove it. This forces the use of NMS (which is discouraged today).\r\n\r\nThe PlayerPreTeleportEvent event would be invoked before all checks and would allow plugin developers the opportunity to ensure compliance with checks before teleportation occurs.",
    "head_branch": "feat/PlayerPreTeleportEvent",
    "is_a_fork": true,
    "comments": [
      "I already opened a PR that adds this event: #10173",
      "@Leguan16 Well noted, thank you. Do you know when your PR will be processed?",
      "Nope. Can be tomorrow, can be in 2 weeks. But you can leave feedback if you want :)"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a278d9087c4d6d37633f",
    "number": 10262,
    "body": "Hello,\r\n\r\nI would like to propose the addition of a new event to Paper that would be called before a player's teleportation attempt.\r\n\r\nIn my current scenario, I have a cosmetic plugin that adds a passenger to the player (a TextDisplay), and all teleportations are blocked because the player has at least one passenger, with no event being called to remove it. This forces the use of NMS (which is discouraged today).\r\n\r\nThe PlayerPreTeleportEvent event would be invoked before all checks and would allow plugin developers the opportunity to ensure compliance with checks before teleportation occurs.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a279d9087c4d6d376340",
    "number": 10259,
    "body": "Will do a writeup later if needed, is sunday, needs further testing, is sunday\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-10259.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/1344289107.zip)",
    "head_branch": "fix/profile-copying",
    "is_a_fork": false,
    "comments": [
      "<img width=\"1105\" alt=\"Screenshot 2024-03-03 at 3 02 01 PM\" src=\"https://github.com/PaperMC/Paper/assets/23108066/e0feec8d-5983-49bf-8340-9748d2ed158d\">\r\nAny reason why you aren't checking here? since this will throw"
    ],
    "commit_messages": [
      "Do not copy profile data if profiles are the same (#10259)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a27ad9087c4d6d376341",
    "number": 10258,
    "body": "\"Schematic versioning\" is not a real thing. The intended versioning scheme is \"semantic versioning\". Introduced in #8108.",
    "head_branch": "javadoc-pluginmeta",
    "is_a_fork": true,
    "comments": [
      "personally i prefer schematic versioning"
    ],
    "commit_messages": [
      "[ci skip] Fix javadoc mistake in PluginMeta (#10258)\n\n\"Schematic versioning\" is not a real thing. The intended versioning\r\nscheme is \"semantic versioning\". Introduced in #8108."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a27bd9087c4d6d376342",
    "number": 10256,
    "body": "First time UwU pls be gentle\r\n\r\nFixes #10065 by adding a new overload for the EntityPickupItemEvent event factory and event constructor.\r\nChanges were implemented as proposed in the mentioned issue.",
    "head_branch": "issue/10065-changes-on-pickupitemevent-not-reflected",
    "is_a_fork": true,
    "comments": [
      "After some initial discussion, this change is going to be a lot more involved than it at least seems to be rn.\r\n\r\nThe *easiest* move here would be to make the yielded ItemStack \"immutable\" by cloning it in the \"getter\".\r\n\r\nThis way, plugins would still need to edit the Item's ItemStack in order to mutate the then used item. Not ideal but I guess doable.\r\nIf we want plugins to modify *only* the taken up item, things become a lot harder as we now have to decide what mutation takes precedent. A potentially mutated Item or the ItemStack.\r\n\r\nAdditionally, the current patch obviously does not properly pass the ItemStack that is consumed. Its count is wrong in a couple of places.\r\nWill certainly need more discussion."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a27cd9087c4d6d376343",
    "number": 10255,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n58ce1b0f Improve compatibility of new DamageSource API",
    "head_branch": "upstream/merge",
    "is_a_fork": false,
    "comments": [
      "My eyes are kiling me, somebody probably wants to look over this"
    ],
    "commit_messages": [
      "Updated Upstream (Bukkit) (#10255)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n58ce1b0f Improve compatibility of new DamageSource API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a27dd9087c4d6d376344",
    "number": 10253,
    "body": "Currently, it's impossible to get the information about the server from bootstrap, as `Bukkit.getServer()` is null.\r\n\r\nThe goal of this pr is to allow an easy access to information about the server, even from bootstrap.\r\n\r\nHere's an example usage:\r\n```java\r\n    @Override\r\n    public void bootstrap(@NotNull BootstrapContext context) {\r\n        var log = context.getLogger();\r\n        if (ServerInfo.is(1, 20, 4)) {\r\n            log.info(\"Server is running 1.20.4\");\r\n        } else {\r\n            log.info(\"Server is not running 1.20.4\");\r\n        }\r\n        if (ServerInfo.is(1, 20, 3)) {\r\n            log.info(\"Server is running 1.20.3\");\r\n        } else {\r\n            log.info(\"Server is not running 1.20.3\");\r\n        }\r\n        if (ServerInfo.isAtLeast(1, 20, 3)) {\r\n            log.info(\"Server is running 1.20.3 or newer\");\r\n        } else {\r\n            log.info(\"Server is not running 1.20.3 or newer\");\r\n        }\r\n        if (ServerInfo.isAtLeast(1, 20, 4)) {\r\n            log.info(\"Server is running 1.20.4 or newer\");\r\n        } else {\r\n            log.info(\"Server is not running 1.20.4 or newer\");\r\n        }\r\n        if (ServerInfo.isAtLeast(1, 20, 5)) {\r\n            log.info(\"Server is running 1.20.5 or newer\");\r\n        } else {\r\n            log.info(\"Server is not running 1.20.5 or newer\");\r\n        }\r\n        if (ServerInfo.isAtLeast(1, 20)) {\r\n            log.info(\"Server is running 1.20 or newer\");\r\n        } else {\r\n            log.info(\"Server is not running 1.20 or newer\");\r\n        }\r\n        if (ServerInfo.isAtLeast(1, 21)) {\r\n            log.info(\"Server is running 1.21 or newer\");\r\n        } else {\r\n            log.info(\"Server is not running 1.21 or newer\");\r\n        }\r\n        if (ServerInfo.isImplementing(Key.key(\"papermc\", \"folia\"))) {\r\n            log.info(\"Server implements folia\");\r\n        } else {\r\n            log.info(\"Server does not implement folia\");\r\n        }\r\n        //Logically, this should always return true\r\n        if (ServerInfo.isImplementing(Key.key(\"papermc\", \"paper\"))) {\r\n            log.info(\"Server implements paper\");\r\n        } else {\r\n            log.info(\"Server does not implement paper\");\r\n        }\r\n        log.info(\"Server version: \" + ServerInfo.version());\r\n        log.info(\"Bukkit version: \" + ServerInfo.apiVersion());\r\n        log.info(\"Server name: \" + ServerInfo.serverName());\r\n        log.info(\"Is a release version? \" + (ServerInfo.isStable() ? \"Yes\" : \"No\"));\r\n        log.info(\"Protocol version: \" + ServerInfo.unsafe().getProtocolVersion());\r\n        log.info(\"Data version: \" + ServerInfo.unsafe().getDataVersion());`\r\n    }\r\n```\r\nwhich results in those outputs (Bukkit version remained the same since it's unknown how it will be in reality for a snapshot etc, just changed the version.json file to ones provided in other versions)\r\nFor 1.20.4: \r\n```css\r\n[19:27:42 INFO]: [Paper-Test-Plugin] Server is running 1.20.4\r\n[19:27:42 INFO]: [Paper-Test-Plugin] Server is not running 1.20.3\r\n[19:27:42 INFO]: [Paper-Test-Plugin] Server is running 1.20.2 or newer\r\n[19:27:42 INFO]: [Paper-Test-Plugin] Server is running 1.20.3 or newer\r\n[19:27:42 INFO]: [Paper-Test-Plugin] Server is running 1.20.4 or newer\r\n[19:27:42 INFO]: [Paper-Test-Plugin] Server is not running 1.20.5 or newer\r\n[19:27:42 INFO]: [Paper-Test-Plugin] Server is running 1.20 or newer\r\n[19:27:42 INFO]: [Paper-Test-Plugin] Server is not running 1.21 or newer\r\n[19:27:42 INFO]: [Paper-Test-Plugin] Server does not implement folia\r\n[19:27:42 INFO]: [Paper-Test-Plugin] Server implements paper\r\n[19:27:42 INFO]: [Paper-Test-Plugin] Server version: 1.20.4\r\n[19:27:42 INFO]: [Paper-Test-Plugin] Bukkit version: 1.20.4-R0.1-SNAPSHOT\r\n[19:27:42 INFO]: [Paper-Test-Plugin] Server name: Paper\r\n[19:27:42 INFO]: [Paper-Test-Plugin] Is a release version? Yes\r\n[19:27:42 INFO]: [Paper-Test-Plugin] Protocol version: 765\r\n[19:27:42 INFO]: [Paper-Test-Plugin] Data version: 3700\r\n```\r\nFor 23w31a:\r\n```css\r\n[22:06:46 INFO]: [Paper-Test-Plugin] Server is not running 1.20.4\r\n[22:06:46 INFO]: [Paper-Test-Plugin] Server is not running 1.20.3\r\n[22:06:46 INFO]: [Paper-Test-Plugin] Server is not running 1.20.2 or newer\r\n[22:06:46 INFO]: [Paper-Test-Plugin] Server is not running 1.20.3 or newer\r\n[22:06:46 INFO]: [Paper-Test-Plugin] Server is not running 1.20.4 or newer\r\n[22:06:46 INFO]: [Paper-Test-Plugin] Server is not running 1.20.5 or newer\r\n[22:06:46 INFO]: [Paper-Test-Plugin] Server is running 1.20 or newer\r\n[22:06:46 INFO]: [Paper-Test-Plugin] Server is not running 1.21 or newer\r\n[22:06:46 INFO]: [Paper-Test-Plugin] Server does not implement folia\r\n[22:06:46 INFO]: [Paper-Test-Plugin] Server implements paper\r\n[22:06:46 INFO]: [Paper-Test-Plugin] Server version: 23w31a\r\n[22:06:46 INFO]: [Paper-Test-Plugin] Bukkit version: 1.20.4-R0.1-SNAPSHOT\r\n[22:06:46 INFO]: [Paper-Test-Plugin] Server name: Paper\r\n[22:06:46 INFO]: [Paper-Test-Plugin] Is a release version? No\r\n[22:06:47 INFO]: [Paper-Test-Plugin] Protocol version: 1073741968\r\n[22:06:47 INFO]: [Paper-Test-Plugin] Data version: 3567\r\n```\r\nFor 23w46a:\r\n```css\r\n[22:23:42 INFO]: [Paper-Test-Plugin] Server is not running 1.20.4\r\n[22:23:42 INFO]: [Paper-Test-Plugin] Server is not running 1.20.3\r\n[22:23:42 INFO]: [Paper-Test-Plugin] Server is running 1.20.2 or newer\r\n[22:23:42 INFO]: [Paper-Test-Plugin] Server is not running 1.20.3 or newer\r\n[22:23:42 INFO]: [Paper-Test-Plugin] Server is not running 1.20.4 or newer\r\n[22:23:42 INFO]: [Paper-Test-Plugin] Server is not running 1.20.5 or newer\r\n[22:23:42 INFO]: [Paper-Test-Plugin] Server is running 1.20 or newer\r\n[22:23:42 INFO]: [Paper-Test-Plugin] Server is not running 1.21 or newer\r\n[22:23:42 INFO]: [Paper-Test-Plugin] Server does not implement folia\r\n[22:23:42 INFO]: [Paper-Test-Plugin] Server implements paper\r\n[22:23:42 INFO]: [Paper-Test-Plugin] Server version: 23w46a\r\n[22:23:42 INFO]: [Paper-Test-Plugin] Bukkit version: 1.20.4-R0.1-SNAPSHOT\r\n[22:23:42 INFO]: [Paper-Test-Plugin] Server name: Paper\r\n[22:23:42 INFO]: [Paper-Test-Plugin] Is a release version? No\r\n[22:23:43 INFO]: [Paper-Test-Plugin] Protocol version: 1073741987\r\n[22:23:43 INFO]: [Paper-Test-Plugin] Data version: 3691\r\n```\r\nFor 1.20.2 Pre-release 2:\r\n```css\r\n[22:13:07 INFO]: [Paper-Test-Plugin] Server is not running 1.20.4\r\n[22:13:07 INFO]: [Paper-Test-Plugin] Server is not running 1.20.3\r\n[22:13:07 INFO]: [Paper-Test-Plugin] Server is not running 1.20.2 or newer\r\n[22:13:07 INFO]: [Paper-Test-Plugin] Server is not running 1.20.3 or newer\r\n[22:13:07 INFO]: [Paper-Test-Plugin] Server is not running 1.20.4 or newer\r\n[22:13:07 INFO]: [Paper-Test-Plugin] Server is not running 1.20.5 or newer\r\n[22:13:07 INFO]: [Paper-Test-Plugin] Server is running 1.20 or newer\r\n[22:13:07 INFO]: [Paper-Test-Plugin] Server is not running 1.21 or newer\r\n[22:13:07 INFO]: [Paper-Test-Plugin] Server does not implement folia\r\n[22:13:07 INFO]: [Paper-Test-Plugin] Server implements paper\r\n[22:13:07 INFO]: [Paper-Test-Plugin] Server version: 1.20.2 Pre-release 2\r\n[22:13:07 INFO]: [Paper-Test-Plugin] Bukkit version: 1.20.4-R0.1-SNAPSHOT\r\n[22:13:07 INFO]: [Paper-Test-Plugin] Server name: Paper\r\n[22:13:07 INFO]: [Paper-Test-Plugin] Is a release version? No\r\n[22:13:07 INFO]: [Paper-Test-Plugin] Protocol version: 1073741973\r\n[22:13:07 INFO]: [Paper-Test-Plugin] Data version: 3573\r\n```",
    "head_branch": "paper-info",
    "is_a_fork": true,
    "comments": [
      "I believe the concept here is great, I am currently unsure if the impl and api methods are the best tho.\r\n\r\nA) int varargs seems weird. This would lock the API to only support major versions, which I am unsure is something we want to commit to.\r\nB) I like `implement` (tho it should be `implements`). This seems especially useful for forks as you pointed out, e.g. purpur or folia. Is a single string there enough or should we force some form of namespace? I presume the chances of a second fork named purpur that does not actually supply purpur apiare slim to none, but yea, food for thought.",
      "Wouldn't it make more sense to transfer this Check Logic into the PaperLib and rather return Try Version String and Protocol Version into the bootstrap context ?\r\n\r\nSo this is just a suggestion",
      "I think this stuff fits best into the server, because only the server can reliably tell what it implements. The checking for classes (what PaperLib does) might not properly reflect everything depending on what is checked",
      "> I think this stuff fits best into the server, because only the server can reliably tell what it implements. The checking for classes (what PaperLib does) might not properly reflect everything depending on what is checked\r\n\r\nWell, if PaperLib can test on the basis of given things. Bootstrap context or other things. You don't have to do anything with Reflections if the correct values are given. I see such a version check more as an ultitiy than that it should be part of a server software. But that's more my perspective.\r\nThe other side of it would be that developers would have it easier.\r\nBut is it worth the maintainability? ",
      "> I believe the concept here is great, I am currently unsure if the impl and api methods are the best tho.\r\n> \r\n> A) int varargs seems weird. This would lock the API to only support major versions, which I am unsure is something we want to commit to. B) I like `implement` (tho it should be `implements`). This seems especially useful for forks as you pointed out, e.g. purpur or folia. Is a single string there enough or should we force some form of namespace? I presume the chances of a second fork named purpur that does not actually supply purpur apiare slim to none, but yea, food for thought.\r\n\r\nA) I will think how I could change that\r\n\r\nB) Sadly, \"implements\" is a reserved word by java, that's why it's \"implement\". And what are the guarantees that that other fork won't use the same namespace? If someone named their fork exactly the same as other fork in my opinion it's their fight, I made this method mostly for popular forks, like folia, since if a plugin will make a special support for a fork, it's really not likely it will make it for a small unknown fork.",
      "kek, yea you are right. flame my tired brain. `implement` is still not nice. `offers` ? `providesAPI`.\r\n",
      "> But is it worth the maintainability?\r\n\r\nYou can look at the implementation, it's based on 3 information from the nms\r\n1. **The version**. From 1.13, nms has a class named SharedConstants, which always had the version, but they may often change how to get it from that class, if they change it a bit, it won't be hard to find the new method in the SharedConstants to get the version, but it breaks compatibility for the plugins using reflection\r\n2. **The api version**. Well, this depends on Versioning class, which didn't change for the last 12 years, i don't think this will bring any trouble\r\n3. **The server name**. I don't think someone ever will want to touch this... And it's based on an own class, so it's independent from future changes, also here goes the check for implemented apis\r\n4. **The UnsafeValues**. It's the same unsafe as in Bukkit#getUnsafe, if people depend on it, they're on their own, so this doesn't have any maintainability burden at all\r\n\r\nAlso this pr doesn't modify any classes, just adds some new, so it's reaaaalllyyy cheap to maintain.\r\n\r\n\r\n> Wouldn't it make more sense to transfer this Check Logic into the PaperLib\r\n\r\nWhy should I use paper lib if I only support paper, in a paper plugin, just to check the version.....",
      "> kek, yea you are right. flame my tired brain. `implement` is still not nice. `offers` ? `providesAPI`.\r\n\r\nMaybe then `hasAPI`?",
      "What about `isImplementingAPI`?",
      "> What about `isImplementingAPI`?\r\n\r\nI think `if (PaperServerInfo.isImplementing(\"Folia\"))` sounds as the best solution\r\n\r\nThe \"api\" in the method name makes it a bit too verbose",
      "But I also think that some sort of name spacing wouldn't be bad. It looks weird to provide a String imo. ",
      "I'm pleased to see the discussion taking place here, let me respond to respond points first:\r\n\r\n> The server name. I don't think someone ever will want to touch this...\r\n\r\nBut isn't Paper as much Spigot (the server, not the plugin), as it is CraftBukkit?\r\n\r\n> Sadly, \"implements\" is a reserved word\r\n\r\nThe point here is feature-based interaction and enablement. I strongly believe this should be called **.supports()** or similar. Supports Folia? Yes. Suports X-Y patch from 1 year ago? No. Supports a sub-feature of a patch from 9 months ago? Yes.\r\n\r\n> should we force some form of namespace?\r\n\r\nIf the API operates on strings, idk how do you want to enforce it? Change the API to explicitly require a parent namespace key + child key? This is little different from a convention calling features like \"paper.versioningapi\". This then will be similar to how browsers implement experimental/proprietary CSS features by adding a -webkit or -moz prefix.\r\n\r\nVersioning of the Features? If this idea evolves to a feature-support API, at some point it'll be useful and necessary to retrieve a feature's individual version number. The game/server revision *could* be used for it, but it's more work and less reliable than knowing a certain patches' exact version.\r\n\r\n\"Just add a more specific key to a patch\" is not the complete answer, because there can be a patch gap between a behavioral change/feature's implementation and the understanding that it warrants a new, more specific feature key.\r\n\r\n---\r\n\r\nAlthough I'm surprised by vararg version ints too, my question is different. How to work with and represent weekly snapshots? And the absolute edge case, special editions like April 1st (ok this is over the top).\r\n\r\nFor \"isVersion\" I would add CAPS docs to instead use greater/lower than for versioning (especially if this PR moves toward capability-based API queries). Because isVersion should be understood as hardcoding an exact version in the majority of cases.\r\n\r\n----\r\n\r\nI find this is a better (and more gentle) solution for a seamless multi-version and multi-vendor support than reflection/exceptions. It'd be better placed in upstream (Spigot).",
      " > Versioning of the Features? If this idea evolves to a feature-support API, at some point it'll be useful and necessary to retrieve a feature's individual version number. The game/server revision could be used for it, but it's more work and less reliable than knowing a certain patches' exact version.\r\n\r\nI think this will bring too much trouble to maintain, all changes to features are made to have backwards compatibility, so you may just need to check for the version + fork api presence to see if the new feature capability is here\r\n\r\n> But isn't Paper as much Spigot (the server, not the plugin), as it is CraftBukkit?\r\n\r\nAs I see it, very soon the hard fork will happen, then it will be very hard to say that the server is implementing the spigot/bukkit api, adding something with the scope of removing it very soon is not a bright idea in my opinion\r\n\r\n> The point here is feature-based interaction and enablement.\r\n\r\nThe point is the implemented fork api, as novice developers often may forget to store the value if the server is folia, meaning they will have often Class#forName calls, which are expensive, this new method should be safe to recommend in docs and other places for new developers. Also this is a way easier method than to find the class and copy it for class check.\r\n\r\n> Although I'm surprised by vararg version ints too, my question is different. How to work with and represent weekly snapshots? And the absolute edge case, special editions like April 1st (ok this is over the top).\r\n\r\nI thought about changing PaperServerInfo#is to a string which just checks for equals with current version and PaperServerInfo#isAtLeast will just mean if the current version appeared after the specified release version or if it's the current release version\r\n\r\n> I find this is a better (and more gentle) solution for a seamless multi-version and multi-vendor support than reflection/exceptions. It'd be better placed in upstream (Spigot).\r\n\r\nPersonally, I don't want to care about the spigot api, if people want to still support spigot, then they may continue to just deal with the missing api like this, I didn't support spigot in my plugins for a long time and recommend others to do the same (even though I understand that private plugins are a lot easier to make without spigot support than public/paid plugins)",
      "Made a few changes which we discussed here, like using a key to check for implemented api and support for non-release versions.\r\n\r\nThe support for snapshots/pre-releases could be made better but I don't think that it's an environment for which we may want to spend too much effort to give the best support possible. But at least this pr already defines a possible future behaviour that developers may expect, and which can be further discussed here.\r\n\r\nThe usage and the output were updated to reflect the changes.",
      "I really like this concept but I am unsure if the class should be named `PaperServerInfo`. Why not name it `ServerInfo`?",
      "> I really like this concept but I am unsure if the class should be named `PaperServerInfo`. Why not name it `ServerInfo`?\r\n\r\nIdk, PaperServerInfo sounds better for me, but if someone else agrees then i can change that to ServerInfo",
      "> Idk, PaperServerInfo sounds better for me, but if someone else agrees then i can change that to ServerInfo\r\n\r\nWell, I think for Paper it's fine either way but I was much more thinking of forks for example. Sure, they can patch that name again but naming it ServerInfo is much more generic than PaperServerInfo.\r\nI don't know, these are just my thoughts about this..",
      "I agree with DerEchtePilz on this one. `PaperServerInfo` seems more like a implementation name than an API name. The whole bukkit API is meant to be generic so I would not stop here and start naming things after Paper. Though maybe a different name then `ServerInfo` can be found. IMO it doesn't really fit. Since it mostly is about the version maybe call it `VersionInfo` or generally just `Version`.",
      "> I agree with DerEchtePilz on this one. `PaperServerInfo` seems more like a implementation name than an API name. The whole bukkit API is meant to be generic so I would not stop here and start naming things after Paper. Though maybe a different name then `ServerInfo` can be found. IMO it doesn't really fit. Since it mostly is about the version maybe call it `VersionInfo` or generally just `Version`.\r\n\r\n\"VersionInfo\" or \"Version\" already does not go well with isImlementing, also limits future possibilities to add utility methods\r\n\r\nWho knows what other information about the server people may want to get in the bootstrap, naming it \"ServerInfo\" will give green light to a lot of  read only operations that may be invoked before CraftServer exists, I just added mostly only version methods because that's the most used thing right know but which is inaccessible in bootstrap, and don't think other methods may fit well in this pr\r\n\r\n~~I'll rename the class to \"ServerInfo\" these days when I'll have a bit of free time~~ Renamed",
      "Rebased on 1.20.5",
      "Wouldn't this be a great addition to the removal of relocation to provide a straightforward way of getting the version? I mean it would only work from 1.20.(5/6)+ but I guess it's good to include both in the same version so there is a nice and modern alternative. ",
      "Applied all requested changes",
      "Fixed the javadoc which failed the workflow",
      "Applied all requested changes",
      "Hey @masmc05! Thanks for your work on this pull request! ❤️ We've merged (most) of your work into #10729 where we've done some other changes related to versioning, and we'll be continuing this pull request over there. Feel free to comment over there.\r\n\r\nNote: there are some minor differences, and there are one or two methods missing in #10729 currently.",
      "> Hey @masmc05! Thanks for your work on this pull request! ❤️ We've merged (most) of your work into #10729 where we've done some other changes related to versioning, and we'll be continuing this pull request over there. Feel free to comment over there.\r\n> \r\n> Note: there are some minor differences, and there are one or two methods missing in #10729 currently.\r\n\r\nYeah, I noticed, I'm glad that my work was able to help creating an even bigger addition to paper. \r\nWill soon then try to get my second pr to be my first merged pr, as Amaranth suggested on Discord, with a change smaller than this (not something like world generator api v2)"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a27ed9087c4d6d376345",
    "number": 10252,
    "body": "This PR handle 2 things related to https://github.com/PaperMC/Paper/commit/31699ae9a8f3a57491e9c9276cffa5a51e9a5f60\r\n- Fix the BlockState being set to null when the instance of DamageSource is cloned (i dont like the clone.. but was a solution for avoid registry things when make all this)\r\n- Add a missing paper comment in patch",
    "head_branch": "fix/no-ref/explodedBlockState-ignored-or-reset",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix BlockState being set to null for damage events (#10252)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a27fd9087c4d6d376346",
    "number": 10250,
    "body": "I think it should be called \"Get an immutable list of the blocks which will be moved by the retracting.\" instead of \" ... extracting.\"",
    "head_branch": "piston-event-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Fix JavaDoc mistake in BlockPistonRetractEvent (#10250)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a280d9087c4d6d376347",
    "number": 10248,
    "body": "resolves #10058 \r\nperhaps a getRemovers should be added since mulitple boats can be responsible for breaking an entity. let me know what you think",
    "head_branch": "call-hangingbyentity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a281d9087c4d6d376348",
    "number": 10245,
    "body": "The existing method with PotionEffect suggests that all attributes are used. In fact, only the PotionEffectType and the duration are used.\r\n\r\n\r\nresolves #9749 \r\n\r\n\r\nTODO:\r\n\r\n- [x] expand on StewMeta if not done already\r\n- [x] deprecate other PotionEffect methods\r\n- [x] write a chunk full of JavaDoc\r\n- [x] add Paper comments",
    "head_branch": "issue/9749-implement-reduced-potion-effect-on-stew-meta-and-mushroom-cow",
    "is_a_fork": true,
    "comments": [
      "get and set already exist at the bottom of the class, so their naming should be kept and the upstream ones deprecated",
      "> get and set already exist at the bottom of the class, so their naming should be kept and the upstream ones deprecated\r\n\r\nYeah, for the get call I just forgot to remove it. Realized it ans stopped implementing the set call.\r\nNames are kept. Would either migrate the remove calls to using `Predicate<SuspiciousEffectEntry> ` to support only filtering using one or the other. Currently the original PotionEffectType overload filters by PotionEffectType and the SuspicousEffectEntry one by PotionEffect and Duration.\r\nAfter the Predicate one is implemented we can deprecate upstream one for remove."
    ],
    "commit_messages": [
      "add overloads to use suspicious effect entry to mushroom cow and suspicious stew meta (#10245)\n\nThe existing method with PotionEffect suggests that all attributes are used. In fact, only the PotionEffectType and the duration are used.\r\n\r\n\r\n\r\n---------\r\n\r\nCo-authored-by: Bjarne Koll <lynxplay101@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a282d9087c4d6d376349",
    "number": 10244,
    "body": "Fixes #10243 ",
    "head_branch": "fix/witherskull-entity-event",
    "is_a_fork": true,
    "comments": [
      "With the last changes in Upstream the ugly entityDamage not exists anymore.\r\nWhen [this](https://github.com/PaperMC/Paper/pull/10242) is merged i can suggest you can remake this PR but adding customCausingEntity to the magic method in the damage like [this](https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/80f0ce4be64392dbac7ab95c0f9332e15c604029#nms-patches%2Fnet%2Fminecraft%2Fworld%2Fentity%2Fprojectile%2FEntityEvokerFangs.patch)",
      "> With the last changes in Upstream the ugly entityDamage not exists anymore. When [this](https://github.com/PaperMC/Paper/pull/10242) is merged i can suggest you can remake this PR but adding customCausingEntity to the magic method in the damage like [this](https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/80f0ce4be64392dbac7ab95c0f9332e15c604029#nms-patches%2Fnet%2Fminecraft%2Fworld%2Fentity%2Fprojectile%2FEntityEvokerFangs.patch)\r\n\r\nAh, thanks, I totally missed that. Glad to see the ugliness is gone :D\r\nI'm gonna base the PR on that branch and mark it as draft for now then.",
      "Rebased to the latest master now that #10242 is merged"
    ],
    "commit_messages": [
      "Fire EntityDamageByEntityEvent for unowned wither skulls patch (#10244)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a283d9087c4d6d37634a",
    "number": 10242,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\na6a9d2a4 Remove some old ApiStatus.Experimental annotations\r\nbe72314c SPIGOT-7300, PR-829: Add new DamageSource API providing enhanced information about entity damage\r\nb252cf05 SPIGOT-7576, PR-970: Add methods in MushroomCow to change stew effects\r\nb1c689bd PR-902: Add Server#isLoggingIPs to get log-ips configuration\r\n08f86d1c PR-971: Add Player methods for client-side potion effects\r\n2e3024a9 PR-963: Add API for in-world structures\r\na23292a7 SPIGOT-7530, PR-948: Improve Resource Pack API with new 1.20.3 functionality\r\n1851857b SPIGOT-3071, PR-969: Add entity spawn method with spawn reason\r\ncde4c52a SPIGOT-5553, PR-964: Add EntityKnockbackEvent\r\n\r\nCraftBukkit Changes:\r\n38fd4bd50 Fix accidentally renamed internal damage method\r\n80f0ce4be SPIGOT-7300, PR-1180: Add new DamageSource API providing enhanced information about entity damage\r\n7e43f3b16 SPIGOT-7581: Fix typo in BlockMushroom\r\nea14b7d90 SPIGOT-7576, PR-1347: Add methods in MushroomCow to change stew effects\r\n4c687f243 PR-1259: Add Server#isLoggingIPs to get log-ips configuration\r\n22a541a29 Improve support for per-world game rules\r\ncb7dccce2 PR-1348: Add Player methods for client-side potion effects\r\nb8d6109f0 PR-1335: Add API for in-world structures\r\n4398a1b5b SPIGOT-7577: Make CraftWindCharge#explode discard the entity\r\ne74107678 Fix Crafter maximum stack size\r\n0bb0f4f6a SPIGOT-7530, PR-1314: Improve Resource Pack API with new 1.20.3 functionality\r\n4949f556d SPIGOT-3071, PR-1345: Add entity spawn method with spawn reason\r\n20ac73ca2 PR-1353: Fix Structure#place not working as documented with 0 palette\r\n3c1b77871 SPIGOT-6911, PR-1349: Change max book length in CraftMetaBook\r\n333701839 SPIGOT-7572: Bee nests generated without bees\r\nf48f4174c SPIGOT-5553, PR-1336: Add EntityKnockbackEvent",
    "head_branch": "up",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#10242)\n\n* Updated Upstream (Bukkit/CraftBukkit)\r\n\r\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\na6a9d2a4 Remove some old ApiStatus.Experimental annotations\r\nbe72314c SPIGOT-7300, PR-829: Add new DamageSource API providing enhanced information about entity damage\r\nb252cf05 SPIGOT-7576, PR-970: Add methods in MushroomCow to change stew effects\r\nb1c689bd PR-902: Add Server#isLoggingIPs to get log-ips configuration\r\n08f86d1c PR-971: Add Player methods for client-side potion effects\r\n2e3024a9 PR-963: Add API for in-world structures\r\na23292a7 SPIGOT-7530, PR-948: Improve Resource Pack API with new 1.20.3 functionality\r\n1851857b SPIGOT-3071, PR-969: Add entity spawn method with spawn reason\r\ncde4c52a SPIGOT-5553, PR-964: Add EntityKnockbackEvent\r\n\r\nCraftBukkit Changes:\r\n38fd4bd50 Fix accidentally renamed internal damage method\r\n80f0ce4be SPIGOT-7300, PR-1180: Add new DamageSource API providing enhanced information about entity damage\r\n7e43f3b16 SPIGOT-7581: Fix typo in BlockMushroom\r\nea14b7d90 SPIGOT-7576, PR-1347: Add methods in MushroomCow to change stew effects\r\n4c687f243 PR-1259: Add Server#isLoggingIPs to get log-ips configuration\r\n22a541a29 Improve support for per-world game rules\r\ncb7dccce2 PR-1348: Add Player methods for client-side potion effects\r\nb8d6109f0 PR-1335: Add API for in-world structures\r\n4398a1b5b SPIGOT-7577: Make CraftWindCharge#explode discard the entity\r\ne74107678 Fix Crafter maximum stack size\r\n0bb0f4f6a SPIGOT-7530, PR-1314: Improve Resource Pack API with new 1.20.3 functionality\r\n4949f556d SPIGOT-3071, PR-1345: Add entity spawn method with spawn reason\r\n20ac73ca2 PR-1353: Fix Structure#place not working as documented with 0 palette\r\n3c1b77871 SPIGOT-6911, PR-1349: Change max book length in CraftMetaBook\r\n333701839 SPIGOT-7572: Bee nests generated without bees\r\nf48f4174c SPIGOT-5553, PR-1336: Add EntityKnockbackEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a285d9087c4d6d37634b",
    "number": 10241,
    "body": "Since Windows Defender fucking with Intellij and WSL performance is a very common issue, i think the fix which worked for a lot of people (including me) should be mentioned somewhere. Perhaps we should also add an warning afterwards telling people to be careful with what they add to there AV exclusions",
    "head_branch": "update-contributing",
    "is_a_fork": true,
    "comments": [
      "Maybe the new info about the Windows Defender can be in a \"info\" box before the caution about mnt? also mention this only apply for people using Windows Defender and not has all this disabled.",
      "doesnt intellij have a popup that prompts you to do this (and offers to do it automatically if you are a priviledged user)",
      "Don't think so. Or it just didn't work for me all the time I tried it. ",
      "it does have a popup to add the project directory to the exclusions however in that case that is not sufficient",
      "should be more accurate now\r\n\r\nEDIT: Also i think it would be worth adding an index to the Contributing.md as especially new contributors might want to search up specific topics mulitple times ",
      "> should be more accurate now\r\n> \r\n> EDIT: Also i think it would be worth adding an index to the Contributing.md as especially new contributors might want to search up specific topics mulitple times\r\n\r\nGithub show a index buy you need click an icon for that if im not wrong",
      "> Github show a index buy you need click an icon for that if im not wrong\r\n\r\noh yeah forgot that existed"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a286d9087c4d6d37634c",
    "number": 10239,
    "body": "resolves #8007",
    "head_branch": "issue/8007-banlist-type-improvement",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "improve BanList types (#10239)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a287d9087c4d6d37634d",
    "number": 10237,
    "body": "closes #9942 \r\nAdds a RayTraceBuilder which can be constructed using a starting Location, direction and max distance.\r\nI am currently still unsure of how to integrate the raytrace methods on Block. I would definitely love to hear some feedback on that.",
    "head_branch": "add-raytracebuilder",
    "is_a_fork": true,
    "comments": [
      "Could you give me an example explanation specifically for RayTrace in mind? (i don't exactly understand what you mean) do you mean like a RayTrace class that can be constructed which holds all the info about the direction etc. and then gets passed into the raytrace method on World, LivingEntity etc.?\r\n\r\nEDIT: i think i know what you mean now but i don't see the benefit in it. imo that just complicates stuff more",
      "what should be done regarding LivingEntity or Block? those interfaces only have methods for raytracing with the target of there own type",
      "Alright i am really not sure about this. I feel like the kind of RayTraceBuilder or RayTraceExecutor we had in the beginnning just feels better. Using a configuration where stuff like starting point, distance, direction all need to be adjusted for each use specificly doesn't seem very convenient. I guess in the example of the JoinConfiguration that just works better cause not that many variables need to be adjusted for each use."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a288d9087c4d6d37634e",
    "number": 10235,
    "body": "Throws a new IllegalStateException with the failed to bind to port exception as the cause, this will make it so a more helpful stacktrace is included in the crash report which is helpful when someone comes for support.",
    "head_branch": "feat/port-error-report",
    "is_a_fork": true,
    "comments": [
      "this one has been on the eternal todo list for eons"
    ],
    "commit_messages": [
      "Propagate failed to bind to port error (#10235)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a289d9087c4d6d37634f",
    "number": 10234,
    "body": "Closes #10099",
    "head_branch": "feat/snapshot-skip-light-data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add getChunkSnapshot includeLightData parameter (#10234)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a28ad9087c4d6d376350",
    "number": 10233,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a28bd9087c4d6d376351",
    "number": 10231,
    "body": "The goal of this PR is to gather some data on the current deficiencies of RegionFile and improve them in SectorFile. Currently, the main improvements are:\r\n1. Header corruption detection + automatic recalculation, as the header is now validated using XXHash64\r\n2. Data validation using XXHash64\r\n3. Header recalculation logic for all data types (not just block)\r\n4. ZSTD support\r\n5. Reduced sector size, which should reduce overall world size by a factor of ~1.3 up to 1.6\r\n\r\nThe compression configuration (`compression-format`) in paper supports setting the value to ZSTD as well as LZ4.\r\n\r\nPlease see https://github.com/PaperMC/SectorTool for details on the new format and how to use the tool to convert the world or how to revert the conversion. The tool can be downloaded from the release tab.\r\n\r\nPlease see [SPECIFICATION.md](https://github.com/PaperMC/SectorTool/blob/master/SPECIFICATION.MD) for details on the new format specification.\r\n\r\nThis patch does not include any conversion logic. See the tool linked above to convert the world. You can also use the tool linked above to revert the conversion.\r\n\r\nIncluded in this test patch is logic to dump SectorFile operation tracing to file `sectorfile.tracer` in the root dir of a world. The file is not compressed, and it is appended to only. As a result of the lack of compression, when sending the file back for analysis please compress it to reduce size usage.\r\n\r\nThis tracing will be useful for later tests to perform parameter scanning on some of the parameters of SectorFile:\r\n1. The section shift\r\n2. The sector size\r\n3. SectorFile cache size\r\n\r\nFolia branch: https://github.com/PaperMC/Folia/tree/experiment/sectorfile\r\n<!-- bot: paperclip-pr-build -->\r\n---\r\nDownload the paperclip jar for this pull request: [paper-10231.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/1261931365.zip)",
    "head_branch": "experiment/sectorfile",
    "is_a_fork": false,
    "comments": [
      "Someone had mentioned that ZSTD dictionaries might help improve the compression ratio and speeds. Thought I'd mention that, maybe it's useful.",
      "> Someone had mentioned that ZSTD dictionaries might help improve the compression ratio and speeds. Thought I'd mention that, maybe it's useful.\r\n\r\nI am (probably) that person? Anyways, I was doing tests with adding zstd compression to the vanilla anvil format. I got a ratio of ~97% when compared to zlib when using zstd -4 on its own. Then with dictionary compression the ratio drops down to ~89%. It's not a huge gain due to the padding problem, but it helps a bit. To clarify, I did not test compression speed, but as I understand at these low compression levels it should be faster than zlib even without a dictionary.\r\n\r\nThat work is featured [here](https://github.com/UltraVanilla/paper-zstd/) and uses the namespace `z:4d` (meaning if you happened to want to standardize on my dictionary, the magic number to put before the compressed chunk data when using this format is is `0x00 0x04 0x7a 0x3a 0x34 0x64`, as per Mojang's suggested format for alternative compression formats under the `127` algorithm id). I intend to release a tool for conversion of region files between different compression formats, so if Paper comes up with its own set of compression standards I will adopt them.\r\n\r\nMy ratio results are not particularly relevant to SectorFile, which will use 512 byte sectors and such has potential for a lot more gains. The dictionary is not specific to entities, poi, or chunk, but rather combined based on a representative distribution of these",
      "Any plans to update this and Folia's sectorfile branch to 1.20.6?",
      "I've updated the branch to 1.20.6",
      "I've updated SectorTool to v1.1:\r\n```\r\nAdd copy option for conversion to SectorFile\r\n\r\nThe copy option does not perform decompression/recompression,\r\nwhich should make it faster for systems limited by CPU resources.\r\n\r\nAdditionally, read the entire RegionFile into memory when converting\r\nto SectorFile to avoid random read costs when converting.\r\n```\r\n\r\nI will be adding in code to convert RegionFiles on the fly as well.",
      "I've added conversion logic to copy data from existing RegionFiles when a SectorFile does not exist.",
      "When doing --forceUpgrade it crashes the server when having Unconverted RegionFiles.",
      "> When doing --forceUpgrade it crashes the server when having Unconverted RegionFiles.\r\n\r\nforceUpgrade is not actually supported on this branch, as the code has not been modified to use SectorFile",
      "Will this Format become Standard in Paper?\r\nAlso would be good if the RegionFiles get removed when converted",
      "> Also would be good if the RegionFiles get removed when converted\r\n\r\nI don't think so, if the conversion fails and the region files are deleted, it'd be pretty bad. Just delete them manually if you need to.",
      "Any Plans to update this to Latest 1.20.6?",
      "> Any Plans to update this to Latest 1.20.6?\r\n\r\nScroll up.",
      "I've updated SectorTool to 1.3 to fix an issue where SectorFiles are far larger than they should be when converting RegionFiles using the raw flag or when the RegionFiles were stored with the uncompressed format. This affects the auto conversion previously in this branch as well, as it converted using the raw flag.\r\n\r\nIf the original RegionFiles were stored in a compressed format, the large size can be fixed by converting from SectorFile to RegionFile and then back again. If the RegionFiles were in an uncompressed format, then you need to convert to RegionFile, then use the recreateRegionFiles startup option with forceUpgrade and then convert back to SectorFile.\r\n\r\nSectorTool 1.3 also includes a minor disk space improvement by not storing type headers on disk if they're unused (this mostly will cause the type headers for poi and entity to be unallocated until data is written for them), which has been copied over to this branch.\r\n\r\nNote that the branches are still on 1.20.6 as of writing.\r\n\r\nEDIT:\r\nIf it wasn't clear, I've copied the changes from SectorTool 1.3 to this branch to fix the conversion creating larger SectorFiles. There is no fix for already converted SectorFiles.",
      "idea was good"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a28cd9087c4d6d376352",
    "number": 10229,
    "body": "Offload JSON serializing and file writing to another thread so as not to put a strain on the main thread performance when interacting with user lists that contain a lot of list entries.",
    "head_branch": "feature/async-StoredUserList-saving",
    "is_a_fork": true,
    "comments": [
      "based",
      "I have acknowledged about using a single thread executor for this right after I created this PR. I will do the required changes once I have free time.",
      "Each StoredUserList now has a single thread executor on their own, these executors will be shut down once the server is stopped.",
      "I would just use a shared executor between all of them, no need for them to each have their own",
      "Yes, I should have gone with that solution as I wasn't thoughtful enough earlier. Thanks for the heads up."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a28dd9087c4d6d376353",
    "number": 10228,
    "body": "Simple detection logic to address the issue #10223 ",
    "head_branch": "check-for-server-jars",
    "is_a_fork": true,
    "comments": [
      "![image](https://github.com/PaperMC/Paper/assets/49841276/df86d051-afb4-4f6d-9527-5d768bb6f00e)\r\nOutput when first starting the server.\r\n![image](https://github.com/PaperMC/Paper/assets/49841276/f0fb0b1b-afe6-41d9-9190-f7c76b78ba56)\r\nOutput when reloading the server. (notice that worldedit reloads with no issue)"
    ],
    "commit_messages": [
      "Check for server JARs in plugin directory (#10228)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a28ed9087c4d6d376354",
    "number": 10227,
    "body": "Simple detection logic to address #10223 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a28fd9087c4d6d376355",
    "number": 10226,
    "body": "The BlockPreDispenseEvent, added in #5075, is only fired for dispensers, and not droppers. I see this as an inconsistency in the API, as BlockDispenseEvent is called for both droppers and dispensers.\r\n\r\nWhat I'm trying to achieve is being able to cancel droppers doing anything while also avoiding the sound and particles. This is possible for dispensers through this event. Cancelling BlockDispenseEvent works fine for droppers, but it still plays the click sound.\r\n\r\nI saw prior discussion in the Discord (many months ago) which mentions that there is no reason the event isn't called for droppers, and that it really should.",
    "head_branch": "pre-dispense-dropper",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fire BlockPreDispenseEvent for droppers (#10226)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a290d9087c4d6d376356",
    "number": 10225,
    "body": "resolves #5449 \r\n\r\n\r\nTODOS:\r\n\r\n- [x] Wait for adventure 4.16.0 release\r\n- [x] remove mavenLocal() and migrate to version 4.16.0\r\n- [x] add changes to adventure patch",
    "head_branch": "issue/5449-implement-richmessage-component-config-support",
    "is_a_fork": true,
    "comments": [
      "> We should probably allow the ability to pass custom MiniMessage instances for this for custom tags and whatnot.\r\n\r\nHaving an option to pass custom `ComponentSerializer` in general would be helpful too.\r\n\r\nAs a side note, this will currently throw an exception if a user uses `§` in their string. I'm just thinking that there should be some safe railings for this case (like returning a def/null component), or at least some javadoc info mentioning the behavior.",
      "> We should probably allow the ability to pass custom MiniMessage instances for this for custom tags and whatnot.\r\n\r\nDone.",
      "General \"lets wait and see\" for https://github.com/KyoriPowered/adventure/issues/1034, as we could use ComponentDecoder over ComponentSerialiser if possible.\r\n\r\nI'd give it a couple days, otherwise we'll commodore it down the line.",
      "Also maybe the patch could/should be promoted to the adventure patch, would like to know if anyone has strong opinions against that",
      "> General \"lets wait and see\" for [KyoriPowered/adventure#1034](https://github.com/KyoriPowered/adventure/issues/1034), as we could use ComponentDecoder over ComponentSerialiser if possible.\r\n> \r\n> I'd give it a couple days, otherwise we'll commodore it down the line.\r\n\r\nWaiting another week or month will not kill it. So just wait for the decoder.",
      "> Should we add `set` methods as well? I don't think there are for other specific types, but since we aren't hooking Component into the snakeyaml type system, maybe some set methods would be good?\r\n\r\nAddressed with 72031ae5a6b410c505cd0285a1003897d1b31449 ",
      "Should we fixup this onto the adventure commit?",
      "Yea :+1: add yourself as coauthor but yea",
      "> Yea 👍 add yourself as coauthor but yea\r\n\r\nDone."
    ],
    "commit_messages": [
      "add rich message component support to configuration (#10225)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a291d9087c4d6d376357",
    "number": 10218,
    "body": "resolves #9958 ",
    "head_branch": "fix-entity-desync",
    "is_a_fork": true,
    "comments": [
      "lgtm!",
      "Closing as per the top comment."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a292d9087c4d6d376358",
    "number": 10217,
    "body": "resolves #9958 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a293d9087c4d6d376359",
    "number": 10216,
    "body": "Two methods returning locales are annotated @NotNull, despite being able to return null",
    "head_branch": "fix-nonnull-locales",
    "is_a_fork": true,
    "comments": [
      "Is there a reason why the default fallback is the US locale? I'd say if player's locale cannot be parsed, it'd better be something like `Locale.ROOT`, so we can check for that and act accordingly, like warning a player.",
      "> Is there a reason why the default fallback is the US locale? I'd say if player's locale cannot be parsed, it'd better be something like `Locale.ROOT`, so we can check for that and act accordingly, like warning a player.\r\n\r\nPersonally, I would say it is very standard to default to English. I am biased, but defaulting to the server's root Locale seems like it could cause issues",
      "> Personally, I would say it is very standard to default to English. I am biased, but defaulting to the server's root Locale seems like it could cause issues\r\n\r\nWell, there's also `Locale.ENGLISH` which is used fairly often too, hence the question. Also, the root locale isn't \"server's root locale\", but rather a neutral one, as stated in its javadoc.",
      "> Is there a reason why the default fallback is the US locale? I'd say if player's locale cannot be parsed, it'd better be something like `Locale.ROOT`, so we can check for that and act accordingly, like warning a player.\r\n\r\nLocale.US is the fallback locale used elsewhere:\r\nhttps://github.com/PaperMC/Paper/blob/c5d168cef92148a6799141832fdb5f95732c1a38/patches/server/0010-Adventure.patch#L2763\r\nhttps://github.com/PaperMC/Paper/blob/c5d168cef92148a6799141832fdb5f95732c1a38/patches/server/0010-Adventure.patch#L1476\r\n\r\nI don't mind Locale.ROOT, but consistency with the existing code is more important"
    ],
    "commit_messages": [
      "Fix NotNull locales (#10216)\n\nTwo methods returning locales are annotated @NotNull, despite being able\r\nto return null"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a294d9087c4d6d37635a",
    "number": 10215,
    "body": "Adds API to get if an entity is pickable, as well as its pick radius.",
    "head_branch": "pick-api",
    "is_a_fork": true,
    "comments": [
      "Having this on a `Entity` interface feels wrong. `player.getPickRadius()` will confuse many people into thinking it's a radius of player ability to pickup items. Also, `Item` already has `canMobPickup()` and `canPlayerPickup()` methods, so a having third one with such unclear naming will mess stuff up.\r\n\r\nI'd say this better to be abstracted as an interface with `getPickupRadius()` method (also maybe `getItemStack()`?), and make related `Entity` interfaces extend it (I guess it's just `Item` and `AbstractArrow` right now).",
      "> I'd say this better to be abstracted as an interface with getPickupRadius() method (also maybe getItemStack()?), and make related Entity interfaces extend it (I guess it's just Item and AbstractArrow right now).\r\n\r\nI'm a bit confused? This doesn't related to picking up items/arrows - it's related to 'picking' entities, such as when you middle click to obtain a spawn egg or attack an entity.",
      "> > I'd say this better to be abstracted as an interface with getPickupRadius() method (also maybe getItemStack()?), and make related Entity interfaces extend it (I guess it's just Item and AbstractArrow right now).\r\n> \r\n> I'm a bit confused? This doesn't related to picking up items/arrows - it's related to 'picking' entities, such as when you middle click to obtain a spawn egg or attack an entity.\r\n\r\nShould this be mentioned in the JavaDocs then? I actually don't know if it should, all I can say that I was confused about the exact functionality too so it might be something to think about.",
      "> I'm a bit confused? This doesn't related to picking up items/arrows - it's related to 'picking' entities, such as when you middle click to obtain a spawn egg or attack an entity.\r\n\r\nOh, sorry, I don't really know the internals. But honestly, then it sounds even more confusing. Even though NMS uses \"pick\", I think there should be a better term/wording for this, and javadocs are clearly.. unclear of what exactly the parameter is.",
      "Attempted to clarify the javadocs a bit more.",
      "What is the API usecase for this here ?\r\nCan you describe this further ?\r\n\r\nJust exposing internals for the sake if exposing seems meh, especially with such a weird concept like the \"pickable\" mojang fields.",
      "Personally, was trying to to get the entities within a player's line of sight that they could potentially hit. Referenced vanilla code and it used these values, so wrote this PR to expose them.",
      "Discussing this in voice, \r\nregarding isPickable,\r\n1) We have no idea what the proper intended contract here is, it just seems to be, mojang had a problem, and shoved in a hack for said problem. There is no strong server sided basis for it, \"pickable\" is such a tragic name in terms of the server API in terms of what it's trying to represent, `isClientTargetable` is maybe akin to a better name, but, it's horrible naming all around\r\n2) This probably belongs in unsafe, as said, there is no strong contract for it\r\n\r\nregarding the range, this is generally not a range, this is basically just a \"hit box inflation scale\" value",
      "I think in general, this needs another name, its super confusing right now",
      "Renamed `isPickable` and `getPickRadius` to `isInteractable` and `getInteractionRadius`. Additionally, added a check for `Entity#isSpectator` in `isInteractable` since all areas that use the NMS method also check for spectator status. Expanded upon the Javadoc for `isInteractable` to include more examples of what an \"interaction\" is. Didn't go for naming similar to `isClientTargetable`, since it's not only used by the client. Feel free to suggest better names.",
      "Given we have 0 idea what the mojang defined concept behind this is, exposing it as API is a meh thing.\r\nThe increadibly niche usecase makes it even less compelling.\r\n\r\nI can see the reason you want it, but I think this would best live in UnsafeValues.\r\nThe concept can change any version, we don't have a clear definition for these values.\r\nExposing them to non unsafe API without a proper definition is asking for this to break down the line.\r\n\r\nPlease move this to UnsafeValues and have them take the Entity instance as param instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a295d9087c4d6d37635b",
    "number": 10212,
    "body": "Adds Event to detect Presses and Releases of Buttons&Pressure Plates. \r\n\r\nI know button press can be detected via InteractEvents, but my main motivation was the Release part, which does not have any event. So if you deem it to be too much, I can rework it into something like BlockReleasedEvent or BlockRevertedToDefaultEvent...",
    "head_branch": "feature/block-press-change-event",
    "is_a_fork": true,
    "comments": [
      "Not really commenting on the merits of this event, but you can check for the pressing and releasing of pressure plates and buttons using `BlockRedstoneEvent`, can't you?",
      "> Not really commenting on the merits of this event, but you can check for the pressing and releasing of pressure plates and buttons using `BlockRedstoneEvent`, can't you?\r\n\r\nYes, you can... Again, the pressing Part is there for sole parity/symmetry of the event... also as opposed to BlockRedstoneEvent, which is called for dozens other cases, this is only for the presses...\r\n\r\nEdit, too late, can't read. You are right I probably could check it via that event, but my stance on generality still stands..."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a296d9087c4d6d37635c",
    "number": 10206,
    "body": "The function that checks wich blocks should be included in a collision has a special case with blocks that have a \"Block\" Shape.\r\nIf it is a Block, the check wether the block should be included in the collision does not subtract a collision-Epsilon from the bounding box\r\nThe Optimized Implementation of paper did not have this special case, wich intruduced non-vanilla behaviour\r\n\r\nThis PR fixes https://github.com/PaperMC/Paper/issues/9807",
    "head_branch": "collision-fix",
    "is_a_fork": true,
    "comments": [
      "The code that Vanilla uses is likely a poor copy of optimisations Paper previously had years ago. The problem with this code is that Vanilla is not adhering to the collision system's principles, as the epsilon exists to fix collision bugs. The collision patch also fixes other issues with the epsilon in hard entity collisions (i.e boats) as well, which are not going to be reverted.\r\n\r\nReally, this should be reported to Mojang.",
      "The PR changes the code that is responsible for checking wich blocks to collide with, not collision itself\r\n\r\nThis is only an problem on Paper currently, and causes noticable non vanilla behaviours as shown in the confirmed issue (https://streamable.com/uazurs)\r\n\r\nthe collision without epsilon is only used on Blocks with a \"Block\" Shapes, and would not revert any other collision that follows the epsilon rule\r\n\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a298d9087c4d6d37635d",
    "number": 10205,
    "body": "The function that checks wich blocks should be included in a collision has a special case with blocks that have a \"Block\" Shape.\r\nIf it is a Block, the check wether the block should be included in the collision does not subtract a collision-Epsilon from the bounding box\r\nThe Optimized Implementation of paper did not have this special case, wich intruduced non-vanilla behaviour\r\n\r\nThis PR fixes https://github.com/PaperMC/Paper/issues/9807\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a298d9087c4d6d37635e",
    "number": 10204,
    "body": "\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-10204.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/1203795900.zip)",
    "head_branch": "pp",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a29ad9087c4d6d37635f",
    "number": 10203,
    "body": "This fix an issue where getHitBlock, getHitEntity and getHitBlockFace are always null for this event unlike its parent.",
    "head_branch": "fix/watersplashevnt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix WaterBottleSplashEvent not forwarding hit result (#10203)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a29bd9087c4d6d376360",
    "number": 10202,
    "body": "This is a small cleanup of the events (mostly paper ones) with some redundant stuff that comes often when reviewing event pr (like annotating the constructor as Internal, formatting etc.). The server changes is just an update to use the right methods that probably didn't exists yet at the time the event was made and some other minor things.",
    "head_branch": "clean/events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Cleanup events (#10202)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a29cd9087c4d6d376361",
    "number": 10200,
    "body": "Tracks the player who blew up a bed/respawn anchor so PlayerDeathEvent can be used to get the player who caused the death from the explosion.",
    "head_branch": "feature/anchor-bed-kill-credit",
    "is_a_fork": true,
    "comments": [
      "Maybe a suggestion for improvement: how about adding the \"igniter\" into BlockExplodeEvent as well?",
      "This pr currently breaks BlockExplodeEvent since it only gets called when the entity in the explosion is null, I'll fix this soon.\r\n\r\n",
      "> This pr currently breaks BlockExplodeEvent since it only gets called when the entity in the explosion is null, I'll fix this soon.\r\n\r\nAre you sure? I did not look too much into the code, but aren't you mixing up the entity that exploded with the entity that caused the entity/block to explode? I think the one you have added is in the DamageSource...",
      "> > This pr currently breaks BlockExplodeEvent since it only gets called when the entity in the explosion is null, I'll fix this soon.\r\n> \r\n> Are you sure? I did not look too much into the code, but aren't you mixing up the entity that exploded with the entity that caused the entity/block to explode? I think the one you have added is in the DamageSource...\r\n\r\nNo, prior to the commit I just made, to differentiate whether to call an EntityExplodeEvent or BlockExplodeEvent, Explosion.java would just check if the source field is null, which doesn't work because it's getting set to the source of the explosion now (for beds and anchors). The source is the entity that caused the block to explode, which could probably be implemented differently but I think this is the cleanest.",
      "> > > This pr currently breaks BlockExplodeEvent since it only gets called when the entity in the explosion is null, I'll fix this soon.\r\n> > \r\n> > \r\n> > Are you sure? I did not look too much into the code, but aren't you mixing up the entity that exploded with the entity that caused the entity/block to explode? I think the one you have added is in the DamageSource...\r\n> \r\n> No, prior to the commit I just made, to differentiate whether to call an EntityExplodeEvent or BlockExplodeEvent, Explosion.java would just check if the source field is null, which doesn't work because it's getting set to the source of the explosion now (for beds and anchors). The source is the entity that caused the block to explode, which could probably be implemented differently but I think this is the cleanest.\r\n\r\nAh you are right... The entity exploding (tnt/creeper) in that case is the entity that caused the explosion... Thank you!\r\n",
      "Currently testing everything to make sure I can't find anything broken"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a29dd9087c4d6d376362",
    "number": 10199,
    "body": "Tracks the player who blew up a bed/respawn anchor so PlayerDeathEvent can be used to get the player who caused the death from the explosion.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a29ed9087c4d6d376363",
    "number": 10197,
    "body": "This PR adds a `ifOnline` method to `OfflinePlayer`. I think its self-explanatory what it does.",
    "head_branch": "OfflinePlayerAPI",
    "is_a_fork": true,
    "comments": [
      "This does not really seem to provide much value when you can just do\n```java\nOfflinePlayer op = ...\nif (op.getPlayer() instanceof Player player) {\n  // ...\n}\n```\nat best you will save one line for one line, every other case isn't really excusable",
      "~~Maybe using `isConnected` instead of `isOnline` will be better? But then I think you'll have to rename the method to `ifConnected`... Or, just add both methods...~~",
      "> This does not really seem to provide much value when you can just do\n> ```java\n> OfflinePlayer op = ...\n> if (op.getPlayer() instanceof Player player) {\n>   // ...\n> }\n> ```\n> at best you will save one line for one line, every other case isn't really excusable\n\nI mean I think that is the nature of if<insert> methods. See `Optional#ifPresent` for example and people still use it. ",
      "> I mean I think that is the nature of if methods. See `Optional#ifPresent` for example and people still use it.\r\n\r\n`Optional`'s whole *purpose* is being *potentially present*, though. It can't be cast from `Optional` to `Definitely` ",
      "> > This does not really seem to provide much value when you can just do\r\n> > ```java\r\n> > OfflinePlayer op = ...\r\n> > if (op.getPlayer() instanceof Player player) {\r\n> >   // ...\r\n> > }\r\n> > ```\r\n> >   \r\n> > at best you will save one line for one line, every other case isn't really excusable\r\n> \r\n> I mean I think that is the nature of if methods. See `Optional#ifPresent` for example and people still use it.\r\n\r\nI don't see how it makes sense to compare OfflinePlayer with Optional, one is meant to be a programming safe-guard for language/library design, OfflinePlayer is just a data bag, not an `Optional<Player>`. Calling it \"the nature of if methods\" asks to litter every piece of \"maybe X\" data, `Map.ifContains(k, Consumer<V>)`, `List.ifContains(int idx, Consumer<E>)`, `Inventory.ifNotEmpty(int idx, Consumer<ItemStack>)` etc\r\n\r\n`Optional.ifPresent` is used because it's the better alternative to isPresent/isEmpty + get until deconstrucion patterns arrive (`if (optionalString instanceof Optional.of(String str))`), ",
      "I must admit that I did not have your way in mind for that case. But I don't think that this method is useless at all either and certainly not redundant. \r\nYou said that this would save one line but especially if my code just needs one line its super handy to have such a method.  \r\n\r\nFor example you generally work with `OfflinePlayer` and write a friend system and someone sends a friend invite it looks better (my opinion) if you use\r\n\r\n```java\r\nOfflinePlayer op = ....\r\n\r\nop.ifOnline(player -> player.sendMessage(\"x sent you a friend request\"));\r\n\r\n// ...\r\n```\r\ninstead of\r\n```java\r\nOfflinePlayer op = ...\r\n\r\nif (op.getPlayer() instanceof Player player) {\r\n  player.sendMessage(\"x sent you a friend request\");\r\n}\r\n\r\n// ...\r\n```",
      "it's yet another patch that we have to maintain when we've already got far too many patches for githubs folder to manage, which adds very little other than saving an line or two in code, with a method which extends the usage of an API method which quite frankly the implementation of sucks and probably should not be expanded too much further",
      "I get the second part of your message, but I don't understand the first part. As far as I know, once the repo restructure happens there will be a patch per class, so it won't be another patch and you might also have too many patches (I don't know how many classes Paper modifies) for github and since I don't add a new class i also won't add a new patch. But starting to argue with the fact that \"githubs folder can't manage it\" or \"the maintenance effort of the patch\", really? \r\n\r\nBut as I already said, if you generally don't want to expand the `OfflinePlayer` API because its implementation sucks it's a fair argument which I understand.  ",
      "Yes, really. We use GitHub and manage the project on GitHub, the fact that we cannot even view the patches folder is a pretty hefty deal, and until we hard fork, that is going to be an annoying problem to contend with. With the new layout, patches will be organized into a folder tree, so that we don't have over 1000 patches in a folder, and then we'll be able to manage it.\r\n\r\nIn that time, either patches should be merged into other patches, or they need to further justify their worth to the project, and this, I generally cannot see what value it adds especially given its reliance on a mechanism that does not accuratly represent what people expect that it's intended to mean, if you want to validate if you can actually send a message, just seeing if getPlayer returns a value is generally not enough. isOnline does not promise that a player is actually connected and able to recieve anything, all it infers is that a player instance is still registered, the only times where this method makes sense is when you literally do not care if a player is actually online or not, you just care if they're registered, which imho is not a general contract I want to be expanded upon within the API.\r\n\r\nThis also does not even need a server patch, for that matter, all of what this does could be implemented inside of an API patch.",
      "Not to be rude or something but I feel like this is a \"I just want to contribute _something_\" kind of deal. Is getting rid of like two lines of code worth the maintenance?\r\nI also don't think it's worth adding something like this since as previously mentioned you can already write code that only executes if the player is online.\r\nBut, the decision is not up to me, and again, I am sorry if I came along rude with this first sentence.",
      "This is getting a bit out of hand, so here's some closing words: As emily said, the benefit to this is relatively small. Patch formats aside, adding such helper methods to API for saving the braces and line breaks of an if statement in fairly niche use-cases isn't worth having another method you have to scroll through. Appreciate the thought anyways",
      "> Not to be rude or something but I feel like this is a \"I just want to contribute _something_\" kind of deal.\n\nNo. It is not just a \"I just want to contribute something\" case. I have already said above that I just wasn't aware of the `instance of` check and later I expanded my argumentation with a use case. I already admitted that, if you don't want to expand this particular API because its implementation sucks, is another good reason. \n\n> isOnline does not promise that a player is actually connected and able to recieve anything... \n\nWell that would be easily changeable with using `isConnected` instead of `isOnline` or not? \n\n> This also does not even need a server patch, for that matter, all of what this does could be implemented inside of an API patch.\n\nYeah, I also thought about that after I opened the PR and planned to change it once I got more feedback about it's general existence. \n\nBut as the majority of people here thinks that this is a redundant addition and some even think it's just to farm contributions I might as well close it. \n\nThank you for the feedback anyways. \n\nEdit: Sorry Kenny, didn't see your message. Thanks for your input though. "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a29fd9087c4d6d376364",
    "number": 10195,
    "body": "Adds a little Conduit API to the basically not existing one lol",
    "head_branch": "add-conduit-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Conduit API (#10195)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a2a0d9087c4d6d376365",
    "number": 10194,
    "body": "since the irc section was also removed on the website i assume it should also be removed here?",
    "head_branch": "remove-irc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Remove IRC link from the README (#10194)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2a1d9087c4d6d376366",
    "number": 10193,
    "body": "resolves #9371 ",
    "head_branch": "add-maximum-api",
    "is_a_fork": true,
    "comments": [
      "The behaviour here is kind of weird.\r\nThis is not really a max, barely a soft maximum.\r\nIt is a weird way to set one part of the computation algorithm used to determine the ticks till next arrow removal.\r\n\r\nI think we'd be better off if we expose a setter for said tick time till next removal.\r\nPlugins wanting to change the value for e.g. 40 arrows can do that in the removal event by setting said value to e.g. always 20 ticks or 1 second.\r\nOr compute their own logic.\r\n\r\nWe'd need to look into exposing a similar \"stinger change event\" so plugins can hook there, at which point moving things up in the ArrowRemovalEvent to a common \"SomethingRemovalEvent\" (name patent pending) might be needed.",
      "yeah thats probably a better way to do it. what would be a good name for the setters? something like setTicksUntilNextArrowRemoval?",
      "Alright the method naming might need some changes but i think the current adventure style naming doesn't sound too bad. "
    ],
    "commit_messages": [
      "Add Arrow/Stinger Removal Time API (#10193)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a2a2d9087c4d6d376367",
    "number": 10191,
    "body": "Because this exploit has been widely known for years and has not been fixed by Mojang, we decided that it was worth allowing people to toggle it on/off due to how easy it is to make it configurable.\r\n\r\nIt should be noted that this decision does not promise all future exploits will be configurable. \r\n\r\n*paper-global.yml:*\r\n```yml\r\nunsupported-settings:\r\n    allow-unsafe-end-portal-teleportation: true\r\n```\r\n\r\nWith hard forking on the future, we are hoping to open Paper up to more groups of people who may have utilized exploits like this.\r\n\r\nTested with world provided from https://www.youtube.com/watch?v=lCYR2FN20lk\r\nPlease feel free to test your sand dupe setups using the jar provided below.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-10191.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/1293244069.zip)",
    "head_branch": "sand-dupe-option",
    "is_a_fork": true,
    "comments": [
      "I believe this would be beneficial to the project, given the considerable amount of time I've spent assisting people in the Paper-help channel. It is indeed a frequently requested feature, and since @Owen1212055 has volunteered to maintain it, there should be no issue!\r\n\r\nIt would just be part of the `unsupported settings`, receiving similar treatment to bedrock breaking and TNT duping. 👍 ",
      "Needs docs before merge, maybe even an announcement that we now support it ",
      "https://github.com/PaperMC/docs/pull/292",
      "Any update on releasing this?\r\n"
    ],
    "commit_messages": [
      "Allow enabling sand duping (#10191)\n\nBecause this exploit has been widely known for years and has not been fixed by Mojang, we decided that it was worth allowing people to toggle it on/off due to how easy it is to make it configurable.\r\n\r\nIt should be noted that this decision does not promise all future exploits will be configurable."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2a3d9087c4d6d376368",
    "number": 10190,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/10189\r\n\r\nWhen the loot table registry system was changed, this wasn't update to actually check if the loot table didn't exist to return null. As a result, LootTables.EMPTY#getLootTable returned null when it shouldn't have.",
    "head_branch": "fix/empty-loot-tables",
    "is_a_fork": true,
    "comments": [
      "Не работает жирный цвет, почините пж"
    ],
    "commit_messages": [
      "Properly check if a loot table exists (#10190)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2a5d9087c4d6d376369",
    "number": 10185,
    "body": "Resolves https://github.com/PaperMC/Paper/issues/9484\r\n\r\nI made the decision to not expose stuff like asCreative() and instead added a separate enum value for that.\r\nFeel free to decide otherwise.",
    "head_branch": "feature/expose-itemstack-get-tooltip-lines",
    "is_a_fork": true,
    "comments": [
      "Gone for the Adventure style or similar way. Hopefully that's what you meant @lynxplay.\r\nJavaDoc is missing now, will add it later. Brainstorming welcome. \r\n\r\nSus stew.\r\nNormal, Normal && Advanced, Creative, Creative && Advanced.\r\n\r\n<img width=\"670\" alt=\"Bildschirmfoto 2024-01-28 um 16 26 14\" src=\"https://github.com/PaperMC/Paper/assets/1420893/aee53ca9-d6ab-42e8-9145-9d5385938ead\">\r\n\r\n```java\r\n @EventHandler\r\n    public void onPlayerInteract(PlayerInteractEvent interactEvent) {\r\n        if (interactEvent.getAction() == Action.RIGHT_CLICK_BLOCK || interactEvent.getAction() == Action.LEFT_CLICK_BLOCK) {\r\n            return;\r\n        }\r\n        var player = interactEvent.getPlayer();\r\n        var itemStack = interactEvent.getItem();\r\n        if (itemStack != null && !itemStack.getType().isAir()) {\r\n            var flagConfig = TooltipFlagConfiguration.normal();\r\n            if (player.getGameMode() == GameMode.CREATIVE) {\r\n                flagConfig = flagConfig.asCreative();\r\n            }\r\n            if (interactEvent.getAction() == Action.RIGHT_CLICK_AIR) {\r\n                flagConfig = flagConfig.asAdvanced();\r\n            }\r\n            final List<Component> components = itemStack.computeTooltipLines(flagConfig, player);\r\n            components.forEach(player::sendMessage);\r\n        } else {\r\n            player.sendRichMessage(\"<red>Something unexpected happened.\");\r\n        }\r\n    }\r\n```\r\n\r\n",
      "@Machine-Maker fine with the simplification. We can complicate it when needed e.g. Mojang introduces one that doesn't have one or the other."
    ],
    "commit_messages": [
      "itemstack expose tooltip lines (#10185)\n\n* Itemstack Tooltip API\r\n\r\n* re-order methods so advanced is first\r\n\r\n---------\r\n\r\nCo-authored-by: Jake Potrebic <jake.m.potrebic@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a2a6d9087c4d6d37636a",
    "number": 10183,
    "body": "When a plugin listens to the EntityAddToWorld and EntityRemoveFromWorld events, I don't believe there is currently any method of directly obtaining which world the entity was actually added to/removed from. Using event.getEntity().getWorld() works in many cases, but not all. Specifically, when an entity is teleported from one world to another, the location of the entity is updated prior to the removal event being called. This means that when an entity goes through a nether/end portal or is teleported between worlds with a command, a plugin listening to the EntityRemoveFromWorldEvent has no way of determining which world the entity was actually removed from (without relying on other events).\r\n\r\nTo resolve this, I've added the world as a field in the events along with a getter to retrieve it. I also removed an unused import and made the documentation more clear on the event behaviour when chunks load/unload.",
    "head_branch": "add-world-to-entity-add-remove-events",
    "is_a_fork": true,
    "comments": [
      "I think it doesn't hurt to add it. ",
      "Sure, it certainly doesn't hurt to clarify things. I added a note to the javadoc in the EntityRemoveFromWorld event. Though I don't believe it's necessary to note it in the EntityAddToWorld event. While I did add a getWorld() method to the EntityAddToWorld event as a precaution, this issue mainly pertains to the EntityRemoveFromWorld event, and I can't think of a scenario where the world would differ from the entity's world when the EntityAddToWorld event is being fired."
    ],
    "commit_messages": [
      "Add world to Entity AddTo/RemoveFrom Events (#10183)\n\nWhen a plugin listens to the EntityAddToWorld and EntityRemoveFromWorld events, I don't believe there is currently any method of directly obtaining which world the entity was actually added to/removed from. Using event.getEntity().getWorld() works in many cases, but not all. Specifically, when an entity is teleported from one world to another, the location of the entity is updated prior to the removal event being called. This means that when an entity goes through a nether/end portal or is teleported between worlds with a command, a plugin listening to the EntityRemoveFromWorldEvent has no way of determining which world the entity was actually removed from (without relying on other events).\r\n\r\nTo resolve this, I've added the world as a field in the events along with a getter to retrieve it. I also removed an unused import and made the documentation more clear on the event behaviour when chunks load/unload."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a2a7d9087c4d6d37636b",
    "number": 10182,
    "body": "When a plugin listens to the EntityAddToWorld and EntityRemoveFromWorld events, I don't believe there is currently any method of directly obtaining which world the entity was actually added to/removed from. Using `event.getEntity().getWorld()` works in many cases, but not all. Specifically, when an entity is teleported from one world to another, the location of the entity is updated prior to the removal event being called. This means that when an entity goes through a nether/end portal or is teleported between worlds with a command, a plugin listening to the EntityRemoveFromWorldEvent has no way of determining which world the entity was actually removed from (without relying on other events).\r\n\r\nTo resolve this, I've added the world as a field in the events along with a getter to retrieve it. I also removed an unused import and made the documentation more clear on the event behaviour when chunks load/unload.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2a8d9087c4d6d37636c",
    "number": 10180,
    "body": "As far as I can tell, the memory that this method reserves is only ever released by the server in one spot, which is unused in paper. By not allocating it we save about 10,5 MB of memory that can then be used elsewhere",
    "head_branch": "feat/disable-memory-reserve",
    "is_a_fork": true,
    "comments": [
      "This is 100% intentional, this memory will pretty much end up in old gen and not be a real factor towards anything until you hit \"oh shit\", at which point, it's freed in order to pray that they can close the JVM in a safe and effective™ manner",
      "Then again, the place its used is dumb, I'm not 100% sure on removing this, it's pretty much a pointless slab of memory in which is effectively useless, so it's not a big deal in any manner, not sure, either we remove it or we figure out a manner of effectively using it if needs be"
    ],
    "commit_messages": [
      "Disable memory reserve allocating (#10180)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2a9d9087c4d6d37636d",
    "number": 10179,
    "body": "Add back Reduce allocation of Vec3D by entity tracker patch",
    "head_branch": "Reduce-allocation-of-Vec3D-by-entity-tracker",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add back Reduce allocation of Vec3D by entity tracker patch (#10179)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2aad9087c4d6d37636e",
    "number": 10176,
    "body": "Calls the EntityChangeBlockEvent for when candles, normal ones and the ones on cakes, are extinguished as described in #10112 ",
    "head_branch": "feature/entityblockchangeevent-for-extinguishing-candles",
    "is_a_fork": true,
    "comments": [
      "Thank you for the PR! There's already a patch for adding tons of missing calls, please merge it into that: `Fire EntityChangeBlockEvent in more places` (patch number 0824 currently)",
      "      \r\n  \r\n\r\n Maybe a blockextinguishevent and a playerblockextinguish event? Both events could extend some event to be able to listen to it\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n\r\n  \r\n  \r\n>   \r\n> On Jan 27, 2024 at 7:28 PM,  <Jake Potrebic ***@***.***)>  wrote:\r\n>   \r\n>   \r\n>   \r\n>\r\n>\r\n>\r\n>   \r\n>\r\n> @Machine-Maker  requested changes on this pull request.\r\n>\r\n>   \r\n>\r\n> Looking at how extinguishing happens, I no longer think this event is appropriate for it. Extinguishing candles can happen due to non-entity related interactions, like water flowing. We need a solution that covers all these cases, not just some of them.\r\n>\r\n>   \r\n>\r\n> —\r\n>  Reply to this email directly,   view it on GitHub (https://github.com/PaperMC/Paper/pull/10176#pullrequestreview-1847151825), or   unsubscribe (https://github.com/notifications/unsubscribe-auth/AF3TQRKI43GCLBXTU34HPKLYQVBN3AVCNFSM6AAAAABB7SUUXWVHI2DSMVQWIX3LMV43YUDVNRWFEZLROVSXG5CSMV3GSZLXHMYTQNBXGE2TCOBSGU).\r\n>  You are receiving this because you authored the thread.Message ID:  ***@***.***>\r\n>\r\n>   \r\n>   \r\n  \r\n  \r\n     "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2abd9087c4d6d37636f",
    "number": 10175,
    "body": "Fixes the incorrect Javadoc comment of the BlockDropItemEvent as described in #10133 \r\n\r\nI'm not entirely sure if the `// Paper end - Fix incorrect documentation` is in the right place as it's between the Javadoc comment and the class definition.",
    "head_branch": "fix/incorrect-documentation-blockdropitemevent",
    "is_a_fork": true,
    "comments": [
      "Generally we don’t even add paper comments for Javadoc changes. Also, this change can be merged in with an existing patch called something like “fix javadocs” or “fix upstream javadocs”. ",
      "Thank you, I'll do that in the morning"
    ],
    "commit_messages": [
      "[ci skip] Fix incorrect documentation for BlockDropItemEvent (#10175)\n\nCo-authored-by: Bjarne Koll <lynxplay101@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a2acd9087c4d6d376370",
    "number": 10173,
    "body": "This pull request adds a `PlayerPreTeleportEvent`.  Resolves #10168 \r\n\r\n~~Currently WIP because there are some things that need to be figured out. For example where we want the event to be called in each case.~~ \r\nReady for review.  It is currently called where I think it makes the most sense. If we want to call it earlier, it needs some serious refactoring at some places and sometimes it really does not make sense to call it earlier.\r\n\r\n~~Also do we want to add a `EntityPreTeleportEvent`?~~\r\n\r\n~~What also needs to be discussed is if we want to allow modification of the locations in this event and if it should be cancellable. \r\nIn my mind it doesn't really make sense to allow modification. This should be purely for pre TP checks.~~\r\n- [x] Find all spots where the event needs to be called. \r\n- [x] `EntityPreTeleportEvent`\r\n- [ ] ~~Modifiability?~~ \r\n- [x] JavaDocs",
    "head_branch": "PlayerPreTeleportEvent",
    "is_a_fork": true,
    "comments": [
      "> Modifiability\r\n\r\nI think that it doesn't needed in this event, so just call it with a cloned `Location`s if necessary. IMO the main purpose of this event is to \"notify\" plugins that a player will be teleported, and they need to prepare him for this (for example, as in my case, remove all passengers or `setSpectatorTarget(null)` if he is in spectator game mode).",
      ">  `EntityPreTeleportEvent`\r\n\r\nThe `EntityPreTeleportEvent` would likely be useful for the same reasons that `PlayerPreTeleportEvent` is useful, obviously would be even more niche scenarios but, would make sense to exist",
      "> > Modifiability\r\n> \r\n> I think that it doesn't needed in this event, so just call it with a cloned `Location`s if necessary. IMO the main purpose of this event is to \"notify\" plugins that a player will be teleported, and they need to prepare him for this (for example, as in my case, remove all passengers or `setSpectatorTarget(null)` if he is in spectator game mode).\r\n\r\nI agree here. This event should be solely for \"preparation\" purposes and to make stuff more compatible with other plugins. \r\n",
      "In situations like this I wish there was an Immutable Location ",
      "can just always return a clone of the stored Location object",
      "> can just always return a clone of the stored Location object\n\nYup good idea. ",
      "Yeah, that works just thought it'd be handy for clarity",
      "Ok so, I am working on the changes right now and the more I am working on the `EntityPreTeleportEvent` the more I get the feeling that this is bigger than just a few calls. \r\nFor example, the Event initially doesn't have a `TeleportCause` I can use. Should I create a new Enum, do we use the PlayerEvent.Cause enum (This would not really make sense) or do we just leave it? ",
      "The `EntityTeleportEvent` doesn't have a TeleportCause so I don't see why `EntityPreTeleportEvent` should? \r\nOr am I misunderstanding?",
      "No it doesn't. ",
      "Ok so I started adding the `EntityPreTeleportEvent`. I have no clue why the workflow fails. I tried to apply patches locally and it works. Build also works. ",
      "What's left regarding actual implementation? It looks pretty complete",
      "Implementations of the EntityTeleportEvent aren't fully covered yet. Minor cleanup of the Patches are also necessary. Then I would hope someone in the team could take a look if that what I have done is alright. Did change quite a bit in the `CraftEventFactory` class 😅.\n\nAlso need to figure out why the gh action cries. ",
      "Ok so i finished the initial work and this should be ready for testing and reviewing. ",
      "In my current scenario, I have a cosmetic plugin that adds a passenger to the player (a TextDisplay), and all teleportations are blocked because the player has at least one passenger, with no event being called to remove it. This forces the use of NMS (which is discouraged today). This event would allow plugin developers the opportunity to ensure compliance with checks before teleportation occurs.",
      "Hello, \r\ndo we have any updates regarding this issue and this pull request?",
      "Maybe I am just misunderstanding something but I don't really know why there is a `PlayerPreTeleportEvent` added.\r\nI have a plugin which makes use of the `PlayerTeleportEvent` and in order to make my logic work correctly I experimented a bit with that event and found out that `Player#getWorld()` returns the same world as `PlayerTeleportEvent#getFrom()` which means that the `PlayerTeleportEvent` is actually called before teleporting now.\r\nAgain, I might just be misunderstanding something here, if so I'd love to know what.",
      "> Maybe I am just misunderstanding something but I don't really know why there is a `PlayerPreTeleportEvent` added. I have a plugin which makes use of the `PlayerTeleportEvent` and in order to make my logic work correctly I experimented a bit with that event and found out that `Player#getWorld()` returns the same world as `PlayerTeleportEvent#getFrom()` which means that the `PlayerTeleportEvent` is actually called before teleporting now. Again, I might just be misunderstanding something here, if so I'd love to know what.\r\n\r\nThe issue that this resolves is mentioned at the top of this PR: https://github.com/PaperMC/Paper/issues/10168",
      "If the player/entity has at least one passenger, the PlayerTeleportEvent is not triggered and teleportation is blocked.",
      "> The issue that this resolves is mentioned at the top of this PR: https://github.com/PaperMC/Paper/issues/10168\r\n\r\nI mean, nevertheless, the name `PlayerPreTeleportEvent` is misleading then since the current `PlayerTeleportEvent` is called before teleporting.",
      "> > The issue that this resolves is mentioned at the top of this PR: #10168\r\n> \r\n> I mean, nevertheless, the name `PlayerPreTeleportEvent` is misleading then since the current `PlayerTeleportEvent` is called before teleporting.\r\n\r\nI think it's perfectly fine personally, PreTeleportEvent implies that is is called before the teleport event. \r\nIt's not my PR but if you don't like the name then maybe give alternative suggestions?\r\n\r\n",
      "> I think it's perfectly fine personally, PreTeleportEvent implies that is is called before the teleport event.\r\nIt's not my PR but if you don't like the name then maybe give alternative suggestions?\r\n\r\nYeah, it does. Still, the existing `PlayerTeleportEvent` is also called before actually teleporting.\r\nAlternative names? Sure, something like `PlayerTeleportPrepareEvent`, could also switch that up to `PlayerPrepareTeleportEvent`.\r\nThe name `PlayerPreTeleportEvent`, again, just doesn't fit because the existing one is fired before teleporting.",
      "> > The issue that this resolves is mentioned at the top of this PR: https://github.com/PaperMC/Paper/issues/10168\n> \n> \n> \n> I mean, nevertheless, the name `PlayerPreTeleportEvent` is misleading then since the current `PlayerTeleportEvent` is called before teleporting.\n\nDo you have a better suggestion how to name the events? `PrepareTeleportEvent` (edit: made that up before I saw your comment), but that would cause people to come in the discord and ask if a PreTeleportEvent exists since they cannot find any. I know that the name is technically misleading but you always have to think about the users and make everything as much userfriendly as possible. Additionally many events are called before the actual thing happens. I don't know how it's handled with other \"pre\" events and if they are being called before the actual thing happens. Need to look into that. ",
      "I am literally fine with any name. If it ends up being named like it currently is - so be it.\r\nI thought about the names I suggested the minute I wrote that comment. Although, I still feel like there should be another name for the proposed event.\r\n\r\n> but you always have to think about the users and make everything as much userfriendly as possible\r\n\r\nThat's a good point, however I don't see how the name `PrepareTeleportEvent` could be misleading? I think it's accurate. It's called to prepare a player about to be teleported. You can make certain changes, remove passengers like the issue wants to, etc.\r\nIf this goes through, then the `PlayerTeleportEvent` can be called, which happens before the player actually is teleported.\r\n\r\n> Additionally many events are called before the actual thing happens\r\n\r\nYeah, probably to be able to cancel them. The `PlayerTeleportEvent` can also be cancelled so it's called before anything happens. Still, it is called before anything happens which is why I think the name `PlayerPreTeleportEvent` doesn't really fit.\r\n\r\nAgain, if it stays at `PreTeleportEvent` I am good with that too but I'd also like to see the name being changed. I don't have any other name sugestions, unfortunately. Maybe someone else comes up with another name.",
      "> That's a good point, however I don't see how the name PrepareTeleportEvent could be misleading\n\nDidn't say it will be misleading. I'm saying that the first name that comes into my mind if I want to search an event that happens before the teleport event I would search for a `PreTeleportEvent`. But honestly I am fine with `PrepareTeleportEvent` too. I'd just wait for maintainers to give input on this. ",
      "Now I'm also think that `PrepareTeleportEvent` is sounds better.",
      "It seems like both are used in Paper, as the purpose of the event is to prepare I agree that `PrepareTeleportEvent` sounds nicer but they both make sense to me.\r\n\r\nExamples of current events:\r\n- PreLookupProfileEvent\r\n- PreFillProfileEvent\r\n- PreCreatureSpawnEvent\r\n- PreSpawnerSpawnEvent\r\n- PrePlayerAttackEntityEven\r\n- PrepareGrindstoneEvent",
      "Hello,\r\nI'm resending a message for this pull request, do we have an ETA for this merger? This addition is eagerly awaited on our side.\r\nThank you ;)",
      "Would it make sense to make the flags present in the event mutable? That way plugins can directly modify the behavior of teleporting passengers/vehicles by adding/removing the flags.",
      "> Would it make sense to make the flags present in the event mutable? That way plugins can directly modify the behavior of teleporting passengers/vehicles by adding/removing the flags.\n\nIs there a use case you can provide where this makes sense? "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2add9087c4d6d376371",
    "number": 10172,
    "body": "There are reasons I can think of why the original patch was dropped:\r\n\r\n1. Mojang made some code changes in order to optimize the networking performance in 1.20.2, as some of these changes were similar to a collection of patches had already existed in Paper, resulting in the removal of these patches.\r\n2. `AbstractEventExecutor.LazyRunnable` had been deprecated since the release of Netty 4.1.92 (see https://github.com/netty/netty/issues/13335)\r\n\r\nAlthough there is an alternative mechanism provided from the API reference of `AbstractEventExecutor`, the solution in this PR only requires a small amount of code changes.",
    "head_branch": "feature/optimise-non-flush-packet-sending",
    "is_a_fork": true,
    "comments": [
      "Has this been tested? I can't connect to the server.",
      "it's a small change in which packets which *need* to get out fast are generally marked as such, and this is working fine here, however, I do test behind a bungee proxy",
      "> Has this been tested? I can't connect to the server.\r\n\r\nOops.\r\n\r\nYes this has been tested and indeed was working, later I was testing out @electronicboy 's suggestion (which causes the player cannot connect to the server) and accidentally pushed that code change as I was out of focus for a bit.\r\n\r\nThe change has been reverted, now this PR should work fine just like at the beginning and I have to be careful next time. Thank you for hitting me up!",
      "This patch broke the plugin that reads and modifies chat packets with ProtocolLib.",
      "> This patch broke the plugin that reads and modifies chat packets with ProtocolLib.\r\n\r\nAre there any log about this?",
      "https://github.com/dmulloy2/ProtocolLib/blob/80aa42009981b505370b00dd71af6d4e41726f38/src/main/java/com/comphenix/protocol/injector/netty/channel/NettyEventLoopProxy.java\r\n\r\nThis is basically down to how they hook the event loop stuff",
      "It seems like I have to open a PR on ProtocolLib to make their event loop hook extending `AbstractEventLoop`. I still have another alternative approach but it would be too much in terms of code diffs",
      "Close this until I came up with a suitable solution."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2aed9087c4d6d376372",
    "number": 10171,
    "body": "Potential successor of #9408 \r\n\r\nThis takes the same general sense of that PR, however makes it much safer in terms of shutdowns, unloads, etc, at the cost of having a thread per world dim store. In theory, this could easily be a shared single pool thread pool, I debated on using a shared more general pool however guaranteeing the safety of writes to this would require much more diff vs what is done here.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-10171.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/1182900212.zip)",
    "head_branch": "asyncsaveddataio",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Async world data IO saving (#10171)\n\nCo-authored-by: Cryptite <cryptite@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2afd9087c4d6d376373",
    "number": 10169,
    "body": "- Refactored the GitHub pull request orchestration script.\r\n- Improved remote repository interaction\r\n- Enhanced branch cleanup by automatically deleting temporary branches and upstream references.\r\n",
    "head_branch": "optimize_apatch1branch",
    "is_a_fork": true,
    "comments": [
      "reformatting is not an optimisation, and after the repeated spam PRs, we have decided to ban you from the organisation"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2b0d9087c4d6d376374",
    "number": 10167,
    "body": "- Integrate wiggling mechanism for rejected patches\r\n- Version 2.0 release for optimized Git patch application",
    "head_branch": "optimize_apatch1",
    "is_a_fork": true,
    "comments": [
      "Please do not open any more spam PRs, we will have to ban you from the GitHub organization if you open a 5th. If you're unsure whether a PR would be considered spam, you should discuss your planned changes in the `#paper-dev` channel of the Paper discord first.\r\n\r\nsee #10150, #10155, #10156, https://github.com/PaperMC/Paper/pull/10156#issuecomment-1886207648"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2b1d9087c4d6d376375",
    "number": 10166,
    "body": "This pull request exposes the `getBaseSeedId` methods from crop blocks. \r\nThis makes it possible to get the corresponding seed to its block representation. \r\nE.g. `Material.POTATO` for `minecraft:potatoes`\r\n\r\nI don't know about the name `getBaseSeedId`. I named it like that cause its the same as the name from the server. Maybe there is a better name for it tho.  ",
    "head_branch": "CropBlockApi",
    "is_a_fork": true,
    "comments": [
      "I'm not a fan of this. This type of API should wait until Material is split up into ItemType and BlockType, and then a subtype of BlockType can be made for CropBlockType that has such a method. \r\n\r\nPutting it on BlockData just seems like a hack to work around that. No nms BlockState or API BLockData is required to make the mapping.",
      "I mean I totally agree with you on that. I didn't like putting it on `BlockData` either but the `CraftCropBlock` extends it so it just made sense as it was the easiest way to do it. ",
      "In general, we are waiting for the BlockType API. This would allow us to better expose API for stuff like this rather than *hacking* it into the current API we already have.\r\n\r\nFeel free to reopen it once that API has gone through. Thank you for your contribution! "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2b2d9087c4d6d376376",
    "number": 10164,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n63c208dd Remove no longer used import\r\n70be76c7 PR-958: Further clarify deprecation of TAG_CONTAINER_ARRAY\r\nae21f4ac PR-955: Add methods to place structures with block/entity transformers\r\ne3d960f2 SPIGOT-7547: Remark that Damageable#setAbsorptionAmount() is capped to a specific value\r\nb125516c Fix typo in RecipeChoice.ExactChoice docs\r\n309497c1 Add EntityMountEvent and EntityDismount Event\r\n2fd45ae3 Improve ItemFactory#enchantItem consistency\r\n2b198268 PR-933: Define native persistent data types for lists\r\n\r\nCraftBukkit Changes:\r\n771182f70 PR-1327: Add methods to place structures with block/entity transformers\r\ne41ad4c82 SPIGOT-7567: SpawnReason for SNOWMAN is reported as BUILD_IRONGOLEM\r\n76931e8bd Add EntityMountEvent and EntityDismount Event\r\n9b29b21c7 PR-1183: Better handle lambda expression and renaming of classes in Commodore 1462ebe85 Reformat Commodore.java\r\n9fde4c037 PR-1324: Improve ItemFactory#enchantItem consistency\r\n4e419c774 PR-1295: Define native persistent data types for lists\r\ndd8cca388 SPIGOT-7562: Fix Score#getScore and Score#isScoreSet\r\n690278200 Only fetch an online UUID in online mode 1da8d9a53 Fire PreLogin events even in offline mode\r\n2e88514ad PR-1325: Use CraftBlockType and CraftItemType instead of CraftMagicNumbers to convert between minecraft and bukkit block / item representation\r\n\r\nSpigot Changes:\r\n864e4acc Restore accidentally removed package-info.java\r\nf91a10d5 Remove obsolete EntityMountEvent and EntityDismountEvent\r\n828f0593 SPIGOT-7558: Deprecate silenceable lightning API as sound is now client-side and cannot be removed \r\ndc4e035 Remove obsolete patch fetching correct mode UUIDs\r\n49e36b8e Merge related BungeeCord patches\r\n6e87b9ab Remove obsolete firing of PreLogin events in offline mode\r\n5c76b183 Remove redundant patch dealing with exceptions in the crash reporter\r\n3a2219d1 Remove redundant patch logging cause of unexpected exception",
    "head_branch": "update-upstream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#10164)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n63c208dd Remove no longer used import\r\n70be76c7 PR-958: Further clarify deprecation of TAG_CONTAINER_ARRAY\r\nae21f4ac PR-955: Add methods to place structures with block/entity transformers\r\ne3d960f2 SPIGOT-7547: Remark that Damageable#setAbsorptionAmount() is capped to a specific value\r\nb125516c Fix typo in RecipeChoice.ExactChoice docs\r\n309497c1 Add EntityMountEvent and EntityDismount Event\r\n2fd45ae3 Improve ItemFactory#enchantItem consistency\r\n2b198268 PR-933: Define native persistent data types for lists\r\n\r\nCraftBukkit Changes:\r\n771182f70 PR-1327: Add methods to place structures with block/entity transformers\r\ne41ad4c82 SPIGOT-7567: SpawnReason for SNOWMAN is reported as BUILD_IRONGOLEM\r\n76931e8bd Add EntityMountEvent and EntityDismount Event\r\n9b29b21c7 PR-1183: Better handle lambda expression and renaming of classes in Commodore\r\n1462ebe85 Reformat Commodore.java\r\n9fde4c037 PR-1324: Improve ItemFactory#enchantItem consistency\r\n4e419c774 PR-1295: Define native persistent data types for lists\r\ndd8cca388 SPIGOT-7562: Fix Score#getScore and Score#isScoreSet\r\n690278200 Only fetch an online UUID in online mode\r\n1da8d9a53 Fire PreLogin events even in offline mode\r\n2e88514ad PR-1325: Use CraftBlockType and CraftItemType instead of CraftMagicNumbers to convert between minecraft and bukkit block / item representation\r\n\r\nSpigot Changes:\r\n864e4acc Restore accidentally removed package-info.java\r\nf91a10d5 Remove obsolete EntityMountEvent and EntityDismountEvent\r\n828f0593 SPIGOT-7558: Deprecate silenceable lightning API as sound is now client-side and cannot be removed\r\ncdc4e035 Remove obsolete patch fetching correct mode UUIDs\r\n49e36b8e Merge related BungeeCord patches\r\n6e87b9ab Remove obsolete firing of PreLogin events in offline mode\r\n5c76b183 Remove redundant patch dealing with exceptions in the crash reporter\r\n3a2219d1 Remove redundant patch logging cause of unexpected exception"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a2b3d9087c4d6d376377",
    "number": 10163,
    "body": "**TODO:**\r\n\r\n- [x] cleanup diff -> formatting is messed\r\n\r\n\r\n\r\nDisscuss if we want to expose the filter predicate that way or doing it the \"lazy\" way using enum and nullable predicate at event level.",
    "head_branch": "feature/fill-command-event",
    "is_a_fork": true,
    "comments": [
      "I think we need to decide the usefulness of this event. I generally think that this doesn’t have much use, as most server owners will not give players access to fill / setblock due to not only how primitive it is.. but also like it’s not as performant as what world edit and such may offer.",
      "My reason for thinking this is a good thing to have, is it allows client-side mods to take advantage of the vanilla commands for pasting schematics and such.",
      "> My reason for thinking this is a good thing to have, is it allows client-side mods to take advantage of the vanilla commands for pasting schematics and such.\r\n\r\nSchematic paster mods typically already have this logic for by placing blocks, which is now gonna be easier with the block interaction attribute.\r\n\r\nJust donno, I seriously do not know servers that would even use setblock/fill over FAWE, which has been the standard in general for stuff like this.",
      "> Schematic paster mods typically already have this logic for by placing blocks, which is now gonna be easier with the block interaction attribute.\r\n\r\nThey didn't yesterday in chat when someone was asking about this for Litematica support. I don't think the printer functionality is built-in anymore. Plus, printing is still different from pasting all at once. They aren't interchangeable I don't think\r\n\r\n> I seriously do not know servers that would even use setblock/fill over FAWE\r\n\r\nThis doesn't replace worldedit by any means, and having one enabled doesn't disable the other. ",
      "Any updates here?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2b4d9087c4d6d376378",
    "number": 10162,
    "body": "Allows for easier identification of what a change is for/what patch it belongs to. Also important for future changes",
    "head_branch": "contrib-guidelines",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[ci skip] Update contributing guidelines to include identifying commit titles in comments (#10162)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2b5d9087c4d6d376379",
    "number": 10161,
    "body": "This API should be thread-safe as there is no world state\r\n\r\nReported in https://forums.papermc.io/threads/concurrentmodificationexception-on-chunkgenerator.1022/",
    "head_branch": "fix/BlockData-CME",
    "is_a_fork": true,
    "comments": [
      "I think ideally, the mapping between enums would be just all created during startup, and that is certainly something we could do to fix this, just this is smaller diff."
    ],
    "commit_messages": [
      "Use a ConcurrentHashMap for enum mappings for BlockData (#10161)\n\nThis API should be thread-safe as there is no world state"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a2b6d9087c4d6d37637a",
    "number": 10160,
    "body": "Resolves https://github.com/PaperMC/Paper/issues/10159\r\n\r\n---- \r\n\r\nAn alternative would be to make `BlockStateMeta#setBlockState` nullable. I don't know if we want to make that change, especially since the interface is already setup so the getter is nonnull and there is a `has` boolean method.",
    "head_branch": "feature/BlockStateMeta#clearBlockState",
    "is_a_fork": true,
    "comments": [
      "Not sure how big of a PR do you want to make this/maybe split it up into multiple, but as mentioned in the original issue there's a few other places with a similar problem:\r\n- `ArmorStandMeta`'s values are all `boolean` (i.e. can't be cleared)\r\n- `AxolotlBucketMeta`'s variant can't be cleared\r\n- `CompassMeta`'s `LodestoneTracked` is a `boolean` and will always remain in NBT, etc.\r\n\r\nEither way thank you very much for adding this!",
      "All those 3 boil down into the fundamental flaw of ItemMeta, which is why the property API is coming to be a thing",
      "Yeah, I agree with @electronicboy here. Those point to **specific** properties that can be reset. The property API is the way to handle that. Other similar clear methods pertain to whole groups of data, like PotionMeta#clearCustomEffects, FireworkMeta#clearEffects, and more, all exist and I think this falls into that category."
    ],
    "commit_messages": [
      "Add BlockStateMeta#clearBlockState (#10160)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a2b8d9087c4d6d37637b",
    "number": 10158,
    "body": "Adds an unsafe method for getting the underlying colour definitions for spawn eggs, based on the entity type. I recognise this is probably a fairly niche thing, but it can be useful to have a consistent way of getting some colours for entities when doing certain visual effects.\r\n\r\nI've added this to UnsafeValues as it's accessing data directly from the SpawnEggItem class rather than reading data from an individual ItemStack's meta, although I'm happy for it to be moved somewhere more appropriate if desired.\r\n\r\nThe code is based on ItemFactory#getSpawnEgg, [as found in this patch](https://github.com/PaperMC/Paper/blob/a80d31b1bd84a56f969634c39d78dfa1c437aa9f/patches/server/0655-Add-ItemFactory-getSpawnEgg-API.patch).",
    "head_branch": "spawn-egg-colour-visibility",
    "is_a_fork": true,
    "comments": [
      "Please squash commits in each submodule and rebuildPatches.",
      "Whoops, didn't notice it made a new patch, fixed"
    ],
    "commit_messages": [
      "Make spawn egg colours visible (#10158)\n\nCo-authored-by: Yannick Lamprecht <1420893+yannicklamprecht@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a2b8d9087c4d6d37637c",
    "number": 10156,
    "body": "Add player join event handler in TestPlugin\r\n\r\nEnhance the TestPlugin by adding an event handler for player join events. Now, whenever a player joins the server, a welcome message is sent to the player.\r\n\r\nThis improves the functionality and interaction of the TestPlugin with player events.",
    "head_branch": "update_test_plugin",
    "is_a_fork": true,
    "comments": [
      "Thank you for your contribution, however, changes like these aren’t really necessary. Take a look at our issue page for possible good first issues for contribution.\r\n\r\nThank you! 😊 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2b9d9087c4d6d37637d",
    "number": 10155,
    "body": "…cution visibility",
    "head_branch": "update_patch_script1",
    "is_a_fork": true,
    "comments": [
      "This adds nothing of functional note and just blasts the git history of the file in the name of tabs vs spaces"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2bbd9087c4d6d37637e",
    "number": 10154,
    "body": "Part of https://github.com/PaperMC/Paper/pull/8920\r\n\r\n\r\nRequired to separate the managing of API registry instances from CraftServer as CraftServer won't exist with future bootstrap-related APIs like brig commands.",
    "head_branch": "feature/RegistryAccess",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2bcd9087c4d6d37637f",
    "number": 10153,
    "body": "Clarify that `Block#getDrops` only returns 1 possible set of drops for that block type and that multiple calls to getDrops are not guaranteed to be consistent due to the fact that its just running the loot table for the block type.",
    "head_branch": "fix/improve-getDrops-javadocs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] clarify javadocs for Block#getDrops (#10153)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a2bdd9087c4d6d376380",
    "number": 10150,
    "body": null,
    "head_branch": "update-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2bed9087c4d6d376381",
    "number": 10149,
    "body": "Adds a removal reason to `EntityRemoveFromWorldEvent`. The `RemovalReason` enum mirrors the NMS `Entity.RemovalReason`, except that the methods `shouldDestroy`/`shouldSave` are renamed to `willDestroy`/`willSave`. Due to the chunk system rewrite, unloaded entities are not set as removed with `RemovalReason.UNLOAD_TO_CHUNK`, so currently if the removal reason is not set and the entity is inaccessible, it'll default to `RemovalReason.UNLOAD_TO_CHUNK` as the removal reason.",
    "head_branch": "removal-reason",
    "is_a_fork": true,
    "comments": [
      "Given upstream has merged into an entity remove from world event, can you expand this PR to include the new reasons?\r\n\r\nWould be fixing #10280",
      "Yes please!",
      "Updated the PR to include the causes upstream added. Also moved the primary event call to `CraftEventFactory#callEntityRemoveEvent`, as using `ServerLevel.EntityCallbacks#onTrackingEnd` didn't provide the additional cause context, and that method isn't called on entity unload. The previous event call there was made to use a new `INACCESSIBLE` cause, for when the chunk an entity is in is made inaccessible (but prior to fully unloading).",
      "Rebased. Also removed some unneeded diff."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2bfd9087c4d6d376382",
    "number": 10146,
    "body": "This adds a new way to define the rendered block state on a primed tnt since 1.20.3.",
    "head_branch": "feat/tntstate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add visual blockdata api for primed tnt (#10146)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a2c0d9087c4d6d376383",
    "number": 10145,
    "body": null,
    "head_branch": "tnt-block-api",
    "is_a_fork": true,
    "comments": [
      "Superseded by https://github.com/PaperMC/Paper/pull/10146\r\n(names are better anyways, and has preconditions)",
      "The stars aligned and we managed to PR the exact same thing at the almost exact same time, very spooky. But, they did it better. 😔 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2c1d9087c4d6d376384",
    "number": 10142,
    "body": "Added a FallingBlockDropAsItemEvent to allow modifying or cancelling the item that is dropped when a falling block either expires or is unable to form a block.\r\n\r\nAs far as I can tell it isn't possible through any other means to associate the FallingBlock with the item that is being spawned, hence this event.",
    "head_branch": "feature/FallingBlockDropAsItemEvent",
    "is_a_fork": true,
    "comments": [
      "Unless I am missing something here but https://jd.papermc.io/paper/1.20/org/bukkit/event/entity/EntityDropItemEvent.html exists 😅 ",
      "That somehow evaded the minds of 3 different people https://canary.discord.com/channels/289587909051416579/555462289851940864/1193064729321685072"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2c2d9087c4d6d376385",
    "number": 10139,
    "body": "Currently, Minecraft waits a tick before syncing effect visiblity/glowing. This is noticeable when adding entities into the world with effects. So, this main logic moves the dirty effect logic into the actual updating logic. This causes effect visibility to be updated correctly.\r\n\r\nAdditionally, mob effects are not correctly added when read from NBT due to their attributes not being applied. This is a problem for entities that have effects already added before being ticked for the first time. We also manually update effect visibility, causing glowing and invisibility to be correctly applied as well.\r\n\r\nTo reproduce:\r\n```\r\n/give @s minecraft:squid_spawn_egg{EntityTag:{Glowing:1b,NoAI:1b,CustomName:'{\"text\":\"Invisible\",\"color\":\"dark_blue\",\"bold\":true,\"italic\":true,\"underlined\":true}',active_effects:[{id:invisibility,amplifier:1b,duration:1200,show_particles:1b}]}}\r\n```\r\nVanilla: Blink occurs when spawning\r\nAfter: Blink no longer occurs when spawning\r\n\r\n```\r\n/minecraft:give @s minecraft:zombie_spawn_egg{EntityTag:{Glowing:1b,NoAI:0b,active_effects:[{id:speed,amplifier:20b,duration:60,show_particles:1b}]}}\r\n```\r\nVanilla: Speed attribute is not applied to the zombie.\r\nAfter: Speed attribute correctly applied\r\n\r\nFixes:\r\nhttps://bugs.mojang.com/browse/MC-72774\r\nhttps://bugs.mojang.com/browse/MC-88181\r\nhttps://bugs.mojang.com/browse/MC-257087 (technically)\r\nhttps://bugs.mojang.com/browse/MC-171688\r\n\r\n\r\nBest way to test this is with /tick freeze, place the entities, then /tick unfreeze.",
    "head_branch": "fix/effect-syncing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2c3d9087c4d6d376386",
    "number": 10135,
    "body": "Add a cancellable shulker duplicate event. Provides both the parent and child in the event.\r\n\r\nFixes #10129 ",
    "head_branch": "shulker-duplicate-event",
    "is_a_fork": true,
    "comments": [
      "Resolved requested changes. Only thing I was unsure of was if I need to discard the entity but I assumed I did."
    ],
    "commit_messages": [
      "Shulker duplicate event (#10135)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a2c4d9087c4d6d376387",
    "number": 10134,
    "body": null,
    "head_branch": "fix/isDropItems-fix-bad-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix a borked update of 'Properly handle BlockBreakEvent#isDropItems' (#10134)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2c5d9087c4d6d376388",
    "number": 10131,
    "body": null,
    "head_branch": "fix/blockdestroyevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix BlockDestroyEvents effectBlock not being set (#10131)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a2c6d9087c4d6d376389",
    "number": 10130,
    "body": "By default, exceptions during command execution are not logged unless the Commands.java logger has debug logging enabled. This logs them if the server.properties `debug=true`. \r\n\r\nThis also actually outputs the stacktrace in the error message sent to the player. We may want to not do that, only log the exception to the console log.",
    "head_branch": "feature/log-command-exceptions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Log command execution exceptions if debug=true (#10130)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2c7d9087c4d6d37638a",
    "number": 10127,
    "body": "Currently the secret can only be specified as string in the config. This makes it almost impossible to run the server within a containerized environment like Kubernetes. Also I don't want secret data to be specified along with 'general' data. \r\n\r\nThis PR aims to add the functionality to load the secret from an external file (like it is already the default in velocity)",
    "head_branch": "feature/velocity-forwarding-secret-file",
    "is_a_fork": true,
    "comments": [
      "FYI: I only changed the files GlobalConfiguration, VelocityProxy and PaperConfigurations I don't know why `rebuildPatches` also changed the other patches.",
      "Being frank, this has kinda been on the todo list for a while, but if we wanna do this, we would want to maintain consistency with velocities current expected behavior, i.e. the secret if already set should probably be migrated to the file, and we should follow the file naming of velocity so that people can just copy the file over and save confusion\r\n\r\nI would maybe await others comments on this, however\r\n\r\n",
      "@electronicboy I added functionality to migrate in-config secrets to file automatically. I hope this fits what you meant.",
      "I really need this feature to run a minecraft server securely on k8s. So i'm looking forward to see the merged pullrequest. @electronicboy ",
      "Bump",
      "@Machine-Maker what's the status of this issue?",
      "I moved this PR over to an environment variable, which should be a lot easier to use than a volume mount from a secret.\r\nThe PR will still respect a potentially configured value to enable people on restrictive hosts etc to continue to define their secrets via a config, but once the configured env var is set, it'll take precedent.\r\n\r\nThe PR is gonna be up for more in-depth review tomorrow, if you have time till then to give feedback on my changes, that would be great so we can merge (would not wanna merge without an okay from you @oliverjanka, given the drastic changes).\r\n\r\nIf we wanna revert to your previous state, 4d85ab46001bded20077c2b7bcb8763783211588 was the previous HEAD. ",
      "Actually I'm not in favour of providing secret data through environment variables due to security concerns. This is one of the reasons I opted for this approach (along with the fact that Velocity works similarly).\nHowever, I'm currently very busy and do not have time to work on my previous or an alternative approach and I'd like to see this feature implemented soon.\n\nTherefore, I won’t stand in the way of you proceeding with this method 🙂.",
      "Thanks for your quick feedback.\r\nWhile yea, an environment variable is accessible by anything in the pod, so is the velocity secret file given the user running the server process does need read permissions, and the server internal field storing said secret.\r\n\r\nI'll proceed with the environment variable just to get *some* way of doing it in, and if we care enough, the above ref can always be used to potentially revisit a file based approach as well as the env variable."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2c8d9087c4d6d37638b",
    "number": 10125,
    "body": "Block/EntityTransformer for AsyncStructureGenerateEvent need to accept World and LimitedRegion instances because structure generation can happen to both ServerLevel and WorldGenRegion instances.\r\n\r\nFixes https://github.com/PaperMC/Paper/issues/10124\r\n\r\nI also changed the constructor param type for CraftLimitedRegion so this doesn't happen again. We will catch this issue at compile time then.",
    "head_branch": "fix/support-world-block-entity-transformers",
    "is_a_fork": true,
    "comments": [
      "Thank you, I'm pretty sure this was the error I linked on discord a few days ago"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2c9d9087c4d6d37638c",
    "number": 10122,
    "body": "`CraftLimitedRegion` loads and stores entities in the protochunk and doesn't parse the entities from NBT each time. This *requires* that a new instance of `CraftLimitedRegion` is created each time before passing it to an api consumer and then saving/clearing it afterwards.\r\n\r\n`CraftStructureTransformer` was creating a single instance for an entire structure place which was causing entities to be deleted so no structures would spawn entities.\r\n\r\nDemo to cause the issue. Just add this listener and teleport around to newly generated villages.\r\n```java\r\n@EventHandler\r\npublic void onEvent(AsyncStructureGenerateEvent event) {\r\n    event.setEntityTransformer(new NamespacedKey(this, \"test\"), (region, x, y, z, entity, allowedToSpawn) -> {\r\n        System.out.println(region.getEntities());\r\n        return true;\r\n    });\r\n}\r\n```",
    "head_branch": "fix/entity-structure-transformer",
    "is_a_fork": true,
    "comments": [
      "Alternative fix would be to add the entity to the list stored in CraftLimitedRegion if the entities were loaded. That way you can re-use the instances and they will stay up-to-date."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2cad9087c4d6d37638d",
    "number": 10120,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/10119\r\nFixes https://github.com/PaperMC/Paper/issues/10123\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-10120.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/1148601399.zip)",
    "head_branch": "fix/async-pose-event",
    "is_a_fork": true,
    "comments": [
      "Ok, finally got around to testing this. Need to actually set the generation bool to true on the entity instead much earlier before nbt loading happened. I also removed 2 pairs of overrides of `addFreshEntityWithPassengers` so the delegated addFreshEntity is actually called for each passenger.\r\n\r\nUsing the reproduction datapack provided in the issue now yields no issues."
    ],
    "commit_messages": [
      "Fix EntityChangePoseEvent being called during worldgen (#10120)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2ccd9087c4d6d37638e",
    "number": 10118,
    "body": "Currently you cannot \"unignite\" a creeper or change its swell speed without NMS.\r\nThis PR allows you to do that.\r\nLet me know if I did anything wrong that needs changing :)",
    "head_branch": "creeper-swell-dir",
    "is_a_fork": true,
    "comments": [
      "I'm concerned that it seems this value could be reset every tick in the SwellGoal#tick method. So if you set the swell dir to 1 and the creeper didn't have a target, it would immediately get set back to -1. Can you outline some examples or usecases where the API setting the value does have an effect? If there are such examples, then the behavior should probably be more documented in the javadocs.",
      "As mentioned in the PR description, calling `Creeper#setIgnited(false)` doesn't really work, as the swell direction isn't changed. So shouldn't that method be modified to set it to -1, so that unigniting actually works?",
      "You're right about the value being reset every tick in the goal, it may be better to just have a fix for `Creeper#setIgnited(false)` instead of allowing the swelldir to be changed. The reason I hadn't noticed was because I wrote my own custom creeper goal.\r\n\r\n\r\nHaven't tested it yet, but something like this?\r\n```\r\n    @Override\r\n    public void setIgnited(boolean ignited) {\r\n        getHandle().setIgnited(ignited);\r\n        if (!ignited)\r\n            getHandle().setSwellDir(-1);\r\n    }\r\n```\r\n\r\nWould it also be beneficial to have a field for the creeper's swell speed (>0) , that you *can* change through a setter, and just use that value in the goal? So you could make creepers swell up faster for example",
      "if the sole intent for exposing a method is to fix the behavior of another method, it would make more sense to just fix the OG method, imho; if this had some unexpected side-effect, that would be a different matter, but, that doesn't sound to be the case?\r\n\r\nI'm not 100% aware of all the implications here, however, nothing against also exposing a value even if its only real use would be inside of custom AI or whatever",
      "I'll just fix the og method then.",
      "please merge into missing entity api patch as well",
      "Should I create a new PR and close this one? Seeing as I'm doing something different (fixing an existing method)",
      "I'd generally defer this to owen as he is more aware of the mob AI API type stuff, but, imho, we should do both, add the method and make the old method work as expected"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2cdd9087c4d6d37638f",
    "number": 10117,
    "body": "The maven repository sessions used by the maven library loader requires the java.version property to later evaluate the active profiles of dependencies when downloading them during the plugin loader logic.\r\n\r\nThis commit fixes this by passing all system properties as a hopefully future-proof way to provide the required data to said session.\r\n\r\nResolves: #10116\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-10117.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/1146045238.zip)",
    "head_branch": "bugfix/paper-plugin-maven-library-resolver",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Pass system properties to maven repo session (#10117)\n\nThe maven repository sessions used by the maven library loader requires\r\nthe java.version property to later evaluate the active profiles of\r\ndependencies when downloading them during the plugin loader logic.\r\n\r\nThis commit fixes this by passing all system properties as a hopefully\r\nfuture-proof way to provide the required data to said session."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2ced9087c4d6d376390",
    "number": 10115,
    "body": "Currently you cannot \"unignite\" a creeper or change its swell speed without NMS.\r\nThis PR allows you to do that.\r\nThis is my second Paper PR, so let me know if I did anything wrong that needs changing :)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2cfd9087c4d6d376391",
    "number": 10113,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/10111",
    "head_branch": "fix/itemmeta-CustomModelData",
    "is_a_fork": true,
    "comments": [
      "The stack changes from `1b` to just `1`, but no avoiding that for now, at least it's not removed entirely. ",
      "Yeah it’s not worth going through that effort"
    ],
    "commit_messages": [
      "fix CustomModelData being removed (#10113)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2d0d9087c4d6d376392",
    "number": 10110,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/10107\r\n\r\nMoves the untrack event call back to the Entity#stopSeenByPlayer method. It was originally added there, then moved when the track event became cancellable. But the untrack event wasn't (and can't) be made cancellable so it should've been left.",
    "head_branch": "fix/untrack-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix untrack event not being called for all 'untracks' (#10110)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a2d1d9087c4d6d376393",
    "number": 10109,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/10108",
    "head_branch": "fix/bucket-dispense-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Correctly check if bucket dispenses will succeed for event (#10109)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2d2d9087c4d6d376394",
    "number": 10105,
    "body": "Call EntityChangeBlockEvent for eating cakes or adding a candle to the cake",
    "head_branch": "feature/more-change-block-events",
    "is_a_fork": true,
    "comments": [
      "> Should this also include calls for CandleCakeBlock being ignited and extinguished ?\r\n\r\nI think this can be left for another PR. It's not super clear if/where an event for *igniting* should be called as bukkit already has the BlockIgniteEvent. Perhaps a counterpart BlockExtinguishEvent instead? Either way, not clear, can be done later. "
    ],
    "commit_messages": [
      "Call EntityChangeBlockEvent for cake eating (#10105)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2d3d9087c4d6d376395",
    "number": 10103,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/10040\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-10103.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/1143742042.zip)",
    "head_branch": "activate-frozen-entities",
    "is_a_fork": true,
    "comments": [
      "I don't claim to fully grasp the activation system, but can't we make it activate at least every 40 ticks? It looks like the damage source for freeze is only applied every 40th tick for that entity. I feel that's better than having it fully active."
    ],
    "commit_messages": [
      "Keep fully frozen entities fully activated (#10103)\n\n* Keep fully frozen entities fully activated\r\n\r\n* Rebase and switch to isFreezing\r\n\r\n---------\r\n\r\nCo-authored-by: Bjarne Koll <lynxplay101@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2d4d9087c4d6d376396",
    "number": 10101,
    "body": "A bunch of random useless diff was added/changed in updating this patch. This reverts that.",
    "head_branch": "chore/cleanup-extra-diff",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Remove extraneous diff added in 1.20.3 update (#10101)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2d5d9087c4d6d376397",
    "number": 10100,
    "body": "Cleans up the loot table API and replenish patches to better support vanilla's new randomizable container and entity stuff.\r\n\r\nAlso adds such support to the Crafter. https://github.com/PaperMC/Paper/pull/10023 does so for Decorated Pot. That can be merged before or after this, doesn't matter.\r\n\r\nFixes https://github.com/PaperMC/Paper/issues/9917 (part of the issue started again)",
    "head_branch": "fix/loot-tables",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2d6d9087c4d6d376398",
    "number": 10096,
    "body": "Delays the `entity_die` game event until after the PlayerDeathEvent has been fired and its cancel state checked.\r\n\r\nThe game event is already in the correct spot for `EntityDeathEvent`, so I believe just this is affected.",
    "head_branch": "fix/entity-die-game-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Call entity_die game event after event cancel check (#10096)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2d7d9087c4d6d376399",
    "number": 10095,
    "body": "There was a TODO left there regarding the translated death message being used by plugins to identify the cause of death. This should be mitigated now because the LegacyComponentSerializer default implemenation uses our custom flattener which renders vanilla translatable components to their English representation.",
    "head_branch": "chore/cleanup-adventure-player-death",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "cleanup player death event adventure logic (#10095)\n\nThere was a TODO left there regarding the translated death\r\nmessage being used by plugins to identify the cause of death. This\r\nshould be mitigated now because the LegacyComponentSerializer default\r\nimplemenation uses our custom flattener which renders vanilla\r\ntranslatable components to their English representation."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a2d8d9087c4d6d37639a",
    "number": 10094,
    "body": "reopen with https://github.com/PaperMC/Paper/pull/10088",
    "head_branch": "full-unix",
    "is_a_fork": true,
    "comments": [
      "Imo you should merge the patch in 596",
      "> Imo you should merge the patch in 596\r\n\r\nAPI or Sevrer?",
      "> > Imo you should merge the patch in 596\r\n> \r\n> API or Sevrer?\r\n\r\nI don't know if there's a patch for Unix support in the API module but on server there's one so you should merge into it (IMO)",
      "> I don't know if there's a patch for Unix support in the API module but on server there's one so you should merge into it (IMO)\r\n\r\nSo what do you mean is to modify that patch instead of creating a new one?\r\n\r\nBut the time span of that patch is too large to modify"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2d9d9087c4d6d37639b",
    "number": 10091,
    "body": "TestPlugin.java\r\n```java\r\npublic final class TestPlugin extends JavaPlugin implements Listener {\r\n\r\n    @Override\r\n    public void onEnable() {\r\n        this.getServer().getPluginManager().registerEvents(this, this);\r\n\r\n        this.getServer().getAsyncScheduler().runAtFixedRate(this, task -> {\r\n            this.getLogger().info(\"Hello\");\r\n        }, 0L, 1L, TimeUnit.SECONDS);\r\n\r\n        this.getServer().getScheduler().runTask(this, () -> {\r\n            this.getServer().getPluginManager().disablePlugin(this);\r\n        });\r\n    }\r\n}\r\n```",
    "head_branch": "fix-folia-scheduler-unload",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Folia scheduler tasks not canceling when plugin disable (#10091)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2dad9087c4d6d37639c",
    "number": 10090,
    "body": "Fixes an issue in `ClientboundLoginDisconnectPacket` where Adventure translate components are not rendered\r\nand Serialized components having a maximum length of 32767.\r\n\r\nTestPlugin.java\r\n```java\r\npublic final class TestPlugin extends JavaPlugin implements Listener {\r\n\r\n    @Override\r\n    public void onEnable() {\r\n        final GlobalTranslator translator = GlobalTranslator.translator();\r\n        final TranslationRegistry registry = TranslationRegistry.create(Key.key(\"paper\", \"test-plugin\"));\r\n        registry.register(\"paper.kittens\", Locale.US, new MessageFormat(\"Kittens!!!!!!\"));\r\n        translator.addSource(registry);\r\n\r\n        this.getServer().getPluginManager().registerEvents(this, this);\r\n    }\r\n\r\n    @EventHandler\r\n    void onAsyncPlayerPreLogin(final AsyncPlayerPreLoginEvent event) {\r\n        // 35096 lengths (Translated: 33596 lengths)\r\n        event.disallow(AsyncPlayerPreLoginEvent.Result.KICK_OTHER, MiniMessage.miniMessage().deserialize(\r\n            \"<rainbow>\" + \"<click:run_command:kittens><lang:paper.kittens> \".repeat(300)\r\n        ));\r\n    }\r\n}\r\n```",
    "head_branch": "fix-adventure-serialize",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix some component bugs in login disconnect packet (#10090)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a2dbd9087c4d6d37639d",
    "number": 10088,
    "body": "full support for UnixDomainSocketAddress\r\n**It must work with [this](https://github.com/PaperMC/Velocity/pull/1173)**\r\nIt change the api, but retained original support\r\n![{4E839E59-23CF-4fa3-B0F9-2C75F679304E}](https://github.com/PaperMC/Paper/assets/26276037/a38fa8b1-e0b2-4f9d-a95a-9ce2c8ec0179)\r\n![image](https://github.com/PaperMC/Paper/assets/26276037/22caef0f-aa9c-400e-aac1-b51dd9d7d123)\r\n\r\n```\r\nserver-ip=unix\\:/tmp/paperserver.sock\r\n```\r\n\r\n```\r\n[servers]\r\n# Configure your servers here. Each key represents the server's name, and the value\r\n# represents the IP address of the server to connect to.\r\nlobby = \"unix:/tmp/paperserver.sock\"\r\n```",
    "head_branch": "full-unix",
    "is_a_fork": true,
    "comments": [
      "except it doesn't retain original support, it just means that that stuff will blow up, and so, this cannot be merged until a major\r\n\r\nalso, patches generally should not modify earlier patches",
      "Seems to dupe ? https://github.com/PaperMC/Paper/pull/9086",
      "> except it doesn't retain original support, it just means that that stuff will blow up, and so, this cannot be merged until a major\r\n> \r\n> also, patches generally should not modify earlier patches\r\n\r\nNo, if UDS is not used, the original API is supported\r\nAnd I need to delete the patch before the modification?",
      "> Seems to dupe ? #9086\r\n\r\nThe modified content is the same, but the modification method and API processing are different",
      "My modification is for the `group server`\r\nand the idea is `backend server` use UDS transport"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2dcd9087c4d6d37639e",
    "number": 10087,
    "body": "It change the api, but retained original support\r\n![{4E839E59-23CF-4fa3-B0F9-2C75F679304E}](https://github.com/PaperMC/Paper/assets/26276037/a38fa8b1-e0b2-4f9d-a95a-9ce2c8ec0179)\r\n![image](https://github.com/PaperMC/Paper/assets/26276037/22caef0f-aa9c-400e-aac1-b51dd9d7d123)\r\n\r\n```\r\nserver-ip=unix\\:/tmp/paperserver.sock\r\n```\r\n\r\n```\r\n[servers]\r\n# Configure your servers here. Each key represents the server's name, and the value\r\n# represents the IP address of the server to connect to.\r\nlobby = \"unix:/tmp/paperserver.sock\"\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2ddd9087c4d6d37639f",
    "number": 10085,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n0c7aedbc SPIGOT-7554, PR-954: Add DecoratedPotInventory\r\n\r\nCraftBukkit Changes:\r\n53ebb05e3 SPIGOT-7554, PR-1323: Add DecoratedPotInventory\r\n33a2d8773 Ensure that PlayerMoveEvent is always fired where applicable\r\n7df18510f SPIGOT-7555: Don't cast ItemFlags to byte\r\n19aec59ea Use provided case for non-existent OfflinePlayers\r\n\r\nSpigot Changes:\r\ne7ce55a3 Remove obsolete PlayerMoveEvent improvements\r\n3e5e22c0 Remove obsolete lowercasing of non existent OfflinePlayer names\r\n\r\n----\r\n\r\nAdds an inventory type for Decorated Pots preventing them from being identified as \"CHEST\".",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#10085)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n0c7aedbc SPIGOT-7554, PR-954: Add DecoratedPotInventory\r\n\r\nCraftBukkit Changes:\r\n53ebb05e3 SPIGOT-7554, PR-1323: Add DecoratedPotInventory\r\n33a2d8773 Ensure that PlayerMoveEvent is always fired where applicable\r\n7df18510f SPIGOT-7555: Don't cast ItemFlags to byte\r\n19aec59ea Use provided case for non-existent OfflinePlayers\r\n\r\nSpigot Changes:\r\ne7ce55a3 Remove obsolete PlayerMoveEvent improvements\r\n3e5e22c0 Remove obsolete lowercasing of non existent OfflinePlayer names"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a2ded9087c4d6d3763a0",
    "number": 10082,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/10081 (again)\r\n\r\nWas improperly updated to 1.20.3/4",
    "head_branch": "fix/cmd-block-async-msg",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix command block async message (again) (#10082)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2dfd9087c4d6d3763a1",
    "number": 10076,
    "body": "The more I worked on this, the sillier it became. So this is a draft for now.\r\n\r\nThe point of this PR is to fix [MC-111729](https://bugs.mojang.com/browse/MC-111729) (and a remap issue, doesn't affect the pr so is removable).\r\nDid some testing, works when creating the objective with the scoreboard command and with a plugin.\r\n\r\nThe reason this is a draft is I really don't know how to deal with fake players created by plugins, or just big servers with a lot of players. I think having the command do it all the time is fine but maybe add a boolean to the methods that registers a new objective to enable or disable the init of scores? I dunno.\r\n\r\nThis bug isn't really a big issue but would still be nice to fix it!",
    "head_branch": "fix-mc111729",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2e0d9087c4d6d3763a2",
    "number": 10071,
    "body": "Introducing a modification to PlayerShearEntityEvent that allows customization of drops from sheared entities.",
    "head_branch": "shear-event",
    "is_a_fork": true,
    "comments": [
      "Thank you for your contribution, unfortunately this is a duplicate of the already existing PR #5678, so I'm going to have to close this in favour of that one."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2e1d9087c4d6d3763a3",
    "number": 10070,
    "body": "Introducing a modification to PlayerShearEntityEvent that allows customization of drops from sheared entities.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2e2d9087c4d6d3763a4",
    "number": 10068,
    "body": "The game uses 0.95d now\r\n![image](https://github.com/PaperMC/Paper/assets/15055071/d9846528-7377-4adc-b785-b6cf26be813b)\r\n",
    "head_branch": "fix/remove-old-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove 'fix Vanilla Minecart speed' patch (#10068)\n\nThe game uses 0.95d now"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2e3d9087c4d6d3763a5",
    "number": 10066,
    "body": "Some types that have registries support existing without being in a registry and therefore have no key. This is part one of supporting that, adding a Registry#getKey(Object) method to be able to get the key for an object so we can remove Keyed from such objects.\r\n\r\nThis also deprecates Keyed#getKey on TrimMaterial and TrimPattern as these are the 2 offending types currently in the api.\r\n\r\n----\r\n\r\nPart 1 of https://github.com/PaperMC/Paper/pull/10062",
    "head_branch": "feature/Registry#getKey",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Registry#getKey (#10066)\n\nSome types that have registries support existing without\r\nbeing in a registry and therefore have no key. This is part\r\none of supporting that, adding a Registry#getKey(Object) method\r\nto be able to get the key for an object so we can remove Keyed\r\nfrom such objects.\r\n\r\nThis also deprecates Keyed#getKey on TrimMaterial and TrimPattern\r\nas these are the 2 offending types currently in the api."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a2e5d9087c4d6d3763a6",
    "number": 10062,
    "body": "This is a key step to improving Registries and enabling better and more accurate API in the future. We cannot require all type parameters for Registry to implement Keyed because we need to be able to create instances of things like `TrimMaterial` and `TrimPattern` without a key as they can exist like that in the server. \r\n\r\n----\r\n\r\nSupersedes https://github.com/PaperMC/Paper/pull/9009\r\n\r\nCloses https://github.com/PaperMC/Paper/issues/9063\r\n\r\nRequires https://github.com/PaperMC/Paper/pull/10060",
    "head_branch": "feature/improve-Registry",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2e6d9087c4d6d3763a7",
    "number": 10061,
    "body": "This is how the bytecode modification framework from https://github.com/PaperMC/Paper/pull/10060 is used to ~~replace some parameter types with Position and~~ make Location not implement Position anymore. The test plugin is setup to compile against current paper api and show that there are no compat breaks.",
    "head_branch": "feature/position-split",
    "is_a_fork": false,
    "comments": [
      "So I did a bit more converting methods and as you can see the diff has grown quite a bit. I'm starting to get hesitant to do this for more than methods with Location that we add. \r\n\r\nOne downside of not doing it all at once is it makes it slightly more annoying to work with the API before its all converted since its 2 different types.\r\n\r\nEDIT: decided to scale back this PR to *only* removing Position from the Location type hierarchy and rewriting the several methods that already take Position as a parameter."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2e7d9087c4d6d3763a8",
    "number": 10060,
    "body": "Groundwork for a better-designed bytecode modification framework for the larger structural changes we need to do. The utilities currently implemented are what was needed to split Position out of Location and manage return types and param types. \r\n\r\nThis framework includes generated classes with generated static methods and it's done all auto-magically. It is also versioned. It changes the `api-version` field for paper plugins to be specific to a minor version and won't run modifications not applicable for that version.\r\n\r\n",
    "head_branch": "feature/bytecode-modification",
    "is_a_fork": false,
    "comments": [
      "Ok, I think this in a place where it covers most of our immediate needs. It can be expanded for more expansive tasks if needed. Just see the 2 PRs targeting this branch for how it's used, https://github.com/PaperMC/Paper/pull/10061 and https://github.com/PaperMC/Paper/pull/10062."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2e8d9087c4d6d3763a9",
    "number": 10059,
    "body": "Fixes [MC-259583](https://bugs.mojang.com/browse/MC-259583)\r\nFixes [MC-261374](https://bugs.mojang.com/browse/MC-261374)\r\nand more to be added...",
    "head_branch": "fix/more-vanilla-issues",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2e9d9087c4d6d3763aa",
    "number": 10057,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/10052",
    "head_branch": "fix/crafter-stack-size",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use correct max stack size in crafter (#10057)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2ead9087c4d6d3763ab",
    "number": 10056,
    "body": "I think during 1.20.3/4 update, code adding players to the playerMobSpawnMob was duplicated and added outside the runsNormally (tick speed) check and inside. This removes that \r\n\r\n----\r\n\r\nCloses https://github.com/PaperMC/Paper/issues/10054",
    "head_branch": "fix/duplicate-code-chunk-tick-iteration",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove duplicate code in chunk tick iteration (#10056)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2ebd9087c4d6d3763ac",
    "number": 10055,
    "body": "A separate workflow is needed for this to work on PRs. The workflow complete trigger used won't work until it's on the default branch (merged).\r\n\r\nSee https://github.com/jpenilla/Paper/runs/19801456027 for an example of a test failure.",
    "head_branch": "test-result-actions",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[ci skip] Make test results viewable in-browser and downloadable (#10055)\n\n* Post test results\r\n\r\n* empty commit\r\n\r\n* Make a test fail\r\n\r\n* Add missing check\r\n\r\n* Disable commenting\r\n\r\n* Revert \"Make a test fail\"\r\n\r\nThis reverts commit d919653c2b38a3afb74d28e5462685f7ec54b16a.\r\n\r\n* remove commenting permission"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a2ecd9087c4d6d3763ad",
    "number": 10053,
    "body": "The collision at the edge is done using the voxelshape of the worldborder which is rounded. Since Paper doesn't use the voxelshape of the border some issues happens when the half size is not an integer.\r\n\r\nCloses #9859 #9805",
    "head_branch": "fix/borderedgecollide",
    "is_a_fork": true,
    "comments": [
      "i love you so much Lulu"
    ],
    "commit_messages": [
      "Fix world border edge collision (#10053)\n\nThe collision shape of the border is determined by flooring the min values and ceiling the max values, so the isCollidingWithBorder() function should mirror such behavior."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2edd9087c4d6d3763ae",
    "number": 10050,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/10049\r\n\r\nThe default effect duration is 160, and if it is 160, vanilla does not store it in the NBT, but itemmeta doesn't know this so it gets changed to 0 when read and applied.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-10050.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/1125054593.zip)",
    "head_branch": "fix/suspicious-stew-duration",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "properly read and store sus effect duration (#10050)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2eed9087c4d6d3763af",
    "number": 10047,
    "body": "in progress.\r\nI have also added a fromIndex method to Rotation, lmk if i should revert it / split it into another PR or smth.\r\n\r\n\r\nsince this is my first time delving into itemmeta, please tell me if I'm doing something wrong / miss anything\r\n\r\nthere are still TODO comments littered around for me to fix, but I might as well create the PR now for feedback\r\nI wanted to put the CraftMetas in a paper package, but the need to extend the package private base class\r\n\r\nis it possible to use inheritance with the CraftItemMetas?\r\nie: if i wanted to have the TileXYZ on a parent class, since the implementation is the same for both.\r\n\r\ni would assume so, but noticed similar duplicate handling with the entitytag, and wanted to check first incas there was a reason",
    "head_branch": "feat/add-hangingentity-itemmeta",
    "is_a_fork": true,
    "comments": [
      "I'm not sure we are planning on expanding item metas more over owen's upcoming item property API which will replace the concept of item meta.",
      "Correct, this is meant to be covered by a sort of “entity” property api with items.",
      "ok, should i stop work on this then?\r\nik there are no etas, but it seems a little while off, so some api might be better than none,\r\nesp since from what i read [here](https://github.com/PaperMC/Paper/pull/8711#issue-1507269666) it doesnt replace itemmeta ",
      "Yeah so, we are most likely going to close this here. In general, we really want to prevent adding onto the item meta system due to what was specified above, but also because it's tricky because introducing new types introduces some serialization differences between spigot/paper that we don't want to run into now.\r\n\r\nThank you for your PR regardless. 😄 ",
      "No worries!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2efd9087c4d6d3763b0",
    "number": 10046,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/10044",
    "head_branch": "fix/death-fires-drop-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't fire the drop event on player deaths (#10046)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2f0d9087c4d6d3763b1",
    "number": 10045,
    "body": "```[tasklist]\r\n- [x] removeResourcePacks(UUID, UUID...)\r\n- [x] clearResourcePacks\r\n- [x] sendResourcePacks(ResourcePackRequest)\r\n- [x] request callbacks\r\n- [x] Translator#hasAnyTranslations (improve perf for rendering translatables)\r\n- [ ] mark other send methods on Player as Obsolete/Deprecated?\r\n- [x] bundle packet\r\n- [x] ~~options for default serializers~~not required, old way still works\r\n- [x] TranslationArgument migration\r\n```",
    "head_branch": "feature/adventure-4.15",
    "is_a_fork": false,
    "comments": [
      "So we need to decide what happens if someone registers a callback for a UUID that already has one registered, and when exactly those callbacks are fired. ",
      "I dont think the others need marking, they stand fine as convenience methods for now. The callbacks should be called before bukkit events. For the same registered UUID, just override",
      "Ok, removed all the TODO comments added and left comments explaining those decisions. Should be all ready."
    ],
    "commit_messages": [
      "Update to adventure 4.15 (#10045)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a2f1d9087c4d6d3763b2",
    "number": 10042,
    "body": "Fixes #10041\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-10042.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/1135456730.zip)",
    "head_branch": "fix/outdated-message-keep-newlines",
    "is_a_fork": true,
    "comments": [
      "Do the rest of spigot yml message need changing too?",
      "Add `build-pr-jar` label please",
      "(where is the link to jar file? o: I want to test it, but I can't)",
      "Oh yeah, ok. The events won't run if the branch has conflicts. That is a github thing. So when kenny added the label yesterday, it didn't build a jar",
      "So it needs a rebase? Or what someone need to do?\r\n\r\n(currently this issue prevents us from updating our server to 1.20.4 because we have an Easter egg consisting of several lines in outdated client message :c)"
    ],
    "commit_messages": [
      "Keep newlines in outdated client/server message (#10042)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2f2d9087c4d6d3763b3",
    "number": 10037,
    "body": "Following up on https://github.com/PaperMC/Paper/pull/10036 (which adds API for the new number format stuff), this adds API for per-score display names and trigger locking as well as per-objective auto updating display names.\r\n\r\nThis also fixes several critical issues with the scoreboard API caused by the 1.20.3/4 update. The new ScoreHolder type threw off logic expectations in the craft-impls.",
    "head_branch": "fix/new-scoreboard-stuff",
    "is_a_fork": true,
    "comments": [
      "I'm not confident in a few of the method names, the display auto updating and entry custom name ones.\r\n\r\nI'm also not confident in the approach currently implemented for handling setting locked or custom name state on a score if the score doesn't exist. Right now it prevents creating an empty score, but that's not what vanilla commands do. The vanilla scoreboard commands will just create a blank one if you set a custom name or number format without first setting a score value."
    ],
    "commit_messages": [
      "Fix and add new scoreboard API (#10037)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a2f3d9087c4d6d3763b4",
    "number": 10036,
    "body": "This PR introduces an easily accessible number format API (using adventure styles and components) for scoreboard objectives for a feature introduced in 1.20.3. \r\n\r\nSetting a number format can be as easy as this:\r\n```java\r\n//Remove numbers\r\nobjective.numberFormat(NumberFormat.blank());\r\n\r\n// Style numbers in green and bold\r\nobjective.numberFormat(NumberFormat.styled(NamedTextColor.GREEN, TextDecoration.BOLD));\r\n\r\n//Replace numbers\r\nobjective.numberFormat(NumberFormat.fixed(Component.text(\"Lol\")));\r\n```\r\n\r\nAs for the implementation: The conversion between the Adventure style and Mojangs implementation is a bit messy.  The only other way I can think of to implement this is manually converting every style property. As paper doesn't even do that with chat components either, I have decided to just serialize and deserialize again. ",
    "head_branch": "dev/scoreboard-format-api",
    "is_a_fork": true,
    "comments": [
      "In vanilla, you can set it per each score holder, right? How is that done here?\r\n\r\nUnless I'm misunderstanding what the \"objective\" is",
      "> In vanilla, you can set it per each score holder, right? How is that done here?\r\n> \r\n> Unless I'm misunderstanding what the \"objective\" is\r\n\r\nI totally missed that that's possible in vanilla. You can set it for the entire objective (e.g. your entire sidebar) or apparently per entry as well (which I missed)\r\n\r\nI will add that asap",
      "That's implemented now. With the latest commit, you can change the formatting of individual scores or the whole objective",
      "Should use our codecs for conversions, not the GsonComponentSerializer, see the minecraft round trip style test in AdventureCodecsTest for an example. Also put the conversion methods at PaperAdventure.asVanilla/asMinecraft to be consistent.",
      "> Should use our codecs for conversions, not the GsonComponentSerializer, see the minecraft round trip style test in AdventureCodecsTest for an example. Also put the conversion methods at PaperAdventure.asVanilla/asMinecraft to be consistent.\r\n\r\nSo just we are on the same path: I should add a asVanilla method for the **style conversion** to PaperAdventure? Or do you mean the entire number formatting? (Probably not, but just making sure)\r\n\r\nAaaand should I update the adventure patch? Because as far as I can tell, everything inside that class comes from that patch and if I would put it in this one it could break multiple patches if this one would be removed (e.g. temporarily while upgrading), right?",
      "> All there records should be package-private and not exposed to the API. Instead, have interfaces with a method for each record parameter. The field for the blank format can be on the NumberFormat interface.\r\n\r\nSorry, but I don't think I really get what you are asking me to do. 😅\r\n\r\nAs far as I can tell, you want me to either:\r\nPackage private the entire number format implementations and add static methods to the base interface for creation. But that would be an issue for accessing the number format value, wouldn't it? \r\n\r\nYou could theoretically also have meant to only package private the constructors, but I don't think that's the case because private constructors don't exist in records, if I recall correctly? - sorry if I'm wrong, I'm using Kotlin most of the time 😅\r\n\r\n**Or you want me to:**\r\nCreate interfaces for every type and make the implementations private (but still in the API because I don't know of any provider service to construct it?) But I don't really get the point of that? Wouldn't that just be useless class clutter?\r\n\r\n",
      "> Aaaand should I update the adventure patch? Because as far as I can tell, everything inside that class comes from that patch and if I would put it in this one it could break multiple patches if this one would be removed (e.g. temporarily while upgrading), right?\r\n\r\nYeah, you can make asVanilla/asAdventure methods inside PaperAdventure that use the codec's and they should be in the adventure patch.\r\n\r\n> Or you want me to:\r\nCreate interfaces for every type and make the implementations private (but still in the API because I don't know of any provider service to construct it?) But I don't really get the point of that? Wouldn't that just be useless class clutter?\r\n\r\nYes, exactly this. interfaces for NumberFormat, StyledFormat, FixedFormat (no need for blank format, should just use an equality check to know that). And then package-private records that implement those interfaces with static methods on **NumberFormat** to create instances of each one.\r\n\r\nThere are a couple reasons for this. 1) javadocs. can have better, separated javadocs for the fluent getters and factory methods and types if you separate out the record from the API interface. 2) future changes. Changing records and making them maintain compat is super ugly if something changes in the future. If the constructor is public, you have to always keep the old one and make new ones and you have to have old components... its just not fun. Look at StructuresLocateEvent$Result and observe the reason why its not good to do that. Better to have static methods to deprecate and we can just change whatever we want in the record.",
      "After some thoughts I probably would be against the nullability in the setter and just add a Reset record that is also sealed.\r\nWhat do you think of @Machine-Maker, @jpenilla, @MenschenToaster ?",
      "If we didn't want to have nullability in the setter, I would prefer a clear method instead. I don't think adding a type for resetting is a good idea.",
      "> no need for blank format, should just use an equality check to know that\r\n\r\nInternally it makes sense, but for accessibility when querying the current format it can get confusing and just more difficult to check, right?\r\n\r\nIf somebody wants to know if it's a blank format, they would have to do:\r\n`if(!(format instanceof StyledFormat) && !(format instanceof FixedFormat)) {}`\r\nto know if it's a blank format or not. And if there would be a new format in the future, their code would be broken",
      "By \"equality check\" I meant you can do\r\n```java\r\nif (NumberFormat.blank().equals(format)) {}\r\n```",
      "> By \"equality check\" I meant you can do\r\n> \r\n> ```java\r\n> if (NumberFormat.blank().equals(format)) {}\r\n> ```\r\n\r\nThat makes way more sense. Sure, then I'll do that",
      "> Requires testing\r\n\r\nDid some basic testing. I only tested the number format on the score and not on objectives. But the original code in my first commit was tested on the objective in another plugin as well. (Because that code is used in a paper fork of mine as of right now) I would assume that works.\r\n\r\nGetting (and therefor converting the format back) works as well (which can be sen by the output in the console)\r\nSome further testing might be required but as far as I can see everything works as intended\r\n\r\n![grafik](https://github.com/PaperMC/Paper/assets/54715954/40cc825e-db2b-49b3-8f9a-8f78daa2c675)\r\n\r\n",
      "Any updates? ",
      "Upstream has proposed https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/pull-requests/1344/overview on upstream, it is probably best to hold out for that.",
      "Might be nice to update the OP which provides examples of the API.\r\n\r\nFor example, fixed number format is now `objective.numberFormat(NumberFormat.fixed(Component.text(\"Lol\"));`",
      "Done :+1: ",
      "> Done 👍\r\n\r\nWe both edited the description at the same time 🙃\r\nDidn't even know maintainers could edit the PR's description 😅"
    ],
    "commit_messages": [
      "Scoreboard objective number format api (#10036)\n\n* feat: number format api\r\n\r\nSigned-off-by: David Mayr <davidliebtkekse@gmail.com>\r\n\r\n* feat: make each individual score customizable\r\n\r\nSigned-off-by: David Mayr <davidliebtkekse@gmail.com>\r\n\r\n* docs: fix incorrect descriptions\r\n\r\nSigned-off-by: David Mayr <davidliebtkekse@gmail.com>\r\n\r\n* feat: use access transformers\r\n\r\nSigned-off-by: David Mayr <davidliebtkekse@gmail.com>\r\n\r\n* feat: use adventure codecs\r\n\r\nSigned-off-by: David Mayr <davidliebtkekse@gmail.com>\r\n\r\n* test: test for matching styles\r\n\r\nSigned-off-by: David Mayr <davidliebtkekse@gmail.com>\r\n\r\n* feat: convert number formats to interfaces\r\n\r\nSigned-off-by: David Mayr <davidliebtkekse@gmail.com>\r\n\r\n* feat: add style conversion to adventure patch\r\n\r\nSigned-off-by: David Mayr <davidliebtkekse@gmail.com>\r\n\r\n* feat: use paper adventure method in PaperScoreboardFormat\r\n\r\nSigned-off-by: David Mayr <davidliebtkekse@gmail.com>\r\n\r\n* chore: rename methods to avoid a method in records\r\n\r\nSigned-off-by: David Mayr <davidliebtkekse@gmail.com>\r\n\r\n* fix: check if objective is still registered\r\n\r\nSigned-off-by: David Mayr <davidliebtkekse@gmail.com>\r\n\r\n* feat: improve style conversion\r\n\r\nSigned-off-by: David Mayr <davidliebtkekse@gmail.com>\r\n\r\n* feat: modify how the getter behaves in score\r\n\r\nSigned-off-by: David Mayr <davidliebtkekse@gmail.com>\r\n\r\n* feat: use fluent naming\r\n\r\nSigned-off-by: David Mayr <davidliebtkekse@gmail.com>\r\n\r\n* docs: add spaces before the paper comments\r\n\r\nSigned-off-by: David Mayr <davidliebtkekse@gmail.com>\r\n\r\n* chore: styling changes\r\n\r\nSigned-off-by: David Mayr <davidliebtkekse@gmail.com>\r\n\r\n* chore: make constant final\r\n\r\nSigned-off-by: David Mayr <davidliebtkekse@gmail.com>\r\n\r\n* feat: add methods for styled format instead of constants\r\n\r\nSigned-off-by: David Mayr <davidliebtkekse@gmail.com>\r\n\r\n* fix: remove incorrect getTrackedPlayers check\r\n\r\nSigned-off-by: David Mayr <davidliebtkekse@gmail.com>\r\n\r\n* docs: add . at the end of sentences\r\n\r\nSigned-off-by: David Mayr <davidliebtkekse@gmail.com>\r\n\r\n* docs: explain null behaviour\r\n\r\nSigned-off-by: David Mayr <davidliebtkekse@gmail.com>\r\n\r\n* docs: mention score creation\r\n\r\nSigned-off-by: David Mayr <davidliebtkekse@gmail.com>\r\n\r\n* rebase and fix javadoc comments\r\n\r\n* remove server implementation defaults\r\n\r\n* fix format for PaperScoreboardFormat\r\n\r\n---------\r\n\r\nSigned-off-by: David Mayr <davidliebtkekse@gmail.com>\r\nCo-authored-by: Jake Potrebic <jake.m.potrebic@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a2f4d9087c4d6d3763b5",
    "number": 10035,
    "body": "This PR introduces an easily accessible number format API (using adventure styles and components) for scoreboard objectives for a feature introduced in 1.20.3. \r\n\r\nSetting a number format can be as easy as this:\r\n```java\r\n//Remove numbers\r\nobjective.setNumberFormat(BlankFormat.blank());\r\n\r\n//Style numbers\r\nobjective.setNumberFormat(new StyledFormat(Style.style().color(NamedTextColor.GREEN).decorate(TextDecoration.BOLD).build()));\r\n\r\n//Replace numbers\r\nobjective.setNumberFormat(new FixedFormat(Component.text(\"Lol\")));\r\n```\r\n\r\nAs for the implementation: The conversion between the Adventure style and Mojangs implementation is a bit messy.  The only other way I can think of to implement this is manually converting every style property. As paper doesn't even do that with chat components either, I have decided to just serialize and deserialize again. ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead.",
      "Reopened: #10036"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2f6d9087c4d6d3763b6",
    "number": 10034,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nf29cb801 Separate checkstyle-suppressions file is not required\r\n86f99bbe SPIGOT-7540, PR-946: Add ServerTickManager API\r\nd4119585 SPIGOT-6903, PR-945: Add BlockData#getMapColor\r\nb7a2ed41 SPIGOT-7530, PR-947: Add Player#removeResourcePack\r\n9dd56255 SPIGOT-7527, PR-944: Add WindCharge#explode()\r\n994a6163 Attempt upgrade of resolver libraries\r\n\r\nCraftBukkit Changes:\r\nb3b43a6ad Add Checkstyle check for unused imports\r\n13fb3358e SPIGOT-7544: Scoreboard#getEntries() doesn't get entries but class names\r\n3dda99c06 SPIGOT-7540, PR-1312: Add ServerTickManager API\r\n2ab4508c0 SPIGOT-6903, PR-1311: Add BlockData#getMapColor\r\n1dbdbbed4 PR-1238: Remove unnecessary sign ticking\r\n659728d2a MC-264285, SPIGOT-7439, PR-1237: Fix unbreakable flint and steel is completely consumed while igniting creeper\r\ne37e29ce0 Increase outdated build delay\r\nc00438b39 SPIGOT-7530, PR-1313: Add Player#removeResourcePack\r\n492dd80ce SPIGOT-7527, PR-1310: Add WindCharge#explode()\r\ne11fbb9d7 Upgrade MySQL driver\r\n9f3a0bd2a Attempt upgrade of resolver libraries\r\n60d16d7ca PR-1306: Centralize Bukkit and Minecraft entity conversion\r\n\r\nSpigot Changes:\r\n06d602e7 Rebuild patches",
    "head_branch": "update-upstream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#10034)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nf29cb801 Separate checkstyle-suppressions file is not required\r\n86f99bbe SPIGOT-7540, PR-946: Add ServerTickManager API\r\nd4119585 SPIGOT-6903, PR-945: Add BlockData#getMapColor\r\nb7a2ed41 SPIGOT-7530, PR-947: Add Player#removeResourcePack\r\n9dd56255 SPIGOT-7527, PR-944: Add WindCharge#explode()\r\n994a6163 Attempt upgrade of resolver libraries\r\n\r\nCraftBukkit Changes:\r\nb3b43a6ad Add Checkstyle check for unused imports\r\n13fb3358e SPIGOT-7544: Scoreboard#getEntries() doesn't get entries but class names\r\n3dda99c06 SPIGOT-7540, PR-1312: Add ServerTickManager API\r\n2ab4508c0 SPIGOT-6903, PR-1311: Add BlockData#getMapColor\r\n1dbdbbed4 PR-1238: Remove unnecessary sign ticking\r\n659728d2a MC-264285, SPIGOT-7439, PR-1237: Fix unbreakable flint and steel is completely consumed while igniting creeper\r\ne37e29ce0 Increase outdated build delay\r\nc00438b39 SPIGOT-7530, PR-1313: Add Player#removeResourcePack\r\n492dd80ce SPIGOT-7527, PR-1310: Add WindCharge#explode()\r\ne11fbb9d7 Upgrade MySQL driver\r\n9f3a0bd2a Attempt upgrade of resolver libraries\r\n60d16d7ca PR-1306: Centralize Bukkit and Minecraft entity conversion\r\n\r\nSpigot Changes:\r\n06d602e7 Rebuild patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a2f7d9087c4d6d3763b7",
    "number": 10033,
    "body": "@bergerkiller reported that on Paper specifically, smooth sounds were getting messed up and I think this is the culprit. He'll test and confirm. Paper's network optimizations include a bit that makes packets dispatched async transfer to the main thread with the reasoning that 3rd party packet listeners like from protocollib mutate world state in those listeners and this makes that safer.\r\n\r\nI'm curious if people think we should continue to do that? Packet listeners should understand that some packets are dispatched off the main thread and they may need to sync back to the main thread to read/write world state.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-10033.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/1120124594.zip)",
    "head_branch": "fix/send-immediate-packets",
    "is_a_fork": true,
    "comments": [
      "This fixes the problem for me",
      "Could this be, dunno, toggleable? I can see lots of reasons why we'd want packets to stay async the entire time without gumming up the MT. ",
      "that dispatching thing was generally done because we kinda got fed up of plugins killing the server doing stupid stuff in packet listeners; I do semi still agree with running them there, people seem to assume that they can still touch stuff because the server has some areas where mojang, in limited and isolationionary contexts, where they do\r\n\r\nIdeally we'd ensure that both can be faciliated, but, that is moreso on plugin devs, we just wanna generally ensure that there is a safe way to do that crud, within some level of effort",
      "Any reason why there can't be some API that protocollib itself can talk to to tell paper that a particular packet should be sync? So, as soon as someone listens for sound packets sync, it runs it on the main thread? Cant see why it cant be dynamic...",
      "I could be wrong, but I believe theres also a sound packet to play a (registry) sound for an entity. To make a cow moo. I think the benefit was that the sound moves with the entity, unlike the normal sound packet.\r\n\r\nMaybe that one should be included too.",
      "> I could be wrong, but I believe theres also a sound packet to play a (registry) sound for an entity.\r\n\r\nI included that one already. the sound entity packet."
    ],
    "commit_messages": [
      "send sound and particle packets immediately even if off main (#10033)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2f8d9087c4d6d3763b8",
    "number": 10032,
    "body": "It is valid in vanilla to have a blockentitytag for an itemstack that does not have an `id` key specifying the type of block entity. This doesn't matter when placing the block because the block type determines the tile entity type, not the ID read from the nbt tag compound. Previously, CraftMetaBlockState expected the `id` tag except for 2 or 3 exceptions where it was manually added. Not sure why those were singled out, but now this adds a type override based on the specific material.\r\n\r\nYou can test this bug with an item like\r\n`minecraft:chest{BlockEntityTag: {Items: [{Slot: 0b, Count: 1b, id: \"minecraft:stone\"}]}}` which is a chest that contains a stone block. It works when placed, but if you call getBlockState on the meta of the stack, you will get an empty chest.",
    "head_branch": "fix/block-state-meta",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2f9d9087c4d6d3763b9",
    "number": 10031,
    "body": "Not sure whether we care to split the test additions and switch over to using JavaOps for conversions into separate PRs. For now, they are both in this one.",
    "head_branch": "javaops",
    "is_a_fork": false,
    "comments": [
      "Should probably put that test util stuff into the test changes patch"
    ],
    "commit_messages": [
      "Run round-trip adventure codec tests with JSON, NBT, and Java ops. Use JavaOps for conversions. (#10031)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a2fad9087c4d6d3763ba",
    "number": 10028,
    "body": null,
    "head_branch": "fix-bungee-serialize",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix deprecated bungee APIs still serializing to JSON in packets (#10028)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2fbd9087c4d6d3763bb",
    "number": 10026,
    "body": "The main necessary change was to send:\r\n```java\r\nnew ClientboundGameEventPacket(ClientboundGameEventPacket.LEVEL_CHUNKS_LOAD_START, 0.0F)\r\n```\r\nto do this I call `sendLevelInfo`, which is called by respawn and dimension teleport and has also this packet as a side-effect.\r\n\r\nI also made the respawn packet code smaller.",
    "head_branch": "fix-refresh",
    "is_a_fork": true,
    "comments": [
      "Now it also resends the right permission level set in ops.json for the few people that actually use that \"feature\".",
      "Merge this please, this long loading screen is so annoying",
      "it happens to me",
      "Is there a known way to completely mitigate the loading screen like pre 1.20.4 behaviour?"
    ],
    "commit_messages": [
      "Fix long loading screen when refreshing skins (#10026)\n\nSend `ClientboundGameEventPacket.LEVEL_CHUNKS_LOAD_START` when refreshing players after\r\nplayer profile changes."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2fcd9087c4d6d3763bc",
    "number": 10025,
    "body": "The main necessary change was to send:\r\n```java\r\nnew ClientboundGameEventPacket(ClientboundGameEventPacket.LEVEL_CHUNKS_LOAD_START, 0.0F)\r\n```\r\nto do this I call `sendLevelInfo`, which is called by respawn and dimenstion teleport and has also this side-effect.\r\n\r\nI also made the respawn packet code smaller.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2fdd9087c4d6d3763bd",
    "number": 10023,
    "body": "Extended the API around the decorated pot to encounter the new loot table in 1.20.3.\r\n\r\nOutdated: ~~I wasn't sure where the best place was to add the DecoratedPotInventory interface / implementation. \r\nThere is a case to be made, if it would be better to put them in a Bukkits folder since it would future proof if upstream implement the same API. However, in that case these two patches should removed anyway.~~",
    "head_branch": "decoratedPot",
    "is_a_fork": true,
    "comments": [
      "Note this will need to be updated after we merge upstream due to https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/53ebb05e3951a1a05e4efb8a739d9bf31d21385e#src%2Fmain%2Fjava%2Forg%2Fbukkit%2Fcraftbukkit%2Fblock%2FCraftDecoratedPot.java",
      "> Note this will need to be updated after we merge upstream due to https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/53ebb05e3951a1a05e4efb8a739d9bf31d21385e#src%2Fmain%2Fjava%2Forg%2Fbukkit%2Fcraftbukkit%2Fblock%2FCraftDecoratedPot.java\r\n\r\nI will update once #10085 was merged."
    ],
    "commit_messages": [
      "Expose LootTable of DecoratedPot (#10023)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a2fed9087c4d6d3763be",
    "number": 10021,
    "body": "This causes the world random to scream due to multi-thread acces ",
    "head_branch": "no-async-sounds",
    "is_a_fork": true,
    "comments": [
      "Do we also need catchers for the adventure sound methods? Should be added to the adventure patch if so.",
      "In my opinion this is a bad idea, .playSound is just sending a packet, same as .spawnParticle people will use it async. If the world random is screaming use the multithreaded random, why does world random even matter when playing a sound",
      "also wat \r\n![image](https://github.com/PaperMC/Paper/assets/144524765/190457e7-2ee6-4320-97d0-966eda1ba79d)\r\n",
      "> .playSound is just sending a packet\r\n\r\nVery much not true on World and Server. On `Player`, playSound is as simple as sending a packet. But not on those other types. They either iterate over a thread-unsafe list of players in a world or use the vanilla packet broadcasting system based on location which contains thread-unsafe logic. \r\n\r\nThe \"world random\" aspect is just one part of this. If a sound isn't provided a seed, a seed must be generated from the world's random instance which is a thread-unsafe instance.\r\n\r\nAs to your second post, I'm not sure what you are \"wat\"ing? THat diff is just changing some hunk line numbers and index hashes.\r\n\r\nEDIT: Feel free to ping me in the [discord](discord.gg/papermc) if you want to discuss this further (`@machinemaker`)",
      "> > .playSound is just sending a packet\r\n> \r\n> Very much not true on World and Server. On `Player`, playSound is as simple as sending a packet. But not on those other types. They either iterate over a thread-unsafe list of players in a world or use the vanilla packet broadcasting system based on location which contains thread-unsafe logic.\r\n> \r\n> The \"world random\" aspect is just one part of this. If a sound isn't provided a seed, a seed must be generated from the world's random instance which is a thread-unsafe instance.\r\n> \r\n> As to your second post, I'm not sure what you are \"wat\"ing? THat diff is just changing some hunk line numbers and index hashes.\r\n> \r\n> EDIT: Feel free to ping me in the [discord](discord.gg/papermc) if you want to discuss this further (`@machinemaker`)\r\n\r\nIt appears the line \r\n\r\nlighning.isSilent = isSilent\r\n\r\nwas removed, I could be mistaken though.",
      "> It appears the line\r\nlighning.isSilent = isSilent\r\nwas removed, I could be mistaken though.\r\n\r\nThat's correct. That line was removed. But not as a part of this PR. That is just part of an existing patch that removes that line.\r\n<img width=\"848\" alt=\"image\" src=\"https://github.com/PaperMC/Paper/assets/15055071/f64b6e30-ca80-4902-b78c-ad4ea7f62f36\">\r\nThese 3 spots are the lines in that patch that changed as a result of this PR."
    ],
    "commit_messages": [
      "Catch async usage of playsound (#10021)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a2ffd9087c4d6d3763bf",
    "number": 10020,
    "body": null,
    "head_branch": "fix-paper-plugin-disable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Catch setEnabled to ensure classloader is properly unloaded (#10020)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a300d9087c4d6d3763c0",
    "number": 10019,
    "body": "Fixes a bug where clicking on the SOUTH, EAST, or UP face of a block returns an incorrect block position.\r\nThis bug was introduced in #9211.",
    "head_branch": "fix/block-pos-in-adventure-mode",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix `PlayerInteractEvent#getClickedBlock()` returning wrong block in adventure mode (#10019)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a301d9087c4d6d3763c1",
    "number": 10018,
    "body": "I removed the compileOnly dep on `com.google.code.findbugs:jsr305:1.3.9`, not sure what it was used for. API compiles just fine without it.",
    "head_branch": "dependency-cleanup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update and clean up api dependencies (#10018)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a302d9087c4d6d3763c2",
    "number": 10017,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/10004",
    "head_branch": "fix/default-drop-NPE",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix NPE when iterating over default drops (#10017)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a303d9087c4d6d3763c3",
    "number": 10016,
    "body": "Almost everywhere EntityTeleportEvent (or a subclass) was used, the nullability of getTo was never checked despite it being marked as nullable (as well as setTo). This is really dumb, as what is null supposed to do? So I just made it act as being cancelled.\r\n\r\nAlso in one spot, the firing of the event for /teleport, the to location wasn't even respected if you called setTo.",
    "head_branch": "fix/EntityTeleportEvent-NPE",
    "is_a_fork": true,
    "comments": [
      "Why not just cancel the event if passed null if the param should stay nullable?",
      "Or honestly, just make it notnull if it's broken anyways lol",
      "> Or honestly, just make it notnull if it's broken anyways lol\r\n\r\nI considered that, but I would also have to change it for all the subclasses of EntityTeleportEvent which have constructors that are marked with `@Nullable`. Specifically for the `EntityPortalEvent` which *has* always respected null getTo."
    ],
    "commit_messages": [
      "fix NPE on EntityTeleportEvent getTo (#10016)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a304d9087c4d6d3763c4",
    "number": 10015,
    "body": "Updates key gen. Adds keys for Structure to demo the auto experimental detection. Also fixes some incorrect javadocs in RegistryKey",
    "head_branch": "feature/update-key-gen",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update key gen for 1.20.4 (#10015)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a305d9087c4d6d3763c5",
    "number": 10014,
    "body": "Adds the last 2 missing things, legacy deserialization handling for hover events and nbt components.\n\n```[tasklist]\n### Unit Tests\n- [x] text color\n- [x] named text color\n- [x] key\n- [x] click event\n- [x] text hover event\n- [x] entity hover event\n- [x] item hover event\n- [x] a ton of style combos\n- [x] text component\n- [x] translatable component\n- [x] keybind component\n- [x] score component\n- [x] selector component\n- [x] block nbt component\n- [x] entity nbt component\n- [x] storage nbt component\n```",
    "head_branch": "feature/full-adventure-codecs",
    "is_a_fork": true,
    "comments": [
      "Ok, started on some tests. Made a checklist for reference."
    ],
    "commit_messages": [
      "Use Codecs for adventure Component conversions & network serialization (#10014)\n\n* finish implementing all adventure components in codecs\r\n\r\n* add some initial tests\r\n\r\n* Add round trip tests for text and translatable components\r\n\r\n* Add more round trip test data (score component is failing)\r\n\r\n* Add more round trip test data\r\n\r\n* Fix SCORE_COMPONENT_MAP_CODEC\r\n\r\n* Improve test failure messages\r\n\r\n* Add failure cases\r\n\r\n* Add a couple more test data\r\n\r\n* Make use of AdventureCodecs\r\n\r\n* Update patches after rebase\r\n\r\n* Squash changes into adventure patch\r\n\r\n* Fix AT formatting\r\n\r\n* update comment\r\n\r\n---------\r\n\r\nCo-authored-by: Jason Penilla <11360596+jpenilla@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a306d9087c4d6d3763c6",
    "number": 10013,
    "body": "Reopening of https://github.com/PaperMC/Paper/pull/10007",
    "head_branch": "fix/incorrect-array-annotations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a307d9087c4d6d3763c7",
    "number": 10012,
    "body": null,
    "head_branch": "fix/missing-experimental-annotations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add missing Experimental annotations (#10012)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a309d9087c4d6d3763c8",
    "number": 10009,
    "body": "Not to be merged, just for tracking purposes",
    "head_branch": "dev/1.20.3",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use uuid param in setResourcePack"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a30ad9087c4d6d3763c9",
    "number": 10008,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a30bd9087c4d6d3763ca",
    "number": 10007,
    "body": "Fixes incorrect array nullability annotations. For reference for anyone not reading this, arrays require 2 annotations (1 if the element type is primitive). Like\r\n```java\r\nvoid someMethod(@NotNull String @Nullable [] array);\r\n```\r\nmeans that you can pass null or an array with no null elements.",
    "head_branch": "dev/1.20.3-annotation-fixes",
    "is_a_fork": true,
    "comments": [
      "Not sure I like that amount of diff over what's *effectively* a cosmetic change based on common assumptions, I think that should be left for later"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a30cd9087c4d6d3763cb",
    "number": 10006,
    "body": "According to [Plugin Message packet](https://wiki.vg/Protocol#Serverbound_Plugin_Message_.28play.29) the channel itself does not have a limit, but `Identifier` has a limit. If we look up here we can see that `Identifier` can hold text of length `32767` bytes. So the max possible channel size is that `32767` bytes.\r\n\r\nI wonder why spigot left there so small channel size limit. Maybe it's because minecraft used to have a limit set on the channel name but now it doesn't. \r\nEDIT: Yeah it would match: https://wiki.vg/index.php?title=Plugin_channels&diff=14556&oldid=14514\r\r\n\r\nRelated issue: #10003",
    "head_branch": "fix/set-true-channel-size-limit",
    "is_a_fork": true,
    "comments": [
      "I'd keep the system property in case someone wants to lower it for whatever reason",
      "> I'd keep the system property in case someone wants to lower it for whatever reason\r\n\r\nAlright"
    ],
    "commit_messages": [
      "Increase default custom payload channel size limit (#10006)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a30dd9087c4d6d3763cc",
    "number": 10002,
    "body": "removes the shitty \"version check\" which basically just checks if the build is more than 21 days old.\r\nI put the new check right after the git information is printed, which is probably where it fits the nicest without having to change anything about how the PaperVersionFetcher and the methods it calls work.\r\n\r\nUnsure if this should be merged into the Implement PaperVersionFetcher patch",
    "head_branch": "improve-version-check",
    "is_a_fork": true,
    "comments": [
      "Given there is no inherit value in this information and administrators that want to \"skip\" the current \"out-of-date\" message can just use the property, I am closing this PR.\r\n\r\nI see the technical usage of it, but I don't think the extra web call to either downloads/github API are useful for anyone,"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a30ed9087c4d6d3763cd",
    "number": 9998,
    "body": "resolves #8729 \r\ni decided to store the entities in a set since its not like there is one entity pushing another it just depends on which entity gets ticked first and then pushes both entities in opposite directions.",
    "head_branch": "add-entitycollidewithentityevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a30fd9087c4d6d3763ce",
    "number": 9996,
    "body": "3 days ago I posted a pull request #9991 about adding CustomModelChoice. However, we came to the conclusion that we need a more generalized approach.\r\nAs a result, I began working on what is called PredicateChoice.\r\nTo make it work the StackedContents logic had to be edited.\r\nIn the ExtraContentsMap we don't store the exact ingredient items of every recipe ingredient. Instead, whenever we account a new stack in StackedContents logic we compare it to the provided predicates and store them as \"ingredient items\" if they fulfill at least one predicate.\r\n\r\nWe act like the items in the inventory of the player are the exact choices when any ingredient predicate returns true.\r\n\r\nIt gets more apparent when looking at the changes.\r\nThe first tests showed that it works like a charm.\r\n\r\nPros\r\n- With predicate choice one can implement his own version of ItemPredicate. This allows for the programmer to make the recipe check for whatever he wants.\r\n- They still work as intended if you want to use MaterialChoice or ExactChoice.\r\n\r\nCons\r\n- If you use PredicateChoice the predicate tests Bukkit ItemStacks. Consequently, NMS stacks need to instantiate their Craftbukkit mirror to make the checks happen.\r\n\r\nLet me know your thoughts! :) Maybe I have missed something.",
    "head_branch": "feature/predicate_choice",
    "is_a_fork": true,
    "comments": [
      "[This is just a quick mockup](https://github.com/Machine-Maker/Paper/commit/8efaaaafeed89ae92c03ca850f87ea706ce55f33) of what I had in mind. Ignore the API, it is just quicker to make it not an interface+record. I didn't exhaustively test it, but the test in the test-plugin work so far.",
      "> [This is just a quick mockup](https://github.com/Machine-Maker/Paper/commit/8efaaaafeed89ae92c03ca850f87ea706ce55f33) of what I had in mind. Ignore the API, it is just quicker to make it not an interface+record. I didn't exhaustively test it, but the test in the test plugin work so far.\r\n\r\nLooks good to me! :) My PR was more of a proof of concept. I am fine with your implementation. \r\nDo you want me to fix my PR? Or do we just pick your's instead? I think it doesn't make a difference right?\r\n",
      "You can go ahead and fixup yours",
      "> You can go ahead and fixup yours\r\n\r\nAllright",
      "Upon testing this found that clicking the recipe book item does not move the items in your inventory to the crafting grid.\r\n![image](https://github.com/PaperMC/Paper/assets/42015460/e1db9507-7521-4f1a-becf-e96fab3528e7)\r\nIngredients have custom model data, lore, and attributes set. The recipe does work, just not the recipe books behavior. This may be more to blame on the recipe book patch than this patch.",
      "Is this still being worked on?",
      "> Is this still being worked on?\r\n\r\nHello! I was working on my bachelor thesis lately so i was not able to fully work on this.\r\nWill continue soon!",
      "> Upon testing this found that clicking the recipe book item does not move the items in your inventory to the crafting grid. ![image](https://private-user-images.githubusercontent.com/42015460/295076656-e1db9507-7521-4f1a-becf-e96fab3528e7.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTEwMzY5MzgsIm5iZiI6MTcxMTAzNjYzOCwicGF0aCI6Ii80MjAxNTQ2MC8yOTUwNzY2NTYtZTFkYjk1MDctNzUyMS00ZjFhLWJlY2YtZTk2ZmFiMzUyOGU3LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDAzMjElMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwMzIxVDE1NTcxOFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWM5ZGQxZGY0MjQ5OWIyYTI5M2UwMTFkNmNkMmUyMTY5NmFkYzIxYmNhZGM5MTM1YmFhNTBkNTljNjkwNmM1NDYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.iPPBszXqp4h5XMf8fBDct7rNM1JjMLcyTG93_wyIDLA) Ingredients have custom model data, lore, and attributes set. The recipe does work, just not the recipe books behavior. This may be more to blame on the recipe book patch than this patch.\r\n\r\nHey. I just uploaded a fix to the recipe book problem. The issue seems to be resolved. It would be nice if you could test as well! :)",
      "@derverdox please get back to this at some point 💪 ",
      "This was actually overtaken in https://github.com/PaperMC/Paper/pull/12017",
      "> This was actually overtaken in #12017\r\n\r\nMy bad I missed it, thanks!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a310d9087c4d6d3763cf",
    "number": 9995,
    "body": "Fixes #9993",
    "head_branch": "fix-add-attribute-modifier",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix CraftMetaItem#addAttributeModifier duplication check (#9995)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a311d9087c4d6d3763d0",
    "number": 9994,
    "body": null,
    "head_branch": "chore/update-contrib",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[ci skip] Add mention of FQ imports (#9994)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a312d9087c4d6d3763d1",
    "number": 9992,
    "body": " Updates documentation in EntityEquopment.java to reflect behavior mentioned in issue #9867",
    "head_branch": "issue/9867",
    "is_a_fork": true,
    "comments": [
      "If these are all methods from upstream, it should probably be inside of the upstream javadoc fixes patch rather than its own ",
      "Short explanation:\r\n\r\nWe were deciding between two approaches. After talking to @Machine-Maker who has helped us by providing guidance we either wanted to enforce the dropChance in the setDropChance method within the interval of [0.0, 1.0] and create a separate method that sets a guaranteed drop chance to 2.0 (following Mojang's approach when doing so) or merely updating the docs.\r\n\r\nHowever, after comparing both approaches, we have decided to simply update the docs as we deemed it uneccessary to create a separate methods that provides no extra functionality compared to the existing one(s). This also attempts to follow Paper's policy to justify any extra maintance, which we couldn't with the approach of writing a separate method."
    ],
    "commit_messages": [
      "Updates documentation in EntityEquipment.java (#9992)\n\n* Updates documentation in EntityEquopment.java to reflect behavior mentioned in issue #9867\r\n\r\n* rebase and squash patches\r\n\r\n---------\r\n\r\nCo-authored-by: schwaa96 <schwaa96@mi.fu-berlin.de>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a313d9087c4d6d3763d2",
    "number": 9991,
    "body": "CustomModelChoice is used to create recipes that not only compare for materials but also CustomModelData.\r\nUsing the ExactChoice alternative is not a good idea since items can have different lores or attributes.\r\nThis is a great way to implement recipes with the new possibilities of Minecraft custom items.\r\n",
    "head_branch": "feature/custom_model_choice",
    "is_a_fork": true,
    "comments": [
      "> This feels rather arbitrary IMO. Preferably we just match specific nbt tags.\r\n> \r\n> Custom model data feels somewhat randomly selected from the plethora of ways plugin developers can identify custom items. Given the fact that custom model data is not even the preferred way of identifying custom items (the PDC is) I am really not sure if I like a slapped on server side recipe choice that makes use of the custom model data value.\r\n> \r\n> The fact that mojang does not support nbt matching recipes has been a long standing issue and I 100% can see the _technical_ usage for this, however I think _if_ we end up trying to slap a weaker version of ExactRecipe choice at it, then we should be looking into a more generally applicable implementation rather than grabbing a display value such as customModelData.\r\n\r\nI see your point. However, the idea of it is that we actively ignore the rest of the information in the pdc. I agree that we might need a more generalized approach but there are some things ExactChoice can't do for us.\r\n\r\nConsider the following scenario:\r\nI used to build a concept where every item had a description—based on where it came from it had a different description. They also had custom textures. So only comparing them by materials would not make sense. Instead, I would like to compare them using their custom model data and their material.\r\n\r\nLet's say you have 20 different apples from different regions. They are all the same \"item\" but differ in their description based on the biome they were collected from.\r\nI think it's not a good idea to create 20 different ExactChoices for every description. Besides, it would not be possible to change the description of the custom item dynamically because there would be no exact choice for that.\r\nSo comparing for customModelData as well makes sense in my head or am I missing something?",
      "What do you mean the *rest\" of the PDC ? CustomModelData isn't in the pdc. I 100% get what you are going for here. I am not saying it would be useless.\n\nI am more arguing that this change picks an arbitrary way to identify a custom item and promotes it to the API with a recipe choice when plenty of other ways exist.\n\nIt's in a way fixing a symptom of a way deeper issue, Mojang not permitting recipe ingredients via compound tag.\n\nIf I am identifying my custom items via a pdc tag, e.g. I have a saord that changes custom model data due to some in-game event but remains the same item because it's just a visual change, this PR fails to give me the ability to havw it as a recipe choice.\n\nIf I (for whatever reason) use the display name, same concept applies.\nThis approach is imo just flawed and now generic enough for what it is trying to achieve.",
      "> What do you mean the *rest\" of the PDC ? CustomModelData isn't in the pdc. I 100% get what you are going for here. I am not saying it would be useless.\r\n> \r\n> I am more arguing that this change picks an arbitrary way to identify a custom item and promotes it to the API with a recipe choice when plenty of other ways exist.\r\n> \r\n> It's in a way fixing a symptom of a way deeper issue, Mojang not permitting recipe ingredients via compound tag.\r\n> \r\n> If I am identifying my custom items via a pdc tag, e.g. I have a saord that changes custom model data due to some in-game event but remains the same item because it's just a visual change, this PR fails to give me the ability to have it as a recipe choice.\r\n> \r\n> If I (for whatever reason) use the display name, same concept applies. This approach is imo just flawed and generic enough for what it is trying to achieve.\r\n\r\nI get your point. \r\nThe fact that it solves problems vanilla recipes have with custom model data is a pleasant consequence.\r\nA more generalized approach would be to have something like an ExactChoice that compares only to what is there.\r\n\r\nLike a \"predicate choice\" where your input is a template ItemStack, the Choice compares every existing data in the nbt while ignoring what is not there.\r\nIf the template item has customModelData it compares for that. If it has a lore it compares with the lore.\r\nIf it has a custom display name it compares to that.\r\nThe difference with exactchoice is that it requires a replica. The \"predicate choice\" would only compare for data in the item stack nbt and ignore everything the template does not have.\r\n\r\nYou could even give an extra boolean flag to the ExactChoice, whether it should compare for non-existing data aswell. (Like it does right now)\r\n",
      "Yea pretty much. A \"here is this compound tag of nbt, only compare the inputs values if the provided tag even has that value\" recipe choice would be nice but rn I am unsure if we have nice enough API to model that kind of item nbt \n\nI presume whenever the properties API makes it in, that might be nicer. ",
      "Do you know if this works with shapeless recipes? My initial guess is that it does not. The initial implementation of ExactChoice also did not work with shapeless recipes which upstream just decided to ignore putting in the javadoc that it didn't work with them. I don't really want to go back to that adding more RecipeChoice that doesn't work in all recipes.",
      "> Do you know if this works with shapeless recipes? My initial guess is that it does not. The initial implementation of ExactChoice also did not work with shapeless recipes which upstream just decided to ignore putting in the javadoc that it didn't work with them. I don't really want to go back to that adding more RecipeChoice that doesn't work in all recipes.\r\n\r\nIve been using this implementation for quite a while now but I am willing to do a full testing session to make clear it works on every recipe! :)",
      "> Do you know if this works with shapeless recipes? My initial guess is that it does not. The initial implementation of ExactChoice also did not work with shapeless recipes which upstream just decided to ignore putting in the javadoc that it didn't work with them. I don't really want to go back to that adding more RecipeChoice that doesn't work in all recipes.\r\n\r\nIs there a specific reason why we are still using StackingContents and RecipePicker instead of building a whole new system? I was thinking about PredicateChoice. MaterialChoice and ExactChoice would extend PredicateChoice. However I don't know if we can get same performance achieved by Bitset dfs etc...\r\n\r\nOr is something in the works already?",
      "The nature of ExactChoice being flawed is more an issue with how bukkit represents itemstacks and would generally stand a chance of being fixed once we get the property API\r\nReplacing entire vanilla systems generally needs a strong reason when plugins have been delivering this within their own code for years now, especially given the expectations that we'd be expected to maintain it, while mojang is working on stuff which would generally make the custom model data irrelevant for a good chunk of its usecases",
      "> The nature of ExactChoice being flawed is more an issue with how bukkit represents itemstacks and would generally stand a chance of being fixed once we get the property API Replacing entire vanilla systems generally needs a strong reason when plugins have been delivering this within their own code for years now, especially given the expectations that we'd be expected to maintain it, while mojang is working on stuff which would generally make the custom model data irrelevant for a good chunk of its usecases\r\n\r\nI agree. However, I think we need a more generalized approach to implementing custom recipes. Like PredicateChoice",
      "I created a second pull request regarding PredicateChoice API. Let me know your thoughts #9996 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a314d9087c4d6d3763d3",
    "number": 9990,
    "body": "This patch adds new Chunk events that are called during the serialization / generation process of chunks.\r\nA problem some developers may face while using the ChunkLoad or ChunkUnload events is the fact that they are called synchronously.\r\nThese proposed events are called during the process.\r\n\r\nThe use case of such events is that heavy saving / loading tasks from cache to the chunk nbt container or vice versa are executed asynchronously aswell but in the same thread\r\nthat saves / loads / generates the chunk. ",
    "head_branch": "feature/chunk_serialization_events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a315d9087c4d6d3763d4",
    "number": 9989,
    "body": "This patch adds new Chunk events that are called during the serialization / generation process of chunks.\r\n\r\nThe use case of such events is that heavy saving/loading tasks from cache to the chunk nbt container or vice versa are executed asynchronously as well but in the same thread.",
    "head_branch": "feature/chunk_serialization_events",
    "is_a_fork": true,
    "comments": [
      "I like the principal here, and think that yes it would be very useful to be able to hook onto the chunk loading async in order to add your own data. However, the issue I see here is the PDC really thread safe here? We may need to offer some sort of alternate implementation to ensure that it is safely mutable async. Unsure though, since if the chunk loading is blocked until the async event completion is done theoretically it shouldn't have any duel-thread mutations?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a316d9087c4d6d3763d5",
    "number": 9988,
    "body": "This patch adds new Chunk events that are called during the chunks' serialization/generation process.\r\nYes, there is a ChunkLoad or ChunkUnload event. However, they are called sync.\r\n\r\nThese proposed events are called during the process. They are primarily used to manipulate the persistent data container of the chunk to offramp saving/loading tasks made by custom plugins to the paper chunk loader threads system.\r\n\r\nYou may ask: Why not just store data in the persistent data container of the chunk on the fly and let paper handle the rest?\r\nThat is how it works right now, but consider a system that performs cleanup tasks to its data before storing it. You cannot do that right now because you will lag the main thread.\r\n\r\nHaving such events is an excellent alternative for those who don't want to call certain tasks sync but have to because of the synchronous nature of Bukkit's ChunkLoad / ChunkUnload events.\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a317d9087c4d6d3763d6",
    "number": 9985,
    "body": "This is an alternative implementation of #9984, based on the patch that I'm running on my server. https://github.com/SparklyPower/SparklyPaper/blob/ver/1.20.2/patches/server/0010-Skip-EntityScheduler-s-executeTick-checks-if-there-i.patch\r\n\r\nIn my opinion this PR is better than other PR because it is cleaner and better, but it is more complex than the other one. I haven't tested on Folia tho to see if there is any concurrency issues BUT I think there wouldn't be any, all checks are made within the `stateLock` synchronized block.\r\n\r\nFolia's EntityScheduler `executeTick` loop in `MinecraftServer`'s `tickChildren` is slooooow if you have a lot of entities (example: for a server with 15k entities, [it uses ~1.7ms every tick](https://spark.lucko.me/eRvT1QqnI0), even if none of your plugins are using Folia's EntityScheduler)\r\n\r\nTo workaround this, we keep all entities with scheduled tasks into a concurrent set, and we loop that concurrent set instead of looping thru all world's entities. Yes, I know, the scheduler increments the `tickCount`, but that doesn't matter since all the scheduled tasks are \"relative\" to the current tick count, not bound to the server's tick count. As long as we keep ticking the tick count when there are pending tasks, it works fine.\r\n\r\nThe biggest performance boost comes from not needing to do all the checks `executeTick` does. Most server entities won't ever use a entity scheduler anyway, just think about it: Are plugins really going to add a scheduler to each item frame, each armor stand, each dropped item, each... you get my point. This also has a nice performance boost compared to #9984 because we don't need to iterate thru all entities that exist in all worlds, we only need to iterate the entities that we know that have pending tasks.\r\n\r\nAbout set vs list: *Maybe* it would be better to use a list, I have used a set because it needed to be concurrent, but I could change to a list (it would require some synchronization checks tho)\r\n\r\nIf anyone wants to reproduce the performance impact: Just spawn a bunch of entities, I used Armor Stands to test this, but any entity should work.\r\n\r\n**Profiler Before the Changes:** https://spark.lucko.me/eRvT1QqnI0\r\n**Profiler After the Changes:** *haven't done it yet but just pretend it is the same profiler result but with 0% lag because we are iterating a set with 0 entries*",
    "head_branch": "store-entities-with-scheduled-tasks-in-a-concurrentset",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a318d9087c4d6d3763d7",
    "number": 9984,
    "body": "This PR is mostly for \"hey maybe there is a better solution for this\", since I don't expect this PR to be accepted since it is mostly a hacky hack that probably has concurrency issues (accessing `hasScheduledAtLeastOneTask` outside of a synchronized block) and probably has a better solution.\r\n\r\nFolia's EntityScheduler `executeTick` loop in `MinecraftServer`'s `tickChildren` is slooooow if you have a lot of entities (example: for a server with 15k entities, it uses ~1.7ms every tick, even if none of your plugins are using Folia's EntityScheduler)\r\n\r\nTo workaround this, we just don't attempt to do any of the checks if the scheduler hasn't been used at least once. Yes, I know, the scheduler increments the `tickCount`, but that doesn't matter since all the scheduled tasks are \"relative\" to the current tick count, not bound to the server's tick count.\r\n\r\nThe big performance boost comes from not needing to do all the checks `executeTick` does. Most server entities won't ever use a entity scheduler anyway, just think about it: Are plugins really going to add a scheduler to each item frame, each armor stand, each dropped item, each... you get my point.\r\n\r\nAnother way of doing this is changing the scheduler to store entities that have pending tasks into a global list to avoid getting all entities from all worlds, this is what I have done in my fork, and maybe this is a better less hacky solution, BUT that will probably make Folia explode, this needs to be tested further in a Folia environment instead of a Paper environment (on a Paper environment, I have been using this patch for one week+ without any issues): https://github.com/SparklyPower/SparklyPaper/blob/ver/1.20.2/patches/server/0010-Skip-EntityScheduler-s-executeTick-checks-if-there-i.patch (See PR #9985)\r\n\r\nIf anyone wants to reproduce the performance impact: Just spawn a bunch of entities, I used Armor Stands to test this.\r\n\r\n(In the profiler, the loop is `net.minecraft.server.MinecraftServer.lambda$tickChildren$15()`)\r\n\r\n**Profiler Before the Changes:** https://spark.lucko.me/eRvT1QqnI0\r\n**Profiler After the Changes:** https://spark.lucko.me/DDAk1JQC0u",
    "head_branch": "skip-checks-if-the-scheduler-hasnt-been-used",
    "is_a_fork": true,
    "comments": [
      "I have made another PR that also solves the same issue, but that one is based off the patch I mentioned in this PR's description:  #9985\r\n\r\nI decided to open a new PR instead of editing this one because I think both approaches are nice: \r\n* This one requires less changes, but if a EntityScheduler has been used at least once, then the scheduler will continue being ticked until retired. So theorically if a plugin scheduled a task for all entities, then this patch wouldn't help. However, this is a rare situation. The implementation I made on this PR was my previous solution that I was using on my server, before trying to decrease lag even... further... beyond!\r\n* The other one requires more changes, but is cleaner and better overall, but may have other issues that I don't know about. That one I'm running on my server and I haven't experienced any issues, however I don't have a lot of plugins that are using entity schedulers, so further testing may be needed.",
      "Closing this in favor of https://github.com/PaperMC/Paper/pull/9985"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a319d9087c4d6d3763d8",
    "number": 9982,
    "body": "This is an alternate way to share dependency versions between api & server to version catalogs (#9974), which have the problem where any catalog change that impacts the generated accessor ABI will cause the entire paperweight pipeline to run again (which makes it impractical for our use case)\r\n\r\nIf we decide to go forward with this, will need to merge https://github.com/PaperMC/paperweight/pull/226 and make a paperweight release first.",
    "head_branch": "merged-properties",
    "is_a_fork": false,
    "comments": [
      "I like this idea, pretty much version catalogs but without the codegen stuff, so all the same advantages but no real disadvantages (other than lost type safety which seems fine) "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a31ad9087c4d6d3763d9",
    "number": 9981,
    "body": "Adds MaterialTags for the Following Sets\r\n\r\n- Leather Armor\r\n- Chainmail Armor\r\n- Iron Armor\r\n- Golden Armor\r\n- Diamond Armor\r\n- Netherite Armor",
    "head_branch": "armor-material-tags",
    "is_a_fork": true,
    "comments": [
      "I'm skeptical about adding more of these right now. I think we are planning on deprecating this whole API when upstream deprecates the Material enum.\r\n\r\nThey'll be replaced by a better system for adding custom tags. Of course if that happens in 2 years, its fine to add these now, but if its 1.21, then I'd rather not.",
      "Yes, I prefer that we move more towards using future registry API to register custom tags instead of adding to this.\r\n\r\nThank you for your contribution, regardless. 😄 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a31bd9087c4d6d3763da",
    "number": 9980,
    "body": null,
    "head_branch": "mob-goal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add mob goal generator (#9980)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a31cd9087c4d6d3763db",
    "number": 9979,
    "body": "I know that this looks like a stupid optimization that doesn't do anything, but hear me out: `getDurability()` ain't free, when you call `getDurability()`, it calls `getItemMeta()`, which then allocates a new `ItemMeta` or clones the current item's item meta.\r\n\r\nHowever, this means that we are unnecessarily allocating useless `ItemMeta` objects if we are comparing one or more items that don't have any durability (if they had durability, they would have a non-null meta), and this impact can be noticed if one of your plugins has a `canHoldItem` function that checks if a inventory can hold an item by looping thru the player's inventory, especially if the plugin is checking this multiple times in a tick.\r\n\r\nTo avoid this, we can just... not check for the item's durability! Don't worry, the durability of the item is checked when it checks if both item metas are equal.\r\n\r\nThis is a leftover from when checking for the item's durability was \"free\" because the durability was stored in the `ItemStack` itself, this [was changed in Minecraft 1.13](https://hub.spigotmc.org/stash/projects/SPIGOT/repos/bukkit/commits/f8b2086d60942eb2cd7ac25a2a1408cb790c222c#src/main/java/org/bukkit/inventory/ItemStack.java), however the `isSimilar(...)` method hasn't been changed since it was added in 2012.\r\n\r\nOf course, maybe  this patch is a bit useless? There is a performance benefit if you remove that call since you avoid initializing/cloning a `ItemMeta` if one or both of the items have a null `ItemMeta` + removes a deprecated call + improves the code to match how items work in a post-1.13 world, but the benefit is so so so smol (really only helps plugins that are constantly checking if an item is similar to another, which is my case, where one of my plugins allows players to \"quick harvest\" their farms, and for each crop it needs to check if the drops fits on their inventory) that maybe it could just be ignored, after all, there's also the work of maintaining this diff to fix something that just boils down to \"well now its correct and there is a super tiny perf improvement\". (Maybe this should be upstreamed to Spigot since they are the ones who are maintaining Bukkit? but paper my beloved tho...)\r\n\r\n(The reason I found out that this had a performance impact was because the `getDurability()` was using 0.08ms each tick in one of my plugins according to spark... yeah, sadly it ain't a super big crazy optimization, the performance impact would be bigger if you have more plugins using `isSimilar(...)` tho, something something pick a function and make it fast or something like that)\r\n\r\nKeep in mind that `CraftItemStack` *does* override `isSimilar()`, and the overriden method also checks `getDurability()`. However, `CraftItemStack` `getDurability()` actually gets the damage directly from the NBT tags. *Maybe* both checks should be removed? \"oh but if `CraftItemStack` overrides this method then your patch is USELESS!!!\" actually not because you initialize the `ItemStack` class directly, and `CraftItemStack` delegates to ItemStack's `isSimilar()` if the stack being compared is not a `CraftItemStack`, see this debug log: `[org.bukkit.craftbukkit.v1_20_R2.inventory.CraftItemStack] CraftItemStack isSimilar comparing ItemStack{CRAFTING_TABLE x 1} (class org.bukkit.craftbukkit.v1_20_R2.inventory.CraftItemStack) to ItemStack{BEETROOT x 1} (class org.bukkit.inventory.ItemStack)`\r\n\r\n**Example of a plugin code that uses `isSimilar(...)`:**\r\n```kotlin\r\nfun Inventory.canHoldItem(stack: ItemStack?): Boolean {\r\n\tif (stack == null) { return true }\r\n\tif (stack.type == Material.AIR) { return true }\r\n\tval storageContents = this.storageContents\r\n\tif (storageContents != null) {\r\n\t\tfor (invItem in storageContents) {\r\n\t\t\tif (invItem == null) return true // Empty slot!\r\n\t\t\tif (invItem.isSimilar(stack)) { // \r\n\t\t\t\tif (invItem.maxStackSize >= invItem.amount + stack.amount) {\r\n\t\t\t\t\t// Yes, we can add the items to this stack!\r\n\t\t\t\t\treturn true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn false\r\n}\r\n```",
    "head_branch": "remove-redundant-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove unnecessary durability check in ItemStack#isSimilar (#9979)\n\n* Optimize \"ItemStack#isSimilar(...)\" by removing the unnecessary durability check\r\n\r\n* Change patch name and add a better commit message"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a31dd9087c4d6d3763dc",
    "number": 9978,
    "body": "Previously, the recipe count log always logged `Loaded 7 recipes`. It was logging the number of recipe types, not the number of recipes loaded.\r\n\r\nAlso, upstream claimed to have moved the log message logging the number of advancements loaded to somewhere else, but I can't find it and it doesn't show up, so I added it back.",
    "head_branch": "fix/count-logs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Log correct recipes and advancement count on server start (#9978)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a31ed9087c4d6d3763dd",
    "number": 9976,
    "body": "with powershell being the \"new\" default terminal for windows (which does not load commands from the current directory by default) i think this should be mentioned",
    "head_branch": "correct-windows-requiring-path",
    "is_a_fork": true,
    "comments": [
      "I do not get the point of this change, this seems obvious. I think that the people using this project will be aware of what terminal to use.",
      "since powershell is the default and i think thats also what most people use the wording \"On Windows\" isn't correct imo. while yes people using the project will probably know that. It is still incorrect.",
      "How is \"powershell\" the default? Opening intellij and pretty much any major IDE, you get a standard command terminal. \r\n\r\nI just think this is negligible. ",
      "wait huh. then i don't remember changing the default. what version of windows are you using? while yeah this change isn't really significant i don't think changing it is bad",
      "We'll see what others think, perhaps. ",
      "Could just say that on Windows you should use `.\\gradlew.bat`, that'll work for both the old conhost and powershell",
      "so basically just remove the part about windows? Edit: ah nevermind ./ doesn't work on cmd i forgot",
      "Pretty sure both intellij and windows terminal default to PowerShell nowadays, I agree with Emily's comment"
    ],
    "commit_messages": [
      "[ci skip] Correct Windows requiring path to gradlew (#9976)\n\n* [ci skip] Correct Windows requiring path to gradlew\r\n\r\n* Update CONTRIBUTING.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a31fd9087c4d6d3763de",
    "number": 9975,
    "body": null,
    "head_branch": "update-mapping-io",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update mapping-io (#9975)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a320d9087c4d6d3763df",
    "number": 9974,
    "body": "todo\r\n- [ ] release build of [multi-version-catalog](https://github.com/PaperMC/multi-version-catalog)\r\n- [ ] go through patches and migrate all dependencies & versions\r\n- [ ] verify dev bundle and etc. still works as expected after migration",
    "head_branch": "version-catalogs",
    "is_a_fork": false,
    "comments": [
      "This may be impractical due to https://github.com/gradle/gradle/issues/26020, adding or removing one catalog entry will cause the entire paperweight pipeline to be run again."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a321d9087c4d6d3763e0",
    "number": 9973,
    "body": "resolves #8916 \r\ni was unsure where to add checks but i think they fit pretty nicely where they are now.",
    "head_branch": "add-required-plugins-config-option",
    "is_a_fork": true,
    "comments": [
      "i have been using the hasStarted boolean from Watchdog since that kinda behaves like a isreloading boolean. however the watchdog thread is not started until after the first tick is done. so a required plugin could have done this:\r\n![image](https://github.com/PaperMC/Paper/assets/70228790/c76ae79d-5baf-4d3c-8627-9afedba2959f)\r\nand the server would not get stopped. "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a322d9087c4d6d3763e1",
    "number": 9971,
    "body": "Adds a new file, `command-aliases.yml` into our config folder for defining simple aliases for commands that **work** with tab completion and permissions. Schema is as follows\r\n```yaml\r\nalias1: some-command\r\n\r\nalias2:\r\n  - some\r\n  - command\r\n\r\nalias3:\r\n  target: some-command\r\n  permission: some.permission\r\n\r\nalias4:\r\n  target:\r\n    - some\r\n    - command\r\n  permission: some.permission\r\n```\r\n\r\nThe default permission behavior is to combine all of the permission requirements at all of the nodes along the target path and assign that to the alias node. But that can be changed to a custom permission in the config.\r\n\r\n----\r\n\r\nCloses https://github.com/PaperMC/Paper/issues/9214\r\nRelated https://github.com/PaperMC/Paper/issues/9458\r\n\r\n----\r\n\r\nWill be merged into the paper config patch just before merging.\r\n",
    "head_branch": "feature/better-aliases",
    "is_a_fork": true,
    "comments": [
      "Great work, will be very helpful! Do you plan on deprecating Bukkit command aliases? Or still support it officially",
      "> Do you plan on deprecating Bukkit command aliases?\r\n\r\nI don't think we have to, its pretty barebones as-is, and just won't get updates (like it hasn't gotten updates in years anyways).",
      "Bump, is there still a chance to merge this PR?   (╯°□°）"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a323d9087c4d6d3763e2",
    "number": 9970,
    "body": "The `blockEntityTickers` list was replaced with a custom list based on fastutil's `ObjectArrayList` with a small yet huge change for us: A method that allows us to remove a list of indexes from the list.\r\n\r\nThis is WAY FASTER than using `removeAll` with a list of entries to be removed, because we don't need to calculate the identity of each block entity to be removed, and we can jump directly to where the search should begin, giving a performance boost for small removals (because we don't need to loop thru the entire list to find what element should be removed, and we can quit after removing all the indexes) and a performance boost for big removals (no need to calculate the identity of each block entity), ESPECIALLY if the server has a lot of block entities, or if you are unloading a lot of block entities.\r\n\r\nWhile I don't have nice and fancy and fluffy benchmarks on hand, here's some results from a quick and dirty benchmark test...\r\n* If you have 10k block entities and attempt to remove the first block entity...\r\n   * Current implementation: ~6333.6 op/s\r\n   * New implementation: ~33745.2 op/s\r\n* If you have 10k block entities and attempt to remove the last block entity...\r\n   * Current implementation: ~6726.4 op/s\r\n   * New implementation: ~34487.8 op/s\r\n* If you have 10k block entities and attempt to remove block entities from 900 to 915 (simulating what happens in a chunk unload)\r\n   * Current implementation: ~5073.6 op/s\r\n   * New implementation: ~31476.6 op/s\r\n* If you have 10k block entities and attempt to remove block entities from it % 2 == 0 (this is like, the worst case scenario for us)\r\n   * Current implementation: ~1372.2 op/s\r\n   * New implementation: ~2895.6 op/s\r\n\r\n**Notes:**\r\n* The patch is a bit messy, but I can clean up after the idea is \"approved\".\r\n* Yes, this is faster than if you manually used `remove(int)` for each block entity, since that would create a arraycopy for each removal, and that makes us have [the big sad](https://pbs.twimg.com/media/EAmr-PAWsAEoiWR.jpg). (see patch below, that's how Minecraft originally works and Paper replaced it with a better implementation)\r\n* I'm not 100% sure if the `removeAllByIndex` is good enough: I have tested it a lot and run the server with both implementations (old and the new) running with `equals` checking both of them to see if the order of both lists matched, and it seems to be fine.\r\n* The `removeAllByIndex` is somewhat based on `removeElements` from fastutil, originally I was attempting to \"remove block entities by range\" by using `removeElements` but that wasn't good if the ranges were scattered across the list, which can happen if multiple chunks with low block entity counts unload.\r\n* ~~*Maybe* this patch should be removed beforehand? Or maybe that patch should be edited? They both edit the same section attempting to improve removal performance. https://github.com/PaperMC/Paper/blob/master/patches/server/0164-Fix-MC-117075-TE-Unload-Lag-Spike.patch~~\r\n  * This patch now replaces the old patch\r\n* I think that the list doesn't need to be named `BlockEntityTickersList`, considering that it doesn't have any specific block entity behavior, however I don't know a good name for it. `ObjectArrayListWithBulkRemovalByIndex` seems wonky.\r\n* A super hacky patch is here if you want to compare the performance between the old behavior and the new behavior, it logs to the console what implementation was fastest to remove, requires some changes to make it work on Paper tho: https://github.com/SparklyPower/SparklyPaper/blob/b96d6f8f3895d944b3c6f52fb4e0f8d706ba3f3a/patches/removed/server/0019-BlockEntityTickersList-optimization-tests.patch#L1",
    "head_branch": "better-blockentitytickers",
    "is_a_fork": true,
    "comments": [
      "> This patch should just completely replace `Fix MC-117075: TE Unload Lag Spike`. That is the patch that changes the removal logic from vanilla's removal 1 at a time to using the removeAll. No point in having a patch that is completely reverted in a later patch.\r\n\r\nI've now replaced the old patch with the new code :3\r\n\r\nI also changed the code a bit: Now the list itself tracks what indexes and where to start the search, instead of throwing the code in the `tickBlockEntities()` method, which makes the `Level` diff a bit cleaner. The `tickBlockEntities()` marks indexes to be removed with `markAsRemoved(int index)` and, after all block entities are ticked, `removeMarkedEntries()` cleans up the \"marked as removed\" entries.",
      "> I don't know if someone else like Spottedleaf might have a different preferred way to remove the tickers.\r\n\r\nAnother way that I thought that it could be optimized even further beyond is if you `System.arraycopy` instead of `a[j++] = a[i];` for each element that is not in the list. This way, indexes that are far apart (example: index 100 and 8000) could avoid the looping thru all the elements to offset -1 them just to get from index 100 to 8000.\r\n\r\nSo, using our example: The search starts at index 100, then the elements from 101 to 7999 are `System.arraycopy`'d to index 100, so on and so forth.\r\n\r\nHowever this is not bullet proof, since for our worst case (if we are removing block entities with index `it % 2 == 0`) the performance drops drastically, way more than the current ArrayList implementation. Of course, in a real life scenario something like that would never happen, so *maybe* it is worth a shot later to experiment if we could make it even faster.\r\n\r\nAbout the variables: Yeah they really need better names lmao, these short variables names are actually from fastutil's `removeElements` method, since I was modifying that method to do what I wanted, but tl;dr:\r\n\r\n`c` = the set that has all the indexes that will be removed\r\n`i` = the current index, does NOT skip over removed entries\r\n`j` = the current index, SKIPPING over removed entries\r\n`a` = the list's backing array\r\n\r\nLater I will update the patch to give them more descriptive names. :3",
      "Updated the patch to change the variable names to be more descriptive and easy to understand",
      "Looking over this patch, I wonder if a reverse approach would be faster.\r\nGiven we have a sorted list of indices to remove from the list we would be able to do determine a set of \"ranges\" of elements to be kept.\r\n\r\nE.g. with `toRemove = [0, 3, 5]` and a list of `[a, b, c, d, e, f, g]` we can immediately conclude that items `1` and `2` have to be moved by one index to the left, leading to `[b, c, c, d, e, f, g]`. We can also conclude item `4` has to be moved to the left by two indices, leading to `[b, c, d, d, e, f, g]`. Further more we know that item `6` has to be moved by three indices leaving us with a final array of `[b, c, d,  g, e, f, g]`. We removed three indices so we array copy the last three to null and we are done.\r\n\r\nThis way we a) can avoid a set and potential collisions. b) have a terribly easy setup for System.arraycopy optimisation of larger moves down the line (e.g. interval [1-2] has two items, if that is above threshold `n` we use arraycopy, otherwise we use a plain for-loop to shift by whatever diff, in the ranges case one.\r\n\r\nI might be missing something, but I feel like this would potentially benefit the data structure.",
      "Paper 1.20.4 now uses a `ReferenceOpenHashSet` instead of a `ObjectOpenCustomHashSet` for the `toRemove` list, I still need to benchmark if this patch is still needed *but* after a brief smol benchmark that I've made, I think this patch still provides a performance improvement.",
      "I still need to update this PR to rebase it to 1.20.6, but here's the same patch on my own updated 1.20.6 fork: https://github.com/SparklyPower/SparklyPaper/blob/ver/1.20.6/patches/server/0015-Fix-MC-117075-TE-Unload-Lag-Spike.patch",
      "I'll implement my suggestion too and run benchmarks over night :+1: \r\n\r\n//edit:\r\nhttps://gist.github.com/lynxplay/dfce7a1c6ea16781b4f6cc6a5cb84622 looks promising, feel free to also benchmark this. Saves ourself from Set#contains calling on every index of the array after the first removal, which is nice when an element at the beginning and at the end are removed in the same transaction."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a324d9087c4d6d3763e3",
    "number": 9969,
    "body": "For each player on each tick, enter block triggers are invoked, and these create loot contexts that are promptly thrown away since a lot of the times the predicate doesn't match. (in vanilla, it should only pass for the end gateway, or when the player is in water to get the boat's recipes, and iirc none of these requires a LootContext)\r\n\r\nTo avoid this, we now lazily create the LootContext if the criterion passes the predicate AND if any of the listener triggers require a loot context instance.\r\n\r\nWhile the performance increase ain't that big (on a random profile with ~55 players on  my server, the `createContext` call was using 0.10% according to spark), it would be nice to just *avoid* that useless allocation anyway, and theorically if you have a lot of players moving around, the performance impact of this call would be bigger.",
    "head_branch": "lazily-create-lootcontext-for-criterions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Lazily create LootContext for criterions (#9969)\n\nFor each player on each tick, enter block triggers are invoked, and these create loot contexts that are promptly thrown away since the trigger doesn't pass the predicate\r\n\r\nTo avoid this, we now lazily create the LootContext if the criterion passes the predicate AND if any of the listener triggers require a loot context instance"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a326d9087c4d6d3763e4",
    "number": 9968,
    "body": "If your server has a lot of farms, the `isNearWater` calls gets *very* expensive.\r\n\r\nTo workaround this, we can throttle the tick rate of farmlands, because after all, you don't *really* need to check if the farmland is near a source of water that often, right? It is not like the water will magically vanish if they are in a player made farm.\r\n\r\nThis helps a lot, on my server farm lands were taking up ~8% of CPU time, so throttling the tick rate of wet farmlands helped to bring it down while not having a negative gameplay impact.\r\n\r\nThere are two options: `dry-farmland` and `wet-farmland`, the reason it is separate is because the performance impact of dry farmlands isn't that big, but has a big gameplay impact where players may be confused about why the farmland isn't wet after placing water near it. Yes, dry farmlands have the same `isNearWater` checks as wet farmlands, but dry farmlands do end up turning to regular dirt after a while, so it is like they are \"naturally\" throttled by the server.\r\n\r\nThe code for the tick rate throttle was copied from the \"Configurable Grass Spread Tick Rate\" patch.\r\n\r\n(The reason the name is \"Farmland\" and not \"Farm Land\" is because that's what the game calls the block)",
    "head_branch": "farmland-tick-rate",
    "is_a_fork": true,
    "comments": [
      "> It's almost worth creating a new wrapper type for tick rates cause now we have like 5 of those big ugly long if statements that are identical (FarmBlock and SpreadingSnowyDirtBlock)\r\n\r\nIf it is easier, maybe creating a simple static function `shouldSkip(int tickRate, int hashCode)` could also help clean up those pesky if statements without requiring too much work.",
      "> If it is easier, maybe creating a simple static function shouldSkip(int tickRate, int hashCode) could also help clean up those pesky if statements without requiring too much work.\r\n\r\nIt's probably fine for now. I will probably end up changing it to something custom wrapper type during one of my periodic config cleanup PRs.\r\n"
    ],
    "commit_messages": [
      "Configurable Dry and Wet Farmland Tick Rates (#9968)\n\n* Configurable Dry and Wet Farm Land Nearby Water Tick Rates\r\n\r\n* Rebase and squash\r\n\r\n---------"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a327d9087c4d6d3763e5",
    "number": 9967,
    "body": "Fixes #9966.",
    "head_branch": "fix-entity-type-test",
    "is_a_fork": true,
    "comments": [
      "Feel free to add the bug fix in the patch description"
    ],
    "commit_messages": [
      "Fix max nearby entities class check (#9967)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a328d9087c4d6d3763e6",
    "number": 9965,
    "body": "Asynchronous chunk generation provides an opportunity for mobs being added with generation to have effects added to them. The event does not support asynchronous firing.\r\n\r\nThis functions by checking the type of the ServerLevelAccessor provided in the `finalizeSpawn` method and doesn't fire the event if it's not a ServerLevel.\r\n\r\nI don't think this is the final fix for this, some mechanism probably has to be introduced to allow the event to be fired asynchronously without breaking plugins' expectation that all of these events are synchronous. \r\n\r\nFixes https://github.com/PaperMC/Paper/issues/9234\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9965.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/1073078802.zip)",
    "head_branch": "fix/async-EntityPotionEffectEvent",
    "is_a_fork": true,
    "comments": [
      "This PR seems to fix the issue - with these changes, I was able to generate the world normally."
    ],
    "commit_messages": [
      "Don't fire EntityPotionEffectEvent during worldgen (#9965)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a329d9087c4d6d3763e7",
    "number": 9964,
    "body": "The Relative Teleport/Look At APIs has been mature for a while now with no breaking changes needed. I think we can safely remove the `Experimental` annotation from them. I don't want to just end up never removing these annotations.",
    "head_branch": "refactor/remove-experimentals",
    "is_a_fork": false,
    "comments": [
      "Would async variants of the new teleport methods be added in a separate PR? Since this is just taking them out of the experimental phase",
      "I think those can be added whenever really. I don't think those teleport async methods have any server implementation, it's just loading the chunk async and then teleporting within the future that is returned.",
      "Might be an annoying question, but what about Location? The whole Position API seems to be immutable, but Location, which implements FinePosition, just isn't. I feel like there might be a problem when a plugin has positions stored that change over time. Also, Location already has *a bunch* of mutating offsetting methods, and now it has more, but without a single mark that those are creating an immutable Position that isn't a Location.\r\nI'd say either Location's and Positions' javadoc should describe the mutability status, or there being some mechanism to determine whether or not a Position is mutable *without* explicitly checking if a Position is an instance of Location.",
      "Ok yeah, there has been some more discussion about Position on the discord. Possibly we can just remove FinePosition from being implemented by Location and just have an asPosition method. Either way, removed that from this patch, now its just the teleport API."
    ],
    "commit_messages": [
      "Un-experimentalize Entity TP APIs (#9964)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a32ad9087c4d6d3763e8",
    "number": 9963,
    "body": "This patch fixes a bug where the dependency tree used for classpath joining,\r\nwasn't built using the bootstrap dependencies, for plugin bootstrappers.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9963.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/1073095279.zip)",
    "head_branch": "gdejong/fix-plugin-bootstrap",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix plugin bootstrap dependency tree population (#9963)\n\nThis patch fixes a bug where the dependency tree used for classpath joining,\r\nwasn't built using the bootstrap dependencies, for plugin bootstrappers."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a32bd9087c4d6d3763e9",
    "number": 9962,
    "body": "This patch fixes a bug where the dependency tree used for classpath joining,\r\nwasn't built using the bootstrap dependencies, for plugin bootstrappers.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a32cd9087c4d6d3763ea",
    "number": 9959,
    "body": "Closes #9933",
    "head_branch": "fix/spawnpos-yaw",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix yaw being ignored for first spawn pos (#9959)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a32dd9087c4d6d3763eb",
    "number": 9957,
    "body": null,
    "head_branch": "build-updates-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update paperweight to 1.5.10 and Gradle to 8.4 (#9957)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a32ed9087c4d6d3763ec",
    "number": 9956,
    "body": "The PlayerChatEvent previously linked to the now deprecated AsyncPlayerChatEvent and there were double deprecated annotations. I just took the deprecation message from ChatEvent since that one seems nice and compact  ",
    "head_branch": "update-pce-jdocs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Improve PlayerChatEvent Deprecation Message (#9956)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a32fd9087c4d6d3763ed",
    "number": 9953,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n96340858 PR-938: Various Sound API improvements\r\ncbfe0ff0 PR-937: Minor improvements to World#rayTrace documentation\r\ne979ee95 PR-935: Change Consumer and Predicates to super\r\n27ae46dc SPIGOT-3641, SPIGOT-7479, PR-931: Add missing values to EntityEffect\r\n0616ec8b Add eclipse .factorypath file to .gitignore\r\n\r\nCraftBukkit Changes:\r\n8e162d008 PR-1301: Various Sound API improvements\r\neeb7dfc2d SPIGOT-7520: Attribute LootTableSeed missing for generated containers with attached LootTable d433f086d PR-1297: Change Consumer and Predicates to super\r\n864f616da SPIGOT-7518: Fix NullPointerException when calling Block#applyBoneMeal()\r\n5a2d905af Add eclipse .factorypath file to .gitignore\r\n7c6bf15d4 Fix SkullMeta configuration serialization / deserialization with note block sound\r\n\r\nSpigot Changes:\r\n7de1049b Rebuild patches",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [
      "Spigot has merged the virtual entity API now. Any chance this can be updated to directly include it or do you want to keep that separate?",
      "> Any chance this can be updated to directly include it or do you want to keep that separate?\r\n\r\nI really want to wait as long as possible before adding this. It is a poorly designed system with many flaws. It exposes \"not-in-world\" entities in new event calls that will be unexpected to plugins, the API itself does not care at all about cancelled spawn events, and I'm sure a dozen other problems with specific entity events that will not throw exceptions, but have bad behavior if called on a not-in-world entity.\r\n\r\nEDIT: The EntitySnapshot seemingly doesn't include some specific information about specific entities that doesn't seem to follow a consistent pattern.",
      "I see. Kinda sad that wasn't put forward on the original PR :S",
      "> I see. Kinda sad that wasn't put forward on the original PR :S\r\n\r\nthats what happens if you close PRs to the public 🤷 ",
      "> > I see. Kinda sad that wasn't put forward on the original PR :S\n> \n> thats what happens if you close PRs to the public 🤷 \n\nDon't say it as if you don't know that it's not intentionally like that. (For anyone who doesn't know: It's a limitation with Stash's permission system, it was not a choice to not make them publicly visible)\n\nAnd I am sure most relevant people have access anyways...",
      "> > > I see. Kinda sad that wasn't put forward on the original PR :S\r\n> > \r\n> > \r\n> > thats what happens if you close PRs to the public 🤷\r\n> \r\n> Don't say it as if you don't know that it's not intentionally like that. (For anyone who doesn't know: It's a limitation with Stash's permission system, it was not a choice to not make them publicly visible)\r\n> \r\n> And I am sure most relevant people have access anyways...\r\n\r\nI always have and always will disagree with that argument. Any organization on github (which has the same limitation) that enforces CLAs just has a bot to check CLAs\r\n\r\nbut this is offtopic"
    ],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#9953)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n96340858 PR-938: Various Sound API improvements\r\ncbfe0ff0 PR-937: Minor improvements to World#rayTrace documentation\r\ne979ee95 PR-935: Change Consumer and Predicates to super\r\n27ae46dc SPIGOT-3641, SPIGOT-7479, PR-931: Add missing values to EntityEffect\r\n0616ec8b Add eclipse .factorypath file to .gitignore\r\n\r\nCraftBukkit Changes:\r\n8e162d008 PR-1301: Various Sound API improvements\r\neeb7dfc2d SPIGOT-7520: Attribute LootTableSeed missing for generated containers with attached LootTable\r\nd433f086d PR-1297: Change Consumer and Predicates to super\r\n864f616da SPIGOT-7518: Fix NullPointerException when calling Block#applyBoneMeal()\r\n5a2d905af Add eclipse .factorypath file to .gitignore\r\n7c6bf15d4 Fix SkullMeta configuration serialization / deserialization with note block sound\r\n\r\nSpigot Changes:\r\n7de1049b Rebuild patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a330d9087c4d6d3763ee",
    "number": 9951,
    "body": "This pull request adds the FluidState API started by MachineMaker in PR #8609.\r\nIt adds everything in the PR's todo list. I tested the methods and they returned everything correctly. I don't really know what more I could say. Feel free to ask any questions!",
    "head_branch": "FluidState-API",
    "is_a_fork": true,
    "comments": [
      "> Also where did the methods on the BlockState go that the original PR had?\r\n\r\nOwen said on [Discord](https://discord.com/channels/289587909051416579/925530366192779286/1135657985205620836) that we probably shouldn't couple liquid with blocks. That's the main reason for the fact it's not there. I could still add it tho. If do add it, should I make it a new patch or edit the existing one?",
      "> Owen said on [Discord](https://discord.com/channels/289587909051416579/925530366192779286/1135657985205620836) that we probably shouldn't couple liquid with blocks. That's the main reason for the fact it's not there. I could still add it tho. If do add it, should I make it a new patch or edit the existing one?\r\n\r\nIf Owen said that you can leave it like it currently is, he is more knowledgeable around this stuff after all.",
      "> you're sort of mashing the BlockData concept of being \"wordless\" and BlockStates \"world\" idea.\r\nSince you're introducing methods that require a world, but also some that don't.\r\n\r\nSo should I do methods that require a world or not? I would say they don't require a world since you get the FluidData from the World.\r\n",
      "(Continuing on my previous comment)\r\nThe thing is that some methods in `FluidState` just don't need a Level and position like `getAmount` and `getHeight` since it can just read it from the block properties (you know, the data you can see when looking at a fluid with F3). `getFlowDirection` really is just the only one that needs a position and level"
    ],
    "commit_messages": [
      "FluidState API (#9951)\n\n* Add new FluidState API functionality\r\n---------\r\n\r\nCo-authored-by: Bjarne Koll <lynxplay101@gmail.com>\r\nCo-authored-by: Owen1212055 <23108066+Owen1212055@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a331d9087c4d6d3763ef",
    "number": 9949,
    "body": "closes #9919 \r\ncloses #7702\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9949.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/1272216023.zip)",
    "head_branch": "fix-inventory-desync",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a332d9087c4d6d3763f0",
    "number": 9948,
    "body": "The existing EntityPickupItemEvent fixes patch moves the call to LivingEntity#onItemPickup for piglins after the respective EntityPickupItemEvent calls, which is correct.\r\nHowever the patch moved the call so far down the line that the existing logic already mutated the picked up item entity, leading to faulty state being passed to the onItemPickup method.\r\n\r\nTo prevent logic in LivingEntity#onItemPickup to read from an ItemEntity that was already mutated, this commit moves the calls prior to the two respective mutations (either gold_nugget or rest).\r\n\r\nThis was chosen above taking a copy of the original item and restoring state later on to avoid a full item stack clone.\r\n\r\nResolves: #9947",
    "head_branch": "bugfix/incorrect-piglin-pickup-item",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Call LivingEntity#onItemPickup before mutation (#9948)\n\nThe existing EntityPickupItemEvent fixes patch moves the call to LivingEntity#onItemPickup for piglins after the respective EntityPickupItemEvent calls, which is correct.\r\nHowever the patch moved the call so far down the line that the existing logic already mutated the picked up item entity, leading to faulty state being passed to the onItemPickup method.\r\n\r\nTo prevent logic in LivingEntity#onItemPickup to read from an ItemEntity that was already mutated, this commit moves the calls prior to the two respective mutations (either gold_nugget or rest).\r\n\r\nThis was chosen above taking a copy of the original item and restoring state later on to avoid a full item stack clone."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a333d9087c4d6d3763f1",
    "number": 9946,
    "body": "TL;DR - 1.19.3 broke Paper's behaviour tick rate settings, this restores the settings' pre-1.19.3 functionality\r\n\r\nSome entity AI behaviours were changed in 1.19.3 from having their own classes to becoming instances of the `OneShot `behaviour, including `ValidateNearbyPoi`. This caused the tick rate options to stop working for those behaviours, as the options use the class names as config keys.\r\n\r\nThis PR re-adds tick rate option support for the behaviours that were affected by the update.\r\n\r\nAll `OneShot` behaviours are created by a call to the `BehaviorBuilder.create()` method, which happens in a static method in that behaviour's class, for example `ValidateNearbyPoi`:\r\n\r\n```java\r\npublic class ValidateNearbyPoi {\r\n    private static final int MAX_DISTANCE = 16;\r\n\r\n    public static BehaviorControl<LivingEntity> create(Predicate<Holder<PoiType>> poiTypePredicate, MemoryModuleType<GlobalPos> poiPosModule) {\r\n        return BehaviorBuilder.create((context) -> {\r\n            // stuff\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nTo get the config key for all the `OneShot` behaviours, I've modified the `BehaviorBuilder.create()` method to grab the calling class of the method from the stack trace, which is then used as the config key. In the case of the snippet above, that would be the `ValidateNearbyPoi` class. This maintains compatibility with configs before 1.19.3. Kind of an ugly way of doing it, not sure if I'm missing an easier way.\r\n\r\nFixes #9925",
    "head_branch": "behaviour-tick-rate",
    "is_a_fork": true,
    "comments": [
      "Near duplicate of #9946 unless I am understanding the diff wrong, just implemented on a different layer ? ",
      "I could be reading #9916 wrong, but I think it is adding another setting to let you rate limit behaviours that require certain memories: jobsite, bed location, meeting point, etc. As any number of behaviours can depend on a given memory, this would rate limit a large of number of behaviours.\r\n\r\nThis PR just restores the pre-1.19.3 functionality of the existing behaviour rate limit settings, which let you rate limit individual behaviours",
      "Hmmm, possibly a nicer solution then. I mean the other PR just rate limits the try trigger on the pure memory rather than the consuming behaviour.\n\nI'll have a longer look over this once home 👍 the mobile diff viewer isn't particularly great ",
      "Rebased for 1.20.4"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a334d9087c4d6d3763f2",
    "number": 9944,
    "body": null,
    "head_branch": "typo",
    "is_a_fork": true,
    "comments": [
      "the me serwer minecraft \r\n"
    ],
    "commit_messages": [
      "Correct typo in javadoc (#9944)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a335d9087c4d6d3763f3",
    "number": 9941,
    "body": "Fixes MC-172801\r\n\r\nThis patch properly applies the generic.flying_speed attribute to bees and parrots. If entities do not have this attribute, they are unaffected. The flying_speed attribute is multiplied by 0.049999999254942 in order to have bees and parrots with the default value of flying_speed be unaffected, having the vanilla 0.02 value.\r\n\r\nCloses #9827 ",
    "head_branch": "fix-mc-172801",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a336d9087c4d6d3763f4",
    "number": 9940,
    "body": "Fixes MC-172801\r\n\r\nThis patch properly applies the generic.flying_speed attribute to bees and parrots. If entities do not have this attribute, they are unaffected. The flying_speed attribute is multiplied by 0.049999999254942 in order to have bees and parrots with the default value of flying_speed be unaffected, having the vanilla 0.02 value.\r\n\r\nCloses #9827",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a337d9087c4d6d3763f5",
    "number": 9939,
    "body": "Also reformats any patches that had incorrect Consumer and Predicate params to follow a better codestyle. Eventually we are going to want to do this to the whole API, when we have upstream in source in repo, but for API that we add, we want it to be a part of the patch so we don't clutter up the git history any more than needed.",
    "head_branch": "fix/use-super",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use ? super in Consumer/Predicate API (#9939)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a338d9087c4d6d3763f6",
    "number": 9938,
    "body": "Tackles some TODOs for the paper config stuff.\r\n\r\nAlso adds a warning and error message if a newer config version was found signaling a downgrade. Hopefully this will reduce the number of people asking about this.",
    "head_branch": "refactor/paper-config",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "More paper config cleanup (#9938)\n\nAlso adds a warning and error message if a newer config version\r\nwas found signaling a downgrade."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a339d9087c4d6d3763f7",
    "number": 9937,
    "body": "Previously a plugin couldn't cancel or modify an entity-teleport of another plugin.",
    "head_branch": "fix/no-api-teleport-event",
    "is_a_fork": true,
    "comments": [
      "Generally calling events in api methods is a bit iffy?",
      "Teleporting players through API also causes an event to be called. Adding an event here is the only way to prevent other plugins from moving an entity, other than teleporting it back every tick if it moved.",
      "If the event should get added for this method, I just want to add that this should then get merged into the patch where this method was added without the surrounding paper comments",
      "> If the event should get added for this method, I just want to add that this should then get merged into the patch where this method was added without the surrounding paper comments\r\n\r\nWhich patch are you referring to? The \"More Teleport API\" patch is modifying this method, but the initial method is from CraftBukkit/Spigot.",
      "~~If I am not mistaken this is the teleport method taking optional teleport flags as arguments, and that method has been added by the \"More Teleport API\" patch~~\r\n\r\nIt is not an entirely new method, but it should reside in that patch anyway. But calling events for API calls is indeed iffy, because this would call the event for all API teleports now, but before it didn't.",
      "Hmmm. Yes, its not the best solution, especially as there is currently no teleport cause at all for entities.",
      "In the future this event could be added onto through the teleport API addition patch.",
      "This appears to prevent Asynchronously teleporting entities without an error being printed in console, is this intended or an unforeseen side effect?",
      "> This appears to prevent Asynchronously teleporting entities without an error being printed in console, is this intended or an unforeseen side effect?\r\n\r\nUsing our API or through NMS? Async teleportation that you may be doing here is not supported, but please show stacktrace.",
      "> > This appears to prevent Asynchronously teleporting entities without an error being printed in console, is this intended or an unforeseen side effect?\r\n> \r\n> Using our API or through NMS? Async teleportation that you may be doing here is not supported, but please show stacktrace.\r\n\r\n\r\nthank you for your reply, this is no longer an issue, I appreciate you taking your time to reply to me",
      "This new event call without a cause in the event is really an problem. Now it is not possible to allow plugin based teleports while disabling natural teleports without doing a stack walk.."
    ],
    "commit_messages": [
      "Fix missing event call for entity teleport API (#9937)\n\n* Fix missing event call for entity teleport API\r\n\r\nPreviously a plugin couldn't cancel or modify an entity-teleport from another plugin.\r\n\r\n* rebase"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a33ad9087c4d6d3763f8",
    "number": 9935,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/9930\r\n\r\nIssue here is that we run the chat decorator on the chat executor, but the callback should be ran on the correct thread, chat when its a player, main otherwise. Using the chat TaskChainer facilitates that.",
    "head_branch": "fix/async-chat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Run the chat callback on the main thread as expected (#9935)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a33bd9087c4d6d3763f9",
    "number": 9934,
    "body": "Hugely jank, we need to prolly remove those methods asap.",
    "head_branch": "fix-stew-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Mushroom cow stew api (#9934)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a33cd9087c4d6d3763fa",
    "number": 9929,
    "body": "The hand was previously only specified when casting the fishing rod. This is useful for plugins which may want to modify the fishing rod item when reeling in.",
    "head_branch": "feat/more-fish-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add hand to fish event for all player interactions (#9929)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a33dd9087c4d6d3763fb",
    "number": 9924,
    "body": "Adds a `getModifier(UUID)` method to `AttributeInstance` to get an attribute modifier using its `UUID`.\r\n\r\nQuestion: Should I merge this diff into the transient modifier patches?",
    "head_branch": "add-get-modifier",
    "is_a_fork": true,
    "comments": [
      "Is it worth exposing the full map somehow? Like an immutable copy of the UUID, AttributeModifier map in the nms AttributeInstance? That would provide more functionality, including getting the modifier by the UUID. \r\n\r\nBut if its not useful since there is already a method to get all the modifiers, then we don't need it.",
      "Added an additional `AttributeInstance#removeModifier(UUID)` method. As for exposing the full map as an immutable copy, I'm not sure how useful it'd be, especially since you can just get a modifier's UUID from the modifier itself.",
      "I'm just remembering that there are 2 kinds of modifiers, the transient and permanent ones. Do we need to do anything special to handle that with this? Currently the `removeModifier` method will remove either (since they still have to have unique UUIDs).",
      "Don't really see the need to distinguish? It's only 'permanent' in the sense that it gets saved, and removal shouldn't be affected by that."
    ],
    "commit_messages": [
      "Add API to retrieve an attribute modifier from a UUID (#9924)\n\n* Add attribute modifier from UUID API\r\n\r\n* Add method to remove by UUID\r\n\r\n* Add overload for UnmodifiableAttributeInstance, better precondition messages\r\n\r\n* rebase"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a33fd9087c4d6d3763fc",
    "number": 9922,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nfde5602a PR-927: Add PlayerRecipeBookSettingsChangeEvent\r\n949ff217 PR-930: Add methods to get/set evoker fang attack delay\r\nf6f7c79d SPIGOT-7514, PR-929: Add \"Enchantment Roll\" API to enchant items according to Minecraft mechanics\r\nd40e22da PR-712: Add API to get full result of crafting items\r\n\r\nCraftBukkit Changes:\r\nc8feb0629 PR-1291: Improve precondition message in Entity#playEffect\r\n482c56a00 PR-1285: Add PlayerRecipeBookSettingsChangeEvent\r\ncdf798800 PR-1290: Add methods to get/set evoker fang attack delay\r\n2c1b5f78f SPIGOT-7514, PR-1289: Add \"Enchantment Roll\" API to enchant items according to Minecraft mechanics\r\n6aa644ae9 PR-992: Add API to get full result of crafting items\r\nffb1319bc PR-1287: Fix scoreboards not updating in Player#setStatistic",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#9922)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nfde5602a PR-927: Add PlayerRecipeBookSettingsChangeEvent\r\n949ff217 PR-930: Add methods to get/set evoker fang attack delay\r\nf6f7c79d SPIGOT-7514, PR-929: Add \"Enchantment Roll\" API to enchant items according to Minecraft mechanics\r\nd40e22da PR-712: Add API to get full result of crafting items\r\n\r\nCraftBukkit Changes:\r\nc8feb0629 PR-1291: Improve precondition message in Entity#playEffect\r\n482c56a00 PR-1285: Add PlayerRecipeBookSettingsChangeEvent\r\ncdf798800 PR-1290: Add methods to get/set evoker fang attack delay\r\n2c1b5f78f SPIGOT-7514, PR-1289: Add \"Enchantment Roll\" API to enchant items according to Minecraft mechanics\r\n6aa644ae9 PR-992: Add API to get full result of crafting items\r\nffb1319bc PR-1287: Fix scoreboards not updating in Player#setStatistic"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a340d9087c4d6d3763fd",
    "number": 9921,
    "body": "Chunk Statuses are a wily thing, but it is nice to know when the state of one changes for concept like lazy-loading, etc.\r\n\r\nI'm not sure this event should ever be anything other than read-only but this basic version has worked well for me for awhile.",
    "head_branch": "chunkstatuschangeevent",
    "is_a_fork": true,
    "comments": [
      "The event is fired incorrectly. The chunk system changes the chunk status incrementally, and carefully handles concurrent requests to lower it. It is possible that the overall result of the operation is to lower the status, even if initially it was requested to be higher. You can see this by how the function `updateCurrentState` works.\r\n\r\nYou should look more carefully at the operations done in each status change to determine where to place the event. In general this area of code is the worst part of the chunk system and needs to be refactored, so it may not be possible to actually place an event in there without causing issues.",
      "> The event is fired incorrectly. The chunk system changes the chunk status incrementally, and carefully handles concurrent requests to lower it. It is possible that the overall result of the operation is to lower the status, even if initially it was requested to be higher. You can see this by how the function `updateCurrentState` works.\r\n> \r\n> You should look more carefully at the operations done in each status change to determine where to place the event. In general this area of code is the worst part of the chunk system and needs to be refactored, so it may not be possible to actually place an event in there without causing issues.\r\n\r\nI do see lower in `handleFullStatusChange()` that `nextState` is captured for subsequent potential status changes. Might be sufficient to just lower the event to after that that `nextState.isOrAfter(currState)` check? `nextState` isn't even used in that method otherwise...",
      "Hello, does any change are needed for this before being merged ? If yes, i can take time to do it. "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a341d9087c4d6d3763fe",
    "number": 9918,
    "body": "Fixed by 23w44a/1.20.3\r\nfixes https://github.com/PaperMC/Paper/issues/9917",
    "head_branch": "fix/te-loottable-npe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't unpack loot table for TEs not in world (#9918)\n\nFixed by 23w44a/1.20.3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a342d9087c4d6d3763ff",
    "number": 9916,
    "body": "This setting will help limit the tick rate of OneShot entity tasks because \"tick-rate.behaviour\" does not limit OneShot tasks.\r\n\r\nI did this because players were creating villager farms and the existing settings were not helping me at all:\r\n![img](https://github.com/PaperMC/Paper/assets/78062896/37368824-b6a1-433a-85a5-00c51537ab3a)\r\n",
    "head_branch": "configurable-memory-condition-tick-rate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a343d9087c4d6d376400",
    "number": 9913,
    "body": null,
    "head_branch": "improve-sysoutcatcher",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a344d9087c4d6d376401",
    "number": 9910,
    "body": "supersedes #9831 \r\nThis implements the HiddenPotionEffect API that Machine proposed on Discord voice chat. This didn't seem like it would fit any existing patch so i created new ones\r\ncloses #9811 ",
    "head_branch": "add-HiddenPotionEffect-API",
    "is_a_fork": true,
    "comments": [
      "currently when creating a new PotionEffect that has a hidden PotionEffect and adding that to a PotionMeta the hidden effect won't get added to the PotionMeta cause afaik there is no NBT for hidden effects or anything like that on a Potion. I don't think documenting this is sufficient. Perhaps just adding the hidden effects (if there are any) as normal custom effects to the PotionMeta is a solution? Please leave some feedback on this"
    ],
    "commit_messages": [
      "Add HiddenPotionEffect API (#9910)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a345d9087c4d6d376402",
    "number": 9909,
    "body": "This fix an issue with the egg throw sound being played twice (slightly noticeable with the volume of the sound compared to other projectile) and the enderpearl that didn't reset its cooldown clientside when the PlayerLaunchProjectileEvent is cancelled.",
    "head_branch": "fix/projsound",
    "is_a_fork": true,
    "comments": [
      "In all the cases where the launch projectile event is fired... shouldn't we uncomment the `user.awardStat(Stats.ITEM_USED.get(this));` line at the bottom and remove the one wee add? It still would be correct and less vanilla diff. The only thing we would need to handle above was the itemstack shrink. You could also just leave that at the bottom if you added a new boolean at the top that determined if the stack should shrink. I think that is cleaner.\r\n\r\nAlso, for `EggItem` specifically, we can leave the playSound at the bottom too since that will fire after the event anyways."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a346d9087c4d6d376403",
    "number": 9908,
    "body": "The drown damage is already dealt in another method even for unaware mobs, i guess previously it was dealt in that same method causing the return to break that.",
    "head_branch": "fix/drownaware",
    "is_a_fork": true,
    "comments": [
      "To clarify, this is actually the damage that water sensitive mobs take when exposed to water. So its not caused by \"drowning\" despite what the damage cause is. It's for like blazes and snow golems."
    ],
    "commit_messages": [
      "Remove duplicate water-sensitivity damage for unaware mobs (#9908)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a347d9087c4d6d376404",
    "number": 9907,
    "body": "9/10 times the class name will be in the stacktrace when this happens, but I figured it would be useful to also include it in the error message itself, as it currently only mentions the packet's id",
    "head_branch": "feat/encoding-error-class-name",
    "is_a_fork": true,
    "comments": [
      "I moved the change into the patch that adds the ObfHelper so its not completely out-of-order."
    ],
    "commit_messages": [
      "Include packet class name in packet encoding error messages (#9907)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a348d9087c4d6d376405",
    "number": 9905,
    "body": "\"technically\" a breaking API change but those fields were added by paper and shouldn't be used by a plugin anyways so I think its find to just remove them.\r\n\r\nThere are 3 uses of the move event, I only replaced 2 of them with the server impl of the event. The 3rd is for droppers and doesn't make use of the extra booleans Paper adds.",
    "head_branch": "refactor/hopper-event-server-impl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use a server impl for hopper event to track get/setItem calls (#9905)\n\n* Use a server impl for hopper event to track getItem/setItem calls\r\n\r\n* Rebase\r\n\r\n* Comments"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a349d9087c4d6d376406",
    "number": 9902,
    "body": null,
    "head_branch": "update-tiny-remapper",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Bump tiny-remapper for Java 21 support (#9902)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a34ad9087c4d6d376407",
    "number": 9901,
    "body": "resolves #9363 \r\nThis allows to completely change if the AreaEffectCloud gets created, not only force it getting created\r\nnot sure if how i implemented this is good i am hoping for some feedback. i think the method names and jdocs are gonna need some work so i am definitely also waiting on feedback for that. ",
    "head_branch": "improve-LingeringPotionSplashEvent",
    "is_a_fork": true,
    "comments": [
      "I hope the method name is fine "
    ],
    "commit_messages": [
      "Add more API to LingeringPotionSplashEvent (#9901)\n\n* Add createAreaEffectCloud API\r\n\r\n* Add missing NotNull\r\n\r\n* Add missing Paper comments\r\n\r\n* Better solution\r\n\r\n* Better naming\r\n\r\n* New patch and rename\r\n\r\n* rename patch"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a34bd9087c4d6d376408",
    "number": 9899,
    "body": "resolves #9260 \r\ndecided to deprecate the spigot method since it doesn't check if the player is gliding while papers already does that check for you.\r\nspigots method name is also kinda misleading since you could think it also gives you some kind of a boost on the ground. i mean they state in jdocs that its only going to work if the player is using the elytra but meh. ",
    "head_branch": "deprecate-fireworkBoost",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Deprecate Player#boostElytra (#9899)\n\nThe Paper method was chosen for deprecation because it was more\r\nrestrictive in that it has an isGliding check."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a34cd9087c4d6d376409",
    "number": 9898,
    "body": "This is a small pull request adding an event that gets called whenever a player brushes a block.\r\nCloses #9774",
    "head_branch": "PlayerBrushBlockEvent",
    "is_a_fork": true,
    "comments": [
      "Welcome to paper :wave: thank you for your first PR!\r\n\r\nI am a tad unsure if your current implementation does actually fix the related issue.\r\nRight now, this mostly looks like an event that is pretty much just a duplicate of the PlayerInteractEvent.\r\n\r\nIf I interpret the issue correctly, the event should be called when the player is basically done brushing the block instead of the start of the brushing process.",
      "> Welcome to paper 👋 thank you for your first PR!\r\n\r\nThanks, but this isn't my first PR, have some old ones I have to clean up some day\r\n\r\n> If I interpret the issue correctly, the event should be called when the player is basically done brushing the block instead of the start of the brushing process.\r\n\r\nYeah, my bad, sorry, the event will no longer be cancel-able though, however, then, I can expose the dropped itemstack ",
      "Ah sorry, just saw \"first time contributor\" :sweat: \r\nI mean, plugins can infer a not cancelled \"PlayerBrushBlockEvent\" that is called exactly how the issue describes it (cancellable, does not expose item drops) and the following BlockDropItem event stuff.",
      "As a follow up, warrior suggested internally that maybe an event called each time the block is \"partially\" brushed in the BrushItem useOnTick method would be useful.\r\n\r\nWould work both as a \"player starts brushing\" and a progress event to do stuff with.",
      "> As a follow up, warrior suggested internally that maybe an event called each time the block is \"partially\" brushed in the BrushItem useOnTick method would be useful.\r\n\r\nWhat would be the use of that? The server cannot stop the client from showing the animation to my knowledge",
      "I'm sorry for this force push mess, had quite some trouble reverting my changes to the decompile-fixes patch... I'll squash the PR a final time soon",
      "No worries, we squash on merge xD Go wild with the commits.\r\nI mean, I guess the \"per brush tick\" event is not really needed if brush would properly call events when it converts the block types to the \"more brushed\" state",
      "> I do not think this event is needed at all. You can accomplish the same things by listening to the BlockDropItemEvent which, contrary to the linked issue, is fired **before** the block is changed allowing you to change the dropped items.\r\n> \r\n> You can then just add a call to the EntityChangeBlockEvent before the blockstate is changed when the brushing is completed which you can cancel to prevent the brushable block from changing.\r\n\r\nIn my opinion, having control over this in a singular event is better than having to listen to these two, as then, finding out if they were triggered due to that same block, same player, same time would be slightly harder.\r\nAlso, couldn't a lot of events just be done plugin side using the PlayerInteractionEvent?\r\n\r\nAnyways, feel free to close this PR as \"won't add\" if you disagree with me :)",
      "Hey @chmodsayshello, we're going to close this PR for the reason Machine-Maker mentioned [above](https://github.com/PaperMC/Paper/pull/9898#pullrequestreview-1726114004). \r\nPlease join the [Discord](https://discord.com/invite/papermc) if you need any assistance with the API! "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a34dd9087c4d6d37640a",
    "number": 9897,
    "body": "Closes #9896",
    "head_branch": "fix-villager-infection-chance",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix villager infection chance not being handled properly (#9897)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a34fd9087c4d6d37640b",
    "number": 9895,
    "body": "MC-181190 was fixed in vanilla with 23w31a and the paper patch doesn't fix anything anymore.",
    "head_branch": "fix/remove-mc181190-option",
    "is_a_fork": true,
    "comments": [
      "I don't think we have to increment the config version and create a custom transformation to remove the old config. We have a big file full of config settings to remove. See `RemovedConfigurations` and add the correct path for the setting to that instead.",
      "> I don't think we have to increment the config version and create a custom transformation to remove the old config. We have a big file full of config settings to remove. See `RemovedConfigurations` and add the correct path for the setting to that instead.\r\n\r\nChanged, I didn't knew `RemovedConfiguations` existed :+1:",
      "Docs should be adjusted accordingly then too: https://github.com/PaperMC/docs/blob/main/docs/paper/admin/reference/configuration/world-configuration.mdx#L633-L636"
    ],
    "commit_messages": [
      "Remove \"fix-curing-zombie-villager-discount\" exploit option (#9895)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a350d9087c4d6d37640c",
    "number": 9893,
    "body": "Vanilla components were just converted to normal json strings without being translated by the `GlobalTranslator`. This caused custom name's of entities to no longer be translated properly after a server restart or an entity unload.\r\n\r\nThis does have a small performance cost, as all vanilla components (not backed by an adventure component) are now converted to an adventure component by serializing to json and deserializing from json again.\r\n\r\n<details>\r\n<summary>Test plugin diff</summary>\r\n\r\n```diff\r\nIndex: test-plugin/src/main/java/io/papermc/testplugin/TestPlugin.java\r\nIDEA additional info:\r\nSubsystem: com.intellij.openapi.diff.impl.patch.CharsetEP\r\n<+>UTF-8\r\n===================================================================\r\ndiff --git a/test-plugin/src/main/java/io/papermc/testplugin/TestPlugin.java b/test-plugin/src/main/java/io/papermc/testplugin/TestPlugin.java\r\n--- a/test-plugin/src/main/java/io/papermc/testplugin/TestPlugin.java\t(revision c71e79c2d56d2cd374995cbd5a5ac7c3d1fcf5b2)\r\n+++ b/test-plugin/src/main/java/io/papermc/testplugin/TestPlugin.java\t(date 1698715701243)\r\n@@ -1,5 +1,16 @@\r\n package io.papermc.testplugin;\r\n \r\n+import io.papermc.paper.event.player.AsyncChatEvent;\r\n+import java.text.MessageFormat;\r\n+import java.util.Locale;\r\n+import net.kyori.adventure.text.Component;\r\n+import net.kyori.adventure.translation.GlobalTranslator;\r\n+import net.kyori.adventure.translation.TranslationRegistry;\r\n+import org.bukkit.Bukkit;\r\n+import org.bukkit.Location;\r\n+import org.bukkit.NamespacedKey;\r\n+import org.bukkit.entity.ArmorStand;\r\n+import org.bukkit.event.EventHandler;\r\n import org.bukkit.event.Listener;\r\n import org.bukkit.plugin.java.JavaPlugin;\r\n \r\n@@ -8,5 +19,20 @@\r\n     @Override\r\n     public void onEnable() {\r\n         this.getServer().getPluginManager().registerEvents(this, this);\r\n+\r\n+        TranslationRegistry registry = TranslationRegistry.create(new NamespacedKey(this, \"i18n\"));\r\n+        registry.register(\"testplugin.armorstand\", Locale.ENGLISH, new MessageFormat(\"Success!\"));\r\n+        GlobalTranslator.translator().addSource(registry);\r\n+    }\r\n+\r\n+    @EventHandler\r\n+    public void onChat(AsyncChatEvent event) {\r\n+        Bukkit.getScheduler().runTask(this, () -> {\r\n+            Location spawnLoc = event.getPlayer().getLocation();\r\n+            spawnLoc.getWorld().spawn(spawnLoc, ArmorStand.class, armorStand -> {\r\n+                armorStand.setCustomNameVisible(true);\r\n+                armorStand.customName(Component.translatable(\"testplugin.armorstand\"));\r\n+            });\r\n+        });\r\n     }\r\n }\r\n\r\n```\r\n</details>",
    "head_branch": "fix/non-adventure-translations",
    "is_a_fork": true,
    "comments": [
      "I wonder if it's worth hooking into vanilla's serialization logic (gson in this version, codecs in the next version) and render the translatable components when serializing to json. That would avoid the double conversion.",
      "How would that work with adventure's translator? The adventure translator only accepts adventure components, not vanilla components or json.",
      "Well technically there is Translator's `MessageFormat translate(final @NotNull String key, final @NotNull Locale locale);`\r\nthat could be used, however that was recently expanded to also have a method that takes a TranslatableComponent.",
      "I was thinking along the lines of... if, while serializing a vanilla component, it encounters a translatable, it can only convert that component to adventure, render it, and then serialize it to json. That way, *most* components, or chunks of components avoid the double serialization",
      "I think I've now implemented your suggested solution to this problem. I've used a `ThreadLocal` to store the adventure locale, as the static gson serializer doesn't contain (or support) any context as far as I know. I'm open to suggestions on alternatives to store the locale.",
      "I think it can be even better. Can't we first check if the translation key exists in adventure's global translator? If it doesn't, do we need to bother running it through adventure's renderer? Maybe @kashike can weigh in on this if I'm missing some functionality of adventure's translation system.",
      "> I think it can be even better. Can't we first check if the translation key exists in adventure's global translator? If it doesn't, do we need to bother running it through adventure's renderer? Maybe @kashike can weigh in on this if I'm missing some functionality of adventure's translation system.\n\nI'm not sure this is possible. The adventure `Translator` interface accepts `TranslatableComponent`s or translation keys, but doesn't provide API for listing registered translation keys. A `TranslationRegistry` does have this information.",
      "Hmm yeah... I guess there isn't a way to know if it can be converted. \r\n\r\nThis might be as good as it gets then for now.",
      "I've rewritten this PR for 1.20.3/1.20.4. This now translates translatable components when encoding using the serialization codec. I don't have much experience in working with Codecs, so I don't know if there is a more optiomal spot for converting and translating the components.",
      "I've now removed the ThreadLocal and added a map with the translating codecs. I'm not quite sure how storing the direct codec would work, as I think children of components wouldn't be translated because its a recursive codec and we would only translate the component if the parent is also translatable.",
      "What you ended up doing is fine, it is probably just possible to not have to recreate the whole codec each time, and still retain the recursive nature of it. But idk how big a deal that is, not like its gonna be creating a zillion codecs anyways.",
      "<details>\r\n<summary>ComponentSerialization Diff</summary>\r\n\r\n``` patch\r\nIndex: src/main/java/net/minecraft/network/chat/ComponentSerialization.java\r\nIDEA additional info:\r\nSubsystem: com.intellij.openapi.diff.impl.patch.CharsetEP\r\n<+>UTF-8\r\n===================================================================\r\ndiff --git a/src/main/java/net/minecraft/network/chat/ComponentSerialization.java b/src/main/java/net/minecraft/network/chat/ComponentSerialization.java\r\n--- a/src/main/java/net/minecraft/network/chat/ComponentSerialization.java\t(revision 553d84e32f0649d97ac888f9a96c3f5d1d954c2c)\r\n+++ b/src/main/java/net/minecraft/network/chat/ComponentSerialization.java\t(date 1702305732428)\r\n@@ -32,6 +32,7 @@\r\n     });\r\n \r\n     // Paper start - adventure localization\r\n+    private static final Codec<Component> DIRECT_CODEC = ExtraCodecs.recursive(\"Component\", ComponentSerialization::createDirectCodec);\r\n     private static final java.util.Map<java.util.Locale, Codec<Component>> TRANSLATING_CODECS = new java.util.HashMap<>();\r\n \r\n     public static Codec<Component> getTranslatingCodec(@javax.annotation.Nullable java.util.Locale locale) {\r\n@@ -69,18 +70,23 @@\r\n         return ExtraCodecs.orCompressed(mapCodec3, mapCodec2);\r\n     }\r\n \r\n-    private static Codec<Component> createCodec(Codec<Component> selfCodec) {\r\n-        // Paper start - adventure localization\r\n-        return createCodec(selfCodec, null);\r\n-    }\r\n-\r\n-    private static Codec<Component> createCodec(Codec<Component> selfCodec, @javax.annotation.Nullable java.util.Locale locale) {\r\n-        // Paper end\r\n+    private static Codec<Component> createDirectCodec(Codec<Component> selfCodec) { // Paper - adventure localization\r\n         ComponentContents.Type<?>[] types = new ComponentContents.Type[]{PlainTextContents.TYPE, TranslatableContents.TYPE, KeybindContents.TYPE, ScoreContents.TYPE, SelectorContents.TYPE, NbtContents.TYPE};\r\n         MapCodec<ComponentContents> mapCodec = createLegacyComponentMatcher(types, ComponentContents.Type::codec, ComponentContents::type, \"type\");\r\n         Codec<Component> codec = RecordCodecBuilder.create((instance) -> {\r\n             return instance.group(mapCodec.forGetter(Component::getContents), ExtraCodecs.strictOptionalField(ExtraCodecs.nonEmptyList(selfCodec.listOf()), \"extra\", List.of()).forGetter(Component::getSiblings), Style.Serializer.MAP_CODEC.forGetter(Component::getStyle)).apply(instance, MutableComponent::new);\r\n         });\r\n+        // Paper start - adventure localization\r\n+        return codec;\r\n+    }\r\n+\r\n+    private static Codec<Component> createCodec(Codec<Component> selfCodec) {\r\n+        return createCodec(selfCodec, null);\r\n+    }\r\n+\r\n+    private static Codec<Component> createCodec(Codec<Component> selfCodec, final @javax.annotation.Nullable java.util.Locale locale) {\r\n+        final Codec<Component> codec = DIRECT_CODEC;\r\n+        // Paper end\r\n         return Codec.either(Codec.either(Codec.STRING, ExtraCodecs.nonEmptyList(selfCodec.listOf())), codec).xmap((either) -> {\r\n             return either.map((either2) -> {\r\n                 return either2.map(Component::literal, ComponentSerialization::createFromList);\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>TestPlugin Diff</summary>\r\n\r\n```diff\r\nIndex: test-plugin/src/main/java/io/papermc/testplugin/TestPlugin.java\r\nIDEA additional info:\r\nSubsystem: com.intellij.openapi.diff.impl.patch.CharsetEP\r\n<+>UTF-8\r\n===================================================================\r\ndiff --git a/test-plugin/src/main/java/io/papermc/testplugin/TestPlugin.java b/test-plugin/src/main/java/io/papermc/testplugin/TestPlugin.java\r\n--- a/test-plugin/src/main/java/io/papermc/testplugin/TestPlugin.java\t(revision 75d74272d91cc1b00a2e552d61b20a1d57cae799)\r\n+++ b/test-plugin/src/main/java/io/papermc/testplugin/TestPlugin.java\t(date 1702305590501)\r\n@@ -1,5 +1,16 @@\r\n package io.papermc.testplugin;\r\n \r\n+import io.papermc.paper.event.player.AsyncChatEvent;\r\n+import java.text.MessageFormat;\r\n+import java.util.Locale;\r\n+import net.kyori.adventure.text.Component;\r\n+import net.kyori.adventure.translation.GlobalTranslator;\r\n+import net.kyori.adventure.translation.TranslationRegistry;\r\n+import org.bukkit.Bukkit;\r\n+import org.bukkit.Location;\r\n+import org.bukkit.NamespacedKey;\r\n+import org.bukkit.entity.ArmorStand;\r\n+import org.bukkit.event.EventHandler;\r\n import org.bukkit.event.Listener;\r\n import org.bukkit.plugin.java.JavaPlugin;\r\n \r\n@@ -8,5 +19,28 @@\r\n     @Override\r\n     public void onEnable() {\r\n         this.getServer().getPluginManager().registerEvents(this, this);\r\n+\r\n+        TranslationRegistry registry = TranslationRegistry.create(new NamespacedKey(this, \"i18n\"));\r\n+        registry.register(\"testplugin.armorstand\", Locale.ENGLISH, new MessageFormat(\"Success! ({0})\"));\r\n+        registry.register(\"testplugin.armorstand.arg\", Locale.ENGLISH, new MessageFormat(\"Argument\"));\r\n+        GlobalTranslator.translator().addSource(registry);\r\n+    }\r\n+\r\n+    @EventHandler\r\n+    public void onChat(AsyncChatEvent event) {\r\n+        Bukkit.getScheduler().runTask(this, () -> {\r\n+            Location spawnLoc = event.getPlayer().getLocation();\r\n+            spawnLoc.getWorld().spawn(spawnLoc, ArmorStand.class, armorStand -> {\r\n+                armorStand.setCustomNameVisible(true);\r\n+                armorStand.customName(Component.translatable(\"testplugin.armorstand\",\r\n+                    Component.translatable(\"testplugin.armorstand.arg\")));\r\n+            });\r\n+            spawnLoc.add(5d, 0d, 0d);\r\n+            spawnLoc.getWorld().spawn(spawnLoc, ArmorStand.class, armorStand -> {\r\n+                armorStand.setCustomNameVisible(true);\r\n+                armorStand.customName(Component.text(\"Testing: \")\r\n+                    .append(Component.translatable(\"testplugin.armorstand.arg\")));\r\n+            });\r\n+        });\r\n     }\r\n }\r\n```\r\n\r\n</details>\r\n\r\nWith these changes, Components are now no longer translated recursively (as expected):\r\n![image](https://github.com/PaperMC/Paper/assets/53302036/8db2808c-c4b1-4fe0-875b-6be6d3994415)\r\n\r\nI'm not sure if recursive translation will be possible when saving the direct codec because of how recursive codecs work - or I've just messed something else up.",
      "> ComponentSerialization Diff\r\n> TestPlugin Diff\r\n> \r\n> With these changes, Components are now no longer translated recursively (as expected): ![image](https://private-user-images.githubusercontent.com/53302036/289573114-8db2808c-c4b1-4fe0-875b-6be6d3994415.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTEiLCJleHAiOjE3MDIzMzU5NTksIm5iZiI6MTcwMjMzNTY1OSwicGF0aCI6Ii81MzMwMjAzNi8yODk1NzMxMTQtOGRiMjgwOGMtYzRiMS00ZmUwLTg3NWItNmJlNmQzOTk0NDE1LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFJV05KWUFYNENTVkVINTNBJTJGMjAyMzEyMTElMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjMxMjExVDIzMDA1OVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWY5MWUwZGI2NTI1OWM0MDNjOWQxNGNlYWRhMzU3NjhiODk5MTc2YjI4YzE1N2M3NjUyZWYyMGY4NWViMWI5MzYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.shy91BxPp795aFsjtZOd3Zl8dxH95FxqsPsj71TssVY)\r\n> \r\n> I'm not sure if recursive translation will be possible when saving the direct codec because of how recursive codecs work - or I've just messed something else up.\r\n\r\nI think the current state of the PR is better than this, we do want children/arguments to be translated.",
      "Just a heads up that you probably want to wait until #10028 and #10014 are merged to make more changes, as they touch the same areas.",
      "This misses some cases where ComponentSerialization.CODEC is used directly instead of passing the self codec, like show_text hover events. Solving that is more complicated though, so I think it's fine to leave for later and not block this improvement.",
      "> This misses some cases where ComponentSerialization.CODEC is used directly instead of passing the self codec, like show_text hover events. Solving that is more complicated though, so I think it's fine to leave for later and not block this improvement.\r\n\r\nSolving this properly would probably require to re-create every codec requiring the Component codec for every locale. A quick workaround for this would be to just pass everything (which has show_text hover events, etc.) through the adventure codec.",
      "Yeah, both options there are not very pretty, which is why I think we should just leave it for when/if someone finds a use case that justifies it. The only thing I can think of would be translating datapack messages with a plugin, but that feels really niche, and if someone needs that to work they can open an issue."
    ],
    "commit_messages": [
      "Fix vanilla components not being translated (#9893)\n\n* Fix vanilla components not being translated\r\n\r\n* Add nullability check, simplify adventure component encoding\r\n\r\nChanges suggested by @jpenilla"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a351d9087c4d6d37640d",
    "number": 9891,
    "body": "While updating #9838 I've noticed that it wasn't possible to get the combined gene of a Panda using the API. This PR adds API to do this. I'm not too sure about the name of the method, vanilla just calls it \"variant\".",
    "head_branch": "feat/combined-panda-genes-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add entity API for getting the combined gene of a Panda (#9891)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a352d9087c4d6d37640e",
    "number": 9890,
    "body": null,
    "head_branch": "llama-events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a353d9087c4d6d37640f",
    "number": 9888,
    "body": "Sorry for opening a new pull request instead of using the previous one. I added the material tags I overlooked and instead of creating a new patch, edited a previous one. What do you think? I would still like to add some tests but might have to think about the implementation. ",
    "head_branch": "fix-enchantables",
    "is_a_fork": true,
    "comments": [
      "Added the changes.",
      "#9862 just so people looking at the issue know there is a pr for it"
    ],
    "commit_messages": [
      "Added missing enchantables to material tags (#9888)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a354d9087c4d6d376410",
    "number": 9887,
    "body": "If a playerdata doesn't contain a valid, loaded world, reset to the main world spawn point.\r\n\r\nThis also squashes 2 very related patches\r\n\r\nSupersedes https://github.com/PaperMC/Paper/pull/9116 but doesn't close the linked issue to that PR because I do think adding an event to control the target world is useful, but that will be in a PR after this one.",
    "head_branch": "fix/player-spawn-locations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix a bunch of stuff with player spawn locations (#9887)\n\nIf a playerdata doesn't contain a valid, loaded world, reset\r\nto the main world spawn point"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a355d9087c4d6d376411",
    "number": 9885,
    "body": "Upstream's commit [here](https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/75502b6ddcae5aa84b7e97fd02d2e1551afddebc#nms-patches/net/minecraft/server/players/PlayerList.patch) failed to account for the level not being set on the ServerPlayer if it doesn't point to a valid world. This adds a null check on the ServerLevel before getting the level key.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9885.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/1014594901.zip)",
    "head_branch": "fix/npe-legacy-players",
    "is_a_fork": true,
    "comments": [
      "So, part of the thing here is that spigot sets the default world to the overworld earlier if a world isn't loaded/found, which is likely what they're relying on here\r\n\r\nGiven that the OG issue that fixes is probably still a thing, this is probably the best fix as I don't think that we've had reports of the issue spigot is trying to fix?"
    ],
    "commit_messages": [
      "Fix NPE when no valid world is found on legacy Players (#9885)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a356d9087c4d6d376412",
    "number": 9884,
    "body": "This fixes players (which can't view the collector) seeing item pickups with themselves as the target, as the client defaults to themselves if the target entity can't be found.\r\n\r\nIssue is reproducible by testing with 2 accounts and hiding one from the other.\r\n\r\nWithout fix: https://github.com/PaperMC/Paper/assets/53302036/c24e9000-b893-48e9-9288-39f4a5b4fc84\r\nWith fix: https://github.com/PaperMC/Paper/assets/53302036/ff6bf87a-e089-4e60-8236-1d45df0190ad\r\n",
    "head_branch": "fix/item-pickup-viewing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Broadcast take item packets with collector as source (#9884)\n\nThis fixes players (which can't view the collector) seeing item pickups with themselves as the target."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a357d9087c4d6d376413",
    "number": 9883,
    "body": "Issue can be reproduced by cancelling all `PlayerStartSpectatingEntity` events and sneaking after trying to start spectating an entity.\r\n\r\n(btw 415d7081d2cdddba83b91a68cf2397ce95ac115b broke patching, I think the submodule-update wasn't intentional)",
    "head_branch": "fix/spectate-cancelling",
    "is_a_fork": true,
    "comments": [
      "I apparently had some random branch checked out before I pushed that commit, should be fixed now, derp"
    ],
    "commit_messages": [
      "Fix entity camera not being reset when cancelling spectating start/stop events (#9883)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a358d9087c4d6d376414",
    "number": 9880,
    "body": "I think this should do the trick. I also want to add some tests but I need some more familiarity with the structure of paper so might need some help there.",
    "head_branch": "fix-enchantable-brush",
    "is_a_fork": true,
    "comments": [
      "For starting the PR is good handle the main issue, also i recommed you try to edit the original patch where this Tags was added. you can check here https://github.com/PaperMC/Paper/blob/master/CONTRIBUTING.md#modifying-patches for know how to edit a patch.",
      "My original comment generally showcased that there was a bunch of stuff missing from the enchantables set which should also be added",
      "Oh I feel very silly, I felt like I was missing something obvious. I will have a look at these things tomorrow."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a359d9087c4d6d376415",
    "number": 9876,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n19830133 PR-925: Add hit entity/block to events extending ProjectileHitEvent\r\n\r\nCraftBukkit Changes:\r\n5a72c3c04 SPIGOT-7510: Try to fix broken reflection usage of plugins\r\n6fa69f235 PR-1281: Add hit entity/block to events extending ProjectileHitEvent\r\n224f733ac Fix NPE introduced in f4d977e\r\n\r\n----\r\n\r\nCloses https://github.com/PaperMC/Paper/issues/9875\r\nCloses https://github.com/PaperMC/Paper/issues/9873",
    "head_branch": "update-upstream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#9876)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n19830133 PR-925: Add hit entity/block to events extending ProjectileHitEvent\r\n\r\nCraftBukkit Changes:\r\n5a72c3c04 SPIGOT-7510: Try to fix broken reflection usage of plugins\r\n6fa69f235 PR-1281: Add hit entity/block to events extending ProjectileHitEvent\r\n224f733ac Fix NPE introduced in #f4d977e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a35ad9087c4d6d376416",
    "number": 9872,
    "body": "https://github.com/PaperMC/paperweight/pull/218",
    "head_branch": "paperweight-159",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update paperweight to 1.5.9 (#9872)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a35bd9087c4d6d376417",
    "number": 9871,
    "body": "gson returns null when given an empty string/file, this PR adds a null check so that an empty version history file doesn't crash the server",
    "head_branch": "fix/empty-ver-hist-crash",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix crash when version_history.json is empty (#9871)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a35cd9087c4d6d376418",
    "number": 9869,
    "body": null,
    "head_branch": "fix-null-equipment",
    "is_a_fork": true,
    "comments": [
      "Should i create a new paper patch instead of a bukkit fixup?",
      "This looks like its a new patch. \r\nFor now, don't use imports, but FQN instead.",
      "> This looks like its a new patch. For now, don't use imports, but FQN instead.\r\n\r\nAh sorry now that you mention it makes total sense as it would be annoying when resolving upstream conflicts"
    ],
    "commit_messages": [
      "Fix null item in sendEquipmentChange (#9869)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a35dd9087c4d6d376419",
    "number": 9868,
    "body": "Resolves: #9794 \r\n\r\nI'm not sure what to do about the patch number, don't know if it's fine as-is, or if it should be changed, so I just left it and let rebuildPatches handle it.\r\n\r\nTested it, and it seems to be working just fine!",
    "head_branch": "readd-0414-Use-distance-map-to-optimise-entity-tracker",
    "is_a_fork": true,
    "comments": [
      "I tried it and it works well.",
      "We are using this patch on our servers for a few days now and I could not find any issues. And the performance is much better.",
      "I'm currently dead, but, if this can be rebased I'll slap the button",
      "Should be rebased (first time doing a rebase, so let's hope it worked)",
      "and slapped, ty\r\n"
    ],
    "commit_messages": [
      "Readd 0414 use distance map to optimise entity tracker (#9868)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a35ed9087c4d6d37641a",
    "number": 9865,
    "body": "this allows for simpler checks for if an advancement would be given to a player, \r\nand denying it (as the advancement grant event is non-cancelable)\r\n\r\n# feedback wanted:\r\n\r\n- [x] is it ok to rename the patch from just `PlayerAdvancementCriterionGrantEvent`?\r\n- [ ] is it worth adding this to api at all?\r\n\r\n# alternatives:\r\n- `event.getPlayer().getAdvancementProgress(event.getAdvancement()).isDone();`\r\n- providing just a subset of advancement progress (isDone, like it was originally)",
    "head_branch": "the456gamer-improve-criteriongrantevent",
    "is_a_fork": true,
    "comments": [
      "oh oops",
      "woops lol. not exaclty sure what happened here but seems to me that you didn't rebase correctly: https://github.com/PaperMC/Paper/blob/master/CONTRIBUTING.md#rebasing-prs "
    ],
    "commit_messages": [
      "add getAdvancementProgress() to PlayerAdvancementCriterionGrantEvent (#9865)\n\nthis allows for simpler checks for if an advancement would be given to a player,\r\nand denying it (as the advancement grant event is non-cancelable)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a35fd9087c4d6d37641b",
    "number": 9864,
    "body": "Fixes LivingEntity#getPotionEffect and LivingEntity#getActivePotionEffects not passing the icon flag in the PotionEffect ctor",
    "head_branch": "fix-incorrect-hasIcon",
    "is_a_fork": true,
    "comments": [
      "Not sure if i should have also added a variable cause adding paper comments around those two lines just seemed kinda ugly. Let me know what you think",
      "should be all now (i hope)",
      "not sure if i did this correctly that modifying was confusing. Could you look over that?"
    ],
    "commit_messages": [
      "Fix PotionAPI ignores icon flag (#9864)\n\n* fix PotionAPI ignores icon flag\r\n\r\n* also fix CraftPotionUtil#toBukkit\r\n\r\n* also CraftPotionUtil#fromBukkit\r\n\r\n* use CraftPotionUtil"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a360d9087c4d6d37641c",
    "number": 9863,
    "body": "Rewrite the CustomPayload handler using Mojang mechanism\r\nhttps://github.com/PaperMC/Paper/pull/9861#issuecomment-1774357124\r\n\r\n```java\r\npublic final class TestPlugin extends JavaPlugin implements Listener, PluginMessageListener {\r\n\r\n    @Override\r\n    public void onEnable() {\r\n        this.getServer().getPluginManager().registerEvents(this, this);\r\n        this.getServer().getMessenger().registerIncomingPluginChannel(this, \"minecraft:brand\", this);\r\n    }\r\n\r\n    @Override\r\n    public void onPluginMessageReceived(@NotNull String channel, @NotNull Player player, byte[] msg) {\r\n        // Brand Test\r\n        final String spigotMethod = new String(msg, StandardCharsets.UTF_8).substring(1);\r\n        this.getSLF4JLogger().info(\"Spigot Method: [{}]\", spigotMethod);\r\n        this.getSLF4JLogger().info(\"Paper API: [{}]\", player.getClientBrandName());\r\n    }\r\n\r\n    @EventHandler\r\n    void onPlayerRegisterChannel(final PlayerRegisterChannelEvent event) {\r\n        this.getSLF4JLogger().info(\"Register Channel: [{}]\", event.getChannel());\r\n    }\r\n\r\n    @EventHandler\r\n    void onPlayerUnregisterChannel(final PlayerUnregisterChannelEvent event) {\r\n        this.getSLF4JLogger().info(\"Unregister Channel: [{}]\", event.getChannel());\r\n    }\r\n}\r\n```",
    "head_branch": "rewrite-payload-handler",
    "is_a_fork": true,
    "comments": [
      "I don't think that we need to move the handling stuff over is needed, just moreso the fact that it retains the OG buffer and then we can pass that through, but, I generally have nothing against this, it just doesn't retain the buffer as was desired, as then that can be passed to stuff\r\n\r\npost that, we can generally look into the state of the plugin messaging API"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a361d9087c4d6d37641d",
    "number": 9861,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n5010ed00 PR-923: Back Particle by a minecraft registry\r\nd47dd212 Increase clarity of errors when loading malformed plugin main classes\r\n2c3c3337 PR-914: Make use of ApiStatus.Internal reather than deprecation\r\n2b4c3b46 PR-922: Add keepSpawnInMemory setting to WorldCreator\r\n\r\nCraftBukkit Changes:\r\n75502b6dd SPIGOT-7507: Fall back to world UUIDs if Dimension tag missing or invalid\r\n67a52a648 PR-1279: Back Particle by a minecraft registry\r\nf4d977e79 Simplify texture updating in CraftMetaSkull\r\ne42510b06 Increase outdated build delay\r\nf3ad63aad SPIGOT-7506: SculkBloomEvent.getBlock() world is null\r\nb59004114 PR-1278: Return correct default light in chunk snapshot\r\n2a381856b SPIGOT-7503: Remove special handling for minecraft:brand custom channel\r\n2fa7644d0 PR-1277: Add keepSpawnInMemory setting to WorldCreator\r\n\r\nSpigot Changes:\r\ndba3cdc3 Rebuild patches",
    "head_branch": "update-upstream",
    "is_a_fork": false,
    "comments": [
      "Long term, I would much rather we actually properly accommodate Mojangs mechanism around their custom types, rather than relying on yet another botch job, lest it bites us in the ass as per usual;"
    ],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#9861)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a363d9087c4d6d37641e",
    "number": 9860,
    "body": "This message when advancements are removed was added in 1.20.2. It doesn't provide anything useful and spams the console when removing advancements.",
    "head_branch": "advancement-log",
    "is_a_fork": true,
    "comments": [
      "Would probably fit nicely into 0901-Improve-logging-and-errors.patch. That patch already has removal of unneeded logs."
    ],
    "commit_messages": [
      "Fix log level of advancement debug message (#9860)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a364d9087c4d6d37641f",
    "number": 9858,
    "body": "EntityEvent 2 was previously used to show damage effects. This is no longer used in modern clients.\r\n+Fixes the issue of damage sounds not playing when the option is enabled.",
    "head_branch": "cleanup-patch",
    "is_a_fork": true,
    "comments": [
      "I'm curious what this bit of diff was supposed to do originally? On the surface, it doesn't look like it has anything to do with knockback. \r\n\r\nI did confirm that this change does change behavior back to what it was during 1.18.2.",
      "This diff was created in Paper 1.9. It's unrelated to knockback.\r\n\r\nHowever, in Paper 1.8, it was actually used to [disable knockback](https://github.com/PaperMC/Paper/blob/ver/1.8.8/Spigot-Server-Patches/0055-Disable-explosion-knockback.patch#L18-L22).\r\n\r\n\r\n![spigot 1.8](https://github.com/PaperMC/Paper/assets/45729082/e73650d8-4eef-4086-956b-8ee85e6d5809)\r\n"
    ],
    "commit_messages": [
      "Cleanup disable explosion knockback patch (#9858)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a365d9087c4d6d376420",
    "number": 9857,
    "body": "Closes #9855 \r\nThis fix a NPE related to the block in SculkBloomEvent. I'm aware that spigot \"fixed\" this issue however it doesn't work because they forgot that the world of a block entity is set after its instance creation.",
    "head_branch": "fix/npesculk",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix NPE in SculkBloomEvent world access (#9857)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a366d9087c4d6d376421",
    "number": 9856,
    "body": "Cost is a property of individual enchantments, and is used by vanilla in combination with environmental aspects like tool enchantability and bookshelf count to determine the final cost of an enchantment as shown in an enchanting table.\r\n\r\nHaving access to the base cost of an enchantment using these vanilla methods can allow plugin developers to determine the \"value\" of an enchantment, and use it in custom logic where needed. I came across this recently when trying to assign an economic value to enchantments during tool repairing, and noticed these values don't seem to be obtainable under the current API.",
    "head_branch": "enchantment-cost-api",
    "is_a_fork": true,
    "comments": [
      "I agree this concept of \"cost\" is a bit confusing. The original method names were mainly to match the Mojang ones, as the existing similar surrounding methods all did, but I've changed it them to be clearer. I've also updated the javadocs a bit, to hopefully try make it more obvious the cost isn't directly related to experience levels and to add a bit more context."
    ],
    "commit_messages": [
      "Add Enchantment cost API (#9856)\n\nCost is a property of individual enchantments, and is used by vanilla in combination with environmental aspects like tool enchantability and bookshelf count to determine the final cost of an enchantment as shown in an enchanting table.\r\n\r\nHaving access to the base cost of an enchantment using these vanilla methods can allow plugin developers to determine the \"value\" of an enchantment, and use it in custom logic where needed. I came across this recently when trying to assign an economic value to enchantments during tool repairing, and noticed these values don't seem to be obtainable under the current API."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a367d9087c4d6d376422",
    "number": 9853,
    "body": "The packets used to resend the entity can be moved into a bundle packet to process the packets in the same tick like the first time.",
    "head_branch": "feat/bundleresync",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Resend entity using the bundle packet (#9853)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a368d9087c4d6d376423",
    "number": 9852,
    "body": null,
    "head_branch": "make-team-forwardingaudience",
    "is_a_fork": true,
    "comments": [
      "you were a second faster....",
      "I suppose this makes sense, general paper start and end comment things though please :)",
      "Propper comments are missing though :)",
      "Would be cool if you could add me as co-author since I was also working on it and you were faster."
    ],
    "commit_messages": [
      "Make Team extend ForwardingAudience (#9852)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a369d9087c4d6d376424",
    "number": 9848,
    "body": "Modified slightly from https://github.com/PaperMC/Folia/blob/edafbcef6884cffe493e62cd71f4957708fba7ff/patches/server/0019-Remove-unused-skyLightSources.patch",
    "head_branch": "downstream-remove-skyLightSources",
    "is_a_fork": true,
    "comments": [
      "https://github.com/PaperMC/Paper/commit/2f4281e2b44aed235f12369de84c9bb035746844"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a36ad9087c4d6d376425",
    "number": 9847,
    "body": "resolves #9736 \r\nThis is an alternative to #9780 \r\nI personally find the other PR better since it also resolves confusing naming and also doesn't use isSilent of which the current behavior is unintended (and the only api that uses this boolean is deprecated)\r\nBut incase paper team thinks this is a better fix i will just open this pr",
    "head_branch": "fix-strikelightningeffect-powers-rods-and-clears-copper-alternative",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a36bd9087c4d6d376426",
    "number": 9846,
    "body": "closes #9820",
    "head_branch": "fix/advancement-pos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix UnsafeValues#loadAdvancement doesn't recalculate position (#9846)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a36cd9087c4d6d376427",
    "number": 9842,
    "body": null,
    "head_branch": "netty",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "sync netty version with vanilla (#9842)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a36dd9087c4d6d376428",
    "number": 9841,
    "body": "Fixed an issue where recipe packet limits did not work correctly.",
    "head_branch": "fix/recipe-spam",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix recipe packet limiter (#9841)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a36ed9087c4d6d376429",
    "number": 9840,
    "body": "found via the new source AT applier in paperweight v2",
    "head_branch": "cleanup-at",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[ci skip] cleanup some ATs (#9840)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a36fd9087c4d6d37642a",
    "number": 9838,
    "body": "Moves the methods from Zombie to Mob, as more Mobs can raise their arm(s).\r\n\r\n---\r\n\r\nI've marked the existing arms-raised API for Zombies as deprecated. Should this be deprecated, marked as obsolete or just left unchanged?",
    "head_branch": "feat/aggressive-mob-api",
    "is_a_fork": true,
    "comments": [
      "The `setChargingAttack` and `isChargingAttack` stuff seems weird to me. `isChargingAttack` just checks if the entity is currently using an item (by redirecting to `LivingEntity#isHandRaised`), but `setChargingAttack` makes the entity aggressive which doesn't make the entity start/stop using an item immediately.\r\n\r\nI'll deprecate them later today.",
      "Please squash this into the add missing entity API patch",
      "> Please squash this into the add missing entity API patch\r\n\r\nRebased on master and merged patches"
    ],
    "commit_messages": [
      "Add aggressive mob API (#9838)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a370d9087c4d6d37642b",
    "number": 9836,
    "body": null,
    "head_branch": "bugfix/replace-bukkit-consumers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Replace bukkit Consumers with java consumers (#9836)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a371d9087c4d6d37642c",
    "number": 9835,
    "body": "The only \"difference\" to Vanilla behavior is when then experience reward will be determined, but otherwise it is left as is.\r\n\r\nThis supersedes #9762",
    "head_branch": "grindstone-experience-reward",
    "is_a_fork": true,
    "comments": [
      "I was also thinking about the possibility of moving the accessors into the PrepareGrindstoreEvent.\r\n\r\nThe code in the CraftEventFactory would look a bit janky due to mutliple instanceof checks and casts but it would work.\r\n\r\nYour opinion on that?",
      "Going to close this since https://github.com/PaperMC/Paper/pull/11346 handles this better. The only thing missing is the lack of player context in the BlockExpEvent, but instead, a separate PR to add a new type that extends BlockExpEvent (but doesn't have its own handler list) can be added which adds the player context (like a GrindstoneExpEvent or something)."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a372d9087c4d6d37642d",
    "number": 9834,
    "body": "Starting in 1.20.2, when a new `ServerPlayer` instance is created its client options are populated with defaults using the `ServerPlayer.updateOptions` method.\r\n\r\nThis results in `PlayerClientOptionsChangeEvent` and `PlayerLocaleChangeEvent` being called before the server has actually received that information from the client.\r\n\r\nThis PR just makes it so the events are not called in the initialisation of `ServerPlayer` (i.e. on player login), consistent with behaviour before 1.20.2.",
    "head_branch": "options-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't call options events on login (#9834)\n\n* Don't call options events on login\r\n\r\n* Merge changes into client options API patch"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a373d9087c4d6d37642e",
    "number": 9833,
    "body": "Implements API for getting, setting and resetting a player's idle duration.\r\n\r\n---\r\n\r\nRelated to #6299, which exposed a getter for the idle time, but got closed because it went stale.",
    "head_branch": "feat/idle-duration-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add player idle duration API (#9833)\n\n* Add player idle duration API\r\n\r\nImplements API for getting, setting and resetting a player's idle duration.\r\n\r\n* Remove idle duration setter\r\n\r\n* Rebase"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a374d9087c4d6d37642f",
    "number": 9831,
    "body": "closes #9811 ",
    "head_branch": "get-hidden-effects",
    "is_a_fork": true,
    "comments": [
      "Please wait until #9864 is merged since i can then rebase and use CraftPotionUtil ",
      "superseded by #9910 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a375d9087c4d6d376430",
    "number": 9830,
    "body": "Adds two methods for (de)serialization of block states similar to the existing methods for (de)serialization of entities and item stacks.\r\n\r\nI decided on serializing block states rather than blocks themselves because it allows plugins to examine the properties of deserialized data via the existing APIs before actually placing them in the world by using the update() method.\r\n\r\n### Example Usage:\r\n```java\r\nprivate byte[] blockBytes;\r\n\r\n@EventHandler\r\npublic void onBlockBreak(@NotNull BlockBreakEvent event) {\r\n    // serialize block when it's broken\r\n    BlockState state = event.getBlock().getState();\r\n    blockBytes = Bukkit.getUnsafe().serializeBlock(state);\r\n}\r\n\r\n@EventHandler\r\npublic void onInteract(@NotNull PlayerInteractEvent event) {\r\n    if (blockBytes == null)\r\n        return;\r\n    if (event.getAction() != Action.RIGHT_CLICK_BLOCK)\r\n        return;\r\n    if (event.getItem() == null || event.getItem().getType() != Material.BLAZE_ROD)\r\n        return;\r\n\r\n    // deserialize block at another location using a blaze rod\r\n    Block block = event.getClickedBlock().getRelative(event.getBlockFace());\r\n    BlockState state = Bukkit.getUnsafe().deserializeBlock(blockBytes, block);\r\n    state.update(true);\r\n}\r\n```",
    "head_branch": "block-serialization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a376d9087c4d6d376431",
    "number": 9829,
    "body": "Due to the fact that the block data of the FallingBlock is only sent to the client with the spawn packet, changing it at a later point would be tricky.\r\nThe entity would have to be removed for every player that is tracking it and then resent. If this is desired please let me know and I'll try to (hopefully) make it work\r\n\r\nCloses #9792 ",
    "head_branch": "falling-block-set-blockdata",
    "is_a_fork": true,
    "comments": [
      "You should be able to call the .update() method after the block data is set, which should correctly resend the entity.",
      "We need to verify that it *looks* correct on vanilla clients if you do that since it technically removes the old entity and adds a new one. It works for other entities like fireballs, paintings and item frames, but it should be verified that it looks correct.",
      "~~That doesn't work. It isn't entity meta data, it is kind of an entity variant. See [Spawn Entity Packet](https://wiki.vg/Protocol#Spawn_Entity) and [Object Data](https://wiki.vg/Object_Data#Falling_Block)~~\r\n\r\nOr maybe it does? I guess I'll give it a try. Yeah it does work",
      "How it looks on a 1.20.2 vanilla client:\r\nhttps://github.com/PaperMC/Paper/assets/21055143/1d8c3417-c14f-4eeb-a6cf-1cc388ca3f1e\r\n\r\n",
      "Falling block entities have a field that can contain tile entity data. I guess that should get cleared when changing the BlockData of the entity?\r\n\r\nShould I also add an getter / setter for that?",
      "Added getters and setters for the internal CompoundTag that represents the FallingBlocks placed BlockState"
    ],
    "commit_messages": [
      "Add BlockData setter for FallingBlock (#9829)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a377d9087c4d6d376432",
    "number": 9828,
    "body": "This patch adds a custom payload handler in ServerGamePacketListenerImpl to handle cancelled commands and cancelled chat messages from the proxy.\r\n\r\nMy current implementation wraps the cancelled packet into a plugin message, protocol changes will be handled by the updated  implementation in Minecraft code and Velocity.\r\n\r\nThis is a draft and can/should be used for https://github.com/PaperMC/Velocity/pull/1100 and possible for Waterfall/BungeeCord.",
    "head_branch": "feature/velocity-cancel-chat",
    "is_a_fork": true,
    "comments": [
      "for a good while, I've wanted the means to \"handshake\" between the proxy and the server some form of capability -esque sysem, that way the proxy and the server can see if they support this stuff, i.e. we can detect if we're able to tell the server that chat cycled rather than just having to assume it based on proto version or whatever, but, I did kinda get veto'd on this, so, idk",
      "Yes, that's some open todo for velocity. For Paper it *should* be fine to listen to those plugin messages because there is no active logic that changes behavior.\r\n\r\nMaybe we should just add it as config option to the velocity config and send that package then."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a378d9087c4d6d376433",
    "number": 9826,
    "body": "There are at least 2 events I know of that fire during the configuration stage before the `ServerGamePacketListenerImpl` has been created: `PlayerClientOptionsChangeEvent` and `PlayerSpawnLocationEvent`. In addition, there are the listeners for custom payloads that also run. This PR adds support for the functionality that is supported during the configuration phase, namely kicking players, sending custom resource packs, and sending custom payloads.\r\n\r\n```[tasklist]\r\n- [x] kick API\r\n- [x] sending resource pack API\r\n- [ ] custom channel stuff\r\n```",
    "head_branch": "feature/api-during-config-stage",
    "is_a_fork": true,
    "comments": [
      "I think we should have an API to keep the player in config for a while as well while e.g. the resource pack is loading. Especially because of this issue right here https://github.com/PaperMC/Velocity/issues/1164.",
      "That is outside the scope of this PR. This is just intending to support already-existing API that is valid for use during the configuration phase. Don't interpret this as saying such API shouldn't exist however.",
      "Anyone have any idea how long until this PR is merged? Isn't it as simple as just clicking the button now?",
      "@cometcake575 this PR is still in draft, it even has a todo list in the description with at least one item that needs looking at.\r\nthen the code needs to be reviewed by the team, tested and then it can be integrated. integrating is more complicated than just pressing the button because of how our patching works.\r\ntldr: be patient",
      "Is there any progress?",
      "I did say elsewhere about making Player more attached to the Network, but, we could maybe go for a more overarching thing of just offering a wrapper for the connection itself which lets you stem off into a configuring client, which lets you see methods only available in that phase, as well as a more general one that lets you get the player? not really sure how that would look, but, we also need to approach this for earlier stage stuff too, anyways, i.e. login plugin messaging API, as well as all of the task stuff needed for supporting the configuration protocol and its operations here",
      "The Player should be supported in PlayerSpawnLocationEvent which is in a location *after* vanilla creates ServerPlayer but before the game connection is created. So either way, the `Player` interface has to have some support for stuff before the game packet listener is created.\r\n\r\nPlayer is exposed in multiple places before where vanilla creates it, The login event, the resource pack events, the kick event and probably some more I'm missing."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a379d9087c4d6d376434",
    "number": 9825,
    "body": "```[tasklist]\n- [x] address Paper's locateNearestBiome methods\n```\n\n\nUpstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\n\nBukkit Changes:\n897a0a23 SPIGOT-5753: Back PotionType by a minecraft registry\n255b2aa1 SPIGOT-7080: Add World#locateNearestBiome\nff984826 Remove javadoc.io doc links\n\nCraftBukkit Changes:\n71b0135cc SPIGOT-5753: Back PotionType by a minecraft registry\na6bcb8489 SPIGOT-7080: Add World#locateNearestBiome\nad0e57434 SPIGOT-7502: CraftMetaItem - cannot deserialize BlockStateTag\nb3efca57a SPIGOT-6400: Use Mockito instead of InvocationHandler\n38c599f9d PR-1272: Only allow one entity in CraftItem instead of two\nf065271ac SPIGOT-7498: ChunkSnapshot.getBlockEmittedLight() gets 64 blocks upper in Overworld\n\nSpigot Changes:\ne0e223fe Remove javadoc.io doc links\n\n----\n\nfixes https://github.com/PaperMC/Paper/issues/9823",
    "head_branch": "update-upstream",
    "is_a_fork": false,
    "comments": [
      "Ok, deprecated our two methods and delegated to the new ones. The newer methods are more powerful API despite not being designed correctly with the varargs parameter. "
    ],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#9825)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n897a0a23 SPIGOT-5753: Back PotionType by a minecraft registry\r\n255b2aa1 SPIGOT-7080: Add World#locateNearestBiome\r\nff984826 Remove javadoc.io doc links\r\n\r\nCraftBukkit Changes:\r\n71b0135cc SPIGOT-5753: Back PotionType by a minecraft registry\r\na6bcb8489 SPIGOT-7080: Add World#locateNearestBiome\r\nad0e57434 SPIGOT-7502: CraftMetaItem - cannot deserialize BlockStateTag\r\nb3efca57a SPIGOT-6400: Use Mockito instead of InvocationHandler\r\n38c599f9d PR-1272: Only allow one entity in CraftItem instead of two\r\nf065271ac SPIGOT-7498: ChunkSnapshot.getBlockEmittedLight() gets 64 blocks upper in Overworld\r\n\r\nSpigot Changes:\r\ne0e223fe Remove javadoc.io doc links"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a37bd9087c4d6d376435",
    "number": 9824,
    "body": "Closes issue #8925 \r\nAccidentally closed the previous PR #9787 \r\n\r\nPDC now implements these methods\r\n\r\n    #put(Key, PersistentDataType, Object)\r\n    #has(Key, PersistentDataType)\r\n    #get(Key, PersistentDataType)\n    #getOrDefault(Key, PersistentDataType, Object)\r\n    #remove(Key)\r\n    #has(Key)\r\n    #putIfAbsent(Key, PersistentDataType, Object)\r\n    #computeIfAbsent(Key, PersistentDataType, Function)\r\n    #computeIfPresent(Key, PersistentDataType, BiFunction)\r\n    #compute(Key, PersistentDataType, BiFunction)\r\n    #getOrThrow(Key, PersistentDataType, Supplier)\r\n    #getOrThrow(Key, PersistentDataType)\r\n    #replace(Key, PersistentDataType, Object, Object)\r\n    #replace(Key, PersistentDataType, Object)\r\n    #merge(Key, PersistentDataType, Object, BiFunction)\r\n",
    "head_branch": "expose-map-methods-pdc",
    "is_a_fork": true,
    "comments": [
      "Also added tests for the new PDC functions, all tests seem to pass",
      "Are you planning on addressing the comments ?\r\nOtherwise I can look into taking over the PR and completing it for you.",
      "> Are you planning on addressing the comments ? Otherwise I can look into taking over the PR and completing it for you.\r\n\r\nSorry forgot about this, I can implement the requested changes but i'm unsure of how to merge this into the Add-new-overload-to-PersistentDataContainer patch so if you want to take over the PR that's fine",
      "> but i'm unsure of how to merge this into the Add-new-overload-to-PersistentDataContainer patch\n\nYou can look at the CONTRIBUTING.md file for that. It explains it really nice how to edit existing patches. "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a37cd9087c4d6d376436",
    "number": 9822,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/9819",
    "head_branch": "fix/gameprofile",
    "is_a_fork": true,
    "comments": [
      "You can't create a game profile with a null uuid",
      "> You can't create a game profile with a null uuid\r\n\r\nYoure right, good catch kenny"
    ],
    "commit_messages": [
      "Fix CraftPlayerProfile#setId regression (#9822)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a37dd9087c4d6d376437",
    "number": 9821,
    "body": null,
    "head_branch": "collision-shapes",
    "is_a_fork": true,
    "comments": [
      "I removed the word placed and replaced it with calculated as I did in the parameter description. Also added another line clarifying that the result may differ from what would result if the block was actually placed."
    ],
    "commit_messages": [
      "Add API to get the collision shape of a block before it's placed (#9821)\n\n* Add API to get the collision shape of a block before it's placed\r\n\r\n* Tweak API documentation\r\n\r\n* Clarify behavior\r\n\r\n* Rebase\r\n\r\n* Rebase"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a37ed9087c4d6d376438",
    "number": 9818,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/9817\r\n\r\n----\r\n\r\nAlso makes CraftLootTable implement hashCode.",
    "head_branch": "fix/loot-tables",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixes for loot tables (#9818)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a37fd9087c4d6d376439",
    "number": 9815,
    "body": "Currently calling the setVelocity() has undefined behavior at best, and in addition there is no way to set a fireballs direction to anything other than a normalized vector. This PR fixes both of these problems at once by overriding the setVelocity method of fireballs to set the travel direction while bypassing the vanilla normalization, allowing for things such as freezing a fireball in-place or changing its speed.",
    "head_branch": "fireball-velocity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make setVelocity method of Fireballs change the travel direction to an arbitrary vector (#9815)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a380d9087c4d6d37643a",
    "number": 9814,
    "body": null,
    "head_branch": "pw-158",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update paperweight to 1.5.8 (#9814)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a381d9087c4d6d37643b",
    "number": 9809,
    "body": "Fixes #9803",
    "head_branch": "fix/brand",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move clientBrandName over to ServerPlayer (#9809)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a382d9087c4d6d37643c",
    "number": 9806,
    "body": "repair for https://github.com/PaperMC/Paper/issues/9805\r\nin `net.minecraft.world.entity.decoration.ItemFrame#survives`\r\n```\r\n @Override\r\n    public boolean survives() {\r\n        if (this.fixed) {\r\n            return true;\r\n        } else if (!this.level().noCollision((Entity) this)) {\r\n            return false;\r\n        } else {\r\n            BlockState iblockdata = this.level().getBlockState(this.pos.relative(this.direction.getOpposite()));\r\n\r\n            return !iblockdata.isSolid() && (!this.direction.getAxis().isHorizontal() || !DiodeBlock.isDiode(iblockdata)) ? false : this.level().getEntities((Entity) this, this.getBoundingBox(), ItemFrame.HANGING_ENTITY).isEmpty();\r\n        }\r\n    }\r\n```\r\nthe itemframe will detect whether itself collides with other items by calling `noCollision`, but in `net.minecraft.world.level.Level#noCollision(Entity, AABB)`, which has been modified by paper, hasn't consider the situation that itemframe is outside the world border and directly call the func `getCollisionsForBlocksOrWorldBorder`, which return false when entity is outside the world border\r\n```\r\n// Paper start - Prevent armor stands from doing entity lookups\r\n    @Override\r\n    public boolean noCollision(@Nullable Entity entity, AABB box) {\r\n        if (entity instanceof net.minecraft.world.entity.decoration.ArmorStand && !entity.level().paperConfig().entities.armorStands.doCollisionEntityLookups) return false;\r\n        // Paper start - optimise collisions\r\n        int flags = io.papermc.paper.util.CollisionUtil.COLLISION_FLAG_CHECK_ONLY;\r\n        if (entity != null) {\r\n            flags |= io.papermc.paper.util.CollisionUtil.COLLISION_FLAG_CHECK_BORDER;\r\n        }\r\n        if (io.papermc.paper.util.CollisionUtil.getCollisionsForBlocksOrWorldBorder(this, entity, box, null, null, flags, null)) {\r\n            return false;\r\n        }\r\n\r\n        return !io.papermc.paper.util.CollisionUtil.getEntityHardCollisions(this, entity, box, null, flags, null);\r\n        // Paper end - optimise collisions\r\n    }\r\n    // Paper end\r\n```\r\nso I change the patch to\r\n```\r\nif (!(entity instanceof net.minecraft.world.entity.decoration.ItemFrame) && io.papermc.paper.util.CollisionUtil.getCollisionsForBlocksOrWorldBorder(this, entity, box, null, null, flags, null)) {\r\n+            return false;\r\n+        }\r\n```\r\nto prevent item frame from killed\r\n",
    "head_branch": "patch-branch",
    "is_a_fork": true,
    "comments": [
      "I wonder if we can somehow pass if the entity noCollision should use the `COLLISION_FLAG_CHECK_BORDER` flag or not.\r\nThe instanceOf, while presumably fine, seems kind of meh there given we know the exact spot this check would have to trigger for so we could attempt to shortcut here a bit.\r\n\r\nMy brain is absolutely friend right now tho, so I sadly cannot look deeper into that.",
      "Closing this pr since this is a hack not a fix, the proper way is to do what vanilla do instead of what the new system do. There's more issue with the world border collision. The item frame do indeed drop when near the border (<2*|boxSize|) but not when far outside of the border and that's the issue. Essentially in vanilla an entity collide with a border without collide epsilon and when the entity is near the border and inside (with a margin) but not far outside then the two voxel shape intersection are checked.",
      "> Closing this pr since this is a hack not a fix, the proper way is to do what vanilla do instead of what the new system do. There's more issue with the world border collision. The item frame do indeed drop when near the border (<2*|boxSize|) but not when far outside of the border and that's the issue. Essentially in vanilla an entity collide with a border without collide epsilon and when the entity is near the border and inside (with a margin) but not far outside then the two voxel shape intersection are checked.\n\nIf the border is set to expand automatically e.g. /worldborder add 10000 10，then will the moving border cause item frame to disappear？",
      "Yes, this might happen if the timing is right. For example if the border is slow enough that the item frame check its state (that happens each 100 ticks by default) and the condition are met."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a383d9087c4d6d37643d",
    "number": 9804,
    "body": "Readds a lost update to the shared mutable state in the random block ticking optimisation.\r\n\r\nSee: https://github.com/PaperMC/Paper/blob/773dd724469bae89d0c2075edc3d1ddc8d5b0b18/patches/server/0703-Optimise-random-block-ticking.patch#L134-L140",
    "head_branch": "bugfix/use-water-block-for-ice",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Properly check water block when random ticking ice (#9804)\n\nReadds a lost update to the shared mutable state in the random block\r\nticking optimisation."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a384d9087c4d6d37643e",
    "number": 9801,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] update mappings link (#9801)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a385d9087c4d6d37643f",
    "number": 9799,
    "body": null,
    "head_branch": "pw-update",
    "is_a_fork": false,
    "comments": [
      "(this fixes runDev on windows)"
    ],
    "commit_messages": [
      "[ci skip] update paperweight to 1.5.7 & re-enable filterpatches (#9799)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a386d9087c4d6d376440",
    "number": 9798,
    "body": "Linked issue #9737 \r\n\r\nApplied suggested changes from @Lulu13022002 and they seem to work",
    "head_branch": "fix-painting-loose-art-on-face-change",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix painting loosing art on face change (#9798)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a387d9087c4d6d376441",
    "number": 9797,
    "body": "🤷‍♂️",
    "head_branch": "fix/run-dev",
    "is_a_fork": false,
    "comments": [
      "(also turned filterpatches back on)",
      "https://github.com/PaperMC/paperweight/pull/214",
      "Shouldn't this happen anyway? \r\n```diff\r\n-tasks.withType<io.papermc.paperweight.tasks.RebuildGitPatches> {\r\n-    filterPatches.set(false)\r\n-}\r\n+// tasks.withType<io.papermc.paperweight.tasks.RebuildGitPatches> {\r\n+//     filterPatches.set(false)    \r\n+// }\r\n```",
      "https://github.com/PaperMC/Paper/pull/9799"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a388d9087c4d6d376442",
    "number": 9793,
    "body": "Closes #9791\r\n\r\nThe monsterSpawnMaxLightLevel is annotated with BelowZeroToEmpty, but I noticed that the belowZero method wasn't fully implemented for IntOr which meant it wasn't doing anything.\r\n\r\nAn alternative solution would be to add a migration, but with this anyone who has the old -1 default will have it changed to default in the file.",
    "head_branch": "fix/monster-spawns",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix mobs not spawning when using an older config (#9793)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a389d9087c4d6d376443",
    "number": 9792,
    "body": "Bukkit already has this consumer for spawning normal entities and dropping items, but the method for spawning falling blocks is missing it",
    "head_branch": "feat/falling-blocks-spawn-consumer",
    "is_a_fork": true,
    "comments": [
      "I would personally prefer having a `setBlockData` method in `FallingBlock`, so that its possible to just use the existing consumer-based methods with FallingBlocks. \r\n\r\nFallingBlocks being the only entity that require a special spawning method in `World` is kinda weird, and the only reason for this is that they require BlockData to be spawned, which was impossible before the consumer methods existed.",
      "Yeah, would make sense to add api for changing the blockstate.\r\n\r\nBut still, the falling block spawning method is the only one which doesn't have a consumer parameter. This seems like an inconsistency to me.",
      "I agree with @Malfrador that a setBlockData method on FallingBlock is a better solution. I don't really like all the unique spawn methods for various things, Paper already has changes to make other entities work with the general spawn methods. Not sure we should be adding more.",
      "So should I scrap the current PR and implement the proposed alternative solution?\r\nAlso, should the specific spawning-methods (for spawning falling blocks/dropping items) be deprecated/marked as obsolete?",
      "If we manage to get a FallingBlock#setBlockData (or the likes) to properly work, then yea, we could mark the special spawning method as `@Obsolete` and link the proper methods.\r\n\r\nI'd keep this branch around tho, if implementing the setBlockData method seems too troublesome/runs into client restrictions down the line, we might just have to fall back onto this proposal."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a38ad9087c4d6d376444",
    "number": 9789,
    "body": "`org.xerial.sqlite-jdbc` released a breaking change for a fairly commonly used API — used extensively in [plotsquared for example](https://github.com/IntellectualSites/PlotSquared/blob/26c55a318fac673f629faef3f0e7379893ced0d5/Core/src/main/java/com/plotsquared/core/database/SQLManager.java#L1078). CraftBukkit initially picked up this update but it has since been rolled back (https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/40d41acc1aba91ead44adc469d715debe6f041a8#pom.xml).\r\n\r\nUnfortunately, Paper [updated CraftBukkit prior to rollback](https://github.com/PaperMC/Paper/commit/4cdbb0c86c40f5ff93a9a7cdca3102636b35b6d4).\r\n\r\nThis PR rolls back to `org.xerial:sqlite-jdbc:3.42.0.1` everywhere and upgrades Bukkit, CraftBukkit and Spigot again, so that CraftBukkit plugins that make use of SQLIte don't break.\r\n\r\nIn the process a few patches needed to be updated because the changes they introduced have since been upstreamed.",
    "head_branch": "downgrade-sqlite",
    "is_a_fork": true,
    "comments": [
      "If i am understanding this PR correctly, you should just wait until we pull upstream again",
      "This is an upstream merge PR, they just generally failed to entitle it as such",
      "We generally like to do upstream updates ourselves, especially when Spigot adds new API we already have, sorry",
      "@kennytv No problem at all. 👍 This PR is at least is here for reference, both for upgrading to the latest upstream and on the off chance someone happens to try HEAD wonders what's up with SQLite 😅"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a38cd9087c4d6d376445",
    "number": 9787,
    "body": "Linked issue: #8925\r\nAs the previous pull request #9064 seems to have gone inactive I have reworked the changes, expanded the documentation and applied the requested changes from that pull request.\r\n\r\nPDC now inherits Iterable<NamespacedKey>, and adds these methods\r\n\r\n    #setIfAbsent(Key, PersistentDataType, Object)\r\n    #computeIfAbsent(Key, PersistentDataType, Function)\r\n    #computeIfPresent(Key, PersistentDataType, BiFunction)\r\n    #compute(Key, PersistentDataType, BiFunction)\r\n    #getOrThrow(Key, PersistentDataType, Supplier)\r\n    #getOrThrow(Key, PersistentDataType)\r\n    #replace(Key, PersistentDataType, Object, Object)\r\n    #replace(Key, PersistentDataType, Object)\n    #merge(Key, PersistentDataType, Object, BiFunction)",
    "head_branch": "expose-map-methods-pdc",
    "is_a_fork": true,
    "comments": [
      "The actual patch names are weird btw. I'm a fan of these methods though - you should add attribution for the previous codeowner though as a co-author in the patch description please.",
      "Can you also look into implementing [`merge`](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Map.html#merge(K,V,java.util.function.BiFunction)) pretty please?",
      "> The actual patch names are weird btw. I'm a fan of these methods though - you should add attribution for the previous codeowner though as a co-author in the patch description please.\r\n\r\n> Can you also look into implementing [`merge`](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Map.html#merge(K,V,java.util.function.BiFunction)) pretty please?\r\n\r\nAdded previous codeowner as Co-author, renamed the patches and added the merge method"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a38dd9087c4d6d376446",
    "number": 9786,
    "body": "Signs are commonly used as multi-line text input, so this should be part of the API.\r\n\r\nAnvils are also frequently used for that, but they only offer single-line text (although they are already part of the Paper API)",
    "head_branch": "client-side-sign",
    "is_a_fork": true,
    "comments": [
      "My reasoning for doing it this way has been that while the unknown entities are known to be actually unknown because of the continually increasing entity id, there could be already a sign placed at the location where the local sign should be opened, so when he closes the sign editor the sign change handling would be passed to the real api which shoots it down before the event is called because the player wasn't allowed to do so.\n\nThis wouldn't require searching for a free space around the player to send him a sign and unify the possible handling of them with one event instead of maybe two (if it were to actually work)",
      "So what's the current stance on this PR? I'd still like to see it added in this form, but I haven't gotten an answer on my previous comment",
      "Hmm, I agree something like this is certainly useful. But the current event name is defo a bit misleading as we definitely want to make sure there is a distinction as people might blindly listen to this event.\r\n\r\nI agree that it might be useful to have an \"unknown\" one and then a normal one.",
      "I have changed the name of the event to differentiate it more from the normal event.\r\n\r\nI am still not sold on the concept to only call this event when there isn't an actual sign to edit, because of the points I already mentioned above."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a38ed9087c4d6d376447",
    "number": 9783,
    "body": "CraftBukkit's API implementation doesn't update the firework's entitydata, which results in the client not being informed about the attached firework",
    "head_branch": "fix/firework-rocket-attaching",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix entity data not updated for firework attached to entity (#9783)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a38fd9087c4d6d376448",
    "number": 9781,
    "body": "The BukkitMirrorTest can be disabled globally instead of per method.\r\nFix some nullable/deprecation annotation\r\nUpdate minecraft wiki links (gamepedia one that redirect to fandom)",
    "head_branch": "feat/api-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Some jd fixes (#9781)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a390d9087c4d6d376449",
    "number": 9780,
    "body": "resolves #9736 \r\nNot sure if the check for isSilent should be removed i am just going to leave it in for now incase any plugins are using the deprecated methods as a workaround",
    "head_branch": "fix-strikelightningeffect-powers-rods-and-clears-copper",
    "is_a_fork": true,
    "comments": [
      "Thanks - I think another if needs the visual check where it is able to set fire to the world",
      "Is it also in the LightningBolt class? Incase you are talking about the spawnFire method, that one already got a check in it.\r\nWhen testing the changes it doesn't set anything on fire. Or is there something i am missing?",
      "Would creating an extra boolean and using that for the skeleton trap be an good way of fixing this? This way we can use the visualOnly boolean for the strikeLightningEffect method. This also fixes misleading variable names. Is this a good way to do it or are there better ways?",
      "Fixed the behavior break by creating an extra skeletonTrap boolean that is used for skeleton traps instead of the visualOnly boolean. This way we also avoid confusion with variable names. I hope this way of fixing it is acceptable\r\nEdit: This also removes some unnecessary checks for !this.visualOnly",
      "Opened an alternative pr incase you find that one better. personally i think this current pr is the better one for reasons i explained in the new pr.",
      "Vanilla's `visualOnly` field **is** the skeleton trap boolean. All other uses of it for anything else should be reverted. Instead of using the vanilla field for what it originally ways, we are just changing its meaning, and adding a field to replace it. It should be the other way around. Add an \"isEffect\" boolean that is checked in the correct places, and remove `visualOnly` from anywhere it's not used in vanilla. Then make the API isEffect method return that new boolean."
    ],
    "commit_messages": [
      "Fix strikeLightningEffect powers lightning rods & clears copper (#9780)\n\n* Fix strikeLightningEffect powers lightning rods and clears copper\r\n\r\n* Fixed vanilla behavior break\r\n\r\n* rebase\r\n\r\n* revert spigot cleanup and remove setter\r\n\r\n* better fix for behaviour break\r\n\r\n* rebase and clean\r\n\r\n* fix"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a391d9087c4d6d37644a",
    "number": 9776,
    "body": "Adds additional overloads to the methods in the HumanEntity interface that open inventories (such as openAnvil, openWorkbench, ect.) allowing for customization of the displayed titles.",
    "head_branch": "custom-inventory-titles",
    "is_a_fork": true,
    "comments": [
      "I already opened a PR that results in the same behaviour. See #9658",
      "Thank you for your contribution, unfortunately this PR seems to do roughly the same thing as the existing #9658, so this is being closed in favour of that one."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a392d9087c4d6d37644b",
    "number": 9775,
    "body": "Adds additional overloads to the methods in the HumanEntity interface that open inventories (such as openAnvil, openWorkbench, ect.) allowing for customization of the displayed titles.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a393d9087c4d6d37644c",
    "number": 9770,
    "body": "Changing nullability here would go beyond just getters with its creation and completion, so that feels more like a future thing",
    "head_branch": "profile",
    "is_a_fork": false,
    "comments": [
      "I think the method Server#createProfileExact should also be updated, the method specify than having one of its parameter null is valid. However when the method will find an online player and one of its parameter is null, the constructor will throw. For example: `createProfileExact(null, p.getName())`, `createProfileExact(p.getUniqueId(), null)`",
      "@Lulu13022002 ",
      "The other issues are better fixed in another pr/of lesser priority"
    ],
    "commit_messages": [
      "Fixup player profile getters and constructor to expected nullability (#9770)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a394d9087c4d6d37644d",
    "number": 9766,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/9755",
    "head_branch": "fix/loot-table-key-map",
    "is_a_fork": true,
    "comments": [
      "Tested datapacks in linked issue. Loaded correctly. Tested on a vanilla, base and pr. Worked on vanilla, was able to reproduce original issue on base. Fix confirmed on pr"
    ],
    "commit_messages": [
      "Fix creating the reverse map for loot table keys (#9766)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a395d9087c4d6d37644e",
    "number": 9763,
    "body": "resolves #9744 ",
    "head_branch": "fix-playerswaphanditemsevent-exception",
    "is_a_fork": true,
    "comments": [
      "I think this fix is better because it’s less nullable itemstacks. Now we can also change the annotation on the getter to NotNull. The ItemStack passed into the event already was NotNull, so that doesn’t break behavior expectations. ",
      "Are Paper comments required behind the nullability annotations?"
    ],
    "commit_messages": [
      "Fix PlayerSwapHandItemsEvent NPE when a hand set to null (#9763)\n\n* Fix PlayerSwapHandItemsEvent throwing exception when mainhand or offhand set to null\r\n\r\n* use fully qualified import\r\n\r\n* Use ItemStack#empty() instead of new ItemStack\r\n\r\n* Add NotNull annotation to getters\r\n\r\n* Add missing Paper comments"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a396d9087c4d6d37644f",
    "number": 9762,
    "body": "Adds an event that gets called before the ExperienceOrb is spawned because of using a Grindstone. Allows you to get a copy of the ItemStack, modify/get the amount of Experience and get the Player involved\r\n\r\nCalling onTake with itemstack instead of itemstack1 should not be an issue since it is not used anywhere except in the onTake method of the resultslot (Calling the event). Though someone should probably double check that.",
    "head_branch": "GrindstoneExtractEvent",
    "is_a_fork": true,
    "comments": [
      "While looking at the PrepareResult events a while back I got the idea to expand the PrepareGrindstoneEvent instead to allow getting and setting the experience during the creation of the result and not the retrieval like here.",
      "> While looking at the PrepareResult events a while back I got the idea to expand the PrepareGrindstoneEvent instead to allow getting and setting the experience during the creation of the result and not the retrieval like here.\r\n\r\nWill close pr and allow you or someone else to expand on PrepareGrindstoneEvent"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a397d9087c4d6d376450",
    "number": 9761,
    "body": "Adds an event that gets called before the ExperienceOrb is spawned because of using a Grindstone. Allows you to get a copy of the ItemStack, modify/get the amount of Experience and get the Player involved\r\n\r\nCalling onTake with itemstack instead of itemstack1 should not be an issue since it is not used anywhere except in the onTake method of the resultslot (Calling the event). Though someone should probably double check that.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a398d9087c4d6d376451",
    "number": 9758,
    "body": null,
    "head_branch": "fix/update-wiki",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix/update wiki (#9758)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a399d9087c4d6d376452",
    "number": 9757,
    "body": null,
    "head_branch": "fix-tests",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix tests that broke during the junit 5 update (#9757)\n\nCo-authored-by: Jason Penilla <11360596+jpenilla@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a39ad9087c4d6d376453",
    "number": 9756,
    "body": "Fixes maps not having their id field assigned which causes an NPE when a plugin tries to get the id, also fixes the initialize event not being called in this spot.\r\n\r\nIf it's possible to replace the private -> public with an AT then let me know, wasn't sure how to handle the generic return type",
    "head_branch": "fix/null-map-id",
    "is_a_fork": true,
    "comments": [
      "AT would just use the erased type, not sure I care though atm"
    ],
    "commit_messages": [
      "Fix missing map initialize event call & missing map id assignment (#9756)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a39bd9087c4d6d376454",
    "number": 9754,
    "body": "Honestly, I don't know if it is a good way",
    "head_branch": "fix-brand-name",
    "is_a_fork": true,
    "comments": [
      "The proper solution would be to actually handle the new type properly instead of just trying to bodge it out",
      "Closing this pr, since this is a hack not a fix and your change doesn't work for the same reason electronicboy's commit doesn't either. However thank you for the report, the issue is still valid."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a39cd9087c4d6d376455",
    "number": 9753,
    "body": "Fix the UnsupportedOperationException thrown in UnsafeValues#loadAdvancement\r\n\r\nTestPlugin.java\r\n```java\r\npackage io.papermc.testplugin;\r\n\r\nimport org.bukkit.NamespacedKey;\r\nimport org.bukkit.event.Listener;\r\nimport org.bukkit.plugin.java.JavaPlugin;\r\n\r\npublic final class TestPlugin extends JavaPlugin implements Listener {\r\n\r\n    @Override\r\n    public void onEnable() {\r\n        this.getServer().getPluginManager().registerEvents(this, this);\r\n        this.getServer().getUnsafe().loadAdvancement(\r\n            NamespacedKey.minecraft(\"adventure/spyglass_at_pig\"),\r\n            \"\"\"\r\n            {\r\n              \"parent\": \"minecraft:adventure/spyglass_at_parrot\",\r\n              \"criteria\": {\r\n                \"spyglass_at_pig\": {\r\n                  \"conditions\": {\r\n                    \"item\": {\r\n                      \"items\": [\r\n                        \"minecraft:spyglass\"\r\n                      ]\r\n                    },\r\n                    \"player\": [\r\n                      {\r\n                        \"condition\": \"minecraft:entity_properties\",\r\n                        \"entity\": \"this\",\r\n                        \"predicate\": {\r\n                          \"type_specific\": {\r\n                            \"type\": \"player\",\r\n                            \"looking_at\": {\r\n                              \"type\": \"minecraft:pig\"\r\n                            }\r\n                          }\r\n                        }\r\n                      }\r\n                    ]\r\n                  },\r\n                  \"trigger\": \"minecraft:using_item\"\r\n                }\r\n              },\r\n              \"display\": {\r\n                \"announce_to_chat\": true,\r\n                \"description\": {\r\n                  \"text\": \"P I G\"\r\n                },\r\n                \"frame\": \"task\",\r\n                \"hidden\": false,\r\n                \"icon\": {\r\n                  \"item\": \"minecraft:spyglass\"\r\n                },\r\n                \"show_toast\": true,\r\n                \"title\": {\r\n                  \"text\": \"Is It a Pig?\"\r\n                }\r\n              },\r\n              \"requirements\": [\r\n                [\r\n                  \"spyglass_at_pig\"\r\n                ]\r\n              ]\r\n            }\r\n            \"\"\"\r\n        );\r\n    }\r\n}\r\n\r\n```",
    "head_branch": "fix-load-advancement",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix UnsafeValues#loadAdvancement (#9753)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a39ed9087c4d6d376456",
    "number": 9751,
    "body": "Opening this for historical purposes, not to be merged",
    "head_branch": "dev/1.20.2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit)\n\nUpstream has released updates that appear to apply and compile correctly.\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\n\nBukkit Changes:\nfb23cbb3 Define surefire plugin version\nd022084a Define ordering for MetadataStoreTest\n99a7f6f0 PR-910: Match generic max absorption attribute name style with the rest\nc7390d71 PR-909: Update tests to JUnit 5\n\nCraftBukkit Changes:\nf0661c351 PR-1230: Move unstructured PDC NBT serialisation to SNBT\n452fcb599 PR-1256: Update tests to JUnit 5"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a39fd9087c4d6d376457",
    "number": 9748,
    "body": null,
    "head_branch": "dev/1.20.2-log-ips-migration",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Migrate paper log ips option to new server.properties option"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3a0d9087c4d6d376458",
    "number": 9747,
    "body": "fixes https://github.com/PaperMC/paperweight/issues/194\r\n\r\ndepends on https://github.com/PaperMC/paperweight/pull/237",
    "head_branch": "shade-filtered-jar",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "build: Compile against and shade the filtered jar (#9747)\n\n* Compile against & shade the filtered jar\r\n\r\n* Move check for if the paper asset root needs to be pushed\r\n\r\n* Don't disable incremental compilation\r\n\r\n* Remove mavenLocal\r\n\r\n* use paperweight release"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3a1d9087c4d6d376459",
    "number": 9746,
    "body": null,
    "head_branch": "dev/fixup-display-slots",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fixup display slots patch (#9746)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3a2d9087c4d6d37645a",
    "number": 9745,
    "body": null,
    "head_branch": "dev/fixup-advancement",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixup advancement patch (#9745)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3a3d9087c4d6d37645b",
    "number": 9739,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n69c7ce23 PR-990: Use Mockito instead of InvocationHandler for test mocking\r\n997de31d PR-893: Add a stream method to Registry to make it easier to use and to avoid unnecessary wrapping\r\n6a8ce581 Fix malformed javadoc in previous commit\r\n26c74f6d PR-890: Add more Sculk API (bloom, shriek, bloom event)\r\naa067abf PR-895: Load GameEvent and MusicInstrument from registry\r\n\r\nCraftBukkit Changes:\r\n78796c9de Add support for Java 21\r\nddc9a2dad SPIGOT-7475: Don't fire SculkBloomEvent during world generation\r\ncaee2311a PR-1245: Add a stream method to Registry to make it easier to use and to avoid unnecessary wrapping\r\nde421cf56 PR-1242: Add more Sculk API (bloom, shriek, bloom event)\r\n00f5a80fb PR-1252: Fix error when generating a tree in water\r\n10219df3a PR-1248: Load GameEvent and MusicInstrument from registry",
    "head_branch": "update-upstream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#9739)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n69c7ce23 PR-990: Use Mockito instead of InvocationHandler for test mocking\r\n997de31d PR-893: Add a stream method to Registry to make it easier to use and to avoid unnecessary wrapping\r\n6a8ce581 Fix malformed javadoc in previous commit\r\n26c74f6d PR-890: Add more Sculk API (bloom, shriek, bloom event)\r\naa067abf PR-895: Load GameEvent and MusicInstrument from registry\r\n\r\nCraftBukkit Changes:\r\n78796c9de Add support for Java 21\r\nddc9a2dad SPIGOT-7475: Don't fire SculkBloomEvent during world generation\r\ncaee2311a PR-1245: Add a stream method to Registry to make it easier to use and to avoid unnecessary wrapping\r\nde421cf56 PR-1242: Add more Sculk API (bloom, shriek, bloom event)\r\n00f5a80fb PR-1252: Fix error when generating a tree in water\r\n10219df3a PR-1248: Load GameEvent and MusicInstrument from registry"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a3a4d9087c4d6d37645c",
    "number": 9728,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8954\r\n\r\nTakes advantage of modifying default vanilla resource files to change all the bedrock roof/floors to a custom condition source that accounts for the world config.\r\n\r\nSupersedes https://github.com/PaperMC/Paper/pull/8955\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9728.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/976218551.zip)",
    "head_branch": "fix/flat-bedrock",
    "is_a_fork": true,
    "comments": [
      "Tested PR. Changed configs as showed in issue. Bedrock generation in new world is flat."
    ],
    "commit_messages": [
      "fix flat bedrock world config (#9728)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a3a5d9087c4d6d37645d",
    "number": 9727,
    "body": "Pretty much the same thing as this: https://github.com/PaperMC/Paper/blob/29d1c7b60244bb002d29a5dcfc9c995019f550ab/patches/server/0281-Don-t-allow-digging-into-unloaded-chunks.patch#L4 just for ServerboundUseItemOnPacket. There isn't really a need to use up any more time handling the packet if its in an unloaded chunk.",
    "head_branch": "Disallow-using-items-in-unloaded-chunks",
    "is_a_fork": true,
    "comments": [
      "Thank you for your third attempt at ensuring unloaded chunks stay untouched!\r\nAs with the two previous ones, this one does not look particularly bullet proof.\r\nIf you want to contribute to paper, maybe check for some easier PRs first before touching such delicate logic :+1: \r\n\r\nTo potentially save you and us some more time, none of these changes are going to be backported to 1.19 or Folia.\r\nThe version is end of life and will at best receive critical bug fixes.\r\n\r\nThank you for your contribution and the good attempts :+1: "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3a6d9087c4d6d37645e",
    "number": 9726,
    "body": "Trigger ServerCommandEvent in Bukkit.dispatchCommand, if the event is cancelled Bukkit.dispatchCommand returns false.\r\n\r\n**Related issue**\r\n#9644 \r\n\r\n_I hope I am doing it right, it's my first time contributing to a project_",
    "head_branch": "serverCommandEvent",
    "is_a_fork": true,
    "comments": [
      "Hi, welcome to paper!\r\nThank you for the contribution, however the issue you are trying to fix is already being tackled by two open PRs :sweat_smile:\r\n\r\nBeyond that, it seems like you ran into some trouble with the patch system, an update to the Bukkit module is not really how the repository works for paper-specific code.\r\nIf you find another issue you want to work on, feel free to stop by our [discord](https://discord.gg/papermc) for some help with the patch system if you need it :)\r\n\r\nThank you again! Happy to see people trying to contribute, it is appreciated!\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3a7d9087c4d6d37645f",
    "number": 9725,
    "body": "Trigger ServerCommandEvent in Bukkit.dispatchCommand, if the event is cancelled Bukkit.dispatchCommand returns false.\r\n\r\n**Related issue**\r\n#9644 \r\n\r\n_I hope I am doing it right, it's my first time contributing to a project_",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3a8d9087c4d6d376460",
    "number": 9724,
    "body": "Closes #9714\r\n\r\nPreviously the BlockRedstoneEvent was called for every update even non redstone related one and was always unpowered (15 -> 0). Now only two events at least are called (four when cancelled, i'm not 100% sure about) and the redstone current changes are properly respected.",
    "head_branch": "fix/redhook",
    "is_a_fork": true,
    "comments": [
      "Can you merge this into https://github.com/PaperMC/Paper/blob/master/patches/server/1032-Call-BlockRedstoneEvents-for-lecterns.patch, rename the title to something like \"Call BlockRedstoneEvent properly\" or something the likes ?\r\n\r\nDon't forget smack yourself as a co-author :pray: ",
      "Tested on base and pr. Issues reproduced on base for both tripwire hooks and lecterns. Fix confirmed for both in pr"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3a9d9087c4d6d376461",
    "number": 9721,
    "body": "Closes #9718",
    "head_branch": "fix/lectern-redstone-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Call BlockRedstoneEvents for lecterns (#9721)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3aad9087c4d6d376462",
    "number": 9717,
    "body": "When preventing players from moving into unloaded chunks; I would argue that if a scenario arises where the player is attempting to move to a chunk which is indeed loaded, but is sandwiched between a one or more unloaded chunks it would be more beneficial for the method to return in a place where a warning message is explicitly logged rather than just silently not allowing the movement. \r\n\r\nThis can be done by ensuring that the location of the movement resides in an unloaded chunk.",
    "head_branch": "Ensure-destination-chunk-is-unloaded-when-preventing-movement-into-unloaded-chunks",
    "is_a_fork": true,
    "comments": [
      "No comment from me on this PR, There is no reports of this actually happening, I don't see a point of \"fixing\" such a hypothetical.",
      "> No comment from me on this PR, There is no reports of this actually happening, I don't see a point of \"fixing\" such a hypothetical.\r\n\r\nI wouldn't really refer to it as a \"fix\" per say, more just a slightly more elegant way of handling things. I would imagine a scenario like this would most likely arise out of a client using some form of movement hacking in which case it would probably be better to log as either \"Player moved too fast\" or \"Player moved wrongly\" rather than just returning silently.",
      "I disagree that allowing clients to seemingly teleport through unloaded chunks is a more elegant way of handling this than the current implementation.\r\n\r\nI don't think we are interested in this fix, I hope you can understand where we are coming from here as this is a non issue you are trying to fix.\r\n\r\nThanks non the less!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3abd9087c4d6d376463",
    "number": 9716,
    "body": "Closes #9701",
    "head_branch": "feat/missing-particle-javadoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing particle javadocs (#9716)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a3acd9087c4d6d376464",
    "number": 9715,
    "body": "When a plugin uses Projectile#setShooter(null), the projectileSource will be nulled out, but the cached owner & owner uuid won't be. Additionally, the projectileSource will also be filled back in the next time Projectile#getOwner is called.\r\n\r\nCloses #9710",
    "head_branch": "fix/projectile-set-null-owner",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Projectile#setOwner(null) not clearing owner (#9715)\n\n* Fix Projectile#setOwner(null) not clearing owner\r\n\r\n* rebased and merged into mentioned patch\r\n\r\n---------\r\n\r\nCo-authored-by: Jake Potrebic <jake.m.potrebic@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3add9087c4d6d376465",
    "number": 9713,
    "body": "\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9713.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/917662254.zip)",
    "head_branch": "brain",
    "is_a_fork": false,
    "comments": [
      "Villagers cannot swim.\r\nhttps://youtu.be/-wcMRnTI5yo"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3aed9087c4d6d376466",
    "number": 9712,
    "body": "Based on https://github.com/TECHNOVE/Airplane/blob/ver/1.17/patches/server/0010-Dynamic-Activation-of-Brain.patch. Modified to not have to manually patch every new entity using Brain (other than adding new config defaults), also skipping unnecessary activity checks",
    "head_branch": "brain-activation-distane",
    "is_a_fork": false,
    "comments": [
      "DAB(Dynamic brain activation) drowns AI entities far away from the player.\r\nhttps://youtu.be/B0kRxuuwQ88\r\n\r\nSame Issue: https://github.com/pufferfish-gg/Pufferfish/issues/58",
      "I spent a lot of time fielding complaints from players about this: entities in the distance behaving dumbly (piglin brutes being basically pacifist sometimes), mobs dying for all sorts of reasons (see above) like drowning or suffocation, mobs not reacting properly to plugin actions (like being statue-ified for a bit after teleporting), lots of normally Paper-compatible and fairly innocent farms sporadically and unpredictably breaking, or becoming so slow or stuck at typical distances that it is indistinguishable from broken mob AI.\r\n\r\nI would suggest not enabling this by default.\r\n\r\nAdditionally, the `distanceModifier` is really hard to tweak because the effects between its subsequent values are huge. I would suggest, before merging this, to determine a different, better parameter (potentially less performant, but I really don't think a few floating-point computations are going to be a killer here).\r\n\r\nAnd lastly, even when server owners wish to optimize this, the desirable parameter values can be quite different for different mob types and server observations. I would support adding a way to provide more specific values for particular mob type (groups).",
      "eyes too hurty to say much, but, stuff like that video is basically in part why EAR 2.0 exists, if we want to do this, we'd probably want to look at adopting a similar set of concepts",
      "Honestly yeah I agree after looking into it some more, even defaulting to false seems weird with an option that just breaks entities this hard. Here's non-compromising performance improvements I added put into its own patch (keeping this pr as is for history purposes): https://github.com/PaperMC/Paper/pull/9713"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3b0d9087c4d6d376467",
    "number": 9711,
    "body": "Supersedes #9703 \r\n\r\nAs from the author requested: Here a new version with the correct patches and a config option.\r\n\r\nThe config option is located under the `misc` section. I did not know if I should change the version of the config but that should not stop this PR from being merged. \r\n\r\nIs it possible to add people as co-authors so the original author also gets credits? ",
    "head_branch": "compression-level",
    "is_a_fork": true,
    "comments": [
      "You can generally add a coauthor by simply adding their name into the patch, see e.g. https://github.com/PaperMC/Paper/blob/master/patches/server/0872-Fix-a-bunch-of-vanilla-bugs.patch#L60",
      "the placement of the option is ok or should I move that as well? ",
      "> the placement of the option is ok or should I move that as well?\r\n\r\nyea :+1: imo it is.",
      "@Leguan16 good job ;), it'd be nice if paper added on the docs examples of the available compression options with example of rates, as a benchmark of course, this should benefit a few servers a lot with bandwidth decreasing as well as more performance and cost decreasing :)",
      "This does require a PR to the docs before it may be merged yea. @Leguan16 if you have the time, it would be great if you can propose the change there as well :+1: ",
      "I can add a description to the `global-configuration.mdx` what it does but I have no time to benchmark this and create a proper docs page for it. Besides, I don't even know how I should benchmark this. \r\n@PedroMPagani you seem to know what it does exactly so what should I put in the description (So I have it correct)? ",
      "I don't see the usage for benchmarking on the docs. A quick explanation that a higher compression level means more CPU time spend for less data transmitted and a lower value meaning less CPU time spend but more data transmitted is fine.",
      "Alright! I will add that later.",
      "I opened a PR in the docs repo\r\nhttps://github.com/PaperMC/docs/pull/242",
      "Docs is ready to go 😄"
    ],
    "commit_messages": [
      "compression level change with config option (#9711)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3b1d9087c4d6d376468",
    "number": 9709,
    "body": "Fixes MC-868\r\nAdds a check if distance between minecart and detector rail is less than maximum distance of the centre of a block to the edge of a block (0.5)\r\n\r\nCloses\r\n#9698 ",
    "head_branch": "FIX-MC-868",
    "is_a_fork": true,
    "comments": [
      "Throughout the MC codebase to avoid the math.sqrt function (expensive) the distance checks are made on squared values.\r\n\r\nIf the classic formula is math.sqrt((x2-x1)²+(y2-y1)²) < limit\r\n\r\nthen removing sqrt on both sides of the equation leaves (x2-x1)²+(y2-y1)² < limit²\r\n\r\nThe ...distanceSquared function should be somewhere in vanilla. Please double-check me on the 0.5d² value.",
      "> This breaks (possibly) expected behavior for the detector rail as it currently operates. I created the setup below and summoned a minecart at varying points on the track horizontally. In vanilla, I could spawn it on 3/10ths of the adjacent block and it would still trigger the detector rail. With this PR, the position has to be within the detector block x/z coord.\n\nFrom testing that I did prior to posting the PR, I used the sqrt(2) as the maximum distance (centre to corner). When I had used this, the bug would still persist (considering a velocity of 0.7 or greater from memory), which I believe what current basic vanilla function uses. I think this is because the block is picked up by the detector rail on the corner is made by the rail converting the rail.\n\nI believe the vanilla state is broken as a result as the block should only take the entities from the basic orthogonal directions as it can only face 4 directions, and to this that it's attempting to detect then interacting entity (entity within block), not centre to corner.\n\nI do believe some redstone contraptions that use detector rails should be used as a test to see if any current redstone contraptions will break. Only thing I can think of is if the redstone is required to be on for that fraction of a second longer or a block as you mentioned.",
      "Treeman, did you consider the fix posted in the originial MC-868? [Link to comment by FX - PR0CESS](https://bugs.mojang.com/browse/MC-868?focusedId=1163054&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-1163054)\r\n\r\n> Now I will mention why this should not be fixed xD\r\n> \r\n> When changing this code you run into an issue with client rendering. Due to the client using interpolation, the client will render the minecart as if it's turning and then put it in the right place. So that issue should be solved first... which is not an easy issue to fix.",
      "> Treeman, did you consider the fix posted in the originial MC-868? [Link to comment by FX - PR0CESS](https://bugs.mojang.com/browse/MC-868?focusedId=1163054&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-1163054)\n> \n> > Now I will mention why this should not be fixed xD\n> > \n> > When changing this code you run into an issue with client rendering. Due to the client using interpolation, the client will render the minecart as if it's turning and then put it in the right place. So that issue should be solved first... which is not an easy issue to fix.\n\nHis solution checks a single co-ordinate/position.",
      "Judging by MM's comment, it's probably not best for us to touch this since this may have implications in the whole technical world. This may also be behavior that is still used, so not sure if it's our place to patch something like this.\r\n\r\nAdditionally, I am not sure the code you are using will work on most setups due to it using awt classes.\r\n\r\nThank you for your contribution, regardless. :)"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3b2d9087c4d6d376469",
    "number": 9707,
    "body": "fixItemsMergingThroughWalls",
    "head_branch": "fix-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix fixItemsMergingThroughWalls check (#9707)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3b3d9087c4d6d37646a",
    "number": 9706,
    "body": "fixItemsMergingThroughWalls",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3b4d9087c4d6d37646b",
    "number": 9704,
    "body": "My finest work yet. Just a simple way to fetch the time an EntityDamageEvent happened. \r\n\r\nUnsure if we want to use things like epoch time still or whether we're trying to use things like ticks or other time measurements; happy to update as needed if so.",
    "head_branch": "timedamaged",
    "is_a_fork": true,
    "comments": [
      "is this different to calling System.currentTimeMillis(); in your event handler?\r\nor maybe a stupid suggestion, if its useful here, wouldnt it be useful in every event, as an interface / smth",
      "I mean, for most intents and purposes, the difference will be minimal unless you're posting that off async; time millis is generally fast enough, so it's not a big deal but I don't exactly see an inherient advantage here; isn't this one of the things that mojang stores a timestamp for the packet? ",
      "If there is ever API for DamageSources and the CombatTracker, I could see a timestamp added to each DamageSource being useful, because then time, involved entities, direction and type of each instance of damage received would be together. \r\nBut currently I fail to see the advantage over just listening to the event and storing the timestamp yourself.\r\n\r\nVanilla only tracks combat start and end time as well as the time since the last attack, not timestamps for individual damages.",
      "> is this different to calling System.currentTimeMillis(); in your event handler? or maybe a stupid suggestion, if its useful here, wouldnt it be useful in every event, as an interface / smth\r\n\r\nThe difference (for me) is that EntityDamageEvent is something that can be later accessed off an Entity with `getLastDamageCause()`, whereas most other events are instant and not stored.\r\n\r\n> But currently I fail to see the advantage over just listening to the event and storing the timestamp yourself.\r\n\r\nMostly it's because this is a trivial object addition to an event whereas one would need to start managing HashMaps etc for this which would certainly be (a little) more effort, memory cost, and the like. It's certainly not a vital addition but I could see it being useful for others. All else fails I'll just continue using it in my fork.\r\n\r\nLike with above, considering that you can fetch `getLastDamageCause()` off an Entity at any point, being able to tell _when_ that event happened can be useful.",
      "This is generally the weird area of \"I can get the why\" but, It feels weird to accept this for just a single set of events, but it would also be weird to shove it for all events. I think this gets into the pattern where people for years have just wanted a general form of mechanism to attach data to event objects",
      "@Cryptite PR requires rebasing (see https://github.com/PaperMC/Paper/blob/master/CONTRIBUTING.md#rebasing-prs)",
      "After rebasing, tested PR. Confirmed working",
      "Yeah, I don't see the point in this. And in general, this API will need to be reworked for the whole proper damagecause system. ",
      "> Yeah, I don't see the point in this. And in general, this API will need to be reworked for the whole proper damagecause system.\r\n\r\nIf there were a DamageCause class object, rather than just an enum, that would be a nice place to put something like this.",
      "Yea I think I'll close this for now.\r\n\r\nI 100% see the usecase for this, but yea, merging a temporary solution when we know we want a better one down the line seems rough for an API that wants to be backwards compatible if possible.\r\n\r\nI am glad to see that the patch found a place in Slice however 😉 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3b5d9087c4d6d37646c",
    "number": 9703,
    "body": "\r\nYou are free to benchmark this on your own, this benchmark from my part was done on DonutSMP events, that get around 700-800 players in a close 400x400 area where there's a lot of Crystal PVP everywhere, lots of chunk interactions etc, compression is highly necessary on environments like this, and a few servers also use this, it's a quick change and most users shouldn't ever feel any need to have this changed but it's a good software improvement if you confirm this should be applied.\r\n\r\nThis made a buffer compression of around 40kb to 25kb just with little difference from -1, and with MUCH faster speeds.\r\n",
    "head_branch": "compression-patch",
    "is_a_fork": true,
    "comments": [
      "I don't have much time to do this and I also haven't touched much of the patch system, if anyone else who wants to become a contributor of the project wants to take this on, feel free to do the required changes ;)",
      "Superseded "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3b6d9087c4d6d37646d",
    "number": 9702,
    "body": "You are free to benchmark this on your OWN, this benchmark from my part was done on DonutSMP events, that get around 700-800 players in a close 400x400 area where there's a lot of Crystal PVP everywhere, lots of chunk interactions etc, compression is highly necessary on environments like this, and a few servers also use this, it's a quick change and most users shouldn't ever feel any need to have this changed but it's a good software improvement if you confirm this should be applied.\r\n\r\nThis made a buffer compression of around 40kb to 25kb just with little difference from -1, and with MUCH faster speeds.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3b7d9087c4d6d37646e",
    "number": 9700,
    "body": "Fixup of #9183 and #9256\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9700.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/1028852122.zip)",
    "head_branch": "secure-profile-fix",
    "is_a_fork": true,
    "comments": [
      "Don't link to jars pls, we have a label for that",
      "The enforceSecureProxyProfile setting seems unnecessary when you can just toggle the setting in server properties?",
      "> The enforceSecureProxyProfile setting seems unnecessary when you can just toggle the setting in server properties?\r\n\r\nremoved",
      "You might want to merge the patches tho",
      "bump",
      "I really need this, this bug is so annoying ",
      "I don't know whether the isProxyOnlineMode method provided the isOnlineMode check before, but I removed the unnecessary double check on my end.",
      "bump nr2",
      "The Paper team is made of volunteers who all have lives. We appreciate that you would like this to be merged and we thank you for your work, however bumping like this is only irritating. Please refrain from doing this in future 😁",
      "I was worried about this PR given that it had some side effects internally which where overlooked and I didn't have the means to test/look into it, finally having good hardware, finally got to testing it, and it looks fine",
      "Is this going to be merged anytime soon?",
      "Yes!"
    ],
    "commit_messages": [
      "fix secure profile with proxy online mode (#9700)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3b8d9087c4d6d37646f",
    "number": 9699,
    "body": "Avoids block change acks for blocks which are potentially out of a players reach.",
    "head_branch": "Avoid-potentially-unnecessary-block-ack",
    "is_a_fork": true,
    "comments": [
      "Can you please further explain your change here? This part of the code is rather sensitive, and would appreciate why exactly you are making this change here.\r\n\r\nSince, you are eliminating two places where the block ack occurs. But it doesn't really make sense why these acks should be cancelled, as if the client does introduce something like this (which may be due to a desync) it would make sense to do this ack to revert it clientside.\r\n\r\nAdditionally, this causes a bit of a desync as then the client is predicting this stage but an ack wasn't sent back, meaning next ack will also cause this prediction to be reverted. So.. not really sure what this is targeting. \r\n\r\nClient Side Prediction:\r\n```java\r\nthis.startPrediction(this.minecraft.level, $$2 -> {\r\n               this.destroyBlock($$0);\r\n               return new ServerboundPlayerActionPacket(ServerboundPlayerActionPacket.Action.START_DESTROY_BLOCK, $$0, $$1, $$2);\r\n            });\r\n```\r\n\r\nVanilla server (always sends back ack):\r\n```java\r\ncase STOP_DESTROY_BLOCK:\r\n            this.player.gameMode.handleBlockBreakAction($$1, $$2, $$0.getDirection(), this.player.level().getMaxBuildHeight(), $$0.getSequence());\r\n            this.player.connection.ackBlockChangesUpTo($$0.getSequence());\r\n            return;\r\n```",
      "> Can you please further explain your change here? This part of the code is rather sensitive, and would appreciate why exactly you are making this change here.\r\n> \r\n> Since, you are eliminating two places where the block ack occurs. But it doesn't really make sense why these acks should be cancelled, as if the client does introduce something like this (which may be due to a desync) it would make sense to do this ack to revert it clientside.\r\n> \r\n> Additionally, this causes a bit of a desync as then the client is predicting this stage but an ack wasn't sent back, meaning next ack will also cause this prediction to be reverted. So.. not really sure what this is targeting.\r\n> \r\n> Client Side Prediction:\r\n> \r\n> ```java\r\n> this.startPrediction(this.minecraft.level, $$2 -> {\r\n>                this.destroyBlock($$0);\r\n>                return new ServerboundPlayerActionPacket(ServerboundPlayerActionPacket.Action.START_DESTROY_BLOCK, $$0, $$1, $$2);\r\n>             });\r\n> ```\r\n> \r\n> Vanilla server (always sends back ack):\r\n> \r\n> ```java\r\n> case STOP_DESTROY_BLOCK:\r\n>             this.player.gameMode.handleBlockBreakAction($$1, $$2, $$0.getDirection(), this.player.level().getMaxBuildHeight(), $$0.getSequence());\r\n>             this.player.connection.ackBlockChangesUpTo($$0.getSequence());\r\n>             return;\r\n> ```\r\n\r\nMy thinking was that it didn't really seem necessary to acknowledge the player breaking a block which is out of their reach. If this prediction would be reverted by the next (within breaking range) ack from the server, wouldn't this be saving on a packet being sent?",
      "Well, the issue is that it more leaves the client in a \"still predicting\" state even after the block break has finished.",
      "Closing due to reasons mentioned above, and in general this leaves the client in an invalid still predicting... state."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3b9d9087c4d6d376470",
    "number": 9696,
    "body": "Swap a lot of wrong nullable annotations (only events for now)\r\n\r\nSome example:\r\nThe SpawnerSpawnEvent#getSpawner can become null when the spawn is done from a minecart spawner\r\nand the HangingBreakByEntityEvent#getRemover doesn't seems to be null even when the entity is damaged by an explosion.",
    "head_branch": "fix/nullableannot",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Swap some nullable annotations (#9696)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a3bad9087c4d6d376471",
    "number": 9695,
    "body": "Stops desync (most likely caused by latency) in the event of a player updating a block which the server hasn't recognized as a sign.",
    "head_branch": "Fix-sign-update-desync",
    "is_a_fork": true,
    "comments": [
      "Do you have any link to a place this issue you're fixing has been reported at and/or reproduction instructions? As it stands, this PR has a few issues which makes it not mergable:\r\n- Sending a block entity update packet doesn't do anything in terms of desync\r\n- This will cause an NPE if there is no block entity where the client thinks there is one\r\n- There is no range check done",
      "Closing this as in general it's not really certain what you are trying to fix here. Feel free to respond with a more detailed description of your changes, but it's not really understood what kind of \"desync\" this is resolving here."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3bbd9087c4d6d376472",
    "number": 9694,
    "body": "Stops desync (most likely caused by latency) in the event of a player updating a block which the server hasn't recognized as a sign.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3bcd9087c4d6d376473",
    "number": 9693,
    "body": "Adds Foiled/Glow API using NBT. \r\n\r\nPossibly can add the API to the Overrides for the default items that are foiled. Follows most of the logic of the unbreakable tag.\r\n\r\nRelevant:\r\n#5274 \r\n\r\nAlso not sure if this is going to be relevant due to #8711.\r\n\r\nP.S. For some reason Patch 1018 was edited and it says it removed something? I also can't rebuild or apply new patches after rebuilding the first time which is confusing to me. \r\n\r\n",
    "head_branch": "Foiled-NBT",
    "is_a_fork": true,
    "comments": [
      "I honestly think this might be best to keep for property API.\r\n\r\nThere is certainly a need for \"glowing\" but given that mojang does not support this natively without the empty enchant array, exposing this to the API seems a tad bleh, we are kinda just hacking for the plugin user abusing the \"quirk\" that the client still displays enchantment glint on an empty but present enchantment array.\r\n\r\nimo it is a mistake to promote this to a stable API interface like ItemMeta. The property API would make a lot more sense as the user is responsible for the data they input and can hack around in there, making it a lot clearer that what they are doing might not be 100% valid state.\r\n\r\nGiven we also closed MM's PR for this (#5725), imo this is probably not worth continuing your effort here and just letting property API handle it once out. Obviously just my opinion, I'd love to hear your and other people's thought on this.",
      "Thank you for your contribution, however yes I am more inclined to side with lynx's comment... especially with the sensitive nature of itemstacks currently.",
      "> There is certainly a need for \"glowing\" but given that mojang does not support this natively without the empty enchant array, exposing this to the API seems a tad bleh, we are kinda just hacking for the plugin user abusing the \"quirk\" that the client still displays enchantment glint on an empty but present enchantment array.\r\n\r\nSo from my understanding of this is that client not detecting the following server code. Am I correct with this understanding? Or is it not picking up the last statement correctly?\r\n```java\r\npublic boolean isEnchanted() {\r\n        return this.tag != null && this.tag.contains(\"Enchantments\", 9) ? !this.tag.getList(\"Enchantments\", 10).isEmpty() : false; \r\n}\r\n```\r\n> Given we also closed MM's PR for this (https://github.com/PaperMC/Paper/pull/5725), imo this is probably not worth continuing your effort here and just letting property API handle it once out. Obviously just my opinion, I'd love to hear your and other people's thought on this.\r\n\r\nI believe MM made a fake enchantment, whereas this focuses on having either an enchantment or NBT associated with the item.\r\n```java\r\n// This what all the Override items reference, I've just added an additional check to the is Foiled method, similar to that of the isEnchanted\r\npublic boolean isFoil(ItemStack stack) {\r\n        return stack.isEnchanted() || stack.isFoiled();\r\n}\r\n\r\npublic boolean isFoiled() {\r\n        return this.tag != null && this.tag.contains(\"Foiled\") && this.tag.getBoolean(\"Foiled\");\r\n}\r\n```\r\nI believe with a touchup, it would be more than stable as it is essentially the same as the \"Unbreakable\" tag. Also left it as draft as I think a discussion would be better than just going straight into review.\r\n\r\n",
      "From what it seems from testing, the glowing is handled by the client and the conditions as well so any server side changes won't impact if an item glows."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3bdd9087c4d6d376474",
    "number": 9692,
    "body": "misses a proper link to the docs site\r\n\r\ntested with these things:\r\n```\r\nD:\\IntellijProjects\\PaperClean\\run>D:\\Programms\\graalvm-ce-java19-22.3.0\\bin\\java.exe -jar paper-bundler-1.20.1-R0.1-SNAPSHOT-mojmap.jar      \r\nStarting org.bukkit.craftbukkit.Main\r\nSystem Info: Java 19 (OpenJDK 64-Bit Server VM 19.0.1+10-jvmci-22.3-b08) Host: Windows 11 10.0 (amd64)\r\n\r\nD:\\IntellijProjects\\PaperClean\\run>D:\\Programms\\graalvm-jdk-20.0.2+9.1\\bin\\java.exe -jar paper-bundler-1.20.1-R0.1-SNAPSHOT-mojmap.jar\r\nStarting org.bukkit.craftbukkit.Main\r\nSystem Info: Java 20 (Java HotSpot(TM) 64-Bit Server VM 20.0.2+9-jvmci-23.0-b14) Host: Windows 11 10.0 (amd64)\r\n\r\nD:\\IntellijProjects\\PaperClean\\run>C:\\Users\\Martin\\Downloads\\openjdk-22-ea+14_windows-x64_bin\\jdk-22\\bin\\java.exe -jar paper-bundler-1.20.1-R0.1-SNAPSHOT-mojmap.jar\r\nStarting org.bukkit.craftbukkit.Main\r\nUnsupported Java detected (22-ea). You are running an unsupported, non official, version. Only general availability versions of Java are supported. Please update your Java version. See https://docs.papermc.io/link-to-faq for more information.\r\n\r\nD:\\IntellijProjects\\PaperClean\\run>C:\\Users\\Martin\\Downloads\\openjdk-22-ea+14_windows-x64_bin\\jdk-22\\bin\\java.exe -DPaper.IgnoreJavaVersion=true -jar paper-bundler-1.20.1-R0.1-SNAPSHOT-mojmap.jar \r\nStarting org.bukkit.craftbukkit.Main\r\nUnsupported Java detected (22-ea), but the check was skipped. Proceed with caution! \r\nSystem Info: Java 22 (OpenJDK 64-Bit Server VM 22-ea+14-1033) Host: Windows 11 10.0 (amd64)\r\n\r\nD:\\IntellijProjects\\PaperClean\\run>C:\\Users\\Martin\\.jdks\\corretto-20.0.1\\bin\\java.exe -jar paper-bundler-1.20.1-R0.1-SNAPSHOT-mojmap.jar\r\nStarting org.bukkit.craftbukkit.Main\r\nSystem Info: Java 20 (OpenJDK 64-Bit Server VM 20.0.1+9-FR) Host: Windows 11 10.0 (amd64)\r\n\r\nD:\\IntellijProjects\\PaperClean\\run>C:\\Users\\Martin\\.gradle\\jdks\\jdk8u332-b09\\bin\\java.exe -jar paper-bundler-1.20.1-R0.1-SNAPSHOT-mojmap.jar\r\nMinecraft 1.19 requires running the server with Java 17 or above. Download Java 17 (or above) from https://adoptium.net/\r\n\r\nD:\\IntellijProjects\\PaperClean\\run>C:\\Users\\Martin\\.gradle\\jdks\\eclipse_foundation-16-amd64-windows\\jdk-16.0.2+7\\bin\\java.exe -jar paper-bundler-1.20.1-R0.1-SNAPSHOT-mojmap.jar\r\nMinecraft 1.19 requires running the server with Java 17 or above. Download Java 17 (or above) from https://adoptium.net/\r\n\r\nD:\\IntellijProjects\\PaperClean\\run>C:\\Users\\Martin\\Downloads\\OpenJDK17U-jre_x64_windows_hotspot_2023-09-08-07-10\\jdk-17.0.9+6-jre\\bin\\java.exe -jar paper-bundler-1.20.1-R0.1-SNAPSHOT-mojmap.jar\r\nStarting org.bukkit.craftbukkit.Main\r\nUnsupported Java detected (17.0.9-beta). You are running an unsupported, non official, version. Only general availability versions of Java are supported. Please update your Java version. See https://docs.papermc.io/link-to-faq for more information.\r\n\r\n```",
    "head_branch": "feature/improve-java-version-check",
    "is_a_fork": false,
    "comments": [
      "https://github.com/PaperMC/Paperclip/pull/65 is related",
      "I cant figure out why the diff is so messed up in the chunk patch, somebody pls handle that on merging, I g2g\r\nthis is good to go otherwise, when the docs pr is merged",
      "> I cant figure out why the diff is so messed up in the chunk patch\r\n\r\nIt's gonna be something relating to whatever patch/diff tools are being used by paperweight on your machine that creates inconsistent (at least with everyone else) diff. A simple apply and rebuild on my machine removed all of them."
    ],
    "commit_messages": [
      "Improve java version check (#9692)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3bed9087c4d6d376475",
    "number": 9691,
    "body": "Adds an overload to `World#rayTrace` and `World#rayTraceBlocks` that accepts a `Predicate<Block>`. Blocks that match the predicate are ignored for collision calculations.",
    "head_branch": "add-block-predicate",
    "is_a_fork": true,
    "comments": [
      "There's two points I'm unsure about:\r\n- Should the predicate be for `BlockState` instead of `Block`?\r\n- Is the cast to `LevelAccessor` fine? The `passThrough` predicate is only non-null when the `BlockGetter` is an instance of `ServerLevel`.",
      "> Should the predicate be for BlockState instead of Block?\r\n\r\nNo, `Block` is perfect for this. It is just a wrapper for a world and position so it is more efficient than creating BlockState for every position checked.\r\n\r\n> Is the cast to LevelAccessor fine? The passThrough predicate is only non-null when the BlockGetter is an instance of ServerLevel.\r\n\r\nTo be safe, I would also, in addition to the null check, have an instanceof check."
    ],
    "commit_messages": [
      "Add predicate for block when raytracing (#9691)\n\n* Add predicate for block data when raytracing blocks\r\n\r\n* Match based on block, instead of block data\r\n\r\n* Use instanceof instead of casting\r\n\r\n* Use Position instead of Location, add overload for rayTraceEntities\r\n\r\n* Implement requested changes\r\n\r\n* Invert predicate\r\n\r\n* Cleanup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a3bfd9087c4d6d376476",
    "number": 9689,
    "body": "Enforces the nullability when setting a Sign Line with the Adventure Method",
    "head_branch": "feat/enforce_sign_line_nullability",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Enforce sign line nullability when setting line with Adventure Method (#9689)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3c0d9087c4d6d376477",
    "number": 9688,
    "body": "Adds API to handle the individual experience points of a player. This is what the existing get/setTotalExperience should have been, but we never got.\r\n\r\nI know that the implementation is kind of top-tier cursed, but thanks to the three different equations Mojang has choosen this is what it is. If something like _this_ is not desired in Paper just close the PR, although it would be nice to have.\r\n\r\nI have tested this method up to I think it was around 39,000,000 experience points/level 2961 and the math still checked out",
    "head_branch": "experience-points-api",
    "is_a_fork": true,
    "comments": [
      "what is the difference here to the other method?\r\nthat should definitely be documented on both methods, old and new, so that we dont leave people guessing or having to look at the code (which I cant right now, hence the question)",
      "> what is the difference here to the other method? that should definitely be documented on both methods, old and new, so that we dont leave people guessing or having to look at the code (which I cant right now, hence the question)\r\n\r\nTo quote the JavaDocs for the existing methods:\r\n> Gets the players total experience points.\r\n>\r\n> This refers to the total amount of experience the player has collected\r\n> over time and is not currently displayed to the client.\r\n\r\nAs far as I can tell the current total experience is a cumulative counter of experience points that have been acquired since the last time the player had 0 levels and points, but only loosely because only some methods of NMS ServerPlayer actually update this value and none of the Bukkit API methods except for the explicit setter, making this value useless.\r\n\r\nVanilla appears to use that value to determine if the player should receive an update experience packet or not and for some objective criterias, but seems otherwise unused ",
      "I think it is worth to add a test here. You can create a mock player relatively quickly (see how GameTestHelper does it).\r\nThat way, in future releases and changes, this API does fail a test when it goes out of sync with vanilla given we cannot really use internal logic for the API but have to re-create it.",
      "Mocking a Bukkit Player isn't as easy:\r\n- Bukkit Player\r\n  -  nms ServerPlayer\r\n     - MinecraftServer <- Requires a lot more stuff\r\n     - ServerLevel\r\n        - Level <- Mocking errors because some registries are referenced in static fields that are obviously not initialized",
      "Yea, you are right. The fact that some of the paper code takes a level for granted makes this annoying.\r\nI guess this is fine then, we just need to invest time into integration testing frameworks down the line :upside_down_face: "
    ],
    "commit_messages": [
      "Add experience points api (#9688)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a3c1d9087c4d6d376478",
    "number": 9687,
    "body": "Adds Barrel to the LootableBlockInventory Interface as it is currently missing.",
    "head_branch": "Add-Barrel-to-LootableBlockInventory",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Barrel to LootableBlockInventory (#9687)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a3c2d9087c4d6d376479",
    "number": 9686,
    "body": "Closes #8462\r\n\r\nThe FollowOwnerGoal is ticked before the re-leashing logic inside Mob#restoreLeashFromSave is, which allows tamables to teleport to their owners in their first tick. This PR fixes that by also checking whether the entity has a \"pending\" leash before running the goal.",
    "head_branch": "fix/mc-173303",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix leashed pets teleporting to owner when loaded (#9686)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3c3d9087c4d6d37647a",
    "number": 9685,
    "body": "This PR adds a simple warning if a `commands` section has been found in the `paper-plugin.yml` file.\r\n\r\nI am taking suggestions for the warning message since I don't know if I should include how to register commands with Paper Plugins. \r\nI also did not know which logger I should use since I don't think a plugin logger has already been created at the time where the warning is printed. \r\n\r\nWhich brings me to the next point:\r\nCurrently the warning is printed before the server is started: \r\n\r\n```.sv\r\nLoading libraries, please wait...\r\n2023-09-04 17:30:38,271 main WARN Advanced terminal features are not available in this environment\r\n[17:30:38 WARN]: [Paper-Test-Plugin] Defining commands in paper-plugin.yml is not supported! <-------\r\n[17:30:41 INFO]: Environment: authHost='https://authserver.mojang.com', accountsHost='https://api.mojang.com', sessionHost='https://sessionserver.mojang.com', servicesHost='https://api.minecraftservices.com', name='PROD'\r\n[17:30:42 INFO]: Loaded 7 recipes\r\n[17:30:42 INFO]: Starting minecraft server version 1.20.1\r\n```\r\nI don't think there is a way of printing the warning during the plugin load period (unless we add a boolean or something) since I don't think it is not possible to get the node after the `PaperPluginMeta#create()` method. \r\n\r\n\r\nCloses #9669",
    "head_branch": "commands-tag-warn",
    "is_a_fork": true,
    "comments": [
      "Tbh, It's a bit worrying that people are using these plugins like this, to the point where we need to warn if they aren't even reading the documentation.\r\n![image](https://github.com/PaperMC/Paper/assets/23108066/1f017689-b7ea-4d14-836c-5f00c78ada5d)\r\n\r\nThat format is still very much subject to change, and in all honesty, I would rather have some kind of warning if a paper plugin is being loaded... because those are very much still experimental and are waiting for future API. \r\n\r\nAnd if a developer is actively handing out Paper plugins, /shrug what fun.\r\n\r\n",
      "That is a good point. But I think the one thing has little to do with the other. \r\nI think many people are creating a Paper plugin with the MinecraftDev IJ plugin and don't even realize that its different to Bukkit Plugins. So what you suggested should probably be handled over there by adding a little warning next to the paper manifest checkbox. \r\n\r\nYou can see it in the Discord that people are even too lazy to read JavaDocs so we cannot assume that they read the docs. The best thing we can do is give them a hint that they did something wrong on our side.  \r\n",
      "> And if a developer is actively handing out Paper plugins, /shrug what fun.\r\n\r\nThere are already plugins published on Modrinth using the paper-plugin.yml. I recall viewing this myself.\r\n\r\nWith all due respect, one should not publish an API to a popular project without expecting its use. The adoption of Paper plugins began as soon as a newfangled API for declaring plugin metadata was released. These shifts are not necessarily misguided, as the original impetus for Paper plugins outlined several use-cases which remain relevant: https://github.com/PaperMC/Paper/issues/7955",
      "> With all due respect, one should not publish an API to a popular project without expecting its use.\r\n\r\nWe do expect *usage* of the API, hence we published it. To collect feedback on it as we further improve it.\r\nI don't think anyone minds people publishing paper plugins, ***IF*** they are aware of the contracts that come along with the usage of paper plugins, specifically changes to format, abi, api without backwards compatibility promises, as explicitly defined via the docs page and the experimental annotation.\r\n\r\nDevelopers that publish such plugins *need* to be aware of those restrictions and risks and what those might mean for their users, hence we mostly expected this API to be used in private plugin development as updating to changes to paper plugins becomes a lot easier.\r\n\r\nTho given how common the question became regarding command definition in paper-plugin.yml, this is clearly not the case as it seems that a lot of people have started using paper plugins without the required insights into the *unstable* API and its limitations. Which is why I 100% agree with your Issue about actively warning to further raise the fact, that they are trying to use unstable API incorrectly.\r\n\r\nIf we have to go as far as printing a warning for paper plugins in general, I am unsure of.\r\nAgain, either developers are already aware of the risks they accept when using paper plugins and use it correctly (aware of breaking changes), not much need for a warning there, or people have ignored *every* warning thrown at them by us, at which point, another warning in their server logs isn't going to help much.",
      "> There are already plugins published on Modrinth using the paper-plugin.yml. I recall viewing this myself.\r\n\r\nPersonally, I have more than 10 public plugins made based on a `paper-plugin.yml`, I am fully aware that there will be changes in the structure of this type of plugins in the future and I have no problem to update my projects based on the new changes.\r\nWhat I don't agree is to add a warning in console about a paper plugin being loaded, because there would be users asking about the warning and what to do to remove it and the only solution would be to lose exclusivity of all my plugins to be loaded only in Paper, which I want to avoid doing at all cost.",
      "> another warning in their server logs isn't going to help much.\n\nIn my opinion its generally wrong to say that \"it wont help much\". If we have the opportunity to make it more user-friendly we should use that opportunity I dont think a warning doesn't hurt anybody. \n\nAnother idea that had already been mentioned is that we could throw an exception instead of just printing a warning. That way 90% would actually read the message. \n\nBut I am generally against this approach since it would be kind of weird to ONLY throw it if a `commands` section has been found. \n\nIn my opinion a much better approach would be a `InvalidConfigurationException` which is thrown if any unwanted section has been found in the config, and not just for commands. \nThat's why i decided to only print a warning (could make that an error actually).\n\nMaybe it would also be an idea to modify the exception message if someone tries to call `getCommand` and give further hints that it is not the correct way to define commands with Paper plugins. ",
      "With my comment about a warning I was only referring to a general warning comment for loading paper plugins, sorry if that wasn't clear.\n\nI am 100% on board with a warning/exception for an invalid yaml format in the paper-plugin.yml.",
      "cant we have a general yaml format and throw if the format doesnt match? special casing this feels strange\r\n",
      "> special casing this feels strange\n\nusually it isn't really a problem to have random tags in the config.\nThis is rather meant as a hint that defining commands has changed.  \n",
      "> cant we have a general yaml format and throw if the format doesnt match?\n\nA generic exception like \"invalid section <name> found in paper-plugin.yml\" would just again bring the people to the discord asking what they should use instead. \nThe warning is supposed to minimize this. ",
      "What if, instead of checking the `paper-plugin.yml` for a `commands` section, we print a warning if `JavaPlugin#getCommand()` is called by a paper plugin?\r\n\r\n```java\r\n@Nullable\r\npublic PluginCommand getCommand(@NotNull String name) {\r\n    // Paper start - print warning if paper plugin\r\n    if (getResource(\"paper-plugin.yml\") != null) {\r\n        this.logger.warning(\"---------------------------------WARNING--------------------------------\");\r\n        this.logger.warning(\"         Defining commands in paper-plugin.yml is unsupported!          \");\r\n        this.logger.warning(\"      Please refer to the docs for proper command initialization!       \");\r\n        this.logger.warning(\"https://docs.papermc.io/paper/dev/getting-started/paper-plugins#commands\");\r\n        this.logger.warning(\"                    Command will not be initialized!                    \");\r\n        this.logger.warning(\"---------------------------------WARNING--------------------------------\");\r\n        return null;\r\n    }\r\n    // Paper end\r\n    ...\r\n}\r\n```",
      "that seems the nicer way for that particular usecase\r\nnot sure tho if checking for the file is the best way, idk much about the infra behind paper plugins, but there gotta be a nice instanceof check we could do",
      "> but there gotta be a nice instanceof check we could do\r\n\r\ni changed it to \r\n```java\r\nif (!(pluginMeta instanceof PluginDescriptionFile)) {\r\n    this.logger.warning(\"---------------------------------WARNING--------------------------------\");\r\n    this.logger.warning(\"         Defining commands in paper-plugin.yml is unsupported!          \");\r\n    this.logger.warning(\"      Please refer to the docs for proper command initialization!       \");\r\n    this.logger.warning(\"https://docs.papermc.io/paper/dev/getting-started/paper-plugins#commands\");\r\n    this.logger.warning(\"                    Command will not be initialized!                    \");\r\n    this.logger.warning(\"---------------------------------WARNING--------------------------------\");\r\n    return null;\r\n}\r\n```\r\nI am not sure if I should throw an exception instead of returning null. ",
      "Updated it to reflect discussed changes. \nI also decided to throw a RuntimeException instead of returning null. \n\nThe only downside is that it doesn't respond to \n`getServer().getPluginCommand()` yet.  ",
      "I really dislike the notion of this; There are still some Qs over what we want to do long term here, ideally we wanna move away from the broken bukkit command system, however, the expectation of there still being an easy to use command system still exists, etc, etc; it's not 100% decided that such a commands block will never exist, I think that this issue would generally be better off solved with documentation and such\r\n\r\nNot to mention, this would generally cause issues with plugins querying other plugins for commands, etc",
      "Generally I agree with you but good luck getting new people to read the docs. As I have mentioned before this is solely for the purpose of hinting new devs that they are doing something wrong. This can always be removed in the future but to be honest, there are too much plugin tutorials and people will use those tutorials to develope Paper Plugins in the future. So getting people away from the old system will never really work until we remove the methods entirely. And until then I think its a good idea to print such a warning. \n\nThis is also not final but in my opinion its important and more user-friendly to add this (or in another form).",
      "Except this ends up leaking warnings to other plugin invocations of this stuff, which imho makes this a no go on this solution",
      "I think I am closing this in favor of https://github.com/minecraft-dev/MinecraftDev/pull/2122 since it got merged recently. If you ignore this warning there is really nothing else we can do. \r\n\r\nIf someone still thinks this is something worth adding (in another form than how it works at the moment) just let me know :)"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3c4d9087c4d6d37647b",
    "number": 9683,
    "body": "This is required because when changing the result for an anvil (when the event is called because of AnvilMenu.setRenameText method) to an invalid result the item is not synced back to the client",
    "head_branch": "fix-anvil-desync",
    "is_a_fork": true,
    "comments": [
      "what is an \"invalid result\"?",
      "> what is an \"invalid result\"?\n\nFor example if the inputs are a grass block and a stone block, the client predicts that this is not possible and therefore displays that: a crossed out result arrow.\n\nMeanwhile the server could allow this and set the result to some other arbitrary item, but this is not synced to the client"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3c5d9087c4d6d37647c",
    "number": 9682,
    "body": "Hi, this pull requests adds the fix-javadoc-plugin to the \"root\" build file. It automatically adds a \"finalizedBy\" task for each task of the Javadoc type to get rid of the annoying \"double annotations\".\r\n\r\nBefore:\r\n![image](https://github.com/PaperMC/Paper/assets/1122571/b89576a1-9eb0-4145-8d98-6dbc4d65c5b0)\r\n\r\nAfter:\r\n![image](https://github.com/PaperMC/Paper/assets/1122571/faec3671-e3f4-4d51-ba38-82454df0a7d8)\r\n",
    "head_branch": "add-fix-javadoc-plugin",
    "is_a_fork": true,
    "comments": [
      "Here's a link to my fix-javadoc-plugin: https://github.com/mfnalex/gradle-fix-javadoc-plugin\r\n\r\nI'm currently waiting to get it approved for the gradle plugin portal - until then, it'll only be available in my own repository.",
      "depending on a 3rd party repo is pretty much a no-go\r\n\r\nas for the intent of this PR, I mean, post cleanup is nice, not something I personally care about enough to introduce a plugin and such for",
      "As said, I'm waiting to get it approved in the gradlePluginPortal(). I could also PR the whole plugin into the paper repo instead? It's basically just one .kt class in buildSrc",
      "Imho there's 5 solutions:\r\n\r\n1. We'll wait until it got approved for the gradlePluginPortal()\r\n2. I can upload it to repo.papermc.io/repository/maven-public/\r\n3. I add this plugin to the paper repo's buildSrc or similar\r\n4. I can upload it to maven central\r\n5. or we just forget about it and live with the double annotations\r\n\r\nPlease let me know if you're interested in adding this at all, because if not, I don't have to waste time into getting it approved for the plugin portal and/or uploading it to maven central",
      "I like this on principle, but is using regex really the best approach here? Also, I guess ideally it would be fixed in the javadoc generator, anybody ever tried to chase that down? \r\nKinda related to stuff, I wanted to edit javadoc files anyways to add like a navigation to navigate projects and versions and add an alert if you aren't viewing latest, but I guess that would be suited better for the software who serves the javadocs ",
      "I know that regex isn‘t the best solution, I only wrote this for myself and it seemed to work just fine. I didn‘t dare to take a look at the actual javadoc generation code lol",
      "[JDK-8175533](https://bugs.openjdk.org/browse/JDK-8175533) and [JDK-8278592](https://bugs.openjdk.org/browse/JDK-8278592) are the only references i can find with any info. \r\n\r\n> The problem occurs with any annotation that is both a declaration annotation and a type use annotation ... for example, an annotation on a field declaration that is both FIELD and TYPE_USE.\r\n\r\n[JDK-8278592#comment-14482841](https://bugs.openjdk.org/browse/JDK-8278592?focusedCommentId=14482841&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-14482841)\r\n\r\n> At some level, the solution is to de-duplicate type annotations when used on the outermost TypeMirror of an Element. \r\n> \r\n> That being said, the problem is exacerbated by the condition noted earlier, that declaration annotations are not displayed in the summary table, complicating the decision whether or not to display bimodal type annotations. The implementation code explicitly avoids displaying declaration annotations in the summary table, so it is probably an 8-year oversight that while declaration annotations may be suppressed in the summary table, type annotations are not.\r\n\r\n[JDK-8278592#comment-14482842](https://bugs.openjdk.org/browse/JDK-8278592?focusedCommentId=14482842&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-14482842)",
      "I don't think the bug is going to be fixed in the javadoc tool anytime soon.\r\n\r\nI meanwhile did some improvements to the fix-javadoc-plugin. It doesn't just throw regex over the whole html file but instead parses only the relevant stuff using Jsoup.\r\n\r\nI have let it generate the full paper API docs and [uploaded them here](https://hub.jeff-media.com/javadocs/paper-api-fixed) (EDIT: See my reply below), in case anyone is bored feel free to check them out and let me know if you can find any issues (like e.g. still duplicated annotations, or maybe even missing correct annotations or anything).\r\n\r\nAs mentioned, I'd be happy to either pull request the whole plugin directly into the paper repo, or alternatively upload the plugin into the papermc repository if anyone would like that - the current docs are a pain to look at.",
      "I noticed that by default, the annotations in method parameters appear on separate lines (at least that's what happens when using annotations-java5), so I made that configurable in the task (with newlines being the default).\r\n\r\nIn case anyone wants to take a look at the fixed paper docs:\r\n- [With new lines](https://hub.jeff-media.com/javadocs/paper-api-fixed2/)\r\n- [Without new lines](https://hub.jeff-media.com/javadocs/paper-api-fixed/)",
      "Version 1.19 of the plugin is available in gradlePluginPortal(), so no separate repository is required anymore.",
      "Any news on this? If there's still something that needs changes before being able to merge, I'd be happy to hear them.",
      "We've generally decided not to go forward with this change, there is generally little interest in pulling in 3rd party build tooling in order to fix what really amounts to an aesthetical grievance which generally has 0 side effects"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3c6d9087c4d6d37647d",
    "number": 9681,
    "body": "Hi, this pull requests adds the fix-javadoc-plugin to the \"root\" build file. It automatically adds a \"finalizedBy\" task for each task of the Javadoc type to get rid of the annoying \"double annotations\".\r\n\r\nBefore:\r\n![image](https://github.com/PaperMC/Paper/assets/1122571/b89576a1-9eb0-4145-8d98-6dbc4d65c5b0)\r\n\r\nAfter:\r\n![image](https://github.com/PaperMC/Paper/assets/1122571/faec3671-e3f4-4d51-ba38-82454df0a7d8)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3c7d9087c4d6d37647e",
    "number": 9679,
    "body": "For reference: https://discord.com/channels/289587909051416579/555462289851940864/1147468559887384586\r\n\r\nIf this behaviour is intended, feel free to close this PR, but as written in that message, I think `/restart` and `/stop` should follow the same order of operations when disabling plugins and saving players.",
    "head_branch": "server-shutdown-operation-order",
    "is_a_fork": true,
    "comments": [
      "I also wanted to say that this allows the `PlayerKickEvent` to work with the `/stop` command because players are kicked before plugins get disabled and therefore the `PlayerKickEvent` is called.",
      "Fixes [#6911](https://github.com/PaperMC/Paper/issues/6911)\r\nAlso see the comments in it",
      "This is 100% not something that can be done mid patch release, this is more a major change in behavior in which needs to be done on a major release with proper testing to ensure that we don't break anything;\r\n\r\nThis is how this logic has worked for a decade, and while you can maybe argue that it's weird, it is a side-effect of various dozen other choices in the codebase over a decade which has left us here",
      "So you say this could be added but this is more likely something for a new major MC version?\r\nOr did you mean something else with \"major release\"?",
      "Yea, this logic would be desirable in the long run imo, it just\r\na) would best fit something like, 1.21 release\r\nb) might be best to wait for papers hardfork or be proposed to spigot.\r\n\r\nGiven that the quit/onDisable stuff has worked like this for years and most logic that relies on this logic deals with rather crucial parts of plugins (e.g. data saving) changing this mid version is rather terrible for plugin developers to update.\r\nAdditionally, given that this breaks spigot compatibility, imo it is a rough PR even during a major release, as spigot plugins would just silently fail if they rely on spigots behaviour.",
      "> b) might be best to wait for papers hardfork or be proposed to spigot.\r\n\r\n#6911 suggests to add a config option. Would that, assuming this is getting merged at some point, be a feasable option until a hardfork? Or is this something that better waits until the hardfork?",
      "a config option was proposed for /stop to boot everybody, but there is no expectation that it would change event behavior, the server has stopped ticking and many things relied upon that in order to fire events, etc; \r\n\r\nIf we're going to change the behavior around this, it should just be changed without a config option, rather than having such a dangerous setting sitting around with massive side-effects",
      "I guess that would be an option. But probably only if it's disabled per default, logically. \n\nOn the other side if you enable it and have spigot plugins that rely on the old system it breaks again. So maybe an unsupported option until Hardfork?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3c8d9087c4d6d37647f",
    "number": 9677,
    "body": "This fix an issue with mobs ignoring the silent boolean when changing their equipment using the api",
    "head_branch": "fix/silentequip",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix silent equipment change for mobs (#9677)\n\n* Fix silent equipment change for mobs\r\n\r\n* rebased and added test to make sure all overrides are added\r\n\r\n---------\r\n\r\nCo-authored-by: Jake Potrebic <jake.m.potrebic@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3c9d9087c4d6d376480",
    "number": 9676,
    "body": "The scaffolding is waterloggable and when the limit of suspended blocks is reached in water, the block fade into air (for the BlockFadeEvent) and into water (for the EntityChangeBlockEvent/BlockDestroyEvent)",
    "head_branch": "fix/scaffoldingfade",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Take in account waterlogged blocks for scaffolding (#9676)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3cad9087c4d6d376481",
    "number": 9675,
    "body": "Discovered these during the making of #9674",
    "head_branch": "fix/beacon-bugs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix two beacon bugs (#9675)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3cbd9087c4d6d376482",
    "number": 9674,
    "body": "Closes #8947\r\n\r\nMoves the deactivate event call into the onRemove method for the beacon block itself to prevent it from running when the block entity is unloaded. Also fixes an issue where the events were not being called when the beacon beam gets blocked.\r\n\r\nThe field I added feels a bit wrong but it works, it's to prevent the activation event being called immediately after loading, can't see any better way to differentiate between a newly placed beacon and a newly loaded one.",
    "head_branch": "fix/beacon-events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3ccd9087c4d6d376483",
    "number": 9668,
    "body": "Closes #9667",
    "head_branch": "fix/add-display-tracking-type",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add DISPLAY tracking range type (#9668)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3cdd9087c4d6d376484",
    "number": 9666,
    "body": "Adds an event that gets called whenever a LootTable rolls any loot.\r\nThere are two aspects I'm not sure about:\r\n- Whether this should be a ServerEvent, or a WorldEvent like the LootGenerateEvent (but just forwarding the world from the LootContext location seems a bit pointless)?\r\n- If this is the best way to implement / call such an event. The goal was to have a general event for all loot table rolls, but this implementation only covers loot generated via LootTable#getRandomItems method returning an ObjectArrayList of the generated items. That for example excludes the loot generated by a LivingEntity, since it calls the void method with a consumer consuming the generated items, and I couldn't think of any good way to implement the event call in the consumer method.\r\n\r\nNonetheless this implementation allows for modifying the loot of Brushable Blocks, which wouldn't be possible otherwise (apart from replacing the item during the BlockDropItemEvent, but that leads to the \"old item\" sticking out the brushable block during brushing).",
    "head_branch": "feature/loottable-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3ced9087c4d6d376485",
    "number": 9665,
    "body": "Fixes #9451\r\n\r\n(Is blacklist filtering even feasible like Machine said in the linked issue or would it be too much work to cover all edge cases?)",
    "head_branch": "more-item-meta-obfuscation",
    "is_a_fork": true,
    "comments": [
      "Filtering custom model data is a no go ",
      "That's why I deliberately put it inside the `hideItemmetaWithVisualEffects` block (or is this 100% never intended to happen?, then mb)",
      "visual effects are generally more trivial things, idk how a lode compass appears differently to others if it has a pos or not, but, CMD is purely intended to allow people to change how items look in general using datapacks, etc; it being removed ever sounds like a stupidly niche edge-case at best"
    ],
    "commit_messages": [
      "Add additional tags to ItemMeta obfuscation filtering (#9665)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3cfd9087c4d6d376486",
    "number": 9664,
    "body": "Introduces a proper way to check if an ItemStack is empty just like in vanilla's code. The added isEmpty() method is even redirected into Mojang's method but an identical implementation is provided on ItemStack itself.\r\n\r\nAlso fixes an incorrect nullability annotation on getCursor.",
    "head_branch": "feat/empty-items",
    "is_a_fork": true,
    "comments": [
      "nullIfEmpty seems weird to have as a method… why is that being added?",
      "> nullIfEmpty seems weird to have as a method… why is that being added?\r\n\r\nIt's something that's more common in Kotlin code, it allows you to pick if you want to treat something as nullable or as a possibly empty item stack. But since in Java it doesn't do much I'll remove it."
    ],
    "commit_messages": [
      "Add ItemStack#isEmpty and related methods (#9664)\n\n* Add new patches\r\n\r\n* Change from an EMPTY static var to a static method since ItemStack is mutable\r\n\r\n* Properly set nullability of return value\r\n\r\n* Move annotation changes to different patch\r\n\r\n* Send the Kotlin code back to where it came from\r\n\r\n* rebased\r\n\r\n---------\r\n\r\nCo-authored-by: Jake Potrebic <jake.m.potrebic@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a3d0d9087c4d6d376487",
    "number": 9663,
    "body": "- moves the loading after vanilla loading,so it overrides the values.\r\n- disables saving any forced stats, so it stays at the same value (without enabling disableStatSaving)\r\n- fixes stat initialization to not cause a NullPointerException",
    "head_branch": "the456gamer-fix-forced-stats",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix spigot's Forced-Stats (#9663)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3d1d9087c4d6d376488",
    "number": 9661,
    "body": "Patches #9644 \r\nSupersedes #9646 \r\n\r\nI used the same plugin i used for my issue ( https://github.com/PaperMC/Paper/issues/9644 ) and now it works fine.\r\nThis is my first PR so i don't really know if i made these things right :)",
    "head_branch": "server-command-event-patch",
    "is_a_fork": true,
    "comments": [
      "Thanks for your contribution, however why are we superseding this 2 day old PR? ",
      "The author of the first PR created it really fast and a comment was added one hour after its push. \r\nAs this addition will help me a lot, after 2 days without a change on the first PR, i tried doing it myself supposing that the first author didn't see the comment.\r\nI'm sorry if this is not the way you do usually ",
      "An important note: this is a potentially breaking API change. Some plugins may rely on the behavior that ServerCommandEvent is *not* called by using `dispatchCommand`.\r\n",
      "Mhm, yes, I was considering pinging @4drian3d whose plugin SignedVelocity relies on command and chat events. However, this PR is only for the ServerCommandEvent, so that plugin will not be affected.\r\n\r\nOther plugins might. Really, dispatching a console command is something of a universal interface between plugins, and *lots* of plugins implement features that use `dispatchCommand` to call into other plugins in certain places when timing is appropriate: shop plugins when granting purchases, skyblock plugins when completing rewards, rank plugins upon promotion or role granting, punishments with additional actions, proxy command bridging solutions, hub selector plugins when items are clicked, plus personal Skript scripts, anything. Whether any of these would rely on ServerCommandEvent not being called is unknown, but it is possible. Maybe some servers implement rate limiting or logging for console commands executed from the console, but not by other plugins.",
      "For years theres been a general contract that API calls, outside of niche cases, will not fire events; I fail to see the argument for breaking this assertion here",
      "I created this PR because in my opinion, an event should be fired because, as the javadocs says : \"This event is called when a command is run by a non-player.\". As dispatching a command with the console is running it by \"a non-player\", i though that it would be legitimate.\r\nThe more, this patch keeps the purpose of the event : being able to log executed commands.\r\n\r\n![image](https://github.com/PaperMC/Paper/assets/49530141/358e7264-c392-4cf1-a501-067575eac608)\r\n\r\nI understand that maybe some plugins may run differently because of this patch but for me, only some plugins that log these entries. I can't see a situation where it would break.\r\n\r\nWhat about creating a new event (DispatchCommandEvent, APIDispatchCommandEvent ?) or creating a config option ?",
      "Ended up closing the original issue as it right now isn't feasible to implement this way.\r\nThank you so much anyway for your contribution, it is greatly appreciated.\r\n\r\nI hope we see more contributions from you in the future :) "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3d2d9087c4d6d376489",
    "number": 9660,
    "body": "Patches #9644 \r\nSupersedes #9646 \r\n\r\nI used the same plugin i used for my issue ( #9644 ) and now it works fine.\r\nThis is my first PR so i don't really if i made these things right :)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3d3d9087c4d6d37648a",
    "number": 9658,
    "body": "The methods now take an optional component that overrides the title of the container.\r\n\r\nI tested these changes with every method and every container type accepts the new overridden title just fine with the villager / merchant being the exception because the level of the villager is appended to the name",
    "head_branch": "open-inventory-with-title",
    "is_a_fork": true,
    "comments": [
      "Due to the maybe™ upcoming enum eradication I went ahead and removed the internal usage of the Material enum and use the blocks directly"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3d4d9087c4d6d37648b",
    "number": 9654,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/9653",
    "head_branch": "fix/sapling-observer-grow-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix sapling observer detection and grow event (#9654)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3d6d9087c4d6d37648c",
    "number": 9652,
    "body": "Fixes #9651",
    "head_branch": "fix-callback",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow non-op players to execute the click event callback (#9652)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3d7d9087c4d6d37648d",
    "number": 9650,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/9504 (part 2)\r\n\r\n---- \r\n\r\n`PlaceOnWaterBlockItem`s use a slightly separate system for placing their blocks which doesn't go through the \"capture\" system for all other blocks being placed by items. This copies over some of the logic just for those items.",
    "head_branch": "fix/water-block-block-updates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3d8d9087c4d6d37648e",
    "number": 9649,
    "body": "This PR fixes shields not playing sounds when being broken by an axe or when blocking a damage. This bug is client-sided but can easily be fixed by playing the sounds instead of the entity events, this is exactly what this PR does.",
    "head_branch": "fix/mc-255756",
    "is_a_fork": true,
    "comments": [
      "Maybe it would be better to both broadcast the entity event and play the sound?",
      "> Maybe it would be better to both broadcast the entity event and play the sound?\r\n\r\nI chose not to send both because when mojang is gonna fix the issue on their end, we're gonna have a time where the sound is gonna be played twice"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3d9d9087c4d6d37648f",
    "number": 9648,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n6b34da8f SPIGOT-7467: Add getAddress to RemoteConsoleCommandSender\r\n\r\nCraftBukkit Changes:\r\ndb4ba2897 SPIGOT-7467: Add getAddress to RemoteConsoleCommandSender\r\n4f7ff4dec PR-1246: Add missing AbstractTestingBase to tests which need them\r\nf70a7b68d SPIGOT-7465, MC-264979: Fresh installations print NoSuchFileException for server.properties\r\n8ef7afef6 PR-1240: Call BlockGrowEvent for vines that are growing on additional sides of an existing vine block\r\n\r\nSpigot Changes:\r\nd2eba2c8 Rebuild patches",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [
      "Hello! Can you please update this PR to include [this](https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/db4ba289785418d608eeca8dec2013e513adf9ad)?",
      "it'll be updated before the merge yes 👍 "
    ],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#9648)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n6b34da8f SPIGOT-7467: Add getAddress to RemoteConsoleCommandSender\r\n\r\nCraftBukkit Changes:\r\ndb4ba2897 SPIGOT-7467: Add getAddress to RemoteConsoleCommandSender\r\n4f7ff4dec PR-1246: Add missing AbstractTestingBase to tests which need them\r\nf70a7b68d SPIGOT-7465, MC-264979: Fresh installations print NoSuchFileException for server.properties\r\n8ef7afef6 PR-1240: Call BlockGrowEvent for vines that are growing on additional sides of an existing vine block\r\n\r\nSpigot Changes:\r\nd2eba2c8 Rebuild patches"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3dad9087c4d6d376490",
    "number": 9646,
    "body": "Patches #9644 \r\n\r\nTested with a test plugin and works fine, not sure if its in the most optimal place however it seems to work just fine",
    "head_branch": "patch/server-command-event",
    "is_a_fork": true,
    "comments": [
      "Ended up closing the original issue as it right now isn't feasible to implement this way.\r\nThank you so much anyway for your contribution, it is greatly appreciated."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3dbd9087c4d6d376491",
    "number": 9645,
    "body": "PR adding methods to `BlockData` that are currently just on `Block` which either never should have been there in the first place or should have been in both places.\r\n\r\n----\r\n\r\nAm splitting this up cause they are kind of annoying PRs to review cause the diff is ugly.",
    "head_branch": "fix/destroy-speed-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix/improve destroy speed API (#9645)\n\nfurther improvements could be a method that takes in an entity\r\nto account for effects"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a3dcd9087c4d6d376492",
    "number": 9643,
    "body": "This introduces new methods on the PluginManager that supersede the old registerEvent/registerEvents methods. These new methods return a RegisteredListener object which can be used by plugins to better handle their registered listeners. The RegisteredListener now also has an unregister() method which can be used to directly unregister that listener from all relevant handler lists instead of having to iterate over them all.",
    "head_branch": "feat/registered-listeners",
    "is_a_fork": true,
    "comments": [
      "Rebased and ready for re-review.",
      "Rebased and cleaned up to match new guidelines."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3ddd9087c4d6d376493",
    "number": 9642,
    "body": "This adds a method called isConnected to the OfflinePlayer which allows for beter checking if an instance of Player is still representing an actual online player. When a player reconnects isOnline on the old instance will still return true, but isConnected returns false. This way you can distinguish stale Player instances so offline Player instances.\r\n\r\nMore information in the comments on the paper-api patch.",
    "head_branch": "feat/isonline-alt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add OfflinePlayer#isConnected (#9642)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a3ded9087c4d6d376494",
    "number": 9641,
    "body": "Closes #9631 ",
    "head_branch": "feature/configurable-crop-light-levels",
    "is_a_fork": true,
    "comments": [
      "So the problem with this, is that crops will break if they can't see the sky and have a light level lower than 8 (or smth close). \r\n\r\nThere are multiple light level and conditions for crops to grow, so idk how well a single configuration value will handle those.",
      "Yeah I saw something lower down in the class about crop survival which I guess could also be turned into a config option?\n",
      "There is this which is the only othert light dependant part of the CropBlock class so I'd assuming making this configurable would fix your issue?\r\n```java\r\n@Override\r\npublic boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {\r\n    return (world.getRawBrightness(pos, 0) >= 8 || world.canSeeSky(pos)) && super.canSurvive(state, world, pos);\r\n}\r\n```",
      "Yeah, that would be one potential fix. I just wonder if an event allowing plugins to customize it more finely would be better. Idk how such an event would work tho."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3dfd9087c4d6d376495",
    "number": 9640,
    "body": "The check for updating the inventory should be run in all cases that the event is fired in BlockItem, not just for solid bucket item. This should cover lilypads and frogspawn, the 2 place on water blocks.\r\n\r\nFixes https://github.com/PaperMC/Paper/issues/9504",
    "head_branch": "fix/inventory-desync",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix inventory desync (#9640)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3e0d9087c4d6d376496",
    "number": 9638,
    "body": "Getting the nearest generated structure calls `ChunkGenerator.getNearestGeneratedStructure`, which contains a nested set of loops that iterate over all chunks at a specific chessboard distance. It does this by iterating over the entire square of chunks within that distance, and checking if the coordinates are at exactly the right distance to be on the border.\r\n\r\nThis patch optimizes the iteration by only iterating over the border chunks. This evaluated chunks are the same, and in the same order, as before, to ensure that the returned found structure (which may for example be a buried treasure that will be marked on a treasure map) is the same as in vanilla.\r\n\r\nSince the radius may be quite large (50 for buried treasure maps in chests, 100 for cartographer treasure maps, or any arbitrary value for plugin calls or data pack functions) this effect is noticeable.\r\nFor example, for a cartographer treasure map, where the call to `ChunkGenerator.getNearestGeneratedStructure` is made from `ChunkGenerator.findNearestMapStructure` with an increasing radius, this effect can cause $\\sum_\\limits{i=1}^{100} (2i+1)^2-8i = 1\\,333\\,300$ unnecessary loop iterations, of which the bookkeeping can easily take half a millisecond, which is 1/100th of the main thread tick time already, spent just on pointless variable incrementing.",
    "head_branch": "perf/nearest-structure-chunk-iteration",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimize nearest structure border iteration (#9638)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3e1d9087c4d6d376497",
    "number": 9636,
    "body": "useful for checking metadata / pdc of block to be placed",
    "head_branch": "the456gamer-expose-itemstack-bcbe",
    "is_a_fork": true,
    "comments": [
      "cant you just call the method on player?",
      "as general usage, or in this prs implementation?\r\nbecause currently the hand the block is place from isn't exposed.",
      "then it makes more sense to expose the hand, as thats the only thing you cant right now, no?"
    ],
    "commit_messages": [
      "Expose Hand during BlockCanBuildEvent (#9636)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a3e2d9087c4d6d376498",
    "number": 9635,
    "body": "Removes the unused lag-compensate-block-breaking option from the paper configuration file as the patch using it has been dropped in 1.19.",
    "head_branch": "bugfix/remove-lag-compensate-block-breaking-from-config",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove unused lag-compensate-block-breaking option (#9635)\n\nRemoves the unused lag-compensate-block-breaking option from the paper\r\nconfiguration file as the patch using it has been dropped in 1.19."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3e3d9087c4d6d376499",
    "number": 9633,
    "body": "Bundles compute the amount to remove from an item based on the formula (64 - currentWeight) / itemWeight. An overfilled bundle however, with a currentWeight of > 64 ends up with a negative removal amount for the item.\r\n\r\nThis can cause duplication issues on craftbukkit inventory implementations as they do currently not gracefully handle negative removal amounts in their remove methods.",
    "head_branch": "bugfix/bundle-negative-amount-removal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Prevent overfilled bundles from duplicating items (#9633)\n\nBundles compute the amount to remove from an item based on the formula\r\n(64 - currentWeight) / itemWeight. An overfilled bundle however, with a\r\ncurrentWeight of > 64 ends up with a negative removal amount for the\r\nitem.\r\n\r\nThis can cause duplication issues on craftbukkit inventory\r\nimplementations as they do currently not gracefully handle negative\r\nremoval amounts in their remove methods."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3e4d9087c4d6d37649a",
    "number": 9632,
    "body": "Exposes the direction / clicked BlockFace during the BlockDamageEvent.\r\nThis may be useful for custom items / mining, for example 3x3 mining (determining the mining direction).",
    "head_branch": "feature/expose-blockface",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expose clicked BlockFace during BlockDamageEvent (#9632)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a3e5d9087c4d6d37649b",
    "number": 9630,
    "body": "I hope this pull request is welcome...\r\n\r\nThis PR fixes compile errors related to the javac compiler in the experimental branch until upstream fixes it (if they do).\r\n\r\n\r\nAll the code changes were successfully tested.\r\n\r\n\r\nBefore/After this PR gets merged an upstream update would be great because md_5 updated the experimental branch two days ago.",
    "head_branch": "fix/experimental/upstream-javac-compile-errors",
    "is_a_fork": true,
    "comments": [
      "I believe upstream fixed it with [this commit](https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/pull-requests/931/commits/c26e36f3ddbab8d66833e16ee45082f5ac4c399c#src/main/java/org/bukkit/craftbukkit/CraftServer.java) (and the bukkit counterpart) ",
      "> I believe upstream fixed it with [this commit](https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/pull-requests/931/commits/c26e36f3ddbab8d66833e16ee45082f5ac4c399c#src/main/java/org/bukkit/craftbukkit/CraftServer.java) (and the bukkit counterpart)\r\n\r\nI tried it out, by implementing these specific upstream changes into the experimental branch api, between your comment and writing this comment and saw that is fixed by this upstream commit like written in your comment. Sorry for opening the pull request... I never worked with wildcards and generics and because of that I didn't saw the connection between the upstream commit and the compiler errors... (I didn't create the patch only for this pull request. I made it to fix the experimental branch so that I can continue my experimenting...)"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3e6d9087c4d6d37649c",
    "number": 9629,
    "body": "A separate and minimal event system is required for lifecycle-related registration, such as commands, the future Registry Modification API and other similar resources which are either registered once on startup or registered on startup and re-registered during a `/minecraft:reload`-type reload.\r\n\r\n~~This PR includes dummy events as none are actually added yet. The Brigadier Commands API would use this. See the Test Plugin for how these dummy events can be used.~~removed, see the examples below.\r\n\r\n----\r\n\r\nLifecycle events are tied to one of 2 types, the `Plugin` instance (must be registered during a plugin's onEnable) and the `BootstrapContext` (must be registered during the `PluginBootstrap#bootstrap` call). These 2 are separate due to the nature of when certain things are registered or can be regsitered. For example, Commands are fine to be registered during `Plugin#onEnable`, but this like custom advancement triggers would have to be registered *much* earlier, so that would be in the `BootstrapContext` phase.\r\n\r\n## Examples\r\n### Brigadier Command API\r\n*in a class that extends `JavaPlugin`*\r\n```java\r\n@Override\r\npublic void onEnable() {\r\n    // the LifecycleEventManager is where you register handlers for event types\r\n    final LifecycleEventManager<Plugin> lifecycleManager = this.getLifecycleManager();\r\n    // to register a handler, you need an event type, usually found in LifecycleEvents\r\n    // here the event type is COMMANDS\r\n    lifecycleManager.registerEventHandler(LifecycleEvents.COMMANDS, event -> {\r\n        final Commands commands = event.registrar();\r\n        // ensure plugin commands override\r\n        commands.register(Commands.literal(\"tag\")\r\n                .executes(ctx -> {\r\n                    ctx.getSource().getSender().sendPlainMessage(\"overriden command\");\r\n                    return Command.SINGLE_SUCCESS;\r\n                })\r\n                .build(),\r\n            null,\r\n            Collections.emptyList()\r\n        );\r\n    });\r\n}\r\n```\r\n*in a class that implements `PluginBootstrap`*\r\n```java\r\n@Override\r\npublic void bootstrap(@NotNull BootstrapContext context) {\r\n    final LifecycleEventManager<BootstrapContext> lifecycleManager = context.getLifecycleManager();\r\n    lifecycleManager.registerEventHandler(LifecycleEvents.COMMANDS.newHandler(event -> {\r\n        final Commands commands = event.registrar();\r\n        commands.register(Commands.literal(\"heya\")\r\n                .then(Commands.argument(\"range\", VanillaArgumentTypes.doubleRange())\r\n                    .executes((ct) -> {\r\n                        ct.getSource().getSender().sendPlainMessage(VanillaArgumentTypes.getDoubleRange(ct, \"range\").toString());\r\n                        return 1;\r\n                    })\r\n                ).build(),\r\n            null,\r\n            Collections.emptyList()\r\n        );\r\n    // you can add a priority or set your handler to be a \"monitor\"\r\n    }).priority(10));\r\n}\r\n```\r\n### Registry Modification API\r\n*in a class that implements `PluginBootstrap`*\r\n```java\r\n@Override\r\npublic void bootstrap(@NotNull BootstrapContext context) {\r\n    // the LifecycleEventManager is where you register handlers for event types\r\n    final LifecycleEventManager<BootstrapContext> lifecycleManager = context.getLifecycleManager();\r\n    lifecycleManager.registerEventHandler(RegistryEvents.GAME_EVENT.newAdditionHandler(event -> {\r\n        if (event.key().equals(GameEventKeys.BLOCK_OPEN)) {\r\n            event.builder().range(event.builder().range() * 2);\r\n        }\r\n    }).priority(10));\r\n    lifecycleManager.registerEventHandler(RegistryEvents.GAME_EVENT.preFreeze(), event -> {\r\n        event.registry().register(NEW_EVENT, builder -> {\r\n            builder.range(2);\r\n        });\r\n    });\r\n}\r\n```\r\nYou can see examples of this being used in both the [plugin bootstrap](https://github.com/Owen1212055/Paper/blob/command-recode-thing/test-plugin/src/main/java/io/papermc/testplugin/TestPluginBootstrap.java) and [plugin JavaPlugin](https://github.com/Owen1212055/Paper/blob/command-recode-thing/test-plugin/src/main/java/io/papermc/testplugin/TestPlugin.java#L35).\r\n\r\n```[tasklist]\r\n- [x] Implement locking of registration for `BootstrapContext` events (requires https://github.com/PaperMC/Paper/pull/9589)\r\n- [x] ~~Should all events allow priorities?~~ No\r\n- [x] ~~Should there be Read-Only interfaces for the \"monitor\" event handlers?~~ No, too complex, annoying to create/use\r\n- [x] Add javadocs\r\n```",
    "head_branch": "feature/lifecycle-event-system",
    "is_a_fork": false,
    "comments": [
      "Ok, addressed most of your comments in [`1e29f73` (#9629)](https://github.com/PaperMC/Paper/pull/9629/commits/1e29f73edd55f00ec39b20968e788635b385d9af). ",
      "You can see examples of this being used in both the [plugin bootstrap](https://github.com/Owen1212055/Paper/blob/command-recode-thing/test-plugin/src/main/java/io/papermc/testplugin/TestPluginBootstrap.java) and [plugin JavaPlugin](https://github.com/Owen1212055/Paper/blob/command-recode-thing/test-plugin/src/main/java/io/papermc/testplugin/TestPlugin.java#L35)."
    ],
    "commit_messages": [
      "Lifecycle Event System (#9629)\n\n* registering stuff event system\r\n\r\n* simply by removing a ton of unneeded generics\r\n\r\n* separate RegistryEvent and RegistrarEvent\r\n\r\n* add logic for removing hooks when a plugin is disabled\r\n\r\n* cleanup more\r\n\r\n* swap around the way things are registered\r\n\r\n* block further hook registrations for JavaPlugin\r\n\r\n* Slightly more extensible to support registry mod API\r\n\r\n* rename some types\r\n\r\n* more moving/renaming\r\n\r\n* remove 'hook' name\r\n\r\n* Rename to 'lifecycle'\r\n\r\n* move more impls for the server\r\n\r\n* add priorities\r\n\r\n* added lock for bootstrap event registration\r\n\r\n* slight refactor to allow 'register anywhere' event types\r\n\r\n* Move event type list to server impl\r\n\r\n* use builder pattern to create event handler configurations\r\n\r\n* add some more javadocs\r\n\r\n* fix some issues, slight refactors\r\n\r\n* call predicate and method renames\r\n\r\n* add owner aware events\r\n\r\n* rebased and refactored owner aware events\r\n\r\n* add single helper method for registering simple handler\r\n\r\n* compile fixes\r\n\r\n* check owner and fix generics on register helper\r\n\r\n* javadoc fixes and a few type renames\r\n\r\n* more javadoc fixes\r\n\r\n* move service loader file to correct location\r\n\r\n* rename to Monitorable and Prioritizable\r\n\r\n* add invalidation system for events after running them\r\n\r\n* block reloading plugins in certain situations\r\n\r\n* update test plugin\r\n\r\n* remove dummy events\r\n\r\n* rebase"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a3e7d9087c4d6d37649d",
    "number": 9625,
    "body": "Closes #8230, supersedes #8242\r\n\r\nBy default, the option will have a value of \"default\" which will fallback to the motd set in the server.properties. Adds a new ComponentOrDefault class which uses the already existing ComponentSerializer to (de)serialize the component.",
    "head_branch": "feat/minimessage-motd",
    "is_a_fork": true,
    "comments": [
      "It might also be nice to set the motd inside the /paper reload command, currently it's only after every setMotd call. Can't update this PR until the end of the week unfortunately."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3e8d9087c4d6d37649e",
    "number": 9623,
    "body": "Closes #8178, supersedes #8179",
    "head_branch": "fix/setburntime-short",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Limit setBurnTime to valid short values (#9623)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a3e9d9087c4d6d37649f",
    "number": 9621,
    "body": "This is my first time doing this, in the comments of #9612  Owen said it should just be removed so thats what this is :)",
    "head_branch": "patch-issue-9612",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Delete patch to fix PaperMC/Paper#9612 (#9621)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3ead9087c4d6d3764a0",
    "number": 9620,
    "body": "This is my first time doing this, in the issue comments Owen said it should just be removed so thats what this is",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3ecd9087c4d6d3764a1",
    "number": 9615,
    "body": "If the reloot time is disabled while reloot is restricted, the player should not be able to reloot. The previous logic was incorrect and allowed players to reloot explicitly when the reloot time was disabled.\r\n\r\nResolves: #9613",
    "head_branch": "bugfix/lootable-restriction-time",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't let player loot if reloot time is disabled (#9615)\n\nIf the reloot time is disabled while reloot is restricted, the player\r\nshould not be able to reloot. The previous logic was incorrect and\r\nallowed players to reloot explicitly when the reloot time was disabled."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3edd9087c4d6d3764a2",
    "number": 9614,
    "body": "Hopefully second try is the charm. With the feedback of lynxplay from my previous pull, I created a new Event which would act before the Spawner searches for nearby spawners.\r\n\r\nThis would:\r\na) allow to remove specific players from specific spawners in regards to their activation\r\nb) allow spawners to skip player searching for n ticks (as specified by the backoff cooldown)\r\nc) completely exclude players from affecting spawning on spawners.\r\n\r\nI was also going to add NotNulls to the event but I wasn't sure so your feedback would be highly appreciated!\r\n\r\n\r\n",
    "head_branch": "PreSpawnerSearchEvent-",
    "is_a_fork": true,
    "comments": [
      "I forgot to say that in the review, but you need the notnull/nullable annotations in the API otherwise the test will fail",
      "I believe all of the above should be resolved. If someone could please check this, that would be great!",
      "> After testing, seems to work well.\r\n> However, I am a bit bleh about the naming of the event after thinking about it.\r\n> It isn't really pre-search, the \"heavy\" searching logic is still executed.\r\n> The backoff ticks can prevent that, but the event is not really pre- anything.\r\n\r\nYep, more I coded, the more I thought maybe it should just be called \"SpawnerSearchEvent\".\r\nEdit: Updated all instances to \"SpawnerSearchEvent\"",
      "Should I move the event to Block instead of Entity as well?",
      "It's a little bit tricky since the base spawner is used by the spawner block but also by the minecart spawner, i don't mind that whatever you chose but i think people are more used to see a spawner block",
      "What is the general opinion on this one:\nhttps://discord.com/channels/289587909051416579/555469074080202765/1148993218885718076\n(adding `Cancelable` which defaults to `DENY`) ",
      "Again, i don't know if we have a precedent for this.\r\nIssue isn't really setCancelled(true), issue is setCancelled(false).\r\n\r\nDoes it use DEFAULT or ALLOW ?\r\nIts a bit meh ",
      "Anything else I need to do or is this just awaiting reviews?",
      "At least from my end, I just need to find time to give this a final review and testing :+1: ",
      "Having a second thought, maybe calling it `SpawnerPlayerSearchEvent` is more accurate with the event. Thoughts?",
      "does the Spawner search Players? Might rename it to `SpawnerSearchPlayerEvent`?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3eed9087c4d6d3764a3",
    "number": 9611,
    "body": "This adds a very cheap distance check when an end crystal is placed.\r\n\r\nAttempting to respawn the dragon, which involves looking up the end crystal entities near the portal, every time an end crystal is placed, can be slow on some servers that have players placing end crystals as a style of combat.\r\n\r\nThe very cheap distance check prevents running the entity lookup every time.\r\n",
    "head_branch": "perf/crystal-proximity-check",
    "is_a_fork": true,
    "comments": [
      "> Didn't realize it was so generous in detecting where you placed crystals, always thought it was just those exact blocks.\r\n\r\nYeah I was surprised too. Normally you can't place crystals in the other positions (one closer to the portal, which is above a portal block; or one below, which would be inside bedrock or a portal block), but if you do place them there (by modifying the portal bedrock/portal blocks in advance) it does work. The vanilla code checks for an entity in a bounding box that just barely touches those normally-impossible locations."
    ],
    "commit_messages": [
      "Do crystal-portal proximity check before entity lookup (#9611)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3efd9087c4d6d3764a4",
    "number": 9610,
    "body": "Closes https://github.com/PaperMC/Paper/issues/5143, continuation of https://github.com/PaperMC/Paper/pull/5242\r\n\r\nAlso fixes two vanilla bugs related to extinguishing",
    "head_branch": "feat/entity-extinguish-event",
    "is_a_fork": true,
    "comments": [
      "Bug fixes should definitely go in a separate patch, not in the implementation of an event.",
      "Thanks, addressed the comments and fixed one additional vanilla bug"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3f0d9087c4d6d3764a5",
    "number": 9609,
    "body": "Closes #5143, continuation of #5242\r\n\r\nI also fixed two vanilla bugs related to extinguishing, are they good to stay in this patch or should I put them in their own patch & pull request?",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead.",
      "skull emoji"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3f1d9087c4d6d3764a6",
    "number": 9608,
    "body": null,
    "head_branch": "file-formatting",
    "is_a_fork": false,
    "comments": [
      "``\r\nij_java_generate_final_locals = true\r\nij_java_generate_final_parameters = true\r\n``\r\n\r\nIs this something we are pushing? This is a bit of a change as I am not sure everyone does this, unless we want to push this within our codebase."
    ],
    "commit_messages": [
      "[ci skip] update editorconfig and gitattributes (#9608)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a3f2d9087c4d6d3764a7",
    "number": 9607,
    "body": "## Additions\r\n\r\n- `Material#getPlacedType` - returns the type an item would be placed as (usually the same, but is different in some cases, e.g. pumpkin seeds -> pumpkin stem).\r\n- `UnsafeValues#getPlacedType(Material)` - bridge method for `Material#getPlacedType`.\r\n\r\n## Notes\r\n\r\n- Currently it returns a `Material`, as that's what's stored internally - might make sense to return `BlockData` to avoid potential issues with more complex data being added in the future/as it might make sense to represent it as `BlockData`?\r\n- `BlockData#getPlacementMaterial` (other way around from this) seems to return `AIR` when a block doesn't have an item equivalent, while this returns `null` for items that can't be placed.\r\n`null` makes more sense imo, but either is fine I guess - let me know if that should be changed to match.",
    "head_branch": "Placed_Material_API",
    "is_a_fork": true,
    "comments": [
      "This seems to be a duplicate of https://github.com/PaperMC/Paper/pull/6680 if I'm not mistaken",
      "Closing, as in general we are waiting for upstream's blocktype/itemtype API to better expose this types of API. "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3f3d9087c4d6d3764a8",
    "number": 9606,
    "body": "Like written on Discord with @Machine-Maker , here the pull request to fix a startup crash and the runtime crash occuring around three minutes after startup, found while wanting to experiment with the `experimental` Paper branch.\r\n\r\nChanges following things:\r\n- An erroneous change in the Custom-Potion-Mixes-Patch leading to a server crash at startup\r\n- A server crash occuring around three minutes after startup, coming from the timings system because of an unexpected exception of the type `java.lang.ClassCastException`. While doing this I also migrated the code away from using the deprecated class `OldEnum`, introduced in the (Craft-)Bukkit pull request for enum to class migration for backwards compatibility, used in the `EntityType` related code of the timings system.\r\n\r\nAll the code changes were successfully tested through several server startups and several created timings reports (with different worlds and situations).\r\n\r\nIf i should post pictures of the exceptions, just write and I will post them here.",
    "head_branch": "fix/experimental/compile-runtime-fixes",
    "is_a_fork": true,
    "comments": [
      "Isn't the timing stuff subject to be replaced with spark? So any changes to that would be kind of a waste of time. Or not?",
      "> Isn't the timing stuff subject to be replaced with spark? So any changes to that would be kind of a waste of time. Or not?\n\nYes it should be replaced in the future as I read, but  until it is replaced it should not lead to server crashes. The EntityType change was mainly for the reason that BlockType and EntityType are similiar."
    ],
    "commit_messages": [
      "Fix startup and runtime crashes (experimental branch) (#9606)\n\n* Fix startup error\r\n\r\n* Fix runtime error\r\n\r\n- The code with '.getKey().getKey().getKey()' looks a bit strange but is necessary so the results on the timings website are the same as before. It gets the key (String) from the NamespacedKey, of the key from the Keyed, from the key of the Map.Entry.\r\n\r\n* [ci skip] Add myself to LICENSE.md\r\n\r\n* Remove wildcard import\r\n\r\n* Revert import order"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3f4d9087c4d6d3764a9",
    "number": 9605,
    "body": "Rewrites the tracking code for framed maps to remove the use of the tickCarriedBy method and the HoldingPlayer class. the tickCarriedBy method contained a lot of code that did not apply to framed maps at all, and by moving the parts that did elsewhere, we can essentially skip it.\r\n\r\nCloses #9597",
    "head_branch": "feat/frame-tracker-rewrite",
    "is_a_fork": true,
    "comments": [
      "I've been running this patch on my server for ~1 week+ (after making my own makeshift patch that did only the ItemFrame `getItem()` optimization, only to find out that someone else already had made the same optimization but better) and I couldn't find any issues, and it also improves performance a bit if the server has a lot of item frames (which is my case for a Survival server) by avoiding calling `getItem()`. Before the patch, all `getItem()`calls were using 0.25ms every tick. (not a lot but for big servers every optimization is a big W)\r\n\r\nThe only thing is that this patch needs to be rebased (again) for the latest version for it to compile, because `MapDecoration`'s `getType()` is now `type()`: https://github.com/SparklyPower/SparklyPaper/commit/27b4f21dfc70461780516b0645047e24ecabc1b4",
      "Rebased for 1.20.6 https://github.com/SparklyPower/SparklyPaper/blob/ver/1.20.6/patches/server/0004-Rewrite-framed-map-tracker-ticking.patch",
      "I was looking over this PR again and it seems like my approach here was a bit flawed, since it did not account for one framed map being viewed in multiple locations and being updated, only players viewing the item frame that's first in the entity iteration order would've seen the changes.\r\n\r\nThere are still some other gains that could be made, such as reducing the amount of map update packets being sent to players while no changes actually occurred, and the mess that is the tickCarriedBy (seriously, maps in item frames shouldn't have to check if the player is wearing a pumpkin)."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3f5d9087c4d6d3764aa",
    "number": 9604,
    "body": "Fixes the event being called 4 times (2 per hand) when a player right clicks with no difference to the event data. Also adds some javadoc and removes an unnecessary access transformer",
    "head_branch": "useunknownentity",
    "is_a_fork": false,
    "comments": [
      "Shhh",
      "This isn't exactly the right place for this comment, probably, but is there some way in which this event could either be cancelled, or toggled as \"consumed\" in such a way where interacting with an unknown entity stops all subsequent future actions? Examples are:\r\n\r\n- Right-clicking a packet NPC holding a consumable both interacts with it, but also you start eating.\r\n- Same thing but when holding projectiles (pearls, potions, etc)\r\n\r\nOr maybe there's another way people have been handling this.",
      "It'd be best if you created an issue for that"
    ],
    "commit_messages": [
      "Add clicked position to PlayerUseUnknownEntityEvent (#9604)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a3f6d9087c4d6d3764ab",
    "number": 9603,
    "body": "See patch description for a breakdown of this.\r\n\r\nTo test the performance implications I used spark's profiler and tickmonitor both set to report ticks over 55ms. Doing 3 mass crafts without this patch resulted in [this](https://spark.lucko.me/DP7OkpY7sa). With this patch, none of the crafts tripped the tickmonitor or profiler.\r\n\r\n\r\nThere are probably further improvements done. Like the `slotChangedCraftingGrid` static method in CraftingMenu is called 576 times to re-calculate the recipe for a full 9 stack shift-click craft. This calls the `PrepareItemCraftEvent` 576 times and sends that many packets setting the result slot content.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9603.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/875784593.zip)",
    "head_branch": "fix/shift-click-craft-perf",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve performance of mass crafts (#9603)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3f7d9087c4d6d3764ac",
    "number": 9602,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8611\r\n\r\nI think this is the best way to check if the world is a nether-like world. I don't really want to use the `World$Environment` enum as that will go away at some point in the future.",
    "head_branch": "fix/portal-void-damage-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Account for dimension type in portal void damage check (#9602)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3f8d9087c4d6d3764ad",
    "number": 9601,
    "body": "This PR add the get/set method to LargeFireball to the explosion power, if not wrong the only way to get that value is if the shooter is a Ghast but this not apply to custom LargeFireball generated.\r\n\r\n~~This PR starts because wanna get the radius.. in another entites are more hardcoded..~~",
    "head_branch": "feature/no-ref/more-explosion-power-methods",
    "is_a_fork": true,
    "comments": [
      "This is kinda redundant with getYield/setYield ?",
      "> This is kinda redundant with getYield/setYield ?\n\nOh yeah... I confuse because see in another place the explosionPower, explosionPowerRadius and now like say the yield.....\n\nXD",
      "Is this still needed if those methods do the same?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3f9d9087c4d6d3764ae",
    "number": 9600,
    "body": "The tree nodes do not need to know which parents that they are dependent on still exist, only how many still exist. This PR replaces removing parents from a set by counting down the number of parents left. Of course ReferenceOpenHashSet is also fast, but this feels a bit cleaner.\r\n\r\nI left the IllegalStateException in, with its hypothetical effectiveness a bit reduced since it would occur later and with less information. But it can only occur due to a bug in implementation of the RadiusAwarePrioritisedExecutor itself, and not due to any external bugs, and the RadiusAwarePrioritisedExecutor has been well tested by now, so I don't think that would matter.",
    "head_branch": "perf/count-down-tree-parents",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Count down radius-aware dependency tree node parents (#9600)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3fad9087c4d6d3764af",
    "number": 9599,
    "body": "This update introduces a mushroom configuration to the Paper world, providing users with the ability to bypass the standard vanilla spread limit. This customization allows users to exert more control over mushroom spreading, potentially leading to increased mushroom growth within the designated area.\r\n\r\nFrom: https://github.com/PaperMC/Paper/pull/9592",
    "head_branch": "feat/mushroom-spread-config",
    "is_a_fork": true,
    "comments": [
      "For future reference, you don't need to recreate the PR just to include the latest changes, just rebase your branch on the upstream master branch. Then you can force push to this branch."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3fbd9087c4d6d3764b0",
    "number": 9598,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\nb76ceb4f5 PR-1235: Move EntityType return to base Entity class\r\ne795d7490 SPIGOT-7458: Exception when Entity CommandSender executes Vanilla command\r\n46c7fc3b1 SPIGOT-7452: Player#openSign cannot edit\r\nd91e5aa0b SPIGOT-7447: Rewrite --forceUpgrade to minimise diff and properly handle CraftBukkit world layout\r\n921ae06d6 Revert \"SPIGOT-7447: Fix --forceUpgrade\"\r\n\r\nSpigot Changes:\r\n94e187b5 Rebuild patches\r\n3bce7935 SPIGOT-7091: Update bungeecord-chat",
    "head_branch": "update-upstream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit/Spigot) (#9598)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\nb76ceb4f5 PR-1235: Move EntityType return to base Entity class\r\ne795d7490 SPIGOT-7458: Exception when Entity CommandSender executes Vanilla command\r\n46c7fc3b1 SPIGOT-7452: Player#openSign cannot edit\r\nd91e5aa0b SPIGOT-7447: Rewrite --forceUpgrade to minimise diff and properly handle CraftBukkit world layout\r\n921ae06d6 Revert \"SPIGOT-7447: Fix --forceUpgrade\"\r\n\r\nSpigot Changes:\r\n94e187b5 Rebuild patches\r\n3bce7935 SPIGOT-7091: Update bungeecord-chat"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3fcd9087c4d6d3764b1",
    "number": 9596,
    "body": "As this is my first contribution to Paper I am open for suggestions for naming the patch or perhaps telling me if there is already an existing patch to merge this into.\r\n\r\nFixes #9437",
    "head_branch": "composter-output-container",
    "is_a_fork": true,
    "comments": [
      "Thank you for the PR! I haven't looked into this fully yet, but wouldn't the input container below it also need it overridden?",
      "Yeah, you were right. I only tested this with the composter as the source inventory, but not as the destination inventory ",
      "When the entity implements `InventoryHolder` and `Container`, the getLocation call is handled by `CraftEntity.getLocation`, but the special case here is the horse where the `(Simple)Container` is not extended but just created.\r\n\r\nThe Merchant container does not use SimpleContainer, so this must stay.\r\n\r\nThe BeaconMenu is a bit more complicated I guess, at the moment it does not have an InventoryHolder at all?"
    ],
    "commit_messages": [
      "Fix Inventory#getLocation not working for the composter (#9596)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3fdd9087c4d6d3764b2",
    "number": 9595,
    "body": "When looking into fixing #9507 I noticed a lot more statistic criterion than just the play time were broken by the 'naive' enum -> key conversion. See [the wiki](https://minecraft.fandom.com/wiki/Statistics#List_of_custom_statistic_names) for the full list, everything that doesn't match with the enum is broken.\r\n\r\nRather than having to update the entire enum with the correct names in the way lynx showed [in this comment](https://github.com/PaperMC/Paper/issues/9507#issuecomment-1639815454), I opted for grabbing the correct statistic key from the server itself, using unsafevalues to bridge the gap. This should be easier to maintain and will prevent us missing the enum update should the keys change again.\r\n\r\nA proper, long-term solution would be #5691, but until then I believe this is best fix.\r\n\r\nFixes #9507.",
    "head_branch": "fix/custom-statistic-criteria",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix custom statistic criteria creation (#9595)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a3fed9087c4d6d3764b3",
    "number": 9592,
    "body": "This update introduces a mushroom configuration to the Paper world, providing users with the ability to bypass the standard vanilla spread limit. This customization allows users to exert more control over mushroom spreading, potentially leading to increased mushroom growth within the designated area.",
    "head_branch": "feat/mushroom-spread-config",
    "is_a_fork": true,
    "comments": [
      "Yeah, I think in this case an IntOr.DefaultOrDisabled would be nice. I, by far, prefer using words instead of random constants. You never know what might change in the future. Like plenty of `-1` to disable some height thing broke when y went below 0. It's best to use `disabled` or `default` to convey precise meaning.\r\n\r\nI can implement that type if you'd like. Otherwise, just look at how the other ones are implemented and adapt it",
      "I tryed to build the paper on my side i got the same error, without my commits BTW. Is the WorldConfiguration broken?",
      "I created a new PR with all new changes from Paper/master for better lisibility & workflow on my side.\r\n\r\nhttps://github.com/PaperMC/Paper/pull/9599"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a3ffd9087c4d6d3764b4",
    "number": 9591,
    "body": "This update introduces a mushroom configuration to the Paper world, providing users with the ability to bypass the standard vanilla spread limit. This customization allows users to exert more control over mushroom spreading, potentially leading to increased mushroom growth within the designated area.",
    "head_branch": "feat/mushroom-spread",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a400d9087c4d6d3764b5",
    "number": 9590,
    "body": "This update introduces a mushroom configuration to the Paper world, providing users with the ability to bypass the standard vanilla spread limit. This customization allows users to exert more control over mushroom spreading, potentially leading to increased mushroom growth within the designated area.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a401d9087c4d6d3764b6",
    "number": 9589,
    "body": null,
    "head_branch": "refactor-context-records",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Refactor context records for easier expansion (#9589)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a402d9087c4d6d3764b7",
    "number": 9587,
    "body": "The pos variable is reassigned in this method which makes it no longer the position of the source mushroom that's being ticked.\r\n\r\nBefore:\r\n```\r\n[Paper-Test-Plugin] Source: AIR, at Location{world=CraftWorld{name=world},x=-275.0,y=69.0,z=-223.0,pitch=0.0,yaw=0.0}\r\n[Paper-Test-Plugin] New state: BROWN_MUSHROOM, at Location{world=CraftWorld{name=world},x=-275.0,y=69.0,z=-223.0,pitch=0.0,yaw=0.0}\r\n```\r\nAfter:\r\n```\r\n[Paper-Test-Plugin] Source: BROWN_MUSHROOM, at Location{world=CraftWorld{name=world},x=-275.0,y=69.0,z=-222.0,pitch=0.0,yaw=0.0}\r\n[Paper-Test-Plugin] New state: BROWN_MUSHROOM, at Location{world=CraftWorld{name=world},x=-275.0,y=69.0,z=-223.0,pitch=0.0,yaw=0.0}\r\n```",
    "head_branch": "fix/mushroom-spread-source",
    "is_a_fork": true,
    "comments": [
      "Regards"
    ],
    "commit_messages": [
      "Use correct source for mushroom block spread event (#9587)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a403d9087c4d6d3764b8",
    "number": 9584,
    "body": "This patch reduces the cost of broadcasting framed map changes to players by caching the map ID on the item frame itself, instead of reading it from the framed map's tag each time. Also reduces a bit of the logic done in tickCarriedBy for framed maps, since framed maps aren't going to have player decorations on them.\r\n\r\nIn a lot of spark reports I've seen the call to MapItem#getMapId(ItemStack) take up a few percent of the tick, which seems pretty weird despite it being a simple method, so if that was fixed then this PR probably wouldn't even be necessary.\r\n\r\nCloses #9531\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9584.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/858460673.zip)",
    "head_branch": "feat/framed-map-opts",
    "is_a_fork": true,
    "comments": [
      "In testing this patch, we observed a lot of performance gains as we have a lot of item frames. \r\n\r\nHere is a spark report for before we merged the patch - https://spark.lucko.me/xhfPrGtMz0\r\n\r\nI'll include one after, once I can replicate close-ish the player count and entities. :)",
      "WOOO so happy this was merged, thank you!"
    ],
    "commit_messages": [
      "Cache map ids on item frames (#9584)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a404d9087c4d6d3764b9",
    "number": 9580,
    "body": "All these methods use the raw version of BanEntry and have conflicting nullability contracts.\r\n\r\nWhile the raw BanEntry could be fixed, the conflicting nullability contracts would require larger changes that I'm not sure we want to make. ",
    "head_branch": "fix/deprecate-extra-ban-methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Deprecate extra ban methods with raw BanEntry (#9580)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a405d9087c4d6d3764ba",
    "number": 9579,
    "body": "Not too important of an issue since it's 100% visual but nice nonetheless, fixes [MC-84789](https://bugs.mojang.com/browse/MC-84789).",
    "head_branch": "fix/wild-wolf-bone",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix wild wolves not considering bones interesting (#9579)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a406d9087c4d6d3764bb",
    "number": 9578,
    "body": "Introduce API for Mob Spawner support for AffectsSpawning to allow different type of spawning types. The reason for this as it would allow for the ability to only prevent natural spawns and keep mob spawns from spawners.\r\n\r\nOriginally I was just going to create another get/set, however, the code for checkDespawn is quite hard to change without breaking a previous patch hence I opted for editing original API by adding an extra boolean to the get (public void setAffectsSpawning(boolean affects, boolean affectsMobSpawners))\r\n\r\nI believe everything should work by common sense but unsure if I've missed or possibly stuffed something up as it's my first time meddling around with this.",
    "head_branch": "newAPI",
    "is_a_fork": true,
    "comments": [
      "> It looks like you made changes to the API of Paper but the patch for that is missing\r\n\r\nOops I must've had it on the wrong directory, my bad.\r\n\r\nEDIT: I think I've put it back but it attached to Whitelist Events API??? Not sure why it's done that.",
      "I am going to close this as I don't think a secondary check here is really the way to go.\r\nAs you already laid out, this logic is rough to edit. Breaking API for this is also 100% not worth it, given how niche this API is going to be.\r\n\r\nAn alternative approach that I could see working in the future would be an event called before the spawner searches for nearby players. To counterbalance the performance impact, this event might also allow for the definition of a backoff cooldown from even searching for players (while still running the rest of the tick logic).\r\n\r\nThis would \r\na) allow to remove specific players from specific spawners in regards to their activation\r\nb) allow spawners to skip player searching for n ticks (as specified by the backoff cooldown)\r\nc) still allows what this PR aimed to achieve, completely exclude players from affecting spawning on spawners.\r\n\r\nI hope you can understand my points here, if you have further questions, we are always around on our discord :) "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a407d9087c4d6d3764bc",
    "number": 9577,
    "body": "Introduce API for Mob Spawner support for AffectsSpawning to allow different type of spawning types. The reason for this as it would allow for the ability to only prevent natural spawns and keep mob spawns from spawners.\r\n\r\nOriginally I was just going to create another get/set, however, the code for checkDespawn is quite hard to change without breaking a previous patch hence I opted for editing original API by adding an extra boolean to the get (public void setAffectsSpawning(boolean affects, boolean affectsMobSpawners))\r\n\r\nI believe everything should work by common sense but unsure if I've missed or possibly stuffed something up as it's my first time meddling around with this.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a408d9087c4d6d3764bd",
    "number": 9575,
    "body": "net.kyori:ansi 1.0.3 introduces detection for Windows Terminal usage (via `WT_SESSION` env variable) and relies on jansi's presence to potentially detect other settings (such as Windows conhost)",
    "head_branch": "fix/ansi-again-again-again",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bump net.kyori:ansi to 1.0.3 (#9575)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a409d9087c4d6d3764be",
    "number": 9572,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/9563",
    "head_branch": "fix/treasure-map-gen-default",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix treasure map config default (#9572)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a40ad9087c4d6d3764bf",
    "number": 9571,
    "body": "\"tested\" it by compiling and joining which works.\r\n\r\ndiscord conversation: https://discord.com/channels/289587909051416579/555462289851940864/1137005445098242161\r\n\r\nCloses https://github.com/PaperMC/paperweight/issues/203",
    "head_branch": "update-velocity-native-v1182",
    "is_a_fork": true,
    "comments": [
      "I restored the old proxied snapshot versions of the velocity natives. there is no guarantee that they will stick around forever. old versions are unsupported for a reason. people should migrate to supported versions."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a40bd9087c4d6d3764c0",
    "number": 9570,
    "body": "Spigot incorrectly instanceOf checks the EntityTargetEvent#getTarget against the internal ItemEntity type and removes the nearest wanted item memory if said instanceOf check fails, (which is always the case) causing allays to behave differently as they constantly loose their target item.\r\n\r\nThis commit fixes the faulty behaviour by instance performing a check against the CraftItem type.\r\n\r\nResolves: #9567\r\n\r\nAdditionally also resolves a not updated distance variable that was wrongly ported to 1.19.",
    "head_branch": "bugfix/incorrect-allay-memory-ereasure",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Only erase allay memory on non-item targets (#9570)\n\n* Only erase allay memory on non-item targets\r\n\r\nSpigot incorrectly instanceOf checks the EntityTargetEvent#getTarget\r\nagainst the internal ItemEntity type and removes the nearest wanted item\r\nmemory if said instanceOf check fails, (which is always the case)\r\ncausing allays to behave differently as they constantly loose their\r\ntarget item.\r\n\r\nThis commit fixes the faulty behaviour by instance performing a check\r\nagainst the CraftItem type.\r\n\r\n* Reduce diff\r\n\r\n* fix typo\r\n\r\n---------\r\n\r\nCo-authored-by: Jake Potrebic <jake.m.potrebic@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a40cd9087c4d6d3764c1",
    "number": 9569,
    "body": "Honestly, I am not entirely sure if I changed the method CraftInventoryView.sendInventoryTitleChange(InventoryView, String) correctly for future work, because I decided to move from duplicated code, so, please, let me know how it is better to resolve such things.",
    "head_branch": "InventoryView-Components",
    "is_a_fork": true,
    "comments": [
      "This is actually a duplicate PR (https://github.com/PaperMC/Paper/pull/9330). Since that one was made first, and they do the exact same thing, I'm going to close this one."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a40ed9087c4d6d3764c2",
    "number": 9568,
    "body": "Honestly, I am not entirely sure if I changed the method `CraftInventoryView.sendInventoryTitleChange(InventoryView, String)` correctly for future work, because I decided to move from duplicated code, so, please, let me know how it is better to resolve such things.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a40fd9087c4d6d3764c3",
    "number": 9562,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a410d9087c4d6d3764c4",
    "number": 9558,
    "body": "This PR adds the `getFluid()` method to the `Block` interface and implements it in `CraftBlock`. I also added a similar method to `getBukkitMaterial`, `getBukkitFluid`, in `BlockState`\r\nIt does pretty much what it says, returns the `org.bukkit.Fluid` present in the block. For example a waterlogged stair will return a `Fluid.WATER`, same for kelp and uh same for water. Did that make sense?",
    "head_branch": "add-getfluid-method",
    "is_a_fork": true,
    "comments": [
      "Thank you for your PR. Make sure you don't modify any imports; use fully qualified imports instead. I also don't think caching the fluid here is necessary",
      "Thanks for the comment!\r\nWill change the imports. And i cached the fluid to mimic the cachedMaterial value that was already present. Other than that I will probably close this PR because I found out that MachineMaker made a draft PR for a FluidState API."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a411d9087c4d6d3764c5",
    "number": 9557,
    "body": "This PR adds the `getFluid()` method to the `Block` interface and implements it in `CraftBlock`. I also added a similar method to `getBukkitMaterial`, `getBukkitFluid`, in `BlockState`\r\nIt does pretty much what it says, returns the `org.bukkit.Fluid` present in the block. For example a waterlogged stair will return a `Fluid.WATER`, same for kelp and uh same for water. Did that make sense?",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a412d9087c4d6d3764c6",
    "number": 9554,
    "body": "This PR makes the decoration limit for banners use the config's cursor limit instead of the vanilla limit of 256\r\n\r\nCloses #9553",
    "head_branch": "feat/banner-decoration-limit",
    "is_a_fork": true,
    "comments": [
      "I wonder if there could be a usecase for have the counts separated but good enough for now"
    ],
    "commit_messages": [
      "Make the cursor limit option apply to banners (#9554)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a413d9087c4d6d3764c7",
    "number": 9552,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/9418\r\n",
    "head_branch": "fix-displayentities-rotation",
    "is_a_fork": true,
    "comments": [
      "It may be better to have a blanket fix that makes all entities respect the yaw/pitch on spawn?",
      "> It may be better to have a blanket fix that makes all entities respect the yaw/pitch on spawn?\r\n\r\nRight so I thought about that, but I'm not sure how to go about it.. [ You've said before](https://github.com/PaperMC/Paper/issues/9418#issuecomment-1612247903) that the spawning logic should be cleaned up, so besides just making all entities respect yaw/pitch (by making sure entity.moveTo() is executed regardless of the entity type) is there anything else I could fix / clean up?",
      "Trying to work on a blanket fix. What I did for now is just move the entity before returning it:\r\n```java\r\n        if (entity != null) {\r\n            entity.moveTo(x, y, z, yaw, pitch); // Paper - Set Entity Rotation\r\n            return entity;\r\n        }\r\n```\r\nHowever, looking at the code for spawning entities, sometimes it's `Entity#setPos(x, y, z)`,  `Entity#moveTo(x, y, z, yaw, pitch)` and `Entity#entity.absMoveTo(x, y, z, yaw, pitch)`\r\n\r\nMy code essentially overrides these statements, but I've tested spawning different entities and I see no issues? Why do these statements even exist when you can just do `Entity#moveTo`, which respects the yaw/pitch?"
    ],
    "commit_messages": [
      "Fix rotation for spawning display entities (#9552)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a414d9087c4d6d3764c8",
    "number": 9548,
    "body": "Closes https://github.com/PaperMC/Paper/issues/9547\r\n\r\nEventually this API will be properly replaced with https://github.com/PaperMC/Paper/pull/7877 but that shouldn't be merged before the upstream enum PR removal stuff.",
    "head_branch": "fix/world-effect",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bandaid fix for Effect (#9548)\n\nEffect or LevelEvent needs to be replaced\r\nbut ideally after the enum PR has been merged\r\nupstream. Until then, this test and these fixes\r\nshould address all the known issues with them"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a415d9087c4d6d3764c9",
    "number": 9546,
    "body": "Due to https://github.com/KyoriPowered/ansi/pull/29",
    "head_branch": "ansi-bump",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bump net.kyori.ansi to 1.0.2 (#9546)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a416d9087c4d6d3764ca",
    "number": 9545,
    "body": "Closes https://github.com/PaperMC/Paper/issues/9010\r\nCloses https://github.com/PaperMC/Paper/issues/9543\r\n\r\nAt some point, maybe we change the default value of this configuration option to more closely align with vanilla? Right after a major version upgrade probably.",
    "head_branch": "fix/strict-advancement-dim-checks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expand use of strict advancement dim check (#9545)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a417d9087c4d6d3764cb",
    "number": 9541,
    "body": "When loading an existing world using a `WorldCreator`, there is potential for two different seeds to be used. The seed used by the generator is the one loaded from the `level.dat` while the seed that gets provided to the `BiomeManager` (aka. `biomeZoomSeed`) is the one that the `WorldCreator` instance provides (which is random when not explicitly provided).\r\n\r\nWith this PR the seed from `WorldOptions` will be taken which will be the seed loaded from the `level.dat` in case the world already exists. In case a new world is being created the seed will be the one from `WorldCreator` as that is used to create `WorldOptions` in that case.\r\n\r\nThe new behavior would be the same as in `MinecraftServer#loadWorld0`\r\n\r\n## Biome Changes\r\n\r\nThe impact of this PR on existing worlds is minor. Since the seed only seems responsible for biome borders. That is probably also the reason why this bug hasn't been noticed yet. For illustration, I've extracted a 1000x1000 area of the biomes as images:\r\n\r\n| / | World Create | World load | Diff | \r\n|--|:------------------:|:----------------:|:------:|\r\n|**Without fix** | ![worldCreate](https://github.com/PaperMC/Paper/assets/7030787/3c57e749-26f4-4af4-b6ba-80a42caecc12) | ![before](https://github.com/PaperMC/Paper/assets/7030787/a776c07f-3bc1-4b8e-b46b-ba2983d0a134) | ![create-before-diff](https://github.com/PaperMC/Paper/assets/7030787/6e28d51a-dcf3-4b97-8eec-50887adc36b2)\r\n|**With fix** | ![worldCreate](https://github.com/PaperMC/Paper/assets/7030787/3c57e749-26f4-4af4-b6ba-80a42caecc12) | ![after](https://github.com/PaperMC/Paper/assets/7030787/2db0043f-84ea-491d-994d-8040c107a16b) | ![create-after-diff](https://github.com/PaperMC/Paper/assets/7030787/d5c48850-b81e-48a4-9610-86c78d71e099)\r\n\r\n\r\n",
    "head_branch": "seed-fix",
    "is_a_fork": true,
    "comments": [
      "1000 patches"
    ],
    "commit_messages": [
      "Use correct seed on api world load (#9541)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a418d9087c4d6d3764cc",
    "number": 9538,
    "body": "Closes https://github.com/PaperMC/Paper/issues/9534",
    "head_branch": "feature/instrument-translatable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Translatable interface to MusicInstrument (#9538)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a419d9087c4d6d3764cd",
    "number": 9535,
    "body": "Event runs when the client attempts to move, but is prevented from doing so by the server\r\n\r\nThe movement can be allowed by calling \"setAllowed(true)\"\r\nWarning messages can be prevented by calling \"setLogWarning(false)\"\r\n\r\nEvent can be used to:\r\n- Prevent lagback when interacting with certain game elements like launchers, double jump, etc.\r\n- Disable movement checks for admins\r\n- Prevent 'moved too quickly' and 'moved wrongly' messages from being logged\r\n\r\nEvent can also be implemented for vehicle movement, but I've skipped that in this PR.",
    "head_branch": "event/playerfailmove",
    "is_a_fork": true,
    "comments": [
      "I could see this having use for Geyser wherever we can't figure out, or implement a reasonable fix, for incorrect movement.\r\n\r\nIt does seem like you could reduce diff by having a function that is called in the three spots you replace? Each codeblock seems to be doing, more or less, the same thing.",
      "> It does seem like you could reduce diff by having a function that is called in the three spots you replace? Each codeblock seems to be doing, more or less, the same thing.\r\n\r\nI tried to make a function in CraftEventFactory but it doesn't really cut down on any boilerplate.\r\n\r\nIf you used a function inside ServerGamePacketListenerImpl you'd be able to access some private variables which would help, but it means there would be 4 diffs in this frequently patched class rather than 3.\r\n\r\nSo the question is which does the paper team prefer - 4 smaller diffs or 3 larger diffs?\r\n\r\n",
      "I'm not a coder on the Paper team, but adding a function means that someone updating Paper only has to deal with one function, instead of making sure any changes needed are propagated to all three code sections. ",
      "@kennytv Please merge :-D"
    ],
    "commit_messages": [
      "Add and implement PlayerFailMoveEvent (#9535)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a41ad9087c4d6d3764ce",
    "number": 9533,
    "body": "Merge https://github.com/PaperMC/Paper/pull/9530",
    "head_branch": "fix-inventorycloseevent-javadocs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Fix inventorycloseevent javadocs (#9533)\n\n* Add InventoryCloseEvent safety doc comment, similar to InventoryClickEvent\r\n\r\n* Fix inventorycloseevent javadocs\r\n\r\n* Fix InventoryCloseEvent and InventoryClickEvent javadocs\r\n\r\n* remove extra +\r\n\r\n---------\r\n\r\nCo-authored-by: Jake Potrebic <jake.m.potrebic@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a41bd9087c4d6d3764cf",
    "number": 9530,
    "body": "When invoking `HumanEntity.openInventory()` by an EventHandler for `InventoryCloseEvent`, clicking on inventory menus after invoking it does not fire the event `InventoryClickEvent`.\r\nScheduling a task for it fixed the issue.\r\n\r\n`InventoryClickEvent` has the following doc:\r\n```\r\n... \r\nThe following should never be invoked by an EventHandler for InventoryClickEvent using the HumanEntity or InventoryView associated with this event:\r\nHumanEntity.openInventory(Inventory)\r\n...\r\n```\r\nHowever, the comment for `InventoryCloseEvent` doesn't state that, even though it should.",
    "head_branch": "fix/inventorycloseevent-doccomment",
    "is_a_fork": true,
    "comments": [
      "Should probably be merged into https://github.com/PaperMC/Paper/blob/master/patches/api/0055-Fix-upstream-javadocs.patch"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a41cd9087c4d6d3764d0",
    "number": 9529,
    "body": "When invoking `HumanEntity.openInventory()` by an EventHandler for `InventoryCloseEvent`, clicking on inventory menus after invoking it does not fire the event `InventoryClickEvent`.\r\nScheduling a task for it fixed the issue.\r\n\r\n`InventoryClickEvent` has the following doc:\r\n```\r\n... \r\nThe following should never be invoked by an EventHandler for InventoryClickEvent using the HumanEntity or InventoryView associated with this event:\r\nHumanEntity.openInventory(Inventory)\r\n...\r\n```\r\nHowever, the comment for `InventoryCloseEvent` doesn't state that, even though it should.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a41dd9087c4d6d3764d1",
    "number": 9525,
    "body": "Closes https://github.com/PaperMC/Paper/issues/8461\r\n\r\nConstructing and calling API events in a plugin isn't API. This is because the constructors for those events are not considered API. No where else in the API as far as I can tell adds a caveat in the getter for a collection that \"if a plugin calls it, it *might* not be mutable\". Every time the server calls it, it is mutable and that's enough to say its mutable in the javadoc.",
    "head_branch": "fix/chat-viewer-javadocs",
    "is_a_fork": true,
    "comments": [
      "> I think that we should make it a habit to mark event constructors as internal TBH....\r\n\r\nYeah, I've been doing that as I come across them while making a patch that is near or affects them. "
    ],
    "commit_messages": [
      "[ci skip] Clarify viewers set mutability in chat events (#9525)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a41ed9087c4d6d3764d2",
    "number": 9522,
    "body": "Previously paper disabled the abilities for entities to teleport via end gateways if they were being used as a vehicle.\r\n\r\nWhile the behaviour generally worked fine for entities riding other entities, players would quickly end up in an invalid state, not seeing their passenger anymore.\r\n\r\nThis commit removes the paper introduced limitation by now properly updating the passengers location of a player when they are teleporting through an end gateway.",
    "head_branch": "enhancement/allow-for-safe-passenger-teleport-via-endgateway",
    "is_a_fork": true,
    "comments": [
      "not sure but can be related to this?\r\nhttps://github.com/PaperMC/Paper/issues/6658",
      "Partially, the other issue in my mind at least mainly relates to a cancelled EndgatewayTP event preventing any other entity from trying.",
      "Converted to draft for now, I do not have the time to look into the faulty behaviour of minecarts when steered through an endgateway. "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a41fd9087c4d6d3764d3",
    "number": 9521,
    "body": "Previously paper disabled the abilities for entities to teleport via end gateways if they were being used as a vehicle.\r\n\r\nWhile the behaviour generally worked fine for entities riding other entities, players would quickly end up in an invalid state, not seeing their passanger anymore.\r\n\r\nThis commit removes the paper introduced limitation by now properly updating the passangers location of a player when they are teleporting through an end gateway.\r\n\r\nResolves: #9172\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9521.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/819270730.zip)",
    "head_branch": "enhancement/allow-for-safe-passanger-teleport-via-endgateway",
    "is_a_fork": true,
    "comments": [
      "how to run paper-paperclip-1.20.1-R0.1-SNAPSHOT-reobf.jar?\r\n\r\n Error: Could not find or load main class occur when execute \"java paper-paperclip-1.20.1-R0.1-SNAPSHOT-reobf.jar--nogui\""
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a420d9087c4d6d3764d4",
    "number": 9520,
    "body": "Partially fixes [9515](https://github.com/PaperMC/Paper/issues/9515)\r\nalthough the stacktrace is unknown...\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9520.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/819302722.zip)",
    "head_branch": "remove-isremoved-skip",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove isRemoved skip on .discard() (#9520)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a421d9087c4d6d3764d5",
    "number": 9519,
    "body": "It was not functional as the check for a ticket level change before adding the delay ticket would never succeed. This is because the player chunk loader adds an unknown ticket at the same level before removing the player ticket (with addAndRemove).\r\n\r\nThis fixes it by moving the delay ticket add to the player chunk loader's addAndRemove call.\r\n\r\nAlso delays player chunk ticking status downgrades.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9519.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/819563076.zip)",
    "head_branch": "fix-delay-chunk-unloads",
    "is_a_fork": false,
    "comments": [
      "Can some1 please add `build-pr-jar` label so we can test this awesome fix?",
      "@molor Done, note it'll take a bit to build.",
      "> build-pr-jar\r\n\r\nCan confirm that it works fine.",
      "@jpenilla, what's wrong with this PR? o.o",
      "This PR is not relevant to the current chunk system, it properly delays unloads by a hardcoded 5 seconds. If we want to make this configurable again it would be done in a new PR."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a422d9087c4d6d3764d6",
    "number": 9517,
    "body": "The endgateway teleport the entity normally at the center of the found block in the horizontal axis (X+0.5 Y+0 Z+0.5) however on Spigot/Paper the offset is at the center of the block for both axis (X+0.5 Y+0.5 Z+0.5). On Paper it's even worst than Spigot since it affect all entities and so the teleportation is done in mid-air unlike vanilla.",
    "head_branch": "fix/endgatewaytp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix endgateway teleportation offset (#9517)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a423d9087c4d6d3764d7",
    "number": 9513,
    "body": null,
    "head_branch": "bugfix/paper-plugin-jar-library-jd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Fix incorrect javadoc in JarLibrary (#9513)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a424d9087c4d6d3764d8",
    "number": 9511,
    "body": "Each Paper server can enable or disable this feature, which allows clients to connect to the server without having to connect to the Velocity proxy server.\r\n\r\nThe content of pull request is same to [this](https://github.com/PaperMC/Paper/issues/9438).",
    "head_branch": "feature/Velocity",
    "is_a_fork": true,
    "comments": [
      "What's the use case of this? Why would anyone want to do this instead of just using velocitys forced-hosts feature?\n\nYou are not taking care of any authentication here. If velocity is used, the server will be running in offline mode. With your option enabled anyone could connect to the server without being authenticated. That's bad. At least some sort of hybrid mode would be needed to authenticate the players that connect directly.",
      "why not just use forced hosts in velocity?",
      "In my case, my friend's Velocity server and my Paper server are not on the same network, so forced-host doesn't work as well as I thought.\r\n\r\n...or I may not have enough understanding about forced-host well.",
      "Hi, thank you for wanting to contribute to Paper!\r\n\r\nUnfortunately, this is not something we want in Paper as it is, it does not take care of authentication whatsoever and it's not in our interest to have the server manage some sort of hybrid, broken, and exploitable mix between online and offline mode.\r\n\r\nIt is greatly appreciated to discuss and socialize changes before making/submitting them, that be via its own issue or in our discord. That being said, it was mentioned that the forced hosts setting in the proxy should solve your mentioned problem in #9438. If you have questions about feel free to reach out to us in our [discord server](https://discord.gg/papermc) or in the [PaperMC forums](https://forums.papermc.io/)."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a425d9087c4d6d3764d9",
    "number": 9509,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/9508\r\n\r\n----\r\n\r\nMojang's (and originally ours since we fixed it before) fix for https://bugs.mojang.com/browse/MC-257875 didn't take into account the `Unbreakable` nbt tag for damageable items. We can bypass that by just directly checking if the itemstack's item type has durability. If it does not, we shrink by 1. If it does, you call the ItemStack#hurtAndBreak method which has it's own check for damageable items.",
    "head_branch": "fix/unbreakable-flint-steel",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix unbreakable flint and steel consumed when igniting creepers (#9509)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a426d9087c4d6d3764da",
    "number": 9505,
    "body": null,
    "head_branch": "feat/mm-resolvers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat: add minimessage tag resolvers overload to CommandSender#sendMessage (#9505)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a427d9087c4d6d3764db",
    "number": 9502,
    "body": "Each Paper server can enable or disable this feature, which allows clients to connect to the server without having to connect to the Velocity proxy server.\r\n\r\nThe content of pull request is same to [this](https://github.com/PaperMC/Paper/issues/9438).",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a428d9087c4d6d3764dc",
    "number": 9497,
    "body": "I know @jpenilla was working on a poc for how we could use version catalogs with patches which would make tracking versions better, but in the meantime, these should be added so any types in the javadocs are linked correctly.",
    "head_branch": "fix/missing-javadoc-links",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Add missing javadoc links (#9497)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a429d9087c4d6d3764dd",
    "number": 9495,
    "body": "EntityDeathEvent isn't called for the ender dragon when it's killed with the kill() method. This fixes the EntityDeathEvent not being called when killing the ender dragon with that method. Fixes #8836",
    "head_branch": "ender-dragon-kill",
    "is_a_fork": true,
    "comments": [
      "You need to handle canceling. In general, take a look at https://github.com/PaperMC/Paper/pull/8839/files\r\nBut since it hasn't been updated ina bot, you can prolly supercede it.",
      "thank you so much guys <3"
    ],
    "commit_messages": [
      "Fire entity death event for ender dragon (#9495)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a42ad9087c4d6d3764de",
    "number": 9494,
    "body": "EntityDeathEvent isn't called for the ender dragon when it's killed with the kill() method. This fixes the EntityDeathEvent not being called when killing the ender dragon with that method.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a42bd9087c4d6d3764df",
    "number": 9493,
    "body": "Book author and title are stored as strings, and not parsed as components. Therefore the jank hex legacy format is not supported, and that format should not be written or read. This creates a separate legacy serializer for use in the book meta impl.",
    "head_branch": "fix/book-meta-colors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't support hex in book title and author (#9493)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a42cd9087c4d6d3764e0",
    "number": 9492,
    "body": "See d0620624",
    "head_branch": "fix-d0620624",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add back accidentally dropped Wandering Trader patch (#9492)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a42dd9087c4d6d3764e1",
    "number": 9491,
    "body": "Closing accidentaly the previous PR (#9132) during the rebase however I've found a cleaner way to fix the bug.",
    "head_branch": "fix-mc-65198",
    "is_a_fork": true,
    "comments": [
      "Maybe you should move your patch to that one instead https://github.com/PaperMC/Paper/blob/master/patches/server/0873-Fix-a-bunch-of-vanilla-bugs.patch",
      "Requested changes applied to fix the anvil issue. PR rebased and move the MC bug fix to the existant patch file `0873-Fix-a-bunch-of-vanilla-bugs.patch`"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a42ed9087c4d6d3764e2",
    "number": 9488,
    "body": "This PR fixes vanilla's thread priority of 8 being overridden with 7 (regular priority of 5 + 2). I'm not too sure how much of a difference this makes or if this line is still even needed, but a higher priority seems better than a lower one.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9488.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/863108412.zip)",
    "head_branch": "fix/main-thread-priority",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix main thread priority being lowered (#9488)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a42fd9087c4d6d3764e3",
    "number": 9486,
    "body": "Way simpler to implement just for potion mixes as it doesn't require any messing with recipe books or StackedContents. Made it clear its only use is for potion mixes.",
    "head_branch": "feature/potion-mix-predicate-choice",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add predicate recipe choice only for potion mixes (#9486)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a430d9087c4d6d3764e4",
    "number": 9485,
    "body": "# BREAKING\r\n\r\nUpstream added a method to `ItemFactory`, `getSpawnEgg` with a different return type to the one Paper currently has. A bytecode fix has been added which will let plugins compiled against previous API work, but any code that used the old method won't compile without fixing it. \r\n\r\n----\r\n\r\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n82af5dc6 SPIGOT-7396: Add PlayerSignOpenEvent\r\n3f0281ca SPIGOT-7063, PR-763: Add DragonBattle#initiateRespawn with custom EnderCrystals\r\nf83c8df4 PR-873: Add PlayerRecipeBookClickEvent\r\n14560d39 SPIGOT-7435: Add TeleportCause#EXIT_BED\r\n2cc6db92 SPIGOT-7422, PR-887: Add API to set sherds on decorated pots\r\n36022f02 PR-883: Add ItemFactory#getSpawnEgg\r\n12eb5c46 PR-881: Update Scoreboard Javadocs, remove explicit exception throwing\r\nf6d8d44a PR-882: Add modern time API methods to ban API\r\n21a7b710 Upgrade some Maven plugins to reduce warnings\r\n11fd1225 PR-886: Deprecate the SmithingRecipe constructor as it now does nothing\r\ndbd1761d SPIGOT-7406: Improve documentation for getDragonBattle\r\n\r\nCraftBukkit Changes:\r\nd548daac2 SPIGOT-7446: BlockState#update not updating a spawner's type to null\r\n70e0bc050 SPIGOT-7447: Fix --forceUpgrade\r\n6752f1d63 SPIGOT-7396: Add PlayerSignOpenEvent\r\n847b4cad5 SPIGOT-7063, PR-1071: Add DragonBattle#initiateRespawn with custom EnderCrystals\r\nc335a555f PR-1212: Add PlayerRecipeBookClickEvent\r\n4be756ecb SPIGOT-7445: Fix opening smithing inventory\r\ndb70bd6ed SPIGOT-7441: Fix issue placing certain items in creative/op\r\nf7fa6d993 SPIGOT-7435: Add TeleportCause#EXIT_BED\r\nb435e8e8d SPIGOT-7349: Player#setDisplayName not working when message/format unmodified\r\na2fafdd1d PR-1232: Re-add fix for player rotation\r\n7cf863de1 PR-1233: Remove some old MC bug fixes now fixed in vanilla\r\n08ec344ad Fix ChunkGenerator#generateCaves never being called\r\n5daeb502a SPIGOT-7422, PR-1228: Add API to set sherds on decorated pots\r\n52faa6b32 PR-1224: Add ItemFactory#getSpawnEgg\r\n01cae71b7 SPIGOT-7429: Fix LEFT_CLICK_AIR not working for passable entities and spectators\r\na94277a18 PR-1223: Remove non-existent scoreboard display name/prefix/suffix limits\r\n36b107660 PR-1225: Add modern time API methods to ban API\r\n59ead25bc Upgrade some Maven plugins to reduce warnings\r\n202fc5c4e Increase outdated build delay\r\nce545de57 SPIGOT-7398: TextDisplay#setInterpolationDuration incorrectly updates the line width\r\n\r\nSpigot Changes:\r\nb41c46db Rebuild patches\r\n3374045a SPIGOT-7431: Fix EntityMountEvent returning opposite entities\r\n0ca4eb66 Rebuild patches\r\n\r\n----\r\n\r\nI removed the entries we had in reobf-mappings-patch.tiny because as far as I can tell, they aren't needed after upstream's fix.",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#9485)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n82af5dc6 SPIGOT-7396: Add PlayerSignOpenEvent\r\n3f0281ca SPIGOT-7063, PR-763: Add DragonBattle#initiateRespawn with custom EnderCrystals\r\nf83c8df4 PR-873: Add PlayerRecipeBookClickEvent\r\n14560d39 SPIGOT-7435: Add TeleportCause#EXIT_BED\r\n2cc6db92 SPIGOT-7422, PR-887: Add API to set sherds on decorated pots\r\n36022f02 PR-883: Add ItemFactory#getSpawnEgg\r\n12eb5c46 PR-881: Update Scoreboard Javadocs, remove explicit exception throwing\r\nf6d8d44a PR-882: Add modern time API methods to ban API\r\n21a7b710 Upgrade some Maven plugins to reduce warnings\r\n11fd1225 PR-886: Deprecate the SmithingRecipe constructor as it now does nothing\r\ndbd1761d SPIGOT-7406: Improve documentation for getDragonBattle\r\n\r\nCraftBukkit Changes:\r\nd548daac2 SPIGOT-7446: BlockState#update not updating a spawner's type to null\r\n70e0bc050 SPIGOT-7447: Fix --forceUpgrade\r\n6752f1d63 SPIGOT-7396: Add PlayerSignOpenEvent\r\n847b4cad5 SPIGOT-7063, PR-1071: Add DragonBattle#initiateRespawn with custom EnderCrystals\r\nc335a555f PR-1212: Add PlayerRecipeBookClickEvent\r\n4be756ecb SPIGOT-7445: Fix opening smithing inventory\r\ndb70bd6ed SPIGOT-7441: Fix issue placing certain items in creative/op\r\nf7fa6d993 SPIGOT-7435: Add TeleportCause#EXIT_BED\r\nb435e8e8d SPIGOT-7349: Player#setDisplayName not working when message/format unmodified\r\na2fafdd1d PR-1232: Re-add fix for player rotation\r\n7cf863de1 PR-1233: Remove some old MC bug fixes now fixed in vanilla\r\n08ec344ad Fix ChunkGenerator#generateCaves never being called\r\n5daeb502a SPIGOT-7422, PR-1228: Add API to set sherds on decorated pots\r\n52faa6b32 PR-1224: Add ItemFactory#getSpawnEgg\r\n01cae71b7 SPIGOT-7429: Fix LEFT_CLICK_AIR not working for passable entities and spectators\r\na94277a18 PR-1223: Remove non-existent scoreboard display name/prefix/suffix limits\r\n36b107660 PR-1225: Add modern time API methods to ban API\r\n59ead25bc Upgrade some Maven plugins to reduce warnings\r\n202fc5c4e Increase outdated build delay\r\nce545de57 SPIGOT-7398: TextDisplay#setInterpolationDuration incorrectly updates the line width\r\n\r\nSpigot Changes:\r\nb41c46db Rebuild patches\r\n3374045a SPIGOT-7431: Fix EntityMountEvent returning opposite entities\r\n0ca4eb66 Rebuild patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a431d9087c4d6d3764e5",
    "number": 9483,
    "body": "Obey the `randomizeData` boolean param when spawning primed TNT and itemstacks, not applying the random movements that the constructors add.",
    "head_branch": "fix/randomizeData-spawning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Respect randomizeData on more entities when spawning (#9483)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a432d9087c4d6d3764e6",
    "number": 9482,
    "body": "This simple PR changes the fluid explosion resistance of water/lava to be the same as their block's explosion resistance. In short, this makes it possible for servers to lower the explosion resistances of water and lava (it is *impossible* otherwise), while having no effect on servers which do not need to do this. \r\n\r\nExplanation: In vanilla, both the fluid and block explosion resistances of water/lava are 100. The latter is defined in a field which allows plugins to override it via reflection. The former is not, so plugins cannot change it: \r\n\r\n```java\r\n    // How fluid explosion resistances are returned\r\n    @Override\r\n    protected float getExplosionResistance() {\r\n        return 100.0F;\r\n    }\r\n```\r\n\r\nThat's not a problem - until you want to lower the explosion resistance of water/lava, e.g. to enable underwater explosions. In `ExplosionDamageCalculator#getBlockExplosionResistance`, we find that the effective explosion resistance of water/lava will always be the highest value between the fluid and block explosion resistances. In other words, it can never be lower than 100 since plugins cannot override the fluid explosion resistance. This PR resolves that. \r\n\r\n\r\n",
    "head_branch": "modifiable-fluid-explosion-resistance",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Determine lava and water fluid explosion resistance by their block explosion resistance (#9482)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a433d9087c4d6d3764e7",
    "number": 9480,
    "body": "Fixes an issue where summoned entities wouldn't have the spawn reason of COMMAND, but instead defaulted to default/natural/spawner inside the Entity#load method before the command reason could be set.",
    "head_branch": "fix/summon-cmd-spawn-reason",
    "is_a_fork": true,
    "comments": [
      "Does `Player#respawnEnttiyOnShoulder0` suffer from the exact same problem? The nbt loading of an entity before then adding it to the world with a custom spawn reason? I think the entity's spawn reason isn't overriden with `SHOULDER_ENTITY` like it should.",
      "The entity's original SpawnReason will be set so it won't be overridden with the SHOULDER_ENTITY one, I think keeping the original would be more in line with what the javadoc message says."
    ],
    "commit_messages": [
      "Fix DEFAULT getEntitySpawnReason for /summon (#9480)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a435d9087c4d6d3764e8",
    "number": 9478,
    "body": "As of 1.20, every single sign is now ticked on a server, usually for no reason. This moves the invalidation logic onto the getter. \r\n\r\nThis field is only used on interaction/sign editing essentially, so, whenever it tries to check it will do the validation there instead.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9478.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/819249044.zip)",
    "head_branch": "feat/dont-tick-signs-wtf-mojang",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove sign ticking (#9478)\n\nMinecraft now ticks signs in order to validate the playerWhoMayEdit field. This is a horrible idea, as this means that even waxed signs are ticked for essentially no reason. This moves the logic lazily onto the getter."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a436d9087c4d6d3764e9",
    "number": 9475,
    "body": "It seems that Mojang wrote the same function at 2 different places, which is very annoying.\r\nThis patch redirects `ServerPlayer#createEndPlatform` to `ServerLevel#makeObsidianPlatform` to fix that problem.",
    "head_branch": "fix/the-same-function-at-2-places",
    "is_a_fork": true,
    "comments": [
      "while code duplication is obviously meh, whats the reason you care here? this looks to me like more diff for us to maintain without any gain? ",
      "Those are similar however they are not the same the #createEndPlatform will create the platform one block below the centerPos. But the #makeObsidianPlatform creates the platform two blocks below the centerPos so this is a vanilla change for players (platform will spawn one block below than vanilla and so the teleport will be one block above the platform)",
      "I'm not really a fan of adding diff for this, its not \"fixing\" anything, and it looks like there are behavioral differences. "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a437d9087c4d6d3764ea",
    "number": 9474,
    "body": "It seems that Mojang wrote the same function at 2 different places, which is very annoying.\r\nThis patch redirects `ServerPlayer#createEndPlatform` to `ServerLevel#makeObsidianPlatform` to fix that problem.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a438d9087c4d6d3764eb",
    "number": 9473,
    "body": null,
    "head_branch": "fix/tadpole-buckets",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix item meta for tadpole buckets (#9473)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a439d9087c4d6d3764ec",
    "number": 9470,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/9469\r\n\r\n----\r\n\r\nIssue here is how CB was checking if an nbttag key was handled or not. It didn't check for handled keys specific to that item meta, it checked if any item meta used that key or not. This PR changes it to a type specific check. Also adds a test to make sure all subtypes of CraftMetaItem are present in that map.",
    "head_branch": "fix/itemmeta-handled-tags",
    "is_a_fork": true,
    "comments": [
      "Rebased for 1.20.4"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a43ad9087c4d6d3764ed",
    "number": 9468,
    "body": "Corrects nullability issues using a transforming list Deprecates the mutability of the list returned by\r\nSignChangeEvent#lines for removal later by logging any mutations from a plugin.",
    "head_branch": "fix/SignChangeEvent-nullability",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a43bd9087c4d6d3764ee",
    "number": 9467,
    "body": "Should be pretty straightforward. Let me know if I need to fixup anything.",
    "head_branch": "deprecate-getline",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add deprecations to SignSide string methods (#9467)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a43cd9087c4d6d3764ef",
    "number": 9466,
    "body": "Resolves PaperMC/Paper#9198",
    "head_branch": "feature/sculkcatalyst-bloom-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "SculkCatalyst bloom API (#9466)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a43dd9087c4d6d3764f0",
    "number": 9465,
    "body": "Resolves PaperMC/Paper#9198",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a43ed9087c4d6d3764f1",
    "number": 9462,
    "body": "Was obtainable through different methods, but you had to use different methods depending on the implementation of Entity you were working with.\r\n\r\n----\r\n\r\nIt might not be worth exposing this directly since you can deal with the Entity type directly in scoreboards methods with the api now, and if not, we can just close this quickly.",
    "head_branch": "feature/entity-scoreboard-name",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "API for an entity's scoreboard name (#9462)\n\nWas obtainable through different methods, but you had to use different\r\nmethods depending on the implementation of Entity you were working with."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a43fd9087c4d6d3764f2",
    "number": 9461,
    "body": "Added methods to get an entity's yaw/pitch directly.",
    "head_branch": "add-entity-yaw-pitch-api",
    "is_a_fork": true,
    "comments": [
      "I disagree with this PR. It’s already exposed through Location- why add these two random helpers here? Where is the setter methods that should go along with it? These methods should remain in Location unless some new API gets made to wrap around BlockPos",
      "Seems unnecessary to restrain getting an entity's pitch/yaw to Location, especially for times when you only need its rotation and not its position. As for setters, I didn't add them as there's already [Entity#setRotation](https://jd.papermc.io/paper/1.20/org/bukkit/entity/Entity.html#setRotation(float,float)), which fulfills a similar purpose.",
      "How about we just add methods to expose getX()/getY()/getZ() too?\r\nI don't see a huge issue with this.",
      "I don't know what the ultimate goal of the Position API is, but what if the entity would implement the FinePosition interface, just as an idea, or should that remain confined to the location _in_ the entity",
      "Uhh a #position() method would be better there. I'd consider that abuse of the position API.",
      "Yeah, I almost guessed that it would be abuse. #position() isn't really required because Location implements Position already (except if you would want to move away from Location in the future)",
      "> How about we just add methods to expose getX()/getY()/getZ() too?\r\n\r\nAdded. Also moved the methods into the body yaw patch, since they're somewhat related."
    ],
    "commit_messages": [
      " Add Entity Coordinate and Rotation API (#9461)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a440d9087c4d6d3764f3",
    "number": 9460,
    "body": "Improves the speed of synched entity data lookups by using an array instead of a map. The difference probably isn't too drastic but given how many places it's called from it's still nice. \r\n\r\nThis patch is originally from lithium and can be found [here](https://github.com/CaffeineMC/lithium-fabric/blob/ae1bd56556248aceba51f1d27e1317b0958448b1/src/main/java/me/jellysquid/mods/lithium/mixin/entity/data_tracker/use_arrays/DataTrackerMixin.java).",
    "head_branch": "feat/array-synched-data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Array backed synched entity data (#9460)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a441d9087c4d6d3764f4",
    "number": 9450,
    "body": "Fixes BanList API with paper's PlayerProfile.\r\n\r\n----\r\n\r\n~~Still requires a fix to the broken and bad `BanList.Type` enum being used in place of a class that should have a generic to make sure that *this* doesn't compile.\r\n\r\n`BanList<ItemStack> banList = server.getBanList(BanList.Type.PROFILE);`~~ Will handle in a separate PR.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9450.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/803148760.zip)",
    "head_branch": "fix/banlist-api",
    "is_a_fork": true,
    "comments": [
      "You can try out the fix by downloading the jar linked in https://github.com/PaperMC/Paper/pull/9450",
      "Tested the attached jar with my plugins updated to use the new Ban API, everything worked w/o any issues.",
      "Tested attached Paper jar with a plugin (Plan-5.5-build-2443-fbb77bdee.jar https://github.com/plan-player-analytics/Plan/actions/runs/5493218717) calling Player#isBanned on player disconnect. The reported ClassCastException no longer occurs.\r\n\r\nI don't know what else to test so I'll end my test here.",
      "Tried this jar with GriefPrevention and it no longer throws an exception when a player is kicked.\r\n> Paper version git-Paper-\"bc66ad8\" (MC: 1.20.1)\r\n> GriefPrevention version b23e34a"
    ],
    "commit_messages": [
      "Fix BanList API (#9450)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a442d9087c4d6d3764f5",
    "number": 9448,
    "body": "When a plugin change the hatching boolean in the event without changing the number of mobs the boolean will be ignored.\r\nThe recent upstream update removed that diff.",
    "head_branch": "fix/hatchingevnt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix ThrownEggHatchEvent#setHatching (#9448)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a443d9087c4d6d3764f6",
    "number": 9446,
    "body": "Call the BlockGrowEvent for the following situation:\r\n* the mangrove propagule and when bee grow crops on their way\r\n* sweet berry bush, cave vines (including the plant), kelp, twisting vines, weeping vines, sapling, grass/seagrass, bigdripleaf (stem+leaf, i didn't include the small dripleaf for now since there's some issue on spigot) using bonemeal\r\n* cactus/sugar cane for each age grow and not only when a new block grow\r\n\r\nGenerally those events are weird because they state to be called only for natural way/world condition but spigot call them using bone meal so...\r\n\r\nI have also added the source block to the BlockGrowEvent for consistency and fixed some cancellability issues.\r\n",
    "head_branch": "feat/missinggrowspreadevnt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a444d9087c4d6d3764f7",
    "number": 9445,
    "body": "Also fixes EntityBreakDoorEvent not having the correct 'to' block data\r\n\r\nAlso standardizes how to handle EntityChangeBlockEvent before a removeBlock or destroyBlock call. Always use 'state.getFluidState().createLegacyBlock()' to get the new state instead of just using the 'air' state.\r\n\r\nNote that some of the diff in this PR doesn't actually change what BlockData instance will be in the `EntityChangeBlockEvent`, it just standardizes how that blockdata will be obtained so its consistent and more future proof.",
    "head_branch": "fix/EntityChangeBlockEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix incorrect new blockdata in EntityChangeBlockEvent (#9445)\n\nAlso fixes EntityBreakDoorEvent not having the correct 'to' block data\r\n\r\nAlso standardizes how to handle EntityChangeBlockEvent before a removeBlock or destroyBlock\r\ncall. Always use 'state.getFluidState().createLegacyBlock()' to get the new state instead of\r\njust using the 'air' state."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a445d9087c4d6d3764f8",
    "number": 9443,
    "body": "This is a vanilla issue reported as [MC-263999](https://bugs.mojang.com/browse/MC-263999)\r\n\r\nNote that the mojira issue isn't marked as confirmed, but I'm pretty sure its an issue and I did just open that ticket. Can wait to merge if you want to wait for a response on that ticket.",
    "head_branch": "fix/break-door-particles",
    "is_a_fork": true,
    "comments": [
      "Well, it was confirmed either way, :joy: ."
    ],
    "commit_messages": [
      "Fix mob breaking doors not spawning particles (#9443)\n\nThis is a vanilla issue reported as MC-263999"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a446d9087c4d6d3764f9",
    "number": 9442,
    "body": "Added option to disable chorus plant and mushroom block updates. These blocks are very useful in plugins that are adding custom blocks through resourcepack.\r\n\r\nVideo: https://youtu.be/yef93ZCbxM4",
    "head_branch": "feature/more-options-disable-block-updates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add option to disable chorus plant and mushroom block updates (#9442)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a447d9087c4d6d3764fa",
    "number": 9441,
    "body": "Also fire the event for plugin-opened signs\r\n\r\nCloses https://github.com/PaperMC/Paper/issues/9439",
    "head_branch": "feature/expand-PlayerOpenSignEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add cause to PlayerOpenSignEvent (#9441)\n\nAlso fire the event for plugin-opened signs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a449d9087c4d6d3764fb",
    "number": 9440,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n01aa02eb PR-858: Add LivingEntity#playHurtAnimation()\r\n9421320f PR-884: Refinements to new ban API for improved compatibility and correctness\r\n37a60b45 SPIGOT-6455, SPIGOT-7030, PR-750: Improve ban API\r\n4eeb174b All smithing inventories are now the new smithing inventory\r\nf2bb168e PR-880: Add methods to get/set FallingBlock CancelDrop\r\ne7a807fa PR-879: Add Player#sendHealthUpdate()\r\n692b8e96 SPIGOT-7370: Remove float value conversion in plugin.yml\r\n2d033390 SPIGOT-7403: Add direct API for waxed signs\r\n16a08373 PR-876: Add missing Raider API and 'no action ticks'\r\n\r\nCraftBukkit Changes:\r\nb60a95c8c PR-1189: Add LivingEntity#playHurtAnimation()\r\n95c335c63 PR-1226: Fix VehicleEnterEvent not being called for certain entities\r\n0a0fc3bee PR-1227: Refinements to new ban API for improved compatibility and correctness\r\n0d0b1e5dc Revert bad change to PathfinderGoalSit causing all cats to sit\r\n648196070 SPIGOT-6455, SPIGOT-7030, PR-1054: Improve ban API\r\n31fe848d6 All smithing inventories are now the new smithing inventory\r\n9a919a143 SPIGOT-7416: SmithItemEvent not firing in Smithing Table\r\n9f64f0d22 PR-1221: Add methods to get/set FallingBlock CancelDrop\r\n3be9ac171 PR-1220: Add Player#sendHealthUpdate()\r\nc1279f775 PR-1209: Clean up various patches\r\nc432e4397 Fix Raider#setCelebrating() implementation\r\n504d96665 SPIGOT-7403: Add direct API for waxed signs\r\nc68c1f1b3 PR-1216: Add missing Raider API and 'no action ticks'\r\n85b89c3dd Increase outdated build delay\r\n\r\nSpigot Changes:\r\n9ebce8af Rebuild patches\r\n64b565e6 Rebuild patches",
    "head_branch": "up",
    "is_a_fork": false,
    "comments": [
      "Waiting for Spigot to possibly address an api break, although it's a bit /shrug"
    ],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#9440)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n01aa02eb PR-858: Add LivingEntity#playHurtAnimation()\r\n9421320f PR-884: Refinements to new ban API for improved compatibility and correctness\r\n37a60b45 SPIGOT-6455, SPIGOT-7030, PR-750: Improve ban API\r\n4eeb174b All smithing inventories are now the new smithing inventory\r\nf2bb168e PR-880: Add methods to get/set FallingBlock CancelDrop\r\ne7a807fa PR-879: Add Player#sendHealthUpdate()\r\n692b8e96 SPIGOT-7370: Remove float value conversion in plugin.yml\r\n2d033390 SPIGOT-7403: Add direct API for waxed signs\r\n16a08373 PR-876: Add missing Raider API and 'no action ticks'\r\n\r\nCraftBukkit Changes:\r\nb60a95c8c PR-1189: Add LivingEntity#playHurtAnimation()\r\n95c335c63 PR-1226: Fix VehicleEnterEvent not being called for certain entities\r\n0a0fc3bee PR-1227: Refinements to new ban API for improved compatibility and correctness\r\n0d0b1e5dc Revert bad change to PathfinderGoalSit causing all cats to sit\r\n648196070 SPIGOT-6455, SPIGOT-7030, PR-1054: Improve ban API\r\n31fe848d6 All smithing inventories are now the new smithing inventory\r\n9a919a143 SPIGOT-7416: SmithItemEvent not firing in Smithing Table\r\n9f64f0d22 PR-1221: Add methods to get/set FallingBlock CancelDrop\r\n3be9ac171 PR-1220: Add Player#sendHealthUpdate()\r\nc1279f775 PR-1209: Clean up various patches\r\nc432e4397 Fix Raider#setCelebrating() implementation\r\n504d96665 SPIGOT-7403: Add direct API for waxed signs\r\nc68c1f1b3 PR-1216: Add missing Raider API and 'no action ticks'\r\n85b89c3dd Increase outdated build delay\r\n\r\nSpigot Changes:\r\n9ebce8af Rebuild patches\r\n64b565e6 Rebuild patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a44ad9087c4d6d3764fc",
    "number": 9436,
    "body": "A bug in vanilla causes tripwires broken by shears to go into a weird state, see https://bugs.mojang.com/browse/MC-129055\r\nIn this state, destroying the tripwire will not work, it will instead disconnect from tripwire hooks for 10 ticks before connecting again. Destroying the tripwire during this 10 tick window will actually destroy the tripwire.\r\n\r\nAbusing this, and using water to repeatedly destroy the tripwire, an infinite amount of string can be easily duplicated in a fast manner, as the tripwire will drop one string when \"destroyed\" by water.\r\n\r\nIt seems tripwire in this bugged state was previously accepted as a feature, see #7259 and #7261\r\nThis PR fixes the issue by moving a line of code down one line into an empty if-statement by Mojang...\r\nIf bugged \"disarmed\" tripwire is something we'd like to keep around, a more thorough solution is needed, as the current \"unbreakable\" behavior is quite unintuitive.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9436.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/861343771.zip)",
    "head_branch": "fix/tripwire_dupe",
    "is_a_fork": true,
    "comments": [
      "I'd maybe add a config option for it since it goes beyond just a dupe, and have the fix enabled by default",
      "> Disarming without breaking has basically been accepted as a feature at this point is the problem, so we don't want to rip it out entirely\r\n\r\nWould something like this be better? We keep disarmed wires around, but make them actually break on subsequent block breaks. The code is a bit ugly by setting a block in onRemove, but it already did that previously, just hidden further away in TripWireHookBlock. This has the by-effect of making all tripwires broken by shears being disarmed on the first break, not just ones currently in a tripwire circuit - making it a bit more consistent. ",
      "Having thought about it a little more, I think just doing what you had before is the \"best\" option as long as you add a config option to revert it in the `unsupported` section (see `0005-Paper-config-files.patch`). After the initial attempt at fixing the dupe without changing mechanics, we had hoped Mojang would possibly fix either soon enough, but given that's not the case and there's no sign of it either unfortunately, having it like this a lot easier to maintain with all the terrible state handling",
      "Config option added and reduced back to just fixing the issue.",
      "Rebased.",
      "This PR looks great and even offers a switch option, can the review be completed",
      "Fix breaking tripwires with shears, fixing string dupe\r\n  allow-shears-disarmed-tripwire: false\r\n\r\nhttps://github.com/PaperMC/Paper/assets/135555687/ad7d6679-24c8-40b7-bda8-99fb1c591388\r\n\r\n\r\n\r\nWorks perfectly,even offers a switch option\r\n",
      "  allow-shears-disarmed-tripwire: true\r\n\r\nhttps://github.com/PaperMC/Paper/assets/135555687/335739c3-ed81-4d56-a0c6-51cf87d3e53d\r\n\r\n",
      "As far as I know, Forge did this a long time ago\r\nTest everything works as expected.\r\nCan the code approve the merge.\r\n꒰^ↀωↀ^꒱❤",
      "Since it seems unclear in this PR, has tripwire duping been patched? If so, is there a configuration option to opt into allowing it as discussed in #9542?\r\n\r\nI can't seem to find `allow-shears-disarmed-tripwire` in the docs, so I'm guessing this PR was abandoned and superseded by something else perhaps (since [certain users](https://www.reddit.com/r/Minecraft/comments/yy1pjz/papermc_duping_disabled/) report being unable to make use of this duplication glitch even though this PR might not have been merged).",
      "Some variation of tripwire duping remains, this should patch them, however, it has wider behavioral changes for the solution, and so, this specific variant has a configuration option\r\nDo note that we generally do not add configuration options for bug fixes",
      "> Since it seems unclear in this PR, has tripwire duping been patched? If so, is there a configuration option to opt into allowing it as discussed in #9542?\r\n> \r\n> I can't seem to find in the docs, so I'm guessing this PR was abandoned and superseded by something else perhaps (since [certain users](https://www.reddit.com/r/Minecraft/comments/yy1pjz/papermc_duping_disabled/) report being unable to make use of this duplication glitch even though this PR might not have been merged).`allow-shears-disarmed-tripwire`\r\n\r\nTNT isn't it?",
      "> Some variation of tripwire duping remains, this should patch them, however, it has wider behavioral changes for the solution, and so, this specific variant has a configuration option Do note that we generally do not add configuration options for bug fixes\r\n\r\nWhy should only one variation of tripwire duping include a configuration option over the other kinds?",
      "Committed manually because easier and without the config option - sorry for how this pr was handled, we were still figuring out how to best deal with such fixes, made worse by how this being a thing for so long also created a kind of behavioral expectation outside of the dupe"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a44bd9087c4d6d3764fd",
    "number": 9435,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/9434\r\n\r\nThe Entity source parameter on World is marked as Nullable but the method on Location isn't",
    "head_branch": "fix/nullability-annotation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Use Nullable annotation for Entity source (#9435)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a44cd9087c4d6d3764fe",
    "number": 9431,
    "body": "fix MC-123619",
    "head_branch": "fix-bed-placement",
    "is_a_fork": true,
    "comments": [
      "this is a pretty big behavior change, what is your reasoning for wanting this fixed?",
      "> this is a pretty big behavior change, what is your reasoning for wanting this fixed?\r\n\r\nI could imagine they want it to be fixed because it is a bug and it exists a long time.",
      "People can place beds inside peoples faces in nether pvp when they are in a hole, forcing them into the crawling animation so they can't even pearl out, while dealing massive damage (1 bed kills in most cases). In older game versions this bug was present but wasn't an issue since you couldn't place beds unless you had two supporting blocks beneath it, but since that was removed this bug is now very easy to exploit. Since there's no practical use for this mechanic outside of cheesing pvp, and it's been acknowledged as a bug by mojang, I don't think there is any negative to fixing it.",
      "The mojira issue talks about all \"multi block\" blocks being affected, but this fix only seems to be for bed blocks? Perhaps it should be expanded to all blocks. \n\nI am for fixing this in general, it is a confirmed mojang bug. But because it is an old one without any we may have reason to make it configurable. ",
      "Would also be in favour of hiding this behind a configuration option. Especially with doors, the mechanic of \"boosting\" yourself by jumping > placing the door > landing partially in the door comes to mind.\r\n",
      "> Would also be in favour of hiding this behind a configuration option. Especially with doors, the mechanic of \"boosting\" yourself by jumping > placing the door > landing partially in the door comes to mind.\r\n\r\nI personally wouldn't do that. If Mojang fixed that bug, that \"mechanic\" would also not exist anymore.\r\nBut still, I let the Paper team decide, I've got no power anyway, I just wanted to express my thoughts.",
      "> Especially with doors, the mechanic of \"boosting\" yourself by jumping > placing the door > landing partially in the door comes to mind.\r\n\r\nThis is why I only fixed it for beds",
      "I’m a bit iffy about this, in general this is an imperfect solution and doesn’t cover all blocks like this. May be a better thing to just have as a plugin, or just wait for vanilla to resolve such.",
      "Due to this not covering all cases of the original bug, I'm going to close this. Feel free to submit a new PR which fixes all multiblocks (due to the age, putting the fix behind a config option would also be good). Thank you for your contribution."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a44dd9087c4d6d3764ff",
    "number": 9430,
    "body": "fixes MC-123619",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Please do not open pull requests from the `master` branch, create a new branch instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a44ed9087c4d6d376500",
    "number": 9429,
    "body": "This second action only runs when a label modification happens on a closed issue, and if the accepted label is added after an issue is closed, it should be moved to the Done category rather than stay in the Invalid category.",
    "head_branch": "fix/project-action",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] add 'accepted' to Done project category (#9429)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a44fd9087c4d6d376501",
    "number": 9428,
    "body": "The Log4j AP disables incremental compilation, this change limits the scope of that to what actually needs to be processed. Further changes are needed for incremental compilation to actually work, but this is a good first step, and running the l4j processor less is an improvement regardless.",
    "head_branch": "move-log4j-plugins-to-second-sourceset",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Move Log4j plugins to own source set (#9428)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a450d9087c4d6d376502",
    "number": 9427,
    "body": "Properly cancels brushes now",
    "head_branch": "oops/fix-item-interaction",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix missing item interaction cancelling case (#9427)\n\nProperly cancels brushes now"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a451d9087c4d6d376503",
    "number": 9419,
    "body": "Should've actually checked that the one special case cb had for the `/experience` command was actually correct. Turns out its been wrong for a long time. CB un-redirects vanilla command nodes, so when checking perms for the `/xp` command node, it uses the `/experience` command node for the literal string (`experience`) and so the permission should be `minecraft.command.experience`. Don't think `minecraft.command.xp` has worked at all recently.\r\n\r\n----\r\n\r\nDepending on how much we care about permission descriptions being more specific than \"Lets you use /somecommand\", these could just be completely autogenerated in the future. Using the vanilla perm system to figure out what the default should be, OP or TRUE.",
    "head_branch": "fix/def-minecraft-perms",
    "is_a_fork": true,
    "comments": [
      "/tm and it's alias cmds should also be disabled I think"
    ],
    "commit_messages": [
      "Fix default permission for xp command (#9419)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a452d9087c4d6d376504",
    "number": 9417,
    "body": "During some update, the diff was mangled. The save/load items should be run every time due to the loot table possibly persistent across multiple uses.",
    "head_branch": "fix/replenishable-container-entities",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix replenishable container entities save/load existing contents (#9417)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a453d9087c4d6d376505",
    "number": 9413,
    "body": "In general, the client now has an acknowledgment system that will cause block changes made by the client to be reverted correctly.\r\n\r\nEssentially: \r\n1. The client enters a \"prediction\" stage, where any block changes made will have its old blockstate captured (this is referred to as \"server state\"). \r\n2. If you update blocks during this stage, the client will update this captured server state as long as they're still currently predicting. \r\n3. After prediction is done (via an ack packet) all captured blockstates are reverted to their captured server state. \r\n\r\nThis means that if the server *actually updated* a block and send a block update packet, it's correctly set, while if a block wasn't updated on the server but WAS updated on the client (server state wasn't updated), that change will be reverted.\r\n\r\nIt should be noted that this system does not yet support block entities, so those still need to be resynced when needed.\r\n\r\nI discovered this when noticing that blocks broken outside of the player's valid interaction distance are still properly reverted, even though the server doesn't send any block updates, only an ack packet.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9413.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/1088613506.zip)",
    "head_branch": "dont-resend-interaction-blocks",
    "is_a_fork": true,
    "comments": [
      "Rebased.\r\n\r\nIt should be noted here that in many cases, blocks are still manually resent. This is mostly in cases where it's obvious there is a desync.\r\n<img width=\"1273\" alt=\"Screenshot 2023-11-11 at 6 25 15 PM\" src=\"https://github.com/PaperMC/Paper/assets/23108066/0be4b872-e4dd-49b3-80ff-4a36842768d3\">\r\n",
      "Don't forget the flower pot"
    ],
    "commit_messages": [
      "Dont resend blocks on interactions (#9413)\n\nIn general, the client now has an acknowledgment system that will cause block changes made by the client to be reverted correctly.\r\n\r\nEssentially:\r\n\r\nThe client enters a \"prediction\" stage, where any block changes made will have its old blockstate captured (this is referred to as \"server state\").\r\nIf you update blocks during this stage, the client will update this captured server state as long as they're still currently predicting.\r\nAfter prediction is done (via an ack packet) all captured blockstates are reverted to their captured server state.\r\nThis means that if the server actually updated a block and send a block update packet, it's correctly set, while if a block wasn't updated on the server but WAS updated on the client (server state wasn't updated), that change will be reverted.\r\n\r\nIt should be noted that this system does not yet support block entities, so those still need to be resynced when needed.\r\n\r\nI discovered this when noticing that blocks broken outside of the player's valid interaction distance are still properly reverted, even though the server doesn't send any block updates, only an ack packet."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a454d9087c4d6d376506",
    "number": 9411,
    "body": "Previously if a command function tried to check the perm level of a parsed command, if the `function-permission-level` in `server.properties` was too low, it would throw an UOE trying to fallback to check the bukkit permission. This isn't desirable, it should fail in the expected way, returning `false` in the permission check instead of throwing an exception.\r\n\r\n----\r\n\r\nThis PR changes the check to first check if the `CommandSource` is the `NULL` instance (which will throw the UOE on a bukkit perm check). If it is that instance, it just uses the perm level comparison. Otherwise it falls back to the regular logic.",
    "head_branch": "fix/cmd-func-perm-level",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve command function perm level checks (#9411)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a455d9087c4d6d376507",
    "number": 9409,
    "body": "Adds the ability to get/set whether the Warden can ever despawn (dig down after idling for 1200 ticks)",
    "head_branch": "wardencandespawn",
    "is_a_fork": true,
    "comments": [
      "And working with the Digging class its not a option? rather than modify the cooldown? ",
      "> And working with the Digging class its not a option? rather than modify the cooldown?\r\n\r\nIt didn't seem like the better way to go. Since the Digging class is part of its `makeBrain` method, that would require somehow defining that the warden despawning behavior is not added to the Brain Memory at creation time at all. \r\n\r\nWith the proposed API you can optionally change the despawning behavior with a Warden at any time"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a456d9087c4d6d376508",
    "number": 9408,
    "body": "This work stems from a discovery of some fairly heavy main-thread IO writing going on with SavedData coming, at least in the below screenshot, from DimensionDataStorage saving: \r\n![image](https://github.com/PaperMC/Paper/assets/399721/b71cfec1-b5db-4a18-a292-b3286c7ea60f)\r\n\r\nWe should be able to safely perform async IO writes of this data when doing typical incremental saves. There was some debate about which executor to use, so open to discussion on that and more.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9408.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/1178586640.zip)",
    "head_branch": "asyncsaveddataio",
    "is_a_fork": true,
    "comments": [
      "Been using this in production for over 3 months with 0 problems, saved data io and portal travel are 2 main natural causes of lag spikes (ticks over 250ms) from what I've seen (I have maps disabled lol). \r\nThis patch is great as its a simple fix with large benefit.",
      "I'm still in a general conflict with this sorta thing, the lack of means to ensure that we get behind all data saves is generally a nuisance, while 99.999999999999...% of the time this is not going to cause issues, there is still a small technical risk of mangling the data on the disk",
      "https://github.com/electronicboy/Paper/commit/4e672d574c5eeacf58971c6125bc8e83945b7457\r\n\r\nNot 100% on it, but I generally feel that that would be more closer to making me happy here",
      "> [electronicboy@4e672d5](https://github.com/electronicboy/Paper/commit/4e672d574c5eeacf58971c6125bc8e83945b7457)\r\n> \r\n> Not 100% on it, but I generally feel that that would be more closer to making me happy here\r\n\r\nWe've just started using this patch to solve an issue we reported in #paper-help, world saving no longer lags for us! :)",
      "I've been trying to fix world save lag spikes for a month. This patch fixed the issue, thanks",
      "Closing in favour of #10171 which should be getting merged soon, thank you for your contribution!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a457d9087c4d6d376509",
    "number": 9407,
    "body": "This PR aims two things in the README\r\n- Change the url in the \"See upcoming, pending, and recently added API\" to the project PR queue, mostly because the current URL are in read-only mode\r\n- Touch a little how to show the repository thing.. i think use list for the maven/gradle not looks good.. this PR replace this with headers for make this works in the URL\r\n\r\nNote: not sure why the IDE remove empty things...",
    "head_branch": "feature/no-ref/readme-minor-changes-project-and-style",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Update Repo style and change project url in README (#9407)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a458d9087c4d6d37650a",
    "number": 9406,
    "body": "Added the option to enable Y coordinate checking in the entity tracker, which reduces the server load and the amount of packet sending.",
    "head_branch": "add-tracker-check-y",
    "is_a_fork": true,
    "comments": [
      "Can't the configuration name be a little more... explainable?",
      "I've never really been comfortable with tying this to the same range limits as the others, like, you look down into an area where there's 0 mobs, then you drop down and they all come into view, whereas without the care for Y, they'd be there; ofc, there comes some expectations for people to not go crazy, but, I've heard of servers pushing entity tracking down stupidly low that this could be an actual concern",
      "> Can't the configuration name be a little more... explainable?\r\n\r\nMy English isn't good enough, that's why it's such a dumb name. I can change it to something else if there are any suggestions, well, or the contributors can change it.\r\n\r\n> I've never really been comfortable with tying this to the same range limits as the others, like, you look down into an area where there's 0 mobs, then you drop down and they all come into view, whereas without the care for Y, they'd be there; ofc, there comes some expectations for people to not go crazy, but, I've heard of servers pushing entity tracking down stupidly low that this could be an actual concern\r\n\r\nWell, this feature is disabled by default. Cheaters can walk around the world and find deep underground minecart's, players and stuff like that, so someone might need this feature. After all, the height of the world is quite large in the new versions, so why would the player see everything that is deep underground where he often does not have the opportunity to fall down there.",
      "well, yes, but unless you add ray tracing, you're gonna be sent stuff you can't see, with stuff like the elytra, people limiting their VD to like 48 blocks becomes a larger issue than in the past, not that bucket of water isn't an OP way to navigate around, etc\r\nI don't think that this option really makes sense as a boolean, as there's no way for people to adjust to find their own balance of what players should be able to see when they look down, and if anybody wants something more, I'm sure somebody is happy to burn time away to add ray tracing, ik some anticheats already add some limited variation of it",
      "Perhaps its worth somehow making the Y distance configurable independent of the other tracking distances? Cause I do think that there is a difference in gameplay between horizontal and vertical range in this game. It'd be useful to be able to configure them separately. ",
      "Okay, made it more configurable. Also did a rebase somehow, I'm still new to git 😝",
      "A comment, with the configuration in the last commit this can also be used to help balance servers with custom long range combat by preventing people on pillars from raining hell down from y 300, so the benefits arent limited to performance/packet things. So , great change."
    ],
    "commit_messages": [
      "Add entity tracker min Y distance config option (#9406)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a459d9087c4d6d37650b",
    "number": 9402,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/9316\r\n\r\nAlso fixes another issue where the range of the entity hit result was way too small due to not squaring a distance.",
    "head_branch": "fix/spectator-entity-selectors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix entity selectors while spectating (#9402)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a45ad9087c4d6d37650c",
    "number": 9401,
    "body": null,
    "head_branch": "fix/duplicate-chat-completions-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Deprecate duplicate chat completion methods (#9401)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a45bd9087c4d6d37650d",
    "number": 9400,
    "body": "Re-implementation of https://github.com/PaperMC/Paper/pull/5460\r\n\r\nFixes https://github.com/PaperMC/Paper/issues/9393\r\n\r\n---- \r\nTracks an additional count of mobs per category for each category. The number is incremented on an aborted or cancelled PreCreatureSpawnEvent. That number is added to the true mob count per player when the game requests the mob count for a player. This \"backoff number\" is then decremented by 1 each tick for each player for each mob category.\r\n\r\nA rudimentary test I did involved a plain server with 1 player not moving for 60 seconds. With the PreCreatureSpawnEvent set to be cancelled and aborted WITHOUT these changes, it fired ~48000 times during that time period. With the changes, it fired ~5000 times over the same time period. I included the test plugin I used to do this in the PR. Will be removed before merging.\r\n\r\nThe algorithm used to decrease the \"backoff number\" is linear and simple now, unclear if it should be customizable further, or default to a non-linear implementation.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9400.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/873225710.zip)",
    "head_branch": "fix/PreCreatureSpawnEvent-per-player-mob-spawns",
    "is_a_fork": true,
    "comments": [
      "Thank you, for this fast fix. I hope this gets merged soon.",
      "Will this be merged?",
      "Any updates on this? Isn't it fine to merge already?",
      "Please do not let this die in pull request queue.",
      "Fixes also #5076",
      "Can you provide a snapshot build with this patch and without the test plugin to run a smoother server until this gets merged? @Machine-Maker ",
      "That was fast! Will the action to build the paperclip.jar get started automatically?",
      "> That was fast! Will the action to build the paperclip.jar get started automatically?\r\n\r\nHuh, it should've automatically started when I added the label."
    ],
    "commit_messages": [
      "Improve cancelling PreCreatureSpawnEvent with per player mob spawns (#9400)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a45cd9087c4d6d37650e",
    "number": 9396,
    "body": "This PR close https://github.com/PaperMC/Paper/issues/9370 by adding the BlockState already handled in DamageSource by [Machine-Maker](https://github.com/Machine-Maker) for the BlockExplodeEvent event. \r\n\r\n\r\nnote: i forget the waste of time of configure WSL2 again...",
    "head_branch": "feature/9370/include-blockstate-in-damageblock-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Handle block state in EntityDamageByBlockEvent (#9396)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a45dd9087c4d6d37650f",
    "number": 9395,
    "body": "after: ![after](https://i.imgur.com/9i0IG3H.png)\r\n\r\nbefore ![before](https://i.imgur.com/x72Scg8.png)",
    "head_branch": "fix/ugly-java-logger-format",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix ugly java logger format for paper plugin dependency loader (#9395)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a45ed9087c4d6d376510",
    "number": 9392,
    "body": "Fixes #9386\r\nDoesn't rly matter",
    "head_branch": "fix-tostring",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix cycle on paper plugin toString (#9392)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a45fd9087c4d6d376511",
    "number": 9391,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/9374\r\n\r\nThis should go back to the original behavior of spawning the painting in, if only for a few seconds until it breaks because it can't exist at that location.\r\n\r\nCan be tested by trying to spawn a painting at the same location as a ladder. ",
    "head_branch": "fix/painting-NPE",
    "is_a_fork": true,
    "comments": [
      "So there's probably a better way to fix this, like updating cb's checks to use the correct logic to check if a painting is valid, and then fallback to SOUTH.",
      "Added a missing collision check for ItemFrames and Paintings when being created. Should hopefully help with trying to guess the correct direction. I think the other bit of diff handling `null` from the `Painting.create()` method is still useful, as I'm not 100% sure we covered all bases when checking for collisions. Like we don't have the entity context."
    ],
    "commit_messages": [
      "Fix possible NPE on painting creation (#9391)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a460d9087c4d6d376512",
    "number": 9390,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n2d033390 SPIGOT-7403: Add direct API for waxed signs\r\n16a08373 PR-876: Add missing Raider API and 'no action ticks'\r\n\r\nCraftBukkit Changes:\r\nc432e4397 Fix Raider#setCelebrating() implementation\r\n504d96665 SPIGOT-7403: Add direct API for waxed signs\r\nc68c1f1b3 PR-1216: Add missing Raider API and 'no action ticks'\r\n85b89c3dd Increase outdated build delay",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a461d9087c4d6d376513",
    "number": 9388,
    "body": "Adds API to get the specific Side of a sign that an entity, position, or coord pair is facing. Not 100% on the method name, so open to other options.",
    "head_branch": "feature/Sign#getSideFacing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Sign#getInteractableSideFor (#9388)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a462d9087c4d6d376514",
    "number": 9387,
    "body": "Based off of: https://github.com/PaperMC/Paper/pull/8008/files\r\n\r\nGoofed in https://github.com/PaperMC/Paper/commit/275173e53860489decc8c005dd130fedfd1621a5#\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9387.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/767124445.zip)",
    "head_branch": "fix-interact",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix interact event call override (#9387)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a463d9087c4d6d376515",
    "number": 9385,
    "body": "Minor issue after upgrading to 1.20",
    "head_branch": "fix/phantom-spawning-entity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix incorrect phantom spawning entity (#9385)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a464d9087c4d6d376516",
    "number": 9384,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a465d9087c4d6d376517",
    "number": 9383,
    "body": "Still todo - however I wanted to start a conversation about dependency updates\r\n- Review diff properly, didn't have time (marking this as a draft)\r\n- Sort version catalog (by sub project)\r\n\r\nAll this essentially does is migrate to use a gradle version catalog, to help group dependency versions and aide in ease of updating deps. This does sync up some dependencies (most notably asm), however I tried not to touch too many current dep versions. This also ensures on build workflow we use the `gradle/wrapper-validation-action` git action \r\nThe only testing done with this is making sure it builds \r\n\r\n<i>Note, fully aware some of these strictly can't be updated, this was a generated list</i>\r\n\r\n- Gradle: 8.02 -> 8.1.1 (done)\r\n\r\n<details>\r\n<summary>Paper-API dependency updates</summary>\r\n\r\n - com.google.code.findbugs:jsr305 [1.3.9 -> 3.0.2]\r\n     http://findbugs.sourceforge.net/\r\n - com.google.code.gson:gson [2.10 -> 2.10.1]\r\n     https://github.com/google/gson\r\n - com.google.guava:guava [31.1-jre -> 32.0.1-jre]\r\n     https://github.com/google/guava\r\n - it.unimi.dsi:fastutil [8.5.6 -> 8.5.12]\r\n     http://fastutil.di.unimi.it/\r\n - net.md-5:bungeecord-chat [1.16-R0.4-deprecated+build.9 -> 1.16-R0.4]\r\n     https://github.com/SpigotMC/BungeeCord\r\n - org.apache.logging.log4j:log4j-api [2.17.1 -> 3.0.0-alpha1]\r\n     https://logging.apache.org/log4j/3.x/\r\n - org.apache.maven:maven-resolver-provider [3.8.5 -> 4.0.0-alpha-5]\r\n     https://maven.apache.org/ref/${project.version}/\r\n - org.apache.maven.resolver:maven-resolver-connector-basic [1.7.3 -> 1.9.12]\r\n     https://maven.apache.org/resolver/\r\n - org.apache.maven.resolver:maven-resolver-transport-http [1.7.3 -> 1.9.12]\r\n     https://maven.apache.org/resolver/\r\n - org.checkerframework:checker-qual [3.21.0 -> 3.35.0]\r\n     https://checkerframework.org/\r\n - org.hamcrest:hamcrest-library [1.3 -> 2.2]\r\n     http://hamcrest.org/JavaHamcrest/\r\n - org.mockito:mockito-core [4.9.0 -> 5.4.0]\r\n     https://github.com/mockito/mockito\r\n - org.ow2.asm:asm [9.4 -> 9.5]\r\n     http://asm.ow2.io/\r\n - org.ow2.asm:asm-commons [9.4 -> 9.5]\r\n     http://asm.ow2.io/\r\n - org.slf4j:slf4j-api [1.8.0-beta4 -> 2.0.7]\r\n     http://www.slf4j.org\r\n</details>\r\n\r\n<details>\r\n<summary>Paper-MojangAPI Dependency Updates</summary>\r\n\r\n - com.mojang:brigadier [1.0.18 -> 1.0.500]\r\n - it.unimi.dsi:fastutil [8.5.6 -> 8.5.12]\r\n     http://fastutil.di.unimi.it/\r\n - org.hamcrest:hamcrest-library [1.3 -> 2.2]\r\n     http://hamcrest.org/JavaHamcrest/\r\n </details>\r\n \r\n <details>\r\n <summary>Paper-Server Dependency Updates</summary>\r\n \r\n - com.lmax:disruptor [3.4.4 -> 4.0.0.RC1]\r\n     https://lmax-exchange.github.io/disruptor\r\n - io.github.classgraph:classgraph [4.8.47 -> 4.8.160]\r\n     https://github.com/classgraph/classgraph\r\n - io.netty:netty-all [4.1.87.Final -> 5.0.0.Alpha2]\r\n     http://netty.io/\r\n - io.netty:netty-codec-haproxy [4.1.87.Final -> 5.0.0.Alpha2]\r\n     http://netty.io/\r\n - net.fabricmc:mapping-io [0.3.0 -> 0.4.2]\r\n     https://github.com/FabricMC/mapping-io\r\n - org.apache.logging.log4j:log4j-core [2.19.0 -> 3.0.0-alpha1]\r\n     https://logging.apache.org/log4j/3.x/\r\n - org.apache.logging.log4j:log4j-iostreams [2.19.0 -> 3.0.0-alpha1]\r\n     https://logging.apache.org/log4j/3.x/\r\n - org.apache.maven:maven-resolver-provider [3.8.5 -> 4.0.0-alpha-5]\r\n     https://maven.apache.org/ref/${project.version}/\r\n - org.apache.maven.resolver:maven-resolver-connector-basic [1.7.3 -> 1.9.12]\r\n     https://maven.apache.org/resolver/\r\n - org.apache.maven.resolver:maven-resolver-transport-http [1.7.3 -> 1.9.12]\r\n     https://maven.apache.org/resolver/\r\n - org.hamcrest:hamcrest-library [1.3 -> 2.2]\r\n     http://hamcrest.org/JavaHamcrest/\r\n - org.jline:jline-terminal-jansi [3.21.0 -> 3.23.0]\r\n - org.mockito:mockito-core [4.9.0 -> 5.4.0]\r\n     https://github.com/mockito/mockito\r\n - org.ow2.asm:asm [9.4 -> 9.5]\r\n     http://asm.ow2.io/\r\n - org.ow2.asm:asm-commons [9.4 -> 9.5]\r\n     http://asm.ow2.io/\r\n</details>\r\n\r\n",
    "head_branch": "feature/versioncatalog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a466d9087c4d6d376518",
    "number": 9382,
    "body": "As discussed in #9303 this pull request marks the Player.sendSignChange methods as deprecated in favor of Player.sendBlockUpdate.",
    "head_branch": "feature/deprecate-sign-changes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Mark Player.sendSignChange as deprecated (#9382)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a467d9087c4d6d376519",
    "number": 9379,
    "body": "Also added 2 parameterized tests to make sure this doesn't happen again.",
    "head_branch": "fix/missing-slot-type-items",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix missing item types in SlotType for armor change event (#9379)\n\nAlso added 2 parameterized tests to make sure this doesn't happen\r\nagain."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a468d9087c4d6d37651a",
    "number": 9377,
    "body": "In the event that an item frame cannot be seen by any players, ticking the item frame every tick is unnecessary. This can be a very hot section of the entity tracker when lots of item frames are present on a server, so this reduces the logic which speeds it up.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9377.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/771539235.zip)",
    "head_branch": "feature/optimized-tracker",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Only tick item frames if players can see it (#9377)\n\nIn the event that an item frame cannot be seen by any players, ticking the item frame every tick is unnecessary. This can be a very hot section of the entity tracker when lots of item frames are present on a server, so this reduces the logic which speeds it up."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a469d9087c4d6d37651b",
    "number": 9369,
    "body": "For le build pr label\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9369.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/756659504.zip)",
    "head_branch": "schedulers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Pull Folia API take two"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a46ad9087c4d6d37651c",
    "number": 9368,
    "body": "Superseeds #9367\r\nClosing that as it was made from an Organization and not a Personal fork.\r\nThis also includes tripwires\r\n\r\nMoved config stuff to Config patch, and out of \"unsupported\" and into \"blockUpdates\"\r\nFigured a section for it was best as there are multiple options now and perhaps more down the line\r\n\r\nIn addition to preventing noteblock state updates this also prevents tripwires.\r\nNoteblock example: (Config is outdated)\r\n\r\nhttps://github.com/PaperMC/Paper/assets/62521371/85faef6d-4ee9-4907-b739-a4c1f8f0ca87\r\n\r\ntripwire example:\r\n\r\nhttps://github.com/PaperMC/Paper/assets/62521371/10977f17-08f2-4125-9d72-5c73a93ff615\r\n\r\n\r\n\r\n",
    "head_branch": "disable_block_updates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add option to disable NoteBlock and Tripwire updates (#9368)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a46bd9087c4d6d37651d",
    "number": 9367,
    "body": "Adds an \"unsupported\" setting to prevent noteblocks from updating.\r\nMostly to avoid the need for listening to BlockPhysicsEvent in plugins that try and add custom blocks via NoteBlocks\r\nThis should remove the need for that.\r\n\r\nJust a nice feature I saw Purpur had, and figured I would open a PR.\r\nUnsure if this is even wanted and if it should go in unsupportedSettings\r\n\r\n\r\nhttps://github.com/PaperMC/Paper/assets/62521371/413210c4-6bdb-4f9d-a668-a581cdcdf1fa\r\n\r\n",
    "head_branch": "disable_noteblock_updates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a46cd9087c4d6d37651e",
    "number": 9366,
    "body": "Tab-complete packet is supposed to tab-complete args for commands, but for some reason it also can suggest commands like in version 1.12.2 or lower.\r\n\r\nLet's say that player sends `ServerboundCommandSuggestionPacket` packet (yarn name: `RequestCommandCompletionsC2SPacket`) with `command` parameter set to `/`. Without this patch, the server would send all commands including namespaced commands when `send-namespaced` is false. Some hacked clients may use this bug to show namespaces (and therefore plugins names).\r\n\r\n**TLDR:**\r\nThis patch prevents server from sending namespaced commands list when `send-namespaced` is false and player requests to tab-complete only commands.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9366.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/867731183.zip)",
    "head_branch": "fix/patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't tab-complete namespaced commands if `send-namespaced` is false (#9366)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a46dd9087c4d6d37651f",
    "number": 9365,
    "body": "Open to different naming for everything here, I couldn't think of a straightforward easy name to any methods/fields that wasn't like a full sentence long.\r\n\r\n----\r\nThis new API allows more control over how AreaEffectClouds are used. An \"empty\" cloud can be forced to still calculate affected entities and the AreaEffectCloudApplyEvent has finer control over what counts as a \"use\" for decreasing the \"radius\" of the cloud.",
    "head_branch": "feature/better-AreaEffecttCloud-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a46ed9087c4d6d376520",
    "number": 9364,
    "body": "Can maybe be merged into Owen's big \"missing entity API\" patch?\r\n\r\nI followed the name convention for other \"get owner uuid\" methods with `getOwnerUniqueId`, but things are less clear for \"set owner uuid\" method. There is \"setOwner(UUID)\" in some places, but it feels weird to not use the same pattern for a get/set pair.",
    "head_branch": "feature/AreaEffectCloud-owner",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Owner UUID api for AreaEffectCloud (#9364)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a46fd9087c4d6d376521",
    "number": 9361,
    "body": "Adds a new API method to `LivingEntity` called `removeAllActivePotionEffects` which calls the same logic the milk bucket does. The method name was chosen because of the existing method called `getActivePotionEffects`.",
    "head_branch": "feature/remove-all-effects",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add method to remove all active potion effects (#9361)\n\n* Add method to remove all active potion effects\r\n\r\n* use clear instead of removeAll"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a470d9087c4d6d376522",
    "number": 9360,
    "body": "Docs might need slight adjustment first to tell people they should only really use the schedulers when also targetting Folia, otherwise this keeps almost all logic of the actual Folia schedulers intact (excluding RegionScheduler) to stay consistent",
    "head_branch": "folia-schedulers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Move some Folia API to Paper for easy compat (#9360)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a471d9087c4d6d376523",
    "number": 9359,
    "body": "With this PR and https://github.com/PaperMC/paperweight/pull/200 paper-server will make use of Gradle's incremental compilation feature.\r\n\r\n## Why is this needed?\r\n\r\nCurrently, every time you want to change some code and start the `runDev` task, Gradle completely recompiles the server project taking a relatively long duration. This is especially annoying if you want to use the hot reload feature of an IDE while debugging paper (i.e. changing some lines of code and hot reloading the changes into the running VM). Waiting ~30 seconds for a single line of code to update is frustrating. And if you're unlucky the VM crashes because something went wrong while trying to reload 10k classes (because it just recompiled every file in the server project) and you have to restart the `runDev` process which triggers another recompile.\r\n\r\n## Why is that?\r\n\r\nGradle disables incremental recompilation for several reasons. In this case, it is because the Log4j annotation processor is not marked as incremental:\r\n\r\n```\r\nFull recompilation is required because org.apache.logging.log4j.core.config.plugins.processor.PluginProcessor is not incremental.\r\n```\r\n\r\n## What does this PR change?\r\n\r\nThis PR removes Log4j's annotation processor from the default dependencies and only \"activates\" it when a jar file is built. This allows the `compileJava` task to use incremental compilation (i.e. only recompiling the classes that were changed). This reduces the compile time for consecutive runs down to 2-3 seconds on my machine.\r\n\r\nTo still load Paper's Log4j plugins, the `io.papermc.paper` package gets added to the `packages` property of the log4j configuration when starting the server using the `runDev` task.\r\n\r\n## Paper and Incremental compilation\r\n\r\nSince paper patches a lot of classes from external libraries (and Minecraft) but still uses the original jar files as dependencies, incremental compilation would end up in an error (to my understanding the log4j annotation processor is the reason why these errors have not been seen yet). To fix that we need to modify the classpath and add the path of the already compiled classes as the first entry so the compiler loads our patched classes instead of the unpatched classes from the original dependencies. I've opened a PR for paperweight that does that: https://github.com/PaperMC/paperweight/pull/200 (more in-depth info: https://github.com/PaperMC/paperweight/issues/199). **Paperweight needs to be updated before this PR gets merged.**\r\n\r\n(The part from paperweight could also be placed directly in paper-server's build config, let me know what you prefer)\r\n\r\n## Things to test\r\n\r\n1. [x] 1st Build runs cleanly\r\n    - Normal builds (without incremental compilation and caches) should run as expected\r\n2. [x] Subsequent builds without code changes should not perform any compilation\r\n    - When not changing code all the tasks should complete with \"UP-TO-DATE\" / \"FROM-CACHE\"\r\n3. [x] Subsequent builds with code changes should trigger incremental compilation on the `compileJava` task\r\n    - Use the `--info` CLI flag to confirm.\r\n4. [x] All the tasks creating server JAR-Files should include the Log4j annotation processor\r\n    - Use the `--info` CLI flag to determine whether a full recompilation was triggered because of the annotation processor\r\n5. [x] The generated server JAR should contain the `Log4jPlugins.dat` file\r\n    - Test if `META-INF/org/apache/logging/log4j/core/config/plugins/Log4j2Plugins.dat` is present\r\n6. [x] When running the server using `runDev` log4j should scan `io.papermc.paper` for plugins\r\n    - Set `log4j2.debug` system property to `true` and check if log4j2 scans the package. It should find 3 plugins\r\n       -  Search for `load 3 plugins from package io.papermc.paper`\r\n    - The server log should look \"normal\" not contain any errors related to log4j (see below for examples)\r\n        - `Uncrecognized format specifier ...`\r\n        - `Unrecognized conversion specifier ...`\r\n        - `Rewrite contains an invalid element or attribute ...`\r\n 7. [x] When running a built jar file, log4j should not scan the `io.papermc.paper `  package for plugins\r\n    - Set `log4j2.debug` system property to `true`. There should be no lines starting with `Checking to see if class io.papermc.paper`\r\n \r\n\r\n\r\n",
    "head_branch": "use-incremental-compilation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a473d9087c4d6d376524",
    "number": 9358,
    "body": "Closes https://github.com/PaperMC/Paper/issues/9357\r\n\r\nAt some point, I think we should group these by a version just so we aren't building up a list of hundreds of removals that happen everytime.",
    "head_branch": "fix/bad-config-entries",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove more outdated config settings (#9358)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a474d9087c4d6d376525",
    "number": 9355,
    "body": "redo of #9155\r\n\r\nShould the slf4j and log4j dependencies be changed to `apiAndDocs` as the adventure ones? I'm not exactly sure what `apiAndDocs` does.",
    "head_branch": "add-missing-javadoc-urls-v2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "chore(api): add missing javadoc urls (#9355)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a475d9087c4d6d376526",
    "number": 9351,
    "body": null,
    "head_branch": "ansi-console-completion-description",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use ANSI serializer for console completion descriptions (#9351)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a476d9087c4d6d376527",
    "number": 9350,
    "body": "This is a small contribution from the PlayLegend server team with multiple issues resolved we had concerning player spectating. We started using this patch in production in 1.19.3. It is already in use for a long time and tested to be working flawlessly.\r\n\r\nFixes MC-261799: Spectator mode not teleporting viewers to targets in other worlds or viewers bug around (stuck) when a target changes world\r\nFixes MC-107113: Spectator mode viewers stuck when target is teleported more than viewing distance\r\nFixes MC-148993: Chunks go invisible when target moves too far over time while viewing (render POI on client is not updated)",
    "head_branch": "fix/spectator",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a477d9087c4d6d376528",
    "number": 9349,
    "body": "This is a small contribution from the PlayLegend server team with multiple issues resolved we had concerning player spectating. We started using this patch in production in 1.19.3. It is already in use for a long time and tested to be working flawlessly.\r\n\r\nFixes MC-261799: Spectator mode not teleporting viewers to targets in other worlds or viewers bug around (stuck) when a target changes world\r\nFixes MC-107113: Spectator mode viewers stuck when target is teleported more than viewing distance\r\nFixes MC-148993: Chunks go invisible when target moves too far over time while viewing (render POI on client is not updated)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a478d9087c4d6d376529",
    "number": 9347,
    "body": "Allows plugin developers to get more easy the version for there bug reports.\r\nI hope minimessage is here the way to go.\r\n\r\nJust for example:\r\n![image](https://github.com/PaperMC/Paper/assets/6745190/d6e3694f-db67-469c-ba1b-02107d4d100f)\r\n",
    "head_branch": "feature/add-clickable-version-on-version-command",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add clickable version on version command (#9347)\n\nCo-authored-by: Yannick Lamprecht <1420893+yannicklamprecht@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a479d9087c4d6d37652a",
    "number": 9346,
    "body": null,
    "head_branch": "fix/ansi-color-bleed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bump kyori's ansi to fix color bleed (#9346)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a47ad9087c4d6d37652b",
    "number": 9345,
    "body": "The impl for `BrushableBlock#getItem` actually won't return null for \"no item\" but an air itemstack. As we want to move away from using \"null\" to represent itemstack's, It should be fine to change this to `@NotNull` instead.",
    "head_branch": "fix/brushable-block-annotation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix incorrect annotation on BrushableBlock#getItem (#9345)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a47bd9087c4d6d37652c",
    "number": 9344,
    "body": "This is still needed for pre-1.19.2 sculk nbt data. Was accidentally dropped during 1.20 update [here](https://github.com/PaperMC/Paper/commit/aa1c25c88d5eadd79e6e05f4963657beccb064cb#diff-0cde6bb11a132e24e0952798e29deb7ac320d4b4afde59624dee2fefdf28ede9).",
    "head_branch": "fix/maplike-spam-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Re-add dropped patch during 1.20 update (#9344)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a47cd9087c4d6d37652d",
    "number": 9342,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nfdff0cd4 PR-869: Add Enderman#teleport and Enderman#teleportTowards\r\ndfd86ee7 Improve sendSignChange and related documentation\r\nbeced2b2 PR-867: Add Player#sendBlockUpdate to send tile entity updates\r\n\r\nCraftBukkit Changes:\r\nad6d0cffb SPIGOT-7394: Fix another issue with sendSignChange\r\n66c5ce4c7 SPIGOT-7391: Preserve vanilla sign json where not modified by event\r\nae3824f94 PR-1204: Add Enderman#teleport and Enderman#teleportTowards\r\n5863a2eae Fix sendSignChange not working\r\n4a7eadc97 PR-1201: Add Player#sendBlockUpdate to send tile entity updates\r\n789324e30 Work around issue placing decorated pots",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#9342)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nfdff0cd4 PR-869: Add Enderman#teleport and Enderman#teleportTowards\r\ndfd86ee7 Improve sendSignChange and related documentation\r\nbeced2b2 PR-867: Add Player#sendBlockUpdate to send tile entity updates\r\n\r\nCraftBukkit Changes:\r\nad6d0cffb SPIGOT-7394: Fix another issue with sendSignChange\r\n66c5ce4c7 SPIGOT-7391: Preserve vanilla sign json where not modified by event\r\nae3824f94 PR-1204: Add Enderman#teleport and Enderman#teleportTowards\r\n5863a2eae Fix sendSignChange not working\r\n4a7eadc97 PR-1201: Add Player#sendBlockUpdate to send tile entity updates\r\n789324e30 Work around issue placing decorated pots"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a47dd9087c4d6d37652e",
    "number": 9340,
    "body": "BlockEntity#load is responsible for loading the pdc data for block entities. Some of the new block entities added by mojang do not call their super method, preventing paper from loading the PDC, which leads to a loss of data.\r\n\r\nThis patch adds the super calls to prevent this.",
    "head_branch": "bugfix/block-entity-super-call",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Call BlockEntity#load in new child types (#9340)\n\nBlockEntity#load is responsible for loading the pdc data for block\r\nentities. Some of the new block entities added by mojang do not call\r\ntheir super method, preventing paper from loading the PDC, which\r\nleads to a loss of data.\r\n\r\nThis commit adds the super calls to prevent this."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a47ed9087c4d6d37652f",
    "number": 9339,
    "body": "This event provides a means for granular control over what \"operator blocks\" can be interacted by a player. Just an initial design, nothing is concrete like the event name, what type of event it is, or where it should be called. Only called in 2 example places for now.",
    "head_branch": "feature/operator-block-use-check-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a47fd9087c4d6d376530",
    "number": 9337,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a480d9087c4d6d376531",
    "number": 9336,
    "body": null,
    "head_branch": "chore/mention-adventure-cc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] mention adventure in chatcolor deprecation message (#9336)\n\n* mention adventure in chatcolor deprecation message\r\n\r\n* expand text\r\n\r\n* americans"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a481d9087c4d6d376532",
    "number": 9334,
    "body": "\r\nFixes #9275 \r\n\r\n## Test cases:\r\n### Test 1:\r\n1. Start a fresh server\r\n2. File get created\r\n3. Modify file/delete entry and check if `icanhasbukkit` again there\r\n### Test 2:\r\n1. Start a already created server with that file\r\n2. Delete it \r\n3. Restart server\r\n4. Check if file again back\r\n\r\nBoth tests are functional\r\n",
    "head_branch": "bugfix/fixes-automatic-reset-of-commands-yml",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't enforce icanhasbukkit default if alias block exists (#9334)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a482d9087c4d6d376533",
    "number": 9333,
    "body": null,
    "head_branch": "dev/1.20.1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "1.20.1 (#9333)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a483d9087c4d6d376534",
    "number": 9332,
    "body": "Author: Riley Park <rileysebastianpark@gmail.com>",
    "head_branch": "feature/adventure-bossbar-viewer",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Implement BossBarViewer on Player (#9332)\n\n* Implement BossBarViewer on Player\r\n\r\nAuthor: Riley Park <rileysebastianpark@gmail.com>\r\n\r\n* Implement BossBar#viewers"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a484d9087c4d6d376535",
    "number": 9331,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/9314\r\n\r\nThe underlying issue is item meta, but getting rid of that implementation is future plans. 😄 ",
    "head_branch": "fix/item-meta-validations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Suppress Item Meta Validation Checks (#9331)\n\nStops item meta from aggressively throwing exceptions."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a485d9087c4d6d376536",
    "number": 9330,
    "body": "Adds in `Compontent` methods for the new title methods in `InventoryView` - wasn't 100% sure on the [custom inventoryholder rebased patch changes](https://github.com/PaperMC/Paper/compare/master...TheRealRyGuy:Paper:feat/invtitle?expand=1#diff-f324938383e32d7ae067b48d303501fffb5096b1ef52d413b0861c3fb950bb57), but everything else should be alright\r\nPartially fixes #9189, however, I just carbon copied Spigot's implementation, unsure if Paper wanted a better implementation",
    "head_branch": "feat/invtitle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a486d9087c4d6d376537",
    "number": 9328,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/9312\r\nFixes https://github.com/PaperMC/Paper/issues/9317",
    "head_branch": "fix/movement-checks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix incorrectly updated move vector checking patch (#9328)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a487d9087c4d6d376538",
    "number": 9327,
    "body": "Also adds a server test to ensure the defaults match and that a seed exists for each structure set\r\n\r\nCloses https://github.com/PaperMC/Paper/issues/9324",
    "head_branch": "fix/missing-structure-seed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add trail ruins structure set seed in spigot config (#9327)\n\nAlso adds a server test to ensure the defaults match and that a seed\r\nexists for each structure set"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a488d9087c4d6d376539",
    "number": 9326,
    "body": "This small pull request adds a method to get the highest Map ID currently generated via the bukkit api. Prior to this, plugin developers would need to keep track of this themselves, using some sort of external database...",
    "head_branch": "currentMap",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a489d9087c4d6d37653a",
    "number": 9325,
    "body": "Corrects the slots for the SmithingInventory for 1.20 adding an additional get/set pair for the `template item`.\r\n\r\nCloses https://github.com/PaperMC/Paper/issues/9320",
    "head_branch": "fix/smithing-inv-helper-methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix SmithingInventory helper slot methods for 1.20 (#9325)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a48ad9087c4d6d37653b",
    "number": 9323,
    "body": "Closes https://github.com/PaperMC/Paper/issues/9321\r\nThe revival diff has been dropped during the 1.20 update",
    "head_branch": "fix/canceldeathevnt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix EntityDeathEvent cancellation (#9323)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a48bd9087c4d6d37653c",
    "number": 9322,
    "body": "Mojang don't specifically call this code anywhere (since `FireworkRocketRecipe` overrides the `assemble` method), however using the `getResult()` method inside the Bukkit returns the wrong amount for fireworks as the count is not specified in the result item.",
    "head_branch": "fix/firework-result",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix incorrect crafting result amount for fireworks (#9322)\n\nAlthough vanilla does not specifically call this method anywhere, this fixes a bug where the result using the Bukkit API returns the wrong amount."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a48dd9087c4d6d37653d",
    "number": 9313,
    "body": "Uses the new [ANSIComponentSerializer](https://github.com/KyoriPowered/adventure/tree/main/4/text-serializer-ansi) introduced in [Adventure 4.14.0](https://github.com/KyoriPowered/adventure/releases/tag/v4.14.0) to serialize components when logging them via the ComponentLogger, or when sending messages to the console.\r\n\r\nThis replaces the old solution which uses legacy jank and custom color conversions, with a new library [(net.kyori.ansi)](https://github.com/KyoriPowered/ansi) that handles the conversion and config.\r\n\r\nOpen questions:\r\n\r\n - The underlying net.kyori.ansi library tries to auto-detect the current terminal's color capabilities, but it can also be configured through some system properties, [documented here](https://docs.advntr.dev/serializer/ansi.html#usage). Should this also be documented on Paper's side?\r\n\r\n - This change removes the old `minecraftFormatting` log pattern converter, since it is no longer necessary, and is thus removed in the bundled default log4j config. However, anyone using a custom config will still probably have the converter in there. Should there be a noop shim to facilitate the old configs, and should it just be a noop or maybe even warn on use?\r\n\r\n - Is the new method fully compatible with existing setups? I can't answer this myself since I'm 100% sure of the details of the system here, but I do know the original (intentionally) broke a lot of legacy uses. This new method should hopefully work in exactly as many cases as the system it is replacing, but I can't be sure here.",
    "head_branch": "ansi",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use net.kyori.ansi for console logging (#9313)\n\nUses the new ANSIComponentSerializer introduced in Adventure 4.14.0 to\r\nserialize components when logging them via the ComponentLogger, or when\r\nsending messages to the console.\r\n\r\nThis replaces the old solution which uses legacy jank and custom color\r\nconversions, with a new library that handles the conversion and config"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a48ed9087c4d6d37653e",
    "number": 9311,
    "body": "Sniffer can now explore a position in different worlds but spigot hasn't updated their methods\r\nThe removeExploredLocation is useless since it compare a blockPos and a globalpos and so it will always fail",
    "head_branch": "fix/snifferapi",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix sniffer removeExploredLocation and javadoc (#9311)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a48fd9087c4d6d37653f",
    "number": 9310,
    "body": "Minecraft 1.20 introduced the SignText class that holds onto the text of a single side of a minecraft sign.\r\nThis type is immutable and any methods on it produce an updated, new instance of the class rather than mutating the called upon instance.\r\n\r\nSpigot does not respect this change as it does not re-assign the constructed sign text to the instance nor does it feed back said instance to the virtual sign block entity.",
    "head_branch": "bugfix/fix-sendSignChange",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix sendSignChange0's usage of SignText (#9310)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a490d9087c4d6d376540",
    "number": 9307,
    "body": "When my friend joined the test server, it would kick him out repeatedly over and over again and would not stop.\r\n\r\nFIX in 1.19.4-REL-212",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a491d9087c4d6d376541",
    "number": 9301,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n54e8ec7b SPIGOT-7350: Add methods to get hints from EnchantItemEvent\r\n950f83e3 SPIGOT-7383: Add EntityDamageEvent.DamageCause#KILL and EntityDamageEvent.DamageCause#WORLD_BORDER\r\n1687ea8f PR-799: Adjust CreatureSpawner to allow for spawners with no mob type\r\n08dfc6a4 PR-852: Add setMotd and setMaxPlayers\r\n318ace0d Define SpawnerSpawnEvent\r\n\r\nCraftBukkit Changes:\r\n6962456f9 Fix unintended change to playSound contract and various other issues\r\n091027acc Fix unintended change to createBlockData contract\r\n63b46678a Fix another mistake in previous commits causing server crash\r\nb10ea735c Check in getOfflinePlayer is OK\r\n0cd47ae82 Remove changes to string API contracts introduced by prior commits\r\n461cd8132 Fix another issue from previous commit\r\n3bded4aae Fix issue from previous commit in SimpleHelpMap\r\n40945171b PR-1182: Consolidate Preconditions use and minor cleanup\r\nb2322fead PR-1203: Test TrimMaterial and TrimPattern constants\r\nc0f1ad4b9 SPIGOT-7350: Add methods to get hints from EnchantItemEvent\r\n9a784ee88 SPIGOT-7383: Add EntityDamageEvent.DamageCause#KILL and EntityDamageEvent.DamageCause#WORLD_BORDER\r\n88999cd53 SPIGOT-7381: Fix NullPointerException when setting item in ChiseledBookshelfInventory snapshot\r\nce710deb0 SPIGOT-7384: player.getLocation() equals PlayerMoveEvent.getTo()\r\n8c5311c20 SPIGOT-7382: Player still on fire after respawn\r\n991639bc6 PR-1124: Adjust CreatureSpawner to allow for spawners with no mob type\r\ne472b6c17 PR-1184: Add setMotd and setMaxPlayers\r\n245f2be15 Implement SpawnerSpawnEvent\r\n\r\nSpigot Changes:\r\n7e2af8b2 Rebuild patches\r\nddcbdcca Rebuild patches\r\n58b7c466 Move SpawnerSpawnEvent patches",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#9301)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a492d9087c4d6d376542",
    "number": 9300,
    "body": "resolves https://github.com/PaperMC/Paper/issues/9293",
    "head_branch": "feat/player-edit-sign-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add event for player editing sign (#9300)\n\nAddresses https://github.com/PaperMC/Paper/issues/9293"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a493d9087c4d6d376543",
    "number": 9298,
    "body": "Allows plugins to more accurately detect what block the player is being supported by. Much better than just using -1 current entity position.",
    "head_branch": "onblock-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a494d9087c4d6d376544",
    "number": 9297,
    "body": "In general, there are many flaws with the current block place event. Mainly, the server has to properly attempt to revert the block being placed, however, this had led to an unpredictable amount of issues each update and in general has seen to introduce some duping issues.\r\n\r\nThis PR suggests deprecating the current events and in favor of introducing events that more properly represent the current block-placing process. \r\n\r\nThe **PlayerPlaceBlockEvent** allows you to cancel the placing of a block. This is a simple event and occurs at the highest point of block placement logic.\r\n\r\nThe **PostPlayerPlaceBlockEvent** allows you to get what blocks are placed due to a block placement, however, unlike the BlockPlaceEvent, you are unable to cancel this event. This is because the API cannot promise that the state will actually be resolved.\r\n\r\n\r\nThere isn't any win-win situation for this. In general, it is impossible to nicely revert block placements like this.",
    "head_branch": "block-place-stuff",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a495d9087c4d6d376545",
    "number": 9296,
    "body": "1.20 added a full stacktrace to the error message when the server.properties doesn't exist. This stacktrace shouldn't be printed, really. The exception type+message should suffice.\r\n\r\nIf we want to be more specific, we could just skip the stacktrace if the exception is FileNotFoundException, but I feel like this is fine.",
    "head_branch": "fix/unneeded-stacktrace",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove stacktrace on exception from reading server.properties (#9296)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a496d9087c4d6d376546",
    "number": 9295,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/9294\r\n\r\nPlace event strikes again 😄 ",
    "head_branch": "fix-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't use event to get block position (#9295)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a497d9087c4d6d376547",
    "number": 9292,
    "body": "First PR 🎉 Huge thanks to lynxplay for helping me out here\r\n\r\nHopefully fixes issue: #8747 ",
    "head_branch": "issue-8747",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "ratelimited packet is logged to console on kick (#9292)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a498d9087c4d6d376548",
    "number": 9291,
    "body": "Replacement for https://github.com/PaperMC/Paper/pull/9284",
    "head_branch": "dev/1.20-sign-wax-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add API for waxed signs (#9291)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a499d9087c4d6d376549",
    "number": 9290,
    "body": "Remake of https://github.com/PaperMC/Paper/pull/9282/files cause dev branch was merged without checking for prs targeting it.",
    "head_branch": "fix/smithing-inv-type",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Properly remove the experimental smithing inventory type (#9290)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a49ad9087c4d6d37654a",
    "number": 9289,
    "body": "The source uuid is null when two animals breed",
    "head_branch": "fix/expsource",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add back the source uuid on exp orb for animals breeding (#9289)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a49bd9087c4d6d37654b",
    "number": 9288,
    "body": "Call the BlockGrowEvent and BlockFadeEvent during hatch process for the sniffer eggs\r\nAdd the Egg spawn reason for the new baby sniffer\r\nCall EntityDropItemEvent when the sniffer lay egg and drop its itemstack\r\nCustomize hatch time of the sniffer egg for the boosted or regular tick times",
    "head_branch": "feat/snifferegg",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add sniffer egg api (#9288)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a49cd9087c4d6d37654c",
    "number": 9286,
    "body": "Call the BlockGrowEvent for the pitcher crops and add the growth modifier",
    "head_branch": "feat/pitchercrop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add pitcher plant api (#9286)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a49ed9087c4d6d37654d",
    "number": 9285,
    "body": "DO NOT MERGE THIS, USED FOR EXPERIMENTAL EXPERIMENTAL JARS!\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9285.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/740935968.zip)",
    "head_branch": "dev/1.20",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add pitcher plant api (#9286)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a49fd9087c4d6d37654e",
    "number": 9284,
    "body": null,
    "head_branch": "dev/1.20-sign-wax-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4a0d9087c4d6d37654f",
    "number": 9283,
    "body": null,
    "head_branch": "dev/1.20-antixray",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add back Anti-Xray patch (#9283)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4a1d9087c4d6d376550",
    "number": 9282,
    "body": "This is my solution to fixing the disconnect between `InventoryType.SMITHING` and `InventoryType.SMITHING_NEW`. Upstream basically broke `InventoryType.SMITHING` so only the `_NEW` version works, when it should be the other way around. If we wanted to be more strict, we could just remove that enum constant anyways as it has been \"experimental\" the whole time.",
    "head_branch": "fix/smithing-inv-type",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4a2d9087c4d6d376551",
    "number": 9281,
    "body": null,
    "head_branch": "fix/fullchunkaccess-move",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix FullChunkAccess enum move (#9281)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4a3d9087c4d6d376552",
    "number": 9280,
    "body": "Minimises the EntityFertilizeEggEvent by moving the duplicate code out into the CraftEventFactory utility.\r\nAdditionally, this adds sniffers as a fertilising entity by calling the event for them breeding and producing the sniffer egg item.",
    "head_branch": "dev/minimize-entity-fertilize-egg-event-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Minimise EntityFertilizeEggEvent and add sniffer (#9280)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a4a4d9087c4d6d376553",
    "number": 9279,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/9277",
    "head_branch": "fix/default-join-classpath",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "correct default to join-classpath: true for dependencies (#9279)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4a5d9087c4d6d376554",
    "number": 9276,
    "body": "Fully aware this will need to be reapplied once 1.20 is stable, just figured I'd push now to show the diff in case this is wanted \r\n\r\nHandles another part of #8948 by downloading and registering Spark as a plugin on startup, has been minimally tested so is marked as a draft. ",
    "head_branch": "feat/spark",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4a6d9087c4d6d376555",
    "number": 9274,
    "body": null,
    "head_branch": "ver/1.16.5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4a8d9087c4d6d376556",
    "number": 9273,
    "body": "*Hopefully* shouldn't conflict with what you have locally.\r\n\r\nDataconverter diff is just moving around classes since kenny put them in the wrong packages.",
    "head_branch": "dev-1.20/fix-compile-issues",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "1.20: Fix a bunch of compile issues (#9273)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a4a9d9087c4d6d376557",
    "number": 9271,
    "body": "Title, missed these on the first PR. Purposefully left the InventoryType at experimental as discussed in vc since we aren't sure what to do with that yet.",
    "head_branch": "dev-1.20/more-forgotten-annotations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "1.20: Remove Experimental API status where upstream forgot (#9271)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a4aad9087c4d6d376558",
    "number": 9270,
    "body": "Closes https://github.com/PaperMC/Paper/issues/5561\r\nThis fix two issues:\r\n- poi desync when the BlockPhysicsEvent is cancelled\r\n- the set air to prevent further updates doesn't have the UPDATE_MOVE_BY_PISTON flag and so the rail will drop when removed even with all the previous flags.",
    "head_branch": "fix/poiandpistondesync",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Prevent desync for poi and pistons (#9270)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4abd9087c4d6d376559",
    "number": 9269,
    "body": "Title. Makes the API compile again.",
    "head_branch": "dev-1.20/unfuck-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix API compile issues (#9269)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a4acd9087c4d6d37655a",
    "number": 9267,
    "body": null,
    "head_branch": "feature/seperate-interface-for-bootstrap",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Use a separate interface for bootstrapping (#9267)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a4add9087c4d6d37655b",
    "number": 9264,
    "body": "Updates the server logo to the modern PaperMC branding. Closes #9259 ",
    "head_branch": "update_server_logo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update the server logo (#9264)\n\n\r\nCo-authored-by: Bjarne Koll <lynxplay101@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4aed9087c4d6d37655c",
    "number": 9262,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n5dbedae1 PR-864: Fix Registry#match() failing namespaced inputs\r\n49256865 PR-863: Fix boolean PersistentDataType\r\n9f15450b SPIGOT-7195, SPIGOT-7197: Add DataPack API\r\nebef5b6a Disable InterfaceIsType Checkstyle check\r\n01d577f5 Slight tweak to boolean PersistentDataType javadoc\r\nd2b99e56 PR-857: Add boolean PersistentDataType\r\n\r\nCraftBukkit Changes:\r\n2270366cd PR-1196: Test Registry instances more thoroughly\r\n863dacb7a PR-1191: Do not start on pre-release Java 17\r\n1f2dd8e12 SPIGOT-7362: Properly handle null in CraftBlock#blockFaceToNotch()\r\ndbc70bed5 SPIGOT-7195, SPIGOT-7197: Add DataPack API",
    "head_branch": "up",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n5dbedae1 PR-864: Fix Registry#match() failing namespaced inputs\r\n49256865 PR-863: Fix boolean PersistentDataType\r\n9f15450b SPIGOT-7195, SPIGOT-7197: Add DataPack API\r\nebef5b6a Disable InterfaceIsType Checkstyle check\r\n01d577f5 Slight tweak to boolean PersistentDataType javadoc\r\nd2b99e56 PR-857: Add boolean PersistentDataType\r\n\r\nCraftBukkit Changes:\r\n2270366cd PR-1196: Test Registry instances more thoroughly\r\n863dacb7a PR-1191: Do not start on pre-release Java 17\r\n1f2dd8e12 SPIGOT-7362: Properly handle null in CraftBlock#blockFaceToNotch()\r\ndbc70bed5 SPIGOT-7195, SPIGOT-7197: Add DataPack API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a4afd9087c4d6d37655d",
    "number": 9261,
    "body": "Modifies the player's fov by a factor\r\nThe multiplier is affected by the client Accessibility option 'FOV Effects'\r\n\r\nI'm not sure about the approach of exposing a variable in ClientboundPlayerAbilitiesPacket and then mutating it. Alternatively the onUpdateAbilities method could clone Abilities before constructing the packet. Let me know if that approach is preferred",
    "head_branch": "feat/fov_scale",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4b0d9087c4d6d37655e",
    "number": 9258,
    "body": "Reported by @Lulu13022002 and [SPIGOT-2677](https://hub.spigotmc.org/jira/browse/SPIGOT-2677).\r\n\r\nWhen cancelling the retract event for sticky pistons, the piston head did not stay extended but the \"stickyied\" blocks were left behind. This doesn't match the normal piston behavior of keeping the head extended.\r\n\r\nRoot of the issue is that sticky events are called later due to need to collect the blocks being moved. \r\n\r\nI didn't find any issues, and observers function correctly, not updating when the retract event is cancelled, but this could break some obscure redstone mechanic I'm not aware of. ",
    "head_branch": "fix/sticky-piston-retract-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4b1d9087c4d6d37655f",
    "number": 9257,
    "body": "I messed up my local branch commit history, so this is a copy of #9202",
    "head_branch": "movement-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4b2d9087c4d6d376560",
    "number": 9256,
    "body": "This pr is same as the last one in #9183\r\nI messed up with the commit, so i made this one",
    "head_branch": "secure-profile-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4b3d9087c4d6d376561",
    "number": 9254,
    "body": "Also added a missing deprecation for a location block key method\r\n\r\n\r\nShould we add static methods on Chunk to get the X and Z coords individually? We had that on Block for location keys (those are now deprecated along with the rest of the location key api).\r\n\r\n",
    "head_branch": "fix/long-key",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add method to get ungenerated chunk from long key (#9254)\n\nAlso added a missing deprecation for a location block key method"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a4b4d9087c4d6d376562",
    "number": 9253,
    "body": "I thought I got all of these last time, but found 2 more. I added the annotation on the test to silence some of the \"deprecated type still in use\" inspections.",
    "head_branch": "fix/missing-deprecations-for-MaterialData",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Add missing deprecations for legacy MaterialData api (#9253)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a4b5d9087c4d6d376563",
    "number": 9252,
    "body": null,
    "head_branch": "fix/build-action",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] add 'needs triage' label to invalid on issue close (#9252)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4b6d9087c4d6d376564",
    "number": 9251,
    "body": "So I noticed that tab completions for entity selectors were not working in the console. Basically after typing in `tp @e` and hitting tab, nothing would happen when in-game, a suggestion of `[` would show up. Turns out this is due to an incompatibility between jline's tab completion which expects tab completion candidates to include the full \"word\" instead of just any next characters. So I fixed this by combining the last word in the command with the suggestions, merging them if there is some overlap. \r\n\r\nNow it works as expected, with a minor quirk.\r\nIf you type in `tp @e[type=z` and hit tab, it inserts `minecraft:z` after your current position. This is because vanilla matches keys against the namespace and path of ResourceLocation separately. So you end up with `tp @e[type=zminecraft:z` which is wrong. I'm not sure of the best approach to fix this? Perhaps we can somehow disable this double matching, and only match against the full namespace:path from the beginning just for consoles?\r\n\r\n@jpenilla this might be of some interest to you with your better fabric console mod as I know this shares similar logic to that.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9251.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/1123012047.zip)",
    "head_branch": "fix/brig-selector-completion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4b7d9087c4d6d376565",
    "number": 9245,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/9130\r\n\r\nThis patch is slowly becoming annoying. Mojang did give [MC-235045](https://bugs.mojang.com/browse/MC-235045) a priority, but who knows when it'll be fixed.",
    "head_branch": "fix/entity-argument-suggestions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "correctly hide players from entity argument suggestions (#9245)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4b8d9087c4d6d376566",
    "number": 9244,
    "body": "This PR adds a new method to  [AttributeInstance](https://jd.papermc.io/paper/1.19/org/bukkit/attribute/AttributeInstance.html), ``addTransientModifier(AttributeModifier)``. This allows adding modifiers as transient. Transient modifiers don't get saved with the NBT data.\r\nVanilla itself uses transient modifiers for speed modifications like sprinting or powder snow. This just exposes it in the API.\r\nI added this API to my fork earlier and it works fine there.\r\n\r\nCloses #9243 ",
    "head_branch": "add-transient-modifiers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add transient modifiers (#9244)\n\nThis allows adding modifiers as transient. Transient modifiers don't get saved with the NBT data.\r\nVanilla itself uses transient modifiers for speed modifications like sprinting or powder snow. This just exposes it in the API."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a4b9d9087c4d6d376567",
    "number": 9242,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/9239\r\nResolves https://github.com/PaperMC/Paper/issues/9241\r\nFix (partially): https://github.com/PaperMC/Paper/issues/9240\r\n\r\nProbably should be merged with https://github.com/PaperMC/Paper/pull/7382",
    "head_branch": "fix/experience-merging",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4bad9087c4d6d376568",
    "number": 9237,
    "body": "Does several things\r\n1. Consolidates the getShooter, setShooter logic into the AbstractProjectile class to avoid duplication of logic. This also fixes a ClassCastException bug when trying to set the shooter of LlamaSpit to a non entity ProjectileSource.\r\n2. Makes sure the `ownerUUID` and `projectileSource` fields are in sync in the case that the uuid exists, but the `projctileSource` field is null. \r\n3. Exposes the owner uuid directly via `getOwnerUniqueId` on `Projectile`.",
    "head_branch": "fix/projectile-source-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixes and additions to projectile API (#9237)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a4bbd9087c4d6d376569",
    "number": 9235,
    "body": "When the server search for nearby poi, it sometimes do some unneeded work on the center section (where the search start). This happens when the search repick the center section while searching for neighbor section. In this case duplicate entries are found on the returned list and this would cause some issues if a poi api would use theses functions. Vanilla features doesn't seems impacted except some performance implication.\r\nTo reproduce this: print the output of one affected function, place a poi block (lightning rod for example) and execute\r\na locate command in the same chunk section than the poi blocks, so really close.",
    "head_branch": "fix/initpoisectionsearch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Avoid duplicate poi entries from the first section (#9235)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4bcd9087c4d6d37656a",
    "number": 9233,
    "body": "Currently includes generated key holder classes for types\nused in the Registry Modification API\n\n\n```[tasklist]\n- [x] Add TypedKey type that has a generic for the api type, has a Key and RegistryKey field\n- [ ] https://github.com/PaperMC/paperweight/pull/197\n- [x] ~~Hide generated classes from javadocs?~~ **No**\n- [x] ~~Should `TypedKey` be interned like nms `ResourceKey`?~~ **no, just not really important, can be done later**\n- [x] Paperweight release\n```\n\nI think its acceptable that this is a manual thing, and the generated code just goes into a patch file, rather than being created for each applyPatches. Once we have source in repo, it won't be a large patch. Its also just one less build step \n\n---\n\nThe reason why this is needed, and really should only be used in conjunction with the Registry Modification API, is that you have to specify the key of any value you want to modify, but you cannot use the API object itself to get the key, like for `GameEvent`. If you wanted to modify the range of a specific `GameEvent`, you can't get the key from `GameEvent.BLOCK_OPEN.getKey()`, because the Registry Modification API runs before those objects can be created. So doing that will throw an exception. So we have `GameEventKeys` which will hold some sort of TypedKey object that you can use instead. Of course for custom ones, you can create your own keys.",
    "head_branch": "feature/key-generation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Code Generation for TypedKeys (#9233)\n\nCurrently includes generated key holder classes for types\r\nused in the Registry Modification API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a4bdd9087c4d6d37656b",
    "number": 9231,
    "body": "We should check if there is no path or the path is done navigating",
    "head_branch": "fixes/pathfinderapi",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Pathfinder hasPath should check if path is done. (#9231)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4bed9087c4d6d37656c",
    "number": 9230,
    "body": "Idk if we want to wait for a `4.2.0` release of configurate, but the updates, specifically the `PostProcess` annotation, and support for serializers checking type annotations are really helpful to get rid of some of the jank we used for the global and world configs.",
    "head_branch": "configurate-cleanup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "update configurate (#9230)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a4bfd9087c4d6d37656d",
    "number": 9229,
    "body": "#9045 Made changes to the hidePlayer function. You can chose if the player also disappears from the player list.",
    "head_branch": "feature/hidePlayer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4c0d9087c4d6d37656e",
    "number": 9228,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n4727d326 Don't let Sign extend SignSide, mark API as experimental\r\n9b29bdcc PR-845: Add preliminary support for multi sided signs\r\n\r\nCraftBukkit Changes:\r\nb346a5f6d PR-1170: Add preliminary support for multi sided signs\r\n86c816189 Update SQLite version\r\nd9324b4bc Fix addition of custom smithing trim / transform recipes\r\n\r\nSpigot Changes:\r\n7d7b241e Rebuild patches",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#9228)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n4727d326 Don't let Sign extend SignSide, mark API as experimental\r\n9b29bdcc PR-845: Add preliminary support for multi sided signs\r\n\r\nCraftBukkit Changes:\r\nb346a5f6d PR-1170: Add preliminary support for multi sided signs\r\n86c816189 Update SQLite version\r\nd9324b4bc Fix addition of custom smithing trim / transform recipes\r\n\r\nSpigot Changes:\r\n7d7b241e Rebuild patches"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a4c1d9087c4d6d37656f",
    "number": 9226,
    "body": "Sets up the ability to load new or modified resource files into Paper.\r\n\r\nUpdates paperweight to 1.5.6\r\n\r\nThis should work with all run configs, like runDev, runShadow, runReobf as well as correctly build jars for production.\r\n\r\n```[tasklist]\r\n- [ ] https://github.com/PaperMC/paperweight/pull/190\r\n- [x] Remove demo change\r\n- [x] merge into initial build system changes patch\r\n- [ ] https://github.com/PaperMC/paperweight/pull/198\r\n- [x] paperweight release & update paperweight in build.gradle.kts\r\n```",
    "head_branch": "feature/importing-data-files",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Create raw chat type as resource file instead of in source (#9226)\n\nSets up the ability to load new or modified resource files into Paper.\r\n\r\nUpdates paperweight to 1.5.6\r\n\r\nThis should work with all run configs, like runDev, runShadow, runReobf as well as correctly build jars for production."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4c2d9087c4d6d376570",
    "number": 9225,
    "body": "This fixes the bug causing cancelling PlayerInteractEvent to cause items to continue to be used despite being cancelled on the server.\r\n\r\nFor example, items being consumed but never finishing, shields being put up, etc. The underlying issue of this is that the client modifies their synced data values, and so we have to (forcibly) resend them in order for the client to reset their using item state.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9225.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/756718354.zip)",
    "head_branch": "fix-item-desync",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Properly Cancel Usable Items (#9225)\n\nThis fixes the bug causing canceling PlayerInteractEvent to cause items to continue to be used despite being canceled on the server.\r\n\r\nFor example, items being consumed but never finishing, shields being put up, etc.\r\nThe underlying issue of this is that the client modifies their synced data values, and so we have to (forcibly) resend\r\nthem in order for the client to reset their using item state."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4c3d9087c4d6d376571",
    "number": 9224,
    "body": "Basing this on my server's error logs, this error occurs in Paper.\r\n\r\n<img width=\"1237\" alt=\"cme-error\" src=\"https://github.com/PaperMC/Paper/assets/111554242/f9e9451a-6298-4051-a6ab-8ef7e62806c6\">\r\n\r\nRelevant: https://github.com/PaperMC/Folia/issues/11#issuecomment-1547312066\r\n",
    "head_branch": "upstream-cme-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4c4d9087c4d6d376572",
    "number": 9223,
    "body": "This is a remake of https://github.com/PaperMC/Paper/pull/7385\r\nThis pr has been closed as duplicate but Noah hasn't fixed theses specific cases.\r\nI have also fixed the fact that spigot doesn't emit the game event like in vanilla when an armorstand is killed in survival",
    "head_branch": "fix/armorstanddeath",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Avoid duplicate death event call for armorstands (#9223)\n\n* Avoid duplicate death event call for armorstands\r\n\r\n* restore vanilla behavior (emit the game event etc...)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4c5d9087c4d6d376573",
    "number": 9217,
    "body": "With this patch, it is now possible to further control what plugins can do with Amethyst Blocks. You can prevent Budding Amethyst blocks from creating shards with the BlockSpreadEvent, and when shards grow, it can be prevented with BlockGrowEvent",
    "head_branch": "Amethyst-PR",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Rewrote Amethyst logic to throw both BlockGrowEvent and BlockSpreadEvent (#9217)\n\nWith this patch, it is now possible to further control what plugins can do with Amethyst Blocks.\r\nYou can prevent Budding Amethyst blocks from creating shards with the BlockSreadEvent, and\r\nwhen shards grow, it can be prevented with BlockGrowEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4c6d9087c4d6d376574",
    "number": 9216,
    "body": "Due to an incorrect PerMaterialTest, all stairs were reporting as \"interactable\", when they are not. \r\n\r\nThis PR, updates the check in Material and fixes the test to accurately test interactability. ",
    "head_branch": "fix/incorrect-isInteractable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Deprecate Material#isInteractable (#9216)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a4c8d9087c4d6d376575",
    "number": 9213,
    "body": "Call EntityChangeBlockEvent when frogs lay eggs in the lake\r\n\r\nThis is a remake of https://github.com/PaperMC/Paper/pull/8136 dropped during the 1.19.3 update and i believe it wasn't intended.",
    "head_branch": "feat/upfrogegg",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Call EntityChangeBlockEvent for frogs egg (#9213)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4c9d9087c4d6d376576",
    "number": 9212,
    "body": "Upstream has pushed a new branch containing the pr that gets rid of enums for things that shouldn’t be enums. This is Paper’s tracking of that branch.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9212.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/695233502.zip)",
    "head_branch": "enum-eradication",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4cad9087c4d6d376577",
    "number": 9211,
    "body": "In Creative, the block and entity reach is the same (4.5), so the code works as is.\r\nIn Adventure, the event always fires, so the code works as is.\r\nIn Survival, the block reach is 4.5 and the entity reach is 3.0. Therefore, the existing code will not fire a LEFT_CLICK_AIR if an entity is between 3.0 and 4.5 blocks away.\r\n\r\nTo be honest, this entire method of performing a raycast to decide whether or not to fire a LEFT_CLICK_AIR is rather error-prone, even with this fix. As of 1.19.4, the vanilla client will send the block/entity interaction packets before the swing, so using that information to decide whether or not to fire LEFT_CLICK_AIR would (in my opinion) be more reliable.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9211.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/806719986.zip)",
    "head_branch": "fix/left_click_air_entity_range",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow LEFT_CLICK_AIR in 3.0->4.5 range of entity (#9211)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4cbd9087c4d6d376578",
    "number": 9210,
    "body": "Attempted fix for: https://github.com/PaperMC/Paper/issues/9117",
    "head_branch": "avoid-lazy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Avoid Lazy Initialization for Enum Fields (#9210)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4ccd9087c4d6d376579",
    "number": 9209,
    "body": "This pr add events when a player is being removed from the whitelist or added.",
    "head_branch": "feat/whitelist-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add player whitelist events (#9209)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a4cdd9087c4d6d37657a",
    "number": 9208,
    "body": "This pr add events when a player is being removed from the whitelist or added.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4ced9087c4d6d37657b",
    "number": 9206,
    "body": "Redo of https://github.com/PaperMC/Paper/pull/9119 which was closed to to an accidental force push",
    "head_branch": "fix/exact-choice-javadocs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove javadoc that doesn't apply to Paper (#9206)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a4cfd9087c4d6d37657c",
    "number": 9203,
    "body": "fixes #8731",
    "head_branch": "fix-delay-chunk-unloads",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4d0d9087c4d6d37657d",
    "number": 9202,
    "body": "Almost all the time, a player gets teleported over a bigger distance, the player gets flagged for [moving too quickly](https://github.com/PaperMC/Paper/assets/54660361/35844ad7-5717-426f-826d-5b004cde70b3).\r\nThis change simply allows the movement after a teleport it.\r\n_I could not find a way to exploit this, but I am no cheater, so I don't really know what's possible there._\r\n",
    "head_branch": "movement",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4d1d9087c4d6d37657e",
    "number": 9197,
    "body": "The ExperienceOrb entity currently has no universal 'spawn' event. This patch adds the event prior to the ExperienceOrbMergeEvent call so new experience orbs do not affect old ones.",
    "head_branch": "fix-xp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make ExperienceOrb entities call EntitySpawnEvent (#9197)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4d2d9087c4d6d37657f",
    "number": 9196,
    "body": "The ExperienceOrb entity currently has no universal 'spawn' event. This patch adds the event prior to the ExperienceOrbMergeEvent call so new experience orbs do not affect old ones.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4d3d9087c4d6d376580",
    "number": 9195,
    "body": "Fixes https://bugs.mojang.com/browse/MC-224454",
    "head_branch": "fix/mc-224454",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix MC-224454 (#9195)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4d4d9087c4d6d376581",
    "number": 9194,
    "body": "Closes #9131\r\n\r\nChanges the impl to always calculate open water instead of using the isOpenWaterFishing method, since that's only calculated when a fish is approaching. I feel this would be more in line with what the [javadoc](https://jd.papermc.io/paper/1.19/org/bukkit/entity/FishHook.html#isInOpenWater()) for the method says.",
    "head_branch": "fix/open-water",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "More accurate isInOpenWater impl (#9194)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4d5d9087c4d6d376582",
    "number": 9193,
    "body": "Closes #9191",
    "head_branch": "fix/spectator-lightning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix lightning being able to hit spectators (#9193)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4d6d9087c4d6d376583",
    "number": 9192,
    "body": "The current implementation of the compost events is broken, it breaks spigot contract with the dummy call which will be always equals to the \"real\" call on the physics world. In order to achieve that spigot precompute the random value to have the same output for both calls but the new compost event is only fired for the dummy call and can change the output without being persisted into the \"real\" call. That break the \"will raise level\" option on the compost event (trapped into the dummy) and also fire (in the case a plugin change the will raise level) the EntityChangeBlockEvent when nothing change or the reverse things telling a lie to the listener.",
    "head_branch": "fix/compostevntimpl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Re-implement the compost events (#9192)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4d7d9087c4d6d376584",
    "number": 9190,
    "body": "The offset method on BlockPosition incorrectly added the passed z offset to its x value when computing the new x value of the resulting position. This commit fixes this oversight.",
    "head_branch": "bugfix/block-position-offset",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix BlockPosition#offset(double,double,double) (#9190)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a4d8d9087c4d6d376585",
    "number": 9188,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\necfa559a PR-849: Add InventoryView#setTitle\r\n653d7edb SPIGOT-519: Add TNTPrimeEvent\r\n22fccc09 PR-846: Add method to get chunk load level\r\na070a52c PR-844: Add methods to convert Vector to and from JOML vectors\r\ncc7111fe PR-276: Add accessors to Wither's invulnerability ticks\r\n777d24e9 SPIGOT-7209: Accessors and events for player's exp cooldown\r\nccb2d01b SPIGOT-6308: Deprecate the location name property of map items\r\ncd04a31b PR-780: Add PlayerSpawnChangeEvent\r\n7d1f5b64 SPIGOT-6780: Improve documentation for World#spawnFallingBlock\r\n5696668a SPIGOT-6885: Add test and easier to debug code for reference in yaml configuration comments\r\n2e13cff7 PR-589: Expand the FishHook API\r\n2c7d3da5 PR-279: Minor edits to various Javadocs\r\n\r\nCraftBukkit Changes:\r\na7cfc778f PR-1176: Add InventoryView#setTitle\r\n563d42226 SPIGOT-519: Add TNTPrimeEvent\r\nccbc6abca Add test for Chunk.LoadLevel mirroring\r\n2926e0513 PR-1171: Add method to get chunk load level\r\n63cad7f84 PR-375: Add accessors to Wither's invulnerability ticks\r\nbfd8b1ac8 SPIGOT-7209: Accessors and events for player's exp cooldown\r\nf92a41c39 PR-1181: Consolidate Location conversion code\r\n10f866759 SPIGOT-6308: Deprecate the location name property of map items\r\n82f7b658a PR-1095: Add PlayerSpawnChangeEvent\r\nb421af7e4 PR-808: Expand the FishHook API\r\n598ad7b3f Increase outdated build delay\r\n\r\nSpigot Changes:\r\nd1bd3bd2 Rebuild patches\r\ne4265cc8 SPIGOT-7297: Entity Tracking Range option for Display entities",
    "head_branch": "up",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#9188)\n\n* Updated Upstream (Bukkit/CraftBukkit/Spigot)\r\n\r\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n2fcba9b2 SPIGOT-7347: Add missing documentation and details to ShapedRecipe\r\nc278419d PR-854: Move getHighestBlockYAt methods from World to RegionAccessor\r\n201399fb PR-853: Add API for directly setting Display transformation matrices\r\necfa559a PR-849: Add InventoryView#setTitle\r\n653d7edb SPIGOT-519: Add TNTPrimeEvent\r\n22fccc09 PR-846: Add method to get chunk load level\r\na070a52c PR-844: Add methods to convert Vector to and from JOML vectors\r\ncc7111fe PR-276: Add accessors to Wither's invulnerability ticks\r\n777d24e9 SPIGOT-7209: Accessors and events for player's exp cooldown\r\nccb2d01b SPIGOT-6308: Deprecate the location name property of map items\r\ncd04a31b PR-780: Add PlayerSpawnChangeEvent\r\n7d1f5b64 SPIGOT-6780: Improve documentation for World#spawnFallingBlock\r\n5696668a SPIGOT-6885: Add test and easier to debug code for reference in yaml configuration comments\r\n2e13cff7 PR-589: Expand the FishHook API\r\n2c7d3da5 PR-279: Minor edits to various Javadocs\r\n\r\nCraftBukkit Changes:\r\n01b2e1af4 SPIGOT-7346: Disallow players from executing commands after disconnecting\r\n7fe5ee022 PR-1186: Move getHighestBlockYAt methods from World to RegionAccessor\r\nbcc85ef67 PR-1185: Add API for directly setting Display transformation matrices\r\na7cfc778f PR-1176: Add InventoryView#setTitle\r\n563d42226 SPIGOT-519: Add TNTPrimeEvent\r\nccbc6abca Add test for Chunk.LoadLevel mirroring\r\n2926e0513 PR-1171: Add method to get chunk load level\r\n63cad7f84 PR-375: Add accessors to Wither's invulnerability ticks\r\nbfd8b1ac8 SPIGOT-7209: Accessors and events for player's exp cooldown\r\nf92a41c39 PR-1181: Consolidate Location conversion code\r\n10f866759 SPIGOT-6308: Deprecate the location name property of map items\r\n82f7b658a PR-1095: Add PlayerSpawnChangeEvent\r\nb421af7e4 PR-808: Expand the FishHook API\r\n598ad7b3f Increase outdated build delay\r\n\r\nSpigot Changes:\r\nd1bd3bd2 Rebuild patches\r\ne4265cc8 SPIGOT-7297: Entity Tracking Range option for Display entities\r\n\r\n* Work around javac bug\r\n\r\n* Call PlayerSpawnChangeEvent\r\n\r\n* Updated Upstream (Bukkit/CraftBukkit/Spigot)\r\n\r\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n2fcba9b2 SPIGOT-7347: Add missing documentation and details to ShapedRecipe\r\nc278419d PR-854: Move getHighestBlockYAt methods from World to RegionAccessor\r\n201399fb PR-853: Add API for directly setting Display transformation matrices\r\n\r\nCraftBukkit Changes:\r\n01b2e1af4 SPIGOT-7346: Disallow players from executing commands after disconnecting\r\n7fe5ee022 PR-1186: Move getHighestBlockYAt methods from World to RegionAccessor\r\nbcc85ef67 PR-1185: Add API for directly setting Display transformation matrices\r\n\r\nSpigot Changes:\r\n7da74dae Rebuild patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a4d9d9087c4d6d376586",
    "number": 9185,
    "body": "The only way to get a map is via its id, which is not a magic value. This implementation isn't going to be changing anytime soon, so it should be undeprecated.",
    "head_branch": "fix/undeprecate-getmap",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Undeprecate Server#getMap (#9185)\n\nThe only way to get a map is via its id, which is not a magic value. This implementation isn't going to be changing anytime soon, so it should be undeprecated."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a4dad9087c4d6d376587",
    "number": 9183,
    "body": "This change fixes the problem with the new **unverified chat** toast if the server is in offline-mode behind an online-mode proxy.",
    "head_branch": "origin",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4dbd9087c4d6d376588",
    "number": 9181,
    "body": "This appears to have some support in the Discord community as developers from time to time express the desire to take control over loading/saving playerdata.\r\n\r\nThis is the first \"take\" on the PR. The goal here is to provide events that can optionally provide/overwrite the data that is saved/loaded for players. This does not presently include Statistics.\r\n\r\nThis PR as a whole introduces a problem in that CompoundTag is NMS and is not normally accessible by API meaning there is some whacky casting/instanceof checking which isn't very nice. As such this is meant to open the discussion on how best to implement this PR",
    "head_branch": "playerdataevents",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4dcd9087c4d6d376589",
    "number": 9180,
    "body": "This patch was originally dropped as it was incorrectly suspected for causing another bug, that bug was subsequently fixed, however, this patch was long forgotten about by most.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9180.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/676366679.zip)",
    "head_branch": "restore/MC-2025-patch",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4ddd9087c4d6d37658a",
    "number": 9179,
    "body": "This small pull request adds an event that gets fired whenever a player creates a map...\r\n\r\nMerging this PR would result in #9073 being resolved",
    "head_branch": "mapCreateEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4dfd9087c4d6d37658b",
    "number": 9177,
    "body": "Called whenever a player's shield is being disabled. The cooldown (default 100 ticks) is also provided to optionally be changed",
    "head_branch": "playershielddisableevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PlayerShieldDisableEvent (#9177)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a4e0d9087c4d6d37658c",
    "number": 9176,
    "body": "There is a non-trivial amount of work done to determine a safe location to respawn a player. This event simply provides for plugin developers to provide their own, known respawn location event to save on any performance implications with determining a respawn location.",
    "head_branch": "getrespawnlocationevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4e1d9087c4d6d37658d",
    "number": 9175,
    "body": "Mentioned in [discord](https://canary.discord.com/channels/289587909051416579/555462289851940864/1102607328844451910) exists a issue from Upstream where with the change of DamageSource (1.19.4) about the source/direct entity related to the damage, this change cause now the source entity of the damage for falling blocks now is handled before than CraftBukkit expects causing return another DamageSource, this PR is like a \"hotfix\" for this issue, in [upstream i have a PR](https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/pull-requests/1180/overview) for try to clean and improvement this (exposing more info and another things) but consider the times for merge i prefer make this patch for this specific case.",
    "head_branch": "fix/upstream/falling-block-damagecause",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix DamageSource for Falling Blocks (#9175)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4e2d9087c4d6d37658e",
    "number": 9169,
    "body": "When the EntityCompostItemEvent is cancelled and a player/villager\r\ninteract with the composter an NPE is always thrown.\r\n\r\nI have found another issue while testing this, the will raise level option doesn't work (it works for the dummy but then is overridden by the vanilla behavior later) but i don't have time rn",
    "head_branch": "fix/compostevnt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix some NPE for EntityCompostItemEvent (#9169)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a4e3d9087c4d6d37658f",
    "number": 9167,
    "body": "The client does not send the packet needed to received this information until a little later, which can cause a condition where despite a player having disabled listing, they are able to be seen for a brief moment. This causes the player to be listed as an Anonymous Player until the actual configuration value is received from the client.",
    "head_branch": "allow-listing-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Disable allowListing before received from client (#9167)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4e4d9087c4d6d376590",
    "number": 9165,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/9164\r\n\r\nThe issue is that the legacy loader directly mutates the underlying graph, instead of going through the dependency meta tree's mutation methods. This manually registers the dependencies when needed.\r\n\r\nWe should probably remove the legacy loader at some point or something. As the whole cyclic loading issue was made a lot better with the loop \"trimming\" functionality.\r\n\r\nWe probably don't even need a dependency check in the SpigotPluginProvider (where it's failing). But, this will do fine for now.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9165.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/660582033.zip)",
    "head_branch": "legacy-plugin-loader",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix LegacyPluginLoader dependency registration (#9165)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4e5d9087c4d6d376591",
    "number": 9163,
    "body": "This PR is slightly different to the previous attempts #6418 and #7264 in that it more closely reflects the expected behaviour in the original bug #1822\r\n\r\nThe pull requests mentioned will still subtract an item from the ingredients when you take an item out of the result, even if the code just sets the result on PrepareItemCraftEvent. This pull request will leave the ingredients unaffected.",
    "head_branch": "issue-1822",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4e6d9087c4d6d376592",
    "number": 9162,
    "body": "Fix #7708 \r\nAdd a way to change speed factor",
    "head_branch": "Add-speed-argument-to-ProjectileSource#launchProjectile",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4e7d9087c4d6d376593",
    "number": 9161,
    "body": "Fix #7708\r\nAdd a way to change speed factor",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4e8d9087c4d6d376594",
    "number": 9160,
    "body": "Requires #9129\r\n\r\nUpdates the dependency declaration format to generally be more structured and avoid bootstrap flags everywhere. Format for the old format will be supported for a little while.\r\n\r\n```yml\r\n# BEFORE:\r\nload-before:\r\n  - name: RequiredPlugin\r\n    bootstrap: false\r\nload-after:\r\n  - name: RegistryPlugin\r\n    bootstrap: true\r\n  - name: OtherPlugin\r\n    bootstrap: false\r\ndependencies:\r\n  - name: OtherPlugin\r\n    required: false\r\n    bootstrap: false\r\n  - name: RegistryPlugin\r\n    required: true\r\n    bootstrap: true\r\n```\r\n\r\n```yml\r\n#AFTER:\r\ndependencies:\r\n  bootstrap:\r\n    # Lets say that RegistryPlugin has some registry elements that this plugin requires.\r\n    # We don't need this during runtime, so it's not required in the server section. However\r\n    # can be added to both if needed\r\n    RegistryPlugin:\r\n      load: BEFORE\r\n      required: true\r\n      # (this is default)\r\n      join-classpath: true\r\n  server:\r\n    # Add a required \"RequiredPlugin\" dependency, which this plugin must load BEFORE\r\n    RequiredPlugin:\r\n      load: AFTER\r\n      required: true\r\n      # This means that this plugin won't have access to classpath\r\n      join-classpath: false\r\n    # Add \"OtherPlugin\" dependency, which the plugin must load AFTER. Is not required. WILL join classpath (by default)\r\n    OtherPlugin:\r\n      load: BEFORE\r\n      required: false\r\n      join-classpath: true\r\n    # Load order can be omitted to cause it to be ignored... or specified by load-order: OMIT\r\n    SpecialDependency:\r\n      required: true\r\n      join-classpath: true\r\n```",
    "head_branch": "paper-plugins-config",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Paper Plugins Dependency Format Update (#9160)\n\n* Rework dependency management (WIP)\r\n\r\n* Revert \"Rework dependency management (WIP)\"\r\n\r\nThis reverts commit e046cd59c68743dc00303b1ab42317bf474abd6a.\r\n\r\n* Correctly add soft dependencies to the dependency tree for classloading resolution\r\n\r\n* Add support for new dependency config format\r\n\r\n* Rebase\r\n\r\n* swap load order meaning\r\n\r\n* Dependencies should be required by default"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4e9d9087c4d6d376595",
    "number": 9158,
    "body": "When a plugin define a custom note block sound on a player head, the sound is ignored and the default click sound is played instead. This changes restore vanilla behavior that will now take the priority over the event instrument.\r\n\r\nI have also reverted my mistakes on the javadoc pr. The spawnFallingBlock javadoc is totally reverted since upstream have fixed those (and i have put the wrong javadoc on the wrong override)",
    "head_branch": "fix/noteblockplayerhead",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix note block sound property on player heads (#9158)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a4ead9087c4d6d376596",
    "number": 9155,
    "body": null,
    "head_branch": "chore/missing-javadoc-urls",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4ebd9087c4d6d376597",
    "number": 9152,
    "body": "*updated version of* #9151  \r\n\r\n\r\nBasically this event is called before ItemMergeEvent which can allow to see which items are trying to merge,\r\nunlike ItemMergeEvent which thrown on successful merged items, this event is called before checking if can be merged\r\n\r\n## example:\r\nthrowing Dead bush with Red\r\n\r\n```java\r\n@EventHandler\r\n    public void onAttemptItemMerge(AttemptItemMergeEvent e) {\r\n        Item source = e.getEntity();\r\n        Item target = e.getTarget();\r\n        this.getSLF4JLogger().info(\"Item {} {}  is trying to merge with {} {}\",\r\n                source.getItemStack().getType(), source.getUniqueId(), target.getItemStack().getType(), target.getUniqueId());\r\n    }\r\n```\r\nconsole:\r\n```\r\n[10:13:27 INFO]: [paperweight-test-plugin] Item DEAD_BUSH a474ec48-be9d-4079-85d2-a5c69d8aed03  is trying to merge with RED_SAND 28cbb557-ca5b-49b7-8524-fe2a77eb4181\r\n[10:13:27 INFO]: [paperweight-test-plugin] Item RED_SAND 28cbb557-ca5b-49b7-8524-fe2a77eb4181  is trying to merge with DEAD_BUSH a474ec48-be9d-4079-85d2-a5c69d8aed03\r\n[10:13:29 INFO]: [paperweight-test-plugin] Item DEAD_BUSH a474ec48-be9d-4079-85d2-a5c69d8aed03  is trying to merge with RED_SAND 28cbb557-ca5b-49b7-8524-fe2a77eb4181\r\n[10:13:29 INFO]: [paperweight-test-plugin] Item RED_SAND 28cbb557-ca5b-49b7-8524-fe2a77eb4181  is trying to merge with DEAD_BUSH a474ec48-be9d-4079-85d2-a5c69d8aed03\r\n```\r\n\r\n",
    "head_branch": "event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4ecd9087c4d6d376598",
    "number": 9151,
    "body": "Basically this event is called before ItemMergeEvent which can allow to see which items are trying to merge,\r\nunlike ItemMergeEvent which thrown on successful merged items, this event is called before checking if can be merged\r\n\r\n## example:\r\nthrowing Dead bush with Red\r\n\r\n```java\r\n@EventHandler\r\n    public void onAttemptItemMerge(AttemptItemMergeEvent e) {\r\n        Item source = e.getEntity();\r\n        Item target = e.getTarget();\r\n        this.getSLF4JLogger().info(\"Item {} {}  is trying to merge with {} {}\",\r\n                source.getItemStack().getType(), source.getUniqueId(), target.getItemStack().getType(), target.getUniqueId());\r\n    }\r\n```\r\nconsole:\r\n```\r\n[10:13:27 INFO]: [paperweight-test-plugin] Item DEAD_BUSH a474ec48-be9d-4079-85d2-a5c69d8aed03  is trying to merge with RED_SAND 28cbb557-ca5b-49b7-8524-fe2a77eb4181\r\n[10:13:27 INFO]: [paperweight-test-plugin] Item RED_SAND 28cbb557-ca5b-49b7-8524-fe2a77eb4181  is trying to merge with DEAD_BUSH a474ec48-be9d-4079-85d2-a5c69d8aed03\r\n[10:13:29 INFO]: [paperweight-test-plugin] Item DEAD_BUSH a474ec48-be9d-4079-85d2-a5c69d8aed03  is trying to merge with RED_SAND 28cbb557-ca5b-49b7-8524-fe2a77eb4181\r\n[10:13:29 INFO]: [paperweight-test-plugin] Item RED_SAND 28cbb557-ca5b-49b7-8524-fe2a77eb4181  is trying to merge with DEAD_BUSH a474ec48-be9d-4079-85d2-a5c69d8aed03\r\n```\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4edd9087c4d6d376599",
    "number": 9149,
    "body": "Solves #9142. \r\n\r\nI added a config option for this in the event the existing behavior is preferred, however I'm not entirely if this is the best option given vanilla by default will call this same method to flush the region files. Feedback welcome!\r\n\r\n ",
    "head_branch": "feature/flush-regions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add option to flush region files on save (#9149)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4eed9087c4d6d37659a",
    "number": 9147,
    "body": "Fixed handling of too large packets. This patch seems to got broken at some version update in the past.",
    "head_branch": "fix-large-packets",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed large packet handling (#9147)\n\nCo-authored-by: Shane Freeder <theboyetronic@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4efd9087c4d6d37659b",
    "number": 9144,
    "body": "This will allow to serialize non persist entities with the current implementation.\r\n\r\nIn my case I want to store entities not with the default implementation. So I want to set persistent to false and handle it on my own (EntitiesLoadEvent and EntitiesUnloadEvent). Using serializeEntity and deserializeEntity looks promising but it doesn't return the nbt correctly when it's not persistent.",
    "head_branch": "feat/allow-save-non-persistent-entities",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4f0d9087c4d6d37659c",
    "number": 9143,
    "body": "Fixes #9061 \r\n\r\nI am not sure this is the proper solution to fix the issue, but after changing an existing online player's profile using #9061 reproduction code the player appeared to others.",
    "head_branch": "fix-invisible-players-after-setplayerprofile",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix players are invisible after using setPlayerProfile (#9143)\n\nCo-authored-by: Jake Potrebic <jake.m.potrebic@gmail.com>\r\nCo-authored-by: Bjarne Koll <lynxplay101@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a4f1d9087c4d6d37659d",
    "number": 9141,
    "body": "This only works when not using unix domain socket\r\nand compression is disabled because\r\nthe netty io_uring transport does not support\r\nunix domain socket and the client can not decode\r\ncompressed packets sent with io_uring.",
    "head_branch": "io-uring-support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4f2d9087c4d6d37659e",
    "number": 9140,
    "body": null,
    "head_branch": "build-updates",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[ci skip] Update Gradle plugins and wrapper (#9140)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4f3d9087c4d6d37659f",
    "number": 9137,
    "body": "Adds an additional CUSTOM tracking range mode and a field in Entity that, if set to a positive value, enables a custom tracking range for that entity to be used. This range can be higher or lower than the default entity tracking range of that entity type.\r\n\r\nThis change clashes slightly with SpottedLeaf's tracking range optimizations from 2020. The AreaMap system looks pretty slow as it seems to be re-calculating the same chunk slots for many of the same tracking range of entity types. I purposefully did not touch any of this and stuck to a more simpler approach of adding a CUSTOM one with an 'unbounded' range (decided on 100 chunks - 1600 blocks) - bounded mostly by the player send distance.\r\n\r\nIt would be good to hear SpottedLeaf's input on this one before pulling. I feel a lot of this is in need of a rewrite.\r\n\r\nA future addition people might request is to set this per player as well, but I didn't want to strain performance any more than really needed here.",
    "head_branch": "add-entity-tracking-range-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4f4d9087c4d6d3765a0",
    "number": 9136,
    "body": "Adds an additional CUSTOM tracking range mode and a field in Entity that, if set to a positive value, enables a custom tracking range for that entity to be used. This range can be higher or lower than the default entity tracking range of that entity type.\r\n\r\nThis changes clashes slightly with SpottedLeaf's tracking range optimizations from 2020. The AreaMap system looks pretty slow as it seems to be re-calculating the same chunk slots for many of the same tracking range of entity types. I purposefully did not touch any of this and stuck to a more simpler approach of adding a CUSTOM one with an 'unbounded' range (decided on 100 chunks - 1600 blocks) - bounded mostly by the player send distance.\r\n\r\nIt would be good to hear SpottedLeaf's input on this one before pulling. I feel a lot of this is in need of a rewrite.\r\n\r\nA future addition people might request is to set this per player as well, but I didn't want to strain performance any more than really needed here.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4f5d9087c4d6d3765a1",
    "number": 9134,
    "body": "Fixes #9133.",
    "head_branch": "bugfix/consider-translatable-component-fallback",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix server ignoring fallback for translatable components (#9134)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4f6d9087c4d6d3765a2",
    "number": 9132,
    "body": "This PR aims to fix the minecraft bug https://bugs.mojang.com/browse/MC-65198 which affect ITEM_CRAFTED statistic that isn't correctly incremented in some situations :\r\n- collecting the result of a recipe in a stone cutter with shift click\r\n- collecting the result of a recipe for an ItemStack with an  amount superior to 1 in a crafting table with drop key bind\r\n- collecting the result of a recipe in a smitting table with shift click. Linked to this bug https://bugs.mojang.com/browse/MC-203168 which was closed but bug still present",
    "head_branch": "fix-mc-65198",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4f7d9087c4d6d3765a3",
    "number": 9129,
    "body": "Redo of #9068\r\n\r\nFixes: https://github.com/PaperMC/Paper/issues/8971, https://github.com/PaperMC/Paper/issues/9057\r\n\r\nPass dependency tree when loading, this allows us to correctly resolve dependencies when loading while plugins already in the plugin manager.\r\n\r\nCloses: https://github.com/PaperMC/Paper/issues/9114\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9129.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/660377927.zip)",
    "head_branch": "pp-plugins",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Resolve Plugin Dependency Issues, Improve PluginLoading Compat, Small Loading Issues (#9129)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a4f8d9087c4d6d3765a4",
    "number": 9127,
    "body": "The vanilla code in EntitySelector#pushable uses the Entity#getTeam method which returns the Level scoreboard. This means the wrong collision option is returned here  when an API scoreboard is being used. Although no actual pushing occurs here as the client takes authority for that, the server still emits footstep sounds and treats it as if collision should be happening when it should not be.\r\n\r\nDemonstration of the issue (turn sound on):\r\n\r\nhttps://user-images.githubusercontent.com/29153871/231344227-2ed04480-a01c-4106-8a33-fdbfe49dd720.mp4\r\n\r\n",
    "head_branch": "fix/scoreboard-collision",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4f9d9087c4d6d3765a5",
    "number": 9126,
    "body": "There is a missing closing quote that causes a json parsing error.",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci-skip] Fix missing closing quote (#9126)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4fad9087c4d6d3765a6",
    "number": 9125,
    "body": "During the development of paper plugins, [api/0072 Add workaround for plugins modifying the parent of the plugin logger](https://github.com/PaperMC/Paper/blob/e338793603e7b57ab439a1b925e3092cb623f616/patches/api/0072-Add-workaround-for-plugins-modifying-the-parent-of-t.patch) was modified to make the `Logger logger` field public so `PaperPluginClassLoader` could set it like `PluginClassLoader` does (the patch originally made the field package-private). This has caused some issues (most noticeably) for devs using Kotlin depending on an API version post paper plugins and trying to run the plugin on older versions (because the kt compiler seeing `plugin.logger` decided to use the field instead of the getter as one would assume) and has been brought a few times already.\r\n\r\nMiniDigger suggested the patch could do without making the field public, and I decided to PR that. To change this I decided to DI the logger in the `JavaPlugin#init` method instead of making it package-private or public.\r\n\r\nAdditionally I added a Commodore fix for the (hopefully few) plugins that were compiled using the field access rather than the getter, mapping getfield to an invokevirtual call (though I did consider not doing this altogether since it would be misuse of the API (?)).\r\n\r\n\r\nThanks Owen :3",
    "head_branch": "fix/public-logger-field",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Undo making JavaPlugin#logger field public (#9125)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a4fbd9087c4d6d3765a7",
    "number": 9124,
    "body": "This method is called in vanilla directly after spawning the wither.\r\n\r\nI'm not sure about the wording of the javadoc.",
    "head_branch": "feature/more-wither-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added wither vanilla invulnerability API (#9124)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a4fcd9087c4d6d3765a8",
    "number": 9122,
    "body": "Add Mob Experience reward API. I had a pr for this a while ago but it was a mess so i re did it",
    "head_branch": "feature/mob-experience-reward-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Mob Experience reward API (#9122)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a4fdd9087c4d6d3765a9",
    "number": 9119,
    "body": "Paper has a patch that restores ExactChoice working for shapeless recipes.",
    "head_branch": "fix/exact-choice-javadocs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4fed9087c4d6d3765aa",
    "number": 9118,
    "body": "## Inspiration\r\nGoal of this was to make a QoL way to allow compat schedulers with Paper and Folia. It still has design flaws, and needs to be cleaned up and documented, but this was just a draft for proof of concept. Implementing into Folia would just require altering two methods to utilize Folia schedulers, as everything else is just overloaded methods\r\n## Questions\r\n- Do we want to incorporate Task IDs into Folia Schedulers? Allows you to have much more flexibility over retrieving tasks, and lets Taskable return values instead of just being voids\r\n- Should anything else utilize Taskable? `Server` at the very least can use `GlobalRegionScheduler`\r\n- This could be further abstracted with a task builder, to allow for something along the lines of `Entity.task(Plugin).interval(5).delay(5).run(Runnable))` ",
    "head_branch": "feature/taskable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a4ffd9087c4d6d3765ab",
    "number": 9116,
    "body": "This clos e #9081 like the issue said when the world of spawn change because the world is unloaded or not exists keep the previous location causing issues when the player spawn, this PR modify two patchs related to handle the world spawn for add a conditional for call a method used to handle location for \"new\" players in world.",
    "head_branch": "fix/9081/reset-location-when-login-change-unloaded-world",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a500d9087c4d6d3765ac",
    "number": 9115,
    "body": "Tested in the three situations\r\n\r\nTestPlugin.java\r\n```java\r\n@Override\r\npublic void onEnable() {\r\n    this.getServer().getPluginManager().registerEvents(this, this);\r\n\r\n    /*\r\n     * Get status at the same time as entity spawn\r\n     */\r\n    this.getServer().getCommandMap().register(\"boat\", new Command(\"boat\") {\r\n        @Override\r\n        public boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, @NotNull String[] args) {\r\n            if (sender instanceof Player player) {\r\n                final var loc = player.getLocation();\r\n                player.sendRawMessage( loc.getWorld().spawn(loc, Boat.class).getStatus().name() );\r\n            }\r\n            return false;\r\n        }\r\n    });\r\n}\r\n\r\n@EventHandler\r\nvoid onEntityAddToWorld(final EntityAddToWorldEvent event) {\r\n    if (event.getEntity() instanceof Boat boat) {\r\n        this.logger.info(\"EntityAddToWorldEvent: \" + boat.getStatus().name());\r\n    }\r\n}\r\n\r\n/*\r\n * Ride on the boat and reconnect the server\r\n */\r\n@EventHandler\r\nvoid onEntityMount(final EntityMountEvent event) {\r\n    if (event.getMount() instanceof Boat boat) {\r\n        this.logger.info(\"EntityMountEvent: \" + boat.getStatus().name());\r\n    }\r\n}\r\n```",
    "head_branch": "fix/boat-status",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix NPE on Boat#getStatus (#9115)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a501d9087c4d6d3765ad",
    "number": 9113,
    "body": "close #9049",
    "head_branch": "update-adventure",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Adventure to 4.13.1 (#9113)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a502d9087c4d6d3765ae",
    "number": 9112,
    "body": null,
    "head_branch": "fix/beds",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix a couple of bed bugs (#9112)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a504d9087c4d6d3765af",
    "number": 9111,
    "body": "When generating trees near crops, the server will check whether the crop block can survive, and as part of that check in CropBlock#canSurvive, a lookup to the light engine is done. This adds a change into the BlockStateListPopulator to get the brightness from the world itself, since the light engine is not accessible in DummyGeneratorAccess.\r\n\r\nException from testing prior to fix:\r\nhttps://paste.gg/p/anonymous/0a29a4634cfd4fb5b412f20b3de8aaf9",
    "head_branch": "fix/generate-tree",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix getBrightness and getRawBrightness throwing exception in BlockStateListPopulator (#9111)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a505d9087c4d6d3765b0",
    "number": 9110,
    "body": "This can skip many very expensive call to ItemStack.tagMatches. Makes canMergeItems return false for merging into ItemStacks that are already full.\r\n\r\nNoticed this due to a stray item going into a double chest otherwise filled with shulkers of NBT-heavy items, which made the hopper pushing items into that chest start creating a noticeable amount of tick ms usage by itself. In testing on my local machine I've been able to make 6 hoppers and double chest cause about 50ms of tick usage by just tagMatches using shulkers of written bocks.\r\n\r\nI don't think there is any reason at all to try and merge into items that are already full (please do tell if there is), the original code checks if the item being merged into is greater then its maximum stack size, which makes me believe it might be a logical error from Mojang, using a greater then instead of equal or greater then?",
    "head_branch": "fix/hopper_lag",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimize hoppers by not trying to merge full items. (#9110)\n\nThis can skip many very expensive call to ItemStack.tagMatches.\r\nMakes canMergeItems return false for merging into ItemStacks that are already full."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a506d9087c4d6d3765b1",
    "number": 9108,
    "body": "CraftMetaLeatherArmor prevents this.color from being set to null by substituting DEFAULT_LEATHER_COLOR CraftMetaColorableArmor does not do this, causing various NPEs when leather armor does not have a color NBT tag\r\n\r\nThis fix copies the setColor method from CraftMetaLeatherArmor and uses it in CraftMetaColorableArmor",
    "head_branch": "fix/ColorableArmor-Null-Color",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a507d9087c4d6d3765b2",
    "number": 9106,
    "body": null,
    "head_branch": "fix/missing-labels",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] add missing labels to project status map (#9106)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a508d9087c4d6d3765b3",
    "number": 9104,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\neb4b416d PR-822: Add experimental armor trim API\r\n33498e1d PR-831: Add a standard of annotations for Minecraft experimental things and API\r\n\r\nCraftBukkit Changes:\r\n19de3550d SPIGOT-7315: Bed placement duplicates crops if cancelled\r\n1eb88374e PR-1147: Add experimental armor trim API\r\nc4c0bb0e9 Show clean error for invalidly configured server.properties options\r\n3ae90697f Fix UUID not being updated when changing world of MapView\r\ne43000601 PR-1164, MC-227255, MC-253819: Fix rotation of beehives and bells\r\n\r\nSpigot Changes:\r\nd2fdfe39 Rebuild patches",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#9104)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\neb4b416d PR-822: Add experimental armor trim API\r\n33498e1d PR-831: Add a standard of annotations for Minecraft experimental things and API\r\n\r\nCraftBukkit Changes:\r\n19de3550d SPIGOT-7315: Bed placement duplicates crops if cancelled\r\n1eb88374e PR-1147: Add experimental armor trim API\r\nc4c0bb0e9 Show clean error for invalidly configured server.properties options\r\n3ae90697f Fix UUID not being updated when changing world of MapView\r\ne43000601 PR-1164, MC-227255, MC-253819: Fix rotation of beehives and bells\r\n\r\nSpigot Changes:\r\nd2fdfe39 Rebuild patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a509d9087c4d6d3765b4",
    "number": 9103,
    "body": "Closes #9046",
    "head_branch": "fix/demo-mode",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix demo flag not enabling demo mode (#9103)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a50ad9087c4d6d3765b5",
    "number": 9102,
    "body": "- Add vertical range to mob spawners\r\n- Add Paper settings for default mob spawner ranges (in `paper-global.yml`)\r\n- Add API for mob spawner's vertical range\r\n- Change the existing mob spawner range API's details to represent the change",
    "head_branch": "add-mob-spawner-ranges-changes-and-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a50bd9087c4d6d3765b6",
    "number": 9100,
    "body": null,
    "head_branch": "fix/master/download-urls",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Update download urls (#9100)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a50cd9087c4d6d3765b7",
    "number": 9099,
    "body": "We recently updated our Paper version and noticed that `ignoreCancelled` was no longer having an effect on our listeners.\r\n\r\nThis only impacts events registered by direct `EventExecutor`. Events registered using the `registerEvents` method are not impacted.\r\n\r\nThis is potentially also the cause of https://github.com/PaperMC/Paper/issues/8911 as it looks like the plugins mentioned are registering events this way (see https://github.com/PaperMC/Paper/issues/8911#issuecomment-1482589353.\r\n\r\n\r\n ",
    "head_branch": "feature/fix-ignorecancelled-having-no-effect",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix ignoreCancelled having no effect on events registered by direct EventExecutor (#9099)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a50dd9087c4d6d3765b8",
    "number": 9098,
    "body": "Hello! I recently noticed that -- since the introduction of Paper plugins -- there are a number of inconsistencies (and issues) with the different types of plugin names and where they're used. Below is a table showing the results of tests I conducted on multiple versions of Paper. The name of the test plugin is `Very_Fancy_Plugin`.\r\n\r\n![Test Results](https://user-images.githubusercontent.com/64972126/229745988-335a8091-9b1a-4e99-b6f6-384a8f65d7ec.png)\r\n\r\nThe big issues with this currently (specifically with Paper plugins) are:\r\n1. `PluginDescriptionFile#getName()` and `PaperPluginMeta#getName()` return different strings when plugin names contain underscores. This is very unintuitive and -- in the case of `PluginDescriptionFile#getName()` -- incorrect according to the [documentation](https://jd.papermc.io/paper/1.19/io/papermc/paper/plugin/configuration/PluginMeta.html#getName()):\r\n    > - Will only contain alphanumeric characters, underscores, hyphens, and periods: [a-zA-Z0-9_\\\\-\\\\.].\r\n2. `PluginProviderContext#getDataDirectory()` returns a directory with the version in the name, while `JavaPlugin#getDataFolder()` returns one without the version. Not only is this inconsistency unintuitive, but it's also problematic to include the version in the directory name. This is a bug caused by #9038.\r\n3. Both of the methods mentioned in <span>#</span>2 can return directories with spaces in their names, which can be a pain to work with.\r\n4. Plugins with underscores in their names will be listed with their original names (e.g., `Very_Fancy_Plugin`) in `/plugins`, despite those underscores being replaced with spaces (e.g., `Very Fancy Plugin`) in `/version [plugin name]`.\r\n5. Nag messages use all kinds of name variations, sometimes containing original plugin names; other times containing original plugin names with underscores replaced with spaces; other times appending the version; etc.\r\n\r\n**Everything below here is now irrelevant. See [this comment](https://github.com/PaperMC/Paper/pull/9098#issuecomment-1496450556) instead.**\r\n\r\n---\r\n\r\n~~My solution uses the following naming conventions:~~\r\n- ~~Plugin **name** = The original name of the plugin as defined in `[paper-]plugin.yml`, e.g., `Very_Fancy_Plugin`.~~\r\n- ~~Plugin **display name** = A human-readable name for the plugin with no defined behavior, e.g., `Very Fancy Plugin` or `Very_Fancy_Plugin`.~~\r\n- ~~Plugin **display name + version** = The plugin's display name + version, e.g., `Very Fancy Plugin v1.0.0` or `Very_Fancy_Plugin v1.0.0`.~~\r\n\r\n~~Specifically, my solution is to:~~\r\n- ~~Rename the current `PluginMeta#getDisplayName` method (and all its usages) to `getDisplayNameWithVersion`.~~\r\n- ~~Add a new `PluginMeta#getDisplayName` method that returns just the display name.~~\r\n- ~~Modify `PluginDescriptionFile#getFullName` to use `PluginMeta#getDisplayNameWithVersion`.~~\r\n- ~~Modify the `/plugins` and `/version` commands to use the plugin's display name.~~\r\n- ~~Change plugin data directories to use the plugin's name in all places. This matches the behavior of Spigot plugins.~~\r\n- ~~Change nag messages to use the plugin's display name + version in (I believe) all places.~~\r\n\r\n~~This shouldn't cause any API breakages that render plugins uncompilable/unusable, however, naturally, this could break any plugins that depend on a specific implementation of the aforementioned methods. All of these changes will affect Paper plugins, but Spigot plugins should only be affected by the changes to `PluginMeta#getDisplayName` (as well as the addition of `PluginMeta#getDisplayNameWithVersion`).~~\r\n\r\n~~Things I'm unsure of are:~~\r\n~~1. Is there a better name for `PluginMeta#getDisplayNameWithVersion`? It could alternatively be `getDisplayNameAndVersion` or `getFullDisplayName` or something entirely different.~~\r\n~~2. Should plugin logger names be changed to use display names? They're technically \"displayed\" to users, but it could be considered unconventional to use spaces.~~\r\n~~3. Should `/version` tab completion be changed to use display names in some way? I think this would be a little weird considering how tab completion works, but it would be more consistent.~~\r\n~~4. Is this even the right approach? 😬~~\r\n\r\n---\r\n\r\nThanks! :)\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9098.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/649665440.zip)",
    "head_branch": "plugin-names",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Inconsistencies with Paper Plugin Names (#9098)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a50ed9087c4d6d3765b9",
    "number": 9097,
    "body": "Bukkit's BossBar interface is still very much supported, and I think it probably will continue to be supported, but it was missing methods relating to Component. ",
    "head_branch": "feature/bossbar-components",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a50fd9087c4d6d3765ba",
    "number": 9096,
    "body": "You can get the amount of experience the mob will drop from the API",
    "head_branch": "mob-experience-reward-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a510d9087c4d6d3765bb",
    "number": 9095,
    "body": "This adds a way to get how much the mob will drop experience",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a511d9087c4d6d3765bc",
    "number": 9094,
    "body": "Fix some broken block place logic:\r\n- The dispensed shulker will not play the place sound (due to its logic been removed)\r\n- The hanging sign text editor cannot be cancelled using the BlockPlaceEvent (not consistent with the other regular signs)\r\n- The jukebox logic hasn't been synced with the RecordItem",
    "head_branch": "fix/blockplace",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix some broken block place logic (#9094)\n\n- The dispensed shulker will not play the place sound (due to its logic been removed)\r\n- The hanging sign text editor cannot be cancelled using the BlockPlaceEvent (not consistent with the other regular signs)\r\n- The jukebox logic hasn't been synced with the RecordItem"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a512d9087c4d6d3765bd",
    "number": 9093,
    "body": "This pr merge two api patches\r\n(Entity#getEntitySpawnReason and Clarify-the-Javadocs-for-Entity.getEntitySpawnReason) and remove the descriptions of bugs fixed in the last release in the bugfix patch (and include a fix for [MC-260219](https://bugs.mojang.com/browse/MC-260219))",
    "head_branch": "fix/patch-cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Cleanup some patches (#9093)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a513d9087c4d6d3765be",
    "number": 9091,
    "body": "This could maybe be cleaned up by somebody more familiar with adventure, but, fixes the formatting due to the usage of legacy chat inside of a component",
    "head_branch": "fix/tps-command",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix TPS command output (#9091)\n\n* Fix TPS command output\r\n\r\n* Cleanup + rebase\r\n\r\n---------\r\n\r\nCo-authored-by: Owen1212055 <23108066+Owen1212055@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a514d9087c4d6d3765bf",
    "number": 9090,
    "body": "This patch will prevent sending expired keys to players when logging into a server, while the client does have some grace period to prevent issues, if a key has expired beyond the grace period, connecting clients will be disconnected from the server upon join. The client should update keys before this key even expires, and a new key will be broadcasted out if we somehow actually get one.",
    "head_branch": "fix/profile-key-expiry",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Do not send expired keys to players on login (#9090)\n\nThis patch will prevent sending expired keys to players when logging into a server, while the client does have some grace period to prevent issues, if a key has expired beyond the grace period, connecting clients will be disconnected from the server upon join. The client should update keys before this key even expires, and a new key will be broadcasted out if we somehow actually get one."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a515d9087c4d6d3765c0",
    "number": 9088,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n5efeb7bd Also update compiler version\r\nc13b867a Update some Maven plugin versions\r\ndeb28d9f PR-837: Add more bell API\r\ne938d62a PR-819: Allow Player#sendBlockDamage() to specify a source entity 0e75532c PR-818: Add more Guardian API, particularly for its laser a10155aa PR-839: Add BlockData#rotate and BlockData#mirror 77e690b4 PR-836: Add missing API for explosive minecarts\r\n60722059 PR-832: Allow getting chunks without generating them and optimize chunk data request for ungenerated chunks\r\n0a2c4b4b PR-834: Add Player#sendHurtAnimation()\r\n\r\nCraftBukkit Changes:\r\nbe8682aa8 Also update compiler version\r\n08e305f5b Update some Maven plugin versions\r\n187bdd463 PR-1160: Add more bell API\r\n2f8e5bc7c PR-1145: Allow Player#sendBlockDamage() to specify a source entity bcbb61b36 PR-1144: Add more Guardian API, particularly for its laser\r\n722ddff6d PR-1162: Add BlockData#rotate and BlockData#mirror\r\n80998277c PR-1159: Add missing API for explosive minecarts\r\n1fddefce1 PR-1155: Allow getting chunks without generating them and optimize chunk data request for ungenerated chunks\r\n20e8a486f PR-1157: Add Player#sendHurtAnimation()\r\n\r\nSpigot Changes:\r\nb31949f2 Rebuild patches",
    "head_branch": "upstream-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#9088)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n5efeb7bd Also update compiler version\r\nc13b867a Update some Maven plugin versions\r\ndeb28d9f PR-837: Add more bell API\r\ne938d62a PR-819: Allow Player#sendBlockDamage() to specify a source entity\r\n0e75532c PR-818: Add more Guardian API, particularly for its laser\r\na10155aa PR-839: Add BlockData#rotate and BlockData#mirror\r\n77e690b4 PR-836: Add missing API for explosive minecarts\r\n60722059 PR-832: Allow getting chunks without generating them and optimize chunk data request for ungenerated chunks\r\n0a2c4b4b PR-834: Add Player#sendHurtAnimation()\r\n\r\nCraftBukkit Changes:\r\nbe8682aa8 Also update compiler version\r\n08e305f5b Update some Maven plugin versions\r\n187bdd463 PR-1160: Add more bell API\r\n2f8e5bc7c PR-1145: Allow Player#sendBlockDamage() to specify a source entity\r\nbcbb61b36 PR-1144: Add more Guardian API, particularly for its laser\r\n722ddff6d PR-1162: Add BlockData#rotate and BlockData#mirror\r\n80998277c PR-1159: Add missing API for explosive minecarts\r\n1fddefce1 PR-1155: Allow getting chunks without generating them and optimize chunk data request for ungenerated chunks\r\n20e8a486f PR-1157: Add Player#sendHurtAnimation()\r\n\r\nSpigot Changes:\r\nb31949f2 Rebuild patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a516d9087c4d6d3765c1",
    "number": 9087,
    "body": "This PR ports over airplane's use array for gamerule storage patch, which improves gamerule lookups (which happen very frequently during ticking). Permission from Paul to have this ported into paper was given of course.",
    "head_branch": "feat/port-array-gamerule-storage",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Port airplane's use array for gamerule storage patch (#9087)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a517d9087c4d6d3765c2",
    "number": 9086,
    "body": "It Fixes that an exception is thrown when using a Unix Domain Socket.\r\n\r\nThere was already a Pull Request for this, but i made a new one, because it has added a new patch instead of updating an existing: https://github.com/PaperMC/Paper/pull/9084",
    "head_branch": "fix/uds",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a518d9087c4d6d3765c3",
    "number": 9084,
    "body": "Added Support for Unix Domain Socket.\r\n\r\nI already have a Pull Request on Velocity to add also support for this:\r\nhttps://github.com/PaperMC/Velocity/pull/991",
    "head_branch": "feature/uds",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a519d9087c4d6d3765c4",
    "number": 9083,
    "body": "Added Support for Unix Domain Socket.\r\n\r\nI already have a Pull Request on Velocity to add also support for this:\r\nhttps://github.com/PaperMC/Velocity/pull/991",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a51ad9087c4d6d3765c5",
    "number": 9082,
    "body": "This in general caused much more confusion than needed, and in general, made rather negligible performance gains on collision.",
    "head_branch": "idk/allow-non-player-entities-by-default",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow non player entities in scoreboards by default (#9082)\n\nThis in general caused much more confusion than needed, and in general, made rather negligible performance gains on collision."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a51bd9087c4d6d3765c6",
    "number": 9080,
    "body": "This PR resolves issues with game features resetting to default state on respawn/profile change. Currently, breaking are potion effects and the XP bar, both are now being resent to make the client know about them again. Because the #teleport method also updates abilities and scaled health, I'm updating those as well, just in case.\r\nIt may be worth looking into other things that need to be resent in the future.\r\nAll of these additions are taken from the teleport respawn code that is used when the respawn packet is sent. There are some other packets like setting view distance or some specific metadata/attributes/permission things for the player, but I think it's a bit unnecessary to mess around with all of those right now. Think I've caught the worst ones in this PR.",
    "head_branch": "fix/improve-refresh",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Properly resync player on Player#setPlayerProfile (#9080)\n\nCurrently breaking are potion effects and the XP bar, both are now being resent to make the client know about them again."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a51cd9087c4d6d3765c7",
    "number": 9079,
    "body": "This PR resolves issues with game features resetting to default state on respawn/profile change. Currently, breaking are potion effects and the XP bar, both are now being resent to make the client know about them again. Because the #teleport method also updates abilities and scaled health, I'm updating those as well, just in case.\r\nIt may be worth looking into other things that need to be resent in the future.\r\nAll of these additions are taken from the teleport respawn code that is used when the respawn packet is sent. There are some other packets like setting view distance or some specific metadata/attributes/permission things for the player, but I think it's a bit unnecessary to mess around with all of those right now. Think I've caught the worst ones in this PR.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a51dd9087c4d6d3765c8",
    "number": 9077,
    "body": "New Paper download link",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Edit Paper download link in README (#9077)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a51ed9087c4d6d3765c9",
    "number": 9076,
    "body": "the world deserves more hyphens\r\n![image](https://user-images.githubusercontent.com/12160169/228952514-8ca214fb-5afc-4441-b542-ac37479032ff.png)\r\n",
    "head_branch": "fix/hyphen",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a51fd9087c4d6d3765ca",
    "number": 9075,
    "body": "before: \r\n![image](https://user-images.githubusercontent.com/40437205/228910602-5f07f490-e1a6-4554-8c69-42f63cac5206.png)\r\n\r\nafter:\r\n![image](https://user-images.githubusercontent.com/40437205/228911363-bdbc31b4-3033-477c-9947-073f90a033ea.png)\r\n",
    "head_branch": "fix/hyphen-plugin-dump",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make debug dump file names consistent (#9075)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a520d9087c4d6d3765cb",
    "number": 9074,
    "body": "Fixes [MC-122717](https://bugs.mojang.com/browse/MC-122717)",
    "head_branch": "fix/cmd-feedback-MC-122717",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a521d9087c4d6d3765cc",
    "number": 9070,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/9066\r\n\r\nThe vanilla hopper logic marks the source inventory as changed even if no item is moved out of it. That causes comparator updates constantly which is what allows the contraption in the issue to work, as its constantly checking the state of the chest. This PR just adds back the call to mark the tile entity as changed.\r\n\r\nI'm not sure how much of a performance hit this is, so maybe we want to put it behind a config option?",
    "head_branch": "fix/hopper-set-changed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix hopper not marking source inv as changed (#9070)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a523d9087c4d6d3765cd",
    "number": 9069,
    "body": "All API that uses it is deprecated/obsolete",
    "head_branch": "fix/ChatColor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Deprecate ChatColor (#9069)\n\nAll API that uses it is deprecated"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a524d9087c4d6d3765ce",
    "number": 9068,
    "body": "Supercedes: https://github.com/PaperMC/Paper/pull/9005\r\nFixes: https://github.com/PaperMC/Paper/issues/8971, https://github.com/PaperMC/Paper/issues/9057\r\n\r\nPass dependency tree when loading, this allows us to correctly resolve dependencies when loading while plugins already in the plugin manager.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9068.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/632461220.zip)",
    "head_branch": "pp-plugins",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Resolve Plugin Dependency Issues, Improve PluginLoading Compat, Small Loading Issues (#9068)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a525d9087c4d6d3765cf",
    "number": 9065,
    "body": "Also fixes a desync issue if the 'use' check is cancelled\r\n\r\nFixes https://github.com/PaperMC/Paper/issues/8796",
    "head_branch": "fix/PlayerReadyArrowEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a526d9087c4d6d3765d0",
    "number": 9064,
    "body": "ref #8925 \r\n\r\nPDC now inherits `Iterable<NamespacedKey>`, and adds these methods \r\n- #setIfAbsent(NamespacedKey, PersistentDataType, Object)\r\n- #computeIfAbsent(NamespacedKey, PersistentDataType, Function)\r\n- #computeIfPresent(NamespacedKey, PersistentDataType, BiFunction)\r\n- #compute(NamespacedKey, PersistentDataType, BiFunction)\r\n- #getOrThrow(NamespacedKey, PersistentDataType, Supplier)\r\n- #getOrThrow(NamespacedKey, PersistentDataType)\r\n- #replace(NamespacedKey, PersistentDataType, Object, Object)\r\n- #replace(NamespacedKey, PersistentDataType, Object)\r\n\r\n_i suck at java docs and i apologize_",
    "head_branch": "feature/expose-pdc-methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a527d9087c4d6d3765d1",
    "number": 9062,
    "body": "As far as I can tell, structures can overlap in generation, so instead of just returning the nullable structure at the location, this just asks for a structure to check if it exists.",
    "head_branch": "feature/structure-check-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Structure check API (#9062)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a528d9087c4d6d3765d2",
    "number": 9059,
    "body": "Properly account for the re-creation of literal command nodes with the `minecraft:` prefix.",
    "head_branch": "fix/cmd-error-msg-mc-namespaced",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix unknown cmd msg for mc namespaced cmds (#9059)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a529d9087c4d6d3765d3",
    "number": 9058,
    "body": null,
    "head_branch": "fix-chat-logging-colors",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix chat messages being logged without formatting to console (#9058)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a52ad9087c4d6d3765d4",
    "number": 9053,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\nf92c94517 SPIGOT-7310: PlayerToggleSneakEvent is not called when a player sneaks while riding an entity b5714184d SPIGOT-7316: Cancelling EntityUnmountEvent does not stop the all effects of the unmounting e237f8c88 SPIGOT-7312: Entity#setVisibleByDefault on player causes skin reset on this player client",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit) (#9053)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\nf92c94517 SPIGOT-7310: PlayerToggleSneakEvent is not called when a player sneaks while riding an entity\r\nb5714184d SPIGOT-7316: Cancelling EntityUnmountEvent does not stop the all effects of the unmounting\r\ne237f8c88 SPIGOT-7312: Entity#setVisibleByDefault on player causes skin reset on this player client"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a52bd9087c4d6d3765d5",
    "number": 9052,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/9051\r\n\r\nVerified that it doesn't break what upstream fixed when they broke it *and* that it does fix generating bees inside of hives when using bonemeal.",
    "head_branch": "fix/beehives",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix beehives generating from using bonemeal (#9052)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a52cd9087c4d6d3765d6",
    "number": 9050,
    "body": "Previously additional formatting like brackets around the display name as well as the item information hover event were automatically added when using the `ItemStack#displayName`. In my opinion this did not match the API specification (\"Get the formatted display name of the ItemStack\", that says nothing about additional characters or hover information) and made it impossible to get the \"raw\" display name component (which in comparison to `ItemMeta#displayName` fell back to the default translation if no displayName was set) without any additional data. (Especially the brackets were hard to remove)\r\n\r\nThis changes how the `ItemFactory#displayName` method gets the display name: Instead of directly using the `NMS ItemStack#getDisplayName` method (which isn't really correctly named imo) it now directly uses the `NMS ItemStack#getHoverName` and applies the italic formatting with the same logic as Vanilla would. We end up with a component that only contains the name as the text without additional characters or hover which Vanilla uses for display purposes in chat e.g. on /give.\r\n\r\nOld:\r\n![2023-03-26_15-06-15_Minecraft_1 19 4_-_Multiplayer_(3rd-party_Server)](https://user-images.githubusercontent.com/5768781/227782005-be286a8e-694b-4e2f-b68d-534e5f698ff3.png)\r\n\r\nNew:\r\n![2023-03-26_15-17-15_Minecraft_1 19 4_-_Multiplayer_(3rd-party_Server)](https://user-images.githubusercontent.com/5768781/227782013-fcb0b8a9-96de-49b8-ab8f-aef4d0ce09b5.png)\r\n\r\n\r\nThe old (wrong) functionality can still easily [be achieved](https://phoenix616.dev/📷/gLWnhx2w.png) with existing API by simply adding the hover event (`ItemStack#asHoverEvent`) to the displayName Component like `item.displayName().hoverEvent(item)` or if the brackets are desired `Component.translatable(\"chat.square_brackets\", item.displayName()).hoverEvent(item)`.\r\n",
    "head_branch": "fix-itemstack-displayname",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a52dd9087c4d6d3765d7",
    "number": 9048,
    "body": "Fix #8464",
    "head_branch": "feature/map-markers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a52ed9087c4d6d3765d8",
    "number": 9047,
    "body": "Fix #8464",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a52fd9087c4d6d3765d9",
    "number": 9044,
    "body": "Makes a new interface `APIBridge` to function as the place to bridge between API and the server impl without abusing UnsafeValues. UnsafeValue should be for actually unsafe \"api\". All the methods in `ABIBridge` should be called somewhere else with-in the API.",
    "head_branch": "feature/api-bridge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a530d9087c4d6d3765da",
    "number": 9043,
    "body": null,
    "head_branch": "fix/remove-some-uses-of-deprecated-methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Removes some references to deprecated methods/types (#9043)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a531d9087c4d6d3765db",
    "number": 9042,
    "body": "This should finally rid the API once and for all of deprecations that aren't actually deprecations (assuming I got them all, feel free to chime in with ones I missed).\r\n\r\nWill be merged into the Fix Spigot annotations patch when ready.",
    "head_branch": "fix/poor-use-of-deprecated",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use ApiStatus.Internal instead of Deprecated (#9042)\n\nMainly correctly marks a lot of still used \"magic values\"\r\nas Internal instead of \"Deprecated\"."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a532d9087c4d6d3765dc",
    "number": 9041,
    "body": "The items marked for removal in 1.21 have either been deprecated for almost 2 years or didn't exist for that long.\r\n\r\n* [AsyncChatDecorateEvent#isPreview()](https://jd.papermc.io/paper/1.19/io/papermc/paper/event/player/AsyncChatDecorateEvent.html#isPreview())\r\n* [PlayerLocaleChangeEvent](https://jd.papermc.io/paper/1.19/com/destroystokyo/paper/event/player/PlayerLocaleChangeEvent.html)\r\n* [PlayerInitialSpawnEvent](https://jd.papermc.io/paper/1.19/com/destroystokyo/paper/event/player/PlayerInitialSpawnEvent.html)\r\n* [WorldBorder#isInBounds(Location)](https://jd.papermc.io/paper/1.19/org/bukkit/WorldBorder.html#isInBounds(org.bukkit.Location))\r\n* [EntityTransformedEvent](https://jd.papermc.io/paper/1.19/com/destroystokyo/paper/event/entity/EntityTransformedEvent.html)\r\n* [ItemStackRecipeChoice](https://jd.papermc.io/paper/1.19/com/destroystokyo/paper/inventory/ItemStackRecipeChoice.html)\r\n* [HeightmapType](https://jd.papermc.io/paper/1.19/com/destroystokyo/paper/HeightmapType.html)\r\n\t* All associated methods in `Location` and `World`\r\n* All deprecated or removed `GoalKey`s in [VanillaGoal](https://jd.papermc.io/paper/1.19/com/destroystokyo/paper/entity/ai/VanillaGoal.html)\r\n* [StructureLocateEvent](https://jd.papermc.io/paper/1.19/io/papermc/paper/event/world/StructureLocateEvent.html) (not StructuresLocateEvent, different things)\r\n* Duplicate `Effect`s.\r\n* World API\r\n\t* [World#hasSkylight()](https://jd.papermc.io/paper/1.19/org/bukkit/World.html#hasSkylight())\r\n\t* [World#hasBedrockCeiling()](https://jd.papermc.io/paper/1.19/org/bukkit/World.html#hasBedrockCeiling())\r\n\t* [World#doesBedWork()](https://jd.papermc.io/paper/1.19/org/bukkit/World.html#doesBedWork())\r\n\t* [World#doesRespawnAnchorWork()](https://jd.papermc.io/paper/1.19/org/bukkit/World.html#doesRespawnAnchorWork())",
    "head_branch": "deprecations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Schedule several things for removal in 1.21 (#9041)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a533d9087c4d6d3765dd",
    "number": 9040,
    "body": "Saw a todo to re-implement missing timings for `MinecraftTimings` and `WorldTimingsHandler`, figured I'd learn more Paper internals by working on that. Made it now and as a draft solely because this probably is already done somewhere else, but if it's not I can keep working on it\r\nIf this is actually gonna be used, will modify patch name or modify pre-existing patch as requested \r\n\r\nCurrently reimplemented timings:\r\n- `MinecraftTimings#structureGenerationTimer`\r\n- `MinecraftTimings#antiXrayObfuscateTimer`\r\n- `MinecraftTimings#antiXrayUpdateTimer`",
    "head_branch": "feature/timings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a534d9087c4d6d3765de",
    "number": 9039,
    "body": "Stuff we probably need to consider:\r\n\r\nCurrently no per player custom name is displayed when no global custom name is set. Solution would be to add a data entry to the list when none is present and write the custom one. See SynchedEntityData#pack",
    "head_branch": "feature/per-player-display-names",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a536d9087c4d6d3765df",
    "number": 9038,
    "body": "fixes #9027, below is the only change\r\n```java\r\n@Override\r\n    public @NotNull String getDisplayName() {\r\n        return this.displayName + \" v\" + this.getVersion();\r\n    }\r\n```\r\n",
    "head_branch": "fix/plugin-meta-version",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix PluginMeta#getDisplayName (#9038)\n\n* fix plugin versioning\r\n\r\n* fix properly\r\n\r\n* fix version command\r\n\r\n* ngl idk where my logic was behind this"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a537d9087c4d6d3765e0",
    "number": 9037,
    "body": "This directly handles #9022 , and begins to handle #8988. \r\n\r\nThis commit just deprecates `EntityEffect#HURT`, `EntityEffect#THORNS_HURT`, `EntityEffect#HURT_DROWN`, `EntityEffect#HURT_EXPLOSION`, and `EntityEffect#HURT_BERRY_PUSH`. \r\n\r\nHurt effect implementation is now through `LivingEntity#playHurtEffect`, which just has `Level#broadcastEntityHurt` implemented in `ServerLevel` to just send a `ClientboundHurtAnimationPacket`\r\n\r\nA couple notes of things I need to fix when I'm back home \r\n- Accidentally wild card imported `net.minecraft.network.protocol.game` in `ServerLevel`\r\n- Need to mark Paper comments everywhere\r\n\r\nNot 100% sure if this was being left until upstream fixes it, but I figured I might as well",
    "head_branch": "fix/entityeffect",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a538d9087c4d6d3765e1",
    "number": 9036,
    "body": "Closes https://github.com/PaperMC/Paper/issues/9035\r\n\r\nThis should've always had `@Warning(false)` since its subclass is the preferred event to use.",
    "head_branch": "fix/invalid-deprecated-event-warning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't warn for deprecated PrepareGrindstoneEvent (#9036)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a539d9087c4d6d3765e2",
    "number": 9034,
    "body": "Addresses [#8118](https://github.com/PaperMC/Paper/issues/8118) by adding a configuration option that allows the ticking of marker entities to be enabled and disabled. By default, marker ticking is disabled.\r\n\r\nI had an old PR for this, but I didn't modify the patches correctly & the logic in one of the checks was wrong.",
    "head_branch": "marker-tick-config",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added a config option for ticking markers (#9034)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a53ad9087c4d6d3765e3",
    "number": 9033,
    "body": "Addresses [#8118](https://github.com/PaperMC/Paper/issues/8118) by adding a configuration option that allows the ticking of marker entities to be enabled and disabled. By default, marker ticking is disabled.  \r\n\r\nI had an old PR for this, but I didn't modify the patches correctly & the logic in one of the checks was wrong. ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a53bd9087c4d6d3765e4",
    "number": 9031,
    "body": "Added this for #8982\r\n\r\nHave closed a PR I had made before because i messed up the Branch in some way. ",
    "head_branch": "hide_LootAndData_Config",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a53cd9087c4d6d3765e5",
    "number": 9030,
    "body": null,
    "head_branch": "feat/plugin-ctx-jar-path",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expose Path to jar file in PluginProviderContext (#9030)\n\n* Expose Path to jar file in PluginProviderContext\r\n\r\n* rename accessor, reword jd"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a53dd9087c4d6d3765e6",
    "number": 9026,
    "body": "Bug [since 1.7.8](https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/8f771c737850130534b0fade70494f7ce3cbc8fd#src/main/java/org/bukkit/craftbukkit/CraftIpBanList.java).",
    "head_branch": "fix/api-banned-ips",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix api checking banned ips (#9026)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a53ed9087c4d6d3765e7",
    "number": 9025,
    "body": "restores vanilla behavior, will improve commit message if we decide to merge this\r\n\r\nThis build is intended to debug if anything goes sideways when disabling this check which was added many moons ago\r\n\r\nCross refs: #6456 and various other issues\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-9025.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/1293198167.zip)",
    "head_branch": "test/empty-world-tick",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Don't tick empty worlds (#9025)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a53fd9087c4d6d3765e8",
    "number": 9024,
    "body": "Saw a message from Machine Maker on Discord bringing this up, figured it'd be a fun random thing to do\r\n\r\nEssentially just adds a /paper dumpevents command. Running this once will begin logging events, and running it again will save the events in order with timestamp and event class fields in JSON to a file in the debug directory. Attached below is an example output\r\n\r\nTwo issues that aren't too big of a deal with this\r\n\r\nDoes not handle inheritance of event classes well, Field#getDeclaredFields only retrieves minimal fields, could use a superclass check working all the way up to org.bukkit.Event\r\nCould further serialize non primitive event fields just for a bit more info, stringified versions of them are typically fine though\r\n\r\n[event-verbose-2023-03-21_18.03.40.txt](https://github.com/PaperMC/Paper/files/11034393/event-verbose-2023-03-21_18.03.40.txt)\r\n",
    "head_branch": "feature/event-verbose",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a540d9087c4d6d3765e9",
    "number": 9023,
    "body": "Saw a message from Machine Maker on Discord bringing this up, figured it'd be a fun random thing to do\r\n\r\nEssentially just adds a `/paper dumpevents` command. Running this once will begin logging events, and running it again will save the events in order with timestamp and event class fields in JSON to a file in the `debug` directory. Attached below is an example output \r\n\r\nTwo issues that aren't too big of a deal with this\r\n- Does not handle inheritance of event classes well, `Field#getDeclaredFields` only retrieves minimal fields, could use a superclass check working all the way up to `org.bukkit.Event`\r\n- Could further serialize non primitive event fields just for a bit more info, stringified versions of them are typically fine though\r\n\r\n[event-verbose-2023-03-21_18.03.40.txt](https://github.com/PaperMC/Paper/files/11034346/event-verbose-2023-03-21_18.03.40.txt)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a541d9087c4d6d3765ea",
    "number": 9021,
    "body": "During the spigot 1.19.4 update, the overload of\r\nServerPlayer#teleportTo which includes a TeleportCause is incorrectly called by its predecessor with the value 0 for x,y,z,yaw and pitch.\r\n\r\nThis causes mojang code still calling said methods to basically teleport the player to said coords.\r\n\r\nResolves: #9019",
    "head_branch": "bugfix/teleport-to-overload-forward",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a542d9087c4d6d3765eb",
    "number": 9018,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n2c64d8c4 SPIGOT-7309: Add API for jukebox inventories\r\na6d7e4ca PR-826: Add Sniffer API\r\n\r\nCraftBukkit Changes:\r\n93813509b SPIGOT-7309: Add API for jukebox inventories\r\n2d5209e8d PR-1153: Handle teleport reason in spreadplayers command\r\nf5b61387e SPIGOT-7308: Fix NullPointerException when calling Jukebox#setRecord()\r\n388d458a6 SPIGOT-7306: Fix reset of coords in default teleportTo in EntityPlayer\r\n40b87e1af PR-1150: Add Sniffer API and handle EntityItemDropEvent\r\n\r\nSpigot Changes:\r\n6ad4b93c SPIGOT-7298: Fix debug stick always permission left click toggle",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#9018)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n2c64d8c4 SPIGOT-7309: Add API for jukebox inventories\r\na6d7e4ca PR-826: Add Sniffer API\r\n\r\nCraftBukkit Changes:\r\n93813509b SPIGOT-7309: Add API for jukebox inventories\r\n2d5209e8d PR-1153: Handle teleport reason in spreadplayers command\r\nf5b61387e SPIGOT-7308: Fix NullPointerException when calling Jukebox#setRecord()\r\n388d458a6 SPIGOT-7306: Fix reset of coords in default teleportTo in EntityPlayer\r\n40b87e1af PR-1150: Add Sniffer API and handle EntityItemDropEvent\r\n\r\nSpigot Changes:\r\n6ad4b93c SPIGOT-7298: Fix debug stick always permission left click toggle"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a543d9087c4d6d3765ec",
    "number": 9017,
    "body": "This simple pull request adds the functionality to open the \"You died!\" screen via the bukkit api...",
    "head_branch": "deathscreen",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a544d9087c4d6d3765ed",
    "number": 9015,
    "body": "Fixes #8828 ",
    "head_branch": "fix-null-spawn-reason-for-new-player",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: null SpawnReason for new player (#9015)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a545d9087c4d6d3765ee",
    "number": 9014,
    "body": "Closes https://github.com/PaperMC/Paper/issues/7460. That issue is asking for the event to be fired when the `mobGriefing` gamerule is set to false, but as far as I can tell, this has been the behavior of the event since it was added in 2015, an event to interact with the blocks broken in an explosion. There are other events dealing with entity explosions, such as `ExplosionPrimeEvent`",
    "head_branch": "fix/explode-event-javadocs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Properly document firing of Entity/BlockExplodeEvent (#9014)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a546d9087c4d6d3765ef",
    "number": 9013,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n150a2861 PR-827: Add BlockData#getPlacementMaterial 58c9c8ce SPIGOT-7301: Prevent creating non-openable inventories 3741079b PR-824: Expand upon PotionEffect API to better accommodate infinite durations\r\n\r\nCraftBukkit Changes:\r\ne5a7921f0 PR-1149: Add BlockData#getPlacementMaterial 58504fa61 SPIGOT-7302: Fix more issues with EntityDamageByEntity - Fix Projectile damage by dispenser - Fix cases where only exists a direct entity damager 48394703d Increase outdated build delay",
    "head_branch": "update-upstream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#9013)\n\n* Updated Upstream (Bukkit/CraftBukkit)\r\n\r\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n150a2861 PR-827: Add BlockData#getPlacementMaterial\r\n58c9c8ce SPIGOT-7301: Prevent creating non-openable inventories\r\n3741079b PR-824: Expand upon PotionEffect API to better accommodate infinite durations\r\n\r\nCraftBukkit Changes:\r\ne5a7921f0 PR-1149: Add BlockData#getPlacementMaterial\r\n58504fa61 SPIGOT-7302: Fix more issues with EntityDamageByEntity - Fix Projectile damage by dispenser - Fix cases where only exists a direct entity damager\r\n48394703d Increase outdated build delay\r\n\r\n* Improve docs for BlockData#getPlacementMaterial"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a547d9087c4d6d3765f0",
    "number": 9012,
    "body": "Changes loggers in the paper config and paper plugins patch to use the class logger so the super long fqn isn't prefixed onto the class name in logs. It's unneeded imo for non debug logs as it just clutters error messages. ",
    "head_branch": "fix/loggers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use class loggers without the fqn for non-debug logging (#9012)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a548d9087c4d6d3765f1",
    "number": 9011,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8957",
    "head_branch": "fix/furnace-crash",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix crash relating to bad recipes in furnace-like tile entities (#9011)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a549d9087c4d6d3765f2",
    "number": 9009,
    "body": "I believe this is all we have to do, to migrate away from `org.bukkit.Keyed` when dealing with all things \"Registry\". The `T` generic in Registry changes to extend `net.kyori.adventure.key.Keyed`, which means just a single method has to be rewritten with Commodore for the new return type of `T get(NamespacedKey)`. Along with maintaining ABI compat, this shouldn't break any compiles either, as `org.bukkit.Keyed` extends `net.kyori.adventure.key.Keyed` and `NamespacedKey` extends `Key`.\r\n\r\nOnce this is finalized, most of this will go into the server/api adventure patches.\r\n\r\nThis isn't deprecating anything, like `NamespacedKey` or the other 500 methods that use `NamespacedKey`, it just means we won't have to keep using `NamespacedKey` when `Key` is much better.\r\n\r\nI tested this by compiling a plugin against the non-modified API and made sure the Commodore changes work as expected.",
    "head_branch": "feature/adventure-key",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a54ad9087c4d6d3765f3",
    "number": 9008,
    "body": "This should allow the usage of methods with a List<Component> parameter like ItemStack#lore with a List<TextComponent>.\r\nSometimes API methods will return TextComponents so you'd have to parse to get List<Component>.\r\n\r\nThis api change is backwards compatible unless plugins are implementing Player, ItemStack and ItemMeta.",
    "head_branch": "feat/lore-generics-friendly",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "adventure: make calls with generic component lists more usable (#9008)\n\nThis should allow the usage of ItemStack#lore and other methods with a List<TextComponent>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a54bd9087c4d6d3765f4",
    "number": 9007,
    "body": null,
    "head_branch": "callback-uuid",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use random UUIDs instead of incrementing long for click callback ids (#9007)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a54cd9087c4d6d3765f5",
    "number": 9006,
    "body": "Helps plugin developer to save data between reloads only",
    "head_branch": "feature/server-reload-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a54dd9087c4d6d3765f6",
    "number": 9005,
    "body": "This change allows spigot plugins with dependencies to be loaded at runtime and should not affect paper plugins. I know plugin loading at runtime is not something you guys want to support, but this simple change shouldn't hurt your system while still allowing those who accept the risks to continue doing so.",
    "head_branch": "plugins/runtime-loading",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a54ed9087c4d6d3765f7",
    "number": 9004,
    "body": "This change allows spigot plugins with dependencies to be loaded at runtime and should not affect paper plugins. I know plugin loading at runtime is not something you guys want to support, but this simple change shouldn't hurt your system while still allowing those who accept the risks to continue doing so.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a54fd9087c4d6d3765f8",
    "number": 9003,
    "body": "This event is going to be more important very shortly (hopefully)",
    "head_branch": "fix/reload-event-location",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fire reload event after everything has been reloaded (#9003)\n\nThis event is going to be more important very shortly (hopefully)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a550d9087c4d6d3765f9",
    "number": 9002,
    "body": "You can create `TagUpdate`s on the Registry instance, which you can then send to a single player or apply to the whole server to affect all players.\r\n\r\n```java\r\n// createTagUpdate will throw UOE on all non-CraftRegistry impls\r\nTagUpdate<?> update = Registry.STRUCTURE.createTagUpdate(map -> { \r\n    // map is a mutable Map<Key, Set<Structure>>\r\n    map.put(Key.key(\"eye_of_ender_located\"), Collections.emptySet()); // will prevent eye of enders from finding strongholds\r\n});\r\n\r\nBukkit.getServer().applyTagUpdate(update);\r\n```\r\n\r\n```[tasklist]\r\n- [ ] https://github.com/PaperMC/Paper/pull/8920\r\n```",
    "head_branch": "feature/tag-modification-api",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a551d9087c4d6d3765fa",
    "number": 9001,
    "body": "During the development of Paper Plugins and one or another fix, plugin JarFiles are no longer opened to be processed as multi-release jars. This PR moves the original patch into the Paper Plugins patch to re-enable that behaviour.",
    "head_branch": "fix/reenable-mr-jar",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Re-enable multi-release plugin JARs (#9001)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a552d9087c4d6d3765fb",
    "number": 8999,
    "body": "Tested hoppers in various tests, pulling, pushing, into chests, jukeboxes, etc.",
    "head_branch": "patch/Optimize-Hoppers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add back optimize hoppers (#8999)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a553d9087c4d6d3765fc",
    "number": 8998,
    "body": "If it is totally wrong please let me know, i'm new and trying to help.",
    "head_branch": "Fix_some_issue",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a554d9087c4d6d3765fd",
    "number": 8997,
    "body": "We have found today that banners are the only items that have their own ItemMeta, and despite the BlockStateMeta being more than 7 years old, the only way is still to use BannerMeta, and doesn't even implement the new standards (i.e PDC)!\r\n\r\nThis PR is here to make it possible to modify banners using BlockStateMeta, while making sure the old BannerMeta is deprecated, but still working.",
    "head_branch": "fix-banner-itemstack",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a555d9087c4d6d3765fe",
    "number": 8996,
    "body": "We have found today that banners are the only items that have their own ItemMeta, and despite the BlockStateMeta being more than 7 years old, the only way is still to use BannerMeta, and doesn't even implement the new standards (i.e PDC)!\r\n\r\nThis PR is here to make it possible to modify banners using BlockStateMeta, while making sure the old BannerMeta is deprecated, but still working.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a556d9087c4d6d3765ff",
    "number": 8995,
    "body": "Fixes a couple places where the original damage and modified damage were passed in the reverse order to the advancement triggers.\r\n\r\nThanks to @Lulu13022002 for pointing this out.",
    "head_branch": "fix/entity-damage-triggers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix entity damage event triggers (#8995)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a557d9087c4d6d376600",
    "number": 8993,
    "body": "This properly calls EntityDamageByEntityEvent.\r\n\r\nIn general, the use of the event here is improper as we have to essentially simulate a fake attack here.\r\nVanilla does something a bit similar in order to allow datapacks to listen for more than one event in a single tick,\r\nbut it's a bit silly for this to be the case for plugins too.\r\nBut, we are stuck with this now, as upstream has decided to use this event here.",
    "head_branch": "fix-damage-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a558d9087c4d6d376601",
    "number": 8992,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8990",
    "head_branch": "fix/reobf-formerly-private-methods",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix reobf creating unintentional overrides (#8992)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a559d9087c4d6d376602",
    "number": 8991,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n2b4582fb SPIGOT-5916: getLastColors does not work with the rgb colors\r\n\r\nCraftBukkit Changes:\r\nf7707086d SPIGOT-7299: Fix indirect/anvil damage events and minor improvements",
    "head_branch": "update-upstream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#8991)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n2b4582fb SPIGOT-5916: getLastColors does not work with the rgb colors\r\n\r\nCraftBukkit Changes:\r\nf7707086d SPIGOT-7299: Fix indirect/anvil damage events and minor improvements"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a55ad9087c4d6d376603",
    "number": 8987,
    "body": "Fix changeGameModeForPlayer to use gameModeForPlayer instead of previousGameModeForPlayer as the new previousGameModeForPlayer.\r\nIssue https://github.com/PaperMC/Paper/issues/8975",
    "head_branch": "dev/1.19.4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix changeGameModeForPlayer to use gameModeForPlayer MC-259571 (#8987)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a55bd9087c4d6d376604",
    "number": 8986,
    "body": "Fix changeGameModeForPlayer to use gameModeForPlayer instead of previousGameModeForPlayer as the new previousGameModeForPlayer.\r\nIssue https://github.com/PaperMC/Paper/issues/8975",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a55cd9087c4d6d376605",
    "number": 8985,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8974\r\n\r\nI went through all the inventory menus, and found these 3 cases where a Location should be returned.\r\n\r\nReopened from #8981 ",
    "head_branch": "fix/null-inventory-locations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix certain inventories returning null Locations (#8985)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a55dd9087c4d6d376606",
    "number": 8981,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8974\r\n\r\nI went through all the inventory menus, and found these 3 cases where a Location should be returned.",
    "head_branch": "fix/null-inventory-locations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a55fd9087c4d6d376607",
    "number": 8977,
    "body": "You can find runnable jars for experimental 1.19.4 builds below!\r\n**CREATE BACKUPS FIRST; ONLY RUN THIS ON TEST SERVERS**\r\n\r\n*DO NOT MERGE THIS PR: Once deemed stable enough, rebase ver/1.19.4 onto master via cli.*\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-8977.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/601484179.zip)",
    "head_branch": "dev/1.19.4",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix text display error on spawn\nFixes #8984"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a560d9087c4d6d376608",
    "number": 8976,
    "body": "Fix changeGameModeForPlayer to use gameModeForPlayer instead of previousGameModeForPlayer as the new previousGameModeForPlayer. \r\nIssue #8975\r\n\r\n",
    "head_branch": "dev/1.19.4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a561d9087c4d6d376609",
    "number": 8972,
    "body": "Stops empty/non-generated chunks from getting saved",
    "head_branch": "empty-chunk-save",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a562d9087c4d6d37660a",
    "number": 8970,
    "body": null,
    "head_branch": "camel-sit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Camel EntityToggleSitEvent (#8970)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a563d9087c4d6d37660b",
    "number": 8969,
    "body": "The future item property api should be used instead, as this introduces some \"hacky\" behavior that might not be wanted with get/setItem",
    "head_branch": "thrown-potion-yeet",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a564d9087c4d6d37660c",
    "number": 8967,
    "body": null,
    "head_branch": "fix/component-codec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use adventure serializer when serializing an adventure component in a codec (#8967)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a565d9087c4d6d37660d",
    "number": 8962,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8961\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-8962.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/594922150.zip)",
    "head_branch": "fix/legacy-plugin-loading-order",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Properly handle load before plugins in legacy loading (#8962)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a566d9087c4d6d37660e",
    "number": 8960,
    "body": "Bug was introduced due to a \"badly named reobf helper\"",
    "head_branch": "fix/getTargetEntity-ignores-creative",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix getTargetEntity not targeting creative players (#8960)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a567d9087c4d6d37660f",
    "number": 8959,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a568d9087c4d6d376610",
    "number": 8958,
    "body": "This adds a workflow which will run on any label changes to issues or prs and update the associated projects accordingly. The new projects are useful for categorizing things, but they are missing some automation, such as auto-moving between statuses (columns) when labels are changed.\r\n\r\nRight now, this only updates the Issues board ([found here](https://github.com/orgs/PaperMC/projects/5/views/2)). Other boards can be added once this is tested on the org project (I only tested it on user projects, but it should be the same).\r\n\r\n~~This will require a new secret to be added named `PROJECT_ACTIONS_TOKEN` as the default access token available in actions does not have the required permissions to change user/org projects.~~\r\nChanged it to generate the token in the action using an org-only github app.\r\n\r\nThe `label-to-column-map` can be changed per any other suggestions, it's just what I came up with after a quick look through of all the issue labels I thought mattered.",
    "head_branch": "project-actions",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[ci skip] add workflow for auto-managing issue board (#8958)\n\n* add workflow for auto-managing issue board\r\n\r\n* make concurrency depend on the issue number\r\n\r\n* generate token in the action"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a569d9087c4d6d376611",
    "number": 8956,
    "body": "- Probably better for 1.19.4 or 1.20",
    "head_branch": "task/snakeyaml-2.0-upgrade",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a56ad9087c4d6d376612",
    "number": 8955,
    "body": "So I decided to go ahead and do this anyway, if only to demonstrate that this should NOT be the fix we decide to go with. This fix does work, and will only affect noise settings files for the `overworld` and `nether` from the built-in datapack, but it'd be much easier to change **1** line in each of the 5 json files inside the jar instead.",
    "head_branch": "fix/flat-bedrock-in-the-wrong-way",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a56bd9087c4d6d376613",
    "number": 8953,
    "body": "Fix patch indentation that has become out of sync from the surrounding code over time.\r\nNo functional changes, just less confusing.",
    "head_branch": "indentation-drift",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a56cd9087c4d6d376614",
    "number": 8952,
    "body": "Closes https://github.com/PaperMC/Paper/issues/8950\r\n\r\nMy initial thoughts on API for checking if a Material or EntityType is enabled with a `FeatureDependant` interface.\r\n\r\nAdds tests to check on updates when this changes. ",
    "head_branch": "feature/feature-flag-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a56dd9087c4d6d376615",
    "number": 8949,
    "body": "First step of https://github.com/PaperMC/Paper/issues/8948, assuming we actually decide to remove timings entirely.\r\n\r\nAfter an explicit announcement and some more time passes, we can also add runtime warnings.",
    "head_branch": "timings",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Deprecate public Timings classes for removal (#8949)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a56ed9087c4d6d376616",
    "number": 8946,
    "body": "I know electronicboy said that the CreatureSpawnEvent.SpawnReason stuff is fragile and may need deeper investigations and fixes. I made this fix which is for me more clean than what I expose in the linked issue. I let you judge if you want to accept this PR while waiting a more complex fix around CreatureSpawnEvent.SpawnReason stuff or if it's sufficient or not at all.\r\n\r\nCloses #8828 ",
    "head_branch": "fix-creature-spawn-reason-null-for-teleported-entities",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a56fd9087c4d6d376617",
    "number": 8945,
    "body": "Fixes [MC-259321](https://bugs.mojang.com/browse/MC-259321)\r\n\r\nPreviously, spawners would take into account type inheritance when checking for nearby mobs. For example, a regular spider spawner wouldn't spawn mobs if 6 cave spiders were nearby. Similar issues arose with mobs that have different mobs subclass from them. This PR changes it to be a direct check on the type of mob.",
    "head_branch": "fix/spawner-type-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix spawners checking max nearby entities with correct type (#8945)\n\nCo-authored-by: Owen1212055 <23108066+Owen1212055@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a570d9087c4d6d376618",
    "number": 8944,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8943\r\n\r\nArmorStand has a separate field that tracks invisibility which wasn't getting set from the api calls to setInvisible()",
    "head_branch": "fix/armor-stand-invisibility",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Correctly handle ArmorStand invisibility (#8944)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a571d9087c4d6d376619",
    "number": 8942,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8381\r\n\r\nThere are probably more options for a check to only conditionally run the AsyncCatcher.\r\n\r\nAnother option I came up with was checking if the `chunkStatus` on `Entity` was null, as that means it hasn't been added to the ChunkEntitySlices yet.\r\n\r\nThe `valid` field is set to true when the entity has had its \"start tracking\" callback called.\r\n\r\nEither way, there is a completely valid use for adding effects off the main thread... when the entity object only exists on a separate thread like it can during worldgen.",
    "head_branch": "fix/structure-async-entity-effect",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow entity effect changes off the main thread for worldgen (#8942)\n\n* Allow entity effect modification off the main thread for worldgen\r\n\r\n* squash all async catcher patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a572d9087c4d6d37661a",
    "number": 8941,
    "body": "Based in a conversation in discord i think currently not exists a good form to cancel the teleport of player when going to the end portal in the END to go to overworld like other portals, exists methods but only allow change the destination and not cancel before all happen.\r\n\r\nThe PR add a new method extented from PlayerTeleportEvent for handle this thing and allow cancel.\r\n\r\nThis PR has a things im not pretty sure.\r\n\r\n- Thanks to mojang this method not allow change the destination because the destination in first place is the respawn position, and this is handled in another place when the packet for respawn is send because yes this send a packet for make all the respawn logic then mess with that is... well \"hard\"",
    "head_branch": "change/call-teleport-event-exit-portal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a573d9087c4d6d37661b",
    "number": 8940,
    "body": "Fix sheeps eating grass outside ticking chunks\r\nFix itemframe drops dropping in correct location\r\n\r\nReplacement for https://github.com/PaperMC/Paper/pull/8420 and https://github.com/PaperMC/Paper/pull/8424",
    "head_branch": "fix/billy-vanilla-bugs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix 2 vanilla issues (#8940)\n\nFix sheeps eating grass outside ticking chunks\r\nFix itemframe drops dropping in correct location\r\n\r\nCo-authored-by: BillyGalbreath <blake.galbreath@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a574d9087c4d6d37661c",
    "number": 8939,
    "body": "See #8294 \r\nFixes: https://github.com/PaperMC/Paper/issues/8728\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-8939.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/586110909.zip)",
    "head_branch": "fix-setprofile",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Player#setPlayerProfile (#8939)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a575d9087c4d6d37661d",
    "number": 8938,
    "body": "- Fixes library lookups during plugin construction for spigot plugins.\r\n- Avoids loading providers when using /paper dumpplugins\r\n- Correctly remove plugin loader groups\r\n\r\nPlease test to make sure that there are no more duplicate classloader enteries, and that things seem to work nicely.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-8938.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/586154557.zip)",
    "head_branch": "classloader-work",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Correctly Remove Classloaders, Avoid Loading Providers in /paper dumpplugins, Fix library lookup (#8938)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a576d9087c4d6d37661e",
    "number": 8937,
    "body": "Still needs more thorough testing than what I have done, but this simplifies support for setting various structure seeds in spigot.yml. It also better integrates with the server, actually changing values instead using direct holders. For example, \r\n```java\r\nlevel.registryAccess().registryOrThrow(Registries.STRUCTURE_SET).getOrThrow(BuiltInStructureSets.ANCIENT_CITY).salt()\r\n```\r\nwill return the seed set for that world in the spigot config.\r\n\r\nI do not think we should be adding anything that isn't already a feature to this system, but I feel it better realizes what the spigot.yml setting does.",
    "head_branch": "rework-structure-seeds",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a577d9087c4d6d37661f",
    "number": 8936,
    "body": "Setting whether a block break dropped items controlled far more than just whether blocks dropped, like stat increases food consumption, turtle egg count decreases, ice to water conversions and beehive releases\r\n\r\nI put an `@DoNotUse` annotation on the old method which will catch any other calls (including super.playerDestroy calls added in future versions).\r\n\r\nFixes https://github.com/PaperMC/Paper/issues/8931",
    "head_branch": "fix/BlockBreakEvent#isDropItems",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Properly handle BlockBreakEvent#isDropItems (#8936)\n\nSetting whether a block break dropped items controlled\r\nfar more than just whether blocks dropped, like stat increases\r\nfood consumption, turtle egg count decreases, ice to water\r\nconversions and beehive releases"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a578d9087c4d6d376620",
    "number": 8924,
    "body": null,
    "head_branch": "gradle-8",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[ci skip] Update Gradle wrapper to 8.0.1 (#8924)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a579d9087c4d6d376621",
    "number": 8923,
    "body": "Closes #8569\r\n\r\nFixes a funny looking bug where sleeping villagers will move to pick up food dropped nearby while staying in the sleeping animation, with this patch they'll just stay in bed and not move.\r\n\r\nAlternatively, it'd also be possible to wake up the villager but I figured this would be best to start off with.",
    "head_branch": "fix-mc-157464",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix MC-157464 Prevent sleeping villagers moving towards food (#8923)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a57ad9087c4d6d376622",
    "number": 8921,
    "body": null,
    "head_branch": "paper-plugin-loggers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make PluginProviderContext#getLogger return ComponentLogger, remove PluginProviderContext#getSLF4JLogger (#8921)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a57bd9087c4d6d376623",
    "number": 8920,
    "body": "Adds two new \"events\" that PluginBootstrap can register to which enable modification and addition to both built-in and data-driven registries. This opens up tons of new possibilities for plugins to customize things with API that was previously only possible with nms/reflection.\n\n**Data-Driven**: Types which are loaded purely from datapacks (custom and vanilla)\n**Built-In**: Loaded via source code, never read from a file\n\nThere are two events plugins can listen to, one is fired when an \"entry\" is about to be added to a registry, either a built-in or data-driven. This allows modification of the \"entry\" before it's registered. The second event is fired right before the registry is frozen (to prevent new additions). This is used to add completely new entries. \n\n\n### Demo\nThere are two \"demonstration\" apis added, one for ChatType and one for GameEvent. Just allows some very simply customization, more just to show how it works for both built-in and data-driven types.\n\n---\n\n```[tasklist]\n### TODO\n- [x] https://github.com/PaperMC/Paper/pull/8642\n- [ ] https://github.com/PaperMC/Paper/pull/9009\n- [ ] https://github.com/PaperMC/Paper/pull/9233\n- [x] better naming (not attached to any of them)\n- [x] add specific \"event\" types instead to allow for more context to be added to listeners\n- [x] ~~add more registry api, like getOrThrow(), hasKey(), helper util methods like that.~~ will be handled in different pr\n- [x] Either remove, or fully flesh out the two \"demo\" API this adds (added GameEvent)\n- [ ] Add registry keys for other already-existing registries from Registry.java\n- [x] Move Paper plugin changes to Paper Plugins patch\n- [x] Add exception handling to event fires\n- [x] ~~Discuss any \"removal\" or \"cancel addition\" API~~ left for future possible API\n- [x] Should static final RegistryKey be in the RegistryKey or should we separate them? Like BuiltInRegistries could have keys and instances and DataDrivenRegistries would just have keys. **No, they should all be in one file like vanilla has now with Registries.java**\n- [ ] Discuss having the \"builders\" under a separate API policy as the types they apply to change very frequently.\n- [x] move registry modification patch into Paper Registry API patch\n- [ ] https://github.com/PaperMC/Paper/pull/9629\n- [ ] https://github.com/PaperMC/Paper/pull/10154\n```",
    "head_branch": "feature/registry-modification",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a57cd9087c4d6d376624",
    "number": 8919,
    "body": null,
    "head_branch": "fix/key-equals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix NamespacedKey#equals not accepting other Key types (#8919)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a57dd9087c4d6d376625",
    "number": 8917,
    "body": "Basically #8898 and #8899, but correct.\r\nThe hyphen of \"High-performance\" should just be added to \"About\" :)",
    "head_branch": "Grammar-correction",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Update README and CONTRIBUTING (#8917)\n\nGrammar fixes and other updates"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a57ed9087c4d6d376626",
    "number": 8914,
    "body": "Makes the plugin bootstrap more flexible about wrapping your own plugin interfaces into JavaPlugin implementation",
    "head_branch": "plugin-bootstrap-bypass-restrictions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Log message if plugin bootstrap provided external plugin instead of throwing an exception (#8914)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a57fd9087c4d6d376627",
    "number": 8913,
    "body": "Allows to set death message on the death screen separately from the message sent to all Players",
    "head_branch": "feature/playerDeathScreenMessage",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a580d9087c4d6d376628",
    "number": 8912,
    "body": null,
    "head_branch": "chore/update-adventure-domain",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "chore: update adventure documentation url in javadocs (#8912)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a581d9087c4d6d376629",
    "number": 8910,
    "body": "Optionally allow plugin bootstrap to return plugin other than the declared as main.\r\nIt is useful to provide wrappers for own interfaces, and in general, makes the plugin system more flexible.\r\nThis PR basically adds the `allowsWrapping` property to the paper plugin meta and then in the PaperPluginParent checks if it is allowed, and bypasses the restriction if it is.\r\n\r\nResolves #8892.\r\n\r\nDiscussed it with a few maintainers, no one of them was against this idea, so going ahead to implement :)",
    "head_branch": "allowsWrapping",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a582d9087c4d6d37662a",
    "number": 8909,
    "body": "Optionally allow plugin bootstrap to return plugin other than the declared as main.\r\nIt is useful to provide wrappers for own interfaces, and in general, makes the plugin system more flexible.\r\nThis PR basically adds the `allowsWrapping` property to the paper plugin meta and then in the PaperPluginParent checks if it is allowed, and bypasses the restriction if it is.\r\n\r\nResolves #8892.\r\n\r\nDiscussed it with a few maintainers, no one of them was against this idea, so going ahead to implement :)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a583d9087c4d6d37662b",
    "number": 8907,
    "body": "This is one way to fix the wrongly (imo) deprecated get/setSpawnedType methods on SpawnEggMeta. Spawn eggs set a custom entity type be spawned that isn't the type associated with the item. This lets plugins get and set that custom type. This allows spawn eggs for entities that don't otherwise have a spawn egg item (like item frames).",
    "head_branch": "fix/spawn-egg-meta",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix SpawnEggMeta#get/setSpawnedType (#8907)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a584d9087c4d6d37662c",
    "number": 8906,
    "body": null,
    "head_branch": "fix/update-advntr-doc-links",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a585d9087c4d6d37662d",
    "number": 8904,
    "body": "These cauldron interactions already fire the FLUID_PLACE game event, it shouldn't also fire the BLOCK_CHANGE game event, which is what the added method by upstream does. \r\n\r\nFollows up on https://github.com/PaperMC/Paper/pull/8887",
    "head_branch": "fix/duplicate-game-event-cauldron-dispenser",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't fire 2 game events for certain cauldron interactions (#8904)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a586d9087c4d6d37662e",
    "number": 8902,
    "body": "This should fix #8879 and similar reports on the Discord server, I can't test it because I'm not on Windows, so perhaps it would be good to add the build-pr-jar label and ask for someone to test the update feature on Windows.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-8902.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/574775468.zip)",
    "head_branch": "fix/close-plugin-jarfile",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Close plugin jar file on classloader close and after retrieving name for updating (#8902)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a587d9087c4d6d37662f",
    "number": 8901,
    "body": "Readds changes already proposed in a previous PR which were lost, presumably during the fixup process.\r\n\r\nSpecifically, this commit aims to readd the two previously proposed improvements:\r\n\r\n1) Close the library classloader when a paper plugins classloader\r\n   is closed.\r\n\r\n2) Pass soft- and normal dependencies as well as the load-before plugins\r\n   specified by a paper plugin to the dummy PluginDescriptionFile\r\n   implementation spigot plugins expect via Plugin#getDescription().\r\n\r\nSee: #8866",
    "head_branch": "bugfix/fix-regression-in-8866",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Close library classloader and improve PluginDescriptionFile (#8901)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a588d9087c4d6d376630",
    "number": 8900,
    "body": "No, I didn't add myself since I made no code.",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a589d9087c4d6d376631",
    "number": 8899,
    "body": null,
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a58ad9087c4d6d376632",
    "number": 8898,
    "body": "Saw some language errors and fixed them",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a58bd9087c4d6d376633",
    "number": 8897,
    "body": "Makes issues like https://pastes.dev/5YMQs9RYQQ easier to see the cause of (and not crash the server when it doesn't have to).",
    "head_branch": "fix/error-on-plugin-init",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Properly log any Throwable on plugin class creation (#8897)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a58cd9087c4d6d376634",
    "number": 8896,
    "body": "Adds methods to:\r\n- `#isIgnited()` - check if the Minecart is ignited (its fuse is primed)\r\n- `#ignite()` - prime the fuse\r\n  differs from `#setFuseTicks()` by following vanilla behavior (4 seconds before the explosion, notifying the players to play the animation, playing sound if not silent); `#setFuseTicks` can be used additionally after to change the ticks before the explosion)\r\n- `#explode()` and `#explode(power)` - to immediately explode the Minecart (parameterless method follows vanilla behavior)",
    "head_branch": "minecart",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Additional ExplosiveMinecart API (#8896)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a58dd9087c4d6d376635",
    "number": 8895,
    "body": "Edit: initial patch deemed obsolete.\r\nNow simply cleans up the old patch and adds extra info for async command catcher.\r\n___\r\nSometime in the past, Spigot added its own async command catcher making Paper's logic fail to execute due to the raised error.\r\n\r\nThis PR comments out Spigot's async command catcher in favor of Paper's one since Paper's catcher contains more useful data like the link for additional info and the dispatched command, and also allows the command to execute nevertheless. Specifying the command is especially useful in cases where the error shows no traces of the plugin and the command is at least something to look for.\r\n\r\nBefore: (command not executed)\r\n```\r\n[14:56:12 ERROR]: Thread Craft Scheduler Thread - 3 - Testik failed main thread check: command dispatch\r\njava.lang.Throwable: null\r\n        at org.spigotmc.AsyncCatcher.catchOp(AsyncCatcher.java:15) ~[paper-1.19.3.jar:git-Paper-413]\r\n        at org.bukkit.craftbukkit.v1_19_R2.CraftServer.dispatchCommand(CraftServer.java:888) ~[paper-1.19.3.jar:git-Paper-413]\r\n        at org.bukkit.craftbukkit.v1_19_R2.entity.CraftPlayer.performCommand(CraftPlayer.java:721) ~[paper-1.19.3.jar:git-Paper-413]\r\n        at me.sosedik.testik.Testik.lambda$onChat$1(Testik.java:33) ~[Testik-1.0-SNAPSHOT.jar:?]\r\n        at org.bukkit.craftbukkit.v1_19_R2.scheduler.CraftTask.run(CraftTask.java:101) ~[paper-1.19.3.jar:git-Paper-413]\r\n        at org.bukkit.craftbukkit.v1_19_R2.scheduler.CraftAsyncTask.run(CraftAsyncTask.java:57) ~[paper-1.19.3.jar:git-Paper-413]\r\n        at com.destroystokyo.paper.ServerSchedulerReportingWrapper.run(ServerSchedulerReportingWrapper.java:22) ~[paper-1.19.3.jar:?]\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) ~[?:?]\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) ~[?:?]\r\n        at java.lang.Thread.run(Thread.java:833) ~[?:?]\r\n[14:56:12 WARN]: [Testik] Plugin Testik v1.0-SNAPSHOT generated an exception while executing task 6\r\njava.lang.IllegalStateException: Asynchronous command dispatch!\r\n        at org.spigotmc.AsyncCatcher.catchOp(AsyncCatcher.java:16) ~[paper-1.19.3.jar:git-Paper-413]\r\n        at org.bukkit.craftbukkit.v1_19_R2.CraftServer.dispatchCommand(CraftServer.java:888) ~[paper-1.19.3.jar:git-Paper-413]\r\n        at org.bukkit.craftbukkit.v1_19_R2.entity.CraftPlayer.performCommand(CraftPlayer.java:721) ~[paper-1.19.3.jar:git-Paper-413]\r\n        at me.sosedik.testik.Testik.lambda$onChat$1(Testik.java:33) ~[Testik-1.0-SNAPSHOT.jar:?]\r\n        at org.bukkit.craftbukkit.v1_19_R2.scheduler.CraftTask.run(CraftTask.java:101) ~[paper-1.19.3.jar:git-Paper-413]\r\n        at org.bukkit.craftbukkit.v1_19_R2.scheduler.CraftAsyncTask.run(CraftAsyncTask.java:57) ~[paper-1.19.3.jar:git-Paper-413]\r\n        at com.destroystokyo.paper.ServerSchedulerReportingWrapper.run(ServerSchedulerReportingWrapper.java:22) ~[paper-1.19.3.jar:?]\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) ~[?:?]\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) ~[?:?]\r\n        at java.lang.Thread.run(Thread.java:833) ~[?:?]\r\n```\r\n\r\nAfter: (command executed)\r\n```\r\n[14:58:53 ERROR]: Command Dispatched Async: /testik\r\n[14:58:53 ERROR]: Please, notify the author of the plugin causing this execution to fix this bug! See: http://bit.ly/1oSiM6C\r\njava.lang.Throwable: null\r\n        at org.bukkit.craftbukkit.v1_19_R2.CraftServer.dispatchCommand(CraftServer.java:898) ~[paper-1.19.3.jar:git-Paper-\"bb63a61\"]\r\n        at org.bukkit.craftbukkit.v1_19_R2.entity.CraftPlayer.performCommand(CraftPlayer.java:721) ~[paper-1.19.3.jar:git-Paper-\"bb63a61\"]\r\n        at me.sosedik.testik.Testik.lambda$onChat$1(Testik.java:33) ~[Testik-1.0-SNAPSHOT.jar:?]\r\n        at org.bukkit.craftbukkit.v1_19_R2.scheduler.CraftTask.run(CraftTask.java:101) ~[paper-1.19.3.jar:git-Paper-\"bb63a61\"]\r\n        at org.bukkit.craftbukkit.v1_19_R2.scheduler.CraftAsyncTask.run(CraftAsyncTask.java:57) ~[paper-1.19.3.jar:git-Paper-\"bb63a61\"]\r\n        at com.destroystokyo.paper.ServerSchedulerReportingWrapper.run(ServerSchedulerReportingWrapper.java:22) ~[paper-1.19.3.jar:?]\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) ~[?:?]\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) ~[?:?]\r\n        at java.lang.Thread.run(Thread.java:833) ~[?:?]\r\n```\r\n\r\nAlso tweaked some wording and added a slash before the command to better visualize that it's a command & be on pair with the second catcher (one receives \"/command\", but the second one receives \"command\").",
    "head_branch": "async-commands",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Cleanup old async commands patch (#8895)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a58fd9087c4d6d376636",
    "number": 8894,
    "body": "Add API to get and set the dancing state of Piglins.\r\n\r\nhttps://minecraft.fandom.com/wiki/Piglin?file=Piglin_celebrate_hunt_Revision_2.gif\r\n",
    "head_branch": "piglin-dance",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing Piglin Dancing API (#8894)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a590d9087c4d6d376637",
    "number": 8893,
    "body": "Add API to get and set the dancing state of Piglins.\r\n\r\nhttps://minecraft.fandom.com/wiki/Piglin?file=Piglin_celebrate_hunt_Revision_2.gif",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a591d9087c4d6d376638",
    "number": 8891,
    "body": "Only show an error message if the configured path for update directory points to an existing non-directory. If it doesn't exist, just ignore it.",
    "head_branch": "fix/update-folder-error",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix update folder logging error when no folder exists (#8891)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a592d9087c4d6d376639",
    "number": 8890,
    "body": "Addresses https://github.com/PaperMC/Paper/pull/8873#issuecomment-1439376713\r\n\r\nThis prevents building dependency trees on providers that don't even exist, which should hopefully eliminate some of the possible plugin loading loops that are currently introduced.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-8890.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/567094861.zip)",
    "head_branch": "ignore-missing-providers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Validate providers when populating load order tree (#8890)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a593d9087c4d6d37663a",
    "number": 8889,
    "body": "This PR removes the redundant plugin headers while they are not required. Imagine a situation when you have no Paper plugins and some Spigot plugins. It will look like this, which is pretty ugly:\r\n\r\n```\r\nPaper plugins:\r\nBukkit plugins:\r\n- plugin 1\r\n- plugin 2\r\n```\r\n\r\nThe Paper plugins header is redundant here.",
    "head_branch": "plugin-headers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Do not send plugin headers when it is not required (#8889)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a594d9087c4d6d37663b",
    "number": 8888,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8885\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-8888.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/566461481.zip)",
    "head_branch": "fix/JavaPlugin#getPlugin",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix JavaPlugin static getPlugin methods (#8888)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a595d9087c4d6d37663c",
    "number": 8887,
    "body": "When a cauldron is filled for the first time (by the weather), there two game event that are sent for no reason.",
    "head_branch": "fix/doublegameevnt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Avoid duplicate game event on initial fill (#8887)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a596d9087c4d6d37663d",
    "number": 8886,
    "body": "Add missing deprecation around the resource pack api\r\nAnd also deprecate the spigot silenceable lightning stuff. The lightning sound has been moved clientside and this will just\r\ncreate some side effect like not spreading more fire in normal+ diff or doesn't power the lightning rod. The only change that could be intended is the sculk sensor that will be unable to listen to that vibration for silent lightning.",
    "head_branch": "fix/deprannot",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing deprecation (#8886)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a597d9087c4d6d37663e",
    "number": 8884,
    "body": null,
    "head_branch": "plugin-headers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a598d9087c4d6d37663f",
    "number": 8883,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a599d9087c4d6d376640",
    "number": 8882,
    "body": "Update the Alternate Current patch to v1.5.0\r\n- Fixes issues where adjacent but disconnected redstone dust dots behave inconsistently.",
    "head_branch": "update-alternate-current",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "update alternate current to v1.5.0 (#8882)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a59ad9087c4d6d376641",
    "number": 8881,
    "body": "Paper plugins will explode when reloading, but, I added a little warning.",
    "head_branch": "fixreload",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Properly re-add providers when reloading (#8881)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a59bd9087c4d6d376642",
    "number": 8878,
    "body": null,
    "head_branch": "fix/damageItemStack-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Further clarify functionality of damageItemStack methods (#8878)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a59cd9087c4d6d376643",
    "number": 8876,
    "body": "On a different branch this time...\r\n\r\nThis PR implements a QOL feature to `/paper entity list <entity>` where it will allow a user to teleport to chunk.\r\n\r\nhttps://user-images.githubusercontent.com/21014720/220211324-0173af64-363c-4bf9-a459-6785683ad19c.mp4",
    "head_branch": "paper-list-qol",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "/paper entity list QOL improvements (#8876)\n\nThis PR implements a QOL feature to /paper entity list <entity> where it will allow a user to teleport to chunk."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a59dd9087c4d6d376644",
    "number": 8875,
    "body": "This PR implements a QOL feature to `/paper entity list <entity>` where it will allow a user to teleport to chunk.\r\n\r\nhttps://user-images.githubusercontent.com/21014720/220211324-0173af64-363c-4bf9-a459-6785683ad19c.mp4\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a59ed9087c4d6d376645",
    "number": 8874,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n6b3c598b PR-814: Add a method to send multiple equipment changes\r\n181a984b Update Maven shade version to align with CraftBukkit\r\na5a36e32 Revert \"Update Maven shade version to align with CraftBukkit\"\r\n7a8f4a42 Update Maven shade version to align with CraftBukkit\r\n58327201 Add support for Java 20\r\n\r\nCraftBukkit Changes:\r\nb56426c7a PR-1142: Calculate explosion damage separately for each affected EntityComplexPart\r\nfbe3410af PR-1140: Add a method to send multiple equipment changes\r\n8434e3633 Add support for Java 20\r\nc998a1d23 Increase outdated build delay\r\n4a929b5d6 SPIGOT-7267: Fix EntityType#getTranslationKey() and add unit test\r\n086d8dc8a SPIGOT-7268: CraftMetaPotion reads ShowParticles and ShowIcon properties incorrectly\r\n8ba5e399e SPIGOT-7262: Improve visibility API\r\n\r\nSpigot Changes:\r\na2190e30 Rebuild patches",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#8874)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n6b3c598b PR-814: Add a method to send multiple equipment changes\r\n181a984b Update Maven shade version to align with CraftBukkit\r\na5a36e32 Revert \"Update Maven shade version to align with CraftBukkit\"\r\n7a8f4a42 Update Maven shade version to align with CraftBukkit\r\n58327201 Add support for Java 20\r\n\r\nCraftBukkit Changes:\r\nb56426c7a PR-1142: Calculate explosion damage separately for each affected EntityComplexPart\r\nfbe3410af PR-1140: Add a method to send multiple equipment changes\r\n8434e3633 Add support for Java 20\r\nc998a1d23 Increase outdated build delay\r\n4a929b5d6 SPIGOT-7267: Fix EntityType#getTranslationKey() and add unit test\r\n086d8dc8a SPIGOT-7268: CraftMetaPotion reads ShowParticles and ShowIcon properties incorrectly\r\n8ba5e399e SPIGOT-7262: Improve visibility API\r\n\r\nSpigot Changes:\r\na2190e30 Rebuild patches"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a59fd9087c4d6d376646",
    "number": 8873,
    "body": "Spigot Plugins:\r\n- If dependency is in ``loadbefore`` and in ``depend``/``softdepend``, ignore the load order induced by dependency and just make it load before. This means that it will always load before now. \r\n- If plugin has a 1-1 dependency loop (PluginX -> PluginZ, PluginZ -> PluginX), an effectively \"random\" load order will be chosen.\r\n- Remove the class loading warning for spigot plugins, we have no reason to care about it.\r\n\r\nThis should remove *most* cyclic dependency issues, as so many of these were introduced as a hack to get rid of the class loading warnings. \r\n\r\nPaper Plugins:\r\n- Dependencies NO LONGER affect load order. This means that you can have \"cyclic dependencies\", however, you cannot have cyclic load order.\r\n- New ``loadafter`` field in paper-plugin.yml\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-8873.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/565080593.zip)",
    "head_branch": "cycle-dependencies",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Redefine Cyclic Dependencies (#8873)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a5a0d9087c4d6d376647",
    "number": 8872,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8863\r\n\r\nIt should use the decoratedContent. In the ChatProcessor it uses the decoratedContent currently if the viewer list changes, this should too.",
    "head_branch": "fix/console-logged-msgs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix chat messages logged in console (#8872)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5a1d9087c4d6d376648",
    "number": 8866,
    "body": "Some fixes that can be merged whenever. \r\nAren't really critical. ",
    "head_branch": "small-paper-plugin-fixes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Small paper plugin fixes (#8866)\n\n\r\n\r\nCo-authored-by: Bjarne Koll <lynxplay101@gmail.com>\r\nCo-authored-by: Jake Potrebic <jake.m.potrebic@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a5a2d9087c4d6d376649",
    "number": 8865,
    "body": "~~Will clean up imports and move any plugin loading changes to the original patch later.~~\r\ndone",
    "head_branch": "feature/datapacks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5a3d9087c4d6d37664a",
    "number": 8864,
    "body": null,
    "head_branch": "warn-on-ugly-configuration",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix plugin updater logic, allow null update directory (#8864)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5a4d9087c4d6d37664b",
    "number": 8862,
    "body": "When a fox died the item in its mouth doesn't have a 100% chance to drops and can even be damaged using the summon command (and having a great luck). This is due to them relying on the generic mob logic before the fox loot.\r\nAlso closes MC-153010",
    "head_branch": "fix/foxdeath",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix fox drops on death (#8862)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5a5d9087c4d6d37664c",
    "number": 8861,
    "body": "A recent patch moved the internal unit tests to mokito, allowing deep mocking to easily setup a mocked server instance. While this change is useful, the server's Server#getItemFactory methods is one of the hottest paths during unit testing, being called numerous times by material tests.\r\nAs mokito mocks keep track of each invocation to allow for verifications of invocations down the line, the server mock allocates a huge amount of memory to keep track of all invocations, ultimately leading to an OOM exception.\r\n\r\nThe previous solution solved this by increasing the tests memory to 2 GB, however as of right now simply configuring the server mock as \"stubOnly\", properly prevents the overflow of invocation records as none of the unit test code relies on invocation verification.",
    "head_branch": "enhancement/server-mock-stub-only",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Configure mokitor Server mock as stubOnly (#8861)\n\nA recent patch moved the internal unit tests to mokito, allowing\r\ndeep mocking to easily setup a mocked server instance.\r\nWhile this change is useful, the server's Server#getItemFactory methods\r\nis one of the hottest paths during unit testing, being called numerous\r\ntimes by material tests.\r\nAs mokito mocks keep track of each invocation to allow for verifications\r\nof invocations down the line, the server mock allocates a huge amount of\r\nmemory to keep track of all invocations, ultimately leading to an OOM\r\nexception.\r\n\r\nThe previous solution solved this by increasing the tests memory to 2 GB,\r\nhowever as of right now simply configuring the server mock as \"stubOnly\",\r\nproperly prevents the overflow of invocation records as none of the unit\r\ntest code relies on invocation verification."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5a6d9087c4d6d37664d",
    "number": 8860,
    "body": "When a tree grows there's multiple update that happens in the same position but since the captured block state list doesn't support that it just override the last one with the new one but without updating the update flag.\r\nCloses https://github.com/PaperMC/Paper/issues/8858",
    "head_branch": "fix/updatetree",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update the flag when a captured block state is outdated (#8860)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5a7d9087c4d6d37664e",
    "number": 8856,
    "body": "Didn't remove the paper repo from settings to make it easier to use snapshots when updating for a new MC version",
    "head_branch": "paperweight-1.5.1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[ci skip] Update paperweight to 1.5.1 (#8856)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5a8d9087c4d6d37664f",
    "number": 8855,
    "body": "Abstracts relative teleport flags and instead makes a generic TeleportFlag option. This has the benefit of being able to easily add new flags in the future.\r\n\r\nThis adds a new flag, which allows you to keep inventories open when teleporting players (vanilla behavior). \r\n\r\nThese are breaking changes to the teleport api, however, it's still marked as experimental so I find this a fair change. ",
    "head_branch": "teleport-flags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add TeleportFlags (#8855)\n\nAbstracts relative teleport flags and instead makes a generic TeleportFlag option. This has the benefit of being able to easily add new flags in the future.\r\nThis adds a new flag, which allows you to keep inventories open when teleporting players (vanilla behavior).\r\n\r\nThese are breaking changes to the teleport api, however, it's still marked as experimental so I find this a fair change."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a5a9d9087c4d6d376650",
    "number": 8853,
    "body": null,
    "head_branch": "fix/npe-on-startup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make sure Registry is loaded after Bukkit.setServer() (#8853)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a5abd9087c4d6d376651",
    "number": 8848,
    "body": "This is gonna solve a lot of future classloading order headaches. Also this is way nicer than manually building invocation handlers. At some point we should think about updating junit too, but not as needed as I feel this is.",
    "head_branch": "convert-to-mockito",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "convert API/server tests to mockito (#8848)\n\n* convert API tests to mockito\r\n\r\n* convert server tests to mockito\r\n\r\n* add co-author"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5acd9087c4d6d376652",
    "number": 8847,
    "body": "The only path to removed code is through ServerboundContainerClickPacket, which checks the following precondition:\r\n`if (!this.player.containerMenu.isValidSlotIndex(i)) {`\r\nThis means that, by the time we get to the removed code, the slot index must either be an in-bounds slot (redundant check), or -999 (unchecked by the removed code).\r\nIf the slot is -999 then the code will throw and disconnect the client, but that can only happen if a non-vanilla client sends invalid data.",
    "head_branch": "remove-obsolete",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove patch that was made obsolete by vanilla (#8847)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5add9087c4d6d376653",
    "number": 8846,
    "body": "The only path to removed code is through ServerboundContainerClickPacket, which checks the following precondition:\r\n`if (!this.player.containerMenu.isValidSlotIndex(i)) {`\r\nThis means that, by the time we get to the removed code, the slot index must either be an in-bounds slot (redundant check), or -999 (unchecked by the removed code).\r\nIf the slot is -999 then the code will throw and disconnect the client, but that can only happen if a non-vanilla client sends invalid data.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5aed9087c4d6d376654",
    "number": 8845,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8844",
    "head_branch": "fix/respawn-anchor-forced-respawn",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix forced respawn with respawn anchor (#8845)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5afd9087c4d6d376655",
    "number": 8843,
    "body": "The isFuel method in Material was missing the new experimental blocks. Other Material isX methods seem to be correct.",
    "head_branch": "fix/missing-isFuel-mats",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing isFuel Material entries (#8843)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5b0d9087c4d6d376656",
    "number": 8842,
    "body": "Fixes #8841 \r\n\r\nCombines the existing item predicates with the tryReadyArrow method.",
    "head_branch": "fix/arrow-event-offhand",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Call PlayerReadyArrowEvent for when items in the offhand are used (#8842)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5b1d9087c4d6d376657",
    "number": 8840,
    "body": "Currently the flying fall damage API uses a `TriState`, but treats it like a `boolean`.\r\nLooking at the original PR, it was a `boolean`, was changed into a `TriState` so that it can be saved to a file if it's set (and be ignored if its `UNSET`), and then saving the file was removed and it remained a `TriState` without any actual reason to be one.\r\n\r\nThis PR adds new `Player#flyingFallDamage` and `Player#flyingFallDamage(boolean)` methods that better reflect the way it works internally.\r\nThe new methods are `default` methods which use the now-deprecated `TriState` ones to avoid API breaks.",
    "head_branch": "Cleanup_FlyingFallDamage_API",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5b2d9087c4d6d376658",
    "number": 8839,
    "body": "Fixes #8836.",
    "head_branch": "ender-dragon-kill",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5b3d9087c4d6d376659",
    "number": 8838,
    "body": "Fixes #8836 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5b4d9087c4d6d37665a",
    "number": 8834,
    "body": "Fixes #6616.\r\n\r\nThis allows the following `paper-global.yml` configuration values:\r\n* `global-max-concurrent-loads` can be set to 1.0 and higher\r\n  (previously could only be set to strictly higher than 1.0)\r\n* `target-player-chunk-send-rate` and `global-max-chunk-send-rate` can be set to 10<sup>-3</sup> (1 chunk per 1000 seconds, a value that is safe and lower than anyone could ever need) and higher\r\n  (previously could only be set to strictly higher than 1.0)",
    "head_branch": "fix/chunk-loading-rates-of-one",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5b5d9087c4d6d37665b",
    "number": 8833,
    "body": "When `System.nanoTime()` wraps around the long limit, the chunk sending can get stuck for 292 years (if the planned next time is just below `Long.MAX_VALUE` and the current time is just above `Long.MIN_VALUE`). This is fixed by using subtractions instead of direct comparisons.",
    "head_branch": "fix/chunk-sending-on-time-overflow",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix chunk sending when the computed time overflows (#8833)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5b7d9087c4d6d37665c",
    "number": 8832,
    "body": "Added a patch to fix the HandlerList for the new InventoryBlockStartEvent and sub events.\r\n\r\n---\r\n\r\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n37262de8 PR-812: Add Registry#match(String)\r\nd6b40162 SPIGOT-4569: Add more BlockData API\r\nf9691891 PR-809: Throw a more clear error for BlockIterators with zero direction, add Vector#isZero()\r\n91e79e19 PR-804: Added methods to get translation keys for materials, itemstacks and more\r\n426b00d3 PR-795: Add new BiomeParameterPoint passed to BiomeProvider#getBiome\r\n0e91ea52 SPIGOT-7224: Add events for brewing stands and campfires starting their actions\r\n\r\nCraftBukkit Changes:\r\na50301aa5 Fix issues with fluid tag conversion and fluid #isTagged\r\n6aeb5e4c3 SPIGOT-4569: Implement more BlockData API\r\n7dbf862c2 PR-1131: Added methods to get translation keys for materials, itemstacks and more\r\n7167588b1 PR-1117: Add new BiomeParameterPoint passed to BiomeProvider#getBiome\r\n7c44152eb SPIGOT-7224: Add events for brewing stands and campfires starting their actions",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#8832)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n37262de8 PR-812: Add Registry#match(String)\r\nd6b40162 SPIGOT-4569: Add more BlockData API\r\nf9691891 PR-809: Throw a more clear error for BlockIterators with zero direction, add Vector#isZero()\r\n91e79e19 PR-804: Added methods to get translation keys for materials, itemstacks and more\r\n426b00d3 PR-795: Add new BiomeParameterPoint passed to BiomeProvider#getBiome\r\n0e91ea52 SPIGOT-7224: Add events for brewing stands and campfires starting their actions\r\n\r\nCraftBukkit Changes:\r\na50301aa5 Fix issues with fluid tag conversion and fluid #isTagged\r\n6aeb5e4c3 SPIGOT-4569: Implement more BlockData API\r\n7dbf862c2 PR-1131: Added methods to get translation keys for materials, itemstacks and more\r\n7167588b1 PR-1117: Add new BiomeParameterPoint passed to BiomeProvider#getBiome\r\n7c44152eb SPIGOT-7224: Add events for brewing stands and campfires starting their actions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a5b8d9087c4d6d37665d",
    "number": 8829,
    "body": "Paper had API for getting/setting the stuck arrow count in LivingEntity, but at some point upstream added it and we failed to deprecate ours. In addition, the behavior was slightly different, our method always fired the `ArrowBodyCountChangeEvent` whereas upstream's did not. So I added a method overload to upstream's method with a boolean to fire the event or not.",
    "head_branch": "fix/duplicate-arrow-stuck-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Deprecate duplicate API for arrow stuck count (#8829)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a5b9d9087c4d6d37665e",
    "number": 8824,
    "body": "Calling `Instant::plus`/`::minus` with `Tick` as `TemporalUnit` causes the `Instant` to delegate the operation to the `TU::addTo`, which calls the same method in the `Instant`, calling each other recursively resulting in a StackOverflowError. Same process happens with `Instant::until` and `TU::between`.\nIn theory this can happen with any `Temporal` implementation but I would make the argument that `Instant` is by far the most commonly used.\n\nThis pull request fixes that by performing the operations with standard and well-known API elements (ChronoUnit and Duration), which should be supported even by foreign implementations.\r\n\r\nI also added unit tests to ensure proper functionality (they failed when I introduced them before adding the fix, you'll have to take my word for it :p)",
    "head_branch": "fix/borked-tick-unit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix `Tick::addTo`/`::between` causing SOE (#8824)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5bad9087c4d6d37665f",
    "number": 8823,
    "body": "This adds a change from upstream which adds new sound methods that take a \"string\" sound. Do we want to just go ahead and deprecate the non-adventure sound methods? Or at least the methods that take a String sound (idk why they didn't use NamespacedKey).\r\n\r\n---\r\n\r\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n22f8c208 SPIGOT-7246: Optimize NamespacedKey construction\r\ne417a748 SPIGOT-7239: Getter/setter for player's enchantment seed\r\n604999b3 SPIGOT-7214: Add CraftChunk and CraftChunkSnapshot contains biome method\r\n33b8fb4b PR-808: Add custom sound parameter option for playSound with entity as source\r\nd1a1b021 SPIGOT-7242: Fix bugged AdvancementDisplayType enum\r\n\r\nCraftBukkit Changes:\r\n39462a898 SPIGOT-7248: Bone mealing grass triggers piston block update detector\r\n7cd3244d3 SPIGOT-7239: Getter/setter for player's enchantment seed\r\n384f31d81 SPIGOT-7214: Add CraftChunk and CraftChunkSnapshot contains biome method\r\n1b7068796 SPIGOT-7244: Unable to open Shulker Inventory when more than 8 blocks away\r\nb1059a82e PR-1134: Add custom sound parameter option for playSound with entity as source",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#8823)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a5bbd9087c4d6d376660",
    "number": 8822,
    "body": "Closes #8571 ",
    "head_branch": "feature/bodyYaw-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Entity Body Yaw API (#8822)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a5bcd9087c4d6d376661",
    "number": 8820,
    "body": "Actually force open an enchanting menu at the location if force is true.\r\n\r\n---\r\nFixes https://github.com/PaperMC/Paper/issues/8818",
    "head_branch": "fix/force-enchantment-table",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix force-opening enchantment tables (#8820)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5bdd9087c4d6d376662",
    "number": 8816,
    "body": "This adds API to force a projectile to hit a provided entity. Example usage could be if you have a player disguised as another entity, you could simulate an arrow colliding with the (fake) entity hitbox. \r\n\r\nSimply teleporting projectiles does not suffice - it is buggy both visually and physically (they can become stuck in your hitbox), and you have to edit the velocity to force it to hit the entity which is not great for preserving damage.\r\n\r\nI edited the existing \"More Projectile API\" patch, I wasn't sure whether I should make a new patch or not.",
    "head_branch": "projectile-hit-simulation-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add projectile hit simulation API (#8816)\n\nThis adds API to force a projectile to hit a provided entity. Example usage could be if you have a player disguised as another entity, you could simulate an arrow colliding with the (fake) entity hitbox."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a5bed9087c4d6d376663",
    "number": 8815,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\nab8ace685 SPIGOT-7236: Bone meal doesn't increase use statistic 7dcb59b8e Avoid switch on material in previous commit\r\n\r\nSpigot Changes:\r\n19641c75 SPIGOT-7235: World.Spigot#strikeLightningEffect doesn't do anything\r\n\r\n\r\n---\r\nRemoves a patch which fixed something upstream just fixed themselves.",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit/Spigot) (#8815)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\nab8ace685 SPIGOT-7236: Bone meal doesn't increase use statistic\r\n7dcb59b8e Avoid switch on material in previous commit\r\n\r\nSpigot Changes:\r\n19641c75 SPIGOT-7235: World.Spigot#strikeLightningEffect doesn't do anything"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5bfd9087c4d6d376664",
    "number": 8812,
    "body": "This adds a check to the offline-mode warning to see if Velocity is enabled. If it is enabled then it warns the user to make sure to secure their server and links to the Velocity documentation on that.\r\n\r\nAttempt 2 since I had no idea about the branch name requirement. ",
    "head_branch": "feat/velocity-in-offline-mode-msg",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Modify offline mode warning to include Velocity line (#8812)\n\nThis adds a check to the offline-mode warning to see if Velocity is enabled. If it is enabled then it warns the user to make sure to secure their server and links to the Velocity documentation on that."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5c0d9087c4d6d376665",
    "number": 8811,
    "body": "This adds a check to the offline-mode warning to see if Velocity is enabled. If it is enabled then it warns the user to make sure to secure their server and links to the Velocity documentation on that. ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5c1d9087c4d6d376666",
    "number": 8807,
    "body": "This creates a problem with Paper's item serialization api where deserialized items, which are internally created as a CraftItemStack, will be completely lost if #setAmount(0) is invoked (since the underlying handle is set to null), while a regular Bukkit ItemStack\r\nsimply sets the amount field to zero, retaining the item's data.\r\n\r\nVanilla treats items with zero amounts the same as items with less than zero amounts, so this code doesn't create a problem with operations on the vanilla ItemStack.\r\n\r\nAlso switches the item/entity serialization apis over to dataconverter rather than dfu\r\n\r\nthe following code will not add an item to an inventory prior to this patch but now works properly\r\n```java\r\n    final ItemStack first = new ItemStack(Material.DIAMOND_HELMET);\r\n    ItemStack stack = Bukkit.getUnsafe().deserializeItem(Bukkit.getUnsafe().serializeItem(first));\r\n\r\n    ItemStack clone = stack.clone();\r\n    clone.setAmount(0);\r\n\r\n    clone.setAmount(stack.getAmount());\r\n    player.getInventory().addItem(clone);\r\n```\r\n\r\ncc @Spottedleaf ",
    "head_branch": "fix/item-clone",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove CraftItemStack#setAmount null assignment (#8807)\n\nThis creates a problem with Paper's item serialization\r\napi where deserialized items, which are internally\r\ncreated as a CraftItemStack, will be completely lost if\r\n#setAmount(0) is invoked (since the underlying handle\r\nis set to null), while a regular Bukkit ItemStack\r\nsimply sets the amount field to zero, retaining the\r\nitem's data.\r\n\r\nVanilla treats items with zero amounts the same as items\r\nwith less than zero amounts, so this code doesn't create\r\na problem with operations on the vanilla ItemStack."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5c2d9087c4d6d376667",
    "number": 8805,
    "body": "Adds methods to get and set whether a player has seen the win screen before.",
    "head_branch": "win-screen-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "More Win Screen API (#8805)\n\nAdds methods to get and set whether a player has seen the win screen before."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a5c3d9087c4d6d376668",
    "number": 8804,
    "body": "Adds methods to ring a bell and to query its state",
    "head_branch": "bell-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5c4d9087c4d6d376669",
    "number": 8802,
    "body": "Adds a method that allows plugins to show the end poem to the player.\r\nBy using a resource pack plugin developers can change the content of the poem to something different.",
    "head_branch": "end-poem-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Win Screen API (#8802)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a5c5d9087c4d6d37666a",
    "number": 8801,
    "body": "Adds all not deprecated methods from CreatureSpawner to SpawnerMinecart\r\nAdds the SpawnerHolder interface for the common methods of CreatureSpawner and SpawnerMinecart (simmilar to how CommandBlockHolder is the superinterface for CommandBlock and CommandMinecart)\r\n\r\nThis is my first pull request ever, so feedback is highly appreciated :)\r\n![2023-01-20_23 11 23](https://user-images.githubusercontent.com/68807218/213815495-b786a046-0c20-46bb-9d14-c10d645003dd.png)\r\n",
    "head_branch": "spawner-minecart-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5c6d9087c4d6d37666b",
    "number": 8800,
    "body": "Adds `Player#sendEquipmentChange(LivingEntity, Map<EquipementSlot, ItemStack>)`, this is useful as the current method only changes one slot, but the underlaying packet takes a list of pairs, which means using the existing method you might need to send 6 packets when it can be done in one.",
    "head_branch": "SendEquipmentChange_Map",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Player#sendEquipmentChange(Map) API (#8800)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a5c7d9087c4d6d37666c",
    "number": 8799,
    "body": "**Changes**\r\n* Removes code duplication from `obfuscateLayer`\r\n* Adds a 3rd engine mode (layered obfuscation), this mode works the same as engine mode 2, but instead of randomizing every block, only randomizes blocks [per chunk layer](https://github.com/DrexHD/AntiXray/blob/1.19.3/stable/media/enginemode-3.png). This helps a lot with chunk packet compression and can reduce the network load when joining by a factor of ~2 (from very basic testing)\r\n\r\n**Testing**\r\nThe tests have been run on a plain new paper server by joining three times in the same spot in spawn chunks. After every test, the server has been rebooted, and these results have shown to be reproducible. \r\nResults: [imgur](https://imgur.com/a/CmJDzcq)",
    "head_branch": "feature/antixray_layer_obfuscation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add AntiXray layered obfuscation mode (#8799)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5c8d9087c4d6d37666d",
    "number": 8798,
    "body": "Fixes #8797 \r\n\r\nAn arbitrary-ish number of 1024 was chosen for the bounded queue size.\r\nThe asyncExecutor in MCUtil was left unbounded.",
    "head_branch": "fix/8797",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5cad9087c4d6d37666e",
    "number": 8795,
    "body": "Currently `PiglinBarterEvent` is documented as `can be triggered by a piglin picking up an item that's on its bartering list.`, but it's fired when the barter is complete, right before the items are dropped.\r\nI went with the generic `Called when X` format most events use, let me know if it should include anything else.",
    "head_branch": "Fix_PiglinBarterEvent_JavaDoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Fix PiglinBarterEvent JavaDoc (#8795)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a5cbd9087c4d6d37666f",
    "number": 8793,
    "body": "Currently, ItemStack#displayName will return the item's display name but with brackets added and with a hover event added. This pull request adds a method named \"hoverName\" that will return the item's display name exactly how it looks when hovering over the item (just the name, without brackets or hover events). The displayName method actually internally calls the NMS getHoverName method to apply the brackets and events to, so this pull request helps expose the hovername of the item.",
    "head_branch": "feat/hovername-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5ccd9087c4d6d376670",
    "number": 8792,
    "body": "`CraftItemStack#getEnchantmentLevel` and `CraftItemMeta#getEnchantLevel` behave differently, which breaks compatibility when the Bukkit Enchantment registry doesn't match the internal NMS enchantment registry. \r\n\r\nI've discussed this in the discord, but I will elaborate here. I understand an objection made by mbaxter, that quote: \"You are deliberately ignoring that this would be implicit acceptance of maintaining support for a previously unsupported custom enchantments setup, in perpetuity.\"\r\n\r\nHowever, I posit three counter-arguments to this:\r\n\r\nFirst is the argument of maintenance of a previously unsupported setup. While it's true that paper doesn't officially support registering custom enchantments to the API, it's also well known that many plugin developers do this. That, in itself, doesn't constitute an argument - after all, it was an unsupported method, however, the problem is the indefinite maintenance of supporting this. I argue that there is essentially zero maintenance required if this PR is merged. In order for this pull request to require maintenance in any subsequent version, Mojang would have to completely rewrite how enchantments are stored in item NBT, breaking every enchanted item that has ever been made. It would be the first change to this system since enchantments were added to the game, and I would argue that it's fair to say that this will not happen. It's not worth worrying about future changes to a system that in all likelihood will not change.\r\n\r\nNext, I want to mention the net benefit this would give to server owners and plugin developers. There are many plugins that register custom enchantments to the API, whether it be to apply a glow effect to items, or to have full custom enchantment systems. While I understand that the natural reply to this would be 'Just use PDC', this wouldn't add a glow to items, and it would break cross-plugin compatibility where plugins can naturally integrate with each other's custom enchantments simply by doing `Enchantment.getByKey(NamespacedKey.minecraft(String));` (as they have done since 1.13, over 4 years ago). It would break years of existing compatibility between plugins, and would (and currently does) cause a headache to server owners.\r\n\r\nAnd on a more API-centric note, because of how it is written currently, ItemStack#getEnchantmentLevel does not function the same as ItemMeta#getEnchantLevel. Calling the method on ItemMeta works as intended, returning the level of whatever enchantment is on the item. However, calling it on ItemStack (or specifically CraftItemStack) returns the level of whatever enchantment is on the item, if and only if the enchantment is also registered via NMS into the Registry, and if the enchantment is either an instance of `EnchantmentWrapper` or `CraftEnchantment`. I understand a reasonable objection to this would be 'Why not register into NMS if it's such a problem?' but this causes many problems with natural generation, client incompatibility, et cetera.\r\n\r\nI completely understand why you may object to this on the grounds of principle. However, the maintenance requirements are slim to none, it would improve the developer experience and fix plugin incompatibilities that have been generated by updating the CraftItemStack code, it would fix API inconsistency, and most importantly, it would ease the lives of thousands of server owners that have seemingly bizarre bugs caused by this.\r\n\r\nPS: In order to completely remove the chance of there any maintenance obligation whatsoever, this change could simply be\r\n```java\r\nreturn getEnchantments(this.handle).getOrDefault(ench, 0);\r\n```\r\nhowever you could argue that this would have (albeit microscopic) performance implications where the loop isn't returned from as soon as the enchantment is found. In order to sidestep this potential issue, I've submitted a more optimised version in this PR.",
    "head_branch": "fix-cis-cim-inconsistency",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed CraftItemStack/CraftItemMeta enchantment level inconsistency (#8792)\n\nCo-authored-by: Nassim Jahnke <nassim@njahnke.dev>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5cdd9087c4d6d376671",
    "number": 8791,
    "body": "`CraftItemStack#getEnchantmentLevel` and `CraftItemMeta#getEnchantLevel` behave differently, which breaks compatibility when the Bukkit Enchantment registry doesn't match the internal NMS enchantment registry. \r\n\r\nI've discussed this in the discord, but I will elaborate here. I understand an objection made by mbaxter, that quote: \"You are deliberately ignoring that this would be implicit acceptance of maintaining support for a previously unsupported custom enchantments setup, in perpetuity.\"\r\n\r\nHowever, I posit three counter-arguments to this:\r\n\r\nFirst is the argument of maintenance of a previously unsupported setup. While it's true that paper doesn't officially support registering custom enchantments to the API, it's also well known that many plugin developers do this. That, in itself, doesn't constitute an argument - after all, it was an unsupported method, however, the problem is the indefinite maintenance of supporting this. I argue that there is essentially zero maintenance required if this PR is merged. In order for this pull request to require maintenance in any subsequent version, Mojang would have to completely rewrite how enchantments are stored in item NBT, breaking every enchanted item that has ever been made. It would be the first change to this system since enchantments were added to the game, and I would argue that it's fair to say that this will not happen. It's not worth worrying about future changes to a system that in all likelihood will not change.\r\n\r\nNext, I want to mention the net benefit this would give to server owners and plugin developers. There are many plugins that register custom enchantments to the API, whether it be to apply a glow effect to items, or to have full custom enchantment systems. While I understand that the natural reply to this would be 'Just use PDC', this wouldn't add a glow to items, and it would break cross-plugin compatibility where plugins can naturally integrate with each other's custom enchantments simply by doing `Enchantment.getByKey(NamespacedKey.minecraft(String));` (as they have done since 1.13, over 4 years ago). It would break years of existing compatibility between plugins, and would (and currently does) cause a headache to server owners.\r\n\r\nAnd on a more API-centric note, because of how it is written currently, ItemStack#getEnchantmentLevel does not function the same as ItemMeta#getEnchantLevel. Calling the method on ItemMeta works as intended, returning the level of whatever enchantment is on the item. However, calling it on ItemStack (or specifically CraftItemStack) returns the level of whatever enchantment is on the item, if and only if the enchantment is also registered via NMS into the Registry, and if the enchantment is either an instance of `EnchantmentWrapper` or `CraftEnchantment`. I understand a reasonable objection to this would be 'Why not register into NMS if it's such a problem?' but this causes many problems with natural generation, client incompatibility, et cetera.\r\n\r\nI completely understand why you may object to this on the grounds of principle. However, the maintenance requirements are slim to none, it would improve the developer experience and fix plugin incompatibilities that have been generated by updating the CraftItemStack code, it would fix API inconsistency, and most importantly, it would ease the lives of thousands of server owners that have seemingly bizarre bugs caused by this.\r\n\r\nPS: In order to completely remove the chance of there any maintenance obligation whatsoever, this change could simply be\r\n```java\r\nreturn getEnchantments(this.handle).getOrDefault(ench, 0);\r\n```\r\nhowever you could argue that this would have (albeit microscopic) performance implications where the loop isn't returned from as soon as the enchantment is found. In order to sidestep this potential issue, I've submitted a more optimised version in this PR.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5ced9087c4d6d376672",
    "number": 8790,
    "body": "A new Location object is already created every time this event is called.  Micro opt but it's in a hot path \r\n\r\n<img width=\"659\" alt=\"PreCreatureSpawnEvent\" src=\"https://user-images.githubusercontent.com/111554242/212557936-de6a451a-2d8c-48c7-897f-4b4f65e92371.png\">",
    "head_branch": "remove-clone",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't clone location in PreCreatureSpawnEvent (#8790)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5cfd9087c4d6d376673",
    "number": 8789,
    "body": "This PR depends on https://github.com/PaperMC/Paper/pull/8108/. Owen said \"Feel free to open a draft PR with all of this\", so I did it. This is a draft PR and is highly WIP, but I appreciate any feedback on this. \r\n\r\n### Lifecycle API reasons\r\nAside from the early plugin initialization we also need a system to be able to control stages *when* we mutate various states of a server. Mainly, by \"states\" I mean various stages of the registry system initialization. Since the 1.19.3 update the whole registry system became even more complex, development in this PR also aims to cover those stages in a nice and understandable way for a plugin developer to interact with, and cover them for the future APIs which need to mutate registries in order to make their stuff work. Porting the bukkit event system in those early stages of the initialization is bad and too hacky. We don't even need a *complete* event system for such purposes, because we don't want to be able to cancel those stages and we need to keep it simple.\r\n\r\n### Registry API reasons\r\nMinecraft becomes more data-driven. Nowadays, there are datapacks which allow to register custom biomes, dimension types, dimensions, and all this content synchronizes with clients joining a server. In the 1.19.3 version Mojang made large changes to this system to make feature flags possible. But, unfortunately, Bukkit has never been a platform intended for APIs adding game content, and when Mojang allowed to do such things, Bukkit wasn't ready for such changes and a lot of API functionality was thrown away. So, this API is intended to fill that gap, and provide registry abstractions in a maintainable and fancy to use way. As we can see, Mojang actively develops this system and many new content they make relies on it, and we can no longer ignore its existence.\r\n\r\n### Lifecycle API main concepts\r\nThere is a new `io.papermc.paper.lifecycle` package where the API is located. The main component is `LifecyclePoint` which represents some point in a server initialization and allows user to schedule their functionality on them. There are two types of them: `SingleEnter` and `MultiEnter`. The first one is executed *only once* during the whole server runtime and it errors if a user attempts to schedule something after that point of initialization has reached. (i.e. static registries initialization, `WorldStem` initialization, `MinecraftServer` ) The second one is execute more than one time. (i.e. Datapack reloading)\r\n\r\n### Notes\r\n* All implementations of `LifecyclePoint` are thread-safe, (using atomic classes) because we mess around with both main and server threads, or user may schedule from other threads.\r\n* `Consumer<C>` are stored as one large linked consumer in the each `LifecyclePoint` (every new passed consumer merges with the global one), because it's the simplest way of storing and entering it. If there are some disadvantages I'll make it use some collection.\r\n\r\n### TODO\r\n- [x] Make basic lifecycle event system.\r\n- [x] Make a system for the elegant NMS to API and vice versa conversion.\r\n- [x] Implement Registry, WritableRegistry, ResourceKey in the API.\r\n- [x] Figure out what to do with the Monad-like API design for the lifecycle event subscription / handling.\r\n- [ ] Figure out what to do with `org.bukkit.Registry`?\r\n- [x] Implement RegistryAccess, LayeredRegistryAccess in the API, figure out how to deal with RegistryLayers.\r\n- [x] Figure out how to deal with types / access for registries in the API.\r\n- [ ] Make more LifecyclePoints for the LayeredRegistryAccess initialization in `WorldLoader`.\r\n- [ ] Figure out what to do with worlds in bukkit API, implement LevelStem registry to the API.\r\n- [ ] Implement more Resource / Datapack stuff in the API.\r\n- [ ] Implement FeatureFlags in the API.\r\n- [ ] Implement Tags and TagKeys system for the Registry API.\r\n- [x] Implement a smart way to deal with Bukkit's enums for making future APIs.\r\n- [ ] Figure out what to do with an API for allowing modifying values right before their registration. (i.e. Existing entities properties modification)\r\n- [ ] Make LifecyclePoints for more places.\r\n- [ ] Discuss exception handling policy for the lifecycle api.\r\n- [ ] Discuss allowing plugins to have datapacks inside their `resources`\r\n- [ ] Registry (de-)serialization API?\r\n- [ ] Document everything, make unit tests, final clean up.",
    "head_branch": "denery-plugin-work",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5d0d9087c4d6d376674",
    "number": 8786,
    "body": "This was inadvertently dropped from the timings patch while being updated for 1.19.3, causing all entities to appear as \"custom\" in timings reports",
    "head_branch": "timings-entity-id",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix entity types not appearing in timings (#8786)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5d1d9087c4d6d376675",
    "number": 8782,
    "body": "These patches aim to expose the new player listing features present in 1.19.3; the implementation is not complete as it does not account for certain states.\r\n\r\nFor the implementation to be \"complete\" there needs to be discussion on potential API behavioral changes to what currently exist; along with more API to cover what was changed or removed.\r\n\r\nThis PR simply exposes the new API as-is and readies for the following changes.",
    "head_branch": "feature/player-listing-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Player listing API (#8782)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a5d2d9087c4d6d376676",
    "number": 8781,
    "body": "Adds a way to set entity's pose.\r\nFixed pose can be changed/reset only via another API call.\r\n(my take on #7318 since it was closed))\r\n\r\nResolves #7016.",
    "head_branch": "poses",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expand Pose API (#8781)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a5d3d9087c4d6d376677",
    "number": 8780,
    "body": "The EntityResurrectEvent logic is supposed to locate a totem of undying in any of the interaction slots of the player inventory and then, if the called EntityResurrectEvent is not cancelled, shrink that item by 1, usually reducing it to zero.\r\n\r\nFor this, the logic iterates over the items in the interaction slots and breaks out the loop if a totem of undying was found. However, even if no totem of undying was found, the iteration item stack variable remains as a refernce to the last interaction slot probed.\r\n\r\nPlugins uncancelling a EntityResurrectEvent, which is published pre-cancelled to listeners if no totem of undying could be found, would hence cause the server logic to shrink completely unrelated items found in, at the writing of this patch, the players off hand slot.\r\n\r\nThis patch corrects this behaviour by only shrinking the item if a totem of undying was found and the event was called uncancelled.",
    "head_branch": "bugfix/entity-ressurect-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Correctly shrink items during EntityResurrectEvent (#8780)\n\nThe EntityResurrectEvent logic is supposed to locate a totem of undying\r\nin any of the interaction slots of the player inventory and then, if the\r\ncalled EntityResurrectEvent is not cancelled, shrink that item by 1,\r\nusually reducing it to zero.\r\n\r\nFor this, the logic iterates over the items in the interaction slots and\r\nbreaks out the loop if a totem of undying was found.\r\nHowever, even if no totem of undying was found, the iteration item stack\r\nvariable remains as a refernce to the last interaction slot probed.\r\n\r\nPlugins uncancelling a EntityResurrectEvent, which is published\r\npre-cancelled to listeners if no totem of undying could be found,\r\nwould hence cause the server logic to shrink completely unrelated items\r\nfound in, at the writing of this patch, the players off hand slot.\r\n\r\nThis patch corrects this behaviour by only shrinking the item if a totem\r\nof undying was found and the event was called uncancelled."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5d4d9087c4d6d376678",
    "number": 8779,
    "body": "Tested to work:\r\n\r\nhttps://github.com/jpenilla/better-fabric-console/pull/18\r\nhttps://github.com/jpenilla/better-fabric-console/pull/19",
    "head_branch": "auto-close-prs-from-master",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[ci skip] Automatically close PRs from master branches on opening (#8779)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5d5d9087c4d6d376679",
    "number": 8778,
    "body": "\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-8778.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/504209152.zip)",
    "head_branch": "ppc64le/sqlite",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5d6d9087c4d6d37667a",
    "number": 8777,
    "body": "Aims to resolve #8776 \r\n",
    "head_branch": "feature/fix-chat-visibility",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix player chat messages from vanished players resulting in kicks (#8777)\n\nCo-authored-by: Nassim Jahnke <nassim@njahnke.dev>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5d7d9087c4d6d37667b",
    "number": 8775,
    "body": "Removed 0956-Return-0-by-default-for-FireworkMeta Patch because it was fixed upstream.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5d8d9087c4d6d37667c",
    "number": 8773,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8772",
    "head_branch": "fix/player-info-join",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use single player info update packet on join (#8773)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5d9d9087c4d6d37667d",
    "number": 8768,
    "body": "Fixes #8763\r\n\r\nMy previous fix changed items from always being active to only being active during ticks in which they aren't necessarily moved.\r\n\r\nAs tickCount is incremented before calling tick(), `!((tickCount + id) % 4 == c) && (tickCount + id + 1) % 4 == 0` must be true to be active (first condition) and moved based on the tick (second condition). This is not the case for c = 3 (which was chosen in the initial patch and correct in the old place), therefore I propose to just use 0 here.\r\n\r\nI wasn't able to reproduce the mentioned issue anymore with this change.",
    "head_branch": "fix/8763",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix items never falling after being on ground (#8768)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5dad9087c4d6d37667e",
    "number": 8767,
    "body": "Fixes MC-258535\r\nFixes https://github.com/PaperMC/Paper/issues/8735\r\n\r\n----\r\nIf we wanted to restrict the fix to those specific cases, I could add the override to `IndirectEntityDamageSource` which is the only `EntityDamageSource` type which has the `setScalesWithDifficulty()` method called.",
    "head_branch": "fix/MC-258535",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix some explosion damage not scaling with difficulty (#8767)\n\nFixes https://github.com/PaperMC/Paper/issues/8735"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5dbd9087c4d6d37667f",
    "number": 8766,
    "body": "The undeprecated, newly named item flag should be part of the enum with the old, now-deprecated name being the public static final field. I tested this with a spigot plugin compiled to use `ItemFlag.HIDE_POTION_EFFECTS` and it worked fine without any bytecode rewriting. I assume that's because enum entries are pretty much equivalent to public static final fields. So just switching the names around shouldn't cause any ABI/API problems.",
    "head_branch": "fix/item-flag-rename",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5dcd9087c4d6d376680",
    "number": 8765,
    "body": null,
    "head_branch": "itemflag",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Replace ItemFlag.HIDE_POTION_EFFECTS (#8765)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a5ddd9087c4d6d376681",
    "number": 8762,
    "body": "With the recent bugfix that enabled papers custom lootable options to effect minecarts with chests, a new bug surfanced.\r\n\r\nThe logic on both chest boats and minecarts that was responsible for persisting the lootables (specifically the replenishment times) to the entities nbt were calling to PaperLootableInventoryData#loadNbt method, resulting in no data being actually persisted.\r\n\r\nThis commit fixes said issue by properly calling the saveNbt method instead, writing the paper lootable data into the compound tag.\r\n\r\nSee: #8580\r\nResolves: #8758",
    "head_branch": "bugfix/lootable-on-entities",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Persist paper lootable on entities (#8762)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5ded9087c4d6d376682",
    "number": 8756,
    "body": "Fixes #8686.\r\n\r\nThe new check is based on https://github.com/PaperMC/Paper/pull/2872#issuecomment-575857230.\r\nI tested the changes with the world from https://github.com/PaperMC/Paper/pull/6290 and it seems to work.\r\n\r\nThe change caused a conflict with the EAR patch, I hope I got that right.",
    "head_branch": "fix/8686",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix operator precedence bug (#8756)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5dfd9087c4d6d376683",
    "number": 8755,
    "body": "Adds a `proxies.velocity.secret-file` option, making it possible to specify a file containing the velocity secret file instead of including it in the yml. Similarly to https://github.com/PaperMC/Velocity/pull/712.\r\n\r\nShould work nicely, here's a couple of questions:\r\n- Should I bump the config version to 29?\r\n- Should we somehow deprecate the previous option? For now, I've added a log warning for it.\r\n\r\nFixes https://github.com/PaperMC/Paper/issues/6332",
    "head_branch": "velocity-secret-file",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5e0d9087c4d6d376684",
    "number": 8754,
    "body": "[This fix](https://github.com/PaperMC/Paper/pull/4611) did not include the while(notEmpty) look to drop all of the result stack. If you try to create a recipe with an output stack greater than 10, it might not produce all of it.",
    "head_branch": "fix/campfire-recipes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix campfire recipes not always outputting full result (#8754)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5e1d9087c4d6d376685",
    "number": 8753,
    "body": "All of the \"furnace\" events are actually for Furnaces, Blast Furnaces, and Smokers. The event name doesn't really show that, so the javadoc for the event should mention it.",
    "head_branch": "fix/furnace-event-javadocs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Clarify where furnace-related events are called (#8753)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a5e2d9087c4d6d376686",
    "number": 8752,
    "body": "Me and many other users of paper are very annoyed by the warning when starting our servers in offline mode\r\nwe all are aware of the possible consequences and therefore using velocity in online mode\r\nthe message is very useless with a server behind velocity because players can't exploit this without knowing the security key\r\nThis patch will not print the warning when velocity is enabled and set to online",
    "head_branch": "origin",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5e3d9087c4d6d376687",
    "number": 8750,
    "body": "When modifying a trade using setTrade() in PlayerPurchaseEvent or PlayerTradeEvent, the result item of that new trade is completely ignored. With this change, you can easily manipulate villager trading from within these events, because it sets the clicked item (which is the result item in MerchantResultSlot) to the new result item.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5e4d9087c4d6d376688",
    "number": 8744,
    "body": "This fix is trivial. fixes #8283 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix warden spawn reason from DEFAULT to NATURAL (#8744)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5e5d9087c4d6d376689",
    "number": 8740,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nd352d965 SPIGOT-7221: Add Enemy (Entity) interface\r\n\r\nCraftBukkit Changes:\r\n397c5557c SPIGOT-7221: Add Enemy (Entity) interface\r\na0d3dfaf2 PR-1129: Fix state corruption while handling explosion damage on EntityComplexPart\r\nd67777f8b SPIGOT-7218: Player's outer layer of skin disappears after respawn",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#8740)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nd352d965 SPIGOT-7221: Add Enemy (Entity) interface\r\n\r\nCraftBukkit Changes:\r\n397c5557c SPIGOT-7221: Add Enemy (Entity) interface\r\na0d3dfaf2 PR-1129: Fix state corruption while handling explosion damage on EntityComplexPart\r\nd67777f8b SPIGOT-7218: Player's outer layer of skin disappears after respawn"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a5e6d9087c4d6d37668a",
    "number": 8739,
    "body": "Fixes a boolean invert issue. The config option of treasure maps in the inverse of the boolean skipExistingStructures when searching for structures. ",
    "head_branch": "fix/treasure-map-config",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix treasure map config for loot tables (#8739)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5e7d9087c4d6d37668b",
    "number": 8738,
    "body": "Fixes #8736",
    "head_branch": "fix-fireworkmeta",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Return 0 if null for FireworkMeta (#8738)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5e8d9087c4d6d37668c",
    "number": 8734,
    "body": "That's some stuff i have forgot in my last pr. I'm not really sure if this patch shouldn't be merged with the upstream patch",
    "head_branch": "fix/converttimejavadoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Fix hoglin conversionTime javadoc (#8734)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a5e9d9087c4d6d37668d",
    "number": 8733,
    "body": "Closes #8038 \r\nVanilla doesn't check if the target box is empty (a dot) only if the source box is empty to then fallback to the default max distance (-2 here) but paper do. But even if the marker has an empty box, the distance must still be calculated between where the marker has been default placed (one block above) and the top of the block (where the dot will collide) which is -1",
    "head_branch": "fix/emptyaabb",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix collision between AABB and a dot (#8733)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5ead9087c4d6d37668e",
    "number": 8727,
    "body": "Changes handling of the global sounds. Previously the global sound gamerule wasn't used correctly resulting in unexpected behavior (fixes #8726, fixes #9182 ). This changes the `spigot.yml` behavior of setting the sound radius for the 3 events to 0. Now, if set to 0, the default radius is used (64). The behavior is now controlled by the gamerule, only using the configuration for the actual radius, not whether to enable it or not.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-8727.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/1137137340.zip)",
    "head_branch": "fix/global-sound-gamerule",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix global sound event gamerule not being respected (#8727)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5ecd9087c4d6d37668f",
    "number": 8722,
    "body": "I thought the WHOLE reason we were able to change the return value of `Player#getPlayerProfile` but not `OfflinePlayer#getPlayerProfile` was because the \"owner\" would always be offline player (since that's where the method is, on the OfflinePlayer interface). But apparently you also need to check for the owner being Player.\r\n\r\nFixes https://github.com/PaperMC/Paper/issues/8720",
    "head_branch": "fix/offline-player-profile-return",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix (again) Player#getPlayerProfile no such method error (#8722)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5ecd9087c4d6d376690",
    "number": 8715,
    "body": "Supersedes https://github.com/PaperMC/Paper/pull/8624\r\n",
    "head_branch": "NonSwag-patches",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Respect SpigotConfig logCommands & fix stopDancing() NPE (#8715)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5edd9087c4d6d376691",
    "number": 8714,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\naef9b6d2 PR-800: Add support for NoteBlock sounds in Skulls\r\n\r\nCraftBukkit Changes:\r\nae8f5fc02 PR-1125: Add support for NoteBlock sounds in Skulls 0a1c89e4b SPIGOT-7212: Allow negative firework power 909a246af SPIGOT-7211: generateTree() with Consumer or Predicate is broken c810c3ed8 Increase outdated build delay",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#8714)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\naef9b6d2 PR-800: Add support for NoteBlock sounds in Skulls\r\n\r\nCraftBukkit Changes:\r\nae8f5fc02 PR-1125: Add support for NoteBlock sounds in Skulls\r\n0a1c89e4b SPIGOT-7212: Allow negative firework power\r\n909a246af SPIGOT-7211: generateTree() with Consumer or Predicate is broken\r\nc810c3ed8 Increase outdated build delay"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a5efd9087c4d6d376692",
    "number": 8713,
    "body": "When the EntityChangeBlockEvent is canceled for the waxed copper, the honeycomb (in survival) will shrink only clientside but not serverside.",
    "head_branch": "fix/desyncchangeevnt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix desync of honeycomb when the event is canceled (#8713)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5f0d9087c4d6d376693",
    "number": 8712,
    "body": "When the conversion start from a hoglin to a zoglin (not in the nether) and if the EntityTransformEvent is cancelled, the event spam. This behavior isn't the same for the piglin for example. It's also the only conversion which has not the transform/spawn reason defined.",
    "head_branch": "fix/transformevnt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Avoid to spam the transform event for hoglin->zoglin conversion (#8712)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5f0d9087c4d6d376694",
    "number": 8711,
    "body": "Very much WIP, but is the coming of future sponge-inspired ways to manipulate items/entity data.\r\n\r\nThe current approach to edit items has poorly aged, and in general, creates a lot of issues due to it acting as its own implementation. This PR aims to prevent the API from interacting with items unless necessary, preventing unnecessary parsing and in general useless reparsing for each item.\r\n\r\nItemMeta is still very important as it allows plugin developers to have a more friendly way of editing items. In this PR, it is proposed that we add a new property API that allows developers to ALSO directly edit values themselves. This area of the API would be marked as experimental and in general, would be subject to changes if Mojang changes nbt tags. \r\n\r\n(WIP WIP WIP)\r\n```java\r\nItemStack itemstack = ItemStack.of(Material.STONE);\r\nitemstack.getPropertyHolder().set(ItemProperties.DAMAGE, 0);\r\n\r\n// Same thing as (but more performant since it directly edits the item)\r\nItemMeta meta = itemstack.getItemMeta(); // Clones the item nbt compound to a meta wrapper\r\nmeta.setDamage(0); // modifies that wrapped meta\r\nitemstack.setItemMeta(meta); // overrides the wrapped meta\r\n```\r\n\r\nUsing the property system, you can directly modify a value without needing to do any sort of cloning, it's a 1:1 operation. ItemMeta has also been improved in this, as now it will instead act as a **wrapper** that uses this item property api internally. This means that the behavior of the property/meta api will be consistent. For legacy reasons item meta will still need to be cloned, so it will have a small overhead as it clones the underlying NBT tag. After that, however, it is still much faster and prevents parsing the entire item.\r\n\r\nFuture goals:\r\n- [ ] Figure out what to do about things that need api only itemstacks.\r\n- [ ] Use this same property system to allow for entity nbt manipulation. (For example, making a zombie a baby in spawn egg)\r\n- [ ] Thoroughly test\r\n- [ ] Finalize design points\r\n- [ ] Always use a compound based stack\r\n- [ ] ItemStack interface maybe?\r\n\r\nFixes:\r\n#4708 \r\n#5071 \r\n#6719 \r\n#6689\r\n#6437 \r\n#6414\r\n#7747\r\n#7335\r\n\r\nTo fix:\r\nhttps://github.com/PaperMC/Paper/issues/4787\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-8711.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/1140490339.zip)",
    "head_branch": "paper-item-progress",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5f1d9087c4d6d376695",
    "number": 8710,
    "body": "\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-8710.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/485802101.zip)",
    "head_branch": "fix/offline-player-return-type",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix OfflinePlayer getPlayerProfile return type (#8710)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a5f3d9087c4d6d376696",
    "number": 8707,
    "body": "There are a few things this fixes. Craftbukkit attempted to move the logic regarding the `spawn-monsters`, `spawn-npcs` and `spawn-animals` server.properties settings to the logic for calling the entity spawn events. This broke quite a bit with regards to vanilla behavior.\r\n\r\n1. The `spawn-monsters` setting should only affect natural spawns, not any other method of spawning (summon command, spawn eggs).\r\n2. The `spawn-animals` setting should only affect instances of `nms.Animal` and `nms.WaterAnimal`, not `nms.AbstractGolem`.\r\n3. Fixes an issue with entity loading due to chunk loading not respecting the per-world nature of `spawn-animals`",
    "head_branch": "fix/spawn-mob-settings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5f4d9087c4d6d376697",
    "number": 8705,
    "body": "The PlayerPostRespawnEvent doesn't support the respawn anchor and doesn't have the respawn flag. This also fix a bug where isBedSpawn is true for respawn anchor.",
    "head_branch": "feat/respawnevents",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5f5d9087c4d6d376698",
    "number": 8703,
    "body": "I want to create multiple Merchant with MerchantRecipes based on player permissions. The idea is: Store a List of MerchantRecipes and create a new Merchant for every player with custom uses.\r\n\r\nIt's not possible to clone MerchantRecipes so modifying the stored recipes will modify the results for other players too.",
    "head_branch": "feat/merchantclone",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "MerchantRecipe: add copy constructor (#8703)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5f6d9087c4d6d376699",
    "number": 8696,
    "body": "Call the EntityChangeBlockEvent for mud transform and ender eye with ender portal",
    "head_branch": "feat/missingchangeevnt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing EntityChangeBlockEvent (#8696)\n\n* Add missing EntityChangeBlockEvent\r\n\r\n* Fix duplicate empty bottle when canceled for creative player\r\n\r\n* Use native update impl instead of craftbukkit -> nms"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5f7d9087c4d6d37669a",
    "number": 8695,
    "body": "Closes #8689 \r\nAvoid to desync the player metadata on respawn and world teleport\r\nBefore the 1.19.3 the metadata was copied with the respawn packet but now it's not always the case (notably at the death)\r\nAnd since upstream doesn't recreate the player instance, the metadata aren't dirty anymore here and so aren't resend to the client later. This emulate the behavior of like if the player was recreated with the default values to avoid a total reset at the respawn packet.",
    "head_branch": "fix/desyncmetadatarespawn",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5f8d9087c4d6d37669b",
    "number": 8694,
    "body": "Closes #8691. JD feels a bit short but I didn't have any other ideas on what to put there.",
    "head_branch": "feat/expose-signedmessage",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expose signed message in chat events (#8694)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a5f9d9087c4d6d37669c",
    "number": 8693,
    "body": "https://discord.com/channels/289587909051416579/925530366192779286/1053580611467612170",
    "head_branch": "fix-readme-badge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Fix readme badge (#8693)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5fad9087c4d6d37669d",
    "number": 8690,
    "body": "Mainly fixes handling for ForwardingAudience.Singles",
    "head_branch": "chatprocessor-fixes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "ChatProcessor fixes (#8690)\n\nFixes handling for `ForwardingAudience.Single` and passes the signed message to non-native `Audience` types"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5fbd9087c4d6d37669e",
    "number": 8687,
    "body": "I think it's fine to use reference equality to check if the block entity does exist in the world at that location. I did some testing and it worked, bypassing the event if that block entity wasn't the same one in the world. But I don't know if there is some state the world could be in where they'd be different.\r\n\r\nFixes https://github.com/PaperMC/Paper/issues/8685",
    "head_branch": "fix/lock-checks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't call lock check event if the block entity doesn't exist (#8687)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5fcd9087c4d6d37669f",
    "number": 8684,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8681",
    "head_branch": "fix/Player#chat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Player#chat for 1.19.3 (#8684)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5fdd9087c4d6d3766a0",
    "number": 8683,
    "body": "https://bstats.org/plugin/server-implementation/Paper/580#paper_version was reporting \"unknown\" for a long while ever since spigot's classloading changes.\r\n\r\nThis changes it to `1.19.3-R0.2-SNAPSHOT_git-Paper-<build/hash>`. I'm not sure this is great? But we need some way to add the mc version number in there since paper's build number resets with each major version update.",
    "head_branch": "fix/metrics",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix metrics reporting unknown paper version (#8683)\n\nCo-authored-by: BillyGalbreath <Blake.Galbreath@GMail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5fed9087c4d6d3766a1",
    "number": 8680,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n2ed3e3e6e SPIGOT-7210: Fix structures in custom worlds\r\n585ab5ba1 SPIGOT-7207: WorldCreator creates world as super flat even when normal is specified",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit) (#8680)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n2ed3e3e6e SPIGOT-7210: Fix structures in custom worlds\r\n585ab5ba1 SPIGOT-7207: WorldCreator creates world as super flat even when normal is specified"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a5ffd9087c4d6d3766a2",
    "number": 8679,
    "body": "`getTo` on `PlayerPortalEvent` and `EntityPortalEvent` was very confusing, as it is **not** the destination location for the nether portal cause, but rather the starting point for the search for a matching portal in the other dimension.\r\n\r\nAlso added a way to differentiate between portal types in the EntityPortalEvent as it does not have the TeleportCause enum.",
    "head_branch": "fix/portal-event-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve PortalEvents (#8679)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a600d9087c4d6d3766a3",
    "number": 8678,
    "body": "replaced by ProjectileHitEvent\r\npropagated the cancellation of the legacy event\r\nto the modern one\r\n\r\nReplaces https://github.com/PaperMC/Paper/pull/4959",
    "head_branch": "fix/deprecate-ProjectileCollideEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Deprecate ProjectileCollideEvent (#8678)\n\nreplaced by ProjectileHitEvent\r\npropagated the cancellation of the legacy event\r\nto the modern one"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a601d9087c4d6d3766a4",
    "number": 8677,
    "body": "Upstream did not account for different hands when storing the breed item for later use in the event. Also they only stored a reference to the stack, not a copy so if the stack changed after love mode was started, the breed item in the event also changed. Also in several places, the breed item was stored after it was decreased by one to consume the item.",
    "head_branch": "fix/EntityBreedEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix several issues with EntityBreedEvent (#8677)\n\nUpstream did not account for different hands when storing\r\nthe breed item for later use in the event. Also they only\r\nstored a reference to the stack, not a copy so if the stack\r\nchanged after love mode was started, the breed item in the event\r\nalso changed. Also in several places, the breed item was stored after\r\nit was decreased by one to consume the item."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a602d9087c4d6d3766a5",
    "number": 8675,
    "body": "Fixes an NPE when the server tries to find an inventory creator instance based on the InventoryType. Now it throws an IllegalArgumentException like other un-creatable inventories.\r\n\r\nI think this is the correct solution, not to add inventory creator instances to the CraftInventoryCreator but I could be wrong. The chiseled bookshelf is a tile entity which technically would be easy to add one for.",
    "head_branch": "fix/create-inv-NPE",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a603d9087c4d6d3766a6",
    "number": 8674,
    "body": "New explosion block damage types (because of new gamerules) need to be taken into account.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-8674.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/476783845.zip)",
    "head_branch": "fix/explosion-yield",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix explosion yield with new gamerules (#8674)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a604d9087c4d6d3766a7",
    "number": 8673,
    "body": "Previously, if you had a file inside the root `data/` folder of a datapack, it was ignored. Now it just assumes they are all directories and so loading a datapack with that spits out about 50 stacktraces. Just need to log the error less and earlier.\r\n\r\nAlso changes the legacy mats to a warning not an error. We get too many \"reports\" of an error because it was error in the logs.\r\n\r\n\r\nDo we have any other patches that either remove bad logged errors or any other place we want to change this stuff? I feel like we have more, but I just can't remember them.",
    "head_branch": "fix/logging-and-errors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve some logging and errors (#8673)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a605d9087c4d6d3766a8",
    "number": 8672,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8671",
    "head_branch": "fix/dep-warning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove deprecated event warning for inventory result event (#8672)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a606d9087c4d6d3766a9",
    "number": 8669,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a607d9087c4d6d3766aa",
    "number": 8666,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8664\r\n\r\nTested and it works\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-8666.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/474865055.zip)",
    "head_branch": "fix/custom-worlds",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a608d9087c4d6d3766ab",
    "number": 8665,
    "body": "Probably in the future this should be expanded to get all itemstacks in a specific category. It's not perfect system since ItemStacks are in categories now, so also a method to check if an ItemStack is in a specific category would be nice.\r\n\r\n_____\r\nFixes #8770 ",
    "head_branch": "fix/creativecategory-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a609d9087c4d6d3766ac",
    "number": 8663,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nf50ad1f8 PR-798: Add PrepareGrindstoneEvent and refactor related events to use PrepareInventoryResultEvent 0cac7963 SPIGOT-7204: Add TeleportCause#DISMOUNT\r\nb4dd47b0 SPIGOT-7202: Deprecate removed door effects\r\n\r\nCraftBukkit Changes:\r\nab1586c2f PR-1123: Add PrepareGrindstoneEvent\r\nb402824ea SPIGOT-7204: Add TeleportCause#DISMOUNT\r\n06a6a1012 PR-1121: Add unit test for spawn egg meta c18668be3 SPIGOT-7192: Call PlayerInteractEvent with Action.LEFT_CLICK_AIR if the entity interacted is hidden to the player 47124f639 Increase outdated build delay\r\n645993470 SPIGOT-7201: Spawner ItemMeta not working as expected",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#8663)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nf50ad1f8 PR-798: Add PrepareGrindstoneEvent and refactor related events to use PrepareInventoryResultEvent\r\n0cac7963 SPIGOT-7204: Add TeleportCause#DISMOUNT\r\nb4dd47b0 SPIGOT-7202: Deprecate removed door effects\r\n\r\nCraftBukkit Changes:\r\nab1586c2f PR-1123: Add PrepareGrindstoneEvent\r\nb402824ea SPIGOT-7204: Add TeleportCause#DISMOUNT\r\n06a6a1012 PR-1121: Add unit test for spawn egg meta\r\nc18668be3 SPIGOT-7192: Call PlayerInteractEvent with Action.LEFT_CLICK_AIR if the entity interacted is hidden to the player\r\n47124f639 Increase outdated build delay\r\n645993470 SPIGOT-7201: Spawner ItemMeta not working as expected"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a60ad9087c4d6d3766ad",
    "number": 8662,
    "body": "Prevents NPE when `World#locateNearestBiome` fails to find a biome:\r\n```java\r\n[16:54:39 WARN]: [Paper-Test-Plugin] Task #2 for Paper-Test-Plugin v1.0.0-SNAPSHOT generated an exception\r\njava.lang.NullPointerException: Cannot invoke \"com.mojang.datafixers.util.Pair.getFirst()\" because \"pair\" is null\r\n        at org.bukkit.craftbukkit.CraftWorld.locateNearestBiome(CraftWorld.java:2166) ~[main/:?]\r\n        at org.bukkit.craftbukkit.CraftWorld.locateNearestBiome(CraftWorld.java:2159) ~[main/:?]\r\n        at io.papermc.paper.testplugin.TestPlugin.lambda$onChat$0(TestPlugin.java:22) ~[test-plugin-1.0.0-SNAPSHOT.jar:?]\r\n        at org.bukkit.craftbukkit.scheduler.CraftTask.run(CraftTask.java:101) ~[main/:?]\r\n        at org.bukkit.craftbukkit.scheduler.CraftScheduler.mainThreadHeartbeat(CraftScheduler.java:483) ~[main/:?]\r\n        at net.minecraft.server.MinecraftServer.tickChildren(MinecraftServer.java:1473) ~[main/:?]\r\n        at net.minecraft.server.dedicated.DedicatedServer.tickChildren(DedicatedServer.java:440) ~[main/:?]\r\n        at net.minecraft.server.MinecraftServer.tickServer(MinecraftServer.java:1397) ~[main/:?]\r\n        at net.minecraft.server.MinecraftServer.runServer(MinecraftServer.java:1173) ~[main/:?]\r\n        at net.minecraft.server.MinecraftServer.lambda$spin$0(MinecraftServer.java:316) ~[main/:?]\r\n        at java.lang.Thread.run(Thread.java:833) ~[?:?]\r\n```",
    "head_branch": "fix-npe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix locateNearestBiome nullability check (#8662)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a60bd9087c4d6d3766ae",
    "number": 8660,
    "body": "```[tasklist]\n- [ ] https://github.com/PaperMC/Paper/pull/8653\n- [ ] https://github.com/PaperMC/Paper/pull/8524\n- [ ] https://github.com/PaperMC/Paper/pull/8525\n- [ ] https://github.com/PaperMC/Paper/pull/10101\n- [ ] https://github.com/PaperMC/Paper/pull/8657\n- [ ] https://github.com/PaperMC/Paper/pull/8518\n- [ ] https://github.com/PaperMC/Paper/pull/8658\n```\n\nJust implemented for the empty bucket DispenseItemBehavior for now. Really needs the above PRs to setup for all of them in a consistent and easy to understand manner. See the javadocs for ConsumeAction and ReplaceAction for a description of what they do.",
    "head_branch": "feature/expand-dispense-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a60dd9087c4d6d3766af",
    "number": 8659,
    "body": "Intellij keeps making this change automatically, I think its missing a newline? But github usually shows those visually, so idk what it is.",
    "head_branch": "fix/missing-newline",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] add missing final newline (#8659)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a60ed9087c4d6d3766b0",
    "number": 8658,
    "body": "There are several places where the potentially changed item from the BlockDispenseEvent wasn't used in later dispenser logic (in a way that had an effect).\r\n\r\nExample: If you changed the spawn egg in the BlockDispenseEvent, the spawned mob didn't change, and bucket dispenser behavior has some issues like for mob buckets, the nbt would be transferred over to the spawned entity from the original stack, not the stack set in the event.",
    "head_branch": "fix/missed-changed-items-dispense-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Properly track the changed item from dispense events (#8658)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a60fd9087c4d6d3766b1",
    "number": 8657,
    "body": "The BlockDispenseEvent was incorrectly called in two specific situations, when bonemealing an invalid location, like a solid block or when trying to use flint & steel in an incorrect way. This doesn't match up with the rest of the calls of BlockDispenseEvent in which something always happens, and in other cases where something *might* happen, that logic is checked before calling the event.",
    "head_branch": "fix/bad-dispense-events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a610d9087c4d6d3766b2",
    "number": 8656,
    "body": "Fix death message containing empty string\r\nRelated issues: #8654",
    "head_branch": "fix/death-message",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix death message containing empty string (#8656)\n\nResolves: #8654"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a611d9087c4d6d3766b3",
    "number": 8653,
    "body": "The javadocs for BlockDispenseEvent suggest the ItemStack is a single item which is being dispensed. Before this fix, sometimes it was the whole stack before a single item had been taken. This fixes that so the stack size is always 1.",
    "head_branch": "fix/dispense-event-stack-size",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix inconsistencies in dispense events regarding stack size (#8653)\n\n* Fix inconsistencies in dispense events regarding stack size\r\n\r\nThe javadocs for BlockDispenseEvent suggest the ItemStack is a single\r\nitem which is being dispensed. Before this fix, sometimes it was the whole\r\nstack before a single item had been taken. This fixes that so the stack size\r\nis always 1.\r\n\r\n* Ensure stack size is correct in minecart and armor dispense behaviors"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a612d9087c4d6d3766b4",
    "number": 8652,
    "body": null,
    "head_branch": "fix/fire-charge-not-consumed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix fire charge not being consumed igniting a creeper (#8652)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a613d9087c4d6d3766b5",
    "number": 8651,
    "body": "Brings the Tag class up to date with current vanilla tags. Also adds a test to check that it is always up to date in the future.\r\n\r\nSomething this PR doesn't do, is address the 6 \"Experimental\" tags that are \"null\" if the datapack isn't enabled. I'm not sure what to do about that.",
    "head_branch": "fix/outdated-vanilla-tags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a614d9087c4d6d3766b6",
    "number": 8648,
    "body": "Vanilla removed the Block non-flammable wood tag, but not the item.",
    "head_branch": "fix/add-missing-vanilla-tag",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add the non-flammable wood item tag (#8648)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a615d9087c4d6d3766b7",
    "number": 8647,
    "body": null,
    "head_branch": "fix/horse-equipment-losing-nbt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix items equipped on AbstractHorse losing NBT (#8647)\n\n* Fix items equipped on AbstractHorse losing NBT\r\n\r\n* squash later mc fix into vanilla patch"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a616d9087c4d6d3766b8",
    "number": 8646,
    "body": "[As pointed out by @Fejm](https://github.com/PaperMC/Paper/commit/d8cf30dfd17ad718900b571cae4e8dbec74f1878#r92720856)",
    "head_branch": "fix/chat-preview-removal-version",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Correct chat preview removal version in javadoc (#8646)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a617d9087c4d6d3766b9",
    "number": 8645,
    "body": null,
    "head_branch": "fix/deprecate-isPreview",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Deprecate isPreview method in decorate events (#8645)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a618d9087c4d6d3766ba",
    "number": 8644,
    "body": "Deprecates methods that return location, but left methods with Location parameters as undeprecated because Location implements Position, and would therefore require a cast to not use the deprecated methods (if you still used a Location).\r\n\r\nAlso made PaperPath a static class instead of inner class. This will be useful later for a certain memory key which PaperPath is the type we would use for it (can't use it if its an inner class in PaperPathfinder).",
    "head_branch": "feature/position-in-pathfinder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a619d9087c4d6d3766bb",
    "number": 8643,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/9477\r\n\r\nWell this change certainly got more complicated. In order to deprecate and add replacements for the methods on Server/Bukkit that used the deprecated StructureType, I had to completely switch to mockito for testing. Otherwise there's a static initializer loop created. Apparently the default heap sizes then weren't enough for the tests, so I bumped those up (this seems weird, maybe I did something wrong with mockito).",
    "head_branch": "fix/structure-type",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Deprecate and replace methods using deprecated StructureType (#8643)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a61ad9087c4d6d3766bc",
    "number": 8642,
    "body": "So this is an API break, but I really don't see any way around it. In `StructuresLocateEvent` there was a list of configured structures. That list was mutable, and the event supported removing structures from it. I didn't see a good way to keep that mutable functionality when replacing that list with the list of upstream's StructureType.",
    "head_branch": "fix/structure-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Replace ConfiguredStructure api with Structure (#8642)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a61bd9087c4d6d3766bd",
    "number": 8641,
    "body": "In vanilla, if any of the empty (non-water) lingering potions is thrown, no area effect cloud is created. Upstream breaks this, and spawns an empty one anyways. This PR adds a check to see if the area effect cloud would be empty BEFORE the LingeringPotionSplashEvent event and after and if both are true, doesn't spawn the entity.",
    "head_branch": "fix/empty-lingering-effect-clouds",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix empty effect clouds from lingering potions (#8641)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a61cd9087c4d6d3766be",
    "number": 8639,
    "body": "The chunk section is found using the y absolute position but a (wrong) biome relative position has been passed.\r\nThis result that the biome getter can only retrieve data from -16 to 79 pos for the full range (-64 -> 320 by default), so the biome is found from a shifted chunk section (from 3 to 8, ignoring the others 18 sections).\r\nFixes SPIGOT-7188: https://hub.spigotmc.org/jira/browse/SPIGOT-7188\r\nI have also correct some related javadoc",
    "head_branch": "fix/biomegetterchunksnapshot",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix chunksnapshot biome getter (#8639)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a61dd9087c4d6d3766bf",
    "number": 8638,
    "body": null,
    "head_branch": "feat/camelregainheal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add eating regain reason for Camels (#8638)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a61ed9087c4d6d3766c0",
    "number": 8637,
    "body": "Closes #8626 \r\nThis also cancel the glass sound\r\nand include the lingering event to avoid inconsistencies",
    "head_branch": "fix/splashevntparticle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't show particles when splash events are canceled (#8637)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a61fd9087c4d6d3766c1",
    "number": 8636,
    "body": "Adds EntityReceiveGameEvent and expands BlockReceiveGameEvent\r\n\r\nBlockReceiveGameEvent was not called for all block listeners, and was called for entity listeners. This separates them out into two events and adds missing event calls. It also adds more api for bypassing line of sight/occlusion checks (not sure what to call that).\r\n\r\nStill needs testing, but wanted to open this while I did that.",
    "head_branch": "feature/better-game-event-events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a620d9087c4d6d3766c2",
    "number": 8635,
    "body": null,
    "head_branch": "fix/golem-spawn-reasons",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Properly identify golem spawn reason (#8635)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a621d9087c4d6d3766c3",
    "number": 8634,
    "body": "Tested by placing a sculk shrieker and sculk sensor down in a 1.19.2 world, then upgrading the world to 1.19.3\r\n\r\nI verified that upgrading the world without this change did log the error, and with this change, no error was logged.\r\n\r\n`new VibrationSelector()` is the default value for newly created VibrationListeners so it should work as the default here.",
    "head_branch": "fix/codec-spam",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix MapLike Codec missing key 'selector' (#8634)\n\n* Fix MapLike Codec missing key 'selector'\r\n\r\n* Make sure a new instance is created each time"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a622d9087c4d6d3766c4",
    "number": 8632,
    "body": "Currently, trying to set one of ArmorStandMeta's flags (invisible, small, etc.) to false with the API does nothing. This PR fixes that.\r\n\r\nOne issue with this solution is that explicitly setting flags to false now saves the flags to item, which is technically useless data, so perhaps something like this for the flag handlers in `#applyToItem` might be better:\r\n```java\r\nif (this.bool != null) {\r\n  if (this.bool) {\r\n    this.entityTag.putBoolean(BOOL.NBT, this.bool);\r\n  else {\r\n    this.entityTag.remove(BOOL.NBT);\r\n  }\r\n}\r\n```\r\nBut I'm not sure if that might cause issues with compatibility.",
    "head_branch": "fix-armor-stand-meta",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix ArmorStandMeta not applying false flags (#8632)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a623d9087c4d6d3766c5",
    "number": 8631,
    "body": "https://github.com/PaperMC/Paper/pull/8578 added a check to prevent trying to build Paper from a downloaded ZIP snapshot of the repo instead of an actual clone. This breaks building a Paperweight fork using submodules because `.git` is then a file (with `gitdir: ../../.git/modules/work/Paper` inside) instead of a directory.\r\n\r\nThis PR replaces the directory check by a simple exists check, which still prevents building from a ZIP, but now allows building from a submodule too.",
    "head_branch": "git-repo-check-paperweight",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Allow .git to be a regular file (#8631)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a624d9087c4d6d3766c6",
    "number": 8630,
    "body": null,
    "head_branch": "fix/EntityTargetLivingEntityEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Readd improve/fix EntityTargetLivingEntityEvent (#8630)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a625d9087c4d6d3766c7",
    "number": 8629,
    "body": null,
    "head_branch": "fix/missing-entity-inside-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add new 1.19.3 fires of EntityInsideBlockEvent (#8629)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a626d9087c4d6d3766c8",
    "number": 8628,
    "body": "I think this covers everything relating to API which is locked behind non-default feature flags",
    "head_branch": "feature/mark-experimental-api",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Mark experimental api as such (#8628)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a627d9087c4d6d3766c9",
    "number": 8627,
    "body": "Camel had a pose time value that when tested appeared to not really work well, so I skipped adding that.",
    "head_branch": "the-more-entity-api-the-better",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Rabbit API (#8627)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a628d9087c4d6d3766ca",
    "number": 8625,
    "body": "Unsure if we should have deleteMessage implemented either, but this is a baseline and contains no signed message sending support.",
    "head_branch": "dev/adventure-1.19.3",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update adventure (#8625)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a629d9087c4d6d3766cb",
    "number": 8624,
    "body": "Fixed the option \"spigot.yml > commands > log\" so commands won't be logged into the console anymore if the option is disabled.\r\nThe respective code in ServerGamePacketListenerImpl was missing a simple check whether the option is disabled.",
    "head_branch": "origin",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a62ad9087c4d6d3766cc",
    "number": 8623,
    "body": "There's some inconsistencies between the EntityChangeBlockEvent and the BlockDestroyEvent. The destroy event has always the right final type but the change block event has always air even for watterlogged blocks. This fix this behavior only for possible case to avoid a bigger patch. I have maybe missed some of them.",
    "head_branch": "fix/entitychangeblockevnt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Take in account waterlogged block for the event (#8623)\n\nThere's some inconsistencies between the EntityChangeBlockEvent and the BlockDestroyEvent. The destroy event has always the right final type but the change block event has always air even for waterlogged blocks. This fix this behavior only for possible case to avoid a bigger patch."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a62bd9087c4d6d3766cd",
    "number": 8622,
    "body": "Still wip, not sure if we want to extend PotionSplashEvent or just ProjectileHitEvent... also not sure if we want our own handlerlist for this event or to use the old one for some sort of backwards compat",
    "head_branch": "splash-water-bottle-event",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Account for splash water bottles now extinguishing entities (#8622)\n\n* Account for splash water bottles now extinguishing entities\r\n\r\n* improvements and javadocs\r\n\r\n* reorder patches\r\n\r\n* rename event to WaterBottleSplashEvent\r\n\r\nCo-authored-by: Jake Potrebic <jake.m.potrebic@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a62dd9087c4d6d3766ce",
    "number": 8619,
    "body": null,
    "head_branch": "is-this-thing-on_",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Deprecate PluginLoader and impls (#8619)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a62ed9087c4d6d3766cf",
    "number": 8618,
    "body": null,
    "head_branch": "1.19.3/registry-fun",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "More 1.19.3 registry fun (#8618)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a62fd9087c4d6d3766d0",
    "number": 8617,
    "body": "Makes the refresh method now use ALL values instead of just non default value.",
    "head_branch": "dev/fix-desync",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Properly resend entities (#8617)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a630d9087c4d6d3766d1",
    "number": 8616,
    "body": "Because of course they forgot...\r\n\r\n(#7896 pt. 2)",
    "head_branch": "1.19.3/upstream-moment",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing spawn eggs: Electric Boogaloo (#8616)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a631d9087c4d6d3766d2",
    "number": 8615,
    "body": null,
    "head_branch": "1.19.3/compile-issues",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix a handful of 1.19.3 compile issues (#8615)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a632d9087c4d6d3766d3",
    "number": 8613,
    "body": "Fixed Issue with Allay#stopDancing causing a null pointer exception if no jukebox was set before\r\n\r\nSorry for the second pr, I messed something up\r\nHere is the original request (just for reference)\r\nhttps://github.com/PaperMC/Paper/pull/8607",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a633d9087c4d6d3766d4",
    "number": 8612,
    "body": "Cats are nearsighted, so it doesn't exactly make sense to have them be able to look at their owner who is very far away.",
    "head_branch": "fix/overattached-cats",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Limit pet look distance (#8612)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a634d9087c4d6d3766d5",
    "number": 8609,
    "body": "Not sure what to call one of the interfaces... right now its called `IdkWhat`. There are also probably some methods on nms FluidState we can put on FluidData, just not sure which ones so this PR is blocked until there is some feedback on that. Also methods for getting a FluidData need to be added to RegionAccessor\r\n\r\n```[tasklist]\r\n### TODO\r\n- [x] https://github.com/PaperMC/Paper/pull/8608\r\n- [ ] Rename `IdkWhat` to something good\r\n- [ ] Add more methods to FluidData that point to methods on FluidState\r\n- [ ] add FluidData methods to RegionAccessor\r\n- [x] ~~Can you actually \"set\" fluid states? If not, remove the set methods, only have get methods.~~ (Nope, can't set, removed set methods)\r\n```",
    "head_branch": "feature/FluidState-API",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a635d9087c4d6d3766d6",
    "number": 8608,
    "body": "If you used a datapack to create a fluid tag containing the fluid `minecraft:empty`, you would have a random \"null\" in the bukkit set of tagged items. Also the CraftMagicNumbers map FLUID_MATERIALS map was mapping nms Fluids.EMPTY to null, probably an unexpected thing.\r\n\r\nYou will definitely need this to finally add FluidState API.",
    "head_branch": "fix/missing-fluid",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing Fluid type (#8608)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a636d9087c4d6d3766d7",
    "number": 8607,
    "body": "Fixed Issue with Allay#stopDancing causing a null pointer exception if no jukebox was set before",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a637d9087c4d6d3766d8",
    "number": 8606,
    "body": "Include the previous spawn angle in the SpawnChangeEvent like spigot, actually it's always zero.",
    "head_branch": "fix/spawnchangeevnt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Include previous spawn angle in SpawnChangeEvent (#8606)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a638d9087c4d6d3766d9",
    "number": 8605,
    "body": "Addressing remarks of @electronicboy in https://github.com/PaperMC/Paper/pull/4722#issuecomment-1336274155\r\n\r\n",
    "head_branch": "feature/reinvent-track-entity-cancellability",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add cancellability to PlayerTrackEntityEvent (#8605)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a639d9087c4d6d3766da",
    "number": 8604,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n38866413 SPIGOT-6765: Pass WorldInfo, Random and coordinates to ChunkGenerator should methods\r\n\r\nCraftBukkit Changes:\r\nf3dab3a48 SPIGOT-7191: TNT minecart explosions crash the server\r\nb5aa0bed9 SPIGOT-7184: ExplosionPrimeEvent not called for ExplosiveMinecart\r\ne7aab5493 SPIGOT-6765: Pass WorldInfo, Random and coordinates to ChunkGenerator should methods",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#8604)\n\nUpstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n38866413 SPIGOT-6765: Pass WorldInfo, Random and coordinates to ChunkGenerator should methods\r\n\r\nCraftBukkit Changes:\r\nf3dab3a48 SPIGOT-7191: TNT minecart explosions crash the server\r\nb5aa0bed9 SPIGOT-7184: ExplosionPrimeEvent not called for ExplosiveMinecart\r\ne7aab5493 SPIGOT-6765: Pass WorldInfo, Random and coordinates to ChunkGenerator should methods"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a63ad9087c4d6d3766db",
    "number": 8602,
    "body": "When a command function tried to parse a command above it's configured permission level (see `function-permission-level` in `server.properties), it would throw a UOE due to a badly structured conditional in CommandSourceStack from upstream. Now instead of a UOE it throws an unknown command error, as it would in vanilla on an invalid command.",
    "head_branch": "fix/cmd-func-perm-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a63bd9087c4d6d3766dc",
    "number": 8600,
    "body": "Returning SUCCESS here will send an animate packet to all players tracking the \"using\" player which will be a duplicate packet because the server has already sent one in response to the serverbound arm swing packet. Verified the duplicate packet behavior on 1.19 using pakkit and a vanilla server vs a 1.19 paper server.",
    "head_branch": "fix/duplicate-animate-packet",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove duplicate animate packet for records (#8600)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a63cd9087c4d6d3766dd",
    "number": 8599,
    "body": null,
    "head_branch": "fix/pr-label",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] couple more fixes for build pr jar label (#8599)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a63dd9087c4d6d3766de",
    "number": 8597,
    "body": "Closes #8596  \r\nThe effective modifier for the mangrove propagule is between 1 and 700 percent.",
    "head_branch": "feat/mangrovegrowth",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use the spigot config for mangrove propagule / torchflower growth (#8597)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a63ed9087c4d6d3766df",
    "number": 8595,
    "body": "This is a second-try / recreation of #4064 . In this PR I renamed the method to `getAsyncExecutor`, for symmetry with `getMainThreadExecutor`. These methods work nicely in tandem. Their use is particularly relevant when working with CompletableFuture.\r\n\r\nOne could argue they are not strictly counterparts and therefore should be named differently. The existing method `getMainThreadExecutor` provides pure convenience and nothing else. In contrast, `getAsyncExecutor` adds a new mechanism for using the common thread pool that circumvents traditional tasks; it does not merely redirect calls to `runTaskAsynchronously`. However, I do not find this argument sufficient justification for creating asymmetrical method names considering their most obvious use-case -- interoperation with CompletableFuture and other task-chaining APIs -- will be the same.",
    "head_branch": "async-executor-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a63fd9087c4d6d3766e0",
    "number": 8593,
    "body": "This clarifies which repositories should be operated upon when editing existing patches, as this was previously unclear.\r\n\r\n(Wording to be confirmed)",
    "head_branch": "docs/improve-contributing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a640d9087c4d6d3766e1",
    "number": 8592,
    "body": "File gets dump in the `debug` dir similar to chunk debug\r\n\r\n<!-- bot: paperclip-pr-build -->\r\n---\r\nDownload the paperclip jar for this pull request: [paper-8592.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/451990382.zip)",
    "head_branch": "dumplisteners-improvements",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add `/paper dumplisteners tofile` and increase detail of command output (#8592)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a641d9087c4d6d3766e2",
    "number": 8591,
    "body": null,
    "head_branch": "fix/pr-action",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "pr command action fixes (#8591)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a642d9087c4d6d3766e3",
    "number": 8590,
    "body": "Fix https://github.com/PaperMC/Paper/issues/8540\r\n\r\nThe range for survival is actually 3 blocks.\r\nThis also fixes the issue where if you look \"nearby\" an entity it will incorrectly assume you\r\nare attacking that entity.\r\n\r\nTODO: Properly have check for blocks/entities separate \r\n",
    "head_branch": "fix-interact-rouge-armswings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a643d9087c4d6d3766e4",
    "number": 8589,
    "body": "I made changes to the error messages. Since I'm not a native English speaker, I'm not sure if this sentence makes sense.",
    "head_branch": "edit-message-zip-warning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a644d9087c4d6d3766e5",
    "number": 8585,
    "body": "Vanilla's getPlayerByUUID only can return player's in the level, but due to an optimization by paper, this changed to return any player with the UUID across all levels. This can lead to unexpected side effects for sculk events and tamable animal owners. \r\n\r\nThis PR adds a level check to paper's optimization and replaces some uses of getPlayerByUUID with a getGlobalPlayerByUUID where you do want to return any matching player on the whole server.",
    "head_branch": "fix/getPlayerByUUID",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fixes potential issues arising from optimizing getPlayerByUUID (#8585)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a645d9087c4d6d3766e6",
    "number": 8584,
    "body": null,
    "head_branch": "feature/advancement-display-name",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add displayName methods for advancements (#8584)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a646d9087c4d6d3766e7",
    "number": 8583,
    "body": "## How this works\r\nAdd a label called whatever we want (workflows are configured for one named `build-pr-jar`).\r\n\r\nWhen the label is added and anytime the PR is updated a paperclip artifact will be built and uploaded. \r\n\r\nThen at the bottom of the PR text body (what you are reading now), a link will be automatically added and updated to download the jar. \r\n\r\nThis is entirely optional to use as we don't want every PR to have a paperclip jar, but if we want to provide an easy way to test changes, this is it.\r\n\r\n### Drawbacks (but not really)\r\nThe `pr_comment` workflow will run for every `build` workflow that runs. But nothing will happen as most `build` workflows either aren't tied to a PR or don't have an uploaded artifact attached to them. I can't find a way to skip the `pr_comment` workflow.\r\n\r\nI also tried having 1 workflow to also handle the comment's BUT, I can't figure out a way to get the artifact ID within the currently running workflow. The artifact doesn't seem to exist in the api until the workflow has ended. Hence the need for a second workflow to interact with the first's artifact.",
    "head_branch": "feature/pr-build-label",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Rework workflows to support optional paperclip build (#8583)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a647d9087c4d6d3766e8",
    "number": 8581,
    "body": "See:\r\nhttps://github.com/PaperMC/Paper/commit/4a3ae595357d8c6c48938d889d199b50f09221e5#r90604930\r\n\r\nFor context",
    "head_branch": "grammar-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a648d9087c4d6d3766e9",
    "number": 8580,
    "body": "Closes #8565.",
    "head_branch": "fix/relooting",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix chest relooting mechanics (#8580)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a649d9087c4d6d3766ea",
    "number": 8579,
    "body": null,
    "head_branch": "cache-resourcelocation-tostring",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a64ad9087c4d6d3766eb",
    "number": 8578,
    "body": null,
    "head_branch": "error-on-zip-download",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[ci skip] Add check for git repo (#8578)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a64bd9087c4d6d3766ec",
    "number": 8577,
    "body": "Trying out a new pattern. Instead of shoving tons of methods into Unsafe, this uses services to interact with nms from a non Craft- extended type.",
    "head_branch": "feature/instrument-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a64cd9087c4d6d3766ed",
    "number": 8576,
    "body": "Redo of #7830 \r\nThe max search distance used to get the closest Poi data on X/Z axis is cubed instead of squared (one time in the parameter and another time in the function) for almost all search.\r\nGenerally this has been hidden by another check that already do a pre distance check between the poi pos and the source pos for individual component but the issue still happens for diagonal distance search.\r\nDiscovered by Samsuik",
    "head_branch": "fix/poisearchdist",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Avoid a cubed max search distance for POIs (#8576)\n\nThe max search distance used to get the closest Poi data on X/Z axis is cubed\r\ninstead of squared (one time in the parameter and another time in the function)\r\nfor almost all search.\r\nGenerally this has been hidden by another check that already does a pre\r\ndistance check between the poi pos and the source pos for individual\r\ncomponent but the issue still happens for diagonal distance search.\r\nDiscovered by Samsuik"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a64dd9087c4d6d3766ee",
    "number": 8575,
    "body": null,
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Add TheFruxz to the license MIT list (#8575)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a64ed9087c4d6d3766ef",
    "number": 8574,
    "body": "This adds the .fleet/ folder to the ignored objects inside the .gitignore",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Add .fleet/ folder to .gitignore (#8574)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a64fd9087c4d6d3766f0",
    "number": 8573,
    "body": "waiting for paperweight 1.3.10",
    "head_branch": "feature/ats-in-patch",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Moving ATs from the at file to individual patches (#8573)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a650d9087c4d6d3766f1",
    "number": 8572,
    "body": "Generally, this API is a bit misleading, \r\n```java\r\nif ((float) this.invulnerableTime > (float) this.invulnerableDuration / 2.0F) { // CraftBukkit - restore use of maxNoDamageTicks\r\n```\r\n\r\nThe invulnerability duration is only considered valid until it reaches the invulnerability duration / 2. \r\nTherefore, the no damage tick actions don't work as expected.\r\nWhen setting it to 20 ticks, the entity will only have an actual invulnerability time frame of 10 ticks due to this invulnerability duration.\r\n\r\nThis adds new methods, which calculate the limit on top of your specified value in order to make it so when you do ``setExactNoDamageTicks(20)``, the entity will actually have 20 ticks and not 10 ticks of invulnerability. \r\n\r\nOld methods:\r\nsetNoDamageTicks(10)\r\ngetNoDamageTicks() -> 10\r\n(getExactNoDamageTicks() will return 0) \r\nBehavior: The entity will have no invulnerability ticks\r\n\r\nNew methods:\r\nsetExactNoDamageTicks(10)\r\ngetExactNoDamageTicks() -> 10\r\n(getNoDamageTicks() will return 20) \r\nBehavior: The entity will have 10 invulnerability ticks\r\n\r\nThis can probably be expanded to the invulnerability duration too, as it's currently divided by 2. But, it's not something I see useful enough and in general could be PRed by someone else.\r\n<!-- bot: paperclip-pr-build -->\r\n---\r\nDownload the paperclip jar for this pull request: [paper-8572.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/449215361.zip)",
    "head_branch": "nodamagetick-util",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a651d9087c4d6d3766f2",
    "number": 8566,
    "body": "**Overview:**\r\nDue to the weakly consistent of ConcurrentLinkedQueue iterator, at some points, packet will be resent twice times or more, causing some weird behaviors (e.g. kicked for illegal movement since the same ClientboundPlayerPositionPacket was sent two times). This changes for the patch add a flag for marking if the packet was consumed to prevent such issue and ensure consistently of the packet queue.\r\n\r\n**Related issue:** \r\nhttps://github.com/PotatoCraft-Studio/QuickShop-Reremake/issues/255\r\nhttps://github.com/Ghost-chu/QuickShop-Hikari/issues/517\r\n\r\n**Related logs (By adding debug log):**\r\nhttps://pastebin.com/eqfsz2kn\r\n\r\n**Paper build for testing (Updated):** \r\nhttps://mega.nz/file/BwA3HC7I#qZgM8b93X0NKiidE3prUFZkg7aqdetgS3jiLgu8r-K4\r\n\r\n**Additional Information:** \r\nSpigot does not have this issue because the original one is using `poll` method, and paper is using `iterator` for anti-xray feature.<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-8566.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/452569175.zip)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix packet duplicating at some points (#8566)\n\nDue to the weakly consistent of ConcurrentLinkedQueue iterator, at some points, packet will be resent twice times or more, causing some weird behaviors (e.g. kicked for illegal movement since the same ClientboundPlayerPositionPacket was sent two times). This changes for the patch add a flag for marking if the packet was consumed to prevent such issue and ensure consistently of the packet queue."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a652d9087c4d6d3766f3",
    "number": 8564,
    "body": "Spigots implementation of the growth modifier boils down to a plain chance for a plant to either grow immediately or to grow a single age value towards its fully grown age.\r\n\r\nThis behaviour is specifically troubling for plants like the cactus or the sugar cane, as they change an unrelated block when growing up (the free air block above their tip). This blocks validity is checked during neighbour updated which are triggered by resetting the previous tip of the plant back to [age=0].\r\n\r\nWith spigots modifier implementation, blocks at the age of zero are able to grow a new block above them however, causing the block change of the previous tip to change a block of age zero to a block of age zero, which does **not** cause a neighbour update as nothing actually changed. This means that the about block is not updated and hence may remain in an otherwise invalid state. (E.g. a cactus block next to a solid block).\r\n\r\nThis commit rewrites the existing spigot growth modifier implementation specifically for the plants that grow new blocks like the cactus or the sugar can block.\r\n\r\nThe modifier provided for the plants is separated into two distinct values. One being the remains after a floored division by 100, e.g. the original modifier without its 10^0 and 10^1 digits, the other the modifier modulo 100.\r\nThe modifier 475 would, for example, be split into a base growth of 4 and a percentage chance of an additional age progression of 75%. This way, on average, the plant would grow 4.75 times as fast as a normal plant, which would only grow a single age per random tick.\r\n\r\nResolves: #8544",
    "head_branch": "bugfix/growing-block-growth-modifier",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a653d9087c4d6d3766f4",
    "number": 8563,
    "body": "Updates yarn param mappings to latest 1.19.2 build.",
    "head_branch": "update-param-mappings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "update yarn param mappings (#8563)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a654d9087c4d6d3766f5",
    "number": 8562,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8558",
    "head_branch": "fix/dragon-boss-event-rename",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "ensure reset EnderDragon boss event name (#8562)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a655d9087c4d6d3766f6",
    "number": 8561,
    "body": "Stops the coordinates of a lodestone compass from being sent to other players, preventing possible base leaks.\r\n\r\nSince the other client doesn't know the position, it'll show the compass in the 'spinning' state, similar to what happens when you use a compass in the nether, as shown in the gif below. Without hide itemmeta enabled the compass just points to the same location as on the screen of the user holding the compass.\r\n\r\n[Click to view gif, it's too large for GH to proxy](https://i.noah.pm/xWg6hF.gif)\r\n\r\nAnother possible solution would be to make the compass point in the general direction of the location, similar to what craftbukkit does for far-away sounds, but this would not only require re-sending the compass quite often, but it would also allow users to triangulate the position the compass is pointing towards.",
    "head_branch": "feat/strip-lodestone-compass",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Strip coordinates from lodestone compasses (#8561)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a657d9087c4d6d3766f7",
    "number": 8560,
    "body": "The modified patch prevents entity loading off the main thread when entities are initially loaded.\r\n\r\nHowever, the initial loading of an entity is not the only time the Entity#readAdditionalSaveData method is called. Commands like /data also invoke the method (through Entity#load) to update an entities data without completely re-creating it.\r\n\r\nThis however breaks with the current patch, as the patch moves parts of the entity lookup for persistent anger deserialisation into the first tick of an entity (which obviously is only called once and hence not re-run when an already ticking entity is modified as laid out above).\r\n\r\nThis change actively runs the now split logic for deserialisation again if the entity has already ticked its first tick. This way, initial deserialisation is still split into one off thread and the first tick parts, but following main thread deserialisations can happen completely inside Entity#readAdditionalSaveData is called.\r\n\r\nResolves: #8556 ",
    "head_branch": "bugfix/deserialise-changed-persistent-anger-post-load",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fully deserialise persistent anger post async load (#8560)\n\nThe modified patch prevents entity loading off the main thread when\r\nentities are initially loaded.\r\n\r\nHowever, the initial loading of an entity is not the only time the\r\nEntity#readAdditionalSaveData method is called. Commands like /data also\r\ninvoke the method (through Entity#load) to update an entities data\r\nwithout completely re-creating it.\r\n\r\nThis however breaks with the current patch, as the patch moves parts of\r\nthe entity lookup for persistent anger deserialisation into the first\r\ntick of an entity (which obviously is only called once and hence not\r\nre-run when an already ticking entity is modified as laid out above).\r\n\r\nThis change actively runs the now split logic for deserialisation again\r\nif the entity has already ticked its first tick. This way, initial\r\ndeserialisation is still split into one off thread and the first tick\r\nparts, but following main thread deserialisations can happen completely\r\ninside Entity#readAdditionalSaveData is called."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a658d9087c4d6d3766f8",
    "number": 8559,
    "body": "Shows the first line of the exception to provide more clarity about what is missing without providing a big scary stacktrace.\r\n\r\n```\r\nSystem Info: Java 17 (OpenJDK 64-Bit Server VM 17.0.1+12) Host: Mac OS X 11.4 (x86_64)\r\nLoading libraries, please wait...\r\n2022-11-11 23:26:47,848 main WARN Advanced terminal features are not available in this environment\r\n[23:26:52 INFO]: Building unoptimized datafixer\r\n[23:26:54 ERROR]: You are using a headless JRE distribution.\r\n[23:26:54 ERROR]: This distribution is missing certain graphic libraries that the Minecraft server needs to function.\r\n[23:26:54 ERROR]: For instructions on how to install the non-headless JRE, see https://docs.papermc.io/misc/java-install\r\n[23:26:54 ERROR]: \r\n[23:26:54 ERROR]: java.lang.UnsatisfiedLinkError: no awt in system library path: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/lib\r\n```",
    "head_branch": "feat/headless-detection-exception",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Show exception when headless JRE detection is triggered (#8559)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a659d9087c4d6d3766f9",
    "number": 8555,
    "body": "Closes #8544 \r\n\r\nThe spigot growth modifier is broken for both sugar cane and cactus and the mentionned issue also happens for\r\nsugar cane but it's more complex to reproduce (basically destroy the water source once placed and observe (vanilla will break the plant but not spigot one)\r\nThe old bahavior can possibly run two roll that also break the percent modifier\r\n\r\nThe new system handle correctly the percent in four stage\r\nWhen modifier = 100: keep vanilla behavior\r\nWhen modifier < 100: gives less chance to the plant to increase its own age\r\nWhen modifer > 100 but < 1600: increase the age by more than one depending on the percent\r\nWhen modifier >= 1600: fast grow, the age will not increase but they can grow directly even for an age smaller than 15\r\nbut to keep this consistent with vanilla we need to include the grow check in the same tick and not one tick after like usually\r\n",
    "head_branch": "fix/spigotgrowth2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a65ad9087c4d6d3766fa",
    "number": 8554,
    "body": "Be able to copy the system flag directly from the chat for server owner\r\nPrint the exception in the logger context and some minor changes",
    "head_branch": "feat/refsyncloadcmd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Sync chunk load command improvements (#8554)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a65bd9087c4d6d3766fb",
    "number": 8553,
    "body": "Closes #8340 \r\nAvoid to let a damage entity source targeting a tnt primed for bukkit event that could cause conflict later\r\nfor all others non entities related damage dealt later (bc of the static field)",
    "head_branch": "fix/bukkitdamage",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Reorder bukkit damage source entity for explosion (#8553)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a65cd9087c4d6d3766fc",
    "number": 8548,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n300e7448f SPIGOT-7179: PortalCreateEvent doesn't fire for players",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit) (#8548)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a65dd9087c4d6d3766fd",
    "number": 8546,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8460. \r\n\r\nThe issue is caused by the `PacketUtils#ensureRunningOnSameThread()` checks in the `ServerGamePacketListenerImpl`. The implementation of `BlockableEventLoop` (which is `MinecraftServer`) inherits `BlockableEventLoop#executeIfPossible(Runnable)` method which is:\r\n```java\r\n    @Override\r\n    public void executeIfPossible(Runnable runnable) {\r\n        if (this.isStopped()) {\r\n            throw new RejectedExecutionException(\"Server already shutting down\");\r\n        } else {\r\n            super.executeIfPossible(runnable);\r\n        }\r\n    }\r\n``` \r\nThe exception is catched in the `Connection#channelRead0(ChannelHandlerContext, Packet)` method and it looks like this:\r\n```java\r\n           try {\r\n                Connection.genericsFtw(packet, this.packetListener);\r\n            } catch (RunningOnDifferentThreadException cancelledpackethandleexception) {\r\n                ;\r\n            } catch (RejectedExecutionException rejectedexecutionexception) { \r\n                // disconnects player if something is handled in the `ServerGamePacketListenerImpl`\r\n                this.disconnect(Component.translatable(\"multiplayer.disconnect.server_shutdown\"));\r\n            } catch (ClassCastException classcastexception) {\r\n                Connection.LOGGER.error(\"Received {} that couldn't be processed\", packet.getClass(), classcastexception);\r\n                this.disconnect(Component.translatable(\"multiplayer.disconnect.invalid_packet\"));\r\n            }\r\n```\r\nAfter the testing (Falling and calling `/stop` command) it worked fine and I got the `Stopping the server` disconnect reason.\r\n```\r\n[01:51:48 INFO]: Player107 issued server command: /stop\r\n[01:51:48 INFO]: [Player107: Stopping the server]\r\n[01:51:48 INFO]: Stopping server\r\n[01:51:48 INFO]: [Paper-Test-Plugin] Disabling Paper-Test-Plugin v1.0.0-SNAPSHOT\r\n[01:51:49 INFO]: Saving players\r\n[01:51:50 INFO]: Player107 lost connection: Server closed\r\n[01:51:50 INFO]: Player107 left the game\r\n[01:51:50 INFO]: Saving worlds\r\n```\r\n(Paper test plugin used `Thread#sleep` in its `#onDisable()` method to make it even clear.)\r\n\r\nThe remaining questions are:\r\n1. Why did Mojang do that check? Maybe there are cases when it is needed.\r\n2. Should we really yeet the usage of `BlockableEventLoop#executeIfpossible(Runnable)` method? It is the only usage of this method.",
    "head_branch": "player-kick-during-shutdown-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix preemptive connection dropping during shutdown process (#8546)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a65ed9087c4d6d3766fe",
    "number": 8545,
    "body": "It is a bug in Minecraft that green markers do not dissappear from maps when they are removed from Item Frame's. This patch fixes this issue. I hope I didn't screw up the formatting of my paper start/ends too badly.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix MC-252817 (green map markers do not dissappear) (#8545)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a65fd9087c4d6d3766ff",
    "number": 8543,
    "body": "OfflinePlayer has a method, getPlayerProfile, that returns the deprecated bukkit PlayerProfile type. This changes that to use our interface which is a subtype of bukkit's. Additionally, to maintain API compatibility, this rewrites plugins still expecting the old type.",
    "head_branch": "fix/offlineplayer-getPlayerProfile",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix OfflinePlayer#getPlayerProfile returning deprecated type (#8543)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a660d9087c4d6d376700",
    "number": 8542,
    "body": null,
    "head_branch": "handle-ldcinsn-getorigorrewrite",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update Commodore modifications (#8542)\n\n* Handle ldc insn for getOriginalOrRewrite in Commodore\r\n\r\n* Remove fastutil rewrite\r\n\r\nIt's no longer relocated upstream"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a661d9087c4d6d376701",
    "number": 8541,
    "body": "Doesn't handle invokedynamic via lambdas, but neither does the rest of Commodore fixes. But I can add that if we think it should.",
    "head_branch": "fix/advancement-display-incompat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Advancement#getDisplay() api break (#8541)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a662d9087c4d6d376702",
    "number": 8539,
    "body": "Uh My friend had just found `// Paper end` in the file to be modified is just mistyped to `// Paper stop`.\r\nIt seems that it is a standard for patched minecraft server and `// Paper stop` just broke this standard.\r\nI have retyped it back.\r\nNot intensively tested on my computer. I don't think changing a comment would break anything.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci-skip] Rename Paper stop tp Paper end. (#8539)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a663d9087c4d6d376703",
    "number": 8534,
    "body": "When using a `TranslatableComponent` in `PlayerDeathEvent#deathMessage` the client should view the rendered translation of the component (assuming the key is registered in the GlobalTranslator).\r\n\r\nCurrently, the component in `PlayerDeathEvent#deathMessage` is converted to a vanilla component and when written to a chat packet, the GlobalTranslator is not utilized (client will only translate keys found in its ResourcePack).\r\n\r\nThat results in the client only seeing the translation key.\r\n\r\nSince this is related to Adventure, I figured I'd use the existing patch, let me know if it needs to be in a separate one.\r\n\r\nHere's a plugin to test.\r\n```java\r\npublic final class TestPlugin extends JavaPlugin implements Listener {\r\n    @Override\r\n    public void onEnable() {\r\n        this.getServer().getPluginManager().registerEvents(this, this);\r\n        TranslationRegistry registry = TranslationRegistry.create(Key.key(\"test\", \"translations\"));\r\n        registry.defaultLocale(Locale.ENGLISH);\r\n        registry.register(\"test.death\", Locale.ENGLISH, new MessageFormat(\"Test translation: {0} died\"));\r\n        GlobalTranslator.translator().addSource(registry);\r\n    }\r\n\r\n    @EventHandler\r\n    public void onDeath(PlayerDeathEvent event) {\r\n        event.deathMessage(Component.translatable(\"test.death\").args(event.getEntity().name()));\r\n    }\r\n}\r\n```",
    "head_branch": "translatable-death-messages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix rendering for translatable death messages (#8534)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a664d9087c4d6d376704",
    "number": 8532,
    "body": "The custom bukkit damage cause MELTING and POISON replace totally the vanilla ones resulting in incompatible vanilla behavior and a non future proof way. For example in vanilla when you throw a potion of poison on a silverfish near stone/infested brick it will destroy the nearby stones, but on paper it doesn't because of the custom poison replacing the magic one (so source == DamageSource.MAGIC become false). Also i know that the shallow clone that bukkit does isn't future proof but since the DamageCause will be deprecated it's not really a problem actually.",
    "head_branch": "fix/baddamage",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a665d9087c4d6d376705",
    "number": 8530,
    "body": "This patch fixed #1887 which was also reported upstream as [SPIGOT-5110](https://hub.spigotmc.org/jira/browse/SPIGOT-5110). Upstream later fixed it [here](https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/c69979247bdae6884d4edf377d485cf88ddfa0f5#nms-patches/net/minecraft/world/entity/monster/EntityZombie.patch).",
    "head_branch": "fix/remove-redudant-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove old redundant fix (#8530)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a666d9087c4d6d376706",
    "number": 8529,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8523. If any other problem with this event will be found I also fix it there.",
    "head_branch": "entitycombustevent-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix EntityCombustEvent cancellation issues (#8529)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a667d9087c4d6d376707",
    "number": 8525,
    "body": "Both wither skulls and carved pumpkins fired a BlockDispenseEvent twice if they didn't spawn a mob.\r\n\r\nThis is possibly a behavior change, but as usual, it's actually a bug fix so the behavior before was wrong.",
    "head_branch": "fix/duplicate-dispense-events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a668d9087c4d6d376708",
    "number": 8524,
    "body": "```java\r\n    @EventHandler\r\n    public void on(BlockDispenseEvent event) {\r\n        final ItemStack stack = event.getItem();\r\n        stack.editMeta(meta -> {\r\n            meta.lore(List.of(Component.text(\"Dispensed at: \" + System.nanoTime())));\r\n        });\r\n        event.setItem(stack);\r\n    }\r\n```\r\n\r\nThis will produce an SO error for lots of equipables, like saddles on pigs, chests on horses, carpets are llamas, mob/player skulls on any mob, and carved pumpkins.\r\n\r\nThis is due to the dispense event logic not properly searching for a replacement dispenser behavior if it detects the item has changed in any way. It needs to properly handle the situation where the replacement behavior is the same as the current behavior.",
    "head_branch": "fix/dispenser-SO-error",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix possible StackOverflowError for some dispenser iteractions (#8524)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a669d9087c4d6d376709",
    "number": 8522,
    "body": "Another solution would be to reorder the rewrites and make the StacktraceDeobfuscator handle extended traces. This is arguably not that important of a fix as only server classes should be getting deobfed, so we can easily deduce that the ?:? with a net.minecraft/com.mojang package means it's a deobfed server class.",
    "head_branch": "fix-source-jar-for-deobfed-traceelements",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a66ad9087c4d6d37670a",
    "number": 8518,
    "body": "This event should be triggered for mud transform, anchor recharge and copper waxing",
    "head_branch": "fix/missingdispevnt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Call missing BlockDispenseEvents (#8518)\n\n* Call missing BlockDispenseEvent\r\n\r\n* Avoid duplicate event\r\n\r\n* Show a single item for event\r\n\r\n* Move glowstone refill event\r\n\r\n* rebased\r\n\r\n---------\r\n\r\nCo-authored-by: Jake Potrebic <jake.m.potrebic@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a66bd9087c4d6d37670b",
    "number": 8517,
    "body": "Had a player report an issue where pumpkins grow insanely quickly. After a quick look at the recent [upstream commit](https://hub.spigotmc.org/stash/projects/SPIGOT/repos/spigot/commits/89741d3e9ff89cb2aa3b2e34a714a3a073b60d95) changing some stuff related to growth modifiers, I noticed they messed up their operation order, causing the division to only apply to the melon modifier (and thus causing way too large values for pumpkins).",
    "head_branch": "fix/sanic-pumpkins",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix pumpkin growth modifier (#8517)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a66cd9087c4d6d37670c",
    "number": 8515,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n9a4de097 SPIGOT-7171: Ability to get the IP/hostname players are requesting status of\r\n\r\nCraftBukkit Changes:\r\nf43634ae4 SPIGOT-7170: Cannot set slots in custom smithing inventory\r\n48f3a2258 SPIGOT-7171: Ability to get the IP/hostname players are requesting status of\r\n30e31b4d1 SPIGOT-7177: Certain blocks don't call BlockCanBuildEvent\r\n982364797 SPIGOT-7174: Avoid adding air to CraftMetaBundle\r\n\r\nSpigot Changes:\r\n6198b5ae PR-122: Add missing parentheses to pumpkin and melon growth modifier\r\n1aec3fc1 Rebuild patches",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#8515)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n9a4de097 SPIGOT-7171: Ability to get the IP/hostname players are requesting status of\r\n\r\nCraftBukkit Changes:\r\nf43634ae4 SPIGOT-7170: Cannot set slots in custom smithing inventory\r\n48f3a2258 SPIGOT-7171: Ability to get the IP/hostname players are requesting status of\r\n30e31b4d1 SPIGOT-7177: Certain blocks don't call BlockCanBuildEvent\r\n982364797 SPIGOT-7174: Avoid adding air to CraftMetaBundle\r\n\r\nSpigot Changes:\r\n6198b5ae PR-122: Add missing parentheses to pumpkin and melon growth modifier\r\n1aec3fc1 Rebuild patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a66dd9087c4d6d37670d",
    "number": 8514,
    "body": "This resolves issues that cause this method to work incorrectly for clients with high latency.",
    "head_branch": "setrotation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move block farther away for Player#setRotation (#8514)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a66ed9087c4d6d37670e",
    "number": 8513,
    "body": "This simplifies command exception handling when writing platform-agnostic code that only depends on adventure",
    "head_branch": "cse-cmt",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make CommandSyntaxException implement ComponentMessageThrowable (#8513)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a66fd9087c4d6d37670f",
    "number": 8512,
    "body": "These were accidentally changed in the latest commit after rebasing.\r\nThis reverts that.",
    "head_branch": "undo-remove-diff",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Undo modification to removed patches in latest commit (#8512)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a670d9087c4d6d376710",
    "number": 8511,
    "body": "Fixes where the user has permission for selectors but not their suggestions, which especially matters when we force suggestions to the server for this type",
    "head_branch": "entityargument-suggestion-permission",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix EntityArgument suggestion permissions to align with  EntitySelector#checkPermissions (#8511)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a671d9087c4d6d376711",
    "number": 8510,
    "body": "This is a continuation of https://github.com/PaperMC/Paper/pull/8489 because not sure why... the docs about checkout show the last version 2.5 but the examples show 3.. and in v3 the depreaction things are fixed... sorry for not notice this in the last PR...",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Update checkout action in workflow (#8510)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a672d9087c4d6d376712",
    "number": 8507,
    "body": "Succeeds #6359\r\n\r\nAdded in a hover message with the listener's priority and added some better error messaging.",
    "head_branch": "feature/dumplisteners-cmd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add /paper dumplisteners command (#8507)\n\n\r\nCo-authored-by: Jason Penilla <11360596+jpenilla@users.noreply.github.com>\r\nCo-authored-by: TwoLeggedCat <80929284+TwoLeggedCat@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a673d9087c4d6d376713",
    "number": 8506,
    "body": "The descriptor passed to the GeneratorAdapter ctor differs from the one passed to the visitMethod call.\r\nWhile this isn't relevant for functionality of the current implementation, I think it makes sense to clean this up to avoid confusion.",
    "head_branch": "suspicious-descriptor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix wrong descriptor in ASMEventExecutorGenerator (#8506)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a674d9087c4d6d376714",
    "number": 8505,
    "body": "Adds a configuration option to save region files without any compression, this is useful for any servers which wish to use compression at the file system level.\r\n\r\nMinecraft already has the ability to save and load region files without compression, however the ability to save isn't used, and this adds a config option to enable that. As Minecraft supports regions saved this way, the worlds saved using this option remain compatible with an unmodified client / server.",
    "head_branch": "uncompressed-regions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Configurable Region Compression Format (#8505)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a675d9087c4d6d376715",
    "number": 8502,
    "body": "A similar method player.sendBlockChanges was added by upstream which essentially performs the same function as player.sendMultiBlockChange that I PR'd awhile ago to Paper at https://github.com/PaperMC/Paper/pull/7333.\r\n\r\nThis PR deprecates my original method in favor of upstreams.",
    "head_branch": "deprecate/multi-block-change-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a677d9087c4d6d376716",
    "number": 8501,
    "body": null,
    "head_branch": "tuinity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a678d9087c4d6d376717",
    "number": 8500,
    "body": null,
    "head_branch": "move-nms-classes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Move classes added to net.minecraft.server to paper packages (#8500)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a679d9087c4d6d376718",
    "number": 8499,
    "body": "I'm not sure if this is the correct way to fix this, or if a separate config option to make the sounds per world would be warranted.\r\n\r\nTo me, it looks like the patch was initially made to fix the spigot bug that would, when limiting radius sound radius, cause players in the other dimensions at the same coordinates to also hear the sound. It could have also just been making an opinionated change, though. I couldn't find any discussion of it. https://github.com/PaperMC/Paper/commit/4becba32a6d20587ecdffe9ebbc5047a3f02590a\r\n\r\nIn vanilla boss death sounds are played to all players on the server.",
    "head_branch": "0101",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Only limit global sounds to same world if limiting radius (#8499)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a67ad9087c4d6d376719",
    "number": 8498,
    "body": null,
    "head_branch": "deprecate-old",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Deprecate unused VehicleEntityCollisionEvent methods (#8498)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a67bd9087c4d6d37671a",
    "number": 8495,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8494\r\n\r\nAlso moved patches to account for https://github.com/PaperMC/Paper/pull/8477#issuecomment-1287978395",
    "head_branch": "add-event-boolean-sitevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't fire EntityToggleSitEvent on deserialization & reorder some api patches (#8495)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a67cd9087c4d6d37671b",
    "number": 8493,
    "body": "This was already approved by cat and myself. \r\n\r\nContinues https://github.com/PaperMC/Paper/pull/7469",
    "head_branch": "dannyball710/master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Ignore impossible spawn tick (#8493)\n\nCo-authored-by: dannyball710 <dannyball710@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a67dd9087c4d6d37671c",
    "number": 8492,
    "body": "Makes an entity serializable via API no matter what.\r\nPreviously you'd get an empty component (and an error later when trying to spawn the deserialized entity) in some cases:\r\n- When the entity is marked as non-persistent.\r\n- When the entity is a passenger.\r\n- When the entity is not saveable (misc entities like lightning, knot, etc.).\r\n- When the entity is \"invalid\" (dead, unloaded, etc.).\r\n\r\nNow there's no problem serializing & deserializing & spawning entities in those cases.\r\n___\r\nEdit: see [the comment](https://github.com/PaperMC/Paper/pull/8492#issuecomment-1348574662) below for the new flags explanation",
    "head_branch": "serialization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a67ed9087c4d6d37671d",
    "number": 8491,
    "body": "Crashes caused by the missing AWT dependency come up in the support channels fairly often.\r\nThis patch detects the missing dependency and stops the server with a clear error message,\r\ncontaining a link to instructions on how to install a non-headless JRE.\r\nThis should clarify what the issue is for most users, instead of just crashing with [a vague UnsatisfiedLinkError](https://paste.gg/p/Pencil/022db02be70840539e429532960806f9).",
    "head_branch": "feat/headless-detection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Detect headless JREs (#8491)\n\nCrashes caused by the missing AWT dependency come up in the support channels fairly often.\r\nThis patch detects the missing dependency and stops the server with a clear error message,\r\ncontaining a link to instructions on how to install a non-headless JRE."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a67fd9087c4d6d37671e",
    "number": 8489,
    "body": "This PR update the version of \"actions\" used in the build workflow.\r\nBased in the deprecation of save-state and set-output reported in https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/\r\n\r\nTested the workflow in the rep and build fine.\r\n![image](https://user-images.githubusercontent.com/3602279/197310517-c749f806-2bea-45e2-91d3-c66b879df0f7.png)\r\n",
    "head_branch": "git/workflow-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Update workflow dependencies (#8489)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a680d9087c4d6d37671f",
    "number": 8485,
    "body": "This allows developer to sneak any entity which will make its Name Tag less visible.",
    "head_branch": "feature/entitySneaking",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Sneaking API for Entities (#8485)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a681d9087c4d6d376720",
    "number": 8484,
    "body": "Now covers some ServerExceptionEvents and others I noticed in logs from users\r\n\r\nfor some of these could probably edit the original patch to use a logger instead but this works",
    "head_branch": "deobf-more-traces",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add stacktrace deobfuscation in more places (#8484)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a682d9087c4d6d376721",
    "number": 8483,
    "body": "While digging into issue  #8481 it seems that the order between chunk.onChunkLoad() causing ServerChunkCache#addLoadedChunk() making the chunk accesible and changeEntityChunkStatus() instruction entites to interact with the chunk is wrong. \r\n\r\nI m not sure if there are any non-obvious bad effects from delaying the updates to the entities until after the onChunkLoad() calls. I did some test runs and went through the code as far as I could and nothing obvious was found.",
    "head_branch": "chunk_load_entity_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a683d9087c4d6d376722",
    "number": 8482,
    "body": "Someone on discord correctly pointed out, that getSlot() is inconsistent with other Inventory Events. So I renamed it to getRawSlot() and added getSlot(), to be consistent with the rest of the project.\r\n\r\nI know that is another breaking change, but I hope that one is the last one...",
    "head_branch": "feature/slotChangeEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add converted Slot number to PlayerInventorySlotChangeEvent (#8482)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a684d9087c4d6d376723",
    "number": 8479,
    "body": "This pull request adds a knockback method on LivingEntity to knock back the entity from a specific position and a specific knockback.\r\n\r\nCurrently, knocking back an entity can be done with setting the velocity, but this method does not take in vanilla knockback mechanics into consideration such as knockback resistance. Copying the knockback method from the NMS LivingEntity works, but it causes a lot of code duplication, and won't update if the built-in vanilla knockback dynamics change. The knockback method added by this pull request will expose the built-in knockback method from the NMS LivingEntity to allow simulating vanilla knockback mechanics.",
    "head_branch": "feat/entity-knockback-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add LivingEntity knockback API (#8479)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a685d9087c4d6d376724",
    "number": 8478,
    "body": "Closes https://github.com/PaperMC/Paper/issues/8471\r\n\r\nAdds two new methods increaseLevel and addTrades based on Machine's comment\r\nThe first one increase the level from a such amount like in vanilla\r\nThe second unlock new trades, in vanilla this is used:\r\n- for villager: 2 trades are unlocked while level up\r\n- for wandering trader: 5 trades are unlocked + 1 extra",
    "head_branch": "fix/tradeupdate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "More vanilla friendly methods to update trades (#8478)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a686d9087c4d6d376725",
    "number": 8477,
    "body": "Adds `EquipmentSlot#isHand` and `EquipmentSlot#isArmor` to check the type of the slot.",
    "head_branch": "equipment",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add EquipmentSlot convenience methods (#8477)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a687d9087c4d6d376726",
    "number": 8475,
    "body": "Fixed Event package & trigger function name, As mentioned in #paper-contrib",
    "head_branch": "feature/slotChangeEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix package for PlayerInventorySlotChangeEvent (#8475)\n\nCo-authored-by: Jakub Zacek <dawon@dawon.eu>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a688d9087c4d6d376727",
    "number": 8474,
    "body": "![image](https://user-images.githubusercontent.com/41451155/196005443-2e75b64f-14e5-4a5a-be39-5b2c8fa09047.png)\r\n![image](https://user-images.githubusercontent.com/41451155/196005448-71589f9d-eafd-4d3f-990c-2994f1ea1325.png)\r\n\r\nPaper uses a fixed number for bedrock in the same column.\r\nVanilla uses the y coord of the bedrock block.",
    "head_branch": "bedrock_pattern_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "FIx bedrock patterns (#8474)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a689d9087c4d6d376728",
    "number": 8473,
    "body": "Method Player#sendBlockDamage work wrongly. \r\nThe javadoc says that if the progress is 0 then it means that the block has no destruction, while if you pass 0 then the player will see the destruction.\r\nTo reset the destruction, the player needs to send any number other than 0-9, this is written on wiki.vg\r\nSo I decided to handle a separate case with 0 progress",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a68ad9087c4d6d376729",
    "number": 8470,
    "body": "I am still not sure whether to mention specific values (for warning levels 0-4) as those might change. So I tried to avoid them, if it is preferred to have them in the docs I will modify it...",
    "head_branch": "feature/wardenWarningAPI",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Player Warden Warning API (#8470)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a68bd9087c4d6d37672a",
    "number": 8466,
    "body": "Fix the deprecation loop between setEatingGrass and setEatingHaystack methods",
    "head_branch": "fix/depannot",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Avoid cycle deprecation (#8466)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a68cd9087c4d6d37672b",
    "number": 8463,
    "body": "Adding this API will remove the need to use reflections in plugins to get and set `PermissibleBase` on `CraftHumanEntity` to override permissions logic",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a68dd9087c4d6d37672c",
    "number": 8459,
    "body": null,
    "head_branch": "fix/test-classloading-error",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix a classloading issue in tests (#8459)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a68ed9087c4d6d37672d",
    "number": 8458,
    "body": "Having this exposed in API allows (some ideas of how it might be used instead of being locked behind NMS):\r\n- Creating beds that can never be slept on.\r\n- Creating beds that multiple players can sleep on.\r\n- Dying beds that have someone sleeping on them. Since it requires creating a new BlockData from a different material, you couldn't simply set a new block data and preserve the bed's old `occupied` state if someone sleeps on it.",
    "head_branch": "bed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow changing bed's 'occupied' property (#8458)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a68fd9087c4d6d37672e",
    "number": 8457,
    "body": "Upon firing `VehicleBlockCollisionEvent` the collision already happened (for example, a minecart would already be stopped), and before there was no easy way to know the velocity at which this happened; you'd have to track that yourself.\r\n\r\nNow you can use this API to implement features like bouncing from slime blocks depending on the speed you hit them :)",
    "head_branch": "collision",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expose pre-collision moving velocity to VehicleBlockCollisionEvent (#8457)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a690d9087c4d6d37672f",
    "number": 8456,
    "body": "I have dozens of methods where I operate with an item from events solely based on the passed slot.\r\nOld and ugly code (already shortened by not using brackets) would require me to do this:\r\n```java\r\nif (hand == EquipmentSlot.HAND) player.swingMainHand();\r\nelse if (hand == EquipmentSlot.OFF_HAND) player.swingOffHand(); // or just else considering no third hand\r\n```\r\nIt can now be as simple as `player.swingHand(hand);` :)",
    "head_branch": "hand",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add LivingEntity#swingHand(EquipmentSlot) convenience method (#8456)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a691d9087c4d6d376730",
    "number": 8455,
    "body": "Allows sending elder guardian effect to the player, optionally without a sound.\r\n\r\nNote: float value in this packet acts like a boolean, and thus it's a boolean in API too (>= 0.5 < 1.5 plays the same sound, otherwise silent).\r\n\r\nP.S. In the server patch, the upper `// Paper` block has `// Paper start - brand support` heading, so that's why a new block was made.",
    "head_branch": "guardian",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Elder Guardian appearance API (#8455)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a692d9087c4d6d376731",
    "number": 8454,
    "body": "There was already a fitting patch for this, so I just threw it in there, as well as cleaned it up a bit.\r\n\r\nDiffers from `Entity#isInWater` in a way that it requires eyes to be emerged as well instead of just touching the water with any body part.",
    "head_branch": "underwater",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expose isUnderWater to Entity (#8454)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a693d9087c4d6d376732",
    "number": 8453,
    "body": "Replaces some internal usages of this method with the more proper `RecipeChoice#test(ItemStack)`. Every other method that utilizes `RecipeChoice#getItemStack()` has been deprecated with a message suggesting the modern equivalent that should be used instead.",
    "head_branch": "avoid-recipechoice-getitemstack",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Avoid usages of RecipeChoice#getItemStack() (#8453)\n\nReplaces some internal usages of this method with RecipeChoice#test(ItemStack) and deprecates every other method still utilizing this legacy method."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a694d9087c4d6d376733",
    "number": 8450,
    "body": "### The Problem\r\nThe existing ``minecraft.commandblock`` permission _only_ allows you to _edit_ command blocks. It looks like it was meant to also allow for breaking/placing command blocks, but in it's current state it does not.\r\n\r\nThere are also other blocks that require op level 2 or higher to break, place, and use. Currently however, there is no permission to allow this.\r\n\r\n### The (Proposed) Solution\r\nUpgrade the existing minecraft.commandblock permission to allow all of these things. If a player can edit command blocks, they can (presumably) create/break/modify other command blocks via commands like /setblock. \r\n\r\nThis PR changes the ``Player.canUseGameMasterBlocks`` function to return true when the player has the minecraft.commandblock permission. It also removes all the old code (save the permission registration.) Most of the command-block-specific code seems to be broken, as you can't currently place/break command blocks with the permission.\r\n\r\n### Things to Consider\r\nOne small side effect of this specific implementation of the change, is that minecraft.commandblock will also allow use of debug sticks while in creative mode, because this also checks ``canUseGameMasterBlocks``.\r\n\r\nThis would also cause it to override the ``minecraft.nbt.place`` permission. Whether this should be considered a significant drawback is up for discussion. My thought is that command blocks can be every bit as destructive as NBT, but maybe server owners attempting to sandbox command blocks could have issues with this?\r\n\r\nPotentially these could all be split into different permissions, but I don't see *much* of a point when command blocks can already do all of these things on their own. If someone needs that particular behavior, it wouldn't be hard to implement as a plugin.\r\n\r\nOnly other downside I can see is that ``minecraft.commandblock`` is a bit misleading, since it would now include two other blocks, as well as the debug stick.",
    "head_branch": "commandblock-permission-improvements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a695d9087c4d6d376734",
    "number": 8447,
    "body": "A follow up PR of #8436\r\nThis PR is using a seperate branch instead of using master.\r\n\r\nReminder :\r\n\r\nWhen a skeleton targets someone from a height, they just keep looking forward instead of up at their target.\r\n\r\nThis patch is directly a solution proposed by the reporter : https://bugs.mojang.com/browse/MC-121706",
    "head_branch": "MC-121706",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a696d9087c4d6d376735",
    "number": 8445,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\n\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n00604990 Remove obsolete workaround for SnakeYAML 100 comment limit\r\nb24bb75a SPIGOT-7161: SnakeYaml 1.32 changed the default file size limit\r\n\r\nSpigot Changes:\r\n89741d3e SPIGOT-7159: Crop Growth Modifier resolution is severely low\r\n\r\n----\r\n\r\nRemove's Paper hack by adding the entire SnakeYAML emitter class for comments over 100 in length (Fixed in snakeyaml 1.33).\r\n\r\nAlso changes the default code point limit to the max integer (to match upstream's new default).",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/Spigot) (#8445)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a697d9087c4d6d376736",
    "number": 8444,
    "body": null,
    "head_branch": "ver/1.12.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a698d9087c4d6d376737",
    "number": 8443,
    "body": "This PR close https://github.com/PaperMC/Paper/issues/8439 and https://github.com/PaperMC/Paper/issues/7383 adding a few changes for possible list result item from craft event, this based in the quick move generated when a player use Shift+Click for get all the possible items crafted.\r\n\r\nA little [example](https://youtu.be/V0fupWtk3A4) with.\r\n```java\r\n    @EventHandler\r\n    public void onCraft(CraftItemEvent event) {\r\n        HumanEntity humanEntity = event.getWhoClicked();\r\n        humanEntity.sendMessage(\"You craft is a list of \" + event.getItemResults().size());\r\n        event.getItemResults().forEach(itemStack -> {\r\n            humanEntity.sendMessage(\"You crafted \" + itemStack);\r\n        });\r\n    }\r\n```",
    "head_branch": "feature/craftitem-result-ro",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a699d9087c4d6d376738",
    "number": 8440,
    "body": "Was incorrectly removed [from the PR that added these methods](https://github.com/PaperMC/Paper/pull/8284).",
    "head_branch": "fix/unmodifiable-annos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Unmodifiable annotations to getDrops methods (#8440)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a69ad9087c4d6d376739",
    "number": 8438,
    "body": "…ling as valid for teleporting entities\r\n\r\n(hopefully) Fixes [#7208](https://github.com/PaperMC/Paper/issues/7208)\r\n\r\nIf a portal is built above the Y level specified under `nether-ceiling-void-damage-height`, entities can no longer enter the nether through that portal, even if no other options are available. Previously, it kind of just never checked this, which was simple enough to fix.\r\n\r\nTested by setting `nether-ceiling-void-damage-height` to 0, building a portal on the nether roof, returning to the overworld, building a portal in the proper location, setting `nether-ceiling-void-damage-height` to 128 and attempting to travel through it. ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a69cd9087c4d6d37673a",
    "number": 8436,
    "body": "When a skeleton targets someone from a height, they just keep looking forward instead of up at their target.\r\n\r\nThis patch is directly a solution proposed by the reporter : https://bugs.mojang.com/browse/MC-121706",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a69dd9087c4d6d37673b",
    "number": 8434,
    "body": "Closes https://github.com/PaperMC/Paper/issues/7939\r\n\r\nThis handle correctly the needed reset ansi before each color change like bukkit do.\r\n<!-- bot: paperclip-pr-build -->\r\n---\r\nDownload the paperclip jar for this pull request: [paper-8434.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/452662891.zip)",
    "head_branch": "fix/advconsole",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Handle legacy quirk in the console formatter (#8434)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a69ed9087c4d6d37673c",
    "number": 8432,
    "body": "The issue here is that when jumping and sneaking right before the end of a long fall, the client will send incorrect move packets resulting in a teleport back. Due to this, the move packet (impact) of the player will not be considered for fall damage. The following move packet to the impact packet will have a positive y-value again due to the player jumping, resulting in a fall damage reset.\r\n\r\nSolution: Apply fall damage also while moving wrongly, but supply the real values the player sent to the damage calculation. This will not have any real negative effect, as the doCheckFallDamage method is meant to be called repeatedly anyway.\r\n\r\nVideo with demonstration:\r\nhttps://www.youtube.com/watch?v=dvhoQq9wTAQ\r\n(The explanation in the video is wrong, the behavior of the player on impact is the only relevant thing. The invalid movement packet just has to be one ahead of the \"impact\" packet for this to work.)\r\n\r\nTesting: Tested before and after patch. Can reproduce without patch every second time. Did not reproduce once with patch. This does also not apply fall damage when moving wrongly in general - the onGround check and everything is still in place.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix nothing mlg (#8432)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a69fd9087c4d6d37673d",
    "number": 8431,
    "body": "Closes https://github.com/PaperMC/Paper/issues/8426\r\n\r\nEven if this \"non API\" is old, in any case if paper/spigot implement a proper way\r\nto register custom enchantment, paper will need something like that.",
    "head_branch": "fix/bukkitench",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6a0d9087c4d6d37673e",
    "number": 8430,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n09943450 Update SnakeYAML version\r\n5515734f SPIGOT-7162: Incorrect description for Entity#getVehicle javadoc 6f82b381 PR-788: Add getHand() to all relevant events\r\n\r\nCraftBukkit Changes:\r\naaf484f6f SPIGOT-7163: CraftMerchantRecipe doesn't copy demand and specialPrice from BukkitMerchantRecipe\r\n5329dd6fd PR-1107: Add getHand() to all relevant events\r\n93061706e SPIGOT-7045: Ocelots never spawn with babies with spawn reason OCELOT_BABY",
    "head_branch": "upstream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#8430)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n09943450 Update SnakeYAML version\r\n5515734f SPIGOT-7162: Incorrect description for Entity#getVehicle javadoc\r\n6f82b381 PR-788: Add getHand() to all relevant events\r\n\r\nCraftBukkit Changes:\r\naaf484f6f SPIGOT-7163: CraftMerchantRecipe doesn't copy demand and specialPrice from BukkitMerchantRecipe\r\n5329dd6fd PR-1107: Add getHand() to all relevant events\r\n93061706e SPIGOT-7045: Ocelots never spawn with babies with spawn reason OCELOT_BABY"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a6a1d9087c4d6d37673f",
    "number": 8429,
    "body": "This pull request fixes [MC-121048](https://bugs.mojang.com/browse/MC-121048) where the combat tracker only contains the final attack. Fixing this bug which for the doomed to fall death messages to occur again. ",
    "head_branch": "fix/mc-121048",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix MC-121048 (#8429)\n\nThis moves the setHealth call to below the recordDamage call to prevent\r\nrecordDamage from clearing the CombatTracker, since recordDamage will\r\nclear the CombatTracker if the entity is dead. This fixes death messages\r\nsuch as the \"doomed to fall\" messages."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6a2d9087c4d6d376740",
    "number": 8428,
    "body": "This bug effects _all_ cooldown items. No one's noticed until the goat horn, though, because most item cooldowns are really short. This fixes only the goat horn, but it might be desirable to remove this line of code entirely to fix all items.",
    "head_branch": "mc-252892",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6a3d9087c4d6d376741",
    "number": 8427,
    "body": "Makes it so that players in creative or spectator mode don't receive damage from the nether ceiling when that option is configured.",
    "head_branch": "feature/ceiling-damage-exemption",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Exempt players in creative/spectator from nether ceiling damage (#8427)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6a4d9087c4d6d376742",
    "number": 8425,
    "body": "New approach to https://github.com/PaperMC/Paper/pull/6701. This will have no performance impact after adapters are created.",
    "head_branch": "fix/CME2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6a5d9087c4d6d376743",
    "number": 8424,
    "body": null,
    "head_branch": "mc-210802",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6a6d9087c4d6d376744",
    "number": 8423,
    "body": null,
    "head_branch": "mc-147659",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix MC-147659 (#8423)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6a7d9087c4d6d376745",
    "number": 8422,
    "body": null,
    "head_branch": "mc-238526",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6a8d9087c4d6d376746",
    "number": 8421,
    "body": null,
    "head_branch": "mc-179072",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix MC-179072 (#8421)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6a9d9087c4d6d376747",
    "number": 8420,
    "body": null,
    "head_branch": "mc-123848",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6aad9087c4d6d376748",
    "number": 8418,
    "body": "https://github.com/PaperMC/Paper/pull/6957",
    "head_branch": "improve/varints",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement Velocity VarInt optimizations (#8418)\n\n---------\r\n\r\nCo-authored-by: Owen1212055 <23108066+Owen1212055@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6abd9087c4d6d376749",
    "number": 8417,
    "body": "Closes #8407",
    "head_branch": "classloading-stacktrace",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add system property to dump stack on bad plugin class access (#8417)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6acd9087c4d6d37674a",
    "number": 8416,
    "body": "Avoids resizing of ArrayList in ChunkMap#getPlayers and avoids allocations completely if no players are nearby. This method is only used once in Paper itself but I do use this method in plugins.\r\nI also replaced the cast with instanceof pattern matching. I can revert this part if this is not wanted for some reason.",
    "head_branch": "improve/avoidResizingChunkMapGetPlayers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Avoid resizing of ArrayList in ChunkMap#getPlayers (#8416)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6add9087c4d6d37674b",
    "number": 8414,
    "body": "I did more testing and realized my last PR (#8404) only fixed half of the issue. Two separate errors related to jigsaw blocks could occur. Wish I had caught this in the first PR, but alas.\r\n\r\nFixes #8102 (really this time.)\r\n\r\nCases tested:\r\n``minecraft:empty`` (Fixed by #8404)\r\n``minecraft:`` (Fixed by this change)\r\n``invalid_name:invalid_name`` (Fixed by this change)",
    "head_branch": "jigsaw-bug-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix other jigsaw related disconnect bug (#8414)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6aed9087c4d6d37674c",
    "number": 8413,
    "body": "There was a Problem with the `BlockDestroyEvent` firing weirdly sometimes (see #8341 for more).\r\n\r\nThis was the solution I found for this, it doesn't seem to cause any other issues.\r\n\r\nCloses #8341",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6afd9087c4d6d37674d",
    "number": 8412,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8391\r\n\r\nThis is my first pr and still unsure that make this patch sperately or merge into somewhere like 0016-Rewrite-chunk-system.patch",
    "head_branch": "bugfix/don-t-print-new-chunk-system-prefix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6b0d9087c4d6d37674e",
    "number": 8411,
    "body": "The method CommandSourceStack#getBukkitLocation method returns the yaw and pitch values the wrong way around. Tested this change with a small plugin reporting my yaw/pitch and the result of the method.\r\n\r\nCloses #8408",
    "head_branch": "fix-wrong-yaw-pitch-css-gbl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix wrong yaw and pitch of CommandSourceStack#getBukkitLocation (#8411)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6b1d9087c4d6d37674f",
    "number": 8410,
    "body": "It is saved as a long, and the API exposes a long, so loading it as an int may cause some unexpected issues like overflows.\r\n\r\nThis could potentially be merged into [Aikar's MC-133506 patch](https://github.com/PaperMC/Paper/blob/master/patches/server/0237-MC-135506-Experience-should-save-as-Integers.patch).",
    "head_branch": "fix/allay-duplicationcooldown-long",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Load Allay duplication cooldown as a long (#8410)\n\nIt is saved as a long, and the API exposes a long, so loading it as an int may cause issues like overflows."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6b2d9087c4d6d376750",
    "number": 8409,
    "body": "Fixes PaperMC/Paper#8391\r\n\r\nThis is my first contribution and still unsure that make this commit sperately or merge into somewhere like 0016-Rewrite-chunk-system.patch",
    "head_branch": "bugfix/dont-print-new-chunk-system-prefix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6b3d9087c4d6d376751",
    "number": 8405,
    "body": "Previously, PoiChunk#empty would create a new empty poi chunk with loaded already set to true, as no data was contained in the chunk. This allowed the poi chunk to skip expensive trips to the main thread.\r\n\r\nHowever, PoiChunk#parse used #empty to create the initial PoiChunk instance that is then filled with data.\r\nThis leads to PoiChunks returned from #parse to already be marked as loaded, preventing the then needed trip to the tick thread to update things like the village distance tracker.\r\n\r\nTo fix this, this commit now marks the PoiChunks loaded state as false if the parse logic actually read and parsed any data. This allows the PoiChunk#load method to properly run its callbacks when called for the first time.\r\n\r\nResolves: #8401\r\nCC: @Spottedleaf ",
    "head_branch": "bugfix/callback-poimanager-for-non-empty-poichunks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Mark parsed PoiChunks with data as not loaded (#8405)\n\nPreviously, PoiChunk#empty would create a new empty poi chunk with\r\nloaded already set to true, as no data was contained in the chunk.\r\nThis allowed the poi chunk to skip expensive trips to the main thread.\r\n\r\nHowever, PoiChunk#parse used #empty to create the initial PoiChunk\r\ninstance that is then filled with data.\r\nThis leads to PoiChunks returned from #parse to already be marked as\r\nloaded, preventing the then needed trip to the tick thread to update\r\nthings like the village distance tracker.\r\n\r\nTo fix this, this commit now marks the PoiChunks loaded state as false\r\nif the parse logic actually read and parsed any data.\r\nThis allows the PoiChunk#load method to properly run its callbacks when\r\ncalled for the first time."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6b4d9087c4d6d376752",
    "number": 8404,
    "body": "Fixes #8102 \r\n\r\nAdds a tiny check to prevent an IllegalArgumentException when calling ``random.nextInt(0)``.  Previously this kicked players who clicked \"Generate\" in a structure block attempting to load \"minecraft:empty\".",
    "head_branch": "bug-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix jigsaw block kicking user (#8404)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6b5d9087c4d6d376753",
    "number": 8399,
    "body": "needs organisating, commentry, and actually exposing in the API\r\n\r\nPR is semi hasty, I don't wanna throw a bunch of time cleaning this up without some general commentary first, iffy on not using an enum, being enums have bit us in the arse before, and mostly, people mostly only care about fail/success\r\n\r\nShould probably add the annotation to not ignore the ret value too, as many people seem to miss that one in general",
    "head_branch": "feat/WorldUnloadResult",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6b6d9087c4d6d376754",
    "number": 8398,
    "body": "Fixes #8366\r\n\r\nVery small change to make mud converting into clay call a BlockFormEvent.\r\n\r\nThis is my first contribution! Hopefully I got everything right. I tried to keep consistent with the style of the surrounding code.",
    "head_branch": "mud-into-clay-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "use BlockFormEvent for mud converting into clay (#8398)\n\nCo-authored-by: Legitimoose <legitimoose@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6b7d9087c4d6d376755",
    "number": 8390,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8389\r\n\r\nMerges the tadpole spawn reason patch with this one.\r\n\r\n* Fixes the DISPENSER_EGG reason not being used for eggs from dispensers\r\n* Uses the EXPLOSION reason for area effect clouds from dragon fireballs\r\n* Fixes a javadoc issue with the EXPLOSION reason. ",
    "head_branch": "fix/dispenser-spawn-reason",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixes a couple issues with entity spawn reasons (#8390)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a6b8d9087c4d6d376756",
    "number": 8387,
    "body": null,
    "head_branch": "update-velocity-natives",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update Velocity natives (#8387)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6b9d9087c4d6d376757",
    "number": 8385,
    "body": "The old behavior only change the local variable instead of the public class field.",
    "head_branch": "fix/turtleeggcount",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix setEggCount method from TurtleLayEggEvent (#8385)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6bad9087c4d6d376758",
    "number": 8382,
    "body": null,
    "head_branch": "documentation/is-ticking-worlds-javadocs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typos in isTickingWorlds API javadocs (#8382)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a6bbd9087c4d6d376759",
    "number": 8378,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nacdb55f9 Update SnakeYAML version\r\n\r\nCraftBukkit Changes:\r\n08cdd26ca Add support for Java 19\r\n06c0ce78c PR-1110: Make CraftMapColorCache more thread safe",
    "head_branch": "upstream-snakeyaml",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#8378)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a6bcd9087c4d6d37675a",
    "number": 8377,
    "body": "This PR adds small changes that improve the performance of the threaded level light engine and Starlight interface.\r\n\r\n||Old|New|Change\r\n|---|---|---|---\r\n|Memory allocations|![The memory allocation call tree for the previous implementation](https://user-images.githubusercontent.com/52505120/191599753-347adaa1-6c8e-478b-873b-736307392385.png)|![The memory allocation call tree for the new implementation](https://user-images.githubusercontent.com/52505120/191599920-6ed620ea-f94e-41ea-a593-edb0af1b3b87.png)|**-23.1&nbsp;%**\r\n|CPU samples|![The CPU sample call tree for the previous implementation](https://user-images.githubusercontent.com/52505120/191600298-ae5ca9c8-ce24-43cc-8ec5-6e1ab4b3d662.png)|![The CPU sample call tree for the new implementation](https://user-images.githubusercontent.com/52505120/191600502-76d4b9af-36ca-44ab-b98e-922c55a4604c.png)|**-35.4&nbsp;%**\r\n\r\n<sup>Lower is better in both allocated bytes and CPU samples.</sup>\r\n\r\nThis is done by swapping the CompletableFuture `thenCombine(...)` with a more efficient `thenCompose(...)` (we don't care about the result of the other CompletableFuture, as it does not have one). Additionally, a `HashSet` field in `StarlightInterface.LightQueue.ChunkTasks` was converted to an `ObjectOpenHashSet`. I did not measure the performance impact of this alone, but I would be surprised if the HashMap-backed java.util HashSet was faster than a 'real' implementation.\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6bdd9087c4d6d37675b",
    "number": 8376,
    "body": "Upstream has released updates that appear to apply and compile correctly. This update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\ndc57aa358 SPIGOT-7160: LootTable.fillInventory() is not considered a plugin-issued event",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit) (#8376)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6bed9087c4d6d37675c",
    "number": 8374,
    "body": "Similar to the consumer parameter in RegionAccessor#spawnEntity, this pull request adds a method override with a consumer parameter to ProjectileSource#launchProjectile.\r\n\r\nPreviously, it was not possible to use the API to modify a projectile from launchProjectile before it is added to the world. A workaround to this is to modify the entity immediately after calling launchProjectile, but this had a short delay, and the client would see the incorrect projectile for a short duration.\r\nThis also causes modified explosion radius fireballs to explode with the wrong explosion radius if it explodes immediately after spawning, such as spawning inside a wall.\r\nThis pull request adds another method override with a function to be called before the entity is added to the world, which allows projectiles to be modified before being added to the world, fixing the above issues.\r\n\r\n",
    "head_branch": "feat/projectile-consumer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add a consumer parameter to ProjectileSource#launchProjectile (#8374)\n\nCo-authored-by: MelnCat <melncatuwu@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a6bfd9087c4d6d37675d",
    "number": 8373,
    "body": "Closes https://github.com/PaperMC/Paper/issues/5188\r\nRedo of my old PR without all the mess (before part II)\r\n\r\n\"Paper has fixed enchantment order inconsistencies but has also implemented the fix on getter which is useless because no write operation is done here.\"\r\nThis wouldn't be a problem if the item meta was fast\r\nYou should use theses methods over the meta one if you care about performance and doesn't do bulk operation on item.",
    "head_branch": "fix/nometa-getter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Avoid item meta usage for itemstack enchantment getter (#8373)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6c0d9087c4d6d37675e",
    "number": 8372,
    "body": "This adds a world config option to allow markers to be ticked, rather than just having them not ticked at all. Defaults to false so the existing functionality is the same for those that don't need markers to tick. ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6c1d9087c4d6d37675f",
    "number": 8371,
    "body": null,
    "head_branch": "fix/WorldCreator-keepSpawnLoader-ret",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make WorldCreator#keepSpawnLoaded return the WorldCreator (Fixes #8321) (#8371)\n\n* Make WorldCreator#keepSpawnLoaded return the WorldCreator (Fixes #8321)\r\n\r\nThought that I fixed this before push/merge, apparently not, hence, fix\r\nthe return type and add mitigation for this.\r\n\r\n* Fix patch/build\r\n\r\n* Rebuild patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a6c2d9087c4d6d376760",
    "number": 8369,
    "body": "Adds an event that allows people to cancel the actual attack from a player.\r\nThis is useful as it currently allows you to cancel the sound that is played when attacking a player.\r\n\r\n Canceling player attacks with the entity damage entity event:\r\nhttps://user-images.githubusercontent.com/23108066/190920900-38c05a4b-980d-4935-b7ed-aad8777469bb.mp4\r\n\r\nCanceling player attacks with this event:\r\nhttps://user-images.githubusercontent.com/23108066/190920880-fc6a057b-ab03-4329-91fd-78adfd5f0f89.mp4\r\nNote: Particles are client side\r\n\r\nThis is a pretty niche event, but it's just supposed to be much higher up to cancel as much logic as possible.\r\n\r\n\r\n",
    "head_branch": "player-attack-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PrePlayerAttackEntityEvent (#8369)\n\nAllows you to cancel player event attacking, preventing things like attack sounds from being played."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a6c3d9087c4d6d376761",
    "number": 8367,
    "body": "This removes the \"[Not Secure]\" label when running Paper server behind a proxy like Velocity.",
    "head_branch": "fix/secure-profile-behind-proxy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6c4d9087c4d6d376762",
    "number": 8364,
    "body": "While nuking the mojang IO worker in the async chunk transition, the SectionStorage's close method was missing the super call to its parent RegionFileStorage which in turn is responsible for closing the region files in use by the section storage. This would manifest in opened files for an unloaded world.\r\n\r\nThis commit adapts the SectionStorage#close method to properly call its parent's close method, closing any open files.\r\n\r\nResolves: #7504 \r\n\r\n-------------------------------------------\r\n\r\nTesting this change is as easy as loading and unloading a world while monitoring the opened files. The following code can be used to test the changes:\r\n```java\r\n@EventHandler\r\npublic void on(final PlayerDropItemEvent event) {\r\n    event.setCancelled(true);\r\n    \r\n    final World world = Bukkit.getWorld(\"test\");\r\n    if (world == null) {\r\n        final WorldCreator worldCreator = new WorldCreator(\"test\");\r\n        worldCreator.keepSpawnLoaded(TriState.FALSE);\r\n\r\n        final World created = Bukkit.createWorld(worldCreator);\r\n        event.getPlayer().teleportAsync(created.getSpawnLocation());\r\n    } else {\r\n        event.getPlayer().teleport(Bukkit.getWorlds().get(0).getSpawnLocation());\r\n        Bukkit.unloadWorld(world, true);\r\n    }\r\n}\r\n```\r\nand a simple\r\n```bash\r\n watch -n0.1 lsof run/test/poi/r.0.0.mca\r\n```\r\ncall in the paper server.",
    "head_branch": "bugfix/correctly-close-section-storage",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Properly close section storage managed files (#8364)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6c5d9087c4d6d376763",
    "number": 8360,
    "body": "@MiniDigger \r\n![Screenshot from 2022-09-14 11-48-06](https://user-images.githubusercontent.com/49043380/190134611-e3ec3c06-f8fe-4f6a-aa69-a898b19e4c5b.png)",
    "head_branch": "mini-requested-pr",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Limit size of Authenticator Cache Thread Pool (#8360)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6c6d9087c4d6d376764",
    "number": 8354,
    "body": "Superseeds #7752 same fix but on a separate branch\r\nFixes #7750",
    "head_branch": "fix-enddragonfight-killed-statuses",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "EndDragonFight killed statuses should be false for newly created worlds (#8354)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6c7d9087c4d6d376765",
    "number": 8349,
    "body": "Useful for overriding drops from blocks such as bamboo, which fire this event when their base is broken (moved to master as requested)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow preventing BlockDestroyEvent from dropping items (#8349)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a6c8d9087c4d6d376766",
    "number": 8347,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n2683d766 PR-787: Add LivingEntity#canBreatheUnderwater()\r\ndea11a5f SPIGOT-7128: ChunkGenerator#shouldGenerateBedrock doesn't work\r\necc290fd PR-755: Add more Warden methods\r\n\r\nCraftBukkit Changes:\r\n5901d580a PR-1101: Implement LivingEntity#canBreatheUnderwater()\r\ndd0a21830 SPIGOT-5607: PlayerInteractEvent Left-Click Bug\r\n990d077dc SPIGOT-7131: Chunk snapshot returned by World#getEmptyChunkSnapshot(int,int,boolean,boolean) thinks every block has PLAINS biome\r\n6c8a09611 SPIGOT-5761: initSettings is not a recognized option\r\na73b35878 Increase outdated build delay\r\n370eeceff PR-1060: Add more Warden methods\r\n\r\nSpigot Changes:\r\ne53686f7 Rebuild patches",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#8347)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a6c9d9087c4d6d376767",
    "number": 8346,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8345\r\n\r\nThis brings behavior more inline with vanilla, where vanilla creates a new source stack anytime there is an input on the console, this will do the same until a \"valid\" source stack is created, aka one with a non null level. That one will then be cached, as there isn't a point to creating more after that.\r\n\r\nThe console thread is started well before worlds are loaded, so before this PR, the CommandSourceStack used in the completer/highlighter did not have the overworld level in it, as it is expected to be.",
    "head_branch": "fix/command-line-source-stack",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix console completer/highlighter having invalid source stack (#8346)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6cbd9087c4d6d376768",
    "number": 8344,
    "body": "When a plugin register a custom bundle of translation. This bundle is ignored on lore/displayname of an itemstack and only the vanilla keys works. This is a problem because all logic must be duplicated just for text. Sadly this was harder than i thought and i have made a little workaround to stop the client that mutate the lore/name with the translated value. This isn't a problem with the actual really strict item meta api that just strip all bad values.",
    "head_branch": "feat/i18nstack",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6ccd9087c4d6d376769",
    "number": 8343,
    "body": "Useful for overriding drops from blocks such as bamboo, which fire this event when their base is broken.",
    "head_branch": "ver/1.18.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6cdd9087c4d6d37676a",
    "number": 8338,
    "body": "Moved most chunk system hooks to a single class, so that\r\nlater patches are not hopefully reliant on specific\r\npatches even exist.\r\nPlayerChunkLoader patch was not re-organized due to how awful it was, that will have to be done via the chunk system merge.",
    "head_branch": "rebasechunkpatches",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Re-arrange most chunk system patches to front (#8338)\n\n* Re-arrange most chunk system patches to front\r\n\r\nCo-authored-by: Spottedleaf <Spottedleaf@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6ced9087c4d6d37676b",
    "number": 8335,
    "body": "Currently resources are only loaded from the plugin classloader, which causes issues with some libraries, because they can't find their resources. This pr adds support for loading them from the `LibraryLoader` of the plugin.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Also load resources from LibraryLoader (#8335)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6cfd9087c4d6d37676c",
    "number": 8334,
    "body": "Currently, Paper always creates `paper.yml-README.txt` if there is no such file in main directory.  \r\n\r\nWith this PR, Paper will only generate `paper.yml-README.txt` file config file conversion happens.\r\n\r\nIf there are any other situation I should check too, let me know.\r\n\r\nThis PR may resolve #8332 (forgot to mention, thanks for remind me!)",
    "head_branch": "paper-yml-txt-generation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Only create paper.yml-README.txt on config conversion (#8334)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6d0d9087c4d6d37676d",
    "number": 8333,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6d1d9087c4d6d37676e",
    "number": 8326,
    "body": "Supersedes #7459, with a proper diff this time",
    "head_branch": "pr/stop-large-look-changes-from-crashing-the-server",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Stop large look changes from crashing the server (#8326)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6d2d9087c4d6d37676f",
    "number": 8324,
    "body": "Allows entities to be hidden by default. Entities that are hidden by default are hidden from a Player until Player#showEntity is invoked on that entity. Players that join the server or relog will also not see entities that are hidden by default. The entity's tracker maintains a set of player connections that have been shown the entity.\r\n\r\nEntities hidden by default respect other plugins' calls to Player#hideEntity. This means that, if Player#showEntity is called on an entity hidden by default, but the method was not called by the plugin that originally hid the entity, then the entity will still not be shown. If no other plugin hides the player when it is shown, then the entity will remain hidden by default but be shown to that Player.\r\n\r\nThe functionality is expanded for players that are hidden by default. Hiding players by default will send REMOVE_PLAYER PlayerInfo packets so that they are hidden in a similar fashion to hidePlayer calls. The same can be said when a player is no longer being hidden by default.\r\n\r\nTest with my own test plugins, that hide entities and players by default and then show them to specific players. Leaving and rejoining was also tested.\r\n\r\nCloses #7395",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6d3d9087c4d6d376770",
    "number": 8318,
    "body": "Prior to migrating handling configuration with Configurate,\r\npaper did not crash when it found it couldn't overwrite the\r\nexisting paper.yml configuration file (but left a stack trace).\r\n\r\nAfter the migration, paper crashes when it is unable to overwrite\r\nany of paper-global.yml, paper-world-defaults.yml or a\r\nworld-specific config file.\r\n\r\nThis aims at returning to the previous behaviour of not\r\ncrashing when paper is unable to overwrite a configuration\r\nfile.\r\n\r\nSigned-off-by: Antoine Mazeas <antoine@karthanis.net>\r\n\r\nFix #8301 ",
    "head_branch": "no_crash_readonly_config_file",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Restore no-crash behaviour when read-only config file(s) (#8318)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6d4d9087c4d6d376771",
    "number": 8316,
    "body": "It is unsafe for plugins to attempt loading or unloading a world while the worlds are being ticked. However, there currently isn't a practical way (as far as I could tell) for plugins to know whether or not it is currently unsafe to try to load/unload a world. Technically, they could do this:\r\n```java\r\ntry{\r\n    Bukkit.createWorld()/unloadWorld();\r\n} catch (IllegalStateException ignored){\r\n    // whoops, I guess it wasn't a good idea to do this now\r\n}\r\n```\r\nHowever, this isn't great, since if it was okay to create/unload a world right now, that would happen whether or not they actually wanted to do that right now. For example, if a plugin wants to do some expensive preprocessing before it creates the world, it could either check beforehand, like so:\r\n```java\r\ntry{\r\n    Bukkit.createWorld(\"probe\");\r\n} catch (IllegalStateException ignored){\r\n    // not safe, don't continue\r\n    return;\r\n}\r\n// Now we have a new world to handle...\r\nBukkit.unloadWorld(\"probe\")\r\n\r\n// expensive processing\r\n\r\nBukkit.createWorld(\"real\")\r\n```\r\nor do the work and get rejected:\r\n```java\r\n// expensive processing\r\n\r\ntry{\r\n    Bukkit.createWorld(\"real\");\r\n} catch (IllegalStateException ignored){\r\n    // welp, guess that processing was for nothing\r\n    return;\r\n}\r\n```\r\n\r\nWith this PR, plugins can use `Bukkit.isTickingWorlds()` to tell when the worlds are being ticked. The first example now looks like this:\r\n```java\r\nif(!Bukkit.isTickingWorlds()) {\r\n    // Alright, it's safe to go ahead\r\n    Bukkit.createWorld()/unloadWorld();\r\n} else {\r\n    // Alright, I'll do it later\r\n}\r\n```",
    "head_branch": "isTickingAPI",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add method isTickingWorlds to Bukkit (#8316)\n\nCo-authored-by: Shane Freeder <theboyetronic@gmail.com>\r\n\r\nAlso, restores un/loading worlds mid tick. This will not be officially supported API contract that such a routine is safe, and these restrictions may be restored in the future."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a6d5d9087c4d6d376772",
    "number": 8315,
    "body": "The code in net.minecraft.server.MinecraftServer previously looked like this:\r\n```java\r\npublic abstract class MinecraftServer ... {\r\n    ...\r\n    public boolean isIteratingOverLevels = false; // Paper\r\n    ...\r\n\r\n    public void tickChildren(BooleanSupplier shouldKeepTicking) {\r\n        ...\r\n        Iterator iterator = this.getAllLevels().iterator();\r\n\r\n        // CraftBukkit start\r\n        // Run tasks that are waiting on processing\r\n        MinecraftTimings.processQueueTimer.startTiming(); // Spigot\r\n        while (!this.processQueue.isEmpty()) {\r\n            this.processQueue.remove().run();\r\n        }\r\n        MinecraftTimings.processQueueTimer.stopTiming(); // Spigot\r\n\r\n        MinecraftTimings.timeUpdateTimer.startTiming(); // Spigot // Paper\r\n        // Send time updates to everyone, it will get the right time from the world the player is in.\r\n        // Paper start - optimize time updates\r\n        for (final ServerLevel world : this.getAllLevels()) {\r\n            ...\r\n        }\r\n        // Paper end\r\n        MinecraftTimings.timeUpdateTimer.stopTiming(); // Spigot // Paper\r\n\r\n        this.isIteratingOverLevels = true; // Paper\r\n        while (iterator.hasNext()) {\r\n            ...\r\n        }\r\n        this.isIteratingOverLevels = false; // Paper\r\n        ...\r\n    }\r\n}\r\n```\r\n\r\nThe flag added by Paper, `isIteratingOverLevels`, is used to prevent `CraftServer#createWorld` and `CraftServer#unloadWorld` from adding or removing from the levels map while the levels map is being iterated through. However, in between the Iterator being created and the flag being set, the process queue and time updates are processed. The time updates are probably not an issue, but the code run by the process queue could potentially try to load or unload a world. As Multiverse/Multiverse-Core#2800 discovered, this causes a crash on older versions of Paper.\r\n\r\nWith this PR, the code in net.minecraft.server.MinecraftServer now looks like this:\r\n```java\r\npublic abstract class MinecraftServer ... {\r\n    ...\r\n    public boolean isIteratingOverLevels = false; // Paper\r\n    ...\r\n\r\n    public void tickChildren(BooleanSupplier shouldKeepTicking) {\r\n        ...\r\n\r\n        // CraftBukkit start\r\n        // Run tasks that are waiting on processing\r\n        MinecraftTimings.processQueueTimer.startTiming(); // Spigot\r\n        while (!this.processQueue.isEmpty()) {\r\n            this.processQueue.remove().run();\r\n        }\r\n        MinecraftTimings.processQueueTimer.stopTiming(); // Spigot\r\n\r\n        MinecraftTimings.timeUpdateTimer.startTiming(); // Spigot // Paper\r\n        // Send time updates to everyone, it will get the right time from the world the player is in.\r\n        // Paper start - optimize time updates\r\n        for (final ServerLevel world : this.getAllLevels()) {\r\n            ...\r\n        }\r\n        // Paper end\r\n        MinecraftTimings.timeUpdateTimer.stopTiming(); // Spigot // Paper\r\n\r\n        this.isIteratingOverLevels = true; // Paper\r\n        Iterator iterator = this.getAllLevels().iterator(); // Paper - move down\r\n        while (iterator.hasNext()) {\r\n            ...\r\n        }\r\n        this.isIteratingOverLevels = false; // Paper\r\n        ...\r\n    }\r\n}\r\n```\r\nSimple fix, `Iterator iterator = this.getAllLevels().iterator();` was just moved down to after the processQueue and time updates. Now, there is no instance where the levels iterator has been created but `isIteratingOverLevels` has been set. Following a minimal diff policy, I did not replace the Iterator+while loop with an enhanced for loop.\r\n\r\n### A note on the importance of this change:\r\nI said earlier that the current code had the potential to crash on **old** versions of Paper. The example from Multiverse was using [Paper#91](https://papermc.io/downloads). On the current version of Paper, doing the same thing that the Multiverse user did would likely not cause a crash. This is because this problem was already \"fixed\" by [SPIGOT-7089](https://hub.spigotmc.org/jira/browse/SPIGOT-7089), which was resolved by making the levels map effectively copy-on-write, avoiding the ConcurrentModificationException that crashed the server. This fix has been in Paper since [Paper#126](https://papermc.io/downloads).\r\n\r\nHowever, following the precedence of #8300, Paper aims to avoid the unsafe operation of unloading a world while it is being ticked for its [potential to cause crashes in the future](https://github.com/PaperMC/Paper/issues/8300#issuecomment-1219869083). Without this PR, it is possible for a world to be unloaded by a Runnable in the processQueue, then ticked after it has been unloaded. To avoid this potential problem, this PR should be included.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Avoid potential place where the world map could be modified after its iterator is created (#8315)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6d6d9087c4d6d376773",
    "number": 8310,
    "body": "This PR changes two things:\r\n- Allow world creation while worlds are being ticked (previously an IllegalStateException would be thrown)\r\n- Delay world unload until worlds are not being ticked (previously an IllegalStateException would be thrown)\r\n\r\nThis aligns Paper's behavior with Spigot's after [SPIGOT-7089](https://hub.spigotmc.org/jira/browse/SPIGOT-7089) was resolved, which fixed an error that occurred if worlds were loaded or unloaded while being ticked (Previously, Paper had fixed this by throwing IllegalStateExceptions: #7653 and #8081). With this PR, Spigot and Paper agree and allow worlds to be loaded/unloaded while being ticked.\r\n\r\nTo address the concerns of [this comment](https://github.com/PaperMC/Paper/issues/8300#issuecomment-1218202104), if the worlds are being ticked Paper will not unload a world immediately. Instead, the task that unloads the world will be packaged in a Runnable and stored in a list to be run immediately after the worlds are done being ticked. ",
    "head_branch": "8300",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6d7d9087c4d6d376774",
    "number": 8307,
    "body": "Add some missing effect cause for the EntityPotionEffectEvent\r\nIt would be cool if we can make the conversion cause generic for the following (missing) case:\r\n- Hoglin to Zoglin\r\n- Piglin to ZombifiedPiglin\r\n\r\nBut i'm open to feedback\r\nAlso i'm not sure for the honey bottle between FOOD and POTION_DRINK",
    "head_branch": "feat/effectcause",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Missing some effect cause (#8307)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6d8d9087c4d6d376775",
    "number": 8306,
    "body": "https://github.com/PaperMC/Paper/issues/8301",
    "head_branch": "fix/allow-readonly-configuration",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6d9d9087c4d6d376776",
    "number": 8299,
    "body": "Some minimal addition.",
    "head_branch": "feat/entitytimeapi",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6dad9087c4d6d376777",
    "number": 8298,
    "body": "Some entity must spawn using some specific method. This allow to change the spawn reason for theses entity as well",
    "head_branch": "feat/spawnreasonapi",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6dbd9087c4d6d376778",
    "number": 8297,
    "body": "Smoll separate addition, not putting this in the monster entity api PR as this adds functionality.\r\n\r\nIn the future, might be better to make a common interface that can be used. We can't use ageable since the adult is a separate entity.",
    "head_branch": "tadpole-ageable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Tadpole lock API (#8297)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a6dcd9087c4d6d376779",
    "number": 8296,
    "body": "https://github.com/PaperMC/Paper/issues/8283",
    "head_branch": "fix/warden-spawn-reason",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6ddd9087c4d6d37677a",
    "number": 8295,
    "body": "https://github.com/PaperMC/Paper/issues/8246\r\n\r\n(Second try)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6ded9087c4d6d37677b",
    "number": 8294,
    "body": "The old setPlayerProfile would cause a duplicate player to appear in tab list because the previous game profile was not removed properly. This caused it to not work at all.\r\n\r\nThis also moves a bunch of the deprecation patches to the correct patch.\r\nHowever, it might be better to merge those patches together (merger plz).",
    "head_branch": "fix/setprofile",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6dfd9087c4d6d37677c",
    "number": 8293,
    "body": "https://github.com/PaperMC/Paper/issues/8289#issue-1338013513",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6e0d9087c4d6d37677d",
    "number": 8292,
    "body": "Methods are in UnsafeValues due to the possibility of them being removed in the future when we do more chunkgen/biome stuff, but for now this is the only way to get the underlying key for actual biomes.\r\n\r\nRebases and Closes #5503",
    "head_branch": "feat/biome-keys",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add NamespacedKey biome methods\n\nCo-authored-by: Thonk <30448663+ExcessiveAmountsOfZombies@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a6e1d9087c4d6d37677e",
    "number": 8291,
    "body": "This close #8251 adding the annotation for show in javadocs like mentioned the author in the same issue.\r\n\r\nPreview.\r\n![image](https://user-images.githubusercontent.com/3602279/184545314-8a55a6ea-654f-4c8c-be2d-8216c7412f29.png)\r\n\r\nNote.\r\nlooks very bad the annotation but well....",
    "head_branch": "fix/8251/docs-bukkit.UndefinedNullability",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Show @org.bukkit.UndefinedNullability in javadocs (#8291)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a6e2d9087c4d6d37677f",
    "number": 8287,
    "body": "Passing null into the vanilla method returns the anger level towards whatever entity it has the highest anger",
    "head_branch": "dumb",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6e3d9087c4d6d376780",
    "number": 8286,
    "body": "Correct some legacy/typo in javadoc\r\nMost important changes is the deprecation of the setSwimming method for all entities,\r\nthe cancellation of the EntityToggleSwimEvent, ~the ocelot_baby spawn reason and\r\nthe shouldGenerateBedrock~ (beaten by upstream, again) method\r\nThese features has been either removed by spigot due to mojang changes or simply doesn't work. I'm okay to remove theses deprecation notice when theses features are re-implemented by spigot or paper ? But for now the developers should be aware of that.",
    "head_branch": "fix/upjavadoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Correct upstream/paper javadoc (#8286)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a6e4d9087c4d6d376781",
    "number": 8285,
    "body": null,
    "head_branch": "local",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6e5d9087c4d6d376782",
    "number": 8284,
    "body": "This adds the getDrops and isPreferredTool methods to BlockState, as only Block had these methods before. It was not possible to get the drops of a BlockState before.\r\nThe getDrops and isPreferredTool methods in Block actually only used the blockState, so this change was mostly just copied from Block. \r\n",
    "head_branch": "feat/blockstate-adddrops",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add getDrops to BlockState and isPreferredTool to BlockData (#8284)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a6e6d9087c4d6d376783",
    "number": 8282,
    "body": "Reduce the impact from EAR on hopper minecart based unloaders by making them immune to\r\nEAR while pulling objects. The EAR is still active outside misc activation range when\r\nthe hopper minecart is idle, keeping lag low.\r\n\r\nSee issue #8281 ",
    "head_branch": "hopper_minecart_ear",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Grant temporary immunity to hopper minecarts while actively pulling (fixes #8281) (#8282)\n\nReduce the impact from EAR on hopper minecart based unloaders by making them immune to\r\nEAR while pulling objects. The EAR is still active outside misc activation range when\r\nthe hopper minecart is idle, keeping lag low."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6e7d9087c4d6d376784",
    "number": 8280,
    "body": "[Javadoc](https://jd.papermc.io/paper/1.17/org/bukkit/event/entity/EntityCombustByBlockEvent.html#getCombuster()) states that EntityCombustByBlockEvent's combuster can be lava, implying that it is called when an entity is combusted by lava. This functions fine for all LivingEntities, however when the Entity is an ItemEntity this is overlooked, even though it can be set on fire (and this event is called when an Item enters a fire block). This pr changes the server's behaviour to also fire the event when an ItemEntity is combusted by lava. ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6e8d9087c4d6d376785",
    "number": 8276,
    "body": "Fix [#8229](https://github.com/PaperMC/Paper/issues/8229)",
    "head_branch": "fix/map-cursors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix mad cursor addition via API (#8276)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6e9d9087c4d6d376786",
    "number": 8274,
    "body": "Closes https://github.com/PaperMC/Paper/issues/8214\r\n\r\ncraftbukkit apply a sync of the position of the rider in the same time that the vehicle move (probably for the later event)\r\nbut the sync here isn't enough powerfull to handle the rider Y offset and even applying a total positionRider will not solve all the issue.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-8274.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/810655063.zip)",
    "head_branch": "fix/rideoff",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6ead9087c4d6d376787",
    "number": 8272,
    "body": "Don't submit to the command pool while on shutdown.\r\n\r\nSubmitting throws an exception, might just be better to wrap it in a try catch? Unsure.",
    "head_branch": "fix/dontsubmitonshutdown",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix command pool submitting on shutdown (#8272)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6ebd9087c4d6d376788",
    "number": 8270,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nd43a1e72 SPIGOT-2450: Improve scoreboard criteria API, add missing DisplaySlots\r\n9d6e4847 SPIGOT-7122: New Allay Methods from 1.19.1\r\n\r\nCraftBukkit Changes:\r\nc379a6b4e SPIGOT-2450: Improve scoreboard criteria API, add missing DisplaySlots\r\n051fcced1 SPIGOT-7122: New Allay Methods from 1.19.1",
    "head_branch": "upstream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#8270)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nd43a1e72 SPIGOT-2450: Improve scoreboard criteria API, add missing DisplaySlots\r\n9d6e4847 SPIGOT-7122: New Allay Methods from 1.19.1\r\n\r\nCraftBukkit Changes:\r\nc379a6b4e SPIGOT-2450: Improve scoreboard criteria API, add missing DisplaySlots\r\n051fcced1 SPIGOT-7122: New Allay Methods from 1.19.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a6ecd9087c4d6d376789",
    "number": 8267,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Added the missing \"d\" character (#8267)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6edd9087c4d6d37678a",
    "number": 8264,
    "body": "Closes https://github.com/PaperMC/Paper/issues/8191\r\n\r\nCall this event for:\r\n- rail, redstone diodes and wires\r\n- more often in survival\r\n- when fluid is removed (not when placed a last quirk...)\r\nand probably more\r\n",
    "head_branch": "fix/physicsevnt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Call BlockPhysicsEvent more often (#8264)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6efd9087c4d6d37678b",
    "number": 8263,
    "body": "Closes https://github.com/PaperMC/Paper/issues/8209\r\n\r\n----\r\n\r\nClarifies that Inventory#removeItem only removes items from the storage contents of the inventory.",
    "head_branch": "fix/javadoc/Inventory#removeItem",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve documentation of Inventory#removeItem (#8263)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a6f0d9087c4d6d37678c",
    "number": 8262,
    "body": "@Machine-Maker ",
    "head_branch": "fix/player-chat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Player#chat kicking all clients (#8262)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6f1d9087c4d6d37678d",
    "number": 8261,
    "body": null,
    "head_branch": "mojangapi-docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Improve MojangAPI docs and replace @Deprecated with @ApiStatus.Experimental on draft APIs (#8261)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a6f2d9087c4d6d37678e",
    "number": 8259,
    "body": "Sort of fixes https://github.com/PaperMC/Paper/issues/7412\r\n\r\nIf you enable preventMovingIntoUnloadedChunks, this behavior will occur again.\r\nHowever, since preventMovingIntoUnloadedChunks is false by default this will no longer be able to occur unless\r\nspecifically configured.",
    "head_branch": "fix/7412",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Respect preventMovingIntoUnloadedChunks for optimized collision checking (#8259)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6f3d9087c4d6d37678f",
    "number": 8258,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/7142",
    "head_branch": "fix/7142",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Cleanup reputation API + back with an EnumMap instead of array (#8258)\n\nResolves: #7142"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a6f4d9087c4d6d376790",
    "number": 8254,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/4793\r\nSupercedes https://github.com/PaperMC/Paper/pull/5139\r\n\r\n(Vanilla does not normally send entity data here at all)\r\nThe issue is it reintroduces some of the issues specified in: https://github.com/SpigotMC/BungeeCord/issues/2321\r\n\r\nOpinions here?",
    "head_branch": "fix-hearts",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6f5d9087c4d6d376791",
    "number": 8253,
    "body": "This caused a moment where the player entity is sent with the previous location, and the teleport packet which is sent shortly after is meant to correct that. Players with high ping might see it in the incorrect location.\r\n\r\nFixes #6511",
    "head_branch": "fix-portal-desync",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix player desync on dimension change (#8253)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6f6d9087c4d6d376792",
    "number": 8252,
    "body": "https://streamable.com/ooz2oi\r\n\r\nThis is what i have come up with to detect if a thrown projectile hits the worldborder. \r\n\r\nSome input if this is a good idea would be appreciated.",
    "head_branch": "thrownProjectileBorderCollision",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6f7d9087c4d6d376793",
    "number": 8250,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nbf60995c Update to Minecraft 1.19.2\r\n\r\nCraftBukkit Changes:\r\nec2b5d4cd Update to Minecraft 1.19.2\r\n\r\nSpigot Changes:\r\n584b459d Update to Minecraft 1.19.2",
    "head_branch": "dev/1.19.2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "1.19.2 (#8250)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6f8d9087c4d6d376794",
    "number": 8249,
    "body": "Allows more flexibility for command frameworks in handling invalid syntax and etc",
    "head_branch": "legacy-cre",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Allow old behavior for CommandRegisteredEvent (#8249)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a6f9d9087c4d6d376795",
    "number": 8248,
    "body": "Fixes #4241",
    "head_branch": "fix/4241",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6fad9087c4d6d376796",
    "number": 8247,
    "body": "Fixes being able to teleport behind the worldborder with an enderpearl",
    "head_branch": "enderpearlWorldborderBehaviour",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6fbd9087c4d6d376797",
    "number": 8245,
    "body": null,
    "head_branch": "feature/banners-material-tag",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6fcd9087c4d6d376798",
    "number": 8244,
    "body": "Correct the javadoc of the eating regain reason because currently only animal trigger this and not the player\r\nAlso add the missing reason for the llama and the cat\r\nI'm not sure if we can consider also the iron golem with the iron ingots ?",
    "head_branch": "fix/regaineat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Missing eating regain reason (#8244)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a6fdd9087c4d6d376799",
    "number": 8243,
    "body": "Closes https://github.com/PaperMC/Paper/issues/7860\r\n\r\nCurrently i have just added a boolean (and keep the old behavior by default)\r\nwhich will load the location of the block and check if the spawn block is valid\r\n\r\nThe default behavior is the following\r\noffline: load = false\r\nonline: load = true\r\n\r\nI'm not sure if it's better to do that for minimal diff or to completely rewrite two new methods (with a better name cause bedSpawnLoc name isn't accurate anymore with the respawn anchor) one to only get the stored position\r\nand another to check that position (and maybe deprecate the old method), so feedback are welcome",
    "head_branch": "fix/offloc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6fed9087c4d6d37679a",
    "number": 8242,
    "body": "This closes #8230 by adding a new configuration option at `messages.motd` in `paper-global.yml` that overrides the value of `motd` in `server.properties` if it exists.\r\n\r\nThis is my first contribution, so please let me know if there is anything that I can change; I feel like there may have been some curfuffling in the process of rebuilding of the patches, but it functioned as expected when I tested.\r\n\r\nThanks!",
    "head_branch": "feature/#8230",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a6ffd9087c4d6d37679b",
    "number": 8240,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\ncaa7c486 SPIGOT-7109: Add WorldBorder#setSize using TimeUnit\r\n\r\nCraftBukkit Changes:\r\n1e3bf58cd SPIGOT-7109: Add WorldBorder#setSize using TimeUnit",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#8240)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\ncaa7c486 SPIGOT-7109: Add WorldBorder#setSize using TimeUnit\r\n\r\nCraftBukkit Changes:\r\n1e3bf58cd SPIGOT-7109: Add WorldBorder#setSize using TimeUnit"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a700d9087c4d6d37679c",
    "number": 8237,
    "body": "I noticed that `paper:unwaxed_copper_blocks_settag` and `paper:copper_blocks_settag` both contain `Material.RAW_COPPER` (the item, not the raw block) instead of `Material.COPPER_BLOCK`.\r\n\r\nHere is a fix.",
    "head_branch": "copper",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove RAW_COPPER and add COPPER_BLOCK in MaterialTags.UNWAXED_COPPER_BLOCKS and MaterialTags.COPPER_BLOCKS (#8237)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a701d9087c4d6d37679d",
    "number": 8236,
    "body": "This close #8234 adding a new SpawnReason for entity spawned using a bucket.\r\n\r\nThe name of the reason is based in another things with \"spawn\" logic like SPAWNER_EGG",
    "head_branch": "feature/issue8284/bucketspawnreason",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a702d9087c4d6d37679e",
    "number": 8235,
    "body": "Adds the ability for plugins to register their own brigadier commands by using a CommandBuilder.\r\n\r\nSummary\r\n- Deprecates CommandMap, moving all logic to a brig-backed map for legacy support. (All custom brig commands are wrapped in a vanilla command wrapper)\r\n- Moves away from simplecommandmap dispatch for command logic, now brig will always be used.\r\n- Exposes some \"primitive\" vanilla types, with players having the ability to add their own custom arguments using ``WrapperArgumentType``.\r\n- ALL bukkit commands will now be turned into brig nodes, no more syncCommands logic.\r\n- Exposes Server#getCommandDispatcher, which returns a \"mirror\" of the NMS dispatcher. \r\n    - Command nodes that are passed into this are converted into NMS types then passed into the NMS dispatcher.\r\n    - This conversion prevents \"nms object leaking\"\r\n- Our intention is not to make a built in command framework. Instead, suggesting that people use popular frameworks instead.\r\n\r\n:wave: **Hello rich syntax checking!**\r\n![image](https://user-images.githubusercontent.com/23108066/182747087-0bdbda75-fa10-45d1-ae56-c7dd3c6d3b2e.png)\r\n\r\nThey show in the help menu and such just like normal plugins! (Description can be set in the command builder)\r\n![image](https://user-images.githubusercontent.com/23108066/182745848-657d8546-5b61-4aad-8b39-67d679a66498.png)\r\n![image](https://user-images.githubusercontent.com/23108066/182745628-da53b1fb-8b11-4dc5-8d6e-a1f8a581f195.png)\r\n\r\nIndirectly fixes: https://github.com/PaperMC/Paper/issues/6293\r\nhttps://github.com/PaperMC/Paper/issues/8255\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-8235.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/1253868808.zip)",
    "head_branch": "command-recode-thing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a703d9087c4d6d37679f",
    "number": 8233,
    "body": null,
    "head_branch": "fix/profile-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix null profile key breaking nullability contracts for PlayerProfile API (#8233)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a704d9087c4d6d3767a0",
    "number": 8232,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8225\r\nFixes https://github.com/PaperMC/Paper/issues/8329\r\n",
    "head_branch": "fix/UnknownCommandEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix calling UnknownCommandEvent (#8232)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a705d9087c4d6d3767a1",
    "number": 8221,
    "body": "This is a bug accidentally introduced in upstream CB.\r\n\r\nIntroduced in this commit. https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/64c15270e76475e68b2167d4bfba162a4a827fe0#nms-patches/net/minecraft/commands/CommandDispatcher.patch",
    "head_branch": "suggest-bug",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix suggest command message for brigadier syntax exceptions (#8221)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a706d9087c4d6d3767a2",
    "number": 8219,
    "body": "- Update modern forwarding to v3\r\n- Fix the inconsistent state of ServerData when on proxied networks\r\n- Move forwarding patch to the end for future invasive patch (originally part of #8199)",
    "head_branch": "update/modern-forwarding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update modern forwarding to v3 (#8219)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a707d9087c4d6d3767a3",
    "number": 8218,
    "body": "Since forever, the AsyncTabCompleteEvent has been called from the netty IO thread, which is *very* bad, especially considering the patch's descriptions says\r\n> Especially useful if you need to query a database in order to obtain the results for tab\r\ncompletion, such as offline players.\r\n\r\nThe first and third commit are purely cosmetic to merge two patches that should've always just been one (aside from a comment and variable name change), the actual diff is in [the second commit](https://github.com/PaperMC/Paper/commit/f47a42a190a9b83987d952aca028ab1d2f099261), simply wrapping everything in an executor.",
    "head_branch": "dumb-tabcomplete-event-stuff",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Don't call AsyncTabCompleteEvent from netty IO thread (#8218)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a708d9087c4d6d3767a4",
    "number": 8217,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8216\r\n\r\nAs explained in attached issue, this method has had a behaviour change at the time it was deprecated. The deprecation was added because the behaviour was the same as what it was changed to. Given that behaviour was incorrect, I've reverted to the correct and original behaviour, and removed the corresponding deprecation.\r\n\r\nTbh moving it into that enum might make sense at some point anyway - but for now this resolves any plugins that relied on getting a boat item back from this function.",
    "head_branch": "fix/undeprecate-and-fix-boat-getmaterial",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Undeprecate and fix Boat#getBoatMaterial (#8217)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a709d9087c4d6d3767a5",
    "number": 8213,
    "body": "Closes #7395",
    "head_branch": "Entity#hideEntityByDefault",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a70bd9087c4d6d3767a6",
    "number": 8212,
    "body": "Allows you to add custom suggestions in chat.\r\nBetter names are appreciated, but it lets you do stuff like this.\r\n\r\n![image](https://user-images.githubusercontent.com/23108066/181924667-7ec67143-64d3-4134-873e-5e541c6a8358.png)\r\n\r\nI decided not to expose SET chat completions because plugins might override each other, I'm not sure... it might be nice to have as then you have to track which suggestions you have sent in order to reset completions. Feedback? \r\n\r\n(I do not endorse using legacy chars) ",
    "head_branch": "custom-completions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Custom Chat Completions API (#8212)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a70cd9087c4d6d3767a7",
    "number": 8211,
    "body": "This patch allows to disable the popup when joining a server without \"secure chat\", e.g offline-mode servers (also servers behind bungeecord/waterfall) and additionally converts all chat messages to system messages so they can't be reported nor will be flagged as unverified.\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a70dd9087c4d6d3767a8",
    "number": 8210,
    "body": "When I was trying to modify some statistics in batch, I noticed that there wasn't a way to check if a certain statistic and material/entity type combination exists, instead the methods just threw exceptions whenever a certain combination was invalid.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a70ed9087c4d6d3767a9",
    "number": 8208,
    "body": "Warns when plugins do silly stuff with chunks.\r\nWarns the cause of issues like: https://github.com/PaperMC/Paper/issues/7006\r\n\r\n``[12:56:18 WARN]: [Paper-Test-Plugin] Plugin is getting a faraway chunk at (13225852, 22907744), this might cause issues.``\r\n\r\nThis adds a util method that can be used to see if code is executed by another plugin by looking for the first class loaded by a plugin in the stacktrace.\r\n",
    "head_branch": "prevent-far-chunkies",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Warn on plugins accessing faraway chunks (#8208)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a70fd9087c4d6d3767aa",
    "number": 8207,
    "body": "Reopen of #8200 but rebased for master.\r\n\r\nInlines a bunch of import diffs which create merge conflicts and unneeded patch diffs.",
    "head_branch": "inline-imports",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a710d9087c4d6d3767ab",
    "number": 8206,
    "body": "I was coding a plugin and noticed that loadChunk has a override with a chunk parameter, but setChunckForceLoaded does not, so i added it.",
    "head_branch": "setChunkForceLoaded",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a711d9087c4d6d3767ac",
    "number": 8205,
    "body": "New api allows to specify a set of blocks (or rather block positions) that will be ignored when performing a raytrace.\r\n\r\nIt also adds a builder to easily construct raytraces instead of using the world methods with a myriad args.\r\n\r\nShould this be consolidated with previous raytrace patches?",
    "head_branch": "raytracing-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a712d9087c4d6d3767ad",
    "number": 8204,
    "body": "Also added 2 `@DoNotUse` annotations to the 2 disconnect methods that don't have cause parameters. ",
    "head_branch": "feature/1.19-kick-event-causes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added 1.19 kick event causes (#8204)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a713d9087c4d6d3767ae",
    "number": 8203,
    "body": null,
    "head_branch": "paper-command-brig-mappings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a714d9087c4d6d3767af",
    "number": 8200,
    "body": "I have time to burn... and clearly I hate myself...\r\n\r\nOnly API Patches are done so far.",
    "head_branch": "inline-imports",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a715d9087c4d6d3767b0",
    "number": 8199,
    "body": "These changes modify the auth session handler to verify the player key early, if present.    \r\nThis potentially saves session service requests on invalid connections.    \r\nThe Velocity forwarding mode has also been updated to reflect the V2 key forwarding mode    ",
    "head_branch": "update/auth",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a716d9087c4d6d3767b1",
    "number": 8198,
    "body": "Initial support for using signed, or signed+modified messages.\r\n",
    "head_branch": "feature/signed-messages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Initial support for signed messages (#8198)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a717d9087c4d6d3767b2",
    "number": 8196,
    "body": "Just some minor Anti-Xray code style fixes and updating of variable names. (Note that I ofc ran an apply and rebuild cycle. The diff is simple because I edited the patch directly and commited, which led to no hash changes at all.)\r\n\r\nAs always I have also tested and checked all Anti-Xray related stuff by looking at source diffs of relevent (and more) classes and by performing tests. Everything seems to be good.",
    "head_branch": "dev/1.19.1-anti-xray",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Fix xray patch code style (#8196)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a718d9087c4d6d3767b3",
    "number": 8190,
    "body": "Adds the relative flags for a Player#teleport call to the triggered PlayerTeleportEvent.\r\n",
    "head_branch": "fix/teleport-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "include relative flags in PlayerTeleportEvent (#8190)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a719d9087c4d6d3767b4",
    "number": 8189,
    "body": "Changing \"For a sneak peek on upcoming features\" to \"For a sneak peek at upcoming features\".\r\n-----\r\nCredit to @AMetIR\r\n\r\n",
    "head_branch": "Doc-changes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Fix grammatical error in README. (#8189)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a71ad9087c4d6d3767b5",
    "number": 8188,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a71bd9087c4d6d3767b6",
    "number": 8187,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8184",
    "head_branch": "fix/vanilla-bugs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix a handful of vanilla bugs (#8187)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a71cd9087c4d6d3767b7",
    "number": 8183,
    "body": "This close #8182 \r\nThe bug in the issue was introduced by me in upstream... the origin was a [issue](https://hub.spigotmc.org/jira/projects/SPIGOT/issues/SPIGOT-7090) where if use teleport and the location its in another world the coords are change because craftbukkit teleport use `BlockPos` (when change world its related) and this class change the coords from double to int... the fix was use `PositionImpl` and also change the logic when a entity use a portal this cause the issue where decimals was ignored again, this PR change the use of `BlockPos` to `PositionImpl` for this cases and avoid lose this values for plugins.\r\n\r\n~~Perdon el mucho texto.. pero mire el error y me dio algo por dentro~~",
    "head_branch": "fix/issue8182",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a71dd9087c4d6d3767b8",
    "number": 8179,
    "body": "This also deprecates setBurnTime(int burnTime) and fixes its implementation as well\r\nFixes #8178",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a71fd9087c4d6d3767b9",
    "number": 8177,
    "body": "In the future, I want to experiment with ticking separate independent regions of the world in parallel. However, the current chunk system is just not up to that task: The scheduling is tied to the main thread, the chunk holder state is tied to the main thread, and the chunk system cannot fully utilise the worker threads it is given.\r\n\r\nThe new chunk system can be scheduled by any thread and as a result, the only time the chunk generation logic needs to go to the main thread is when it needs to execute generation/load logic that can only be done by the main thread (i.e loading in entity/poi chunks). As a result, chunk generation should be far less affected by lower TPS.\r\n\r\nThe new chunk system is also capable of executing several chunk status generation tasks in parallel. In my testing, chunky was capable of pushing all 8 threads I gave it for generating a new world, unlike the current chunk system.\r\n\r\nCurrent things left to do before this can be merged:\r\n- [x] Verify stability (i.e no save/unload/shutdown/crash issues)\r\n- [x] Plugin compatibility\r\n- [x] Figure out a merge strategy that will allow for this patch to be dropped for game updates, ensuring that it cannot stall any update\r\n- [x] Complete the todo list\r\n\r\nCurrent todo list:\r\n- [x] Make the WatchdogThread and the main thread instances of TickThread and rewrite all of the main thread checks to just check for instanceof. This will result in allowing the watchdog thread to perform chunk system operations without worrying about stalling forever, which is a very common issue that prevents the world from properly saving.\r\n- [x] Do not use ConcurrentHashMap for chunk holders. Need a solution that does not use any locks. Currently, CHM is used so the testing can validate the chunk system without worrying about the internal chunk holder map being broken.\r\n- ~~Make player chunk scheduling asynchronous. Currently, the main thread has to aggressively add and propagate ticket levels and do the initial scheduling work, which isn't negligible and requires mostly good TPS. Once the chunk scheduling is moved to its own thread, chunk generation speed should be mostly independent of TPS and frees the main thread of the burden.~~\r\n- [x] ALL of the TODO comments...\r\n\r\nThere are currently many aspects of the chunk system that need to be tested:\r\n- Chunk generation\r\n- Chunk loading\r\n- Chunk (poi/entity/block) saving\r\n- Chunk (poi/entity/block) unloading, **_especially_** with players that are passengers of an entity or entities that are passengers or vehicles\r\n- All of the above combined with the server shutting down (there is a new shutdown process)\r\n- Plugin compatibility (custom world generators for example)\r\n\r\nIn order to assist with debugging, I've rewritten `/paper debug chunks` and added a new command `/paper holderinfo`. The new paper holderinfo command can be used to see how many read only chunks are in memory as well as protochunks.\r\n\r\nAt this point, the chunk system is very new (in alpha) and as such will likely have problems that can result in data loss or even possibly corruption. Do not use this branch for anything you aren't OK with losing.\r\n\r\nCurrent build: https://cdn.discordapp.com/attachments/876902758366736457/1020824757953904701/paper-paperclip-1.19.2-R0.1-SNAPSHOT-reobf.jar",
    "head_branch": "dev/chunksystem",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Rewrite chunk system (#8177)\n\nPatch documentation to come\r\n\r\nIssues with the old system that are fixed now:\r\n- World generation does not scale with cpu cores effectively.\r\n- Relies on the main thread for scheduling and maintaining chunk state, dropping chunk load/generate rates at lower tps.\r\n- Unreliable prioritisation of chunk gen/load calls that block the main thread.\r\n- Shutdown logic is utterly unreliable, as it has to wait for all chunks to unload - is it guaranteed that the chunk system is in a state on shutdown that it can reliably do this? Watchdog shutdown also typically failed due to thread checks, which is now resolved.\r\n- Saving of data is not unified (i.e can save chunk data without saving entity data, poses problems for desync if shutdown is really abnormal.\r\n- Entities are not loaded with chunks. This caused quite a bit of headache for Chunk#getEntities API, but now the new chunk system loads entities with chunks so that they are ready whenever the chunk loads in. Effectively brings the behavior back to 1.16 era, but still storing entities in their own separate regionfiles.\r\n\r\nThe above list is not complete. The patch documentation will complete it.\r\n\r\nNew chunk system hard relies on starlight and dataconverter, and most importantly the new concurrent utilities in ConcurrentUtil.\r\n\r\nSome of the old async chunk i/o interface (i.e the old file io thread reroutes _some_ calls to the new file io thread) is kept for plugin compat reasons. It will be removed in the next major version of minecraft.\r\n\r\nThe old legacy chunk system patches have been moved to the removed folder in case we need them again."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a720d9087c4d6d3767ba",
    "number": 8176,
    "body": "This close #8144 by using the new teleport API for handle cases where in PlayerMoveEvent the event only change the rotation of the Player.",
    "head_branch": "issue8144",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a721d9087c4d6d3767bb",
    "number": 8174,
    "body": "Fixes #8173 ",
    "head_branch": "fix/me-dum",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix wrong world being passed into portal event (#8174)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a722d9087c4d6d3767bc",
    "number": 8172,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n23f557a0 SPIGOT-5380, SPIGOT-6958, PR-772: Add some missing entity API\r\n\r\nCraftBukkit Changes:\r\nfc3071161 SPIGOT-5380, SPIGOT-6958, PR-1085: Add some missing entity API\r\n\r\n---\r\nI changed the upstreamMerge.sh script to run rebuildPatches with `-Ppaperweight.filter-patches=false` to fix all the indexes. Also I updated the upstreamCommit.sh sed regex replacement.",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#8172)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n23f557a0 SPIGOT-5380, SPIGOT-6958, PR-772: Add some missing entity API\r\n\r\nCraftBukkit Changes:\r\nfc3071161 SPIGOT-5380, SPIGOT-6958, PR-1085: Add some missing entity API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a723d9087c4d6d3767bd",
    "number": 8171,
    "body": "Missing BlockFadeEvent for when a frogspawn hatches, see the behavior on the turtle egg for reference. ",
    "head_branch": "fade-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing BlockFadeEvents (#8171)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a724d9087c4d6d3767be",
    "number": 8170,
    "body": "See: https://canary.discord.com/channels/289587909051416579/925530366192779286/999447366639829093\r\n\r\nI'm not sure if I should shutdownNow or wait, would like feedback here.\r\nBut basically, the idea is to shutdown and stop command sending from being done async and not being closed till very later in the server saving process.\r\n\r\nThere might be more as to what is causing exceptions like this, but shutting it down might be fine here? ",
    "head_branch": "command-sending-pool",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Separate Command Sending to Separate Thread Pool (#8170)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a725d9087c4d6d3767bf",
    "number": 8168,
    "body": "FileAlreadyExistsException occurred when the file name of the plugin being updated was the same as that of the existing plugin.\r\n\r\n`java.nio.file.Files#copy` causes an exception when a file with the same name exists.\r\n\r\nUse temporary files to move plugin files in a safe way.\r\n\r\n#7960 \r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a726d9087c4d6d3767c0",
    "number": 8167,
    "body": "The location of a CommandSourceStack can have a rotation (yaw and pitch) in addition to the position. Actually the returned Location is always facing yaw=pitch=0 and we cannot use this to calculate something like local coordinates (local coordinates is a simple example, but it's maybe better to have a clean Location with the entire information).\r\n\r\nNotice that :\r\n• CommandSourceStack#getRotation() is usually not null but I followed the same idea of getPosition null check.\r\n• We may improve the code by removing one of the two `rot != null`, however, *getBukkitLocation* is hardly ever used so the gain is negligible (and we get less char to add in the patch).",
    "head_branch": "fix-rotation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add yaw and pitch to CommandSourceStack#getBukkitLocation() (#8167)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a727d9087c4d6d3767c1",
    "number": 8165,
    "body": "Close #8164 like mention lynx this is like the spawn of turtles then the spawnreason is the \"EGG\".",
    "head_branch": "feature/issue-8164",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add SpawnReason to Tadpoles spawned by Frogspawn (#8165)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a728d9087c4d6d3767c2",
    "number": 8162,
    "body": "See `-use` in https://docs.oracle.com/en/java/javase/18/docs/specs/man/javadoc.html#standard-options-for-the-standard-doclet",
    "head_branch": "feat/javadoc-use",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Readd \"Use\" Javadoc tab (#8162)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a729d9087c4d6d3767c3",
    "number": 8161,
    "body": "Works for every biome except Biome.CUSTOM, not sure how to handle that.",
    "head_branch": "feat/biome-translatable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make Biome implement Translatable (#8161)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a72ad9087c4d6d3767c4",
    "number": 8158,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nd90bdc08 PR-771: Throw IllegalAccessException with non-static getHandlerList",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit) (#8158)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a72bd9087c4d6d3767c5",
    "number": 8156,
    "body": "Title pretty much says it all.\r\n\r\nOverstacking cursed books can be very useful for item filters, and I have played on multiple servers running Paper which sadly couldn't use this bug/inconsistency.\r\n\r\nThe maintenance cost should be pretty low, since it's just a config value.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add config setting for grindstone overstacking (#8156)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a72cd9087c4d6d3767c6",
    "number": 8152,
    "body": "Closes https://github.com/PaperMC/Paper/issues/7446\r\n\r\nThis allow more flexibility for plugins to restart or shutdown the server with other external app:\r\n- Exit the process with a non zero exit code (also plugin should avoid the 70 exit code already used for watchdog)\r\n=> server.abnormalShutdown(exitCode)\r\n\r\n- Restart the process without a script but using a runnable this allow plugin to do more things without adding a new shutdown hook. Also plugin can easier choose the right executing order \r\n=> server.restart(() ->...)\r\n\r\nKeep in mind that theses functions must be called on the **main thread** (to avoid background process, data loss and file lock).\r\n\r\nAlso i have added a new config option: predictShellOnRestart (true by default)\r\nBy default when server restart spigot predict which shell will be used for windows and \"others\" but this behavior can cause some trouble in container or when the predicted shell is not available for X reason",
    "head_branch": "feat/shutdown",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a72dd9087c4d6d3767c7",
    "number": 8151,
    "body": "This fix #8145 like mention the issue _someone_ forget validate the old code in the release of Spigot 1.19 then the commands.spam-exclusions is not working.\r\n_This can be a upstream fix but not exists docs about how edit patchs.. then more easy here.. and well only here this was noticed xd_",
    "head_branch": "fix/issue-8145",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix spigot config not using commands.spam-exclusions (#8151)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a72ed9087c4d6d3767c8",
    "number": 8150,
    "body": "My first PR, hopefully it isn't too fucked up. Called for when entities move into non ticking chunks, for example if you shoot an arrow too far it just stops mid-air.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a72fd9087c4d6d3767c9",
    "number": 8148,
    "body": null,
    "head_branch": "update-eigencraft-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix missing redstone event call with Eigencraft redstone (#8148)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a731d9087c4d6d3767ca",
    "number": 8147,
    "body": "Added a way to get the signature info from client chat messages.\r\n\r\nKept the original component as-is, to make sure it's the exact same content as sent by the client, since it may be used for validation.\r\n\r\nA future improvement could be to forward this to the receivers if the content wasn't modified by plugins (or as unsigned content if the server wants to).",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a732d9087c4d6d3767cb",
    "number": 8139,
    "body": "The recent update to the Eigencraft patch introduced a [bug](https://github.com/PaperMC/Paper/issues/8138) that saw indirect shape updates omitted entirely, which can leave newly placed wire blocks in an invalid state (not updating their connections). This PR re-introduces those indirect shape updates to fix that issue. This does result in a slight performance penalty (or rather, it undoes the performance gain from the recent update).",
    "head_branch": "update-eigencraft-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #8138 (#8139)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a733d9087c4d6d3767cc",
    "number": 8136,
    "body": "Call EntityChangeBlockEvent when frogs lay eggs in the lake",
    "head_branch": "feat/frogegg",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Call EntityChangeBlockEvent for frogs egg (#8136)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a734d9087c4d6d3767cd",
    "number": 8132,
    "body": "Partial implementation of #2541\r\nRemove the hardcoded damage value ~and allow critical damage (for plugin)~\r\nI think plugin can implement the other things like knockback etc themselves",
    "head_branch": "feat/tridentface",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow custom damage for trident (#8132)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a735d9087c4d6d3767ce",
    "number": 8131,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8197",
    "head_branch": "fix/chat-stuff",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Separate out chat and commands sent via API (#8131)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a736d9087c4d6d3767cf",
    "number": 8128,
    "body": "Closes https://github.com/PaperMC/Paper/issues/6719\r\n\r\nThis allow block data into the CanDestroyOn and CanPlaceOn tags for vanilla state.\r\nThe deprecated material and namespaced key will now be backed into a block data with default state (internal)\r\nThe getters now check both tags, data and namespaced keys.\r\n\r\nExamples:\r\n```Java\r\n\tItemStack stack = new ItemStack(Material.DIAMOND_PICKAXE);\r\n        ItemMeta meta = stack.getItemMeta();\r\n        meta.setCanDestroy(Set.of(Material.CHEST));\r\n        stack.setItemMeta(meta);\r\n\r\n        ItemStack stack2 = new ItemStack(Material.DIAMOND_PICKAXE);\r\n        ItemMeta meta2 = stack2.getItemMeta();\r\n        meta2.setDestroyableKeys(Set.of(Material.CHEST.getKey()));\r\n        stack2.setItemMeta(meta2);\r\n\r\n        ItemStack stack3 = new ItemStack(Material.DIAMOND_PICKAXE);\r\n        ItemMeta meta3 = stack3.getItemMeta();\r\n        meta3.setDestroyableDatas(Set.of(Material.CHEST.createBlockData(\"[facing=north]\")));\r\n        stack3.setItemMeta(meta3);\r\n\r\n        e.getPlayer().getInventory().setItem(0, stack);\r\n        e.getPlayer().getInventory().setItem(1, stack2);\r\n        e.getPlayer().getInventory().setItem(2, stack3);\r\n```",
    "head_branch": "fix/metastate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a737d9087c4d6d3767d0",
    "number": 8127,
    "body": "https://github.com/PaperMC/Paper/commit/172d260d677a05c59e9e8f3f6bfe9216063eef72#r78280454\r\n\r\n_Close this PR if you decide to leave that typo as it is._",
    "head_branch": "fix-typos-and-misc-improvements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a738d9087c4d6d3767d1",
    "number": 8126,
    "body": "Hello,\r\n\r\nAs I mentionned in #8125, I wanted to detect when a copper block is being cleared by a lightning strike. Owen advised me to use EntityChangeBlockEvent instead of EntityBlockFormEvent, so I did.\r\n\r\nI tested the patch on my local server and everything works as expected.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Copper clear on lightning strike calls EntityChangeBlockEvent (#8126)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a739d9087c4d6d3767d2",
    "number": 8125,
    "body": "Hello,\r\n\r\nI basically wanted to detect when a copper block is being cleared by a lightning strike, but I realized that there is no event to detect it. So I added this patch to call EntityBlockFormEvent everytime such a block has changed.\r\n\r\nI didn't know if I had to call BlockForm or modify LightningStrikeEvent, but EntityBlockFormEvent seems to be the most relevant event to call. I kept static methods to minimize the diff but I can remove these static and use only `this` instead of transmit the lightning instance. I also changed the way it changes the block to call the event more easily, if it generates too much lag or it is not good, I also can change it and only keep the event call then the way it changes the block before. However, I tested the patch on my local server and everything works as attended (cancel, not cancel so copper is cleared).",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a73ad9087c4d6d3767d3",
    "number": 8124,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n607ce370 SPIGOT-7069: Material.BARREL has Directional data class, should also be Openable\r\nf14cea82 SPIGOT-7070: Material.SCULK_VEIN has Waterlogged data class, should also be MultipleFacing\r\n8e43b278 PR-767: Add support checking/survivability methods for BlockData\r\nb3dee151 SPIGOT-7083: Add Boat.WoodenType, Boat.Status; deprecate TreeSpecies\r\n\r\nCraftBukkit Changes:\r\n9a8e08010 SPIGOT-7069: Material.BARREL has Directional data class, should also be Openable\r\n26bd88ccd SPIGOT-7070: Material.SCULK_VEIN has Waterlogged data class, should also be MultipleFacing\r\n7ba06e15b SPIGOT-7095: StructureGrowEvent doesn't fire for mangrove propagules growing to a tree\r\n163e35c91 PR-1079: Add support checking/survivability methods for BlockData\r\n4230f8f0e SPIGOT-7083: Add Boat.WoodenType, Boat.Status; deprecate TreeSpecies\r\n\r\nSpigot Changes:\r\n14a2382f Rebuild patches",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#8124)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n607ce370 SPIGOT-7069: Material.BARREL has Directional data class, should also be Openable\r\nf14cea82 SPIGOT-7070: Material.SCULK_VEIN has Waterlogged data class, should also be MultipleFacing\r\n8e43b278 PR-767: Add support checking/survivability methods for BlockData\r\nb3dee151 SPIGOT-7083: Add Boat.WoodenType, Boat.Status; deprecate TreeSpecies\r\n\r\nCraftBukkit Changes:\r\n9a8e08010 SPIGOT-7069: Material.BARREL has Directional data class, should also be Openable\r\n26bd88ccd SPIGOT-7070: Material.SCULK_VEIN has Waterlogged data class, should also be MultipleFacing\r\n7ba06e15b SPIGOT-7095: StructureGrowEvent doesn't fire for mangrove propagules growing to a tree\r\n163e35c91 PR-1079: Add support checking/survivability methods for BlockData\r\n4230f8f0e SPIGOT-7083: Add Boat.WoodenType, Boat.Status; deprecate TreeSpecies\r\n\r\nSpigot Changes:\r\n14a2382f Rebuild patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a73bd9087c4d6d3767d4",
    "number": 8123,
    "body": "properly catch chat from `Player#chat` (and any other plugins that might call `ServerGamePacketListenerImpl#chat` with async set to false while not on the main thread)\r\n\r\nAlso clarify asynchronous status of AsyncChatEvent (javadocs taken from AsyncPlayerChatEvent)",
    "head_branch": "fix/disallow-async-api-chat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Properly disallow async Player#chat (#8123)\n\nClarify asynchronous status of AsyncChatEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a73cd9087c4d6d3767d5",
    "number": 8122,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8116\r\n\r\nThere are several cases where the entity constructor uses the thread-unsafe random on Level in the constructor. This hampers plugins ability to create entity instances off the main thread for world gen. Using the entity's random is fine, since paper already makes that thread safe as opposed to vanilla where it's unsafe.\r\n\r\nI only found 3 instances of this, the 2 bee places from the linked issue, then one in ItemEntity and one in PrimedTnt. \r\n\r\nJust a note, you can't create EnderDragon instances off the main thread since that tries to fire EnderDragonChangePhaseEvent asynchronously when the event isn't marked as such (throwing an exception).\r\n\r\nI don't see any apparently problem with using the entity's random over the level's. Entity constructors also use their own in places, so there isn't a pattern that I see.",
    "head_branch": "fix/level-random-concurrence",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't use level random in entity constructors (#8122)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a73dd9087c4d6d3767d6",
    "number": 8120,
    "body": "Paper's `PlayerProfile` interface has an `update()` method that returns a `CompletableFuture<bukkit.PlayerProfile>` when it should be a `CompletableFuture<paper.PlayerProfile`.\r\n\r\nYou should be able to change the return generic param to include `? extends bukkit.PlayerProfile` without breaking ABI.",
    "head_branch": "fix/player-profile",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix update future return type (#8120)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a73ed9087c4d6d3767d7",
    "number": 8119,
    "body": "Adding an event which is called after an item was consumed by a player, which allows building mechanics based on consumption. The `org.bukkit.event.player.PlayerItemConsumeEvent` does not allow those operations safely, as the event can still be cancelled or the consumed Item be changed.",
    "head_branch": "feat/add-PlayerItemConsumedEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a73fd9087c4d6d3767d8",
    "number": 8117,
    "body": "Closes https://github.com/PaperMC/Paper/issues/7288\r\nPlugin can now gets the offline persistent data of a player. ~The current behavior is like the Machine's Advancement PR:\r\nAll setters re-save the data directly into the disk~\r\nNote also that if spigot config disablePlayerDataSaving is enabled, the data will not be written",
    "head_branch": "feat/offpdc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a740d9087c4d6d3767d9",
    "number": 8112,
    "body": "Cleaned up some code + reduces merge conflicts from command patches stepping on each other\r\n\r\nCurrently subcommand labels and aliases are defined in PaperCommand, a possible change is to have a method on PaperSubcommand that returns labels/aliases. In my opinion it's fine as is, but just throwing the idea out there, open to feedback.",
    "head_branch": "refactor-paper-command",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Refactor paper command (#8112)\n\n* Refactor paper command\r\n\r\n* Improve paper dumpitem output\r\n\r\n* Register paper command permissions\r\n\r\nWould be nice to add descriptions for these too, but that's an enhancement for another time\r\n\r\n* Update MobcapsCommandTest fail message\r\n\r\n* Notify on bad radius for fix light\r\n\r\n* fixup rebase"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a741d9087c4d6d3767da",
    "number": 8111,
    "body": "The ZombieVillager#setConversionTime API method internally calls\r\nstartConversion which always broadcasts the entity event responsible for\r\nplaying the respective sound at the beginning of a conversion.\r\n\r\nThis is not always wanted by developers when modifying already\r\nconverting zombies in particular.\r\n\r\nThis commit expands the ZombieVillager interface with another overload\r\nof the setConversionTime method that also takes a simple toggle flag\r\nindicating whether or not the entity event should be published to the\r\nworld.",
    "head_branch": "feature/zombie-villager-conversion-without-entity-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add ZombieVillager conversion without entity event (#8111)\n\nThe ZombieVillager#setConversionTime API method internally calls\r\nstartConversion which always broadcasts the entity event responsible for\r\nplaying the respective sound at the beginning of a conversion.\r\n\r\nThis is not always wanted by developers when modifying already\r\nconverting zombies in particular.\r\n\r\nThis commit expands the ZombieVillager interface with another overload\r\nof the setConversionTime method that also takes a simple toggle flag\r\nindicating whether or not the entity event should be published to the\r\nworld."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a742d9087c4d6d3767db",
    "number": 8109,
    "body": null,
    "head_branch": "fix/Player#chat-async",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a743d9087c4d6d3767dc",
    "number": 8108,
    "body": "This implements paper plugins, which can be created by ``paper-plugin.yml`` in your plugin resources.\r\nAt runtime, they are all in the end the same \"JavaPlugins\". However, in the future, it is possible that this can be expanded.\r\nNote: You can have both paper plugin and spigot plugin ymls and paper will prioritize the paper yml. The goal is to also have paper and spigot plugins work fine together (because again, they are the same at run time).\r\n\r\n**This was opened to collect a lot of feedback**\r\nDifference between paper plugins:\r\n- library loading is done at runtime by plugin loaders, not anymore in the config.\r\n- They have a cool ``bootstrapper`` field, allowing code to be executed even before a Minecraft server is created!\r\n- Cannot be pre-1.19\r\n- Cannot be loaded on spigot servers (shocker)\r\n\r\nResolves:\r\nhttps://github.com/PaperMC/Paper/issues/5992\r\nhttps://github.com/PaperMC/Paper/issues/7961\r\nhttps://github.com/PaperMC/Paper/issues/7955\r\n\r\n---\r\n### Final testing process\r\nHoping to target this release to allow for future API to move forward. Please test this on your servers to ensure that all spigot plugins work.\r\nPaper plugins will be **experimental**.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-8108.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/563289954.zip)",
    "head_branch": "plugin-work",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Paper Plugins (#8108)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a744d9087c4d6d3767dd",
    "number": 8107,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8105\r\n\r\nThere are probably more of these, and they can be added to this patch when someone finds them, or reports them.",
    "head_branch": "fix/bee-npe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Bee setFlower NPE (#8107)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a746d9087c4d6d3767de",
    "number": 8104,
    "body": null,
    "head_branch": "dev/1.19-anti-xray",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "1.19 Anti-Xray cleanup (#8104)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a747d9087c4d6d3767df",
    "number": 8103,
    "body": null,
    "head_branch": "feature/command-block-sender",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a748d9087c4d6d3767e0",
    "number": 8100,
    "body": "The ravager beast can jump when there are no leaves around and when he is stuck by some solid blocks and try to follow a target",
    "head_branch": "fix/jumpravager",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Call jump event for the beast (#8100)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a749d9087c4d6d3767e1",
    "number": 8099,
    "body": "The new block data of this event is wrong when the gamerule mobGriefing is false and the silverfish try to call its friends in the nearby infested blocks",
    "head_branch": "fix/silverevnt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix new block data in EntityChangeBlockEvent for silverfish when mobGriefing isn't enabled (#8099)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a74ad9087c4d6d3767e2",
    "number": 8097,
    "body": null,
    "head_branch": "fix/piglin-interest-items",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix custom piglin interest items (#8097)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a74bd9087c4d6d3767e3",
    "number": 8096,
    "body": "Fixes double firing of the event in PiglinAi\r\n\r\nFixes cancelling the event for piglins still triggering the advancement trigger\r\n\r\nFires the event when a Raider tries to pick up a raid banner to become raid leader.",
    "head_branch": "fix/EntityPickupItemEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "EntityPickupItemEvent fixes (#8096)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a74cd9087c4d6d3767e4",
    "number": 8095,
    "body": null,
    "head_branch": "fix/entities-dropping-items",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix a bunch more forceDrops for dropping items (#8095)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a74dd9087c4d6d3767e5",
    "number": 8094,
    "body": "Calls the EntityDropItemEvent when a goat drops one of its goat horns.\r\n\r\nAs with other calls of the EntityDropItemEvent, the event is published\r\nafter the modification of the entity and cancellation of it does not\r\nrestore the entities state. In this case, the goat would still loose\r\ntheir horn however the item would not be dropped (See snowmen dropping\r\ntheir pumpkin).\r\n\r\nResolves: #8093 \r\n\r\n\r\n-----------------------------------------------------------------------------------------------------\r\n\r\nNotes about this PR:\r\n\r\n- ~~Most other calls of the EntityDropItemEvent are called from `Entity#spawnAtLocation` in combination with the `Entity.forceDrops` field. However this logic does not allow for custom x/y/z, which the goat computes~~\r\n\r\n- As laid out, this event is called after the goat data was mutated to no longer have the horn dropped. This is in line with some other entities that drop something, e.g. Snowmen or Leash. However idk if this is part of the event contract, the javadocs (as with all spigot things) is rather vague.",
    "head_branch": "bugfix/call-entity-drop-for-goat-horns",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Call EntityDropItemEvent for goats dropping horns (#8094)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a74ed9087c4d6d3767e6",
    "number": 8092,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nd41796de SPIGOT-7071: Add Player#stopSound(SoundCategory category)\r\n61dae5b2 SPIGOT-7011, SPIGOT-7065: Overhaul of structures\r\n\r\nCraftBukkit Changes:\r\n991aeda12 SPIGOT-1729, SPIGOT-7090: Keep precision in teleportation between worlds\r\n5c9a5f628 SPIGOT-7071: Add Player#stopSound(SoundCategory category)\r\n68f888ded SPIGOT-7011, SPIGOT-7065: Overhaul of structures\r\n0231a3746 Remove outdated build delay.\r\n\r\nSpigot Changes:\r\n475f6008 Rebuild patches\r\n8ce1761f Rebuild patches",
    "head_branch": "upstream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#8092)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nd41796de SPIGOT-7071: Add Player#stopSound(SoundCategory category)\r\n61dae5b2 SPIGOT-7011, SPIGOT-7065: Overhaul of structures\r\n\r\nCraftBukkit Changes:\r\n991aeda12 SPIGOT-1729, SPIGOT-7090: Keep precision in teleportation between worlds\r\n5c9a5f628 SPIGOT-7071: Add Player#stopSound(SoundCategory category)\r\n68f888ded SPIGOT-7011, SPIGOT-7065: Overhaul of structures\r\n0231a3746 Remove outdated build delay.\r\n\r\nSpigot Changes:\r\n475f6008 Rebuild patches\r\n8ce1761f Rebuild patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a74fd9087c4d6d3767e7",
    "number": 8090,
    "body": null,
    "head_branch": "fix/leave-paper-yml-stub",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Leave a paper.yml.txt stub pointing to new location (#8090)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a750d9087c4d6d3767e8",
    "number": 8087,
    "body": "This fixs #8086 based in the same issue the problem is the item passed to the event not have the change in the amount to pass.\r\n\r\nnote: need learn more git because when make https://github.com/PaperMC/Paper/blob/master/CONTRIBUTING.md#method-1 this i cannot modify the patch... this was a directly edition in patch.. tested with applyPatches",
    "head_branch": "issue8086",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a751d9087c4d6d3767e9",
    "number": 8085,
    "body": "Port #8084 to 1.18",
    "head_branch": "resource-pack-rejection-1.18.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't print component in resource pack rejection message (#8085)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a752d9087c4d6d3767ea",
    "number": 8084,
    "body": "Just fixes a dumb looking console log message when resource packs are required and a user rejects them\r\n\r\n```\r\n[21:55:52 INFO]: Disconnecting TextComponent{text='pop4959', siblings=[], style=Style{ color=null, bold=null, italic=null, underlined=null, strikethrough=null, obfuscated=null, clickEvent=null, hoverEvent=null, insertion=null, font=minecraft:default}} due to resource pack rejection\r\n```\r\n->\r\n```\r\n[21:55:52 INFO]: Disconnecting pop4959 due to resource pack rejection\r\n```",
    "head_branch": "resource-pack-rejection-message",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't print component in resource pack rejection message (#8084)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a753d9087c4d6d3767eb",
    "number": 8082,
    "body": "Closes https://github.com/PaperMC/Paper/issues/7827\r\nIt seems the gui doesn't receive any form of ANSI char but just the legacy char code\r\nAnd spigot strip only ANSI\r\nThis new patch strip both legacy named char and most recent syntax using hexadecimal for all other rgb colors",
    "head_branch": "fix/guicolor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a754d9087c4d6d3767ec",
    "number": 8081,
    "body": "#7653 but for unloading. Fixes #8080.",
    "head_branch": "fix/unload-while-ticking",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't allow world unloading while ticking worlds (fixes #8080) (#8081)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a755d9087c4d6d3767ed",
    "number": 8079,
    "body": "It is quite common to have blocks get desynced between the client and\r\nserver, Especially with the use of plugins. This patch reduces the\r\nconsequences of such a desync, by sending a BlockUpdatePacket to the client on a block action\r\nsuch as digging.\r\n\r\n",
    "head_branch": "ver/1.18.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a756d9087c4d6d3767ee",
    "number": 8078,
    "body": "Closes https://github.com/PaperMC/Paper/issues/5188\r\nPaper has fixed enchantment order inconsistencies but has also implemented the fix on getter which is useless because no write operation is done here\r\nIn fact i think all methods outside of the ItemMeta class shouldn't call itemmeta at all even for setter (or at least it should be documented) because developer who use this method don't think that the whole tag will be reparsed\r\n\r\nCloses https://github.com/PaperMC/Paper/issues/5071\r\nRemove the reparse of the whole itemmeta because the tag is already here at this stage. This method just change the item in the nms class (also remove the bukkit cached itemstack impl), and the itemmeta will be reparsed when the developer recall getItemMeta() without the help of bukkit",
    "head_branch": "fix/meta",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a757d9087c4d6d3767ef",
    "number": 8077,
    "body": "playing adventure sounds on a World/Server had some unexpected side effects due to ForwardingAudience's delegation to each individual audience. This overrides all 3 playSound methods in CraftWorld/CraftServer with better implementations.\r\n\r\n----\r\n\r\nThe issues arrises due to seeded sounds. When you play a sound on a World or Server without a seed, it should pick one seed. For location-specific sounds on World/Server, packets shouldn't be sent to all players, only players within range, so overriding also allows delegation to vanilla packet broadcast mechanics.",
    "head_branch": "fix/adventure-world-sounds",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix playing adventure sounds on World/Server (#8077)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a758d9087c4d6d3767f0",
    "number": 8076,
    "body": "1.19 made changes to how shape and block updates are processed, adding them to a stack before processing them. This introduces Vanilla parity issues with the Eigencraft redstone implementation. This PR updates the Eigencraft patch to bypass the neighbor update stack for any shape and block updates emitted, mostly restoring old behavior and fixing these issues. The Alternate Current implementation already does this as well.",
    "head_branch": "update-eigencraft-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "update eigencraft patch (#8076)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a759d9087c4d6d3767f1",
    "number": 8075,
    "body": "This seems to have been back when the patch was originally made, but it doesn't make much sense for this to be here.\r\n\r\nThis caused every single block broken by the dragon to fire a TNTPrimeEvent (even if it wasn't TNT) IF EntityExplodeEvent yield was set to anything but 0.\r\nAdditionally, blocks that actually were TNT would fire another event because wasExploded calls the event.\r\nThis does cause a small behavior change in that this event will no longer cause the block to be removed. \r\nHowever, because this event uses an EntityExplodeEvent you can still customize these blocks.\r\n\r\nThe behavior of tnt exploding/blocks dropping from ender dragons is not vanilla behavior. ",
    "head_branch": "fix-enderdragon-prime",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a75ad9087c4d6d3767f2",
    "number": 8074,
    "body": "Fixes #8073. Not sure if there should be a flag on the event indicating whether it was fired for a connected player or just someone pinging.",
    "head_branch": "fix/fire-serverlistpingevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a75bd9087c4d6d3767f3",
    "number": 8072,
    "body": "If a plugin is using a library class packaged by a plugin they're depended on, at the same time another plugin also packaged that library but another version, problem may raise.\r\nThis patch will solve it.\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a75cd9087c4d6d3767f4",
    "number": 8068,
    "body": "Fixes #7374\r\nwhen an entity teleports, a new NMS mob is made, so that has to be reflected in the pathfinder\r\nI don't know if this is the best approach or if CraftMob should be passed as a parameter to the PaperPathfinder",
    "head_branch": "pathfinder-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Pathfinding After World Has Changed (#8068)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a75dd9087c4d6d3767f5",
    "number": 8067,
    "body": "This is a lot but basically adds a method to disable the dropping of experience and drops experience by default.\r\nThis way things that require XP to be dropped manually (via modification), they can drop XP themselves when needed but without touching anywhere else that may drop xp.\r\n\r\nIt should be noted this causes breakNaturally() to now drop experience.\r\n\r\nThere is alot of patches that need to touch certain methods, so it's kind of all over the place here so please feedback is appreciated.\r\nFix #8062\r\nFix #10080\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-8067.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/1148533055.zip)",
    "head_branch": "fix/experience",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix experience & improvements to block events (#8067)\n\nThis is a lot but basically adds a method to disable the dropping of experience and drops experience by default.\r\nThis way things that require XP to be dropped manually (via modification), they can drop XP themselves when needed but without touching anywhere else that may drop xp.\r\n\r\nIt should be noted this causes breakNaturally() to now drop experience."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a75fd9087c4d6d3767f6",
    "number": 8066,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a75fd9087c4d6d3767f7",
    "number": 8063,
    "body": "had to remake https://github.com/PaperMC/Paper/pull/8060 since I forcepushed while closed, but I fixed all reviews.",
    "head_branch": "disable-conduit-attacking",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a761d9087c4d6d3767f8",
    "number": 8061,
    "body": null,
    "head_branch": "activation-range-worldheight",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use Worldheight for Activation Ranges (#8061)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a762d9087c4d6d3767f9",
    "number": 8060,
    "body": "Example plugin if curious:\r\n```java\r\npackage io.papermc.paper.testplugin;\r\n\r\nimport net.kyori.adventure.text.minimessage.MiniMessage;\r\nimport org.bukkit.Bukkit;\r\nimport org.bukkit.block.Conduit;\r\nimport org.bukkit.event.EventHandler;\r\nimport org.bukkit.event.Listener;\r\nimport org.bukkit.event.block.BlockPlaceEvent;\r\nimport org.bukkit.event.entity.EntityDeathEvent;\r\nimport org.bukkit.inventory.EquipmentSlot;\r\nimport org.bukkit.plugin.java.JavaPlugin;\r\nimport org.bukkit.scheduler.BukkitRunnable;\r\n\r\npublic final class TestPlugin extends JavaPlugin implements Listener {\r\n    @Override\r\n    public void onEnable() {\r\n        this.getServer().getPluginManager().registerEvents(this, this);\r\n    }\r\n    @EventHandler\r\n    public void onA(BlockPlaceEvent e) {\r\n        var loc = e.getBlock().getLocation();\r\n        new BukkitRunnable() {\r\n            @Override\r\n            public void run() {\r\n                if (e.getHand() == EquipmentSlot.OFF_HAND) {\r\n                    Bukkit.broadcast(MiniMessage.miniMessage().deserialize(\"not disabling canAttackEntities on conduit bc placed with offhand\"));\r\n                    return;\r\n                }\r\n                if (loc.getBlock().getState(false) instanceof Conduit c) {\r\n                    c.setCanAttackEntities(false);\r\n                    Bukkit.broadcast(MiniMessage.miniMessage().deserialize(\"disabled canAttackEntities on a conduit\"));\r\n                }\r\n            }\r\n        }.runTaskLater(this, 1);\r\n    }\r\n    @EventHandler\r\n    void onDie(EntityDeathEvent e) {\r\n        if (!e.getEntity().getLocation().getNearbyPlayers(10).isEmpty()) {\r\n            Bukkit.broadcast(MiniMessage.miniMessage().deserialize(e.getEntityType()+\" has died by \" + e.getEntity().getLastDamageCause()));\r\n        }\r\n    }\r\n}\r\n```",
    "head_branch": "disable-conduit-attacking",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a763d9087c4d6d3767fa",
    "number": 8058,
    "body": "Closes #7415\r\nSupersedes https://github.com/PaperMC/Paper/pull/7980\r\n\r\nBukkit has for years stored damage history into a single enum which loses 90% of available damage history and cause a bunch of issue about the future (when Mojang decide to add new damage source for example)\r\n\r\nThis PR wrap the whole nms DamageSource.\r\n\r\nThe main reasons of this changes\r\n- Parity with vanilla (Bukkit lost some cause and create cause that doesn't exists in vanilla) (see supersedes PR javadoc)\r\n- Maintainability (Bukkit has a single method with over 100 lines just to determine the right cause)\r\n- API (bukkit has no API to create custom damage source (different from vanilla) or just to apply a certain cause to an entity)\r\n\r\nNew API\r\nWith this PR you can create your own damage source using a builder\r\nExample:\r\n```Java\r\nDamageOrigin origin = DamageOrigin.of(VanillaDamageType.SONIC_BOOM).scalesWithDifficulty(true).build();\r\n\r\nentity.damage(50.5D, origin);\r\nentity.damage(23.1D, DamageOrigins.lava());\r\nentity.damage(12.1D, DamageOrigins.sweetBerryBush(), EventContext.fromBlock(blockPos));\r\n// some damage origin would normally be linked to a block in order to be compatible with bukkit events\r\n\r\nDamageOrigin originComplex = DamageOrigin.of(type).deathMessage(killed -> Component.translatable(\"translatableKey\", killed.getName())).build();\r\n```\r\n\r\nAll damage origin must be categorized under a damage type and you can\r\ncreate them in the methods called before the registries freeze in paper plugin\r\nbootstrapper. Example:\r\n```Java\r\nfinal LifecycleEventManager<BootstrapContext> lifecycleManager = context.getLifecycleManager();\r\n\r\nlifecycleManager.registerEventHandler(RegistryEvents.DAMAGE_TYPE.preFreeze(), event -> {\r\n    event.registry().register(NEW_DAMAGE_TYPE, builder -> {\r\n        builder.name(\"my_damage\").foodExhaustion(5.0F).deathMessageFormat(DeathMessageFormat.FALL_VARIANTS).effects(DamageEffect.FREEZING).scale(DamageScale.ALWAYS);\r\n    });\r\n});\r\n```\r\nThe builder is already prefilled with the default values.\r\nThe name will be used as part of the translatable key when an entity died due to this damage cause\r\nIf you want to change the death message without using the default behaviour (using the damage type name as key) you needs to use a callback function in the damage origin builder.\r\n\r\nAll the damage types (including plugin/datapack made one) will be under the DAMAGE_TYPE registry\r\navailable with `RegistryAccess.registryAccess().getRegistry(RegistryKey.DAMAGE_TYPE)`\r\nNote this registry will not be available during bootstrap so don't try to get the value found in the VanillaDamageTypes class to get their keys! Instead you can get them through the DamageTypeKeys class generated automatically. For now the damage type tags aren't supported yet by this task and are left untyped.\r\n\r\nYou can also get the hurting sound or if an entity is invulnerable to a specific damage origin and to create explosion with custom origin. The damage type tags are also available\r\n\r\n```Java\r\nboolean invulnerable = entity.isInvulnerableTo(origin);\r\nSound sound = entity.getHurtSound(origin);\r\nworld.createExplosion(null, position.offset(0, 2, 0), 2, false, true, origin);\r\nboolean isFireDamage = origin.isTagged(DamageTypeTags.IS_FIRE)\r\n```\r\n\r\nAdditionally the damage origin is now available into the EntityDeathEvent, PlayerDeathEvent, VehicleDamageEvent, VehicleDestroyEvent, PlayerAttackEntityCooldownResetEvent, EntityResurrectEvent and TameableDeathMessageEvent\r\n\r\nHowever i have decided to not change how the events works basically only the cause changes but the same events will be called for the same entity/block/action\r\nIn the future we could probably get rid of the bukkit logic that enforce such damage to be a block damage or not and\r\nthat has issue with concurrency.\r\n\r\nCredits:\r\nJavadoc for bukkit api has been taken from linked PR",
    "head_branch": "fix/damagesource",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a764d9087c4d6d3767fb",
    "number": 8053,
    "body": "Reproduction:\r\n```java\r\n@EventHandler\r\n    public void onBreak(BlockBreakEvent event) {\r\n        event.setCancelled(true);\r\n    }\r\n```\r\n\r\nBreaking things like signs/heads will cause it to lose its data, this fix causes that to be resolved.",
    "head_branch": "fix-break-thing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Send block entities after destroy prediction (#8053)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a765d9087c4d6d3767fc",
    "number": 8052,
    "body": "Fixes #8050 by moving the old user convertion down slightly (or the config and deobf up, depending on how you look at it).\r\n\r\nIf you want to test this, turn your server to offline mode and then simply make a file `white-list.txt` and put a player name in it.",
    "head_branch": "fix/8050",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move old user conversion down slightly (fixes #8050) (#8052)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a766d9087c4d6d3767fd",
    "number": 8051,
    "body": "depends on https://github.com/PaperMC/paperweight/pull/155",
    "head_branch": "scanjar",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[ci skip] Scan built jars for bad method usages (#8051)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a767d9087c4d6d3767fe",
    "number": 8049,
    "body": "Adds MaterialTags for the following Types of Tools:\r\n\r\n- Wooden Tools\r\n- Stone Tools\r\n- Iron Tools\r\n- Gold Tools\r\n- Diamond Tools\r\n- Netherite Tools",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add MaterialTags for the different Types of Tools (#8049)\n\n* Add MaterialTags for the different Types of Tools\r\n\r\n* Add Netherite Tools Tag"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a768d9087c4d6d3767ff",
    "number": 8046,
    "body": null,
    "head_branch": "fix/adventure-lore-javadoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Fix tiny mistake in adventure javadocs (#8046)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a769d9087c4d6d376800",
    "number": 8045,
    "body": "Track the spawn reason of the xp orb dropped when frogs breeds",
    "head_branch": "feat/xpfrog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add xp orb spawn reason for frogs (#8045)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a76ad9087c4d6d376801",
    "number": 8044,
    "body": null,
    "head_branch": "fix/missing-proj-source-firework-dispeners",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Track projectile source for fireworks from dispensers (#8044)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a76bd9087c4d6d376802",
    "number": 8042,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nd5a777e7 SPIGOT-7078: Add EntityPotionEffectEvent.Cause#WARDEN\r\n\r\nCraftBukkit Changes:\r\n82f757467 SPIGOT-7078: Add EntityPotionEffectEvent.Cause#WARDEN\r\nc924fa531 SPIGOT-7072: Call events for stepping on sculk sensors and sculk shriekers",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#8042)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nd5a777e7 SPIGOT-7078: Add EntityPotionEffectEvent.Cause#WARDEN\r\n\r\nCraftBukkit Changes:\r\n82f757467 SPIGOT-7078: Add EntityPotionEffectEvent.Cause#WARDEN\r\nc924fa531 SPIGOT-7072: Call events for stepping on sculk sensors and sculk shriekers"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a76cd9087c4d6d376803",
    "number": 8041,
    "body": "Closes https://github.com/PaperMC/Paper/issues/8040\r\nAdd EntityFertilizeEggEvent, the super entity is the mother and doesn't extends EntityBreedEvent at all\r\nAlso plugin can set negative or zero experience to totally ignore experience drops ~unlike EntityBreedEvent (which is strange because there are also a negative check in the nms)~",
    "head_branch": "feat/turtle-evnt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add EntityFertilizeEggEvent (#8041)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a76dd9087c4d6d376804",
    "number": 8039,
    "body": null,
    "head_branch": "fix/javadocs-save-load-data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Player#loadData and Player#saveData javadocs (#8039)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a76ed9087c4d6d376805",
    "number": 8037,
    "body": "Closes #7277",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add fire-tick-delay option (#8037)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a76fd9087c4d6d376806",
    "number": 8035,
    "body": "Yeah, I guess the title says everything.",
    "head_branch": "feature/add-warden-potion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a770d9087c4d6d376807",
    "number": 8031,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Fixed typo in README (#8031)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a771d9087c4d6d376808",
    "number": 8030,
    "body": "(I force-pushed before I reopened, didn't realize that would prevent me from reopening the [PR](https://github.com/PaperMC/Paper/pull/7398))\r\n\r\nResolves https://github.com/PaperMC/Paper/issues/6978\r\nResolves https://github.com/PaperMC/Paper/issues/8025\r\n\r\nRelated (added stronghold seed): https://github.com/PaperMC/Paper/pull/7334\r\n\r\n~~Tested same was as earlier PR, found location using https://www.chunkbase.com/apps for mineshafts and buried treasure, ensured they still generated on default settings, then changed the seed for each, deleted region files, and then rejoined in same spot to find them missing.~~ haven't done this with the changes yet",
    "head_branch": "feature/missing-feature-seed-configs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing structure set seed configs (#8030)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a772d9087c4d6d376809",
    "number": 8029,
    "body": null,
    "head_branch": "fix/PaperServerListPingEventImpl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use non-deprecated super ctor in PaperServerListPingEventImpl (#8029)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a773d9087c4d6d37680a",
    "number": 8028,
    "body": "Update the Alternate Current patch to v1.4.0\r\n\r\n- New optimizations bring a 10%-20% performance boost.\r\n- Several code modifications have been removed to make the mod less invasive.",
    "head_branch": "update-alternate-current-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Alternate Current to v1.4.0 (#8028)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a774d9087c4d6d37680b",
    "number": 8027,
    "body": "Closes https://github.com/PaperMC/Paper/issues/7789\r\nCall this event also for trident to avoid listening generic ProjectileLaunchEvent in the spawn area.\r\nCurrently i'm not really sure if the souldConsume method should do something or not\r\nAlso i think we should document the arrow case for this event (not triggered) and redirect to EntityShootBowEvent ?",
    "head_branch": "feat/launch-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Call PlayerLaunchProjectileEvent for trident (#8027)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a775d9087c4d6d37680c",
    "number": 8024,
    "body": "Based in https://github.com/PaperMC/Paper/pull/8023#issuecomment-1160501192 this PR handle the spigot config for saplings in the mangrove.\r\n",
    "head_branch": "1.19/support/add-sapling-mangrovestreet-config-paper",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a776d9087c4d6d37680d",
    "number": 8023,
    "body": "Fixes #8022. Event capturing code is the exact same as in `SaplingBlock#randomTick`.",
    "head_branch": "fix/call-structuregrowevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Call StructureGrowEvent for mangrove propagule (#8023)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a777d9087c4d6d37680e",
    "number": 8021,
    "body": "Tried to look through and find any more important missing ones.\r\n\r\nPut some in the DummyGeneratorAccess as it currently has a schedule tick method already.\r\n![image](https://user-images.githubusercontent.com/23108066/174497139-cdb15efe-cbc3-4f25-bc82-4714425e42cb.png)\r\n The nextSubTickCount is only called by createTick which is only called by the schedule tick methods. \r\n\r\nCan be reproduced by trying to place a propagule in water (tries to schedule a liquid tick).\r\n```kt\r\njava.lang.UnsupportedOperationException: Not supported yet.\r\n\tat org.bukkit.craftbukkit.util.DummyGeneratorAccess.nextSubTickCount(DummyGeneratorAccess.java:64) ~[main/:?]\r\n\tat net.minecraft.world.level.LevelAccessor.createTick(LevelAccessor.java:43) ~[main/:?]\r\n\tat net.minecraft.world.level.LevelAccessor.scheduleTick(LevelAccessor.java:61) ~[main/:?]\r\n\tat net.minecraft.world.level.block.MangroveRootsBlock.updateShape(MangroveRootsBlock.java:40) ~[minecraft.jar:?]\r\n\tat net.minecraft.world.level.block.state.BlockBehaviour$BlockStateBase.updateShape(BlockBehaviour.java:1068) ~[main/:?]\r\n\tat net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate.lambda$updateShapeAtEdge$4(StructureTemplate.java:414) ~[main/:?]\r\n\tat net.minecraft.world.phys.shapes.DiscreteVoxelShape.forAllAxisFaces(DiscreteVoxelShape.java:191) ~[minecraft.jar:?]\r\n\tat net.minecraft.world.phys.shapes.DiscreteVoxelShape.forAllFaces(DiscreteVoxelShape.java:170) ~[minecraft.jar:?]\r\n\tat net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate.updateShapeAtEdge(StructureTemplate.java:409) ~[main/:?]\r\n\tat net.minecraft.world.level.levelgen.feature.TreeFeature.lambda$place$11(TreeFeature.java:163) ~[minecraft.jar:?]\r\n\tat java.util.Optional.map(Optional.java:260) ~[?:?]\r\n\tat net.minecraft.world.level.levelgen.feature.TreeFeature.place(TreeFeature.java:161) ~[minecraft.jar:?]\r\n\tat net.minecraft.world.level.levelgen.feature.Feature.place(Feature.java:154) ~[minecraft.jar:?]\r\n\tat net.minecraft.world.level.levelgen.feature.ConfiguredFeature.place(ConfiguredFeature.java:24) ~[minecraft.jar:?]\r\n\tat org.bukkit.craftbukkit.CraftRegionAccessor.generateTree(CraftRegionAccessor.java:395) ~[main/:?]\r\n\tat org.bukkit.craftbukkit.CraftRegionAccessor.generateTree(CraftRegionAccessor.java:311) ~[main/:?]\r\n\tat io.papermc.paper.testplugin.TestPlugin.onInteract(TestPlugin.java:19) ~[test-plugin-1.0.0-SNAPSHOT.jar:?]\r\n\tat com.destroystokyo.paper.event.executor.asm.generated.GeneratedEventExecutor1.execute(Unknown Source) ~[?:?]\r\n\tat org.bukkit.plugin.EventExecutor.lambda$create$1(EventExecutor.java:75) ~[paper-api-1.19-R0.1-SNAPSHOT.jar:?]\r\n\tat co.aikar.timings.TimedEventExecutor.execute(TimedEventExecutor.java:80) ~[paper-api-1.19-R0.1-SNAPSHOT.jar:?]\r\n\tat org.bukkit.plugin.RegisteredListener.callEvent(RegisteredListener.java:70) ~[paper-api-1.19-R0.1-SNAPSHOT.jar:?]\r\n\tat org.bukkit.plugin.SimplePluginManager.callEvent(SimplePluginManager.java:664) ~[paper-api-1.19-R0.1-SNAPSHOT.jar:?]\r\n\tat org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerInteractEvent(CraftEventFactory.java:544) ~[main/:?]\r\n\tat net.minecraft.server.level.ServerPlayerGameMode.useItemOn(ServerPlayerGameMode.java:527) ~[main/:?]\r\n\tat net.minecraft.server.network.ServerGamePacketListenerImpl.handleUseItemOn(ServerGamePacketListenerImpl.java:1872) ~[main/:?]\r\n\tat net.minecraft.network.protocol.game.ServerboundUseItemOnPacket.handle(ServerboundUseItemOnPacket.java:37) ~[main/:?]\r\n\tat net.minecraft.network.protocol.game.ServerboundUseItemOnPacket.handle(ServerboundUseItemOnPacket.java:9) ~[main/:?]\r\n\tat net.minecraft.network.protocol.PacketUtils.lambda$ensureRunningOnSameThread$1(PacketUtils.java:51) ~[main/:?]\r\n\tat net.minecraft.server.TickTask.run(TickTask.java:18) ~[minecraft.jar:?]\r\n\tat net.minecraft.util.thread.BlockableEventLoop.doRunTask(BlockableEventLoop.java:153) ~[main/:?]\r\n\tat net.minecraft.util.thread.ReentrantBlockableEventLoop.doRunTask(ReentrantBlockableEventLoop.java:24) ~[minecraft.jar:?]\r\n\tat net.minecraft.server.MinecraftServer.doRunTask(MinecraftServer.java:1358) ~[main/:?]\r\n\tat net.minecraft.server.MinecraftServer.doRunTask(MinecraftServer.java:183) ~[main/:?]\r\n\tat net.minecraft.util.thread.BlockableEventLoop.pollTask(BlockableEventLoop.java:126) ~[main/:?]\r\n\tat net.minecraft.server.MinecraftServer.pollTaskInternal(MinecraftServer.java:1335) ~[main/:?]\r\n\tat net.minecraft.server.MinecraftServer.pollTask(MinecraftServer.java:1328) ~[main/:?]\r\n\tat net.minecraft.util.thread.BlockableEventLoop.managedBlock(BlockableEventLoop.java:136) ~[main/:?]\r\n\tat net.minecraft.server.MinecraftServer.waitUntilNextTick(MinecraftServer.java:1306) ~[main/:?]\r\n\tat net.minecraft.server.MinecraftServer.runServer(MinecraftServer.java:1191) ~[main/:?]\r\n\tat net.minecraft.server.MinecraftServer.lambda$spin$0(MinecraftServer.java:302) ~[main/:?]\r\n\tat java.lang.Thread.run(Thread.java:833) ~[?:?]\r\n\r\n```",
    "head_branch": "more-missing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add more needed BlockStateListPopulator Methods (#8021)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a778d9087c4d6d37680f",
    "number": 8015,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n05ae036c PR-746: Add option to use cached map color palette\r\n57849c1b PR-759: Add preview chat option in ServerListPingEvent\r\n0169e65d PR-758: Add missing server properties methods from 1.19\r\n\r\nCraftBukkit Changes:\r\n622dbe6c2 SPIGOT-7068: SKULK and SKULK_VEIN BlockSpreadEvents Still do not reference the correct source (SKULK_CATALYST)\r\n6c61b73f3 PR-1052: Add option to use cached map color palette\r\nc882f38ea SPIGOT-7066: Fix custom END worlds not generating DragonBattle\r\n6866aab59 SPIGOT-2420: Can't set exp drops for EnderDragon death\r\n9dcd46530 PR-1067: Add preview chat option in ServerListPingEvent\r\n36c2681af PR-1066: Add missing server properties methods from 1.19\r\n031eaadd0 Increase outdated build delay\r\n8fda4b12f SPIGOT-7060: SCULK and SCULK_VEIN BlockSpreadEvents do not reference the correct source",
    "head_branch": "upstream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#8015)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n05ae036c PR-746: Add option to use cached map color palette\r\n57849c1b PR-759: Add preview chat option in ServerListPingEvent\r\n0169e65d PR-758: Add missing server properties methods from 1.19\r\n\r\nCraftBukkit Changes:\r\n622dbe6c2 SPIGOT-7068: SKULK and SKULK_VEIN BlockSpreadEvents Still do not reference the correct source (SKULK_CATALYST)\r\n6c61b73f3 PR-1052: Add option to use cached map color palette\r\nc882f38ea SPIGOT-7066: Fix custom END worlds not generating DragonBattle\r\n6866aab59 SPIGOT-2420: Can't set exp drops for EnderDragon death\r\n9dcd46530 PR-1067: Add preview chat option in ServerListPingEvent\r\n36c2681af PR-1066: Add missing server properties methods from 1.19\r\n031eaadd0 Increase outdated build delay\r\n8fda4b12f SPIGOT-7060: SCULK and SCULK_VEIN BlockSpreadEvents do not reference the correct source"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a779d9087c4d6d376810",
    "number": 8013,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/8012",
    "head_branch": "fix/number-parsing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix number parsing (#8013)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a77ad9087c4d6d376811",
    "number": 8009,
    "body": "and cleaned up ThreadUnsafeRandom\r\n\r\nFixes https://github.com/PaperMC/Paper/issues/8006\r\n\r\nIf we wanted to use the `ThreadSafeLegacyRandomSource` deprecated class, we wouldn't have to have all those overrides to super methods to help with re-obfuscation, but idk if we want to do that.",
    "head_branch": "fix/randoms",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix incorrect random nextLong to nextInt (#8009)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a77bd9087c4d6d376812",
    "number": 8008,
    "body": "This is a potential minefield, I tested the following situations:\r\n* No PlayerInteractEvent changes: items on cooldown no longer prevent block interactions (can open a door)\r\n* `PlayerInteractEvent.setUseItemInHand(DENY)`: block interactions don't happen when using the item and pressing shift\r\n\r\nFixes https://github.com/PaperMC/Paper/issues/8005\r\n\r\n",
    "head_branch": "fix/cooldown-blocking-interactions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Correctly handle interactions with items on cooldown (#8008)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a77cd9087c4d6d376813",
    "number": 8004,
    "body": "Don't send broadcasted messages to command blocks\r\n\r\nSupport sending Components to command blocks\r\n\r\nFixes https://github.com/PaperMC/Paper/issues/8001",
    "head_branch": "fix/command-blocks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Couple fixes for command blocks (#8004)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a77dd9087c4d6d376814",
    "number": 8003,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/7992",
    "head_branch": "fix/advancement-saving",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix advancement saving before reloads (#8003)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a77ed9087c4d6d376815",
    "number": 8002,
    "body": "Adds an option to disable vibration listeners from being registered/playing in the world.\r\nThis causes the following to disable:\r\n- Sculk Catalyst spreading on death\r\n- Sculk Shrieker \r\n- Sculk Sensor\r\n- Warden vibration listening (they can still attack players if nearby/provoked)\r\n- Allay note block behavior",
    "head_branch": "game-event-disabler",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a77fd9087c4d6d376816",
    "number": 8000,
    "body": "Fixes: https://github.com/PaperMC/Paper/issues/7938",
    "head_branch": "fix-ansi-codes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix incorrect ansi code being used for bold (#8000)\n\nCo-authored-by: BillyGalbreath <blake.galbreath@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a780d9087c4d6d376817",
    "number": 7998,
    "body": "The previous solution caused a bunch of bandaid fixes inorder to resolve edge cases where minecraft/the api might spawn items that are air.\r\nJust simply prevent them from being added to the world instead.\r\n\r\nConversation: https://canary.discord.com/channels/289587909051416579/925530366192779286/986806840404889760\r\nFixes: https://github.com/PaperMC/Paper/issues/7993 \r\nFixes: https://github.com/PaperMC/Paper/issues/6889",
    "head_branch": "remove-air-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Prevent empty items from being added to world (#7998)\n\nThe previous solution caused a bunch of bandaid fixes inorder to resolve edge cases where minecraft/the api might spawn items that are air.\r\nJust simply prevent them from being added to the world instead."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a781d9087c4d6d376818",
    "number": 7997,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/7969\r\n\r\nSymbolic links seem to not be handled nicely in Files#createDirectories.\r\nThere will most likely be a future patch that targets correctly handling symlinks for this method when used in other places in the source code. But I wanted to get this out so that it can specifically target to fix this issue.\r\n\r\nThere was a bug report on this, but it was marked as NAI: https://bugs.openjdk.org/browse/JDK-8130464\r\n",
    "head_branch": "fixy-symbolic-config",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use safe method for handling Files#createDirectories (#7997)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a782d9087c4d6d376819",
    "number": 7995,
    "body": "LivingEntity#getActiveItem is marked as nullable incorrectly. Additionally, this is duplicate api but spigots is on HumanEntity so deprecate it in favor of paper's method.\r\n\r\nPaper (not null, marked incorrectly as nullable) LivingEntity\r\n![image](https://user-images.githubusercontent.com/23108066/173964965-2101a38a-2a69-48ce-8dca-8ba54e54ba41.png)\r\nSpigot (nullable) HumanEntity\r\n![image](https://user-images.githubusercontent.com/23108066/173965036-056aa364-f675-4dea-9295-78427bcaedf6.png)\r\n",
    "head_branch": "deprecate-spigot-activehand",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Cleanup LivingEntity Hand Raised/Item Use API (#7995)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a783d9087c4d6d37681a",
    "number": 7994,
    "body": "Fixes [MC-252439](https://bugs.mojang.com/browse/MC-252439), a super tiny fix for an annoying bug.\r\nThis is the same fix included in the latest snapshot, but 1.19.1 isn't *that* near yet, so might be nice to include for now :)",
    "head_branch": "fix/MC-252439",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix MC-252439 (#7994)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a784d9087c4d6d37681b",
    "number": 7988,
    "body": null,
    "head_branch": "player-getFishHook",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Player#getFishHook (#7988)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a785d9087c4d6d37681c",
    "number": 7987,
    "body": null,
    "head_branch": "1.19-armortags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add ARMOR tag to MaterialTags (1.19) (#7987)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a786d9087c4d6d37681d",
    "number": 7986,
    "body": "The spigot config default is 100, so we need to divide by 100 to multiply on the vanilla default 0.11 value.\r\n\r\nFixes https://github.com/PaperMC/Paper/issues/7984",
    "head_branch": "glowberry-modifier",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix the growth modifier for glowberries (#7986)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a787d9087c4d6d37681e",
    "number": 7980,
    "body": "Continuation of #7423.\r\n\r\nSince this is almost direct port of original(#5191) PR, I don't think I fully understood the original code. I will leave some comment on the code.\r\n\r\nAny comments will be welcomed, so please, feel free to give me any feedback. ",
    "head_branch": "damage-with-any-cause",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a788d9087c4d6d37681f",
    "number": 7979,
    "body": "Adds a possibility to send a title update (packet). This does not\r\nchange the title on the server.\r\n\r\nresolves #7950 ",
    "head_branch": "feat/update-inventory-title",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a789d9087c4d6d376820",
    "number": 7977,
    "body": "Closes https://github.com/PaperMC/Paper/issues/7966",
    "head_branch": "fix/contributing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Update CONTRIBUTING.md for config changes (#7977)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a78ad9087c4d6d376821",
    "number": 7976,
    "body": "Was messed up in https://github.com/PaperMC/Paper/commit/0e06c77264b59d1df913a94aaa6744b440651e6a\r\n\r\nThe command was running before the event, and then again after the event (except it wasn't cause the cast was failing cause the command logic had already happened.\r\n\r\nFixes https://github.com/PaperMC/Paper/issues/7970",
    "head_branch": "fix/bad-patch-migration",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix command signs patch update (#7976)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a78bd9087c4d6d376822",
    "number": 7975,
    "body": "* Removes more old despawn range settings\r\n\r\n* Allows non-positives for packet limiter, they just wont have an effect",
    "head_branch": "fix/config-stuffs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Couple config fixes (#7975)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a78cd9087c4d6d376823",
    "number": 7971,
    "body": "- update to v1.3, fixing some Vanilla parity issues (like #7852)",
    "head_branch": "update-alternate-current-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update alternate current patch (#7971)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a78dd9087c4d6d376824",
    "number": 7968,
    "body": "The settings directory is now configurable using CLI options (since https://github.com/PaperMC/Paper/commit/8b6f4dd482dc5f152a433475f20055f7fbf1b182), but the exceptions message hasn't been updated properly to handle this new behaviour, and will show the default config folder even if the path has changed.",
    "head_branch": "fix/exp-config",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update settings directory path in exceptions (#7968)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a78ed9087c4d6d376825",
    "number": 7967,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Update performance problem issue template to account for new config formats (#7967)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a790d9087c4d6d376826",
    "number": 7962,
    "body": "When deserialising a Table in the config, the TableDeserializer currently inserts the raw value for the row key rather than the deserialised value (e.g. String rather than EntityType). This has resulted in the sensor and behaviour tick rate settings not working properly",
    "head_branch": "config-tables",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use deserialised row keys in config tables (#7962)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a791d9087c4d6d376827",
    "number": 7960,
    "body": "Yeah im a stalking... this handle to fix #7958 \r\n\r\nThis PR change the Bukkit util for copy things to the native java things and add a LOG when a issue is found, this not change the current behaviour where if the copy fails pass to another file.\r\n\r\nNot sure if this is better o can be better add the log in the Bukkit util...",
    "head_branch": "fixfeature/log-errors-on-copy-for-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Log IOException in plugin update (#7960)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a792d9087c4d6d376828",
    "number": 7959,
    "body": "rebase and merge",
    "head_branch": "backport",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update paperweight to 1.3.7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a793d9087c4d6d376829",
    "number": 7954,
    "body": "Craftbukkit attempts to translate worlds that use the same generation as the Overworld, The Nether, or The End to use those dimensions when checking the `changed_dimension` criteria trigger, or whether to trigger the `NETHER_TRAVEL` distance trigger. This adds a config option to ignore that and use the exact dimension key of the worlds involved.\r\n\r\nOption in paper-global.yml: `misc.strict-advancement-dimension-check: false`\r\n\r\nCloses https://github.com/PaperMC/Paper/issues/7953",
    "head_branch": "feature/config-strict-advancement-dimension-checks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add option for strict advancement dimension checks (#7954)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a794d9087c4d6d37682a",
    "number": 7952,
    "body": "Methods like generating a tree (with predicate) throw exceptions due to the dummy generator access class throwing exceptions for these methods.\r\nOverride them!\r\n\r\n```kt\r\njava.lang.UnsupportedOperationException: Not supported yet.\r\n\tat org.bukkit.craftbukkit.util.DummyGeneratorAccess.getLevelData(DummyGeneratorAccess.java:84) ~[main/:?]\r\n\tat net.minecraft.world.level.LevelAccessor.createTick(LevelAccessor.java:43) ~[main/:?]\r\n\tat net.minecraft.world.level.LevelAccessor.scheduleTick(LevelAccessor.java:61) ~[main/:?]\r\n\tat net.minecraft.world.level.block.LiquidBlock.updateShape(LiquidBlock.java:133) ~[main/:?]\r\n\tat net.minecraft.world.level.block.state.BlockBehaviour$BlockStateBase.updateShape(BlockBehaviour.java:1068) ~[main/:?]\r\n\tat net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate.lambda$updateShapeAtEdge$4(StructureTemplate.java:420) ~[main/:?]\r\n\tat net.minecraft.world.phys.shapes.DiscreteVoxelShape.forAllAxisFaces(DiscreteVoxelShape.java:191) ~[minecraft.jar:?]\r\n\tat net.minecraft.world.phys.shapes.DiscreteVoxelShape.forAllFaces(DiscreteVoxelShape.java:171) ~[minecraft.jar:?]\r\n\tat net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate.updateShapeAtEdge(StructureTemplate.java:409) ~[main/:?]\r\n\tat net.minecraft.world.level.levelgen.feature.TreeFeature.lambda$place$11(TreeFeature.java:163) ~[minecraft.jar:?]\r\n\tat java.util.Optional.map(Optional.java:260) ~[?:?]\r\n\tat net.minecraft.world.level.levelgen.feature.TreeFeature.place(TreeFeature.java:161) ~[minecraft.jar:?]\r\n\tat net.minecraft.world.level.levelgen.feature.Feature.place(Feature.java:154) ~[minecraft.jar:?]\r\n\tat net.minecraft.world.level.levelgen.feature.ConfiguredFeature.place(ConfiguredFeature.java:24) ~[minecraft.jar:?]\r\n\tat org.bukkit.craftbukkit.CraftRegionAccessor.generateTree(CraftRegionAccessor.java:395) ~[main/:?]\r\n\tat org.bukkit.craftbukkit.CraftRegionAccessor.generateTree(CraftRegionAccessor.java:311) ~[main/:?]\r\n```\r\n\r\nSpigot mapped, but is equal to isFluidAtPosition\r\n```kt\r\njava.lang.UnsupportedOperationException: Not supported yet.\r\n\tat org.bukkit.craftbukkit.v1_19_R1.util.DummyGeneratorAccess.b(DummyGeneratorAccess.java:240) ~[paper-1.19.jar:git-Paper-4]\r\n\tat net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer.tryPlaceLeaf(FoliagePlacer.java:89) ~[?:?]\r\n\tat net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer.placeLeavesRow(FoliagePlacer.java:78) ~[?:?]\r\n\tat net.minecraft.world.level.levelgen.feature.foliageplacers.BlobFoliagePlacer.createFoliage(BlobFoliagePlacer.java:40) ~[?:?]\r\n\tat net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer.createFoliage(FoliagePlacer.java:39) ~[?:?]\r\n\tat net.minecraft.world.level.levelgen.feature.TreeFeature.lambda$doPlace$5(TreeFeature.java:90) ~[?:?]\r\n\tat com.google.common.collect.ImmutableList.forEach(ImmutableList.java:422) ~[guava-31.0.1-jre.jar:?]\r\n\tat net.minecraft.world.level.levelgen.feature.TreeFeature.doPlace(TreeFeature.java:89) ~[?:?]\r\n\tat net.minecraft.world.level.levelgen.feature.TreeFeature.place(TreeFeature.java:152) ~[?:?]\r\n\tat net.minecraft.world.level.levelgen.feature.Feature.place(Feature.java:154) ~[?:?]\r\n\tat net.minecraft.world.level.levelgen.feature.ConfiguredFeature.a(ConfiguredFeature.java:24) ~[?:?]\r\n\tat org.bukkit.craftbukkit.v1_19_R1.CraftRegionAccessor.generateTree(CraftRegionAccessor.java:395) ~[paper-1.19.jar:git-Paper-4]\r\n\tat org.bukkit.craftbukkit.v1_19_R1.CraftRegionAccessor.generateTree(CraftRegionAccessor.java:311) ~[paper-1.19.jar:git-Paper-4]\r\n```",
    "head_branch": "update-blockstate-populator",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing important BlockStateListPopulator methods (#7952)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a795d9087c4d6d37682b",
    "number": 7951,
    "body": "Best to not assign the field so if anything adds to that field, it doesn't also add to the list on the paper config class.",
    "head_branch": "fix/dont-reassign-field",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Dont reassign the hiddenConfigs field in TimingsManager (#7951)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a796d9087c4d6d37682c",
    "number": 7949,
    "body": "Closes #7948",
    "head_branch": "dir-flag",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add paper-settings-directory cl argument (#7949)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a797d9087c4d6d37682d",
    "number": 7944,
    "body": "> Yaaah, it's backport time.\r\n\r\n#7897",
    "head_branch": "backport/timings-clickable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make timings link clickable (#7944)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a798d9087c4d6d37682e",
    "number": 7943,
    "body": "This introduces a new Event which is called when the warden is angered by another entity.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add WardenAngerChangeEvent (#7943)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a799d9087c4d6d37682f",
    "number": 7942,
    "body": null,
    "head_branch": "fix/kick-event-off-main",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fire kick event for out-of-order chat on main thread (#7942)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a79ad9087c4d6d376830",
    "number": 7940,
    "body": "introduced in the 1.19 update https://github.com/PaperMC/Paper/commit/88f74d1bac173e6cac1b873c096a50f754d931ef#diff-276247018cf7c91d7b8140f7a9a858fb9245e00f774b2faa3c7d0677e9a722acR277",
    "head_branch": "handshake-event-precondition",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "correct argument check in PlayerHandshakeEvent#setFailMessage(String) (#7940)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a79bd9087c4d6d376831",
    "number": 7937,
    "body": ":trollface: \r\n\r\nCloses #7873",
    "head_branch": "adventure",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Adventure to 4.11.0 and implement ComponentLogger (#7937)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a79cd9087c4d6d376832",
    "number": 7936,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nc1d911a2 Add compat constructor to PlayerAnimationEvent\r\n\r\nCraftBukkit Changes:\r\neffea36a2 PR-1065: Add missing calls for BlockSpreadEvent when Sculk spreads\r\n\r\n---\r\n\r\nIs it worth deprecating our `PlayerArmSwingEvent`? Its point was to be able to differentiate between hands in the animation event but upstream went ahead and added another animation enum constant.",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#7936)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nc1d911a2 Add compat constructor to PlayerAnimationEvent\r\n\r\nCraftBukkit Changes:\r\neffea36a2 PR-1065: Add missing calls for BlockSpreadEvent when Sculk spreads"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a79dd9087c4d6d376833",
    "number": 7934,
    "body": null,
    "head_branch": "fix/use-configured-log-prefix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use configured log prefix for spigot library loading (#7934)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a79ed9087c4d6d376834",
    "number": 7933,
    "body": null,
    "head_branch": "readd-mc-4-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a79fd9087c4d6d376835",
    "number": 7930,
    "body": "Readds the part where it prevents creating a new vector when subtracting. \r\nthis.entity.trackingPosition() will not create a new vector except for paintings, but I'm not sure it's worth patching that individually. LMK tho!",
    "head_branch": "readd-remove-vec-allocations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Readd remove vec allocations diff (#7930)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7a0d9087c4d6d376836",
    "number": 7929,
    "body": "Addresses https://github.com/PaperMC/Paper/issues/7913#issuecomment-1152526168\r\n\r\nBasically just is more verbose about where its trying to create files. Not gonna try and work around that, people should just move files that might conflict with the new structure",
    "head_branch": "dev/1.19-improve-file-errors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve migration file errors (#7929)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a7a1d9087c4d6d376837",
    "number": 7921,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7a2d9087c4d6d376838",
    "number": 7920,
    "body": "Improves the packet and map serializers, allowing the map serializer to clean up extra keys if 2 keys deserialize to the same value, like `PacketPlayInAutoRecipe` and `ServerboundPlaceRecipePacket`. This also removes the need to handle conversions in the newFormatTranformations because its done in the serializer/map serializer now.",
    "head_branch": "dev/1.19-improve-packet-serializer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "improve packet config serializer (#7920)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7a3d9087c4d6d376839",
    "number": 7919,
    "body": null,
    "head_branch": "end",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "port  Significantly improve performance of the end generation (#7919)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a7a4d9087c4d6d37683a",
    "number": 7917,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/7915\r\n\r\n",
    "head_branch": "fix-light",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix light (#7917)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7a5d9087c4d6d37683b",
    "number": 7914,
    "body": "fixes #7894",
    "head_branch": "fix-7894",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7a6d9087c4d6d37683c",
    "number": 7912,
    "body": "Re add reading null skylight + update the starlight version.\r\n\r\nFixes https://github.com/PaperMC/Paper/issues/7780#issuecomment-1150408656\r\nReference: https://github.com/PaperMC/Starlight/commit/6a51be692ddeefcbba3d3e4cec62d0e1e4846502#",
    "head_branch": "dont-read-gone-blocklight",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update starlight + read null light data (#7912)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7a7d9087c4d6d37683d",
    "number": 7910,
    "body": "Changes the check to check for BiomeTags again (instead of the biome) and renames the config option.\r\n\r\nfrom the 1.19 todo issue",
    "head_branch": "fix/slime-tag",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make slime spawn checks use tag again and rename config option (#7910)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7a9d9087c4d6d37683e",
    "number": 7909,
    "body": "Unused and should not exist in items anymore. ",
    "head_branch": "remove-loc-name",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove locname (#7909)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7aad9087c4d6d37683f",
    "number": 7908,
    "body": "Remove unused config options\r\n",
    "head_branch": "config-remove",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove old config options (#7908)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7abd9087c4d6d376840",
    "number": 7907,
    "body": "Otherwise chunks from <1.18 won't load, since the status key doesn't exist yet.\r\n\r\n[#paper-contrib message, for reference](https://canary.discord.com/channels/289587909051416579/925530366192779286/984490090900381778)",
    "head_branch": "fix/chunkload-validate-order",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't validate chunk before it's been run through DataConverter (#7907)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7acd9087c4d6d376841",
    "number": 7905,
    "body": "Some block entities update their listener when load is called. This is bad as then when the block entity is\r\nremoved the listener will not be able to be removed. This properly removes and readds listeners when updating\r\nblock entities that have this special behavior.\r\n\r\nSee bug reports for easy testing steps.\r\n\r\nFixes:\r\n- calling update() on these block entities breaks them\r\n- trying to place a sensor/shrieker with nbt data will cause it to not work\r\n- /data command breaks sensors/shriekers\r\n- Underlying issue: https://bugs.mojang.com/browse/MC-252786",
    "head_branch": "reapply-gamevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7add9087c4d6d376842",
    "number": 7903,
    "body": "need to apply and rebuild patches before or after merge",
    "head_branch": "add-poi-patch",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update Optimise general POI access (#7903)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7aed9087c4d6d376843",
    "number": 7902,
    "body": "Another one of these yucky shared methods.\r\nThis update caused it to no longer cancel the potion effect given to players. \r\n\r\nInstead, filter it if it fits the given predicate initially.\r\n\r\nTODO: ApplyDarknessEffectEvent?\r\nWarden and Shrieker would both call this, might be nice to have... or at least add some kind of custom effect reason type here to allow canceling. (There is no warden, guardian, shrieker bukkit effect reason)",
    "head_branch": "fix-elder-guardian",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Correctly handle ElderGuardianAppearanceEvent canceling  (#7902)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7afd9087c4d6d376844",
    "number": 7901,
    "body": "Code copied from frog variant if we want to instead manually define it in the enum that can be done.",
    "head_branch": "cat-keyed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Keyed cat Type (#7901)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a7b0d9087c4d6d376845",
    "number": 7900,
    "body": "Not sure if this belongs in any existing patch. Fixes [SPIGOT-7042](https://hub.spigotmc.org/jira/browse/SPIGOT-7042). Upstream will probably fix this pretty quickly, so feel free to close if you think this isn't worth the effort.",
    "head_branch": "fix/incorrect-title",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7b1d9087c4d6d376846",
    "number": 7899,
    "body": null,
    "head_branch": "throw-away-playerchat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7b2d9087c4d6d376847",
    "number": 7898,
    "body": null,
    "head_branch": "deprecate-sculk-option",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Deprecate origin for vibrations (#7898)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a7b3d9087c4d6d376848",
    "number": 7897,
    "body": "Apparently also needs to be backported to 1.18, haven't checked that though.",
    "head_branch": "fix/timings-link",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "(1.19) Make timings link clickable (#7897)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7b4d9087c4d6d376849",
    "number": 7896,
    "body": null,
    "head_branch": "fix-eggs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing spawn eggs (#7896)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7b5d9087c4d6d37684a",
    "number": 7895,
    "body": null,
    "head_branch": "dev/1.19",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix structures issues/api (#7895)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7b6d9087c4d6d37684b",
    "number": 7893,
    "body": null,
    "head_branch": "add-jigsaw",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7b7d9087c4d6d37684c",
    "number": 7892,
    "body": "Fixes async chunk poi errors",
    "head_branch": "fix-async-poi",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Wrap NBTOps in RegistryOps (#7892)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7b8d9087c4d6d37684d",
    "number": 7891,
    "body": null,
    "head_branch": "1.19/end-overflow",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Port Fix missing chunks due to integer overflow to 1.19 (#7891)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7b9d9087c4d6d37684e",
    "number": 7890,
    "body": "- port to Minecraft 1.19\r\n- update to v1.3, fixing some Vanilla parity issues (like #7852)",
    "head_branch": "update-alternate-current-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Alternate Current patch (#7890)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a7bad9087c4d6d37684f",
    "number": 7888,
    "body": "This check was removed, so this would basically always try to read the light data.",
    "head_branch": "light-engine",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Check if is light status or above / isLightOn / starlight version fits (#7888)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7bbd9087c4d6d376850",
    "number": 7887,
    "body": "Mark on https://github.com/PaperMC/Paper/issues/7780",
    "head_branch": "dont-resend-painting",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Dont resent entity on art update (#7887)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7bcd9087c4d6d376851",
    "number": 7886,
    "body": "Mark on https://github.com/PaperMC/Paper/issues/7780",
    "head_branch": "remove-desync",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove painting desync (#7886)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7bdd9087c4d6d376852",
    "number": 7885,
    "body": "Previous behavior",
    "head_branch": "fix-biomeprovider",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use biome source method to prevent loading chunks  (#7885)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7bed9087c4d6d376853",
    "number": 7884,
    "body": "Fucking up your patch headers, one PR at a time",
    "head_branch": "1.19/moar",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Moar 1.19 fixes (#7884)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7c0d9087c4d6d376854",
    "number": 7883,
    "body": null,
    "head_branch": "fixies",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Misc fixes (#7883)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7c0d9087c4d6d376855",
    "number": 7881,
    "body": "Fixes a bunch of errors in 1.19.\r\n\r\nThis shouldn't conflict with kenny's work, if it does I'll obviously fix the conflicts :)",
    "head_branch": "1.19/misc-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Misc. 1.19 fixes (#7881)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a7c1d9087c4d6d376856",
    "number": 7880,
    "body": null,
    "head_branch": "armor-tag",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add ARMOR tag to MaterialTags (1.18.2) (#7880)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a7c3d9087c4d6d376857",
    "number": 7878,
    "body": "By default, spigot shifts chat over to an unbounded thread pool,\r\non a normal server, this really offers no gains, the creation of a thread\r\non submitting to the pool on these servers eats more time vs just running it in\r\nthe netty pipeline, however, on servers using plugins which do work in here, there\r\ncould be some overall benefits to moving this stuff outside of the pipeline.\r\n\r\nIn general, this patch does two things:\r\n1) Exposes the core size for the pool, this allows for ensuring that a number of threads\r\nsit around in the pool, mitigating the need for creating new threads; This IS however\r\ncaveated, the ThreadPoolExecutor will ONLY create core threads as they're needed, it\r\njust won't allow for us to dip back under the # of core threads, this can potentially\r\nbe mitigated by calling prestartCoreThread, however, I'm not sure if there is much justification\r\nfor this\r\n2) Exposes a max size for the pool, as stated, by default, this is unbounded, for most\r\nservers limiting the size of the pool is going to have 0 effects given how fast chat\r\nis actually processed, this is honestly really just exposed for the misnomers or people\r\nwho just wanna ensure that this won't grow over a specific size if chat gets stupidly active\r\n\r\nThis is basically my own take on #7483 ",
    "head_branch": "feature/chat-thread-limits",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Configurable chat thread limit (#7878)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7c4d9087c4d6d376858",
    "number": 7877,
    "body": "Adds block event api, redoes the world event api,  and adds alot of missing entity effect api.\r\nI have added 1.19 stuff because it's coming soon.\r\n\r\nFeedback Wanted:\r\n### **BlockEvent**\r\n- Is it worth having the applicable materials on the event? It's not actually needed anywhere because Minecraft does the checks itself. I was debating wether or not to put it into its individual block classes, but I am not sure as it wouldn't fit EntityEffect.\r\n### **In general**\r\n- Most likely will convert these classes into type tokens (https://github.com/PaperMC/Paper/pull/5605), as then it would allow the nullable Axis to be an Optional.\r\n- Any suggestions on a better way to handle converting these types instead of the big crazy instanceof chain? Might be the only way but I am not sure if there is a nicer way available for now.\r\n- Better names? These names collide so maybe it would be better to keep them named as ``XEffect``? Although minecraft refers to them as events it might not be worth changing it, but, opinions.\r\n\r\nTODO:\r\n- Convert to type tokens?\r\n- Docs\r\n\r\nEach type has been tested (the non 1.19 ones of course).\r\n\r\n",
    "head_branch": "block-world-event-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7c5d9087c4d6d376859",
    "number": 7876,
    "body": null,
    "head_branch": "fix/kenny-bad",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing deprecation to AdvancementDisplayType (#7876)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a7c6d9087c4d6d37685a",
    "number": 7875,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n6a039faf PR-745: Expose more information about advancements\r\n52148c47 PR-749: Various javadoc improvements\r\n23c2d841 PR-748: Remove permissible recalculation from Permission constructor\r\n\r\nCraftBukkit Changes:\r\na59dc59e SPIGOT-7025: Use existing item in hand for ranged Drowned attack\r\ne4cca0ca PR-1050: Expose more information about advancements",
    "head_branch": "upstream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#7875)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n6a039faf PR-745: Expose more information about advancements\r\n52148c47 PR-749: Various javadoc improvements\r\n23c2d841 PR-748: Remove permissible recalculation from Permission constructor\r\n\r\nCraftBukkit Changes:\r\na59dc59e SPIGOT-7025: Use existing item in hand for ranged Drowned attack\r\ne4cca0ca PR-1050: Expose more information about advancements"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a7c7d9087c4d6d37685b",
    "number": 7874,
    "body": "When a player quits normally their leave message respects the `use-display-name-in-quit-message` setting, but when they are kicked the leave message always uses their display name.\r\n\r\nThis PR makes kick messages consistent with quit messages",
    "head_branch": "kick-message-names",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make leave messages for kicks the same as for quitting (#7874)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7c8d9087c4d6d37685c",
    "number": 7873,
    "body": "Fixes a regression in the hex pattern converter that caused a breaking change unintended before hard fork.\r\n\r\ncc @broccolai @Spottedleaf\r\n\r\nbcc @jpenilla",
    "head_branch": "FIX-JUMPS-MISTAKES",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7c9d9087c4d6d37685d",
    "number": 7870,
    "body": "Not sure about any more in-depth docs there, but there we go, exemplifying how easy it is to use minimessage and at least providing one shorthand method for the most common usecase + having something separate from the legacy text accepting sendMessage method for plain text",
    "head_branch": "sendMessage",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7cad9087c4d6d37685e",
    "number": 7869,
    "body": "With the adventure team display name method, we don't do upstreams totally not needed 128 length check.\r\n\r\nOn a related note, even though the setDisplayName(String) method is deprecated, should we remove that 128 length check anyways? I don't think we really care since its deprecated, but thought I'd ask.",
    "head_branch": "fix/team-javadocs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove incorrect throws javadoc in Team (#7869)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a7cbd9087c4d6d37685f",
    "number": 7868,
    "body": "Fixes an exploit that causes a hang when resolving a book nbt tag on book open.\r\n\r\nI'm not sure this is something Paper would be interested in fixing, because this can be fixed by plugins and is only caused by giving players creative mode.",
    "head_branch": "fix/book-oom",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7ccd9087c4d6d376860",
    "number": 7867,
    "body": "Updated Adventure to version 4.11.0 and added the getComponentLogger method to the Plugin interface to be able to display components in the console through the respective plugin's logger instead of using ConsoleCommandSender#sendMessage",
    "head_branch": "component-logger",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7cdd9087c4d6d376861",
    "number": 7865,
    "body": "I'm not sure I did the paper comments for the removed diffs right, I wasn't sure if the previous ones would apply nicely or not. \r\nIt should be noted ItemFrames currently has setVisible/isVisible.\r\n\r\nSee: https://canary.discord.com/channels/289587909051416579/555462289851940864/981740402551963688\r\n\r\nIt might be worth expanding the documentation, but opinions are appreciated!",
    "head_branch": "move-setinvisible",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7ced9087c4d6d376862",
    "number": 7864,
    "body": "The HAProxyMessage type could also be LOCAL, which is used to check the health of the server every so often. A HAProxyMessage with a type of LOCAL will have a null sourceAddress and will fail the connection due to an IllegalArgumentException. The LOCAL message type means the receiver should use the real IP address of the connection as the source address, and thus the sourceAddress is unset.\r\n\r\n```\r\n[13:28:53 WARN]: java.lang.IllegalArgumentException: hostname can't be null\r\n[13:28:53 WARN]: \tat java.base/java.net.InetSocketAddress.checkHost(InetSocketAddress.java:158)\r\n[13:28:53 WARN]: \tat java.base/java.net.InetSocketAddress.<init>(InetSocketAddress.java:225)\r\n[13:28:53 WARN]: \tat net.minecraft.server.network.ServerConnectionListener$1$1.channelRead(ServerConnectionListener.java:144)\r\n```\r\n\r\n(The exception silently fails in the current code, I had to add a try/catch to print it)\r\n\r\nTo fix this, I added an if statement to check that the type of the HAProxyMessage is PROXY. The only two possible types are LOCAL and PROXY. Since LOCAL message types are not forwarding an address, they will be silently ignored as no action is needed for them.\r\n\r\n```diff\r\n if (msg instanceof io.netty.handler.codec.haproxy.HAProxyMessage message) {\r\n+    if (message.command() == io.netty.handler.codec.haproxy.HAProxyCommand.PROXY) {\r\n         String realaddress = message.sourceAddress();\r\n         int realport = message.sourcePort();\r\n \r\n         SocketAddress socketaddr = new java.net.InetSocketAddress(realaddress, realport);\r\n \r\n         Connection connection = (Connection) channel.pipeline().get(\"packet_handler\");\r\n         connection.address = socketaddr;\r\n+    }\r\n } else {\r\n     super.channelRead(ctx, msg);\r\n }\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Check HAProxyMessage type is PROXY (#7864)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7cfd9087c4d6d376863",
    "number": 7862,
    "body": "World's should not be identified with strings, they should be identified with namespaced keys. \r\n\r\n### TODO\r\n\r\n- [ ] Check that timings reports won't be affected\r\n- [ ] World component display name\r\n- [ ] MapItemSavedData's level name usage\r\n- [ ] CraftServer's Map<String, World> using level name\r\n- [ ] World adventure's Name pointer\r\n- [ ] Move hunks into their correct patches\r\n- [ ] Paper comments in the right places",
    "head_branch": "fix/remove-world-name",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7d0d9087c4d6d376864",
    "number": 7861,
    "body": "Calling getBedSpawnLocation on an instance of CraftOfflinePlayer returned a location with the wrong world and no spawn angle (yaw).\r\n\r\nI noticed https://github.com/PaperMC/Paper/issues/7860 while fixing this issue, but this PR does **not** fix that",
    "head_branch": "fix/OfflinePlayer#getBedSpawnLocation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix OfflinePlayer#getBedSpawnLocation (#7861)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7d1d9087c4d6d376865",
    "number": 7857,
    "body": null,
    "head_branch": "update-forgeflower",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update ForgeFlower (#7857)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7d2d9087c4d6d376866",
    "number": 7855,
    "body": "This allows the use of proper multiplication values, as none of the pre-existing bukkit enums properly convey the way to do this. And as exampled by me, The multiply_scalar_1 operation is frankly quite dumb, why add 1 to the users pre-existing input its just asking for unwanted pain while trying to figure out why the players health it 36 and not 18.",
    "head_branch": "feature/improve-multiplication-operation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7d3d9087c4d6d376867",
    "number": 7851,
    "body": "I did a quick test wherein a plugin's onEnable method I did\r\n```java\r\nWorldCreator creator = new WorldCreator(\"world\");\r\nBukkit.createWorld(creator);\r\n```\r\nfor `world`, `world_nether`, and `world_the_end` and now all 3 work. (It gets the level name defined in server.properties)",
    "head_branch": "fix/stupid-level-name",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix cb's janky level name in WorldCreator (#7851)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a7d4d9087c4d6d376868",
    "number": 7849,
    "body": "TLDR; Unhandled nbt tags inside ItemMeta are not cloned upon cloning ItemMeta, which, in some very specific cases, leads to unintentionally modifying the original item when modifying the nbt of its clone.\r\n______\r\nItemMeta stores Map of unhandled nbt tags and upon cloning it (usually either via `clone()` or `new ItemStack(oldItem)`) just puts all existing keys into the new map without cloning them.\r\n\r\nNormally this would stay unnoticed (and was for years) and have no side effects since while working with nbt you do not modify the existing objects directly, **BUT** this is not the case at least for the compound tag, changes to which will be applied to every cloned item.\r\n\r\nI've run into this issue while messing around with [NBT-API](https://github.com/tr7zw/Item-NBT-API) via the following code:\r\n```java\r\nItemStack test1 = new ItemStack(Material.STONE);\r\nnew NBTItem(test1, true).getOrCreateCompound(\"TestCompound\").setString(\"key1\", \"value1\");\r\nItemStack test2 = test1.clone();\r\ngetLogger().info(\"item1: \" + new NBTItem(test1));\r\ngetLogger().info(\"item2: \" + new NBTItem(test2));\r\nnew NBTItem(test1, true).getOrCreateCompound(\"TestCompound\").setString(\"key2\", \"value2\");\r\ngetLogger().info(\"item1: \" + new NBTItem(test1));\r\ngetLogger().info(\"item2: \" + new NBTItem(test2));\r\n```\r\n\r\nBehavior before this patch:\r\n```\r\n[TestPlugin] item1: {TestCompound:{key1:\"value1\"}}\r\n[TestPlugin] item2: {TestCompound:{key1:\"value1\"}}\r\n[TestPlugin] item1: {TestCompound:{key1:\"value1\",key2:\"value2\"}}\r\n[TestPlugin] item2: {TestCompound:{key1:\"value1\",key2:\"value2\"}}\r\n```\r\n\r\nNotice how the nbt of `item2` was affected too despite the item being the cloned one because they still share the same compound tag.\r\nAfter the patch:\r\n```\r\n[TestPlugin] item1: {TestCompound:{key1:\"value1\"}}\r\n[TestPlugin] item2: {TestCompound:{key1:\"value1\"}}\r\n[TestPlugin] item1: {TestCompound:{key1:\"value1\",key2:\"value2\"}}\r\n[TestPlugin] item2: {TestCompound:{key1:\"value1\"}}\r\n```\r\n\r\nVanilla uses similar logic and also clones tags, so I'm not sure why this was not the case for Bukkit's implementation.\r\nI'm open to opinions on this if any.\r\n\r\n______\r\nEdit: Simplified explanation in case it's not clear what's going on:\r\n1. Upon cloning an item its meta gets separate name, lore, enchantments, etc. (all vanilla tags)\r\n2. Items also have Map<String, Tag> of unhanled tags that plugins can use for storing custom data.\r\n3. Upon cloning the new map is created and all the previous unhanded tags are put into the new map. (shallow copy)\r\n4. Now we have two items that have their own vanilla tags (that are equals()) and shared custom tags (that are ==).\r\n5. NBT-API accesses the compound tag of the first item and puts a new nbt value into it.\r\n6. Since both the original and the cloned item share the same objects, the second item now has that newly created nbt value too, even though the second item was never touched within the code.",
    "head_branch": "itemmeta-nbt-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Properly clone custom nbt tags inside ItemMeta (#7849)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7d5d9087c4d6d376869",
    "number": 7848,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n95d233dc SPIGOT-1807: PlayerTeleportEvent is called twice\r\n\r\nSpigot Changes:\r\nb0819150 PR-116: Slightly reduce item merge radius in Y-direction\r\nef2aa765 PR-119: Fix off-by-one and allow disabling max-tnt-per-tick option",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit/Spigot) (#7848)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n95d233dc SPIGOT-1807: PlayerTeleportEvent is called twice\r\n\r\nSpigot Changes:\r\nb0819150 PR-116: Slightly reduce item merge radius in Y-direction\r\nef2aa765 PR-119: Fix off-by-one and allow disabling max-tnt-per-tick option"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7d6d9087c4d6d37686a",
    "number": 7847,
    "body": "Introduces the new `Rotations` class that is used for storing rotations in degrees on each axis (X, Y, Z).\r\n\r\nCurrently, the patch adds usage for it for ArmorStand rotations, which makes manipulations easier and more precise \r\n(since it follows vanilla logic of using degrees instead of radians).\r\n\r\nExample usage to set the right arm's rotation to 90 degrees on the X axis:\r\n```java\r\narmorStand.setRightArmRotations(Rotations.ofDegrees(90, 0, 0));\r\n```\r\n\r\nSimple! Before you'd have to use `EulerAngle` with a workaround like `Math.toRadians(90)`.\r\n\r\nFeel free to give any feedback :)",
    "head_branch": "armorstands",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow using degrees for ArmorStand rotations (#7847)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a7d7d9087c4d6d37686b",
    "number": 7846,
    "body": "The `minecraft.debugstick.always` perm's default was `FALSE` but since it was a child perm of `minecraft` whose default is `OP`, op's all had that permission by default. This is a behavioral change from vanilla as ops can only use them while in creative (the instabuild ability). This removes the parent from the always perm.\r\n\r\nFixes https://github.com/PaperMC/Paper/issues/7844",
    "head_branch": "fix/debugstick-perm-parent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove incorrect parent perm from debugstick.always (#7846)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7d8d9087c4d6d37686c",
    "number": 7845,
    "body": "This PR adds an event that fires whenever an entity updates its memory. It differentiates between memory add/change/delete. The event can be cancelled which causes this memory not to be updated. The event has two parameters, the first one being the MemoryKey of the memory that is being updated and the second one being either \"ADD\", \"CHANGE\" or \"DELETE\", which are properties of an enum declared in the event class. It's unfortunately not possible to also pass an Entity in that event since there is no reference from the brain class to the entity this brain belongs to. If I wanted to pass the entity directly with the methods that update the memory instead I'd have to change like 80 files, which seemed a bit overkill.",
    "head_branch": "brain-memory-update-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7d9d9087c4d6d37686d",
    "number": 7841,
    "body": "The problem is that on version 1.18.2, some players can log into the server, and for some it says \"/192.168.88.104:36871 lost connection: If you wish to use IP forwarding, please enable it in your |\r\nBungeeCord config as well! \" issuing a local ip registered in bungeecord. We have a configured bungeecord and set ip_forwarding to true, and also configured in spigot.yml\r\nbungeecord: true. I repeat, some players log in calmly, and some give these errors with a local IP address.\r\n\r\nP.S. We have servers on other versions, everything is configured the same on them and no one has such an error.",
    "head_branch": "fix/persistence",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7dad9087c4d6d37686e",
    "number": 7840,
    "body": "Adds an event to further extend vanilla's locked block feature.\r\n\r\nCouple things to address. Not a huge fan of the generic hack to combine `TileState`, `Nameable`, and `Lockable`. Could either make `Lockable` extend both `TileState` and `Nameable` or make a new interface `LockableTileState` to combine them.",
    "head_branch": "feature/BlockLockCheckEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add BlockLockCheckEvent (#7840)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a7dbd9087c4d6d37686f",
    "number": 7839,
    "body": "Implementation must conform to declaration of method.\r\n```java\r\nvoid color(@Nullable net.kyori.adventure.text.format.NamedTextColor color);\r\n```\r\nWhen null is passed as method argument, it must be handled by implementation not to cause NPE. \r\nIn this case, when this class was upgraded from 1.18.R1 to R2, this check was removed.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7dcd9087c4d6d376870",
    "number": 7838,
    "body": null,
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7ddd9087c4d6d376871",
    "number": 7837,
    "body": "Weird grammar around not allowing MISC as a argument here and also, that `Minecraft default:` section isn't true because its not the same for each category.",
    "head_branch": "fix/upstream-javadoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix more upstream javadocs (#7837)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a7ded9087c4d6d376872",
    "number": 7836,
    "body": "This PR change a few things in the WSL docs\r\n- Change the URL for install and filesystems and latest in Windows Docs\r\n- Mention the update things only necesary for Windows 10",
    "head_branch": "change/contribute-wsl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Update WSL docs in CONTRIBUTING (#7836)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7dfd9087c4d6d376873",
    "number": 7835,
    "body": "Same as [9936e2b](https://github.com/PaperMC/papermc.io/commit/9936e2b85c65edb5a7ecb06c960988ec0097793d) and [0f41894](https://github.com/PaperMC/docs/commit/0f41894b9b2d41568f0ab0e4670117a4996a84bb) but for paper itself.",
    "head_branch": "new-repo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci-skip] Update repository and API urls (#7835)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7e0d9087c4d6d376874",
    "number": 7833,
    "body": "This PR adds a bstats metrics chart for the amount of enabled datapacks, very similar to the [already existing chart](https://bstats.org/plugin/server-implementation/Paper/580#legacy_plugins) for legacy plugins.\r\n\r\nThis can be used to make data-based decisions on changes like the dimension storage rework (https://github.com/PaperMC/Paper/pull/7594).\r\n\r\nOf course the `datapacks` chart needs to be added to bstats as well for this to work. \r\nAlso data about the type of datapack (e.g. worldgen, loot or dimensions) would be very useful as well, but I have not found a way to get it other than looking at the files directly, and that seems a bit messy. \r\n\r\ncat talked about _maybe_ doing this on Discord so I thought I just make a quick PR. I added the changes to the existing metrics patch, that seemed to be the right place",
    "head_branch": "datapack-metrics",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7e1d9087c4d6d376875",
    "number": 7831,
    "body": "Mini's mapping viewer hasn't been updated since 1.16 and screamingsandals's mapping viewer supports more than just Spigot <-> NMS",
    "head_branch": "update-mapping-viewer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Change link to screamingsandals"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7e2d9087c4d6d376876",
    "number": 7830,
    "body": "This fixes the maxDistance provided to the methods in PoiAccess. \r\n\r\nThe radius provided is squared and then squared again in PoiAccess causing it to check if the POI is in range with a cubed radius. This often causes it to search from the bottom to the top of the world for POI's and also deviates from the vanilla radius.",
    "head_branch": "fix-poi-search-distance",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7e3d9087c4d6d376877",
    "number": 7828,
    "body": "Adds API functions to `Bukkit`, `Server`, and `Material` to allow changing the explosion resistance of blocks without using NMS or Reflection which is the current method used to acomplish this.\r\n\r\nAs `Material` does not have a CraftBukkit implementation the functions to alter the resistance is part of `Server`, these functions are aliased in `Bukkit` and `Material` for easy access.\r\n\r\nThe existing `getBlastResistance` function has been deprecated as the name \"explosion resistance\" is used by Mojang Mappings. The function also previously used a switch statement to define the explosion resistance which has been commented out in favor of using the actually values.\r\n\r\nA `defaultExplosionResistance` has been added to BlockBehaviour which stores the initial value, allowing a plugin to reset the explosion resistance to the value specified by vanilla minecraft.",
    "head_branch": "explosion-resistance-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7e4d9087c4d6d376878",
    "number": 7825,
    "body": "This adds an event named EntityBrainMemoryRemoveEvent which fires when an entity's memory is removed from its Brain. It can be cancelled, which causes this memory not to be deleted.",
    "head_branch": "entity-brain-memory-remove-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7e5d9087c4d6d376879",
    "number": 7822,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/7821\r\n\r\nAnytime a recipe match is going to be computed by the server to try and place the recipe in the crafting area (grid, furnace, etc.), the recipe ingredients are looked at and any ingredients that are marked as \"exact\" are noted. When the inventory is accounted and unique int ids are created for each item type, any item that matches the exact ingredient tracked before is given an extra separate unique int id. Then that is used to calculate if the recipe is valid.\r\n\r\nThis also removes the need for the patch added [here](https://github.com/PaperMC/Paper/commit/ac5b19c55e0327e4400d995e7f59a4c58de845c1). This patch fixed shapeless recipes with exact recipe choices due to it uses the same StackedContents system. But now that that system has been integrated with the ExactChoices, we can just use the same thing there and it works.\r\n\r\n### Caveats\r\nThere are some client-side limitations that are unavoidable as far as I can figure. If you have an exact ingredient that has a custom display name, enchantments or a damage value, the client will show the recipe as red even if you can click on it and it will put the ingredients in the correct slots. This is because the client normally ignores items with names, damage, or enchants when calculating the ingredients for a recipe.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-7822.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/879420484.zip)",
    "head_branch": "fix/exact-choice-recipe-book",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix exact choice recipe book clicks (#7822)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7e6d9087c4d6d37687a",
    "number": 7819,
    "body": "This PR close #7812 adding methods for get the targets for the \"heads\" of the Wither, this values are a temp value used for withers in attacks, this PR too change the logic for Wither#setTarget making the change affect all the heads.",
    "head_branch": "feature/wither-targets-and-skulls",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7e7d9087c4d6d37687b",
    "number": 7817,
    "body": "These methods are for the MaterialData class which is already marked as deprecated. ",
    "head_branch": "deprecate-MaterialData-methods-in-ItemStack",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7e8d9087c4d6d37687c",
    "number": 7808,
    "body": "Allows for doing `recipe.getKey()` from the recipeIterator",
    "head_branch": "make-recipes-impl-keyed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7e9d9087c4d6d37687d",
    "number": 7806,
    "body": "was missed during upstream update",
    "head_branch": "fix/upstream-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove unneeded patch (#7806)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7ead9087c4d6d37687e",
    "number": 7805,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n312281ea PR-742: Make World implement Keyed\r\n\r\nCraftBukkit Changes:\r\n2ac7fa7a SPIGOT-7014: getLootTable API should not persistently update loot table\r\n7fdd7941 PR-1046: Make World implement Keyed\r\n7bc728a6 PR-1045: Revert changes to persistence required checks\r\n\r\nSpigot Changes:\r\nb6d12d17 Rebuild patches",
    "head_branch": "upstream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n312281ea PR-742: Make World implement Keyed\r\n\r\nCraftBukkit Changes:\r\n2ac7fa7a SPIGOT-7014: getLootTable API should not persistently update loot table\r\n7fdd7941 PR-1046: Make World implement Keyed\r\n7bc728a6 PR-1045: Revert changes to persistence required checks\r\n\r\nSpigot Changes:\r\nb6d12d17 Rebuild patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a7ebd9087c4d6d37687f",
    "number": 7804,
    "body": "Currently, hopper minecarts ignore the cooldown completely, as they never update the last position variable. (It only follows the cooldown if the hopper minecart is at 0,0,0) Mojang has this issue marked as [Works as Intended](https://bugs.mojang.com/browse/MC-65029?jql=text%20~%20%22TransferCooldown%22).\r\n\r\nTherefore, I decided to fix this by not using this system and instead just correctly respecting when the cooldown is set. This is because paper sets the cooldown in some places, and I feel it's appropriate to have those applied to these hoppers as well.\r\nThis should ensure that the optimizations to hoppers properly have cooldowns applied to hopper minecarts (for example, if the hopper is full).\r\n\r\nAnother fix is to possibly just update the lastPosition, however, this will cause the optimization to perhaps skip the cooldown in some cases if the hopper minecart moves, which seems a bit silly, especially since this system isn't even used.\r\n\r\nFeedback is needed on this if this should be the correct fix, a separate config to change the cooldown on minecart hoppers (currently the normal cooldown of hoppers / 2), or if we just fix the vanilla system.\r\n\r\nAlso, should this go in a separate patch? Or the optimized hopper patch?",
    "head_branch": "fix-hopper-minecart-delay",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7ecd9087c4d6d376880",
    "number": 7803,
    "body": "Fixes the villager cure exploit not working by wrapping the part that awards positive gossip in an else, instead of only removing any previous gossip for the player that cured the villager.",
    "head_branch": "fix/villager-cure-exploit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7edd9087c4d6d376881",
    "number": 7802,
    "body": "Hello everyone !\r\n\r\nI am very happy to be able to present to you the little work that our team has done. Indeed this PR makes it possible to add the recovery of the inputs that a player makes when he is on an entity. To try to best meet expectations, we worked with @lynxplay .\r\n\r\nHere is the link to the first discussion I had via my #7770 \r\n\r\nAs what has been said, we have done everything so that this event is done before the server logic. the location we have chosen allows us to better manage the event. \r\n\r\nWe hope this PR will be a help for a potential future full entity control API. In the meantime, we thank you in advance for your feedback.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7eed9087c4d6d376882",
    "number": 7801,
    "body": "Adds methods notify clients about item breaks and to simulate damage done to an itemstack and all the logic associated with damaging them\r\n\r\nResolves https://github.com/PaperMC/Paper/issues/7755",
    "head_branch": "feature/ItemStack-damage",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "ItemStack damage API (#7801)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a7efd9087c4d6d376883",
    "number": 7800,
    "body": "Has done nothing for 10 years\r\n ",
    "head_branch": "deprecate-old-2012-bounce",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Deprecate set/doesBounce from Projectile (#7800)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a7f0d9087c4d6d376884",
    "number": 7799,
    "body": "When a brewing stand is unloaded, such as saving and quitting in a world, the cycle is reset to the start. This includes consuming another blaze powder.\r\nSee [MC-26304](https://bugs.mojang.com/browse/MC-26304).",
    "head_branch": "fix/mc-26304",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7f1d9087c4d6d376885",
    "number": 7798,
    "body": "If an entity is provoked by a second one using commands, the second will join in the fight against itself, causing it to attack itself repeatedly.\r\nSee [MC-110386](https://bugs.mojang.com/browse/MC-110386).",
    "head_branch": "fix/mc-110386",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7f2d9087c4d6d376886",
    "number": 7795,
    "body": "https://github.com/PaperMC/Paper/commit/2515bc4751c5243c298f582920be89043c187d34 broke the default door breaking difficulty config option for Vindicators. `EntityType#getBaseClass()` just returns `Entity.class` for all entity types.",
    "head_branch": "fix/door-breaking-difficulty",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix door breaking difficulty defaults for vindicator (#7795)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7f4d9087c4d6d376887",
    "number": 7793,
    "body": "I have a gist for when need \"rebase\" this patch and forget remove unused fields... this PR only remove this unused fields...",
    "head_branch": "clean/remove-unused-field-zombiedoors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Clean unused field for Configurable door breaking difficulty (#7793)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7f5d9087c4d6d376888",
    "number": 7792,
    "body": "Fixes #7771 by hiding ores at Y=4 and below with deepslate instead of stone. Y=4 was chosen because stone transitions into deepslate from Y=8 until Y=0. Hiding from 8 or 0 would make ores stand out, since there'd be an out of place stone/deepslate cube, so 4 seemed like a good average.\r\n\r\nccing @stonar96\r\n\r\n<details>\r\n<summary>Before & after comparison</summary>\r\n\r\n**Before:**\r\n![2022-05-05_12 53 21](https://user-images.githubusercontent.com/44026893/166910408-d197ea5d-4526-4a8a-b1b4-fb1a91e8c185.png)\r\n\r\n**After:**\r\n![2022-05-05_12 56 56](https://user-images.githubusercontent.com/44026893/166910421-6a262b6f-f969-4eb1-8fc4-b769202d227a.png)\r\n</details>\r\n",
    "head_branch": "fix/anti-xray-deepslate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Hide ores with deepslate at Y=4 and below (#7792)\n\nFixes #7771\r\n\r\nCo-authored-by: stonar96 <minecraft.stonar96@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7f6d9087c4d6d376889",
    "number": 7787,
    "body": null,
    "head_branch": "add-playerreleaseitemevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PlayerStopUsingItemEvent (#7787)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a7f7d9087c4d6d37688a",
    "number": 7781,
    "body": "Should fix https://github.com/PaperMC/Paper/issues/7764 although I don't know how to test it exactly. Not 100% on the logic that makes these run in the first place. Other fixers there have a isHorizontal check which supports this one having one too.",
    "head_branch": "fix/upgrade-data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7f8d9087c4d6d37688b",
    "number": 7777,
    "body": "Paper was at some point writing data inside of the filtered text,\nwhich in the past was not an issue, however, it appears that mojang\nhas flipped something which is now causing this information to be\nrelevant and thus causing interesting effects on the client.\n\nThis patch will clean up said data for existing signs, given that\nthere is realistically 0 chance that nobody was even using this data,\nthis should be a none issue for old signs\n",
    "head_branch": "signs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "cleanup filtered sign text (#7777)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7f9d9087c4d6d37688c",
    "number": 7776,
    "body": "Upstream has released updates that appear to apply and compile correctly.\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\n\nBukkit Changes:\n31514774 SPIGOT-6949: Configuration sections that are nested within Maps or Lists are not properly serialized.\n1bebebfb SPIGOT-6992: Add LimitedLife/LifeTicks/Bound APIs to Vex\n\nCraftBukkit Changes:\n9cc7d766d SPIGOT-7010: Changing dropper item results in using dispensing behaviour\ne87f2e3ed SPIGOT-6992: Add LimitedLife/LifeTicks/Bound APIs to Vex\ncf391b51c Pass in SpawnReason rather than boolean\n098aecb04 SPIGOT-7001: Fix entity already exists in CraftWorld#spawnFallingBlock\n911bde181 SPIGOT-6972: Root command nodes can leak to client\n",
    "head_branch": "upstream-merge",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#7776)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a7fad9087c4d6d37688d",
    "number": 7775,
    "body": "setMessage affects messages, filteredMessage, and renderMessages, we were only doing an arraycopy for messages\r\n\r\nfixes #7774",
    "head_branch": "fix-7774",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use setMessage instead of arraycopy\n\nsetMessage affects messages, filteredMessage, and renderMessages, we were only doing an arraycopy for messages\n\nfixes #7774"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7fbd9087c4d6d37688e",
    "number": 7773,
    "body": null,
    "head_branch": "undeprecate-getofflineplayer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Undeprecate getOfflinePlayer (#7773)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a7fcd9087c4d6d37688f",
    "number": 7767,
    "body": "I know the reason for remove this. It cause issue and confuse for some messages in console and legacy color is deprecated and legacy. Many plugin use this. It is hard to remove at random time with no warning (ik color are deprecated. there is no direct warning about log).\r\n\r\nIn kyori I hear about \"ansi component serializer\". I think maybe this should wait until ansi serializer exists.. By restore with config this provide the better deprecation period and notice. small brown out.\r\n\r\nI default to true. I do this because if it is not, many plugin will auto set to true. This is not good idea. I put deprecated in the config name to be clear for users who read.\r\n\r\nThank you for consideration. This is my first PR. I hope I read the contrib guidelines correctly 😅\r\n\r\nThis provide temp fix for #7590, #7560, #7662. To kangaro: this is not made because of you. do not put me on memecademy. let ur ego suffer.",
    "head_branch": "restore-legacy-colors-with-logger",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7fdd9087c4d6d376890",
    "number": 7763,
    "body": "The reload command has been unsafe in several ways since it was introduced. This PR modifies the command so it can safely be used for it's intended purpose\r\n\r\nThis PR changes the functionality of reload so that instead of disabling and re-enabling plugins, the reload command will call `Plugin#onReload()`. All other functionality such as reloading server configuration has been kept.\r\n\r\n`onReload()` is used the same was as `onEnable()` and the other similar methods in `Plugin`.\r\n\r\nRunning the Reload command now displays a modified warning message. Instead of informing the user that the command is no longer supported, it says \"Please note that while this command is no longer unsafe, it may not be supported by some plugins\". \r\n\r\nFor plugins that have overrided `onReload()`, It will run their `onReload()` methods. This can be used instead or with plugin specific reload commands. Using WorldEdit as an example, WorldEdit has a `/worldedit reload` command that will reload the worldedit configuration. with this PR, the same configuration reload code could be called in `onReload()`. This will enable users to have a easy way to reload all configurations and/or other things, without any issues with things breaking like the old reload command had.\r\n\r\nThis was implemented as a method in `Plugin` instead of an event because I felt that it was similar to `onLoad()`. `onLoad()` might be able to be implemented as an event, but because it was implemented as a method in `Plugin`, I went the same way and put `onReload()` as a method in `Plugin`.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7fed9087c4d6d376891",
    "number": 7762,
    "body": "You can't add passengers to marker but since upstream failed to\r\naccount for the overriden addPassenger method in Marker, you\r\nwere able to add passengers which might lead to unexpected weirdness",
    "head_branch": "fix/marker-addPassenger",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix addPassenger for Marker (#7762)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a7ffd9087c4d6d376892",
    "number": 7761,
    "body": "The ItemFrame hurt method is called in Entity's skipAttackInteraction method, which if the PlayerItemFrameChangeEvent is cancelled, returns false which then enters the normal entity attack logic which calls hurt again resulting in a double fire. One fix (the one here), is to just return true if the event is cancelled. I think its the simplest and shouldn't really have many if any side effects, you are cancelling the change, not the damage itself.",
    "head_branch": "fix/cancelling-PlayerItemFrameChangeEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix cancelling PlayerItemFrameChangeEvent (#7761)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a800d9087c4d6d376893",
    "number": 7760,
    "body": "Replaces deprecated annotations with APIStatus.Experimental for the entity show/hide code. Also removes the deprecation from the String, String NamespacedKey constructor\r\nCloses #7753",
    "head_branch": "remove-deprecations",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove or replace a few dumb deprecations (#7760)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a801d9087c4d6d376894",
    "number": 7759,
    "body": "Who uses this? I feel like 95% of servers have this disabled. You're way more likely to go turn it off vs going to turn it on.",
    "head_branch": "disable-send-namespaced-by-default",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a802d9087c4d6d376895",
    "number": 7758,
    "body": "Remove in 1.19 along with the SplashPotion and\r\nLingeringPotion interfaces",
    "head_branch": "fix/CCE-potion-spawning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix CCE for SplashPotion and LingeringPotion spawning (#7758)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a803d9087c4d6d376896",
    "number": 7757,
    "body": null,
    "head_branch": "7756",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Don't apply previous potion when item is potion (fixes #7756) (#7757)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a804d9087c4d6d376897",
    "number": 7754,
    "body": "Make the map update faster, so everytime a player moving or change direction it will update instantly",
    "head_branch": "faster-map-update-interval",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a805d9087c4d6d376898",
    "number": 7752,
    "body": "Fixes #7750 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a806d9087c4d6d376899",
    "number": 7749,
    "body": "Fixes #7748",
    "head_branch": "worldborder",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Don't fire worldborder events for virtual borders (#7749)\n\nFixes #7748"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a807d9087c4d6d37689a",
    "number": 7743,
    "body": "Adds a new event that is called when an event triggers (Obviously excepting the Event Trigger Event). It allows you to access all the registration information like the plugin, listener and priority as well as being able to cancel the event. (Forgive any mess ups I've made, this is my first pr)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a808d9087c4d6d37689b",
    "number": 7741,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/7737\r\nFixes [MC-50647](https://bugs.mojang.com/browse/MC-50647)\r\n\r\nJust adds a check on the spawn type; if its SPAWNER, bypass the logic and allow the spawn. This bypasses both the swamp biome check and the slime chunk check.",
    "head_branch": "fix/slime-spawners",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix slime spawners not spawning outside slime chunks (#7741)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a809d9087c4d6d37689c",
    "number": 7740,
    "body": "This fixs #7739 making the PlayerStats method use the GameProfile for the name.",
    "head_branch": "fix/offline-player-stats-name",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use username instead of display name in PlayerList#getPlayerStats (#7740)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a80ad9087c4d6d37689d",
    "number": 7734,
    "body": "Expands `hide-itemmeta` to include unneeded information from [Written Books](https://minecraft.fandom.com/wiki/Written_Book#Item_data).",
    "head_branch": "feat/hide-book-meta",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't send itemmeta for books with the hide option enabled (#7734)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a80bd9087c4d6d37689e",
    "number": 7733,
    "body": "Replace third party repos with Paper repp\r\n\r\nwe now mirror Fabric, Forge, and Mojang",
    "head_branch": "paper-repo",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Replace third party repos with Paper repo (#7733)\n\nwe now mirror Fabric, Forge, and Mojang"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a80cd9087c4d6d37689f",
    "number": 7731,
    "body": "Paper will validate the characters of usernames when players join the server but offer a configuration to disable the feature. However, Mojang will do the validation for usernames no matter whether the server is in the online mode since 1.18.2.\r\n\r\nFor this reason, there is no need for Paper to do the same thing again. Considering many Paper servers, especially in China or Japan, have used non-ASCII characters as usernames by disabling the validation Paper offers, it is better to keep the configuration that can disable the validation of usernames.\r\n\r\nThis commit replaces the Paper's validating usernames logic as Mojang's, and it will work only when the server is in the online mode (Just like how it worked before 1.18.2).",
    "head_branch": "fix/validate_usernames",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a80dd9087c4d6d3768a0",
    "number": 7730,
    "body": "> ",
    "head_branch": "ver/1.17.1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a80ed9087c4d6d3768a1",
    "number": 7727,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/7726\r\n\r\nNow if the PlayerDropItemEvent is cancelled and the drop is trigged by clicking outside a menu, the item remains on the cursor instead of going back into the inventory or being deleted if the inventory is full. ",
    "head_branch": "fix/fix-cancel-PlayerDropItemEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a80fd9087c4d6d3768a2",
    "number": 7724,
    "body": "Adds the amount of damage that the item was going to take before any Unbreaking enchantment has rolled its reduction.\r\nIt's currently not possible to tell how much damage an item was going to take before its Unbreaking enchantment, this also allows options to replace and/or simulate your own unbreaking system.\r\n\r\nTested with a sword breaking Grass Blocks:\r\n\r\n[07:40:02 WARN]: Damage | OG Damage: 2 | 2\r\n[07:40:08 WARN]: Damage | OG Damage: 2 | 2\r\n[07:40:17 INFO]: [HexedHero: Applied enchantment Unbreaking III to HexedHero's item]\r\n[07:40:19 WARN]: Damage | OG Damage: 2 | 2\r\n[07:40:22 WARN]: Damage | OG Damage: 0 | 2\r\n[07:40:28 WARN]: Damage | OG Damage: 1 | 2\r\n[07:40:30 WARN]: Damage | OG Damage: 0 | 2\r\n",
    "head_branch": "add-pre-unbreaking-damage",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add pre-unbreaking amount to PlayerItemDamageEvent (#7724)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a810d9087c4d6d3768a3",
    "number": 7723,
    "body": "The recent change to the createProfile method set, which allowed plugins\r\nto properly create profiles with differing names/uuids for players\r\ncurrently on the server broke an implicit method contract for plugins\r\nproviding the lowercased version of a player name to the method.\r\n\r\nPreviously, the returned profile would simply be pulled from an online\r\nplayer with the same name (when compared case-insensitively), however\r\nthe previously mentioned fix to the creation logic currently returns\r\na profile with the lowercased name instead.\r\n\r\nTo not break plugins that relied on this specific internal logic, the\r\nability to create pre-filled profiles with different names or uuids for\r\nplayers that are currently online is moved by this commit to a new\r\nmethod called createProfileExact, which simply mirrors the current\r\ncreateProfile logic.\r\n\r\nThe createProfile logic is hence returned to its old functionality, once\r\nagain allowing plugins to grab an online players profile from their\r\nlowercased name.\r\n\r\nSee: #7558\r\nResolves: #7700\r\n\r\n-------------------------------------------------------------------------\r\n\r\nPotential points of discussions:\r\n\r\nThis PR actively brings back (in my opinion) unwanted behaviour to the `createProfile` method. While I see the use of the logic in said method, I am uncertain whether moving the (in my opinion) correct logic to a new method like `createProfileExact` is the way to go here or if we should move the old logic into a new method. Both sides have their benefits, however the patch currently introduces a new method as not break plugins that relied on the lowercase hack.",
    "head_branch": "bugfix/lower-cased-create-profile",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Revert to old createProfile(UUID, String) logic (#7723)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a811d9087c4d6d3768a4",
    "number": 7719,
    "body": "In this case, the javadocs are wrong, and the nullability annotations correct. The term `null` shouldn't be used here, but `air` instead. At first I thought `empty` would be best, but since there isn't actually an `isEmpty` method on ItemStack, I figured saying air would make more sense in the context of the API",
    "head_branch": "fix/javadocs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Correct javadocs on PlayerArmorStandManipulateEvent (#7719)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a812d9087c4d6d3768a5",
    "number": 7715,
    "body": "The feature proposed in issue [#7707](https://github.com/PaperMC/Paper/issues/7707).",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a813d9087c4d6d3768a6",
    "number": 7714,
    "body": "This PR aims a few things like..\r\n\r\n- Call the event when check OFF_HAND (Currently if player has a arrow in OFF_HAND the event its not called) and avoid double call in base to this\r\n- Edit docs for mention the case for CrossBow",
    "head_branch": "fix/event-arrow-ready",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a814d9087c4d6d3768a7",
    "number": 7713,
    "body": "When enabling or reloading a datapack that has functions for both tick and load, the former runs before the latter, which causes problems in some cases such as initializing scoreboard values before increasing them per tick.\r\nSee https://bugs.mojang.com/browse/MC-187539",
    "head_branch": "fix/mc-187539",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a815d9087c4d6d3768a8",
    "number": 7711,
    "body": "Supercedes https://github.com/PaperMC/Paper/pull/5867",
    "head_branch": "nameable-banners",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Nameable Banner API (#7711)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a816d9087c4d6d3768a9",
    "number": 7710,
    "body": "This PR adds support for Proxy Protocol. With this option you can use for example TCPShield or other proxy with enabled Proxy Protocol without Bungeecord or Velocity.\r\n\r\nI think this implementation requires also better warning if Proxy Protocol is enabled, because without any proxy you cannot enter or ping the server.",
    "head_branch": "proxy-protocol",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add support for Proxy Protocol (#7710)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a817d9087c4d6d3768aa",
    "number": 7709,
    "body": "An exception is called whenever there is an attempt to place a tile entity where there is something else there, such as this:\r\n```\r\n[03:29:22 WARN]: com.destroystokyo.paper.exception.ServerInternalException: Attempted to place a tile entity (net.minecraft.world.level.block.entity.TileEntityCampfire@135dea23) at 6876,131,5939 (Block{minecraft:red_sand}) where there was no entity tile!\r\n[03:29:22 WARN]: Chunk coordinates: 6864,5936\r\n```\r\nThis minor change will cause the world to be listed when that exception occurs, this is helpful for people who have dozens of worlds on one server, and want to know where the issue occurred without checking every single one.",
    "head_branch": "better_exception_message",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "List world on tile entity placement exception (#7709)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a818d9087c4d6d3768ab",
    "number": 7706,
    "body": "https://github.com/PaperMC/patched-spigot-fernflower\r\n\r\nBrings `spigotDecompileJar` from >1min to 17-22 seconds on my 3800x\r\n\r\nWe will want to check for decompiler changes whenever pulling BuildData updates going forward.",
    "head_branch": "faster-spigotdecompilejar",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use patched spigot decompiler (#7706)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a819d9087c4d6d3768ac",
    "number": 7704,
    "body": "(Continuation of #7058 from non-master branch)\r\n\r\nSince the EntityKnockbackByEntityEvent can't be reused on non-living entities due to being implemented with the use of the LivingEntity interface, this PR adds a new EntityPushedByEntityAttackEvent that does get called on pushes caused by an entity attack. Closes issue #5886.\r\n\r\nThis is my first time working with patches, so I have no idea if I did it correctly. Please tell me if I did something wrong, and I will try to fix it as fast as I can.",
    "head_branch": "feature/add-entity-pushed-by-entity-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add EntityPushedByEntityEvent (#7704)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a81ad9087c4d6d3768ad",
    "number": 7703,
    "body": "This happens on healing potion amplifiers 29, 61, 93 and 125 because of bit shifting. Negative potion amplifiers are not included, as they are automatically being removed.\r\n\r\nA check is made for drinkable potions, but apparently not for throwable ones.",
    "head_branch": "fix/negative-heal-potion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a81bd9087c4d6d3768ae",
    "number": 7701,
    "body": "(Re-submitted #7694 from a non-master branch)\r\n\r\nThis PR adds [Alternate Current](https://github.com/SpaceWalkerRS/alternate-current)'s redstone implementation as an alternative to vanilla and Eigencraft's. A previous attempt at this was made by [Titaniumtown](https://github.com/Titaniumtown) (#7291), but as they moved on, I decided to have a crack at it.\r\n\r\nAlternate Current is many times faster than vanilla, and even exceeds Eigencraft. I will do some testing in the coming days and update this post with some numbers.\r\n\r\nJust like Eigencraft, Alternate Current changes redstone dust's update order. This means any redstone contraption that is location dependent in vanilla has a significant chance of breaking with either of the faster implementations. Beyond that, parity issues should be rare, though Alternate Current has not been as thoroughly tested as Eigencraft, so I cannot compare the two in that aspect.\r\n\r\n### Performance\r\n\r\nThe world I used can be downloaded [here](https://www.mediafire.com/file/94xf0s80w1k7dg3/world%25282%2529.zip/file) for anyone wishing to replicate these tests.\r\n\r\nIdle load: 0.7 mspt\r\n\r\n[Grids](https://imgur.com/DvIH6fm)\r\n- Vanilla: 292.6 mspt\r\n- Eigencraft: 54.0 mspt\r\n- Alternate Current: 14.0 mspt\r\n\r\n[Lines](https://imgur.com/Uf5FiIH)\r\n- Vanilla: 203.8 mspt\r\n- Eigencraft: 63.1 mspt\r\n- Alternate Current: 17.9 mspt\r\n\r\nThe second test is probably closest of the two to a 'real-world' scenario. ",
    "head_branch": "feature/add-alternate-current",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Alternate Current's redstone implementation as an alternative to Vanilla and Eigencraft's. (#7701)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a81cd9087c4d6d3768af",
    "number": 7695,
    "body": "This PR resolve #7693 adding a API for set a custom podium this is handle for the most of logic for the EnderDragon Fight.",
    "head_branch": "feature/dragon-origin-override",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow seting custom podium location for ender dragon (#7695)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a81dd9087c4d6d3768b0",
    "number": 7694,
    "body": "This PR adds [Alternate Current](https://github.com/SpaceWalkerRS/alternate-current)'s redstone implementation as an alternative to vanilla and Eigencraft's. A previous attempt at this was made by [Titaniumtown](https://github.com/Titaniumtown) (#7291), but as they moved on, I decided to have a crack at it.\r\n\r\nAlternate Current is many times faster than vanilla, and even exceeds Eigencraft. I will do some testing in the coming days and update this post with some numbers.\r\n\r\nJust like Eigencraft, Alternate Current changes redstone dust's update order. This means any redstone contraption that is location dependent in vanilla has a significant chance of breaking with either of the faster implementations. Beyond that, parity issues should be rare, though Alternate Current has not been as thoroughly tested as Eigencraft, so I cannot compare the two in that aspect.\r\n\r\n### Performance\r\n\r\n[Grids](https://imgur.com/DvIH6fm)\r\n- Vanilla: 295 mspt\r\n- Eigencraft: 54 mspt\r\n- Alternate Current: 17\r\n\r\n[Lines](https://imgur.com/Uf5FiIH)\r\n- Vanilla: 202 mspt\r\n- Eigencraft: 65 mspt\r\n- Alternate Current: 21 mspt\r\n\r\nThe second test is probably closest of the two to a 'real-world' scenario. ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a81ed9087c4d6d3768b1",
    "number": 7692,
    "body": "https://bugs.mojang.com/browse/MC-246262\r\n\r\nBy checking if the world passed into StructureTemplate's placeInWorld is not a WorldGenRegion, we can bypass the deadlock entirely.\r\n\r\nCloses #7669 ",
    "head_branch": "fix/mc-246262",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix NBT pieces overriding a block entity during worldgen deadlock (#7692)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a81fd9087c4d6d3768b2",
    "number": 7690,
    "body": "getEntityId is left over when entities didn't have UUID (I'm guessing) and its only used for network stuff. like the network ids for everything in registries. getUniqueId (which returns a UUID) should be used by plugins.",
    "head_branch": "fix/deprecate-network-stuff",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a820d9087c4d6d3768b3",
    "number": 7688,
    "body": "When upstream's profile creation methods were deprecated, javadoc msgs weren't added pointing to the alternative.",
    "head_branch": "fix/missing-javadoc-deprecations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing javadoc deprecation msgs for PlayerProfile (#7688)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a821d9087c4d6d3768b4",
    "number": 7687,
    "body": "This is just a reopening of https://github.com/PaperMC/Paper/pull/6575 (to put it plainly, I'm not amazing at git and didn't want to deal with rebasing when I couldn't remember how I set my project up back in September so decided to just reimplement the patch on a fresh Paper installation).",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve update folder behavior (#7687)\n\nCloses #6570"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a822d9087c4d6d3768b5",
    "number": 7684,
    "body": "Was fixed in https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/c86a3f7a5877acb5406147923ac48d91c2f6e7d4\r\n\r\nThis deprecation reason doesn't really make sense either.",
    "head_branch": "fix-dumb-deprecate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove World#refreshChunk deprecation (#7684)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a823d9087c4d6d3768b6",
    "number": 7683,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/7682\r\n\r\nAnd probably a bunch of other pathfinding issues. This issue has been around for a while I'm thinking.\r\n\r\nBasically, in the Ground and Fly  PathNavigation files, a usage of createPath(BlockPos,int) was changed to createPath(BlockPos,Entity,int) to track the target entity. what this didn't account for was in GroundPathNavigation, createPath(BlockPos,int) had a special implementation which this changed bypassed",
    "head_branch": "fix/ground-pathfinding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix ground pathfinding (#7683)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a825d9087c4d6d3768b7",
    "number": 7681,
    "body": "The return value is marked as NotNull causing Kotlin to disallow me from setting an item in the array to null, despite the JavaDoc saying the contents of the array may be null. This should fix that.",
    "head_branch": "fix-prepare-item-enchant-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Nullability Annotations for PrepareItemEnchantEvent (#7681)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a826d9087c4d6d3768b8",
    "number": 7680,
    "body": "Was used only in a few places and since everything internal has a registry, just use that to get the key",
    "head_branch": "fix/remove-KeyedObject-interface",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove KeyedObject interface (#7680)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a827d9087c4d6d3768b9",
    "number": 7679,
    "body": "This method shouldn't be deprecated because it does serve a purpose. when creating lists of Materials and you have to filter out the legacy ones for example.",
    "head_branch": "fix/undeprecate-isLegacy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Undeprecate Material#isLegacy (#7679)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a828d9087c4d6d3768ba",
    "number": 7678,
    "body": "Also don't fire level events or game events if stalactite drip is cancelled\r\nFixes https://github.com/PaperMC/Paper/issues/7677",
    "head_branch": "fix/cauldron-fill-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fire CauldronLevelChange on initial fill (#7678)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a829d9087c4d6d3768bb",
    "number": 7673,
    "body": "some other discussion reminded me that I had this branch, and the TriState generally just made this much nicer looking",
    "head_branch": "feature/WorldCreator-keepSpawnLoaded",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "WorldCreator#keepSpawnLoaded (#7673)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a82ad9087c4d6d3768bc",
    "number": 7672,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n7902647a PR-737: Update WorldCreator#generatorSettings docs\r\n67556a50 PR-736: Update README\r\n\r\nCraftBukkit Changes:\r\n10922194 Java 18 support\r\nd53c4fb6 PR-1039: Use correct ops in GeneratorSettings\r\na567e4ae PR-1038: Removed the no longer needed getChunkUnchecked method from ChunkProviderServer.\r\n4ac8fcce SPIGOT-6980: Since 1.18.2, World#isChunkLoaded returned false for chunks that have just been loaded (e.g. inside ChunkLoadEvent).\r\ne6cc7c70 PR-1035: Update README\r\n3ec79a27 SPIGOT-5140: Call EntityChangeBlockEvent when a ChorusFlower is destroyed by a projectile",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#7672)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n7902647a PR-737: Update WorldCreator#generatorSettings docs\r\n67556a50 PR-736: Update README\r\n\r\nCraftBukkit Changes:\r\n10922194 Java 18 support\r\nd53c4fb6 PR-1039: Use correct ops in GeneratorSettings\r\na567e4ae PR-1038: Removed the no longer needed getChunkUnchecked method from ChunkProviderServer.\r\n4ac8fcce SPIGOT-6980: Since 1.18.2, World#isChunkLoaded returned false for chunks that have just been loaded (e.g. inside ChunkLoadEvent).\r\ne6cc7c70 PR-1035: Update README\r\n3ec79a27 SPIGOT-5140: Call EntityChangeBlockEvent when a ChorusFlower is destroyed by a projectile"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a82bd9087c4d6d3768bd",
    "number": 7670,
    "body": "idk if it should be fixed here, or fixed in CraftMetaItem to not have a null CompoundTag for blockData",
    "head_branch": "fix/NPE-BlockDataMeta",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix NPE for BlockDataMeta#getBlockData (#7670)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a82cd9087c4d6d3768be",
    "number": 7668,
    "body": "Fixes gamerule callbacks affecting all worlds, for example when updating the game rule in the overworld players in the nether are affected too.\r\n\r\n\r\n",
    "head_branch": "fix-global-gamerules",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Pass ServerLevel for gamerule callbacks (#7668)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a82dd9087c4d6d3768bf",
    "number": 7666,
    "body": "Added an option to hide entities by default. This option is\r\n currently very strict and overrides all other changes to visibility and\r\n interaction. \r\n \r\n Tested everything locally and seems to work fine.\r\n Could maybe be improved by adding a list of players to which entities that are hidden by default are still visible to",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a82ed9087c4d6d3768c0",
    "number": 7663,
    "body": "The original patch synchronized the private getAndSet method, making the writes done by both the standard and \"unchecked\" public getAndSet methods synchronized, this was incorrectly ported when updating to 1.17.\r\n\r\nAlso remove creation of unused `ThreadingDetector`s (2 per chunk section)",
    "head_branch": "fix-palettedcontainer-synchronization",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix PalettedContainer synchronization (#7663)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a82fd9087c4d6d3768c1",
    "number": 7659,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/7658",
    "head_branch": "fix-itemframe-desync",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix entity position desync for hanging entities (#7659)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a830d9087c4d6d3768c2",
    "number": 7655,
    "body": "Should be compatible with legacy LootContexts too. upstream has some jank logic to try and fill nms contexts with just the few fields on the api LootContext.\n\n```[tasklist]\n- [x] DamageSource API (either from us or upstream)\n- [ ] https://github.com/PaperMC/Paper/pull/7639\n```",
    "head_branch": "feature/better-lootcontext-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a831d9087c4d6d3768c3",
    "number": 7653,
    "body": "Closes https://github.com/PaperMC/Paper/issues/6072\r\n\r\nNo plans to support creating worlds while they are being ticked.\r\n\r\n\r\nCan this go in some early patch like MC-utils?",
    "head_branch": "fix/warn-on-world-create-while-being-ticked",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "throw exception if worlds are created while being ticked (#7653)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a832d9087c4d6d3768c4",
    "number": 7652,
    "body": "Closes https://github.com/PaperMC/Paper/issues/3945",
    "head_branch": "feature/restrict-player-reloot-time",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add restrict-player-reloot-time config (#7652)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a833d9087c4d6d3768c5",
    "number": 7651,
    "body": "In vanilla, the player loot table is only run if the shouldDropLoot is true (always for vanilla players) and the mob loot game rule is true. when [upstream fixed the loot table running](https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/f2757f95b3089d9beb17b5effe72ea183a18b224#nms-patches/EntityPlayer.patch), they didn't add the check.",
    "head_branch": "fix/player-loottables-gamerule",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix player loottables running when mob loot gamerule is false (#7651)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a834d9087c4d6d3768c6",
    "number": 7650,
    "body": "Supersedes https://github.com/PaperMC/Paper/pull/4882\r\nFixes https://github.com/PaperMC/Paper/issues/4743\r\n\r\nInstead of just tracking the itemstacks, this tracks with it, the action to take with that itemstack to apply the correct logic on dropping the item instead of generalizing it for all dropped items like CB does.\r\n\r\nThere are some ABI breaks **(in NMS)** with various methods, specifically the call death event ones. but, ugh, its just super ugly if we wanna keep that.",
    "head_branch": "fix/entity-item-drops",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Restore vanilla entity drops behavior (#7650)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a835d9087c4d6d3768c7",
    "number": 7649,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/4891\r\n\r\nNot super feasible to fix it right now with non-player entities since those crossbows are controlled by various goals and entity AI and stuff.",
    "head_branch": "fix/cancelling-crossbow-shoot",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a836d9087c4d6d3768c8",
    "number": 7648,
    "body": "Resolves https://github.com/PaperMC/Paper/issues/5413\r\n\r\nPerhaps some mention of the permission craftbukkit adds `minecraft.command.selector` since that will block the use of some components that make use of selectors if the CommandSender doesn't have that permission?",
    "head_branch": "feature/component-resolving",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add api to resolve components (#7648)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a837d9087c4d6d3768c9",
    "number": 7646,
    "body": "Fixes `EntityChangeBlockEvent#getBlockData` to return dirt instead of air when sheep eats grass block.\r\n\r\nIdeally should be fixed within CraftBukkit, but I don't have access to its repository 😛",
    "head_branch": "sheep",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix EntityChangeBlockEvent#getBlockData for when sheep eats grass block (#7646)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a838d9087c4d6d3768ca",
    "number": 7644,
    "body": "Fix for issue  #7637:\r\nMoving entities behave erratically when EAR tick decimation activates. This\r\n\r\nbreaks e.g. ice based sorters in the Nether. To counter this a test based\r\non the test-for-movement in ItemEntity.tick() is added to to the\r\nActivationRange, granting a temporary immunity. Once the momentum is lost\r\nthe item again goes inactive.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Grant temporary immunity from EAR to moving entities (Fixes #7637) (#7644)\n\nCo-authored-by: Peter Svensson <petersv@psv.nu>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a839d9087c4d6d3768cb",
    "number": 7643,
    "body": "Caches resource keys instead of trying to re-create them every time. \r\n\r\nCloses https://github.com/PaperMC/Paper/issues/7630",
    "head_branch": "fix/cache-resourcekeys",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Cache resource keys instead of trying to create them (#7643)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a83bd9087c4d6d3768cc",
    "number": 7639,
    "body": "Position should be the eventual *long-term* replacement for lots of `Location` stuff. But for the moment, it shouldn't hurt to add it and start using it in new API where appropriate.\r\n\r\n**Feedback very encouraged as this interface will be used quite a bit.**\r\n\r\n\r\nAm not 💯 on the \"aboveBlock, belowBlock, above, below\" methods. I pretty much just took them from nms' BlockPos class, but Position isn't exactly the same since it has to account for more than just int block positions.\r\n\r\nAn alternative is to literally just have a BlockPos. I'm not sure if there are use cases for double coordinates separate from the world. Like NMS doesn't have that as a type anyways",
    "head_branch": "feature/position-type",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Position (#7639)\n\n* Add Position\r\n\r\n* move Position patch to start"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a83cd9087c4d6d3768cd",
    "number": 7638,
    "body": "The methods these use were deprecated when Y value ranges were increased. I think these were just missed.",
    "head_branch": "fix/missing-block-key-deprecations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Deprecating remaining blockkey methods (#7638)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a83dd9087c4d6d3768ce",
    "number": 7636,
    "body": "🤦 Finger slipped, accidentally typed `git push -fd` instead of `git push -f` and Github won't let me reopen the PR since I force pushed to it...\r\n\r\nOriginal PR @ #6711, fixes #4654",
    "head_branch": "feature/more-datapack-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a83ed9087c4d6d3768cf",
    "number": 7635,
    "body": "Moves several methods to RegionAccessor (but were added in Paper patches before that existed)\r\n\r\n* getMoonPhase\r\n* getKey\r\n* lineOfSightExists\r\n\r\nThere are plenty more that should be moved, these are just the simple ones *from paper patches*",
    "head_branch": "feature/methods-to-region-accessor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move some methods to RegionAccessor (#7635)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a83fd9087c4d6d3768d0",
    "number": 7634,
    "body": "*see patch description*\r\n\r\nThere is [this mojira issue](https://bugs.mojang.com/browse/MC-249007), but its not *exactly* what this fixes since they are reporting it as a client issue (which it probably still is)",
    "head_branch": "fix/tags-unloading",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a840d9087c4d6d3768d1",
    "number": 7632,
    "body": "Adds a bunch of missing entity api, and some projectile api.\r\n\r\nPlease provide feedback on the javadocs, the shulker bullet api still needs to be tested and documented a bit better.",
    "head_branch": "MORE-MORE-entity-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing Entity + Projectile API (#7632)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a841d9087c4d6d3768d2",
    "number": 7629,
    "body": "This UOE would probably just caused unnecessary trouble when trying to copy a chunk generator that uses this custom biome source. All other impls of BiomeSource except the end, just return this. The end returns a new instance because it actually uses a seed where the others don't. It should be safe to just return the same instance.",
    "head_branch": "fix/copying-chunk-generators",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove unneeded UOE when copying biome sources (#7629)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a842d9087c4d6d3768d3",
    "number": 7628,
    "body": "This is what I came up with that fixes https://github.com/PaperMC/Paper/issues/5872 (the whole can't getEntities from CraftChunk). Just gonna do a draft cause I'm not super solid on how this part of the server works, and *if* we should even fix the issue since mojang separated entity and chunk loading.",
    "head_branch": "fix/CraftChunk#getEntities",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a843d9087c4d6d3768d4",
    "number": 7627,
    "body": "Closes https://github.com/PaperMC/Paper/issues/7349\r\n\r\nSplits the setting into 2 settings, one true or false (for villager trades), and one true, false, or \"default\" since that is configurable on a per-loot-table basis via datapacks.",
    "head_branch": "fix/treasure-maps-already-discovered",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix treasure maps discovered settings (#7627)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a844d9087c4d6d3768d5",
    "number": 7626,
    "body": "the `_PLANTED` features shouldn't be used during worldgen.\r\n\r\nI **didn't** undo upstream's change to not allow items dropping during worldgen. The only two reported causes have been resolved, https://github.com/PaperMC/Paper/issues/7001 via [MC-214289 ](https://bugs.mojang.com/browse/MC-214289), and this fixes https://github.com/PaperMC/Paper/issues/7458. Am now logging when that happens.",
    "head_branch": "fix/async-entity-add-fungus-tree",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix async entity add due to fungus trees (#7626)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a845d9087c4d6d3768d6",
    "number": 7625,
    "body": "Resolves https://github.com/PaperMC/Paper/issues/7477\r\n\r\nAdds EntityDyeEvent and makes it the super type for SheepDyeWoolEvent. Also adds CollarColorable interface for Wolf/Cat. \r\n\r\nEntityDyeEvent is called for sheep, wolf, and cat currently. Shulkers can be dyed, but not naturally so they were excluded.",
    "head_branch": "feature/EntityDyeEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add EntityDyeEvent and CollarColorable interface (#7625)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a846d9087c4d6d3768d7",
    "number": 7624,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\ne9f972d6 Improve CreativeCategory conversion\r\nc2698249 PR-1034: Fix exception on init of CraftCreativeCategory\r\nf48739ca Add tests for material creative categories",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit) (#7624)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\ne9f972d6 Improve CreativeCategory conversion\r\nc2698249 PR-1034: Fix exception on init of CraftCreativeCategory\r\nf48739ca Add tests for material creative categories"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a847d9087c4d6d3768d8",
    "number": 7623,
    "body": null,
    "head_branch": "pr/remove-bad-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a848d9087c4d6d3768d9",
    "number": 7622,
    "body": "Raw iron and raw copper blocks can generate naturally but these seem to never have been added to the anti xray defaults",
    "head_branch": "feature/add-raw-block-defaults",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add raw iron & raw copper blocks to anti xray defaults (#7622)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a849d9087c4d6d3768da",
    "number": 7621,
    "body": null,
    "head_branch": "feature/locate-configured-structures",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a84ad9087c4d6d3768db",
    "number": 7617,
    "body": "Also add missing last access update in getProfileIfCached\r\n\r\npossible fix for #6683\r\n\r\nThe stream wasn't being evaluated until the terminal forEach outside the lock.",
    "head_branch": "profilecache",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove redundant GameProfileCache diff"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a84bd9087c4d6d3768dc",
    "number": 7615,
    "body": "Technically some levels values over 30 will work, however in vanilla it's always capped to 30 and at a certain point it just stops working. I think it's simpler to just limit to 30.\r\n\r\ncloses #7536",
    "head_branch": "enchantitem",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add enchantWithLevels API (#7615)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a84cd9087c4d6d3768dd",
    "number": 7614,
    "body": "Now requires that the level name and world key return the same world when checking for an existing world in Bukkit's createWorld method.\r\n\r\nOn a side note, there isn't a requirement that level names be unique except for the Map kept on CraftServer that uses the level name as the key.\r\n\r\nFixes https://github.com/PaperMC/Paper/issues/7502",
    "head_branch": "fix/duplicate-world-keys",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix duplicate world keys via createWorld (#7614)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a84dd9087c4d6d3768de",
    "number": 7613,
    "body": "If the `level.dat` file is missing for a dimension, it generates a default one, but that default one fails to account for custom stuff added from data packs. this just runs the default LevelStem registry through the bound registry loader taking in changes from data packs.",
    "head_branch": "fix/worldgen-datapacks-first-load",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a84ed9087c4d6d3768df",
    "number": 7612,
    "body": "Closes #7611",
    "head_branch": "yeet-java-version-check",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove Java version check once and for all (#7612)\n\nCloses #7611"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a84fd9087c4d6d3768e0",
    "number": 7610,
    "body": "This patch updates the unloadWorld method so that savingDisabled is set to false, which should then mean ServerLevel's saving logic is executed correctly.\r\nPR in draft status as I'm still testing this change.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix world saving in unloadWorld"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a851d9087c4d6d3768e1",
    "number": 7609,
    "body": "### Key Points\r\n* This does away with the traditional way (started by spigot) of reading configs in favor of using configurate.\r\n* Splits up the config into multiple files, a global file, a world-defaults file, and a file for each world that users can place overrides.\r\n* The current plan, is to have 1 patch at the beginning that new options are added to, and then those options are \"implemented\" in their own patch. This means the `GlobalConfiguration` and `WorldConfiguration` classes should only ever be modified inside one patch. \r\n\r\n\r\n#### New directory structure\r\n```\r\nroot/\r\n\tconfig/\r\n\t\tpaper-global.yml\r\n\t\tpaper-world-defaults.yml\r\n\tworld/\r\n\t\tlevel.dat\r\n\t\t...\r\n\t\tpaper-world.yml\r\n\tworld_nether/\r\n\t\tlevel.dat\r\n\t\tpaper-world.yml\r\n```\r\n\r\n### TODO\r\n\r\n- [ ] Configurate 4.2 (full YAML comment support)\r\n- [ ] (depends on ^) Add `@Setting` to all options.\r\n- [x] remove PaperConfig & PaperWorldConfig\r\n- [x] edit patches that add config options to make them use the new config objects\r\n- [x] write migrations from current format to new one\r\n- [x] leave backup of legacy paper.yml for reference (moved to `config/legacy-backup/paper.yml`)",
    "head_branch": "feature/configurate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move to configurate for paper.yml (#7609)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a852d9087c4d6d3768e2",
    "number": 7606,
    "body": "As part of the random block tick optimisation, a mutable block position\r\nwas introduced in favour of two block positions, one previously pointing\r\ntowards the highest motion blocking block at the x/z column while the\r\nother points towards the empty block above.\r\n\r\nTo convert the mutable block position between the two previous positions\r\nwhen executing logic, the optimisation patch switches their y value\r\nbetween the lower and higher y value (which are one block apart).\r\n\r\nHowever, the patch failed to properly mutate the shared block position\r\nto the lower block after checking for needed snow layers, causing the\r\nlogic that is usually responsible for handling precipitation on blocks\r\nto fetch the block data of the higher block (usually air) for executing\r\nits logic.\r\n\r\nHence, previously to this commit, the game fails to handle any\r\nprecipitation on blocks (such as cauldrons) as their logic is never\r\nexecuted (rather the non-motion blocking block above is used instead).\r\n\r\nResolves: #7605",
    "head_branch": "bugfix/properly-random-tick-blocks-with-precipitation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Properly lookup random-ticked precipitation blocks (#7606)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a853d9087c4d6d3768e3",
    "number": 7604,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n33a2b476 PR-734: Make PlayerInventory#getItem Nullable\r\n\r\nCraftBukkit Changes:\r\n953d3ddc SPIGOT-3034: PlayerKickEvent.setLeaveMessage(String) doesn't actually do anything\r\n2c47af0c SPIGOT-6963: CraftMetaBlockState#getBlockState applied TileEntity ids without the minecraft namespace prefix.\r\n",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#7604)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n33a2b476 PR-734: Make PlayerInventory#getItem Nullable\r\n\r\nCraftBukkit Changes:\r\n953d3ddc SPIGOT-3034: PlayerKickEvent.setLeaveMessage(String) doesn't actually do anything\r\n2c47af0c SPIGOT-6963: CraftMetaBlockState#getBlockState applied TileEntity ids without the minecraft namespace prefix."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a854d9087c4d6d3768e4",
    "number": 7603,
    "body": "Both vanilla and plugin commands that completions were requested for would complete if the command started with a `/` which craftbukkit doesn't allow even tho vanilla does. I think its probably for the best anyways. Because commands can have labels of `/whatever`. ",
    "head_branch": "fix/console-completions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a855d9087c4d6d3768e5",
    "number": 7602,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/7601",
    "head_branch": "fix/team-color-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix some team color docs and added hasColor (#7602)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a856d9087c4d6d3768e6",
    "number": 7595,
    "body": "Adds the `ALLOWS_SERVER_LISTINGS` client option from #7268. Also addresses [MM's comment](https://github.com/PaperMC/Paper/pull/7268#discussion_r777680170) by adding a constructor that takes a map as an argument. I'm not entirely sure how I feel about this map approach, but it's definitely better than adding a new constructor every time.",
    "head_branch": "feature/allow-server-listings-clientoption",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add allow server listing & text filtering client options (#7595)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a857d9087c4d6d3768e7",
    "number": 7594,
    "body": "### New Structure\r\n```\r\nroot/\r\n\tserver.properties (with level-name=world)\r\n\tworld/\r\n\t\tlevel.dat (PRIMARY, LevelName=world)\r\n\t\tDIM-1/\r\n\t\t\tlevel.dat (SECONDARY, LevelName=world_nether)\r\n\t\tDIM1/\r\n\t\t\tlevel.dat (SECONDARY, LevelName=world_the_end)\r\n\t\tdimensions/\r\n\t\t\tmachine_maker\r\n\t\t\t\ttest/\r\n\t\t\t\t\tlevel.dat (SECONDARY, LevelName=machine_maker_test)\r\n```\r\n\r\n### Things to note\r\nOnly the `PRIMARY` level.dat file has values for `WorldGenSettings`, `DataPacks`, `Modded`, and `ServerBrands`. That way they are read once, and there's no confusing about which level.dat controls what. All the other level.dats only have per-world settings for their world. (I'm not sure if **ALL** of them are actually per-world, but I think they all can be at some point.\r\n\r\nThis fixes all those issues where data packs can't modify the default worlds, and removes the need for jmp's levelstem fix.\r\n\r\n### Unanswered Questions\r\n* I think we should really deprecate all things \"level name\". World's should not be referred to by that, only by their namespaces keys. That means deprecating all the world creator methods relating to it, Bukkit.getWorld(String), etc.\r\nThe level name can be exposed for sure, but I think it should be a different method to highlight the incorrect use of `World#getName()` over `World#getKey()`.\r\n\r\n### TODO\r\n\r\n- [ ] migrations from current system for vanilla/custom bukkit worlds\r\n- [ ] check the threaded world upgrader is still using the right directories for stuff\r\n- [ ] more...?",
    "head_branch": "feature/itll-never-happen",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a858d9087c4d6d3768e8",
    "number": 7593,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci-skip] Fix typo in feature request issue template (#7593)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a859d9087c4d6d3768e9",
    "number": 7592,
    "body": "Adds:\r\n\r\nBee rolling override (Normally triggered when bees are nearby their attacker.)\r\nContext: https://discordapp.com/channels/289587909051416579/925530366192779286/952619743490236426\r\n![image](https://user-images.githubusercontent.com/23108066/158069700-3f52d936-0bc6-4fae-aa26-7d57bec545ed.png)\r\n\r\nPiglin get/setIsChargingCrossbow\r\n![image](https://user-images.githubusercontent.com/23108066/158071847-f33c1e47-e164-42ca-8083-cf55a1021837.png)\r\n\r\nWolf get/setIsInterested\r\n![image](https://user-images.githubusercontent.com/23108066/158071875-66c9ca6a-dd14-4f1b-880b-7f928900b8ee.png)\r\n",
    "head_branch": "bee-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add more missing entity API (#7592)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a85ad9087c4d6d3768ea",
    "number": 7591,
    "body": "Pulls some of the API from https://github.com/PaperMC/Paper/pull/6773\r\n\r\n",
    "head_branch": "llama-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a85bd9087c4d6d3768eb",
    "number": 7588,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/6880\r\n\r\nOk, so root of the issue here is... the `WorldGenSettings` codec uses something called a \"data pack aware codec\" to create its registry of `LevelStem`. This is like the *only* place on the server where the MappedRegistry ctor is used except in the internal register methods. And then the registry is filled up with defaults, and then sent to the `RegistryLoader` to be overriden by any possible data packs. Now this `RegistryLoader` has a cache, and if it's read in something at a particular location before, it skips it, and doesn't bother adding it to the registry, assuming its done that before. The problem is, craftbukkit runs this loading process 4 times. once at the beginning (like vanilla), but then one more time for each of the default worlds. This means that the override LevelStem isn't added to the registry in the WorldGenSettings for the other two worlds. \r\n\r\nAll this does, is ignore any cached results if its trying to fill a LevelStem registry. As far as I can tell, the only time a new instance of registry will be passed into this `RegistryLoader`, will be a LevelStem one, others may get loaded multiple times, but it will be the same *instance* of registry, so it won't matter that it's skipped.",
    "head_branch": "fix/datapacks-nether-end",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix datapacks not being able to modify nether/end (#7588)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a85cd9087c4d6d3768ec",
    "number": 7587,
    "body": "The 3 skipped `CreativeModeTabs` aren't implemented by the API and I don't really think they need to. The api is more of a categorization, and the other 3 aren't really categories in that sense.",
    "head_branch": "feature/translatable-CreativeCategory",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement Translatable on CreativeCategory (#7587)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a85dd9087c4d6d3768ed",
    "number": 7586,
    "body": null,
    "head_branch": "fix/CreativeCategory-API",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix CreativeCategory API (#7586)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a85ed9087c4d6d3768ee",
    "number": 7585,
    "body": null,
    "head_branch": "fix/missing-deprecations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "deprecate old MaterialData api (#7585)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a85fd9087c4d6d3768ef",
    "number": 7584,
    "body": "Ensure that the projectile isn't sent as air by using entity methods for getting the item.\r\n\r\nThese methods automatically create an item if it's empty.",
    "head_branch": "fix/dont-send-air",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Ensure the item sent isn't air (#7584)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a860d9087c4d6d3768f0",
    "number": 7581,
    "body": "Resolves https://github.com/PaperMC/Paper/issues/7424\r\n\r\nSkips pushEntities logic if:\r\n1. The entity cannot collide in the first place\r\n2. The entity is on a team that can never collide (this does a hashmap call, but should return null in most instances)\r\n\r\nThis logic was stolen from the pushable predicate, wherein cases that were independent of the entity that is being pushed would return false.\r\nFor example, the predicate checks if ``!entity.canCollideWithBukkit(entity1)`` which leads to the isCollidable method, so we can confirm that we can move it to the front here.",
    "head_branch": "fix/7424",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add more collision code skipping logic (#7581)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a861d9087c4d6d3768f1",
    "number": 7580,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n881e06e5 PR-725: Add Item Unlimited Lifetime APIs\r\n\r\nCraftBukkit Changes:\r\n74c08312 SPIGOT-6962: Call EntityChangeBlockEvent when when FallingBlockEntity starts to fall\r\n64db5126 SPIGOT-6959: Make /loot command ignore empty items for spawn\r\n2d760831 Increase outdated build delay\r\n\r\nSpigot Changes:\r\nffceeae3 SPIGOT-6956: Drop unload queue patch as attempt at fixing stop issue\r\ne19ddabd PR-1011: Add Item Unlimited Lifetime APIs\r\n34d40b0e SPIGOT-2942: give command fires PlayerDropItemEvent, cancelling it causes Item Duplication",
    "head_branch": "pr/upstream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit/Spigot) (#7580)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n881e06e5 PR-725: Add Item Unlimited Lifetime APIs\r\n\r\nCraftBukkit Changes:\r\n74c08312 SPIGOT-6962: Call EntityChangeBlockEvent when when FallingBlockEntity starts to fall\r\n64db5126 SPIGOT-6959: Make /loot command ignore empty items for spawn\r\n2d760831 Increase outdated build delay\r\n9ed7e4fb SPIGOT-6138, SPIGOT-6415: Don't call CreatureSpawnEvent after cross-dimensional travel\r\nfc4ad813 SPIGOT-6895: Trees grown with applyBoneMeal() don't fire the StructureGrowthEvent\r\n59733a2e SPIGOT-6961: Actually return a copy of the ItemMeta\r\n\r\nSpigot Changes:\r\nffceeae3 SPIGOT-6956: Drop unload queue patch as attempt at fixing stop issue\r\ne19ddabd PR-1011: Add Item Unlimited Lifetime APIs\r\n34d40b0e SPIGOT-2942: give command fires PlayerDropItemEvent, cancelling it causes Item Duplication"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a862d9087c4d6d3768f2",
    "number": 7579,
    "body": "Fixes: #7478\r\n\r\nAdds an EntityToggleSitEvent that's called whenever an entity that implements Sittable sits or un-sits.  The event has entity and new sitting state fields.  Event implements cancellable.\r\n\r\n*This is my first PR, so apologies if i got anything wrong.*",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added EntityToggleSitEvent (#7579)\n\n* Added EntityToggleSitEvent Patches\r\n\r\n* Updated event phrasing, fixed Boolean not being primitive, pandas now fire event, and event is defined and called in 1 line\r\n\r\n* Updated event phrasing, fixed Boolean not being primitive, pandas now fire event, and event is defined and called in 1 line\r\n\r\n* Added EntityToggleSitEvent Patches\r\n\r\n* Added EntityToggleSitEvent Patches\r\n\r\n* Added EntityToggleSitEvent Patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a863d9087c4d6d3768f3",
    "number": 7576,
    "body": "Fix cancelling ProjectileHitEvents on Pierced arrows.",
    "head_branch": "ver/1.17.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a864d9087c4d6d3768f4",
    "number": 7575,
    "body": "Before 1.17, mc checked if the entity was not dead before ticking it, as there was despawn logic that could be run which could cause the entity to be removed.\r\n![image](https://user-images.githubusercontent.com/23108066/157792250-d0975e7c-c58f-4506-83d1-527ebb4c6d47.png)\r\n\r\nHowever, as of 1.17 there is no longer a check, causing entities that were despawned to be ticked.\r\n![image](https://user-images.githubusercontent.com/23108066/157792333-d2b61e8a-e2da-4c7b-8e0b-9bac7cba7e92.png)\r\n\r\nIt's unknown if there is any behavior that relies on this, but looking myself I couldn't find anything. If anyone can find any logic here that may rely on this, it would be appreciated. \r\n\r\nContext can be seen at: https://canary.discord.com/channels/289587909051416579/925530366192779286/951663121146191983",
    "head_branch": "dont-tick-despawned-entities",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a866d9087c4d6d3768f5",
    "number": 7574,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/6983\r\n\r\nRelevant conversation and testing can be seen at: https://canary.discord.com/channels/289587909051416579/925530366192779286/951639613284425779\r\n\r\nIt is currently unknown why despawned entities are still ticked in the first place, and is something that needs to be looked into.",
    "head_branch": "fix/6983",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Prevent despawned navigators being readded (#7574)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a867d9087c4d6d3768f6",
    "number": 7569,
    "body": "![image](https://user-images.githubusercontent.com/23108066/157557589-1d18edc2-fe0d-495c-9756-293678b7facc.png)\r\n\r\nFor some inventories, their name isn't set when they are created. This is because most \"named\" inventories rely on being set by ``CraftTileInventoryConverter#createInventory``, where if they extend RandomizableContainerBlockEntity they are correctly set. \r\n\r\nThis is not an issue for inventories like Furnaces + Brewing Stands, as they have their own custom converter which manually sets the title (See Furnace/BrewingStand inner class).\r\nThis change uses a better parent class, which should correctly set block entities that can be named instead of creating custom converters for each one.\r\n\r\nAlso, should I have the patch that fixes it for the deprecated spigot method? I'm not sure if we should just fix it for the adventure one or not.",
    "head_branch": "fix-inventory-names",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a868d9087c4d6d3768f7",
    "number": 7568,
    "body": "Fixes [MC-195468](https://bugs.mojang.com/browse/MC-195468)\r\nFixes https://github.com/PaperMC/Paper/issues/7565\r\n\r\n##### Test Steps\r\n1. New server\r\n2. Start and then stop\r\n3. Edit `server.properties`, setting `level-type=flat`, and `generator-settings={\"structure_overrides\"\\:[],\"layers\"\\:[{\"block\"\\:\"minecraft\\:bedrock\",\"height\"\\:1},{\"block\"\\:\"minecraft\\:dirt\",\"height\"\\:48},{\"block\"\\:\"minecraft\\:grass_block\",\"height\"\\:1}],\"biome\"\\:\"plains\"}`\r\n4. Delete generated worlds\r\n5. Start server\r\n6. Verify that the dirt is 48 blocks high, and that no structures have spawned (use `level-seed=-8491285921874972263` to have a village right next to spawn w/o those generator-settings)",
    "head_branch": "fix/generator-settings-flat-world",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix generator settings string for flat-type worlds (#7568)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a869d9087c4d6d3768f8",
    "number": 7564,
    "body": "Also put the Wither API into the larger patch, will probably squash more of those simple patches at a later date",
    "head_branch": "moar-mob-api",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add more entity api (#7564)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a86ad9087c4d6d3768f9",
    "number": 7562,
    "body": "Related to #7561. Thanks for all the hard work on the new docs ❤️ ",
    "head_branch": "docs/new-docs-link-config",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update docs link in paper.yml (#7562)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a86bd9087c4d6d3768fa",
    "number": 7561,
    "body": "https://github.com/PaperMC/docs",
    "head_branch": "new-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update README for new docs (#7561)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a86cd9087c4d6d3768fb",
    "number": 7560,
    "body": "- Use Adventure's [char]#rrggbb RGB format internally instead of the unusual x repeated characters format\r\n- Option (default true) to use actual color for NamedTextColors instead of closest ANSI code\r\n- Use a rarely used character (0x7f) instead of section symbol for internal format",
    "head_branch": "console-improvements",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Various improvements to console color formatting (#7560)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a86dd9087c4d6d3768fc",
    "number": 7559,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/6920\r\nSupercedes https://github.com/PaperMC/Paper/pull/6924\r\n\r\nCurrently, the fix is to check if the entity is no longer ticked... in the tick method?\r\nThis causes it to never actually be run because the entity tick method is no longer called when the chunk is in this state.\r\n\r\nThis change makes it so that this logic is run directly when they are no longer ticked (the callback method).",
    "head_branch": "pearl-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Strip enderpearl owners when they are no longer ticked (#7559)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a86ed9087c4d6d3768fd",
    "number": 7558,
    "body": "Ensure that the server properly creates custom player profiles if either\r\nthe uuid or name match an online player. Previously the server would\r\ndirectly shortcut to the players profile if either their uuid or name\r\nmatched, ignoring differences in the respective alternative identifier\r\nlike a custom name or a different uuid.\r\n\r\nTo keep the previous functionality, the method does populate the profile\r\nwith the online players properties if either the uuid or name match.\r\n\r\nResolves: #7557 ",
    "head_branch": "bugfix/player-profile-creation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Properly create profiles with custom name/uuid (#7558)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a86fd9087c4d6d3768fe",
    "number": 7556,
    "body": "I did this to add a faster time complexity for checking the smelt result. And it just makes life better. I needed this for a CustomEnchants plugin a while back, and ended up having to create a custom solution because it wasn't built in. Figured I'd try to build it in, and see if you guys like it! Thank you! <3",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a870d9087c4d6d3768ff",
    "number": 7555,
    "body": null,
    "head_branch": "contributing",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a871d9087c4d6d376900",
    "number": 7554,
    "body": null,
    "head_branch": "ghast-attacking",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add ghast api (#7554)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a872d9087c4d6d376901",
    "number": 7553,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/7137\r\n\r\nThis just moves the code to instead run when the entity is ticked for the first time instead.\r\n\r\nTested with wolves & enderman and it appears there is no behavior change.",
    "head_branch": "async-lookup-entity-load",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Prevent entity loading causing async lookups (#7553)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a873d9087c4d6d376902",
    "number": 7552,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/7550\r\n\r\nChecks if current open container is still an instance of `RecipeBookMenu` after the event is fired.",
    "head_branch": "fix/PlayerRecipeBookClickEvent-open-inv",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix opening inv in PlayerRecipeBookClickEvent handler (#7552)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a874d9087c4d6d376903",
    "number": 7549,
    "body": "Allows the messages in `bukkit.yml`, `spigot.yml`, and `paper.yml` to be written using the MiniMessage format.\r\n\r\n~~In order to maintain compatibility with existing configuration files the option `configuration-uses-minimessage` option has been added to `paper.yml`. This option defaults to `false` for any configuration files before config version 26.~~\r\n\r\nNew configuration files use MiniMessage by default, and the default messages have been converted to use it.\r\n\r\nThis also includes 2 minor API changes:\r\n- `Bukkit#getPermissionMessage` which returned a `String` has been deprecated in favor of `Bukkit#permissionMessage` which returns a `Component`\r\n- `Server#getPermissionMessage` which returned a `String` has been deprecated in favor of `Server#permissionMessage` which returns a `Component`\r\n\r\nCloses #7520",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a875d9087c4d6d376904",
    "number": 7548,
    "body": "## Background\r\nPoweredMinecarts are unique insofar as they are the only entities able to produce their own thrust (albeit at the cost of fuel).\r\nTo accomplish this, mojang used two sets of properties:\r\n\r\n#### `Fuel` represents the amount of charcoal/coal the Minecart has been fed\r\n* This amount determines the number of ticks before the Minecart stops producing thrust.\r\n* The `setFuel` and `getFuel` methods are already implemented upstream to handle this.\r\n\r\n#### `PushX` and `PushY` are the other two major properties (internally `xPush` and `zPush`)\r\n* These represent the magnitude of the Minecart's thrust, and the direction of that thrust.\r\n  * These values are functionally independent from velocity.\r\n* These Push properties take a few seconds to wind down, even after the Minecart runs out of fuel.\r\n\r\n### Current API Limitations\r\n* If a furnace Minecart's momentum is artificially stopped (as is necessary for teleportation), it is very difficult to restore.\r\n  * Even if a new velocity vector is applied, it will not restore the Minecart's thrust (Push) momentum.\r\n  * An example use case can be found [here](https://github.com/stargate-rewritten/Stargate-Bukkit/commit/852ac1e4f52b7346222595cb048fc5a0f77625bf).\r\n* At present, there is no API method through which to interact with a Powered Minecart's Push value.\r\n  * To restore a minecart's momentum, one must either use NMS, vanilla command execution, or an artificial player collision.\r\n\r\n## This Pull Request\r\nThis pull request intends to add two methods that expose the internal `Push` values; namely, `getPush` and `setPush`.\r\nThrough these, it will be possible to directly modify a Furnace Minecart's thrust.\r\n\r\n### Future Expansions\r\nThis specific pull request was filed on behalf of a singular plugin/organisation;\r\nIt *only* adds the minimum functionality needed to facilitate the teleportation use case.\r\n\r\nHaving stated that, the API still lacks several other powered-minecart related things.\r\nAlthough outside the scope of this PR, there are several other features that we believe would help others in the future.\r\nIn no particular order, they are as follows:\r\n\r\n- An event for fuel being added to a Powered Minecart\r\n  - As a workaround, it is possible to just use PlayerInteractEntityEvent\r\n- A method for stopping a Powered Minecart; doing so is surprisingly difficult and confusing.\r\n  - The only known way to reliably do this is to:\r\n    - Set the minecart's fuel to zero\r\n    - On a 2L scheduler delay, set the minecart's velocity to a 0 vector.\r\n    - Wait another 1L and restore the minecart's fuel.\r\n- Although the existing solution is fine, being able to feed a vector to setPush may also be convenient in future.",
    "head_branch": "fix/PoweredMinecart",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expose furnace minecart push property. (#7548)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a876d9087c4d6d376905",
    "number": 7543,
    "body": "Removes ChatColor usages from paper patches.\r\n\r\n\r\nHad to split PaperCommand from the paper config files patch since it has to come after Adventure",
    "head_branch": "fix/remove-chatcolor-usages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove ChatColor usages (#7543)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a878d9087c4d6d376906",
    "number": 7542,
    "body": "``getFailMessage()`` simply converts failMessage() to legacy text\r\nThis code was causing it to be converted to legacy text then converted back to a component.\r\n\r\nNow use the component directly provided by the ``failMessage()`` method.",
    "head_branch": "fix-PlayerHandshakeEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix handling message in PlayerHandshakeEvent (#7542)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a879d9087c4d6d376907",
    "number": 7541,
    "body": "Removes 5 patches:\r\n\r\n- Remove invalid mob spawner tile entities\r\n- Option to remove corrupt tile entities\r\n\r\nIf the block at the location doesn't support a tile entity, MC will not put it in the world. This meant that the \"Option to remove corrupt tile entities\" patch has not worked in a while either, as it doesn't exist in the world any more anyways.\r\n\r\n- Remove FishingHook reference on Craft Entity removal\r\n- Don't let fishing hooks use portals\r\n\r\nFishing hooks remove their \"fisher\" when they are removed. \r\nAlso, there is a getter preventing fish hooks from being able to move dimensions via portals.\r\n\r\n- ~~Prevent Frosted Ice from loading/holding chunks~~\r\n\r\n~~Tested this by checking if chunks were randomly ticked if ``chunk.areNeighboursLoaded(1)`` was false. This never occurred, confirming that these chunks are not ticked if there are no neighbors loaded. This patch I am a little uncertain on, so please comment if anything seems weird and I can revert this one.~~\r\n\r\n- Workaround for setting passengers on players\r\n\r\nSeemed old, removing this causes no issues.\r\n```java\r\n@EventHandler\r\n    public void onInteract(PlayerInteractEntityEvent event) {\r\n        event.getPlayer().addPassenger(event.getRightClicked());\r\n    }\r\n```\r\n\r\nIf I am missing anything with these patches, let me know, however, I'm fairly confident these should be able to be removed.",
    "head_branch": "remove-patches",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove Patches (#7541)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a87ad9087c4d6d376908",
    "number": 7540,
    "body": "Adds an optional override title component to InventoryOpenEvent\r\n\r\nSee `InventoryOpenEvent#titleOverride(Component)` docs for special case for Horses.",
    "head_branch": "feature/InventoryOpenEvent-titleOverride",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add titleOverride to InventoryOpenEvent (#7540)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a87bd9087c4d6d376909",
    "number": 7539,
    "body": "This helps to make it clear that the bungee chat API as a whole is deprecated, rather than just the methods accepting bungee chat types",
    "head_branch": "deprecated-bungeechat",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "replace bungeecord-chat dependency with deprecated version (#7539)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a87cd9087c4d6d37690a",
    "number": 7538,
    "body": "Looks like the javadocs from text-minimessage are missing.\r\n\r\nThis will add the javadocs from here: https://jd.adventure.kyori.net/text-minimessage/4.10.0/",
    "head_branch": "feature/javadocs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add javadoc linking for adventure-text-minimessage (#7538)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a87dd9087c4d6d37690b",
    "number": 7537,
    "body": "Adds a getter for the ID to track raids across multiple events. (A new CraftRaid instance is created on each \"get\" of one)\r\nAlso adds PDC to raids.\r\n\r\n### TODO\r\n\r\n- [x] override `equals()` and `hashCode()` in CraftRaid\r\n- [x] test",
    "head_branch": "feature/more-raid-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a87ed9087c4d6d37690c",
    "number": 7535,
    "body": null,
    "head_branch": "watchdog-deadlock",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix deadlock on watchdog crash (#7535)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a87fd9087c4d6d37690d",
    "number": 7534,
    "body": "Removes 6 patches:\r\n\r\n- Remove invalid mob spawner tile entities\r\n- Option to remove corrupt tile entities\r\n\r\nIf the block at the location doesn't support a tile entity, MC will not put it in the world. This meant that the \"Option to remove corrupt tile entities\" patch has not worked in a while either, as it doesn't exist in the world any more anyways.\r\n\r\n- Remove FishingHook reference on Craft Entity removal\r\n- Don't let fishing hooks use portals\r\n\r\nFishing hooks remove their \"fisher\" when they are removed. \r\nAlso, there is a getter preventing fish hooks from being able to move dimensions via portals.\r\n\r\n- Prevent Frosted Ice from loading/holding chunks\r\n\r\nTested this by checking if chunks were randomly ticked if ``chunk.areNeighboursLoaded(1)`` was false. This never occurred, confirming that these chunks are not ticked if there are no neighbors loaded. This patch I am a little uncertain on, so please comment if anything seems weird and I can revert this one.\r\n\r\n- Workaround for setting passengers on players\r\n\r\nSeemed old, removing this causes no issues.\r\n```java\r\n@EventHandler\r\n    public void onInteract(PlayerInteractEntityEvent event) {\r\n        event.getPlayer().addPassenger(event.getRightClicked());\r\n    }\r\n```\r\n\r\nIf I am missing anything with these patches, let me know, however, I'm fairly confident these should be able to be removed.",
    "head_branch": "remove-patches",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a880d9087c4d6d37690e",
    "number": 7533,
    "body": "Adds a configuration option `game-mechanics.nerf-portal-mob-farms` defaulting to true (current behavior), which prevents mobs that travelled through a portal to be instantly despawned.\r\n\r\nRationale: Mob farms that [use portals](https://youtu.be/uh3X0Pmr9yc?t=904) to transport them to the overworld require 2 players, one in nether and one in the overworld. This is due to the hard despawn range limit of 128 for monsters.\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a881d9087c4d6d37690f",
    "number": 7530,
    "body": "Currently handled for any bucket and bottle type, which should be all items that can be replaced on a dispenser as far as I know. This event could be used for servers with a rarity system on items (As mine), as currently I had to use the normal dispense event and delay 1 tick a loop through the dispenser inventory to change the item lore.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a882d9087c4d6d376910",
    "number": 7529,
    "body": null,
    "head_branch": "ded-fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Force close world loading screen on join (#7529)\n\nFixes infinite loading screens for dead players due to async chunk loading and player chunk loading patches and prevents players from missing messages and similar if chunk loading is slow"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a883d9087c4d6d376911",
    "number": 7527,
    "body": null,
    "head_branch": "adventure/css",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Provide ComponentSerializer services (#7527)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a885d9087c4d6d376912",
    "number": 7524,
    "body": "Probably going to be https://github.com/PaperMC/Paper/pull/7522 or this, I don't think we should try to keep both as that would just make things even more complex.",
    "head_branch": "dev/1.18.2-StructuresLocateEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add StructuresLocateEvent as replacement for StructureLocateEvent (#7524)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a886d9087c4d6d376913",
    "number": 7523,
    "body": null,
    "head_branch": "dev/1.18.2-fix-various-issues",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix various 1.18.2 update issues (#7523)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a887d9087c4d6d376914",
    "number": 7522,
    "body": "So there are some things to look at here.\r\n\r\nStructureLocateEvent is now fired multiple times since its searching for a collection of `ConfiguredStructureFeature`s instead of just a `StructureFeature`. This means that only the final event fire's radius, search-only-explored values are taken into account, and I don't see a clean way of having those values be per-configued structure without just having it run the logic multiple times which would be a significant perf hit I assume.\r\n\r\nAlso, the `setType(StructureType)` method now throws a UOE because it doesn't really make sense in this context anymore.",
    "head_branch": "dev/1.18.2-StructureLocateEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a888d9087c4d6d376915",
    "number": 7519,
    "body": "this time with slightly less mangled git history ",
    "head_branch": "dev/1.18.2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit)\n\nUpstream has released updates that appear to apply and compile correctly.\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\n\nCraftBukkit Changes:\n4ed5af5e SPIGOT-6956: Reduce differences caused by setKeepSpawnInMemory(false)\n21fe78aa SPIGOT-6957: Bad default value for WorldCreator#generatorSettings\nce373be6 PR-1022: Fix get HighestBlockAt in chunk snapshot"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a889d9087c4d6d376916",
    "number": 7517,
    "body": null,
    "head_branch": "dev/1.18.2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a88ad9087c4d6d376917",
    "number": 7513,
    "body": "Recreation of https://github.com/PaperMC/Paper/pull/5567\r\n\r\n\r\nIf acceptable, I'd like there to be a common interface between `PlayerFillBottleEvent` and `BlockFillBottleEvent` just to cut down on the duplicate documentation. Both are Cancellable, and share several common methods. But I don't think there's another event interface that does that, so idk if its something the API should add.",
    "head_branch": "feature/BottleFill-events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a88bd9087c4d6d376918",
    "number": 7512,
    "body": "Improves the error message for placed in world skull blocks by default,\r\nalso adds 'Paper.debugInvalidSkullProfiles' system property which can be\r\nset to 'true' for extra debug info (trace of updateGameprofile caller).\r\n\r\nex trace from a user https://paste.gg/p/anonymous/680728597c6d4172a3beee8b5926a0fb",
    "head_branch": "skull-profile-debug",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add debug for invalid GameProfiles on skull blocks/items (#7512)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a88cd9087c4d6d376919",
    "number": 7510,
    "body": "I've seen a few cases in #paper-help where people set their view/simulation distance to a number below two, only to then get an unclear exception message. This should hopefully help in these scenarios.",
    "head_branch": "feat/clarify-exceptions-for-invalid-distances",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Clarify exception messages for invalid view distances (#7510)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a88dd9087c4d6d37691a",
    "number": 7509,
    "body": "Upstream added API for SoundGroups and our existing API wasn't\r\nproperly replaced by it.",
    "head_branch": "fix/deprecate-duplicate-sound-group-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Deprecate duplicate SoundGroup API (#7509)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a88ed9087c4d6d37691b",
    "number": 7507,
    "body": "Clarified documentation for when the event is fired, and\r\nprevented the event from firing when a Creeper is loaded.\r\n\r\nFixes https://github.com/PaperMC/Paper/issues/7461",
    "head_branch": "fix/CreeperIgniteEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix issues with CreeperIgniteEvent (#7507)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a88fd9087c4d6d37691c",
    "number": 7505,
    "body": "Added methods for converting a PersistentDataContainer to a byte array (using NBT format) and back.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added byte array serialization/deserialization for PersistentDataContainers (#7505)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a890d9087c4d6d37691d",
    "number": 7503,
    "body": "Currently, setting the view distance to 32 with `World#SetViewDistance` actually sets the view distance to 31. This is because the view distance has 1 added to it, is clamped between 3 and 33, and then is clamped again between 2 and 32. This PR removes the second clamp - which I don't think should be there?",
    "head_branch": "32-view-distance",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix setting the view distance to 32 (#7503)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a891d9087c4d6d37691e",
    "number": 7500,
    "body": "^\r\nScrolled through the entire patch, these seem to be the only methods that also have a string variant without a deprecation notice.\r\n\r\nAlso cleans up some imports and fixes a paper comment.",
    "head_branch": "fix/missing-adventure-deprecations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add some missing deprecations to the adventure patch (#7500)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a892d9087c4d6d37691f",
    "number": 7493,
    "body": "By default, only LevelStem's that specifically match the ResourceKey for\r\nOVERWORLD will have the 5 (currently) impls of CustomSpawner (for\r\nphantoms, wandering traders, etc.). This adds an option to instead of\r\njust looking at the LevelStem key, look at the DimensionType key which\r\nis one level below that. Defaults to off to keep vanilla behavior.\r\n\r\nCloses https://github.com/PaperMC/Paper/issues/7448\r\n\r\nTested using this datapack: [TestDimensions.zip](https://github.com/PaperMC/Paper/files/8103427/TestDimensions.zip)",
    "head_branch": "feature/custom-spawners-in-custom-dims",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Option to have default CustomSpawners in custom worlds (#7493)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a894d9087c4d6d376920",
    "number": 7492,
    "body": "Piercing arrows search for multiple entities inside a while\r\nloop that is checking the projectile entity's removed state.\r\nIf the hit event is cancelled on the first entity, the event will\r\nbe called over and over again inside that while loop until the event\r\nis not cancelled. The solution here, is to make use of an\r\nalready-existing field on AbstractArrow for tracking entities hit by\r\npiercing arrows to avoid duplicate damage being applied.\r\n\r\nFixes https://github.com/PaperMC/Paper/issues/7474",
    "head_branch": "fix/piercing-arrow-cancelled-hit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix cancelling ProjectileHitEvent for piercing arrows (#7492)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a895d9087c4d6d376921",
    "number": 7491,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n0edc0e04 SPIGOT-6944: Correct TabCompleter docs\r\n\r\nCraftBukkit Changes:\r\n62d97624 SPIGOT-6900, SPIGOT-6330: Make /difficulty command per-world\r\nd83e9d08 SPIGOT-6925: Add minecraft:match_tool in LootContext\r\n38f204d8 SPIGOT-6936: Cancelling EntityAirChangeEvent doesn't stop player's bubbles from decreasing client side\r\n3aabea17 SPIGOT-6937: Ramming goat does not throw EntityTargetLivingEntityEvent\r\naf4d848f SPIGOT-6934: Bring plugin chunk tickets back in line with forceload tickets",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a896d9087c4d6d376922",
    "number": 7490,
    "body": "This tries to get the CPU name (as requested here: aikar/timings#80, should be working on the most common Linux distributions as well as on Windows) as well as vendor info of the JVM to add to the exported timings data. (Requires changes in the timings website repo to display: https://github.com/aikar/timings/pull/137)\r\n\r\nImo. adding a full blown extra library like [OSHI](https://github.com/oshi/oshi) just to get the CPU info is a bit overkill if most servers will run on linux or windows anyways and the methods used here should produce proper results on the majority of systems.",
    "head_branch": "pr/timings/more-system-info",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPU name and JVM vendor info in timings (#7490)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a897d9087c4d6d376923",
    "number": 7486,
    "body": "the BucketFill and Empty events should be called for cauldron interactions.\r\n\r\nI had to create a bit of a hack-around to track the BlockFace, that's what the static field on AbstractCauldronBlock is, but I think the only alternative would be to overload the interact method in CauldronInteraction which would mean a way bigger diff.",
    "head_branch": "feature/cauldron-bucket-events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a898d9087c4d6d376924",
    "number": 7483,
    "body": "Since I don't even know when chat has been handled by CachedThreadPool which from my knowledge should be only used in cases where you do a lot of stuff await for results then close it.\r\nI really think making the chat handled by a configurable ForkJoinPool gives a faster experience for the handling of the messages and improves the performance of machine & server.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a899d9087c4d6d376925",
    "number": 7480,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n8d818032 PR-723: Add Furnace#getRecipesUsed\r\nd7b5a313 PR-726: Add Particle dataTypes to javadocs\r\n72fe8b71 PR-724: Add PDC to World\r\n\r\nCraftBukkit Changes:\r\nc0326c28 PR-1009: Add Furnace#getRecipesUsed\r\ncc5ddd79 PR-1010: Add PDC to World\r\n6a54e5d3 PR-1012: Always save as skull owner and not as internal data\r\n\r\nSpigot Changes:\r\n699290cd Rebuild patches",
    "head_branch": "upstream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#7480)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n8d818032 PR-723: Add Furnace#getRecipesUsed\r\nd7b5a313 PR-726: Add Particle dataTypes to javadocs\r\n72fe8b71 PR-724: Add PDC to World\r\n\r\nCraftBukkit Changes:\r\nc0326c28 PR-1009: Add Furnace#getRecipesUsed\r\ncc5ddd79 PR-1010: Add PDC to World\r\n6a54e5d3 PR-1012: Always save as skull owner and not as internal data\r\n\r\nSpigot Changes:\r\n699290cd Rebuild patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a89ad9087c4d6d376926",
    "number": 7479,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a89bd9087c4d6d376927",
    "number": 7476,
    "body": "I don't know if that is a wanted change.\r\n\r\nUse case:\r\nMany Velocity or Bungee/Waterfall user fail to disable online-mode.\r\n\r\nFeel free to share some insides why this PR doesn't work out. Side-effects or something else.",
    "head_branch": "task/automatically-disable-online-mode-wgen-using-either-bungee-or-velocity-online-mode",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a89cd9087c4d6d376928",
    "number": 7472,
    "body": "Bukkit throws an error when you try to get the spawn limit for the MISC category, because it doesn't have limits (or as bukkit calls it, not validForLimits). This exception was missed in todays upstream update (#7454). This PR makes `NaturalSpawner#globalLimitForCategory` (only used in the mobcap command) always return `-1` early if the category is MISC, before `World#getSpawnLimit` throws an exception.\r\n\r\n",
    "head_branch": "fix/mobcap-command",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix IllegalArgumentException for /paper mobcaps command (#7472)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a89dd9087c4d6d376929",
    "number": 7471,
    "body": "Fixes #7470\r\nHaving a modifiable hash here is a bit flawed and most developers should never need these methods",
    "head_branch": "playerprofiiiiileeees",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix PlayerProfile BukkitObject serialization, deprecate setName and setId for removal (#7471)\n\nHaving a modifiable hash here is a bit flawed and most developers should never need these methods"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a89ed9087c4d6d37692a",
    "number": 7469,
    "body": "Some server use spawner block to make custom block. That spawner never spawn entity , but still scanning all player every tick.\r\nIf `spawnCount` or `maxNearbyEntities` <= 0 ,then will stop to try spawn entity",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a89fd9087c4d6d37692b",
    "number": 7468,
    "body": "During the previous upstream update, craftbukkit classes and methods had\r\ntheir modifiers changed through in-patch modifications, which is an\r\noutdated way of modifying access modifiers in server internals.\r\n\r\nThis commit moves all of the in-patch access transformers into the\r\npaper.at file and unites them with the single existing access\r\ntransformer used for the player profile api.",
    "head_branch": "enhancement/move-profile-api-to-access-transformers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use access transformers for player profile API (#7468)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a8a0d9087c4d6d37692c",
    "number": 7467,
    "body": "Previously the async chat executor service would take chat handling\r\nusing the #submit method, which wraps the logic in a future task.\r\nThe future takes full ownership of the task, including any potential\r\nexception, meaning that the uncaught exception handler never gets\r\nnotified about potential exceptions thrown during async chat logic.\r\n\r\nAs the chat task does neither need to be cancelled nor returns something\r\nrequired later on, this commit moves from #submit to #execute, skipping\r\nany future task creation. This properly propagates any exception upwards\r\nto the worker thread in the executor service, allowing the server to\r\ncatch and deobfuscate the exception before properly logging it into the\r\nservers console.\r\n\r\nResolves: #7466 ",
    "head_branch": "bugfix/async-chat-exception-handler",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Log exceptions thrown during chat processing (#7467)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8a1d9087c4d6d37692d",
    "number": 7465,
    "body": "Added CommandPostprocessEvent an event that is called after a command is executed with the result of the command",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8a2d9087c4d6d37692e",
    "number": 7464,
    "body": "An event called at the end of the execution of all commands knowing also if the command is successful would be very useful also for multi plugin integrations",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8a3d9087c4d6d37692f",
    "number": 7462,
    "body": "When paper migrated to gradle, the overview.html and external files\r\nwere never included in the javadocs",
    "head_branch": "fix/missing-javadoc-stuff",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8a4d9087c4d6d376930",
    "number": 7459,
    "body": "If a plugin teleports a player with a large pitch or yaw, the server will crash due to some weird looping code.  I've replaced this while loop with identical code that accomplishes the same math.  I've verified this code to be identical with the following program: https://gist.github.com/MWHunter/3690afc61f290314c4e1eb8f4a2c28af\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8a5d9087c4d6d376931",
    "number": 7456,
    "body": "Removed physics updates that occur in Paper but not Vanilla:\r\n- Cauldron's fill level changes\r\n- Crop/Sapling advances in growth stage(random tick or bone meal)\r\n- Farmland moisture state changes\r\n- Everything that uses the org.bukkit.craftbukkit.CraftEventFactory.handleBlockGrowEvent method\r\n\r\nThese changes are neccessary to restore vanilla behaviour.",
    "head_branch": "fix/unintendedPhysicsUpdates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8a6d9087c4d6d376932",
    "number": 7454,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n8085edde SPIGOT-6918: Add SpawnCategory API and configurations for Axolotls\r\n04c7e13c PR-719: Add Player Profile API\r\n71564210 SPIGOT-6910: Add BlockDamageAbortEvent\r\n\r\nCraftBukkit Changes:\r\nde951355 SPIGOT-6927: Fix default value of spawn-limits in Worlds\r\nfebaa1c6 SPIGOT-6918: Add SpawnCategory API and configurations for Axolotls\r\n9dafd109 Don't send updates over large distances\r\nbdac46b0 SPIGOT-6782: EntityPortalEvent should not destroy entity when setTo() uses same world as getFrom()\r\n8f361ece PR-1002: Add Player Profile API\r\n911875d4 Increase outdated build delay\r\ne5f8a767 SPIGOT-6917: Use main scoreboard for /trigger\r\na672a531 Clean up callBlockDamageEvent\r\n8e1bdeef SPIGOT-6910: Add BlockDamageAbortEvent\r\n\r\nSpigot Changes:\r\n6edb62f3 Rebuild patches\r\n7fbc6a1e Rebuild patches",
    "head_branch": "upstream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#7454)\n\n* Updated Upstream (Bukkit/CraftBukkit/Spigot)\r\n\r\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n8085edde SPIGOT-6918: Add SpawnCategory API and configurations for Axolotls\r\n04c7e13c PR-719: Add Player Profile API\r\n71564210 SPIGOT-6910: Add BlockDamageAbortEvent\r\n\r\nCraftBukkit Changes:\r\nfebaa1c6 SPIGOT-6918: Add SpawnCategory API and configurations for Axolotls\r\n9dafd109 Don't send updates over large distances\r\nbdac46b0 SPIGOT-6782: EntityPortalEvent should not destroy entity when setTo() uses same world as getFrom()\r\n8f361ece PR-1002: Add Player Profile API\r\n911875d4 Increase outdated build delay\r\ne5f8a767 SPIGOT-6917: Use main scoreboard for /trigger\r\na672a531 Clean up callBlockDamageEvent\r\n8e1bdeef SPIGOT-6910: Add BlockDamageAbortEvent\r\n\r\nSpigot Changes:\r\n6edb62f3 Rebuild patches\r\n7fbc6a1e Rebuild patches\r\n\r\n* Updated Upstream (CraftBukkit)\r\n\r\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\nde951355 SPIGOT-6927: Fix default value of spawn-limits in Worlds"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a8a7d9087c4d6d376933",
    "number": 7450,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n04c7e13c #719: Add Player Profile API\r\n71564210 SPIGOT-6910: Add BlockDamageAbortEvent\r\n\r\nCraftBukkit Changes:\r\nbdac46b0 SPIGOT-6782: EntityPortalEvent should not destroy entity when setTo() uses same world as getFrom()\r\n8f361ece #1002: Add Player Profile API\r\n911875d4 Increase outdated build delay\r\ne5f8a767 SPIGOT-6917: Use main scoreboard for /trigger\r\na672a531 Clean up callBlockDamageEvent\r\n8e1bdeef SPIGOT-6910: Add BlockDamageAbortEvent\r\n\r\nSpigot Changes:\r\n7fbc6a1e Rebuild patches",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8a8d9087c4d6d376934",
    "number": 7441,
    "body": "From my understanding, this patch is meant to load the spawn chunk before trying to get height map information about the overworld spawn location. If a chunk is not loaded, the heightmap returns a Y value of -64 by default, so this existing patch ensures the chunk is loaded so that the true heightmap value can be retrieved. However, there appears to be two issues:\r\n\r\n1. The chunk was being loaded when an item was going to the end (not when it was going to the overworld)\r\n2. The chunk in the entity's current world was being loaded (not the destination world)\r\n\r\nI have fixed this by:\r\n\r\n1. Moving the code into the else statement of the `flag1` if statement. `flag1` is true when the destiantion world is the end.\r\n2. Using the destination world instead of the entity's current world.",
    "head_branch": "bugfix/fix-items-vanishing-through-end-portal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use destination world when preloading spawn chunk (#7441)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8a9d9087c4d6d376935",
    "number": 7438,
    "body": "see ChunkAccess#getNoiseBiome and ChunkHeightAndBiomeFix",
    "head_branch": "portal-momentos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix portal linking in upgraded chunks (fixes #7419) (#7438)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8aad9087c4d6d376936",
    "number": 7436,
    "body": "Reported here: https://forums.papermc.io/threads/datapack-using-advancements-to-run-functions-on-newly-spawned-item-not-working.119\r\n\r\nIssue here, is that drops were being captured for the BlockDropItemEvent and not actually in the world. The `bee_nest_destroyed` trigger is expecting to be run after those drops are in the world.",
    "head_branch": "fix/bee-nest-broken-trigger",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Trigger bee_nest_destroyed trigger in the correct place (#7436)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8abd9087c4d6d376937",
    "number": 7432,
    "body": null,
    "head_branch": "createsender",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "API for creating command sender which forwards feedback (#7432)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a8acd9087c4d6d376938",
    "number": 7431,
    "body": "Continuation of #7403 (now that I actually understand what the code does):\r\n> It seems that the 1.18 worldheight changes weren't taken into account when porting a patch that optimizes random block ticking. This PR corrects that and now allows blocks above 255 to be random ticked.\r\n\r\nI've tested and have confirmed this PR works (tested with grass and dirt in a void world). Would love further input!",
    "head_branch": "fix/random-tick-1.18",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8add9087c4d6d376939",
    "number": 7428,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nd356515a SPIGOT-6914: Remove confusing loadbefore message for dependency issues\r\n958bbd72 PR-720: Fix bounds in documentation about power in FireworkMeta\r\n\r\nCraftBukkit Changes:\r\n507e2f65 PR-1004: Call WorldInitEvent before any chunks are generated\r\n1eeba6a0 SPIGOT-6891: Crash when importing 1.16 chunks with entities above the world, when a BlockPopulator is active\r\neb7a2dcc PR-1003: Fix cancellation of TradeSelectEvent\r\n\r\n-----\r\nCloses https://github.com/PaperMC/Paper/issues/7409",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#7428)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8aed9087c4d6d37693a",
    "number": 7425,
    "body": "Co-authored-by: Jason Penilla <11360596+jpenilla@users.noreply.github.com>\r\n\r\nCloses #2551",
    "head_branch": "regenerateChunk",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Implement World#regenerateChunk (#7425)\n\nCo-authored-by: Jason Penilla <11360596+jpenilla@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8afd9087c4d6d37693b",
    "number": 7423,
    "body": "Continuation of [#5191](https://github.com/PaperMC/Paper/pull/5191). This will resolve #7415. \r\n\r\nEven though I tried to mimic (and enhance?) the original PR, since this is my first trial of contributing to Paper, there should be some error present.\r\n\r\nIf this patch needs patch note, tell me and I will try to add information it might need as lot as possible I can think of.\r\n\r\nAny criticism is welcomed.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8b0d9087c4d6d37693c",
    "number": 7414,
    "body": "Can probably just remove that `setIsSitting` method next mc version update? idk. its annoying. I can't keep track of all of bukkit's various interfaces",
    "head_branch": "feature/Panda-sittable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make Panda implement Sittable (#7414)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a8b1d9087c4d6d37693d",
    "number": 7411,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\naf88996a SPIGOT-6890: Add repair cost amount in AnvilInventory\r\nbc7bd363 PR-716: Fix scheduler javadocs (previously, the &lt;b&gt; tag broke the rendering)\r\n6db1ab70 Improve item cooldown JavaDocs\r\n\r\nCraftBukkit Changes:\r\n13670b44 SPIGOT-6890: Add repair cost amount in AnvilInventory\r\n0d109e86 PR-999: Prevent non-item cooldowns",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#7411)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\naf88996a SPIGOT-6890: Add repair cost amount in AnvilInventory\r\nbc7bd363 PR-716: Fix scheduler javadocs (previously, the <b> tag broke the rendering)\r\n6db1ab70 Improve item cooldown JavaDocs\r\n\r\nCraftBukkit Changes:\r\n13670b44 SPIGOT-6890: Add repair cost amount in AnvilInventory\r\n0d109e86 PR-999: Prevent non-item cooldowns"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8b2d9087c4d6d37693e",
    "number": 7406,
    "body": "Currently, when a player is flying while in survival mode and teleports to a different world, their flight will be disabled. This is due to being set to survival mode while already in survival mode, which resets the player's \"mayfly\" and \"flying\" abilities to the default \"false\" state. This behavior began in 1.17, 1.16 did not have this issue.\r\n\r\nThis patch resolves this issue, allowing players to teleport between worlds without their flight status being changed.\r\n\r\nI've been running this patch in a production environment without any side effects.",
    "head_branch": "fix/flight-loss-on-world-change",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8b3d9087c4d6d37693f",
    "number": 7405,
    "body": "Also fixes an issue where the TeleportEvent is fired on disconnect. Its **possible** that it should fire an event there, but since from the player's perspective, they never actually left the entity, I'm not sure. Cause when you log back on, you are still riding the entity, but the server does dismount you internally. Either way, that part can be removed, but the teleport cause can remain.",
    "head_branch": "feature/dismount-teleport-cause",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8b4d9087c4d6d376940",
    "number": 7404,
    "body": "In vanilla, command blocks (block and minecarts) have a perm level of `2`, restricting them from running `/stop`, `/ban`, `/kick`, and similar \"more important\" commands. craftbukkit attempted to \"simulate\" that with\r\n```java\r\n        String cmd = args[0];\r\n        if (cmd.startsWith(\"minecraft:\")) cmd = cmd.substring(\"minecraft:\".length());\r\n        if (cmd.startsWith(\"bukkit:\")) cmd = cmd.substring(\"bukkit:\".length());\r\n\r\n        // Block disallowed commands\r\n        if (cmd.equalsIgnoreCase(\"stop\") || cmd.equalsIgnoreCase(\"kick\") || cmd.equalsIgnoreCase(\"op\")\r\n                || cmd.equalsIgnoreCase(\"deop\") || cmd.equalsIgnoreCase(\"ban\") || cmd.equalsIgnoreCase(\"ban-ip\")\r\n                || cmd.equalsIgnoreCase(\"pardon\") || cmd.equalsIgnoreCase(\"pardon-ip\") || cmd.equalsIgnoreCase(\"reload\")) {\r\n            return 0;\r\n        }\r\n```\r\ncalled when a command block tried to run a command. but that's not a great idea, for one, its very outdated, missing several newer commands that also have a 3+ perm level, **and** on a bigger note, it doesn't take into account command redirections like the `/execute ... run ...` command does. \r\n\r\nThis PR removes that check, and just uses vanilla's built-in function levels for checking those perms. It also adds configs to turn off this functionality, or set the command block perm level away from the default `2`.\r\n\r\n~~This also fixes a UOE when loading a datapack with a function that has a perm level greater than the one configured in `server.properties`.~~ *this was done in a different PR already, and this replaces and includes that change*",
    "head_branch": "fix/cmd-block-perms",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix cmd permission levels for command blocks (#7404)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8b5d9087c4d6d376941",
    "number": 7403,
    "body": "It seems that the 1.18 worldheight changes weren't taken into account when porting a patch that optimizes random block ticking. This PR corrects that and now allows blocks above 255 to be random ticked.",
    "head_branch": "fix/random-tick-y-255",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8b6d9087c4d6d376942",
    "number": 7400,
    "body": "All inventories that don't have block entity inventories associated with them, beacons, anvils, stonecutters, grindstone, smithing table, loom, cartography table had null inventory holders when that's not really correct. the `BlockInventoryHolder` seems to fit perfectly there.",
    "head_branch": "feature/more-inv-holders",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing InventoryHolders to inventories (#7400)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8b7d9087c4d6d376943",
    "number": 7399,
    "body": "stored in furnaces to calculate XP to give player's on stack removal from the result slot, or when the block is broken.",
    "head_branch": "feature/furnace-recipes-used",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Furnace RecipesUsed API (#7399)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a8b8d9087c4d6d376944",
    "number": 7398,
    "body": "Resolves https://github.com/PaperMC/Paper/issues/6978\r\n\r\nRelated (added stronghold seed): https://github.com/PaperMC/Paper/pull/7334\r\n\r\nTested same was as earlier PR, found location using https://www.chunkbase.com/apps for mineshafts and buried treasure, ensured they still generated on default settings, then changed the seed for each, deleted region files, and then rejoined in same spot to find them missing.",
    "head_branch": "feature/missing-feature-seed-configs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8b9d9087c4d6d376945",
    "number": 7392,
    "body": "Fixes #7301. Not sure if there should be some sort of toggle for this, since there probably aren't a lot of (non-malicous) use-cases for loading plugin files starting with a dot.",
    "head_branch": "feat/dont-load-plugins-with-dot",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't load plugins prefixed with a dot (#7392)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8bad9087c4d6d376946",
    "number": 7387,
    "body": "So this adds tab completions to *some* command aliases. \r\n\r\nBasically, only ones that end in `$1-` to capture all arguments. Implementing tab completions beyond that is... I think much more involved and ambiguous. Like if the format string takes the `$2` argument, how is a tab completion for that going to work?.\r\n\r\nBut I think this should really cover really all the use cases.",
    "head_branch": "feature/cmd-aliases-tab-completions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8bbd9087c4d6d376947",
    "number": 7386,
    "body": "Got around to writing a test that will make sure this stays up to date as mojang adds/removes commands.",
    "head_branch": "feature/update-default-vanilla-perms",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update default vanilla command perms (#7386)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8bcd9087c4d6d376948",
    "number": 7385,
    "body": "Previously, Armor Stands had their EntityDeathEvent fired twice\r\nif they were killed by an explosion or by being on/in fire.\r\n\r\nPerhaps this should go in another patch? Phoenix's patch to \"Improve death events\" maybe, idk.",
    "head_branch": "fix/armor-stand-EntityDeathEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8bdd9087c4d6d376949",
    "number": 7384,
    "body": null,
    "head_branch": "ver/1.17.1-fix/death-loot-triggers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[1.17.1] Backport #5740 and #7355 to 1.17.1 (#7384)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8bed9087c4d6d37694a",
    "number": 7382,
    "body": "Resolves https://github.com/PaperMC/Paper/issues/7313\r\nResolves https://github.com/PaperMC/Paper/issues/7449\r\nCloses https://github.com/PaperMC/Paper/issues/7815\r\n\r\nAdds a getter/setter for the operation used to turn the amount of durability repaired, into an XP value to be subtracted away from the total value of the experience orb.",
    "head_branch": "feature/expand-PlayerItemMendEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expand PlayerItemMendEvent (#7382)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a8bfd9087c4d6d37694b",
    "number": 7381,
    "body": "Closes https://github.com/PaperMC/Paper/issues/7340",
    "head_branch": "fix/missing-fluid-mode-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Deprecate TargetBlock/EntityInfo and assocated methods (#7381)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a8c0d9087c4d6d37694c",
    "number": 7380,
    "body": "Sooooo many things wrong here.\r\n\r\nThe EntityEquipment javadocs state that various getters return \"a copy of\" which is not true for the CraftInventoryPlayer impl.\r\n\r\nThe much better fix, would be to make them actually return copies since there are setters, and I would be totally fine with doing that, but it might be considered too big of a break even tho the contract (via the javadoc) says they are copies.\r\n\r\nAnother issue here, is the nullability annotations are wrong on EntityEquipment because the two different impls of it use different logic. Would also prefer to make them all notnull, but that might also be a behavioral break.",
    "head_branch": "fix/entity-equipment-javadocs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix EntityEquipment and related javadocs (#7380)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a8c1d9087c4d6d37694d",
    "number": 7379,
    "body": "Break naturally was missing the experience drops from several blocks, as well as not handling turtle eggs and ice blocks correctly.\r\nI think that should be all functionality that doesn't require a player. For example, if breaking a beehive with a non silk touch tool, the bees should get angry at the player, but since there's no player present, that's skipped here.",
    "head_branch": "fix/missing-more-breakNaturally",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add more breakNaturally functionality (#7379)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a8c3d9087c4d6d37694e",
    "number": 7378,
    "body": "Tag presets that Paper adds should not be modifiable as they are global which can lead to unexpected behavior.\r\n\r\nIf this breaks any behavior for plugins, its bad behavior. Tags are not locked by default, so no proper behavior with custom tags plugins add should be affected.",
    "head_branch": "fix/modifiable-tags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make tag presets unmodifiable (#7378)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a8c4d9087c4d6d37694f",
    "number": 7377,
    "body": "WIP so far, still adding spots these events should be called, but should be a catch-all now for non-hanging entities spawned as a result of item \"placement\".\r\n\r\nResolves https://github.com/PaperMC/Paper/issues/4795\r\nResolves https://github.com/PaperMC/Paper/issues/6898\r\nSupersedes https://github.com/PaperMC/Paper/pull/4184\r\n\r\n### Changes\r\nAdds ItemSpawnEntityEvent\r\nAdds PlaceEntityEvent (extends ItemSpawnEntityEvent)\r\nAdds BlockPlaceEntityEvent (extends PlaceEntityEvent)\r\nMakes EntityPlaceEvent extend PlaceEntityEvent\r\n\r\n\r\nAdded an ItemStack field on ItemSpawnEntityEvent since that applies to all uses of that event and EntityPlaceEvent.\r\n\r\n#### New Event Calls\r\n##### ItemSpawnEntityEvent\r\n- Spawn eggs from dispensers and players\r\n##### EntityPlaceEvent (player only)\r\n- mob eggs from players \r\n##### BlockPlaceEntityEvent (dispenser only)\r\n- boats\r\n- armor stand\r\n- mob buckets\r\n- tnt\r\n\r\n```[tasklist]\r\n### Entity Placements\r\n- [x] Spawn Eggs - ItemSpawnEntityEvent (dispenser w/null player)\r\n- [x] Boats - EntityPlaceEvent/BlockPlaceEntityEvent\r\n- [x] ~~Item Frame, Painting, Leash~~ (HangingPlaceEvent) (can't change due to API break)\r\n- [x] Armor Stand - EntityPlaceEvent/BlockPlaceEntityEvent\r\n- [x] End Crystals - EntityPlaceEvent\r\n- [x] Fish Buckets - EntityPlaceEvent/BlockPlaceEntityEvent\r\n- [x] ~~Fireworks~~ already tracks its spawning stack and shooter\r\n- [x] ~~Fire Charges~~ already tracks its spawning stack and shooter\r\n- [x] PrimedTNT BlockPlaceEntityEvent\r\n```",
    "head_branch": "feature/ItemSpawnEntityEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8c5d9087c4d6d376950",
    "number": 7372,
    "body": "Makes it clear this is unsupported and that future issues around this will be considered invalid",
    "head_branch": "funny-return-types",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Warn on strange @EventHandler return types (#7372)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8c6d9087c4d6d376951",
    "number": 7368,
    "body": "This time but the right branch.\r\n\r\nIncludes:\r\n - Further optimised collisions. I went pretty hard, there might be collision problems.\r\n - Reintroduction of player chunk loader patch. Helps rate limit chunk sending to clients.\r\n\r\n - Reversion of Mojang's internal chunk system changes to manage what chunks are ticking. They added a system on top of the existing one just to make chunks outside simulation distance not tick, obviously a complete waste. This should help bring certain aspects of chunk/entity/block ticking back under control, at least compared to 1.17. It also brings in some fixes, notably, mob spawning now _correctly_ occurs only in simulation distance.\r\nExpected behavioral changes are that plugins adding tickets to load chunks will now cause them to tick, as they did in 1.17. Considering that's how the API was designed to work, and has been done so since 1.14, it will remain that way.\r\nAPI for simulation distance is not implemented yet. This means any plugins trying to work with dynamically changing ticking distance _will not_ work. setViewDistance, unlike 1.17, will follow vanilla behavior and set a \"no ticking\" view distance.\r\nAs it stands, simulation distance is kept vanilla and will stay that way - this means that you do not have to change configs for this branch.\r\n\r\nAs always, dev builds are generally experimental and are expected to have issues. Keep those issues on this PR _only_.\r\n\r\nThe jar can be found here:\r\nhttps://cdn.discordapp.com/attachments/876902758366736457/935408751576502322/paper-paperclip-1.18.1-R0.1-SNAPSHOT-reobf.jar\r\nA comment will be made per update.",
    "head_branch": "dev/1.18-perf1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "1.18 misc performance dev branch (#7368)\n\n- Port player chunk loader patch\r\nMakes the chunk system act as it did in 1.17, no additional tickets (and thus logic) to make a chunk ticking.\r\nAdds simulation distance API, deprecates old no-tick method.\r\n- More collision optimisations\r\nAncient patch from tuinity that never could be pushed to master.\r\n- Fix Optimise ArraySetSorted#removeIf patch\r\n- Execute chunk tasks fairly for worlds while waiting for next tick\r\n- Port Replace ticket level propagator"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a8c7d9087c4d6d376952",
    "number": 7367,
    "body": "Includes:\r\n - Further optimised collisions. I went pretty hard, there might be collision problems.\r\n - Reintroduction of player chunk loader patch. Helps rate limit chunk sending to clients.\r\n\r\n - Reversion of Mojang's internal chunk system changes to manage what chunks are ticking. They added a system on top of the existing one just to make chunks outside simulation distance not tick, obviously a complete waste. This should help bring certain aspects of chunk/entity/block ticking back under control, at least compared to 1.17. It also brings in some fixes, notably, mob spawning now _correctly_ occurs only in simulation distance.\r\nExpected behavioral changes are that plugins adding tickets to load chunks will now cause them to tick, as they did in 1.17. Considering that's how the API was designed to work, and has been done so since 1.14, it will remain that way.\r\nAPI for simulation distance is not implemented yet. This means any plugins trying to work with dynamically changing ticking distance _will not_ work. setViewDistance, unlike 1.17, will follow vanilla behavior and set a \"no ticking\" view distance.\r\nAs it stands, simulation distance is kept vanilla and will stay that way - this means that you do not have to change configs for this branch.\r\n\r\nAs always, dev builds are generally experimental and are expected to have issues. Keep those issues on this PR _only_.\r\n\r\nThe jar can be found here:\r\nhttps://cdn.discordapp.com/attachments/876902758366736457/932942650657632266/paper-paperclip-1.18.1-R0.1-SNAPSHOT-reobf.jar\r\nA comment will be made per update.",
    "head_branch": "master",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8c8d9087c4d6d376953",
    "number": 7366,
    "body": "Adds an enum with the constant phases of the daylight cycle, to be used as reference or with setTime and setFullTime.\r\n\r\nI considered adding helpers to World for this, but wasn't sure if it'd be overstepping or doing too much. Decided it was best to get conversation started about it first.\r\n\r\nThese times are sourced from https://minecraft.fandom.com/wiki/Daylight_cycle#Daytime, and the overlapping time enums are on purpose.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8c9d9087c4d6d376954",
    "number": 7363,
    "body": "Fixes #7362",
    "head_branch": "fix/illegalcharmain",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Push illegal char kick to main thread (#7363)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8cad9087c4d6d376955",
    "number": 7359,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n2af60c80 Clarify documentation of Block#getBreakSpeed\r\n368ad40b SPIGOT-6899: Add Player#getPreviousGameMode\r\nb99d4c16 SPIGOT-6901: Make Random Nullable in LootTable\r\n13b723fc Fix typo in CreatureSpawnEvent documentation\r\ne9f9b5bd SPIGOT-6888: Add SpawnReason for Vex spawned by Evokers\r\naa908faf PR-713: Repairable should extend ItemMeta\r\n\r\nCraftBukkit Changes:\r\n30b4043e SPIGOT-6907: Oxygen does not restore up to value set by LivingEntity#setMaximumAir()\r\n3a8161fe SPIGOT-6639: During an EntityDamageEvent with damage from blocks, damaging any entity throws an error\r\n74a5cc8a PR-994: Fix changing world in portal events not updating used world border\r\n7c3ac942 SPIGOT-6902: (Unsupported) Load server as child of system classloader\r\nd10c35ea SPIGOT-6899: Add Player#getPreviousGameMode\r\ne0a6aa36 SPIGOT-6901: Add Support for Random in methods for LootTable\r\n2e61a5f8 SPIGOT-6888: Add SpawnReason for Vex spawned by Evokers\r\n\r\nSpigot Changes:\r\n862678ea Rebuild patches",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#7359)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a8cbd9087c4d6d376956",
    "number": 7358,
    "body": "Small change that fixes https://github.com/PaperMC/Paper/issues/7356\r\n\r\nI also marked `ItemFactory#getI18NDisplayName(ItemStack)` and `ItemStack#getI18NDisplayName()` as deprecated with notices telling people to use `Component#translatable` with itemstacks since they implement `Translatable`\r\n\r\nIf we wanted to reduce patch counts, this patch could even be merged in with either Adventure or the patch that makes ItemStack implement Translatable.",
    "head_branch": "fix/ItemStack#getI18NDisplayName",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix and deprecate ItemStack#getI18NDisplayName (#7358)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a8ccd9087c4d6d376957",
    "number": 7355,
    "body": "Was previously clearing all hand/armor slots on deaths when only slots that had their items dropped should be cleared so as to not update the client to the change in entity armor status.",
    "head_branch": "fix/entity-armor-death-animation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix entity armor not showing on death animation (#7355)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8cdd9087c4d6d376958",
    "number": 7354,
    "body": "The result itemstack for PlayerBucketEmptyEvent can be set to null which the fix did not account for.\r\n\r\nJust to clarify, the value of `itemLeftInHandAfterPlayerBucketEmptyEvent` being null, means that default behavior should be used when setting the result itemstack (not changing it in creative, setting to empty bucket in other mods), but if a value is present in that static field, that should override the vanilla logic.",
    "head_branch": "fix/possible-NPE-empty-event-result-stack",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix NPE for bucket empty result stack being null (#7354)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8ced9087c4d6d376959",
    "number": 7353,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/7352\r\n\r\nThe field that tracks the xpReward was not getting reset if the death was cancelled so this resets it after each call to `Zombie#getExperienceReward(Player)`",
    "head_branch": "fix/baby-zombie-xp-reward",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix xp reward for baby zombies (#7353)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8cfd9087c4d6d37695a",
    "number": 7350,
    "body": "Allows for bypassing the username filter without globally disabling it.",
    "head_branch": "username-validation-field",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add unsupported field to disable username validation (#7350)\n\n* Add unsupported field to disable username validation\r\n\r\n* Add unsupported field to disable username validation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8d0d9087c4d6d37695b",
    "number": 7344,
    "body": "Only overworld spawn chunks are intended to have a ticket added to them. A mistake must've been made at some point upstream. ",
    "head_branch": "fix/spawnchunks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8d1d9087c4d6d37695c",
    "number": 7343,
    "body": "These issues stemmed from Paper integrating new upstream API\r\nthat was duplicated by a lot of existing Paper API\r\n\r\nFixes potential NPE if calling `CraftLimitedRegion#getBlockState(int,int,int)` and no BlockEntity is present.\r\n\r\nNo need to change implementation of CraftLimitedRegion#getBlockState(int,int,int) from `CraftRegionAccessor` because `CraftBlock` supports `WorldGenRegion`'s as its handle and `CraftBlockStates` (responsible for creating the API block states does as well)\r\n\r\nNo need to change implementation of `CraftLimitedRegion#setBlockData(int,int,int,BlockData)` either, if there is a need for different logic, it should be implemented in a separate method to keep API functionality consistent between upstream and Paper.\r\n\r\nNo need to change anything in `CraftMetaBlockState` to create block states since upstream added (and Paper fixed) the util class `CraftBlockStates`",
    "head_branch": "fix/limited-region",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix issues with LimitedRegion (#7343)\n\nThese issues stemmed from Paper integrating new upstream API\r\nthat was duplicated by a lot of existing Paper API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8d2d9087c4d6d37695d",
    "number": 7342,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/5141\r\n\r\nThe default value for this setting should be vanilla behavior with a note in documentation that it improves performance if enabled.\r\nDocs PR: https://github.com/PaperMC/PaperDocs/pull/148",
    "head_branch": "fix/hopper-ignore-default",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Change default for hoppers ignoring occluded blocks (#7342)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8d3d9087c4d6d37695e",
    "number": 7341,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/4869\r\n\r\nMenus don't add slots for the offhand, so on sendAllDataToRemote calls the\r\noffhand slot isn't sent. This is not correct because you *can* put stuff into the offhand\r\nby pressing the offhand swap item",
    "head_branch": "fix/offhand-desync",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Sync offhand slot in menus (#7341)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8d4d9087c4d6d37695f",
    "number": 7336,
    "body": "Resolves https://github.com/PaperMC/Paper/issues/5366\r\n\r\nRe-does bukkit's very outdated `PotionType` and `PotionData` classes into a single `Potion` class. ",
    "head_branch": "feature/potion-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8d5d9087c4d6d376960",
    "number": 7335,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/6437\r\n\r\nTested using the reproduction steps outlined in above issue.\r\n\r\nI think its better to not reorder stored enchants, as the order does have an effect on anvil usage. It's also a smaller diff, less to maintain, and will change 0 existing items, only newly created ones as LinkedHashSets keep the order from the EnchantmentMap but don't change it.",
    "head_branch": "fix/stored-enchant-reordering",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8d6d9087c4d6d376961",
    "number": 7334,
    "body": "Part of https://github.com/PaperMC/Paper/issues/6978\r\n\r\nSeems to work with basic testing, used https://www.chunkbase.com/apps/stronghold-finder to find a stronghold, stopped server, deleted region files, set stronghold seed in spigot.yml, started server, re-joined and the stronghold was gone. stopped, deleted region files again, set the seed to `\"default\"` and then rejoined, and the stronghold generated.",
    "head_branch": "feature/stronghold-seed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add configurable stronghold seed (#7334)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8d7d9087c4d6d376962",
    "number": 7333,
    "body": "API to send large amounts of fake block changes in one packet per chunk section.",
    "head_branch": "feature/multiBlockChange",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Multi Block Change API (#7333)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a8d8d9087c4d6d376963",
    "number": 7332,
    "body": "As a result of how the `PlayerDeathEvent` was implemented, when a player dies their items are simply dropped using the `world.dropItem()` method. This makes it very annoying for plugin developers to track down the Item entities dropped when a player dies. This patch implements a `PlayerLootDropEvent`, making tracking down the aforementioned Item entities simple. Furthermore, the item entities are marked as being thrown by the dead player.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8d9d9087c4d6d376964",
    "number": 7331,
    "body": "Accidentally closed #6892, see it for the discussion that has taken place.\r\n\r\nThe original code for getting a player's ip address is as follows:\r\n```java\r\nString s1 = \"local\";\r\n\r\nif (connection.getRemoteAddress() != null) {\r\n    s1 = connection.getRemoteAddress().toString();\r\n}\r\n```\r\n\r\nHowever, this s1 variable became unused and the following was used instead:\r\n```java\r\npostChunkLoadJoin( ... connection.getRemoteAddress().toString() ... )\r\n```\r\n\r\nThis new code does not check if the `connection.getRemoteAddress()` is null, and throws a NullPointerException when it is null.\r\n\r\nI have fixed this by replacing the new code with the original s1 variable. However, postChunkLoadJoin is run inside a lambda function, thus s1 was made final.",
    "head_branch": "bugfix/remote-address-is-null",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove redundant getRemoteAddress that can cause an NPE (#7331)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8dad9087c4d6d376965",
    "number": 7330,
    "body": "I think the ~~quickest~~simplest way currently to get the DyeColor of a bed, is\r\n```java\r\nif (block.getState() instanceof Bed bed) {\r\n\tDyeColor color = bed.getDyeColor()\r\n}\r\n```\r\nwhich is just backed by a size 16 switch statement in CraftBed, but the method is still totally valid.\r\n\r\nIn addition, Beds **do still** have an associated tile entity, and I think it doesn't make sense to have it deprecated if it does in fact still exist. Take a look at the `Conduit` interface, which exists but has declared methods, and just extends `TileState`. ",
    "head_branch": "fix/undeprecate-bed-tilestate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Undeprecate Bed's tile entity interface (#7330)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a8dbd9087c4d6d376966",
    "number": 7329,
    "body": "The affects spawning API had some method names, parameter names, and copied old decompiler code in it, this fixes that (none of which changes behavior), but what does, is that this was missing the Skeleton Traps and Zombie reinforcements part of \"affects spawning\". This also adds checks if the player affects spawning before creating either of those.",
    "head_branch": "fix/affects-spawning-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix/improve Affects Spawning API (#7329)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8dcd9087c4d6d376967",
    "number": 7328,
    "body": "CreatureSpawner#setSpawnedItem didn't work at all post the 1.18 update.\r\n\r\nAlso fixes some unexpected NPE's from showing up when calling #isActivated or #resetTimer on an unplaced block state.",
    "head_branch": "fix/item-spawner",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix setSpawnedItem from 1.18 update (#7328)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8ddd9087c4d6d376968",
    "number": 7327,
    "body": "Previously got an NPE since the `world` field on `CraftBlockState` is null for unplaced BlockStates (such as the ones from `BlockStateMeta#getBlockState`). ",
    "head_branch": "fix/unplaced-furnace-cook-speed-multi",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix setting unplaced furnace cook speed multiplier (#7327)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8ded9087c4d6d376969",
    "number": 7325,
    "body": "Currently no way of differentiating between BlockStates that are live representations of block entities, or snapshots that require a call to BlockState#update in order for their underlying nms BlockEntities to be updated.",
    "head_branch": "feature/TileState#isSnapshot",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added method to check snapshot state of TileStates (#7325)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a8dfd9087c4d6d37696a",
    "number": 7324,
    "body": "I haven't test this yet. But I think this works well.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8e0d9087c4d6d37696b",
    "number": 7323,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nd924635c PR-704: Add generateTree method with a predicate\r\n32563aa0 PR-706: Add playSound with Entity as source\r\n\r\nCraftBukkit Changes:\r\n34704504 PR-987: Add generateTree method with a predicate\r\n312d007f PR-990: Add playSound with Entity as source",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#7323)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a8e1d9087c4d6d37696c",
    "number": 7321,
    "body": "Useful event for detecting user acquired/lost an item in any way (e.g. custom advancement). \r\n\r\nOtherwise, it is needed to listen for several events and I am not sure whether it is possible to listen for example for /give.\r\n\r\nOriginally I wanted it to be InventoryEvent, but since there is no InventoryView and it would have to be null, I thought PlayerEvent would be better.",
    "head_branch": "feature/slotChangeEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PlayerInventorySlotChangeEvent (#7321)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a8e2d9087c4d6d37696d",
    "number": 7318,
    "body": "This pull requests adds the ability to change entiy's pose through the api.\r\nsince by default the entity's pose isn't persisted between loading and unloading, any changes to the pose outside the api will not be persisted to retain the correct behaviour however any pose changed through the api will be persisted.\r\nit also adds the ability to make the pose fixed (can not be changed by vanilla ways) such as sleeping, riding, etc.\r\nThis is my first time contributing so please point out any mistakes or better ways to further improve on this (since I don't know much about the server's code)\r\nI know of some annotations issues that I will try to fix when I can\r\n_This has not been tested for players and to be honest I don't think poses will ever work well for players_\r\n ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8e4d9087c4d6d37696e",
    "number": 7317,
    "body": "The 0-case is intentionally left out, because no extra instruction needs to be generated if the return type is void.\r\n\r\nI verified that [my demo plugin](https://github.com/Jannyboy11/GeneratedEventExecutorBug) now loads correctly, the VerifyError no longer occurs, and I installed a plugin with a 'normal' event handler as well to verify that nothing broke by this change.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update ASM EventExecutor generator patch to respect event handler return types. Fixes #7311 (#7317)\n\nCo-authored-by: Jan Boerman <janboerman95@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8e5d9087c4d6d37696f",
    "number": 7316,
    "body": "TODO: needs testing",
    "head_branch": "feature/getEntityTargetPredicate",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8e6d9087c4d6d376970",
    "number": 7315,
    "body": "after many years on the fabled todo list, a port of the SendSignEvent from EMC\r\n\r\nTODO: needs testing",
    "head_branch": "feature/SignSendEvent",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8e7d9087c4d6d376971",
    "number": 7308,
    "body": "Also moves the non-snapshot blockstate creation to CraftBlockStates",
    "head_branch": "fix/incorrectly-placed-hunks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Some block state hunks were in the wrong patch (#7308)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8e8d9087c4d6d376972",
    "number": 7305,
    "body": "Ports #4245 (fixes #2286) to 1.18 and addresses comments. The diff\r\nhas been simplified a lot because the vanilla already passes the player\r\ninto the resolveBook and setBook methods.",
    "head_branch": "feature/lecternbookevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8e9d9087c4d6d376973",
    "number": 7299,
    "body": "Fixes #7276 by not adding markers to the entity tick list at all and ignoring them\r\nin Spigot's activation range checks. The entity tick list is only used in the tick\r\nand tickPassenger methods, so we can safely not add the markers to it.\r\n\r\nTo make testing easier, I've attached a world with roughly 100k marker entities\r\nat spawn (on top of the diamond blocks)\r\n\r\n[world.zip](https://github.com/PaperMC/Paper/files/7829098/world.zip)\r\n",
    "head_branch": "opt/marker-ticking",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't tick markers (#7299)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8ead9087c4d6d376974",
    "number": 7295,
    "body": "closes #7292\r\n\r\ntested with the following world generator\r\n```java\r\n\r\n    @Override\r\n    public ChunkGenerator getDefaultWorldGenerator(final String worldName, final String id) {\r\n        return new ChunkGenerator() {\r\n            @Override\r\n            public BiomeProvider getDefaultBiomeProvider(final WorldInfo worldInfo) {\r\n                final BiomeProvider vanilla = worldInfo.vanillaBiomeProvider();\r\n                return new BiomeProvider() {\r\n                    @Override\r\n                    public Biome getBiome(WorldInfo worldInfo, int x, int y, int z) {\r\n                        final int chunkX = x >> 4;\r\n                        final int chunkZ = z >> 4;\r\n                        if (chunkX == chunkZ || ((chunkX + chunkZ) & 1) == 0) {\r\n                            return vanilla.getBiome(worldInfo, x, y, z);\r\n                        } else {\r\n                            return Biome.BADLANDS;\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public List<Biome> getBiomes(WorldInfo worldInfo) {\r\n                        return vanilla.getBiomes(worldInfo);\r\n                    }\r\n                };\r\n            }\r\n\r\n            @Override\r\n            public boolean shouldGenerateNoise() {\r\n                return true;\r\n            }\r\n\r\n            @Override\r\n            public boolean shouldGenerateSurface() {\r\n                return true;\r\n            }\r\n\r\n            @Override\r\n            public boolean shouldGenerateBedrock() {\r\n                return true;\r\n            }\r\n\r\n            @Override\r\n            public boolean shouldGenerateCaves() {\r\n                return true;\r\n            }\r\n\r\n            @Override\r\n            public boolean shouldGenerateDecorations() {\r\n                return true;\r\n            }\r\n\r\n            @Override\r\n            public boolean shouldGenerateMobs() {\r\n                return true;\r\n            }\r\n\r\n            @Override\r\n            public boolean shouldGenerateStructures() {\r\n                return true;\r\n            }\r\n        };\r\n    }\r\n```\r\n\r\n![image](https://i.imgur.com/6K96mym.jpg)",
    "head_branch": "vanilla-biomes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Expose vanilla BiomeProvider from WorldInfo (#7295)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a8ebd9087c4d6d376975",
    "number": 7294,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/7293\r\n\r\nDatapack command functions are parsed before any tags are loaded into the tag container, and that's why in vanilla there's no \"parsing\" of the entity tag done when the argument is parsed, its done inside the predicate for the EntitySelector which is run on command usage (after all the stuff's been loaded)",
    "head_branch": "fix/this-AGAIN",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8ecd9087c4d6d376976",
    "number": 7291,
    "body": "(Closes https://github.com/PaperMC/Paper/issues/6975)\r\n\r\nThis PR does 3 main things:\r\n1. (As the title describes) brings SpaceWalker's fantastic redstone implementation. [Alternate Current](https://github.com/SpaceWalkerRS/alternate-current) to Paper.\r\n2. Makes Eigencraft the default redstone algorithm.\r\n3. Adds a new config option in place of `use-faster-eigencraft-redstone`: `redstone-algo`\r\n\r\nTODO:\r\n- [X] Migrate previous `use-faster-eigencraft-redstone` config to the new `redstone-algo` option.\r\n- [X] Use enums for config option\r\n- [X] Properly implement config file changes in their respective patches\r\n- [X] PaperDocs PR (https://github.com/PaperMC/PaperDocs/pull/146)",
    "head_branch": "pr/alternate-current",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8edd9087c4d6d376977",
    "number": 7286,
    "body": null,
    "head_branch": "readmee",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[ci skip] Add forums to readme (#7286)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8eed9087c4d6d376978",
    "number": 7284,
    "body": "Related to #6727\r\nWhile it's listed as a Vanilla bug in the linked Mojira issue, the Mojira issue seems more broad and the code seems very deliberate, so this makes it modifiable via event",
    "head_branch": "Boat-Wobble",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8efd9087c4d6d376979",
    "number": 7282,
    "body": "I've meet bugs on slimefun and LiteXpansion with reload command. The LiteXpansion could not register its new class because there is already one old instance in the enchantment list. So it would use the old classes and cause some suspicious errors and memory leak. This commit would unregister the enchantments which is registered by plugins, so it can fix wrong things and avoid confusing errors.\r\nBy the way we have repaired the tab completion of the reload command. ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8f0d9087c4d6d37697a",
    "number": 7280,
    "body": "As requested in [this](https://github.com/PaperMC/Paper/issues/7277) issue\r\n\r\nThis makes the speed at which fire should spread configurable, the default value is 30. Increasing the value makes the fire spread slower, decreasing it speeds it up.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8f1d9087c4d6d37697b",
    "number": 7278,
    "body": "Adds the new overload: `PersistentDataContainer#has(NamespacedKey key)`",
    "head_branch": "mine/new_has_api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add new overload to PersistentDataContainer#has (#7278)\n\nCo-authored-by: u9g <winworkswow@gmail.com>\r\nCo-authored-by: Josh Roy <joshroy126@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a8f2d9087c4d6d37697c",
    "number": 7275,
    "body": "* Removes a no-longer-needed `@UndefinedNullability` annotation since upstream changed behavior.\r\n* getLootTable now honors its method contract and returns null if there isn't a loot table with that key.",
    "head_branch": "fix/nullability-things",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix some nullability things (#7275)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8f3d9087c4d6d37697d",
    "number": 7274,
    "body": "Event called when packet [`PacketPlayInSteerVehicle`](https://wiki.vg/Protocol#Steer_Vehicle) is sent by player.",
    "head_branch": "rgnt-steer-vehicle-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8f4d9087c4d6d37697e",
    "number": 7273,
    "body": "This is the first time i have added an event to the API, feedback would be appreciated.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8f5d9087c4d6d37697f",
    "number": 7268,
    "body": "Might be useful for servers that implement custom chat filters and want to detect if they should filter chat by default for a particular person.\r\n\r\nI don't have a Microsoft child account, so I tested this with the following pakkit script:\r\n```java\r\nexports.upstreamHandler = function (meta, data, server, client) {\r\n  if (meta.name === 'settings') {\r\n    data.enableTextFiltering = true\r\n  }\r\n  server.sendPacket(meta, data)\r\n}\r\n\r\nexports.downstreamHandler = function (meta, data, server, client) {\r\n  client.sendPacket(meta, data)\r\n}\r\n```",
    "head_branch": "feature/text-filtering-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8f6d9087c4d6d376980",
    "number": 7265,
    "body": "This uses some pretty absurd solutions I think to fix some existing issues with bukkit's inventory system and inventories created vis Bukkit.createInventory(). I recommend people use the HumanEntity#openSomething methods cause those are going to be pretty good, but they don't afford as much customization as the other ones.\r\n\r\nCreating this as a draft because I haven't tested all the inventories and I'm sure others suffer from the same problem anvil, smithing tables, and enchant tables did. It's mainly non-tile-entity crafting block inventories, so I think looms, stonecutters, and grindstones are probably affected.\r\n\r\n### Fixed\r\n\r\n- [x] Enchanting\r\n- [x] Anvil\r\n- [x] Smithing\r\n- [ ] Beacon\r\n- [x] Loom\r\n- [ ] Cartography\r\n- [ ] Grindstone\r\n- [x] Stonecutter",
    "head_branch": "fix/view-custom-inventory",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8f7d9087c4d6d376981",
    "number": 7264,
    "body": "same as https://github.com/PaperMC/Paper/pull/6418",
    "head_branch": "non-recipe-crafting-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8f8d9087c4d6d376982",
    "number": 7263,
    "body": "Tested by firing one of each of the 3 arrows, (regular, spectral, and tipped) and a trident. The arrows work as expected, the trident just immediately returns to the player without going anywhere. Should that be documented?",
    "head_branch": "feature/no-clip-arrows",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add method to set noclip on arrows (#7263)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a8f9d9087c4d6d376983",
    "number": 7261,
    "body": "Fixed Tripwires beeing destroyed by sheers instead of the Tripwire beeing disarmed",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8fad9087c4d6d376984",
    "number": 7255,
    "body": "Backports 503ac8f to 1.17.",
    "head_branch": "backport/1.17/perform-username-validation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Backport \"Provide option to disable username validation\" to 1.17 (#7255)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8fbd9087c4d6d376985",
    "number": 7254,
    "body": "I hate this, but, I don't see any other sane option especially for oddball setups which blatantly violate mojangs apis. This is an unsupported setting for various reasons",
    "head_branch": "config/username-validation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Provide option to disable username validation (Closes #7250) (#7254)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8fcd9087c4d6d376986",
    "number": 7252,
    "body": "All but 2 of the bukkit InventoryType's can easily implement Translatable. The two that cant, Composter (which doesn't have a UI to begin with, no clue why its part of the bukkit enum) and Merchant which relies on the villager name. So can either to a nonnull method that returns an empty string for its translation key, or a nullable method and NOT implement Translatable, or have it throw an exception of there isn't one and someone tries to use the method.",
    "head_branch": "feature/inv-translatable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8fdd9087c4d6d376987",
    "number": 7251,
    "body": "~~Needs a bunch of javadoc comments still~~\r\n\r\nThe old property system had a few big issues (`InventoryView$Property`), \r\n1.  it was incomplete, missing 2 properties, one for stonecutter, and one for loom\r\n2. it only allowed for one inventory type per property which is not true anymore, the 4 furnace ones apply to Furnaces, Blast Furnaces, and Smokers\r\n3. It relied on someone using magic values to set potion effect types or enchantments which is bad practice for the API\r\n\r\nI changed it into a class format, with a generic for the value type that's converted to an integer in the server impl.",
    "head_branch": "feature/window-data-prop-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8fed9087c4d6d376988",
    "number": 7249,
    "body": "creating an inventory of type smoker or blast furnace should return an instance of CraftInventoryFurnace, but I noticed when I tried to cast it, it was a CraftInventory. This is not correct, because literally everything that applies to Furnace furnaces applies to the other 2 as well. The ctor for CraftInventoryFurnace even takes the AbstractFurnaceBlockEntity so all existing methods work as they should.",
    "head_branch": "fix/furnace-inventories",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix FurnaceInventory for smokers and blast furnaces (#7249)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a8ffd9087c4d6d376989",
    "number": 7248,
    "body": "This is a bug with snakeyaml\r\nPR: https://bitbucket.org/snakeyaml/snakeyaml/pull-requests/3\r\nIssue: https://bitbucket.org/snakeyaml/snakeyaml/issues/518/comments-could-cause-queue-full\r\n\r\nAdded the entire Emitter class from snakeyaml because\r\ndev-imports doesn't work with non-mojang-added dependencies\r\n\r\nChange is on line 209, changing the events queue from a blocking one with a max of 100, to an ArrayDeque with an initial capacity of 100.\r\n\r\nI tested the fix with a plugin with a 110 line comment above a key/value and then in the plugin's onEnable did `saveDefaultConfig` and then `getConfig().saveToString()`",
    "head_branch": "fix/snakeyaml-long-comments",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix saving configs with more long comments (#7248)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a900d9087c4d6d37698a",
    "number": 7247,
    "body": "I'm not sure I understand how the `PlayerMobDistanceMap` exactly works, however on my server I've noticed that the per player mob spawns don't really work that well. I assume this to be because we have a 32 view distance and that thus multiple players, even when far away, will overlap and have their mob spawns merged. Giving the map the simulation distance seems more sensible.",
    "head_branch": "sim-dist-per-player-mobs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use simulation distance for per-player mob spawns (#7247)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a902d9087c4d6d37698b",
    "number": 7246,
    "body": "Updated Upstream (Bukkit/CraftBukkit/Spigot)\r\n\r\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n8c956b8d SPIGOT-6886: Restore previous behaviour of loading unusual config keys\r\n3dbfebef Fix saving configs which are only a header\r\nfde55ab8 PR-705: Add PDC to Structures\r\na7505b3c Add workaround for SnakeYAML 100 comment limit\r\n9db6df7d PR-703: Fix/test yaml anchors and merge\r\n129c3c54 SPIGOT-6875: Update references to old world height limits\r\n\r\nCraftBukkit Changes:\r\nf3828bbe PR-989: Add PDC to Structures\r\ncc86ab18 SPIGOT-5339, SPIGOT-6252, SPIGOT-6777: Only cancel knockback if the damage event was canceled\r\naeaeb359 SPIGOT-6496: /time functions affect entire server, not just the origin world\r\na1b1dc81 Put Discord rather than IRC in config files\r\nfb92f345 SPIGOT-6278: Persistent piglins count towards mob cap\r\n\r\nSpigot Changes:\r\nf4ff00ff Rebuild patches\r\n54b4afaa SPIGOT-6881: Add option to ignore spectators in entity-activation-range\r\n71b293bc Put Discord rather than IRC in config files\r\n9fd34ab9 SPIGOT-6876: Death screen message disappears after a few seconds",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#7246)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a903d9087c4d6d37698c",
    "number": 7245,
    "body": "I realize this is a bit ugly; I wasn't sure whether to expose the ClientGameEvent's ID as internal API or to use a massive else-if, and there's no namespaced key to use either\r\nThe value param is also a magic value, but as far as I see I don't really know how to use some of these game events without a magic value param other than creating a method for each case",
    "head_branch": "PlayerGameEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a904d9087c4d6d37698d",
    "number": 7244,
    "body": "Getting a gamerule's default value shouldn't be tied to needing a world instance since it's the same without a world. Also, the methods to get the gamerule's value for a world and default world should be notnull, so the methods I added to GameRule to get/set the world have an Objects.requireNonNull wrapped around them.",
    "head_branch": "feature/gamerule-api-improvements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a905d9087c4d6d37698e",
    "number": 7243,
    "body": "Noticed that some param in the FishingHook ctor were swapped, so pr'd it to yarn and it was merged. So figured we should update the param mappings.",
    "head_branch": "fix/some-param-mappings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed FishingHook param mappings being swapped (#7243)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a906d9087c4d6d37698f",
    "number": 7242,
    "body": "I'm pretty sure this is still a useful thing. For example, taking the [paperweight-test-plugin](https://github.com/PaperMC/paperweight-test-plugin) and loading the non-reobf'd plugin jar on a mojmapped server without relocations will currently fail because its not rewriting the relocations. But with this (and running the server with `-Ddebug.rewriteForIde` it now works.\r\n\r\nNot sure on the best way to automatically know the cb package, so I just threw it in the manifest, prob some better way to do it with gradle that I just don't know.",
    "head_branch": "fix/debug-rewriteForIde",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update the rewriteForIde for new cb package version (#7242)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a907d9087c4d6d376990",
    "number": 7239,
    "body": "Fixes #7238 by setting the fake, empty enchantment to a soulspeed enchantment with level 1 if the item has soulspeed.",
    "head_branch": "fix/itemmeta-soulspeed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix soul speed particles with hide-itemmeta enabled (#7239)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a908d9087c4d6d376991",
    "number": 7237,
    "body": null,
    "head_branch": "pr/monster-spawning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a909d9087c4d6d376992",
    "number": 7236,
    "body": "saw this while browsing through the code and I thought this method made more sense\r\nI assume this is unintended but https://github.com/PaperMC/Paper/pull/2847 for context for when relevant code was even added\r\n(endermen and blazes also aren't the only mobs for which the method returns true)",
    "head_branch": "nerfed-drowning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use isSensitiveToWater in nerfed check for water-sensitive mobs (#7236)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a90ad9087c4d6d376993",
    "number": 7235,
    "body": null,
    "head_branch": "per-player-mob-spawn-areamap",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use AreaMap for per-player mob spawning (#7235)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a90bd9087c4d6d376994",
    "number": 7232,
    "body": "Soooooo since the client uses one of the many resources it downloads for associated a sound with a subtitle key, the test makes a request to mojangs resources api. idk how good that is, maybe the test should be disabled most of the time or smth. But, it works. I also wrote a function that generates the big switch statement thats commented out of the test by default cause most of the time it doesnt need to be run.",
    "head_branch": "feature/subtitle-i18n-keys",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a90cd9087c4d6d376995",
    "number": 7231,
    "body": "Closes https://github.com/PaperMC/Paper/issues/6991\r\n\r\nThe old name doesn't really reflect what this does anymore since Mojang added a `NeedsStateScanning` field to the dragon fight nbt structure. The setting might be useful still, but I think it should be renamed.",
    "head_branch": "fix/rename-legacy-dragon-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a90dd9087c4d6d376996",
    "number": 7230,
    "body": "Shouldn't make any noticeable behavior difference, although gives a slight performance benefit when per-player is enabled due to not needing to update mojangs counters",
    "head_branch": "per-player",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix vanilla LocalMobCapCalculator being used when per-player mob spawning is enabled (#7230)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a90ed9087c4d6d376997",
    "number": 7229,
    "body": "Powder snow cauldrons should turn to water when\r\nextinguishing an entity\r\n\r\nThis diff could be a lot cleaner if we broke the signature of LayeredCauldronBlock#handleEntityOnFireInside to add an entity param and return a bool.",
    "head_branch": "fix/powder-snow-cauldrons-extinguish",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix powder snow cauldrons not turning to water (#7229)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a90fd9087c4d6d376998",
    "number": 7228,
    "body": "Closes #7221\r\n\r\nProvides an event for player's washing dyed leather armor or shulker boxes or banners in a cauldron.",
    "head_branch": "feature/PlayerWashItemEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a910d9087c4d6d376999",
    "number": 7227,
    "body": "Seems log4j-api in Paper-API was still on 2.17.0 instead of 2.17.1 (where it was bumped here: https://github.com/PaperMC/Paper/commit/1931bb53bfdb7395f8214c9a7b6d4d65046efdee for Paper-Server)",
    "head_branch": "pr/update-log4j-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Update log4j-api in Paper-API to 2.17.1 (#7227)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a911d9087c4d6d37699a",
    "number": 7223,
    "body": "My take on how to add a \"get block data properties individually\" on top of bukkit's existing method-based system.\r\n\r\n### Structure\r\n3 types of data properties: `Boolean`, `Integer`, and `Enum`. This pr creates a base `BlockProperty` class with 3 (+ special cases) implementations of it for each type.\r\n\r\n#### Special Cases\r\nSo far, I've noticed 2 API types that are used to wrap integers, so this also adds handling for those, not exposing them as integers.\r\n* `rotation` as BlockFace\r\n* `note` as Note\r\n\r\nThe `BlockPropertyHolder` interface contains all the methods to interact with a set of properties. I left it as a standalone interface in case other uses in the future popup where a separate impl might be warranted. I added a `Mutable` subinterface to that to separate out the \"set\" methods, some implementations of it might not want to support mutating properties (such as future FluidState API https://github.com/PaperMC/Paper/pull/8609).\r\n\r\n### Tests\r\nI wrote some significant tests to ensure all nms `Property`s from `BlockStateProperties` have a counterpart, and they are equal to each other.",
    "head_branch": "feature/block-data-properties",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a912d9087c4d6d37699b",
    "number": 7219,
    "body": "Fixes #7218\r\n\r\nChanges y block range from 0-1023 to -512-511 on decoding. Ideally the whole encoding would be changed, but that would smell like breaking API",
    "head_branch": "fix/blockkey",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix block key with negative y unpacking (#7219)\n\nFixes #7218"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a913d9087c4d6d37699c",
    "number": 7216,
    "body": "This is outdated, seems this was forgotten when updating.",
    "head_branch": "1.18-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a915d9087c4d6d37699d",
    "number": 7214,
    "body": "Fixes: https://github.com/PaperMC/Paper/issues/5551\r\n\r\nI guess the old behavior of this method was that the anti-xray was not run. However, around a month ago this method was fixed which caused it to use the x-ray behavior by default. This disables this, however, it is possible a new API method could be added to exclude Xray, but I am not sure. Opinions appreciated.",
    "head_branch": "fix-5551",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Respect x-ray permission in World#refreshChunk (#7214)\n\nCo-authored-by: stonar96 <minecraft.stonar96@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a916d9087c4d6d37699e",
    "number": 7213,
    "body": "Requires https://github.com/PaperMC/Paper/pull/7195\r\n\r\nThis event is meant to instead represent the food item being consumed only, which is useful when making custom food items. This is executed before the FoodLevelChangeEvent, only executing if the provided item stack is not null.",
    "head_branch": "eat-item-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a917d9087c4d6d37699f",
    "number": 7212,
    "body": "This has been unused since 1.13 (see V1458 datafixer).\r\n![image](https://user-images.githubusercontent.com/23108066/147508200-26d478e7-855a-4c57-8a40-85fdd15ff44d.png)\r\n\r\nBecause of how long this has been broken, it's not even worth fixing it IMO, just point towards adventure stuff.",
    "head_branch": "deprecate-old-itemstuff",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Deprecate localized name API (#7212)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a918d9087c4d6d3769a0",
    "number": 7211,
    "body": "Noticed this was missing from this patch. Seems important ^_^",
    "head_branch": "AllChunksAreSlimeChunks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Chunk#isSlimeChunk when all-chunks-are-slime-chunks is true (#7211)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a919d9087c4d6d3769a1",
    "number": 7207,
    "body": "Resolves https://github.com/PaperMC/Paper/issues/6812\r\n\r\nAllows you to lock freeze ticks to a certain number, allowing you to prevent it from being updated nicely.",
    "head_branch": "frozen-override",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Lock Frozen Ticks API (#7207)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a91ad9087c4d6d3769a2",
    "number": 7205,
    "body": null,
    "head_branch": "livingentities-typo-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Fix typo in getNearbyLivingEntities documentation (#7205)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a91bd9087c4d6d3769a3",
    "number": 7204,
    "body": "This exposes the bucket-able interface used in Minecraft, which are used by entities like axolotls, fishes, and the upcoming tadpole mob.\r\n\r\n  This was decided to be put into a separate patch. [see relevant conversation](https://canary.discord.com/channels/289587909051416579/555462289851940864/923108395656020019)",
    "head_branch": "bucketable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bucketable API (#7204)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a91cd9087c4d6d3769a4",
    "number": 7203,
    "body": "Currently, when tests fail in builds it doesn't actually give you any information about that test.\r\n\r\nBefore: \r\n![image](https://user-images.githubusercontent.com/23108066/147419027-60a8f9e3-eeff-4f9d-833e-cd3d312805cb.png)\r\n\r\nAfter:\r\n![image](https://user-images.githubusercontent.com/23108066/147420001-90f36f1d-50da-463e-9523-0271fcd13be1.png)\r\n",
    "head_branch": "test-results",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Change test logging settings to log by default (#7203)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a91dd9087c4d6d3769a5",
    "number": 7202,
    "body": "This adds the ability to force tick blocks, useful if you want to for example simulate plant growing on certain blocks.",
    "head_branch": "tick-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Block Ticking API (#7202)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a91ed9087c4d6d3769a6",
    "number": 7197,
    "body": "Resolves: https://github.com/PaperMC/Paper/issues/6863\r\n\r\nCalled per-player, allows for modifying the message and getting what type it represents. \r\nThis also adds a configuration option, which will disable/enable these messages. If they are disabled the event will be called canceled by default.\r\n\r\n```java\r\n@EventHandler\r\n    public void event(PlayerSleepMessageEvent event) {\r\n        Player player = event.getPlayer();\r\n        \r\n        player.sendMessage(event.getMessageType().toString());\r\n        player.sendMessage(event.getMessage());\r\n        event.setMessage(Component.text(\"haha night go skippy\"));\r\n    }\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/23108066/147399713-c677c75d-4d36-4f5d-9dc8-4f106335f25e.png)\r\n![image](https://user-images.githubusercontent.com/23108066/147399714-f2e97be8-2a60-4a7e-8da2-92b7e52eef09.png)\r\n",
    "head_branch": "sleeping-message-customization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a91fd9087c4d6d3769a7",
    "number": 7196,
    "body": "Resolves https://github.com/PaperMC/Paper/issues/7161",
    "head_branch": "fix/MC-55347",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a920d9087c4d6d3769a8",
    "number": 7195,
    "body": "Resolves https://github.com/PaperMC/Paper/issues/7193\r\n\r\nIt may just be better to add an entirely new event.. but I would like opinions on this. Although this mostly works fine, it gets a little wonky when it comes to canceling natural hunger decay. \r\n```\r\n((ServerPlayer) this.entityhuman).getBukkitEntity().sendHealthUpdate();\r\n@@ -66,10 +66,11 @@ public class FoodData {\r\n                 this.saturationLevel = Math.max(this.saturationLevel - 1.0F, 0.0F);\r\n             } else if (enumdifficulty != Difficulty.PEACEFUL) {\r\n                 // CraftBukkit start\r\n-                org.bukkit.event.entity.FoodLevelChangeEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callFoodLevelChangeEvent(player, Math.max(this.foodLevel - 1, 0));\r\n+                org.bukkit.event.entity.FoodLevelChangeEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callFoodLevelChangeEvent(player, Math.max(this.foodLevel - 1, 0), this.saturationLevel); // Paper - Expose Saturation\r\n\r\n                 if (!event.isCancelled()) {\r\n                     this.foodLevel = event.getFoodLevel();\r\n+                    this.saturationLevel = event.getSaturationModifier(); // Paper - Expose Saturation\r\n                 }\r\n```\r\n\r\nSpecifically here, I can't really \"cancel\" saturation modification since this would be a behavior change. \r\nSo, it's either we can live with this slight issue, or we can just make an entirely new event that would be executed alongside FoodLevelChangeEvent, this would allow us to add an event for natural saturation decay as well. However, canceling the FoodLevelChangeEvent will also cancel modification of the saturation in some situations (like eating food). So I would like some pointers here.",
    "head_branch": "saturation-modifier",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a921d9087c4d6d3769a9",
    "number": 7192,
    "body": "closes #7190",
    "head_branch": "api-capabilities",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a922d9087c4d6d3769aa",
    "number": 7188,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/7185 and\r\nfixes #7194\r\n\r\nThe client doesn't handle multiple sibling nodes asking the server for suggestions correctly, so make sure to only register it once per parent.",
    "head_branch": "fix/cmd-suggestions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Dont register multiple ASK_SERVER suggestions under one parent node (#7188)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a923d9087c4d6d3769ab",
    "number": 7187,
    "body": "Allows methods for accessing poi blocks\r\nAn example is provided in the test plugin, where all nearby POI will be marked with a redstone block on top of it. \r\n\r\nDocumentation is not yet finished, **feedback is welcome**!!",
    "head_branch": "poi-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a924d9087c4d6d3769ac",
    "number": 7186,
    "body": "I know this is low priority right now, but I decided to look into it for fun.\r\n\r\nThis PR would close the #5347 by Glare.  It does two things:\r\n\r\n1. Adds two IDs into the bug report issue template so that they can be prefilled by URL query parameters. \r\n2. Patches `PaperCommand` to add a `/paper reportbug` command which collects all datapacks and plugins on the server as well as their enabled/disabled state and the server version. It uses the previously added IDs to pop these into the issue report URL and then provides the link. Upon clicking, the plugin/datapack list and server version are nicely prefilled and all the user needs to do is fill out what's going on.\r\n\r\nI considered somehow running timings (maybe a command option?) and popping that in, too. Thoughts?\r\n\r\nThe method is self contained which, to me, looks a little dirty. I originally had a helper method to handle the string formatting for the plugin/datapacks and url encoding however this seemed like it would make a larger diff than would be strictly necessary so I opted to remove them and do everything in the method. If the helper methods should be used, let me know.\r\n\r\nAnd then there's the imports. I'm not sure if for example the `Datapack` class should be imported or just referred to via its fully qualified name since it's the first class from the `io.papermc` package to be included here.\r\n\r\nAnyway, not sure if this is still wanted or not. I saw it while scrolling around the issues and saw help wanted so i decided to take a look. If it's not wanted anymore, then feel free to drop it.\r\n\r\n**Pics:**\r\nUsage from terminal:\r\n![Usage from terminal](https://owo.whats-th.is/5fDVzkj.png)\r\n\r\nUsage result in game (this is pretty ugly IMO):\r\n![Usage result in game](https://owo.whats-th.is/6PETrpW.png)\r\n\r\nResult in PR:\r\n![Result in PR](https://owo.whats-th.is/3b8xUUt.png)",
    "head_branch": "feature/add-paper-report-subcommand",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a925d9087c4d6d3769ad",
    "number": 7183,
    "body": "If the entity's location was changed between them being spawned and them being ticked for the 2nd time, it could cause a desync to occur.  This is because the entity's location would change on the server but would not be sent to the client since it was its first time ticking (tick counter is updated lower).\r\n\r\nIf the entity was moved within a 8x8x8 block radius it would send the location relatively, which since it was desynced would cause issues.\r\n\r\nReproduction Code:\r\n```java\r\n        Player player = event.getPlayer();\r\n        Creeper creeper = player.getWorld().spawn(player.getLocation(), Creeper.class);\r\n        creeper.setAI(false);\r\n        creeper.setInvulnerable(true);\r\n\r\n        new BukkitRunnable(){\r\n\r\n            @Override\r\n            public void run() {\r\n                Location location = player.getEyeLocation();\r\n                location.add(5, 0, 3);\r\n\r\n                player.spawnParticle(Particle.BLOCK_MARKER, location, 1, Bukkit.createBlockData(Material.BAMBOO));\r\n                creeper.teleport(location);\r\n            }\r\n        }.runTaskTimer(this, 1, 1);\r\n```\r\nDemonstration:\r\nhttps://user-images.githubusercontent.com/23108066/147318951-ba26be60-af5f-4e0a-9fa8-fa91005e3b29.mp4\r\n- In this example, I used the teleport command to force the creeper's location to be resent exactly.\r\n\r\nFix:\r\nhttps://user-images.githubusercontent.com/23108066/147318803-ac837eb3-c5f1-448b-9b1f-ae1b6c8283bd.mp4\r\n\r\n\r\nThis bug affects latest paper + spigot.\r\n\r\nFixes: https://github.com/PaperMC/Paper/issues/5939",
    "head_branch": "fix-entity-desync",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix desync on teleporting entity on first tick (#7183)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a926d9087c4d6d3769ae",
    "number": 7181,
    "body": "I'm adding this to solve https://github.com/EngineHub/CraftBook/issues/221#issuecomment-597388101 for CraftBook, but these methods can be valuable to many other plugins.\r\n\r\nExample use-case is `canSmelt` would replace all [this](https://github.com/EngineHub/CraftBook/blob/f3c9a57d3fca4054c166fb0104a8a671bfca1c8b/src/main/java/com/sk89q/craftbook/util/ItemUtil.java#L462-L636), and `isFuel` would replace all [this](https://github.com/EngineHub/CraftBook/blob/f3c9a57d3fca4054c166fb0104a8a671bfca1c8b/src/main/java/com/sk89q/craftbook/util/ItemUtil.java#L692-L763) and would add the ability for recipes added via API and data packs to work correctly.\r\n\r\nCC: @me4502 ;)",
    "head_branch": "furnace-stuffs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expose isFuel and canSmelt methods to FurnaceInventory (#7181)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a927d9087c4d6d3769af",
    "number": 7179,
    "body": null,
    "head_branch": "uncaught-handlers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add uncaught exception handler using logger to usages of ThreadFactoryBuilder (#7179)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a928d9087c4d6d3769b0",
    "number": 7178,
    "body": "among us",
    "head_branch": "fix/adventure-abi-break",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix ABI breakage for plainSerializer (#7178)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a929d9087c4d6d3769b1",
    "number": 7177,
    "body": "This PR will be initially created a draft so a discussion can be made.\r\n\r\n**Background**: \r\nTowards the end of the 1.16.5 era, Spigot introduced a new preview feature for runtime library downloading. The way this works is an author can specify libraries in their plugin.yml that will then be pulled from Maven Central on the startup of the plugin.\r\n\r\n**Problem**:\r\nThe current situation is that all libraries are pulled directly from Maven Central, which can be classified as a violation of their TOS (<https://repo1.maven.org/terms.html>) under \"excessive requests and bandwidth usage\" (other projects have already been yelled at by Maven Central for this).\r\n\r\nThe other problem here is that not everyone has the ability to deploy their artifacts to Maven Central. A lot of people will run their own nexus instance and host their artifacts there.\r\n\r\n**Solution**:\r\nThe original implementation for this PR was going to be to add a new section to the individual plugin.yml to allow developers to add extra repositories there, but after having a discussion with @zml2008 , the concept of it being potentially dangerous to allow developers to specify their own maven repositories came into play. Given that, we decided it should be up to the server owner themselves to specify any extra repositories to download from, therefore being implemented as a setting in the Paper configuration file.\r\n\r\n**Example**:\r\n\r\n```YAML\r\nsettings:\r\n  repos:\r\n  - https://papermc.io/repo/repository/maven-public/\r\n```\r\n",
    "head_branch": "server-repo-config",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a92ad9087c4d6d3769b2",
    "number": 7175,
    "body": "effect amplifier is stored as a signed byte -128 to 127, but then read into an int so an effect amplifier of 128 (stored as -128) is read as int -128 which is reset back to 0.\r\n\r\nAmplifier 0-127 stored as 0-127 (byte) and 127-255 stored as -128 to -1",
    "head_branch": "fix/effect-amplifiers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Load effect amplifiers greater than 127 correctly (#7175)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a92bd9087c4d6d3769b3",
    "number": 7174,
    "body": "I thought there were more tags to add after Machine's PR adding the copper tags but I guess not. These were the only ones I saw remaining.",
    "head_branch": "feature/deepslate-ore-material-tags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add material tags for deepslate ores (#7174)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a92cd9087c4d6d3769b4",
    "number": 7172,
    "body": "Updated Upstream (Bukkit/CraftBukkit/Spigot)\r\n\r\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n7b1856bf PR-278: Add API to check and set if horses are grazing hay\r\n0111185d PR-275: Add isJohnny / setJohnny for Vindicator\r\nea81107b PR-274: Add trap related methods to SkeletonHorse\r\needa7998 Make EnderDragon extend/implement Mob\r\n96509e04 PR-702: fromNodeTree is now private, this does not belong to the API\r\nead93bd8 PR-701: Option to configure the max width of a line in the config\r\nbecb47c4 PR-699: Add missing information to javadoc of ItemFlag#HIDE_POTION_EFFECTS\r\nf3a8a4ce SPIGOT-5766: Updates related to the villager trading changes introduced in MC 1.14.\r\n79cb3d7f PR-691: Add Material#getDefaultAttributeModifiers\r\n65ff9376 SPIGOT-6866: Fixed spaces a between comment indicator and actual comment\r\n8a747588 Restore protected members to YamlConfiguration\r\nca67e0f3 PR-693: Add proper javadocs for dolphins grace, bad omen, and hero of the village\r\n3e2dd2bc SPIGOT-3247: Comment support for YAML files\r\n\r\nCraftBukkit Changes:\r\nc93fcba4 PR-378: Add API to check and set if horses are grazing hay\r\n752fa511 PR-374: Add isJohnny / setJohnny for Vindicator\r\n19f2af06 PR-373: Add trap related methods to SkeletonHorse\r\nb8a25cbd Fix map colour not being marked as a handled tag\r\neea8d559 Make EnderDragon extend/implement Mob\r\n633ac8b3 Add self-riding check to Entity#addPassenger\r\n0ba6b901 SPIGOT-5766: The VillagerReplenishTradeEvent is now called when a villager restocks its trades.\r\nbdff7d56 SPIGOT-5627: Leads vanish when transporting leashed entities through a Nether portal\r\n319ca703 PR-978: Add Material#getDefaultAttributeModifiers\r\nc59b0ca1 SPIGOT-6859: PlayerInteractEntityEvent#setCancelled desync with Axolotls\r\n\r\nSpigot Changes:\r\n78a14d9d SPIGOT-6644: Previously inactive experience orbs may not target players",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a92dd9087c4d6d3769b5",
    "number": 7171,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/7169",
    "head_branch": "fix/knockback-event-for-tnt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fire entity knockback event for ownerless tnt (#7171)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a92ed9087c4d6d3769b6",
    "number": 7170,
    "body": "Closes https://github.com/PaperMC/Paper/issues/7168",
    "head_branch": "feature/knockback-direct-entity-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a92fd9087c4d6d3769b7",
    "number": 7167,
    "body": "This is one possible fix, another would be to change the generic in CraftRangedEntity from `T extends RangedAttackMob` to `T extends Mob & RangedAttackMob`, which would remove the need to add a method in RangedAttackMob. I think that would break any plugin that maybe did smth odd with CraftRangedEntity.",
    "head_branch": "fix/RangedEntity#setChargingAttack",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix remapping issue with RangedAttackMob and RangedEntity (#7167)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a931d9087c4d6d3769b8",
    "number": 7165,
    "body": "This was crashing my server. I'm not sure if it's correct to have two renamed files included with the patch file in my commit but this fixes the issue for me. It was caused by net.minecraft.world.level.block.CaveVinesBlock in a section modified by Paperspigot patch \"Fix kelp modifier changing growth for other crops\". ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a932d9087c4d6d3769b9",
    "number": 7163,
    "body": "Fixes #4908; supersedes #4924.\r\n\r\nThe approach I've taken this time around is finding any \"magic number\" used in range checking and exposing the value, allowing plugins to modify each per-player. Feedback is appreciated; the \"max block reach\" here isn't necessarily good API choice but working around existing design (and honestly the entire API could be shoved as unsafe and I'd be OK with it).",
    "head_branch": "playerreach-1.18.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a933d9087c4d6d3769ba",
    "number": 7162,
    "body": "One possible issue with this, is the client seems to send multiple interaction packets which cause the AddMob and EntityMetadata packets to be sent twice. I didn't see any issues on the client, so I'm not sure if that's a problem or not.\r\n\r\nBasically, the root issue is that the PlayerInteractEntityEvent can be cancelled but the client will still remove the entity. The 56parts of the if statement are meant to be all the checks needed to see the client will think the entity should be removed.\r\n\r\nThis certainly seems very much of a *meh* solution, but I'm not sure how else to do it.",
    "head_branch": "fix/bucketable-entity-interact-cancellation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a934d9087c4d6d3769bb",
    "number": 7157,
    "body": null,
    "head_branch": "ver/1.15.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Log4J (1.15.2) (#7157)\n\n* Update Log4j\r\n\r\n* update log4j (again)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a935d9087c4d6d3769bc",
    "number": 7156,
    "body": null,
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Log4J (1.14.4) (#7156)\n\n* Update Log4j\r\n\r\n* update log4j (again)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a936d9087c4d6d3769bd",
    "number": 7155,
    "body": null,
    "head_branch": "ver/1.13.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Log4J (1.13.2) (#7155)\n\n* Update Log4j\r\n\r\n* update log4j (again)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a937d9087c4d6d3769be",
    "number": 7154,
    "body": null,
    "head_branch": "ver/1.12.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Log4J (1.12.2) (#7154)\n\n* Update Log4j\r\n\r\n* update log4j (again)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a938d9087c4d6d3769bf",
    "number": 7153,
    "body": null,
    "head_branch": "ver/1.11.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Log4J (1.11.2) (#7153)\n\n* Update Upstream (Craftbukkit)\r\n\r\n* update log4j"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a939d9087c4d6d3769c0",
    "number": 7152,
    "body": null,
    "head_branch": "ver/1.10.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Log4J (1.10.2) (#7152)\n\n* Update Upstream (Craftbukkit)\r\n\r\n* update log4j"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a93ad9087c4d6d3769c1",
    "number": 7151,
    "body": null,
    "head_branch": "ver/1.9.4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Log4J (1.9.4) (#7151)\n\n* Update Upstream (Craftbukkit)\r\n\r\n* update log4j"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a93bd9087c4d6d3769c2",
    "number": 7150,
    "body": null,
    "head_branch": "ver/1.8.8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Log4J (1.8.8) (#7150)\n\n* Update Upstream (Craftbukkit)\r\n\r\n* update log4j"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a93cd9087c4d6d3769c3",
    "number": 7141,
    "body": null,
    "head_branch": "feature/copper-block-tags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add material tags for copper blocks (#7141)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a93dd9087c4d6d3769c4",
    "number": 7135,
    "body": "Somehow a successor for https://github.com/PaperMC/Paper/blob/master/patches/removed/1.18/No%20longer%20needed/0170-Make-max-squid-spawn-height-configurable.patch",
    "head_branch": "configurable-water-animal-spawn-height",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make water animal spawn height configurable (#7135)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a93ed9087c4d6d3769c5",
    "number": 7134,
    "body": "When a player breaks a fluid-logged block, the fluid remains. This is not currently the case for breakNaturally. I think this isn't a breaking change cause the method is **supposed** to simulate to the best it can, a block being broken by a player.",
    "head_branch": "fix/breakNaturally-fluid-logged",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix breakNaturally for fluid-logged blocks (#7134)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a93fd9087c4d6d3769c6",
    "number": 7132,
    "body": "add util comments ",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a940d9087c4d6d3769c7",
    "number": 7129,
    "body": "So people can revert this to how it was before 1.18\r\nhttps://github.com/PaperMC/PaperDocs/pull/138\r\n\r\nNot using Math.max so it's obvious 0 is the Vanilla default when looking at code, used when the config is set to -1",
    "head_branch": "pr/monster-spawning",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Configurable max block light for monster spawning (#7129)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a941d9087c4d6d3769c8",
    "number": 7127,
    "body": "Fixes #7123\r\n\r\nThis almost certainly goes in an earlier patch, maybe Adventure, not sure.\r\n\r\nBut its my understanding that the game profile name has been used in quit msgs for ever, hence the paper.yml setting to use display names, but that is only the \"bukkit\" display name, not the team display name formatted with team prefixes, colors, etc. So I think if we want to preserve the original behavior, the `use-display-name-in-quit-message` setting should be changed from a boolean to a multi-option setting, with options, NAME, BUKKIT_DISPLAY_NAME, and TEAM_DISPLAY_NAME or something like that.",
    "head_branch": "fix/display-name-quit-msg",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use team display name for quit message (#7127)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a942d9087c4d6d3769c9",
    "number": 7120,
    "body": "Closes #7119\r\n\r\nI clarified the javadocs that should make it clear this won't affect wither skeletons since they are naturally immune to fire.",
    "head_branch": "feature/stray-burning-in-day-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move setShouldBurnInDay to AbstractSkeleton (#7120)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a943d9087c4d6d3769ca",
    "number": 7118,
    "body": "Since the 2.15 update of log4j2, the apache team improved security against log4shell further in their new release 2.16.0. With new ways of people using the exploit, we need to keep up to date with this dependency.\r\nI recommend this version update and it shouldn't cause any new issues or regressions for Paper and forks.\r\n\r\nThe release notes are found here: https://logging.apache.org/log4j/2.x/changes-report.html#a2.16.0",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a944d9087c4d6d3769cb",
    "number": 7116,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n031731e6 Dependency upgrades\r\n0c707542 SPIGOT-6789: Improve resource pack related API\r\n5dca4a4b SPIGOT-6836: Add more API methods in MerchantRecipe\r\nb6e3b0f5 Upgrade to SnakeYAML 1.30 release\r\n\r\nCraftBukkit Changes:\r\n2a2caa7e Dependency upgrades\r\n439c685f SPIGOT-6789: Improve resource pack related API\r\n86c91bab SPIGOT-6836: Add more API methods in MerchantRecipe\r\nf49ffa7a SPIGOT-6778: Block#beakNaturally doesn't drop items in chests\r\n41832ce7 SPIGOT-6843: Wrong PLAINS biome during custom chunk generation\r\ne36f7599 SPIGOT-6852: BlockReceiveGameEvent#getBlock returning wrong block\r\n\r\nSpigot Changes:\r\n8965a502 Rebuild patches",
    "head_branch": "update/upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#7116)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a945d9087c4d6d3769cc",
    "number": 7115,
    "body": "There's a huge increase on startup memory footprint after updating to 1.18. Investigation shows that `net.minecraft.Util#sequence` allocates O(n^2) memory on n-size list.\r\n\r\nAfter some rough testing, my optimization can reduce at least 500mb startup RAM usage, as well as a slightly increased chunk loading speed.\r\n\r\nAllocation record:\r\n![allocate](https://user-images.githubusercontent.com/21029868/145935592-1ca07eaa-13e3-45f6-8778-eea7e827683e.png)\r\n\r\nOriginal implementation:\r\n![orig](https://user-images.githubusercontent.com/21029868/145935628-de377aeb-8ce8-4cfe-889e-cc335972d882.png)\r\n\r\nOptimization:\r\n![opti](https://user-images.githubusercontent.com/21029868/145935634-e8c316ac-5dd2-4b51-94e3-493fe40dcf55.png)\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimize Util#sequence (#7115)\n\nBasically the same diff is already in Vanilla 22w06a, so might as well merge this now/have a conflict to know to remove the stream they added"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a946d9087c4d6d3769cd",
    "number": 7112,
    "body": "Allow plugins to listen to VehicleCollisionEvent for both blocks and entities",
    "head_branch": "feature/VehicleCollisionEvent-handler-list",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move VehicleCollisionEvent HandlerList up (#7112)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a948d9087c4d6d3769ce",
    "number": 7111,
    "body": "This fixes #7110 \r\n\r\nUnsure which patch to put this in, but I know it belongs in some existing patch.",
    "head_branch": "fix/BlockPistonRetractEvent-firing-twice",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix duplicated BlockPistonRetractEvent call (#7111)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a949d9087c4d6d3769cf",
    "number": 7108,
    "body": "Closes #6929 \r\n\r\nIf there is a expectation that this isn't saved, which isn't made clear anywhere in the javadocs, then this might be too big a break with existing behavior. It was always my expectation that methods like this WERE persisted to loads/unloads of the entity, but that might just be me.",
    "head_branch": "feature/setCanMobPickup-saving",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a949d9087c4d6d3769d0",
    "number": 7107,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a94bd9087c4d6d3769d1",
    "number": 7106,
    "body": "It seems some remnants of spigot's tick limiter (more specifically the config options and initializing them) were still in-place even though the actual usage of these tick limiters when ticking tile entities and entities was previously disabled. This PR simply fully removes that unnecessary code as it does nothing in Paper and the config option could cause some confusion with server owners as it no longer does anything.",
    "head_branch": "pr/fully-remove-spigot-tick-limiter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a94cd9087c4d6d3769d2",
    "number": 7105,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\ndad85171 SPIGOT-6851: removeRecipe not unregistering recipe ID",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit) (#7105)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a94dd9087c4d6d3769d3",
    "number": 7104,
    "body": "This PR adds a new config option in `paper.yml` (`settings.log-player-login-location`) that toggles coordinates being logged when a player logs onto the server.  This config could be useful to server owners who wish to protect the locations of player logins or in the case where the login location of players don't matter and only waste space in log files (like in the case of lobby servers).\r\n\r\nHere's an example of what that would look like in practice in the log files when a player logs in:\r\n\r\nConfig option being enabled (default):\r\n`username[/xxx.xxx.xxx.xxx:xxxxx] logged in with entity id 14494 at ([world]100, 63.0, -100)`\r\n\r\nConfig option being disabled:\r\n`username[/xxx.xxx.xxx.xxx:xxxxx] logged in with entity id 14494`",
    "head_branch": "pr/config-login-location",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a94ed9087c4d6d3769d4",
    "number": 7102,
    "body": "Exposes some dolphin things.\r\nDolphins have the ability to dry out and drown. It wasn't possible to retrieve the value for ``drying`` out, so this exposes that and some small other little values.\r\n\r\nIf a different name for the \"dryout\" behavior could be suggested that would be great, as \"moistness\" is a word I am not sure I should use here.\r\n\r\n\r\n\r\n",
    "head_branch": "dolphin-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Dolphin API (#7102)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a94fd9087c4d6d3769d5",
    "number": 7097,
    "body": "The Blender passed in here holds a WorldGenRegion which contains a list of surrounding chunks\r\n\r\ncloses #7094",
    "head_branch": "noisechunk-protochunk-leak",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix WorldGenRegion leak when converting pre-1.18 chunks (#7097)\n\nCo-authored-by: Nassim Jahnke <jahnke.nassim@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a950d9087c4d6d3769d6",
    "number": 7096,
    "body": "For some unknown reason this wrong code got triggered for the first time, reported over at\r\nhttps://github.com/aikar/commands/issues/353\r\n\r\nAs far as I can tell, this java version detection code has been broken forever. Anyway. Simple explanation on the issue is that it would detect java 17.0.1 as java 0 since the split would have 2 or more. It looks like this was written with the expectation that java.version wouldn't return these minor java versions.\r\n\r\nAnyway, here is my fix. Let me know if anyone thinks it needs tweaking.",
    "head_branch": "custom-timings-handler-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove java 8 and prior reflection code from CustomTimingsHandler (#7096)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a951d9087c4d6d3769d7",
    "number": 7093,
    "body": null,
    "head_branch": "chunksnapshot-improvements",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove codec usage in chunk snapshot creation (#7093)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a952d9087c4d6d3769d8",
    "number": 7090,
    "body": "Simple tweak which adds support for Adventure's Keyed interface for many classes like Material (since NamespacedKey already implements Key)",
    "head_branch": "feature/adventure-keyed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make org.bukkit.Keyed extend Adventure's Keyed (#7090)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a953d9087c4d6d3769d9",
    "number": 7089,
    "body": "![image](https://user-images.githubusercontent.com/23108066/145692920-ca2d41c7-2c28-4ca4-bc59-5d90abfed86f.png)\r\n\r\nThis isn't exposed in any form currently, as a result, this adds a new ``SchoolingFish`` class which a couple of fish implement.",
    "head_branch": "fish-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Schoolable Fish API (#7089)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a954d9087c4d6d3769da",
    "number": 7086,
    "body": "Added the official URL to [IntelliJ IDEA]() in the `README.md` file.\r\n\r\n```diff\r\n+[JetBrains](https://www.jetbrains.com/), creators of the [IntelliJ IDEA](https://www.jetbrains.com/idea/)\r\n-[JetBrains](https://www.jetbrains.com/), creators of the IntelliJ IDEA\r\n```",
    "head_branch": "fba",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a955d9087c4d6d3769db",
    "number": 7085,
    "body": "This API is a bit niche... but it does have use cases especially for trying to implement mounting with full WASD controls.\r\nThis basically exposes the raw movement directions that entities use when moving in a direction.\r\n\r\nCertain entities can move sideways, for example, skeletons.\r\nHowever, when these values are not updated they are still ticked and it causes them to get smaller and smaller\r\n![image](https://user-images.githubusercontent.com/23108066/145686027-660ee3fd-72f7-45f3-82b7-1af5529e2289.png)\r\n\r\n\r\nI would like opinions on how to document this.\r\n\r\n\r\n",
    "head_branch": "player-direction",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Entity Movement Direction API (#7085)\n\nThis allows you to get player movement when riding vehicles, etc."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a956d9087c4d6d3769dc",
    "number": 7084,
    "body": "Original source: https://github.com/RedeObscurity/Paper\r\nFrom: oRyansz_#5074",
    "head_branch": "ver/1.8.8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a957d9087c4d6d3769dd",
    "number": 7083,
    "body": "1.18 allows palette arrays to have different lengths than 4096, so I figured it'd make sense to move the cached palette array into the strategy/provider.\r\n\r\nCCing @PaulBGD since he made this patch and knows a lot more about chunk palettes than I do.",
    "head_branch": "1.18/cache-palette-array",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a958d9087c4d6d3769de",
    "number": 7081,
    "body": "GameMode's really have two associated translation keys, a longer form (one that includes the \"Mode\" word at the end) and a shorter form. The short form is only used on the client, so I opted for the long format to be default via the `Translatable` interface, but added two methods for clarity.",
    "head_branch": "feature/gamemode-translation-keys",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add translation keys to GameMode enum (#7081)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a959d9087c4d6d3769df",
    "number": 7080,
    "body": "fix-void-trade",
    "head_branch": "ver/1.17.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a95ad9087c4d6d3769e0",
    "number": 7078,
    "body": null,
    "head_branch": "readme-forget-again",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a95bd9087c4d6d3769e1",
    "number": 7076,
    "body": null,
    "head_branch": "dev/1.18.1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update to 1.18.1 (#7076)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a95cd9087c4d6d3769e2",
    "number": 7072,
    "body": null,
    "head_branch": "ver/1.17.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Log4J (#7072)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a95dd9087c4d6d3769e3",
    "number": 7071,
    "body": null,
    "head_branch": "ver/1.16.5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Log4J off snapshot (#7071)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a95ed9087c4d6d3769e4",
    "number": 7069,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Log4J (#7069)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a95fd9087c4d6d3769e5",
    "number": 7068,
    "body": "In 1.17, the deserializeEntity method in UnsafeValues used the dataconverter system over the builtin datafixer. Until the failing cb tests can be addressed using the new (since 1.18-pre5 for DataConverter) hooks, probably should restore that same behavior here.",
    "head_branch": "fix/dataconverter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a960d9087c4d6d3769e6",
    "number": 7061,
    "body": "Allows you to play with some of the animations that pandas have.\r\n\r\nSuch as...\r\nSitting\r\n![image](https://user-images.githubusercontent.com/23108066/145124413-c1046835-81ef-4a9a-a85e-79a449aa5341.png)\r\nOn back\r\n![image](https://user-images.githubusercontent.com/23108066/145124608-2c7f2db1-7047-4bac-945d-43da12d7c0f9.png)\r\nRolling\r\nhttps://user-images.githubusercontent.com/23108066/145124804-de6c8fb9-b9b2-4da8-818a-950e9699a110.mp4\r\nand more!\r\n\r\nCurrently sneezing has a tick and boolean statement, as I am not sure this is supported, but negative numbers work fine when \"sneezing\"... IDK if this behavior should be kept or not but it's funny.\r\nhttps://user-images.githubusercontent.com/23108066/145125032-048fe4e4-a4a5-4f3e-b536-58b92bdd1e93.mp4\r\n\r\n",
    "head_branch": "panda-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expand Panda API (#7061)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a961d9087c4d6d3769e7",
    "number": 7058,
    "body": "*Edit:\r\nSince the EntityKnockbackByEntityEvent can't be reused on non-living entities due to being implemented with the use of the LivingEntity interface, this PR adds a new EntityPushedByEntityEvent that does get called on collision pushes as well as pushes caused by an entity attack. These two cases can be distinguished by the PushReason enum.  Closes issue #5886.\r\n\r\nThis is my first time working with patches, so I have no idea if I did it correctly. Please tell me if I did something wrong, and I will try to fix it as fast as I can.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a962d9087c4d6d3769e8",
    "number": 7055,
    "body": "`setContents` requires non null ItemStacks, so, if you want to restore an inventory's content, it is kinda messy:\r\n```kotlin\r\nval inventoryContents = player.inventory.contents // Array<ItemStack?>\r\nplayer.inventory.setContents(inventoryContents) // doesn't work because it requires a Array<ItemStack>\r\nplayer.inventory.setContents(inventoryContents.map { it ?: ItemStack(Material.AIR) }.toTypedArray())\r\n```\r\n\r\nThis PR changes `setContents(...)` to match the `getContents()` return type.\r\n\r\nHere's the discussion about this on Paper's Discord server: https://canary.discord.com/channels/289587909051416579/555462289851940864/917552139650351144",
    "head_branch": "fix/setcontents-nullability",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Fix multiple ItemStack array nullability mistakes (#7055)\n\nCo-authored-by: Jake Potrebic <jake.m.potrebic@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a963d9087c4d6d3769e9",
    "number": 7053,
    "body": "* Mob spawn range: trackers have been updated to use Spigot's mob spawn range instead of MOB_SPAWN_RANGE (static value of 8)\r\n* Mob spawn range is still limited to 8 chunks max, but now we either limit it by the view distance or the simulation distance, the greatest of both\r\n* Trackers that used view distance have been replaced with simulation distance (such as ticking blocks and entities) as we would only iterate through more chunks without any benefit\r\n* Chunk ticking now uses the maximum range between mob spawn and chunk ticking (which uses simulation distance), it'll check only one condition and assume the other one\r\n  - for example, if mob spawn > simulation distance, we will iterate every chunk in mob spawn range, but we will only check if we should tick on those chunks\r\n  - if mob spawn < simulation distance, we will iterate every chunk in simulation distance, but we will only check if we should spawn mobs on those chunks\r\n* Entity activation is already updated by Spigot's ActivationRange, which is limited by simulation distance\r\n* Entity ticking already checks chunk's ticking tracker",
    "head_branch": "fix-sim-dist-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a965d9087c4d6d3769ea",
    "number": 7052,
    "body": "See [this diff](https://github.com/PaperMC/Paper/commit/e9954ed32acc79784c60634b03067b9ae25228fb#diff-1ec43bda00eb892dce7d5d3e56deab50f887ce98b3c575c91b5f9c5a9ea0a920)\r\nThe line/column numbers were dropped putting the processEnchantOrder in the wrong place.\r\n\r\n",
    "head_branch": "fix/patch-update-error",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix mis-placed processEnchantOrder from 1.18 update (#7052)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a966d9087c4d6d3769eb",
    "number": 7050,
    "body": "Previously some block ticking was occurring outside of simulation distance and tickChunks was called only for entity ticking chunks, which is 1 chunk radius lower than block ticking chunks.\r\n\r\nAlso, I renamed viewDistance to distance on AreaMap, but now I don't think it is necessary. I am not very good with patches and git, so I don't know how to merge this and upstream/master since this PR breaks some patches (I used rebuild patches).\r\n\r\nThe git commit message about low TPS was fixed by allocating more ram (who knew, Xmx=1GB is not enough for 32 view distance even for debugging!)",
    "head_branch": "fix-sim-dist",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a966d9087c4d6d3769ec",
    "number": 7049,
    "body": "I don't believe there is a reason to calculate distance here. We should discard the entity since there is no valid player on the level close enough to keep the entity alive.",
    "head_branch": "despawn-optimization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a967d9087c4d6d3769ed",
    "number": 7048,
    "body": "It is used every random tick and mob spawn for map retrieval. Over a long period of time, it starts to add up on spark. Memory impact is small as there is only a few game rules.",
    "head_branch": "gamerule-hashcode",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a969d9087c4d6d3769ee",
    "number": 7047,
    "body": "Entity types IDs in the Bukkit API rarely match the internal entity type IDs in the NMS. This will allow for plugins that make use of packets to no longer need reflection or Burger to get the proper entity type IDs for the server's version.",
    "head_branch": "PR-Expose-Entity-Type-Protocol-IDs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a96ad9087c4d6d3769ef",
    "number": 7046,
    "body": "Reverts PaperMC/Paper#6918",
    "head_branch": "revert-6918-pr-queue-action-2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[ci skip] Revert \"Create workflow to add new PRs to the PR Queue project (#6918)\" (#7046)\n\nThis reverts commit b8d486cbc4825d8bcb4d98c170f579571ae86bc7."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a96bd9087c4d6d3769f0",
    "number": 7045,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nffd8b289 PR-687: Fix NPE from previous commits\r\n\r\nCraftBukkit Changes:\r\n3c2af1b7 SPIGOT-6831: Fix llama strength crash",
    "head_branch": "update/upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#7045)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nffd8b289 PR-687: Fix NPE from previous commits\r\n\r\nCraftBukkit Changes:\r\n3c2af1b7 SPIGOT-6831: Fix llama strength crash"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a96cd9087c4d6d3769f1",
    "number": 7044,
    "body": "Fixes a memory leak with POIs, can be noticed after pregenning for an extended period of time",
    "head_branch": "1.18/actually-unload-poi-data",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Port Actually unload POI data from Tuinity 1.16 (#7044)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a96dd9087c4d6d3769f2",
    "number": 7042,
    "body": "Not sure if this change needs to go through, but it's just a one-line change. \r\n\r\nIntellij always marks this field as not able to be null, and although it's not null when the entity is alive it can be null when it's dead. Generally just a bit misleading.",
    "head_branch": "be-nice-intellij",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Add nullable annotation to field (#7042)\n\nCo-authored-by: Riley Park <riley.park@meino.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a96ed9087c4d6d3769f3",
    "number": 7041,
    "body": "In some cases, when an entity is resent due to people being able to do funky things in the API it doesn't resend the entire entity properly.\r\n\r\nFixes\r\n- ~~Axlotls disappearing when trying to cancel interact event and clicking on them with water bucket (they don't extend AbstractFish, but they do implement Bucketable)~~\r\n- Bucketed entities not sending all their data when pickup is cancelled (such as passengers)\r\n\r\n\r\nI also renamed the base patch to handle a variety of different scenarios related to entities not being sent correctly, but set myself as co author (I am not sure if I am suppoed to, but I don't want to \"steal\" the patch).",
    "head_branch": "properly-resend-entity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Properly resend entities (#7041)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a96fd9087c4d6d3769f4",
    "number": 7040,
    "body": null,
    "head_branch": "PaperMC-master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a970d9087c4d6d3769f5",
    "number": 7039,
    "body": "… patch and methods to make more sense with Mojang mappings",
    "head_branch": "null-section-check",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix empty/null chunk section check in LevelChunk#getBlockData, rename… (#7039)\n\n… patch and methods to make more sense with Mojang mappings"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a971d9087c4d6d3769f6",
    "number": 7038,
    "body": "This patch seemed to no longer work exactly anymore, as at least the behavior of filtering is no longer in this patch.\r\n\r\nThis readds it, and also instead of completely making blocks like command blocks turn to stone instead just wipe all tile entity data (opinion wanted on this).\r\n\r\nOther nbt tags to remove can be suggested!",
    "head_branch": "readd-patch-functionality",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a972d9087c4d6d3769f7",
    "number": 7037,
    "body": "This gives the ability to disable falling blocks from being able to expire automatically.\r\nThis also saves with nbt under ``DisableAutoExpire``, although I am not sure this behavior is needed.",
    "head_branch": "forever-falling",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "FallingBlock auto expire setting (#7037)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a973d9087c4d6d3769f8",
    "number": 7036,
    "body": null,
    "head_branch": "fix/slime-setSize-javadocs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Clarify setSize consequences for Slimes (#7036)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a974d9087c4d6d3769f9",
    "number": 7035,
    "body": "video: https://imgur.com/a/wr3p77U\r\n\r\nThis pr fixes the client difficulty sync issue.",
    "head_branch": "fix/difficulty-sync",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix client world difficulty sync issue (#7035)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a975d9087c4d6d3769fa",
    "number": 7034,
    "body": "I had to re-order it, cause the hunk depended on being after the optimise chunk iteration patch.",
    "head_branch": "fix/mid-tick-tasks-missing-hunk",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add dropped hunk from mid-tick tasks (#7034)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a976d9087c4d6d3769fb",
    "number": 7033,
    "body": "This PR ports a slightly simplified version of [craftbukkit#900](https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/pull-requests/900) to 1.18. As described in the Spigot PR,\r\nSpigot synchronizes the position of the vehicle and the player. However, these locations may not\r\nalways match up. Later down the line, the player position gets set to the correct position, and the player\r\ngets the difference between the correct and incorrect value added to the statistic.\r\n\r\nThanks to @TDWilkinson99 for making such a detailed and easy to reproduce issue report ![](https://cdn.discordapp.com/emojis/844628007825965088.png?size=16)",
    "head_branch": "fix/rideable-entity-distance",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix riding distance statistics (#7021/SPIGOT-6475) (#7033)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a977d9087c4d6d3769fc",
    "number": 7031,
    "body": null,
    "head_branch": "1.18/vanilla-gen-delegation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update and deprecate Allow delegation to vanilla chunk gen (#7031)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a978d9087c4d6d3769fd",
    "number": 7030,
    "body": null,
    "head_branch": "1.18/highly-optimize-single-and-multi-aabb-voxelshapes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix #6779"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a979d9087c4d6d3769fe",
    "number": 7029,
    "body": null,
    "head_branch": "zerobitstorage-validation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove debug checks from ZeroBitStorage (#7029)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a97ad9087c4d6d3769ff",
    "number": 7027,
    "body": "As of 1.18, runtime mappings are not even valid to compile against, so no point in publishing this artifact",
    "head_branch": "remove-reobfjar-publication",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[ci skip] Remove reobfJar from paper-server publication (#7027)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a97bd9087c4d6d376a00",
    "number": 7026,
    "body": null,
    "head_branch": "ver/1.17.1-fix/possible-NPEs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix possible NPEs with trade events (#7026)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a97cd9087c4d6d376a01",
    "number": 7025,
    "body": "Just like in Entity#teleportTo the CraftEntity should be forwarded to the new nms Entity",
    "head_branch": "fix/craftentity-teleport-cmd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Forward CraftEntity in teleport command (#7025)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a97dd9087c4d6d376a02",
    "number": 7024,
    "body": "Includes the fix from #7023\r\n\r\nAxolotls were excluded from affected entities for water splash potions",
    "head_branch": "fix/water-potion-axolotls",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Include axolotls in affected entities for water splash potions (#7024)\n\nCo-authored-by: Jason Penilla <11360596+jpenilla@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a97ed9087c4d6d376a03",
    "number": 7023,
    "body": "This commit modifies the potion splash event fixes added by paper, as\r\nthey passed the affected entity as the entity to the damage source,\r\nmeaning the entity would technically attempt to hurt itself.\r\n\r\nThis change fixes this by now properly passing the splash potion to the\r\ndamage source, allowing custom damage logic like the enderman water\r\ndamage logic, to properly detect the entity that is attempting to hurt\r\nthe affected target.",
    "head_branch": "bugfix/thrown-potion-damage-source",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a97fd9087c4d6d376a04",
    "number": 7022,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\ne4358b82 PR-686: Fix contains for default section generating real sections\r\n0912ace4 SPIGOT-6830: Fix addDefaults with Configuration overrides child Sections in the defaults\r\n62144c8b Add Player#openSign API to edit a placed sign\r\n\r\nCraftBukkit Changes:\r\nf49e9d19 PR-971: Remove strong chunk reference in PDC\r\n27a27cdb Add Player#openSign API to edit a placed sign\r\n\r\n---\r\nUnfortunately, we can't do away with our two patches added the openSign functionality since we added it to HumanEntity and upstream added it to Player. Also, we didn't require the sign tile entity to be placed, and I'm not sure why it would have to be?",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#7022)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a980d9087c4d6d376a05",
    "number": 7020,
    "body": "I don't really know if this is important or not, I just noticed that during Entity#load when an entity is being teleported between worlds it creates a new instance of whatever CraftEntity in at least these 2 places only to have it overwritten with the entity being copied's bukkit entity a few lines later in Entity#teleportTo",
    "head_branch": "fix/useless-craftentity-instances",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a981d9087c4d6d376a06",
    "number": 7019,
    "body": "Resolves: https://github.com/PaperMC/Paper/issues/6479\r\n\r\nThis exposes the MovingPiston block entity into the api, which is used whenever a block is \"moving\" by a piston.",
    "head_branch": "expose-moving-piston",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Moving Piston API (#7019)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a982d9087c4d6d376a07",
    "number": 7012,
    "body": "Also add growth modifiers for twisting vines, weeping vines, cave vines,\r\nand glow berries\r\n\r\nfixes #6807\r\n\r\ncurrently the configs for kelp, and twisting/weeping/cave vines have the inverse effect to the rest of the growth modifier configs, #6806 aims to address that (will need a rebase however)",
    "head_branch": "fix-6807",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix kelp modifier changing growth for other crops (#7012)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a983d9087c4d6d376a08",
    "number": 7010,
    "body": "The method BlockEntity#saveWithoutMetadata applies the PersistentDataContainer tag to the given tag.\r\nA lot of block entities use this method in the getUpdateTag() method in order to receive certain data (like sign lines) on the client.\r\n\r\n\r\nThis removes this data sent to the client (this applies to lots of tile entities).\r\nI also am wondering, should I move this method into the patch that adds\r\n``` if (blockEntity instanceof net.minecraft.world.level.block.entity.SkullBlockEntity) { net.minecraft.world.level.block.entity.SkullBlockEntity.sanitizeTileEntityUUID(compoundTag); } // Paper```?\r\n\r\nAlthough this issue was fixed, I was told it was supposed to be kept. Not sure what to do here about that.\r\n\r\n",
    "head_branch": "sanitize-PBV",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Sanitize Sent BlockEntity NBT (#7010)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a984d9087c4d6d376a09",
    "number": 7009,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n1c9ca405 SPIGOT-6832: Further improve Player#getPing docs\r\n\r\nCraftBukkit Changes:\r\n1825cc0b Purge hidden entities on unload too",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#7009)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a985d9087c4d6d376a0a",
    "number": 7007,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n748ea518 SPIGOT-6833: Do not drop items into unrestricted world during world generation\r\n\r\n---\r\nFixes #7001",
    "head_branch": "upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit) (#7007)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a986d9087c4d6d376a0b",
    "number": 7002,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n4b5f9882 Fix when bundler directory is a symlink\r\n6f3509d1 Release POIs when villagers are removed by plugins",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit)\n\nUpstream has released updates that appear to apply and compile correctly.\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\n\nCraftBukkit Changes:\n4b5f9882 Fix when bundler directory is a symlink\n6f3509d1 Release POIs when villagers are removed by plugins"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a987d9087c4d6d376a0c",
    "number": 6997,
    "body": "Fixes #6996. This will migrate old Material values over to Mojang item ids (or keys, I suppose)\r\n\r\nThis also makes worlds use the values from the default config when there is no world-specific config.",
    "head_branch": "feature/material-enum-is-cringe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use mojang item ids for alternative item despawn rate (#6997)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a988d9087c4d6d376a0d",
    "number": 6994,
    "body": "Hello, i noticed that in 1.18 previously created portals lost their link. For example, if from a portal created earlier in Nether, which was normally linked in the upper world in 1.16.5 and 1.17.1, in 1.18 it leads many levels below. This does not work correctly in the reverse order, if you go from the upper world to the nether - it teleports to the wrong portal, which is much higher in Nether and was linked to another portal in the upper world. I’m not sure if this is a bug or a feature of the update.\r\nmy version with test:\r\nThis server is running Paper version git-Paper-19 (MC: 1.18) (Implementing API version 1.18-R0.1-SNAPSHOT) (Git: 892c292)\r\nsorry if wrong category was selected",
    "head_branch": "master",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a989d9087c4d6d376a0e",
    "number": 6992,
    "body": null,
    "head_branch": "build-updates",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Build updates (#6992)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a98ad9087c4d6d376a0f",
    "number": 6990,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nf023e77a SPIGOT-6825: MapFont#getWidth ignores §, but not the color-byte and semicolon following it\r\n\r\nCraftBukkit Changes:\r\n581df184 Better preserve broken PlayerMoveEvent behaviour\r\n2ccb6a9b SPIGOT-6828: <player> fell off a ladder/vines death message not supported\r\n\r\nSpigot Changes:\r\n3c40a6c9 Check for broken BungeeCord configurations",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#6990)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a98bd9087c4d6d376a10",
    "number": 6989,
    "body": "Prevents `java.lang.NullPointerException: Cannot invoke \"net.minecraft.world.item.ItemStack.getItem()\" because \"nmsItemStack\" is null` when calling `Block#getDestroySpeed(ItemStack itemStack)` for air.",
    "head_branch": "destroy-speed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix NPE when getting destroy speed of air (#6989)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a98cd9087c4d6d376a11",
    "number": 6986,
    "body": "Fixes #7208\r\nRelated to #6981\r\n\r\nThese 3 paper yml settings relied on outdated information about min/max y values which leads to valid values meaning \"disabled\". This refactors and adds migrations to have a separate boolean for toggling its enable status and a level for configuring the level.\r\n\r\nI tested the migrations both with values in the default world-settings section and the specific world settings. ",
    "head_branch": "fix/configs-for-y-levels",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix configs that relied on outdated min/max y levels (#6986)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a98dd9087c4d6d376a12",
    "number": 6985,
    "body": "This PR close https://github.com/PaperMC/Paper/issues/6942 with allow the user change the difficulty to more zombie types.\r\n\r\nDocs: PaperMC/PaperDocs#135",
    "head_branch": "feature/break-doors-zombie-remaster",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve configurable door difficulty (#6985)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a98ed9087c4d6d376a13",
    "number": 6980,
    "body": "Fixes #6979",
    "head_branch": "fix/metadata",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix itemmeta patch and move oversized fix into its own (#6980)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a98fd9087c4d6d376a14",
    "number": 6977,
    "body": null,
    "head_branch": "fix/stripping-metadata-issues",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't set last hand/armor lists to stripped items (#6977)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a990d9087c4d6d376a15",
    "number": 6976,
    "body": "Spigot removed the `max-entity-collisions` from their yml file, but paper adds it back and tries to migrate from the spigot.yml file. This, previous to this PR, caused a default to be set in the spigot yml which caused the value to be saved to the file. This prevents the adding of that default so as to not cause confusion with the same `max-entity-collisions` appearing in both `spigot.yml` and `paper.yml`.",
    "head_branch": "fix/populate-useless-spigot-yml-field",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't populate a useless spigot.yml field (#6976)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a991d9087c4d6d376a16",
    "number": 6974,
    "body": "I was attempting to edit an older patch to get the feel for doing so as I want to eventually assist with fixing bugs/creating new features. I ran into some weirdness when trying to rebuild my patches and that boiled down to the command listed for rebasing with autosquash [here](https://github.com/PaperMC/Paper/blob/master/CONTRIBUTING.md#automatic-method) acting weird on Windows(and maybe other systems). \r\n\r\nWhen rebasing using the command provided there I was ending up with Spigot patches in the end after rebuilding them. I posted in paper-dev and MM pointed out that it'd be caused by not rebasing with the `base`. Apparently, the order of the arguments needs to be quite specific otherwise it doesn't actually rebase using that tag. I tried changing the order to `git rebase -i --autosquash base` as told by MM and it worked properly and was only rebuilding Paper patches. \r\n\r\nNot too sure why it wasn't working properly but I thought of making a PR to update the contributing guide in case anyone else runs into that issue as it looks like the order doesn't affect Linux at all. \r\n\r\nThanks and I hope to make more PRs in the future :D ",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Changing the order of the rebase with autosquash command in the contributing.md (#6974)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a992d9087c4d6d376a17",
    "number": 6973,
    "body": "I couldn't figure out how exactly to reproduce the error, somehow an Empty itemstack makes it way into the equipment change handler. Best to skip them entirely I think.\r\n\r\nFixes https://paste.gg/p/anonymous/10bf03f791284577924a792e72bf0c8b",
    "head_branch": "fix/hide-itemmeta-empty-stacks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Skip stripping metadata from empty stacks (#6973)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a994d9087c4d6d376a18",
    "number": 6970,
    "body": null,
    "head_branch": "fix/world-crashing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing AT (#6970)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a995d9087c4d6d376a19",
    "number": 6968,
    "body": "This API is supposed to completely expose the \"Brain\" API that are used by certain entities such as goats, axolotls and villagers. However this api ALSO allows **manually ticking brains of all entities**. \r\n\r\nThis API is HEAVILY in WIP. I have created this pull request in order to collect as much feedback as I can here, so there is a lot of stuff like imports, access transformers, and paper comments I have to still do.\r\n\r\nSome things I need help with:\r\n- Registering Custom Types\r\n   - As of 1.18.2 you can no longer register stuff like this during runtime, how should I handle the registry freezing for registering custom memories/sensors/etc? \r\n   - Memories\r\n       - Memories that are serialized don't get loaded correctly, basically see the big comment in the Brain diff.\r\n- Is this level of exposure necessary? \r\n    - Although there is a lot you have access to here, I worry that this may become quite a huge burden due to the amount of hacks that this requires.\r\n\r\nI pushed a rough example in the test plugin, the pickled brain! See https://canary.discord.com/channels/289587909051416579/925530366192779286/989010753371652106 for the behavior.\r\nALL FEEDBACK WELCOME!\r\n\r\n![image](https://user-images.githubusercontent.com/23108066/175720830-35adc4f1-3daa-44d3-b99b-bf6304e99df4.png)\r\nIf you would like to use the brain debugger, use this fabric mod. This will allow the debugger to render.\r\n[enable-brain-debug-1.0-SNAPSHOT.zip](https://github.com/PaperMC/Paper/files/8982474/enable-brain-debug-1.0-SNAPSHOT.zip)\r\n\r\n",
    "head_branch": "brain-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a996d9087c4d6d376a1a",
    "number": 6966,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nfc0fe055 SPIGOT-6822: Ensure library loader has same parent as plugin loader\r\n\r\nCraftBukkit Changes:\r\na0087010 SPIGOT-6795: Fix BlockFertilizeEvent not being triggered for Azaleas\r\na46e7f18 SPIGOT-6820: VillagerCareerChangeEvent's ChangeReason is sometimes incorrect",
    "head_branch": "update/upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit) (#6966)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a997d9087c4d6d376a1b",
    "number": 6965,
    "body": "Fixes #6962",
    "head_branch": "fix/removing-recipes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix removing recipes (#6965)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a998d9087c4d6d376a1c",
    "number": 6961,
    "body": "This PR fixes an issue with VillagerCareerChangeEvent. This event has two possible ChangeReason (EMPLOYED, LOSING_JOB) but the second one is never fired.\r\n\r\nThis PR also have an open [spigot JIRA ticket](https://hub.spigotmc.org/jira/browse/SPIGOT-6820) so it is very likely to be deleted soon.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a999d9087c4d6d376a1d",
    "number": 6960,
    "body": "#6944 but targeted to master",
    "head_branch": "feature/generator-settings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Port flat bedrock (generator settings) to 1.18 (#6960)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a99ad9087c4d6d376a1e",
    "number": 6958,
    "body": null,
    "head_branch": "pr/something",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[ci skip] remove core team from catch-all codeowners (#6958)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a99bd9087c4d6d376a1f",
    "number": 6957,
    "body": null,
    "head_branch": "feature/improve_varints",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a99cd9087c4d6d376a20",
    "number": 6956,
    "body": "was auto closed because dev/1.18 branch was deleted\r\nSee #6246",
    "head_branch": "fix/upstream-commit-script",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] adjust upstreamCommit script to not mention paper issues (#6956)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a99dd9087c4d6d376a21",
    "number": 6955,
    "body": null,
    "head_branch": "dev/1.18",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update gradle.properties"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a99ed9087c4d6d376a22",
    "number": 6954,
    "body": "This PR fixes an issue with VillagerCareerChangeEvent. This event has two possible ChangeReason (EMPLOYED, LOSING_JOB) but the second one is never fired.\r\n\r\nThis PR also have an open [spigot JIRA ticket](https://hub.spigotmc.org/jira/browse/SPIGOT-6820) so it is very likely to be deleted soon.",
    "head_branch": "dev/1.18",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a99fd9087c4d6d376a23",
    "number": 6953,
    "body": "See: https://github.com/PaperMC/Paper/pull/6968",
    "head_branch": "dev/brain-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9a0d9087c4d6d376a24",
    "number": 6950,
    "body": null,
    "head_branch": "dev/1.18-patch/Optimise-chunk-tick-iteration",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update Optimise chunk tick iteration (#6950)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9a2d9087c4d6d376a25",
    "number": 6947,
    "body": null,
    "head_branch": "dev/1.18-anti-xray",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Port Anti-Xray to 1.18 (#6947)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9a3d9087c4d6d376a26",
    "number": 6946,
    "body": "kenny did a dum, the reobfuscated bundler jar is saved in `build/libs`, not `Paper-Server/build/libs`",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9a4d9087c4d6d376a27",
    "number": 6945,
    "body": "I did some crude testing and this did result in faster initial chunk sending. The creation of ClientboundLevelChunkWithLightPacket uses getVarIntSize quite a lot.",
    "head_branch": "dev/1.18",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9a5d9087c4d6d376a28",
    "number": 6944,
    "body": "1.18 changed bedrock generation around a bunch, so creating our own ConditionSource seemed like the cleanest solution.",
    "head_branch": "feature/generator-settings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9a6d9087c4d6d376a29",
    "number": 6943,
    "body": "Updates paperclip to 3.0.2-SNAPSHOT (fixes an NPE)\r\nupdates yarn mappings and server patches accordingly",
    "head_branch": "dev/1.18-deps-update",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update paperclip and yarn mappings (#6943)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9a7d9087c4d6d376a2a",
    "number": 6938,
    "body": null,
    "head_branch": "use-old-dataconverter-hooks",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use old dataconverter hooks (#6938)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9a8d9087c4d6d376a2b",
    "number": 6937,
    "body": " Fixes warnings on build",
    "head_branch": "accesscontroller",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove client-side code using deprecated for removal\n AccessController\n\nFixes warnings on build"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9a9d9087c4d6d376a2c",
    "number": 6933,
    "body": "the CollisionSpliterator was renamed (and reworked a little) to BlockCollisions which was the big thing preventing this patch from being merged.",
    "head_branch": "patch/optimize-collision-to-not-load-chunks",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9aad9087c4d6d376a2d",
    "number": 6931,
    "body": null,
    "head_branch": "ticklist-saving",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update ticklist saving"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9abd9087c4d6d376a2e",
    "number": 6930,
    "body": null,
    "head_branch": "dev/async-chunk-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "async chunk patch progress (#6930)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a9acd9087c4d6d376a2f",
    "number": 6927,
    "body": "These issues have been fixed by Mojang and Paper's fixes for them are no longer needed.\r\n[MC-187716](https://bugs.mojang.com/browse/MC-187716)\r\n[MC-29274](https://bugs.mojang.com/browse/MC-29274): The wither now targets EntityLiving instead of EntityInsentient.",
    "head_branch": "remove/fixes-mc-187716-mc-29274",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9add9087c4d6d376a30",
    "number": 6924,
    "body": "Fixes #6920\r\nAdds ArrayList to remember all thrown enderpearls (every time a pearl is thrown it is added to the list), every tick check whether to discard.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9aed9087c4d6d376a31",
    "number": 6922,
    "body": "A *very* small light engine optimization. If the sky light level is 15, the block light level will never be higher,\r\nsince Minecraft doesn't support light levels above 15. This will prevent an extra call to `getLightValue` for\r\nareas with sky access during the day. After some quick profiling on a flat world, this seems to reduce the time spent\r\non the `getBrightness` method by ~23%. The method is called every time a grass block randomly ticks\r\n(along with crop growth), so this will cause a very slight reduction in the tick duration for most servers.",
    "head_branch": "opt/rawbrightness",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't get block light level if the sky level is 15 (#6922)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9afd9087c4d6d376a32",
    "number": 6918,
    "body": null,
    "head_branch": "pr-queue-action-2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Create workflow to add new PRs to the PR Queue project (#6918)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9b0d9087c4d6d376a33",
    "number": 6917,
    "body": null,
    "head_branch": "pr-queue-action-2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9b1d9087c4d6d376a34",
    "number": 6916,
    "body": null,
    "head_branch": "pr-queue-action-2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9b2d9087c4d6d376a35",
    "number": 6915,
    "body": null,
    "head_branch": "pr-queue-action-2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9b3d9087c4d6d376a36",
    "number": 6914,
    "body": null,
    "head_branch": "pr-queue-action",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9b4d9087c4d6d376a37",
    "number": 6913,
    "body": null,
    "head_branch": "pr-queue-action",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9b5d9087c4d6d376a38",
    "number": 6904,
    "body": "This simply allows the CraftPlayer sendHealthUpdate method to be accessible via API in the Player interface. The method is useful if you have used setHealth and want to show the heart flash animation to a player to make it appear more natural. (if you don't know what I mean check out https://www.spigotmc.org/threads/make-players-hearts-flash-like-when-they-naturally-heal.484328/)\r\n\r\nI already use the CraftPlayer method in some plugins but it would be nice (and better) for it to be accessible through API. Example:\r\n```java\r\nplayer.setHealth(player.getHealth() + addition);\r\nplayer.sendHealthUpdate();\r\n```",
    "head_branch": "feature/player-health-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Player#sendHealthUpdate (#6904)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a9b6d9087c4d6d376a39",
    "number": 6903,
    "body": "Not put into the Paper loottable patch so it's easier to just yeet all these workarounds if they're ever fixed, also assuming more will have to be added",
    "head_branch": "fix/namespaceeee",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix more namespacedkey parsing (#6903)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9b7d9087c4d6d376a3a",
    "number": 6901,
    "body": null,
    "head_branch": "paperweight-1.2.0",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update paperweight to 1.2.0 (#6901)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9b8d9087c4d6d376a3b",
    "number": 6900,
    "body": "Let me know if I should change anything, first time contributing :)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9b9d9087c4d6d376a3c",
    "number": 6897,
    "body": "This adds a PlayerItemFrameChangeEvent for checking the adding, removing, and rotating items in item frames. Can be cancelled and also allows the modification of the item that will be placed. Closes #6783 \r\n\r\nTested with the following code, and with a redstone comparator connected to make sure redstone works as it should:\r\n```java\r\n@EventHandler\r\npublic void onChange(PlayerItemFrameChangeEvent event) {\r\n\tthis.getLogger().info(String.format(\"Action was: %s\", event.getAction()));\r\n\tif (event.getAction() == PlayerItemFrameChangeEvent.ItemFrameChangeAction.ROTATE) {\r\n\t\tevent.setItemStack(new ItemStack(Material.DIAMOND));\r\n\t\tevent.setCancelled(true); // Tested with both cancelled and not cancelled\r\n\t\treturn;\r\n\t}\r\n\r\n\tfinal ItemStack itemStack = event.getItemStack();\r\n\titemStack.setType(Material.DIRT);\r\n}\r\n```\r\n\r\nSorry for all the commits, kept finding tiny things to fix...",
    "head_branch": "feature/player-item-frame-change-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PlayerItemFrameChangeEvent (#6897)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a9bad9087c4d6d376a3d",
    "number": 6896,
    "body": "Ports #4083 to 1.17, OP's repo had branch protection rules prohibiting force pushes\r\n\r\nFixes #3616",
    "head_branch": "port/4083",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add config option to enable hopper occluding blocks (#6896)\n\nCo-authored-by: zombachu <zombachu@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9bbd9087c4d6d376a3e",
    "number": 6895,
    "body": "Ports #3818 to 1.17\r\n\r\nOn the 1.17 client, the hack to update the player's cursor is no longer needed.\r\n\r\nConfirmed to work using same test code on OP.",
    "head_branch": "port/3818",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix AnvilPrepareEvent not working with zero xp (#6895)\n\nCo-authored-by: Jan Tuck <jan@tuck.dk>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9bcd9087c4d6d376a3f",
    "number": 6892,
    "body": "The original code for getting a player's ip address is as follows:\r\n```java\r\nString s1 = \"local\";\r\n\r\nif (connection.getRemoteAddress() != null) {\r\n    s1 = connection.getRemoteAddress().toString();\r\n}\r\n```\r\n\r\nHowever, this s1 variable became unused and the following was used instead:\r\n```java\r\npostChunkLoadJoin( ... connection.getRemoteAddress().toString() ... )\r\n```\r\n\r\nThis new code does not check if the `connection.getRemoteAddress()` is null, and throws a NullPointerException when it is null.\r\n\r\nI have fixed this by replacing the new code with the original s1 variable. However, postChunkLoadJoin is run inside a lambda function, thus an effectively final copy of s1 was needed to be created.\r\n```java\r\nString finalS1 = s1;\r\npostChunkLoadJoin( ... finalS1 ... )\r\n```",
    "head_branch": "bugfix/remote-address-is-null",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9bdd9087c4d6d376a40",
    "number": 6891,
    "body": "Fixes #6838",
    "head_branch": "feature/per-world-ticks-per-spawn",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Per world ticks per spawn settings (#6891)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9bed9087c4d6d376a41",
    "number": 6890,
    "body": "Resolves https://github.com/PaperMC/Paper/issues/6887",
    "head_branch": "feature/sound-emitter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Extend Entity by Sound.Emitter (#6890)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a9bfd9087c4d6d376a42",
    "number": 6888,
    "body": "https://github.com/PaperMC/Paper/issues/6880#issuecomment-967618391",
    "head_branch": "fix-6880",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Partially fix #6880 (#6888)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9c0d9087c4d6d376a43",
    "number": 6886,
    "body": "If someone knows about a patch this can go it, pls post it. ",
    "head_branch": "feature/default-kick-component",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add default kick msg component (#6886)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a9c1d9087c4d6d376a44",
    "number": 6885,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n20716710 SPIGOT-6790: Mimic structure block behaviour and do not save STRUCTURE_VOID",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit) (#6885)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n20716710 SPIGOT-6790: Mimic structure block behaviour and do not save STRUCTURE_VOID"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9c2d9087c4d6d376a45",
    "number": 6882,
    "body": "* removes a ton of our custom code and replaces it with the metrics base lib\r\n* if we create the bstats config, we now send a bit of info to inform users that metrics are opt-out\r\n* I think this fixes the \"outdated\" versions chart on the bstats global page, as we never did send bukkitVersion and bukkitName",
    "head_branch": "rework-bstats",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9c3d9087c4d6d376a46",
    "number": 6881,
    "body": "I noticed a lot of diff in this patch that could easily be fixed by just changing some method param types to ServerLevel instead of Level. \r\n\r\nThe whole getSharedSpawnPos method was moved up to Level and didnt need to be at all.\r\n\r\nIf its an issue, I can add back a method with the same signature to Level that then gets overriden by the one in ServerLevel. who knows if some plugin calls it for some reason.",
    "head_branch": "cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "cleanup: Add hand to bucket events patch (#6881)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9c4d9087c4d6d376a47",
    "number": 6877,
    "body": "Prior to this commit, the tropical fish bucket meta would set the body\r\ncolor to the previous metas pattern colour when updating the pattern\r\ncolour.\r\n\r\nThis commit hence simply fixes this by using the proper body colour\r\nvalue when updating the pattern color.",
    "head_branch": "bugfix/tropical-fish-bucket-data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix setPatternColor on tropical fish bucket meta (#6877)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9c5d9087c4d6d376a48",
    "number": 6876,
    "body": "As the caching of already created `CraftBlockData`-instances makes `CraftBlockData#newData` overall faster and more efficient, it breaks the thread safety of `CraftBlockData#newData`.\r\n\r\nThis change for the patch aims to re-establish the thread safety for plugins calling `Bukkit#createBlockData` in an asynchronous context. As `CraftBlockData#newData` does not modify anything server-related the method should stay thread-safe. Calling the named method asynchronous is a well-known pattern for plugins like world generators, where they put the load for BlockData creation onto other threads to ensure a smooth experience. \r\n\r\nAlso relates to https://hub.spigotmc.org/jira/projects/SPIGOT/issues/SPIGOT-6784",
    "head_branch": "fix/blockDataCreationThreadSafety",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make BlockData creation thread safe again (#6876)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9c6d9087c4d6d376a49",
    "number": 6873,
    "body": "It was only possible to reset all scores for a specific entry, instead of resetting only specific scores.",
    "head_branch": "feature/score-reset",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add API for resetting a single score (#6873)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a9c7d9087c4d6d376a4a",
    "number": 6872,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\ncfd18bd0 SPIGOT-6436: Add Player#stopAllSounds\r\n\r\nCraftBukkit Changes:\r\nb58f4299 SPIGOT-6436: Add Player#stopAllSounds\r\neb191612 SPIGOT-6783: Items do not appear in custom anvil inventories\r\n376edf4f SPIGOT-6779: Fix LivingEntity#attack for Player entities\r\n747a73ec SPIGOT-6772: Use entity mailbox and re-schedule entities if they get unloaded",
    "head_branch": "pr/upstream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#6872)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\ncfd18bd0 SPIGOT-6436: Add Player#stopAllSounds\r\n\r\nCraftBukkit Changes:\r\nb58f4299 SPIGOT-6436: Add Player#stopAllSounds\r\neb191612 SPIGOT-6783: Items do not appear in custom anvil inventories\r\n376edf4f SPIGOT-6779: Fix LivingEntity#attack for Player entities\r\n747a73ec SPIGOT-6772: Use entity mailbox and re-schedule entities if they get unloaded"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a9c8d9087c4d6d376a4b",
    "number": 6871,
    "body": "I think some of the scoreboard OfflinePlayer methods were deprecated for no reason, since they still work just fine, and just add confusion to people just starting out with scoreboards. Also, it was missing methods for adding any entity to a scoreboard which is also valid, and not something I think people know about. Some of the method names have to be different because getScore(Entity) and getScore(OfflinePlayer) would conflict if someone tried to get the score for a Player which implements both OfflinePlayer and Entity. can be avoided if they cast to one, but I think thats not worth having all the method names the same.",
    "head_branch": "feature/improve-scoreboard-entries",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve scoreboard entries (#6871)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a9cad9087c4d6d376a4c",
    "number": 6870,
    "body": "isSolid isn't a good representation of what a entity can stand on, this should be better. For example, an Oak Sign block returns true for isSolid, which it doesnt collide with an entity at all. ",
    "head_branch": "feature/isCollidable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add isCollidable methods to various places (#6870)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a9cbd9087c4d6d376a4d",
    "number": 6869,
    "body": null,
    "head_branch": "fix/my-stupidity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move async catches back to where they were (#6869)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9ccd9087c4d6d376a4e",
    "number": 6868,
    "body": "1.1.14 was a bugfix for userdev, regardless it's best to keep Paper on the latest version",
    "head_branch": "paperweight-1.1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update paperweight to 1.1.14 (#6868)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9cdd9087c4d6d376a4f",
    "number": 6867,
    "body": null,
    "head_branch": "repos-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove redundant and unneeded repos, reorder repos (#6867)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a9ced9087c4d6d376a50",
    "number": 6866,
    "body": "Fixes #6802 and various other reobf mappings issues, as well as fixes source remapping for some anonymous classes.\r\nAll of the \"unknown issue\" reobf mappings patches are now no longer needed as paperweight generates the correct mapping.",
    "head_branch": "paperweight-1.1.13",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update paperweight to 1.1.13 (#6866)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9cfd9087c4d6d376a51",
    "number": 6864,
    "body": "Configuration option for showing sleep messages\r\n\r\nThe minecraft server now announces sleep progress, e.g. players already\r\nsleeping or the night being skipped, to all players on the server\r\nthrough a hotbar messages.\r\nWhile this vanilla behaviour works well in vanilla itself it is not\r\nalways appreciated, especially when hiding players.\r\n\r\nThis commit introduces a new sleep configuration node in the player\r\nworld configuration that allows server administrators to prevent the\r\nserver from sending either one of the messages to the clients connected.\r\n\r\nResolves: #6863\r\n\r\n---------------------------------------------------------------------------------------------------\r\n\r\nA <ins>**PR to the PaperDocs**</ins> will follow once this PR has been approved/finalized to the point of approval.\r\n\r\nAdditionally a few questions I ran into while making this:\r\n\r\n- Should events exist to properly remove individual players from the player count ? \r\n- Right now a parent node `sleep` was added as well as its only child node `messages`. This could be reduced to `sleep-messages`.",
    "head_branch": "feature/removable-sleep-announcements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9d0d9087c4d6d376a52",
    "number": 6859,
    "body": "Similar to how [BlockPlaceEvent#getBlockPlaced](https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/event/block/BlockPlaceEvent.html#getBlockPlaced()) is used for clarity",
    "head_branch": "add-playerdeathevent-clarity-method",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PlayerDeathEvent#getPlayer for clarity (#6859)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a9d1d9087c4d6d376a53",
    "number": 6855,
    "body": "Drowned do not have support for door breaking so setCanBreakDoors on a drowned wouldn't have any effect.",
    "head_branch": "feature/check-if-zombie-supports-door-breaking",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add API for checking if a zombie has the option to break doors (#6855)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a9d2d9087c4d6d376a54",
    "number": 6854,
    "body": "Addresses https://github.com/EngineHub/WorldEdit/issues/1924\r\n\r\nbreakNaturally previously wasn't calling the block's onRemove behavior, which includes dropping items in containers and more. I didn't put the logic inside CraftBlock#setTypeAndData because all the other calls to setTypeAndData shouldn't be calling this anyways, so I think having it as part of breakNaturally is fine.",
    "head_branch": "fix/breakNaturally",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Call onRemove logic for breakNaturally (#6854)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9d3d9087c4d6d376a55",
    "number": 6851,
    "body": null,
    "head_branch": "adventure-4.9.3",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update Adventure to 4.9.3 (#6851)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9d4d9087c4d6d376a56",
    "number": 6850,
    "body": "Fixes an issue where the Lure Enchantment reduction amount in the fishing calculations would make the timeUntilLured value go to 0 or into the negatives causing an infinite loop fixing an issue where if a server owner changes the max fishing wait time in their paper.yml to a value of 300/200/100 or less will break Lure 3/2/1+. This patch also fixes Lure 6+ with the default values. This will now simply put the time until the next catch to 1 tick instead of the infinite loop happening.\r\n\r\nFrom looking at the patch you may get confused about why aren't we checking the random generated timeUntilLured value just above, it's a little confusing but Minecraft in vanilla will sometimes get negative numbers from the lure reduction and will simply do another loop until it has a positive one, this patch only fixes the cases where a positive number can **never** show up causing the loop while keeping normal behaviour.",
    "head_branch": "fix-lure-infinite-loop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Lure infinite loop (#6850)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9d5d9087c4d6d376a57",
    "number": 6848,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n9b45fa2f #667: Allow setting BrewEvent results\r\n8c776ddc SPIGOT-6762: ChatPaginator.wordWrap only transfers one modifier\r\nda372966 SPIGOT-4590, SPIGOT-6769: Clarify DamageCause documentation\r\n\r\nCraftBukkit Changes:\r\ncef1fda3 #947: Add missing spawn eggs for SpawnEggMeta\r\neb9a0f34 #945: Allow setting BrewEvent results",
    "head_branch": "upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#6848)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n9b45fa2f #667: Allow setting BrewEvent results\r\n8c776ddc SPIGOT-6762: ChatPaginator.wordWrap only transfers one modifier\r\nda372966 SPIGOT-4590, SPIGOT-6769: Clarify DamageCause documentation\r\n\r\nCraftBukkit Changes:\r\ncef1fda3 #947: Add missing spawn eggs for SpawnEggMeta\r\neb9a0f34 #945: Allow setting BrewEvent results"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9d6d9087c4d6d376a58",
    "number": 6842,
    "body": "The javadoc mentions the method returning null if the pathfinding is done, but `int`'s can obviously never be null. A different solution would be to update the method to return an `Integer`, and null if the pathfinding is done, although that would break backwards compatibility.\r\n\r\nThanks to @andrew121410 for spotting this [on Discord](https://canary.discord.com/channels/289587909051416579/555462289851940864/903357214415290419).",
    "head_branch": "fix/incorrect-javadoc-for-pathfinding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Fix incorrect javadoc for Mob pathfinding API (#6842)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a9d7d9087c4d6d376a59",
    "number": 6841,
    "body": "Also use mapping-io instead of tiny-mappings-parser, and replace Guava immutable collections with JDK native ones.",
    "head_branch": "dedeuplicate-obfhelper-strings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Deduplicate strings in ObfHelper (#6841)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9d8d9087c4d6d376a5a",
    "number": 6837,
    "body": "Allows mob spawners to be disabled without adding a really high tick rate.\r\nUseful for:\r\n- Hubs/Lobby servers and creative servers that use/allow mob spawners to be used for decoration.\r\n- Plugins that take complete control over mob spawners and just cancel any and all mob spawner events, adding their own spawn system on top.\r\n\r\nI found that with plugins that disable all related events, spawners were taking upwards of 4-6% on a spawner heavy server even with a very high configured tick rate on timings reports and further inspection with Spark showed the cost was from the spawner server tick doing AABB checks and EntityTypes#create costing performance.\r\n\r\nI'll make a PaperDocs PR to mention this change if this gets approved/merged.",
    "head_branch": "allow-spawners-to-be-disabled",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow spawners to be disabled without adding a stupid high tick rate (#6837)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9d9d9087c4d6d376a5b",
    "number": 6836,
    "body": null,
    "head_branch": "resolve-apianddocs-during-execution",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Resolve apiAndDocs sources during Javadoc task execution rather than during configuration time (#6836)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9dad9087c4d6d376a5c",
    "number": 6833,
    "body": null,
    "head_branch": "feature/entity-powdered-snow-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Entity powdered snow API (#6833)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a9dbd9087c4d6d376a5d",
    "number": 6832,
    "body": "Closes #5380.",
    "head_branch": "dead-entity-teleport",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "don't attempt to teleport dead entities (#6832)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9dcd9087c4d6d376a5e",
    "number": 6831,
    "body": "* PiglinAbstract docs were incorrect for setConversionTime\r\n* converting skeletons to strays would spam EntityTransformEvent if the event was cancelled\r\n* converting piglins in the overworld had the same spam-event result\r\n* upstream used the wrong method when setting a skeletons conversion time",
    "head_branch": "fix/mob-conversions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix issues with mob conversion (#6831)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a9ddd9087c4d6d376a5f",
    "number": 6830,
    "body": "PigZapEvent extends EntityZapEvent, and the HandlerList was moved from PigZapEvent to EntityZapEvent so any EntityZapHandler was called twice on pigs getting struck by lightning",
    "head_branch": "fix/EntityZapEvent-fired-twice",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't fire EntityZapEvent twice (#6830)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9ded9087c4d6d376a60",
    "number": 6829,
    "body": "updates jline to 3.21.0, and TCA to 1.3.0\r\n\r\nThere is some considerations here given that now the ASM library is bundled with the mojang server, we could maybe go back to using the JNA version of jline, which, IIRC, worked better in some areas vs jline, I forget if there was another reason for switching to jline, given the years of terminals being terminals it's hard to remember what were the implications of all solutions available, windows being a common breaking ground here...\r\n\r\nmaybe want to perform the typical \"has it broken an environment we care about\" tests...\r\n\r\njar available here in the next few minutes: https://keybase.pub/electronicboy/builds/paper/versions/1.17.1/Paper-1.17.1-R0.1-SNAPSHOT-update-jline.jar\r\n\r\n",
    "head_branch": "update-jline",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update jline and TCA (#6829)\n\nCo-authored-by: Jason Penilla <11360596+jpenilla@users.noreply.github.com>\r\n\r\nupdates jline to 3.21.0, and TCA to 1.3.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9dfd9087c4d6d376a61",
    "number": 6826,
    "body": "Updated version of #3628\r\n\r\nhttps://user-images.githubusercontent.com/10731363/138611513-228d5683-0ff3-4632-8edf-bc0680b09dba.mp4\r\n\r\nhacky test code \r\n```java\r\n  private byte[] data = null;\r\n\r\n  @EventHandler(priority = EventPriority.MONITOR)\r\n  public void on(EntityDamageByEntityEvent event) {\r\n    if (event.getDamager() instanceof Player) {\r\n      data = Bukkit.getUnsafe().serializeEntity(event.getEntity());\r\n    }\r\n  }\r\n\r\n  @EventHandler()\r\n  public void on(ChatEvent event) {\r\n    if (data != null) {\r\n      Bukkit.getUnsafe().deserializeEntity(data, event.getPlayer().getWorld()).spawnAt(event.getPlayer().getLocation());\r\n    }\r\n  }\r\n```",
    "head_branch": "feat/entity-serialization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Raw Byte Entity Serialization (#6826)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a9e0d9087c4d6d376a62",
    "number": 6825,
    "body": "Bukkit is Bukkit and does not accept empty paths, while Vanilla does. This doesn't actually fix the underlying parsing problem, but properly returns null for (what Bukkit thinks) are invalid locations, instead of throwing an error\r\nFixes #6558\r\nCloses #6559",
    "head_branch": "fix/namespace",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix CraftNamespacedKey shenanigans (#6825)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9e1d9087c4d6d376a63",
    "number": 6823,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n58c2d3c7 SPIGOT-6771: Help command tab completion does not respect permissions\r\n\r\nCraftBukkit Changes:\r\nfd50041d SPIGOT-6768: Remove upper bound on setFreezeTicks\r\n\r\nSpigot Changes:\r\n38929296 SPIGOT-6767: Configurable Thunder Chance",
    "head_branch": "pr/upstream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#6823)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n58c2d3c7 SPIGOT-6771: Help command tab completion does not respect permissions\r\n\r\nCraftBukkit Changes:\r\nfd50041d SPIGOT-6768: Remove upper bound on setFreezeTicks\r\n\r\nSpigot Changes:\r\n38929296 SPIGOT-6767: Configurable Thunder Chance"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9e2d9087c4d6d376a64",
    "number": 6819,
    "body": "cc @MiniDigger https://github.com/PaperMC/Paper/pull/6474#issuecomment-904419334\r\n\r\nBuilt in caching reduces the build duration by ~87%, see https://github.com/NotMyFault/Paper/actions/runs/1375290878\r\n",
    "head_branch": "ci/master/supersed-6474",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "ci: Update gh actions with caching (#6819) [ci skip]\n\nCloses #6474"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a9e3d9087c4d6d376a65",
    "number": 6818,
    "body": "Ability to differentiate between explosions caused by beds and respawn anchors, or other explosions that just take place at a location where a non-air block is present.\r\n",
    "head_branch": "feature/exploded-block-state",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add exploded block state to BlockExplodeEvent (#6818)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a9e4d9087c4d6d376a66",
    "number": 6817,
    "body": "This is probably a most controversial change, due to the scope of the change and due to the fact that I heard upstream was taking a look into this. Currently this is a draft PR so we can discuss about whether this PR is even needed or critique the API (I probably could have done this better). I also have not fully replaced the old `Biome` enum yet or tested this. This might be a job for the maintainers, not for 2nd time contributors like me, so I won't be surprised if this does get closed. TL;DR this is my own idea of a custom biome API\r\n\r\n### Todo\r\n- [ ] Test this\r\n- [ ] Replace the `Biome` enum\r\n- [ ] I really want to do away with `BiomeManager` somehow",
    "head_branch": "biome_api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9e5d9087c4d6d376a67",
    "number": 6813,
    "body": "Only a method name fix, based in comment from the commit where is changes are implemented.\r\nhttps://github.com/PaperMC/Paper/commit/bb397ba74c034ffe5ae164d774a043cb7bca0472#r58405431",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix method name for Critical damage (#6813)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9e6d9087c4d6d376a68",
    "number": 6811,
    "body": "Superseds #6154\r\n\r\ncc @Proximyst ",
    "head_branch": "docs/master/java-16-note",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs: Update gradle instructions for Java 16 (#6811) [ci skip]\n\nCloses #6154."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9e7d9087c4d6d376a69",
    "number": 6810,
    "body": "Just found with a simple `\\s\\w\\(` regex search, probably more out there.",
    "head_branch": "fix/missing-mappings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added missing mappings (#6810)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9e8d9087c4d6d376a6a",
    "number": 6809,
    "body": null,
    "head_branch": "remove-unused-at",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "AT & Mapping fixes (#6809)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9e9d9087c4d6d376a6b",
    "number": 6808,
    "body": "Removed Sand Duplication FIX",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9ead9087c4d6d376a6c",
    "number": 6806,
    "body": "Fixes #6805",
    "head_branch": "fix/kelp-modifier",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix kelp modifier having reverse effect (#6806)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9ebd9087c4d6d376a6d",
    "number": 6804,
    "body": "As of minecraft 1.15.2's first pre-release potion effects no longer\r\ncompletely replace weaker once of the same potion effect type but rather\r\nbuild a list of overriding potion effects to preserve and eventually\r\nre-apply weaker potion effects that last longer than more powerful but\r\nmore shortlived overriding potion effects of the same type.\r\n\r\nThis replacement of such overriding potion effects simply removes the\r\nattribute modifier added by the potion effect based on a single uuid\r\ndefined by each potion effect type.\r\nAfter the removal, a new attribute modified is added that holds the\r\nupdated modifications based on the lower amplifier of the weaker potion\r\neffect.\r\nAs the removal of the stronger potion effect is purely based on the\r\nsingle uuid of each individual potion effect type the amplifier of the\r\nold effect is not needed to properly remove the effect and is sadly not\r\npassed to the removal logic in the first place.\r\n\r\nThis however fails for the absorption potion effect type, as it cannot\r\nmake use of the attribute modifier system and the single uuid concept\r\nused by other potion effect types.\r\nHence, prior to this commit, it simply calculates the amount of\r\nabsorption hearts granted by the amplifier of the potion effect and\r\nremoves these.\r\nAs the server however only provides the amplifier (more specifically the\r\nnew potion effect) to the update method once an overriding absorption\r\neffect is replaced, the removal only removes the amount of absorption\r\nhearts.\r\n\r\nThis patch combats this faulty behaviour by now properly passing the old\r\nand new mob effect (and their respective amplifier) through the update\r\nlogic of the living entity and mob effects.\r\nWhile this prevents the absorption effect from leaving the player with\r\nabsorption hearts after the effect completely expires, it did allow the\r\neffect to re-generate absorption hearts that were lost due to damage\r\nwhen replacing the overriding effect with the lower potion effect.\r\n\r\nThe patch introduces MobEffect#updateAttributeModifiers which is\r\nresponsible for performing the previously described logic of removing\r\nand applying attribute modifiers.\r\nThis method is then leveraged by the absorption mob effect to correctly\r\ncalculate the difference between the old and new amplifiers.\r\n\r\nResolves: https://bugs.mojang.com/browse/MC-182497\r\n\r\n\r\n-------------------------------------------------------------------\r\n\r\nNote, the consumer call in `MobEffect#tick` was moved up as the mob effect class does not offer an easy `copy` method to safely store the old mob effect before updating the effect values.",
    "head_branch": "bugfix/properly-remove-overridden-potion-effects",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9edd9087c4d6d376a6e",
    "number": 6798,
    "body": "Prior to this commit, the activation bounding box used for villagers was\r\ninflated using the 'entity-activation-range.villagers' for the x axis\r\nand 'entity-activation-range.water' for the z axis, causing villagers to\r\nuse the water mobs activation range on the z axis.\r\n\r\nThis commit now properly uses the 'entity-activation-range.villagers'\r\nvalue for both the x and z axis inflation for the villagers activation\r\nrange.\r\n\r\nResolves: #6797",
    "head_branch": "bugfix/villager-entity-activation-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Correctly inflate villager activation bounding box (#6798)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9eed9087c4d6d376a6f",
    "number": 6796,
    "body": "Not sure if the source is needed in the method, but I thought it might be neat to include.",
    "head_branch": "shear-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Shearable API (#6796)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a9efd9087c4d6d376a70",
    "number": 6795,
    "body": "This was wrongly deprecated because it was thought it did not include tile entities, however with some basic testing it certainly does support them.\r\nThe issue here is that the treetypes themselves don't use any generators that contain beehives, so you will never be able to encounter them via the api.\r\nFor looking at the logic, see AbstractTreeGrower. This part is not used in the API at all, but as you can see here it specifies the special tree type if there are nearby flowers.\r\n\r\nTree without beehive (used by api):\r\n```java\r\n public static final ConfiguredFeature<TreeConfiguration, ?> OAK = register(\"oak\", Feature.TREE.configured((new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(Features.States.OAK_LOG), new StraightTrunkPlacer(4, 2, 0), new SimpleStateProvider(Features.States.OAK_LEAVES), new SimpleStateProvider(Features.States.OAK_SAPLING), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1))).ignoreVines().build()));\r\n```\r\n\r\nTree WITH beehive (unused):\r\n```java\r\n public static final ConfiguredFeature<TreeConfiguration, ?> OAK_BEES_0002 = register(\"oak_bees_0002\", Feature.TREE.configured(OAK.config().withDecorators(ImmutableList.of(Features.Decorators.BEEHIVE_0002))));\r\n    public static final ConfiguredFeature<TreeConfiguration, ?> OAK_BEES_002 = register(\"oak_bees_002\", Feature.TREE.configured(OAK.config().withDecorators(ImmutableList.of(Features.Decorators.BEEHIVE_002))));\r\n    public static final ConfiguredFeature<TreeConfiguration, ?> OAK_BEES_005 = register(\"oak_bees_005\", Feature.TREE.configured(OAK.config().withDecorators(ImmutableList.of(Features.Decorators.BEEHIVE_005))));\r\n    public static final ConfiguredFeature<TreeConfiguration, ?> BIRCH_BEES_0002 = register(\"birch_bees_0002\", Feature.TREE.configured(BIRCH.config().withDecorators(ImmutableList.of(Features.Decorators.BEEHIVE_0002))));\r\n    public static final ConfiguredFeature<TreeConfiguration, ?> BIRCH_BEES_002 = register(\"birch_bees_002\", Feature.TREE.configured(BIRCH.config().withDecorators(ImmutableList.of(Features.Decorators.BEEHIVE_002))));\r\n    public static final ConfiguredFeature<TreeConfiguration, ?> BIRCH_BEES_005 = register(\"birch_bees_005\", Feature.TREE.configured(BIRCH.config().withDecorators(ImmutableList.of(Features.Decorators.BEEHIVE_005))));\r\n    public static final ConfiguredFeature<TreeConfiguration, ?> FANCY_OAK_BEES_0002 = register(\"fancy_oak_bees_0002\", Feature.TREE.configured(FANCY_OAK.config().withDecorators(ImmutableList.of(Features.Decorators.BEEHIVE_0002))));\r\n    public static final ConfiguredFeature<TreeConfiguration, ?> FANCY_OAK_BEES_002 = register(\"fancy_oak_bees_002\", Feature.TREE.configured(FANCY_OAK.config().withDecorators(ImmutableList.of(Features.Decorators.BEEHIVE_002))));\r\n```\r\n\r\nTested by making the api use OAK_BEES instead of OAK. ",
    "head_branch": "fix-bad-deprecation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9f0d9087c4d6d376a71",
    "number": 6794,
    "body": "This adds some bonemeal api with a blockstate predicate. I am aware there is already api to simulate bonemeal, but this offers the advantage of being able to chose which blocks actually get modified.",
    "head_branch": "bonemeal-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9f1d9087c4d6d376a72",
    "number": 6793,
    "body": null,
    "head_branch": "1.16.5/fix-cmds-in-datapacks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "backport: fix loading cmds in datapacks (#6793)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9f2d9087c4d6d376a73",
    "number": 6792,
    "body": "Backport #6789 to 1.16.5.",
    "head_branch": "hotfix/6055",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Backport \"Use correct LevelStem registry when loading default end/nether\" to 1.16.5 (#6792)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9f3d9087c4d6d376a74",
    "number": 6791,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\ne337669a SPIGOT-6756: Clarify drop items in BlockBreakEvent\r\n\r\nCraftBukkit Changes:\r\nf0f801e5 SPIGOT-5988: Bedspawn doesn't clear after dying when spawn is blocked\r\ne2ac9c6b SPIGOT-6758: Reset ItemSign#openSign when aborting the block placement early\r\nb8679313 SPIGOT-6760: Chest#getInventory only returns one half of a double chest when one or both halves are blocked\r\nfee3152b SPIGOT-6759: Chest#getInventory() no longer returns double chest inventories",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#6791)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9f4d9087c4d6d376a75",
    "number": 6790,
    "body": "I noticed some inconsistency in methods for BlockDatas. For any integer property, there should be a getMinimum*Value* method so long as the minimum value isn't 0, and always a getMaximum*Value* method. This was missing in a couple places.",
    "head_branch": "feature/improve-blockdata-consistency",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing block data mins and maxes (#6790)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a9f5d9087c4d6d376a76",
    "number": 6789,
    "body": "fixes #6055",
    "head_branch": "fix-6055",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use correct LevelStem registry when loading default end/nether (#6789)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9f6d9087c4d6d376a77",
    "number": 6785,
    "body": "Fixes #6778",
    "head_branch": "fix/sign-global-state",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9f7d9087c4d6d376a78",
    "number": 6782,
    "body": "As the internal lightning bolt representation already stores the player\r\ninstance that may have caused the lightning in the first place, through\r\ntridents, this commit expands the existing additions to the lightning\r\napi to expose the previously mentioned player instance that caused the\r\nlightning.\r\n\r\nResolves: #6781 ",
    "head_branch": "feature/lightning-player-source",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expose the potential player cause of a lightning (#6782)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a9f8d9087c4d6d376a79",
    "number": 6780,
    "body": null,
    "head_branch": "actually-update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix/improve the last upstream update (#6780)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9f9d9087c4d6d376a7a",
    "number": 6777,
    "body": "Ports #6244 to 1.16.5 before it was fixed upstream.",
    "head_branch": "fix-campfires-not-firing-EntityDamageByBlockEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9fad9087c4d6d376a7b",
    "number": 6776,
    "body": "This adds API to set the amount of safe fall distance for living entities",
    "head_branch": "SafeFallDistance",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9fbd9087c4d6d376a7c",
    "number": 6775,
    "body": "This adds API that exposes getter/setter for if a mob is left handed or not. Watch out for those left handed creepers! (yes, they're real)\r\n\r\n(yay! t-shirt time!)",
    "head_branch": "LeftHanded",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Left handed API (#6775)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a9fcd9087c4d6d376a7d",
    "number": 6774,
    "body": "This adds more API for advancements that have proven to be very useful over the years",
    "head_branch": "AdvancementAPI",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9fdd9087c4d6d376a7e",
    "number": 6773,
    "body": "This adds some useful API to Llamas, including two new events",
    "head_branch": "LlamaAPI",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623a9fed9087c4d6d376a7f",
    "number": 6772,
    "body": "This adds a lovely convenience method for creating an `ItemStack` of a mob's spawner egg from a mob's `EntityType`",
    "head_branch": "ItemMonsterEgg",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add ItemFactory#getMonsterEgg API (#6772)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623a9ffd9087c4d6d376a80",
    "number": 6771,
    "body": "Expands upon #4989 (cc @Machine-Maker) by:\r\n\r\n- Creating a general-purpose BlockDropResourcesEvent for all resources (items) dropped by a block (which, unlike BlockDropItemEvent, works for more than just players)\r\n- Making the previous BlockBreakBlockEvent extend this new event\r\n- Creating a new EntityBreakBlockEvent for item drops caused by an entity\r\n\r\nUse cases:\r\n\r\n- adding new item drops to blocks (making all leaves drop apples, for instance)\r\n- modifying the drops of crops from farming villagers\r\n- a lot more, probably\r\n\r\n~~note: blocks broken by players seem to not exist at time of event calling (i blame all the weirdly player-specific block-related events in bukkit), will investigate soon~~  \r\ni identified the logic that leads to this behavior but it unfortunately doesn't seem workaround-able so i opted to just include a snapshot of the blockstate inside the event instead which is Good Enough",
    "head_branch": "block-drop-resources-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa00d9087c4d6d376a81",
    "number": 6768,
    "body": "cc @Spottedleaf ",
    "head_branch": "chunk-load-rate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Unlimited chunk load rate (#6768)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa01d9087c4d6d376a82",
    "number": 6767,
    "body": "Instead of allocating the 4KB for every chunk section, cache it locally and\r\nreuse it for other chunk sections to save on allocations. These allocations add\r\nup very quickly when saving chunks frequently.\r\n\r\nFor example, with 30,000 chunks and 16 chunk sections per chunk (which will\r\nactually get larger in 1.18) it allocates nearly 2GB, which this patch\r\neliminates entirely.\r\n\r\n",
    "head_branch": "opt/palette-cache",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Cache palette array (#6767)\n\nInstead of allocating the 4KB for every chunk section, cache it locally and\r\nreuse it for other chunk sections to save on allocations. These allocations add\r\nup very quickly when saving chunks frequently.\r\n\r\nFor example, with 30,000 chunks and 16 chunk sections per chunk (which will\r\nactually get larger in 1.18) it allocates nearly 2GB, which this patch\r\neliminates entirely."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa02d9087c4d6d376a83",
    "number": 6766,
    "body": "Especially at over 30,000 chunks these random calls are fairly heavy. We\r\nuse a different method here for checking lightning, and for checking\r\nice.\r\n\r\nLightning: Each chunk now keeps an int of how many ticks until the\r\nlightning should strike. This int is a random number from 0 to 100000 * 2,\r\nthe multiplication is required to keep the probability the same.\r\n\r\nIce and snow: We just generate a single random number 0-16 and increment\r\nit, while checking if it's 0 for the current chunk.\r\n\r\nDepending on configuration for things that tick in a chunk, this is a\r\n5-10% improvement.",
    "head_branch": "opt/chunk-ticking",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa03d9087c4d6d376a84",
    "number": 6765,
    "body": "The IBlockAccess#rayTrace method is very wasteful in both allocations,\r\nand in logic. While EntityLiving#hasLineOfSight provides static\r\nparameters for collisions with blocks and fluids, the method still does\r\na lot of dynamic checks for both of these, which result in extra work.\r\nAs well, since the fluid collision option is set to NONE, the entire\r\nfluid collision system is completely unneeded, yet used anyways.\r\n\r\nThis is also used for fast line of sight merging in ItemEntity, as it\r\nfollows the same rules as hasLineOfSight.",
    "head_branch": "opt/raytracing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa04d9087c4d6d376a85",
    "number": 6763,
    "body": "- Update shadow to 7.1.0\r\n- Simplify java launcher configuration for run tasks",
    "head_branch": "misc-gradle-updates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Misc gradle updates (#6763)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa05d9087c4d6d376a86",
    "number": 6762,
    "body": "Closes #6752",
    "head_branch": "feature/is-critical-hit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa06d9087c4d6d376a87",
    "number": 6761,
    "body": "Fixes #6760",
    "head_branch": "fix/human-entity-drop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix HumanEntity#drop not updating the client inventory (#6761)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa07d9087c4d6d376a88",
    "number": 6755,
    "body": null,
    "head_branch": "ver/1.8.8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa08d9087c4d6d376a89",
    "number": 6754,
    "body": "Makes the setspawn command handle cancellation of the event.\r\nAdds missing reasons for setting (clearing) spawn on player respawn if obstructed.\r\nAdds missing plugin reason on api use.\r\nHandles interaction result failure if event is cancelled for respawn anchors.",
    "head_branch": "fix/PlayerSetSpawnEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Couple fixes/improvements to PlayerSetSpawnEvent (#6754)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa09d9087c4d6d376a8a",
    "number": 6753,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n960f3109 PR-937: Fixes related to unplaced BlockStates and the recent world generation changes.\r\n4faf479e SPIGOT-6754: We ignore any still present TileEntity now when we create a BlockState for a block of type AIR.\r\na72d5404 SPIGOT-6754: Temporarily restore previous behaviour for tile entities with removed blocks\r\n\r\nSpigot Changes:\r\ndc75aca8 Remove redundant 'Log null TileEntity Owner' patch",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa0ad9087c4d6d376a8b",
    "number": 6751,
    "body": "SolidBucketItems need to use the existing capturedBlockStates, but have their block place event handled elsewhere, so the event called in ItemStack needs to be skipped.\r\n\r\nFixes #6630",
    "head_branch": "fix/snow-buckets",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix cancelled snow bucket placement (#6751)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa0bd9087c4d6d376a8c",
    "number": 6748,
    "body": "Fixes #6746",
    "head_branch": "fix/ip-address-logging",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Filter ip address on join if setting is true (#6748)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa0cd9087c4d6d376a8d",
    "number": 6747,
    "body": "Fixes #6745 \r\n\r\nSeveral of upstream's checks to ensure the BlockState was one from an actual world instead of a world gen world broke existing legitimate behavior. ",
    "head_branch": "fix/unplaced-block-states",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix unplaced block states after new chunk gen API (#6747)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa0dd9087c4d6d376a8e",
    "number": 6744,
    "body": "Closes #6670 ",
    "head_branch": "feature/custom-potion-mixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Custom Potion Mixes (#6744)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa0ed9087c4d6d376a8f",
    "number": 6743,
    "body": "Since this event fires so rapidly, anyone having to get block data (such as to check sign orientation and such) has to do a lookup by world, which hurts performance. This commit adds a getter for the BlockData field already stored in the event.\r\n\r\nAlso updated the javadoc a bit as there was uncertainty about what the Changed BlockData/Type was for, if that conflicts I can remove it.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add getChangedBlockData() property to BlockPhysicsEvent to expose BlockData (#6743)\n\nSigned-off-by: Irmo van den Berge <irmo.vandenberge@ziggo.nl>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa0fd9087c4d6d376a90",
    "number": 6742,
    "body": "Fixes #6741 and [MC-171420](https://bugs.mojang.com/browse/MC-171420).",
    "head_branch": "fix/whitelist-reload-op-kick",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix kicking ops when whitelist is reloaded (MC-171420) (#6742)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa10d9087c4d6d376a91",
    "number": 6738,
    "body": "Fixes #6732\r\n\r\n(see patch description for a longer explanation)",
    "head_branch": "fix/block-state-factories",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix upstream block state factories (#6738)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa11d9087c4d6d376a92",
    "number": 6737,
    "body": "Upstream always closes the PluginClassLoader now",
    "head_branch": "deprecate-disable-classloader",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Deprecate API methods added by 'Close Plugin Class Loaders on Disable' (#6737)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa12d9087c4d6d376a93",
    "number": 6736,
    "body": "This gives you the ability to check for collisions for an entity or a bounding box in a world. \r\nThis allows you to see for example if an entity can fit at a certain location.\r\n\r\n\r\nFeedback appreciated.",
    "head_branch": "canfit-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Collision API (#6736)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa13d9087c4d6d376a94",
    "number": 6735,
    "body": "I'm pretty sure, looking at how this was implemted in 1.16.5 paper, that it was ported incorrectly. I'm guessing this will fix increase in dupe uuid error reports we've gotten but I'm not sure.",
    "head_branch": "fix/entity-add-dupe-uuid-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix dupe uuid check on entity add (#6735)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa14d9087c4d6d376a95",
    "number": 6734,
    "body": "Allows you to override some of the gamerules per player. Ideally, this patch can be expanded on in the future to include more overrides for certain values. Changes have been tested and seem to work just fine.\r\n\r\nThis PR is heavily inspired by the fix/persistence branch.\r\nRequires #6733 (as my PR doesn't cover this condition) ",
    "head_branch": "autorespawn-override",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa15d9087c4d6d376a96",
    "number": 6733,
    "body": "This would resend the value when the client joined. It seemed that this was fixed a while ago, as removing this doesn't seem to change anything",
    "head_branch": "remove-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa17d9087c4d6d376a97",
    "number": 6730,
    "body": "Leftover from Tuinity and not needed in the server as well",
    "head_branch": "fix/velocity-repo",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove unnecessary Velocity repo from server (#6730)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa18d9087c4d6d376a98",
    "number": 6729,
    "body": "Fixes #6728",
    "head_branch": "fix/perm-msg-npe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update adventure and fix command perm serialization NPE (#6729)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa19d9087c4d6d376a99",
    "number": 6726,
    "body": "This allows prompts to alternatively return a text component, implementing #6644.\r\n\r\nI'm not entirely happy with how it is right now, but the alternative I've explored also didn't sit well with me. Specifically, the `Prompt` now doesn't force a user to implement a method of getting something to display. Both methods are default, so there's no hard requirement and it will just compile fine without overwriting either of them and eventually crash at runtime. Unfortunately, making either of them non-default would be unsatisfactory in my eyes.\r\n- Making `getPromptMessage` (the new API) non-default: Breaks every prompt in existence, so not an option.\r\n- Making `getPromptText` (the existing API) non-default: Any prompts that want to return a component directly now have to deal with a dead method.\r\n\r\nThe alternative that I explored was creating a new prompt interface, say `ComponentPrompt` that would include the new method and provide a default for the `getPromptText` method.\r\n<details>\r\n  <summary>ComponentPrompt</summary>\r\n\r\n  ```java\r\npublic interface ComponentPrompt extends Prompt {\r\n\r\n    @Override\r\n    @NotNull\r\n    default String getPromptText(@NotNull ConversationContext context) {\r\n        throw new UnsupportedOperationException(\"Use getPromptMessage() for component prompts.\");\r\n    }\r\n\r\n    /**\r\n     * Gets the message component to display to the user when this prompt is first\r\n     * presented.\r\n     *\r\n     * @param context Context information about the conversation.\r\n     * @return The chat component to display.\r\n     */\r\n    @NotNull Component getPromptMessage(ConversationContext context);\r\n}\r\n  ```\r\n</details>\r\n\r\nThis would ensure old prompts won't break as they wouldn't be forced to implement this new interface. It would also force users of both prompt types (the old and new) to implement the correct method for getting the prompt text. I think this was more satisfactory from a user perspective, but this would now require instance checking internally when using the prompts. As a result I found this solution also a little unsatisfactory. But maybe the upside of having a clear guide on what to implement is more important?\r\n\r\nUnfortunately, adding `sendMessage(Component)` to the `Conversible` causes a clash with the equivalent method in `Audience` - to some degree on purpose. Since it was defined as default there, it had to be overwritten in both `Player` and `ConsoleCommandSender`. Not particularly happy about this either, but creating yet another new method for this kind of thing felt awful. Overriding with the default implementation felt like a lesser evil.\r\n\r\nI was also debating allowing the prefix to be a component too while I was at it. It would effectively have the same implementation challenge as the prompt so decided to leave that aside for now and see where we're going with the prompt implementation.\r\n\r\nI acknowledge that this is a small and low priority change but I'd still be appreciative of feedback.",
    "head_branch": "6644-component-prompt-texts",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa1ad9087c4d6d376a9a",
    "number": 6725,
    "body": "In case there's an error when recalculating region header, backups won't fill the FS with endless, duplicated files\r\n\r\nRef: #6718",
    "head_branch": "hash_backup_file",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa1bd9087c4d6d376a9b",
    "number": 6724,
    "body": "~~Couple problems with this that I don't know the best way to solve. If plugins get/join the returned completable future at the wrong time (like during plugin onEnable) it locks up cause the server is waiting for the plugin to load so the main thread (which at the moment is required for scoreboard creating/registration) can't register the scoreboard.~~\r\n\r\nI'm not 100% sure that scoreboard registration needs to be done on the main thread. Would wrapping the WeakCollection of scoreboards in CraftScoreboardManager as a syncronized collection really solve that issue of scoreboard creation requiring the main thread.\r\n\r\nEDIT: So I did go ahead and make the scoreboard collection a synchronous collection and removed the async catchers for scoreboard creation.",
    "head_branch": "feature/saveable-scoreboards",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa1cd9087c4d6d376a9c",
    "number": 6723,
    "body": "In a static block in CraftCriteria it loads a immutable map called `DEFAULTS` by iterating through the `CRITERIA_CACHE` in ObjectiveCriteria. Problem is, that cache isn't loaded with all possible valid criteria upon load. It's loaded with the base scoreboard criterias, and all custom statistics, BUT, all non-custom statistics are loaded as-needed. So they aren't present when that `DEFAULTS` map is built.",
    "head_branch": "fix/craft-criteria-defaults",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix CraftCriteria defaults map (#6723)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa1dd9087c4d6d376a9d",
    "number": 6722,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n6be36d36 SPIGOT-2903: Add Structure API\r\nc01e2f07 #662: Support for configuring Water Underground Creatures spawn settings\r\n8916693e #661: Fix Typo in ScoreboardManager documentation\r\n\r\nCraftBukkit Changes:\r\n1df303e7 SPIGOT-2903: Add Structure API\r\n346ebb7a #934: Support for configuring Water Underground Creatures spawn settings\r\n\r\nSpigot Changes:\r\n8e907441 Rebuild patches",
    "head_branch": "upstream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#6722)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa1ed9087c4d6d376a9e",
    "number": 6717,
    "body": "Fixes #6598 \r\n\r\nIn vanilla, there's one difference based on mob category to a despawn range value, and vanilla's mob category enum supports different despawn distances per category so I updated the config to reflect that.",
    "head_branch": "feature/category-despawn-distances",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make despawn distance configs per-category, improve per category spawn limit config (#6717)\n\nAlso adds per-world spawn limit config in paper.yml for `underground_water_creature`, and migrates existing spawn limit config options to their Mojang names."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa1fd9087c4d6d376a9f",
    "number": 6716,
    "body": "Fixes #6309 and #6714 ",
    "head_branch": "init-console-later",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Start console thread after PaperConfig & MinecraftServer.console are initialized (#6716)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa20d9087c4d6d376aa0",
    "number": 6715,
    "body": "The sonatype badge only works half the time (currently looks like this: ![image](https://i.imgur.com/RGXGTvo.png) )\r\n\r\nThe other removed badges contained mostly redundant or questionably useful/relevant info.",
    "head_branch": "cleanup-badges",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[ci skip] Remove redundant/broken readme badges (#6715)\n\nThe sonatype badge only works half the time (currently looks like this: [image](https://i.imgur.com/RGXGTvo.png))\r\n\r\nThe other removed badges contained mostly redundant or questionably useful/relevant info."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa21d9087c4d6d376aa1",
    "number": 6713,
    "body": "Sometimes, plugins call \"fake\" bukkit events to determine their outcome, for example to detect whether an area is accessible to player's block placements. Currently, calling such events may negatively affect a plugins state.\r\n\r\nThis PR aims to provide a way to add context to an event, as a key/value map located inside the `org.bukkit.Event` class. Using the `ignoreContextKey` field added in `@EventHandler`, a plugin may ignore an event altogether if a certain context key is present.",
    "head_branch": "feature/fake-event-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa22d9087c4d6d376aa2",
    "number": 6712,
    "body": "There was no way to find lightning rods around a location except for reimplementing methods already present in NMS...\r\n\r\nThanks to @lynxplay for investigating a problem with ATs :)",
    "head_branch": "feature/lightning-targets",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add methods to find targets for lightning strikes (#6712)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa23d9087c4d6d376aa3",
    "number": 6711,
    "body": "Adds a new `DatapackManager#loadDatapack` method, allowing users to load datapacks from the API.\r\n\r\nFixes #4654.",
    "head_branch": "feature/more-datapack-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa24d9087c4d6d376aa4",
    "number": 6710,
    "body": "## Why?\r\n\r\nThis patch allows users to override their Paper, Spigot, Bukkit, and Minecraft (server.properties) config at runtime using environment variables and system properties. This is very useful for containerized deployment of Minecraft servers, such as on Kubernetes and Docker.\r\n\r\n## Example\r\n\r\n```bash\r\nPAPER_SETTINGS_VELOCITY_SUPPORT_SECRET=xxxx java -jar server.jar ...\r\n```\r\nThis will override `settings.velocity-support.secret` to `xxxx` at runtime.\r\n\r\n\r\nResolves #6332. ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa25d9087c4d6d376aa5",
    "number": 6709,
    "body": "Lets you configure the chance of thunder in each chunk #6688 ?\r\nI edited the patch this time :D\r\n",
    "head_branch": "thunder-config",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa26d9087c4d6d376aa6",
    "number": 6707,
    "body": "Fixes #5415\r\nFixes #5429\r\n\r\nProbably supercedes #6628 (I think this is a better way to fix it probably)\r\n\r\nThe dragon stuff was the most annoying, since you have to delay setting the movement until all the parts have had their events called. Its also a little hard to test, since Craftbukkit just flat out doesnt let dragons move at all when in the hover phase (see L252 of EnderDragon.java). Commenting the added conditional check out shows the effects better.",
    "head_branch": "fix/explosion-knockbacks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa27d9087c4d6d376aa7",
    "number": 6706,
    "body": "Fixes #6689 ",
    "head_branch": "fix/itemstack-deserialization-from-spigot",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa28d9087c4d6d376aa8",
    "number": 6705,
    "body": "I've made a mistake in #6702 and put markdown where it will not be rendered. Unfortunately, GitHub did not allow you to preview that file. This removes it.",
    "head_branch": "markdown-issue-template",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] remove markdown from issue template (#6705)\n\nSome areas of the issue template will not render markdown"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa29d9087c4d6d376aa9",
    "number": 6704,
    "body": "Fixes #4888\r\nFixes #7599\r\nFixes https://github.com/PaperMC/Paper/issues/9399\r\n\r\nDoes the same conversion in more places to ensure comparisons are correct. Section chars in top-level components are now converted to json structure. This doesnt touch section chars in children components, but it didnt originally do that either.",
    "head_branch": "fix/horrible-plugin-practices",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa2ad9087c4d6d376aaa",
    "number": 6703,
    "body": "This PR re-adds the root reverted in e8830b27. The check was throwing false positives because of a OpenJDk bug (no issue # yet, will add here later). This PR uses a different method for getting the UID (executing the id command), which isn't affected by the openjdk issue.",
    "head_branch": "feature/re-readd-root-detection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Re-readd root/admin user detection (#6703)\n\n* Re-readd root/admin user detection\r\n\r\n* I am dum\r\n\r\n* Only run id command if needed\r\n\r\n* Use ProcessBuilder\r\n\r\n* Link to issue\r\n\r\n* Rebase\r\n\r\nCo-authored-by: Madeline Miller <mnmiller1@me.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa2bd9087c4d6d376aab",
    "number": 6702,
    "body": "While checkboxes used to work well, they now add a `x/3 tasks done` card to each issue. They also feel very TOC-like in that you just check them and don't read them. A markdown field works better. Additionally, datapacks are becoming more and more prevalent, and thus more important to include in issues.\r\n\r\nIssue templates can also apply labels, so that is used here both for the needs triage label as well as a type. Must be merged with https://github.com/SpongePowered/limbo-config/pull/7",
    "head_branch": "issue-template",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] update issue template to remove checkboxes and add datapacks (#6702)\n\n* Update issue template to remove checkboxes and add datapacks\r\n\r\n* capitalize GitHub and Discord"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa2cd9087c4d6d376aac",
    "number": 6701,
    "body": "When using PersistentDataContainers in an asynchronous task a CME can occur. Afaik creating/modifing ItemStacks asynchronously should be allowed. This PR fixes the CME.\r\nhttp://paste.cytooxien.de/icetuzifeq.bash",
    "head_branch": "fix/CME",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix CME in CraftPersistentDataTypeRegistry (#6701)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa2dd9087c4d6d376aad",
    "number": 6700,
    "body": "When upstream completed the 1.17 update, they failed to register the new spawn egg items for the SpawnEgg item meta.\r\nThis PR resolves that issue for Paper. \r\n\r\nThis patch has been successfully in use since mid-September, just now getting around to PRing it up.\r\nhttps://github.com/starlis/empirecraft/blob/07d80af3ae154657694fa8c55d9d73eff93ed52f/patches/server/0107-Add-1.17-mobs-to-CraftMetaSpawnEgg.patch",
    "head_branch": "spawn-egg-meta",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Handle missing Spawn Egg item meta for 1.17 mobs (#6700)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa2ed9087c4d6d376aae",
    "number": 6699,
    "body": "Reverts PaperMC/Paper#6593\r\n\r\nThis trips the detection on many pterodactyl-based hosts despite them setting a user correctly. Reverted until further investigation can be done\r\n\r\nFurther investigation has now been conducted, more information can be found here: https://bugs.openjdk.java.net/browse/JDK-8274721",
    "head_branch": "revert-6593-feature/readd-root-detection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Revert \"Readd root/admin user detection (#6593)\" (#6699)\n\nThis reverts commit 45c4f9025944f9a049931a7e0a20339297d8b89f."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa2fd9087c4d6d376aaf",
    "number": 6698,
    "body": "added feature #6598 \r\n/paper mobcaps now updates the under-water config.",
    "head_branch": "underwater-animals-config",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa30d9087c4d6d376ab0",
    "number": 6697,
    "body": "Fixes #6696.\r\n\r\nIf this isnt the best way to go about this, it at least illustrates the problem. When you have a bunch of entities being damaged at once by the same thing (an entity with passengers taking fall damage from dripstone pointy things), you cant clear the blockDamage right after because there's another entity right behind it taking damage (the passenger).\r\n\r\nSo I just changed it to a map that entities are added to, and then removed after.",
    "head_branch": "fix/multiple-block-dmgs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa31d9087c4d6d376ab1",
    "number": 6695,
    "body": "Might be totally barking up the wrong tree here, but hey",
    "head_branch": "feature/moar-brig",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa32d9087c4d6d376ab2",
    "number": 6693,
    "body": "fixes #6309\r\n\r\nhad to replace usages of Bukkit.getLogger() as Bukkit.server is not yet initialized\r\n\r\nedit: this causes config migrations involving SpigotConfig to fail as the migration code assumes SpigotConfig was already initialized - need to either fix that or solve another way\r\n\r\nsuperseded by https://github.com/PaperMC/Paper/pull/6716",
    "head_branch": "move-config-init",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa33d9087c4d6d376ab3",
    "number": 6691,
    "body": "Legacy renderers don't use the viewer",
    "head_branch": "legacy-viewer-unaware",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make legacyRenderer a ViewerUnaware renderer (#6691)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa34d9087c4d6d376ab4",
    "number": 6690,
    "body": "There are 19 display slots, not just the 3 in the original enum",
    "head_branch": "feature/team-sidebar-display-slots",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing team sidebar display slots (#6690)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa36d9087c4d6d376ab5",
    "number": 6687,
    "body": "Fixes dumb plugin load order when a plugin \"provides\" another plugin via the plugin.yml https://hub.spigotmc.org/jira/browse/SPIGOT-6740",
    "head_branch": "fix/provided",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix plugin provides load order (#6687)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa37d9087c4d6d376ab6",
    "number": 6686,
    "body": "Fixes #6665 \r\n\r\nUnsure if this change would be considered a bug fix, I don't know the long term behavior of this",
    "head_branch": "fix/dbl-chest-get-inventory",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa38d9087c4d6d376ab7",
    "number": 6684,
    "body": null,
    "head_branch": "trace-deobf-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix stacktrace deobf where thrownProxy got initialized before rewriting (#6684)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa39d9087c4d6d376ab8",
    "number": 6680,
    "body": null,
    "head_branch": "feature/get-placed-material",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa3ad9087c4d6d376ab9",
    "number": 6679,
    "body": "Since the player is reset between PlayerRespawnEvent and PlayerPostRespawnEvent some changes to Player are not kept.",
    "head_branch": "fix/suggest-post-respawn-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Suggest PlayerPostRespawnEvent if changing player state (#6679)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa3bd9087c4d6d376aba",
    "number": 6677,
    "body": null,
    "head_branch": "fix-jline-relocation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix jline relocation (#6677)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa3cd9087c4d6d376abb",
    "number": 6676,
    "body": "Closes #6675\r\n\r\nConverting description, usage msg, etc is a lot more difficult because of the whole help menu system, but since perm message isnt a part of that, this is pretty straightforward",
    "head_branch": "feature/adventure/perm-msg",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Support components in command permission msgs (#6676)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa3dd9087c4d6d376abc",
    "number": 6673,
    "body": null,
    "head_branch": "fix/vehicle",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Ensure valid vehicle status (#6673)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa3ed9087c4d6d376abd",
    "number": 6671,
    "body": "Closes #6669\r\n\r\n~~(Not tested yet, gotta eat some food)~~ Now tested, and it works great",
    "head_branch": "feature/smithing-recipes-copy-nbt-option",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Option to prevent NBT copy in smithing recipes (#6671)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa3fd9087c4d6d376abe",
    "number": 6666,
    "body": "#6666",
    "head_branch": "6666",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa40d9087c4d6d376abf",
    "number": 6663,
    "body": "Fixes #6661 \r\n\r\n(See [this](https://github.com/PaperMC/Paper/commit/19da14ee00f93cc6b3e234162062a818df1f97d2#diff-572f8c768008a01463e81b5d066d23591a1bceb30ab001411448a58d695f9ea6L65))\r\n\r\n![image](https://user-images.githubusercontent.com/15055071/134782388-bbb5de57-4a72-47c0-bd26-721b4b8c3fed.png)\r\n",
    "head_branch": "fix/death-keep-items",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix player death kept items not being in same slot (#6663)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa41d9087c4d6d376ac0",
    "number": 6656,
    "body": "Adds the getHostname method which is available in the PlayerLoginEvent to the AsyncPlayerPreLoginEvent.\r\nI personally needed this when setting a PlayerProfile if the player connects with a specific hostname.",
    "head_branch": "gethostname",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added getHostname to AsyncPlayerPreLoginEvent (#6656)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa43d9087c4d6d376ac1",
    "number": 6654,
    "body": "Currently the interaction range check uses the negative corner of the block you clicked. This causes a problem as with the client survival interaction range of 4.5 it is posible to make this check fail with a vanilla client if you click on the positive corner of the block while standing as far away from it as you can. In this way your eye pos can be up to 4.5+sqrt(3)=6,23 blocks away from the negative corner, which will make the check fail as limits range to 6.\r\nThis commit makes it use the center of the block instead of the negative corner, making the maximum distance a vanilla client can be from it 4.5+sqrt(0,75)=5,36 blocks, which is less than 6 so the check wouldn't fail.",
    "head_branch": "interaction-range-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix interaction pos in range check (#6654)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa44d9087c4d6d376ac2",
    "number": 6653,
    "body": "Diff in patches is due to AT fixes",
    "head_branch": "paperweight-1.1.12",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update paperweight to 1.1.12 (#6653)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa45d9087c4d6d376ac3",
    "number": 6652,
    "body": "The click event is added in Player#getDisplayName, which calls PlayerTeam.formatNameForTeam for us. getDisplayName is also what vanilla uses for chat, and is exposed to API by teamDisplayName\r\n\r\n",
    "head_branch": "teamdisplayname",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix click event when vanilla scoreboard name coloring is enabled (#6652)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa46d9087c4d6d376ac4",
    "number": 6651,
    "body": "The implementation of this method allows for null tools. The use of a null tool would be useful if the block should be dropped always. E.g. bedrock can't be broken with any tool, but it will be dropped if you specify a null tool.\r\n\r\nAdditionally, the original breakNaturally method also allows for null tools and just calls the added method from paper.",
    "head_branch": "fix/block-break-naturally",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix nullability on Block#breakNaturally (#6651)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa47d9087c4d6d376ac5",
    "number": 6647,
    "body": "This is meant to be a groundwork PR on top of which many other PRs can be added to effectively add a Player to many events that wouldn't otherwise know if it had a Player as a source. \r\n\r\nThis is a resurrections of an [old PR ](https://github.com/PaperMC/Paper/pull/4092 )which has the example of a BlockDestroyedByNeighborEvent which allows players to see, for example, which Player broke an entire Bamboo plant block-by-block. Another (incoming PR) example would be SpongeAbsorbEvent, whereby this would allow Player to be optionally added, to see who was responsible for the sponge absorption event, etc. \r\n\r\nThe old PR added this holder class AND the new event, and I felt it was maybe better to keep them separate. \r\n\r\nIt's entirely possible there are places I'm missing where further player-block-physics-propagation, so happy to add those, and others can also flesh out patch in distant futures.\r\n\r\nBelow are two examples of subsequent patches that can use this new tracker:\r\nhttps://github.com/Cryptite/Slice/commit/14b9d039886b93eeea08b7223517c0f88f314aac\r\nhttps://github.com/Cryptite/Slice/commit/61bb84ac02f16ba0f4e0fc375d995dfea7a609b6",
    "head_branch": "pendingplayerblockevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa48d9087c4d6d376ac6",
    "number": 6645,
    "body": null,
    "head_branch": "explosion-projectile-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa49d9087c4d6d376ac7",
    "number": 6641,
    "body": "Fixes #6496 ",
    "head_branch": "fix/datapack-cmds",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix loading cmds in datapacks (#6641)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa4ad9087c4d6d376ac8",
    "number": 6640,
    "body": "It is a common pattern to fill a team up with several entries. Unfortunately, each single entry addition sends a ScoreboardTeam packet out which can be unnecessarily chatty. This patch just adds the option to set a collection of entries on a scoreboard team which can get bundled into a single packet.\r\n\r\nLikely not a significant optimization, but hey, every little bit helps.\r\n\r\nI suck at PRs still, so here's this PR freshly non-messed up...",
    "head_branch": "tabentries",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add/Remove multiple entries with Scoreboard Team (#6640)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa4bd9087c4d6d376ac9",
    "number": 6638,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n19e985ec SPIGOT-6746: Clarify PlayerPortalEvent documentation\r\n2a0a2e2e SPIGOT-6738: Add entity type tags\r\n\r\nCraftBukkit Changes:\r\ndc764e7a PR-877: Improve and simplify CraftBlockState\r\n2d933bae SPIGOT-6741: shouldGenerateStructures isn't implemented\r\n9aeb46ae SPIGOT-6023, SPIGOT-6745: Fix missing BlockDispenseArmorEvents\r\nd3cc4120 SPIGOT-6738: Add entity type tags",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#6638)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa4cd9087c4d6d376aca",
    "number": 6637,
    "body": "It is a common pattern to fill a team up with several entries. Unfortunately, each single entry addition sends a ScoreboardTeam packet out which can be unnecessarily chatty. This patch just adds the option to set a collection of entries on a scoreboard team which can get bundled into a single packet.\r\n\r\nLikely not a significant optimization, but hey, every little bit helps.",
    "head_branch": "tabentries",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa4dd9087c4d6d376acb",
    "number": 6636,
    "body": null,
    "head_branch": "shielddisableevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa4ed9087c4d6d376acc",
    "number": 6635,
    "body": "The patch \"Optimise player lookups\" uses the hard despawn distance when looking\r\nfor players. However, the method expects a normal range instead of the squared\r\nrange given. This change (goofy as it looks, since it doesn't modify the\r\nproblematic patch) ensures that the squared range is used for squared checks,\r\nand the normal ranges are still available for non-squared checks.\r\n\r\nI forgot to mention this is an optimization. It should be looking up to 128 blocks away for players, but instead looks 128*128=16384 blocks for players.",
    "head_branch": "fix/mob-despawn-range",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa4fd9087c4d6d376acd",
    "number": 6634,
    "body": "This PR updates Paper to Adventure 4.9.1.\r\n\r\nIncluded changes:\r\n- Update to Adventure 4.9.1 (new `sendTitlePart` method implementation).\r\n- Add `TriState` permission check to `Permissable`.\r\n- Implement Adventure's Pointers system.\r\n- Add Checker annotations back (removed in Adventure 4.9.0).\r\n- Deprecates the string-based title API methods.",
    "head_branch": "adventure/4.9.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Adventure 4.9.1 (#6634)\n\nCo-authored-by: Jason Penilla <11360596+jpenilla@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa50d9087c4d6d376ace",
    "number": 6633,
    "body": "Fixes #5517. I'm not entirely sure if this event should have some sort of pre-fire check, similar to [EntityMoveEvent](https://github.com/PaperMC/Paper/blob/f75636b55fa3c0a29c91931f6c44db2da7d1cefb/patches/server/0615-EntityMoveEvent.patch#L15), since the event is fired pretty often (or maybe some sort of fire condition).",
    "head_branch": "feature/entityfiretickevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa52d9087c4d6d376acf",
    "number": 6629,
    "body": null,
    "head_branch": "shielddisableevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa53d9087c4d6d376ad0",
    "number": 6628,
    "body": "Pretty much just copying my BandagedPaper patch over here. This has been an issue in Spigot and it's forks for a while, and since it's a pretty easy patch I decided to make a PR.\r\n\r\nFrom my understanding of this bug, as a lagfix Spigot introduced a check where if entities did not take damage from an explosion and/or are not in a specific whitelist, the explosion is not processed for that entity. Due to projectiles having no health, they cannot take damage from an explosion, and Spigot forgot to add them to the whitelist. This patch simply adds it.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa54d9087c4d6d376ad1",
    "number": 6627,
    "body": "Although this all could be achieved via Interact Events, this makes managing bundles easier.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa55d9087c4d6d376ad2",
    "number": 6625,
    "body": null,
    "head_branch": "chore/rename-me",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[ci skip] Update my name in author field (#6625)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa56d9087c4d6d376ad3",
    "number": 6619,
    "body": "maybe needs somebody better at the words on the JD, but, fixes #6347 and offers a general method to use for getting the plugins folder, useful for plugin loaders, etc given that it exposes the impl detail which is otherwise hidden",
    "head_branch": "cleanup/extra-jars-plugin-folder",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Clean plugin folder logic in extra-jars patch (Fixes #6347) (#6619)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa57d9087c4d6d376ad4",
    "number": 6617,
    "body": "Closes #6610 and fixes #6616.\r\n\r\nChanges:\r\n* Add per-player chunk send rate: added chunk send rate field per player, that when given overrides the configured value in paper.yml\r\n* Fix chunk send rate of 1.0 disabling the limit: instead, any negative value will disable the limit (as matches the documentation which indicates a value of -1 to disable the limit), and any nonnegative value of at most 1.0 sets the chunk send rate to 1.0.",
    "head_branch": "feature/playerchunksendspeed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa58d9087c4d6d376ad5",
    "number": 6615,
    "body": "Within chunk packets, there is a new ByteBuf allocated with pre-calculated size based on the chunk section's non-air blocks and their block palettes. The global palette size returns 1 instead of 0 bytes and the buffer is needlessly extended - which doesn't cause any issues or warnings, since this is a special allocated buf inside of a packet, but still causes the mismatch in expected length and actual content (= being left with readableBytes > 0 despite all actual data having ended), annoying in custom protocol reading",
    "head_branch": "global-palette",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa59d9087c4d6d376ad6",
    "number": 6613,
    "body": null,
    "head_branch": "fix/entity-tag-tags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Rework filtering spawn egg and tile entity nbt config (#6613)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa5ad9087c4d6d376ad7",
    "number": 6612,
    "body": null,
    "head_branch": "fix-misc-na",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix global limit display for MISC mob category (#6612)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa5bd9087c4d6d376ad8",
    "number": 6611,
    "body": "Fixes #6607. This PR adds new API to all living entities (+ items) that allows you to disable air- and ground friction.",
    "head_branch": "feature/discard-friction-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Friction API (#6611)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa5cd9087c4d6d376ad9",
    "number": 6605,
    "body": "This PR adds an optional functionally to enable network pass-through: Waterfall will skip compressed packets on it's end, reducing CPU usage that could've been spent on decompressing/compressing large packets.\r\n\r\nPaper will not gain any benefit from that, however, I'll open a corresponding PR at Waterfall's repostiory once this PR is reviewed and, hopefully, accepted.\r\n\r\nRemarks: this optimization will probably fail if compression thresholds are not equal on both ends.\r\nThe server is responsible for deciding whether to pass through packets, so each server instance does not depend on the proxy.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa5dd9087c4d6d376ada",
    "number": 6604,
    "body": null,
    "head_branch": "fix-sysout-format",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix log message formatting when classes not owned by plugins use sysout (#6604)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa5ed9087c4d6d376adb",
    "number": 6603,
    "body": "Fixes #6602. I couldn't find an existing patch to put this into, so I'm creating this as a new patch instead.",
    "head_branch": "feature/no-unnecessary-debug-log-info",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't log if debug logging isn't enabled. (#6603)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa60d9087c4d6d376adc",
    "number": 6601,
    "body": "Fixes #6600",
    "head_branch": "fix/light-block",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Prevent unintended light block manipulation (#6601)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa61d9087c4d6d376add",
    "number": 6597,
    "body": "OneDrive may, when it syncs, cause world corruption or other issues. With OneDrive by default syncing the desktop and documents folder, many users will run their server in OneDrive by mistake. This prevents the server from starting should it be running within OneDrive. \r\n\r\nBypass with \"-Dio.papermc.paper.bypassOneDriveCheck=true\".\r\n\r\nLogManager.shutdown() is called to make sure everything is printed before the server exits. Without this, you will sometimes only get the first line or two, I'm not sure if there's a better way to do this without having everything load. It's worth noting that this also hung the server for 2+ minutes the first time I tried it, however, I haven't been able to reproduce that since to actually see why.\r\n\r\nIt would be also nice to detect things like Google Drive, Dropbox, Box, etc. however I haven't seen a reliable way to detect these, and OneDrive is much more prevalent for people to run in by mistake. This detection method also has the caveat of only working on Windows 10 1809+ (released late 2018), as well as if users have multiple OneDrive (commercial) accounts, it will only detect the first.\r\n\r\nAnother consideration is if this should have some sort of GUI component, as likely most of the people running their server within onedrive are also double-clicking the jar and using the GUI. Currently, I have chosen to not do this, and instead, run it very early.",
    "head_branch": "onedrive-detection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa62d9087c4d6d376ade",
    "number": 6596,
    "body": "Blocked by #5691",
    "head_branch": "feature/better-criteria-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa63d9087c4d6d376adf",
    "number": 6593,
    "body": "This PR re-adds the root/admin user warning originally introduced in #2432. The original patch was reverted (ecfaff5) because of console spam issues on CentOS. In this PR, a different way of checking for for root/admin privileges is used, which shouldn't cause console spam on certain systems.\r\n\r\nTested on macOS 11.4, Ubuntu 20.04, Centos 8 and Windows Server 2022.",
    "head_branch": "feature/readd-root-detection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Readd root/admin user detection (#6593)\n\n* Readd root/admin user detection\r\n\r\n* Use original test for Windows, use UID for unix and add co-author\r\n\r\n* Move logging and remove unnecessary reader\r\n\r\n* try with resources\r\n\r\n* Use Windows security identifiers + reduce size of Unix check\r\n\r\n* Remove extra newline at the bottom of the message\r\n\r\n* Change wording\r\n\r\n* Address comments\r\n\r\n* Link to Maddy's article\r\n\r\n* Use warning log level"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa64d9087c4d6d376ae0",
    "number": 6592,
    "body": "The server sends a filtered command tree to the client on join. Command nodes for which the player doesn't meet the brigadier requirement (permissions) are filtered and non-literal command nodes are replaced by an \"ask server\" command node for suggestions. Usually the client only asks the server for those command nodes. However, modded or outdated clients can still request suggestions whenever they like.\r\n\r\nThe problem here is that the response isn't even filtered and it still works if tab-complete is disabled in the spigot.yml file.\r\n\r\nThe easiest way to demonstrate this is to install ViaVersion and ViaBackwards, join with 1.12.2 as non-op, enter `/tele` and press tab. It will complete with `/teleport`, although you don't have permissions. Then disable tab-complete and even then it will still work. If you do the same with 1.17.1, `/teleport` won't be suggested at all because it's already filtered from the command tree, which is sent on join.\r\n\r\nThis PR filters the requested suggestions and implements the tab-complete setting for those requests.",
    "head_branch": "hotfix/tab-complete",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix command suggestion leak (#6592)\n\nCo-authored-by: Jason Penilla <11360596+jpenilla@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa65d9087c4d6d376ae1",
    "number": 6591,
    "body": null,
    "head_branch": "interaction-pos",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Improve interact distance check (#6591)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa66d9087c4d6d376ae2",
    "number": 6589,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n44cfe143 SPIGOT-6249: Add Missing Effect Constants\r\n\r\nCraftBukkit Changes:\r\n14928261 SPIGOT-6249: Add Missing Effect Constants\r\n332335e1 SPIGOT-6731: \"Nag author\" message in CraftServer lists one author only\r\n6cd975d0 SPIGOT-5732, SPIGOT-6387: Overhaul Hanging entities",
    "head_branch": "pr/upstream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#6589)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n44cfe143 SPIGOT-6249: Add Missing Effect Constants\r\n\r\nCraftBukkit Changes:\r\n14928261 SPIGOT-6249: Add Missing Effect Constants\r\n332335e1 SPIGOT-6731: \"Nag author\" message in CraftServer lists one author only\r\n6cd975d0 SPIGOT-5732, SPIGOT-6387: Overhaul Hanging entities"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa67d9087c4d6d376ae3",
    "number": 6588,
    "body": null,
    "head_branch": "pr",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Fix typos in Paper comments (#6588)\n\n* //Paper -> // Paper\r\n\r\n* // Tuiniy -> // Paper"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa68d9087c4d6d376ae4",
    "number": 6587,
    "body": "The key being used to access sensorTickRates and behaviorTickRates in the PaperWorldConfig is lower case as shown in:\r\n```java\r\nthis.configKey = key.toLowerCase(java.util.Locale.ROOT);\r\nint tickRate = world.paperConfig.getBehaviorTickRate(this.configKey, entity.getType().id, -1);\r\nthis.timeToTick = world.paperConfig.getSensorTickRate(this.configKey, entity.getType().id, this.scanRate);\r\n```\r\n\r\nHowever, these keys were being stored into these tables as upper case:\r\n```java\r\ntable.put(entity.toUpperCase(Locale.ROOT), typeName.toUpperCase(Locale.ROOT), tickRate);\r\n```\r\n\r\nThis caused the tick rates value to always be the default valye no matter what you set it as in the config.\r\n\r\nThis pull request fixes this by storing the keys as lower case instead.\r\n\r\n### Example of this being fixed with the following paper.yml config options:\r\n```yaml\r\n    tick-rates:\r\n      sensor:\r\n        villager:\r\n          secondarypoisensor: 40\r\n      behavior:\r\n        villager:\r\n          validatenearbypoi: 100\r\n          yieldjobsite: 100\r\n          acquirepoi: 100\r\n          poicompetitorscan: 100\r\n```\r\n\r\nBefore the fix, poicompetitorscan was being run 363 times per tick as seen in [https://timings.aikar.co/?id=8cdfb64f26db4d288f2bdec2e4a5a2b6](https://timings.aikar.co/?id=8cdfb64f26db4d288f2bdec2e4a5a2b6)\r\n\r\nAfter the fix, poicompetitorscan is only being run 6 times per tick as seen in [https://timings.aikar.co/?id=3f57d7ffc2e54849951df5a90d35e6ad](https://timings.aikar.co/?id=3f57d7ffc2e54849951df5a90d35e6ad)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix tick rates map being stored with upper case values instead of lower case (#6587)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa69d9087c4d6d376ae5",
    "number": 6586,
    "body": "Now to be clear, you have to give permission to the entity to run most commands as they start out knowing only the default non-op commands. And you can't OP entities. (well there's a method too, but it does literally nothing).",
    "head_branch": "fix/vanilla-cmds-entity-sender",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "VanillaCommandWrapper didnt account for entity senders (#6586)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa6ad9087c4d6d376ae6",
    "number": 6580,
    "body": null,
    "head_branch": "vanillagoal-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix VanillaGoals when in reobfuscated environment (#6580)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa6bd9087c4d6d376ae7",
    "number": 6578,
    "body": null,
    "head_branch": "feature/more-name-methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add more component name methods (#6578)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa6cd9087c4d6d376ae8",
    "number": 6575,
    "body": "This patch modifies the checkUpdate method to replace based on plugin name instead of file name. This allows you to retain versioning in your plugin's file names and use the update folder. When the plugin is replaced with the one in the update folder, the name of the plugin in the update folder is kept as well.\r\n\r\nThis closes the feature request I opened https://github.com/PaperMC/Paper/issues/6570\r\n\r\nIf you have any suggestions on how I can improve this patch, feel free to tell me, I'm open to criticism :)\r\n\r\nEDIT: I have now been running this on my servers for a couple of days now, this is a linux machine, so it's tested on Windows, Mac OS & Linux now and it's been working a treat for me.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa6dd9087c4d6d376ae9",
    "number": 6574,
    "body": "We had calculate  `difference` for per-player-mob-spawns from Bukkit's spawn limit `info.getSpawnableChunkCount()`,\r\nbut we check spawn limit again with for whole world,\r\nthis cause the total limit still cap by Bukkit's spawn limit.\r\nThese lines are same equation as Bukkit's `info.canSpawnForCategory(enumcreaturetype, limit)`:\r\nhttps://github.com/PaperMC/Paper/blob/master/patches/server/0372-implement-optional-per-player-mob-spawns.patch#L686-L688\r\n\r\nCurrent world's entities must < per-player-limit && < Bukkit's limit, otherwise not spawn.\r\nNot sure this is desired to or just a bug?\r\nIf is desired to,\r\nI think we should add another config for a total limit per world, which should >= Bukkit's spawn limit.\r\n\r\nfor example, if we had config:\r\n * Bukkit's spawn limit: 70\r\n *  per-player-mob-spawns: true\r\n * player A & B > `ViewDistance`\r\n\r\nbefore this patch:\r\n * player A: 20/70 => `difference` = 50\r\n * player B: 50/70 => `difference` = 20\r\n * all in world: 70\r\n * `info.canSpawnForCategory(enumcreaturetype, limit)` (`limit` == 70) => false\r\n * result: not spawn\r\n\r\nafter this patch:\r\n * player A: 20/70 -> `difference` = 50\r\n * player B: 50/70 -> `difference` = 20\r\n  * all in world: 70\r\n * ~~`info.canSpawnForCategory(enumcreaturetype, limit)`~~  (`limit` == 70)\r\n * result: spawn with `difference` 50 and 20 for player A and B\r\n\r\nSorry for my bad English, I can not describe very clearly, I will try my best.",
    "head_branch": "fix-per-player-mob-spawns",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix per-player-mob-spawns cause total limit cap by Bukkit's spawn limit (#6574)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa6ed9087c4d6d376aea",
    "number": 6572,
    "body": "if someone agrees with my idea in #6571 I would put it in this PR as well\r\n\r\nthe packet for a resource pack defines whether or not a custom prompt is attached\r\nif we use a \"\" TextComponent, then it will show that an empty custom prompt is attached when really we meant to attach no prompt at all\r\nusing null instead will indicate on the client that no prompt is present",
    "head_branch": "resource-pack-message-null",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use null for null resource pack prompts (#6572)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa6fd9087c4d6d376aeb",
    "number": 6569,
    "body": "This moves the getTrackedPlayers method to the Entity class as all entities can contain trackers.",
    "head_branch": "expose-tracked-to-entities",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move `getTrackedPlayers` up from Player to Entity (#6569)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa70d9087c4d6d376aec",
    "number": 6568,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n7da4c0be SPIGOT-6729: Add Chunk.isEntitiesLoaded()\r\n\r\nCraftBukkit Changes:\r\n9217b523 #929: Call EntityBlockFormEvent for Wither Rose placed by dead entity\r\n757d42ae SPIGOT-6729: Add Chunk.isEntitiesLoaded()",
    "head_branch": "pr/upstream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#6568)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n7da4c0be SPIGOT-6729: Add Chunk.isEntitiesLoaded()\r\n\r\nCraftBukkit Changes:\r\n9217b523 #929: Call EntityBlockFormEvent for Wither Rose placed by dead entity\r\n757d42ae SPIGOT-6729: Add Chunk.isEntitiesLoaded()"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa71d9087c4d6d376aed",
    "number": 6566,
    "body": "Fixes #6564. Implementation is largely inspired by the [DragonEggFormEvent](https://github.com/PaperMC/Paper/pull/5112). We considered extending the EntityBlockChangeEvent, but felt like EntityBlockFormEvent was a better fit here since the block forms out of thin air. ",
    "head_branch": "feature/add-entityformwitherrose-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa72d9087c4d6d376aee",
    "number": 6563,
    "body": "Fixes #6561 \r\n[Upstream just yeets the leftover stack](https://hub.spigotmc.org/stash/projects/SPIGOT/repos/spigot/commits/3c1fc60ae715a3007908fd34968f5acdf482a46a#CraftBukkit-Patches/0016-Hopper-Customisations.patch) so tons of items are lost.",
    "head_branch": "fix/composters-hoppers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix upstreams fix for composters and variable hoppers (#6563)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa73d9087c4d6d376aef",
    "number": 6562,
    "body": "This expands the teleport API to allow for teleporting entities while keeping passengers and allowing to teleport the player while keeping the player mounted.\r\n\r\n:star: Teleporting player while keeping passengers and dismounting\r\nhttps://user-images.githubusercontent.com/23108066/132114747-25568ff0-7f46-4186-84ce-064903781465.mp4\r\n\r\nThe idea of this PR is to essentially allow\r\n1. Keeping passengers when teleporting entities\r\n\r\n2. Allowing the entity being teleported to stay mounted when teleported\r\n- This causes the player to teleport for a moment, but because they are still mounted it snaps them back. However because of the new packet we can now choose if we should keep the player mounted or dismount them. I am not sure if we should return false here OR allow this. See: https://bugs.mojang.com/browse/MC-202202\r\n\r\n\r\nBehavior (keepPassengers, dismount):\r\n- Teleporting entity  (false, true) DEFAULT BEHAVIOR: If the entity has passengers it will return false (legacy behavior), else it will kick them off their vehicle.\r\n- Teleporting entity (false, false): If the entity has passengers it will return false, but it will not kick them off the vehicle\r\n- Teleporting entity (true, false): This will teleport the entity and most likely cause it to be teleported back next tick because it has a vehicle attached. (Passengers and vehicle will not be affected)\r\n- Teleporting entity (true, true) This will teleport the entity and all passengers ontop with them. The entity teleported will be dismounted\r\n\r\nSo basically it will return false if keepPassengers is false and they have passengers\r\n\r\n\r\nTested with players and entities, seems to work just fine. Feedback appreciated!",
    "head_branch": "teleport-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Teleportation API (#6562)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa74d9087c4d6d376af0",
    "number": 6559,
    "body": "Fixes #6558. I felt like this is worth patching since it can be abused on servers that give access to creative mode (or servers with some really scuffed command blocks). Swallowing the exception feels like the smallest and easiest solution as there doesn't seem to be a convenient way of checking if a namespacedkey is valid.",
    "head_branch": "prevent-invalid-enchant-keys-crashes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa75d9087c4d6d376af1",
    "number": 6555,
    "body": "Fixes #6551\r\n\r\nThis shoulda been part of #6540 but idk what happened to it.",
    "head_branch": "fix/custom-translations-flattener",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Prevent an infinite recursion error while rendering translatables (Fixes #6551) (#6555)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa76d9087c4d6d376af2",
    "number": 6553,
    "body": "Bundles in minecraft are, at least in version 1.17.1, limited to a\r\nmaximum weight of 64, which in most cases correlates to the amount of\r\nitems inside the bundle.\r\nIf a bundle is overfilled, e.g. was spawned in with enough items to\r\nbreak the maximum weight of 64, adding more items into the bundle will\r\ncause the bundle to instead add an air itemstack with the inverted\r\namount of the added item, resulting in a duplication of the original\r\nitem.\r\n\r\nWhile mojang already cancels additions to the bundle if the bundle has 0\r\nweight left, they do not cancel additions if the bundle has a negative\r\namount of weight left.\r\n\r\nThis commit changes the bundle to now prevent additions to the bundle if\r\nthe weight left to be filled in the bundle is zero or less, effectively\r\npreventing the duplication.\r\n\r\nResolves: #6550\r\n\r\n--------------------------------------------------------------------------------------------------\r\n\r\nNotes on this PR:\r\n\r\n1) If there is a better patch to add this into, it might be neat to prevent patch creation for a single line of change.\r\n2) As the issues states, this will never be an issue during vanilla gameplay as the bundle logic correctly prevents overfilling the bundle in the first place. This hence only affects spawned in bundles with technically \"invalid\" data.",
    "head_branch": "bugfix/prevent-duplication-on-overfilled-bundle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa77d9087c4d6d376af3",
    "number": 6548,
    "body": "This would allow plugins to set the server resource pack so it is sent by the server",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa78d9087c4d6d376af4",
    "number": 6545,
    "body": "This patch uses the hotfix of @electonicboy https://github.com/PaperMC/Paper/issues/6543#issuecomment-911271977\r\nto fix bug #6543.",
    "head_branch": "hotfix-infinite-loop-on-ChunkLoadEvent-getChunk-getEntities",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa7ad9087c4d6d376af5",
    "number": 6544,
    "body": "Fixes #6510\r\n\r\nAs far as I can tell, this is because the villager entity doesn't store the MerchantMenu, its container, that the code right below my additions, is trying to get the viewers of is its internal container, not the one being viewed by the player. ",
    "head_branch": "fix/merchant-inv-closing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix merchant inventories not closing on entity removal (#6544)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa7bd9087c4d6d376af6",
    "number": 6542,
    "body": null,
    "head_branch": "feature/more-translatable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement Translatable on villager Profession (#6542)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa7cd9087c4d6d376af7",
    "number": 6541,
    "body": "Note from Spottedleaf:\r\nPlease note that this doesn't fix any problems using dataconverter\r\nbecause dataconverter does not re-route world gen settings conversion.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed layers from V2550 not being added to list (#6541)\n\nNote from Spottedleaf:\r\nPlease note that this doesn't fix any problems using dataconverter\r\nbecause dataconverter does not re-route world gen settings conversion.\r\n\r\nCo-authored-by: Callum Seabrook <callum.seabrook@prevarinite.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa7dd9087c4d6d376af8",
    "number": 6540,
    "body": null,
    "head_branch": "fix/custom-translations-flattener",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "flattener should try to render custom translations (#6540)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa7ed9087c4d6d376af9",
    "number": 6539,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\ned7bba95 SPIGOT-6547: Chunk#getEntities() doesn't return all entities immediately after chunk load\r\nd99a585c SPIGOT-6719: Add getTileEntities() to LimitedRegion\r\n\r\nCraftBukkit Changes:\r\n422cec08 Rebuild patch\r\n15f27fc7 SPIGOT-6547: Chunk#getEntities() doesn't return all entities immediately after chunk load\r\ncbd747af SPIGOT-6719: Add getTileEntities() to LimitedRegion\r\n\r\nSpigot Changes:\r\n6c1c1b26 Rebuild patches",
    "head_branch": "pr/upstream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#6539)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\ned7bba95 SPIGOT-6547: Chunk#getEntities() doesn't return all entities immediately after chunk load\r\nd99a585c SPIGOT-6719: Add getTileEntities() to LimitedRegion\r\n\r\nCraftBukkit Changes:\r\n422cec08 Rebuild patch\r\n15f27fc7 SPIGOT-6547: Chunk#getEntities() doesn't return all entities immediately after chunk load\r\ncbd747af SPIGOT-6719: Add getTileEntities() to LimitedRegion\r\n\r\nSpigot Changes:\r\n6c1c1b26 Rebuild patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa7fd9087c4d6d376afa",
    "number": 6538,
    "body": "preview it here https://github.com/PaperMC/Paper/tree/github-sponsors",
    "head_branch": "github-sponsors",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add donation badges and support us section to readme"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa80d9087c4d6d376afb",
    "number": 6537,
    "body": null,
    "head_branch": "fix/item-attributes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Include slot when constructing the bukkit Attribute Modifiers (#6537)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa81d9087c4d6d376afc",
    "number": 6536,
    "body": null,
    "head_branch": "add-velocity-repo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add repo for Velocity natives to dev bundle (#6536)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa82d9087c4d6d376afd",
    "number": 6535,
    "body": "Just in case they cause problems again.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove the old updatingChunks and visibleChunks fields (#6535)\n\nJust in case they cause problems again.\r\n\r\nCo-authored-by: Spottedleaf <Spottedleaf@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa83d9087c4d6d376afe",
    "number": 6534,
    "body": null,
    "head_branch": "fix-saving-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Always use updatingChunks for saveAllChunks (#6534)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa84d9087c4d6d376aff",
    "number": 6533,
    "body": null,
    "head_branch": "flush-save-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use updatingChunks for flush saving (#6533)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa85d9087c4d6d376b00",
    "number": 6531,
    "body": "Co-authored-by: Thonk <30448663+ExcessiveAmountsOfZombies@users.noreply.github.com>\r\n\r\nThis fixes issues, reduces diff by a lot, and adds default filling, so I felt like opening a few is easier than requesting a dozen changes and going on with the original pr.\r\n\r\nNo seeds set:\r\n![No seeds](https://i.imgur.com/AaXgxZj.jpeg)\r\n\r\ndisk_clay set:\r\n![disk_clay set](https://i.imgur.com/oxlhgtX.jpeg)\r\n\r\nRandomize everything option (after deleting the manually added disk_clay)\r\n![Randomized](https://i.imgur.com/VfCGMkE.jpeg)",
    "head_branch": "feature-seeds",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Configurable feature seeds (#6531)\n\nCo-authored-by: Thonk 30448663+ExcessiveAmountsOfZombies@users.noreply.github.com\r\n\r\nAlso includes an option to auto-generate random seeds for all features and add them to the config."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa86d9087c4d6d376b01",
    "number": 6530,
    "body": null,
    "head_branch": "contains-fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix distance map contains (#6530)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa87d9087c4d6d376b02",
    "number": 6528,
    "body": null,
    "head_branch": "goal-getflags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove method rename and fix reobf for Goal#getFlags (#6528)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa88d9087c4d6d376b03",
    "number": 6527,
    "body": null,
    "head_branch": "feature/specify-more-datapack-folders",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa89d9087c4d6d376b04",
    "number": 6526,
    "body": "Currently mobs can spawn in 128 block range even if hard despawn range is set to a smaller value, and then they despawn when they get ticked. This prevents them from spawning in the first place.",
    "head_branch": "spawning-range-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa8ad9087c4d6d376b05",
    "number": 6525,
    "body": "As shown in [this video](https://www.youtube.com/watch?v=tXujZi0wEF0), there are minecraft seeds, such as [4717237](https://www.youtube.com/watch?v=yB2Wl5erHds), where no block generates in the end at 0,0. Because of this, the exit end portal will be placed at a negative coordinate, causing the bottom two blocks of the exit portal to be cut off. When beating the dragon, the game tries to place the actual end portal blocks at Y=-1, which isn't possible. Because of this, after beating the dragon, players are stuck in the end until they kill themselves. This PR ensures the exit portal  fully spawns above Y > 0, to prevent these types of softlocks.",
    "head_branch": "prevent-end-exit-softlock",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Prevent softlocked end exit portal generation (#6525)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa8bd9087c4d6d376b06",
    "number": 6524,
    "body": "https://github.com/PaperMC/Paper/pull/6521 was closed for some reason\r\n\r\nWe fix the implementation of this method to check isCurse on the Mojang enchant: https://github.com/PaperMC/Paper/blob/cf27619809e34d26ec07608b3e060247c8ee9d95/patches/server/0683-More-Enchantment-API.patch#L13-L17\r\n\r\nSeems like it was just forgotten to remove the deprecation when making this change",
    "head_branch": "undeprecate-enchantment-isCursed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Undeprecate Enchantment#isCursed (#6524)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa8cd9087c4d6d376b07",
    "number": 6523,
    "body": "Removes some noise from param name changes + some random whitespace changes",
    "head_branch": "fixup-timings-diff",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Cleanup Timings v2 diff (#6523)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa8dd9087c4d6d376b08",
    "number": 6522,
    "body": null,
    "head_branch": "entity-save-limit-config",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Log error for invalid entity-per-chunk-save-limit configs (#6522)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa8ed9087c4d6d376b09",
    "number": 6521,
    "body": "Very minor change, but Enchantment#isCursed has valid applications, especially considering custom enchantment plugins that may add new curses, that may not contain 'curse' in the enchantment key, which is the other way of checking if an enchantment is a curse (other than hardcoding a list).\r\n\r\n(Take 2 on this one, screwed up the first time)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa8fd9087c4d6d376b0a",
    "number": 6520,
    "body": "Very minor change, but Enchantment#isCursed has valid applications, especially considering custom enchantment plugins that may add new curses, that may not contain 'curse' in the enchantment key, which is the other way of checking if an enchantment is a curse (other than hardcoding a list).\r\n\r\nItemStackRecipeChoice is a redundant class since the adding of ExactChoice in RecipeChoice. Given that it was always deprecated, there shouldn't be any usages of it in plugins.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa90d9087c4d6d376b0b",
    "number": 6519,
    "body": null,
    "head_branch": "fix/upstream-equipment-nullability",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix upstream nullability on entity equipment getters (#6519)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa91d9087c4d6d376b0c",
    "number": 6518,
    "body": "Fixing issue noted in https://github.com/PaperMC/Paper/pull/6517#issuecomment-907740326",
    "head_branch": "fix/poor-action-helper-api-name",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix poor action helpers API name (#6518)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa92d9087c4d6d376b0d",
    "number": 6517,
    "body": "Whenever I want to check for a right-click, this massively annoys me. Just adds helper functions to the enum to check if it's the right hand or the left hand",
    "head_branch": "feature/action-helpers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add helpers for left/right hand to Action (#6517)\n\n* Add helpers for left/right hand to Action\r\n\r\n* Diff starts here technically"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa93d9087c4d6d376b0e",
    "number": 6516,
    "body": null,
    "head_branch": "add-raw-ore-materialtags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add MaterialTags for raw ores and raw ore blocks (#6516)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa94d9087c4d6d376b0f",
    "number": 6514,
    "body": null,
    "head_branch": "feature/item-entity-health",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add API for item entity health (#6514)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa95d9087c4d6d376b10",
    "number": 6513,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nea7b3a0d #654: Clarify conditions where a bed can explode\r\n\r\nCraftBukkit Changes:\r\ne167f280 SPIGOT-6726: NPE when calling getBossBar() on plugin spawned EnderDragon",
    "head_branch": "pr/upstream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#6513)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nea7b3a0d #654: Clarify conditions where a bed can explode\r\n\r\nCraftBukkit Changes:\r\ne167f280 SPIGOT-6726: NPE when calling getBossBar() on plugin spawned EnderDragon"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa97d9087c4d6d376b11",
    "number": 6508,
    "body": "Very old bug fix which now gets clamped to -20m/+20m\r\n\r\nLevel#isInWorldBounds checks this\r\n\r\nCloses #6357 ",
    "head_branch": "remove-auto-fix-y",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa98d9087c4d6d376b12",
    "number": 6507,
    "body": "Deferral could cause an infinite loop to occur.\r\n\r\nAlso, re-add the light engine priority logic.",
    "head_branch": "fix-priority-part-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Ensure priority updates are determined by current level, not deferred level (#6507)\n\n* Ensure priority updates are determined by current level, not deferred level\r\n\r\nDeferral could cause an infinite loop to occur.\r\n\r\nAlso, re-add the light engine priority logic.\r\n\r\n* Rebase\r\n\r\nCo-authored-by: Spottedleaf <Spottedleaf@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa99d9087c4d6d376b13",
    "number": 6504,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n5be41fb8 SPIGOT-6720: Fix bed explosion checks\r\n09b99daf SPIGOT-6722: Close entity manager when unloading world\r\n3a9561bf SPIGOT-6686: Changes in MaximumRepairCost for Anvil Rename cause inconsistency",
    "head_branch": "pr/upstream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit) (#6504)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n5be41fb8 SPIGOT-6720: Fix bed explosion checks\r\n09b99daf SPIGOT-6722: Close entity manager when unloading world\r\n3a9561bf SPIGOT-6686: Changes in MaximumRepairCost for Anvil Rename cause inconsistency"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa9ad9087c4d6d376b14",
    "number": 6503,
    "body": null,
    "head_branch": "feature/pdc-for-worlds",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa9bd9087c4d6d376b15",
    "number": 6502,
    "body": "I think some people might find this handy, I think someone mentioned something similar in discord today, and I thought I'd make it happen. Should preserve existing behavior of ItemStack#editMeta because all meta is an instance of ItemMeta.",
    "head_branch": "feature/better-editMeta",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve ItemStack#editMeta (#6502)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aa9cd9087c4d6d376b16",
    "number": 6501,
    "body": "Oh what a beautiful command system bukkit has crammed on top of brigadier...\r\n\r\nIf there's a better way to fix this, let me know. Main issue is that when the `/execute` command, and its children are registered, the root node from the dispatcher it's using gets thrown away because a new instance of the dispatcher is created later on (in `CraftServer#syncCommands`). So the root node it's using is \"outdated\". This `DelegatingRootCommandNode` always calls for the latest one. Further changes were needed to make sure the player's are sent the correct redirect node for /execute instead of the \"outdated\" root node.",
    "head_branch": "feature/bukkit-cmds-in-execute-cmd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa9dd9087c4d6d376b17",
    "number": 6500,
    "body": "This change allows users:\r\n\r\n- to specify after how many ticks players get insomnia since their last bed usage by changing `player-insomnia-start-ticks` in paper world config\r\n- to alter the default mechanism of how often server tries to spawn phantoms over insomniacs by changing `phantoms-spawn-attempt-max-seconds` and `phantoms-spawn-attempt-min-seconds` values in paper world config\r\n\r\nWhen both `max` and `min` values are set to `<= 0`, phantoms spawning is completely disabled - `net/minecraft/world/level/levelgen/PhantomSpawner.java` is not ticked. Similarly, when `player-insomnia-start-ticks` is set to `<= 0`, players never get insomnia.\r\n\r\nThis can be useful for survival servers where phantoms can get sometimes annoying. By \"nerfing\" them, players still have a chance to get drop from this mob, and they don't have to sleep that often to not get attacked by them.",
    "head_branch": "insomnia-phantoms-control",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added ability to control player's insomnia and phantoms spawning (#6500)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa9ed9087c4d6d376b18",
    "number": 6497,
    "body": null,
    "head_branch": "contributing",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[ci skip] Update contributing guidelines (#6497)\n\nCo-authored-by: Jason Penilla <11360596+jpenilla@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aa9fd9087c4d6d376b19",
    "number": 6495,
    "body": null,
    "head_branch": "resourcelocation-san",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Sanitize ResourceLocation error logging (#6495)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaa0d9087c4d6d376b1a",
    "number": 6494,
    "body": "Backport #6490 to 1.16.5.",
    "head_branch": "pr/open/1.16/vanilla-cmd-perm-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Backport \"Vanilla command permission fixes\" to 1.16.5 (#6494)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaa1d9087c4d6d376b1b",
    "number": 6493,
    "body": "The chunk system can swallow the exception given it's all\r\nbuilt with completablefuture, so ensure it is at least printed.",
    "head_branch": "asynccatcher-log",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Log when the async catcher is tripped (#6493)\n\nThe chunk system can swallow the exception given it's all\r\nbuilt with completablefuture, so ensure it is at least printed.\r\n\r\nCo-authored-by: Spottedleaf <Spottedleaf@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaa2d9087c4d6d376b1c",
    "number": 6492,
    "body": null,
    "head_branch": "cleanup-async-command-map-building",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Cleanup diff in Async command map building (#6492)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaa3d9087c4d6d376b1d",
    "number": 6491,
    "body": "There is no length limit on team prefixes and suffixes",
    "head_branch": "fix/team-adventure-javadocs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove unneeded @ throws from team javadocs (#6491)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aaa4d9087c4d6d376b1e",
    "number": 6490,
    "body": "Fixes permission checks for vanilla commands which don't have a\r\nrequirement, as well as for namespaced vanilla commands.\r\n\r\nCompared to #6426 this is a larger diff, but I think it's the more proper fix, as it actually addresses the issues with the existing checks rather than adding an additional check.\r\n\r\nFixes #6085",
    "head_branch": "fix-6085",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Vanilla command permission fixes (fixes #6085) (#6490)\n\nFixes permission checks for vanilla commands which don't have a\r\nrequirement, as well as for namespaced vanilla commands."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaa5d9087c4d6d376b1f",
    "number": 6489,
    "body": null,
    "head_branch": "fix/whatever-this-is",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Remove this file that got created somehow (#6489)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaa6d9087c4d6d376b20",
    "number": 6488,
    "body": "It's possible one of the serveral fixes in this PR addresses https://github.com/PaperMC/Paper/issues/5980",
    "head_branch": "readd-priority",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Readd chunk priority patch, including many chunk system fixes from tuinity (#6488)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaa7d9087c4d6d376b21",
    "number": 6486,
    "body": "Moved *everything* to LimitedRegion instead of RegionAccessor since those would just fill up your suggested methods in an IDE even more with methods you have no good reason to use outside of generation code (using LimitedRegion).",
    "head_branch": "protoworld",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Move ProtoWorld methods to LimitedRegion (#6486)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aaa8d9087c4d6d376b22",
    "number": 6485,
    "body": "Allow chorus fruit teleports to work above the nether roof by using the y value of getMaxBuildHeight() instead of getLogicalHeight() when the config option allow-chorus-teleport-above-logical-height is set to true.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaa9d9087c4d6d376b23",
    "number": 6484,
    "body": null,
    "head_branch": "permission-message-todo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use configured no permission message in PaperCommand (#6484)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaaad9087c4d6d376b24",
    "number": 6483,
    "body": "This shouldn't have been a separate patch in the first place.",
    "head_branch": "squash-clear-syncloadinfo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Squash \"Clear SyncLoadInfo\" into \"Add debug for sync chunk loads\" and add tab completion for the clear argument (#6483)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaabd9087c4d6d376b25",
    "number": 6482,
    "body": "Adds a link to https://papermc.io/downloads on the /version output when there is a newer version available for download, can be easily changed for any forks.\r\n\r\nFeatures a clickable link: https://i.imgur.com/VwL3MlA.jpg\r\nOld copy behaviour is still working as well.\r\n\r\nHopefully will encourage users to update when given a direct link and avoids inexperienced users from potentially navigating to a malware/mirror site.",
    "head_branch": "version-command-download-link",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add download link to the /version command (#6482)\n\n* Add download link to /version command\r\n\r\n* Change colors"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaacd9087c4d6d376b26",
    "number": 6481,
    "body": null,
    "head_branch": "add-missing-water-based",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add GLOW_SQUID and AXOLOTL to WATER_BASED Tag (#6481)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaadd9087c4d6d376b27",
    "number": 6480,
    "body": "Fixes #6441 (kinda)\r\n\r\nSo it was a simpler fix that I originally thought. blocked because it requires part of #5527 (specifically moving back datapack parsing)",
    "head_branch": "feature/custom-commands-in-functions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaaed9087c4d6d376b28",
    "number": 6478,
    "body": "Fixes #6476.\r\n\r\nThis also fixes the event double firing sometimes, which spigot claims to fix.",
    "head_branch": "fix-entitydeathevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix cancelling EntityDeathEvent for Armor Stands killed by players (#6478)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaafd9087c4d6d376b29",
    "number": 6474,
    "body": "Updates the setup-java action to v2.3.0 for cache option.\r\n\r\nWe can cache gradle dependencies by setup-java action now!\r\nhttps://github.com/actions/setup-java/releases/tag/v2.3.0",
    "head_branch": "update-setup-java",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aab0d9087c4d6d376b2a",
    "number": 6473,
    "body": "CraftBukkit breaks legacy world conversion in three ways:\r\n- Writes userdata to the path of the userdata folder rather than to\r\n  the correct file inside the aforementioned folder. This causes the\r\n  userdata folder to fail to be created as a file already exists at\r\n  its path.\r\n- Makes changes to how multiworld works, without modifying\r\n  McRegionUpgrader to be aware of these changes.\r\n- Calls methods on Bukkit before the server is initialized.\r\n\r\nThis patch fixes all of these issues, and also threads the\r\nMcRegionUpgrader to improve performance.",
    "head_branch": "fix-legacy-world-conversion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix and optimize legacy world conversion (#6473)\n\nCraftBukkit breaks legacy world conversion in three ways:\r\n- Writes userdata to the path of the userdata folder rather than to\r\n  the correct file inside the aforementioned folder. This causes the\r\n  userdata folder to fail to be created as a file already exists at\r\n  its path.\r\n- Makes changes to how multiworld works, without modifying\r\n  McRegionUpgrader to be aware of these changes.\r\n- Calls methods on Bukkit before the server is initialized.\r\n\r\nThis patch fixes all of these issues, and also threads the\r\nMcRegionUpgrader to improve performance."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aab1d9087c4d6d376b2b",
    "number": 6472,
    "body": "This fix prevents endermen and shulkers from teleporting onto the roof of the Nether by disallowing them from teleporting to any location above a dimension's logical height.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aab2d9087c4d6d376b2c",
    "number": 6470,
    "body": "Adds '/paper mobcaps' and '/paper playermobcaps' commands to help with debugging spawning related issues\r\n\r\n`/paper mobcaps`:\r\n![image](https://user-images.githubusercontent.com/11360596/131598175-31679fd3-d2b1-4b55-b021-1ef5735c9d77.png)\r\n\r\ncategory hover text:\r\n![image](https://user-images.githubusercontent.com/11360596/131598357-b09a10cd-5429-4fa6-82c3-200bb4a0a788.png)\r\n\r\n",
    "head_branch": "mobcaps-command",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add '/paper mobcaps' and '/paper playermobcaps' commands (#6470)\n\nAdd commands to get the mobcaps for a world, as well as the mobcaps for\r\neach player when per-player mob spawning is enabled.\r\n\r\nAlso has a hover text on each mob category listing what entity types are\r\nin said category"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aab3d9087c4d6d376b2d",
    "number": 6469,
    "body": "- Adds an EntityTypeTag for each MobCategory\r\n\r\nNot sure whether these tags should be added to API or not.\r\nThe purpose is to allow filtering entity selectors by these tags.",
    "head_branch": "paper-builtin-datapack",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aab5d9087c4d6d376b2e",
    "number": 6468,
    "body": "Added an option, because this does make commands with the target selectors with an unknown entity type tag fail with an error message instead of returning `No entity found` or something.",
    "head_branch": "fix/tag-completion-target-selectors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix entity type tags suggestions in selectors (#6468)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aab6d9087c4d6d376b2f",
    "number": 6467,
    "body": "The old location where this event was fired occurred multiple times due to physics. I've moved it into the actual event trigger, as this is deduped and only called once.",
    "head_branch": "fix/retract-piston-duplication",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix BlockPistonRetractEvent firing multiple times (#6467)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aab7d9087c4d6d376b30",
    "number": 6466,
    "body": "Fixes #6388, \r\nFixes https://github.com/PaperMC/Paper/issues/7180 \r\nand [SPIGOT-6709](https://hub.spigotmc.org/jira/browse/SPIGOT-6709)",
    "head_branch": "fix/bee-aging-in-hives",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix bees aging inside hives (#6466)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aab8d9087c4d6d376b31",
    "number": 6465,
    "body": "Saw the [spigot issue](https://hub.spigotmc.org/jira/browse/SPIGOT-6713), and decided to look around elsewhere for oddities with cancelling EntityTransformEvent, and as usual, there was an issue where Villager's deaths would be logged if it was cancelled, and they wouldn't take lightning damage if it was cancelled.",
    "head_branch": "fix/EntityTransformEvent-cancellation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aab9d9087c4d6d376b32",
    "number": 6464,
    "body": "Fixes #6458\r\n\r\nI figured that instead of trying to find all the places where this needed to be changed, I'd only attempt to \"revert\" the change where it mattered, in the tree growers.",
    "head_branch": "fix/tree-growth-capture",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Only capture actual tree growth (#6464)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aabbd9087c4d6d376b33",
    "number": 6463,
    "body": "Fixes #2503",
    "head_branch": "feature/recipe-update-API",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "API for updating recipes on clients (#6463)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aabcd9087c4d6d376b34",
    "number": 6462,
    "body": "During the 1.17 update, a bunch of parameter names changed leading to excessive diff that is not needed. This fixes one of those.",
    "head_branch": "patch/clean-up-1.17-diff",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] clean up diff from 1.17 update (#6462)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aabdd9087c4d6d376b35",
    "number": 6461,
    "body": "Inspired by #6319",
    "head_branch": "fix/PlayerGameModeChangeEvent-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Better docs for PlayerGameModeChangeEvent (#6461)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aabed9087c4d6d376b36",
    "number": 6460,
    "body": "Inspired by #6453 ",
    "head_branch": "feature/EnderSignal-API",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add API to change EnderEye target without other nonsense (#6460)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aabfd9087c4d6d376b37",
    "number": 6459,
    "body": "The other enchantment-related methods on CraftItemStack check for the existence of ItemMeta except this one so it throws an NPE if you try to remove an enchantment from an item that doesnt have any meta. 0 is the appropriate return value for an enchantment that doesn't exist.",
    "head_branch": "fix/NPE-removeEnchantment",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Prevent NPE when removing enchantment with no ItemMeta (#6459)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aac0d9087c4d6d376b38",
    "number": 6457,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nc9a46ebf #653: Add World#spawn with randomizeData parameter\r\ne49c2e3a Damageable should extend ItemMeta\r\n01ff04f4 SPIGOT-5880, SPIGOT-5567: New ChunkGenerator API\r\n\r\nCraftBukkit Changes:\r\n7c8bbcbe SPIGOT-6716: Preserve the order of stored enchantments of enchanted books.\r\n18027d02 #914: Add World#spawn with randomizeData parameter\r\n3cad0316 SPIGOT-6714: Don't fire PlayerBucketEvent when empty\r\n8c6d60cf Fix server crash with BlockPopulator when entities are at a negative chunk border\r\n4f6bcc84 SPIGOT-5880, SPIGOT-5567: New ChunkGenerator API\r\n\r\nSpigot Changes:\r\nb166a49b Rebuild patches",
    "head_branch": "pr/upstream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#6457)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nc9a46ebf #653: Add World#spawn with randomizeData parameter\r\ne49c2e3a Damageable should extend ItemMeta\r\n01ff04f4 SPIGOT-5880, SPIGOT-5567: New ChunkGenerator API\r\nca5b4b1a SPIGOT-6697: Deprecate generateTree with BlockChangeDelegate as it does not handle tiles\r\n\r\nCraftBukkit Changes:\r\n7c8bbcbe SPIGOT-6716: Preserve the order of stored enchantments of enchanted books.\r\n18027d02 #914: Add World#spawn with randomizeData parameter\r\n3cad0316 SPIGOT-6714: Don't fire PlayerBucketEvent when empty\r\n8c6d60cf Fix server crash with BlockPopulator when entities are at a negative chunk border\r\n4f6bcc84 SPIGOT-5880, SPIGOT-5567: New ChunkGenerator API\r\n78d5b35b SPIGOT-6697: Restore generateTree with BlockChangeDelegate behaviour\r\n15792f0d Rebuild patch\r\nc949675e SPIGOT-6713: Cancelling EntityTransformEvent Causes Deceased Slimes To Not Despawn\r\na955f15c Fix issues with new ChunkGenerator API\r\na0a37f41 SPIGOT-6630: Replacing an enchantment on an item creates a conflict error\r\n\r\nSpigot Changes:\r\nb166a49b Rebuild patches\r\n3c1fc60a SPIGOT-6693: Composters only take in one item at custom hopper speeds"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aac1d9087c4d6d376b39",
    "number": 6454,
    "body": "Fixes #5864 \r\n\r\nneed to relocate craftbukkit *before* the libs or stuff might get messed up, like  \r\n`META-INF/services/javax.annotation.processing.Processor`  \r\ncontaining\r\n`org.bukkit.craftbukkit.v1_17_R1.libs.org.eclipse.sisu.space.SisuIndexAPT6`  \r\nwhich is incorrect, libs aren't in the v1_17_R1 package.",
    "head_branch": "fix/cb-lib-relocation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix CB lib relocation (#6454)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aac2d9087c4d6d376b3a",
    "number": 6452,
    "body": "Fixes #6446\r\n\r\nThis ridiculous change is needed because of the following jank:  \r\n\r\n\r\nBoth `Piglin` and `Hoglin` override `Mob`s removeWhenFarAway(double) method  \r\n```java\r\n    @Override\r\n    public boolean removeWhenFarAway(double distanceSquared) {\r\n        return !this.isPersistenceRequired();\r\n    }\r\n```\r\n\r\nNow one of the reasons entities aren't counted towards the mob caps is this  \r\n```java\r\nif (entityinsentient.removeWhenFarAway(0) && entityinsentient.isPersistenceRequired()) {\r\n\tcontinue;\r\n}\r\n```\r\n\r\nSo for piglins and hoglins, that conditional will only ever be, if (true && false) or if (false && true).\r\n\r\nEDIT: Tested with breakpoints, with this patch, the continue is called and the mob is not counted.",
    "head_branch": "fix/named-piglins-hoglins-mob-cap",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't count named piglins and hoglins towards mob cap (#6452)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aac3d9087c4d6d376b3b",
    "number": 6450,
    "body": "not really sure how to deal with the filtering",
    "head_branch": "command-chat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aac4d9087c4d6d376b3c",
    "number": 6449,
    "body": null,
    "head_branch": "feature/entity-default-attributes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Get entity default attributes (#6449)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aac5d9087c4d6d376b3d",
    "number": 6448,
    "body": "Implements #6440.\n<!-- bot: paperclip-pr-build -->\n---\nDownload the paperclip jar for this pull request: [paper-6448.zip](https://nightly.link/PaperMC/Paper/actions/artifacts/487829237.zip)",
    "head_branch": "add-spider-worldborder-climbing-setting",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add config option for spider worldborder climbing (#6448)\n\nCo-authored-by: BillyGalbreath <blake.galbreath@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aac6d9087c4d6d376b3e",
    "number": 6445,
    "body": "This PR replaces #5708 and implements Adventure's `Pointer` system in the following classes:\r\n- `CraftPlayer`,\r\n- `CraftWorld`,\r\n- `CraftEntity`, and\r\n- `ServerCommandSender`.\r\n\r\nAdditionally, two methods are added to `Permissible` that retrieve an Adventure `TriState` for a given permission.",
    "head_branch": "feature/pointers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aac7d9087c4d6d376b3f",
    "number": 6444,
    "body": "This is another thing that would cause an event because of what a plugin does, like changing the world time, or weather, or teleporting an entity, or a number of other things. It can be made to bypass the event, or maybe have a bool param for calling the event, I don't know. Maybe a Reason enum for the GenericGameEvent or something.",
    "head_branch": "feature/send-game-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add API to send game events (#6444)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aac8d9087c4d6d376b40",
    "number": 6443,
    "body": null,
    "head_branch": "feature/sculk-sensor-custom-range",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Configurable sculk sensor listener range (#6443)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aac9d9087c4d6d376b41",
    "number": 6439,
    "body": null,
    "head_branch": "feature/more-missing-tags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add GameEvent tags (#6439)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aacad9087c4d6d376b42",
    "number": 6428,
    "body": "Resolves #6427 by properly spigot.yml's despawn rate in the merge check. ",
    "head_branch": "respect-despawn-rate-in-item-pickup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Respect despawn rate in merge check (#6428)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aacbd9087c4d6d376b43",
    "number": 6426,
    "body": "Close #6085\r\n\r\nThis resolves the issue of vanilla command tabcomplete, but problems occur when the namespace of a non-vanilla command is \"minecraft\". _(ex. [CommandAPI plugin](https://github.com/JorelAli/CommandAPI))_\r\n\r\nthere may be a better way to solve this issue.\r\nFeedback welcome",
    "head_branch": "pr/open/1.17/vanillacommandperm",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaccd9087c4d6d376b44",
    "number": 6425,
    "body": null,
    "head_branch": "potion-component",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aacdd9087c4d6d376b45",
    "number": 6424,
    "body": "This diff will be included in the not yet released Log4j 2.14.2 (https://github.com/apache/logging-log4j2/commit/e24e2e8901ccfff1b7e6c5b8d40b707bfc91c843#diff-4024f348bc64d36c3d1d1a7ff91e60af17a1369fe21d012ea14b71892af311d8). When Log4j 2.14.2 is released this patch should be dropped in favor of bumping Log4j.\r\n\r\nFixes #6422 and #6423",
    "head_branch": "async-appender-daemon",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Set AsyncAppender dispatch thread to be a daemon thread (#6424)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaced9087c4d6d376b46",
    "number": 6423,
    "body": "Fixes #6422 with a workaround until a Log4J update is released.",
    "head_branch": "fix-server-not-shutting-down",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aacfd9087c4d6d376b47",
    "number": 6421,
    "body": null,
    "head_branch": "bump-paperweight",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Bump paperweight to 1.1.11, update Gradle wrapper script (#6421)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aad0d9087c4d6d376b48",
    "number": 6419,
    "body": "Fixes #6416",
    "head_branch": "difficulty-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make Levels Use Correct Spawn Settings (#6419)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aad1d9087c4d6d376b49",
    "number": 6418,
    "body": "Fixes #1822 (kind of)\r\n\r\nfrom what I understand, the client has a RecipeManager as well which expects the item stack to follow the doubling behavior. that being said I think it's fine to deviate here since stacks should never be greater than 64. however, this will cause a slight flicker sometimes, doubling the stack and until the server later sets the amount it should really be at. the same flickering occurs when we set the remaining item.",
    "head_branch": "non-recipe-crafting-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aad3d9087c4d6d376b4a",
    "number": 6413,
    "body": "This is an experimental build. This means you should be careful when using it, as it contains changes that are potentially dangerous. Only play around with it if you are OK with the risks.\r\n\r\nThis PR contains all of Tuinity's patches. Very notable ones are:\r\n - Highly optimised collisions\r\n - Optimised entity lookups by bounding box (Mojang made regressions in 1.17, this brings it back to 1.16)\r\n - Starlight https://github.com/PaperMC/Starlight\r\n - Rewritten dataconverter system https://github.com/PaperMC/DataConverter\r\n - Random block ticking optimisation (wrongly dropped from Paper 1.17)\r\n - Chunk ticking optimisations\r\n - Anything else I've forgotten in the 60 or so patches\r\n\r\nIf you are a previous Tuinity user, your config _will not_ migrate. You must do it yourself. The config options have simply been moved into paper.yml, so it will be an easy migration.\r\n\r\nPlease report any issues you have with this build to this thread only. \r\n\r\nThis is the paperclip jar with these changes:\r\nhttps://cdn.discordapp.com/attachments/876902758366736457/882145779735728138/Paper-1.17.1-R0.1-SNAPSHOT.jar\r\nI will update it when needed, and write a reply when it's updated.",
    "head_branch": "merge-tuinity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge tuinity (#6413)\n\nThis PR contains all of Tuinity's patches. Very notable ones are:\r\n\r\n- Highly optimised collisions\r\n- Optimised entity lookups by bounding box (Mojang made regressions in 1.17, this brings it back to 1.16)\r\n- Starlight https://github.com/PaperMC/Starlight\r\n- Rewritten dataconverter system https://github.com/PaperMC/DataConverter\r\n- Random block ticking optimisation (wrongly dropped from Paper 1.17)\r\n- Chunk ticking optimisations\r\n- Anything else I've forgotten in the 60 or so patches\r\n\r\nIf you are a previous Tuinity user, your config will not migrate. You must do it yourself. The config options have simply been moved into paper.yml, so it will be an easy migration. However, please note that the chunk loading options in tuinity.yml are NOT compatible with the options in paper.yml. \r\n\r\n* Port tuinity, initial patchset\r\n\r\n* Update gradle to 7.2\r\n\r\njmp said it fixes rebuildpatches not working for me. it fucking better\r\n\r\n* Completely clean apply\r\n\r\n* Remove tuinity config, add per player api patch\r\n\r\n* Remove paper reobf mappings patch\r\n\r\n* Properly update gradlew\r\n\r\n* Force clean rebuild\r\n\r\n* Mark fixups\r\n\r\nComments and ATs still need to be done\r\n\r\n* grep -r \"Tuinity\"\r\n\r\n* Fixup\r\n\r\n* Ensure gameprofile lastaccess is written only under the state lock\r\n\r\n* update URL for dataconverter\r\n\r\n* Only clean rebuild tuinity patches\r\n\r\nmight fix merge conflicts\r\n\r\n* Use UTF-8 for gradlew\r\n\r\n* Clean rb patches again\r\n\r\n* Convert block ids used as item ids\r\n\r\nNeither the converters of pre 1.13 nor DFU handled these cases,\r\nas by the time they were written the game at the time didn't\r\nconsider these ids valid - they would be air. Because of this,\r\nsome worlds have logspam since only DataConverter (not DFU or\r\nlegacy converters) will warn when an invalid id has been\r\nseen.\r\n\r\nWhile quite a few do need to now be considered as air, quite a lot\r\ndo not. So it makes sense to add conversion for these items, instead\r\nof simply suppressing or ignoring the logs. I've now added id -> string conversion\r\nfor all block ids that could be used as items that existed in the game\r\nbefore 1.7.10 (I have no interest in tracking down the\r\nexact version block ids stopped working) that were on\r\nhttps://minecraft-ids.grahamedgecombe.com/\r\n\r\nItems that did not directly convert to new items will\r\nbe instead converted to air: stems, wheat crops, piston head,\r\ntripwire wire block\r\n\r\n* Fix LightPopulated parsing in V1466\r\n\r\nThe DFU code was checking if the number existed, not if it\r\ndidn't exist. I misread the original code.\r\n\r\n* Always parse protochunk light sources unless it is marked as non-lit\r\n\r\nChunks not marked as lit will always go through the light engine,\r\nso they should always have their block sources parsed.\r\n\r\n* Update custom names to JSON for players\r\n\r\nMissed this fix from CB, as it was inside\r\nthe DataFixers class.\r\n\r\nI decided to double check all of the CB changes again:\r\n\r\nDataFixers.java was the only area I missed, as I had inspected all\r\ndatafixer diffs and implemented them all into DataConverter. I also\r\nchecked Bootstrap.java again, and re-evaluated their changes. I had\r\npreviously done this, but determined that they were all bad.\r\n\r\nThe changes to make standing_sign block map to oak_sign block in\r\nV1450 is bad, because that's not the item id V1450 accepts. Only\r\nin 1.14 did oak_sign even exist, and as expected there is a converter\r\nto rename all existing sign items/blocks.\r\n\r\nThe fix to register the portal block under id 1440 is useless, as\r\nthe flattenning logic will default to the lowest registered id - which\r\nis the exact blockstate that CB registers into 1440. So it just\r\ndoesn't do anything.\r\n\r\nThe extra item ids in the id -> string converter are already added,\r\nbut I found this from EMC originally.\r\n\r\nThe change for the spawn egg id 23 -> Arrow is just wrong,\r\nthat id DOES correspond to TippedArrow, NOT Arrow. As\r\nexpected, the spawn egg already has a dedicated mapping for\r\nArrow, which is id 10 - which was Arrow's entity id.\r\n\r\nI also ported a fix for the cooked_fished id update. This doesn't\r\nreally matter since there is already a dataconverter to fix this,\r\nbut the game didn't accept cooked_fished at the time. So I see\r\nno harm.\r\n\r\n* Review all converters and walkers\r\n\r\n- Refactor V99 to have helper methods for defining entity/tile\r\n  entity types\r\n- Automatically namespace all ids that should be namespaced.\r\n  While vanilla never saved non-namespaced data for things that\r\n  are namespaced, plugins/users might have.\r\n- Synchronised the identity ensure map in HelperBlockFlatteningV1450\r\n- Code style consistency\r\n- Add missing log warning in V102 for ITEM_NAME type conversion\r\n- Use getBoolean instead of getByte\r\n- Use ConverterAbstractEntityRename for V143 TippedArrow -> Arrow\r\n  rename, as it will affect ENTITY_NAME type\r\n- Always set isVillager to false in V502 for Zombie\r\n- Register V808's converter under subversion 1 like DFU\r\n- Register a breakpoint for V1.17.1. In the future, all final\r\n  versions of major releases will have a breakpoint so that\r\n  the work required to determine if a converter needs a breakpoint\r\n  is minimal\r\n- Validate that a dataconverter is only registered for a version\r\n  that is registered\r\n- ConverterFlattenTileEntity is actually ConverterFlattenEntity\r\n  It even registered the converters under TILE_ENTITY, instead of\r\n  ENTITY.\r\n- Fix id comparison in V1492 STRUCTURE_FEATURE renamer\r\n- Use ConverterAbstractStatsRename for V1510 stats renamer\r\n  At the time I had written that class, the abstract renamer didn't\r\n  exist.\r\n- Ensure OwnerUUID is at least set to empty string in\r\n  V1904 if the ocelot is converted to a cat (this is\r\n  likely so that it retains a collar)\r\n- Use generic read/write for Records in V1946\r\n  Records is actually a list, not a map. So reading map was\r\n  invalid.\r\n\r\n* Always set light to zero when propagating decrease\r\n\r\nThis fixes an almost infinite loop where light values\r\nwould be spam queued on a very small subset on blocks.\r\n\r\nThis also likely fixes the memory issues people were\r\nseeing.\r\n\r\n* re-organize patches\r\n\r\n* Apply and fix conflicts\r\n\r\n* Revert some patches\r\n\r\ngetChunkAt retains chunks so that plugins don't spam loads\r\nrevert mc-4 fix will remain unless issues pop up\r\n\r\n* Shuffle iterated chunks if per player is not enabled\r\n\r\nCan help with some mob spawning stacking up at locations\r\n\r\n* Make per player default, migrate all configs\r\n\r\n* Adjust comments in fixups\r\n\r\n* Rework config for player chunk loader\r\n\r\nOld config is not compatible. Move all configs to be\r\nunder `settings` in paper.yml\r\n\r\nThe player chunk loader has been modified to\r\nless aggressively load chunks, but to send\r\nchunks at higher rates compared to tuinity. There are\r\nnew config entries to tune this behavior.\r\n\r\n* Add back old constructor to CompressionEncoder/Decoder (fixes\r\n Tuinity #358)\r\n\r\n* Raise chunk loading default limits\r\n\r\n* Reduce worldgen thread workers for lower core count cpus\r\n\r\n* Raise limits for chunk loading config\r\n\r\nAlso place it under `chunk-loading`\r\n\r\n* Disable max chunk send rate by default\r\n\r\n* Fix conflicts and rebuild patches\r\n\r\n* Drop default send rate again\r\n\r\nAppears to be still causing problems for no known reason\r\n\r\n* Raise chunk send limits to 100 per player\r\n\r\nWhile a low limit fixes ping issues for some people, most people\r\ndo not suffer from this issue and thus should not suffer from\r\nan extremely slow load-in rate.\r\n\r\n* Rebase part 1\r\n\r\nAutosquash the fixups\r\n\r\n* Move not implemented up\r\n\r\n* Fixup mc-dev fixes\r\n\r\nMissed this one\r\n\r\n* Rebase per player viewdistance api into the original api patch\r\n\r\n* Remove old light engine patch part 1\r\n\r\nThe prioritisation must be kept from it, so that part\r\nhas been rebased into the priority patch.\r\nPart 2 will deal with rebasing all of the patches _after_\r\n\r\n* Rebase remaining patches for old light patch removal\r\n\r\n* Remove other mid tick patch\r\n\r\n* Remove Optimize-PlayerChunkMap-memory-use-for-visibleChunks.patch\r\n\r\nReplaced by `Do not copy visible chunks`\r\n\r\n* Revert AT for Vec3i setX/Y/Z\r\n\r\nThe class is immutable. set should not be exposed\r\n\r\n* Remove old IntegerUtil class\r\n\r\n* Replace old CraftChunk#getEntities patch\r\n\r\n* Remove import for SWMRNibbleArray in ChunkAccess\r\n\r\n* Finished merge checklist\r\n\r\n* Remove ensureTickThread impl in urgency patch\r\n\r\nCo-authored-by: Spottedleaf <Spottedleaf@users.noreply.github.com>\r\nCo-authored-by: Jason Penilla <11360596+jpenilla@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aad4d9087c4d6d376b4b",
    "number": 6409,
    "body": "Fixes #6408 ",
    "head_branch": "fix/player-spawnpoint",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix yaw on player spawn (#6409)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aad5d9087c4d6d376b4c",
    "number": 6406,
    "body": null,
    "head_branch": "entitymoveevent-note",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add note about EntityMoveEvent not firing for players (#6406)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aad6d9087c4d6d376b4d",
    "number": 6402,
    "body": "Closes #6401.\r\n\r\nEntityMoveEvent doesn't look like it should fire for players, as it's fired in `LivingEntity#aiStep`. Players jumping still fired this event. This PR checks if the entity isn't a player before firing the event.",
    "head_branch": "dont-fire-entitymoveevent-for-players",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't fire entitymovevent for players. (#6402)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aad7d9087c4d6d376b4e",
    "number": 6400,
    "body": "Noticed this was missing when I went looking for it for a thing. I created a PaperRegistry interface for putting ones Paper adds cause its not unreasonable that upstream will add them, and if there's a slightly different name, I **really** wouldn't want both in the same class. Can deprecate these if upstream ever adds any. \r\n\r\nMore can be added to this patch when needed.",
    "head_branch": "feature/paper-registry",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add STRUCTURE_TYPE registry entry (#6400)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aad8d9087c4d6d376b4f",
    "number": 6398,
    "body": null,
    "head_branch": "fix/map-cursor-update-interval",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix possible divide by 0 error with cursor updates (#6398)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aad9d9087c4d6d376b50",
    "number": 6394,
    "body": "literally free performance!\r\n\r\ndidn't test yet cause am busy, I wanna test this on dyescape since thats where we noticed this (is really nobody else using my api? :/)\r\n\r\n![image](https://user-images.githubusercontent.com/2185527/129446117-d00c8e29-5eed-4d4a-ba0c-9bc5558d95dd.png)\r\n",
    "head_branch": "fix-mob-goal-leak",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix Mob Goal Leak (#6394)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aadbd9087c4d6d376b51",
    "number": 6393,
    "body": "Backports my previous PR #6385 to 1.16",
    "head_branch": "feature/backport-cursor-interval-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aadcd9087c4d6d376b52",
    "number": 6392,
    "body": "Fixes [SPIGOT-6618](https://hub.spigotmc.org/jira/browse/SPIGOT-6618).\r\n\r\nThis doesn't actually change any behavior on the server side of things because Paper only counts mobs that have a `NATURAL` SpawnReason and fish/axolotls from buckets have a `SPAWNER_EGG` reason, but it does affect what is returned by the api method `LivingEntity#getRemoveWhenFarAway` which would've returned false for fish/axolotls without this change.",
    "head_branch": "fix/fish-bucket-persistence",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Mark fish and axolotls from buckets as persistent (#6392)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaddd9087c4d6d376b53",
    "number": 6391,
    "body": "Fixes #6389",
    "head_branch": "fix/bucket-dispense",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Clear bucket NBT after dispense (#6391)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaded9087c4d6d376b54",
    "number": 6390,
    "body": null,
    "head_branch": "named-entity-logging-config-migration",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add config migration for named entity death logging option (#6390)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aadfd9087c4d6d376b55",
    "number": 6387,
    "body": "Fixes the issue shown in [this video](https://www.youtube.com/watch?v=jfAkBd4kMHQ) where drops from breaking blocks lose precision in their position and end up 1-2 blocks in the wrong direction, sometimes inside of walls, when the block pos is in the tens of millions.",
    "head_branch": "fix-far-out-block-drops",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix block drops position losing precision millions of blocks out (#6387)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aae0d9087c4d6d376b56",
    "number": 6385,
    "body": "Adds a config option in order to make the interval at which the green arrows maps in item frames sometimes have are updated. The aim of this patch is to improve performance in situations where there are a lot of maps in item frames, while keeping maps functionally the same.",
    "head_branch": "feature/map-cursor-interval",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Configurable item frame map cursor interval (#6385)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aae2d9087c4d6d376b57",
    "number": 6384,
    "body": "This is no longer needed as Entity#passengers is an ImmutableList as of 1.17",
    "head_branch": "remove-redundant-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Drop \"Fix CME on adding a passenger in CreatureSpawnEvent\" (#6384)\n\nThis is no longer needed as Entity#passengers is an ImmutableList as of 1.17"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aae3d9087c4d6d376b58",
    "number": 6383,
    "body": "Signed-off-by: Mariell Hoversholm <proximyst@proximyst.com>",
    "head_branch": "reduce-sysout-nags",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add timeout & interval to sysout catcher (#6383)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aae4d9087c4d6d376b59",
    "number": 6381,
    "body": "It's my opinion that this patch causes more issues than it solves. I haven't seen any actual real world benefit from async logging, however I have experienced headaches due to the issues it causes.\r\n\r\nMany libraries make use of thread context for error logging, and it's quite annoying when what should be an informative exception message, turns into something like [this](https://gist.github.com/jpenilla/3a641ae9063e2a06d6e697210260045b).\r\n\r\nThis is an issue both during plugin development/debugging, as well as in production.\r\n\r\nMany developers already disable async logging for testing, see https://github.com/broccolai/tickets/blob/e20bc28e9d8ccf5b2559924e66783ec6d2ea6b43/plugin/bukkit/build.gradle.kts#L68 and https://github.com/Hexaoxide/Carbon/blob/74e83a08a02b3344cab19a1c4d2c031d5e606d3b/bukkit/build.gradle.kts#L39 for two examples off the top of my head, but I'm sure there are countless others which do similar.\r\n\r\nAnd again, disabling it during development does not solve the issue, as end users will run into this as well, leading developers to instruct users to run their server with special flags just to get a usable error message.\r\n\r\nCloses #4155\r\n\r\nEdit: Rather than completely removing async logging, this PR now uses an `AsyncAppender` to move logging IO off the main thread rather than the `AsyncLoggerContextSelector`, which was causing the linked issue.",
    "head_branch": "remove-async-logging",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use AsyncAppender instead of AsyncLoggerContextSelector to keep loggging IO off main thread (#6381)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aae5d9087c4d6d376b5a",
    "number": 6379,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n97445251 Update ASM\r\n8301151f Add dimension setting getters to World\r\n\r\nCraftBukkit Changes:\r\n61e4ca7b Update ASM and add support for Java 17\r\nc30e8f8d PR-913: Handle campfire damage with EntityDamageByBlockEvent\r\n6cfc062a Add dimension setting getters to World\r\n97a4f34a SPIGOT-2222, SPIGOT-6687: Pre-set keepLevel and only use it\r\n\r\nSpigot Changes:\r\nff89b973 Add log-named-deaths option",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#6379)\n\nCo-authored-by: Jason Penilla <11360596+jpenilla@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aae6d9087c4d6d376b5b",
    "number": 6378,
    "body": "Previously the upstream FurnaceStartSmeltEvent would default to the\r\nrecipes cooking time, ignoring any modifications from the furnace speed\r\nmultiplier.\r\nWhile this works correctly for upstream, paper introduces the speed\r\nmultiplier API, which allows a different cook time from the one provided\r\nby the recipe.\r\n\r\nThis commit now passes the modified cooktime to the furnace start smelt\r\nevent explicitly, instead of allowing the event to default to the\r\nrecipes cooking time, thus ensuring that the speed modifier is\r\nrespected.\r\n\r\nResolves: #6376\r\n\r\n----------------------------------------------------------------------------------\r\n\r\n### Alternatives\r\nAnother possible solution to this issue was proposed by @NoahvdAa in #6376 which shifts the calculation logic into the event constructor:\r\n```patch\r\n-        this.totalCookTime = recipe.getCookingTime();\r\n+        this.totalCookTime = (int) Math.ceil(recipe.getCookingTime() / ((org.bukkit.block.Furnace) furnace.getState()).getCookSpeedMultiplier());\r\n```\r\n",
    "head_branch": "bugfix/furnace-cook-speed-multiplier",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Apply furnace cook speed multiplier through event (#6378)\n\nPreviously the upstream FurnaceStartSmeltEvent would default to the\r\nrecipes cooking time, ignoring any modifications from the furnace speed\r\nmultiplier.\r\nWhile this works correctly for upstream, paper introduces the speed\r\nmultiplier API, which allows a different cook time from the one provided\r\nby the recipe.\r\n\r\nThis commit now passes the modified cooktime to the furnace start smelt\r\nevent explicitly, instead of allowing the event to default to the\r\nrecipes cooking time, thus ensuring that the speed modifier is\r\nrespected.\r\n\r\nResolves: #6376"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aae7d9087c4d6d376b5c",
    "number": 6377,
    "body": null,
    "head_branch": "team-inconsistencies",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aae8d9087c4d6d376b5d",
    "number": 6374,
    "body": null,
    "head_branch": "obfhelper-methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Add some helper methods to the `ObfHelper` util class (#6374)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aae9d9087c4d6d376b5e",
    "number": 6372,
    "body": "Follows up #4947 since sadly it doesn't look like it'll get updated.\r\n\r\nRebased with new packages and 1.17 and did all the requested changes along with some cleanup.\r\nPersonally tested on a droplet with fake hardware dates.\r\n\r\nLet me know if I fucked anything up/need to change anything.",
    "head_branch": "add-halloweenchecker",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaead9087c4d6d376b5f",
    "number": 6371,
    "body": "Closes #6348 ",
    "head_branch": "feature/more-EntityChangeBlockEvent-fires",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fire EntityChangeBlockEvent in more places (#6371)\n\n* fire EntityChangeBlockEvent in more places\n\n* Rebuild patches\n\nCo-authored-by: Shane Freeder <theboyetronic@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaebd9087c4d6d376b60",
    "number": 6368,
    "body": "closes #6367 ",
    "head_branch": "mapping-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add reobf mappings patch for MinecraftServer#getLootTables (#6368)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaecd9087c4d6d376b61",
    "number": 6366,
    "body": "[Partially inspired by a similar Lithium optimization](https://github.com/CaffeineMC/lithium-fabric/commit/5aaed7b9a5d079aab489dcf113702bfb0d030f21) but more tailored, focusing on `Entity#getIndirectPassengers()` which is invoked at least as many times as there are entities being tracked in the entity tracker.",
    "head_branch": "opt/indirect-passenger-iteration",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimize indirect passenger iteration (#6366)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaedd9087c4d6d376b62",
    "number": 6365,
    "body": "Closes #6286 \r\n\r\nAm unsure what patch this would be best in, maybe `Fix upstream javadoc warnings and errors`?\r\n\r\nAlso, any suggestions on better wording would be good.",
    "head_branch": "fix/getOfflinePlayers-warning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add warning to getOfflinePlayers (#6365)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aaeed9087c4d6d376b63",
    "number": 6362,
    "body": "With the addition of deepslate in 1.17, the anti xray configuration was\r\nupdated to include the deepslate variants of the ores in regards to\r\nhiding them.\r\nDuring this change, the fact that most surrounding blocks are deepslate\r\nwas overlooked and hence anti-xray engine 2 did not have any blocks to\r\nobfuscate the ores with.\r\n\r\nThis commit fixes that by adding the deepslate block to the default\r\nvalues on config generation.\r\n\r\nNotably, this will not forceably add the deepslate default to existing\r\nconfigs, hence old config files will need to be manually edited.\r\n\r\nResolves: #6350",
    "head_branch": "bugfix/deepslate-default-xray-replacement",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add deepslate as xray engine 2 replacement default (#6362)\n\nFixes: #6350"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaefd9087c4d6d376b64",
    "number": 6361,
    "body": "When a `ServerEntity` instance is first constructed, it uses a pre-Java 9 empty collection, but passengers use Guava `ImmutableList`. When comparing the two collections via `Object#equals`, we miss out on an opportunity to reduce the check to little more than a reference equality check (which is very fast).\r\n\r\nNoticed this while working on Krypton.",
    "head_branch": "opt/entity-tracker-passenger-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimize entity tracker passenger checks (#6361)\n\nWhen a ServerEntity instance is first constructed, it uses a pre-Java 9 empty collection,\r\nbut passengers use Guava ImmutableList. When comparing the two collections via Object#equals\r\nwe miss out on an opportunity to reduce the check to little more than a reference equality\r\ncheck (which is very fast)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaf0d9087c4d6d376b65",
    "number": 6360,
    "body": "Opted to use Guava's `Ints.tryParse(String)` because it's faster than checking with a regex pattern like how [Sponge does it](https://github.com/SpongePowered/Sponge/blob/ffb81f51a97c06b8bf6692e41aebb8bcd38b1195/src/main/java/org/spongepowered/common/util/CommandUtil.java#L62-L70).",
    "head_branch": "numeric-string-completions-as-int-completions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add numeric string completion suggestions as int suggestions (#6360)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaf1d9087c4d6d376b66",
    "number": 6359,
    "body": "Useful to find what plugin is responsible for an annoying thing.\r\n\r\nNo idea if that Component usage is anywhere near reasonable, haven't actually used Adventure much.",
    "head_branch": "dumplisteners-command",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaf2d9087c4d6d376b67",
    "number": 6358,
    "body": "Fixes #6357",
    "head_branch": "fix/y-level-player-login",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaf3d9087c4d6d376b68",
    "number": 6356,
    "body": "Adds #6349 . The event exposes the player who composted, the composter block, the item stack used, whether or not the level will be raised (settable), the level the composter currently has and it is of course cancellable.",
    "head_branch": "add-playercompostitemevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CompostItemEvent and EntityCompostItemEvent (#6356)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aaf4d9087c4d6d376b69",
    "number": 6355,
    "body": "This PR adds a configurable entity tracking view distance, which is the chunk distance to which entities are tracked for players. Before, this would always be equal to the ticked view distance. The added configuration option defaults to -1, which makes it the same as the effective no-tick view distance. It also adds a small exposed API to change this.\r\n\r\nThis is a similar, slightly more general version of #5308 - rebased to latest changes (addresses #5277).\r\n\r\nWhy the need for a configuration option? I use the plugin [FartherViewDistance](https://www.spigotmc.org/resources/fartherviewdistance.84950/), which has significantly more CPU cost than PaperMC, but allows for per-player view distances. This means that I may want to use a Paper no-tick view distance of 4, while making entities tracked until 10 chunks away.\r\n\r\nAdditionally, tracking entities still consumes resources in some form (updating the ChunkMap data), or there may be other reasons why someone may wish to set this setting LOWER than the no-tick view distance, which many servers have set to high values.\r\n\r\nScreenshot (turtles at the beach):\r\nhttps://i.imgur.com/BE25HPc.png\r\n(Using view distance 2, no-tick view distance 2, maximum view distance in FartherViewDistance set to 25, entity tracking view distance 11, Optifine client (view distance 32, default entity distance 100%))",
    "head_branch": "feature/entitytrackingviewdistance",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaf5d9087c4d6d376b6a",
    "number": 6353,
    "body": "Per @Brokkonaut's comment on the commit, I did further testing and found this clone necessary to not change the stack already moved to the other inventory.",
    "head_branch": "fix/hopper-max-stack-size",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "clone itemstack to return remaining stack (#6353)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaf6d9087c4d6d376b6b",
    "number": 6352,
    "body": "Fixes #6351 ",
    "head_branch": "fix/my-stupid-mistake",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing DamageCause for EntityDamageByBlockEvent (#6352)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaf7d9087c4d6d376b6c",
    "number": 6345,
    "body": "Currently in craftbukkit (i make PR craftbukkit#905 but its freeze for.. dont know why) the bed explosion is handle only when the world is not natural (nether, end type) and the result for sleep is NOT_POSSIBLE_HERE.\r\n\r\nIn vanilla the config \"natural\" only define for this case if the player can or not sleep and save spawn point, the config bed_works define in the false case for explode the bed.\r\n\r\nThen this PR add the config bed_works for return NOT_POSSIBLE_HERE and in the event for bed explode check for the value of bed_works.\r\n\r\nNote: not sure if is better modify the patch for the bed events.. but i dont know how to make and not explode the repository...",
    "head_branch": "sleepfixs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix bed explosions in custom worlds (#6345)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaf8d9087c4d6d376b6d",
    "number": 6343,
    "body": "`slf4j-api` was previously brought in via an `implementation`, which obviously won't expose it.",
    "head_branch": "promote-slf4j-api-to-api",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix: promote slf4j-api to api scope (#6343)\n\nSigned-off-by: Mariell Hoversholm <proximyst@proximyst.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaf9d9087c4d6d376b6e",
    "number": 6342,
    "body": "As @CubBossa mentioned in #6298, it's probably a better and easier solution to create an easy to use config option, rather than having to install a log filter plugin.\r\n\r\nMinecraft has a few log messages where the IP address is the only identifier, right now the PR just replaces the IP with an empty string. Would it be a better idea to use something like \"CENSORED IP\" to indicate that there should have been an IP there? (for example the line `Failed to handle packet for {}`, where {} is the player's ip).",
    "head_branch": "log-player-ip-addresses",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add config setting for logging player ip addresses. (#6342)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aafad9087c4d6d376b6f",
    "number": 6341,
    "body": "This PR adds a new method to the PlayerPostRespawnEvent event, isAnchorSpawn(), to check if the respawn was due to an anchor.",
    "head_branch": "PlayerPostRespawnEventAnchorCheck",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aafbd9087c4d6d376b70",
    "number": 6338,
    "body": "The new API added has been tested, and new overloads for the Adventure variants have been added, as well as a new deprecation for the new legacy Bukkit API.\r\n\r\n---\r\n\r\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\ne0598aa2 SPIGOT-6692: Add sendSignChange overload with a hasGlowingText parameter\r\n\r\nCraftBukkit Changes:\r\n2cdc6b1e4 SPIGOT-6692: Add sendSignChange overload with a hasGlowingText parameter",
    "head_branch": "upstream-merge",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "rebase"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aafcd9087c4d6d376b71",
    "number": 6337,
    "body": "The previously existing toBuilder method defined on the CraftMetaBook\r\nwould, no matter if called on a writable or written book, return a\r\nbuilder targetting a writable book, in which complex components, such as\r\nhover or click text are not allowed.\r\n\r\nThe builer hence serializes the page components using LEGACY_UXRC to\r\nensure only colour may be passed. While this works as intented for\r\nwritable books, the builder fails to fully support the complex\r\ncomponents that may be used in a written book.\r\n\r\nThis commit implemements a child class of the CraftMetaBookBuilder, the\r\nCraftMetaBookSignedBuilder, which builds to a CraftMetaBookSigned\r\ninstance and hence serializes the pages to json.\r\nThis builder instance is automatically supplied when calling toBuilder\r\non a CraftMetaBookSigned instance.\r\n\r\nResolves: #6296\r\n\r\n------------------------------------------------------------------------------------\r\n\r\nSidenote to the layout of this change.\r\nCurrently most of the \"is this book actually a written book\" checks happen in the `CraftMetaBook` class, not in the respective child class. Another possible implementation (closer to the current location of the checks) could hence be a boolean passed to the book builder that indicates whether or not the builder should target a signed/written book or not.\r\n",
    "head_branch": "bugfix/written-book-meta-builder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Support complex components in written book builder (#6337)\n\nThe previously existing toBuilder method defined on the CraftMetaBook\r\nwould, no matter if called on a writable or written book, return a\r\nbuilder targetting a writable book, in which complex components, such as\r\nhover or click text are not allowed.\r\n\r\nThe builer hence serializes the page components using LEGACY_UXRC to\r\nensure only colour may be passed. While this works as intented for\r\nwritable books, the builder fails to fully support the complex\r\ncomponents that may be used in a written book.\r\n\r\nThis commit implemements a child class of the CraftMetaBookBuilder, the\r\nCraftMetaBookSignedBuilder, which builds to a CraftMetaBookSigned\r\ninstance and hence serializes the pages to json.\r\nThis builder instance is automatically supplied when calling toBuilder\r\non a CraftMetaBookSigned instance.\r\n\r\nResolves: #6296"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aafdd9087c4d6d376b72",
    "number": 6336,
    "body": "Added a goat ram API. I don't know if this is the proper way to do this, or even if it's possible, but please bear with me",
    "head_branch": "goat_api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Goat ram API (#6336)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aafed9087c4d6d376b73",
    "number": 6335,
    "body": "Adds API functionality for changing and getting a ServerOperator's OP permission level.\r\n\r\nCan be used to protect commands especially sensitive commands.\r\nFor example, from players who has operator status on a single server, but isn't supposed to be able to give themselves a permission group on the entire network.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aaffd9087c4d6d376b74",
    "number": 6333,
    "body": "This PR adds support for the `VELOCITY_SECRET` environment variable, which can be used as an alternative to the config parameter. (#6332)",
    "head_branch": "velocity-secret-environment",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab01d9087c4d6d376b75",
    "number": 6331,
    "body": "This PR fixes #6307 and makes changes made in ItemDropEvent reflect in the ITEM_DROPPED stat.",
    "head_branch": "fix-item_dropped-stat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix ITEM_DROPPED stat not working properly (#6331)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab01d9087c4d6d376b76",
    "number": 6330,
    "body": "This PR aims to temporarily fix # 6329 until the upstream issue is fixed. The patch checks if the item being moved is bigger than the max stack size of the container, if it is, the number of items transferred will be limited.",
    "head_branch": "limit-hopper-to-max-container-stack-size",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab02d9087c4d6d376b77",
    "number": 6327,
    "body": "Provides a method for getting and filtering all entities within the tracking range of a Player. Resolves #5300 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab03d9087c4d6d376b78",
    "number": 6326,
    "body": "Provides a method for getting entities within the tracking range of a player. The results can be filtered by class. Resolves #5300.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab05d9087c4d6d376b79",
    "number": 6325,
    "body": "This object is created so often that it likely creates problems with the ThreadLocalMap because the weak references can't be cleaned up fast enough. This has manifest as lag seemingly caused by WorldEdit: https://github.com/EngineHub/WorldEdit/issues/1668.",
    "head_branch": "bugfix/reduce-threadlocal-churn",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Replace ThreadLocal with ConcurrentHashMap in CommandSourceStack (#6325)\n\nThis object is created so often that it likely creates problems with the\r\nThreadLocalMap because the weak references can't be cleaned up fast\r\nenough. This has manifest as lag seemingly caused by WorldEdit:\r\nhttps://github.com/EngineHub/WorldEdit/issues/1668"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab05d9087c4d6d376b7a",
    "number": 6322,
    "body": "…characters with OutputStreamWriter\r\n\r\nNo clue why I didn't see it before\r\n\r\nFixes #6321\r\n\r\nTested both - with and without writing comments, using motd provided in `server.properties` in the issue.",
    "head_branch": "fix_server_properties_writer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix writing server.properties with wrong encoding (#6322)\n\nFixes #6321"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab07d9087c4d6d376b7b",
    "number": 6318,
    "body": "This PR aims to fix #6316 by allowing server owners to disable sending unnecessary itemmeta (that could provide an advantage to cheat clients) to clients. To be specific:\r\n- item count is set to 1 and damage is reset to 0.\r\n- display.Lore and display.Name are removed.\r\n- If Enchantments is set, the list is replaced with a list containing an empty tag. (So the client still renders the item with the enchantment glow).\r\n- AttributeModifiers are removed completely.\r\n\r\nThis can be toggled with `hide-itemmeta-from-clients` in paper.yml.\r\nPlease let me know if I've missed any tags.",
    "head_branch": "hide-itemmeta-from-clients",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Hide unnecessary itemmeta from clients (#6318)\n\nCo-authored-by: Nassim Jahnke <jahnke.nassim@gmail.com>\r\nCo-authored-by: Jake Potrebic <jake.m.potrebic@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab08d9087c4d6d376b7c",
    "number": 6314,
    "body": "Fixes GH-6312.\r\n\r\nSigned-off-by: Mariell Hoversholm <proximyst@proximyst.com>",
    "head_branch": "fix-boats",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix: boats' bounding boxes must be deflated, not inflated (#6314)\n\nFixes GH-6312.\r\n\r\nSigned-off-by: Mariell Hoversholm <proximyst@proximyst.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab09d9087c4d6d376b7d",
    "number": 6310,
    "body": "This PR (resolve #6305) allow configure height limits to the slime spawn based in the current rules from vanilla:\r\n\r\n- Min height in Swamp Biomes\r\n- Max height in Swamp Biomes\r\n- Max height  in Slime Chunks\r\n\r\nDocs: PaperMC/PaperDocs#106",
    "head_branch": "slime-config",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add configurable height for slime spawn per world (#6310)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab0ad9087c4d6d376b7e",
    "number": 6308,
    "body": "[resubmission of a corrected pull as I accidentally closed the previous #6301]\r\n\r\nThis patch solves #5189 where entities in slime blocks are unreliable\r\nin PaperMC. This is known to break some contraptions like the ice road\r\nmaker mentionend there.\r\n\r\nThe removal of 1/4 of all ticks for an entity that takes place in\r\nActivationRange.checkIfActive() results in an entity like e.g.\r\nan armor stand not noticing that it has had setDeltaMovement() called.\r\nThe result is that an armor stand inside a slime block gets left behind\r\n1/4 of the pushes.\r\n\r\nThere were already some hard coded logic in checkIfActive to not apply\r\nthe culling in some circumstances. The attach patch takes a slightly\r\ndifferent approach and adds a general mechanism where the entity knows\r\nhow many ticks into the future that it has to be fully ticked and\r\nActivationRange queries that.\r\n\r\nAnother approach would be to just have a \"wasMovedByPiston\" memory in\r\nthe entity and have the timing logic in ActivationRange. I prepared a\r\npatch for that as well in case that is preferable. All things being\r\nequal I thought it better to submit the more general patch if more cases\r\nof needing to temporarily override the tick culling.\r\n\r\nAs dicussed on the discord channel this patch does not affect the\r\nconfigration option to not tick armor stands as that is handled\r\nin ArmorStand.tick().",
    "head_branch": "fix_entity_push",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix entities glitching through blocks pushed by pistons (#6308)\n\nFixes #5189"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ab0bd9087c4d6d376b7f",
    "number": 6306,
    "body": "I merged 3 patches into one as they only added a few lines and were therefore unnecessary. I also updated Gradle to version 7.1.1 and the dependencies of the Paper-MojangAPI to the latest version.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab0cd9087c4d6d376b80",
    "number": 6304,
    "body": "Follow up on #6302 ",
    "head_branch": "map-inconsistencies",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix some inconsistency issues with empty map items (#6304)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab0dd9087c4d6d376b81",
    "number": 6302,
    "body": "There's two fixes here:\r\n\r\n1. A NPE which can be triggered by a creative player giving themselves a map with no id.\r\n2. Unnecessary map lookup when the id is less than 0, which CraftBukkit conveniently returns instead of null in getMapId.",
    "head_branch": "fix/map-npe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Correct handling of invalid maps (#6302)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab0ed9087c4d6d376b82",
    "number": 6301,
    "body": "This patch solves #5189 where entities in slime blocks are unreliable\r\nin PaperMC. This is known to break some contraptions like the ice road\r\nmaker mentionend there.\r\n\r\nThe removal of 1/4 of all ticks for an entity that takes place in\r\nActivationRange.checkIfActive() results in an entity like e.g.\r\nan armor stand not noticing that it has had setDeltaMovement() called.\r\nThe result is that an armor stand inside a slime block gets left behind\r\n1/4 of the pushes.\r\n\r\nThere were already some hard coded logic in checkIfActive to not apply\r\nthe culling in some circumstances. The attach patch takes a slightly\r\ndifferent approach and adds a general mechanism where the entity knows\r\nhow many ticks into the future that it has to be fully ticked and\r\nActivationRange queries that.\r\n\r\nAnother approach would be to just have a \"wasMovedByPiston\" memory in\r\nthe entity and have the timing logic in ActivationRange. I prepared a\r\npatch for that as well in case that is preferable. All things being\r\nequal I thought it better to submit the more general patch if more cases\r\nof needing to temporarily override the tick culling.\r\n\r\nAs dicussed on the discord channel this patch does not affect the\r\nconfigration option to not tick armor stands as that is handled\r\nin ArmorStand.tick().\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab0fd9087c4d6d376b83",
    "number": 6300,
    "body": "Hello,\r\n\r\nI saw ParticleBuilder class didn't have any getter for the `force` private field. So I added one with the same logic than other fields : same name for getter and setter methods but parameters and return value change, that's why the method I added is called `force()` and not `hasForce()` or something like that.\r\n\r\nThat's my first pull request with patches, let me know if I did something wrong but I think it's okay.\r\n\r\nThank you !",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add force getter to ParticleBuilder (#6300)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ab10d9087c4d6d376b84",
    "number": 6299,
    "body": null,
    "head_branch": "Expose-Player-Idle-Time",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab11d9087c4d6d376b85",
    "number": 6297,
    "body": "This solves the issue that since https://github.com/PaperMC/Paper/pull/6264, the usage of these draft API's results in deprecation warnings when registering listeners for these events",
    "head_branch": "fix/brigadier-event-registration-warnings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Suppress deprecation registration warnings for brigadier events (#6297)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab12d9087c4d6d376b86",
    "number": 6292,
    "body": "",
    "head_branch": "fix/closeinventory",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix closeInventory shenanigans (#6292)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab13d9087c4d6d376b87",
    "number": 6290,
    "body": "This PR allows server owners to use Mojang's implementation of tick skipping for items, instead of the one provided by Spigot. There are several situations where Mojang's system, which is based on the entity id and entity age, is preferred over the one Spigot uses, which only uses entity age. For example, the [wireless redstone system](https://www.youtube.com/watch?v=FLynwXDnETI) mentioned in #6277. These types of systems need the item id based implementation to function correctly. This change brings back something that could be considered a vanilla mechanic, and should be easy to maintain.\r\n\r\n_Small sidenote:_ I'm not 100% sure I rebased the patches correctly, please let me know if anything needs changing.",
    "head_branch": "allow-using-mojang-item-optimizations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Offset spigot item optimizations instead of Mojang's (#6290)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab14d9087c4d6d376b88",
    "number": 6288,
    "body": "Self-explanatory, adds `Plugin#getLog4JLogger` in the same vein as `Plugin#getSlf4JLogger`. Already have Log4J, might as well expose it.",
    "head_branch": "feature/log4j-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow plugins to use Log4J to log (#6288)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ab15d9087c4d6d376b89",
    "number": 6287,
    "body": "Applies the same \"temporary\" workaround as #5609 but for ConsoleCommandSender methods accept take a component which may contain TranslatableComponents",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix incorrect colors in ConsoleCommandSender messages with TranslatableComponents (#6287)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab16d9087c4d6d376b8a",
    "number": 6284,
    "body": "",
    "head_branch": "paperweight-119",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update paperweight to 1.1.9 (#6284)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab17d9087c4d6d376b8b",
    "number": 6283,
    "body": "",
    "head_branch": "fix/shuffling",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't not shuffle visible chunks (#6283)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab18d9087c4d6d376b8c",
    "number": 6279,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n6788550f SPIGOT-6678: ChunkSnapshot#isSectionEmpty() not working as intended.\r\n3ad0fb1c #901: Fix PlayerStatisticIncrementEvent spam",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit) (#6279)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n6788550f SPIGOT-6678: ChunkSnapshot#isSectionEmpty() not working as intended.\r\n3ad0fb1c #901: Fix PlayerStatisticIncrementEvent spam"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab19d9087c4d6d376b8d",
    "number": 6278,
    "body": "Inspired by @Draycia's [SysoutCatcher](https://www.spigotmc.org/resources/sysoutcatcher.79076/) (Used with permission). Redirects any plugin calls to System.out/err.print(ln) to the plugin's logger, along with a nag message (per-plugin disableable with a system property).\r\n\r\nThere's probably a ton of problems y'all gonna have with this, among which I anticipate being the class finder, nag message, etc etc. If you want, I'm on the Discord, `@_11#0011`, feel free to ping me to discuss there instead.",
    "head_branch": "feature/sysoutcatcher",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add System.out.println catcher (#6278)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab1ad9087c4d6d376b8e",
    "number": 6275,
    "body": "Previously, if a plugin listened to EntityDamageEvent for player hits and wanted to figure out if the hit was critical, they had to check for stuff like if the player was falling etc.\r\nI have added EntityDamageEvent#IsCritical() that can be used instead. For regular player hits, it uses the flag in the player's attack code. If the damager was an AbstractArrow it returns whatever AbstractArrow#isCritical() returns.\r\nCloses #6752",
    "head_branch": "feature/Crit-info",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add critical damage API (#6275)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ab1bd9087c4d6d376b8f",
    "number": 6273,
    "body": "",
    "head_branch": "ram-target-event-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Call EntityKnockbackByEntityEvent for RamTarget Behavior (#6273)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab1cd9087c4d6d376b90",
    "number": 6270,
    "body": "This change allows the version fetcher to work properly on all branches",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab1dd9087c4d6d376b91",
    "number": 6267,
    "body": "This adds a more useful API to get the total amount of experience the player currently has. This fixes #6253 \r\n\r\n### Background\r\nThe current experience API allows to get the player's exp levels, percent to the next exp level, and total, lifetime experience. Some plugins need to be able to access the total number of experience points a player has at a given time. This adds `Player#getCurrentExperience` which does just that.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab1ed9087c4d6d376b92",
    "number": 6266,
    "body": "# Introduction\r\nThis is an update to a patch that was previously part of paper sind around 1.15, but changes to 1.17 have required a deeper look, and so it wasn't auto-updated. That patch probably also needs testing once 1.18 hits, because of the added freedom in chunk sections.\r\nYou can read about the investigation around MC-162253 on the [old pr](https://github.com/PaperMC/Paper/pull/3360) or mojang's issue tracker.\r\n\r\nEssentially in some odd situations, the client re-calculates the light maps for multiple chunks, locking up for some time (depending on the chunk's complexity). This can be avoided by force-sending the light maps with the chunks at the right time. There are optimizations in place to reduce the bandwidth overhead as much as possible.\r\n\r\n# Details\r\nCredits go out to kennytv for porting the patch to mojang mappings initially, so if you want to be added as Co-authored-by or something, just tell me.\r\n\r\nSince apparently some people prefer to save a few bytes of bandwidth whenever they cross chunk boundaries and instead want their client frozen for up to multiple seconds, I've added a config setting. I am not satisfied with the name `workaround-MC-XXXXX`, but it's probably the most precise.\r\n\r\nBesides that, if you compare the patch to the original commit, you can identify the cases where only the mappings have changed.\r\nIn addition to that, the light-mask functions have been reworked and especially properly commented, as apparently there was a lack of them.\r\nWhen porting to 1.17, those got added to the no-tick patches or something, which is why they show up weirdly in the diff. Me or the team can however easily add that change to this PR (i.e. removing `getLightMask` and `getCeilingMask` from the earlier patch), but that would cause the commit-diff to be a lot larger, so I've kept it for easier review, for now.\r\n\r\n## The Masking\r\nSo essentially just sending out all 8 neighboring chunk's lightmaps would be sufficient to solve the issue, but waste bandwidth.\r\nThus we're trying to detect the chunk that causes issues and only send parts of the neighbor chunk lightmap.\r\nBasically the issue happens when the chunk that is being sent has blocks (lit sections) that are higher than the neighbors. In that case, we need to send all the vertical sections of the neighbors that are at that level and higher.\r\n\r\nThe method `lightmask` is responsible to determine the \"lit sections\". Every section that is not empty is lighting itself and the layers above and below. I probably need to remove the comment about LevelHeightAccessor, because I instead decided to expose the required fields on the light engine, more on that in the following section though.\r\n\r\nThe method `ceilingLightMask` now searches for the highest lit section and sets all sections below as lit, which is basically related to the bug itself. The older implementation was probably faster, but due to 1.18+ we have to deal with BitSets and the readability is also much better.\r\n\r\n### Applying the masking\r\nNow we have the two masks and basically only send the lightmaps of a neighbor, if it contains high unlit sections that are lit on the chunk in question. `not(ceilingLightMask)` thereby contains the highest unlit sections and `chunkLightMask` (or `lightMask` there) is the chunk in question. If the chunk in question doesn't have lit sections in that areas, it won't send any packet.\r\n\r\nIt furthermore filters for the view distance, so if neighbors don't fall into the view distance, they aren't sent either.\r\n\r\n## Risks: The LevelLightEngine and 1.18+\r\nSo basically the light engine in use has new methods that define the start and end of light sections and that's also used in other relevant code by Mojang, so I've exposed a static version not depending on the field `levelHeightAccessor` (the chunk that is currently lit basically). This ensure that if there ever were sections that shall not be lit (i.e. some sub-void or top-air????), won't get processed (the current implementation relates to the build height).\r\n\r\nThat's the only real risk the (otherwise straightforward :wink:) patch brings: With future versions, the masking can break, depending on what happens to the implementations on LevelLightEngine, for instance I currently assume that if the \"minLightSection\" is -1, that means it's the first element in the `sections` array. Actually it's kinda odd, to have these return indexes that are invalid for the sections array, but that's just how it is. Besides that, we're now using BitSet (also required by the new packet constructor), so further increases to the build height itself don't bother the patch anymore.\r\n",
    "head_branch": "fix-mc-162253-1-17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab1fd9087c4d6d376b93",
    "number": 6265,
    "body": "This PR implements #6239 by preventing an AFK kick if the player is switching dimensions and in the end.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Prevent AFK kick while watching end credits (#6239). (#6265)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab20d9087c4d6d376b94",
    "number": 6264,
    "body": "This is just a small pull request to remove almost every deprecation messages while building the jar. ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Fix various compile warnings (#6264)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ab21d9087c4d6d376b95",
    "number": 6261,
    "body": "Backports Phoenix's PR (https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/pull-requests/891 / https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/4f34a67b5ed70f88ef857d13de1ee3ec433f0ad7) for fixing task overflows",
    "head_branch": "backport-spigot-891-pr",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Backport \"Fix scheduler task ID overflow and duplication issues\" (#6261)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ab22d9087c4d6d376b96",
    "number": 6260,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n64d149a5 SPIGOT-1753: ChunkGenerator lighting updates\r\n82f0955b SPIGOT-6666: NPE when deserializing bundle\r\n8dfa97af SPIGOT-6669: Shearing a Mooshroom does not fire EntityDropItemEvent\r\n629cc539 SPIGOT-6667: /schedule function not working correctly in other dimensions",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit) (#6260)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab23d9087c4d6d376b97",
    "number": 6257,
    "body": "… (where it belongs) and bump the config version.\r\n\r\nI hope I did everything right, the change itself is trivial but the git magic to edit the Adventure patch wasn't really.",
    "head_branch": "move-setting-use-displayname",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move \"use-display-name-in-quit-message\" to settings namespace (#6257)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab24d9087c4d6d376b98",
    "number": 6256,
    "body": "This makes the URL of the timings viewer configurable in case that Aikar's goes down again or someone wants to use their own private instance to prevent exposing data, simply not put load onto the provided instance, or just for testing reasons when developing on the viewer itself.\r\n\r\nAlso it's 2021, use https for submitting it by default...",
    "head_branch": "pr/timings-url-config",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add config option to specify timings url (#6256)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab25d9087c4d6d376b99",
    "number": 6255,
    "body": "Fixes #6158",
    "head_branch": "fix/flat-bedrock",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix flat bedrock (#6255)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab26d9087c4d6d376b9a",
    "number": 6254,
    "body": "Fixes #6141\r\n\r\nupstream removed this for some reason. I think this is the right place to put it back based on its use in 1.16.5",
    "head_branch": "fix/link-detection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab27d9087c4d6d376b9b",
    "number": 6252,
    "body": "This is commonly used to access chunks that crash upon load due to fireballs, and having this in here by default would lead to a lot less confusion when people could just change the number.",
    "head_branch": "add-fireball-default-config",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add fireball to default max load config (#6252)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab28d9087c4d6d376b9c",
    "number": 6251,
    "body": "Makes less git noise, as it won't update the date every damn single time.\r\n\r\nUse `-DPaper.skipServerPropertiesComments=true` flag to disable writing comments\r\n\r\nThe issue was date being constantly updated. I saw 3 possible solutions:\r\n1. Create `BufferedWriter` where I override the `write` method(s) and make it drop second line starting with `#`\r\n2. Make `DedicatedServerProperties` override `store0` method of `java.util.Properties`, copy-pasting the code, just adding if on the line adding date\r\n3. Just make the flag disable writing the file completely\r\n\r\nWhile the third solution is the simplest, its not ideal given that one would need to remember to disable it periodically to update the entries added/changed/deleted. That's why I decided to opt for the first option (dropping all comments instead of only second line), which takes most work, but also should be maintenance-free.\r\n\r\nI tried to optimize it and document as I could, open to questions and suggestions how to improve it :)",
    "head_branch": "disable_server_properties_date",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow skipping writing of comments to server.properties (#6251)\n\nMakes less git noise, as it won't update the date every single time\r\n\r\nUse -DPaper.skipServerPropertiesComments=true flag to disable writing it"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab29d9087c4d6d376b9d",
    "number": 6249,
    "body": "Due to java 16 reflection changes, it's no longer possible to get the protected addURL method in the URLClassLoader.",
    "head_branch": "feature/classloader",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab2ad9087c4d6d376b9e",
    "number": 6248,
    "body": "Adding `Translatable` interface to a bunch of places",
    "head_branch": "feature/adventure-translatable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement Translatable in appropriate places (#6248)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ab2bd9087c4d6d376b9f",
    "number": 6247,
    "body": "Been on my TODO list for a while, I didn't add a test to check if item rarity stuff changes",
    "head_branch": "fix/add-ItemRarity-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add ItemRarity test (#6247)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ab2dd9087c4d6d376ba0",
    "number": 6246,
    "body": "Prevents those nasty mentions of old issues from commit msgs from upstream repos",
    "head_branch": "fix/upstream-commit-script",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab2ed9087c4d6d376ba1",
    "number": 6245,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\ne7b0f8d6 #⁠642: Add Crafting methods to API\r\n9e58831e SPIGOT-6641: Use varargs in sendMessage\r\ne409fe49 SPIGOT-6545: Unable to set Guardian target via API while awareness is disabled\r\n6997c726 SPIGOT-6661: Fix missing radius from GenericGameEvent\r\n02d03f35 SPIGOT-6369: Add ItemStack to HangingPlaceEvent\r\n\r\nCraftBukkit Changes:\r\n0abf420c SPIGOT-6665: Shearing a Snowman does not drop a carved pumpkin\r\ne8e3cbcc #⁠893: Add Crafting methods to API\r\n879acfee Fix missing varargs from previous commit\r\n6572b9c3 SPIGOT-6641: Use varargs in sendMessage\r\n9e06bb2a SPIGOT-6663: Chicken Jockeys chickens don't despawn\r\n699f2d36 SPIGOT-6545: Unable to set Guardian target via API while awareness is disabled\r\n8ffa54ba SPIGOT-6369: Add ItemStack to HangingPlaceEvent\r\nc851639c SPIGOT-6645: Call EntityChangeBlockEvent before PlayerHarvestBlockEvent\r\n8d244b0b SPIGOT-3725, SPIGOT-6638, MC-136917: Properly clear tile entities before replacing\r\n\r\nSpigot Changes:\r\n18c71bf4 Rebuild patches",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#6245)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\ne7b0f8d6 #642: Add Crafting methods to API\r\n9e58831e SPIGOT-6641: Use varargs in sendMessage\r\ne409fe49 SPIGOT-6545: Unable to set Guardian target via API while awareness is disabled\r\n6997c726 SPIGOT-6661: Fix missing radius from GenericGameEvent\r\n02d03f35 SPIGOT-6369: Add ItemStack to HangingPlaceEvent\r\n\r\nCraftBukkit Changes:\r\n0abf420c SPIGOT-6665: Shearing a Snowman does not drop a carved pumpkin\r\ne8e3cbcc #893: Add Crafting methods to API\r\n879acfee Fix missing varargs from previous commit\r\n6572b9c3 SPIGOT-6641: Use varargs in sendMessage\r\n9e06bb2a SPIGOT-6663: Chicken Jockeys chickens don't despawn\r\n699f2d36 SPIGOT-6545: Unable to set Guardian target via API while awareness is disabled\r\n8ffa54ba SPIGOT-6369: Add ItemStack to HangingPlaceEvent\r\nc851639c SPIGOT-6645: Call EntityChangeBlockEvent before PlayerHarvestBlockEvent\r\n8d244b0b SPIGOT-3725, SPIGOT-6638, MC-136917: Properly clear tile entities before replacing\r\n\r\nSpigot Changes:\r\n18c71bf4 Rebuild patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ab2fd9087c4d6d376ba2",
    "number": 6244,
    "body": "*eyes @Prof-Bloodstone suspiciously*",
    "head_branch": "fix/campfire-damage-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "call EntityDamageByBlockEvent for campfires (#6244)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab30d9087c4d6d376ba3",
    "number": 6242,
    "body": "This adds the default tick rate of the sensor to the timings page to simplify the adjusting of those.\r\n\r\nIn order to not have to query the timings object each time this is done with the default rate, not the actual configured one but it should be good enough to give users a feeling for the default values as those aren't accessible at all otherwise.\r\n\r\nThis is not necessary for behaviours as they don't have a rate by default and can activate every tick.",
    "head_branch": "pr/add-default-rate-totimings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add the default tick rate of the sensor to the timings (#6242)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ab31d9087c4d6d376ba4",
    "number": 6241,
    "body": "Co-authored-by: Jason Penilla <11360596+jpenilla@users.noreply.github.com>\r\n\r\nThe issue is outlined in https://github.com/PaperMC/Paper/pull/6216, and as for the checks before setting as ready:\r\nIn `ChunkHolder` it now checks if entities are loaded before setting, and in `PersistentEntitySectionManager` it checks for isTickingReady, otherwise the tick might immediately be added to the unready list again (since the counterpart has not finished), before then being added again by the other part respectively. That isn't inherently bad, but is an unnecessary de- and re-queueing.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix PaperTickList (#6241)\n\nCo-authored-by: Jason Penilla <11360596+jpenilla@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab32d9087c4d6d376ba5",
    "number": 6240,
    "body": "The fixTileEntity method was removed from ServerLevel by upstream it seems, and that was the source of this \"console spam\"",
    "head_branch": "drop-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Drop unneeded patch (#6240)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab33d9087c4d6d376ba6",
    "number": 6238,
    "body": "To match the current behaviour of spigots configuration file, this\r\ncommit allows the usage of the '&' colour code in the two paper\r\nmessages:\r\n - 'messages.kick.connection-throttle'\r\n - 'messages.kick.authentication-servers-down'\r\n\r\nAs of right now, feedback on the deserialization of `messages.kick.authentication-servers-down` is very welcome. I don't know if there is a faster way to convert legacy string text into vanilla components using adventure deserializers.",
    "head_branch": "bugfix/allow-colour-in-connection-throttle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab34d9087c4d6d376ba7",
    "number": 6236,
    "body": "not sure how updating from upstream works so I don't know if not changing this was intentional so this PR might be useless\r\nbut Bukkit by default closes plugin jars while disabling so I think it is strange that the closeClassloader parameter is just practically ignored",
    "head_branch": "plugin-loader-close-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab35d9087c4d6d376ba8",
    "number": 6230,
    "body": "",
    "head_branch": "mappings-util",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Put mappings util in a separate class to the stacktrace deobfuscator (#6230)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab36d9087c4d6d376ba9",
    "number": 6229,
    "body": "ASM was not meant to exposed to API consumers in the first place, and for the duration of time it has been exposed, it has also been relocated.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't expose ASM in API (#6229)\n\nASM was not meant to exposed to API consumers in the first place, and for the duration of time it has been exposed, it has also been relocated.\r\n\r\nCo-authored-by: Jason Penilla <11360596+jpenilla@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab37d9087c4d6d376baa",
    "number": 6228,
    "body": "Uses StackTraceObfuscator for now, but jmp will move that out into its own utility at a later date.\r\nAlso removes the validatenearbypoi change since the delay doesn't make all too much of a difference in performance usually, but will likely annoy more often than it helps (but kept as -1 as an example).",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use mapped names for sensor and behavior timings/config (#6228)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab38d9087c4d6d376bab",
    "number": 6226,
    "body": "This should be a PR to Spigot but I'm not interested in signing their CLA that asks for an address...\r\n\r\nThis fixes Spigot's patch for adding a radius for how far away the end portal fill sound can be played by ensuring that recipient players are in the same world as the sound. Previously, if a player filled in a portal, it would've been possible for someone in another dimension at the same (or similar) coordinates to hear the sound, despite the config option to limit the sound's radius.",
    "head_branch": "global-portal-sound-toggle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Check player world in endPortalSoundRadius (#6226)\n\nCo-authored-by: Jake Potrebic <jake.m.potrebic@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab39d9087c4d6d376bac",
    "number": 6222,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\neec4aab0 SPIGOT-6657: Add getPlayer to SheepDyeWoolEvent\r\n205213c6 SPIGOT-6656: CauldronLevelChangeEvent is not fired correctly when dripstone fills the cauldron\r\n\r\nCraftBukkit Changes:\r\nb8c522d5 SPIGOT-6657: Add getPlayer to SheepDyeWoolEvent\r\nf04a77dc SPIGOT-6656: CauldronLevelChangeEvent is not fired correctly when dripstone fills the cauldron\r\nd1dbcebc SPIGOT-6653: Canceling snow bucket placement removes snow from bucket\r\n4f34a67b #891: Fix scheduler task ID overflow and duplication issues\r\n\r\nSpigot Changes:\r\nd03d7f12 BUILDTOOLS-604: Rebuild patches",
    "head_branch": "upstream-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#6222)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\neec4aab0 SPIGOT-6657: Add getPlayer to SheepDyeWoolEvent\r\n205213c6 SPIGOT-6656: CauldronLevelChangeEvent is not fired correctly when dripstone fills the cauldron\r\n\r\nCraftBukkit Changes:\r\nb8c522d5 SPIGOT-6657: Add getPlayer to SheepDyeWoolEvent\r\nf04a77dc SPIGOT-6656: CauldronLevelChangeEvent is not fired correctly when dripstone fills the cauldron\r\nd1dbcebc SPIGOT-6653: Canceling snow bucket placement removes snow from bucket\r\n4f34a67b #891: Fix scheduler task ID overflow and duplication issues\r\n\r\nSpigot Changes:\r\nd03d7f12 BUILDTOOLS-604: Rebuild patches"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ab3ad9087c4d6d376bad",
    "number": 6221,
    "body": "Does part 2 of and fixes #1611",
    "head_branch": "mob-spawner-improvements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab3bd9087c4d6d376bae",
    "number": 6219,
    "body": "Fix PaperMC#6028",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab3cd9087c4d6d376baf",
    "number": 6218,
    "body": "Any goal which extends this does a sync chunk/block lookup, which for\r\nmobs close to the loaded chunk border will repeatedly lag the main\r\nthread loading these.\r\n\r\nThis has been tested on production servers for a few weeks without any issues.",
    "head_branch": "fix/issue-6045",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab3dd9087c4d6d376bb0",
    "number": 6216,
    "body": "Hotunfixes the PaperTickList due to the fix causing more issues than before (*probably* due to the ticklistentry having to be marked as ready manually when entities are actually loaded with everything else, otherwise it will forever remain in the unready list).",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Revert \"Fix PaperTickList\" (#6216)\n\nThis commit reverts https://github.com/PaperMC/Paper/commit/a5acf367a37549ea3b7cb0eb8c0115973d0c58de"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab3ed9087c4d6d376bb1",
    "number": 6213,
    "body": "Fixes #6202",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix block action handling (#6213)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab3fd9087c4d6d376bb2",
    "number": 6209,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n5662c2b3 SPIGOT-6642: Throw better message if plugin.yml is empty\r\naa8e0351 #&#x2060;636: Add FurnaceStartSmeltEvent\r\n52073b30 SPIGOT-6646: Issue with map palette ranges\r\n5f772da9 #&#x2060;640: Add new Causes for LightningStrikeEvent\r\n\r\nCraftBukkit Changes:\r\n4e187045 #&#x2060;874: Add FurnaceStartSmeltEvent\r\ned2b91c2 SPIGOT-6649: Call BlockFadeEvent when Nylium fades to Netherrack\r\nb7e3ce02 #&#x2060;890: Include yaw in player's spawn location\r\naeb711dd #&#x2060;889: Fix CraftChest close() sound being replaced with open sound.\r\nca0fe5b5 SPIGOT-5561: Warning in logs when changing a Mob Spawner to Air on chunk load\r\n2f038f2d #&#x2060;886: Add new Causes for LightningStrikeEvent\r\n\r\nSpigot Changes:\r\n38e6c03d Rebuild patches",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#6209)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab40d9087c4d6d376bb3",
    "number": 6207,
    "body": "useful while running a debugger",
    "head_branch": "feature/no-relocation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab42d9087c4d6d376bb4",
    "number": 6206,
    "body": "Fixes #4665",
    "head_branch": "merchant-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix MerchantOffer BuyB Only AssertionError (#6206)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab43d9087c4d6d376bb5",
    "number": 6204,
    "body": "",
    "head_branch": "expose-list-tag",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab44d9087c4d6d376bb6",
    "number": 6200,
    "body": "I wasn't sure about whether to rename SKELETON_MELEE to ABSTRACT_SKELETON_MELEE since it's API but at the same time this is not what the test would produce",
    "head_branch": "abstract-skeleton-goal-rename",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Incorrectly Typed Goals (#6200)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab45d9087c4d6d376bb7",
    "number": 6199,
    "body": "Fixes #6184",
    "head_branch": "fix/custom-inventory-holder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix custom inventory holders (#6199)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab46d9087c4d6d376bb8",
    "number": 6197,
    "body": "Backport #5353 to 1.16.5.",
    "head_branch": "pr/open/1.16/parmswingevent-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Backport Add PlayerArmSwingEvent to 1.16 (#6197)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ab47d9087c4d6d376bb9",
    "number": 6195,
    "body": "Fixes #6194",
    "head_branch": "fix/my-previous-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix distanceSq check on block breaking (#6195)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab48d9087c4d6d376bba",
    "number": 6193,
    "body": "",
    "head_branch": "fix/block-break-unloaded-chunks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Catch desynced block breaks (#6193)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab49d9087c4d6d376bbb",
    "number": 6192,
    "body": "I think I messed this up when I was applying this patch in the 1.17 update. I remember this one having the logic moved around a bit so I just missed this bit of diff it seems.",
    "head_branch": "fix/PlayerGameModeChangeEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use cause and cancel component in PlayerGameModeChanteEvent (#6192)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab4ad9087c4d6d376bbc",
    "number": 6191,
    "body": "Use the new entity loaded check in PaperTickList as it does in ServerTickList",
    "head_branch": "fix/PaperTickList",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix PaperTickList (#6191)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab4bd9087c4d6d376bbd",
    "number": 6190,
    "body": "They are kept as plain strings -- the client currently loads both using a `new TextComponent(<tag value>)`.\r\n\r\nAdventure doesn't currently enforce a maximum length on book titles or authors -- but that is enforced by the client. this adds that validation",
    "head_branch": "fix/booktitle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix book title and author being improperly serialized as components (#6190)\n\nThey are kept as plain strings\r\nAdditional validation has been added to prevent invalid books from being\r\nsent to the client."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab4cd9087c4d6d376bbe",
    "number": 6186,
    "body": "Closes #6183\r\n\r\nI don't live in an English-speaking country, so the API description is not appropriate.\r\n\r\nFeedback is always welcome.",
    "head_branch": "pr/open/1.17/entitydismountevent-reason",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab4dd9087c4d6d376bbf",
    "number": 6185,
    "body": "Adds several methods to the `World` for interacting with Minecraft's `RecipeManager`, allowing you to get a recipe via assorted means (such as by providing a container block or collection of items). A test plugin is available [here](https://gist.github.com/qixils/c4fa8a9de601508284eccb981092158e).\r\n\r\nPatch is named \"Add Recipe API\" because the new methods that Spigot recently added are exclusive to the crafting table so they're hardly deserving of the title \"Recipe API\" >:(\r\n\r\nCloses #616\r\n\r\nUse cases:\r\n- Custom crafting in an inventory like a dispenser or a custom chest\r\n- Automatic crafting in a dispenser or automatically smelting block/mob drops\r\n- etc\r\n\r\nImplementation notes:\r\n- the I type of RecipeType matches what container the recipes expect, not necessarily what they're typically associated with\r\n- a custom MenulessContainer class is used to create a container that is compatible with all inventory types (specifically the outlier of CraftingContainer ~~which is only important because it uses width&height which should be abstracted out into an interface >:(~~) which overrides any methods that reference the `menu` field to prevent NPE (not that it should matter much because my code doesn't use any of them)\r\n  - should this be moved to a CraftWorld subclass with a more specific name so other patches don't try to use it and possibly experience errors from future updates? or is it fine here?\r\n- features [astronomical performance improvements!!!!!1!](https://github.com/qixils/Paper/blob/fa832ada6b42b4dfd1fed9eae1ee5f2836dba72c/patches/server/0728-Add-Recipe-API.patch#L83) i expect to see this implemented within every paper fork by the top of the hour\r\n\r\nFeedback welcome! :D ",
    "head_branch": "more-recipe-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab4ed9087c4d6d376bc0",
    "number": 6181,
    "body": "```java\r\npublic StonecutterMenu(int syncId, Inventory playerInventory, final ContainerLevelAccess context) {\r\n    super(MenuType.STONECUTTER, syncId);\r\n    this.selectedRecipeIndex = addDataSlot(DataSlot.shared(new int[1], 0)); // Paper - allow replication\r\n    \r\n    ...\r\n\r\n    this.addDataSlot(this.selectedRecipeIndex);\r\n    ...\r\n}\r\n```\r\nWhy add `selectedRecipeIndex` to the `dataSlots` list twice in this code(original patch)?\r\n\r\nThis PR is fix #6180\r\nThe PlayerStonecutterRecipeSelectEvent works correctly, and no errors occur on the client.",
    "head_branch": "pr/wip/1.17/stonecutter-error",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Stonecutter #6180 issue (#6181)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab4fd9087c4d6d376bc1",
    "number": 6178,
    "body": "Fixes #6072\r\nticking each level ticks all the command blocks and if that creates a world while iterating then CME",
    "head_branch": "serverlevel-cme",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab50d9087c4d6d376bc2",
    "number": 6175,
    "body": "Adds API for displaying advancements.\r\nThis allows custom menus and the use of translatable components.\r\nExample: https://gist.github.com/syldium/4f304340ee26d31bea009295a7196522",
    "head_branch": "advancement-display",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add advancement display API (#6175)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ab51d9087c4d6d376bc3",
    "number": 6169,
    "body": "Backport #6139 to 1.16.5.",
    "head_branch": "pr/open/1.16/cmdsign",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Backport \"Fix command signs\" to 1.16.5 (#6169)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ab52d9087c4d6d376bc4",
    "number": 6163,
    "body": "Gradle property `publishDevBundle` must be set to publish the dev bundle, ex `./gradlew publishToMavenLocal -PpublishDevBundle`. CI can use `publishDevBundlePublicationToPaperSnapshotsRepository` task (with the property set) for publishing the dev bundle. Patches must be already applied in order to generate the dev bundle.\r\n\r\nSee https://github.com/PaperMC/paperweight/pull/54 for context",
    "head_branch": "userdev",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Setup dev bundle publishing (#6163)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab53d9087c4d6d376bc5",
    "number": 6161,
    "body": "Allows shadowJar up-to-date check to function properly",
    "head_branch": "decrease-outdated-build-delay-accuracy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Use commit timestamp instead of build time in manifest (#6161)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab54d9087c4d6d376bc6",
    "number": 6160,
    "body": "",
    "head_branch": "outdated-client-msg",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix incorrect message for outdated clients (#6160)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab55d9087c4d6d376bc7",
    "number": 6159,
    "body": "",
    "head_branch": "piglin-anger",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab56d9087c4d6d376bc8",
    "number": 6157,
    "body": "Fixes #6145\r\n\r\nI just had a quick minute to look into this, but I feel like more things suffer from this issue. Or maybe this isn't quite the right fix. It does fix that exact issue in #6145 (this affects both 1.16 and 1.17)",
    "head_branch": "fix/anvil-inventory",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix anvil inventory events (#6157)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab57d9087c4d6d376bc9",
    "number": 6154,
    "body": "I don't know the Groovy syntax of this, so it was changed to Kotlin. No sane person uses Groovy either way.",
    "head_branch": "document-gradle-java-16-requirement",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab58d9087c4d6d376bca",
    "number": 6149,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n17c35d6e SPIGOT-6637: Revert \"#636: Add FurnaceStartSmeltEvent\"\r\n4b27230b SPIGOT-6623: Missing API reasons for entity freezing\r\ne1528c85 #636: Add FurnaceStartSmeltEvent\r\n\r\nCraftBukkit Changes:\r\na6292cc3 SPIGOT-6637: Revert \"#874: Add FurnaceStartSmeltEvent\"\r\nf4066854 SPIGOT-6579: DragonFireBall movement with setDirection jumps around a lot\r\n9add952b SPIGOT-6623: Missing API reasons for entity freezing\r\n2ea359f1 #874: Add FurnaceStartSmeltEvent\r\nbe8d625e SPIGOT-5560, SPIGOT-6574, SPIGOT-6632: Remove no longer needed tile entity fix\r\n\r\nSpigot Changes:\r\neac3cd96 Rebuild patches",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#6149)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n17c35d6e SPIGOT-6637: Revert \"#636: Add FurnaceStartSmeltEvent\"\r\n4b27230b SPIGOT-6623: Missing API reasons for entity freezing\r\ne1528c85 #636: Add FurnaceStartSmeltEvent\r\n\r\nCraftBukkit Changes:\r\na6292cc3 SPIGOT-6637: Revert \"#874: Add FurnaceStartSmeltEvent\"\r\nf4066854 SPIGOT-6579: DragonFireBall movement with setDirection jumps around a lot\r\n9add952b SPIGOT-6623: Missing API reasons for entity freezing\r\n2ea359f1 #874: Add FurnaceStartSmeltEvent\r\nbe8d625e SPIGOT-5560, SPIGOT-6574, SPIGOT-6632: Remove no longer needed tile entity fix\r\n\r\nSpigot Changes:\r\neac3cd96 Rebuild patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab59d9087c4d6d376bcb",
    "number": 6147,
    "body": "",
    "head_branch": "fix/NPE-createVanillaChunkData",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix NPE from using wrong ProtoChunk ctor (#6147)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab5ad9087c4d6d376bcc",
    "number": 6142,
    "body": "Previously, log4j2 logged extended exceptions (`xEx`) but wasn't able to find the source jars of classes loaded by the `PluginClassLoader`. With Java 9, `StackTraceElement`s got [a new property that holds the name of the class loader](https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StackTraceElement.html#getClassLoaderName()). With this, it's possible to identify the source of a class.\r\n\r\nThis implementation is super simple, we're just setting the class loader name to the jar file name. This way it can directly be used when rewriting the `ExtentedStackTraceElement`s. Theoretically, it would be possible to use another unique identifier for the class loader name and keep a map to access even more plugin information, but I think that's already way better.\r\n\r\nMy original reasoning was that I had people like weekly coming around with weird issues that were caused by them wrongly shading other plugins (or at least their API components). As differnet classes with the same fqn can be loaded by different class loaders, that was difficult to debug but is pretty easy now.\r\n\r\nOutput before:\r\n```\r\n[10:42:35] [Server thread/WARN]: Unexpected exception while parsing console command \"test\"\r\norg.bukkit.command.CommandException: Unhandled exception executing command 'test' in plugin TestPlugin2 v0.0.1\r\n\tat org.bukkit.command.PluginCommand.execute(PluginCommand.java:47) ~[patched_1.17.1.jar:git-Paper-90]\r\n\tat org.bukkit.command.SimpleCommandMap.dispatch(SimpleCommandMap.java:159) ~[patched_1.17.1.jar:git-Paper-90]\r\n\tat org.bukkit.craftbukkit.v1_17_R1.CraftServer.dispatchCommand(CraftServer.java:821) ~[patched_1.17.1.jar:git-Paper-90]\r\n\tat org.bukkit.craftbukkit.v1_17_R1.CraftServer.dispatchServerCommand(CraftServer.java:784) ~[patched_1.17.1.jar:git-Paper-90]\r\n\tat net.minecraft.server.dedicated.DedicatedServer.handleConsoleInputs(DedicatedServer.java:518) ~[patched_1.17.1.jar:git-Paper-90]\r\n\tat net.minecraft.server.dedicated.DedicatedServer.tickChildren(DedicatedServer.java:480) ~[patched_1.17.1.jar:git-Paper-90]\r\n\tat net.minecraft.server.MinecraftServer.tickServer(MinecraftServer.java:1406) ~[patched_1.17.1.jar:git-Paper-90]\r\n\tat net.minecraft.server.MinecraftServer.runServer(MinecraftServer.java:1188) ~[patched_1.17.1.jar:git-Paper-90]\r\n\tat net.minecraft.server.MinecraftServer.lambda$spin$0(MinecraftServer.java:316) ~[patched_1.17.1.jar:git-Paper-90]\r\n\tat java.lang.Thread.run(Thread.java:831) [?:?]\r\nCaused by: java.lang.RuntimeException\r\n\tat de.sirywell.testplugin.TestCommand.onCommand(TestCommand.java:11) ~[?:?]\r\n\tat org.bukkit.command.PluginCommand.execute(PluginCommand.java:45) ~[patched_1.17.1.jar:git-Paper-90]\r\n\t... 9 more\r\n```\r\n\r\nOutput now:\r\n```\r\n[10:44:15] [Server thread/WARN]: Unexpected exception while parsing console command \"test\"\r\norg.bukkit.command.CommandException: Unhandled exception executing command 'test' in plugin TestPlugin2 v0.0.1\r\n\tat org.bukkit.command.PluginCommand.execute(PluginCommand.java:47) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\tat org.bukkit.command.SimpleCommandMap.dispatch(SimpleCommandMap.java:159) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\tat org.bukkit.craftbukkit.v1_17_R1.CraftServer.dispatchCommand(CraftServer.java:821) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\tat org.bukkit.craftbukkit.v1_17_R1.CraftServer.dispatchServerCommand(CraftServer.java:784) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\tat net.minecraft.server.dedicated.DedicatedServer.handleConsoleInputs(DedicatedServer.java:518) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\tat net.minecraft.server.dedicated.DedicatedServer.tickChildren(DedicatedServer.java:480) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\tat net.minecraft.server.MinecraftServer.tickServer(MinecraftServer.java:1406) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\tat net.minecraft.server.MinecraftServer.runServer(MinecraftServer.java:1188) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\tat net.minecraft.server.MinecraftServer.lambda$spin$0(MinecraftServer.java:316) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\tat java.lang.Thread.run(Thread.java:831) [?:?]\r\nCaused by: java.lang.RuntimeException\r\n\tat de.sirywell.testplugin.TestCommand.onCommand(TestCommand.java:11) ~[TestPlugin-1.0-SNAPSHOT-2.jar:?]\r\n\tat org.bukkit.command.PluginCommand.execute(PluginCommand.java:45) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\t... 9 more\r\n```\r\n\r\n(Instead of `~[?:?]` it now mentions the plugin file name)\r\n\r\nThis is how it looks like with *one* plugin where only the jar name and the name and command aliases in the plugin.yml were changed:\r\n<details>\r\n<summary>Click to see two different stacktraces that would have been (nearly) identical before</summary>\r\n\r\n```\r\n[10:44:18] [Server thread/WARN]: Unexpected exception while parsing console command \"test1\"\r\norg.bukkit.command.CommandException: Unhandled exception executing command 'test1' in plugin TestPlugin v0.0.1\r\n\tat org.bukkit.command.PluginCommand.execute(PluginCommand.java:47) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\tat org.bukkit.command.SimpleCommandMap.dispatch(SimpleCommandMap.java:159) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\tat org.bukkit.craftbukkit.v1_17_R1.CraftServer.dispatchCommand(CraftServer.java:821) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\tat org.bukkit.craftbukkit.v1_17_R1.CraftServer.dispatchServerCommand(CraftServer.java:784) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\tat net.minecraft.server.dedicated.DedicatedServer.handleConsoleInputs(DedicatedServer.java:518) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\tat net.minecraft.server.dedicated.DedicatedServer.tickChildren(DedicatedServer.java:480) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\tat net.minecraft.server.MinecraftServer.tickServer(MinecraftServer.java:1406) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\tat net.minecraft.server.MinecraftServer.runServer(MinecraftServer.java:1188) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\tat net.minecraft.server.MinecraftServer.lambda$spin$0(MinecraftServer.java:316) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\tat java.lang.Thread.run(Thread.java:831) [?:?]\r\nCaused by: java.lang.RuntimeException\r\n\tat de.sirywell.testplugin.TestCommand.onCommand(TestCommand.java:11) ~[TestPlugin-1.0-SNAPSHOT.jar:?]\r\n\tat org.bukkit.command.PluginCommand.execute(PluginCommand.java:45) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\t... 9 more\r\n[10:44:20] [Server thread/WARN]: Unexpected exception while parsing console command \"test2\"\r\norg.bukkit.command.CommandException: Unhandled exception executing command 'test2' in plugin TestPlugin2 v0.0.1\r\n\tat org.bukkit.command.PluginCommand.execute(PluginCommand.java:47) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\tat org.bukkit.command.SimpleCommandMap.dispatch(SimpleCommandMap.java:159) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\tat org.bukkit.craftbukkit.v1_17_R1.CraftServer.dispatchCommand(CraftServer.java:821) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\tat org.bukkit.craftbukkit.v1_17_R1.CraftServer.dispatchServerCommand(CraftServer.java:784) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\tat net.minecraft.server.dedicated.DedicatedServer.handleConsoleInputs(DedicatedServer.java:518) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\tat net.minecraft.server.dedicated.DedicatedServer.tickChildren(DedicatedServer.java:480) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\tat net.minecraft.server.MinecraftServer.tickServer(MinecraftServer.java:1406) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\tat net.minecraft.server.MinecraftServer.runServer(MinecraftServer.java:1188) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\tat net.minecraft.server.MinecraftServer.lambda$spin$0(MinecraftServer.java:316) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\tat java.lang.Thread.run(Thread.java:831) [?:?]\r\nCaused by: java.lang.RuntimeException\r\n\tat de.sirywell.testplugin.TestCommand.onCommand(TestCommand.java:11) ~[TestPlugin-1.0-SNAPSHOT-2.jar:?]\r\n\tat org.bukkit.command.PluginCommand.execute(PluginCommand.java:45) ~[patched_1.17.1.jar:git-Paper-\"416ec98\"]\r\n\t... 9 more\r\n```\r\n\r\n</details>\r\n\r\n\r\nNote: I just called the rewrite rule `rewrite2`, but I'm happy to give it a better name if wanted.",
    "head_branch": "feature/better-stacktraces",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Rewrite LogEvents to contain information about the source jar of stacktrace elements (#6142)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab5bd9087c4d6d376bcd",
    "number": 6139,
    "body": "Fixes #6138\r\n\r\nThis should address all of @mdcfe points of issue with how they were handled before, but keeping the vanilla permissions behavior.",
    "head_branch": "fix/command-signs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix command signs (#6139)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ab5cd9087c4d6d376bce",
    "number": 6135,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\nb5d7883a SPIGOT-6634: Override needed method\r\n99561c21 SPIGOT-6624: Explosions do not destroy blocks out of vanilla heights in custom dimensions",
    "head_branch": "pr/upstream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit)\n\nUpstream has released updates that appear to apply and compile correctly.\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\n\nCraftBukkit Changes:\nb5d7883a SPIGOT-6634: Override needed method\n99561c21 SPIGOT-6624: Explosions do not destroy blocks out of vanilla heights in custom dimensions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab5dd9087c4d6d376bcf",
    "number": 6134,
    "body": "https://github.com/PaperMC/Paper/pull/6119, whoopsie",
    "head_branch": "pr/lineofsight",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Swapped out Vec3#distanceTo call with a Vec3#distanceToSqr call to remove calls to Math.sqrt"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab5ed9087c4d6d376bd0",
    "number": 6133,
    "body": "Adds a test plugin. Disabled by default, enable by uncommenting a line in the gitignored `test-plugin.settings.gradle.kts`. The plugin will be loaded during all 3 run tasks if enabled.",
    "head_branch": "testplugin",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Add a test plugin (#6133)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab5fd9087c4d6d376bd1",
    "number": 6129,
    "body": "Should fix entity suffocation on terrain generation.\r\n\r\nTotally not sure this is the best fix but this **is** the patch that caused the broken behavior in the first place.\r\n\r\nFeel free to push to this branch with a better change.",
    "head_branch": "fix/entity-suffocation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix collisions during world generation (#6129)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab60d9087c4d6d376bd2",
    "number": 6127,
    "body": "",
    "head_branch": "remove-dangling-whitespace",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Remove extra newlines at EOF (#6127)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab61d9087c4d6d376bd3",
    "number": 6121,
    "body": "This is my attempted fix for https://github.com/PaperMC/Paper/issues/6086\r\n\r\nTechnically with this you can change the seed of any ConfiguredFeature you want, as long as you know the name of it, but it seemed like a better idea to only make clay a default.\r\n\r\nI did a little testing to see if it worked\r\nCreated a world with seed `123123`\r\n/locatebiome minecraft:swamp\r\n\r\nBefore:\r\nhttps://i.imgur.com/Xx99hyC.png\r\n\r\nAfter:\r\nhttps://i.imgur.com/XZ6vHzC.png\r\n\r\n\r\nAll the diamonds were in the same place, but the clay was moved.",
    "head_branch": "fix-clay-mining",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab62d9087c4d6d376bd4",
    "number": 6119,
    "body": "This is my first pull request so hopefully it meets all standards.\r\nThe line of sight checking methods were previously calculating the distance between the two locations with 128, I've replaced this by comparing the distanceSquared with 16384 (square of 128) in order to remove the Math.sqrt call as it isn't necessary :)\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab63d9087c4d6d376bd5",
    "number": 6117,
    "body": "Removes Billy's fix as upstream implemented a (broken) fix and then fixed their fix\r\n\r\nBackport of #6091",
    "head_branch": "fix/1.16.5/villager-EntityPickupItemEvent-cancellation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab64d9087c4d6d376bd6",
    "number": 6116,
    "body": "@mdcfe ",
    "head_branch": "backport",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Backport \"Route sign run_command click events through normal chat logic\" to 1.16.5 (#6116)\n\nCo-authored-by: mdcfe <1917406+mdcfe@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab65d9087c4d6d376bd7",
    "number": 6115,
    "body": "Drops the oshi-core dependency bump (done in Vanilla 1.17.1), changes my author names for lowercase gang, and changes md's author name to not bork on rebuilding",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Drop no longer needed patch (#6115)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab66d9087c4d6d376bd8",
    "number": 6112,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix MobEffectArgument#getEffect reobf"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab67d9087c4d6d376bd9",
    "number": 6109,
    "body": "This patch changes sign command logic so that `run_command` click events are routed through the standard chat/command logic used for inbound chat messages.\r\n\r\nThis fixes numerous issues related to sign click commands:\r\n  - Signs with a `run_command` value of \"/<plugin command>\" would fail and show the \"Unknown command\" warning. This prevents usage of commands like `//wand` from WorldEdit in sign click events entirely and requires users to drop the leading slash from other plugins' commands. This patch now executes the plugin commands as would be expected, adding a leading slash if necessary.\r\n  - Signs with a `run_command` value that doesn't match an existing command could fail silently. This patch causes these to *always* show \"Unknown command\" instead.\r\n  - Plugins listening to `PlayerCommandPreprocessEvent` would not be able to intercept any command executions from sign click events. This patch allows plugins to intercept player commands when fired by a click event, in the same manner as commands executed by the player typing or clicking on a chat message.\r\n  - Commands executed from signs would not be logged to the console. This patch fixes this.\r\n\r\nThis patch also prepends a leading slash if the `run_command` value lacks one, which matches vanilla behaviour (old code would strip this slash away) while also ensuring `PlayerCommandPreprocessEvent#getMessage` remains consistent with other command executions from chat (which always include the leading slash).\r\n\r\n(Thanks to @jpenilla for helping with this PR)",
    "head_branch": "feature/preprocess-sign-command",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Route sign run_command click events through normal chat logic (#6109)\n\nThis patch changes sign command logic so that `run_command` click events are routed through the standard chat/command\r\nlogic used for inbound chat messages.\r\n\r\nThis fixes numerous issues related to sign click commands:\r\n  - Signs with a `run_command` value of \"/<plugin command>\" would fail and show the \"Unknown command\" warning. This\r\n    prevents usage of commands like `//wand` from WorldEdit in sign click events entirely and requires users to drop\r\n    the leading slash from other plugins' commands. This patch now executes the plugin commands as would be expected,\r\n    adding a leading slash if necessary.\r\n  - Signs with a `run_command` value that doesn't match an existing command could fail silently. This patch causes\r\n    these to *always* show \"Unknown command\" instead.\r\n  - Plugins listening to `PlayerCommandPreprocessEvent` would not be able to intercept any command executions from\r\n    sign click events. This patch allows plugins to intercept player commands when fired by a click event, in the same\r\n    manner as commands executed by the player typing or clicking on a chat message.\r\n  - Commands executed from signs would not be logged to the console. This patch fixes this.\r\n\r\nThis patch also prepends a leading slash if the `run_command` value lacks one, which matches vanilla behaviour (old\r\ncode would strip this slash away) while also ensuring `PlayerCommandPreprocessEvent#getMessage` remains consistent\r\nwith other command executions from chat (which always include the leading slash)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab68d9087c4d6d376bda",
    "number": 6108,
    "body": "",
    "head_branch": "run-toolchain",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Use Java toolchain for run tasks (#6108)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab69d9087c4d6d376bdb",
    "number": 6107,
    "body": "This PR adds a new config option, ``settings.log-named-entity-deaths`` that allows you to turn off the entity death logging introduced by Mojang in 1.17.1.\r\nThis can be useful if you have a lot of named mobs, for example because you are running a custom mob plugin.\r\n\r\nIts my first time adding a config setting, hope I did everything right. \r\n\r\nI also looked at https://github.com/PaperMC/Paper/issues/6106 but I couldn't figure out why that would ever happen. This PR however would add a workaround for that.\r\n\r\nPaperDocs PR for the config setting: https://github.com/PaperMC/PaperDocs/pull/84",
    "head_branch": "entity-death-log",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add option for logging named entity deaths (#6107)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab6ad9087c4d6d376bdc",
    "number": 6105,
    "body": "Log message is being printed before the death event, meaning it will print for entities whose death later gets cancelled by plugins.",
    "head_branch": "fix-named-entity-death-loggin",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move log message for named entity deaths into correct location (#6105)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab6bd9087c4d6d376bdd",
    "number": 6104,
    "body": "Closes #6093\r\n\r\nNot 100% certain this is a safe change in regards to not breaking behavior of the legacy events. Seems relatively harmless but you know how legacy text is...",
    "head_branch": "use-defaultrenderer-where-possible",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use ChatRenderer.defaultRenderer() when legacy events have not modified the format (#6104)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab6cd9087c4d6d376bde",
    "number": 6103,
    "body": "",
    "head_branch": "deobf-sync-load-info",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Deobfuscate stacktraces in sync load info (#6103)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab6ed9087c4d6d376bdf",
    "number": 6102,
    "body": "Closes #6093\r\n\r\nNot 100% certain this is a safe change in regards to not breaking behavior of the legacy events. Seems relatively harmless but you know how legacy text is...",
    "head_branch": "use-defaultrenderer-where-possible",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab6fd9087c4d6d376be0",
    "number": 6100,
    "body": "",
    "head_branch": "deobf-sync-load-info",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab70d9087c4d6d376be1",
    "number": 6097,
    "body": "Definitely still todo\r\n- [x] mappings-patch: update/check if we're not changing random method's names now\r\n- [ ] Switch back to using Quilt's yarn and remove the Fabric repo from the build script (shouldn't be a merge blocker)\r\n\r\nProbably still todo\r\n- [x] optimize light engine: check where this.chunkMap.releaseLightTicket(chunkPos); went in lightChunk (probably has to be removed in the patch as well)\r\n- [ ] See if 0397 is ported correctly (new chunk iteration added, should be fine tho:tm:)",
    "head_branch": "dev/1.17.1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update to Minecraft 1.17.1 (#6097)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ab71d9087c4d6d376be2",
    "number": 6091,
    "body": "Remove's Billy's fix as upstream implemented a (broken) fix and then fixed their fix\r\n\r\nFixes #6068 \r\n\r\nCan probably be backported to 1.16.5",
    "head_branch": "fix/villager-EntityPickupItemEvent-cancellation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix cancelling EntityPickupItemEvent for villagers (#6091)\n\nRemove's Billy's fix as upstream implemented a (broken) fix and then fixed their fix"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab72d9087c4d6d376be3",
    "number": 6089,
    "body": "Closes #6080\r\n\r\nThis should be consisted with the now-deprecated Player#getPlayerListName which also is marked as NotNull",
    "head_branch": "fix/Adventure-nullability-annotation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Player#playerListName nullability annotation (#6089)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ab73d9087c4d6d376be4",
    "number": 6088,
    "body": "",
    "head_branch": "fix-adventure-doc-links",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add back linking to Adventure Javadoc (#6088)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab74d9087c4d6d376be5",
    "number": 6087,
    "body": "This includes Strays and matches the mojang RangedAttackMob. Should be good to go , it builds and is a straightforward change.",
    "head_branch": "ranged",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "AbstractSkeleton should extend RangedEntity (#6087)\n\nThis includes Strays and matches the mojang RangedAttackMob"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ab75d9087c4d6d376be6",
    "number": 6079,
    "body": "",
    "head_branch": "levelchunk-level-mapping",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add reobf mappings patch for LevelChunk#level (CraftBukkit changes type) (#6079)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab76d9087c4d6d376be7",
    "number": 6078,
    "body": "",
    "head_branch": "deobf-secondary-traces",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Also deobfuscate secondary stacktraces in crash reports (#6078)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab77d9087c4d6d376be8",
    "number": 6077,
    "body": "`spawnAnimals` was being used twice and `rareSpawn` was unused\r\n\r\nAlso added a mappings patch for a method where CB modifies params",
    "head_branch": "fix-per-player-mob-spawn",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix incorrect variable usage in per-player mob spawning patch (#6077)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab78d9087c4d6d376be9",
    "number": 6076,
    "body": "",
    "head_branch": "fix-bossbar",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Bossbar updating (closes #6061) (#6076)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab79d9087c4d6d376bea",
    "number": 6070,
    "body": "A better more generic name for the first patch would be appreciated.\r\n\r\nAdditionally, if you have any comments please speak up, this is my first thing doing anything like this and I would like all the feedback possible! Additionally with the identity hashmap, I am not sure if it is very necessary but I thought it _may_ still be a nice improvement to have? Unsure if the memory usage is worth it, so i'd like to hear. ",
    "head_branch": "remove-streams",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab7ad9087c4d6d376beb",
    "number": 6067,
    "body": "Fixes #6062\r\n\r\n(and rebuilds patches)",
    "head_branch": "fix/custom-beacon-ranges",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix custom beacon ranges (#6067)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab7bd9087c4d6d376bec",
    "number": 6057,
    "body": "",
    "head_branch": "villager-death-logger",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Honor spigot.yml setting log-villager-deaths (#6057)\n\ncat note: giggity."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab7cd9087c4d6d376bed",
    "number": 6056,
    "body": "",
    "head_branch": "ver/1.16.5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab7dd9087c4d6d376bee",
    "number": 6047,
    "body": "I assume the \"removed entity stuff\" was referring to activation range, but it's unneeded as entities aren't tied to chunks anymore.",
    "head_branch": "readd-ifloaded",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Readd \"Use getChunkIfLoadedImmediately in places\" (#6047)\n\n* Readd \"Use getChunkIfLoadedImmediately in places\"\r\n\r\n* Formatting\r\n\r\n* Fix var names"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab7ed9087c4d6d376bef",
    "number": 6046,
    "body": "Fixes #6039\r\n\r\nLooks to be a vanilla issue which was also present in 1.16.5.",
    "head_branch": "huge-fungus",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab7fd9087c4d6d376bf0",
    "number": 6043,
    "body": "fixes #6033 ",
    "head_branch": "mappings-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add reobf mappings patch for `LevelStorageSource$LevelStorageAccess#getDataTag` (#6043)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab81d9087c4d6d376bf1",
    "number": 6042,
    "body": "I've looked at all the uses of this method, none of them expect the\r\nmethod to actually load the chunk off disk if it's not loaded. This is a\r\nsolid improvement as it reduces chunk loads from entities, xray, and\r\neven fixes the \"seed-based-feature-search-loads-chunks\" configuration\r\noption which was broken before.",
    "head_branch": "fix/ifloaded-chunk-loading",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab82d9087c4d6d376bf2",
    "number": 6041,
    "body": "Fixes #5945",
    "head_branch": "1.16.5/fix/adventure-NPE",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix NPE for msg send on player join (#6041)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab83d9087c4d6d376bf3",
    "number": 6031,
    "body": "Somehow I managed to put the description string in the wrong place when adding this argument...",
    "head_branch": "plugin-jar-arg-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci-skip] Fix description of add-plugin command line option (#6031)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab84d9087c4d6d376bf4",
    "number": 6030,
    "body": "",
    "head_branch": "fix-applybonemeal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix return value of Block#applyBoneMeal always being false (#6030)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab85d9087c4d6d376bf5",
    "number": 6027,
    "body": "Seeing as now Axolotls too use the new sensor and behaviour \"brain\" system (additionally to Villagers and Piglins) I thought it would be nice to have the ability to both time and configure how expensive these parts of the entities are individually. I have been running a variation of this on my server for over a year now and have successfully mitigated any Villager farm lag simply by adjusting their behaviour and sensor ticking rates without fully disabling their AI or similar hacks. (Of course at higher values this will be noticeable like any other tick reduction)\r\n\r\nThe default options are there to a) provide an example and b) slightly improve the Villager performance out of the box without any noticeable differences (the villager secondaryplaces sensor has the default value, the villager positionvalidate one is set to 2 seconds to improve performance as this is by far the most expensive check which is done every tick by default)\r\n\r\nThe options can be set per entity type as well as every sensor/behaviour type (with the same names as the timings entries, detailed documentation and how to get all the names from timings will be submitted once I have confirmation that this patch is at least under consideration)\r\n\r\nThings that were considered and not implemented:\r\n- **Having the config options not be per world or entity type in order to further improve the performance of the options**\r\nThis would've meant that no map check needs to be done and the option would be per behaviour/sensor instance but imo this has the downside that different entities get influenced by the same option as some types share the same behaviour. Someone might not want to gimp both villagers and piglins at the same time.\r\nAlso changing this would've meant loosing reload support but that wasn't a big factor in the decision.\r\n- **Having timings include the entity/world name**\r\nIn lots of cases the timings names seem to include the entity/world name. I'm unsure how important that is for the inner workings of the timings system but as far as I can tell it seems to still group them correctly. Doing so would've meant to lookup the Timing instance on each ticking which seems to be pointless in my eyes. Hence I opted for not including that and to only use one Timing instance per Sensor/Behavior instance as there seems to be no real trade of regarding the actual usefulness.",
    "head_branch": "pr/behaviour-sensor-rate-settings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add rate options and timings for sensors and behaviors (#6027)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ab86d9087c4d6d376bf6",
    "number": 6018,
    "body": "As the name of the event suggests, it seems unfitting that the event is called when the player joins a server.  I can't think of a use case where you would want this event to call when a player joins, and that could easily be handled on PlayerJoinEvent or similar.\r\n\r\nI also updated the description of the event in the javadocs to more accurately reflect when the event fires.\r\n\r\n~~An afterthought I had while writing this is that the event be renamed PlayerArmorUpdateEvent.~~",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab87d9087c4d6d376bf7",
    "number": 6011,
    "body": "I figured that this would be a helpful utility method, especially considering that ItemStack#addEnchantments already exists as well.\r\n\r\nThis is my first contribution to Paper, so please let me know if anything needs to be changed! Hopefully everything's good 😅",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab88d9087c4d6d376bf8",
    "number": 6010,
    "body": "A previous paper patch introduced bounding box reuse for entities on\r\nposition updates if the x,y and z coordinate did not change.\r\nWhile this reusing in itself works fine, shulkers do update their\r\nbounding box without actually changing their x,y and z coordinates which\r\nis not respected due to the old bounding box being reused.\r\n\r\nThis commit fixes this issue by manually updating the shulker bounding\r\nbox after reapplying the position.\r\n\r\nAnother alternative solution would have been an exception specifically\r\nmade for shulkers to ignore the reuse logic, tho this would introduce a\r\nnew instanceOf check into the Entity#setPosRaw method and would be\r\nevaulated for every type of entity.\r\n\r\nSee also: https://github.com/PaperMC/Paper/blob/master/patches/server/0467-Ensure-Entity-AABB-s-are-never-invalid.patch\r\nResolves: #5915",
    "head_branch": "bugfix/ensure-shulker-boundinx-box-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Ensure shulker bounding box is updated (#6010)\n\nCo-authored-by: Jake Potrebic <jake.m.potrebic@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab89d9087c4d6d376bf9",
    "number": 6009,
    "body": "This is a rewrite of the original script, while trying to be as\r\ncompatible as possible. There's a few changes though:\r\n1. Patching and path rebuilding commands accept argument to only patch\r\n   api or server.\r\n2. testserver command no longer setups whole server with plugins,\r\n   instead uses runserver config. It also accept specifying whether to\r\n   run dev server (default), shadow or reobfuscated one.\r\n\r\nThis script now has all the logic in functions, which shifts the burden\r\nof unregistering variables onto the shell - we only need to remember to\r\ncleanup helper functions. Allows for more often use of meaningful\r\nvariables, which should hopefully make it easier to read.\r\n\r\nI tried to make it as compatible and portable as possible, assuming\r\nbasic BASH and ZSH features, but it's very likely that I missed\r\nsomething.\r\n\r\nA few things to consider:\r\n1. What should `build` command look like? There seems to be no difference in the old script, apart from not installing server into maven local: https://github.com/PaperMC/Paper/blob/ver/1.16.5/paper#L62-L82\r\n2. Should (most) commands warn that one should use gradle commands now, instead?\r\n3. What dependencies do we really require - I believe curl is redundant now, but haven't had a chance to test rest yet.\r\n\r\nThis is a DRAFT as it depends on changes from https://github.com/PaperMC/Paper/pull/5957\r\n\r\nCC:\r\n@Proximyst for script review\r\n@electronicboy for MacOS compat check",
    "head_branch": "resurrect_paper",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab8ad9087c4d6d376bfa",
    "number": 6005,
    "body": "Fixes #5994\r\n\r\nThis issue is already present in Spigot, somehow failing at reobfuscating the scope properly.\r\n\r\nThanks to Billy for figuring out the cause, this patch is a bit more elegant tho.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix chicken jockey chicken persistence (#6005)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab8bd9087c4d6d376bfb",
    "number": 6002,
    "body": "Fixes #6001",
    "head_branch": "fix/universe-forceUpgrade",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix use of universe flag and forceUpgrade"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab8cd9087c4d6d376bfc",
    "number": 6000,
    "body": "Closes #5973 \r\n\r\nThis is a port to 1.17 of #5993",
    "head_branch": "feature-entity-visibility-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab8dd9087c4d6d376bfd",
    "number": 5999,
    "body": "This can probably be made even better if you wanna de-streamify lots of the entity storage stuff, but that would be a bigger thing that just this one small change.\r\n\r\nAlso, I did do some rudimentary testing, both the old and new methods return the same thing generally, but this could use some more testing to ensure its consistent with the old method.",
    "head_branch": "fix/better-CraftChunk#getEntities",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve horrible CraftChunk#getEntities performance (#5999)\n\nThanks Spigot, very cool."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab8ed9087c4d6d376bfe",
    "number": 5993,
    "body": "Closes #5973 \r\n\r\nThis PR adds Entity Visibility API by injecting itself into the tracker logic roughly similar to how things were done for showPlayer/hidePlayer by upstream.\r\n\r\nWhen the new methods are called with a Player as argument, they redirect to the existing showPlayer/hidePlayer/canSee methods.\r\n\r\n~~Some sound effects are not using Entity#playSound method.~~\r\n~~I decided that changing that it out of scope for this PR/patch, a followup patch / PR can easily change that, playSound and sendPacketNearby methods are prepared.~~\r\nNow in this PR/patch as well\r\n\r\nFeedback appreciated\r\n\r\nEdit: ~~Once I tested this, I'll open another PR to also add the feature to 1.17~~\r\nPR for 1.17: #6000 ",
    "head_branch": "ver-1.16.5-feature-entity-visibility-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab8fd9087c4d6d376bff",
    "number": 5991,
    "body": "This PR simple reorders boolean expressions in hot code, making use of short-circuit evaluation to optimize Anti-Xray. I don't know how I didn't notice this earlier.\r\n\r\nSome context: The value `current[z][x]` describes if the block at `x`, `z` in the current chunk layer shouldn't be obfuscated (`false` ... obfuscate, `true` ... don't obfuscate). Usually in engine-mode 1 much less blocks must be obfuscated than in engine-mode 2. This means that the expression `current[z][x]` will evaluate much more often to `true` in engine-mode 1 and thus trigger the short-circuit evaluation much more often. However, even engine-mode 2 will profit from these changes.",
    "head_branch": "feature/optimize-anti-xray",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimize Anti-Xray (#5991)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab90d9087c4d6d376c00",
    "number": 5978,
    "body": "New chunk system doesn't do cancellations anymore.\r\n\r\nhttps://github.com/Tuinity/Tuinity/blob/3a57f640b7c63ffcd27ab5ff2ac9e8610312f010/patches/server/0060-Do-not-cancel-chunk-load-on-ticket-level-change.patch\r\n\r\nTested to at least improve (but hopefully fix) #5909 and #5910 using reproduction steps provided [here](https://github.com/PaperMC/Paper/issues/5910#issuecomment-866588606). I was able to cause the server to lock up and be unable to save 100% consistently within 2-30 seconds without this fix applied, and with it applied, I have not been able to lock up the server yet, and have been able to execute `/save-all flush` without issue.",
    "head_branch": "dont-cancel-chunk-loads",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Do not cancel chunk load on ticket level change (#5978)\n\nNew chunk system doesn't do cancellations anymore.\r\n\r\nCo-authored-by: Spottedleaf <spottedleaf@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab91d9087c4d6d376c01",
    "number": 5977,
    "body": "Updated Contributing to fit the new Gradle System.\r\n\r\n\r\nI'm still unsure about this Block:\r\n`\r\nThe PaperMC build tool provides a handy command to automatically do this type of patch modification.\r\n\r\n    Type ./paper edit server or ./paper edit api depending on which project you want to edit;\r\n        It should show something like this in the text editor you get.\r\n        If your editor does not have a \"menu\" at the bottom, you're using vim.\r\n        If you don't know how to use vim and don't want to learn, enter :q! and press enter. Before redoing this step, do export EDITOR=nano for an easier editor to use.\r\n    Replace pick with edit for the commit/patch you want to modify, and \"save\" the changes;\r\n        Only do this for one commit at a time.\r\n    Make the changes you want to make to the patch;\r\n    Type ./paper edit continue in the root directory to finish and rebuild patches;\r\n    PR your modified patch file(s) back to this repository.\r\n\r\nI'm sure anything similar to ./paper edit server does not exist for gradle, i'll just leave it here for edit.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab92d9087c4d6d376c02",
    "number": 5976,
    "body": "2 Events for the StoneCutter:\r\n\r\nPrepareStoneCutterEvent\r\nCalled when a Recipe got clicked\r\n\r\nStoneCutEvent\r\nCalled when the Result was clicked",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab93d9087c4d6d376c03",
    "number": 5965,
    "body": "",
    "head_branch": "mappings-hotfixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Hotfix for some of the reobf issues tracked in Paperweight issue 24 (#5965)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab94d9087c4d6d376c04",
    "number": 5964,
    "body": "Tested, and doesn't produce the vine issue anymore. Patch changes taken from [here](https://github.com/Tuinity/Tuinity/commit/7a55e31818184721673dd1e6b84d3957c9b9dc8e#diff-4f883f1ea4dd39067f4b47f105c4a4c4d801513750d97500b6725a2e489493ae).",
    "head_branch": "patch/Optimise-random-block-ticking",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab95d9087c4d6d376c05",
    "number": 5962,
    "body": "Adds stinger api, this is pretty much copied from arrows in body api.",
    "head_branch": "stinger-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add bee stinger API (#5962)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ab96d9087c4d6d376c06",
    "number": 5961,
    "body": "Fixes #5960",
    "head_branch": "fix/burning-mobs-summon-cmd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix mobs not burning from summon command (#5961)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab97d9087c4d6d376c07",
    "number": 5958,
    "body": "I know there are plans to make more complete documentation on Paperweight, however many people have asked about this elsewhere and there have already been, to my knowledge at least, two separate issues filed on it. This is just a temporary solution until any changes to Paperweight have been finalized and that documentation can be made, as apparently the update has drawn many people to wanting to contribute.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab98d9087c4d6d376c08",
    "number": 5957,
    "body": "Script cleanup and fixes. Notable behavioral changes:\r\n1. I've removed a \"feature\" where running `upstreamMerge.sh` without checked out submodules deleted your workspace.\r\n2. Added a way to disable patch rebuild process - useful for automation (\"Aikar script\").\r\n\r\nI've tried my best to not use too modern Bash features, everything should be very standard.\r\n\r\nCC for script review: @Proximyst ",
    "head_branch": "update_scripts",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab99d9087c4d6d376c09",
    "number": 5956,
    "body": "Fixes #5906",
    "head_branch": "fix/NPE-cook-multiplier",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix NPE when setting cook multiplier (#5956)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab9ad9087c4d6d376c0a",
    "number": 5955,
    "body": "Fixes #5953",
    "head_branch": "fix/timings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "remove calling expensive method (#5955)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab9bd9087c4d6d376c0b",
    "number": 5954,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab9cd9087c4d6d376c0c",
    "number": 5952,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\necf35dd7 #633: Add isTrusting/setTrusting to Ocelot.\r\n\r\nCraftBukkit Changes:\r\n887bc051 SPIGOT-6592: Tile entities in custom ChunkGenerator causes crash\r\n9ba1c67e #870: Add isTrusting/setTrusting to CraftOcelot.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#5952)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab9dd9087c4d6d376c0d",
    "number": 5948,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab9ed9087c4d6d376c0e",
    "number": 5947,
    "body": "Fixes #5889",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix player collision patch cleanup (#5947)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ab9fd9087c4d6d376c0f",
    "number": 5944,
    "body": "Also load the mappings from the correct location",
    "head_branch": "stacktrace-deobf-improvements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expand where stacktraces can be deobfuscated (#5944)\n\nAlso load the mappings from the correct location"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aba0d9087c4d6d376c10",
    "number": 5943,
    "body": "Preserves overstacked items in loot tables, such as shulker box drops, to prevent the items from being deleted (as they'd overflow past the bounds of the container)-- or worse, causing chunk bans via the large amount of NBT created by unstacking the items.\r\n\r\nFixes #5140 and fixes #4748.",
    "head_branch": "fix-shulker-stacks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Preserve overstacked loot (#5943)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aba1d9087c4d6d376c11",
    "number": 5942,
    "body": "Make paper version required in the issue templates",
    "head_branch": "require_version",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Performance boost! (#5942)\n\nMake paper version required in the issue templates"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aba2d9087c4d6d376c12",
    "number": 5940,
    "body": "Recently, while testing another bug fix from a personally compiled Paper jar, a friend experienced this bug:\r\n```\r\nPugabyte issued server command: /ver\r\n[WARN] java.io.IOException: Server returned HTTP response code: 403 for URL: https://api.github.com/repos/PaperMC/Paper/compare/master...22280c5\r\n<internal stuff>\r\n[WARN] at com.destroystokyo.paper.PaperVersionFetcher.fetchDistanceFromGitHub(PaperVersionFetcher.java:107)\r\n[WARN] at com.destroystokyo.paper.PaperVersionFetcher.getUpdateStatusMessage(PaperVersionFetcher.java:62)\r\n[WARN] at com.destroystokyo.paper.PaperVersionFetcher.getVersionMessage(PaperVersionFetcher.java:33)\r\n[WARN] at org.bukkit.command.defaults.VersionCommand.obtainVersion(VersionCommand.java:205)\r\n[WARN] at org.bukkit.command.defaults.VersionCommand$1.run(VersionCommand.java:189)\r\n```\r\n\r\nTesting in Postman, he discovered GitHub requires a User-Agent to be set ([documentation](https://docs.github.com/en/rest/overview/resources-in-the-rest-api#user-agent-required)):\r\n![image](https://user-images.githubusercontent.com/13265322/122822838-9a4ede80-d2ac-11eb-99ec-1badeb2d7a14.png)\r\n\r\nDespite my best efforts, I haven't actually been able to reproduce this bug (not even on his machine! GitHub just keeps returning a 200 OK now! what the hell GitHub!?), but it should fix it in theory :P\r\n",
    "head_branch": "fix-version-cmd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aba3d9087c4d6d376c13",
    "number": 5938,
    "body": "This is a full update to MC 1.17 including some fixes, code cleanup, refactoring and lots of field/method/variable renaming according to the new mappings.\r\n\r\n# Fixes\r\n[Limit](https://github.com/PaperMC/Paper/pull/5938/files#diff-9282fac5f2fae13e57ca2d0dd60a15292d1698c1b48a2e55d8492df6487032eeR469) max chunk section index to sections count - 1. Probably fixes #5920, needs testing. Pre-1.17 had a hardcoded [check](https://github.com/PaperMC/Paper/blob/ver/1.16.5/Spigot-Server-Patches/0362-Anti-Xray.patch#L39) for this.\r\n\r\n[Fix](https://github.com/PaperMC/Paper/pull/5938/files#diff-9282fac5f2fae13e57ca2d0dd60a15292d1698c1b48a2e55d8492df6487032eeR563) check if the chunk section index is sections count - 1. This was hardcoded to 15 in pre-1.17 and wasn't correctly updated.\r\n\r\n[Remove](https://github.com/PaperMC/Paper/pull/5938/files#diff-9282fac5f2fae13e57ca2d0dd60a15292d1698c1b48a2e55d8492df6487032eeR1303) method call that wasn't removed while updating.\r\n\r\n[Fix](https://github.com/PaperMC/Paper/pull/5938/files#diff-9282fac5f2fae13e57ca2d0dd60a15292d1698c1b48a2e55d8492df6487032eeR1312-R1318) and simplify bit counting logic, which is wrong since a few versions already.\r\n\r\n# Code changes\r\nThe [world (level) reference](https://github.com/PaperMC/Paper/pull/5938/files#diff-9282fac5f2fae13e57ca2d0dd60a15292d1698c1b48a2e55d8492df6487032eeL179-L181) is just a workaround, that is required to categorize block states and shouldn't be used for any further behavior of the instance. All methods have their own chunk or level parameter. Thus this logic is moved to the [obfuscate method](https://github.com/PaperMC/Paper/pull/5938/files#diff-9282fac5f2fae13e57ca2d0dd60a15292d1698c1b48a2e55d8492df6487032eeR469).\r\n\r\nThe more abstract [Level](https://github.com/PaperMC/Paper/pull/5938/files#diff-9282fac5f2fae13e57ca2d0dd60a15292d1698c1b48a2e55d8492df6487032eeR1195) type should be used instead of ServerLevel if possible. This is also beneficial because [LevelChunk](https://github.com/PaperMC/Paper/pull/5938/files#diff-9282fac5f2fae13e57ca2d0dd60a15292d1698c1b48a2e55d8492df6487032eeL1249-L1254) already has an implementation for this method.\r\n\r\nAnd further minor changes.\r\n\r\n# Renaming\r\nClasses/fields/methods/variables have been renamed to better reflect the naming scheme of the Mojang mappings.\r\n\r\n## Classes\r\nDataBitsReader -> BitStorageReader\r\nDataBitsWriter -> BitStorageWriter\r\n\r\n## Fields/methods/variables\r\nE.g. world -> level, blockData -> blockState, dataPalette -> palette, ...\r\nThe names are generally more consistent and meaningful now.\r\n\r\n# Improving diff\r\nE.g. by grouping [related code](https://github.com/PaperMC/Paper/pull/5938/files#diff-9282fac5f2fae13e57ca2d0dd60a15292d1698c1b48a2e55d8492df6487032eeL1037-R1038) or removing [unneeded changes](https://github.com/PaperMC/Paper/pull/5938/files#diff-9282fac5f2fae13e57ca2d0dd60a15292d1698c1b48a2e55d8492df6487032eeL1065-L1066).\r\n\r\n# Other\r\nUnify (// Paper - Anti-Xray) and update (e.g. variable names and info in) comments. Remove unneeded or obsolete comments.\r\n\r\nRefactor antixray.* classes with Intellij default formatter and further manual refactoring.",
    "head_branch": "dev/1.17-anti-xray",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Refactor Anti-Xray and make some fixes to it (#5938)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aba4d9087c4d6d376c14",
    "number": 5937,
    "body": "",
    "head_branch": "set-jd-encoding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Set UTF-8 encoding for Javadoc and ProcessResources (#5937)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aba5d9087c4d6d376c15",
    "number": 5935,
    "body": "This PR implements Adventure's `Sound.Source.Provider` which allows people to create sounds using the Bukkit `SoundCategory` enum instead of Adventure's `Sound.Source` enum.\r\n\r\n(an adventure PR that only touches one patch?? what sorcery is this?!)",
    "head_branch": "feature/sound-source-provider",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement Sound.Source.Provider (#5935)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aba6d9087c4d6d376c16",
    "number": 5934,
    "body": "Extremely vital to servers across the globe :3",
    "head_branch": "VeryImportantBugFix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] Very important bug fix :O (#5934)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aba7d9087c4d6d376c17",
    "number": 5932,
    "body": "I saw #5892 and figured why not go the extra mile and fit it in better with CraftBukkit's system.\r\n\r\nThis change not only fixes the blank messages, but also allows for newlines (`\\n`), the `<permission>` placeholder, and retains the ability for blank lines after splitting newlines.",
    "head_branch": "PermissionMessageUpgrades",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Permission message upgrades (#5932)\n\n* Permission message upgrades\r\n\r\n* Allow for blank lines after split\r\n\r\n* the future is now :o"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aba8d9087c4d6d376c18",
    "number": 5929,
    "body": "I had a cosmic brain moment in #5727 and forgot to implement access to `BlockState`. This PR corrects this.\r\n\r\nI've updated the test generator to test the new API as well: https://gist.github.com/dfsek/4b79e12f19fd3574a32701871a3aa8ed\r\n\r\n![image](https://user-images.githubusercontent.com/39248502/122732067-c0369d80-d230-11eb-9e65-a100a0e47a71.png)\r\n![image](https://user-images.githubusercontent.com/39248502/122732139-d47a9a80-d230-11eb-9caf-4c08789d54bd.png)\r\n",
    "head_branch": "protoworld-blockstate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add methods to `ProtoWorld` for working with `BlockState`s (#5929)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623abaad9087c4d6d376c19",
    "number": 5927,
    "body": "Add `AsyncTabCompleteEvent.IntCompletion` to allow for numerically sorted completion suggestions\r\n\r\nSigned-off-by: emilyy-dev <35617540+emilyy-dev@users.noreply.github.com>",
    "head_branch": "add-int-completion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ababd9087c4d6d376c1a",
    "number": 5926,
    "body": "",
    "head_branch": "stacktrace-deobfuscation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Deobfuscate stacktraces in log messages using a RewriteAppender and a custom RewritePolicy (#5926)\n\nAlso replace a couple calls to `System.err` with logger usages, as traces printed with the former do not get deobfuscated."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abacd9087c4d6d376c1b",
    "number": 5925,
    "body": "Only a little change in docs about the exception in setDropChance where no only in players can happen.\r\n\r\nThis exception happen in non EntityInsentient (like Players or ArmorStands)\r\n\r\nBased in https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/470050ad1e8944e0fcd8c966043705c2b006c3a8",
    "head_branch": "change-docs-chance-armor-content",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix `EntityEquipment::setDropChance` Javadoc (#5925)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abadd9087c4d6d376c1c",
    "number": 5924,
    "body": "",
    "head_branch": "fix-playerdropitemevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix PlayerDropItemEvent using wrong item (#5924)\n\nCo-authored-by: Spottedleaf <spottedleaf@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abaed9087c4d6d376c1d",
    "number": 5923,
    "body": "Fixes #5911 \r\n\r\nLooks like the wrong field was selected while updating/remapping, as the correct one should've been `inventory`, though it is private",
    "head_branch": "fix-book-edit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix \"Don't ignore result of PlayerEditBookEvent\" (#5923)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abafd9087c4d6d376c1e",
    "number": 5904,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n70d24eb8 SPIGOT-6587: Update documentation/error of drop chance API\r\n\r\nCraftBukkit Changes:\r\n470050ad SPIGOT-6587: Update documentation/error of drop chance API\r\n1c39efa3 Fix Inventory#getViewers on the player inventory not returning the player first time their inventory is opened\r\nd161627d Fix PrepareItemCraftEvent#isRepair\r\naa1fae73 SPIGOT-6586: EntityChangeBlockEvent for falling block does not cancel properly\r\n8a04072e SPIGOT-6583: Throwing eggs doesn't make sounds\r\n\r\nSpigot Changes:\r\nf773da84 Remove redundant patch\r\ncd367234 Rebuild patches",
    "head_branch": "upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#5904)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n70d24eb8 SPIGOT-6587: Update documentation/error of drop chance API\r\n\r\nCraftBukkit Changes:\r\n470050ad SPIGOT-6587: Update documentation/error of drop chance API\r\n1c39efa3 Fix Inventory#getViewers on the player inventory not returning the player first time their inventory is opened\r\nd161627d Fix PrepareItemCraftEvent#isRepair\r\naa1fae73 SPIGOT-6586: EntityChangeBlockEvent for falling block does not cancel properly\r\n8a04072e SPIGOT-6583: Throwing eggs doesn't make sounds\r\n\r\nSpigot Changes:\r\nf773da84 Remove redundant patch\r\ncd367234 Rebuild patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abb0d9087c4d6d376c1f",
    "number": 5903,
    "body": "It does not make a lot of sense to damage players if they get crammed, especially as the usecase of teleporting lots of players to the same location isn't too uncommon and killing all those players isn't really what one would expect to happen. (And I have seen this happen before, it could even result in a server crash when the items of 100 players get dropped...)\r\n\r\nFor those who really want it a config option is provided.\r\n\r\n",
    "head_branch": "pr/dont-cram-players",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't apply cramming damage to players (#5903)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abb1d9087c4d6d376c20",
    "number": 5897,
    "body": "Prevents world corruption when people get the bright idea of loading worlds generated with the Caves and Cliffs preview datapack without the datapack installed",
    "head_branch": "out-of-bounds-chunksection-detection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abb2d9087c4d6d376c21",
    "number": 5894,
    "body": "Meant to do this before merging, but oops",
    "head_branch": "worldgen-feature-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Rename package from `io.papermc.paper.world.gen` to `io.papermc.paper.world.generation` (#5894)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abb3d9087c4d6d376c22",
    "number": 5893,
    "body": "No sed implementation was harmed in the making of this motion... erm...\r\nof this commit.",
    "head_branch": "breaky/packages",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abb4d9087c4d6d376c23",
    "number": 5892,
    "body": "Closes #5870.\r\n\r\nFirst time contributing, and while I'm fairly confident with my java, Paper's a bit more than the average project. Hopefully I did this right.",
    "head_branch": "fix/no-permission-blank-lines",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: Blank ('') `no-permission` messages shouldn't send blank lines (#5892)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abb5d9087c4d6d376c24",
    "number": 5890,
    "body": "1. Gradle will now take `BUILD_NUMBER` env var as version number, and fallback to commit hash. https://www.jetbrains.com/help/teamcity/predefined-build-parameters.html#Server+Build+Properties\r\n2. Server manifest now contains `Git-Commit` and `Git-Branch` entries\r\n  NOTE: There will be different versions when running `./gradlew runDev` (in which case it contains Paper-Server info) vs `./gradlew runShadow` etc.\r\n3. On startup as well as when executing `/version` command, the git information is shown.\r\n  ```\r\n  This server is running Paper version git-Paper-\"1706351\" (MC: 1.17) (Implementing API version 1.17-R0.1-SNAPSHOT) (Git: build_manifest_version / 1706351)\r\n  ```\r\n  \r\nOther comments will be in my self-review in a moment.",
    "head_branch": "build_manifest_version",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make gradle take build number from env vars and add git build info (#5890)\n\n* Make gradle take build number from env vars\r\n\r\n* Add git information to manifest and version command/log\r\n\r\n* trim\r\n\r\n* Fix tests by adding NotNull annotations\r\n\r\n* rebase\r\n\r\n* Apply suggestions from kashike\r\n\r\nCo-authored-by: Riley Park <riley.park@meino.net>\r\n\r\n* Not always show branch\r\n\r\n* Why can't everything be NotNull by default?\r\n\r\n* Rebase\r\n\r\nCo-authored-by: Riley Park <riley.park@meino.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623abb6d9087c4d6d376c25",
    "number": 5882,
    "body": "Update the readme for new build instructions (before someone properly fixes up the contributing guidelines, maybe some changes in the readme as well).\r\n\r\nNow it's just important people are aware of the group id change, the jdk 16 requirement, and the Gradle commands.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Update README (#5882)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abb8d9087c4d6d376c26",
    "number": 5881,
    "body": "![https://memegenerator.net/img/instances/76610335/ship-it-ship-it-real-good.jpg](https://memegenerator.net/img/instances/76610335/ship-it-ship-it-real-good.jpg)",
    "head_branch": "dev/1.17",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "1.17 (#5881)\n\n* hacked build changes, api applies cleanly\r\n\r\n* Did anyone say gradle? and paperweight? potentially even mojmap?!\r\n\r\n* Update paperweight & build config for Spigot changes\r\n\r\n* Move patches\r\n\r\n* Initial Spigot remap patches\r\n\r\n* Inital remap of patches\r\n\r\n* Move patches around\r\n\r\n* Remap POM changes patch\r\n\r\nSigned-off-by: Mariell Hoversholm <proximyst@proximyst.com>\r\n\r\n* Rename POM changes to build system changes\r\n\r\nSigned-off-by: Mariell Hoversholm <proximyst@proximyst.com>\r\n\r\n* Apply a few more patches\r\n\r\nSigned-off-by: Mariell Hoversholm <proximyst@proximyst.com>\r\n\r\n* Rename all patches to correct numbering scheme\r\n\r\nSigned-off-by: Mariell Hoversholm <proximyst@proximyst.com>\r\n\r\n* More remapped patches\r\n\r\nSigned-off-by: Mariell Hoversholm <proximyst@proximyst.com>\r\n\r\n* ci: remove java 8 build\r\n\r\nSigned-off-by: Mariell Hoversholm <proximyst@proximyst.com>\r\n\r\n* Update Timings patch (#5796)\r\n\r\n* fix: up the max memory for gradle\r\n\r\nSigned-off-by: Mariell Hoversholm <proximyst@proximyst.com>\r\n\r\n* fix: add pom changes to gradle\r\n\r\nSigned-off-by: Mariell Hoversholm <proximyst@proximyst.com>\r\n\r\n* fix: remove empty java file\r\n\r\nSigned-off-by: Mariell Hoversholm <proximyst@proximyst.com>\r\n\r\n* fix: remove #isStopping check\r\n\r\nSigned-off-by: Mariell Hoversholm <proximyst@proximyst.com>\r\n\r\n* fix: closer to compilable\r\n\r\nSigned-off-by: Mariell Hoversholm <proximyst@proximyst.com>\r\n\r\n* fix: the server compiles\r\n\r\nSigned-off-by: Mariell Hoversholm <proximyst@proximyst.com>\r\n\r\n* fix: map parent method where CB does not\r\n\r\nSigned-off-by: Mariell Hoversholm <proximyst@proximyst.com>\r\n\r\n* feat: new maven group: io.papermc.paper\r\n\r\nSigned-off-by: Mariell Hoversholm <proximyst@proximyst.com>\r\n\r\n* fix: Update paperweight mcdev and fix CraftBukkit patch\r\n\r\n* few fixes to make it actually run\r\n\r\n* Add Paper version back to manifest, add `runShadow`, `runReobf`, and `runDev` tasks for testing\r\n\r\n* fix adventure patch\r\n\r\n* rebase\r\n\r\n* more patches\r\n\r\n* more patches\r\n\r\n* more patches (#5799)\r\n\r\n* Add ASM dep to API and fix issues from title packet changes with bungee api\r\n\r\n* patches\r\n\r\n* fix PlayerUseUnknownEntityEvent patch (#5800)\r\n\r\n* some patches\r\n\r\n* even more progress\r\n\r\n* even even more progress\r\n\r\n* even even even even even even even more work\r\n\r\n* even even even even even even even even even more changes\r\n\r\n* fix profile cache mappings\r\n\r\nlet me be OP god dammit!\r\n\r\n* even even even even even even even even even even even\r\n\r\neven even even even even even even even even even\r\neven even even even even even even even even even\r\neven even even even even even even even even even\r\neven even even even even even even even even even\r\neven even even even even even even even even even\r\neven even even even even even even even even even\r\n\r\nmore work\r\n\r\n* even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even\r\n\r\nmore work\r\n\r\n* add mcdev imports file\r\n\r\n* More work\r\n\r\n* More more work\r\n\r\n* Fix patch, fix .gitattributes file name\r\n\r\n* More more more work\r\n\r\n* even more wooooooooooooooooooooooooork uwu\r\n\r\n* more patches (#5807)\r\n\r\n* Fix this stupid bullshit v2\r\n\r\n* delete unneeded old patches\r\n\r\n* more patches (#5808)\r\n\r\n* more patches\r\n\r\n* gradlew.bat crlf fix (#5810)\r\n\r\n* more patches (#5811)\r\n\r\n* Cleanup project build config\r\n\r\n* Write API version to pom.properties for Versioning to read\r\n\r\nMaven writes this metadata normally, but we don't use maven. Maybe should modify Versioning instead in the future, but this works just fine for now.\r\n\r\n* wowe\r\n\r\n* Add `runWorkDir` property for setting a custom run task working directory\r\n\r\n* Use `mergeServiceFiles()` instead of AppendingTransformer\r\n\r\n* Bump tiny-remapper to 0.4.1\r\n\r\n* Use `forUseAtConfigurationTime()` for run directory property\r\n\r\n* Resolve run working directory from rootProject\r\n\r\n* even even even even more work\r\n\r\n* wor\r\n\r\n* patches\r\n\r\n* Updated Upstream (Bukkit/CraftBukkit/Spigot)\r\n\r\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n8503c3c9 #621: Add HumanEntity#getItemInUse and Material#getSlipperiness\r\n248deb09 #622: Add methods to check if item is the breed item for an entity\r\n2ce691d8 Clarify Player#breakBlock only works for blocks in the same world\r\n5dcdd48e SPIGOT-6514: Small Dripleaf block data is missing half property\r\ncc9610b7 #619: Add Player#breakBlock()\r\n862bc475 Fix bad merge of SPIGOT-6502 fix\r\n989bb0c1 Downgrade SnakeYAML due to issues with comments parsing\r\n1dff62ae Fix inverted visual fire docs\r\n\r\nCraftBukkit Changes:\r\n40caacc8 SPIGOT-6526: World entities are not populated when plugin onEnable is called\r\nc9a92ad0 SPIGOT-6536: Marker position not set on spawn\r\n20d3e57c #855: Add HumanEntity#getItemInUse and Material#getSlipperiness\r\nd9c69b44 SPIGOT-6529: Fix BundleMeta#setItems\r\n8bd43be5 SPIGOT-6535: PlayerGameModeChangeEvent event incorrectly reports old gamemode\r\n4ece3ff3 #856: Add methods to check if item is the breed item for an entity\r\ndd4bec5f Add additional validation to Player#breakBlock\r\nbc835ae6 SPIGOT-6532: Fix Entity#setGlowing\r\n384e116e Restore 1.16.5 behaviour of InventoryDragEvent being called even when a single item is 'dragged' to its own slot\r\nb42e708c Fix new map colors rendering as transparent\r\ncfe7fecf SPIGOT-6524: Inventory desync when InventoryClickEvent is cancelled\r\neeae1b19 SPIGOT-6522: ItemStack on cursor is always AIR\r\n7490724d Fix missing PlayerEditBookEvent\r\n06875f76 SPIGOT-6513: Placing ItemStack in Inventory causes InventoryAction.NOTHING\r\n27835bde SPIGOT-6519: Fix end gateway teleports\r\n4ac634ad SPIGOT-6515: \"Un-waterlogging\" throws UnsupportedOperationException in some cases\r\nda425fa2 SPIGOT-6518: Anvils falling onto dripstone can sometimes crash server\r\n50530da9 SPIGOT-6514: Small Dripleaf block data is missing half property\r\n6fdecf20 #853: Implement Player#breakBlock()\r\n4db9c49f SPIGOT-6510: Bukkit#createMap throws NullPointerException\r\n89e2b127 SPIGOT-6517: Spider jockey crash on dripstone\r\ncbf2f678 SPIGOT-6508: Rename conflicted getServer\r\n74575d48 SPIGOT-6506: Fix crash with custom inventories\r\na3df386f Fix NPE with Entity.getNearbyEntities\r\nd747f8ed Fix NPE with World.getNearbyEntities\r\n4d2c7800 Fix second usage of worldGenSettings just in case\r\n5182f923 SPIGOT-6504: Fix generating fresh worlds\r\n\r\nSpigot Changes:\r\n66f9d3c1 Rebuild patches\r\n191e4971 Rebuild patches\r\na09c0bb6 Restore Spigot experience merging\r\n\r\n* patches\r\n\r\nfix\r\n\r\n* patches and patches\r\n\r\n* patch\r\n\r\n* fix compile\r\n\r\n* Work\r\n\r\n* More work\r\n\r\n* More more work\r\n\r\n* Move this back\r\n\r\n* Fix compile\r\n\r\n* more work\r\n\r\n* fix kneny dumb\r\n\r\n* even more work\r\n\r\n* Fix recursive connection call causing StackOverflowException\r\n\r\nThis was probably caused by the rename sendPacket->send and dispatchPacket->sendPacket\r\n\r\n* adjust material set tag sizes\r\n\r\nMC added a buuuunch of stuff\r\n\r\n* more patches\r\n\r\n* MOAR PATCHES\r\n\r\n* update github action to the new setup\r\n\r\n* update github action to the new setup\r\n\r\n* separate out the CI tasks\r\n\r\n* use local class for movecontrol stuff to prevent reobf mapping issue\r\n\r\n* eeeeww, maven\r\n\r\n* not even checkstyle can help us now\r\n\r\n* fix tests\r\n\r\n* EVEN MOOOOOAAAAAAARRRRRRR patches :) (#5820)\r\n\r\n* Use correct jetbrains annotations\r\n\r\n* work work (#5821)\r\n\r\n* patches\r\n\r\n* reorder patches after merge\r\n\r\n* small fixes\r\n\r\n* fix exception (#5822)\r\n\r\n* 2 patch\r\n\r\n* progress\r\n\r\n* Re-add xp orb merging patches (#5823)\r\n\r\n* ReAdded PreCreatureSpawnEvent from removed (#5814)\r\n\r\n* reorder\r\n\r\n* patches\r\n\r\n* Fix mojangapi build\r\n\r\n* Add back incremental chunk saving patch\r\n\r\n* add entity debug info patch back\r\n\r\n* more patches (#5827)\r\n\r\n* more patches\r\n\r\n* even moar patches\r\n\r\n* Add missing getLevel implementation to Hopper Minecart, add mapping to fix reobf\r\n\r\n* decomp fixes\r\n\r\n* more work uwu\r\n\r\n* fix issue in hopper patch\r\n\r\n* more work work work\r\n\r\n* even MOAR progress\r\n\r\n* need to look at this later, fails rn\r\n\r\n* even moar workkkkk\r\n\r\n* fix compile issues\r\n\r\n* even more compile fixes\r\n\r\n* fix no grav bee patch for world height changes\r\n\r\n* more patches\r\n\r\n* resolve paperweight from paper repo\r\n\r\n* run CI with --stacktrace\r\n\r\n* more patches\r\n\r\n* more patches & fixes to existing patches\r\n\r\n* add access transforming capabilities\r\n\r\n* continue to load paperclip from jfrog for now\r\n\r\n* more patches\r\n\r\n* Put pom in correct location for Paperclip install to maven local feature\r\n\r\n* Re-add Chunk Priority/Urgency System (#5829)\r\n\r\n* Organize removed patches (#5836)\r\n\r\n* tons of patches (#5835)\r\n\r\n* Fix AT format issue\r\n\r\n* Update editorconfig\r\n\r\n* patches\r\n\r\n* update mappings files\r\n\r\n* Updated Upstream (Bukkit/CraftBukkit)\r\n\r\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nebb0e28d #631: Add Villager#shakeHead\r\n751469c6 #629: Add LivingEntity#isClimbing\r\n\r\nCraftBukkit Changes:\r\n622cf611 SPIGOT-6555: Cannot access shield BlockStateMeta\r\n8b2e78ec SPIGOT-6542: Fix counting players with fauxSleeping = true\r\nf66c437a SPIGOT-6561: Add events for dripleaf tilting\r\n6ed40004 SPIGOT-6560: Crash when falling stalactite hits player\r\n72a2901b SPIGOT-6557: PlayerEditBookEvent#setNewBookMeta does not update meta\r\na07e783a #865: Implement Villager#shakeHead\r\n3252ff18 #863: Add LivingEntity#isClimbing\r\n77058c79 SPIGOT-6554: Worlds created with the bukkit ChunkGenerator cannot save\r\n\r\n* fixes\r\n\r\n* Gradle & Paperclip updates\r\n\r\n* Fix mappings patches for Hopper getLevel issue\r\n\r\n* final patches from remapped and unmapped\r\n\r\nkeep in mind many patches in the removed folder still need to be updated\r\n\r\n* update Fix incorrect status dataconverter for pre 1.13 chunks\r\n\r\n* Add back stream patch (#5838)\r\n\r\n* port some patches (#5837)\r\n\r\n* reorder patches after merge\r\n\r\n* Update to paperweight 1.0.0, with automatic library imports\r\n\r\n* Update paperweight to 1.0.1\r\n\r\n* Run Gradle tasks in parallel by default\r\n\r\n* Remove now unnecessary scripts and update upstreamMerge.sh\r\n\r\n* Remove Paperclip submodule\r\n\r\n* Updated Upstream (CraftBukkit)\r\n\r\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\nf992ce60 Fix duplicate datapack reload on /reload\r\n\r\n* revert accidental changes\r\n\r\n* update Optimize Pathfinder - Remove Streams / Optimized collections\r\n\r\n* Revert \"Updated Upstream (CraftBukkit)\"\r\n\r\nThis reverts commit c9f654db919574ef221a75373d0a5643d5051e40.\r\n\r\n* add back optimizing hopper searches (#5839)\r\n\r\n* Clean cache on upstream update\r\n\r\n* Updated Upstream (CraftBukkit/Spigot)\r\n\r\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\nf992ce60 Fix duplicate datapack reload on /reload\r\n\r\nSpigot Changes:\r\n9472b09d Rebuild patches\r\n\r\n* Remove sync loading of spawn chunks\r\n\r\nAdding the tickets is sufficient\r\n\r\n* BlockPos.withinManhattan decomp fix\r\n\r\n* Port anti x-ray patch\r\n\r\n* Fix ChunkPacketBlockControllerAntiXray initialize\r\n\r\n* Changes to xray patch\r\n\r\n* Port Stop-copy-on-write-operations-for-updating-light-dat\r\n\r\n* Disable Gradle file system watching by default\r\n\r\nIt's unclear if this will help anything but we are getting a lot of\r\nissues with the daemon holdong on to files between builds and causing\r\nissues.\r\n\r\n* Add note on removed patch\r\n\r\n* start adding in ATs\r\n\r\n* AT bullshit\r\n\r\n* Fix a few cases of the vanilla mob goals\r\n\r\n* one missed AT\r\n\r\n* mojang mapped vanilla goals\r\n\r\n* added remaining hunks from chat/title packets (#5844)\r\n\r\n* fix StopAttackingIfTargetInvalid behavior\r\n\r\n* Update sync chunk load debug patch\r\n\r\nHad to drop some hunks modifying getEntities, as those methods were rewritten by Mojang in 1.17\r\n\r\n* Updated Upstream (Bukkit/CraftBukkit) & more patches\r\n\r\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\ne9ce88b9 SPIGOT-6562: Add more specific sculk sensor event\r\n\r\nCraftBukkit Changes:\r\nd7ef1e91 SPIGOT-6558: Attempt to improve SkullMeta\r\ne7a63287 SPIGOT-6562: Add more specific sculk sensor event\r\n\r\n* add more patches back\r\n\r\n* Update Paperweight to 1.0.2\r\n\r\n* Update runDev task for Gradle 7.1 deprecations\r\n\r\nalso no longer disable watchdog by default, instead require `disableWatchdog` Gradle property to be set\r\n\r\n* Bump paperweight to 1.0.3\r\n\r\n* more patches added back\r\n\r\n* Bump paperweight to 1.0.4\r\n\r\n* Revert \"Re-add Chunk Priority/Urgency System (#5829)\"\r\n\r\nThis reverts commit 24b7da65eed610c18d1c7a66578b57ca71428a00.\r\n\r\nPatch was updated incorrectly and needs a closer look.\r\n\r\n* Temporarily revert incremental chunk saving patch\r\n\r\nNeeds updating to hook into new entity storage system\r\n\r\n* Modify entity origin API to store world/pos seperatly\r\n\r\n* Fix comment\r\n\r\n* Update Asynchronous chunk IO and loading for variable world height limits\r\n\r\n* Port chunk priority urgency patch\r\n\r\n* Definitely readd this patch for the first time\r\n\r\n* Fix custom world height in xray patch\r\n\r\n* Port improve chunk status transition speed\r\n\r\n* remove optimise random tick patch for now\r\n\r\n* Fix entity death sounds\r\n\r\n* fixes issue with chunk saving\r\n\r\nfixes #5854\r\n\r\n* Enable chunk load for feature search by default\r\n\r\n* remove some more obf helpers\r\n\r\n* update to Adventure 4.8.1\r\n\r\n* Fix artifact ids\r\n\r\n* Minor patch cleanup\r\n\r\n* Bump paperweight to 1.0.5\r\n\r\n* Add a note about deleting pom.xml in first patch\r\n\r\n* Relocate other libraries Spigot added and relocates in 1.17\r\n\r\n* Update Entity load/save limit per chunk\r\n\r\n* Simplify Multi-Release plugin jar patch\r\n\r\nWe don't have to worry about running on Java <9 anymore.\r\n\r\n* Bump paperweight to 1.1.0\r\n\r\nThis paperweight update uses Hypo to cleanup and fix reobf mappings\r\nbased on the completed jar, which removes a lot of issues we were\r\npreviously having around weird CraftBukkit edge cases and synthetic\r\nissues (as always). It's not yet perfect (PaperMC/paperweight#18) but\r\nit's much better than it was.\r\n\r\n* Update incremental chunk saving\r\n\r\n* Update author on my patches\r\n\r\n* Updated Upstream (Bukkit/CraftBukkit/Spigot)\r\n\r\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n2dbec584 SPIGOT-6570: Missing InventoryType: COMPOSTER\r\ne9ce88b9 SPIGOT-6562: Add more specific sculk sensor event\r\n\r\nCraftBukkit Changes:\r\n9122f5a6 #869: Fix BossBar setColor and setStyle updates\r\n96a15d7a Incrase outdated build delay\r\nded19075 SPIGOT-6570: Missing InventoryType: COMPOSTER\r\nd7ef1e91 SPIGOT-6558: Attempt to improve SkullMeta\r\ne7a63287 SPIGOT-6562: Add more specific sculk sensor event\r\n\r\nSpigot Changes:\r\n101ebb63 SPIGOT-6573: Berry Bushes deal damage when not moving\r\n\r\n* remove remaining POMs\r\n\r\n* missing ats and mappings\r\n\r\n* check if sender is a player in paper dumpitem command, closes #5858\r\n\r\n* remove system property for book size limits\r\n\r\n\"It was from a different time before books were as jank as they are now. As time has gone on they've only proven to be worse and worse.\"\r\n\r\n* nuke a few more obfhelpers\r\n\r\n* deprecate all obfhelpers\r\n\r\n* death to more obfhelpers\r\n\r\n* fix build\r\n\r\n* remove more obfhelpers\r\n\r\n* Bump paperweight to 1.1.2\r\n\r\n* Don't include log4j\r\n\r\n* Fix #5856 Entity origin (#5861)\r\n\r\n* Thanks for joining us for the magic show tonight\r\n\r\n* Move package version to server project\r\n\r\n* downgrade snakeyaml to fix issues with comments\r\n\r\nthis was done by upstream, but got missed. Thanks @mrfloris for pointing this out.\r\n\r\n* Remove chat event APIs marked as deprecated for removal with 1.17\r\n\r\n* Add task to print Minecraft version, add snapshots repo for publishing\r\n\r\n* Save BlockEntities on main for async chunk saves\r\n\r\nCloses #5854\r\n\r\n* add back optimizing ServerLevel chunk checking methods\r\n\r\n* Updated Upstream (CraftBukkit)\r\n\r\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n68d40318 SPIGOT-6580: Cancelling SlimeSplitEvent Causes Infinite Loop\r\n78d93f77 SPIGOT-6576: BlockExpEvent does not show XP when breaking a furnace\r\n\r\n* Fix startup delay and warning caused by oshi\r\n\r\n* thank you for your service, old spigot mapped patches, you will not be missed.\r\n\r\n* fix patch mis-order\r\n\r\nCo-authored-by: Kyle Wood <kyle@denwav.dev>\r\nCo-authored-by: Mariell Hoversholm <proximyst@proximyst.com>\r\nCo-authored-by: Jake Potrebic <15055071+Machine-Maker@users.noreply.github.com>\r\nCo-authored-by: Jason Penilla <11360596+jpenilla@users.noreply.github.com>\r\nCo-authored-by: Jake Potrebic <jake.m.potrebic@gmail.com>\r\nCo-authored-by: Spottedleaf <Spottedleaf@users.noreply.github.com>\r\nCo-authored-by: KennyTV <jahnke.nassim@gmail.com>\r\nCo-authored-by: Aurora <aurora@relanet.eu>\r\nCo-authored-by: mechoriet <kevinworm92@gmail.com>\r\nCo-authored-by: Professor Bloodstone <git@bloodstone.dev>\r\nCo-authored-by: Omer Uddin <kickash32@gmail.com>\r\nCo-authored-by: Josh Roy <10731363+JRoy@users.noreply.github.com>\r\nCo-authored-by: Kyle Wood <demonwav@gmail.com>\r\nCo-authored-by: Shane Freeder <theboyetronic@gmail.com>\r\nCo-authored-by: Riley Park <riley.park@meino.net>\r\nCo-authored-by: djytw <djytw@live.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623abb9d9087c4d6d376c27",
    "number": 5868,
    "body": "Two of the methods no longer make use of the Either class, so it was just adding the inlined MCUtil method, and I think I converted the 3rd method correctly.",
    "head_branch": "dev/1.17-improve-chunk-level-methods",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add back optimizing ServerLevel chunk checking methods"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abbad9087c4d6d376c28",
    "number": 5867,
    "body": "",
    "head_branch": "feature/banner-custom-name",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abbbd9087c4d6d376c29",
    "number": 5863,
    "body": "",
    "head_branch": "dev/1.17-optimize-light-engine",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add Optimize Light Engine patch (#5863)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abbcd9087c4d6d376c2a",
    "number": 5861,
    "body": "Fix #5856 Entity origin",
    "head_branch": "fixorigin",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #5856 Entity origin (#5861)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abbdd9087c4d6d376c2b",
    "number": 5860,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abbed9087c4d6d376c2c",
    "number": 5859,
    "body": "This fixes issue #5828 and logs commands issued through a sign click in console.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abc0d9087c4d6d376c2d",
    "number": 5849,
    "body": "![XRZ 7BE {1Y5XX_`WK1D9{P](https://user-images.githubusercontent.com/69817107/122218149-b6cfcd00-cee0-11eb-8cf9-4ed966143736.png)\r\n",
    "head_branch": "dev/1.17",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abc1d9087c4d6d376c2e",
    "number": 5846,
    "body": "Replaces #5793 for 1.17\r\n\r\nCloses #5793.",
    "head_branch": "dev/1.17-entity-origin",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix comment"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abc2d9087c4d6d376c2f",
    "number": 5844,
    "body": "",
    "head_branch": "dev/1.17-text-packets",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "added remaining hunks from chat/title packets (#5844)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abc3d9087c4d6d376c30",
    "number": 5840,
    "body": "This solves the issue #5246 ",
    "head_branch": "feature/5246-additional-parameter-at-block-breaks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add custom destroyerIdentity parameter to the sendBlockBreak function (#5840)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623abc4d9087c4d6d376c31",
    "number": 5839,
    "body": "I think this should replicate the effect the previous patch had.",
    "head_branch": "dev/1.17-hopper-search-optimizations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add back optimizing hopper searches (#5839)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abc5d9087c4d6d376c32",
    "number": 5838,
    "body": "",
    "head_branch": "dev/1.17-stream-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add back stream patch (#5838)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abc6d9087c4d6d376c33",
    "number": 5837,
    "body": "not sure if Optimize-Biome-Mob-Lookups-for-Mob-Spawning.patch was ported correctly - please review",
    "head_branch": "patches",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "port some patches (#5837)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abc7d9087c4d6d376c34",
    "number": 5836,
    "body": "For patches with a note confirming the fact that these are unneeded, I have moved them much investigation. The rest I have looked at the source to determine if they were needed.",
    "head_branch": "organize-dev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Organize removed patches (#5836)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abc8d9087c4d6d376c35",
    "number": 5835,
    "body": "",
    "head_branch": "dev/1.17-machine",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "tons of patches (#5835)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623abc9d9087c4d6d376c36",
    "number": 5833,
    "body": "",
    "head_branch": "dev/1.17-machine",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "more patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abcad9087c4d6d376c37",
    "number": 5832,
    "body": "",
    "head_branch": "dev/1.17-machine",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "more patches & fixes to existing patches"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abcbd9087c4d6d376c38",
    "number": 5831,
    "body": "",
    "head_branch": "dev/1.17-machine",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "more patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623abccd9087c4d6d376c39",
    "number": 5829,
    "body": "My attempt to help the Community with porting patches over for 1.17,\r\nthis patch got removed cause it quite a big diff",
    "head_branch": "Readded-Chunk-priority-Urgency-System-for-Chunks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Re-add Chunk Priority/Urgency System (#5829)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abcdd9087c4d6d376c3a",
    "number": 5827,
    "body": "",
    "head_branch": "dev/1.17-machine",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "more patches (#5827)\n\n* more patches\r\n\r\n* even moar patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abcfd9087c4d6d376c3b",
    "number": 5826,
    "body": "I added this patch further up the tree, so as to fix a patch that had to take chunks of this patch for its own.\r\n\r\nSpecifically, the `Update entity Metadata for all tracked players` took parts of this patch.",
    "head_branch": "dev/1.17-entity-debug-info",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add entity debug info patch back"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abd0d9087c4d6d376c3c",
    "number": 5824,
    "body": "The chunk no longer stored the last save time, so I added it back in what I think are the relevant places.",
    "head_branch": "dev/1.17-incremental-chunk-saving",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add back incremental chunk saving patch"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abd1d9087c4d6d376c3d",
    "number": 5823,
    "body": "",
    "head_branch": "dev/1.17-machine",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Re-add xp orb merging patches (#5823)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abd2d9087c4d6d376c3e",
    "number": 5822,
    "body": "",
    "head_branch": "fixup-per-player",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix exception (#5822)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abd3d9087c4d6d376c3f",
    "number": 5821,
    "body": "fix 2 patches",
    "head_branch": "1.17-progress",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "work work (#5821)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abd4d9087c4d6d376c40",
    "number": 5820,
    "body": "",
    "head_branch": "dev/1.17-machine",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "EVEN MOOOOOAAAAAAARRRRRRR patches :) (#5820)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623abd5d9087c4d6d376c41",
    "number": 5818,
    "body": "",
    "head_branch": "dev/1.17-machine",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "MOAR PATCHES"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abd6d9087c4d6d376c42",
    "number": 5817,
    "body": "",
    "head_branch": "dev/1.17-machine",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "more patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623abd7d9087c4d6d376c43",
    "number": 5816,
    "body": "This was probably caused by the rename sendPacket->send and dispatchPacket->sendPacket\r\n\r\nWhen joining the game, you were greeted with logs:\r\n```\r\n[17:32:53 WARN]: [io.netty.channel.AbstractChannelHandlerContext] An exception 'java.lang.StackOverflowError' [enable DEBUG level for full stacktrace] was thrown by a user handler's exceptionCaught() method while handling the following exception:\r\njava.lang.StackOverflowError: null\r\n    at net.minecraft.network.Connection.isConnected(Connection.java:496) ~[Paper-Server-1.17-R0.1-SNAPSHOT-all.jar:git-Paper-\"0ea382b\"]\r\n    at net.minecraft.network.Connection.send(Connection.java:245) ~[Paper-Server-1.17-R0.1-SNAPSHOT-all.jar:git-Paper-\"0ea382b\"]\r\n    at net.minecraft.network.Connection.send(Connection.java:254) ~[Paper-Server-1.17-R0.1-SNAPSHOT-all.jar:git-Paper-\"0ea382b\"]\r\n    at net.minecraft.network.Connection.send(Connection.java:254) ~[Paper-Server-1.17-R0.1-SNAPSHOT-all.jar:git-Paper-\"0ea382b\"]\r\n    at net.minecraft.network.Connection.send(Connection.java:254) ~[Paper-Server-1.17-R0.1-SNAPSHOT-all.jar:git-Paper-\"0ea382b\"\r\n[...]\r\n```\r\nThis doesn't happen now.",
    "head_branch": "fix_recursive_connection_call",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix recursive connection call causing StackOverflowException\n\nThis was probably caused by the rename sendPacket->send and dispatchPacket->sendPacket"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abd8d9087c4d6d376c44",
    "number": 5815,
    "body": "# Material Color API\r\n\r\nAdding API to easily manage colors for materials and items\r\n\r\n###### Improved version",
    "head_branch": "feature/ColorManagement",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abd9d9087c4d6d376c45",
    "number": 5814,
    "body": "At the time it was unclear how this patch should be fixed up cause it was all over the place with conflicts\r\n\r\nthis PR will reAdd that said patch\r\n\r\n",
    "head_branch": "PreCreatureSpawnEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "ReAdded PreCreatureSpawnEvent from removed (#5814)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abdad9087c4d6d376c46",
    "number": 5813,
    "body": "Add JetBrains to the Readme, link the image of yourkit to their homepage",
    "head_branch": "aurorasmiles-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Add JetBrains, thank you! (#5813)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abdbd9087c4d6d376c47",
    "number": 5811,
    "body": "",
    "head_branch": "dev/1.17-machine",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "more patches (#5811)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623abdcd9087c4d6d376c48",
    "number": 5810,
    "body": "as requested by @MiniDigger for crlf fix after .gitattributes change,\r\nwhich new clones could have issues with the gradlew.bat end line",
    "head_branch": "crlf-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "gradlew.bat crlf fix (#5810)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abddd9087c4d6d376c49",
    "number": 5809,
    "body": "",
    "head_branch": "dev/1.17-machine",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "more patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abded9087c4d6d376c4a",
    "number": 5808,
    "body": "",
    "head_branch": "dev/1.17-machine",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "more patches (#5808)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623abdfd9087c4d6d376c4b",
    "number": 5807,
    "body": "",
    "head_branch": "dev/1.17-machine",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "more patches (#5807)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abe0d9087c4d6d376c4c",
    "number": 5804,
    "body": "even even even even even even even even even even\r\neven even even even even even even even even even\r\neven even even even even even even even even even\r\neven even even even even even even even even even\r\neven even even even even even even even even even\r\neven even even even even even even even even even\r\n\r\nmore work",
    "head_branch": "dev/1.17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even even\n\nmore work"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abe1d9087c4d6d376c4d",
    "number": 5802,
    "body": "",
    "head_branch": "dev/1.17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "even even even even even even even even even more changes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abe2d9087c4d6d376c4e",
    "number": 5800,
    "body": "",
    "head_branch": "dev/1.17-machine",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix PlayerUseUnknownEntityEvent patch (#5800)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abe3d9087c4d6d376c4f",
    "number": 5799,
    "body": "",
    "head_branch": "dev/1.17-machine",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "more patches (#5799)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abe4d9087c4d6d376c50",
    "number": 5798,
    "body": "![Trackables, Locations everywhere](https://raw.githubusercontent.com/TheFruxz/TheFruxz/master/GlobalAssets/repo/PaperMC-Paper/PR/Trackables/Trackables-BANNER-Front.jpg)\r\n\r\n# ![The Introduction](https://raw.githubusercontent.com/TheFruxz/TheFruxz/master/GlobalAssets/repo/PaperMC-Paper/PR/Trackables/TITLE-THE_INTRODUCTION.jpg)\r\n\r\nHey!\r\nDuring my development of Paper, Spigot and Bukkit plugins I came across worlds, entities, blocks and their locations very often. Whenever you want to use their locations for something like a function or a setter, you first have to take the object (e.g. the entity) and then use a separate sub-function to retrieve the location.\r\n\r\nExample:\r\n```java\r\npublic void setParticleLocation(ArmorStand armorStand) {\r\n   setLocationOfParticle(armorStand.getLocation())\r\n}\r\n``` \r\n\r\nMy idea now would have been to make the complete matter unnecessary for the developer by giving the developer directly the possibility to pass the position, if this would be logical in a case. But how did I think of this? This is what comes now!\r\n\r\n# ![The IDEA](https://raw.githubusercontent.com/TheFruxz/TheFruxz/master/GlobalAssets/repo/PaperMC-Paper/PR/Trackables/TITLE-THE_IDEA.jpg)\r\n\r\nHow to make it universal at every corner where you can throw in a location, so that you don't have to access the entity or block first and then manually grab the location first?\r\n\r\nMy solution is to make every object that contains a location and is therefore \"traceable\", as such an object and in (pretty much) every function where you need / use a location as a parameter, where the location is then extracted in the background code, without the developer has to do it again and again.\r\n\r\nExample:\r\n```java\r\nsetLocationOfParticle(armorStand)\r\n```\r\n\r\n# ![The Code](https://raw.githubusercontent.com/TheFruxz/TheFruxz/master/GlobalAssets/repo/PaperMC-Paper/PR/Trackables/TITLE-THE_CODE.jpg)\r\n\r\n***But how does it work?***\r\n\r\n## The trackable itself\r\nEvery object that has a .getLocation() method, e.g. an entity, block, etc. gets a new interface, named `Trackable`, which holds the .getLocation() method, which is then `overridden` by e.g. the entity and the block and thus is universal for every object that has a location.\r\n\r\n## The functions\r\nEvery function which supports a location as input, e.g. the `World#playSound(...)` function gets a duplicate of that function which has the same input parameters as the original function, only the `(Location location, ...)` parameter is replaced with the trackable, i.e. `(Trackable trackable, ...)`. And this is best done on all functions with location parameters, so that a universal & seamless development-experience is created!\r\n\r\n# ![My Reason](https://raw.githubusercontent.com/TheFruxz/TheFruxz/master/GlobalAssets/repo/PaperMC-Paper/PR/Trackables/TITLE-MY_REASON.jpg)\r\n\r\nMy reason for doing / proposing all this is to create a transitionless development experience and thus allow the developer to focus on the essential things without limiting or even removing the previous possibilities.\r\n\r\nIt should help a developer and take away work, saving him little time and effort on the individual, but relatively much on the whole.\r\n\r\n# ![The Work](https://raw.githubusercontent.com/TheFruxz/TheFruxz/master/GlobalAssets/repo/PaperMC-Paper/PR/Trackables/TITLE-THE_WORK.jpg)\r\n\r\nOf course I would try very hard to make the changes myself, however I would extremely appreciate feedback of the current and upcoming situation and development support.\r\nEspecially since it would be my first major paper feature, I would appreciate any support and suggestions.\r\n\r\n## INFO\r\n\r\nThe branch pointing to this PR is initially only equipped with a PlaceHolder file, that would then of course change significantly in the course of development (...):\r\n\r\n# ![The Roadmap](https://raw.githubusercontent.com/TheFruxz/TheFruxz/master/GlobalAssets/repo/PaperMC-Paper/PR/Trackables/TITLE-THE_ROADMAP.jpg)\r\n> This can be modified during feedback and corrections, also please be carefull reading that :D\r\n\r\n- [ ] Creating an `Trackable` interface, with the needed functions\r\n- [ ] Adding the `Trackable` interface to objects with locations, like blocks and entitys\r\n- [ ] Creating duplicated location-parameter functions with support for `Trackable` objects\r\n- [ ] Eat an cookie and look, if something went wrong\r\n\r\n# ![Thanks!](https://raw.githubusercontent.com/TheFruxz/TheFruxz/master/GlobalAssets/repo/PaperMC-Paper/PR/Trackables/TITLE-THANKS.jpg)\r\n\r\nHey, thank you for reading, please excuse the a bit broken English, I had this partially translated.\r\nAs said, if you have any suggestions or opinions, feel free to write it in, this is an idea of mine that I would very much like to take forward with the paper community and the paper developers.\r\n\r\nStay safe!\r\n\r\n\r\n ",
    "head_branch": "feature/trackables",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abe5d9087c4d6d376c51",
    "number": 5797,
    "body": "",
    "head_branch": "dev/1.17-adventure",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "more patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abe7d9087c4d6d376c52",
    "number": 5796,
    "body": "",
    "head_branch": "dev/1.17-timings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Timings patch (#5796)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623abe8d9087c4d6d376c53",
    "number": 5795,
    "body": "Updated stuff to 1.17",
    "head_branch": "dev/1.17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abe9d9087c4d6d376c54",
    "number": 5794,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n7e29f765 SPIGOT-6502: Loading a class from a library of another plugin resulted in a ClassCastException.\r\n\r\nCraftBukkit Changes:\r\n296df566 Remove outdated build delay.",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#5794)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n7e29f765 SPIGOT-6502: Loading a class from a library of another plugin resulted in a ClassCastException.\r\n\r\nCraftBukkit Changes:\r\n296df566 Remove outdated build delay."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623abead9087c4d6d376c55",
    "number": 5793,
    "body": "If there is no world anymore (e.g. deleting the world an entity was\r\nspawned in), it will be nulled while the location is still _technically_\r\nlegal.\r\n\r\nI'm unsure whether this should rather keep the UUID in memory,\r\nas that would be a very acceptable fix and would even retain the\r\norigin world in these cases. That being said, it would be useless\r\ninformation.\r\n\r\nFixes #5791.",
    "head_branch": "fix-origin-world-npe",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abebd9087c4d6d376c56",
    "number": 5788,
    "body": "Adds a minimum nether portal generation height, in addition to the maximum height check vanilla already does. This only affects normal portal generation, forced portal generation (no free space found) already uses a minimum height of 70. \r\n\r\nIm a bit unsure about this PR, as this needs to be updated with 1.17 to use the minimum world height instead of just an hardcoded value, assuming Paper supports the datapack. On the other hand this is a somewhat serious exploit, its an easy update and the diff is very small. \r\n\r\nThis was tested with approx. 50 portal generation attempts, according to the steps provided in the [issue.](https://github.com/PaperMC/Paper/issues/5773) Compared to that, without the patch I was successful at generating a portal at y =0 in just 4 attempts. ",
    "head_branch": "add-min-nether-portal-height",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abecd9087c4d6d376c57",
    "number": 5786,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\nfae895ac Fix inconsistent commands",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit) (#5786)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\nfae895ac Fix inconsistent commands"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abedd9087c4d6d376c58",
    "number": 5784,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n3797d93e3 SPIGOT-6492: PortalCreateEvent#getBlocks() returns not all blocks by reason fire",
    "head_branch": "upstream070621_0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit) (#5784)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n3797d93e3 SPIGOT-6492: PortalCreateEvent#getBlocks() returns not all blocks by reason fire"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abeed9087c4d6d376c59",
    "number": 5783,
    "body": "",
    "head_branch": "fix/timings-command-mark",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix timings sometimes incorrectly marking commands (#5783)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abefd9087c4d6d376c5a",
    "number": 5780,
    "body": "this server has been known as the \"dupe server\" where there is always an easy and profitable dupe.\r\n\r\nthe lead dupe is so tedious and for the past day or two, I have been trying it for hours at a time. I even followed tutorials online to the T, yet no results.\r\n\r\nThe most notorious dupe in this server's history is the chunk dupe. I highly recommend enabling it. But, since the books were used to ban people, I feel like making a custom chunk dupe plugin, and making it work with normal, English letters, that take up little to no space, in comparison to complex Unicode characters that take up junk data, and could be used to ban people, is much better.\r\n\r\nthat way, there can be no bans, and an easy dupe, which for sure will make the old, and new players happy, and maybe drive older people, back to the server, who quit due to lack of dupes.\r\n\r\nAnyway, I run a group that relies heavily on kits, and it has over 100 people in it. so a new dupe would make everyone happy.\r\n\r\nBut who am I? I am just some random Chinese person who likes 0b0t!",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abf0d9087c4d6d376c5b",
    "number": 5779,
    "body": "I think this API will be very useful for decorating using campfire.\r\n\r\nThis API can set the state of individual index.\r\n\r\n![image](https://user-images.githubusercontent.com/45729082/120899594-7d3ecc80-c66b-11eb-9111-75a15d66649f.png)\r\n",
    "head_branch": "pr-campfire",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add more Campfire API (#5779)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623abf1d9087c4d6d376c5c",
    "number": 5778,
    "body": "Fixes #5777. See the patch description for more information. This is a breaking change and merging may or may not be a good idea.",
    "head_branch": "issue-5777",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix empty array elements in command args (#5778)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abf2d9087c4d6d376c5d",
    "number": 5776,
    "body": "End portals could teleport entities during move calls. Stupid\r\nlogic given the caller will never expect that kind of thing,\r\nand will result in all kinds of dupes.\r\n\r\nMove the tick logic into the post tick, where portaling was\r\ndesigned to happen in the first place.",
    "head_branch": "little-bit-of-trolling",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix dangerous end portal logic (#5776)\n\nCo-authored-by: Spottedleaf <Spottedleaf@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abf3d9087c4d6d376c5e",
    "number": 5775,
    "body": "Ran into a datapack that was having problems because some lore lines were exceeding 8192 characters in length, so I thought, why not let server owners adjust various settings in case something they use might require a higher limit.  \r\nDefaults should all be the same values.  \r\nThe book page one might be redundant in several places, I just added settings for all the ones added in the spigot commit which added them.",
    "head_branch": "feature/configurable-validations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make item validations configurable (#5775)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abf4d9087c4d6d376c5f",
    "number": 5770,
    "body": "Before this pr AbstractChatEvent#originalMessage would not return the original user entry but instead the result of the legacy chat event handlers. \r\n\r\nThis corrects that behaviour by adding a new param to their constructors",
    "head_branch": "use-original-message",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use original user input instead of legacy event result for AbstractChatEvent#originalMessage (#5770)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623abf5d9087c4d6d376c60",
    "number": 5767,
    "body": "…er-ani.patch to 0268-Restore-vanilla-default-mob-spawn-range-and-water-ani.patch\r\n\r\nfixed typo: vanlla → vanilla",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abf6d9087c4d6d376c61",
    "number": 5766,
    "body": "Spigot's implementation broke this fix, and actually made it worse. Putting back my original fix that is known to work.\r\n\r\nFixes #5765 ",
    "head_branch": "villagerfix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Reset villager inventory on cancelled pickup event (again) (#5766) (Fixes #5765)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abf8d9087c4d6d376c62",
    "number": 5762,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n90a4d64a Remove usage of Java 11 method not caught by animal sniffer\r\nc51c0f7f SPIGOT-6483: Fix cancelling EntityPickupEvent for villagers",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit) (#5762)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n90a4d64a Remove usage of Java 11 method not caught by animal sniffer\r\nc51c0f7f SPIGOT-6483: Fix cancelling EntityPickupEvent for villagers"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abf9d9087c4d6d376c63",
    "number": 5761,
    "body": "This implements a better fix for the invulnerable end crystals exploit by storing whether or not a crystal was created by the ender dragon battle and resetting the crystal properties if the dragon battle is not in the correct phase anymore or if the crystal was somehow moved to a different world.\r\n\r\nIn order to check the world properly this also fixes that the entity origin location did not store the correct world but simply used the current world the entity was added to which made it impossible before to check if the entity was moved to a different world.",
    "head_branch": "pr/better-end-crystal-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Better fix for invulnerable crystals and improve Origin API (#5761)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abfad9087c4d6d376c64",
    "number": 5760,
    "body": "This is done by returning the center location of the chunk at the height of the input location when the target chunk isn't loaded already which is exact enough for most use cases and will get more precise once the player is close enough for the chunk being loaded anyways.\r\n\r\nAs this might lead to less precise locations a config option to enable the sync loading of the chunks is provided.",
    "head_branch": "pr/seed-based-search-improvement",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve seed based feature search to not load chunk (#5760)\n\nThis is done by returning the center location of the chunk at the height\r\n of the input location when the target chunk isn't loaded already which\r\n is exact enough for most use cases and will get more precise once the\r\n player is close enough for the chunk being loaded anyways.\r\n\r\nAs this might lead to less precise locations a config option to enable\r\n the sync loading of the chunks is provided."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abfbd9087c4d6d376c65",
    "number": 5759,
    "body": "I use the Player#setCooldown method to apply chat cooldown in AsyncChatEvent.\r\n\r\nSince PlayerItemCooldownEvent was added, IllegalStateException was invoked each time Player#setCooldown was used in async state.\r\nThis PR solves this problem.\r\n\r\n\r\nerror log\r\n```\r\n[03:12:43] [Async Chat Thread - #0/ERROR]: Could not pass event AsyncChatEvent to caramelDaydreamTester v1.0-SNAPSHOT\r\njava.lang.IllegalStateException: PlayerItemCooldownEvent may only be triggered synchronously.\r\n\tat org.bukkit.plugin.SimplePluginManager.callEvent(SimplePluginManager.java:607) ~[patched_1.16.5.jar:git-Paper-705]\r\n\tat org.bukkit.event.Event.callEvent(Event.java:45) ~[patched_1.16.5.jar:git-Paper-705]\r\n\tat net.minecraft.server.v1_16_R3.ItemCooldownPlayer.setCooldown(ItemCooldownPlayer.java:20) ~[patched_1.16.5.jar:git-Paper-705]\r\n\tat org.bukkit.craftbukkit.v1_16_R3.entity.CraftHumanEntity.setCooldown(CraftHumanEntity.java:587) ~[patched_1.16.5.jar:git-Paper-705]\r\n\tat moe.caramel.daydreamtester.PlayerEvent.onPlayerJoin(PlayerEvent.java:44) ~[?:?]\r\n        ...\r\n```\r\n\r\nexample code\r\n```java\r\n@EventHandler\r\npublic void onAsyncChat(AsyncChatEvent event) {\r\n      event.getPlayer().setCooldown(Material.OAK_SIGN, 50);\r\n}\r\n```\r\n",
    "head_branch": "pr-itemcooldownfix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abfcd9087c4d6d376c66",
    "number": 5756,
    "body": "I saw dolphins sync loading chunks on timings/spark almost every time I fed them fish, can be abused to heavily lag the server over and over and with multiple dolphins to almost have a player-caused deadlock. Tested locally.",
    "head_branch": "dolphins-search-for-treasure-toggle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abfdd9087c4d6d376c67",
    "number": 5755,
    "body": "Previously setting the soft despawn distance above the default value of 32 would mean that an entity outside of the 32 range would still count `ticksFarFromPlayer` up every tick without resetting it which might lead to the entity (almost) instantly despawning once it went outside of the configured distance instead of waiting 600 ticks.",
    "head_branch": "pr/fix-soft-despawn",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix issue with soft despawn distance (#5755)\n\nPreviously setting the soft despawn distance above the default\r\n value of 32 would mean that an entity outside of the 32 range\r\n would still count ticksFarFromPlayer up every tick without\r\n resetting it which might lead to the entity (almost) instantly\r\n despawning once it went outside of the configured distance\r\n instead of waiting 600 ticks."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abfed9087c4d6d376c68",
    "number": 5754,
    "body": "I recently converted the map that was used in version 1.2.5(or 1.5.2) and a problem occurred a this problem.\r\n\r\n```\r\n[03:16:53 ERROR]: Could not pass event PlayerInteractEvent to caramelDaydreamTester v1.0-SNAPSHOT\r\njava.lang.NullPointerException: input\r\n        at java.util.Objects.requireNonNull(Objects.java:228) ~[?:1.8.0_282]\r\n        at net.kyori.adventure.text.flattener.ComponentFlattenerImpl.flatten0(ComponentFlattenerImpl.java:79) ~[patched_1.16.5.jar:git-Paper-705]\r\n        at net.kyori.adventure.text.flattener.ComponentFlattenerImpl.flatten(ComponentFlattenerImpl.java:75) ~[patched_1.16.5.jar:git-Paper-705]\r\n        at net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializerImpl.serialize(LegacyComponentSerializerImpl.java:275) ~[patched_1.16.5.jar:git-Paper-705]\r\n        at org.bukkit.craftbukkit.v1_16_R3.block.CraftSign.getLine(CraftSign.java:68) ~[patched_1.16.5.jar:git-Paper-705]\r\n        at moe.caramel.daydreamtester.PlayerEvent.legacyTextTest(TestEvent.java:305) ~[?:?]\r\n        ...\r\n```\r\n\r\n\r\nAs shown in the picture below, very old NBT can have a null value.\r\nIf the value is null, this PR will return an empty component to solve the problem.\r\n\r\nNormal NBT\r\n![image](https://user-images.githubusercontent.com/45729082/120116252-46c40600-c1c2-11eb-9bd2-4216118179ef.png)\r\n\r\nvery very old... NBT\r\n![image](https://user-images.githubusercontent.com/45729082/120116267-55aab880-c1c2-11eb-8562-feb5bea93583.png)\r\n\r\n\r\nThis may not be a good solution, but I think it's a good one to solve temporarily.\r\n",
    "head_branch": "pr-adventure",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Cannot be adventure component serialized when the legacy component is null (#5754)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623abffd9087c4d6d376c69",
    "number": 5753,
    "body": "Turns out the animation part of the event *is* controlled by the server, the jump part isn't.\r\n\r\nYou can have a lot of fun with this since its on LivingEntity.\r\n\r\nhttps://user-images.githubusercontent.com/15055071/120091192-ab496d00-c0bd-11eb-8e2d-4acb3dcd9241.mp4\r\n\r\n\r\nhttps://user-images.githubusercontent.com/15055071/120091206-c61be180-c0bd-11eb-9625-b06d976dfc6b.mp4\r\n\r\n",
    "head_branch": "feature/Riptide-API",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac00d9087c4d6d376c6a",
    "number": 5752,
    "body": "",
    "head_branch": "feature/LivingEntity#getHandRaised",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add getHandRaised to LivingEntity (#5752)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac01d9087c4d6d376c6b",
    "number": 5751,
    "body": "Discovered this was an issue for datapacks that used lines on signs to store data, the 2048 char limit broke the shulker preview datapack. This just allows loading tile entity nbt to bypass those limits if its the result of a command.\r\n\r\n\r\nThere are probably more places that could use this, I just don't know what they are.",
    "head_branch": "fix/commands-setting-nbt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac02d9087c4d6d376c6c",
    "number": 5750,
    "body": "",
    "head_branch": "linguist-fake-java",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac03d9087c4d6d376c6d",
    "number": 5749,
    "body": "Adds a hasLineOfSight(Location) function to LivingEntity.\r\n\r\nTest plugin: https://gist.github.com/TwoLeggedCat/b8228bd84f70a30ccabee08e925199ef\r\n\r\nThe above gist broadcasts the result of using the existing hasLineOfSight(Entity) function and hasLineOfSight(thatEntity.getEyeLocation()). The output from both should, to my knowledge, always be the same.",
    "head_branch": "feat2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add more line of sight methods (#5749)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac04d9087c4d6d376c6e",
    "number": 5747,
    "body": "",
    "head_branch": "broadcast-default-permission",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac05d9087c4d6d376c6f",
    "number": 5746,
    "body": "",
    "head_branch": "feature/CommandBlock-API",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "More CommandBlock API (#5746)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac06d9087c4d6d376c70",
    "number": 5745,
    "body": null,
    "head_branch": "feature/modified-enchantment-level",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac07d9087c4d6d376c71",
    "number": 5744,
    "body": "Cat Resting\r\n![image](https://user-images.githubusercontent.com/23108066/120054536-70cccb00-bffe-11eb-9fa8-02611dec2f1f.png)\r\n\r\nCat Head Up\r\n![image](https://user-images.githubusercontent.com/23108066/120054597-dc169d00-bffe-11eb-86b7-7f3ac4f2fa97.png)\r\n\r\nRequires: https://github.com/PaperMC/Paper/pull/5743",
    "head_branch": "cat-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Missing Entity API: Cat (#5744)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac09d9087c4d6d376c72",
    "number": 5743,
    "body": "This adds a new patch that can incorporate missing entity API. This first one starts of with fox api.\r\n\r\nCertain behaviors have additional animations as well.\r\nSo cute!!!\r\n![image](https://user-images.githubusercontent.com/23108066/120051574-2a23a480-bfef-11eb-8ac6-cbd7a2e1812f.png)\r\nFox#setHeadTilted\r\n\r\n![image](https://user-images.githubusercontent.com/23108066/120051896-9fdc4000-bff0-11eb-8d47-aa6de4a97688.png)\r\nFox#setLeaping\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "head_branch": "more-fox-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add more fox API (#5743)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac0ad9087c4d6d376c73",
    "number": 5742,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n59128434 SPIGOT-6478: Double chests opened by plugins don't play their closing animation.",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit) (#5742)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac0bd9087c4d6d376c74",
    "number": 5741,
    "body": "Fixes #5724",
    "head_branch": "fix/TE-validation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Skip TE break validation for some waterlogged TEs (#5741)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac0cd9087c4d6d376c75",
    "number": 5740,
    "body": "Fixes #3729 - fix advancement triggers having the correct entity equipment\r\nFixes #4252 - (same as above)\r\nFixes #6477 - don't reset entity equipment if event is cancelled.\r\n\r\nSo a much easier way to fix this, would be to just not have the advancement triggers cancellable by the entity death event, suggest that plugins use smth else to cancel those criteria being awarded, but I don't think thats in keeping with what the event is supposed to do, nor with existing behavior.",
    "head_branch": "fix/entity-death-triggers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix entity equipment on cancellation of EntityDeathEvent (#5740)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac0dd9087c4d6d376c76",
    "number": 5739,
    "body": "Fixes the problem that items are not synchronized when the EntityLoadCrossbowEvent is canceled.\r\n\r\n--------\r\n\r\nnormal (apply PR)\r\n![Normal](https://user-images.githubusercontent.com/45729082/120019524-886a7a80-c023-11eb-97bc-5e321b2d77ef.gif)\r\n\r\nabnormal\r\n![Abnormal](https://user-images.githubusercontent.com/45729082/120019593-9ae4b400-c023-11eb-9c79-699a5a17880c.gif)\r\n( + check the crossbow state and amount of arrows )",
    "head_branch": "pr-crossbow",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix EntityLoadCrossbowEvent Sync Issue (#5739)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac0ed9087c4d6d376c77",
    "number": 5738,
    "body": "",
    "head_branch": "fix/spigot6452",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Reset villager inventory on cancelled pickup event (#5738)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac0fd9087c4d6d376c78",
    "number": 5737,
    "body": "",
    "head_branch": "feature/PotionEffectType-API",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "More PotionEffectType API (#5737)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac10d9087c4d6d376c79",
    "number": 5736,
    "body": null,
    "head_branch": "feature/better-piglin-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac11d9087c4d6d376c7a",
    "number": 5735,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n0e11bc1f #522: Add piglin bartering API\r\na16a309d #613: Add PlayerBucketEntityEvent and make PlayerBucketFishEvent deprecated in favor of the newer, more generic event\r\n\r\nCraftBukkit Changes:\r\nfd905ab5 #703: Add piglin bartering API",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#5735)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac12d9087c4d6d376c7b",
    "number": 5734,
    "body": "[MC-108513](https://bugs.mojang.com/browse/MC-108513)\r\n\r\nFixes #5712 (I think)",
    "head_branch": "fix/invulnerable-end-crystals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix invulnerable end crystals: MC-108513 (#5734)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac13d9087c4d6d376c7c",
    "number": 5732,
    "body": "closes #5705 ",
    "head_branch": "watchdoge-exit-code",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Exit with non-zero exit code when killed by watchdog (#5732)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac14d9087c4d6d376c7d",
    "number": 5731,
    "body": "This PR adds some Firework & ThrownPotion API additions.\r\n\r\nSee https://canary.discord.com/channels/289587909051416579/925530366192779286/934884182671392779 for more relevant conversation\r\n\r\nhttps://user-images.githubusercontent.com/23108066/150696954-343c3b69-5a42-4750-b3e5-2a144e3125dd.mp4\r\n\r\nEssentially this adds a way to modify the itemstack of a firework/thrown potion whilst being able to still add potion/firework effects using meta methods. \r\n\r\nCraftFirework also cached a firework item, which could be inaccurate if you modify the firework via ingame commands. So, I remove that field and instead use the itemstack that is directly stored in the firework entity.",
    "head_branch": "expose-firework-item",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "More projectile API (#5731)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac15d9087c4d6d376c7e",
    "number": 5730,
    "body": "Fixes an issue where you can have thousands of these and lag clients.",
    "head_branch": "PR-Map-Item-Frame-Overload",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Limit item frame cursors on maps (#5730)\n\nFixes an issue where you can have thousands of these and lag clients."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac16d9087c4d6d376c7f",
    "number": 5729,
    "body": "This is triggered for each entity effected, similar to my GuardianAppearenceEvent pull request.\r\n\r\nCancelled for each entity (the particle effect is client side)\r\n![image](https://user-images.githubusercontent.com/23108066/119732179-de81c700-be45-11eb-83c9-56ed538fc192.png)\r\n\r\nNormal behavior (not cancelled)\r\n![image](https://user-images.githubusercontent.com/23108066/119732536-4e904d00-be46-11eb-8f1d-e401daffc881.png)\r\n",
    "head_branch": "bell-resonate-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add BellRevealRaiderEvent (#5729)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac17d9087c4d6d376c80",
    "number": 5728,
    "body": "![image](https://user-images.githubusercontent.com/46570876/119715891-cec5ab00-be64-11eb-8df1-92bae28c3de9.png)\r\n![image](https://user-images.githubusercontent.com/46570876/119716546-835fcc80-be65-11eb-8c80-1b883011500f.png)\r\n\r\n\r\nThis assumes that builds are listed in ascending order, which isn't mentioned in the API docs, but kashike confirmed that this order is guaranteed: https://discord.com/channels/289587909051416579/289587909051416579/780791361649115156\r\n![image](https://user-images.githubusercontent.com/46570876/119716216-30861500-be65-11eb-9273-a55d18e9b7b5.png)\r\n\r\nNot sure if we should handle `builds.size() == 0`?\r\n",
    "head_branch": "use_v2_api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Update version checker to use V2 downloads API (#5728)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac18d9087c4d6d376c81",
    "number": 5727,
    "body": "This PR adds API that allows custom generators to gain access to the \"feature\" stage of world generation (Bukkit calls this stage \"decoration\" internally).\r\n\r\nCloses #5522 \r\n\r\nAs described in #5522, `BlockPopulator` has a host of issues, the big one being that it is *very* prone to chunk cascading. There is no convenient way around this, you either need to create [terrible management classes](https://github.com/PolyhedralDev/Terra/blob/master/platforms/bukkit/src/main/java/com/dfsek/terra/bukkit/population/PopulationManager.java), or go down the rabbit hole of NMS and [extend the Vanilla chunk generator](https://github.com/Hex27/TerraformGenerator/blob/master/implementation/v1_16_R3/src/main/java/org/terraform/v1_16_R3/NMSChunkGenerator.java). Supported API for accessing this generation stage would be massively beneficial to custom generators on Paper.\r\n\r\nThis PR creates and implements a new interface, `io.papermc.paper.world.ProtoWorld`. This new interface is required because `addDecorations` (the internal method this API delegates from) accepts only a `RegionLimitedWorldAccess`, and reading from/writing to the `ServerWorld` during chunk generation causes a deadlock. `ProtoWorld` *does*, however, contain a `getWorld` method for convenience, though warnings about reading/writing are present in the documentation. The `ProtoWorld` API also avoids use of `org.bukkit.Location`, since Location requires a World, and we want to discourage use of the World whenever we can.\r\n\r\nThis new interface is used in `org.bukkit.generator.ChunkGenerator`, which now contains a `generateDecorations` method that accepts a `ProtoWorld`. This new method has a default implementation as to maintain compatibility with existing generators. It is invoked during the feature generation phase of world generation, allowing custom generators to decorate their worlds without worrying about chunk cascading.",
    "head_branch": "worldgen-feature-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Worldgen Feature API (#5727)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac19d9087c4d6d376c82",
    "number": 5726,
    "body": "Explosions in the \"real world\" will only be done in chunks where stuff is\r\nactually ticking, e.g. players igniting TNT, most \"out of range\" explosions\r\nare generally entities such as fireballs which have gotten into edge chunks\r\ndue to vanillas poor handing of entities which fire projectiles\r\n\r\nSome considerations are due maybe if we wanna allow some sources to load chunks,\r\ne.g. players creating chains of TNT into unloaded chunks, however, this is a rare\r\nthing and should maybe thrown behind a config option as to if we want to allow this\r\n\r\nCreating this as a PR mostly for comments on this, I don't believe that explosions should be loading chunks, but, there are always people out there with oddball setups and am too tired to decide if I wanna force this as-is",
    "head_branch": "explosions-prevent-chunk-loads",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac1ad9087c4d6d376c83",
    "number": 5725,
    "body": "Closes #5274\r\n\r\nFirst time touching item meta stuff\r\n\r\nUnsure of a few things, mainly the behavior of this elsewhere in the codebase, like anvils/grindstones. Currently you can remove the glint with the grindstone (and get no xp), and you can put enchanted books on the item, *BUT* that removes the empty NBTTagCompound, so removing that enchant will make the item lose it's glint.\r\n\r\nIssue relating to this: #5723",
    "head_branch": "feature/itemstack-glint",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac1bd9087c4d6d376c84",
    "number": 5721,
    "body": "i have a problem with an car plugin i am using. The plugin uses armor stands for the cars. The armorestands are very laggy on paper, but on spigot everything works fine. I think paper limits the armorestand ticks. Can there be a option to remove the limit for armorestand ticks.",
    "head_branch": "meta",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac1cd9087c4d6d376c85",
    "number": 5718,
    "body": "So they can enjoy their bouncyness once again.\r\nFixes #5571",
    "head_branch": "fix/spawner-entity-motion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix entity motion tag from mob spawners (#5718)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac1dd9087c4d6d376c86",
    "number": 5717,
    "body": "Can *maybe* go into these two patches? Maybe sorta fit, but idk.\r\nhttps://github.com/PaperMC/Paper/blob/master/Spigot-API-Patches/0120-EnderDragon-Events.patch\r\nhttps://github.com/PaperMC/Paper/blob/master/Spigot-Server-Patches/0242-EnderDragon-Events.patch\r\n\r\nEDIT: fixes #5763",
    "head_branch": "fix/CreatureSpawnEvent-ender-dragon",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac1ed9087c4d6d376c87",
    "number": 5716,
    "body": "Maybe wanna double test this but this seems to be like a better solution to the logic here, \r\nit will actually clean up invalid TEs, also, I don't see why removeTileEntity needs to dip into the pending list, while I doubt that this list is ever large enough to really care, just feels like the better option here is to mark it as removed\r\n\r\n---\r\nImproves fixTileEntity to actually remove invalid TEs from the world\r\n\r\nAlso, maybe marginal pointless improvements to removeTileEntity to\r\nmake it safer to call in more places without potentially busting state",
    "head_branch": "improve-fixTileEntity",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac1fd9087c4d6d376c88",
    "number": 5714,
    "body": "Failing exceptionally vs failing silently:\r\n - Previously, most of the methods in the `ItemStack` class failed exceptionally if the meta is null. Now with `editMeta` it's kind of 50-50. I believe failing exceptionally is a more logical and more helpful thing to do than to just silently not do the requested modification.\r\n - Setters/modifiers in `ItemStack` that fail silently: `addUnsafeEnchantment`, `removeEnchantment` (and the deprecated `setDurability`) (and this `editMeta`)\r\n - Setters/modifiers in `ItemStack` that fail exceptionally: `lore` (and the deprecated `setLore`), `addItemFlags`, `removeItemFlags`\r\n- (Off-topic, but `removeEnchantment` silently fails if the enchantment isn't present, so it's less of an issue that it silently fails for null meta. By the same reasoning, `removeItemFlags` could silently fail for null meta as well, but it doesn't.)\r\n\r\nSpecifying a more strict contract via JavaDocs:\r\nCurrently, there is nothing in the documentation to stop people from calling this `editMeta` method from inside the callback passed to `editMeta` or to call `getItemMeta`, etc. from inside the callback. I believe it's important to specify the behavior in those cases.\r\nBy specifying the behavior as undefined/disallowed, we allow the implementation of `editMeta` to change in the future, allowing eg. the use of mutable item metas, should they ever get implemented.\r\nAnd by adding this documentation snippet we also warn API users not to do \"stupid\" stuff. These \"stupid\" stuff might seem stupid to those more familiar with the ItemStack API, a new user might not be familiar with how meta snapshots works just by looking at the `editMeta` documentation.\r\n\r\nI'm completely open to feedback and I'm completely open to removing one of these two features from this PR, should exactly one of them be worth merging.",
    "head_branch": "editmeta-null",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "editMeta: tighten contract via docs (#5714)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac20d9087c4d6d376c89",
    "number": 5713,
    "body": "",
    "head_branch": "ensure-conversions-minecart-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] fix minecart vs minecraft typos (#5713)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac21d9087c4d6d376c8a",
    "number": 5710,
    "body": "Updates the setup-java action to v2, and changes our distribution from Zulu to Adoptium.\r\n\r\nWill need rebase once #5709 is merged.",
    "head_branch": "update-actions-flow",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] ci: update setup-java action (#5710)\n\n* ci: update setup-java action\r\n* ci: change java distribution to adopt\r\n\r\nSigned-off-by: Mariell Hoversholm <proximyst@proximyst.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac22d9087c4d6d376c8b",
    "number": 5709,
    "body": "With our new dependence on Java 16+ as of Minecraft 1.17 (refer to:\r\nhttps://www.minecraft.net/en-us/article/minecraft-snapshot-21w19a), we\r\nshould also ensure everything we merge builds on Java 16.\r\n\r\nSigned-off-by: Mariell Hoversholm <proximyst@proximyst.com>",
    "head_branch": "actions-java-16",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "ci: replace Java 11 with Java 16 in GH Actions build flow (#5709)\n\n* ci: add Java 16 to GH Actions build flow\r\n\r\nWith our new dependence on Java 16+ as of Minecraft 1.17 (refer to:\r\nhttps://www.minecraft.net/en-us/article/minecraft-snapshot-21w19a), we\r\nshould also ensure everything we merge builds on Java 16.\r\n\r\nSigned-off-by: Mariell Hoversholm <proximyst@proximyst.com>\r\n\r\n* ci: remove Java 11 from build flow\r\n\r\nSigned-off-by: Mariell Hoversholm <proximyst@proximyst.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac23d9087c4d6d376c8c",
    "number": 5708,
    "body": "https://github.com/KyoriPowered/adventure/pull/352",
    "head_branch": "adventure/pointer",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac24d9087c4d6d376c8d",
    "number": 5707,
    "body": "This PR is add isOpen method, EnderChest support, and one sound bug fixes for Lidded Blocks.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add More Lidded Block API (#5707)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac26d9087c4d6d376c8e",
    "number": 5706,
    "body": "First time doing something like this, please make sure I didn't mess anything up. This drops the patch that was meant to fix https://bugs.mojang.com/browse/MC-68487 (as it has been fixed a while ago). \r\n\r\n![image](https://user-images.githubusercontent.com/23108066/119244936-3cab6300-bb43-11eb-833c-60bbbefe5506.png)\r\nAlthough, it also seems that this was edited in this patch, should this be reverted in a separate patch, edited this one, or just undone completetly? \r\n\r\nFeedback appreciated!",
    "head_branch": "remove-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac27d9087c4d6d376c8f",
    "number": 5703,
    "body": "So I tested this and didnt run into any issues, but since it's dealing with part of the code base I'm not entirely comfortable with yet, the whole changing block state part, I probably put the clear in the wrong place in CraftBlock#setTypeAndData.\r\n\r\nAlso, if it is a bug that the existing setType doesn't clear inventories, this can easily be refactored to just fix that instead of adding a new parameter to clear tile entities.\r\n\r\nFixes [SPIGOT-3725](https://hub.spigotmc.org/jira/projects/SPIGOT/issues/SPIGOT-3725)",
    "head_branch": "feature/Block#setType-clear",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac28d9087c4d6d376c90",
    "number": 5702,
    "body": "",
    "head_branch": "fix-default-renderer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix default ChatRenderer when no plugins are installed (#5702)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac29d9087c4d6d376c91",
    "number": 5701,
    "body": "closes #5666 ",
    "head_branch": "fix-depends-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Actually list all missing hard depends (#5701)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac2ad9087c4d6d376c92",
    "number": 5700,
    "body": "This fixes the fact that a player is kicked from the server when entering a string greater than 12 characters of length into the data marker field of a structure block. Max character length is now 128, as the client expects.\r\n\r\nMC-148809: https://bugs.mojang.com/browse/MC-148809\r\n\r\nVery minor thing but can be quite annoying.",
    "head_branch": "fix/MC-148809",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "MC-148809: Fix incorrect structure block data length"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac2bd9087c4d6d376c93",
    "number": 5699,
    "body": "2 approving reviews cc @Machine-Maker ☜(ﾟヮﾟ☜)",
    "head_branch": "fix/machinemaker",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix force upgrade patch (#5699)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac2cd9087c4d6d376c94",
    "number": 5698,
    "body": "Fixes [SPIGOT-2560](https://hub.spigotmc.org/jira/projects/SPIGOT/issues/SPIGOT-2560)\r\nNot sure if there is a clearer fix here, the result item stack isn't set in the same area as the event is fired.",
    "head_branch": "fix/PlayerBucketEmptyEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix PlayerBucketEmptyEvent result itemstack (#5698)\n\nFixes SPIGOT-2560: https://hub.spigotmc.org/jira/projects/SPIGOT/issues/SPIGOT-2560"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac2dd9087c4d6d376c95",
    "number": 5697,
    "body": "Fixes [SPIGOT-6221](https://hub.spigotmc.org/jira/projects/SPIGOT/issues/SPIGOT-6221)\r\n\r\nSplash water bottles do affect some entities that take damage from water, like enderman, snow golems, blazes, etc.",
    "head_branch": "fix/PotionSplashEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix PotionSplashEvent for water splash potions (#5697)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac2ed9087c4d6d376c96",
    "number": 5695,
    "body": "So, there are 17 shulker box colors, not just the 16 dye colors, and if the shulkerbox was uncolored, it threw an NPE because it was expecting a color. This does break the behavior of ShulkerBox#getColor, but I really hope an NPE doesn't count as something that can't change because it would break compat.",
    "head_branch": "fix/shulkerbox-color-NPE",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac2fd9087c4d6d376c97",
    "number": 5693,
    "body": "[Fix incorrect status dataconverter for pre 1.13 chunks](https://github.com/Spottedleaf/Tuinity/blob/master/patches/server/0085-Fix-incorrect-status-dataconverter-for-pre-1.13-chun.patch)\r\n[Fix and optimise world force upgrading](https://github.com/Spottedleaf/Tuinity/blob/master/patches/server/0086-Fix-and-optimise-world-force-upgrading.patch)",
    "head_branch": "leaf-patches",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix/Optimize world and light datafixes (#5693)\n\nCo-authored-by: Spottedleaf <Spottedleaf@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac30d9087c4d6d376c98",
    "number": 5691,
    "body": "Still needs some javadocs\r\n\r\nAnd if this is good, replacing uses of the bukkit statistic enum.",
    "head_branch": "feature/better-stats-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac31d9087c4d6d376c99",
    "number": 5690,
    "body": "",
    "head_branch": "feature/PlayerSetSpawnEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PlayerSetSpawnEvent (#5690)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac32d9087c4d6d376c9a",
    "number": 5687,
    "body": "Fixes [SPIGOT-6138](https://hub.spigotmc.org/jira/browse/SPIGOT-6138)",
    "head_branch": "fix/CreatureSpawnEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac33d9087c4d6d376c9b",
    "number": 5684,
    "body": "Closes #5627",
    "head_branch": "per-viewer-chat-rendering",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Enhance (Async)ChatEvent with per-viewer rendering API (#5684)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac34d9087c4d6d376c9c",
    "number": 5683,
    "body": "https://github.com/KyoriPowered/adventure/pull/343",
    "head_branch": "adventure/css",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac35d9087c4d6d376c9d",
    "number": 5682,
    "body": "Implements [SPIGOT-6023](https://hub.spigotmc.org/jira/browse/SPIGOT-6023)",
    "head_branch": "feature/BlockDispenseEquipEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac36d9087c4d6d376c9e",
    "number": 5681,
    "body": "Fixes SPIGOT-6133: https://hub.spigotmc.org/jira/browse/SPIGOT-6133",
    "head_branch": "fix/PlayerTeleportEvent-chorus-fruit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac37d9087c4d6d376c9f",
    "number": 5680,
    "body": "This is useful for build tool integration, so that it's not necessary to copy plugin jars into the plugins folder in order to load them.\r\n\r\nex: `java -jar paperclip.jar nogui -add-plugin=/path/to/plugin.jar -add-plugin=/path/to/another/plugin_jar.jar`",
    "head_branch": "extra-plugin-jars",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add command line option to load extra plugin jars not in the plugins folder\n\nex: java -jar paperclip.jar nogui -add-plugin=/path/to/plugin.jar -add-plugin=/path/to/another/plugin_jar.jar"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac39d9087c4d6d376ca0",
    "number": 5678,
    "body": "Closes #5672",
    "head_branch": "feature/shear-event-drops",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add drops to shear events (#5678)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac3ad9087c4d6d376ca1",
    "number": 5675,
    "body": "Snow golem drops were being counted as death drops and so were not dropping right away, but if the golem died after being sheared",
    "head_branch": "fix/snow-golem-shearing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix various mob drops being captured as death drops (#5675)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac3bd9087c4d6d376ca2",
    "number": 5674,
    "body": null,
    "head_branch": "fix/EntityDropItemEvent-mooshrooms",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing EntityDropItemEvent calls (#5674)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac3cd9087c4d6d376ca3",
    "number": 5673,
    "body": "Closes #5666\r\n\r\nThrow error with all missing depends instead of just the first one the plugin load happened to check",
    "head_branch": "feature/list-all-missing-hard-depends",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "List all missing hard depends not just first (#5673)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac3dd9087c4d6d376ca4",
    "number": 5671,
    "body": "This is all @KennyTV 's fault...",
    "head_branch": "fix/duplicate-ProjectileHitEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "removed duplicate ProjectileHitEvent for fireball (#5671)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac3ed9087c4d6d376ca5",
    "number": 5668,
    "body": "Adds API to get the computed or effective biome. Really a lot of the existing getBiome methods should be renamed to getNoiseBiome but not sure we want to deprecate those methods so I haven't done it yet.",
    "head_branch": "fix-world-getbiome",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add getComputedBiome API (#5668)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac3fd9087c4d6d376ca6",
    "number": 5665,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Counter#decrement recursive call (#5665)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac40d9087c4d6d376ca7",
    "number": 5664,
    "body": "Current UnknownCommandEvent does not full support Adventure Components.\r\nThis PR helps fully support Adventure Components.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Adventure support in UnknownCommandEvent (#5664)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac41d9087c4d6d376ca8",
    "number": 5663,
    "body": "Visual Studio Code generates a .vscode directory and a .factorypath file. They are now ignored in the Paper-API and Paper-Server directories.",
    "head_branch": "fix-gitignore",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] add vs code files to .gitignore (#5663)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac42d9087c4d6d376ca9",
    "number": 5662,
    "body": "",
    "head_branch": "fix/datapackmanager",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Rename leftover resource->datapack (#5662)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac43d9087c4d6d376caa",
    "number": 5658,
    "body": "fixes #5654 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix missing username console death message (#5654) (#5658)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac44d9087c4d6d376cab",
    "number": 5657,
    "body": "### To Test\r\n\r\n- [x] END_GATEWAY_DRAGON_DEFEAT\r\n- [x] END_GATEWAY_PAIR\r\n- [x] END_PORTAL\r\n- [x] ACTIVE_END_PORTAL\r\n\r\nCloses #5547 ",
    "head_branch": "feature/PortalCreateEvent-reasons",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac45d9087c4d6d376cac",
    "number": 5655,
    "body": "Adds methods for getting different end crystals directly related to the DragonBattle. Also adds methods for dealing with gateways.",
    "head_branch": "feature/more-DragonBattle-API",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "More DragonBattle API (#5655)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac46d9087c4d6d376cad",
    "number": 5653,
    "body": "Adds an API to be able to interface with the resource packs on the server (also known as data packs) including being able to get a list of packs and if they are enabled, and be able to enable or disable them.\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add basic Datapack API (#5653) (#5653)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac47d9087c4d6d376cae",
    "number": 5652,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n5b0e2d2d Move additional dependencies to runtime scope",
    "head_branch": "upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit) (#5652)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n5b0e2d2d Move additional dependencies to runtime scope"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac48d9087c4d6d376caf",
    "number": 5651,
    "body": "Closes #5622",
    "head_branch": "feature/ItemStack-repair-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Adds methods for checking item repairability (#5651)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac49d9087c4d6d376cb0",
    "number": 5650,
    "body": "Fixes #5649",
    "head_branch": "fix/WorldSaveEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix WorldSaveEvent not firing with /save-all (#5650)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac4ad9087c4d6d376cb1",
    "number": 5648,
    "body": "Adds a cause enum to prevent the need to try and read a translation key, or plain text component to discern the cause",
    "head_branch": "feature/PlayerKickEvent-causes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PlayerKickEvent causes (#5648)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac4bd9087c4d6d376cb2",
    "number": 5647,
    "body": "The set effect in BeaconEffectEvent was only transferring some of its configuration, missing the show icon/particles options.",
    "head_branch": "fix/BeaconEffectEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Actually use extended/ambient in BeaconEffectEvent (#5647)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac4cd9087c4d6d376cb3",
    "number": 5646,
    "body": "Fixes #5644\r\n\r\nThe events were being called in the wrong place, so they weren't being fired some of time.",
    "head_branch": "fix/beacon-events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix beacon activate/deactivate events (#5646)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac4ed9087c4d6d376cb4",
    "number": 5643,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n146a7e4b SPIGOT-5345: Add automatic library support\r\n\r\nCraftBukkit Changes:\r\nb1064c69 Remove sisu annotation processor from jar\r\n32e40866 SPIGOT-6189: Persistent data disappears when calling setFacingDirection on an item frame\r\nd189f78b #&#x2060;827: Trigger vanilla dimension advancements in non-main worlds\r\n5bbb4a65 Add plumbing for automatic library support\r\n\r\nSpigot Changes:\r\n9fb885e8 Rebuild patches",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#5643)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n146a7e4b SPIGOT-5345: Add automatic library support\r\n\r\nCraftBukkit Changes:\r\nb1064c69 Remove sisu annotation processor from jar\r\n32e40866 SPIGOT-6189: Persistent data disappears when calling setFacingDirection on an item frame\r\nd189f78b # 827: Trigger vanilla dimension advancements in non-main worlds\r\n5bbb4a65 Add plumbing for automatic library support\r\n\r\nSpigot Changes:\r\n9fb885e8 Rebuild patches"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac4fd9087c4d6d376cb5",
    "number": 5642,
    "body": "",
    "head_branch": "feature/wwlfd",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Activate warning by default when people are doing silly things (#5642)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac50d9087c4d6d376cb6",
    "number": 5641,
    "body": "Deleted 0168-Include-Log4J2-SLF4J-implementation.patch\r\n\r\nWas a duplicate dependency",
    "head_branch": "fix/unneeded-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "remove unneeded patch (#5641)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac51d9087c4d6d376cb7",
    "number": 5638,
    "body": "",
    "head_branch": "feature/PlayerGameModeChangeEvent-additions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add cause and cancel message to PlayerGameModeChangeEvent (#5638)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac52d9087c4d6d376cb8",
    "number": 5636,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n146a7e4b SPIGOT-5345: Add automatic library support\r\n\r\nCraftBukkit Changes:\r\nb1064c69 Remove sisu annotation processor from jar\r\n32e40866 SPIGOT-6189: Persistent data disappears when calling setFacingDirection on an item frame\r\nd189f78b #&#x2060;827: Trigger vanilla dimension advancements in non-main worlds\r\n5bbb4a65 Add plumbing for automatic library support\r\n\r\nSpigot Changes:\r\n9fb885e8 Rebuild patches",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#5636)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n146a7e4b SPIGOT-5345: Add automatic library support\r\n\r\nCraftBukkit Changes:\r\nb1064c69 Remove sisu annotation processor from jar\r\n32e40866 SPIGOT-6189: Persistent data disappears when calling setFacingDirection on an item frame\r\nd189f78b #827: Trigger vanilla dimension advancements in non-main worlds\r\n5bbb4a65 Add plumbing for automatic library support\r\n\r\nSpigot Changes:\r\n9fb885e8 Rebuild patches"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac53d9087c4d6d376cb9",
    "number": 5635,
    "body": "Adds method `protected void addToClasspath(@NotNull URL url)` to JavaPlugins.\r\n\r\nCloses issue #5631",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac54d9087c4d6d376cba",
    "number": 5634,
    "body": "",
    "head_branch": "readme",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Add PR rebasing steps (#5634)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac55d9087c4d6d376cbb",
    "number": 5633,
    "body": "Add the ability for plugins to make a Mob look at a specific location, entity, or position.",
    "head_branch": "feature/lookat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac56d9087c4d6d376cbc",
    "number": 5632,
    "body": "The cache does not support upgrade and extended flags. Therefore, the getEffects method returns the same list of effects for different flag values, which is wrong.\r\n\r\nNote:\r\nAt the moment, this method is the only way to get the LIST of effects by type of potion, because PotionType contains only 1 effect (#5366)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix CraftPotionBrewer cache (#5632)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac57d9087c4d6d376cbd",
    "number": 5629,
    "body": "Throws an IllegalStateException when attempting to add or remove goals while the goal selector is ticking. This prevents a CME further down the line in the entity's tick and provides a more useful stack trace to plugin devs\r\n\r\nRefer #5581 for more info",
    "head_branch": "goals-cme",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac58d9087c4d6d376cbe",
    "number": 5628,
    "body": "The display name includes formatting such as item hover event, display name (in italics if renamed in anvil), and color based on rarity.\r\n\r\nThis is what vanilla uses for give command feedback, and when an item is shown in a death message.",
    "head_branch": "itemstack-displayname",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add ItemStack#displayName to get the formatted display name of an ItemStack (#5628)\n\nThe display name includes formatting such as item hover event, display name (in italics if renamed in anvil), and color based on rarity.\r\n\r\nThis is what vanilla uses for give command feedback, and when an item is shown in a death message."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac59d9087c4d6d376cbf",
    "number": 5626,
    "body": "Happened to notice that in a couple places, its converting adventure `Component`s to `IChatBaseComponent`s, and then back to an adventure `Component`. ",
    "head_branch": "fix/adventure/unneeded-component-conversion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove unneeded component conversion for kick msg (#5626)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac5ad9087c4d6d376cc0",
    "number": 5625,
    "body": "Adds methods to get the corners from a WorldBorder.\r\n\r\nCouple of questions (which don't need to be answered if the answer is no):\r\n\r\n1. Should the new Enum (Corner) be placed under io.papermc? If so, what package?\r\n\r\n2. Is 'Validate.notNull(corner, \"Corner cannot be null\");' unnecessary? Previous discussion came down to \"depends on how it's compiled, but unnecessary with Paper's Maven setup,\" but this is done in other places in Paper, so I did it here as well.\r\n\r\n3. Anything else I broke?",
    "head_branch": "feat1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac5bd9087c4d6d376cc1",
    "number": 5624,
    "body": "Fixes #4880",
    "head_branch": "fix/duplicate-ProjectileHitEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac5cd9087c4d6d376cc2",
    "number": 5621,
    "body": "Users should be made aware of this as soon as possible, since the jump to Java 16 is not as easy as it is from 8 to 11.\r\nThe papermc.io link should be updated accordingly before this is merged.\r\n\r\n@proximsy :AlienPls3:",
    "head_branch": "java-version-warning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Java version warning (#5621)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac5dd9087c4d6d376cc3",
    "number": 5620,
    "body": "Mojang use now Java 16 for 1.17+ \r\nhttps://www.minecraft.net/en-us/article/minecraft-snapshot-21w19a",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac5ed9087c4d6d376cc4",
    "number": 5619,
    "body": "Fixes #4632\r\n\r\nIt doesn't look feasible to have Entity/PlayerPortalEvents called if there isn't a world to teleport to, this should function as an alternative to those looking to listen to when a player has waited long enough in a nether portal.",
    "head_branch": "feature/EntityPortalReadyEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add EntityPortalReadyEvent (#5619)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac5fd9087c4d6d376cc5",
    "number": 5618,
    "body": "Fixes #5175",
    "head_branch": "fix/PortalCreateEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Call PortalCreateEvent when players enter the end (#5618)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac60d9087c4d6d376cc6",
    "number": 5617,
    "body": "Was removed here: https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/a2d787f6ebeb72fa7d5750788221fb9a0d838ac4\r\n\r\nFixes #5174 ",
    "head_branch": "fix/deprecate-EntityPortalExitEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix EntityPortalExitEvent not being called (#5617)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac61d9087c4d6d376cc7",
    "number": 5616,
    "body": "Fixes #4600\r\n\r\nUses Item#getName which is overriden in the right places.\r\nAlso provides translation api for itemstacks.\r\n",
    "head_branch": "fix/material-i18n-key",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add ItemStack#getTranslationKey() (#5616)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac62d9087c4d6d376cc8",
    "number": 5615,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n51e2981b #831: Reload unloaded main worlds correctly",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit)\n\nUpstream has released updates that appear to apply and compile correctly.\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\n\nCraftBukkit Changes:\n51e2981b #831: Reload unloaded main worlds correctly"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac63d9087c4d6d376cc9",
    "number": 5614,
    "body": "Would be nice to be able to access the raw address during this event instead of having to wait and check on the PlayerLoginEvent, especially if you wish to do something based on that information in AsyncPlayerPreLoginEvent.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add raw address to AsyncPlayerPreLoginEvent (#5614)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac64d9087c4d6d376cca",
    "number": 5612,
    "body": "Fixes #5263 ",
    "head_branch": "fix/PlayerTradeEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fixes cancelling PlayerTradeEvent (#5612)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac65d9087c4d6d376ccb",
    "number": 5611,
    "body": "This PR adds support to Paper so that servers can listen on a Unix domain socket instead of over TCP/IP. A Unix domain socket has several advantages:\r\n\r\n* Unix domain sockets feature lower latency and higher throughput, since all of the TCP and IP machinery in the kernel can be skipped. This is especially useful for a proxy connecting to a local server.\r\n* Unix domain sockets are much more secure compared to TCP/IP. Permissions are granted based on file system permissions and are enforced by the kernel. In addition, for proxies, using a Unix domain socket completely eliminates unauthorized connections.\r\n\r\nThere are some downsides:\r\n\r\n* This currently only works on x86_64 Linux with the epoll transport. (Sorry Raspberry Pi and Windows users.)\r\n* The Paper and Bukkit APIs are infested with the implicit knowledge that TCP/IP is the only useful way to connect to a Minecraft server, so I had to implement some hacks to work around that.\r\n* This implementation of Unix domain sockets support requires forwarding player information from a proxy. BungeeCord and Velocity forwarding methods are implemented and known to work.\r\n* Support for this connection method is not widespread - currently the in-development Velocity 2.0.0 is the only proxy with support for this.\r\n\r\nI have tested the BungeeCord and Velocity forwarding changes in this PR and confirmed that they work.\r\n\r\n## Testing this PR (and using its functionality)\r\n\r\nRight now, the easiest way to test this PR is to use the current development builds of [Velocity 2.0.0](https://ci.velocitypowered.com/job/velocity-2.0.0/).\r\n\r\n1. Edit `server.properties` and change `server-ip` to `unix:<path>`, for instance `unix:/home/minecraft/servers/lobby/minecraft.sock` and restart the server.\r\n2. Edit the Velocity configuration and set the `lobby` server to point to `unix://<path>`, for instance `unix:///home/minecraft/servers/lobby/minecraft.sock` and reload the proxy with `/velocity reload`.\r\n3. Make sure forwarding is set up on the Paper server and on Velocity.\r\n4. Connect to the proxy. You should be connected to the lobby server over a Unix domain socket now.\r\n\r\n## How this PR reconciles TCP/IP anachronisms and Unix domain sockets\r\n\r\nThis is simple. We assume that connections coming in from an unknown source come from `localhost` and the port is always `0`. This is, strictly speaking, not proper, but in practice is \"correct enough\". I'm open to any changes to this scheme.",
    "head_branch": "feature/unix-domain-sockets",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Unix domain socket support (#5611)\n\nTested-by: Mariell Hoversholm <proximyst@proximyst.com>\r\nReviewed-by: Mariell Hoversholm <proximyst@proximyst.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac66d9087c4d6d376ccc",
    "number": 5610,
    "body": "If anyone knows a different patch this should go in, let me know. Or if I should make this a Inventory API patch so future inventory api can go here.",
    "head_branch": "feature/Inventory#close",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Inventory#close (#5610)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac67d9087c4d6d376ccd",
    "number": 5609,
    "body": "CraftChatMessage.fromComponent fails to take into account the style of TranslatableComponent args, causing any styling on args to be completely ignored.\r\n\r\nFixing this is relatively simple, however would cause behavior to deviate from upstream. This commit will fix the coloring in messages logged through MinecraftServer.LOGGER by simply using Adventure's legacy text serializer, which properly serializes TranslatableComponents and their arguments. Note that this doesn't do anything about the underlying issue of CraftChatMessage.fromComponent improperly serializing TranslatableComponents.\r\n\r\nI noticed this problem when testing #5030, as log messages for getting advancements had no color compared to in game. Example screenshots:\r\n\r\nwithout fix:\r\n![image](https://user-images.githubusercontent.com/11360596/117754883-12b38180-b1d0-11eb-9521-f5e31cb7ee71.png)\r\n\r\n\r\n\r\nwith fix:\r\n![image](https://user-images.githubusercontent.com/11360596/117754834-fd3e5780-b1cf-11eb-9786-75bca8bdccce.png)\r\n",
    "head_branch": "fix-colors-in-certain-log-messages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix incorrect colors in some log messages (#5609)\n\nCraftChatMessage.fromComponent fails to take into account the style of TranslatableComponent args, causing any styling on args to be completely ignored.\r\n\r\nFixing this is relatively simple, however would cause behavior to deviate from upstream. This commit will fix the coloring in messages logged through MinecraftServer.LOGGER by simply using Adventure's legacy text serializer, which properly serializes TranslatableComponents and their arguments. Note that this doesn't do anything about the underlying issue of CraftChatMessage.fromComponent improperly serializing TranslatableComponents."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac68d9087c4d6d376cce",
    "number": 5608,
    "body": "Preventing Mobs (Skeletons and Phantoms) from burning in sunlight is almost impossible with the current API:\r\nWhile there is `EntityCombustEvent`, there is no `Cause` to distinguish from regular combustions.\r\nThe only thing that I could imagine would be listening to both `ECEByBlock` and `ECEByEntity` events and if none of those fire, it _could_ be sunlight.\r\nIIRC, this is technically not possible, because if you listen to the base event, the child events don't call anymore.\r\n\r\nAnyway, there is a related PR #1547, which does add this features exclusively to zombies, I extended this for all entities that care for `this.eG()` (which is the sunlight check) at the current time. That way we have a consistent API and editing the Combust Event would be bad in multiple ways, so instead we have this property on the entities.\r\n\r\nIf there are some issues with the patch in itself (e.g. whitespaces) , please tell me, so that I know that for future patches.\r\nIt would be welcomed if you could perform those adjustments upon merge though.",
    "head_branch": "burn-in-sunlight",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add a \"Should Burn in Sunlight\" API for Phantoms and Skeletons (#5608)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac69d9087c4d6d376ccf",
    "number": 5607,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\ne1a6197e SPIGOT-5565: Animals still spawn from chunk gen when spawn-animals=false",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit) (#5607)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\ne1a6197e SPIGOT-5565: Animals still spawn from chunk gen when spawn-animals=false"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac6ad9087c4d6d376cd0",
    "number": 5606,
    "body": "Added a new Pufferfish event for when it inflates or deflates (Changes puff state), was surprised there wasn't an event for this yet and thought it could be cool in some niche plugins such as changing all pufferfishes to be fully inflated and never let them deflated or when it inflates shoot arrows out.\r\n\r\nTested with:\r\n```JAVA\r\n    private boolean cancel = false;\r\n    \r\n    @EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)\r\n    public void a(PufferFishStateChangeEvent event) {\r\n        handleEvent(event, event.getEntity());\r\n    }\r\n    \r\n    private void handleEvent(Cancellable event, Entity entity) {\r\n        Bukkit.broadcastMessage(\"Fired \" + event.toString());\r\n        entity.getWorld().spawnParticle(Particle.COMPOSTER, entity.getLocation(), 4, 0.05, 0.05, 0.05, 0);\r\n        if (cancel) { \r\n            event.setCancelled(true);\r\n        }\r\n    }\r\n    \r\n    // Say \"TOGGLE\" to toggle cancelling the event\r\n    @EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)\r\n    public void b(PlayerChatEvent event) {\r\n        if (event.getMessage().equalsIgnoreCase(\"TOGGLE\")) {\r\n            cancel = !cancel;\r\n            event.getPlayer().sendMessage(\"Toggled to \" + cancel);\r\n            event.setCancelled(true);\r\n        }\r\n    }\r\n```",
    "head_branch": "add-pufferfish-events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PufferFishStateChangeEvent (#5606)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac6bd9087c4d6d376cd1",
    "number": 5605,
    "body": "So I added a bunch more of the memory keys. \r\nPretty sure I tested one of every type to ensure the conversions were working correctly.\r\n\r\nOnly ones I **didn't** add keys for, are the ones without a clear bukkit equivalent class to its type. These are the nms classes I didn't know of a bukkit equivalent for:\r\n* PositionTracker\r\n* WalkTarget\r\n* DamageSource (1.19.4 should make adding API for this nicer)\r\n* Path (just needs a slight re-work of paper's path api impl)",
    "head_branch": "feature/more-mem-keys",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac6cd9087c4d6d376cd2",
    "number": 5601,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nb9ef9229 Update entity loot tables in LootTables\r\n15f0fe23 #&#x2060;606: Add Player#getPing to access the player's ping\r\n531436ee #&#x2060;567: Add ability to cancel ProjectileHitEvent\r\nedf1881e SPIGOT-6200: Add COMMAND to the CreateSpawnEvent.SpawnReason enum\r\n\r\nCraftBukkit Changes:\r\nd28f36c6 Handle renamed ZOMBIE_PIGMAN loot table\r\n8d3051c5 #&#x2060;833: Add Player#getPing to access the player's ping\r\n8a516e0b SPIGOT-6452: Call EntityPickupItemEvent for villagers\r\n7c4adc61 #&#x2060;776: Add ability to cancel ProjectileHitEvent\r\nb6fdc7ad SPIGOT-6200: Improve entity events when summon command is used\r\n\r\nSpigot Changes:\r\nbd6b5668 Rebuild patches",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#5601)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac6dd9087c4d6d376cd3",
    "number": 5600,
    "body": "Ran into the same issue as before, where JB annotations don't allow properly annotating the nullability of certain things, this time type parameters. Maven doesn't care about the improper use of JB annotations, and compiles anyways, but when compiling with Gradle it errors.\r\n\r\nedit: looks like AnnotationTest needs updating...\r\nedit 2: AnnotationTest was more trouble than it was worth to update to allow checker annotations on method parameters, so I've just dropped the type parameter annotations altogether.",
    "head_branch": "dum-annotation-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't annotate type parameters using JetBrains annotations (#5600)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac6ed9087c4d6d376cd4",
    "number": 5599,
    "body": "This allows you to set things like if a horse is on its hind legs, eating, etc. \r\n\r\nFeedback on a better method name for ``isEating`` and ``setEating`` appreciated. But it causes the horse to sort of \"bob\" its head. It can be seen normally by feeding a horse wheat,",
    "head_branch": "horse-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Horse Animation API (#5599)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac6fd9087c4d6d376cd5",
    "number": 5598,
    "body": "",
    "head_branch": "feature/entityblockstorage-addition",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add the ability to clear entities from block storage (#5598)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac71d9087c4d6d376cd6",
    "number": 5597,
    "body": "It seems to have had the method already in EntityWitch, perhaps it was forgotten? ",
    "head_branch": "witch-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add setPotionUseTimeLeft to Witch (#5597)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac72d9087c4d6d376cd7",
    "number": 5596,
    "body": "",
    "head_branch": "feature/EntityEnterCauldronEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add EntityInsideBlockEvent (#5596)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac73d9087c4d6d376cd8",
    "number": 5595,
    "body": "",
    "head_branch": "fish-hook-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add get/set wait time for fish hooks. (#5595)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac74d9087c4d6d376cd9",
    "number": 5594,
    "body": "I missed adding a method on ItemStack to get the rarity (was supposed to be part of #5352)",
    "head_branch": "fix/itemstack-rarity-method",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing rarity method on ItemStack (#5594)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac75d9087c4d6d376cda",
    "number": 5593,
    "body": "Closes #5587 (I think)\r\ntouches #5311 ",
    "head_branch": "feature/material-attribute-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add methods for getting default item attributes (#5593)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac76d9087c4d6d376cdb",
    "number": 5592,
    "body": "- Added stop signal listener to MinecraftServer\r\n- Fixes #5270\r\n\r\n> When system property \"terminal.jline\" is false and the server receives a SIGINT/SIGTERM plugin, non-root loggers did not work due to how shutdown hooks work.",
    "head_branch": "bugfix/shutdown-loggers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix plugin loggers on shutdown (#5592)\n\nPotentially this should be merged back into the original logging changes patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac77d9087c4d6d376cdc",
    "number": 5591,
    "body": "First time dealing with patches and really git outside my own repos so sorry if I did something horribly wrong (I probably did).\r\n\r\nGiven part of the intent of the original PR was to encourage plugins to only do things at the appropriate time in PlayerMoveEvent, I figured this was even more useful in EntityMoveEvent since that one fires much more often.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add new methods from PlayerMoveEvent to EntityMoveEvent (#5591)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac78d9087c4d6d376cdd",
    "number": 5590,
    "body": "This pull request adds an event for players middle clicking a block to get an item out of their inventory.  It allows for cancellation, changing the hotbar slot that is being replaced and the slot that the item is coming from.\r\n\r\nI also made a small plugin for testing the event. (info on how to use it in a comment in the source code) [UPDATED]\r\nSource Code: https://gist.github.com/RodneyMKay/6580f7d7c55bca9aa432ef99d3d5f6cc\r\nJar: https://www.dropbox.com/s/qcyf2ci5ejufqsq/PlayerPickItemEventTest-1.0-SNAPSHOT.jar?dl=0 ",
    "head_branch": "feature/PlayerPickItemEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PlayerPickItemEvent (#5590)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac79d9087c4d6d376cde",
    "number": 5588,
    "body": "",
    "head_branch": "feature/more-enchant-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "More Enchantment API (#5588)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac7ad9087c4d6d376cdf",
    "number": 5586,
    "body": "",
    "head_branch": "return",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Return after sending empty commands (#5586)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac7bd9087c4d6d376ce0",
    "number": 5584,
    "body": "Maybe a reasonable work around? Delays adding and removing pathfinder goals from PathfinderGoalSelector if it is ticking\r\nFixes #5581 ",
    "head_branch": "delay-goal-changes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac7cd9087c4d6d376ce1",
    "number": 5583,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added PlayerPurchaseEvent for standalone Merchant GUIs (#5583)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac7dd9087c4d6d376ce2",
    "number": 5582,
    "body": "Mojang uses recursion to serialize child components/arguments of translatable components in the ComponentSerializer. This means the registered JsonSerializer for AdventureComponents cannot be used. By instead calling JsonSerializationContext#serialize for AdventureComponents, our serializer will be used.",
    "head_branch": "fix-5371-5580",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use JsonSerializationContext#serialize instead of recursion for AdventureComponents - fixes #5580 and #5371"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac7ed9087c4d6d376ce3",
    "number": 5579,
    "body": "",
    "head_branch": "MiniDigger-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix: wrong return in javadocs for bookmeta (#5579)\n\nCloses #5574.\r\nReviewed-by: Mariell Hoversholm <proximyst@proximyst.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac7fd9087c4d6d376ce4",
    "number": 5577,
    "body": "I acknowledge that prior patches will not be retroactively relicensed (which is desirable).",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Remove Astei from the MIT list (#5577)\n\n* Remove myself from the MIT list\r\n\r\nI acknowledge that prior patches will not be retroactively relicensed (which is desirable).\r\n\r\n* Fix typo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac80d9087c4d6d376ce5",
    "number": 5573,
    "body": "See https://discord.com/channels/289587909051416579/555462289851940864/839075188657225738\r\nEven if nms, we shouldn't break methods like these which a good few people rely on if we can just keep the old without troubles",
    "head_branch": "fix/signature",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Keep moveToWorld with old method signature"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac81d9087c4d6d376ce6",
    "number": 5572,
    "body": "# Summary\r\nFix PlayerBucketEmptyEvent.setItemStack(ItemStack) has no effect.\r\n\r\n# Description\r\nThe `PlayerBucketEmptyEvent` provides `setItemStack(ItemStack)`, which is explained as \"Set the item in hand after the event\". But, The method didn't work.\r\n\r\n## Sample Test Code\r\n```java\r\npublic void onEvent(PlayerBucketEmptyEvent event) {\r\n    event.setItemStack(new ItemStack(Material.BEDROCK));\r\n}\r\n```\r\n\r\n## Expected behavior\r\nAll players must receive Bedrock when they empty a bucket.\r\n\r\n## Current behavior\r\nAll players receive an empty bucket like the sample code above wasn't there.\r\n\r\n----\r\n\r\n# For commit review\r\n**The following description is just for commit review.**\r\n\r\n- **Line 23 ~ 42:** Created a new ItemStackContainer to implement like pointer. To be specific, The caller of the method(Refer: Line 81) must refer an ItemStack instance in PlayerBucketEmptyEvent in order to make setItemStack(ItemStack) method works fine.\r\n- **Line 50 ~ 53, Line 80 ~ 81 and 89 ~ 90:** Replaced ItemStackContainer for ItemStack.\r\n- **Line 60 ~ 61:** It came from line 69 ~ 72 to remove unnecessary method call and checks whether setItemStack(ItemStack) was called or not to handle when the player is in survival mode.\r\n- **Line 69 ~ 72:** Remove an unused method.\r\n- **Line 96 ~ 101:** It changes ItemStack instance of ItemStackContainer if the ItemStack field of PlayerBucketEmptyEvent was changed.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac82d9087c4d6d376ce7",
    "number": 5569,
    "body": "Fix projectiles won't get knockback by explosions.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac83d9087c4d6d376ce8",
    "number": 5567,
    "body": "Recreate PaperMC/Paper#5152, rebased",
    "head_branch": "bottle-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac84d9087c4d6d376ce9",
    "number": 5566,
    "body": "Fixed upstream https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/95544a2da8707a3b3ee758e346da9ab063f1dbb2",
    "head_branch": "drop-portal-creation-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Drop unneeded portal patch (#5566)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac85d9087c4d6d376cea",
    "number": 5563,
    "body": "",
    "head_branch": "toggle-for-book-editing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac86d9087c4d6d376ceb",
    "number": 5562,
    "body": "Currently issues have markdown text saying that the reporter should put any additional information below, which is not possible because there's no area to put it in.\r\n\r\nThis changes all final `markdown` entries to optional `textarea`s, making it possible for reported to put any additional information there.\r\n\r\nNot sure what the best label would be - I've chosen `Other`, but `Extra information` and many more come to mind.",
    "head_branch": "add_issue_extra_textarea",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Add Other textarea to issue templates (#5562)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac87d9087c4d6d376cec",
    "number": 5560,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac88d9087c4d6d376ced",
    "number": 5558,
    "body": "See https://github.com/PaperMC/Paper/pull/5553#issuecomment-830060990 - with the addition that you *can* actually change the world in the move event, so the check is necessary here as well. Added extra methods without the world check as proximsy suggested.\r\n\r\nThe only open question would be the rotation method and if it should receive the same treatment (I didn't change it yet, since you don't really \"change rotation\" as you \"change position\" in the other ones)",
    "head_branch": "fix/moveevent-haschanged",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Check for world change in MoveEvent API methods"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac89d9087c4d6d376cee",
    "number": 5557,
    "body": "*Pretty please*",
    "head_branch": "injection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add internal channel initialization listeners (#5557)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac8ad9087c4d6d376cef",
    "number": 5555,
    "body": "Use the world max height to future proof for 1.17+ worlds that have changeable max height. The old +1 to the new location seemed pointless so I removed it.",
    "head_branch": "future-proof-auto-fix-y-on-login",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac8bd9087c4d6d376cf0",
    "number": 5554,
    "body": "waterBucket was unused prior to this but still set and getWaterBucket and getFishBucket returned the fishBucket.",
    "head_branch": "fix-fishbucketevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac8cd9087c4d6d376cf1",
    "number": 5553,
    "body": "Thought it would be useful for developers instead of doing their own checks all the time and may encourage people to only run code when the player has actually moved, I don't expect this to get merged but nevertheless thought it would be cool. ",
    "head_branch": "playermoveevent-hasmoved",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add more API to PlayerMoveEvent (#5553)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac8dd9087c4d6d376cf2",
    "number": 5550,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nSpigot Changes:\r\n4225eac0 SPIGOT-6423: Improve IP forwarding",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Spigot) (#5550)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nSpigot Changes:\r\n4225eac0 SPIGOT-6423: Improve IP forwarding"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac8ed9087c4d6d376cf3",
    "number": 5549,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n80ece5de Remove old draft API tags\r\n8523fa23 #604: Add Contract annotation to ConfigurationSection\r\ndd8edaa7 #603: Specify what velocity changes in javadocs\r\n\r\nCraftBukkit Changes:\r\n0d86921e SPIGOT-6435: send correcting \"PacketPlayOutBlockChange\" packet on interact for bisected items",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#5549)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n80ece5de Remove old draft API tags\r\n8523fa23 #604: Add Contract annotation to ConfigurationSection\r\ndd8edaa7 #603: Specify what velocity changes in javadocs\r\n\r\nCraftBukkit Changes:\r\n0d86921e SPIGOT-6435: send correcting \"PacketPlayOutBlockChange\" packet on interact for bisected items"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac8fd9087c4d6d376cf4",
    "number": 5548,
    "body": "Why on earth would meta class be package-private. ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac90d9087c4d6d376cf5",
    "number": 5544,
    "body": "Fixes #5537 \r\n\r\nConfirmed all other inventory types work correctly.",
    "head_branch": "fix_5537_wrong_inventory_type",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac91d9087c4d6d376cf6",
    "number": 5543,
    "body": ".",
    "head_branch": "ver/1.8.8",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac92d9087c4d6d376cf7",
    "number": 5542,
    "body": "",
    "head_branch": "component-to-message",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement methods to convert between Component and Brigadier's Message (#5542)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac93d9087c4d6d376cf8",
    "number": 5541,
    "body": "NullPointerException is thrown if `logo.png` does not exist",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac94d9087c4d6d376cf9",
    "number": 5540,
    "body": "Following https://github.com/PaperMC/Paper/pull/5465\r\nThe PlayerRespawnEvent uses flag2 for deciding if the respawn was from an anchor or not but flag2 is only used for removing a charge from the Anchor which the End Portal & Credits respawn does not, so when you enter the End Portal with an Anchor respawn set, it will fire the event with bed:true and anchor:false which is incorrect, this patch fixes this issue.\r\n\r\nI tested with:\r\n```\r\n    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)\r\n    public void a(PlayerRespawnEvent event) {\r\n        Bukkit.getLogger().warning(\"RESPAWN \" + event.isBedSpawn() + \" \" + event.isAnchorSpawn());\r\n    }\r\n```\r\n\r\nI tested this with normal /kill deaths and using the End portal with & without bed and anchor respawns. It all lines up correctly.\r\n\r\nTest results:\r\n```\r\n[23:34:26] [Async Chat Thread - #0/INFO]: <HexedHero> Normal death\r\n[23:34:29] [Server thread/WARN]: RESPAWN false false\r\n[23:35:15] [Async Chat Thread - #0/INFO]: <HexedHero> Bed - No Anchor\r\n[23:35:19] [Server thread/WARN]: RESPAWN true false\r\n[23:35:35] [Async Chat Thread - #0/INFO]: <HexedHero> Anchor - No Bed\r\n[23:35:40] [Server thread/WARN]: RESPAWN false true\r\n[23:37:05] [Async Chat Thread - #1/INFO]: <HexedHero> End Portal/Credits - No Bed - No Anchor\r\n[23:37:07] [Server thread/WARN]: RESPAWN false false\r\n[23:36:49] [Async Chat Thread - #1/INFO]: <HexedHero> End Portal/Credits - Bed - No Anchor\r\n[23:36:47] [Server thread/WARN]: RESPAWN true false\r\n[23:37:42] [Async Chat Thread - #1/INFO]: <HexedHero> End Portal/Credits - Anchor - No Bed\r\n[23:37:46] [Server thread/WARN]: RESPAWN false true\r\n```",
    "head_branch": "fix-playerrespawnevent-isanchorspawn",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix anchor respawn acting as a bed respawn when using the end portal (#5540)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac95d9087c4d6d376cfa",
    "number": 5539,
    "body": "This removes the unneeded interaction event that occurs in ItemBoat. When placing down a boat it would trigger 2 interaction events (1 for placing the boat and 1 for using the item).\r\n\r\nThis causes placing boats to fire 1 interaction event (from two).",
    "head_branch": "fix/double-boat-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove boat interaction event (Fixes #5539)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac96d9087c4d6d376cfb",
    "number": 5538,
    "body": "this method in `NBTTagCompound` will throw an NPE if passed an key that doesn't exist. The Nullable annotation is incorrect here, as the method will only return non null UUID. All places the code that use this, have a hasUUID check before it.",
    "head_branch": "fix/bad-nullable-anno",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Remove bad null annotation (#5538)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac97d9087c4d6d376cfc",
    "number": 5536,
    "body": "Fixes SPIGOT-2942 (Give command fires PlayerDropItemEvent, cancelling it causes item duplication).\r\n\r\nFor every stack of items to give, /give puts the item stack straight into the player's inventory. However, it also summons a \"fake item\" at the player's location. When the PlayerDropItemEvent for this fake item is cancelled, the server attempts to put the item back into the player's inventory. The result is that the fake item, which is never meant to be obtained, is combined with the real items injected directly into the player's inventory. This means more items than the amount specified in /give are given to the player - one for every stack of items given. (e.g. /give @s dirt 1 gives you 2 dirt).\r\n\r\nWhile this isn't a big issue for general building usage, it can affect e.g. adventure maps where the number of items the player receives is important (and you want to restrict the player from throwing items).\r\n\r\nIf there are any overflow items that didn't make it into the inventory (insufficient space), those items are dropped as a real item instead of a fake one. While cancelling this drop would also result in the server attempting to put those items into the inventory, since it is full this has no effect.\r\n\r\nJust ignoring cancellation of the PlayerDropItemEvent seems like the cleanest and least intrusive way to fix it.",
    "head_branch": "item-drop-cancel-give-dupe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix duplicating /give items on item drop cancel (#5536)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac99d9087c4d6d376cfd",
    "number": 5535,
    "body": "fixes #5370 ",
    "head_branch": "fix/nondummy-objectives",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix non-dummy objectives not updating"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac9ad9087c4d6d376cfe",
    "number": 5534,
    "body": "Fixes #5482 ",
    "head_branch": "fix/PlayerItemHeldEvent-firing-twice",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix PlayerItemHeldEvent firing twice (#5534)\n\nCo-authored by: chickeneer <emcchickeneer@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac9bd9087c4d6d376cff",
    "number": 5533,
    "body": "Closes #5494 ",
    "head_branch": "feature/isEndPortalRespawn-PlayerRespawnEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add RespawnFlags to PlayerRespawnEvent (#5533)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac9cd9087c4d6d376d00",
    "number": 5532,
    "body": "",
    "head_branch": "feature/consumeFuel-FurnaceBurnEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add consumeFuel to FurnaceBurnEvent (#5532)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac9dd9087c4d6d376d01",
    "number": 5529,
    "body": "Closes #5486",
    "head_branch": "feature/OfflinePlayer-advancements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ac9ed9087c4d6d376d02",
    "number": 5528,
    "body": "Closes #5512 ",
    "head_branch": "feature/entity-equipment-drop-chance-per-slot",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add get-set drop chance to EntityEquipment (#5528)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ac9fd9087c4d6d376d03",
    "number": 5527,
    "body": "So instead of doing a massive PR (see #3625), I thought I'd break it up a bit so people can actually go through it without wanting to smash their heads on their desks.\r\n\r\nI don't know what the best way to accomplish loading the datapacks later is, what I did seems to work, I've never messed with java's concurrency package.\r\n\r\nAnyways, plugins can extend `AdvancementTrigger` and then \"trigger\" the trigger where ever they want in their code. Can create advancements with custom triggers and custom data attached to each instance.\r\n\r\nOh, one big note, is what's the best way to mark this whole thing as not complete, and can have breaking changes for the time being? Is that something that is even done? I'd like to add support for the various conditions mc supports for stuff, like ranges, entities, etc, but that would make the pr massive (as it did my other one) so I kinda wanted to do it in stages.\r\n\r\n[An example of a custom trigger](https://paste.gg/p/anonymous/c518f8af97e94223a148441dd736cee8)",
    "head_branch": "feature/custom-triggers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aca0d9087c4d6d376d04",
    "number": 5525,
    "body": "",
    "head_branch": "feature/PlayerSleepEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PlayerDeepSleepEvent (#5525)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aca1d9087c4d6d376d05",
    "number": 5516,
    "body": "As the vanilla source code never had any need for descriptive and\r\nnon-binary return values for the Entity#damageEntity method upstream\r\nsimply returned false from this method if the entity could have been\r\ndamaged but plugins prevent it.\r\n\r\nThis meant that outside of the method itself no code was capable of\r\nidentifying whether or not the entity damage event did not occure due to\r\nvanilla mechanics or plugin interference.\r\n\r\nThe problem became apperant due to the Explosion.java code skipping\r\nknockback for all entities that were not damaged, whether or not that\r\nwas due to plugin influence.\r\nWhile vanilla would apply knockback to any entity caught in the\r\nexplosion, ignoring whether or not the entity actually takes damage,\r\nspigot cannot do so as that would knockback entities for which the\r\ndamage event was cancelled.\r\n\r\nThis commit introduces the Entity#applyDamage method which\r\nreturns an enum constant of DAMAGED (which replaces the vanilla true),\r\nNOT_DAMAGED (which replaces the vanilla false) and\r\nBUKKIT_EVENT_CANCELLED which is returnd if the damage failed due to an\r\nevent.\r\nThe Explosion.java code now also uses this return value to apply\r\nknockback to all entities for which the damage event was not cancelled.\r\n\r\n------------------------------------------------------------------------------------\r\n\r\nCurrent things missing that need to be added prior to a merge:\r\n\r\n- [x] // Paper start and stop comments\r\n- [x] Validate every single entity for correct usage of the BUKKIT_EVENT_CANCELLED constant (currently simple replace of true/false, only obvious cases are covered)\r\n- [x] Investigate some rather interesting return values added by upstream (see EntityHanging.java(219)\r\n\r\n-------------------------------------------------------------------------------------\r\n\r\n## Alternative Implementations\r\n\r\n1. Sticking to a bandage like fix as proposed in #5435\r\n2. Expand the proposed change from an enum constant to object instance to potentially carry more information (such as plugin cancelled or why not currently damageable). This could potentially be exposed to the API somehow ??\r\n\r\n-------------------------------------------------------------------------------------\r\n\r\n## Implications for future changes\r\n\r\nThis is a rather intrusive change concerning the entity damage method.\r\nWhile most calls towards the Entity#damageEntity method are still perfectly fine, as it simply forwards, no entity implementation can overwrite Entity#damageEntity (as that would break exactly that backwards compatibility) nor may it call `super.damageEntity` inside of the `applyDamage` method as that would lead to a stackoverflow.\r\n\r\nNew entity additions, such as the 1.17 ones, will need to be addressed and patched accordingly.\r\nAs the Entity#damageEntity method is marked as final this *should* be noticed during the initial adoption of paper to a newer version. A potential usage of `super.damageEntity` however is not as easily spotted. This should potentially be documented somewhere.",
    "head_branch": "bugfix/allow-undamageable-entity-knockback",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aca2d9087c4d6d376d06",
    "number": 5515,
    "body": "This method is very nice if you want a simple way to detect if a player is on a block while respecting if the player is on the very edge of the block. \r\nThis adds a custom field to the Player that is only calculated each tick without any interference from packets. This field will only be used in the API.\r\n\r\nThis new field is accessed via a new Player#isGrounded() method. Better method name suggestions would be appreciated.",
    "head_branch": "feature/better-isonground",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aca3d9087c4d6d376d07",
    "number": 5510,
    "body": "Likely another useless PR, but I thought I might as well, as I really want to contribute to Paper.\r\nThis PR adds support for ANSI colour codes in the text box in the server GUI.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aca4d9087c4d6d376d08",
    "number": 5509,
    "body": "Fixes AsyncChatEvent essentially not working if AsyncPlayerChatEvent was listened to.\r\n\r\nBefore this patch, the legacyComposer inputs were ignored, so it broke when plugins like that existed:\r\n```kotlin\r\nimport org.bukkit.event.player.AsyncPlayerChatEvent\r\nimport io.papermc.paper.event.player.AsyncChatEvent\r\nimport net.kyori.adventure.text.Component\r\nimport net.kyori.adventure.text.TextComponent\r\nimport net.kyori.adventure.text.format.NamedTextColor\r\n\r\nclass BugListener(private val plugin: ToiletPaper) : Listener {\r\n    @EventHandler\r\n    private fun onAsyncChat(e: AsyncChatEvent) {\r\n        e.getPlayer().sendMessage(\"You send a message!\");\r\n        val component = Component.text(\"Test\");\r\n        e.message(component);\r\n    }\r\n    \r\n    @EventHandler\r\n    private fun onPlayerChat(e: AsyncPlayerChatEvent){ //<--- This break AsyncChatEvent\r\n        //Didn't Do anything here\r\n        return;\r\n    }\r\n}\r\n```\r\n\r\nReported on Discord: https://discord.com/channels/289587909051416579/555462289851940864/833247957990113301",
    "head_branch": "fix_async_chat_event_composer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix legacyComposer not using AsyncChatEvent messages (#5509)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aca5d9087c4d6d376d09",
    "number": 5508,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n14883d6b SPIGOT-6078: Add SmithItemEvent and expand SmithingInventory API\r\n\r\nCraftBukkit Changes:\r\n115244c7 SPIGOT-6078: Add SmithItemEvent and expand SmithingInventory API",
    "head_branch": "upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#5508)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n14883d6b SPIGOT-6078: Add SmithItemEvent and expand SmithingInventory API\r\n\r\nCraftBukkit Changes:\r\n115244c7 SPIGOT-6078: Add SmithItemEvent and expand SmithingInventory API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aca6d9087c4d6d376d0a",
    "number": 5505,
    "body": "Many plugins that use the API for removing awareness/AI from mobs don't want the mobs to be saved in this state. In order to try to prevent this they will try to listen to events such as `EntityRemoveFromWorldEvent` or `ChunkUnloadEvent`, but inevitably some mobs will always slip by (e.g. because of a hard crash, or edge cases people don't think about like slimes splitting). This patch removes uncertainty for plugins by adding non-persistent options for pausing AI and awareness",
    "head_branch": "persistence-option",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aca7d9087c4d6d376d0b",
    "number": 5504,
    "body": "```kotlin\r\npackage org.example.testplugin\r\n\r\nimport com.destroystokyo.paper.event.server.AsyncTabCompleteEvent\r\nimport com.destroystokyo.paper.event.server.AsyncTabCompleteEvent.Completion.completion\r\nimport net.kyori.adventure.text.Component\r\nimport net.kyori.adventure.text.Component.keybind\r\nimport net.kyori.adventure.text.Component.text\r\nimport net.kyori.adventure.text.Component.translatable\r\nimport net.kyori.adventure.text.format.NamedTextColor.AQUA\r\nimport net.kyori.adventure.text.format.TextColor.color\r\nimport net.kyori.adventure.text.minimessage.MiniMessage\r\nimport org.bukkit.Bukkit\r\nimport org.bukkit.event.EventHandler\r\nimport org.bukkit.event.Listener\r\nimport org.bukkit.plugin.java.JavaPlugin\r\n\r\nclass TestPlugin : JavaPlugin(), Listener {\r\n  companion object {\r\n    const val COMMAND_LABEL = \"richcompletions\"\r\n  }\r\n\r\n  override fun onEnable() {\r\n    Bukkit.getPluginManager().registerEvents(this, this)\r\n    Bukkit.getPluginCommand(COMMAND_LABEL)\r\n  }\r\n\r\n  @EventHandler\r\n  fun asyncTabComplete(event: AsyncTabCompleteEvent) {\r\n    val input = if (event.buffer.startsWith('/')) event.buffer.substring(1) else event.buffer\r\n    val inputTokens = input.split(' ')\r\n    if (inputTokens.isEmpty() || inputTokens[0] != COMMAND_LABEL) return\r\n\r\n    event.completions().addAll(listOf(\r\n      completion(\"0\", minimessage(\"<rainbow>Rainbow command completion tooltip\")),\r\n      completion(\"1\", minimessage(\"<gradient:blue:aqua>Completion tooltip with gradient\")),\r\n      completion(\"2\", text(\"Plain suggestion tooltip\")),\r\n      completion(\"3\"), // No suggestion tooltip!\r\n      completion(\"4\", translatable(\"tutorial.move.description\", AQUA, keybind(\"key.jump\", color(0xD230FF))))\r\n    ))\r\n  }\r\n\r\n  fun minimessage(input: String): Component = MiniMessage.get().parse(input)\r\n}\r\n\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/11360596/115106427-a53a6b00-9f19-11eb-9a51-5064392fe3b6.png)\r\n![image](https://user-images.githubusercontent.com/11360596/115106522-28f45780-9f1a-11eb-9290-bc0e04488b46.png)\r\n![image](https://user-images.githubusercontent.com/11360596/115106523-2bef4800-9f1a-11eb-91b6-4497387b2360.png)\r\n![image](https://user-images.githubusercontent.com/11360596/115106524-2e51a200-9f1a-11eb-9b46-1be8b423d829.png)\r\n![image](https://user-images.githubusercontent.com/11360596/115106525-314c9280-9f1a-11eb-911d-10d3df790319.png)\r\n![image](https://user-images.githubusercontent.com/11360596/115106527-33aeec80-9f1a-11eb-93bb-b4c23c0efe92.png)\r\n\r\nSomething that might be worth considering is deprecating the String-based `getCompletions` and `setCompletions` methods on `AsyncTabCompleteEvent`, but I wasn't sure about this so I have not done it so far.\r\n\r\nnote: it is possible to use ANSI formatting in the completion tooltips for console, this could easily be added later once Adventure has a proper ANSI serializer.",
    "head_branch": "asynctabcompleteevent-richsuggestions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow for Component suggestion tooltips in AsyncTabCompleteEvent (#5504)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aca8d9087c4d6d376d0c",
    "number": 5503,
    "body": "https://github.com/PaperMC/Paper/pull/4890\r\nI fixed it after I broke it",
    "head_branch": "biome-key",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aca9d9087c4d6d376d0d",
    "number": 5500,
    "body": "thanks @Spottedleaf ",
    "head_branch": "fix-light",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix occasional light gen issues for neighbor blocks (#5500)\n\nCo-authored-by: Spottedleaf <Spottedleaf@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acabd9087c4d6d376d0e",
    "number": 5496,
    "body": "Hello, I saw a YouTube video in which the error occurred, it is about that if you stand on several boats that you will be kicked because of fly, I wanted to report this because I am sure that it is not intended.\r\n\r\nThe Video: https://youtu.be/lnqALy2WUNY",
    "head_branch": "master",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acacd9087c4d6d376d0f",
    "number": 5493,
    "body": "Similar to the EntityEnderSignal there is a patch that allows you to set any item. This extends that functionality to EntityFireballFireball as well.",
    "head_branch": "feature/always-set-fireball",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Always allow item changing in EntityFireball (#5493)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acadd9087c4d6d376d10",
    "number": 5492,
    "body": "## Changes\r\nThis pull changes the force stop of the thread in `MinecraftServer#stop()` to use `Thread#interrupt()` instead of `Thread#stop()`. Although `Thread#stop()` is **effective**, it is still unsafe, and hence deprecated. \r\n\r\n\r\n## Reasoning\r\nOracle notes that:\r\n\r\n> Stopping a thread causes it to unlock all the monitors that it has locked. (The monitors are unlocked as the ThreadDeath exception propagates up the stack.) If any of the objects previously protected by these monitors were in an inconsistent state, other threads may now view these objects in an inconsistent state. Such objects are said to be damaged. When threads operate on damaged objects, arbitrary behavior can result. This behavior may be subtle and difficult to detect, or it may be pronounced. Unlike other unchecked exceptions, ThreadDeath kills threads silently; thus, the user has no warning that his program may be corrupted. The corruption can manifest itself at any time after the actual damage occurs, even hours or days in the future.\r\n\r\nEven though the server is stopped, taking the safer route is preferred. `Thread#stop()` directly invokes `Thread#stop0(Throwable)`, a native function. Viewing the native function supports the documentation above as it releases those locks during deoptimization, as well as leads to the invocation of a few other unsafe operations. \r\n\r\nAlthough it is called to force-stop the server, and probably should not matter, there is always the chance that something *that* native does cause future harm and of course, to an extent, enforces bad practices. However, if there is a case where `Thread#stop()` with absolute certainty should be used instead, then this PR would be useless -- but in the less-likely occasion the code finds a way to reach this point, `Thread#interrupt()` works about the same, without of course, the implications of `Thread#stop()` This PR introduces the usage of a safer method call, `Thread#interrupt()`, plus removes the usage of the well deprecated `Thread#stop()`.\r\n",
    "head_branch": "change-stop-to-interrupt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acaed9087c4d6d376d11",
    "number": 5484,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n6b8cd9a7 SPIGOT-6207: forcibly drop the items of a converted zombie villager",
    "head_branch": "upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit) (#5484)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n6b8cd9a7 SPIGOT-6207: forcibly drop the items of a converted zombie villager"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acafd9087c4d6d376d12",
    "number": 5481,
    "body": "In some instances (like teleporting a player) the head rotation could become desynced with their actual yaw. This is due to the fact that bukkit uses head rotation for yaw (for some reason?) in places like getLocation().\r\n\r\nThis adds some missing set rotations.\r\n\r\nEDIT: This issue only exists for players. This is because they call PlayerConnection#internalTeleport(),\r\n![image](https://user-images.githubusercontent.com/23108066/117552942-7301c200-b01c-11eb-9f2b-7ec83ea8fcf0.png)\r\n ",
    "head_branch": "fix/yaw-desync",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update head rotation in missing places (#5481)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acb0d9087c4d6d376d13",
    "number": 5479,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nb302317a SPIGOT-5877: Add scaffolding for custom dimensions and biomes\r\nccccb625 SPIGOT-6417: Add Creeper fuse ticks API\r\n\r\nCraftBukkit Changes:\r\n0e26ddb6 SPIGOT-5877: Add scaffolding for custom dimensions and biomes\r\n170d6feb SPIGOT-6417: Add Creeper fuse ticks API",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit)\n\nUpstream has released updates that appear to apply and compile correctly.\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\n\nBukkit Changes:\nb302317a SPIGOT-5877: Add scaffolding for custom dimensions and biomes\nccccb625 SPIGOT-6417: Add Creeper fuse ticks API\n\nCraftBukkit Changes:\n0e26ddb6 SPIGOT-5877: Add scaffolding for custom dimensions and biomes\n170d6feb SPIGOT-6417: Add Creeper fuse ticks API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623acb1d9087c4d6d376d14",
    "number": 5478,
    "body": "Previously this value was a static member of CraftEventFactory, making\r\nit effectively a global. This does not introduce any issues with the\r\nsingle-threaded server but severely breaks multithreading (wherein the\r\nblock damage block can be overwritten when two entities are being\r\ndamaged in parallel threads).",
    "head_branch": "refactor-block-damage",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acb2d9087c4d6d376d15",
    "number": 5477,
    "body": "This PR fixes the fact that the `BroadcastMessageEvent` was broken for the `broadcastMessage(String)` method in the Adventure update. Additionally, it also adds a `broadcast(Component)` method to mimic the functionality of the `broadcastMessage(String)` method but with Adventure components.\r\n\r\nI believe that this also addresses the issue that `sendMessage` on `Server` does not fire the `BroadcastMessageEvent` by distinguishing between \"a message sent to all forwarded audience members\" and \"a server broadcast\" for Adventure components, thus mimicking the functionality of the old string methods.",
    "head_branch": "fix-broadcast-message",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix broadcast event and add Adventure broadcast (#5477)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623acb3d9087c4d6d376d16",
    "number": 5476,
    "body": "This allows to get a collection of players in the (no-tick) view distance of a chunk",
    "head_branch": "feature/view-distance-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acb4d9087c4d6d376d17",
    "number": 5474,
    "body": "This PR bumps `mysql-connector-java` to `8.0.23` due to 1 high and 1 medium level vulnerabilities being found affecting the current version of `mysql-connector-java` that Paper uses (`5.1.49`). Those vulnerabilities being  Access Control Bypass and Privilege Escalation, respectively.\r\n\r\nTesting needed with plugins that use `mysql-connector-java` to see if this version bump can break things.",
    "head_branch": "pr/update-mysql-connector",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bump mysql-connector-java to 8.0.23 (Fixes #5473) (#5474)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acb5d9087c4d6d376d18",
    "number": 5472,
    "body": "Currently, if you play a sound using the Adventure `Player#playSound(Sound)` method it delegates to the `playSound(Sound, double, double, double)` method. This means that if you use this method to play, say, a record, and the player moves about the sound will not follow it, instead sticking at the location the player was at when the sound was played.\r\n\r\nAlthough this could be considered correct behaviour, I believe it should be the case that if you're playing a sound on an audience member you would expect the sound to come from the audience member, following them if their location changes.\r\n\r\nAt the moment, this method falls back to sending using the custom sound effect packet using the players location, as the entity sound effect packet does not support custom sounds.\r\n\r\nIt's worth noting that a potential alternative to this is https://github.com/KyoriPowered/adventure/pull/316 which would mimic this functionality with `player.playSound(sound, player)`.",
    "head_branch": "sound-play-without-location-follow-entity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acb6d9087c4d6d376d19",
    "number": 5471,
    "body": "Upstream fixed this in a different way (using -1 for off hand instead of the real slot id) so this patch is no longer needed.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Drop `Allow PlayerEditBookEvent to fire for off hand` (#5471)\n\nUpstream fixed this in a different way (using -1 for off hand instead of the real slot id...) so this patch is no longer needed."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acb7d9087c4d6d376d1a",
    "number": 5470,
    "body": "",
    "head_branch": "feature/isDeeplySleeping",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add isDeeplySleeping to HumanEntity (#5470)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623acb8d9087c4d6d376d1b",
    "number": 5467,
    "body": "Previously the time for loading the world would be printed even when `keep-spawn-loaded` was set to false. As the timer was never started, this would print insane times. This will check to see that the spawn is being kept in memory before printing load times. Closes #5438 ",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't print spawn load time when not loading spawn (#5467)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acb9d9087c4d6d376d1c",
    "number": 5465,
    "body": "Follows the same logic as the normal PlayerRespawnEvent and works inline.\r\nTested with\r\n\r\n    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)\r\n    public void a(PlayerRespawnEvent event) {\r\n        Bukkit.getLogger().warning(\"Fired: \" + event.isBedSpawn() + \" \" + event.isAnchorSpawn());\r\n    }\r\n\r\n    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)\r\n    public void b(PlayerPostRespawnEvent event) {\r\n        Bukkit.getLogger().warning(\"POST Fired: \" + event.isBedSpawn() + \" \" + event.isAnchorSpawn());\r\n    }\r\n",
    "head_branch": "playerpostrespawnevent-isanchorspawn",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acbad9087c4d6d376d1d",
    "number": 5463,
    "body": "",
    "head_branch": "player-edit-book-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix PlayerEditBookEvent (#5463)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acbbd9087c4d6d376d1e",
    "number": 5462,
    "body": "Area effect clouds can be used with player spectating to lock the player's view while having a basically \"invisible\" entity. However, pitch/yaw for spawning is not retained.\r\n\r\nThis patch now sets an area effect clouds yaw/pitch when spawning them.",
    "head_branch": "area-effect-cloud-yaw-pitch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Set Area Effect Cloud Rotation (#5462)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acbdd9087c4d6d376d1f",
    "number": 5461,
    "body": "Continuation of #5387\r\nFixes #5456\r\n\r\nHopefully this helps idiots like me who have global gitignore set. :)\r\n\r\n### Alternative solutions considered\r\n#### Override core.excludesfile\r\nI've tried to disable gitignore globally in the scripts using https://git-scm.com/docs/git-config#Documentation/git-config.txt-GITCONFIGCOUNT , but sadly this only creates additional entries instead of overwriting existing ones.\r\n```sh\r\nexport GIT_CONFIG_COUNT=1\r\nexport GIT_CONFIG_KEY_0=core.excludesfile\r\nexport GIT_CONFIG_VAL_0=/dev/null\r\n```\r\n\r\n#### Disable non-local configuration files\r\nI've considered doing \"fuller\" approach of disabling system, user and global configurations, but it became too complex and fragile.\r\nAccording to: https://git-scm.com/docs/git#Documentation/git.txt-codeGITCONFIGNOSYSTEMcode\r\n> GIT_CONFIG_NOSYSTEM\r\n>\r\n>    Whether to skip reading settings from the system-wide $(prefix)/etc/gitconfig file. This environment variable can be used along with $HOME and $XDG_CONFIG_HOME to create a predictable environment for a picky script [...]\r\n\r\nThis obviously disables settings like `author.name` and `author.email`. I've tried to retain just these selected settings by doing:\r\n```sh\r\nexport GIT_AUTHOR_NAME=\"$(git config --get user.name)\"\r\nexport GIT_AUTHOR_EMAIL=\"$(git config --get user.email)\"\r\n```\r\nbefore overriding the config paths, but git requires them to be set in config, before it'll actually overwrite them with environment variables.",
    "head_branch": "ignore_gitignore",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Ignore gitignore when adding files in automation\n\nContinuation of #5387\n\nFixes #5456"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acbdd9087c4d6d376d20",
    "number": 5460,
    "body": "Closes #5076\r\n\r\nTested with a plugin which cancelled all mobspawns spawns using PreCreatureSpawnEvent, using 1 player.\r\nObserved a 75% reduction in execution time of mobspawns (from 54% of tick to 4%).\r\n\r\nTODO\r\n- Add missing Paper comments\r\n- Configurable bleed\r\n- Change bleed algorithm?\r\n- Improve CreatureSpawnEvent cancelling as well",
    "head_branch": "improve-cancelled-spawn-events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acbfd9087c4d6d376d21",
    "number": 5457,
    "body": "This PR makes online player lookups by unique ID and name thread safe, which can be useful for e.g. sending messages in an asynchronous context but it also improves thread safety of various other methods that do player lookups internally, such as some methods of `OfflinePlayer`.\r\n\r\nAlthough visibility is often no issue because of a present happens-before relationship and I have heard several times that concurrent reads are fail-safe in the most `HashMap` implementations nowadays, the docs do not guarantee any behavior regarding this. Therefore I have replaced the `HashMap`s by `ConcurrentHashMap`s.\r\n\r\nNote that `HashMap` and `ConcurrentHashMap` have different contracts for `null` keys, which also affects behavior of API methods. However, those are all annotated with `@NotNull` anyway and no `null` keys are used internally as far as I can see.\r\n\r\nI don't know if this has any noticeable effects performance wise.",
    "head_branch": "feature/player-list-thread-safety",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acc0d9087c4d6d376d22",
    "number": 5454,
    "body": "Fixes narrator issue #5450\r\n\r\nNot sure how to handle case when `if` evaluates to true, since there's no method accepting MessageType or similar.",
    "head_branch": "fix_narrator_5450",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Send post ChatEvent messages as MessageType.CHAT\n\nFixes narrator issue #5450"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acc1d9087c4d6d376d23",
    "number": 5453,
    "body": "Shulker boxes did not work with checkReachable, this fixes that.",
    "head_branch": "fix-checkReachable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      " Add missing checkReachable check for shulker boxes (#5453)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acc2d9087c4d6d376d24",
    "number": 5448,
    "body": "This removes the BlockFlowerPot check that most likely was used when it was a tile entity. \r\n\r\nThis pull request was tested and does not seem to cause any issues.",
    "head_branch": "fix/remove-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove useless check on player interact cancellation (#5448)\n\nThis removes the BlockFlowerPot check that most likely was used when it was a tile entity."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acc3d9087c4d6d376d25",
    "number": 5445,
    "body": "This PR adds a new class `Tick` that implements `TemporalUnit` to allow easy handling of ticks as a unit of time. Additionally, some unit tests have been provided just for fun.\r\n\r\nFor example, to create a new duration from a certain number of ticks you can simply do one of the following:\r\n```java\r\nDuration.of(50, Tick.tick());\r\nTick.of(50);\r\n```\r\n\r\nThe inverse is also possible, calculating the whole number of ticks in a given duration:\r\n```java\r\nTick.fromDuration(Duration.of(100, ChronoUnit.SECONDS));\r\n```\r\n\r\nThis PR is a more restrictive version of the [equivalent PR in Minestom](https://github.com/Minestom/Minestom/pull/205).",
    "head_branch": "tick-temporal-unit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Tick TemporalUnit (#5445)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623acc4d9087c4d6d376d26",
    "number": 5443,
    "body": "Not 100% sure whether we want to expose a color downsampling gson serializer or not. My thinking behind exposing it is that if you are serializing legacy hover events, you probably don't want rgb colors in the serialized component, because you are probably sending the json to a legacy client or something. ",
    "head_branch": "expose-more-serializers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expose more Adventure serializers through PaperComponents (#5443)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623acc5d9087c4d6d376d27",
    "number": 5441,
    "body": "Replace the old logo with this one: (https://cdn.discordapp.com/attachments/555469074080202765/826867274437754880/community-uwu.png)\r\n\r\nNot exactly sure if you guys want this but thought it might be useful anyway.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acc6d9087c4d6d376d28",
    "number": 5439,
    "body": "Implements a version of getChunkSnapshot which can reuse a previous snapshot to reduce allocations.\r\n\r\nIn theory this would remove most unnecessary allocations with multiple calls to the method, although lighting data is still allocated. A future patch for Yet Another Boolean Parameter could implement that.",
    "head_branch": "feat/reusable-chunksnapshot",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acc7d9087c4d6d376d29",
    "number": 5437,
    "body": "Adds support for tab completing and highlighting console input from the Brigadier command tree. This works with vanilla commands, regular bukkit commands, as well as bukkit commands that have registered with Brigadier using Commodore/`CommandRegisteredEvent`.\r\n\r\nScreenshot:\r\n![image](https://user-images.githubusercontent.com/11360596/113123720-ae150800-91c9-11eb-859d-6b43edc427e8.png)\r\n",
    "head_branch": "console-moment",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add support for tab completing and highlighting console input from the Brigadier command tree (#5437)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acc8d9087c4d6d376d2a",
    "number": 5436,
    "body": "\r\nWith this patch my server has 500 tps! 👍 \r\n\r\n(Its a joke, just remove double semicolon)",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acc9d9087c4d6d376d2b",
    "number": 5435,
    "body": "Spigot implemented a non-vanilla check prior to modifying an entities\r\nvelocity due to an explosion that required the Entity#damageEntity call\r\nto return `true` (presumably) to not move entities for which the damage\r\nwas cancelled.\r\n\r\nWhile the spigot implementation already exempted primed tnt and falling\r\nblocks from this condition, as they never take damage and always return\r\n`false`, projectiles did not recieve the same treatment. As most\r\nprojectiles cannot take damage (as they either simply ignore damage or\r\ndie immediately) projectiles such as the arrow would no longer be\r\naffected by an explosion and would hence not change their velocity.\r\n\r\nThis commit returns the vanilla behaviour by allowing all entities that\r\nextend the `IProjectile` class to change their velocity due to an\r\nexplosion by adding an `instanceof` check to the two previously existing\r\n`instanceof` checks for primed tnt and falling block entities.\r\n\r\nResolves: #5429\r\n\r\n----\r\n\r\nNOTE:\r\nAs of right now, this PR now enables **<u>all</u>** entities that extend IProjectile to be moved by tnt. This evaluates to the following entities:\r\n- DragonFireball\r\n- Egg\r\n- EnderPearl\r\n- Fireworks\r\n- FishingHook\r\n- LargeFireball\r\n- Potion\r\n- ShulkerBullet\r\n- SmallFireball\r\n- SpectralArrow\r\n- ThrownExpBottle\r\n- ThrownTrident\r\n- TippedArrow\r\n- WitherSkull",
    "head_branch": "bugfix/allow-tnt-projectile-velocity-mutation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623accad9087c4d6d376d2c",
    "number": 5431,
    "body": "",
    "head_branch": "ok",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove from Map by key"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623accbd9087c4d6d376d2d",
    "number": 5430,
    "body": "See Hydra, March 29th 2021.\r\n\r\nPatch is GPLv3.",
    "head_branch": "remove-correct-tileentity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make sure to remove correct TE during TE tick\n\nSee Hydra, March 29th 2021."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acccd9087c4d6d376d2e",
    "number": 5425,
    "body": "I've recently been having this come up a few times as well as other owners as well, I thought it'll be useful and help debug the issue to add some more info especially the location to the message.\r\n\r\nExample:\r\n> [23:05:58 WARN]: [NAN-HEALTH] 39376c72-9143-478b-8ff1-91bfb4348490 (Type: sheep) at 118.0 92.0 91.0 in world had NaN health set\r\n\r\n",
    "head_branch": "nan-health-info",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623accdd9087c4d6d376d2f",
    "number": 5423,
    "body": "This event is called just after calculating position of exit portal in The End, so you can modify its position, set/check if it will be filled with portal blocks etc.\r\n\r\nCan be used to place portal higher than default on empty worlds (origin: y=-1; blocks from y=-2 to y=2, so portal was cut in the middle). ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acced9087c4d6d376d30",
    "number": 5422,
    "body": "As requested in https://github.com/PaperMC/papermc.io/pulls#issuecomment-808766783\r\n",
    "head_branch": "add-jdnotice-adventure-pom",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Extract Adventure Version into a variable, add reminder to update the linked JD on the homepage (#5422)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623accfd9087c4d6d376d31",
    "number": 5419,
    "body": "Fixes #5386 by mimicking what plugins currently can do to solve the issue: updating the block to notify clients.",
    "head_branch": "issue-5386",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix cancelling block falling causing client desync (fixes #5386) (#5419)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acd0d9087c4d6d376d32",
    "number": 5418,
    "body": "Fixes #5417 ",
    "head_branch": "issue-5417",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "forced whitelist: use configuable kick message (fixes #5417) (#5418)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acd1d9087c4d6d376d33",
    "number": 5416,
    "body": "Helo, it is I, the protocol hack dude.\r\nShall this stay in UnsafeValues or not?",
    "head_branch": "protocol-version",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expose server protocol version (#5416)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623acd2d9087c4d6d376d34",
    "number": 5414,
    "body": "fixes #5412 ",
    "head_branch": "adventurecomponent-getstring",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use PaperAdventure.PLAIN instead of PlainComponentSerializer.plain() for AdventureComponent#getString (#5414)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acd3d9087c4d6d376d35",
    "number": 5410,
    "body": "Users with `paper.canspam` permission will not be kicked for any spam checks. Would've called it `paper.chat.canspam` but MC kicks for other spamming reasons beyond just chat.\r\n\r\n...I just want my admins to be able to spam is all. \r\n\r\nRedid because I'm bad at rebasing I think",
    "head_branch": "spampermission",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acd4d9087c4d6d376d36",
    "number": 5409,
    "body": "Also use checkerframework annotations instead of jetbrains ones for Inventory#getContents as jetbrains ones do not allow properly annotating the nullability of an array and it's contents.\r\n",
    "head_branch": "update-annotations-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add checkerframework nullness annotations to accepted list for AnnotationTest (#5409)\n\nAlso use checkerframework annotations instead of jetbrains ones for Inventory#getContents as jetbrains ones do not allow properly annotating the nullability of an array and it's contents."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623acd5d9087c4d6d376d37",
    "number": 5407,
    "body": "Now that every class isn't in `net.minecraft.server` many imports can be removed",
    "head_branch": "more-fqns",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acd6d9087c4d6d376d38",
    "number": 5406,
    "body": "This PR for sure requires a rebase for most of the other PRs",
    "head_branch": "dev/packages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acd7d9087c4d6d376d39",
    "number": 5405,
    "body": "",
    "head_branch": "MiniDigger-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Change some fields to textara (#5405)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acd8d9087c4d6d376d3a",
    "number": 5403,
    "body": "Since Gradle-Kotlin is already a relatively widely used method for e.g. Kotlin, JetPack Compose, server software and other projects, I added the Gradle-Kotlin method to the \"How To\".",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acd9d9087c4d6d376d3b",
    "number": 5401,
    "body": "",
    "head_branch": "report/command",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acdad9087c4d6d376d3c",
    "number": 5400,
    "body": "This allows the calling class lookup to work properly in a plugin context in JDK 9+. It is rare that plugins should be using it rather than the provided `java.util.logging` or SLF4J, but in the event that it is used, this allows it to function properly.\r\n\r\nI also introduced a BOM for log4j, so that future version updates need not affect as many patches.",
    "head_branch": "feature/log4j-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update log4j to 2.11.2 for JDK 9+ compat (#5400)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623acdbd9087c4d6d376d3d",
    "number": 5398,
    "body": "Most hoppers spend most of their time doing nothing, but they still constantly attempt to push/pull items. This patch adds a quick test that hoppers can perform to see if they should attempt to pull/push items - the test being if all of the following are true:\r\n1) The last attempted pull/push failed (excluding by plugins cancelling an event).\r\n2) There are no items/inventory entities to be pulled/pushed from/to.\r\n3) The state of the hopper has not changed since the last attempted pull/push.\r\n4) The state of any inventory the hopper can pull/push from/to has not changed since the last attempted pull/push.\r\n\r\nIf the above four conditions are met then any attempted pull/push must fail and so can be skipped without altering any behaviour.\r\n\r\nIn practice I have found this to reduce the tick time of idle hoppers by 50 to 75 percent. I've also been using a less refined version of this patch on my survival server for just shy of a year with no complaints (many players have complex machines utilising hundreds or thousands of hoppers)\r\n\r\n[Paperclip download](https://drive.google.com/uc?id=1I1oHBE5mJqCqt0NALFQ5t2uZe5Spb7Gt&export=download) (based on build 706)",
    "head_branch": "hoppers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acdcd9087c4d6d376d3e",
    "number": 5396,
    "body": "fixes #5395",
    "head_branch": "chat",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Refactor chat message composition (#5396)\n\nfixes #5395"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623acded9087c4d6d376d3f",
    "number": 5394,
    "body": "Redo of #5148",
    "head_branch": "feature/guardian-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add ElderGuardianAppearanceEvent (#5394)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623acdfd9087c4d6d376d40",
    "number": 5392,
    "body": "Redo of #5132",
    "head_branch": "feature/tame-death-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add TameableDeathMessageEvent (#5392)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ace0d9087c4d6d376d41",
    "number": 5391,
    "body": "Upstream recently broke this when they exposed despawnTimer to API.",
    "head_branch": "fix-wandering-traders",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Only set despawnTimer for Wandering Traders spawned by MobSpawnerTrader (#5391)\n\nUpstream recently broke this when they exposed despawnTimer to API."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ace1d9087c4d6d376d42",
    "number": 5390,
    "body": "",
    "head_branch": "fix-mobgoal-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix VanillaMobGoalTest#testBukkitMap (#5390)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ace2d9087c4d6d376d43",
    "number": 5389,
    "body": "After the recent relocations for classes in nms this script needs to be updated to support all source files in net.minecraft and subfolders.\r\nAs a side effect only the needed files are copied to the src folder instead of copying all and removing the unneeded files.",
    "head_branch": "fix_makemcdevsrc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Fix makemcdevsrc.sh for nms relocations (#5389)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ace3d9087c4d6d376d44",
    "number": 5387,
    "body": "A `.gitignore` will make packages such as\r\n`net.minecraft.world.entity.ai.goal.**target**` be ignored. This causes\r\nthe entire patch to not apply, which is very suspicious. This commit\r\nadds a `--force` parameter to the `git add` command we run, as per `man\r\ngit-add`:\r\n\r\n```\r\n       -f, --force\r\n           Allow adding otherwise ignored files.\r\n```\r\n\r\nThe global configuration file was proven problematic, then fixed by\r\nthis by commit by Prof_Bloodstone#0123 and thekinrar#0001 on Discord\r\n(`#paper-dev`).\r\n\r\nCI-SKIP: This does not apply to the CI, therefore it is not worthy of\r\nits own build.",
    "head_branch": "ignore-git-ignore",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Ignore .gitignore\n\nA `.gitignore' will make packages such as\n`net.minecraft.world.entity.ai.goal.**target**` be ignored. This causes\nthe entire patch to not apply, which is very suspicious. This commit\nadds a `--force' parameter to the `git add' command we run, as per `man\ngit-add':\n\n```\n       -f, --force\n           Allow adding otherwise ignored files.\n```\n\nThe global configuration file was proven problematic, then fixed by\nthis by commit by Prof_Bloodstone#0123 and thekinrar#0001 on Discord\n(`#paper-dev').\n\nCI-SKIP: This does not apply to the CI, therefore it is not worthy of\nits own build."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ace4d9087c4d6d376d45",
    "number": 5384,
    "body": "I managed to move it, yet forgot to actually fix it up...",
    "head_branch": "apply-fixup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "apply fixup\n\nI managed to move it, yet forgot to actually fix it up..."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ace5d9087c4d6d376d46",
    "number": 5383,
    "body": "When the active item is not cleared, the item is still readied for use and will repeatedly trigger the PlayerItemConsumeEvent till their item is switched.\r\nThis patch clears the active item when the event is cancelled",
    "head_branch": "4682",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix PlayerItemConsumeEvent cancelling (fixes #4682) (#5383)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ace6d9087c4d6d376d47",
    "number": 5382,
    "body": "Deprecate ItemStack#setLore(List<String>) and ItemStack#getLore, add Component based alternatives",
    "head_branch": "deprecate-itemstack-lore-methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Deprecate ItemStack#setLore(List<String>) and ItemStack#getLore, add Component based alternatives"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ace7d9087c4d6d376d48",
    "number": 5379,
    "body": "Users with `minecraft.canspam` permission will not be kicked for any spam checks.\r\n\r\n...I just want my admins to be able to spam is all. ",
    "head_branch": "spampermission",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ace8d9087c4d6d376d49",
    "number": 5376,
    "body": "Also some format fixes.\r\n\r\nEdit: Idk why actions failed, it builds fine locally.",
    "head_branch": "buttons-materialtag",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing Javadoc for COLORABLE MaterialTag (#5376)\n\n* Add buttons materialtag and comment for colorable with some format fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ace9d9087c4d6d376d4a",
    "number": 5375,
    "body": "This adds support for both KQueue (native asynchronous IO for Mac and FreeBSD) and io_uring (the new Linux native asynchronous IO system, present in Linux 5.1+).\r\n\r\nI was unable to test KQueue on Mac/FreeBSD, and I was also unable to get io_uring to be used (seemed to always use Epoll, Netty's io_uring only supports x86_64 at the moment), so if anyone could test this on those operating systems and let me know if it uses the correct native asynchronous IO system then that would be greatly appreciated.\r\n\r\nThe main reason I've added this is for performance. Native asynchronous IO generally performs better than NIO does, and I think that it would be useful to have access to more than just Epoll.\r\n\r\nThe `if` statements are ordered by their relative speed (io_uring is fastest I think, then Epoll, then KQueue, then NIO), to ensure that the fastest available native asynchronous IO system is being used where possible.\r\n\r\nIf you have any suggestions, feel free to let me know.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acead9087c4d6d376d4b",
    "number": 5372,
    "body": "This PR blocks master.\r\n\r\nBig thanks to @jpenilla for his work on the initial update.",
    "head_branch": "wip/nms-repackage",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit)\n\nUpstream has released updates that appear to apply and compile correctly.\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\n\nBukkit Changes:\n4e5f46cb Update ASM version\n\nCraftBukkit Changes:\nd54b500d Prepare for Java 16"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acebd9087c4d6d376d4c",
    "number": 5368,
    "body": "The intent behind this API is to provide a way for plugins to access the blocks in a chunk without having to create any allocations. Using of the other APIs when implementing anything that scans chunks will create a ridiculous amount of allocations due to all the arrays being copied.\r\n\r\nAs for the javadocs, please someone help. I have no idea how to describe this to your average developer :(",
    "head_branch": "feat/getchunkdata",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acecd9087c4d6d376d4d",
    "number": 5367,
    "body": "Useful for checking if a player interacted with a button etc.\r\n\r\nAlso adds an un-added comment for the COLORABLE material tag with a removal of a random empty line and line with spaces when no others do.",
    "head_branch": "buttons-materialtag",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acedd9087c4d6d376d4e",
    "number": 5359,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nc589f546 Use upstream plexus-compiler-eclipse",
    "head_branch": "upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit) (#5359)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nc589f546 Use upstream plexus-compiler-eclipse"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aceed9087c4d6d376d4f",
    "number": 5357,
    "body": "I have added a method in order to allow fall damage, even with allowFlight enabled. This is mostly for my own double jump plugin but can be used anywhere.\r\n\r\nI am happy to make changes to this and I have left allow edits by maintainers on. Feel free to ask any questions about this.",
    "head_branch": "CanFly-FallDamage-Patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Player Flying Fall Damage API (#5357)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623acefd9087c4d6d376d50",
    "number": 5356,
    "body": "Resolves #5354 ",
    "head_branch": "docs/configurationsection-contracts",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acf0d9087c4d6d376d51",
    "number": 5353,
    "body": "",
    "head_branch": "feature/better-PlayerAnimationEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PlayerArmSwingEvent (#5353)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623acf1d9087c4d6d376d52",
    "number": 5352,
    "body": "Was part of #5351 ",
    "head_branch": "feature/item-rarity-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Item Rarity API (#5352)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623acf2d9087c4d6d376d53",
    "number": 5350,
    "body": "Previously IntellIJ was giving following warning:\r\n![image](https://user-images.githubusercontent.com/41289688/110977080-004cd100-8362-11eb-9871-f3e1feee0ecb.png)\r\nwhich was caused by annotation placed in wrong place. This PR fixes it.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix annotations so Inventory#getContents returns non-null array with nullable type (#5350)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623acf3d9087c4d6d376d54",
    "number": 5348,
    "body": "Put the boolean field first and the world block state lookup second",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimize short circuit evaluation of sign check (#5348)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acf4d9087c4d6d376d55",
    "number": 5346,
    "body": "Bump netty-all to 4.1.60.Final\r\nBump fastutil to 8.5.2\r\n\r\nI tested without there being any bug for me. ",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acf6d9087c4d6d376d56",
    "number": 5345,
    "body": "Any future work I do will be under GPLv3. This doesn't affect current patches.",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Removal from the MIT list (#5345)\n\nAny future work I do will be under GPLv3. This doesn't affect current patches."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acf7d9087c4d6d376d57",
    "number": 5339,
    "body": "The Vector3f constructor does a bunch of checks to validate the float values, and to ensure they stay within the angle range 0 - 360. When you calculate these angles yourself from a plugin, this guarantee is implicit to the code and all these checks are, are overhead.\r\n\r\nIt showed up in timings, so instead I opted to null-construct the Vector3f using Objenesis and set the fields using reflection. Now objenesis shows up in performance timings.\r\n\r\nThis patch adds a static factory method to construct this vector to improve performance on paper servers.\r\n\r\nThis is a hot item when it comes to updating armorstand pose, which uses these vectors. This is called a lot by animatronic plugins, and plugins that use armorstands for moving 3d item models.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add fast alternative constructor for Vector3f (#5339)\n\nSigned-off-by: Irmo van den Berge <irmo.vandenberge@ziggo.nl>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acf8d9087c4d6d376d58",
    "number": 5338,
    "body": "Its only a little change in README for add badge for documentation and change the recommend version for Compile paper to java 11.",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[ci skip] More badges and things to README.md (#5338)\n\n* Update README.md\r\n\r\n* Update README.md\r\n\r\nRemove license badge and fix letters\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\nMany many time in this PR... now pass to java 16\r\n\r\n* Update README.md\r\n\r\nAdd discord badge\r\n\r\n* Update README.md\r\n\r\nFix format\r\n\r\n* Update README.md\r\n\r\nChange url to patches (because Spigot-API-Patches change)\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\nApply suggest url to patches\r\n\r\nCo-authored-by: Olivia <chew@chew.pw>\r\n\r\n* Update README.md\r\n\r\nUpdate paper version from 1.17 to 1.17.1\r\n\r\n* Update README.md\r\n\r\nA better badge for discord (IRC not have a custom badge or any...)\r\n\r\n* Update README.md\r\n\r\nUpdate style.\r\n\r\nCo-authored-by: Olivia <chew@chew.pw>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acf9d9087c4d6d376d59",
    "number": 5337,
    "body": "Fixes #5330.\r\n\r\nChanges:\r\n - Return to the vanilla behavior: do what the NMS code did again\r\n   - add missing negations to `players.removeIf(...)` 's predicate (I didn't list this bug in the comments of #5330)\r\n   - remove unnecessary negation from a `!Sensor.a(...)` expression\r\n   - actually use the `nearestTargetable` variable (previously it was only used to check whether we can break from a loop)\r\n - Modify when we break from the loop: one less if statement and it makes more sense like this in my opinion",
    "head_branch": "issue-5330",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix patch 'Remove streams from SensorNearest' (fixes #5330)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acfad9087c4d6d376d5a",
    "number": 5334,
    "body": "Fixed item entities merging through walls by raytracing between the two item entities and checking if there is a collision. As stated in the original issue, this should most likely be something behind a configuration option, however I'm not quite sure how to implement that.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add option to fix items merging through blocks (#5334)\n\nFixes #5204"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acfbd9087c4d6d376d5b",
    "number": 5333,
    "body": "…click event",
    "head_branch": "version-adventure",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use Adventure for `/version` command feedback, add copy to clipboard click event (#5333)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623acfcd9087c4d6d376d5c",
    "number": 5329,
    "body": "Fixes #5319 (PigZombieAngerEvent cancellation) by setting the `PathfinderGoalHurtByTarget`'s `goalTarget` to null.\r\n\r\nSetting just `EntityPigZombie`'s `goalTarget` to null (eg. by calling `pacify`) is not enough: while the zombified piglin doesn't make other piglins angry, (and the piglin itself doesn't become angry either) it still attacks the player who attacked it. A piglin that attacks the player but isn't angry seems weird, so I decided not to do that. I also believe that canceling the event should mean that the piglin won't attack the player, that's another reason not to go down this route.\r\n\r\nSo instead of just clearing `EntityPigZombie`'s `goalTarget`, I also cleared `PathfinderGoalHurtByTarget`'s `goalTarget`. The method I added an obfhelper sets both fields to null internally. This pathfinder goal is the culprit for the weird behavior explained in the previous paragraph: even though `EntityPigZombie`'s `goalTarget` was set to null, the pathfinder goal kept setting it to the value it had internally cached. So the solution is to clear that internal cache.",
    "head_branch": "issue-5319",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix PigZombieAngerEvent cancellation (fixes #5319) (v2) (#5329)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acfdd9087c4d6d376d5d",
    "number": 5325,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nd264e972 #591: Add option for a consumer before spawning an item\r\n1c537fce #590: Add spawn and transform reasons for piglin zombification.\r\n\r\nCraftBukkit Changes:\r\nee5006d1 #810: Add option for a consumer before spawning an item\r\nf6a39d3c #809: Add spawn and transform reasons for piglin zombification.\r\n0c24068a Organise imports\r\n\r\nSpigot Changes:\r\nbff52619 Organise imports",
    "head_branch": "upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#5325)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nd264e972 #591: Add option for a consumer before spawning an item\r\n1c537fce #590: Add spawn and transform reasons for piglin zombification.\r\n\r\nCraftBukkit Changes:\r\nee5006d1 #810: Add option for a consumer before spawning an item\r\nf6a39d3c #809: Add spawn and transform reasons for piglin zombification.\r\n0c24068a Organise imports\r\n\r\nSpigot Changes:\r\nbff52619 Organise imports"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623acfed9087c4d6d376d5e",
    "number": 5321,
    "body": "Fixes #5307.",
    "head_branch": "issue-5307",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Respect teams in legacy chat name if configured (#5321)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623acffd9087c4d6d376d5f",
    "number": 5320,
    "body": "Adds an event that gets called when the initial target search happens for an entity.\r\n\r\nThis is useful to override the result even when the entity was unable to find or switch targets.\r\n\r\nFor example, with this event it's possible to reliably make zombies target cows, whereas with EntityTargetEvent it's only possible to make that happen when zomies un-target or target a different entity.",
    "head_branch": "feature/entity-search-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad00d9087c4d6d376d60",
    "number": 5315,
    "body": "",
    "head_branch": "always-check-path-for-jdk",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Always check PATH for JDK (#5315)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad01d9087c4d6d376d61",
    "number": 5308,
    "body": "This PR fixes the entity tracking range being capped by the ticking view distance and uses the no tick view distance instead.\r\n\r\nBefore:\r\n\r\nhttps://user-images.githubusercontent.com/69646789/110058184-e989f700-7d2f-11eb-9251-1f697e3072f0.mp4\r\n\r\nAfter: \r\nhttps://user-images.githubusercontent.com/69646789/110058157-dd059e80-7d2f-11eb-9c70-4d37aa1c8ac1.mp4\r\n\r\nTested using a view distance of 3, a no-tick view distance of 7, and an entity tracking range of 128.\r\n",
    "head_branch": "no-tick-tracker",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad02d9087c4d6d376d62",
    "number": 5306,
    "body": "fixes #5286 \r\n\r\n[SPIGOT-6330](https://hub.spigotmc.org/jira/browse/SPIGOT-6330)",
    "head_branch": "fix/difficulty-per-world",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix per-world difficulty command (#5306)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad03d9087c4d6d376d63",
    "number": 5299,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n9d0ad318 Fix javadoc errors in previous commits\r\n9501daa2 #578: Add methods to modify the rate of regeneration and starvation\r\n197d8f3d #577: Add EntityExhaustionEvent\r\n\r\nCraftBukkit Changes:\r\na021e334 #795: Add methods to modify the rate of regeneration and starvation\r\n509e523c #792: Add EntityExhaustionEvent\r\n\r\nSpigot Changes:\r\ndb99f821 Rebuild patches",
    "head_branch": "upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#5299)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n9d0ad318 Fix javadoc errors in previous commits\r\n9501daa2 #578: Add methods to modify the rate of regeneration and starvation\r\n197d8f3d #577: Add EntityExhaustionEvent\r\n\r\nCraftBukkit Changes:\r\na021e334 #795: Add methods to modify the rate of regeneration and starvation\r\n509e523c #792: Add EntityExhaustionEvent\r\n\r\nSpigot Changes:\r\ndb99f821 Rebuild patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad04d9087c4d6d376d64",
    "number": 5298,
    "body": "",
    "head_branch": "issue/5290",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix nullability of playerlist header/footer, closes #5290"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad05d9087c4d6d376d65",
    "number": 5295,
    "body": "The behavioural nearby sensors are validated every tick on the entities\r\nthat registered the respective sensors and are therefore a good subject\r\nto performance improvements.\r\n\r\nMore specifically this commit replaces the Stream#filter usage with\r\nArrayList#removeIf as the removeIf method on an array list is heavily\r\noptimized towards a single internal array re-allocation without any\r\nfurther overhead on the removeIf call.\r\n\r\nThe only negative of this change is the rather agressive diff these\r\npatches introduce as the methods are basically being reimplemented\r\ncompared to the previous stream-based implementation.",
    "head_branch": "performance/sensor-nearest-improvements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove streams from SensorNearest\n\nThe behavioural nearby sensors are validated every tick on the entities\nthat registered the respective sensors and are therefore a good subject\nto performance improvements.\n\nMore specifically this commit replaces the Stream#filter usage with\nArrayList#removeIf as the removeIf method on an array list is heavily\noptimized towards a single internal array re-allocation without any\nfurther overhead on the removeIf call.\n\nThe only negative of this change is the rather agressive diff these\npatches introduce as the methods are basically being reimplemented\ncompared to the previous stream-based implementation.\n\nSee: https://nipafx.dev/java-stream-performance/\nNote: Updated LICENCE.md to release this commit under MIT"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad06d9087c4d6d376d66",
    "number": 5294,
    "body": "",
    "head_branch": "block-material-translation-key",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Material#getTranslationKey for Block Materials (#5294)\n\n* Fix Material#getTranslationKey for Block Materials\r\n\r\n* Cache the result of Material#isBlock"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad07d9087c4d6d376d67",
    "number": 5289,
    "body": "",
    "head_branch": "adventure/chat-events",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "New chat events for better Adventure support (#5289)\n\nBump Adventure to 4.6.0\r\n\r\nfixes #5216\r\nfixes #5261\r\nfixes #5287"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad08d9087c4d6d376d68",
    "number": 5285,
    "body": "Reasoning: by adding JavaDoc links users are able to find the Paper additions.\r\n\r\nLet's say someone wants to find a tag for pickaxes. The first place to look would be the `Tag` class. What if the user does not know about these extra classes added by Paper? The user would have to give up the search. But this modification adds links to the `Tag` class, which I assume developers are already familiar with. So developers are now able to discover new tags and, hopefully, the ones they need, through these links.",
    "head_branch": "paper-tag-links",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Add JavaDoc links to Tag class pointing to custom Paper tags (#5285)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad09d9087c4d6d376d69",
    "number": 5282,
    "body": "These are the QoL changes Paper deserves\r\nI never know if it's /paper entity list * world or /paper entity list world *, this elegant solution fixes it!",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Print command usage for /paper entity list at more places (#5282)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad0ad9087c4d6d376d6a",
    "number": 5278,
    "body": "We have been given alpha access to test the new form-based templates.\r\n\r\nEssentially, this gives us more access in issue creation. We can force users to fill out specific things, agree to things, and more.\r\n\r\nThis also mandates the \"No Blank Issues,\" gone are the days of \"I never got a template,\" well, now you did!\r\n\r\nThese are the templates we had plus a few (working) key changes:\r\n- Agreement checkboxes\r\n- Required most fields\r\n- Dropdown on the feature request to select what type of feature request it is\r\n\r\nThis does not implement the labels suggested in #4620, and I suppose it's still up for debate but is arguably out of the scope of this PR.\r\n\r\nSadly, there is no way to test, but I've heard good success from the people who've implemented it where it worked first try. Let's hope for that here.\r\n\r\nAll templates were tossed into a YAML parser and came back with no errors. Also great news considering how icky YAML can get.",
    "head_branch": "feature/templates-v2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] 🚀 Upgrade to new form-based templates (#5278)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad0cd9087c4d6d376d6b",
    "number": 5276,
    "body": "Took me all day to understand the EnderDragonBattle system but here we are.\r\n\r\nThis patch adds two new events around the EnderDragon battle.\r\n\r\nThe first event (**PreDragonRespawnEvent**) fires when a player places down the 4 required Ender Crystals around the gateway frame to start the cycle/animation to respawn the Ender Dragon, exposing the DragonBattle and the 4 placed Ender Crystals, cancelling this event simply stops the process of starting the spawn cycle.\r\n\r\nThe second event (**DragonRespawnEvent**) fires after the whole animation cycle have completed and the server is about to add the Ender Dragon into the world and mark the dragon as not killed (To stop more respawns and remove the exit end portals inside the gateway) exposing the DragonBattle, cancelling this event will stop the Ender Dragon being added and will reset the spawn cycle back to idle while also adding the end portals back to the exit frame as if the whole spawn cycle never happened because you'll end up stuck in the end forever otherwise.\r\n\r\n~~I wasn't too sure what to do about the imports if I should avoid importing and using full names in the code and wasn't too sure if I was meant to merge the other Paper patch comment with mine.~~ I'm open and excited for any feedback.\r\n",
    "head_branch": "dragon-events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad0dd9087c4d6d376d6c",
    "number": 5272,
    "body": "When merging 4e958e229f9f448a10dbc610bab460dbf222902e, nobody caught the\r\nfact we removed the component serialisation of legacy BungeeCord Chat\r\nAPI components in the PacketPlayOutTitle class.\r\n\r\nTest plugin code:\r\n\r\n```kotlin\r\nclass LegacyMessageCommand : BaseCommand() {\r\n    override fun register(manager: PaperCommandManager<CommandSender>) {\r\n        manager.command(manager.commandBuilder(\"legacymsg\")\r\n            .sender<Player>()\r\n            .handler {\r\n                val component = ComponentBuilder(\"Test\")\r\n                    .color(ChatColor.DARK_RED)\r\n                    .bold(true)\r\n                    .append(\" message\")\r\n                    .bold(false)\r\n                    .color(ChatColor.of(\"#f8a8a8\"))\r\n                    .event(\r\n                        HoverEvent(\r\n                            HoverEvent.Action.SHOW_TEXT,\r\n                            Text(\r\n                                ComponentBuilder(\"Test hover\")\r\n                                    .color(ChatColor.AQUA)\r\n                                    .underlined(true)\r\n                                    .create()\r\n                            )\r\n                        )\r\n                    )\r\n                    .event(\r\n                        ClickEvent(\r\n                            ClickEvent.Action.SUGGEST_COMMAND,\r\n                            \"/legacymsg\"\r\n                        )\r\n                    )\r\n                    .create()\r\n                it.sender.sendMessage(*component)\r\n                it.sender.sendActionBar(*component)\r\n                it.sender.sendTitle(\r\n                    Title.builder()\r\n                        .title(component)\r\n                        .subtitle(component)\r\n                        .fadeIn(40)\r\n                        .stay(60)\r\n                        .fadeOut(40)\r\n                        .build()\r\n                )\r\n            })\r\n    }\r\n}\r\n```\r\n\r\nFixes GH-5271.",
    "head_branch": "issue-5271",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix: legacy component serialisation was wiped out\n\nWhen merging 4e958e229f9f448a10dbc610bab460dbf222902e, nobody caught the\nfact we removed the component serialisation of legacy BungeeCord Chat\nAPI components in the PacketPlayOutTitle class.\n\nTest plugin code:\n\n```kotlin\nclass LegacyMessageCommand : BaseCommand() {\n    override fun register(manager: PaperCommandManager<CommandSender>) {\n        manager.command(manager.commandBuilder(\"legacymsg\")\n            .sender<Player>()\n            .handler {\n                val component = ComponentBuilder(\"Test\")\n                    .color(ChatColor.DARK_RED)\n                    .bold(true)\n                    .append(\" message\")\n                    .bold(false)\n                    .color(ChatColor.of(\"#f8a8a8\"))\n                    .event(\n                        HoverEvent(\n                            HoverEvent.Action.SHOW_TEXT,\n                            Text(\n                                ComponentBuilder(\"Test hover\")\n                                    .color(ChatColor.AQUA)\n                                    .underlined(true)\n                                    .create()\n                            )\n                        )\n                    )\n                    .event(\n                        ClickEvent(\n                            ClickEvent.Action.SUGGEST_COMMAND,\n                            \"/legacymsg\"\n                        )\n                    )\n                    .create()\n                it.sender.sendMessage(*component)\n                it.sender.sendActionBar(*component)\n                it.sender.sendTitle(\n                    Title.builder()\n                        .title(component)\n                        .subtitle(component)\n                        .fadeIn(40)\n                        .stay(60)\n                        .fadeOut(40)\n                        .build()\n                )\n            })\n    }\n}\n```\n\nFixes GH-5271."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad0ed9087c4d6d376d6d",
    "number": 5269,
    "body": "When the view distance is set the server will schedule chunk loads for chunks that were previously outside of the view distance. However these chunk load tasks will use the previous view distance for range checks if performed in the same tick that the view distance was changed, meaning all the tasks are instantly discarded. This PR updates the view distance before scheduling the chunk load tasks so the range checks use the correct view distance.\r\n\r\nFixes #5203",
    "head_branch": "chunk-loading",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update the view distance before scheduling chunk loads (#5269)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad0fd9087c4d6d376d6e",
    "number": 5268,
    "body": "Wasn't 100% on making this one cancellable.",
    "head_branch": "shieldbreakevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad10d9087c4d6d376d6f",
    "number": 5267,
    "body": "It is a common pattern to fill a team up with several entries. Unfortunately, each single entry addition sends a ScoreboardTeam packet out which can be unnecessarily chatty. This patch just adds the option to set a collection of entries on a scoreboard team which can get bundled into a single packet. \r\n\r\nLikely not a significant optimization, but hey, every little bit helps.",
    "head_branch": "scoreboardteamupdate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad11d9087c4d6d376d70",
    "number": 5266,
    "body": "This adds the ability to hide/show players by UUID and optionally not immediately. In my use-case, we will sometimes have a cache of players to hide from other players that we send to a player on logon.\r\n\r\nDoing this lazily and by UUID allows us to pre-hide players (or Player NPCs sometimes), so that they don't join, see a player for a tick, then hide later.",
    "head_branch": "extendshowhideplayers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad12d9087c4d6d376d71",
    "number": 5265,
    "body": "A lot of plugins seem to use reflection to determine this, so this could be a bit of a starter-patch as future PR'ers could also exposed tracked entities as well.\r\n\r\nThis also seems overly simple, so I feel like I may be missing something; but at the very least it works for me so far.",
    "head_branch": "gettrackedplayers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expose Tracked Players\n\nA lot of plugins seem to use reflection to determine this, so this could be a bit of a starter-patch as future PR'ers could also exposed tracked entities as well."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad13d9087c4d6d376d72",
    "number": 5264,
    "body": "Simple patch, useful if you wanna clear out a bunch of syncload info to test specific cases.",
    "head_branch": "clearsyncloadinfo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Clear SyncLoadInfo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad14d9087c4d6d376d73",
    "number": 5260,
    "body": "This restores the behaviour to vanilla by default, but may be changed if\r\none wants to.\r\n\r\nFixes #5259.",
    "head_branch": "issue-5259",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add config option for displayname in quit message (#5260)\n\nThis restores the behaviour to vanilla by default, but may be changed if\r\none wants to.\r\n\r\nFixes #5259."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad15d9087c4d6d376d74",
    "number": 5252,
    "body": "Should be the last of the problems, I ripped out all shared code from TCA and just rewrote it myself. I hate Log4J btw.\r\n\r\nTested against examples in issue + a shit ton of other combos I made up.\r\n\r\nFixes #5248",
    "head_branch": "fix/pepeAgony",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix further issues with rgb text pattern matching"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad16d9087c4d6d376d75",
    "number": 5247,
    "body": "nothing to see",
    "head_branch": "ver/1.8.8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad17d9087c4d6d376d76",
    "number": 5244,
    "body": "Fixes #3730 \r\n",
    "head_branch": "improve-precreaturespawnevent-documentation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Improve documentation of PreCreatureSpawnEvent (#5244)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad18d9087c4d6d376d77",
    "number": 5242,
    "body": "Closes #5143\r\nReplaces #5144 \r\nI tried to see if I could manage to fix that issue and add that event. After finishing, I noticed that there already way a PR for this, but as it was made by Ivan and he is banned from the Org, I figured to open a PR anyway.\r\nI haven't implemented cancellable, because I figured this would cause a lot of issues in the long run, and I wasn't sure how to properly address that.\r\nOther than that there is another extinguish called in EntityHuman line 1211, but I decided to not call the event there, since the entity was never technically on fire",
    "head_branch": "add-entityextinguishevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad19d9087c4d6d376d78",
    "number": 5241,
    "body": "Fixes compiling erros from 01f9b65f9073506b9865c33f626dec1ab2d31868",
    "head_branch": "sound-key-nullable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add @NotNull to Key in org.bukkit.sound (#5241)\n\nFix compiling"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad1ad9087c4d6d376d79",
    "number": 5239,
    "body": " so they don't appear by their fully qualified name and so that one can jump directly into adventure javadocs, where necessary.\r\n\r\nThis is as discussed with @MiniDigger on Discord.",
    "head_branch": "add-adventure-javadoc-link",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad1bd9087c4d6d376d7a",
    "number": 5237,
    "body": "# Summary\r\n\r\nThis PR adds the method `PlayerHandshakeEvent#getOriginalSocketAddressHostname()` which returns the IP literal of the player trying to connect.\r\n\r\n# Motivation\r\n\r\nCurrently, we have no native and easy way to get the IP of the connecting player. There are several use cases for this feature related to IP-based blocking in the earliest state possible.\r\n We're fully aware that this is definitely not ideal in comparison to kernel-level filtering (e.g. `iptables`) but we have to accomodate for those 1) not experienced in this kind of configuration and 2) not able to add firewall rules (e.g. shared hosting).\r\n\r\nA few plugins which could / would probably benefit by this are:\r\n1. Anti-Bot plugins like BotSentry which could drop clients if their IP is on an internal blocklist\r\n2. DDoS mitigation solutions like TCPShield which would be able to run natively on Paper (without ProtocolLib)\r\n\r\nAdditionally to the possibility to run without extra plugins (ProtocolLib, etc.), this provides TCPShield's plugin the comfort to not use Reflection at all. As we're all aware, the usage of Reflection has several drawbacks, including but not limited to the fragility of the code in regard to future changes. \r\nAdding further to that, Java 16 will, by default, deny illegal reflective accesses which are currently needed to access the `final` modifier fields to modify the IP without the `PlayerHandshakeEvent`.\r\n\r\n# Implementation details\r\n\r\nThe implementation of this feature is quite straight-forward. We add a new field for this purpose and deprecate the former constructor `PlayerHandshakeEvent(String, boolean)` in favor of `PlayerHandshakeEvent(String, String, boolean)`. The default value for this field is `\"127.0.0.1\"` which would be a correct IP and is more or less reasonable as there are no occurrences where plugins would manually call this event.\r\n\r\n# Alternatives\r\n\r\nThe alternatives which would come to my mind would be\r\n1.  to keep on using ProtocolLib for this kind of check which adds unnecessary dependencies and would still require the usage of ugly Reflection\r\n2. to use a netty channel adapter which would require NMS or Reflection",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implements PlayerHandshakeEvent#getOriginalSocketAddressHostname and deprecates PlayerHandshakeEvent(String, boolean) in favour of PlayerHandshakeEvent(String, String, boolean)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad1cd9087c4d6d376d7b",
    "number": 5235,
    "body": "",
    "head_branch": "jd-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix a couple of typos in the javadoc for Player (#5235)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad1dd9087c4d6d376d7c",
    "number": 5233,
    "body": "…Server with PaperAdventure.LEGACY_SECTION_UXRC\r\n\r\nWhen reviewing the adventure changes, I noticed that `LegacyComponentSerializer.legacySection()` was used pretty much all over for legacy text conversion. This is completely fine when deserializing `Component`s from legacy text, however when this serializer is used to serialize a `Component` to a legacy text string it will downsample colors. Most of the methods where this would matter are now deprecated, however it does differ from upstream where the legacy string methods return rgb colors using the unusual bungee legacy format. Again most of these methods are deprecated, but behaviour where something like\r\n```player.setPlayerListHeader(player.getPlayerListHeader());``` causes the colors to be downsampled is probably not desired.\r\n\r\nAlthough this only matters for usages where we are serializing `Component`s to legacy text, I have replaced all usages for consistency.\r\n\r\nUsages in Paper-API still need to be addressed\r\n\r\ntest code:\r\n```java\r\nPlayer player = ...;\r\nplayer.sendPlayerListHeader(MiniMessage.get().parse(\"<rainbow>Test123|||||||||||||||||||||||||||||||||||\"));\r\nplayer.sendMessage(player.playerListHeader()); // Component\r\nplayer.sendMessage(player.getPlayerListHeader()); // String\r\n```\r\n\r\nresult:\r\n- without this pr\r\n![image](https://i.imgur.com/tw6U4E9.png)\r\n- with this pr\r\n![image](https://i.imgur.com/5FGfpBG.png)",
    "head_branch": "legacy-section",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Replace usages of LegacyComponentSerializer.legacySection() in Paper-Server with PaperAdventure.LEGACY_SECTION_UXRC (#5233)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad1ed9087c4d6d376d7d",
    "number": 5231,
    "body": "PlayerDeathEvent#getDeathMessage should provide translation for legacy reasons\r\nShould resolve #5227\r\n\r\nIn investigating said issue, I have observed that there does not seem to be an API method of translating these messages. Usefulness is for when a plugin desires to retrieve the vanilla message so as to modify as they please. Adventure components keep these messages untranslated with no way to get the end string version because, as I understand it, the clients locale can translate these unmodified death messages.\r\n\r\nOverall, I feel that this is an incomplete solution in the context of that missing API, but it is the best I can manage with the simple goal of returning to upstream/legacy API behavior.",
    "head_branch": "5227",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PlayerDeathEvent#getDeathMessage should provide translation for legacy reasons #5227"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad1fd9087c4d6d376d7e",
    "number": 5230,
    "body": "…or sending messages to console command sender\r\n\r\nThis fixes messages to console having colors stripped, and also fixes colors being downsampled in PlayerConnection#disconnect(String)",
    "head_branch": "console-color",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Enable Hex colors on PaperAdventure.LEGACY_SECTION_UXRC, and use it for sending messages to console command sender (#5230)\n\nThis fixes messages to console having colors stripped, and also fixes colors being downsampled in PlayerConnection#disconnect(String)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad20d9087c4d6d376d7f",
    "number": 5228,
    "body": "also switches to adventure's `TextColor` since `java.awt`'s `Color` sometimes isn't always available/breaks on some OS's",
    "head_branch": "fix/rgb",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Log4J converter not parsing hex without named colors (#5228)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad21d9087c4d6d376d80",
    "number": 5211,
    "body": "Adventure PR accidentally reverted some upstream updates",
    "head_branch": "upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Upstream Update (#5211)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad22d9087c4d6d376d81",
    "number": 5206,
    "body": "This ports the Airplane patch (https://github.com/TECHNOVE/Airplane/blob/master/patches/server/0019-Skip-POI-finding-if-stuck-in-vehicle.patch) keeping the author with an added decompile fix.\r\n\r\nA simple patch to maintain with high benefit.",
    "head_branch": "skip-POI-in-vehicles",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad23d9087c4d6d376d82",
    "number": 5205,
    "body": "This pull request adds its own Log4J pattern converter (based off of TCA's) to make hex colors codes show correctly in the console. \r\n\r\nThis is better than all previous attempts (#4220 and #4221) due the following reasons;\r\n* Doesn't pump ANSI where it is unexpected and thus doesn't break plugins which hook into Log4J.\r\n* Since it creates a new pattern converter, this won't break people's existing Log4J setups.\r\n\r\nBefore:\r\n![image](https://user-images.githubusercontent.com/10731363/108604745-d2d1c080-737d-11eb-97e2-0d00bd4b7cb5.png)\r\n\r\nAfter:\r\n![image](https://user-images.githubusercontent.com/10731363/108604751-d7967480-737d-11eb-8ec4-bafbf3f83bb3.png)\r\n\r\nPS; A new patch was chosen rather than appending the previous patch so incase TCA changes their position of not handling RGB in the future, it will be easy for us to revert.",
    "head_branch": "fix/hex-TCA",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add support for hex color codes in console"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad24d9087c4d6d376d83",
    "number": 5201,
    "body": "This makes it so that the PreCreatureSpawnEvent gets called for more spawn reasons, especially Iron Golems from afraid Villagers and Zombified Piglin portal spawns as well as any other cases where the EntityTypes#spawnCreature method is used. (spawn eggs, wandering trader/llama, fish buckets, infested stones, dispensers)",
    "head_branch": "pr/more-pre-spawn-event-calls",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Call PreCreatureSpawnEvent for more spawn reasons (#5201)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad25d9087c4d6d376d84",
    "number": 5200,
    "body": "Adds dumps when the server is in debug mode for one or two maybe more\r\nrandom situations where having dumps for the odd thing here and there\r\nwould be useful for a handful of people but too spammy/useless for\r\nmost\r\n\r\n\"mek stuff pretty\" is not my forte, and not sure if other areas are wanted for this type of thing, just two specific ones which I've used personally in the past week and a common \"nice to have\" for paper-help; if others are wanted, or prettiness applied, somebody feel free too *face keyboards and uses it as a pillow*",
    "head_branch": "misc/debug-dumps",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Misc thread dumps (#5200)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad26d9087c4d6d376d85",
    "number": 5197,
    "body": "Just out of view of the patch is the line\r\n`b0 = 2;`\r\nwhich sets the result quantity to two without checking whether that is possible. This explains why my fix only specifically checks for max stack sizes of 1.\r\n\r\nOverstacked items are specifically not supported by the server and can result in item loss when the items are not handled carefully. Specifically there exists an 'issue' with shulker chests that they will destack overstacked items and simply delete items which do not fit.",
    "head_branch": "1596",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Prevent grindstones from overstacking items"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad27d9087c4d6d376d86",
    "number": 5191,
    "body": "Continuation from https://github.com/PaperMC/Paper/pull/4702#issuecomment-778854350",
    "head_branch": "damage-with-any-cause",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad28d9087c4d6d376d87",
    "number": 5185,
    "body": "\r\nhttps://user-images.githubusercontent.com/31476952/107673557-2d488e00-6ca7-11eb-912c-10f1874c35b1.mp4\r\n\r\n```java\r\n@EventHandler\r\npublic void onFurnaceSmeltStart(FurnaceSmeltStartEvent e) {\r\n    Material sourceMaterial = e.getSource().getType();\r\n\r\n    if (sourceMaterial == Material.CHICKEN) {\r\n        e.setCancelled(true);\r\n    }\r\n    else if (sourceMaterial == Material.GOLD_ORE) {\r\n        e.setCookTimeTotal(20 * 3);\r\n    }\r\n}\r\n```",
    "head_branch": "smelting",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad29d9087c4d6d376d88",
    "number": 5183,
    "body": "This fixes a confusing issue (#5181) where doing `merchant.setRecipes(merchant.getRecipes());` would clear the merchants recipes, as the implementation of getRecipes is guavas Lists.transform wrapped in Collections.unmodifiableList, and the implementation of setRecipes clears the backing list before adding the elements of the provided list to the backing list.\r\n\r\nAlso, the javadoc for the getRecipes method says 'an immutable list of trades', so this patch makes the javadoc correct.",
    "head_branch": "merchant-getrecipes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merchant#getRecipes should return an immutable list (#5183)\n\nThis fixes a confusing issue where doing 'merchant.setRecipes(merchant.getRecipes());' would clear the merchants recipes, as the implementation of getRecipes is guavas Lists.transform wrapped in Collections.unmodifiableList, and the implementation of setRecipes clears the backing list before adding the elements of the provided list to the backing list.\r\nThe javadoc for the getRecipes method says 'an immutable list of trades', so this patch makes the javadoc correct."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad2ad9087c4d6d376d89",
    "number": 5180,
    "body": "This PR fixes the `NotePlayEvent` to allow the `setInstrument` and `setNote` methods to work again, thus removing the deprecation from these events. This works for all methods of activating noteblocks, both player interaction and redstone activation.\r\n\r\nI've also added a new method to the `Instrument` class, `getName`. This method returns the name of the instrument as they differ from the enum values in the API and is used to get the specific note to play in the `CraftNoteBlock` class. This feels a bit messy, and I think that the `getName` bit should either be deprecated or swapped with the classic static map instantiation thing to also add a `getByName` method.\r\n\r\nBut regardless, this is a good place to start so let me know if you want any changes made!\r\n\r\nHere's a plugin to test it btw, it just locks all notes played to lower C flute:\r\n- [noteblock-changes-test-1.0-SNAPSHOT.jar](https://www.mediafire.com/file/glu1tdegbqz4vs2/noteblock-changes-test-1.0-SNAPSHOT.jar/file)\r\n- [Source](https://gist.github.com/kezz/39547324d631638f692eff781cc7bcac)",
    "head_branch": "fix-note-play-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix NotePlayEvent (#5180)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad2bd9087c4d6d376d8a",
    "number": 5169,
    "body": "This was a big boy.",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit/Spigot) (#5169)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad2cd9087c4d6d376d8b",
    "number": 5168,
    "body": "Changed the `CraftSlime` class instead of the `EntitySlime` class to minimize the problems this patch could cause. Tested and everything seems to work :)\r\n\r\nAgain, just for you GitHub: fixes #5137.",
    "head_branch": "issue-5137",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix calling setSize on dead slimes causing invincibility (fixes #5137) (#5168)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad2dd9087c4d6d376d8c",
    "number": 5167,
    "body": "",
    "head_branch": "1.16.5-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad2ed9087c4d6d376d8d",
    "number": 5166,
    "body": "\r\nComparison video:\r\n\r\nhttps://user-images.githubusercontent.com/31476952/107112803-6cbc4800-686b-11eb-8e2f-e0fd51b7c724.mp4\r\n\r\n```java\r\n@EventHandler\r\npublic void drop(PlayerDropItemEvent event) {\r\n    System.out.println(\"PlayerDropItemEvent is fired\");\r\n    event.setCancelled(true);\r\n}\r\n```\r\n\r\nFixes #5036 ",
    "head_branch": "issue-5036",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Drop carried item when player has disconnected (#5036) (#5166)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad2fd9087c4d6d376d8e",
    "number": 5158,
    "body": "They will throw `NullPointerException` when the type of `ItemStack` is `Material.AIR`.",
    "head_branch": "fix-npe-for-air-in-item-stack",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix NPE for AIR in meta operations in ItemStack"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad30d9087c4d6d376d8f",
    "number": 5156,
    "body": "Other entities that had a `PathfinderGoalUniversalAngerReset` also had a `PathfinderGoalNearestAttackableTarget`, so I added it. I did a lot of testing, it seems to work. It's definitely better than not being attacked at all, hopefully it doesn't break something else.\r\n\r\nI changed the priority on the selectors. That's all I changed about them. The extra diff is a shame, let me know if there's a better way. :/\r\n\r\nFixes #5155. Oh GitHub, why isn't it enough if I have it in the title?",
    "head_branch": "issue-5155",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad31d9087c4d6d376d90",
    "number": 5152,
    "body": "I hope it would be helpful, the event is fired when the bottle is filled:\r\n- via a water source\r\n- via a cauldron\r\n- from a beehive\r\n- with dragon's breath.\r\n\r\nDoing the same with PlayerInteractEvent in most cases, for example, as replacing with other ItemStack, is impossible or really hard.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad33d9087c4d6d376d91",
    "number": 5150,
    "body": "This PR implements `Metadatable` in the base `Event` class. I've been using a patch like this for a while as a lightweight alternative to making custom events. It's also helpful to pass data around within or between plugins on specific event calls, something you can't do easily with the API at the moment.\r\n\r\nI'm not sure if this is something that Paper would be interested in, but I'm mainly using this as an exercise for making PRs to Paper, just using some code I had on hand so I won't feel bad if you just reject this outright. I had a few bits of code in the og Bukkit/CraftBukkit repos but this is my first time contributing to Paper - so I hope I've done it all correctly and I'd appreciate any feedback just on the PR process if I've made any mistakes, etc!",
    "head_branch": "event-metadatable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad34d9087c4d6d376d92",
    "number": 5149,
    "body": "This only affects bats at the moment.\r\n\r\nYou can't see it in the patch, but the value of `Entity#isIgnoreBlockTrigger()`  is checked after the events have been fired.\r\n\r\nBasically, this is how stuff worked before and after Bukkit events were added to the method:\r\n```\r\nfor each entity:\r\n//Added by Bukkit: fire PlayerInteractEvent or EntityInteractEvent\r\n//Added by Bukkit: if event not cancelled\r\nif not isIgnoreBlockTrigger\r\nreturn full power\r\n```\r\n\r\nFixes #4962 ",
    "head_branch": "issue-4962",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "stop firing pressure plate EntityInteractEvent for ignored entities (fixes #4962)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad34d9087c4d6d376d93",
    "number": 5148,
    "body": "This adds an ElderGuardianAppearanceEvent which allows you to cancel the effects of an elder guardian appearance and get the players that were affected.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad35d9087c4d6d376d94",
    "number": 5144,
    "body": "Closes #5143 \r\n\r\n~~There are some calls which would return a reason of UNKNOWN because I was not sure what reason it was. \r\nAnd also I'm unsure for some of the reasons' names. Please check these 2~~",
    "head_branch": "new/entity-extinguish-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad36d9087c4d6d376d95",
    "number": 5142,
    "body": "In my opinion stale bot is marking too many issues as stale as time to go through all of them and mark them as accepted seems to not be there. While I get that you want to keep stale bot to be easier to filter out actual stale issues I don't agree with creating more work for both devs and reporters by having the stale bot (wrongly) mark issues that have already be touched by devs/triage members.\r\n\r\nThe easiest (and cleanest) solution in my eyes is to simply exempt more of the labels that have been commonly used  to mark issues and which (imo) clearly mean that the issue will stay open indefinitely.\r\n\r\nEven if this doesn't get accepted as is, maybe it could serve as a discussion place about the stale bot behaviour that is less spamy than Discord and actual focused on all developers/contributors.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] [Meta] Exempt more labels from being marked as stale (#5142)\n\n* Exempt more labels from being marked as stale\n\n* Order alphabetically and add suggestions\n\nAlso don't go deeper I guess 👀"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad37d9087c4d6d376d96",
    "number": 5139,
    "body": "Currently, the health is updated in the player tick, THEN entity\r\ntrackers are ran and the attributes of a player are updated. This can\r\nresult in a health desync with the client, as the client will cap their\r\nhealth at the known maximum health (e.g. we send 40.0F HP, but they think\r\nthe maximum is still 20.0F HP).\r\n\r\nThis can be alleviated by broadcasting the required attributes off the\r\nbat in the player tick, if applicable.\r\n\r\nAn alternative implementation would be to set the lastHealthSent to\r\n-1.0E8F, and let the player tick method send the health again the next\r\ntick.\r\n\r\nFixes SPIGOT-6250.\r\nFixes #4793.\r\n\r\n---\r\n\r\nIn this implementation, however, I am rather unsure if I should clear\r\nthe attributes fetched before the tracker handles it. It may result in\r\nan extra packet being sent unnecessarily, which could potentially get\r\nrather large as it contains all _modified_ (\"tracked\") attributes for\r\nthe specific entity (player in this case).",
    "head_branch": "update-attributes-before-health",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad39d9087c4d6d376d97",
    "number": 5136,
    "body": "",
    "head_branch": "fix-javadoc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix javadoc build"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad3ad9087c4d6d376d98",
    "number": 5132,
    "body": "Adds an event to be able to cancel/modify the message sent when a tamed animal is killed. Requires #4842 ",
    "head_branch": "feature/adventure",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad3bd9087c4d6d376d99",
    "number": 5130,
    "body": "",
    "head_branch": "unleash-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add dropLeash variable to EntityUnleashEvent (#5130)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad3cd9087c4d6d376d9a",
    "number": 5128,
    "body": "This is useful in eg. CompletableFuture.\r\n\r\nhttps://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#thenAcceptAsync-java.util.function.Consumer-java.util.concurrent.Executor-",
    "head_branch": "main-thread-executor-in-scheduler",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add getMainThreadExecutor to BukkitScheduler"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad3dd9087c4d6d376d9b",
    "number": 5127,
    "body": "This changes applies the `treasure-maps-return-already-discovered` config option to treasure maps generated by loot tables too (e.g. in hidden treasure chests).\r\n\r\nIf the option is disabled (which is default) it will allow both to work depending on the loot table setup, if the option is enabled then it will force it to also take discovered chunks into consideration ignoring the loot table option.",
    "head_branch": "pr/improve-treasure-maps-return-already-discovered",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make discovered maps config work in treasure maps from loot tables too"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad3ed9087c4d6d376d9c",
    "number": 5124,
    "body": "Significantly reduces the number of chunk lookups when grass is spread in random ticks. This does not change the game mechanics.",
    "head_branch": "optimized-grass-spreading",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimized dirt and snow spreading (#5124)\n\n* Optimized dirt and snow spreading\r\n\r\n* Add optimization to bukkit event call\r\n\r\n* Clarify var names\r\n\r\nCo-authored-by: Owen1212055 <23108066+Owen1212055@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad3fd9087c4d6d376d9d",
    "number": 5123,
    "body": "When a block in a world is changed, the pathfinding of all entities in a specific range is updated to prevent mobs from entering dead ends while navigating to a specific position (i.e. a path on the track is removed or changed and the entity is no langer able to take the path). For this purpose, each entity is checked if it is in a specific range and if this is the case, the pathfinding is re-computed. When there are lots of entities in the world, this leads to a significant performance problem, especially when having automated farms. This is reflected in lots of different timings entries.\r\n\r\nThis PR adds an option to disable the automatic pathfinding update for specific worlds. So far, no one on my server realized that the behavior changed at all. Mobs still won't enter unsafe places (e.g. jump from a edge).\r\nI actually think that there is semantic issue with the vanilla code, at least the computation of \r\n\r\n` Vec3D vec3d = new Vec3D(((double) pathpoint.a + this.a.locX()) / 2.0D, ((double) pathpoint.b + this.a.locY()) / 2.0D, ((double) pathpoint.c + this.a.locZ()) / 2.0D);` in NavigationAbstract.b(BlockPosition) \r\n\r\ndoes not make any sense to me. The distance between this vector and the position vector of the modified block is computed. However it would make a lot more sense to compute something like (pathpoint.a + entity.widthX /2,  pathpoint.b + entity.height, pathpoint.c/2 + entity.widthZ/2). So I assume that this feature does not work as expected in vanilla and that there is no particular reason for not disabling this function. Correct me if I'm wrong.\r\n\r\nDisabling this function lead to a major performance improvement. In my case: 5 tps to 12 tps\r\n\r\n",
    "head_branch": "disable-pathfinding-updates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "added option to disable pathfinding updates on block changes (#5123)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad40d9087c4d6d376d9e",
    "number": 5121,
    "body": "This PR introduces patches, that add Beacon activation and deactivation events.",
    "head_branch": "beacon-activation-deactivation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add beacon activation and deactivation events (#5121)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad41d9087c4d6d376d9f",
    "number": 5119,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\nc3e684ef SPIGOT-3789: Can't Remove Entity Equipment in Same Tick Spawned without using Consumer\r\n\r\nSpigot Changes:\r\n89d6047d Rebuild patches",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit/Spigot) (#5119)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\nc3e684ef SPIGOT-3789: Can't Remove Entity Equipment in Same Tick Spawned without using Consumer\r\n\r\nSpigot Changes:\r\n89d6047d Rebuild patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad42d9087c4d6d376da0",
    "number": 5112,
    "body": "Has been tested, ready for review.\r\n\r\nI've decided to extend `BlockFormEvent`, but this new event has its own `HandlerList`. I believe this the best way to go about it, but feel free to change my mind.",
    "head_branch": "dragon-egg-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add DragonEggFormEvent (fixes #5110) (#5112)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad43d9087c4d6d376da1",
    "number": 5109,
    "body": "Fixes a bug that allows players to be infinitely blocking after dimension change (IE through a nether portal) along with allowing them to sprint during said period.",
    "head_branch": "PR-Reset-Shield-Blocking",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Reset shield blocking on dimension change"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad44d9087c4d6d376da2",
    "number": 5103,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\ne70a125f #571: Expand the FishHook API\r\n\r\nCraftBukkit Changes:\r\n0bad58f1 #783: Expand the FishHook API\r\n3636fb51 SPIGOT-6318: Fix smoke effect directions",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit)\n\nUpstream has released updates that appear to apply and compile correctly.\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\n\nBukkit Changes:\ne70a125f #571: Expand the FishHook API\n\nCraftBukkit Changes:\n0bad58f1 #783: Expand the FishHook API\n3636fb51 SPIGOT-6318: Fix smoke effect directions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad45d9087c4d6d376da3",
    "number": 5101,
    "body": "It's no a big update ^^\"",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Stop loop when flags set to false (#5101)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad46d9087c4d6d376da4",
    "number": 5097,
    "body": "Force updates the player's health after they join\r\n\r\nFixes #4793 and [SPIGOT-6250](https://hub.spigotmc.org/jira/browse/SPIGOT-6250)\r\nBefore: https://i.imgur.com/z16npIM.mp4\r\nAfter: https://i.imgur.com/b5RBlnN.mp4",
    "head_branch": "workaround-for-visually-missing-health-on-join",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad47d9087c4d6d376da5",
    "number": 5095,
    "body": "Fixes #5094 \r\n\r\nForgot to actually add the values in the constructor to the tagged set.",
    "head_branch": "fix/set-tags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix BaseTag constructor (#5095)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad48d9087c4d6d376da6",
    "number": 5093,
    "body": "Seemed like a pointless restriction to not allow this to begin with.",
    "head_branch": "BlockDropItemEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow adding items to BlockDropItemEvent (#5093)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad49d9087c4d6d376da7",
    "number": 5092,
    "body": "",
    "head_branch": "fix-yourkit",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Fix YourKit links in readme, fixes #5091"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad4ad9087c4d6d376da8",
    "number": 5088,
    "body": "After my plugin registers a custom entity, the server starts throwing IllegalStateException",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad4bd9087c4d6d376da9",
    "number": 5085,
    "body": "Fixes #5083",
    "head_branch": "fix/entity-pathfinder-inactivetick",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Correctly skip pathfinder ticks for inactive entities (#5085)\n\nFixes #5083"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad4cd9087c4d6d376daa",
    "number": 5082,
    "body": "Removes a layer of indirection for `EnumDirection.getAdjacent(X|Y|Z)()`, which is in the critical section for much of the server, including the lighting engine. This is a small optimization but it does add up.",
    "head_branch": "feature/inline-enumdirection-shift-fields",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Inline shift fields in EnumDirection (#5082)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad4dd9087c4d6d376dab",
    "number": 5080,
    "body": "Sample pull requesting of paper repo",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad4ed9087c4d6d376dac",
    "number": 5078,
    "body": "",
    "head_branch": "farmland_trampling",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad4fd9087c4d6d376dad",
    "number": 5075,
    "body": "This PR adds an event that is called prior to a Dispenser firing anything. This allows full access to the pre-fire state of the dispenser inventory, and therefore clean cancelling of the event.\r\n\r\nMain use case here is for plugins that want to either entirely cancel a dispenser event, or want to perform an action based off the contents of the dispenser. Due to the way the normal dispense event works, neither of these are currently possible.\r\n\r\nThis also allows working around an old Spigot bug, https://hub.spigotmc.org/jira/browse/SPIGOT-4162",
    "head_branch": "feature/block-pre-dispense",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add BlockPreDispenseEvent (#5075)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad50d9087c4d6d376dae",
    "number": 5074,
    "body": "HashMapPalette uses an instance of CrudeIncrementalIntIdentityHashBiMap internally. A Palette has a preset maximum size = 1 << bits. CrudeIncrementalIntIdentityHashBiMap has an initial size but is automatically resized. The CrudeIncrementalIntIdentityHashBiMap is created with the maximum size in the constructor of HashMapPalette, with the aim that it doesn't need to be resized anymore. However, there are two things that I think Mojang hasn't considered here:\r\n1) The CrudeIncrementalIntIdentityHashBiMap is resized, when its initial size is reached and not the next time, when a further object is added.\r\n2) HashMapPalette adds objects (unnecessarily) before checking if the initial size of CrudeIncrementalIntIdentityHashBiMap is reached.\r\n\r\nThis means to actually avoid resize operations in CrudeIncrementalIntIdentityHashBiMap, one has to add 2 to the initial size or add 1 and check the size before adding objects. This commit implements the second approach. Note that this isn't only an optimization but also makes async reads of Palettes fail-safe. An async read while the CrudeIncrementalIntIdentityHashBiMap is resized is fatal and can even lead to corrupted data. This is also something that Anti-Xray is currently relying on.",
    "head_branch": "hotfix/data-palette-hash",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimize HashMapPalette (#5074)\n\nHashMapPalette uses an instance of CrudeIncrementalIntIdentityHashBiMap\r\ninternally. A Palette has a preset maximum size = 1 << bits.\r\nCrudeIncrementalIntIdentityHashBiMap has an initial size but is\r\nautomatically resized. The CrudeIncrementalIntIdentityHashBiMap is created\r\nwith the maximum size in the constructor of HashMapPalette, with the aim\r\nthat it doesn't need to be resized anymore. However, there are two things\r\nthat I think Mojang hasn't considered here:\r\n1) The CrudeIncrementalIntIdentityHashBiMap is resized, when its initial\r\nsize is reached and not the next time, when a further object is added.\r\n2) HashMapPalette adds objects (unnecessarily) before checking if the\r\ninitial size of CrudeIncrementalIntIdentityHashBiMap is reached.\r\nThis means to actually avoid resize operations in\r\nCrudeIncrementalIntIdentityHashBiMap, one has to add 2 to the initial size\r\nor add 1 and check the size before adding objects. This commit implements\r\nthe second approach. Note that this isn't only an optimization but also\r\nmakes async reads of Palettes fail-safe. An async read while the\r\nCrudeIncrementalIntIdentityHashBiMap is resized is fatal and can even lead\r\nto corrupted data. This is also something that Anti-Xray is currently\r\nrelying on."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad51d9087c4d6d376daf",
    "number": 5073,
    "body": "Thanks to Spottedleaf for finding and fixing this\r\n\r\nhttps://github.com/Spottedleaf/Tuinity/blob/1d169e7a54186194a67e74df76ed907024f5b859/patches/server/0061-Do-not-add-passengers-of-entities-that-were-were-abo.patch",
    "head_branch": "dont-add-passengers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Do not add passengers of entities that were above save limit (#5073)\n\nCo-authored-by: Spottedleaf <spottedleaf@spottedleaf.dev>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad52d9087c4d6d376db0",
    "number": 5072,
    "body": "Unnecessary space bar that was used to trigger a system was removed again. @aikar",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad53d9087c4d6d376db1",
    "number": 5070,
    "body": "…Fixes #3328\r\n\r\nhttps://github.com/PaperMC/Paper/pull/3843",
    "head_branch": "chatcomponent-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Return chat component with empty text instead of throwing exception. Fixes #3328\n\nSigned-off-by: MiniDigger <admin@minidigger.me>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad54d9087c4d6d376db2",
    "number": 5069,
    "body": "https://github.com/PaperMC/Paper/pull/4362",
    "head_branch": "village-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad55d9087c4d6d376db3",
    "number": 5067,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Update API to 1.16.5 (#5067)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad56d9087c4d6d376db4",
    "number": 5063,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad57d9087c4d6d376db5",
    "number": 5060,
    "body": "I like the gradle Kotlin DSL more than the Groovy DSL. Whenever i wanted to use the paper-api, i had to adapt the groovy snippet for the kotlin DSL. I think it would be better if you had a snippet for both DSLs.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad58d9087c4d6d376db6",
    "number": 5055,
    "body": "Up to now Anti-Xray did only replace blocks that have the default block state of the specified blocks in hidden-blocks (engine-mode: 1) or hidden-blocks and replacement-blocks (engine-mode: 2). Therefore it wasn't possible to replace for example chests facing south because chest refers to the default block state facing north. Supporting block states in these lists is overkill. Instead this commit makes Anti-Xray to replace all block states of a specified block. However, Anti-Xray will still place the default block states.\r\n\r\n(Just an implementations note: Instead of using the `BlockStateList` we could actually do the same as when initializing the `solidGlobal` array a few lines below. Namely looping through all block data integer ids, get the block from the block data and check if the block has to be obfuscated. However, I prefer the current implementation.)",
    "head_branch": "feature/anti-xray-block-states",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Replace all block states of a specified block (#5055)\n\nUp to now Anti-Xray did only replace blocks that have the default block\r\nstate of the specified blocks in hidden-blocks (engine-mode: 1) or\r\nhidden-blocks and replacement-blocks (engine-mode: 2). Therefore it wasn't\r\npossible to replace for example chests facing south because chest refers to\r\nthe default block state facing north. Supporting block states in these lists\r\nis overkill. Instead this commit makes Anti-Xray to replace all block states\r\nof a specified block. However, Anti-Xray will still place the default block\r\nstates."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad59d9087c4d6d376db7",
    "number": 5054,
    "body": "Instead of completely resetting a Villager's reputation for all players each time they are cured, we now only reset the relevant part of the reputation for only that player. This means the exploit is fixed and players cannot stack multiple cures until prices are down to 1, but doesn't have the same side effects that are commonly complained about with the current exploit fix.",
    "head_branch": "improve-villager-cure-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve zombie villager curing exploit fix (#5054)\n\nInstead of completely resetting a Villager's reputation for all players each time they are cured, we now only reset the relevant part of the reputation for only that player. This means the exploit is fixed and players cannot stack multiple cures until prices are down to 1, but doesn't have the same side effects that are commonly complained about with the current exploit fix."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad5ad9087c4d6d376db8",
    "number": 5053,
    "body": "Fixes #5023.\r\n\r\nMinecarts collide with other entities in the world in three different ways:\r\n- when ticking the Minecart (EntityMinecraftAbstract.tick())\r\n- when getCubes() is called\r\n- when moving the Minecart, the relative movement is adjusted by colliding it with all entities in the Minecart's bounding box. This is done in Entity.g(Vec3d). \r\n\r\nCurrently, the VehicleEntityCollisionEvent is only called in the 1st case. I've fixed this by calling the event when canCollideWithEntity(Entity) (obfuscated as j(.)) is called. This method is called in IEntityAccess.c(...).",
    "head_branch": "paper-5023",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fixed entity vehicle collision event not called (#5053)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad5bd9087c4d6d376db9",
    "number": 5048,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nbf617659 SPIGOT-6313: Revert \"SPIGOT-6274: Reloading configuration does not clear previous values\"\r\ne8fa7a07 SPIGOT-6274: Reloading configuration does not clear previous values\r\n\r\nSpigot Changes:\r\n5fc0fb4e SPIGOT-6306: Handle watchdog reloads and disabling by 0/negative times",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/Spigot) (#5048)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nbf617659 SPIGOT-6313: Revert \"SPIGOT-6274: Reloading configuration does not clear previous values\"\r\ne8fa7a07 SPIGOT-6274: Reloading configuration does not clear previous values\r\n\r\nSpigot Changes:\r\n5fc0fb4e SPIGOT-6306: Handle watchdog reloads and disabling by 0/negative times"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad5cd9087c4d6d376dba",
    "number": 5047,
    "body": "Patches the exploit to bypass villager restock times, demonstrated here: ",
    "head_branch": "villager-boat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix villager boat exploit (#5047)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad5dd9087c4d6d376dbb",
    "number": 5034,
    "body": "",
    "head_branch": "remove-stale-pois",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove stale POIs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad5ed9087c4d6d376dbc",
    "number": 5033,
    "body": "This adds the Server#getServerProperties API method so people can get the server.properties file.",
    "head_branch": "server-properties-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad5fd9087c4d6d376dbd",
    "number": 5031,
    "body": "Previous commit 97b2eadf1 pulled upstream change that implements the exact same fix, just higher in the method.\r\n\r\nCB change: https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/7029c0a8f3e2a233c889ef3c558aa0f75c29bc5a",
    "head_branch": "remove_portal_down_creation_patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove patch for not searching for portal creation when looking down (#5031)\n\nPrevious commit 97b2eadf1 pulled upstream change that implements the exact same fix.\r\n\r\nCB change: https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/7029c0a8f3e2a233c889ef3c558aa0f75c29bc5a\r\n\r\nCo-authored-by: Professor Bloodstone <git@bloodstone.dev>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad60d9087c4d6d376dbe",
    "number": 5030,
    "body": "Allows plugins to modify the announcement message when a player has completed an advancement. Much like how PlayerDeathEvent and PlayerJoinEvent etc. allow plugins to change or disable the message.",
    "head_branch": "feature/adventure",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Adventure message to PlayerAdvancementDoneEvent (#5030)\n\n* Add Adventure message to PlayerAdvancementDoneEvent\r\n\r\n* Add obfuscation helpers\r\n\r\n* Renumber patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad61d9087c4d6d376dbf",
    "number": 5029,
    "body": "Zstd using zstd-jni: https://github.com/luben/zstd-jni\r\nLZ4 using lz4-java: https://github.com/lz4/lz4-java\r\n\r\nAdded new command-line option, --forceWrite, which will forcibly write the chunk/flush to disk regardless of whether or not the chunk has actually changed in a --forceUpgrade.\r\nNew compression only happens when a chunk is saved, so running a --forceUpgrade AND --forceWrite may be desirable.\r\n\r\nNew (hidden) config option for the compression method to use.\r\nThere's a new option in PaperConfig (compression level) for Zstd which defaults to 6.\r\nThere's a new option in PaperConfig (compression level) for Zlib which defaults to 5.\r\nAdded a getter to the API to retrieve the current chunk compression method being used.\r\n\r\nSince the patch hooks Mojang's versioning system for new compression methods, it\r\nshould be internally consistent, easily-updatable, and reversible with a --forceUpgrade AND a --forceWrite.\r\n\r\nThis will likely conflict with plugins and programs expecting region files to be compressed using the current standard.\r\n\r\nSupercedes #4715",
    "head_branch": "feature/zstd-1.16.4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad62d9087c4d6d376dc0",
    "number": 5028,
    "body": "I saw the need in some of the pr's where such a simple check took multiple lines of code. This PR follows the same reason why the initial patch was created.\r\n\r\nInstead of writing something like this:\r\n\r\n```java\r\nif(PlayerChunkUnloadEvent.getHandlerList().getRegisteredListeners().length > 0){\r\n     new PlayerChunkUnloadEvent(this.getBukkitEntity().getWorld().getChunkAt(chunkcoordintpair.longKey), this.getBukkitEntity()).callEvent();\r\n}\r\n```\r\n\r\nit will be shortened to this and reduces patch size:\r\n\r\n```java\r\nnew PlayerChunkUnloadEvent(this.getBukkitEntity().getWorld().getChunkAt(chunkcoordintpair.longKey), this.getBukkitEntity()). callEventIfListenerRegistered();\r\n```\r\n\r\nDon't know why this wasn't present before.\r\n",
    "head_branch": "feature/call-event-if-listener-registered",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad63d9087c4d6d376dc1",
    "number": 5027,
    "body": "I am not soo good at English, so I apologize in advance for any grammar or spelling mistakes.\r\nThis patch removes unnecessary objects in event calls.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad64d9087c4d6d376dc2",
    "number": 5025,
    "body": "/paper dumpitem makes a cast to CraftPlayer, we need a instance check before doing that.\r\n\r\nFixes #5024",
    "head_branch": "fix/dumpitem",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix dumpitem command not checking sender (#5025)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad66d9087c4d6d376dc3",
    "number": 5021,
    "body": null,
    "head_branch": "feature/CommandFunctions-API",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad67d9087c4d6d376dc4",
    "number": 5020,
    "body": "Allows you to set if the Wandering Trader should drink his invisibility potion when its night or his milk when its day\r\n\r\nFirst time doing API, tested with a plugin to spawn two entities one with normal behaviour and one with these two settings set to false and it works as intended.",
    "head_branch": "add-wandering-trader-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add more Wandering Trader API (#5020)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad68d9087c4d6d376dc5",
    "number": 5019,
    "body": "Fixes PaperMC/Paper#5018.",
    "head_branch": "ignore-empty-commands",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Empty commands shall not be dispatched\n\nFixes PaperMC/Paper#5018."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad69d9087c4d6d376dc6",
    "number": 5017,
    "body": "Fixes #5015",
    "head_branch": "fix/interact-event-adventure",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix interact event in adventure mode"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad6ad9087c4d6d376dc7",
    "number": 5016,
    "body": "Closes #4761 \r\n\r\nRedo of #4789 ",
    "head_branch": "feature/recipe-in-cook-events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add recipe to cook events"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad6bd9087c4d6d376dc8",
    "number": 5014,
    "body": "",
    "head_branch": "feature/keyed-on-world",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement Keyed on World"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad6cd9087c4d6d376dc9",
    "number": 5013,
    "body": "Makes BookMeta extend adventure's Book interface, implements methods in CraftMetaBook and implements a builder there as well.\r\n\r\nChanges Team#color to return TextColor instead of NamedTextColor.",
    "head_branch": "fix/adventure/bookmeta-and-team-colors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add adventure Book and fix team colors (#5013)\n\n* Add adventure Book and fix team colors\r\n\r\n* move OVERRIDE_CHECKS & move 2 methods to impl"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad6dd9087c4d6d376dca",
    "number": 5012,
    "body": "# Good evening, good morning!\r\nOh! Here I am again, also again with a pull request! Today I would like to introduce my newest change: \"isArmor()\".\r\n\r\n# The beginning\r\nI've been working on Minecraft plugin related projects for quite some time now and there's always one thing that caught my eye a bit. What is the best or fastest way to check if a material is an Armor or not? Well, with the MaterialTags this is not a problem anymore, but within the Material class this is not really defined.\r\n\r\n# The reason\r\nI noticed a short time ago that Paper added a nice isAir() boolean to the Material class, then it immediately popped into my head that you could also set up the Armor check with isArmor(). That's the reason for this pull request and I hope that this change will be helpful/intuitive for some Paper plugin developers out there!\r\n\r\n# The End\r\nAlso to you first a thanks that you have looked at my text, and/or also my changes. I hope you stay healthy in this difficult time!\r\n\r\nWith kind regards\r\n@TheFruxz",
    "head_branch": "feature/isArmor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad6ed9087c4d6d376dcb",
    "number": 5011,
    "body": "# Good morning!\r\nHey! I'm back, this time only with a very small change, however, I also write a text for such a small thing, as it has actually already set with the last pull requests.\r\n\r\n# What is it about the?\r\nIt is about the removal of an unnecessary object specification and the \"final \"isation of the object of the EntityCreatePortalEvent.\r\n\r\n# Why did I do this?\r\nUnfortunately I do not know :D\r\n\r\n# What should be achieved with it\r\nA better code\r\n\r\n# Why it will be better\r\nBecause the value would be overwritten anyway during the initialization as an object and thus the specification of this variable in the \"head\" is unnecessary.\r\n\r\n# Chapter 0\r\nThis time it was not such a long text as the last times and for that I would like to apologize absolutely. I hope nevertheless that you liked my short text and that it was informative enough for you.\r\n\r\n# Thanks!\r\nThank you very much, stay healthy\r\nYours sincerely @TheFruxz",
    "head_branch": "fix/removeRedundantInitializer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad6fd9087c4d6d376dcc",
    "number": 5010,
    "body": "# Welcome!\r\nFirst of all, welcome! It's that time again, I'm doing another pull request for Paper, but how come?\r\n\r\n# The origin\r\nI love the Paper API, working with it and especially the many additional possibilities, like in this case the MaterialTags.\r\nSometimes I just take a look at the Paper code and poke around a bit for myself to see what's really going on there. And then sometimes I find a few things that I would change or add.\r\n\r\n# Chapter 1\r\nWhen I first came across the very impressive MaterialTags some time ago, I was totally impressed by the simplicity but also by the functionality of the MaterialTags, because they can do so much, although they were actually only a very small addition to the whole.\r\nNow I want to extend this feature with my proposed addition here to enable an even better API experience.\r\n\r\n# The addition\r\nMy changes I'm proposing here: \"Stairs\". While I saw that a MaterialTag already existed for Prismarine stairs, I noticed in the same breath that no tag existed for general stairs (i.e. all types of stairs). Well, I want to change that with my commit here and submit my request to add stairs! \r\n\r\n# Chapter 2\r\nWhy do I think stairs should be added as a tag? I believe that detecting stairs within a plugin can sometimes be very important, be it a plugin for sitting on stairs or a plugin with which you can use stairs to trigger your toaster via push notification (I love toasts :D). It was until now always a question of external API or/and complexity of the plugin to be able to detect stairs properly, but now it might be over!\r\n\r\n# Every novel has an end\r\nHey! Thanks a lot for deciding to read my chunk of text. I'm glad that there are people like you who take their time to read the long text of a stranger. Also I want to thank you for the active feedback and support in my first two pull requests, because they really supported and helped me! I hope that my changes help more than cause work, because I believe in the Paper API and use Paper myself in pretty much every project I do. As a thank you, I myself would like to support and advance Paper with my ideas and perspectives.\r\n\r\n# Thanks!\r\nThanks a lot, stay healthy\r\nYours sincerely @TheFruxz",
    "head_branch": "feature/stairMaterialTag",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad70d9087c4d6d376dcd",
    "number": 5009,
    "body": "Closes #4066 \r\nAdds per-subcommand permissions for the paper command (including for tabcompletions)",
    "head_branch": "feature/paper-command-perms",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add per-command perms for paper command"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad71d9087c4d6d376dce",
    "number": 5008,
    "body": "Fixes #5002 ",
    "head_branch": "fix/itemmeta-components",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix NPE in getDisplayNameComponent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad72d9087c4d6d376dcf",
    "number": 5007,
    "body": "",
    "head_branch": "fix-dropper-crash",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "don't search for portal creation when looking down"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad73d9087c4d6d376dd0",
    "number": 5006,
    "body": "Just so happens the existing lock acquiring calls are not so cheap.\r\n\r\nI've benchmarked what appeared rather obvious, but had to check it out anyways in allocation vs filling (what `Long2ObjectOpenHashMap` does internally on `#clear`), and `Arrays.fill` two times is _much_ faster (about 3x for `8 << 8` size) than reallocation; I've therefore also opted to cache the maps.\r\n\r\nCo-authored-by: @Yive ",
    "head_branch": "cache-map-chunks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad74d9087c4d6d376dd1",
    "number": 5005,
    "body": "Fixes [SPIGOT-6249](https://hub.spigotmc.org/jira/browse/SPIGOT-6249)",
    "head_branch": "patch/missing-effects",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing effects"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad75d9087c4d6d376dd2",
    "number": 5004,
    "body": "Closes #4828 ",
    "head_branch": "feature/PlayerInteractAngerPiglinEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad76d9087c4d6d376dd3",
    "number": 5003,
    "body": "Remake of #4777, Closes #4720 .\r\n\r\nBig simplification of the original PR.\r\n\r\nI think here its appropriate for the API to trigger events when changing the world border. The feature request was specifically so that a plugin could adapt its logic based on whatever the world border was, not just when it was changed by a command.",
    "head_branch": "feature/worldborder-events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add worldborder events"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad77d9087c4d6d376dd4",
    "number": 5001,
    "body": "Fixes #4081 ",
    "head_branch": "fix/file-conversion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix file conversion"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad78d9087c4d6d376dd5",
    "number": 5000,
    "body": "",
    "head_branch": "remove-stream-from-crossbow",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad79d9087c4d6d376dd6",
    "number": 4999,
    "body": "Fixes #4851 ",
    "head_branch": "fix/schedule-command",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "make schedule command per world"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad7ad9087c4d6d376dd7",
    "number": 4998,
    "body": "",
    "head_branch": "fix/add-missing-commands",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Add a few missing commands to the ./paper help output"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad7bd9087c4d6d376dd8",
    "number": 4996,
    "body": "",
    "head_branch": "fix/destroy-speed-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "consider enchants for destroy speed"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad7cd9087c4d6d376dd9",
    "number": 4995,
    "body": "Adds an API method to get the exact position that was interacted with in a PlayerInteractEvent, rather than just the block.\r\n\r\n",
    "head_branch": "feature/interaction-point",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add API to get exact interaction point in PlayerInteractEvent (#4995)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad7dd9087c4d6d376dda",
    "number": 4994,
    "body": "Closes #4811 ",
    "head_branch": "feature/door-breaking-difficulty-configuration",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Configurable door breaking difficulty"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad7ed9087c4d6d376ddb",
    "number": 4993,
    "body": "Closes #4780 \r\n\r\nOne thing to note. Should it be possible to cancel the event if the leashed entity dies? I tested if the player dies and you do stay leashed to it, but if the leashed entity dies, maybe it should unleash regardless of event cancellation.",
    "head_branch": "feature/EntityUnleashEvent-cancellation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make EntityUnleashEvent cancellable (#4993)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad7fd9087c4d6d376ddc",
    "number": 4992,
    "body": "",
    "head_branch": "feature/max-lead-distance",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Configurable max leash distance"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad80d9087c4d6d376ddd",
    "number": 4991,
    "body": "",
    "head_branch": "feature/abstract-custom-set-tags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "abstract custom set tags, add entity tags"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad81d9087c4d6d376dde",
    "number": 4990,
    "body": "",
    "head_branch": "feature/vanilla-entity-tags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added Vanilla Entity Tags"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad83d9087c4d6d376ddf",
    "number": 4989,
    "body": "So not really sure what to call this event, but there wasn't a way to affect the drops when water or a piston breaks a block. So this adds that. Kind of an odd name I know, but if you've got a better one, suggest away please.",
    "head_branch": "feature/BlockBreadBlockDropItemEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add BlockBreakBlockEvent (#4989)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad84d9087c4d6d376de0",
    "number": 4987,
    "body": "The Coral Blocks tag was removed by mistake in this commit https://github.com/PaperMC/Paper/commit/be81b4f5c524fe1b6ea0af32a9f2e47c06223cc9\r\n\r\nThis adds it back.",
    "head_branch": "re-add-coral-block-tags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Re-add coral block tags (#4987)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad85d9087c4d6d376de1",
    "number": 4980,
    "body": "Fixes #4979",
    "head_branch": "fix/redact-velocity-forwarding-secret",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Redact Velocity forwarding secret properly (#4980)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad86d9087c4d6d376de2",
    "number": 4976,
    "body": "Fixes PaperMC/Paper#4975",
    "head_branch": "fix-sign-lazy-init",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix sign lazy initialisation\n\nFixes PaperMC/Paper#4975"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad87d9087c4d6d376de3",
    "number": 4973,
    "body": "This reintroduces the patch that fixed Waving Banners.\r\nIt was removed due to that being fixed but has since created a new problem with Guardian Beams not rendering so I've re-added the patch with a new name for its current reason.\r\n\r\nFixes: https://bugs.mojang.com/browse/MC-165595 & #4948",
    "head_branch": "workaround_for_guardian_beam",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Guardian beam workaround"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad88d9087c4d6d376de4",
    "number": 4972,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n560b65c4 #707, SPIGOT-5063, SPIGOT-5304, SPIGOT-5656, SPIGOT-3206, SPIGOT-5350, SPIGOT-5980, SPIGOT-4672: Persist the exact internal text representation where possible.\r\n\r\nSpigot Changes:\r\nff439d1e Rebuild patches",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit/Spigot) (#4972)\n\nUpstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n560b65c4 #707, SPIGOT-5063, SPIGOT-5304, SPIGOT-5656, SPIGOT-3206, SPIGOT-5350, SPIGOT-5980, SPIGOT-4672: Persist the exact internal text representation where possible.\r\n\r\nSpigot Changes:\r\nff439d1e Rebuild patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad89d9087c4d6d376de5",
    "number": 4970,
    "body": "I went into detail about this bug on this comment in the Paper Discord: https://discord.com/channels/289587909051416579/555462289851940864/793550995426246676, but in summary:\r\n\r\nSince this commit: https://github.com/PaperMC/Paper/commit/a70618cd5cb493fe9fe2a2a7375a7b1949d427d7#, any user connecting with no texture property in their GameProfile would have their GameProfile always overwritten by whatever was present in the usercache. If a user's name was changed and they kept the same UUID, this wouldn't go into effect because Paper would detect they had no textures, pull their information from the usercache, and use the usercache's name. \r\n\r\nThis commit fixes this issue by only overwriting with the usercache if the current profile doesn't have a username, or if the cached profile has textures.",
    "head_branch": "usercache-username-override-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix username connecting with no texture being overwritten by usercache (#4970)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad8ad9087c4d6d376de6",
    "number": 4969,
    "body": "Doors were missing from MaterialTags. This PR adds them.\r\n\r\nIts my first Paper-PR, so I hope I got the patches right. Its a bit confusing ",
    "head_branch": "add-doors-to-material-tags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add doors to material tags"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad8bd9087c4d6d376de7",
    "number": 4967,
    "body": "- [ ] Test again after the big refactor I did\r\n- [ ] JavaDoc\r\n- [ ] HeadRotation/Animation own ctor to reduce likelihood of conflicts\r\n\r\n\r\nCurrently only certain things are supported. Had no need for the others. Feel free to make suggestions.\r\n",
    "head_branch": "feature/packet-support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad8cd9087c4d6d376de8",
    "number": 4965,
    "body": "A lot of plugins currently have big switch statements to get the Material out of a Boat or Minecart. This PR adds API to get them.\r\n\r\nFor boats, this just calls an NMS method that has its own switch statement, but for Minecarts a switch statement had to be added in CraftMinecart. To prevent this exploding in cases where new cart types are added, it will default to the normal MINECART item in those cases. This is also important as there are cart types that are not represented as items, such as EntityMinecartType.SPAWNER",
    "head_branch": "feature/boat-and-cart-items",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add API to get the Material of Boats and Minecarts"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad8dd9087c4d6d376de9",
    "number": 4958,
    "body": "This PR is a follow up to #4942, but with an updated patch (from @PaulBGD) that addresses the reviews and changes requested.\r\n\r\nThe reason why this isn't just a part of the previous PR is because it seemed I messed something up with git, sorry :)",
    "head_branch": "pr/airplanelite-Strip-raytracing-for-EntityLiving-hasLineOfSight-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad8ed9087c4d6d376dea",
    "number": 4956,
    "body": "This adds an API to send an operator status level to the player.\r\n\r\n---\r\n\r\nTest code:\r\n\r\n```kotlin\r\nclass SendOpLevel : BaseCommand() {\r\n    override fun register(manager: PaperCommandManager<CommandSender>) {\r\n        manager.command(manager.commandBuilder(\"sendop\")\r\n            .argument(\r\n                ByteArgument.newBuilder<CommandSender>(\"level\")\r\n                    .withMin(0)\r\n                    .withMax(4)\r\n            )\r\n            .senderType(Player::class.java)\r\n            .handler {\r\n                val level: Byte = it[\"level\"]\r\n                val player = it.sender as Player\r\n                player.sendOpLevel(level)\r\n            })\r\n    }\r\n}\r\n```",
    "head_branch": "send-op-level-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add sendOpLevel API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad8fd9087c4d6d376deb",
    "number": 4954,
    "body": "Before a tile entity is ticked, it is first checked if the chunk it is inside is ready to be ticked. This check takes about 5% of the tick wall time according to YourKit's sampling on a server with lots of tile entities. This patch inlines the contents of ChunkProviderServer.a(BlockPosition). The lookup of the chunk `PlayerChunk playerChunk = this.getChunk(MCUtil.getCoordinateKey(blockposition));`, which is pretty inefficient, is no longer required as the PlayerChunk is directly available through the TileEntity. ",
    "head_branch": "optimize-tile-tick-ready-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimized tick ready check"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad90d9087c4d6d376dec",
    "number": 4953,
    "body": "",
    "head_branch": "fawe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad92d9087c4d6d376ded",
    "number": 4950,
    "body": "Cache the results of TileEntityFurnace.f() (which returns a map containing all fuel items along with their burn duration).  This optimizes the TileEntityFurnace.isFuel(ItemStack) function, which is called whenever a hopper pushes an item into a furnace \r\n( https://imgur.com/a/X4kndsx ).\r\n\r\n",
    "head_branch": "cache-burn-durations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Cache burn durations"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad93d9087c4d6d376dee",
    "number": 4947,
    "body": "Affected mobs: Zombie, Bats, SkeletonAbstract\r\n\r\nBy default MC checks on every **natural spawn** attempt whether it's \"halloween time\", it's probably not. This patch keeps track of the next upcoming date to schedule the toggle at the right time, using logarithmic back-off.\r\nBoth Halloween-Season and -Day checks are reduced to boolean comparisons.\r\n\r\nSupersedes #4939 (that only included Bats and a coarse hourly check).\r\n\r\nPersonal todo:\r\n[ ] write tests\r\n[ ] Proper  LocalDateTime (I only noticed after finishing that LocalDate doesnt want to do anything with ChronoUnit.SECONDS ;))\r\n[ ] probably an API? There's no way currently to change any of that, as its hardcoded in three places separately.\r\n\r\nOpen for commentary. For chat, Paper guild: `@vad#`",
    "head_branch": "pr-halloweenchecker",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad94d9087c4d6d376def",
    "number": 4946,
    "body": "Some plugins don't properly shut down themselves.\r\nAs a result, inventories opened by plugins may remain uncontrolled, which may result in duplication glitch.\r\nAfter this patch, an option will be added to close inventories on reload in order to prevent duplication glitch.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad95d9087c4d6d376df0",
    "number": 4945,
    "body": "Should probably be merged as `[CI-SKIP]`.",
    "head_branch": "deprecate-set-view-distance",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Deprecate the view distance APIs on Player (#4945)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad96d9087c4d6d376df1",
    "number": 4943,
    "body": "Ported the mc 1.8 patch of Techcable to 1.16.5.\r\nhttps://github.com/VictorML11/FluxSpigot/blob/master/PaperSpigot-Server-Patches/0006-Fix-hopper-lag-by-making-entities-look-for-hoppers.patch\r\n\r\n\r\nA first test has shown that with 245k hoppers the load is reduced by ~50%.\r\n\r\n\r\n\r\n\r\n> @electronicboy I had some thoughts regarding further Hopper logic optimizations. Will add it temporarily as a second patch file so that the change between hopper base fix and the further optimization is clearly separated first.\r\nIf everything is ok with it I'll be merged it into the original patch. Feel free to have a look if you would change anything there.\r\n\r\n\r\nAdded\r\n- don't check hopper & bounding box collision if elapsed time since last check is not greater N ticks or item/cart is not moving\r\n- skip hopper & bounding box check if checked previously and only hoper inventory was full -> get saved hopper block location and do inventory stuff\r\n",
    "head_branch": "feature/fix-hopper-lag",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad97d9087c4d6d376df2",
    "number": 4942,
    "body": "(This patch is from [AirplaneLite](https://github.com/Technove/AirplaneLite) created by @PaulBGD)\r\n\r\nFrom the patch notes (which explains it better than I could):\r\n> The IBlockAccess#rayTrace method is very wasteful in both allocations,\r\nand in logic. While EntityLiving#hasLineOfSight provides static\r\nparameters for collisions with blocks and fluids, the method still does\r\na lot of dynamic checks for both of these, which result in extra work.\r\nAs well, since the fluid collision option is set to NONE, the entire\r\nfluid collision system is completely unneeded, yet used anyways.",
    "head_branch": "pr/airplanelite-Strip-raytracing-for-EntityLiving-hasLineOfSight",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad98d9087c4d6d376df3",
    "number": 4940,
    "body": "The following log message was sent where it was shown a piston head may\r\ncannot create a new tile, thus resulting in a fatal\r\n`NullPointerException`:\r\n\r\n```\r\n[18:39:21] [Server thread/ERROR]: Block at 8 311, 31, -85 is Block{minecraft:moving_piston} but has net.minecraft.server.v1_16_R3.TileEntityFurnaceFurnace@157e066a. Bukkit will attempt to fix this, but there may be additional damage that we cannot recover.\r\n[18:39:21] [Server thread/WARN]: Failed to handle packet for /127.0.0.1:53204\r\nnet.minecraft.server.v1_16_R3.ReportedException: Ticking player\r\n\tat net.minecraft.server.v1_16_R3.EntityPlayer.playerTick(EntityPlayer.java:597) ~[patched_1.16.4.jar:git-Paper-345]\r\n\tat net.minecraft.server.v1_16_R3.PlayerConnection.tick(PlayerConnection.java:176) ~[patched_1.16.4.jar:git-Paper-345]\r\n\t// ...\r\nCaused by: java.lang.NullPointerException\r\n\tat net.minecraft.server.v1_16_R3.WorldServer.fixTileEntity(WorldServer.java:293) ~[patched_1.16.4.jar:git-Paper-345]\r\n\tat net.minecraft.server.v1_16_R3.WorldServer.getTileEntity(WorldServer.java:280) ~[patched_1.16.4.jar:git-Paper-345]\r\n\t// ...\r\n```\r\n\r\nThis places a `null`-check on the created tile entity, as it may in fact\r\nbe `null`.",
    "head_branch": "fix-fix-tile-entity-npe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad99d9087c4d6d376df4",
    "number": 4939,
    "body": "(This patch is from [AirplaneLite](https://github.com/Technove/AirplaneLite))\r\nMinecraft checks to see if it's halloween pretty often, this patch makes it so \"spooky season\" is only checked for every hour. This is a micro optimization, but (imo) it wouldn't hurt having.",
    "head_branch": "pr/spooky-season",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad9ad9087c4d6d376df5",
    "number": 4938,
    "body": "This patch fixes the Paper lead dupe. ok pls give contrib role now plsthxty (NOT /s.)",
    "head_branch": "fix-lead-dupe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix lead duplication"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad9bd9087c4d6d376df6",
    "number": 4937,
    "body": "This patch prevents lead from duping by unleashing the original entity before it is copied.\r\nNormal TP and different dimension TP works as usual after this patch.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad9cd9087c4d6d376df7",
    "number": 4936,
    "body": "idk if OBSTRUCTED was added later or something, but it the bed event was missing it as an option.",
    "head_branch": "fix/missing-obstructed-result",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add OBSTRUCTED result to BedEnterResult enum"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad9dd9087c4d6d376df8",
    "number": 4935,
    "body": "Wait until #4842 is merged :+1: ",
    "head_branch": "feature/PlayerBedFailEnterEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PlayerBedFailEnterEvent (#4935)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ad9ed9087c4d6d376df9",
    "number": 4932,
    "body": "The vanilla client limits the book to 100 pages, so the check should reflect that as well. (previously was 50 pages)",
    "head_branch": "fix/vanilla-book-page-length",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix book page limit length (#4932)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ad9fd9087c4d6d376dfa",
    "number": 4928,
    "body": "Barty made a comment that he was trying to cancel the durability damage armor took from thorns on armor stands. This event should cover that, and, well all other cases of items on other entities that took durability damage.",
    "head_branch": "feature/EntityItemDamageEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added EntityItemDamageEvent (#4928)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ada0d9087c4d6d376dfb",
    "number": 4924,
    "body": "This commit implements the outline I presented in #4908. Most importantly, I have confirmed that all vanilla values remain correct without modification from the API, and when resetting block range back to their vanilla values. Please do let me know if there's something I can improve (especially documentation).\r\n\r\nI'm also willing to release these patches under MIT, if there is a process for that. \r\n\r\nFixes #4908",
    "head_branch": "modifyblockreach",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ada1d9087c4d6d376dfc",
    "number": 4922,
    "body": "",
    "head_branch": "feature/WorldGameRuleChangeEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added WorldGameRuleChangeEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ada2d9087c4d6d376dfd",
    "number": 4920,
    "body": "Allows plugins to selectively disable vanilla potion effect immunities. \r\nCan also be used to detect if immune mobs have been hit with those effects.\r\n\r\nSomewhat related issue #3580",
    "head_branch": "feature/entity_potion_effect_immunity_event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ada3d9087c4d6d376dfe",
    "number": 4916,
    "body": "The getPassengers() method of the Entity classes creates a copy of the passenger list on every call. In many cases, the elements of the returned list are not modified or just the length of the elements is checked. As this involves unnecessary overhead and pressure on the garbage collector, I've replace the calls to this method with direct accesses to the \"passengers\" field wherever it is safe that it is processed synchronously and the list is not changed.",
    "head_branch": "passenger-list-no-copies",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Do not create unnecessary copies of the passenger list"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ada4d9087c4d6d376dff",
    "number": 4915,
    "body": "**As I based my previous pull request #4885 on the master branch of my fork, I've re-created this pull request.**\r\n\r\nIn Minecraft 1.16, villagers consume a lot more server resources than in previous versions. I have experienced up to 35% of the CPU time being spent for villager behavior calculations on a server with lots of villager farms. This patch comes with two optimizations to tackle this problem.\r\n\r\nThe villager pathfinding searches for structures in villages a villager might navigate to (e.g. lecterns). By default, this scans all chunk sections in a horizontal range of 48 blocks. The vanilla implementation uses a very complex chain of streams performing lots of redundant computations. Furthermore, way more chunk sections are checked than actually necessary. This patch contains a rewritten version of this algorithm, which should be about 10 times faster and reduces the pressure on the garbage collector.\r\nUsing the default configuration, the behavior should not differ from vanilla, however lowering \"villageSearchRadius\" in the \"paper.yml\" should boost the performance significantly with just a little impact on the gameplay.\r\n\r\nFurthermore, this patch adds the option to modify the \"cooldown\" between consecutive pathfinding calls to the same villager by modifying \"villagerBehaviorMinCooldown\" and\r\n\"villagerBehaviorMaxCooldown\". The cooldown will be a random number of ticks between these two values. The default config values do not change the vanilla behavior at all.\r\n\r\nThis is my first contribution to paper and I hope this pr matches all requirements. If there is anything wrong, please let me know :)",
    "head_branch": "optimized-villager-pathfinding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ada5d9087c4d6d376e00",
    "number": 4914,
    "body": "Many servers tend to restart at a fixed time at xx:00 which causes an uneven distribution of requests on the bStats backend. To circumvent this problem, this commit introduces some randomness for the initial and second delay.\r\n\r\nThis matches the behavior of the bStats Metrics class version 1.8.",
    "head_branch": "bstats-random-delay",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Adjust bStats data sending delay (#4914)\n\nMany servers tend to restart at a fixed time at xx:00 which causes an\r\nuneven distribution of requests on the bStats backend. To circumvent\r\nthis problem, this commit introduces some randomness to the initial\r\nand second delay."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ada6d9087c4d6d376e01",
    "number": 4913,
    "body": "Removes unused unsafe utils, as suggested by billy\r\n\r\n(they cause issues if you compile with java 11, and dum warnings)",
    "head_branch": "make-paper-great-again",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove Paper's UnsafeUtils (#4913)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ada7d9087c4d6d376e02",
    "number": 4911,
    "body": "Remove duplicate JavaDocs - At some point upstream decided to fix some of their JD errors/warnings, so now we have duplicate tags, bringing new warnings.\r\nAlso add missing `@param` for ItemStack.deserializeBytes",
    "head_branch": "javadoc-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "JavaDoc fixes\n\nRemove duplicate JavaDocs - At some point upstream decided to fix some of their JD errors/warnings, so now we have duplicate tags, bringing new warnings.\nAlso add missing `@param` for ItemStack.deserializeBytes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ada8d9087c4d6d376e03",
    "number": 4907,
    "body": "Currently, if someone wants to get all sign BlockState instances in a chunk, they end up parsing BlockEntity data of *all* BlockEntities in the chunk.\r\n\r\nThis means that a simple task like scanning sign lines ends up loading the contents of every container.\r\n\r\nThis API adds another method that takes a `Predicate<Block>`, to allow plugins to filter down by factors such as material, position, biome, etc. Due to the non-certain number of results here, some optimisations from the non-predicate version had to be omitted (pre-allocating array size).",
    "head_branch": "feature/block-predicate-tes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add API to get Tile Entities in a Chunk by Predicate"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ada9d9087c4d6d376e04",
    "number": 4905,
    "body": "Mojang already has implemented invulnerability of EntityItem's to fire, so why not cactus? It is completely counter-intuitive to have most of the items in game be destroyed by cactus.\r\n\r\nI have kept the implementation similar to how they have inplemented fire invulnerability. The criteria to destory/retain items are as follows:\r\n\r\n**Retain:**\r\n- all rocks\r\n- all metal ores (except gold)\r\n- all metal nuggets/ingots/blocks (except gold)\r\n- all brick and nether brick variants\r\n- rare and epic rarity items (elytra/dragon head/beacon/nether star/etc.)\r\n- command blocks/structure blocks/ jigsaw blocks\r\n- other items that use the above materials\r\n- petrified oak slab\r\n- lever\r\n- special rails\r\n- redstone items (except redstone ore/dust/block, repeater/comparator)\r\n- glazed terracotta\r\n- chains/iron bars\r\n- ancient debris and netherite stuff\r\n\r\n**Destroy**\r\n- all foodstuff\r\n- purpur stuff (cuz purpur is technically made from 4 chorus fruit)\r\n- prismarine stuff (prismarine is technically guardian fish scales)\r\n- lapis stuff\r\n- netherack\r\n- redstone ore/dust/block\r\n- infested blocks\r\n- repeater/comparator\r\n- gold stuff\r\n- leather stuff\r\n- mob drops and items made from drops\r\n- sand/red sand/ concrete powder/ terracotta (hard clay)/ clay\r\n- crossbow (it techincally has tripwire which has iron)\r\n- blocks that are made from a combination of above stuff\r\n\r\nI might have forgotten to list a few of the items, but if they follow the above logic, they will be sorted accordingly",
    "head_branch": "Made-some-items-invulnerable-to-cactus",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adaad9087c4d6d376e05",
    "number": 4903,
    "body": "On line 260 of 0368-Asynchronous-chunk-IO-and-loading.patch it has the typo \"synchronosuly\" I simply changed that to \"synchronously\". Nothing big, but I simply noticed this when I was looking in PaperConfig.java",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typo in 0368-Asynchronous-chunk-IO-and-loading.patch"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adabd9087c4d6d376e06",
    "number": 4902,
    "body": "Hey!\r\n\r\nMy name is Fruxz and I'm happy to introduce my second real contribution here: The SoundBuilder!\r\n\r\n# Why did I make this?\r\n\r\nI program very much and very gladly with the PaperAPI and have learned to appreciate the ParticleBuilder very much over the time. Well then, I've been doing more and more with the ParticleBuilder, however it always upset me that such a brilliant little thing doesn't exist for sounds as well.\r\n\r\n# And what is the SoundBuilder now?\r\n\r\nMy SoundBuilder is actually the version of the ParticleBuilder just made for sounds. That means that with the Sound Builder you can create sound configurations, define receivers, specify volume, specify pitch and play the sound in one place, just as easy and simple as with the ParticleBuilder!\r\n\r\n# What I hope\r\n\r\nI hope that the SoundBuilder will be given a chance, because I and probably many others would really like this little parallel between the actually already very similar sounds and particles. It would also design an even more consistent API than it already is. \r\n\r\n# Conclusion\r\n\r\nFirst of all, thanks to you for looking at my text and my changes in the first place. I'm just trying to help Paper with my ideas and the little things that still bother me about the API, to get better and better for me and for others. I wish you still a wonderful day or a wonderful evening!\r\n\r\nWith kind regards\r\n@TheFruxz",
    "head_branch": "feature/SoundBuilder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adacd9087c4d6d376e07",
    "number": 4901,
    "body": "md_5: we don't break backwards compatibility\r\nalso md_5: *breaks backwards compatibility*",
    "head_branch": "craftsound",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix CraftSound backwards compatibility"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adadd9087c4d6d376e08",
    "number": 4898,
    "body": "Should fix #4891.\r\nOriginally these functions were located such that they would still execute if the event got canceled. This is my first time contributing to Paper so let me know if I can do anything better.",
    "head_branch": "fix-entity-shoot-bow-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adaed9087c4d6d376e09",
    "number": 4897,
    "body": "Tried making it so each plugin could also be its own datapack last night. Just create a folder named datapack in the plugin data folder, put some data in it and then it'll load onto the server [plugins](https://cdn.discordapp.com/attachments/308735693587349505/788595783531364362/unknown.png) seemed to continue working on /minecraft:reload.\r\n\r\nit's draft because I didn't finish working on it, just made it functional and so the question I have is this something that makes sense to have? more of the game is being run through these datapacks and they can do quite a bit so I feel it makes sense to allow plugin to also be a datapack if it wants to be. This is probably something that would work well with https://github.com/PaperMC/Paper/pull/3625 assuming that machine went with hooking into the serialization system. \r\n\r\nIf this is wanted what I would want to add is:\r\n- ability to get the datapack folder,\r\n- ability to change the datapack folder name so it's not just \"datapack,\"\r\n\r\nThe only current issue I noticed was that when you restart the server the plugin datapacks give a warning in the console because they are not loaded for the first pass (in the Main class when the game first populates the \"vanilla/builtin\" datapack) ",
    "head_branch": "datapack",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adafd9087c4d6d376e0a",
    "number": 4896,
    "body": "",
    "head_branch": "4140",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Let some more packets be send immediately, closes #4140 (#4896)\n\nSigned-off-by: MiniDigger <admin@minidigger.me>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adb0d9087c4d6d376e0b",
    "number": 4893,
    "body": " Entities with a player riding them should get the tracking range of the player to avoid visual glitches, fixes #4680",
    "head_branch": "fix-4680",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adb2d9087c4d6d376e0c",
    "number": 4890,
    "body": "Now datapacks with custom biomes and plugins that check based on the enum can potentially play nice together if they use the key instead.",
    "head_branch": "biomekey",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adb3d9087c4d6d376e0d",
    "number": 4889,
    "body": "Helps implementing a cosmetical fix to https://bugs.mojang.com/browse/MC-26678\r\n\r\nExample (for [DamageTilt mod](https://github.com/Charles445/DamageTilt)):\r\n```kotlin\r\n    @EventHandler\r\n    fun on(event: EntityKnockbackByEntityEvent) {\r\n        val victim = event.entity as? Player ?: return\r\n\r\n        if (!victim.listeningPluginChannels.contains(\"damagetilt:attackedatyaw\")) {\r\n            return\r\n        }\r\n\r\n        // Send hurt direction\r\n        victim.sendPluginMessage(plugin, \"damagetilt:attackedatyaw\", ByteArrayOutputStream().also { baos ->\r\n            DataOutputStream(baos).also { dos ->\r\n                dos.writeFloat(victim.getHurtDirection())\r\n            }\r\n        }.toByteArray())\r\n    }\r\n```",
    "head_branch": "feature/expose-hurt-direction",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expose LivingEntity hurt direction"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623adb4d9087c4d6d376e0e",
    "number": 4885,
    "body": "In Minecraft 1.16, villagers consume a lot more server resources than in previous versions. I have experienced up to 35% of the CPU time being spent for villager behavior calculations on a server with lots of villager farms. This patch comes with two optimizations to tackle this problem.\r\n\r\nThe villager pathfinding searches for structures in villages a villager might navigate to (e.g. lecterns). By default, this scans all chunk sections in a horizontal range of 48 blocks. The vanilla implementation uses a very complex chain of streams performing lots of redundant computations. Furthermore, way more chunk sections are checked than actually necessary. This patch contains a rewritten version of this algorithm, which should be about 10 times faster and reduces the pressure on the garbage collector. \r\nUsing the default configuration, the behavior should not differ from vanilla, however lowering \"villageSearchRadius\" in the \"paper.yml\" should boost the performance significantly with just a little impact on the gameplay.\r\n\r\nFurthermore, this patch adds the option to modify the \"cooldown\" between consecutive pathfinding calls to the same villager by modifying \"villagerBehaviorMinCooldown\" and\r\n \"villagerBehaviorMaxCooldown\". The cooldown will be a random number of ticks between these two values. The default config values do not change the vanilla behavior at all.\r\n\r\nThis is my first contribution to paper and I hope this pr matches all requirements. If there is anything wrong, please let me know :)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adb5d9087c4d6d376e0f",
    "number": 4882,
    "body": "In vanilla, an Armor Stand's held/worn items are dropped using `Block.dropItem` with the BlockPosition +1y above the BlockPosition of the Armor Stand, whereas in CraftBukkit and derivatives, the held/worn items are dropped with the rest of the death drops in the death event, at the entity's position. ([CB diff](https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/browse/nms-patches/EntityArmorStand.patch#128))\r\n\r\nThis patch makes it so that the drops end up in the right location, but also causes the items to be in an EntityDropItemEvent instead of the death event.\r\nIdeally we would still use the death event for all the drops, but I'm not sure the best way to do that while only modifying the drop position of the held/worn items, and not the Armor Stand item itself.\r\n\r\nFixes #4743 \r\n\r\nalternative solution: refactor death drops to use EntityItem instead of ItemStack. API can still modify the ItemStack through the craftMirror, and although we can't expose the EntityItem to API, it shouldn't cause any issues.",
    "head_branch": "armorstand-fix-drops",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adb6d9087c4d6d376e10",
    "number": 4879,
    "body": "closes #4878",
    "head_branch": "fix-4878",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix 4878 by always calling events using bukkit singleton"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adb7d9087c4d6d376e11",
    "number": 4874,
    "body": "Fixes #4864 ",
    "head_branch": "port-gs4query",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Reimplement GS4QueryEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adb8d9087c4d6d376e12",
    "number": 4873,
    "body": "This fixes the CB bug where curing a villager that is holding equipment (weapons/armor) causes the items to disappear instead of drop to the ground by forcing the items to drop instead of going to the drops field for the EntityDeathEvent which does not fire for entity conversions.\r\n\r\nhttps://hub.spigotmc.org/jira/browse/SPIGOT-6207",
    "head_branch": "SPIGOT-6207",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix curing villager makes equipment disappear"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adb9d9087c4d6d376e13",
    "number": 4872,
    "body": "This fixes item position desync (MC-4) by running the item coordinates\r\nthrough the encryption/decryption methods of the packet that causes the\r\nprecision loss, which forces the server to lose the same precision as\r\nthe client keeping them in sync.",
    "head_branch": "mc-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "MC-4 Fix item position desync"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adbad9087c4d6d376e14",
    "number": 4871,
    "body": "This fixes the exploit used to gain absurd trading discounts with infecting\r\nand curing a villager on repeat by simply resetting the reputation when it\r\nis cured.",
    "head_branch": "mc-181190",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix MC-181190 curing zombie villager discount exploit (#4871)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adbbd9087c4d6d376e15",
    "number": 4868,
    "body": "Closes #4864",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adbcd9087c4d6d376e16",
    "number": 4867,
    "body": "the server patch for the packet was removed in 62a5faf3 but the event wasn't deprecated. \r\nI also removed the reference to it in PlayerConnection that was kept because another patch had modified it. ",
    "head_branch": "fix/deprecate-illegal-packet-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "deprecate IllegalPacketEvent (#4867)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623adbdd9087c4d6d376e17",
    "number": 4866,
    "body": "Started replacing some of the sendMessage(String) that Paper's patches add. Only a tiny bit are done here but idk if all of them should be converted to adventure components or just left using the legacy string methods.",
    "head_branch": "feature/adventure-main",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adbed9087c4d6d376e18",
    "number": 4865,
    "body": "Make the `/paper itemdump` command use the same formatter as `/data get` to make it look nice in chat/console.",
    "head_branch": "feature/better-itemdump",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "colorful itemdump"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adbfd9087c4d6d376e19",
    "number": 4863,
    "body": "Closes #2411 (sorta)\r\nProvides an api for setting spawners nerf'd status. If spigot's setting is true, that overrides it.",
    "head_branch": "feature/spawner-api-nerf-mobs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adc0d9087c4d6d376e1a",
    "number": 4861,
    "body": "### Methods added\r\n- PaperAdventure#asAdventure(EnumChatFormat):TextColor\r\n- PaperAdventure#asVanilla(TextColor):EnumChatFormat\r\n- CommandBlock#name(Component)\r\n- Player#playerListName(Component)\r\n- Player#playerListName():Component\r\n- Player#playerListHeader():Component\r\n- Player#playerListFooter():Component\r\n- Player#sendSignChange(Location,List\\<Component\\>)\r\n- Player#sendSignChange(Location,List\\<Component\\>,DyeColor)\r\n- Objective#displayName():Component\r\n- Objective#displayName(Component)\r\n- Scoreboard#registerNewObjective(String,String,Component)\r\n- Scoreboard#registerNewObjective(String,String,Component,RenderType)\r\n- Team#displayName():Component\r\n- Team#displayName(Component)\r\n- Team#prefix():Component\r\n- Team#prefix(Component)\r\n- Team#suffix():Component\r\n- Team#suffix(Component)\r\n- Team#color():NamedTextColor\r\n- Team#color(NamedTextColor)\r\n- Enchantment#displayName(int):Component\r\n- Player#locale():Locale\r\n\r\n\r\n(And deprecated all methods the ones above replaced)\r\n\r\n",
    "head_branch": "feature/adventure-main",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "bringing more stuff on the Adventure (#4861)\n\n* bunch o'stuff\r\n\r\n* added a few missing deprecations\r\n\r\n* added some more methods"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623adc1d9087c4d6d376e1b",
    "number": 4860,
    "body": "",
    "head_branch": "enchantables-materialtag",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add a Enchantable MaterialTag"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623adc2d9087c4d6d376e1c",
    "number": 4859,
    "body": "- Server#shutdownMessage\r\n- ~~Server#broadcastMessage(Component)~~\r\n- Server#broadcast(Component, String (perm))\r\n- Server#createMerchant(Component)\r\n\r\n- Sign#lines()\r\n- Sign#line(int)\r\n- Sign#line(int, Component)",
    "head_branch": "feature/adventure-main",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "an even better Adventure awaits (#4859)\n\n* bunch of Server/Bukkit methods\r\n\r\n* signs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623adc3d9087c4d6d376e1d",
    "number": 4857,
    "body": "Pointless warnings if the owner has already seen the message and knows about it",
    "head_branch": "java-11-warning-toggle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adc4d9087c4d6d376e1e",
    "number": 4856,
    "body": "Adds component support for:\r\n- SignChangeEvent\r\n- PlayerDeathEvent\r\n- PlayerJoinEvent\r\n- PlayerKickEvent\r\n- PlayerLoginEvent\r\n- PlayerQuitEvent\r\n- BroadcastMessageEvent\r\n- PlayerHandshakeEvent\r\n- ProfileWhitelistVerifyEvent\r\n- UnknownCommandEvent\r\n- PlayerPreLoginEvent\r\n- AsyncPlayerPreLoginEvent\r\n- PlayerLocaleChangeEvent\r\n- ServerListPingEvent\r\n- PaperServerListPingEvent\r\n\r\n(I *think* that is all events that need to be updated **except** (Async)PlayerChatEvent)",
    "head_branch": "feature/adventure-events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Adventure events (#4856)\n\n* SignChangeEvent\r\n\r\n* PlayerDeathEvent\r\n\r\n* PlayerJoinEvent\r\n\r\n* PlayerKickEvent\r\n\r\n* PlayerLoginEvent\r\n\r\n* PlayerQuitEvent\r\n\r\n* BroadcastMessageEvent\r\n\r\n* PlayerHandshakeEvent\r\n\r\n* ProfileWhitelistVerifyEvent\r\n\r\n* UnknownCommandEvent\r\n\r\n* (Async)PlayerPreLoginEvent\r\n\r\n* PlayerLocaleChangeEvent\r\n\r\n* ServerListPingEvent\r\n\r\n* PaperServerListPingEvent"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623adc5d9087c4d6d376e1f",
    "number": 4852,
    "body": "relevant to #4830 / #4842",
    "head_branch": "additions/feature/adventure",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "added Server#motd and BookMeta#pages (#4852)\n\n* ok, actually implemented Server#motd and BookMeta stuff\r\n\r\n* added 3 missing NotNulls"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623adc7d9087c4d6d376e20",
    "number": 4850,
    "body": "Just simplifies debugging. No need to remember to comment out stuff in the pom.xml and then forget you commented it out and the annoyingness that ensues. ",
    "head_branch": "feature/no-relocation-profile",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adc7d9087c4d6d376e21",
    "number": 4846,
    "body": "Before you had to scroll up a bunch to see missing nullability annotations. Now, there is a nice printout right at the bottom. Apparently registering an empty class that extended junit's runlistener is enough to make the printout significantly better. I tried it w/o the empty class and it didn't change from the old style.\r\n\r\nI also fixed a grammatical error in the error message.\r\n\r\n![image](https://user-images.githubusercontent.com/15055071/101094803-d2413f00-3571-11eb-8202-2b6f3953aefc.png)\r\n",
    "head_branch": "fix/annotation-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Improved the annotation test output"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adc8d9087c4d6d376e22",
    "number": 4845,
    "body": "Bug with ea versions. for example, the string it was trying to parse was `15-ea`. ",
    "head_branch": "fix/jvm-checker",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fixed bug in jvm checker (#4845)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adc9d9087c4d6d376e23",
    "number": 4843,
    "body": "Fixes #3949 \r\n\r\nThis is the same fix that was merged for 1.16 in #3764 ",
    "head_branch": "1.15.2/fix/spawner-spawn-reason",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fixed spawn reason for spawners (#4843)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adcbd9087c4d6d376e24",
    "number": 4842,
    "body": "This pull request implements [Adventure](https://github.com/KyoriPowered/adventure).\r\n\r\nTest build: https://canary.discord.com/channels/289587909051416579/748269415497465927/788124005017321472",
    "head_branch": "feature/adventure",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "We're going on an Adventure! (#4842)\n\nCo-authored-by: Jake Potrebic <jake.m.potrebic@gmail.com>\r\nCo-authored-by: zml <zml@stellardrift.ca>\r\nCo-authored-by: Mariell Hoversholm <proximyst@proximyst.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623adccd9087c4d6d376e25",
    "number": 4838,
    "body": "closes #2662 \r\n\r\nI know the hopper code is prickly cause you want it to be as performant as possible. Don't think this change really adds much if anything. \r\n\r\nI tested it both pushing into other inventories, and pulling from other inventories.\r\n\r\nFixes #6329 ",
    "head_branch": "fix/hoppers-max-stack-size",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make hoppers respect inventory max stack size (#4838)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adcdd9087c4d6d376e26",
    "number": 4837,
    "body": "closes #2910\r\n\r\nTaken from #2982",
    "head_branch": "feature/per-world-spawn-limits",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Adds per-world spawn limits (#4837)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adced9087c4d6d376e27",
    "number": 4836,
    "body": "closes #3484 ",
    "head_branch": "fix/tnt-height-nerf-minecarts",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "added tnt minecarts to the tnt height nerf"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adcfd9087c4d6d376e28",
    "number": 4835,
    "body": "Closes #3580 ",
    "head_branch": "feature/config-immune-effects",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add config for mobs immune to default effects (#4835)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623add0d9087c4d6d376e29",
    "number": 4834,
    "body": "Paper's is off by default, and this is literally the first thing I always do when I spin up a new server for whatever reason. Really clears up the initial logs, especially if you have like 20 worlds or something crazy. ",
    "head_branch": "feature/spigot-verbose-world",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Turn off spigot verbose world by default"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623add1d9087c4d6d376e2a",
    "number": 4833,
    "body": "closes #4244 \r\n\r\nAdds an event plugins can use to re-register recipes, events. The ServerLoadEvent did not cover all situations in which a plugin would need to re-register stuff",
    "head_branch": "feature/ServerResourcesReloadedEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added ServerResourcesReloadedEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623add2d9087c4d6d376e2b",
    "number": 4832,
    "body": "closes #3397 ",
    "head_branch": "feature/weather-events-cause",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add cause to Weather/ThunderChangeEvents (#4832)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623add3d9087c4d6d376e2c",
    "number": 4829,
    "body": "relevant: #4828 ",
    "head_branch": "piglin-guard-chest",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Config option for Piglins guarding chests (#4829)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623add4d9087c4d6d376e2d",
    "number": 4825,
    "body": "This fixes that the provides of a plugin are listed before its name and not after it like intended because 0063-Make-plugins-list-alphabetical.patch was not adjusted to that upstream change.\r\n\r\nThis also makes 0228-Remove-unnecessary-space-for-provided-plugins.patch unnecessary as that only applied to the wrong positioning, the space is needed in the proper positioning.",
    "head_branch": "pr/plugins-command",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix plugin provides not being listed behind name in /plugins (#4825)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623add5d9087c4d6d376e2e",
    "number": 4821,
    "body": "",
    "head_branch": "feature/World-settings-for-mobs-picking-up-loot",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added world settings for mobs picking up loot"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623add6d9087c4d6d376e2f",
    "number": 4820,
    "body": "reviving https://github.com/PaperMC/Paper/pull/3205 since the repo is borked or smth?\r\n\r\nalso added a way to disable the sound effect",
    "head_branch": "BlockFailedDispenseEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add BlockFailedDispenseEvent\n\nCo-authored-by: MiniDigger <admin@minidigger.me>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623add7d9087c4d6d376e30",
    "number": 4817,
    "body": "",
    "head_branch": "pr_shellcheck_testserver",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623add8d9087c4d6d376e31",
    "number": 4815,
    "body": "Should close #4785 ",
    "head_branch": "feature/PlayerStonecutterRecipeSelectEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added PlayerStonecutterRecipeSelectEvent\n\nCo-Authored-By: MiniDigger <admin@minidigger.me>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623add9d9087c4d6d376e32",
    "number": 4813,
    "body": "https://ptb.discord.com/channels/289587909051416579/555462289851940864/781918543159361577\r\n\r\nFAWE and who knows what else causes this",
    "head_branch": "fix-lol",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix cast check (#4813)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623addad9087c4d6d376e33",
    "number": 4812,
    "body": "",
    "head_branch": "coral-tags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Material Tags for Coral, Coral Fangs and Coral Blocks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623addbd9087c4d6d376e34",
    "number": 4809,
    "body": "",
    "head_branch": "always-spawn-dragon-egg",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add toggle for always placing the dragon egg"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623addcd9087c4d6d376e35",
    "number": 4808,
    "body": "This PR adds and implements `TargetHitEvent`, which is called when a target block is hit by a projectile. Cancelling the event stops the target block from emitting a redstone signal, and if the projectile's shooter is a player, stops the player from receiving advancement criteria. The event also includes methods to get and set the resulting redstone signal strength from the target hit.",
    "head_branch": "target-hit-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add and implement cancellable TargetHitEvent for when Target Blocks are hit by Projectiles"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623adddd9087c4d6d376e36",
    "number": 4807,
    "body": "",
    "head_branch": "feature/PlayerLoomPatternSelectEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added PlayerLoomPatternSelectEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623added9087c4d6d376e37",
    "number": 4806,
    "body": "Upstream has released updates that appear to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n721e678d Fix javadoc in previous commit\r\n19b7b7bd #561: Add clear weather World API\r\n5929c808 #552: Add the ability to retrieve hit, step, fall, and other sounds from blocks.\r\n\r\nCraftBukkit Changes:\r\ne1ebdd92 #771: Add clear weather World API\r\n424598d2 #752: Add the ability to retrieve hit, step, fall, and other sounds from blocks.",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623addfd9087c4d6d376e38",
    "number": 4804,
    "body": "Config option to help reduce disk usage where players try to fly excessively far, often doing so above y=256",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ade0d9087c4d6d376e39",
    "number": 4803,
    "body": "",
    "head_branch": "feature/expose-world-spawn-angle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expose world spawn angle (#4803)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ade1d9087c4d6d376e3a",
    "number": 4801,
    "body": "This broke in 1.16.1, when upstream changed stuff around and introduced this delegate field.\r\n\r\nCloses #4097",
    "head_branch": "fix-vanilla-delegation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Delegation to vanilla chunk gen\n\nThis broke in 1.16.1, when upstream changed stuff around and introduced this delegate field.\n\nCloses #4097"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ade2d9087c4d6d376e3b",
    "number": 4798,
    "body": "",
    "head_branch": "feature/lectern-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added PlayerLecternPageChangeEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ade3d9087c4d6d376e3c",
    "number": 4796,
    "body": "",
    "head_branch": "fix-commit-message-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Fix an error in commit message when updating upstream (#4796)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ade4d9087c4d6d376e3d",
    "number": 4794,
    "body": "Adds a config option to disable the server gui, whether or not the `nogui` flag is passed at startup.\r\n\r\ncc @JRoy ",
    "head_branch": "gui-config",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ade5d9087c4d6d376e3e",
    "number": 4792,
    "body": "This fixes #2659 by limiting the number of projectiles to save/load in each chunk. Limits are counted per entity type, i.e. a limit of 5 means that 5 arrows, 5 snowballs, 5 tridents, etc. will be allowed to be saved/loaded per chunk. The default value of -1 disables the limit.",
    "head_branch": "projectile-save-limit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add a config option to limit the number of entities of each type to load/save in a chunk (#4792)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ade7d9087c4d6d376e3f",
    "number": 4789,
    "body": "for https://github.com/PaperMC/Paper/issues/4761\r\nhas paper comments now",
    "head_branch": "burnit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ade8d9087c4d6d376e40",
    "number": 4788,
    "body": "This was more painful than expected.\r\n\r\nI looked a bit around, tropical fish bucket meta and spawn egg meta also use the item tag internally, but they don't respect the invisible field in it for some reason, so I was not sure to make them extend EntityTagMeta too.\r\n\r\nMaybe we can make them extend but add a disclaimer to the individual methods to indicate where they are supported? Or should I rename this to InvisibilityMeta?",
    "head_branch": "feature/entitytagmeta",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ade9d9087c4d6d376e41",
    "number": 4786,
    "body": "Mojang fixed it in [MC-63720](https://bugs.mojang.com/browse/MC-63720)\r\n\r\nFixes #4747",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Remove Waving banner fix (#4786)\n\nMojang fixed it in MC-63720"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adead9087c4d6d376e42",
    "number": 4784,
    "body": "Fixes this annoying thing ***every time*** a player destroys a chest in water.\r\n\r\n> [21:19:09 ERROR]: Block at 10, 62, -195 is Block{minecraft:water} but has net.minecraft.server.v1_16_R3.TileEntityChest@4db2bcbf. Bukkit will attempt to fix this, but there may be additional damage that we cannot recover.\r\n\r\nFixes #3318 \r\nFixes #4729 ",
    "head_branch": "te-chest-water",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix console spam when removing chests in water"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adebd9087c4d6d376e43",
    "number": 4783,
    "body": "Adds a toggle for saving projectiles in chunks, useless for lobbies, spit/arrow/firework etc crashes.\r\n\r\nFixes #2659 \r\nCan fix [MC-125757](https://bugs.mojang.com/browse/MC-125757)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adecd9087c4d6d376e44",
    "number": 4782,
    "body": "When running `./paper patch` on my mac, I noticed in the init.sh script that I was getting an error during replacement of the `\\r` character. But I found a fix in the CraftBukkit scripts so I just moved that over to the init.sh script. \r\n\r\n\r\nEDIT: just to note, I tested it on my mac, as well as my linux machine and it works fine for both those now. no errors",
    "head_branch": "fix/cr-replacement-for-bsd-sed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] fixed sed -i for bsd sed (#4782)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adedd9087c4d6d376e45",
    "number": 4781,
    "body": "Creating this PR for discussion;\r\n\r\nCurrently, the configuration does not take into account the fact that the nether portals search radius is nerf'd by /8 when heading into the nether, this causes issues between vanilla as our code does not take into account for this, and users without knowing would need to create settings for the nether to fix this behavior\r\n\r\nthe alternative is that we hard-apply this operation in the nether, which creates its own caveats such as hidden manipulation to the config, and issues with already created portals, this PR allows people to determine if they'd prefer the existing (broken by default) behavior in order to keep players happy or allow their config changes to apply as-is, etc; This is the only real \"clean\" way that I could see to do this without having to go into the art of trying to define custom configs for worlds\r\n\r\n(I can totes spell stuff properly)",
    "head_branch": "nerf-nether-portal-search-config",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "nerf nether search radius config (#4781)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adeed9087c4d6d376e46",
    "number": 4779,
    "body": "Upstream has released updates that appears to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nf47abd88 SPIGOT-6242: Fix some file line endings\r\nde96535b SPIGOT-6234: enum classes don't serialize properly when implementing ConfigurationSerializable\r\n\r\nCraftBukkit Changes:\r\n4475707d SPIGOT-6244: /spawnpoint ignores angle\r\n8b3b096d SPIGOT-6242: Fix some file line endings\r\n4b33c749 SPIGOT-6186: Canceling a CreatureSpawnEvent​ results in a \"Unable to summon entity due to duplicate UUIDs\" error\r\n2b3ca726 SPIGOT-6236: Vehicle passenger portal cooldown does not change",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#4779)\n\nUpstream has released updates that appears to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nf47abd88 SPIGOT-6242: Fix some file line endings\r\nde96535b SPIGOT-6234: enum classes don't serialize properly when implementing ConfigurationSerializable\r\n\r\nCraftBukkit Changes:\r\n4475707d SPIGOT-6244: /spawnpoint ignores angle\r\n8b3b096d SPIGOT-6242: Fix some file line endings\r\n4b33c749 SPIGOT-6186: Canceling a CreatureSpawnEvent​ results in a \"Unable to summon entity due to duplicate UUIDs\" error\r\n2b3ca726 SPIGOT-6236: Vehicle passenger portal cooldown does not change"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adefd9087c4d6d376e47",
    "number": 4778,
    "body": "fixes #4774 \r\n\r\nIt seems that a ton of commands were missing their default permissions, so I added those.",
    "head_branch": "fix/new-command-perms",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "added missing default perms"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adf0d9087c4d6d376e48",
    "number": 4777,
    "body": "Fixing issue #4720 \r\nAdds `WorldBorderChangeEvent`, `WorldBorderStartChangeEvent`, `WorldBorderFinishChangeEvent`, `StaticWorldBorderChangeEvent`, `WorldBorderCenterChangeEvent`, and relevant code to `n.m.s.WorldBorder`\r\n\r\nTo clear up any confusion, `StaticWorldBorderChangeEvent` is called whenever the world border is changed with a delay of 0, or `setSize` is called in `n.m.s.WorldBorder`, while `WorldBorderChangeEvent, WorldBorderStartChangeEvent, and WorldBorderFinishChangeEvent`  events are called whenever the world border is changed with a transition, or when `transitionSizeBetween` is called in `n.m.s.WorldBorder`.",
    "head_branch": "add-worldborder-events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adf1d9087c4d6d376e49",
    "number": 4773,
    "body": "Developers using these methods will wonder less and reduce time spent debugging because `thenAccept` swallows exceptions in the absence of an exception handler.\r\n\r\nAt present, if a chunk load callback throws an unchecked exception, it will be stored in the CompletableFuture as an exceptional completion, and therefore left unreported.",
    "head_branch": "getchunkatasync-exception-handlers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add exception handlers for getChunkAtAsync convenience methods (#4773)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623adf2d9087c4d6d376e4a",
    "number": 4771,
    "body": "This re-introduces my old seed based feature search patch by backporting Mojang's solution that is used in 1.17 to work around that issue. It basically gets the biome from the seed and checks if the biome can spawn that feature. It's not the exact same as the previous patch (which checked even more spawn conditions than just the biome) but should already give a massive improvement already.",
    "head_branch": "pr/seed-based-feature-search-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Backport feature search improvement from 1.17 (Fixes #2312) (#4771)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adf3d9087c4d6d376e4b",
    "number": 4770,
    "body": "closes #4048\r\n\r\nLocation#toHighestLocation() was still using paper's old heightmap api. This changes it to use bukkits, while deprecating the old method. ",
    "head_branch": "fix/location-highest-location",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Location#getHighestLocation should support Upstream API (#4770)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623adf4d9087c4d6d376e4c",
    "number": 4769,
    "body": "Reimplements #2095, as its source repo was deleted. Credits to @simpleauthority.\r\n\r\n---\r\n\r\nThese patches add the event `PlayerRaidTriggerEvent` that is fired when a player enters a village with the *Bad Omen* effect.\r\n\r\nWhile initially working on this, I noticed that while I was able to cancel the raid that it the raid continued to attempt to start because of the Player's *Bad Omen* status. I've duplicated the effect removal upwards to the conditional which tests if the event is canceled. In this way, the event is fired once per player who enters a village with the *Bad Omen* effect.\r\n\r\nI'm having second thoughts about removing the effect and whether or not this should be deferred to an implementing plugin.\r\n\r\n![https://uwu.whats-th.is/5jNUkat.png](https://uwu.whats-th.is/5jNUkat.png)\r\n\r\n```java\r\n  @EventHandler\r\n  public void onRaidTrigger(PlayerTriggerRaidEvent event) {\r\n    Bukkit.broadcastMessage(event.getPlayer().getName() + \" triggered an event; cancelling\");\r\n    event.setCancelled(true);\r\n  }\r\n```\r\n",
    "head_branch": "pr-2095",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adf5d9087c4d6d376e4d",
    "number": 4768,
    "body": "This adds the requirement of `curl` to CONTRIBUTING.md.\r\n\r\nWhile this may seem obvious to many people, when I installed Debian on my machine, I wasn't able to build Paper and I wasn't able to figure it out until the next day when I needed to install curl for a separate program.",
    "head_branch": "add-curl-contributing-md",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Add `curl` requirement for building paper. (#4768)\n\n* Add curl to contributing.md\r\n\r\n* change semicolons and periods\r\n\r\nCo-authored-by: Mariell <proximyst@proximyst.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adf6d9087c4d6d376e4e",
    "number": 4767,
    "body": "Does part 1 of #1611.\r\n",
    "head_branch": "mobspawner-itemstack-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Support spawning item stacks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623adf7d9087c4d6d376e4f",
    "number": 4766,
    "body": "closes #4031 ",
    "head_branch": "fix/kick-event-leave-msg",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fixed kick event leave message (#4766)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adf8d9087c4d6d376e50",
    "number": 4765,
    "body": "Patch 2 references an unknown field (when they expect all names to be resolvable), which has caused issues in the development of Paperweight / the `feature/mcp` branch upon remapping patches. They're on an ancient version (1.16.1), but would still cause issues when they go forwards to 1.16.4 / later.",
    "head_branch": "fix-patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Patch 2 references an invalid variable"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adf9d9087c4d6d376e51",
    "number": 4764,
    "body": "Closes #614.",
    "head_branch": "collision-option-player-participant",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Collision option for requiring a player participant\n\nCloses #614."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adfad9087c4d6d376e52",
    "number": 4763,
    "body": "The following has been tested:\r\n- Disconnect from menu -> DISCONNECTED\r\n- EssentialsX kick -> KICKED\r\n- Suspend server JVM -> DISCONNECTED\r\n- Suspend client JVM -> TIMED_OUT\r\n- Call #exceptionCaught -> ERRONEOUS_STATE\r\n\r\nSuspension was done through `kill -STOP` and subsequently `kill -CONT`\r\nafter the player has (been) disconnected.\r\n\r\nCloses #254.",
    "head_branch": "quit-reason",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add API for quit reason\n\nThe following has been tested:\n- Disconnect from menu -> DISCONNECTED\n- EssentialsX kick -> KICKED\n- Suspend server JVM -> DISCONNECTED\n- Suspend client JVM -> TIMED_OUT\n- Call #exceptionCaught -> ERRONEOUS_STATE\n\nSuspension was done through `kill -STOP` and subsequently `kill -CONT`\nafter the player has (been) disconnected.\n\nCloses #254."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623adfbd9087c4d6d376e53",
    "number": 4760,
    "body": "`[19:42] Z750: COULD NOT APPLY PROXI`\r\nOK Z I HAVE FIXED IT\r\n\r\nCraftBukkit Changes:\r\n23618b2c SPIGOT-6240: Use correct portal search radius",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit) (#4760)\n\nUpstream has released updates that appears to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n23618b2c SPIGOT-6240: Use correct portal search radius"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adfcd9087c4d6d376e54",
    "number": 4757,
    "body": "This PR makes sure that scaling is applied to the portal search radius.\r\n\r\nThis is consistent with Vanilla behaviour as of 1.16.2, see https://bugs.mojang.com/browse/MC-197538. I tested this change locally on 1.16.4 and it produced the same behaviour as single player.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adfdd9087c4d6d376e55",
    "number": 4756,
    "body": "This fixes the per-world settings on paper.yml not reloading on `/paper reload`. The problem was the world config holds an old reference to the main config. The fix was to simply update the reference so per-world could use the newly reloaded values on `init()`\r\n\r\nThis is only noisy because it adds a line to the config, which force updates every patch afterwards that touched the config too :3 For a clearer view of what I'm changing here, I've already done this to Purpur a long time ago [here](https://github.com/pl3xgaming/Purpur/blob/ver/1.16.4/patches/server/0060-Fix-reloading-paper.yml.patch).",
    "head_branch": "reload",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix per-world settings not reloading (#4756)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adfed9087c4d6d376e56",
    "number": 4755,
    "body": "This bug was introduced in https://github.com/PaperMC/Paper/commit/becb478cd5e25048e3fe8aa9dab5534ccb60e107 (Add ignore discounts API)\r\n\r\nI discovered this through `Merchant#setRecipes` throwing an NPE after updating to Paper-271.",
    "head_branch": "craftmerchantrecipe-frombukkit-npe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix NPE thrown when converting MerchantRecipe from Bukkit to NMS (#4755)\n\nThis bug was introduced in https://github.com/PaperMC/Paper/commit/becb478cd5e25048e3fe8aa9dab5534ccb60e107 (Add ignore discounts API)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623adffd9087c4d6d376e57",
    "number": 4754,
    "body": "Closes #4669 \r\n\r\nPossible change that may be needed, I could only find cases where the IBlockAccess object passed to the bonemeal method was infact an instance of world, and I could only find cases where the IBlockAccess object passed to either of the height check methods in BlockBamboo were also instances of World. so I think all the casts to World from IBlockAccess should be fine, but I'm not sure.\r\n\r\nAlso, maybe this should go in zach's patch (0010) where the cactus and reed configs are.",
    "head_branch": "feature/bamboo-height-config",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "added height config for bamboo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae00d9087c4d6d376e58",
    "number": 4751,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Update IRC information in readme and config (#4751)\n\nCo-authored-by: Mariell <proximyst@proximyst.com>\r\nCo-authored-by: Riley Park <riley.park@meino.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae01d9087c4d6d376e59",
    "number": 4750,
    "body": "Ported:\r\n- <https://github.com/Minevictus/Papercut/blob/ver/1.16.4/patches/api/0010-Ignore-discounts-API.patch>\r\n- <https://github.com/Minevictus/Papercut/blob/ver/1.16.4/patches/server/0017-Ignore-discounts-API.patch>\r\n\r\nThis adds a new API that lets us ignore recipes in discounts. One can for example use this API as follows:\r\n\r\n```java\r\n    for (MerchantRecipe recipe : recipes) {\r\n      ItemStack result = recipe.getResult();\r\n      if (result.getType() != Material.ENCHANTED_BOOK) {\r\n        continue;\r\n      }\r\n\r\n      // Snip: fetch `enchantmentPrice`.\r\n      recipe.setIgnoreDiscounts(!enchantmentPrice.areDiscountsEnabled());\r\n    }\r\n```\r\n\r\nCC: @BillyGalbreath ",
    "head_branch": "ignore-discounts-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add ignore discounts API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ae02d9087c4d6d376e5a",
    "number": 4745,
    "body": "Welcome to episode *n* of mari PRs an upstream update. Today on the agenda, we have a patch by our dear mikroskeem which has been moved upstream.\r\n\r\nSpigot Changes:\r\na19903d2 SPIGOT-520: Add option to disable player data saving",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Spigot) (#4745)\n\nUpstream has released updates that appears to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nSpigot Changes:\r\na19903d2 SPIGOT-520: Add option to disable player data saving"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae03d9087c4d6d376e5b",
    "number": 4744,
    "body": "This simply just uses the ItemStack amount when you pass it to ShapelessRecipe#addIngredient(ItemStack).",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use setAmount for Recipe Amount"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae04d9087c4d6d376e5c",
    "number": 4742,
    "body": "This pr only is a POC how to add the missing language files to the resource directory of the Paper-Server.\r\n\r\n\r\nAt the current state you are able to manually generate localisation file using these command:\r\n`./paper l` or `./paper localization`\r\n\r\nOn phase `generate-resources` the language files are downloaded to the `Paper-Server/target/classes/mojang-translations` and after that shaded into the paper-server.jar. Both the paper-server.jar and the paperclip.jar size increases by around 7MB.\r\n\r\nTODO:\r\n\r\n- move mc-downloader submodule into paper-mc group.\r\n- discus when we download the language files. On one hand they are fresh on build, on the other downloading file every build isn't that perfect. (instead on project checkout download to another folder that is gitignored and copy over on build?)\r\n- Paper comments\r\n\r\n\r\n#2720\r\n",
    "head_branch": "feature/i18n-localization-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae05d9087c4d6d376e5d",
    "number": 4740,
    "body": "Fixes #4674 \r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Item no age & no player pickup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ae06d9087c4d6d376e5e",
    "number": 4738,
    "body": "# Description \r\nThis patch implements a noise cache for the end which significantly reduces the computation time of generation. This results in about a 3x improvement.\r\n\r\nNoise is the largest bottleneck in the ends generation, so by caching this where possible, the end now becomes the fastest world generated out of the three dimensions.\r\n\r\nThe terrain generated remains exactly the same as vanilla (seed for seed).\r\n\r\n# Testing Results\r\nAll testing results were done using [Chunky](https://www.spigotmc.org/resources/chunky.81534/) as a way to test the maximum chunks per second that could be achieved when generating the world.\r\n\r\n**Testing procedure used the following commands on a fresh world using level seed `1`**\r\n```\r\nchunky world world_the_end\r\nchunky center 5000 5000\r\nchunky radius 1000\r\nchunky start\r\n```\r\n**Paper `#261`**  \r\nCompletion time: 280026ms [4 minutes 42 seconds]  \r\nChunks per second: 57 cps\r\n\r\n**Paper `#261` (with this patch)**  \r\nCompletion time: 86997ms [1 minute 24 seconds]  \r\nChunks per second: 185 cps\r\n\r\nThe results are even more significant the larger of a radius you pregenerate, cutting hours upon hours off total world generation time.\r\n\r\n# PR Notes\r\nIt's been years since I've contributed to Paper so forgive me if I missed anything :P I've tried my best to reduce diff as much as possible.\r\n\r\nThe authoring situation on the patch looks silly, but I wanted to credit everyone involved in making this happen as much as possible.",
    "head_branch": "optimization/end-noise-cache",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Significantly improve performance of the end generation\n\nThis patch implements a noise cache for the end which significantly reduces the computation time of generation. This results in about a 3x improvement.\n\nOriginal code by SuperCoder7979 and Gegy in Lithium, licensed under LGPL-3.0 (Source: https://github.com/jellysquid3/lithium-fabric)\n\nCo-authored-by: Gegy <gegy1000@gmail.com>\nCo-authored-by: Dylan Xaldin <Puremin0rez515@gmail.com>\nCo-authored-by: pop4959 <pop4959@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae07d9087c4d6d376e5f",
    "number": 4734,
    "body": "When not signing a book, it will never call the event.\r\nWhen signing the book and cancelled, it may not reflect the cancellation to the client due to the inventory not updating.",
    "head_branch": "fix-playereditbookevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae08d9087c4d6d376e60",
    "number": 4733,
    "body": "I left a couple TODOs around; wasn't expecting such a fast release oops",
    "head_branch": "finish-todos-from-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "OBFHELPERS (#4733)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae09d9087c4d6d376e61",
    "number": 4730,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Fix version for groovy artifact (1.16.4) (#4730)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae0bd9087c4d6d376e62",
    "number": 4728,
    "body": "Creating just to green button it as im not on my PC.",
    "head_branch": "progress/1.16.4",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#4728)\n\nUpstream has released updates that appears to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n30885166 Update to Minecraft 1.16.4\r\n\r\nCraftBukkit Changes:\r\n3af81c71 Update to Minecraft 1.16.4\r\n\r\nSpigot Changes:\r\nf011ca24 Update to Minecraft 1.16.4\r\n\r\nCo-authored-by: Mariell Hoversholm <proximyst@proximyst.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae0cd9087c4d6d376e63",
    "number": 4726,
    "body": "also fixes the IDE debug flag apparently",
    "head_branch": "progress/1.16.4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "(1.16.4) Update note on broken event (#4726)\n\n* Fix IDE Debug JVM Flag for new versions of minecraft\r\n\r\n* Update note on PlayerEditBookEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae0dd9087c4d6d376e64",
    "number": 4723,
    "body": "",
    "head_branch": "living-entity-allow-register-attributes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "living entity allow attribute registration (#4723)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ae0ed9087c4d6d376e65",
    "number": 4722,
    "body": "- Listen to Player un-/track entity\r\n\r\n",
    "head_branch": "player-entity-track-event-untrack-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Player Entity Tracking Events (#4722)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ae0fd9087c4d6d376e66",
    "number": 4719,
    "body": "Related to #4174, #4717.\r\n\r\nAs it stands, `JsonList` throws an NPE on `jsonarray.iterator()` when\r\nthe reader given is at EOF. This means there is an unintelligible\r\nmessage shown to the player:\r\n\r\n```\r\n[16:44:31 ERROR]: Encountered an unexpected exception\r\njava.lang.NullPointerException: Cannot invoke \"com.google.gson.JsonArray.iterator()\" because \"jsonarray\" is null\r\n\tat net.minecraft.server.v1_16_R2.JsonList.load(JsonList.java:192) ~[patched_1.16.3.jar:git-Paper-248]\r\n\tat net.minecraft.server.v1_16_R2.DedicatedPlayerList.y(SourceFile:95) ~[patched_1.16.3.jar:git-Paper-248]\r\n\t...\r\n```\r\n\r\nThis is clearly not understandable to the untrained eye: what is\r\n`jsonarray`? What is `DedicatedPlayerList.y`?\r\n\r\nThis rather does a proper exception message:\r\n\r\n```\r\n[16:42:59 ERROR]: Encountered an unexpected exception\r\njava.lang.NullPointerException: The file \"banned-players.json\" is either empty or corrupt\r\n\tat com.google.common.base.Preconditions.checkNotNull(Preconditions.java:787) ~[paper-1.16.3.jar:git-Paper-\"8e6d90c2d\"]\r\n\tat net.minecraft.server.v1_16_R2.JsonList.load(JsonList.java:190) ~[paper-1.16.3.jar:git-Paper-\"8e6d90c2d\"]\r\n\tat net.minecraft.server.v1_16_R2.DedicatedPlayerList.y(SourceFile:95) ~[paper-1.16.3.jar:git-Paper-\"8e6d90c2d\"]\r\n\t...\r\n```\r\n\r\nIt is still an exception, which server owners may or may not understand,\r\nbut the message now says exactly what went wrong, and who would've\r\nknown, now we know what `DedicatedPlayerList.y` is, and we know what\r\nfile was broken.\r\n\r\nThis is more of a quality of life change, but it is certainly useful to\r\nthe server owners that come into `#paper-help` and the issue tracker\r\n(#4174) to ask for help with unintelligible messages we need to open a\r\npatched Paper project to make any sense out of.",
    "head_branch": "jsonlist-error-msg",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Throw proper exception on empty JsonList file\n\nRelated to #4174, #4717.\n\nAs it stands, `JsonList` throws an NPE on `jsonarray.iterator()` when\nthe reader given is at EOF. This means there is an unintelligible\nmessage shown to the player:\n\n```\n[16:44:31 ERROR]: Encountered an unexpected exception\njava.lang.NullPointerException: Cannot invoke \"com.google.gson.JsonArray.iterator()\" because \"jsonarray\" is null\n\tat net.minecraft.server.v1_16_R2.JsonList.load(JsonList.java:192) ~[patched_1.16.3.jar:git-Paper-248]\n\tat net.minecraft.server.v1_16_R2.DedicatedPlayerList.y(SourceFile:95) ~[patched_1.16.3.jar:git-Paper-248]\n\t...\n```\n\nThis is clearly not understandable to the untrained eye: what is\n`jsonarray`? What is `DedicatedPlayerList.y`?\n\nThis rather does a proper exception message:\n\n```\n[16:42:59 ERROR]: Encountered an unexpected exception\njava.lang.NullPointerException: The file \"banned-players.json\" is either empty or corrupt\n\tat com.google.common.base.Preconditions.checkNotNull(Preconditions.java:787) ~[paper-1.16.3.jar:git-Paper-\"8e6d90c2d\"]\n\tat net.minecraft.server.v1_16_R2.JsonList.load(JsonList.java:190) ~[paper-1.16.3.jar:git-Paper-\"8e6d90c2d\"]\n\tat net.minecraft.server.v1_16_R2.DedicatedPlayerList.y(SourceFile:95) ~[paper-1.16.3.jar:git-Paper-\"8e6d90c2d\"]\n\t...\n```\n\nIt is still an exception, which server owners may or may not understand,\nbut the message now says exactly what went wrong, and who would've\nknown, now we know what `DedicatedPlayerList.y` is, and we know what\nfile was broken.\n\nThis is more of a quality of life change, but it is certainly useful to\nthe server owners that come into `#paper-help` and the issue tracker\n(#4174) to ask for help with unintelligible messages we need to open a\npatched Paper project to make any sense out of.\n\nCheck state of jsonarray instead of checkNotNull\n\nCo-authored-by: Riley Park <riley.park@meino.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae10d9087c4d6d376e67",
    "number": 4718,
    "body": "Fixes #4298.\r\n\r\nTuinity patch:\r\nhttps://github.com/Spottedleaf/Tuinity/blob/576e2cc1af2bb0b9768da2b11871044801d63099/patches/server/0047-Fix-ghost-blocks-in-ticking-view-distance.patch",
    "head_branch": "ghost-block-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix ghost blocks in ticking view distance\n\nFixes #4298.\n\nTuinity patch:\nhttps://github.com/Spottedleaf/Tuinity/blob/576e2cc1af2bb0b9768da2b11871044801d63099/patches/server/0047-Fix-ghost-blocks-in-ticking-view-distance.patch"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae11d9087c4d6d376e68",
    "number": 4717,
    "body": "As it stands, `JsonList`s will throw NPEs if the file is empty, because GSON's `fromJson` returns `null` if the supplied `Reader` is at EOF. This usually means a botched file was provided, but a `null` is supposed to *only* happen in this specific case, so it's safe to assume that no data is also a safe or intended state.\r\n\r\nThis is an issue with all the JSON files (e.g. `banned-players.json`) with lists throwing NPEs when they've been nuked.\r\n\r\nRelated to #4174.",
    "head_branch": "jsonlist-npe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae12d9087c4d6d376e69",
    "number": 4715,
    "body": "Zstd using zstd-jni: https://github.com/luben/zstd-jni\r\nLZ4 using lz4-java: https://github.com/lz4/lz4-java\r\n\r\nAdded new command-line option, --forceWrite, which will forcibly write the chunk/flush to disk regardless of whether or not the chunk has actually changed in a --forceUpgrade.\r\nNew compression only happens when a chunk is saved, so running a --forceUpgrade AND --forceWrite may be desirable.\r\n\r\nNew (hidden) config option for the compression method to use.\r\nThere's a new option in PaperConfig (compression level) for Zstd which defaults to 6.\r\nThere's a new option in PaperConfig (compression level) for Zlib which defaults to 5.\r\nAdded a getter to the API to retrieve the current chunk compression method being used.\r\n\r\nSince the patch hooks Mojang's versioning system for new compression methods, it\r\nshould be internally consistent, easily-updatable, and reversible with a --forceUpgrade AND a --forceWrite.\r\n\r\nThis will likely conflict with plugins and programs expecting region files to be compressed using the current standard.\r\n\r\nSupercedes #2814\r\n\r\n**TODO**\r\n- [x] Test it to make sure it actually works\r\n- [x] Add API getter for current Zstd dict version\r\n- [x] Update to 1.16.4 (why does this happen every time?)",
    "head_branch": "feature/zstd-1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae13d9087c4d6d376e6a",
    "number": 4714,
    "body": "Fixed an issue where a furnace's cook-speed multiplier rounds down\r\nto the nearest Integer when updating its current cook time.\r\n\r\nInstead of incrementing the cookTime counter by the current cookSpeedMultiplier (which is causing\r\nthe loss in precision issue due to double -> integer casting), I have instead modified an internal function,\r\ngetRecipeCookingTime(), to scale the total cooking time of the current item to the current cookSpeedMultiplier.\r\n\r\nThis is done through dividing the total cook time of the item by the set multiplier, and taking the ceiling\r\nof the final output (ceiling is used here to replicate the behavior of this previous patch, otherwise items smelted\r\nin furnaces with odd multipliers will finish cooking at least 1 tick earlier).\r\n\r\nI also changed the access modifier for the getRecipeCookingTime() function to public, as it allows\r\nthe setCookSpeedMultiplier API call to immediately adjust the current cooking time to the newly set multiplier.\r\nPlease let me know if this is a safe change or not.\r\n\r\nThis patch is tested by a small test plugin that I wrote yesterday. I can confirm that it works for\r\nall blast furnaces, smokers, and normal furnaces!\r\n\r\nThis plugin can be found at:\r\nhttps://github.com/ericsu14/furnacetest\r\n\r\nNote: This is a partial fix to issue #4697, but I want to see if these changes are good first so I can move forward creating a similar API for campfires.",
    "head_branch": "ericsu14-furnace-api-improvements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed furnace cook-speed multiplier losing precision when calculating cook time"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae14d9087c4d6d376e6b",
    "number": 4712,
    "body": "Adds the following:\r\n\r\n1. PlayerChunkLoadEvent / PlayerChunkUnloadEvent (Can be used to autorespawn fake entities when client receives chunk)\r\n\r\n\r\n\r\nProbably Mini appreciate at least the two events for his lightweight Citizens replacement.",
    "head_branch": "packet-events-and-attribute-register",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Player Chunk Load/Unload Events\n\nCo-authored-by: Mariell <proximyst@proximyst.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ae15d9087c4d6d376e6c",
    "number": 4711,
    "body": "Fixed an issue where a furnace's cook-speed multiplier rounds down\r\nto the nearest Integer when updating its current cook time.\r\n\r\nInstead of incrementing the cookTime counter by the current cookSpeedMultiplier (which is causing \r\nthe loss in precision issue due to double -> integer casting), I have instead modified an internal function,\r\ngetRecipeCookingTime(), to scale the total cooking time of the current item to the current cookSpeedMultiplier.\r\n\r\nThis is done through dividing the total cook time of the item by the set multiplier, and taking the ceiling\r\nof the final output (ceiling is used here to replicate the behavior of this previous patch, otherwise items smelted\r\nin furnaces with odd multipliers will finish cooking at least 1 tick earlier).\r\n\r\nI also changed the access modifier for the getRecipeCookingTime() function to public, as it allows\r\nthe setCookSpeedMultiplier API call to immediately adjust the current cooking time to the newly set multiplier.\r\nPlease let me know if this is a safe change or not.\r\n\r\nThis patch is tested by a small test plugin that I wrote yesterday. I can confirm that it works for\r\nall blast furnaces, smokers, and normal furnaces!\r\n\r\nThis plugin can be found at:\r\nhttps://github.com/ericsu14/furnacetest",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae16d9087c4d6d376e6d",
    "number": 4710,
    "body": "When new advancements are added via the UnsafeValues#loadAdvancement\r\nAPI, it triggers a full datapack reload when this is not necessary. The\r\nadvancement is already loaded directly into the advancement registry,\r\nand the point of saving the advancement to the Bukkit datapack seems to\r\nbe for persistence. By removing the call to reload datapacks when an\r\nadvancement is loaded, the client no longer completely freezes up when\r\nadding a new advancement.",
    "head_branch": "fix-advancement-client-lag",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix client lag on advancement loading (#4710)\n\nWhen new advancements are added via the UnsafeValues#loadAdvancement\r\nAPI, it triggers a full datapack reload when this is not necessary. The\r\nadvancement is already loaded directly into the advancement registry,\r\nand the point of saving the advancement to the Bukkit datapack seems to\r\nbe for persistence. By removing the call to reload datapacks when an\r\nadvancement is loaded, the client no longer completely freezes up when\r\nadding a new advancement.\r\nTo ensure the client still receives the updated advancement data, we\r\nmanually reload the advancement data for all players, which\r\nnormally takes place as a part of the datapack reloading."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae17d9087c4d6d376e6e",
    "number": 4703,
    "body": "Travis has been dying lately, so now's a good time to do the move we've been anticipating.",
    "head_branch": "gh-actions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Add a GitHub Actions job (#4703)\n\nCo-Authored-By: Chew <chew@chew.pw>\r\n\r\nCo-authored-by: Chew <chew@chew.pw>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae18d9087c4d6d376e6f",
    "number": 4702,
    "body": "Allows to call `Damageable#damage` and pass any DamageCause as an argument\r\nIn current bukkit API this is impossible, but nms supports such behavior.\r\nin the bukkit's Damageable interface there are only two damage methods\r\n\r\n- damage(double)\r\n- damage(double, entity)\r\n\r\nThis pr adds methods\r\n\r\n- damage(double, damagecause)\r\n- damage(double. entity, damagecause)\r\n\r\nAn entity, that is damaged with specified damagecause, using methods above, causes events like EntityDamageEvent and EntityDamagedByEntityEvent to be constructed with appropriate damage causes as well.",
    "head_branch": "damage-any-cause",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae19d9087c4d6d376e70",
    "number": 4701,
    "body": "The methods would otherwise cache wrong enum types for specific enums.\r\nThis would result in a `ClassCastException` at the caller location,\r\nwhich obviously is no fun. This broke API with `Switch#getFace` and\r\n`FaceAttachable#getAttachedFace`.\r\n\r\nThe existing implementation was also stupid.\r\n\r\nThis patch is licensed under the MIT Licence, as defined by the OSI:\r\n<https://opensource.org/licenses/MIT>.\r\n\r\nTested with the following plugin which would throw the aforementioned\r\n`ClassCastException` without this patch:\r\n\r\n```java\r\n  @EventHandler\r\n  public void onEvent(BlockBreakEvent event) {\r\n    Block block = event.getBlock();\r\n    BlockData data = block.getBlockData();\r\n    if (!(data instanceof Switch)) {\r\n      return;\r\n    }\r\n    Switch sw = (Switch) data;\r\n    Bukkit.broadcastMessage(\"Face: \" + sw.getFace());\r\n    Bukkit.broadcastMessage(\"Attached face: \" + sw.getAttachedFace());\r\n  }\r\n```",
    "head_branch": "fix-blockdata-enum-methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae1ad9087c4d6d376e71",
    "number": 4700,
    "body": "Adds method `World#raytrace` that takes a collection of entities instead of Predicate<Entity>\r\n..another way to filter out entities we dont't want to check for ray intersection",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae1bd9087c4d6d376e72",
    "number": 4699,
    "body": "Aikar made a change earlier this year in 55e17a8599205450358c6114003305e492cc9a92 to add a wait on shutdown for async tasks that have not completed.\r\n\r\nThis works most of the time, but a minor nuance I've noticed is that if an async task is in the middle of loading a chunk when the shutdown process hits this point, it blocks the load from finishing, causing the server to stall for the full 5 seconds before continuing and printing a warning.\r\n\r\nDelaying this logic until after the world has been saved fixes this issue, since all chunks get a chance to finish loading.",
    "head_branch": "improve-async-task-wait",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae1cd9087c4d6d376e73",
    "number": 4698,
    "body": "As it stands, `Firework` (subtype of `Projectile`) does *not* call\r\n`PlayerLaunchProjectileEvent` upon launch. @darbyjack pointed this out to me,\r\nso here's a fix for it. This is derived from the impl of the event for eggs.",
    "head_branch": "firework-projevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make fireworks call PlayerLaunchProjectileEvent (#4698)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae1dd9087c4d6d376e74",
    "number": 4695,
    "body": "",
    "head_branch": "fix/shapeless-recipe-match-performance-1.15",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[1.15] Improve performance of matching ingredients for shapeless recipes (#4695)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae1ed9087c4d6d376e75",
    "number": 4694,
    "body": "",
    "head_branch": "fix/shapeless-recipe-match-performance",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[1.16] Improve performance of matching ingredients for shapeless recipes (#4694)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae1fd9087c4d6d376e76",
    "number": 4691,
    "body": "As far as I know, this will only really help improve performance for servers with lower end hardware and a decent amount of tile entities or servers with thousands of tile entities.\r\n\r\nTested this for a few days on a production server with 100k hoppers at peak hours, nobody reported any issues. (Note: Not saying this allows servers to handle 100k hoppers ticking)\r\n\r\nAlso avoid using SingletonSets as an extra performance improvement because I noticed it being rather high in a spark profile of the first revision of this patch.",
    "head_branch": "PR-TE-Ticking-getType",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae20d9087c4d6d376e77",
    "number": 4689,
    "body": "This fixes an issue where armor stands will continue to do entity collision checks despite the config setting in paper.yml being false.\r\n\r\nWill help against players who attempt to crash servers via the \"new\" method with using a ton of armor stands in a single area.",
    "head_branch": "PR-ArmorStand-Collision",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix armor stands still doing entity collision"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae21d9087c4d6d376e78",
    "number": 4688,
    "body": "[08:20] c-h-e-w: Proxi be like: pr time\r\n\r\nBukkit Changes:\r\n4abf9e96 #557: Add TNTPrimed#setSource method\r\n\r\nCraftBukkit Changes:\r\ndea41389 Remove outdated build delay.\r\n9da3b5bf #762: Add TNTPrimed#setSource method",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#4688)\n\nUpstream has released updates that appears to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n4abf9e96 #557: Add TNTPrimed#setSource method\r\n\r\nCraftBukkit Changes:\r\ndea41389 Remove outdated build delay.\r\n9da3b5bf #762: Add TNTPrimed#setSource method"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ae23d9087c4d6d376e79",
    "number": 4687,
    "body": "Closes #4264 ",
    "head_branch": "issue-4264",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add getOfflinePlayerIfCached(String)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ae23d9087c4d6d376e7a",
    "number": 4686,
    "body": "Hi, I have no clue if I did this patch properly or not, but here it is.\r\n\r\nThis patch adds a setter to the numPlayers field in ServerListPingEvent. This removes the need for some packet listener shenanigans.\r\n\r\nI tested with the following code:\r\n```java\r\n@EventHandler\r\npublic void onListPing(ServerListPingEvent event) {\r\n    event.setNumPlayers(20);\r\n}\r\n```\r\nand this performed as expected.\r\n\r\nThough, when setting the event to an amount over the amount of actual online players, there is the following \"visual artifact\":\r\n![img](https://i.imgur.com/WA6K8ti.png)\r\nThis is a client-side problem rather than a server-side, so there isn't much we could do.\r\n\r\nAnyways, I hope I did this all right. I was debating adding a patch description, but that would basically be the same as the PR title, so I see no point  😛",
    "head_branch": "add-setNumPlayers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae25d9087c4d6d376e7b",
    "number": 4681,
    "body": "",
    "head_branch": "avoid-crash-empty-fishing-loot",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Avoid crashing clients when fishing loot is empty, Fixes #4235 (#4681)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae26d9087c4d6d376e7c",
    "number": 4672,
    "body": "This adds a config option (`settings.hide-server-gui`) to hide the server gui without needing to type `nogui` into arguments.\r\n\r\nTo accomplish this, I needed to move `PaperConfig`'s init out of `DedicatedServer`'s init and into `nms.Main`. This is because we need the the logic to run the GUI happens *before* the config was written. While moving this logic to before the server starts, I had to remove some of PaperConfig (and classes it calls)'s dependence on the server being started (pretty much all logger calls).",
    "head_branch": "feature/config-gui",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae27d9087c4d6d376e7d",
    "number": 4670,
    "body": "This PR fixes an issue with EntityLiving, before this patch, EntityLiving specifically removeAllEffects function didn't respect isCancelled (instead of break; it has continue;), this patch aims to fix that.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae28d9087c4d6d376e7e",
    "number": 4664,
    "body": "I blame cat! This is all his fault! :pensive: ",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "BukkitValues was renamed ChunkBukkitValues (#4664)\n\nI blame cat!"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae29d9087c4d6d376e7f",
    "number": 4663,
    "body": "Conflicting upstream, whee :smile: \r\nThanks to LynxPlay for upstreaming the patch <3\r\n\r\nCraftBukkit Changes:\r\n9e91bcab SPIGOT-6194: Read correct nbt compound into chunk pdc\r\nb8dd5ec2 Rename Chunk \"BukkitValues\" key to \"ChunkBukkitValues\"",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit) (#4663)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae2ad9087c4d6d376e80",
    "number": 4661,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae2bd9087c4d6d376e81",
    "number": 4659,
    "body": "This fixes the issue in b234.\r\nJust cherry-picked cat's earlier commit and amended it with the fix.\r\n\r\n---\r\n\r\nBukkit Changes:\r\n01e22e09 Misc maven build updates\r\n746f5324 #556: Allow sending messages from specific UUIDs\r\n92b99cde #501: Add PersistentDataHolder to Chunk\r\n\r\nCraftBukkit Changes:\r\n4ef13f94 Misc maven build updates\r\n04639f5a #759: Allow sending messages from specific UUIDs\r\n77c894a2 #672: Add PersistentDataHolder to Chunk\r\n\r\nSpigot Changes:\r\n57bbdd8e Rebuild patches",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#4659)\n\nUpstream has released updates that appears to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n01e22e09 Misc maven build updates\r\n746f5324 #556: Allow sending messages from specific UUIDs\r\n92b99cde #501: Add PersistentDataHolder to Chunk\r\n\r\nCraftBukkit Changes:\r\n4ef13f94 Misc maven build updates\r\n04639f5a #759: Allow sending messages from specific UUIDs\r\n77c894a2 #672: Add PersistentDataHolder to Chunk\r\n\r\nSpigot Changes:\r\n57bbdd8e Rebuild patches\r\n\r\nCo-authored-by: Shane Freeder <theboyetronic@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ae2cd9087c4d6d376e82",
    "number": 4657,
    "body": "Resolves #4597.",
    "head_branch": "hotfix/anti-xray-slime-block",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix slime block in Anti-Xray"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae2dd9087c4d6d376e83",
    "number": 4650,
    "body": "Another fairly early patch number pulled into upstream. 326 changed files :fire: \r\n\r\nBukkit Changes:\r\ne461dcfe #555: Item - add getters/setters for owner/thrower\r\n\r\nCraftBukkit Changes:\r\n055870c4 #758: Item - add getters/setters for owner/thrower",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit)\n\nUpstream has released updates that appears to apply and compile correctly.\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\n\nBukkit Changes:\ne461dcfe #555: Item - add getters/setters for owner/thrower\n\nCraftBukkit Changes:\n055870c4 #758: Item - add getters/setters for owner/thrower"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ae2ed9087c4d6d376e84",
    "number": 4649,
    "body": "Bumps [junit](https://github.com/junit-team/junit4) from 4.13 to 4.13.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/junit-team/junit4/releases\">junit's releases</a>.</em></p>\n<blockquote>\n<h2>JUnit 4.13.1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.1.md\">release notes</a> for details.</p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.13.1.md\">junit's changelog</a>.</em></p>\n<blockquote>\n<h2>Summary of changes in version 4.13.1</h2>\n<h1>Rules</h1>\n<h3>Security fix: <code>TemporaryFolder</code> now limits access to temporary folders on Java 1.7 or later</h3>\n<p>A local information disclosure vulnerability in <code>TemporaryFolder</code> has been fixed. See the published <a href=\"https://github.com/junit-team/junit4/security/advisories/GHSA-269g-pwp5-87pp\">security advisory</a> for details.</p>\n<h1>Test Runners</h1>\n<h3>[Pull request <a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1669\">#1669</a>:](<a href=\"https://github-redirect.dependabot.com/junit-team/junit/pull/1669\">junit-team/junit#1669</a>) Make <code>FrameworkField</code> constructor public</h3>\n<p>Prior to this change, custom runners could make <code>FrameworkMethod</code> instances, but not <code>FrameworkField</code> instances. This small change allows for both now, because <code>FrameworkField</code>'s constructor has been promoted from package-private to public.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/junit-team/junit4/commit/1b683f4ec07bcfa40149f086d32240f805487e66\"><code>1b683f4</code></a> [maven-release-plugin] prepare release r4.13.1</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/ce6ce3aadc070db2902698fe0d3dc6729cd631f2\"><code>ce6ce3a</code></a> Draft 4.13.1 release notes</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/c29dd8239d6b353e699397eb090a1fd27411fa24\"><code>c29dd82</code></a> Change version to 4.13.1-SNAPSHOT</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/1d174861f0b64f97ab0722bb324a760bfb02f567\"><code>1d17486</code></a> Add a link to assertThrows in exception testing</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/543905df72ff10364b94dda27552efebf3dd04e9\"><code>543905d</code></a> Use separate line for annotation in Javadoc</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/510e906b391e7e46a346e1c852416dc7be934944\"><code>510e906</code></a> Add sub headlines to class Javadoc</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae\"><code>610155b</code></a> Merge pull request from GHSA-269g-pwp5-87pp</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/b6cfd1e3d736cc2106242a8be799615b472c7fec\"><code>b6cfd1e</code></a> Explicitly wrap float parameter for consistency (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1671\">#1671</a>)</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/a5d205c7956dbed302b3bb5ecde5ba4299f0b646\"><code>a5d205c</code></a> Fix GitHub link in FAQ (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1672\">#1672</a>)</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/3a5c6b4d08f408c8ca6a8e0bae71a9bc5a8f97e8\"><code>3a5c6b4</code></a> Deprecated since jdk9 replacing constructor instance of Double and Float (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1660\">#1660</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/junit-team/junit4/compare/r4.13...r4.13.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=maven&previous-version=4.13&new-version=4.13.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/configuring-github-dependabot-security-updates)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/PaperMC/Paper/network/alerts).\n\n</details>",
    "head_branch": "dependabot/maven/Paper-MojangAPI/junit-junit-4.13.1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Update JUNit on Mojang API to make dependendabot happy\n\nPretty insignificant bug."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae2fd9087c4d6d376e85",
    "number": 4648,
    "body": "Hey, I closed my old ACTIVE PR and I opened this new PR to fix my errors and corrections from the last one and thus add the feature. From the last PR ( #4628 ):\r\n\r\n> Hey!\r\n> \r\n> This is my first submission of a change to PaperMC/Paper (API).\r\n> \r\n> I myself think that title objects should also be sent by themselves (like in ParticleBuilder). Therefore I made this suggestion for improvement.\r\n\r\nThank you very much for your support and thank you for the feedback as these are my first PRs.\r\n\r\nWith kind regards\r\nFruxz (@TheFruxz)\r\n\r\n_Special thanks to @Proximyst_\r\n",
    "head_branch": "feature/sendableTitleObjects",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Maded Title-Objects directy sendable to targets"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ae30d9087c4d6d376e86",
    "number": 4646,
    "body": "Fixes #4643 ",
    "head_branch": "fix-4643",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update discord link in the paper.yml (#4646)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae31d9087c4d6d376e87",
    "number": 4640,
    "body": "This PR does two things (both to achieve the same goal, though):\r\n\r\n- Add a new API to `Player` to set the sender UUID of a message that is sent (as added in 20w21a);\r\n- Fix CraftBukkit not using the sender UUID of chat when handling chat messages. Kudos to @egg82 for pointing this out.",
    "head_branch": "sender-uuid-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae32d9087c4d6d376e88",
    "number": 4637,
    "body": "TileEntityBell has a list of entities (entitiesAtRing) that was not being cleared at the right time, causing leaks whenever a bell would be rung near a crowd of entities.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed TileEntityBell memory leak"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae33d9087c4d6d376e89",
    "number": 4636,
    "body": "A list of entities (deobfuscated as entitiesAtRing) in TileEntityBell would easily get bloated with leaked entities, as it was not properly cleared when necessary.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae34d9087c4d6d376e8a",
    "number": 4634,
    "body": "This patch adds a config option to make it so you can no longer change the entity type of a mob spawner with a spawn egg. While this can be done in a plugin by cancelling the interact event when a player right clicks a spawner block, it would also cause the mob/entity from the egg not to spawn as well.",
    "head_branch": "feature/monster-egg",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow disabling mob spawner spawn egg transformation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae35d9087c4d6d376e8b",
    "number": 4631,
    "body": "Hey,\r\n\r\nin this PR I added the possibility to specify in a boolean whether the run should be asynchronous or synchronous, so that you don't have to call a different function for each form to run between a sync- and an async task.\r\n\r\nPersonally, I find that this simplifies task development and provides a better structure for plugins\r\n\r\nWith kind regards\r\nFruxz (@TheFruxz) ",
    "head_branch": "feature/RunnableDirectAsync",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae36d9087c4d6d376e8c",
    "number": 4629,
    "body": "Hey!\r\n\r\nThis is my second submission of a PaperMC/Paper (API) change.\r\n\r\nIn this proposal you can directly return players who are on the whitelist at the WhitelistToggleEvent.\r\nI hope this change can help developers to handle the whitelist during a process.\r\n\r\nWith kind regards\r\nFruxz (@TheFruxz)",
    "head_branch": "feature/whitelistDirectAccess",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae37d9087c4d6d376e8d",
    "number": 4628,
    "body": "Hey!\r\n\r\nThis is my first submission of a change to PaperMC/Paper (API).\r\n\r\nI myself think that title objects should also be sent by themselves (like in ParticleBuilder). Therefore I made this suggestion for improvement.\r\n\r\nWith kind regards\r\nFruxz (@TheFruxz)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae38d9087c4d6d376e8e",
    "number": 4626,
    "body": "Tested on the following code:\r\n```java\r\n  @EventHandler\r\n  public void onCharge(EntityChargeCrossbowEvent event) {\r\n    event.setCancelled(true);\r\n    if (event.getEntity() instanceof Player) {\r\n      ((Player) event.getEntity()).updateInventory();\r\n    }\r\n    Bukkit.broadcastMessage(\"yo\");\r\n  }\r\n```\r\n\r\nCloses #4619",
    "head_branch": "feature/crossbowcharge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add EntityLoadCrossbowEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ae39d9087c4d6d376e8f",
    "number": 4622,
    "body": "At this point I'm almost convinced he's *finally* yoinking Paper patches.\r\n\r\nCraftBukkit Changes:\r\n1f4693a8 SPIGOT-6168: Fix error with Player.getBedSpawnLocation when world is unloaded while server running",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit) (#4622)\n\nUpstream has released updates that appears to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n1f4693a8 SPIGOT-6168: Fix error with Player.getBedSpawnLocation when world is unloaded while server running"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae3ad9087c4d6d376e90",
    "number": 4621,
    "body": "It was pointed out to me by Glare that I'd forgotten to do this on my\r\nPaper PR too. Oops!\r\n\r\nSame change as in:\r\nhttps://github.com/Proximyst/Rainforest/commit/97b1fcaec61a5741c4b8f2b5b87bb3503ccd93c3",
    "head_branch": "eigencraft-missing-return",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add a missing return in Eigencraft redstone (#4621)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae3bd9087c4d6d376e91",
    "number": 4620,
    "body": "This will make the issue templates automatically add labels to the created issues.\r\nThe outcome of this is a reduced burden on the triage team, though there will still be cases where the label assigned does not 100% fit (e.g. performance, question, etc).\r\n\r\nhttps://docs.github.com/en/free-pro-team@latest/github/building-a-strong-community/manually-creating-a-single-issue-template-for-your-repository",
    "head_branch": "issue-labels",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae3cd9087c4d6d376e92",
    "number": 4618,
    "body": "This fixes #4616, where a CME is thrown when adding a passenger to the spawned entity during CreatureSpawnEvent.\r\n\r\nTested using this same code from the linked issue:\r\n```java\r\n@EventHandler\r\npublic void onCreatureSpawnEvent(CreatureSpawnEvent e) {\r\n    if (e.getEntity() instanceof Spider) {\r\n        Entity creeper = e.getEntity().getWorld().spawnEntity(e.getEntity().getLocation(), EntityType.CREEPER);\r\n        e.getEntity().addPassenger(creeper);\r\n    }\r\n}\r\n```",
    "head_branch": "4616",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix CME when adding a passenger during Spawn events (#4616)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae3dd9087c4d6d376e93",
    "number": 4615,
    "body": "Without this API (or reflection), there isn't really a good way to easily reset the trades of a villager/wandering trader without spawning in a new entity and copying it's trades (obviously quite inefficient).",
    "head_branch": "villager-resetoffers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Villager resetOffers API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ae3ed9087c4d6d376e94",
    "number": 4614,
    "body": "Adds the dreaded EntityMoveEvent everyone's been asking for since 2010.\r\n\r\nDont worry, the object creation is behind a handler size check. It will only create the event object if there is at least 1 listener to the event ;)",
    "head_branch": "EntityMoveEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "EntityMoveEvent (#4614)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ae3fd9087c4d6d376e95",
    "number": 4613,
    "body": "Fixes #4150 by returning early if the whitelist is disabled (same logic from legacy versions)",
    "head_branch": "4150",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix deop kicking non-whitelisted player when white list is not enabled"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae40d9087c4d6d376e96",
    "number": 4612,
    "body": "Resolves #4257 by adding a method to `Entity` that checks if the entity is inside a ticking chunk",
    "head_branch": "4257",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Entity#isTicking (#4612)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ae41d9087c4d6d376e97",
    "number": 4611,
    "body": "Fixes #4259 by not flooring the blockposition among other weirdness",
    "head_branch": "4259",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix item locations dropped from campfires"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae42d9087c4d6d376e98",
    "number": 4610,
    "body": "Fixes precision loss due to downcasting from a double to a float for x/y/z coordinates when spawning particles through CraftPlayer#spawnParticle. This issue does not exist for CraftWorld#spawnParticle since it doesn't do the useless downcasting. This issue is only noticeable at extremely high coordinates. \r\n\r\nBefore: https://gyazo.com/fd824ad0cf4f679a92e48bafadc2081c\r\nAfter: https://gyazo.com/6d797a56ce86339c6312933606e27b76",
    "head_branch": "fix-particle-precision-loss",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Player spawnParticle x/y/z precision loss"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae43d9087c4d6d376e99",
    "number": 4609,
    "body": "Since there is already a Space after the , and the :, there is no need for an aditional space in front of the provided plugin list\r\nFixes #4608",
    "head_branch": "fix-4608",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove unnecessary space for provided plugins, fixes #4608"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae44d9087c4d6d376e9a",
    "number": 4607,
    "body": "Hey! :wave:\r\n\r\nThis PR replaces `lentient` with `lenient` in the first paragraph of `CONTRIBUTING.md` because I think `lentient` is a typo. :sweat_smile: ",
    "head_branch": "Fix-typo-in-CONTRIBUTING",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Fix typo in CONTRIBUTING.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae45d9087c4d6d376e9b",
    "number": 4606,
    "body": "This is in response to #4361 \r\nThe Entity always keeps the SpawnReason it was spawned with initially, even if it gets spawned again after that (for example when going through a portal or exiting a beehive). This can be confusing (or at least it completely confused me), which is why I'm trying to clarify the javadocs for that function.",
    "head_branch": "clarify-jd-spawnreason",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Clarify the JavaDocs for Entity.getEntitySpawnReason() in response to #4361"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ae46d9087c4d6d376e9c",
    "number": 4605,
    "body": "Fixes #4582",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix distance in checkHighPriorityChunks (Fixes #4582) (#4605)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae47d9087c4d6d376e9d",
    "number": 4604,
    "body": "On servers with plugins that constantly churn through scoreboards, there is a risk of degraded GC performance due to the number of scoreboards held on by weak references. Most plugins don't even need the (vanilla) functionality that requires all plugin scoreboards to be tracked by the server. Instead, only track scoreboards when an objective is added with a non-dummy criteria.\r\n\r\nThis is a breaking change, however the change is a much more sensible default. In case this breaks your workflow you can always force all scoreboards to be tracked with `settings.always-track-plugin-scoreboards: true` in paper.yml.\r\n\r\nFixes #4260",
    "head_branch": "improve/lazily-track-scoreboards",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Lazily track plugin scoreboards by default\n\nOn servers with plugins that constantly churn through scoreboards, there is a risk of degraded GC performance due to the number of scoreboards held on by weak references. Most plugins don't even need the (vanilla) functionality that requires all plugin scoreboards to be tracked by the server. Instead, only track scoreboards when an objective is added with a non-dummy criteria.\n\nThis is a breaking change, however the change is a much more sensible default. In case this breaks your workflow you can always force all scoreboards to be tracked with settings.track-plugin-scoreboards in paper.yml."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae48d9087c4d6d376e9e",
    "number": 4603,
    "body": "",
    "head_branch": "update-paperclip",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Paperclip; use mvn.cmd on Windows (jmanpenilla)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae49d9087c4d6d376e9f",
    "number": 4602,
    "body": "Changes:\r\n- Added TPS entry under average ms\r\n- Added paper logo as frame icon\r\n- Small code tweaks\r\n\r\nI think i want to fix a small issue here too, but im not sure where its caused:\r\n![paper](https://user-images.githubusercontent.com/40795980/94962959-a664f700-04f7-11eb-8e24-7177f0431b3c.png)\r\n\r\nMay someone help me there?\r\n\r\nNote:\r\nI already had one PR open, but i somehow managed to push the server folder to github instead of the root project. lmao sorry\r\nConnects-to: #4599 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve ServerGUI\n\n- Added logo to server frame\n- Show tps in the server stats"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae4ad9087c4d6d376ea0",
    "number": 4599,
    "body": "Changes:\r\n- Added TPS entry under avera ms\r\n- Added paper logo as frame icon\r\n- Small code tweaks\r\n\r\nI think i want to fix a small issue here too, but im not sure where its caused:\r\n![paper](https://user-images.githubusercontent.com/40795980/94962959-a664f700-04f7-11eb-8e24-7177f0431b3c.png)\r\n\r\nMay someone help me there?",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae4bd9087c4d6d376ea1",
    "number": 4596,
    "body": "Yet another conflicting update. Fun!\r\n\r\nCraftBukkit Changes:\r\n5c77bd28 SPIGOT-6147: InventoryCloseEvent does not fire after closing player inventory",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit)\n\nUpstream has released updates that appears to apply and compile correctly.\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\n\nCraftBukkit Changes:\n5c77bd28 SPIGOT-6147: InventoryCloseEvent does not fire after closing player inventory"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae4cd9087c4d6d376ea2",
    "number": 4593,
    "body": "Fixes #4058.\r\n\r\nA toggle is there to keep the vanilla behaviour of removing the dragon, which seems odd to me but surely it serves *some* purpose as it's even got (debug?) log messages.",
    "head_branch": "toggle-dragon-removal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Toggle for removing existing dragon"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae4dd9087c4d6d376ea3",
    "number": 4592,
    "body": "Closes #4277.\r\n\r\nThe fact it `mvn install`s the API should also make it generate JavaDocs.\r\nThis also has the added effect of only accepting compilable PRs.",
    "head_branch": "travis-build",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Make travis use 'build' instead of 'patch' (#4592)\n\nCloses #4277."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae4ed9087c4d6d376ea4",
    "number": 4591,
    "body": "They took in yet another patch, so conflict time! A few were renamed, very few however.\r\n\r\nCraftBukkit Changes:\r\n5da21f87 SPIGOT-6152: End exit gates in custom ends do not send back to overworld\r\n1ee373fe SPIGOT-6157: Crash when PortalCreateEvent cancelled",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit)\n\nUpstream has released updates that appears to apply and compile correctly.\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\n\nCraftBukkit Changes:\n5da21f87 SPIGOT-6152: End exit gates in custom ends do not send back to overworld\n1ee373fe SPIGOT-6157: Crash when PortalCreateEvent cancelled"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae4fd9087c4d6d376ea5",
    "number": 4590,
    "body": "Fixed bug: https://bugs.mojang.com/browse/MC-29274\r\n\r\nHad to add a null predicate since the PathfinderGoal doesn't have an appropriate constructor otherwise",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "MC-29274: Fix Wither hostility towards players"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae50d9087c4d6d376ea6",
    "number": 4580,
    "body": "Closes #4338.\r\nPointed out by @ForceUpdate1.",
    "head_branch": "issue-4338",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix merging spawning values"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae51d9087c4d6d376ea7",
    "number": 4579,
    "body": "The rename list is long as md_5 finally patched an NPE which was patched by cat back in 2018.\r\n\r\nCraftBukkit Changes:\r\na339310c #755: Fix NPE when calling getInventory() for virtual EnderChests\r\n2577f9bf Increase outdated build delay\r\n1dabfdc8 #754: Fix pre-1.16 serialized SkullMeta being broken on 1.16+, losing textures",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit)\n\nUpstream has released updates that appears to apply and compile correctly.\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\n\nCraftBukkit Changes:\na339310c #755: Fix NPE when calling getInventory() for virtual EnderChests\n2577f9bf Increase outdated build delay\n1dabfdc8 #754: Fix pre-1.16 serialized SkullMeta being broken on 1.16+, losing textures"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae52d9087c4d6d376ea8",
    "number": 4578,
    "body": "md_5's patch for SPIGOT-6086 only applies to locations over the world,\r\nnot those under or outside it.\r\n\r\nReproduction:\r\n\r\n* Run a plugin with:\r\n```java\r\n  @EventHandler\r\n  public void onEvent(StructureGrowEvent event) {\r\n    Location location = event.getLocation();\r\n    event.getBlocks().add(location.subtract(0, 255, 0).getBlock().getState(false));\r\n  }\r\n```\r\n* Place a tree and let it grow naturally.\r\n\r\nFixes #4577.",
    "head_branch": "issue-4577",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Patch SPIGOT-6086 for all invalid locations\n\nmd_5's patch for SPIGOT-6086 only applies to locations over the world,\nnot those under or outside it."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae53d9087c4d6d376ea9",
    "number": 4362,
    "body": "Added Village API",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae54d9087c4d6d376eaa",
    "number": 4357,
    "body": "Tried my best to do this correctly. Tested and working.\r\n\r\n[Paperclip](https://anonymousfiles.io/DyaQCX2H/) for testing (``java -Dpaperclip.install=true -jar paperclip.jar`` to install to local maven)",
    "head_branch": "entity-name-component",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae55d9087c4d6d376eab",
    "number": 4353,
    "body": "Aims to fix #4313.\r\n\r\nI'm trying to contribute more, but likely I am missing things so please go easy and I will try to fix everything that's missing.\r\n\r\nSo far I think I've handled the sleeping issue; when they get into a bed, it should close the inventory and cancel the trade.\r\n\r\nAs for when the workstation/jobsite is broken I'm a bit stuck at the moment. There are multiple blocks a villager can work at depending on the villager type. All inherited from `n.m.s.Block`, so I'm wondering if I need to patch `Block`'s break method to check if 1) it's in a village and 2) it's a claimed job site, and then look up the relevant villager that claimed it and remove its job site memory. Seems valid, can I get a sanity check before I try and tackle that?",
    "head_branch": "patch/4313",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae56d9087c4d6d376eac",
    "number": 4351,
    "body": "Fixes #4350.\r\n",
    "head_branch": "prevent-fire-spreading-to-invalid-locations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Prevent fire from spreading to invalid locations"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae57d9087c4d6d376ead",
    "number": 4346,
    "body": "While attempting to build Paper from source, it took me much longer than one might expect to realize that \"patch\" is actually a piece of software -- GNU Patch. Having been unfamiliar with it, I scoured the internet searching for the mysterious literal patch file that Paper was looking for, all to no avail... More explicit phrasing would assist in debugging when building for newbies.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae58d9087c4d6d376eae",
    "number": 4345,
    "body": "Reimplementation of fix in https://github.com/PaperMC/Paper/pull/4153 as requested by reviewers",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae5ad9087c4d6d376eaf",
    "number": 4340,
    "body": "",
    "head_branch": "feature/disallow-enabling-both-velocity-and-bungee-ip-forwarding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae5bd9087c4d6d376eb0",
    "number": 4333,
    "body": "This PR adds a StructureLocateEvent, which fires when the /locate command is used, when an eye of ender is used, explorer maps are opened, etc.  \r\nThe event is Cancellable, and also contains getters and setters for the search radius, origin location, structure type, whether to only search unexplored structures, and the resulting location (result location can only be set, as the event fires *before* the structure is actually located. If developers wish to manipulate the result, they may use `StructureLocateEvent#setResult(Location)` and set the result. Setting the result skips the actual check)  \r\n\r\nThis is useful in custom world generators, where developers may wish to implement their own structures.  \r\n\r\nIt is also useful for making Eyes of Ender point to igloos, if that's your sort of thing.  ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add StructureLocateEvent\n\nSigned-off-by: MiniDigger <admin@minidigger.me>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ae5cd9087c4d6d376eb1",
    "number": 4321,
    "body": "A update for the dependency.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Update README.md (1.16.3 release) (#4321)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae5dd9087c4d6d376eb2",
    "number": 4320,
    "body": "------------------\r\nDOWNLOAD LINK: https://cdn.discordapp.com/attachments/748269415497465927/754945012080312370/loaded-chunks-r2.jar\r\n\r\nWhile initial smoke test looks to be ok, this build presents a high risk of entity and tile entity lost if there is a bug that I did not see in my own testing.\r\n\r\nIt is super imperative that you have backups before testing this!\r\n\r\n------------------\r\nThis greatly improves performance as it drastically reduces the amount\r\nof Entities and Tile Entities that are \"registered\" into the world, as\r\npurely \"cached\" chunks will no longer have their entities hanging out in the world.\r\n\r\nAdditionally this fixes our Entity Add To World and Entity Remove From World events\r\n\r\nThose events have not been firing correctly since MC changed how chunks work here.\r\n\r\nNow the server will only consider a chunk \"loaded\" if it's got a ticket putting\r\nit at level 33 or lower, which matches the public Bukkit API.\r\n\r\n------------------\r\n\r\nBefore this, there are a ton of chunks in memory in a 'cached' state, they aren't considered \"loaded\" in the api, they arent in any players view distance, are not force loaded. \r\n\r\nWhen they are loaded and unloaded don't align with our expectation of \"load/unload\" events. \r\n\r\nLeaving A LOT of extra entities in memory. meaning more entities to iterate for ticking (which will then be \"skipped\" because not in correct chunk\") same with tile entities. also same issue applies for iterating chunks too, iterating far more than will end up being ticked resulting in a lot of checks to then skip it. \r\n\r\nThis change cuts it out so the iteration only operates on stuff in a loaded state now.",
    "head_branch": "loaded-chunks-improvement",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Optimize some methods for inlining\n\nAdds final to some methods to improve inlining ability"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae5ed9087c4d6d376eb3",
    "number": 4319,
    "body": "WIP PR for the new plugin life-cycle API.\r\n\r\nSee #4317 for a better description",
    "head_branch": "feature/plugin-cycle-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae5fd9087c4d6d376eb4",
    "number": 4318,
    "body": "Fixes the merge conflicts. Patch 0167 was merged into upstream, and therefore resulted in a billion patch renames. I *could* just move a newer patch up if wanted to reduce it, but I honestly can't imagine it mattering.\r\n\r\n---\r\n\r\nCraftBukkit Changes:\r\nd5a72960 SPIGOT-6063: ConsoleSender sending extra lines in Java 13+\r\n\r\nSpigot Changes:\r\n2740d5ae Rebuild patches",
    "head_branch": "update-upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit/Spigot) (#4318)\n\nUpstream has released updates that appears to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\nd5a72960 SPIGOT-6063: ConsoleSender sending extra lines in Java 13+\r\n\r\nSpigot Changes:\r\n2740d5ae Rebuild patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ae60d9087c4d6d376eb5",
    "number": 4316,
    "body": "When Beehive block have bee inside and you break block in creative mode block drops beehive item but BlockDropItemEvent#getItems returns empty list.\r\n\r\nRelated https://github.com/PaperMC/Paper/issues/4307",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae61d9087c4d6d376eb6",
    "number": 4311,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae62d9087c4d6d376eb7",
    "number": 4295,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae63d9087c4d6d376eb8",
    "number": 4285,
    "body": "Fixes #4212\r\nShould prob be backported to cb",
    "head_branch": "patch/fix-rotation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae64d9087c4d6d376eb9",
    "number": 4276,
    "body": "Introduced by #4185",
    "head_branch": "fix/javadoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix javadoc (#4276)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ae65d9087c4d6d376eba",
    "number": 4275,
    "body": "fixes #4272",
    "head_branch": "fix/4272",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use wrapped StructureManager to prevent worldgen deadlock"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae66d9087c4d6d376ebb",
    "number": 4271,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/4268\r\n(Replaces https://github.com/PaperMC/Paper/pull/4270)",
    "head_branch": "fix-additional-zombie-apis",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Zombie ShouldBurnInDay API (#4268)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae67d9087c4d6d376ebc",
    "number": 4270,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/4268",
    "head_branch": "fix-zombie-daylight-burn",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae68d9087c4d6d376ebd",
    "number": 4265,
    "body": "add of multiple \"!\" =)",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae69d9087c4d6d376ebe",
    "number": 4250,
    "body": "",
    "head_branch": "update-paperclip",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Paperclip"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae6ad9087c4d6d376ebf",
    "number": 4249,
    "body": "",
    "head_branch": "fix-null-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix CraftTeam null check (#4249)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae6bd9087c4d6d376ec0",
    "number": 4248,
    "body": "This issue template config will disable the \"Create blank issue\" option and add a link to the discord server.\r\n\r\nFor an example, check out [my fork's issue creation page](https://github.com/Chew/Paper/issues/new/choose)",
    "head_branch": "feature/template_config",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Add issue template"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae6cd9087c4d6d376ec1",
    "number": 4247,
    "body": "When the Bukkit api is used to open an inventory, currently the close reason is `PLAYER`. But it should be `OPEN_NEW` which exists for this exact reason.\r\n\r\nProblem was that the CB just hooks into the closing packet method directly where normally a packet is received from the client.\r\n\r\nMy solution is to overload that packet method to allow specifying the alternate reason.",
    "head_branch": "2658",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Properly pass the close reason for new inventory opens (#2658) (#4247)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae6dd9087c4d6d376ec2",
    "number": 4245,
    "body": "Surprisingly big diff for such a small event...\r\n\r\nCloses #2286.",
    "head_branch": "issue-2286",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae6ed9087c4d6d376ec3",
    "number": 4243,
    "body": "Fixes #4106 ",
    "head_branch": "fix-4106",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Armor items in PlayerArmorChangeEvent (#4243)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae6fd9087c4d6d376ec4",
    "number": 4238,
    "body": "`MinecraftServer#getWorldSever` is nullable as of 1.16 and `CraftPlayer#getBedSpawnLocation` has not been updated to properly null check this.\r\n\r\nThis has been reported to me on the Essentials issue tracker/discord for so long now and I don't know how I didn't see this sooner.",
    "head_branch": "bug/bed-spawn-npe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix NPE in getBedSpawnLocation (#4238)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae70d9087c4d6d376ec5",
    "number": 4232,
    "body": "Basically without this (or reflection), people would have to send random (or very high value entity ids) for their packets, because otherwise \"ghost events\" get fired on the server for the completely wrong entities and other strange things might happen to the client (teleporting entities).\r\n\r\nUsing EntityIds provides the only safe way to have no collisions with regular server entities and also makes it easy for the plugin to track which packet-only entities it had.",
    "head_branch": "expose-entity-counter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expose the Entity Counter to allow plugins to use valid and non-conflicting Entity Ids"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ae71d9087c4d6d376ec6",
    "number": 4231,
    "body": "Fixes a problem where some config-configured messages would not be run through the md_5-hex-color-thing-a-ma-jig causing hex color codes to not be properly displayed.\r\n\r\nRelated to #3858",
    "head_branch": "lol",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix hex colors not working in some kick messages"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae72d9087c4d6d376ec7",
    "number": 4230,
    "body": "Adds an event that is called when a player shears a block.\r\n\r\nCurrent blocks that apply to this event are pumpkins and bee hives/nests.\r\n\r\nCloses #3553",
    "head_branch": "feature/shearblockevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PlayerShearBlockEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ae73d9087c4d6d376ec8",
    "number": 4225,
    "body": "Fixes PaperMC/Paper#4199.\r\n\r\nI could never manage to reproduce the issue myself, but it isn't something I could imagine a plugin have much to do with.\r\nThis is a least-effort patch, and I'm not so sure it's a good way to do it.\r\n\r\nPaperclip: https://owo.whats-th.is/9Bi8er3.jar",
    "head_branch": "default-portal-axis",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae74d9087c4d6d376ec9",
    "number": 4221,
    "body": "Spigot very recently added hex code message support to the ColouredConsoleSender. Since Paper uses a different logging system which currently outputs a garbled mess when using hex color codes, this PR aims to add that feature. The solution used is largely based on [this commit](https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/74b6982b034962cc85f38368a3e27f8890a6130a) as previously referenced.\r\n\r\nBefore:\r\n![Before Patch](https://user-images.githubusercontent.com/7158089/91421756-8b75d780-e813-11ea-92d6-18ad95c9850f.png)\r\n\r\nAfter:\r\n![After Patch](https://user-images.githubusercontent.com/7158089/91422056-e90a2400-e813-11ea-9ec4-eb7ac51d14f8.png)\r\n\r\n\r\nThanks to @zml2008 for pointing this out to me in #4220.",
    "head_branch": "console-hex-colors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae75d9087c4d6d376eca",
    "number": 4220,
    "body": "Strips hex color codes from console logging to prevent a garbled mess of characters being printed out.\r\n\r\nBefore:\r\n![Before Patch](https://user-images.githubusercontent.com/7158089/91411416-890c8100-e805-11ea-9413-c38e9fd1e76a.png)\r\n\r\nAfter:\r\n![After Patch](https://user-images.githubusercontent.com/7158089/91411187-3763f680-e805-11ea-83c7-0b51475ef24f.png)\r\n",
    "head_branch": "fix/console-hex-colors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae76d9087c4d6d376ecb",
    "number": 4219,
    "body": "git blame EvilSeph for approving [some random pr](https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/0842bab48b1c24f113c61606a294f5bcdf2e1315) from 2012",
    "head_branch": "fix/inventory-regresion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae77d9087c4d6d376ecc",
    "number": 4213,
    "body": "another round of \"i want this in essentials but i don't want to enter nms hell\" ",
    "head_branch": "feature/inventories",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add additional open container api to HumanEntity"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ae78d9087c4d6d376ecd",
    "number": 4210,
    "body": "Uses correct setPositionRotation for Entity teleporting instead of setLocation\r\nas this is how Vanilla teleports entities.\r\n\r\nCancel any pending motion when teleported.\r\n------\r\n\r\nThis change should hopefully help resolve issues with entity teleportation causing major chunk loading issues resulting in hung servers and out of memory.\r\n\r\nPlease help with testing by running a test build:\r\nhttps://cdn.discordapp.com/attachments/748269415497465927/750022487944724571/fix-entity-teleport-r2.jar\r\n",
    "head_branch": "fix-entity-teleport",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix Entity Teleportation and cancel velocity if teleported (#4210)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae79d9087c4d6d376ece",
    "number": 4206,
    "body": "If there is more than 1 world queried, it'll add a summary line with total from all queried worlds.\r\n\r\nI think there is a better expression that `all listed worlds`, but I couldn't think of one - feel free to propose something better.\r\n\r\n![image](https://user-images.githubusercontent.com/46570876/91225066-4bcfc280-e723-11ea-8a71-4569d4d6b0a3.png)\r\n\r\nCloses https://github.com/PaperMC/Paper/issues/2341\r\n",
    "head_branch": "chunkinfo_total_summary",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add summary to /paper chunkinfo command"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae7ad9087c4d6d376ecf",
    "number": 4204,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/2386\r\nAlso fixes OBFHELPER on wrong predicate - to how it was in 1.15: https://github.com/PaperMC/Paper/blob/ver/1.15.2/Spigot-Server-Patches/0352-Add-LivingEntity-getTargetEntity.patch#L118",
    "head_branch": "fix_tnt_creative",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix TNT not pushing creative players"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae7bd9087c4d6d376ed0",
    "number": 4202,
    "body": "- Change the section \"Plugin Developers\" with 1.16.2\r\n- Update Badges for 1.16",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Update README.md (for 1.16.2) (#4202)\n\n- Change the section \"Plugin Developers\" with 1.16.2\r\n- Update Badges for 1.16"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae7cd9087c4d6d376ed1",
    "number": 4197,
    "body": "Paper-config-files.patch:\r\n- Adds a getBoolean with a Predicate to PaperWorldConfig to allow for the default behavior to respect level type in the same way as vanilla\r\n\r\nAllow-toggling-special-MobSpawners-per-world.patch:\r\n- Adds toggles for each MobSpawner subclass instead of using an ImmutableList of all of them for dim type overworld and an empty ImmutableList for any other.\r\n\r\nMake-Wandering-Traders-spawn-below-the-roof-if-confi.patch:\r\n- Adds a fix so that when Wandering Traders spawn in the Nether, they will spawn below the roof like other nether mobs instead of on top of it",
    "head_branch": "feature/mobspawner-worlds",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae7dd9087c4d6d376ed2",
    "number": 4196,
    "body": "Require version instead of build num.",
    "head_branch": "no-build-number",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Require /version, not build num"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae7ed9087c4d6d376ed3",
    "number": 4192,
    "body": "This way the world is better compressable and backups will be smaller. I made an external tool that does this after the fact and it can make backups of the entire world around 5 to 20% smaller in my testings.",
    "head_branch": "zero-padding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Zero pad chunks before saving them to the disk\n\nThis makes the unused data inside region files more repeatable.\nWhich will result in better compression in case the entire world directory\nis compressed (like in backups). Which will naturally result in smaller backups."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae7fd9087c4d6d376ed4",
    "number": 4189,
    "body": "The missing variable in @param causes Jenkins to fail builds when generating Javadocs",
    "head_branch": "javadocmaxplayers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix javadocs failing jenkins builds (#4189)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ae80d9087c4d6d376ed5",
    "number": 4188,
    "body": "Updated #1967.\r\nCloses #1800.\r\nTakes into account @electronicboy's request of having all eligible players be available through the API.",
    "head_branch": "pr-1967",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add #getEligibleHumans to SkeletonHorseTrapEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ae81d9087c4d6d376ed6",
    "number": 4187,
    "body": "Updated #2628.\r\nSource: https://github.com/pl3xgaming/Purpur/blob/ver/1.16.2/patches/server/0088-Climbing-should-not-bypass-cramming-gamerule.patch",
    "head_branch": "pr-2628",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Climbing should not bypass cramming gamerule"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae82d9087c4d6d376ed7",
    "number": 4186,
    "body": "Demon did an oopsie lol.\r\n\r\nhttps://github.com/PaperMC/Paper/commit/627f4b8561115d40d6a39587d1ad94b0104f7e14",
    "head_branch": "brand-name-1.16.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Brand support"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ae83d9087c4d6d376ed8",
    "number": 4185,
    "body": "Updated #1966.",
    "head_branch": "pr-1966",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add playPickupItemAnimation to LivingEntity"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ae84d9087c4d6d376ed9",
    "number": 4184,
    "body": "Updated #1981.",
    "head_branch": "pr-1981",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae85d9087c4d6d376eda",
    "number": 4182,
    "body": "Updated #2927.",
    "head_branch": "pr-2927",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add moon phase API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ae86d9087c4d6d376edb",
    "number": 4181,
    "body": "Updated #1960.\r\nCloses #1956.",
    "head_branch": "pr-1960",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add zombie targets turtle egg config (#4181)\n\nCo-authored-by: BillyGalbreath <Blake.Galbreath@GMail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae87d9087c4d6d376edc",
    "number": 4180,
    "body": "This adds API for evokers' wololo targets.\r\n\r\nUpdated #1619.",
    "head_branch": "pr-1619",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add more Evoker API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ae88d9087c4d6d376edd",
    "number": 4179,
    "body": "This fixes an issue on OpenJ9 JVMs.\r\n\r\nPatch author: @ishland\r\nhttps://github.com/YatopiaMC/Yatopia/pull/144\r\n\r\nRedundant with a release of OpenJ9 with this: https://github.com/eclipse/openj9/pull/10410\r\nI'd say we should just keep the patch till it no longer applies (1.16.3/1.17), as by then the affected users should really update.",
    "head_branch": "mc-197271",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix MC-197271"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae89d9087c4d6d376ede",
    "number": 4178,
    "body": "Closes PaperMC/Paper#2028.\r\n\r\nFrom what I can tell, the login process and whatnot uses the getter to get the max players (i.e. no caching happens).",
    "head_branch": "issue-2028",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add #setMaxPlayers API\n\nCloses PaperMC/Paper#2028."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ae8ad9087c4d6d376edf",
    "number": 4177,
    "body": "Fixes PaperMC/Paper#1913.\r\n\r\nThis is just a rebased #1964.\r\nAll credit to @BillyGalbreath for this fix.",
    "head_branch": "issue-1913",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix SpawnChangeEvent not firing for all use-cases\n\nFixes PaperMC/Paper#1913."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae8bd9087c4d6d376ee0",
    "number": 4176,
    "body": "Simplifies the script a little bit ;)",
    "head_branch": "scripts",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae8cd9087c4d6d376ee1",
    "number": 4175,
    "body": "This adds an `-install-mvn` option to install the paper jar to the local maven repository.\r\nThis should be trivial to backport if wanted.\r\n\r\nThis has been tested only on Linux with non-paperclipped and paperclipped jars.",
    "head_branch": "install-mvn-1.16.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae8dd9087c4d6d376ee2",
    "number": 4173,
    "body": "A work-in-progress (at the time of creation) implementation of NamespacedKey based plugin chunk tickets. The reasoning behind the creation of this API can be found in https://github.com/PaperMC/Paper/issues/4147\r\n\r\nState of draft PR:\r\n - ~~yet to be tested~~\r\n - ~~yet to receive JavaDocs~~",
    "head_branch": "keyed-plugin-chunk-tickets",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae8ed9087c4d6d376ee3",
    "number": 4172,
    "body": "This adds a new script which ensures all required dependencies are present.\r\n\r\nThis also adds a dependency I missed into the `CONTRIBUTING.md` file.",
    "head_branch": "deps-script",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Require dependencies script (#4172)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae8fd9087c4d6d376ee4",
    "number": 4171,
    "body": "Fixes #3084.\r\n\r\nI'm sure this isn't the ideal way to fix this issue.",
    "head_branch": "issue-3084",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't require FACING data\n\nFixes PaperMC/Paper#3084."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae90d9087c4d6d376ee5",
    "number": 4170,
    "body": "fixes #4144 ",
    "head_branch": "bugfix/4144",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix #4144 (#4170)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae91d9087c4d6d376ee6",
    "number": 4169,
    "body": "These overrides were in fact not useless.\r\nThey changed the visibility of the superclass' methods.\r\nRemoving them can (and has) cause issues with plugins using NMS, and it's little maintenance cost for us.\r\n\r\nIssue caused in: https://github.com/PaperMC/Paper/commit/9788250b1090713057c6ca39827f52c463fee11c?branch=9788250b1090713057c6ca39827f52c463fee11c&diff=split#diff-5681bcc94a28d03302268d906ba29b93R2378\r\nFixes #4094.",
    "head_branch": "issue-4094",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Increase visibility of a few methods\n\nFixes PaperMC/Paper#4094."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae92d9087c4d6d376ee7",
    "number": 4168,
    "body": "Fixes #4076.\r\n\r\nThis still makes `#getEntity` return `null` if caused by\r\ne.g. a dispenser with a flint and steel.",
    "head_branch": "issue-4076",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PortalCreateEvent needs to know its entity\n\nFixes PaperMC/Paper#4076."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae93d9087c4d6d376ee8",
    "number": 4167,
    "body": "This just makes the subshell be whatever you already run (assuming it supports `-i`); useful for us zsh-dwellers.",
    "head_branch": "progress/1.16.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Make checkoutpr.sh use $SHELL (#4167)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae94d9087c4d6d376ee9",
    "number": 4166,
    "body": "Add comment about the versions and forks",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Update issue templates with notices\n\nAdd comment about our support to older versions and forks of Paper."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae95d9087c4d6d376eea",
    "number": 4164,
    "body": "This fix was as simple as suggested by the code review on the issue at Mojira https://bugs.mojang.com/browse/MC-99259\r\n\r\nI simply moved the call outside of the if/else block so it is called whether the Wither is invulnerable or not",
    "head_branch": "bugfix/MC-99259",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix MC-99259 Wither Boss Bar doesn't update until invulnerability period is over (#4164)\n\nThis fix was as simple as suggested by the code review on the issue at Mojira https://bugs.mojang.com/browse/MC-99259\r\n\r\nI simply moved the call outside of the if/else block so it is called whether the Wither is invulnerable or not"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae97d9087c4d6d376eeb",
    "number": 4161,
    "body": "This reworks the scripts to be POSIX shell compatible, and fixes quite a few issues with quoting variables.\r\n\r\nThis is currently a work-in-progress. Over half has been converted, though I will need to review it again to make sure everything is truly POSIX compatible. I'm no wizard in shell scripting, so criticism is *very* welcome (as always).",
    "head_branch": "script-fixups",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae98d9087c4d6d376eec",
    "number": 4160,
    "body": "This is the same as #4057 except for 1.16.2.\r\nMerge one, close the other; I've simply done the job for you in updating.\r\n\r\nAsynchronous advancements, take 3.\r\n\r\nAdvancements are loaded in the same way as before, except asynchronously.\r\nThis uses the approach from take 1 (#3454), except with the notes from Aikar\r\ntaken into account.\r\n\r\nA player with all advancements took an estimated 15-30ms or so every login\r\non my own machine. The first login of which always took well over 200ms,\r\nhanging around at about 300ms. I'll take the stance that this change will\r\nprovide favourable performance alleviations for servers.\r\n\r\nI've again taken the approach of a \"get if loaded\" method in certain cases,\r\nmostly just those which save data. This should lead to corrupt data or simply\r\nnot yet loaded data not being saved which results in no data loss and no\r\nwaiting for the loading to finish.",
    "head_branch": "1.16.2-async-advancements-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae99d9087c4d6d376eed",
    "number": 4158,
    "body": "Adds config options for adjusting Wandering Trader spawn rates to paper.yml.\r\n- wanderingTraderSpawnMinuteTicks: how long should a \"minute\" be for the spawning logic. Vanilla = 1200 ticks\r\n- wanderingTraderSpawnDayTicks: how long should a \"day\" be for the spawning logic. Vanilla = 24000 ticks\r\n- wanderingTraderSpawnChanceMin: the minimum/starting spawn chance\r\n- wanderingTraderSpawnChanceMax: the maximum spawn chance\r\n- wanderingTraderSpawnChanceFailureIncrement: how much to increment the spawn chance on a failed attempt\r\n\r\nThese values are all easy to understand after a quick read of this page on the Minecraft wiki: https://minecraft.gamepedia.com/Wandering_Trader#Spawning",
    "head_branch": "progress/1.16.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Wandering Trader spawn rate config options"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae9ad9087c4d6d376eee",
    "number": 4154,
    "body": "This is an updated version of #1862, which was created pre-1.14 and never merged due to changes in 1.14. I opted for a new PR due to said changes.\r\n\r\nUpdated test code:\r\n\r\n```\r\npackage com.bermudalocket.playertradewithvillagereventtestplugin;\r\n\r\nimport com.destroystokyo.paper.event.player.PlayerTradeWithVillagerEvent;\r\nimport org.bukkit.event.EventHandler;\r\nimport org.bukkit.event.Listener;\r\nimport org.bukkit.plugin.java.JavaPlugin;\r\n\r\npublic final class PlayerTradeWithVillagerEventTestPlugin extends JavaPlugin implements Listener {\r\n\r\n    @Override\r\n    public void onEnable() {\r\n        this.getServer().getPluginManager().registerEvents(this, this);\r\n    }\r\n\r\n    @EventHandler\r\n    public void onPlayerTradeWithVillager(PlayerTradeWithVillagerEvent event) {\r\n        System.out.println(\"----------------------------------------\");\r\n        System.out.println(\"Caught PlayerTradeWithVillagerEvent.\");\r\n        System.out.println(\"Player: \" + event.getPlayer());\r\n        System.out.println(\"Villager: \" + event.getVillager());\r\n        System.out.println(\"Trade: \" + event.getRecipe());\r\n        System.out.println(\"----------------------------------------\");\r\n    }\r\n\r\n}\r\n```\r\n\r\nproduces:\r\n\r\n```\r\n[13:38:24 INFO]: ----------------------------------------\r\n[13:38:24 INFO]: Caught PlayerTradeWithVillagerEvent.\r\n[13:38:24 INFO]: Player: CraftPlayer{name=bermudalocket}\r\n[13:38:24 INFO]: Villager: CraftVillager\r\n[13:38:24 INFO]: Trade: org.bukkit.craftbukkit.v1_16_R1.inventory.CraftMerchantRecipe@f61f767\r\n[13:38:24 INFO]: ----------------------------------------\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae9bd9087c4d6d376eef",
    "number": 4153,
    "body": "Fixed a surprisingly under-reported bug where the Wither's main head is neutral to Players it can see, when it is supposed to be hostile to all non item or projectile entities that are not undead: https://www.reddit.com/r/Minecraft/comments/bt0ojy/wither_boss_is_neutral_towards_player_and_not/",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae9cd9087c4d6d376ef0",
    "number": 4149,
    "body": "For further details about the issue see https://github.com/PaperMC/Paper/pull/4123#issuecomment-675109506 and https://github.com/PaperMC/Paper/pull/4123#issuecomment-675138070. [This](https://github.com/PaperMC/Paper/blob/progress/1.16.2/Spigot-Server-Patches/0368-Anti-Xray.patch#L688) line prevents `flagDirty` from being invoked for blocks with negative y values, which throws an `ArrayIndexOutOfBoundsException` in 1.16.2. However, `flagDirty` is invoked if the array `obfuscateGlobal` is true for air. This is the case, when air is either added to `hidden-blocks` or `replacement-blocks` in engine-mode 2. This commit **does not** prevent adding air to the `hidden-blocks` list (as I often suggest) and thus being added to the chunk, but rather prevents \"covered\" air from being replaced (obfuscated) by other blocks, which makes no sense at all. In other words air isn't set to true in the `obfuscateGlobal` array, which prevents air from being replaced and prevents unnecessary block updates for air blocks (including the failing void block updates in 1.16.2).\r\n\r\nActually the same issue also exists in versions before 1.16.2 but without throwing an exception. Thus it might be a good idea to also apply these changes to other supported versions.",
    "head_branch": "hotfix/anti-xray-air",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Do not obfuscate air (#4149)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae9dd9087c4d6d376ef1",
    "number": 4146,
    "body": "The current regex for detecting a stored int with the PersistentDataContainer system allows for the absence of any actual number data, accepting an entry of just the letter \"i\" (case insensitive). Once detected as a stored int, it is substringed to drop the last (and only) character, passing an empty String to to `Integer.parseInt(String)`, which gives us a shiny exception.\r\n\r\nThis patch ensures numbers are present too.\r\n\r\nTest code:\r\n```java\r\n// Create item\r\nItemStack item = new ItemStack(Material.STONE);\r\n// Create a key\r\nNamespacedKey key = new NamespacedKey(this, \"Hug\");\r\n// Set meta with persistent data\r\nItemMeta itemMeta = item.getItemMeta();\r\nitemMeta.setDisplayName(\"Hugs!\");\r\nitemMeta.getPersistentDataContainer().set(key, PersistentDataType.STRING, \"I\");\r\nitem.setItemMeta(itemMeta);\r\n// Print for verification\r\nSystem.out.println(item);\r\n// Serialize\r\nByteArrayOutputStream outputStream = new ByteArrayOutputStream();\r\nBukkitObjectOutputStream dataOutput = new BukkitObjectOutputStream(outputStream);\r\ndataOutput.writeObject(item);\r\ndataOutput.close();\r\nbyte[] bytes = outputStream.toByteArray();\r\n// Deserialize\r\nByteArrayInputStream inputStream = new ByteArrayInputStream(bytes);\r\nBukkitObjectInputStream dataInput = new BukkitObjectInputStream(inputStream);\r\nItemStack itemRestored = (ItemStack) dataInput.readObject();\r\ndataInput.close();\r\n// Print for verification\r\nSystem.out.println(itemRestored);\r\n```\r\n\r\n\r\nOutput on latest Paper:\r\n```\r\n[12:45:33 INFO]: ItemStack{STONE x 1, UNSPECIFIC_META:{meta-type=UNSPECIFIC, display-name=Hugs!, PublicBukkitValues={myadorableplugin:hug=I}}}\r\n[12:45:33 ERROR]: [org.bukkit.configuration.serialization.ConfigurationSerialization] Could not call method 'public static org.bukkit.inventory.meta.ItemMeta org.bukkit.craftbukkit.v1_16_R1.inventory.CraftMetaItem$SerializableMeta.deserialize(java.util.Map) throws java.lang.Throwable' of class org.bukkit.craftbukkit.v1_16_R1.inventory.CraftMetaItem$SerializableMeta for deserialization\r\njava.lang.NumberFormatException: For input string: \"\"\r\n        at java.lang.NumberFormatException.forInputString(Unknown Source) ~[?:1.8.0_261]\r\n        at java.lang.Integer.parseInt(Unknown Source) ~[?:1.8.0_261]\r\n        at java.lang.Integer.parseInt(Unknown Source) ~[?:1.8.0_261]\r\n        at org.bukkit.craftbukkit.v1_16_R1.util.CraftNBTTagConfigSerializer.deserialize(CraftNBTTagConfigSerializer.java:80) ~[patched_1.16.1.jar:git-Paper-135]\r\n        at org.bukkit.craftbukkit.v1_16_R1.util.CraftNBTTagConfigSerializer.deserialize(CraftNBTTagConfigSerializer.java:54) ~[patched_1.16.1.jar:git-Paper-135]\r\n        at org.bukkit.craftbukkit.v1_16_R1.inventory.CraftMetaItem.<init>(CraftMetaItem.java:628) ~[patched_1.16.1.jar:git-Paper-135]\r\n...[snipping it here because that's enough context]\r\n```\r\n\r\nOutput on Paper with this PR's patch:\r\n```\r\n[12:52:18 INFO]: ItemStack{STONE x 1, UNSPECIFIC_META:{meta-type=UNSPECIFIC, display-name=Hugs!, PublicBukkitValues={myadorableplugin:hug=I}}}\r\n[12:52:18 INFO]: ItemStack{STONE x 1, UNSPECIFIC_META:{meta-type=UNSPECIFIC, display-name=Hugs!, PublicBukkitValues={myadorableplugin:hug=I}}}\r\n```",
    "head_branch": "cbnbti",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix regex mistake in CB NBT int deserialization (#4146)\n\nThe existing regex is too open and allows for the absence of any actual\r\nnumber data, detecting an NBT entry of just the letter \"i\" in upper or\r\nlower case. This causes a single-character NBT entry to be processed as\r\nan integer ending in \"i\", passing an empty String to to Integer.parseInt,\r\ntriggering an exception in loading the item.\r\n\r\nThis commit forces numbers to be present prior to the ending \"i\"\r\nletter."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae9ed9087c4d6d376ef2",
    "number": 4141,
    "body": "This re-implements my previous PR for this, except  this doesn't add to shit_to_check.md, because this is added from my previous PR",
    "head_branch": "fix-ide-debug-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix IDE Debug JVM Flag 2 (#4141)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ae9fd9087c4d6d376ef3",
    "number": 4135,
    "body": "See https://github.com/PaperMC/Paper/pull/4129#issuecomment-674165690\r\nGot closed because I removed my old commit.\r\n\r\n> Made the event cancellable and added the missing 1.16 materials to PlayerArmorChangeEvent.SlotType.\r\n> \r\n> Should fix #4106 and also fix #2487",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aea0d9087c4d6d376ef4",
    "number": 4132,
    "body": "I've no idea which of these should be merged with other patches, if any.\r\n\r\nThis should fix the two issues brought up in #4123 with stack traces.",
    "head_branch": "progress/1.16.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4132 from Proximyst/progress/1.16.2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aea1d9087c4d6d376ef5",
    "number": 4131,
    "body": "Currently, all blocks being moved by a piston are indestructible by explosions unless the option `unsupported-settings.allow-permanent-block-break-exploits` is enabled (#4096). To prevent headless pistons from being created, this option also makes *all* moving piston blocks indestructible. With the current settings, it is not possible to allow moving blocks to be destroyed by TNT without also allowing bedrock to be broken.\r\n\r\nThis pull request splits the behavior of preventing headless pistons into its own config option (`unsupported-settings.allow-headless-pistons`). It also properly handles the destruction of a moving piston head by breaking the associated piston base, rather than making all moving blocks indestructible.\r\n\r\nFinally, this pull request also adds other indestructible blocks to the list - command blocks, barriers, structure blocks, and jigsaw blocks. While these blocks do not naturally generate in a survival world, most admins would still wish to prevent them from being broken by survival players.",
    "head_branch": "improve-indestructable-blocks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve handling of indestructable blocks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aea2d9087c4d6d376ef6",
    "number": 4129,
    "body": "Made the event cancellable and added the missing 1.16 materials to PlayerArmorChangeEvent.SlotType.\r\n\r\nShould fix #4106 and also fix #2487\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aea3d9087c4d6d376ef7",
    "number": 4123,
    "body": "ENSURE YOU HAVE A BACKUP OF ALL WORLDS BEFORE STARTING YOUR SERVER WITH 1.16.2 BUILDS\r\n\r\nCreating as PR so can merge as squash but retain history for changes\r\n\r\nlatest 1.16.2 build prob ready for release - note there is a NEW issue of the \"MapLike\" data conversions spam. \r\n\r\nhttps://bugs.mojang.com/browse/MC-197883\r\n\r\nUNSURE OF DATA INTEGRITY - Please test and ensure your Villages, Pillager Outposts and Bastions are converting from old versions correctly. This includes 1.16.1 too.\r\n\r\n\r\nENSURE YOU HAVE A BACKUP OF ALL WORLDS BEFORE STARTING YOUR SERVER WITH 1.16.2 BUILDS\r\n\r\n\r\nENSURE YOU HAVE A BACKUP OF ALL WORLDS BEFORE STARTING YOUR SERVER WITH 1.16.2 BUILDS\r\n\r\n\r\nENSURE YOU HAVE A BACKUP OF ALL WORLDS BEFORE STARTING YOUR SERVER WITH 1.16.2 BUILDS",
    "head_branch": "progress/1.16.2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "1.16.2 Release (#4123)\n\nPaperMC believes that 1.16.2 is now ready for general release as we fixed the main issue plagueing the 1.16.x release, the MapLike data conversion issues.\r\n\r\nUntil now, it was not safe for a server to convert a world to 1.16.2 without data conversion issues around villages and potentially other things. If you did, those MapLike errors meant something went wrong.\r\n\r\nThis is now resolved.\r\n\r\nBig thanks to all those that helped, notably @BillyGalbreath and @Proximyst who did large parts of the update process with me.\r\n\r\nPlease as always, backup your worlds and test before updating to 1.16.2!\r\n\r\nIf you update to 1.16.2, there is no going back to an older build than this.\r\n\r\n---------------------------------\r\n\r\nCo-authored-by: William Blake Galbreath <Blake.Galbreath@GMail.com>\r\nCo-authored-by: Mariell Hoversholm <proximyst@proximyst.com>\r\nCo-authored-by: krolik-exe <69214078+krolik-exe@users.noreply.github.com>\r\nCo-authored-by: BillyGalbreath <BillyGalbreath@users.noreply.github.com>\r\nCo-authored-by: stonar96 <minecraft.stonar96@gmail.com>\r\nCo-authored-by: Shane Freeder <theboyetronic@gmail.com>\r\nCo-authored-by: Jason <jasonpenilla2@me.com>\r\nCo-authored-by: kashike <kashike@vq.lc>\r\nCo-authored-by: Aurora <21148213+aurorasmiles@users.noreply.github.com>\r\nCo-authored-by: KennyTV <kennytv@t-online.de>\r\nCo-authored-by: commandblockguy <commandblockguy1@gmail.com>\r\nCo-authored-by: DigitalRegent <misterwener@gmail.com>\r\nCo-authored-by: ishland <ishlandmc@yeah.net>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aea4d9087c4d6d376ef8",
    "number": 4120,
    "body": "",
    "head_branch": "ver/1.12.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aea5d9087c4d6d376ef9",
    "number": 4117,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aea6d9087c4d6d376efa",
    "number": 4116,
    "body": "",
    "head_branch": "progress/1.16.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add this to SHIT_TO_CHECK.md aswell"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aea7d9087c4d6d376efb",
    "number": 4114,
    "body": "It now runs and the tests pass!",
    "head_branch": "progress/1.16.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Import fastutil classes patch"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aea9d9087c4d6d376efc",
    "number": 4112,
    "body": "I skipped this patch. Didn't know how to resolve the conflicts.\r\n0385-only-add-passanger-entities-once-from-spawners.patch\r\n\r\nIt still doesn't compile because of MojangAPI 1.16.2 missing dependency.\r\n\r\nEnjoy ;)",
    "head_branch": "progress/1.16.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #4112 from BillyGalbreath/progress/1.16.2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aeaad9087c4d6d376efd",
    "number": 4109,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aeabd9087c4d6d376efe",
    "number": 4108,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aeacd9087c4d6d376eff",
    "number": 4105,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aeadd9087c4d6d376f00",
    "number": 4101,
    "body": "~~Tested & works without issues.\r\nAlso added some more obfuscation helpers for easier maintenance & update between major releases~~\r\nraids don't work with it",
    "head_branch": "patch/port-villager-optimizations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aeaed9087c4d6d376f01",
    "number": 4092,
    "body": "This PR adds the event by the same name but also serves a second purpose. There is a new variable called pendingPlayerBlockEvents which serves to help propagate which Player cause a block break which cause any subsequent block breaks.\r\n\r\nExamples of BlockDestroyedByNeighborEvent are things like breaking a column of vines, bamboo, DoubleTall plant blocks or any block that is broken as a result of an initial block break.\r\n\r\nThe idea is that this can be expanded up by other contributors to add Player to more Events that currently have none. An example of this in a following PR would be SpongeAbsorbEvent, which will be able to have which Player placed said Sponge block, etc.",
    "head_branch": "spongeevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aeafd9087c4d6d376f02",
    "number": 4088,
    "body": "This patch was dropped in 1.14 . I couldn't find it in removed so I got it from 1.13\r\nTested with 30-40 players and works fine with default settings.\r\nCloses https://github.com/PaperMC/Paper/issues/4070",
    "head_branch": "patch/incremental-saving",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Restore incremental player saving\n\nThis patch was dropped in 1.14 . I couldn't find it in removed so I got it from 1.13\nTested with 30-40 players and works fine with default settings.\nCloses https://github.com/PaperMC/Paper/issues/4070"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aeb0d9087c4d6d376f03",
    "number": 4083,
    "body": "f275e9cb9cd28eb560eab3cb444dd3393f0aa583 brought some nice optimizations but always skipping fetching inventory entities when the block above a hopper is occluding breaks a number of redstone creations. This PR makes that behavior configurable instead, with the default being that the optimization is enabled.\r\n\r\nResolves #3616 \r\n\r\n(Fixed the Git tree from #4080... No clue what happened there, sorry)",
    "head_branch": "configurable-hopper-occlusion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aeb1d9087c4d6d376f04",
    "number": 4080,
    "body": "f275e9cb9cd28eb560eab3cb444dd3393f0aa583 brought some nice optimizations but always skipping fetching inventory entities when the block above a hopper is occluding breaks a number of redstone creations. This PR makes that behavior configurable instead, with the default being that the optimization is enabled.\r\n\r\nThis resolves #3616.",
    "head_branch": "fix-bounding-boxes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aeb2d9087c4d6d376f05",
    "number": 4079,
    "body": "Previously when searching for a portal, the server would use the search radius to determine which chunks it needs to search, and then would consider any portal within those chunks as a match, even if it is outside the search radius.\r\nThis changes it so that the portal list is filtered to only include portals within the configured search radius (ignoring the Y coordinate).\r\n\r\nfixes #3583 \r\n",
    "head_branch": "fix-portal-search-radius",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aeb3d9087c4d6d376f06",
    "number": 4078,
    "body": "Tweaked Patrol Spawning to make it a truly unique event rather than obey Natural Mob Spawning laws to fit other event based spawns (Also removed redundant option to disable said Patrols)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aeb4d9087c4d6d376f07",
    "number": 4077,
    "body": "Updated Paper Config, removed redundant Patrol Spawning Option and added 2 more, 1 combat related and another Survival Related\r\n\r\nNote: This Commit also involves the associated implementations aside from just patching the PaperWorldConfig class\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aeb5d9087c4d6d376f08",
    "number": 4074,
    "body": "This is a frequently requested feature. <strike>In rare cases two chunk packets\r\nmust be created.</strike> The permission is 'paper.antixray.bypass'. <strike>I have added\r\nall the required OBFHELPERs to 0004-MC-Utils.patch.</strike>",
    "head_branch": "feature/anti-xray-bypass",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Anti-Xray bypass permission\n\nThis is a frequently requested feature. The permission is\n'paper.antixray.bypass'."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aeb6d9087c4d6d376f09",
    "number": 4073,
    "body": "Up to now a simple counter variable was used to iterate through the\r\nhidden-blocks in engine-mode 2 while obfuscating. This results in low\r\nquality obfuscation. One could for example easily write a hack, which\r\nbypasses Anti-Xray by not showing ores, which have a certain pattern.\r\nTherefore ThreadLocalRandom is utilized to pick random blocks from the\r\nhidden-blocks list. Furthermore engine-mode 1 is slightly optimized by\r\nthis commit. However, engine-mode 2 is probably slower. I did some tests\r\nbut I wasn't able to get stable results for some reason. Therefore this\r\nneeds further testing. Also note that Java's random implementations are\r\nprobably a bit overkill for this purpose. A lower quality but more\r\nefficient random implementation would also do the job.",
    "head_branch": "feature/anti-xray-random",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make engine-mode 2 truly random\n\nUp to now a simple counter variable was used to iterate through the\nhidden-blocks in engine-mode 2 while obfuscating. This results in low\nquality obfuscation.\n\nOne could for example easily write a hack, which bypasses Anti-Xray\nby not showing ores, which have a certain pattern.\n\nFurthermore, engine-mode 1 is slightly optimized by this commit.\nHowever, engine-mode 2 is probably somewhat slower. I did some tests but\nI wasn't able to get stable results for some reason. Therefore this\nneeds further testing.\n\nAn optimized random algorithm is utilized to pick random blocks from the\nhidden-blocks list. This implementation uses xorshift and integer\nmultiplication for bounding. The resulting distribution is negligibly\nbiased because xorshift doesn't generate 0 and integer multiplication\nalso implies biased results."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aeb7d9087c4d6d376f0a",
    "number": 4072,
    "body": "**Preserve order of hidden-blocks in Anti-Xray**\r\nThis small change allows to specify and predict the order in which\r\nAnti-Xray uses the hidden-blocks in engine-mode 2. The order is\r\npreserved as specified in the hidden-blocks list. This can be useful,\r\nfor example, when adding air to the hidden-blocks to predict which fake\r\nores should be exposed to fake air.\r\n\r\n**Allow to add equal blocks multiple times to hidden-blocks**\r\nThis adds the ability to add equal blocks multiple times to the\r\nhidden-blocks of Anti-Xray in engine-mode 2. Thus it is possible to give\r\ncertain blocks different priorities in Anti-Xray. For example if air and\r\ndiamond_ore are added twice, the obfuscated chunk will contain twice as\r\nmany air and diamond_ore blocks as other blocks in the list.\r\n\r\nNote that the second commit pretty much overwrites the first commit.\r\nHowever, these are independent ideas about the same topic.",
    "head_branch": "feature/anti-xray-block-order",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Preserve order and allow multiple equal blocks in hidden-blocks of Anti-Xray (#4072)\n\n* Preserve order of hidden-blocks in Anti-Xray\r\n\r\nThis small change allows to specify and predict the order in which\r\nAnti-Xray uses the hidden-blocks in engine-mode 2. The order is\r\npreserved as specified in the hidden-blocks list. This can be useful,\r\nfor example, when adding air to the hidden-blocks to predict which fake\r\nores should be exposed to fake air.\r\n\r\n* Allow to add equal blocks multiple times to hidden-blocks\r\n\r\nThis adds the ability to add equal blocks multiple times to the\r\nhidden-blocks of Anti-Xray in engine-mode 2. Thus it is possible to give\r\ncertain blocks different priorities in Anti-Xray. For example if air and\r\ndiamond_ore are added twice, the obfuscated chunk will contain twice as\r\nmany air and diamond_ore blocks as other blocks in the list."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aeb8d9087c4d6d376f0b",
    "number": 4068,
    "body": "Changelist is the same as https://github.com/PaperMC/Paper/pull/4067 but this time it's even more polished and every change is in an individual commit\r\n\r\n\r\n\r\n\r\nSorry if I appear like an idiot this is pretty much the first time I've tried a Pull Request",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aeb9d9087c4d6d376f0c",
    "number": 4067,
    "body": "List of changes:\r\n-Tidied up my Patch, this time it's much cleaner than before\r\n\r\n-Removed redundant option from Paper Config that disables Patrol Spawning\r\n-Fixed Patrol and Wandering Trader Spawning to only be affected by their respective gamerules as they are unique events and not regular mob spawning, previously they would be affected by the doMobSpawning gamerule as well (And in the case of Patrols the option to disable normally spawning monsters)\r\n-Added Operator API to Paper that allows Plugins to set the OP Level of Players ranging from 1-4, useful for rank and permission systems\r\n-Added Option to disable the annoying event of Villagers turning into Witches when struck by Lightning in the Paper Config\r\n-Added Option to completely disable the 1.9 Combat Attack Cooldown for PVP Players, while keeping the more interesting combat mechanics of 1.9 intact (This mechanic is completely seamless and does not interfere with the displayed attack speed on Weapons, allowing for an even better 1.9 PVP experience while retaining no cooldown)\r\n\r\n\r\n\r\nI'm planning on adding more mechanics and events once 1.16.2 Full Release drops\r\n\r\n\r\n\r\nP.S. I am aware that it's better practice to have each change as an individual commit but I was sort of in a rush",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aebad9087c4d6d376f0d",
    "number": 4064,
    "body": "Currently, the CraftScheduler will commence asynchronous tasks every tick, per `CraftAsyncScheduler#mainThreadHeartbeat`. However, if the main thread is blocked, async tasks will not begin.\r\n\r\nA common use case involves awaiting the result of an asynchronous computation on the main thread. Using the current API in the BukkitScheduler, this might cause a deadlock, since initiation of async tasks requires the main thread to keep beating.\r\n\r\nTo solve this, I added the `BukkitScheduler#createAsyncExecutor` API. This method returns an `Executor` not coupled to the server tick loop. If the main thread is blocked, it will still be able to submit tasks, using the server's cached thread pool.\r\n\r\n**Why not tell people experiencing this issue to create their own ExecutorService?**\r\nThat's completely possible, and I do not want to say it is a bad idea. For many cases, an own thread pool would be preferable. However, doing so negates the advantage of the scheduler's common thread pool, which reuses Craft Scheduler Threads as they become available. Also, creating an ExecutorService for a small task is overkill when there is one available.\r\n\r\n**Error Reporting**\r\nI followed the same approach the scheduler normally uses for CraftAsyncTasks - catch-all and print the exception. However, the log message is slightly different to indicate the task was created through such an Executor.",
    "head_branch": "create-async-executor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aebbd9087c4d6d376f0e",
    "number": 4062,
    "body": "I've done 4 things with this commit:\r\n-Added the option to disable Villagers turning to Witches when struck by Lightning\r\n-Added the option to totally remove the Combat Attack Cooldown for Players, while keeping the rest of 1.9 combat the same\r\n-Expanded Operator API by giving plugins the ability to set OP level for Players, rather than just totally deopping or opping said Player. Useful for rank and permission systems\r\n\r\nEDIT: I forgot to mention that I removed the redundant option to disable Patrols, as pointed out by Proxymist\r\n\r\n\r\nI plan on adding more advanced survival features after the Full Release of 1.16.2 drops, to spice up the gameplay of regular survival",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aebcd9087c4d6d376f0f",
    "number": 4060,
    "body": "This is required because the *same* enum is used for getting both on\r\nblocks. If a `Switch.Face` is requested on a block first, then\r\n`FaceAttachable.AttachedFace`, it will throw a `ClassCastException`.\r\nThis is because the converted class is cached as `Switch.Face` in an\r\ninternal map, while what we expect and cast to is\r\n`FaceAttachable.AttachedFace`.\r\n\r\nI'm fairly certain my approach is less than ideal, and would therefore\r\nappreciate reviews and ideas on how to do it in a more idiomatic way.",
    "head_branch": "fix-switch-face-usages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aebdd9087c4d6d376f10",
    "number": 4059,
    "body": "This reintroduces Aikar's patch for removing streams and\r\noptimizing the collections in `Pathfinder`.",
    "head_branch": "pathfinder-streams-1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Restore Pathfinder Optimizations from 1.15.2\n\nWe dropped the patch in 1.16.1 update due to it being a major conflict.\nThis restores it.\n\nCo-Authored-By: Aikar <aikar@aikar.co>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aebed9087c4d6d376f11",
    "number": 4057,
    "body": "Asynchronous advancements, take 3.\r\n\r\nAdvancements are loaded in the same way as before, except asynchronously.\r\nThis uses the approach from take 1 (#3454), except with the notes from Aikar\r\ntaken into account.\r\n\r\nA player with *all* advancements took an estimated 15-30ms or so every login\r\non my own machine. The first login of which always took well over 200ms,\r\nhanging around at about 300ms. I'll take the stance that this change will\r\nprovide favourable performance alleviations for servers.\r\n\r\nI've again taken the approach of a \"get if loaded\" method in certain cases,\r\nmostly just those which save data. This should lead to corrupt data or simply\r\nnot yet loaded data not being saved which results in no data loss and no\r\nwaiting for the loading to finish.",
    "head_branch": "async-advancements-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aebfd9087c4d6d376f12",
    "number": 4056,
    "body": "The redstone changes I found in xisumavoid and Mumbo Jumbo's videos work as in vanilla.\r\nThe only real change was some remapping (thank you, MiniMappingViewer <3) and fixing conflicts.\r\n\r\nPaperclip for those who want to help test it properly: https://www.proximy.st/archive/63feb751493c/paperclip.jar",
    "head_branch": "eigencraft-1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Port Eigencraft to 1.16"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aec0d9087c4d6d376f13",
    "number": 4027,
    "body": "Upstream had a few merge conflicts with adding a new interface to `Chest` and `ShulkerBox`es, and a change to the accessibility of a method.\r\n\r\nBukkit Changes:\r\neeb1042f #491: Add support to change block's lid state\r\n\r\nCraftBukkit Changes:\r\n8fb65851 #660: Add support to change block's lid state",
    "head_branch": "update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit)\n\nUpstream has released updates that appears to apply and compile correctly.\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\n\nBukkit Changes:\neeb1042f #491: Add support to change block's lid state\n\nCraftBukkit Changes:\n8fb65851 #660: Add support to change block's lid state"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aec1d9087c4d6d376f14",
    "number": 4016,
    "body": "Opening this in draft state as there are a couple of ways to solve it [and I don't know if you want to have such API additions at all].\r\nCurrently there is no way to get the internal key used in the translation map, without using NMS.\r\nThis has lead to code like https://github.com/PikaMug/LocaleLib/blob/master/src/main/java/me/pikamug/localelib/LocaleKeys.java \r\nFor NMS, it's however trivial to get that key and that's what this patch solves.\r\n\r\nThere's just a few points where I am uncertain:\r\n 1. Returning a TranslatableComponent instead of the Translation Key. It's more convenient and I don't see use cases where the key would be required without a component. In this case there's still TC#getTranslate, however if someone would soley need the keys, that'd be useless allocations\r\n  2. Usually such things would belong into the ItemMeta, but due to NMS, this is only available on `ItemStack`, not even Material or something else. I've added it to ItemStack as Metas aren't linked to Stacks and so I couldn't add it to the Meta.\r\n  3. The Implementation in Bukkit: Typically Bukkit has interfaces but ItemStack is a class, so I put an exception into it in the body. Should I maybe just return null instead?\r\n  4. The OBFHELPER and changing the protection level instead of directly calling getName(). My Intention was to make it more future proof in case getName starts to return something different.\r\n\r\nThanks for your time!",
    "head_branch": "add-translateable-components",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add a way to get translation keys for blocks, entities and materials"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aec2d9087c4d6d376f15",
    "number": 4014,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix off by one error for scheduling block ticks (#4014)\n\nCo-authored-by: Spottedleaf <Spottedleaf@users.noreply.github.com>\r\n\r\nFixes #4015"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aec3d9087c4d6d376f16",
    "number": 4013,
    "body": "",
    "head_branch": "ver/1.15.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[1.15] Fix off by one error for scheduling block ticks (#4013)\n\nCo-authored-by: Spottedleaf <Spottedleaf@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aec4d9087c4d6d376f17",
    "number": 4011,
    "body": "No longer rely on world time as plugins like to screw it up.\r\n\r\nAdd a new flag -Dpaper.ticklist-max-tick-delay= that\r\nwill automatically drop any tick entries that have a delay\r\nexceeding the specified amount. This is only useful\r\nfor cleaning up a world that has been corrupted by\r\ncertain blocks having a huge tick delay.\r\n\r\nAimed at resolving https://github.com/PaperMC/Paper/issues/3251\r\n\r\nAlso fix an issue with some rails connecting incorrectly\r\nthat I found when testing.",
    "head_branch": "ver/1.15.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[1.15] Tighten logic for handling target tick times in tick scheduler (#4011)\n\nNo longer rely on world time as plugins like to screw it up.\r\n\r\nAdd a new flag -Dpaper.ticklist-max-tick-delay= that\r\nwill automatically drop any tick entries that have a delay\r\nexceeding the specified amount. This is only useful\r\nfor cleaning up a world that has been corrupted by\r\ncertain blocks having a huge tick delay.\r\n\r\nAlso fix an issue with some rails connecting incorrectly\r\nthat I found when testing.\r\n\r\nCo-authored-by: Spottedleaf <Spottedleaf@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aec5d9087c4d6d376f18",
    "number": 4010,
    "body": "No longer rely on world time as plugins like to screw it up.\r\n\r\nAdd a new flag -Dpaper.ticklist-max-tick-delay=<ticks> that\r\nwill automatically drop any tick entries that have a delay\r\nexceeding the specified amount. This is only useful\r\nfor cleaning up a world that has been corrupted by\r\ncertain blocks having a huge tick delay.\r\n\r\nAimed at resolving https://github.com/PaperMC/Paper/issues/3251\r\n\r\nAlso fix an issue with some rails connecting incorrectly\r\nthat I found when testing.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Tighten logic for handling target tick times in tick scheduler (#4010)\n\nNo longer rely on world time as plugins like to screw it up.\r\n\r\nAdd a new flag -Dpaper.ticklist-max-tick-delay= that\r\nwill automatically drop any tick entries that have a delay\r\nexceeding the specified amount. This is only useful\r\nfor cleaning up a world that has been corrupted by\r\ncertain blocks having a huge tick delay.\r\n\r\nAimed at resolving #3251\r\n\r\nAlso fix an issue with some rails connecting incorrectly\r\nthat I found when testing.\r\n\r\nCo-authored-by: Spottedleaf <Spottedleaf@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aec6d9087c4d6d376f19",
    "number": 4009,
    "body": "",
    "head_branch": "MaterialTags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expand MaterialTags v2 (#4009)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aec7d9087c4d6d376f1a",
    "number": 4007,
    "body": "This fixes a bug which prevents using `./paper t` if the project is stored in a path with a space in a folders name.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "prevent path space splitting in testServer.sh (#4007)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aec8d9087c4d6d376f1b",
    "number": 4000,
    "body": "Not the absolutely most useful things in the world, but it's nice to play around to have damage applied for a few more ticks (could also be used as a little force field to take damage in 👀),\r\nor even more than one effect during its lifetime,\r\nor or mimic real life visual vs. sound by only setting the first lifetime higher, so that visual comes first with the sound a bit delayed by setting the first life ticks higher\r\n\r\nIf setting those values is undesired for some reason, at least being able to get them would be nice",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add more lightning API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aec9d9087c4d6d376f1c",
    "number": 3998,
    "body": "This fixes a bug (ChestShop-authors/ChestShop-3#328) where blocks wouldn't show the effect nor play the sound in certain cases when a plugin listened on the `BlockDestroyEvent`. This was due to the `playEffect` field in the `BlockDestroyEvent` class not being set which meant it was returned as `false` while it [should've been defaulted to `true`](https://github.com/PaperMC/Paper/blob/master/Spigot-Server-Patches/0331-BlockDestroyEvent.patch#L24).",
    "head_branch": "pr/fix-BlockDestroyEvent-effect",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix sound/particles not showing when listening on BlockDestroyEvent (#3998)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aecad9087c4d6d376f1d",
    "number": 3996,
    "body": "oops",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[1.16] Do not sync load POI data (#3996)\n\nCo-authored-by: Spottedleaf <Spottedleaf@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aecbd9087c4d6d376f1e",
    "number": 3991,
    "body": "This patch fixes three main issues with the cartography table:\r\n- Using a swap button (hotbar or offhand) on the result item does not use up the input items.\r\n- If the map is being locked, the player's inventory is full, and the player shift clicks on the result, it creates a map ID that will never be used.\r\n- Since the display item in the result slot is not the same as the actual item when locking, shift clicking on the result made the locked map merge with not locked maps in the player's inventory.\r\n\r\nChanges:\r\n- The result slot has been changed so that input slot item removal happens in onTake(EntityHuman, ItemStack) instead of a(int), solving the first issue.\r\n- Map locking now happens in-place (ItemWorldMap#lockMap(ItemStack)), meaning that the method does not return a new ItemStack. This allows onTake(EntityHuman, ItemStack) to modify the output item in-place, which helps solve the second issue. Locking in-place is also more consistent since scaling also happens in-place.\r\n- When the output slot is shift clicked and the map is being locked or scaled, the new map will only be merged in the player's inventory if they have an empty slot. Merging in this case happens after onTake(EntityHuman, ItemStack) is called to allow the in-place locking to happen first. Updating the player's inventory is sometimes necessary because the client thinks that something else happened. This solves the second and third issues.\r\n- Obfhelpers have been added to makes these changes easier to understand.",
    "head_branch": "fix/cartography-table",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aeccd9087c4d6d376f1f",
    "number": 3990,
    "body": "Fixes #3913.",
    "head_branch": "fix-pdc-contract-breach",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix PersistentDataContainer contract violation (_->!null returns null) (#3990)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aecdd9087c4d6d376f20",
    "number": 3989,
    "body": "Fixes #3871\r\n\r\nEntityLiving#applyInstantEffect() immediately kills the player and drops their inventory.\r\nBefore this patch, instant effects would be applied before the potion ItemStack is removed and replaced with a glass bottle. This caused the potion ItemStack to be dropped before it was supposed to be removed from the inventory. It also caused the glass bottle to be put into a dead player's inventory.\r\nThis patch makes it so that instant effects are applied after the potion ItemStack is removed, and the glass bottle is only put into the player's inventory if the player is not dead. Otherwise, the glass bottle is dropped on the ground.",
    "head_branch": "fix/harming-potion-dupe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix harming potion dupe\n\nEntityLiving#applyInstantEffect() immediately kills the player and drops their inventory.\nBefore this patch, instant effects would be applied before the potion ItemStack is removed and replaced with a glass bottle. This caused the potion ItemStack to be dropped before it was supposed to be removed from the inventory. It also caused the glass bottle to be put into a dead player's inventory.\nThis patch makes it so that instant effects are applied after the potion ItemStack is removed, and the glass bottle is only put into the player's inventory if the player is not dead. Otherwise, the glass bottle is dropped on the ground."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aecfd9087c4d6d376f21",
    "number": 3983,
    "body": "",
    "head_branch": "update-nms-revision-package",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix IDE Debug JVM Flag for 1.16 (#3983)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aed0d9087c4d6d376f22",
    "number": 3982,
    "body": "",
    "head_branch": "update-nms-revision-package",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aed1d9087c4d6d376f23",
    "number": 3980,
    "body": "Fixes conflict in LivingEntity event handling.\r\n\r\nMakes PrepareSmithingEvent extend PrepareResultEvent and use it.\r\n\r\nThe Smithing event was first edited as it's own patch (18c0539), but later I've merged it with the original patch (d6fadeb) - I think it's better this way, but leaving just in case. Feel free to squash them.",
    "head_branch": "update_upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit) (#3980)\n\nUpstream has released updates that appears to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n09f10fd9 SPIGOT-5950: Add PrepareSmithingEvent event\r\n\r\nCraftBukkit Changes:\r\n7c03d257 SPIGOT-6011: End Gateways do not work on Non-Main End Worlds\r\nd492e363 SPIGOT-6015: Small Armor Stand doesn't drop items\r\n5db13eea SPIGOT-5950: Add PrepareSmithingEvent event"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aed2d9087c4d6d376f24",
    "number": 3978,
    "body": "The patch that caused conflict:\r\n```patch\r\n          if (this.cV() && this.world.getGameRules().getBoolean(GameRules.DO_MOB_LOOT)) {\r\n              this.a(damagesource, flag);\r\n              this.dropDeathLoot(damagesource, i, flag);\r\n-+            // CraftBukkit start - Call death event\r\n-+            CraftEventFactory.callEntityDeathEvent(this, this.drops);\r\n-+            this.drops = new ArrayList<org.bukkit.inventory.ItemStack>();\r\n-+        } else {\r\n-+            CraftEventFactory.callEntityDeathEvent(this);\r\n-+            // CraftBukkit end\r\n          }\r\n++        // CraftBukkit start - Call death event\r\n++        CraftEventFactory.callEntityDeathEvent(this, this.drops);\r\n++        this.drops = new ArrayList<>();\r\n++        // CraftBukkit end\r\n  \r\n -        this.dropInventory();\r\n +        // this.dropInventory();// CraftBukkit - moved up\r\n```\r\n\r\nI hope I didn't mess it up :)",
    "head_branch": "update_upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aed3d9087c4d6d376f25",
    "number": 3971,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve per player mob spawning (#3971)\n\nCo-authored-by: Spottedleaf <Spottedleaf@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aed4d9087c4d6d376f26",
    "number": 3964,
    "body": "",
    "head_branch": "MaterialTags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expand MaterialTags (#3964)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aed5d9087c4d6d376f27",
    "number": 3959,
    "body": "This is quite the micro change, but this makes Paper's actionbar methods use the title packet instead of the chat packet to *ever so slightly* reduce encoded data (without the uuid, since that's always the system uuid anyways).\r\nAlso puts the title packet use for components to a method inside of the Player interface, as opposed to Spigot's sub class, so that using the stupid sub class isn't encouraged any more than it already is\r\n\r\nThought this might *just* be enough to be at least slightly better in cases of extremely frequent actionbar spam / using the 'more appropriate' packet, since what you send isn't  \"Game Info\", but a custom actionbar title, which also spares the client from 1-2 extra checks",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use title packet for actionbar methods (#3959)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aed6d9087c4d6d376f28",
    "number": 3956,
    "body": ",I started removing of the obfuscation resulting from decompilation in the advancement classes and things belonging to it\r\n\r\nI am still in the process but i wanted to open a pull request in case this is not asked for.\r\n\r\nI am not shure if to import any other classes because there is a lot of classes just describing the triggers for the criterion trigges\r\n\r\nI marked the old methods as @deprecated to make future removal easier\r\n\r\nIf it is easier for future updates I can restart and do only the needed edits\r\n\r\nOr if its easier i add each edited file in a new commit",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aed7d9087c4d6d376f29",
    "number": 3946,
    "body": "Allows plugins to get the base speed at which an ItemStack destroys a Block, useful for determining if an ItemStack is a \"proper\" tool to mine a Block.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add getDestroySpeed to Block API\n\nCo-authored-by: MiniDigger <admin@minidigger.me>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aed8d9087c4d6d376f2a",
    "number": 3942,
    "body": "",
    "head_branch": "reverting",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Only get spawn block if it's relevant, fixes #3934 (#3942)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aed9d9087c4d6d376f2b",
    "number": 3940,
    "body": "Fixes #3909 ",
    "head_branch": "DungeonSeed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aedad9087c4d6d376f2c",
    "number": 3939,
    "body": "",
    "head_branch": "EndSpikeSeed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aedbd9087c4d6d376f2d",
    "number": 3937,
    "body": "because I can only count to 1",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add smithing item helpers"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aedcd9087c4d6d376f2e",
    "number": 3932,
    "body": "Asynchronous advancements, take 2.\r\n\r\nAdvancements are loaded in the same way as before, except asynchronously.\r\nUnlike #3454, this uses a delegate class to make plugins like Citizens not spew\r\nerrors as if it's their fulltime job.",
    "head_branch": "async-advancements-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aeddd9087c4d6d376f2f",
    "number": 3931,
    "body": "Fixes #3930 \r\nSlimes/Magma cubes did not pass on their Bukkit.Aware status to their \"children\" when they split.",
    "head_branch": "fix/slime-spawner-nerf",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix for nerfed slime mobs splitting"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aeded9087c4d6d376f30",
    "number": 3929,
    "body": "Use the WorldServer from the actually used location\r\n\r\nalso fixes #3876",
    "head_branch": "fix-moveworld",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix moveToWorld worldserver reference (#3929)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aedfd9087c4d6d376f31",
    "number": 3926,
    "body": "…hrough legacy sendActionBar(String) to fix some miscolouring\r\n\r\n\r\nTo see the issue try using Player#sendActionBar(ChatColor.of(Color.RED) + \"Test\")\r\n\r\nThis will horribly turn all black, this pr fixes that and also adds a method to use with components since the other one is deprecated for some reason.",
    "head_branch": "actionbarfixandaddition",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aee0d9087c4d6d376f32",
    "number": 3922,
    "body": "https://hub.spigotmc.org/jira/browse/SPIGOT-5916",
    "head_branch": "getLastColors-hex-support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Support hex colors in getLastColors (#3922)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aee1d9087c4d6d376f33",
    "number": 3920,
    "body": "Before this fix, if a player was respawning to a respawn anchor and the respawn location was modified away from the anchor with the PlayerRespawnEvent, the anchor would still lose some charge. This fixes that by checking if the modified spawn location is still at a respawn anchor.\r\n\r\nAnyone is free to port this to Spigot if they'd like, I've signed their CLA and this patch is released under MIT\r\n\r\nAtt https://github.com/EssentialsX/Essentials/pull/3498",
    "head_branch": "bug/SPIGOT-5989",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix SPIGOT-5989 (#3920)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aee2d9087c4d6d376f34",
    "number": 3918,
    "body": "",
    "head_branch": "ver/1.15.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[1.15] Move range check for block placing up (#3918)\n\nCo-authored-by: Spottedleaf <Spottedleaf@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aee3d9087c4d6d376f35",
    "number": 3917,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move range check for block placing up (#3917)\n\nCo-authored-by: Spottedleaf <Spottedleaf@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aee4d9087c4d6d376f36",
    "number": 3911,
    "body": "This might seem like useless thing when you can just player.teleport(player.getLocation.add(...)). But if you've ever tried repeatedly updating a player's position relative to itself, you've noticed that the player loses control and just jitters a lot if it tries to move.\r\n\r\nI was inspired by this feature request on Spigot: https://hub.spigotmc.org/jira/browse/SPIGOT-2429\r\nThe author there linked a video which demonstrates the difference very clearly: https://www.youtube.com/watch?v=Ofl48rBs9yU&feature=youtu.be\r\n\r\nIn MC, we have two types of teleportation:\r\na) Absolute - sends absolute coordinates for the player to teleport to. \r\nb) Relative - sends relative coordinates for the player to teleport\r\n\r\nSo if it's not obvious to you what's going on and why normal relative teleport doesn't do this properly, I give you this example:\r\nPlayer is at (0, 0, 0). We want to teleport it (0, 0, 1) relative to its position. Meanwhile, the player is walking east with the velocity (1, 0, 0).\r\nTeleportation a) does this:\r\n1. The server measures the player's location (0, 0, 0), adds (0, 0, 1), and tells the client to move to the sum (0, 0, 1).\r\n2. Before the data reaches the client, the player has time to move to (1, 0, 0)\r\n3. The data reaches the client and the player is teleported to (0, 0, 1), ignoring the player's own movement.\r\n\r\nTeleportation b) does this:\r\n1. The server tells the client to move (0, 0, 1) relative to its own location\r\n2. Before the data reaches the client, the player has time to move to (1, 0, 0)\r\n3. The data reaches the client and the player is teleported to (1, 0, 1), respecting the player's own movement.\r\n\r\nThe same thing happens with the player's rotation.\r\nThere are plenty of videos demonstrating \"seamless\" teleportation in MC.\r\nA few interesting uses I've found for this include:\r\n1. Applying constant \"drag\" to a player in a direction. This is not possible to do cleanly by setting the player's velocity, due to velocity interfering with the player's ability to jump.\r\n2. Elevators, as demonstrated in the video above.\r\n3. Applying a force to the player's rotation, pushing their vision while still respecting their own movement.\r\n\r\nI'm not entirely sure my implementation is the best possible;\r\n1. The relative teleportation can be per-coordinate. So you can choose which coordinates are absolute and which are relative. Maybe a Player#teleportRelative(Location l, boolean xIsRelative, boolean yIsRelative, et c.) would be better. Or an API enum could be added to match NMS structure. I chose this approach because I think it covers most cases, but it definitely has its limitations.\r\n2. The NMS EntityPlayer#internalTeleport is a bit uncomfortable to work with. We need to calculate the absolute \"expected\" position of the player and give it to internalTeleport with the relative flags for it to work. Ideally, there should be a method that we can just feed the relative teleportation, but I thought it was best to not touch any NMS code, as long as it works.\r\n3. Due to LivingEntity#getLocation().getYaw() returning the head rotation of the Player and internalTeleport comparing with the body rotation of the player, I use getHandle().yaw in the CraftPlayer methods instead of getLocation().getYaw(). This is only necessary because of point 2.\r\n\r\nI'm new to contributing to paper, so I don't know if my approach was the best. I tried adding useful and clean methods. Please tell me if I should change my approach.\r\n\r\nAs a side note, the /teleport command has the ability to be relative. You can try running \"/tp ~0 ~0 ~0.1\" every tick and compare it to p.teleport(p.getLocation.add(0, 0, 0.1)).\r\n\r\n",
    "head_branch": "teleport-relative",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aee5d9087c4d6d376f37",
    "number": 3910,
    "body": "Prior to 1.16, you could clear a Player's activeItem by calling Player#updateInventory. That method no longer clears the activeItem.\r\n\r\nThis new method LivingEntity#clearActiveItem can be used to interrupt shield blocking, bow drawing, eating and drinking, and possibly other things that I haven't thought about. It calls EntityLiving#clearActiveItem, which is the method used by the server when a player's shield is disabled by being hit with an axe.\r\n\r\nThis is a copy of a previous PR I did, which I chose to discard due to poor branch management by me: https://github.com/PaperMC/Paper/pull/3895",
    "head_branch": "clear-active-item",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add LivingEntity#clearActiveItem"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aee6d9087c4d6d376f38",
    "number": 3907,
    "body": "This PR gives the `CONTRIBUTING.md` file/guidelines a new look with focus on keeping the reader both interested and informed.\r\n\r\nI am not a native English speaker, so proof-reading with grammar, vocabulary, and orthography in mind is greatly appreciated.\r\n\r\nRendered: [CONTRIBUTING.md](https://github.com/Proximyst/Paper/blob/contributing/CONTRIBUTING.md)",
    "head_branch": "contributing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Revitalise CONTRIBUTING.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aee7d9087c4d6d376f39",
    "number": 3906,
    "body": "I think this looks a little better, I might just be a weirdo tho.\r\n\r\nAllows easier navigation to the Gradle section without having to read ugly maven XML. /s\r\n\r\n\r\n",
    "head_branch": "readme",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aee8d9087c4d6d376f3a",
    "number": 3895,
    "body": "Prior to 1.16, you could clear a Player's activeItem by calling Player#updateInventory. That method no longer clears the activeItem.\r\n\r\nThis new method LivingEntity#clearActiveItem can be used to interrupt shield blocking, bow drawing, eating and drinking, and possibly other things that I haven't thought about. It calls EntityLiving#clearActiveItem, which is the method used by the server when a player's shield is disabled by being hit with an axe.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aee9d9087c4d6d376f3b",
    "number": 3894,
    "body": "Fixes three main issues with the cartography table:\r\n- Using a swap button (number keys or f) on the result item does not use up the input items. (map dupe)\r\n- If the map is being locked, the player's inventory is full, and the player shift clicks on the result, it creates a map ID that will never be used.\r\n- Since the display item in the result slot is not the same as the actual item, item merging did not happen correctly some of the time.",
    "head_branch": "fix/cartography-table",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aeead9087c4d6d376f3c",
    "number": 3886,
    "body": "",
    "head_branch": "Sand-Dupe-Remove",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aeebd9087c4d6d376f3d",
    "number": 3883,
    "body": "Implements chat components in Boss Bar's title.\r\n\r\nRelated:\r\n- PaperMC/Paper#3715",
    "head_branch": "boss-bar-components",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aeecd9087c4d6d376f3e",
    "number": 3881,
    "body": "Fixes #3871\r\n\r\nEntityLiving#applyInstantEffect() immediately kills the player and drops their inventory.\r\nBefore this patch, instant effects would be applied before the potion ItemStack is removed and replaced with a glass bottle. This caused the potion ItemStack to be dropped before it was supposed to be removed from the inventory. It also caused the glass bottle to be put into a dead player's inventory.\r\nThis patch makes it so that instant effects are applied after the potion ItemStack is removed, and the glass bottle is only put into the player's inventory if the player is not dead. Otherwise, the glass bottle is dropped on the ground.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aeedd9087c4d6d376f3f",
    "number": 3878,
    "body": "Reimplements world-container feature in the `bukkit.yml` file.\r\n\r\nRelated:\r\n- https://hub.spigotmc.org/jira/browse/SPIGOT-5824\r\n- https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/7ea3c040bc4f1b400bc4749b76c87c6b8dd3dca7#src/main/java/org/bukkit/craftbukkit/CraftServer.java\r\n- 75d9b04deb799589784c79d6fe3e690121b79473",
    "head_branch": "reimplement-world-container",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aeeed9087c4d6d376f40",
    "number": 3874,
    "body": "Fixes https://hub.spigotmc.org/jira/browse/SPIGOT-5885",
    "head_branch": "SPIGOT-5885",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix SPIGOT-5885 Unable to disable advancements"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aeefd9087c4d6d376f41",
    "number": 3873,
    "body": "Fixes https://hub.spigotmc.org/jira/browse/SPIGOT-5824",
    "head_branch": "SPIGOT-5824",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix SPIGOT-5824 Bukkit world-container is not used"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aef0d9087c4d6d376f42",
    "number": 3860,
    "body": "Fixes PaperMC/Paper#3846.\r\n\r\nI'm fairly sure this should not reintroduce the world generation issue.\r\n\r\nOnly tested with breeding villagers.",
    "head_branch": "fix-villager-laziness",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Villagers WeightedList issue (#3860)\n\ndont clone the list for villagers as the list is accessed post sort and needs to have sorted data."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aef1d9087c4d6d376f43",
    "number": 3859,
    "body": "This forces the despawn counter to start ticking regardless of\r\nstate after the arrow has been alive for 200 ticks (10 seconds)\r\ninstead of getting stuck in a never despawn state (bubble columns,\r\netc).\r\n\r\nhttps://bugs.mojang.com/browse/MC-125757",
    "head_branch": "MC-125757",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix MC-125757 (#3859)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aef2d9087c4d6d376f44",
    "number": 3857,
    "body": "Upon a reputation of zero (or in an absolute edge case which should not\r\noccur, negative), the villager sharing its gossip will delete itself\r\nbecause a Random expects a bound N where N > 0.\r\n\r\nIf the bound N does not fulfill this expectation, return an empty list\r\nof gossip to share.\r\n\r\nI am not certain this should copy the list or return an empty one,\r\nso feedback around that would be appreciated.",
    "head_branch": "fix-villager-disappearings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix zero reputation deleting villagers (#3857)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aef3d9087c4d6d376f45",
    "number": 3855,
    "body": "Disregard, me being a fucking dumbass",
    "head_branch": "ver/1.15.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aef4d9087c4d6d376f46",
    "number": 3850,
    "body": "Adds api getters for [these world properties](https://minecraft.gamepedia.com/Custom#JSON_format).\r\n\r\nCloses #5116 ",
    "head_branch": "feature/World-API",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "More World API (#3850)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aef6d9087c4d6d376f47",
    "number": 3847,
    "body": "Adds ability to specify which biomes are valid for a spawn and configure the search radius to look for those biomes upon world generation.\r\n\r\nBy default, MC doesn't try very hard to find a biome in its default list of 7 biomes. So the search radius really has to be expanded to a very large number to find a valid world, even with the default list of 7. And that means the **first-time** world load can take minutes, depending on the configured range. \r\n\r\nBoth config options default to the values used by default by the server.",
    "head_branch": "feature/Config-per-world-spawn-biomes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aef7d9087c4d6d376f48",
    "number": 3843,
    "body": "Fixes #3328",
    "head_branch": "fix/inventory-title",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aef8d9087c4d6d376f49",
    "number": 3838,
    "body": "Closes #3837 \r\n\r\nAdds two methods to set and check if Zombies can break doors",
    "head_branch": "feature/More-Zombie-API",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Zombie API - breaking doors"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aef9d9087c4d6d376f4a",
    "number": 3835,
    "body": "",
    "head_branch": "create-hover-event-from-itemstack-entity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Create HoverEvent from ItemStack Entity\n\nadd myself to MIT list\n\nCo-authored-by: Mariell <proximyst@proximyst.com>\nCo-authored-by: MiniDigger <admin@minidigger.me>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aefad9087c4d6d376f4b",
    "number": 3834,
    "body": "As talked about in the discord",
    "head_branch": "feature/Add-Block-isValidTool",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Block#isValidTool"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aefbd9087c4d6d376f4c",
    "number": 3828,
    "body": "Hi. I hope i did everything right. The contribution guidelines are really long. This is just a small edit to add confirm as a tab option.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aefcd9087c4d6d376f4d",
    "number": 3826,
    "body": "Fixes #3574 ",
    "head_branch": "fix/3574",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Explosion location - Fixes #3574 (#3826)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623aefdd9087c4d6d376f4e",
    "number": 3822,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aefed9087c4d6d376f4f",
    "number": 3820,
    "body": "",
    "head_branch": "optimize-networkmanager-exception-handling/1.15",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[1.15] Optimize NetworkManager exception handling (#3820)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aeffd9087c4d6d376f50",
    "number": 3819,
    "body": "",
    "head_branch": "optimize-networkmanager-exception-handling/1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[1.16] Optimize NetworkManager exception handling (#3819)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af00d9087c4d6d376f51",
    "number": 3818,
    "body": "When an anvil has a level req 0 of 0 on any operation you won't be able to take out the result slot, this will fix this issue while also updating the cursor since that seemed to not be updated without specifically updating it.\r\n\r\nCode used to test this fix is:\r\n\r\n```java\r\n    @EventHandler\r\n    public void anvilEvent(PrepareAnvilEvent event){\r\n        AnvilInventory itemStacks = event.getInventory();\r\n\r\n        if (itemStacks.getFirstItem() == null || itemStacks.getFirstItem().getType() != Material.DIRT)\r\n            return;\r\n        if (itemStacks.getSecondItem() == null || itemStacks.getSecondItem().getType() != Material.DIRT)\r\n            return;\r\n\r\n        event.setResult(new ItemStack(Material.DIAMOND));\r\n    }\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af01d9087c4d6d376f52",
    "number": 3817,
    "body": "Reopened https://github.com/PaperMC/Paper/pull/3800.\r\n\r\n> This looks good, able to fix up the comments to paper tag stuff correctly?\r\n\r\n Won't have time tonight to work on this further :(, maybe later in the week.",
    "head_branch": "hotfix/login-perf",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimize the advancement data player iteration to be O(N) rather than O(N^2)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af02d9087c4d6d376f53",
    "number": 3816,
    "body": "This exposes the internal translatable component used for enchantment's display names\r\n\r\n----\r\n\r\nExample 1:\r\n```java\r\nBaseComponent[] component = Enchantment.FIRE_ASPECT.getDisplayName(2);\r\nSystem.out.println(ComponentSerializer.toString(component));\r\nSystem.out.println(TranslatableComponent.toLegacyText(component));\r\nSystem.out.println(TranslatableComponent.toPlainText(component));\r\n```\r\nOutput 1:\r\n```\r\n{\"color\":\"gray\",\"extra\":[{\"text\":\" \"},{\"translate\":\"enchantment.level.2\"}],\"translate\":\"enchantment.minecraft.fire_aspect\"}\r\n§7Fire Aspect§7 §7II\r\nFire Aspect II\r\n```\r\n\r\n----\r\n\r\nExample 2:\r\n```java\r\nBaseComponent[] component = Enchantment.BINDING_CURSE.getDisplayName(1);\r\nSystem.out.println(ComponentSerializer.toString(component));\r\nSystem.out.println(TranslatableComponent.toLegacyText(component));\r\nSystem.out.println(TranslatableComponent.toPlainText(component));\r\n```\r\nOutput 2:\r\n```\r\n{\"color\":\"red\",\"translate\":\"enchantment.minecraft.binding_curse\"}\r\n§cCurse of Binding\r\nCurse of Binding\r\n```",
    "head_branch": "EnchantmentDisplayName",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af03d9087c4d6d376f54",
    "number": 3815,
    "body": "Replacement for VillagerReplenishTradeEvent\r\nIssues with above event\r\n1. Doesn't include the player\r\n2. Isn't called for Wandering Traders\r\n3. The setRecipe() doesn't look to actually have any effect at all.\r\n\r\nIf this gets merged, the VillagerReplenishTradeEvent should probably get deprecated.",
    "head_branch": "feature/PlayerTradeEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "added PlayerTradeEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af04d9087c4d6d376f55",
    "number": 3814,
    "body": "Various methods to affect Wither entities",
    "head_branch": "feature/Wither-API",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "added Wither API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af05d9087c4d6d376f56",
    "number": 3811,
    "body": "fixes #3810 \r\n\r\nSo there were some issues based on where the CraftEventFactory#callPrepareResultEvent was being called in ContainerAnvil and ContainerAbstractAnvil. So I removed those, and just went back to using CraftEventFactory#callPrepareAnvilEvent. Of course, PrepareResultEvent still fires when PrepareAnvilEvent fires because PrepareAnvilEvent extends PrepareResultEvent. \r\n\r\nI also undeprecated PrepareGrindstoneEvent because it doesn't make sense that it would be deprecated but PrepareAnvilEvent isn't.",
    "head_branch": "fix/anvil-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af06d9087c4d6d376f57",
    "number": 3807,
    "body": "Two times' the charm.\r\nCloses #2504",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PlayerItemCooldownEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af07d9087c4d6d376f58",
    "number": 3805,
    "body": "Adds an event for when a player renames an entity",
    "head_branch": "feature/PlayerNameEntityEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "added PlayerNameEntityEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af08d9087c4d6d376f59",
    "number": 3801,
    "body": "I think I caught most of the interface extensions that were missing. Improved my earlier PR #3794, resubmitted due to scope change.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af09d9087c4d6d376f5a",
    "number": 3800,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/3796\r\n\r\nI'm not 100% sure this is the correct logic for handling this, and as such I wouldn't recommend pulling it without further testing.\r\n\r\nIn particular, I haven't figured out exactly what the flag logic is doing:\r\n```\r\n        boolean flag = this.f(advancement);\r\n        boolean flag1 = this.h.contains(advancement);\r\n\r\n        if (flag && !flag1) {\r\n            this.h.add(advancement);\r\n            this.i.add(advancement);\r\n            if (this.data.containsKey(advancement)) {\r\n                this.j.add(advancement);\r\n            }\r\n        } else if (!flag && flag1) {\r\n            this.h.remove(advancement);\r\n            this.i.add(advancement);\r\n        }\r\n```\r\n\r\nHowever, this patch captures the essence of the problem, which may be useful to someone more familiar with this system. \r\n\r\nThis code as it stands is iterating over the children, then, each child iteration can iterate back over the parent. This causes the algorithm to `O(N^2)` as each child spawns a new iteration over the parent.\r\n\r\nIn this patch, I add 3 states, root, iterator, and parent of iterator. Iterators are allowed to iterate their children, but if they access their parent, the parent is blocked from reiterating its children, though it is allowed to reprocess the flag logic (I'm assuming this reprocessing has some value).\r\n\r\n----\r\n\r\nI also have a branch with my diagnostic patch that prints the traversal: https://github.com/DarkArc/Paper/tree/hotfix/login-perf-diag\r\n\r\nThe new traversal looks something like the following:\r\n```\r\n R-minecraft:recipes/root\r\n  I-minecraft:recipes/building_blocks/jungle_slab\r\n   P-minecraft:recipes/root\r\n  I-minecraft:recipes/misc/quartz_from_blasting\r\n   P-minecraft:recipes/root\r\n  I-minecraft:recipes/building_blocks/polished_granite_slab\r\n   P-minecraft:recipes/root\r\n  I-minecraft:recipes/building_blocks/acacia_planks\r\n   P-minecraft:recipes/root\r\n  I-minecraft:recipes/redstone/repeater\r\n   P-minecraft:recipes/root\r\n  I-minecraft:recipes/tools/compass\r\n   P-minecraft:recipes/root\r\n  I-minecraft:recipes/redstone/oak_button\r\n   P-minecraft:recipes/root\r\n  I-minecraft:recipes/building_blocks/quartz_block\r\n   P-minecraft:recipes/root\r\n  I-minecraft:recipes/redstone/dark_oak_pressure_plate\r\n   P-minecraft:recipes/root\r\n  I-minecraft:recipes/building_blocks/mossy_stone_brick_slab_from_mossy_stone_brick_stonecutting\r\n   P-minecraft:recipes/root\r\n  I-minecraft:recipes/food/cooked_beef\r\n   P-minecraft:recipes/root\r\n  I-minecraft:recipes/building_blocks/smooth_quartz_stairs_from_smooth_quartz_stonecutting\r\n   P-minecraft:recipes/root\r\n  I-minecraft:recipes/redstone/iron_door\r\n   P-minecraft:recipes/root\r\n  I-minecraft:recipes/decorations/nether_brick_fence\r\n   P-minecraft:recipes/root\r\n```\r\n",
    "head_branch": "hotfix/login-perf",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af0ad9087c4d6d376f5b",
    "number": 3794,
    "body": "All current subinterfaces of \"Flying\" are things that should be considered \"Monster\", but aren't.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af0bd9087c4d6d376f5c",
    "number": 3792,
    "body": "This block is explodes when used in worlds other than nezer. Is it possible to add a function to allow its use for the other two worlds?",
    "head_branch": "ver/1.16",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af0cd9087c4d6d376f5d",
    "number": 3790,
    "body": "Just updating this patch because Spigot made the list as components to players",
    "head_branch": "PluginsList",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix /plugins list not alphabetical to players (#3790)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af0dd9087c4d6d376f5e",
    "number": 3782,
    "body": "Fixes #3752 \r\n\r\nThis pr isn't totally complete, I am still looking for a way to set the reason for a piglin targeting something to TARGET_ATTACKED_ENTITY, right now its always CLOSEST_ENTITY even if you are wearing gold armor, and hit one. I'm unsure as to how to separate the two. \r\n\r\nOther than that, this covers Hoglins, and Zoglins. It looks like Zombified Piglins still use the old Zombie Pigmen system.",
    "head_branch": "fix/EntityTargetLivingEntityEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add EntityTargetLivingEntityEvent for new 1.16 mobs (#3782)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af0ed9087c4d6d376f5f",
    "number": 3779,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/3778",
    "head_branch": "world-mismatch-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af0fd9087c4d6d376f60",
    "number": 3776,
    "body": "Was requested on Discord",
    "head_branch": "PrepareSmithingEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PrepareResultEvent (#3776)\n\nAdds a new event for all crafting stations that generate a result slot item\r\n\r\nAnvil and Grindstone now extend this event"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af10d9087c4d6d376f61",
    "number": 3768,
    "body": "[SPIGOT-5799](https://hub.spigotmc.org/jira/browse/SPIGOT-5799) (more specifically, the fix for it) broke the firing if InventoryCloseEvent (#3733). A simple revert of that change fixes the issue. The fix is not needed because of the InventoryCloseEvent.Reason API (2 different reasons are given for the double event fire on player disconnect, DISCONNECT, and UNLOADED). ",
    "head_branch": "fix/1.15.2/InventoryCloseEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af11d9087c4d6d376f62",
    "number": 3766,
    "body": "Closes #3684 ",
    "head_branch": "feature/PlayerPiglinBarterEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af12d9087c4d6d376f63",
    "number": 3764,
    "body": "Fixes #3708 ",
    "head_branch": "fix/EntitySpawnReason-from-spawners",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Incorrect spawn reason for monsters from spawner - Fixes #3708 (#3764)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af13d9087c4d6d376f64",
    "number": 3763,
    "body": "Replacement for VillagerReplenishTradeEvent\r\nIssues with above event\r\n1. Doesn't include the player\r\n2. Isn't called for Wandering Traders\r\n3. The setRecipe() doesn't look to actually have any effect at all.\r\n\r\nIf this gets merged, the VillagerReplenishTradeEvent should probably get deprecated.",
    "head_branch": "feature/PlayerTradeEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af14d9087c4d6d376f65",
    "number": 3762,
    "body": "A bit more than asked for, but it was all right there in the same spot, so why not ^_^",
    "head_branch": "LiquidAPI",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implements #3761 - Add entity liquid API (#3762)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af15d9087c4d6d376f66",
    "number": 3760,
    "body": "Off the top of my head, I don't know where text that defaults to Bold, underlined, strikethrough, or obfuscated comes into play. Only that lore of items defaults to italics.",
    "head_branch": "fix/item-meta-lore",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bandaid italic legacy serialization #3757 (#3760)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af16d9087c4d6d376f67",
    "number": 3759,
    "body": "Seems simple enough. Mojang added these lines, which dont seem to be necessary with paper's `shouldReplenish` check a few lines up..",
    "head_branch": "LootTablesFix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #3701 - Loottables erasing on viewing"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af17d9087c4d6d376f68",
    "number": 3756,
    "body": "Missed in my previous PR.",
    "head_branch": "ver/1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix MOTD new line support (#3756)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af18d9087c4d6d376f69",
    "number": 3755,
    "body": "Fixes #3754",
    "head_branch": "ver/1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix hex colours not being allowed in MOTD (#3755)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af19d9087c4d6d376f6a",
    "number": 3750,
    "body": "Added material tags for soul torches, all torches, and lanterns.\r\nAlso remove the number of materials from the documentation. As it is definitely an implementation detail, but more practically is an extra step if an update changes that number...",
    "head_branch": "tags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add more material tags for 1.16 (#3750)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af1ad9087c4d6d376f6b",
    "number": 3748,
    "body": "Should be yet another medium-sized performance improvement",
    "head_branch": "more-streams",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove streams from classes related to villager gossip (#3748)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af1bd9087c4d6d376f6c",
    "number": 3741,
    "body": "This fixes #3740 ",
    "head_branch": "FixLegacyItemStackNameLore",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update itemstack legacy name and lore (#3741)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af1cd9087c4d6d376f6d",
    "number": 3704,
    "body": "This showed up a lot in the spark profiler, should have a low-medium performance improvement.\r\n\r\nEDIT: After testing @ 30 players. My server is no longer has tps dropoff (to like 15) and my cpu usage is down",
    "head_branch": "stream-nuke",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[1.16] Remove some streams from structures (#3704)\n\nThis showed up a lot in the spark profiler, should have a low-medium performance improvement."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af1dd9087c4d6d376f6e",
    "number": 3702,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Readme update (#3702)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af1ed9087c4d6d376f6f",
    "number": 3700,
    "body": "Many apologies that this is the fourth pull request for the same commit because for some reason I couldn't get it right the first three times, by now you probably all know what this commit does, it adds Gradle configuration to the README to help plugin developers who choose Gradle over Maven. Hopefully this time I've actually nailed it.\r\n\r\nAgain, let me know if I screwed anything up :slightly_smiling_face: \r\n\r\nAlso, the other four files just appeared as changed for some reason, I haven't changed anything in any of them, not much I can really do about that.",
    "head_branch": "ver/1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Gradle usage information to README (#3700)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af1fd9087c4d6d376f70",
    "number": 3699,
    "body": "Okay I believe I've got everything right this time, or as one would say, I nailed it. I've added a section to the README that shows an example of how to depend on the Paper API with Gradle, to help developers who choose Gradle over Maven. I've also updated the `<version>` tag in the Maven section and set the version in my new Gradle guide to `1.16.1-R0.1-SNAPSHOT` (as it should be), from `1.15.2-R0.1-SNAPSHOT`.\r\n\r\nAgain, please let me know if I screwed something up.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af20d9087c4d6d376f71",
    "number": 3697,
    "body": "I've added an example configuration for Gradle to the README, to help plugin developers who choose to use Gradle rather than Maven. I've also changed the `<version>` tag in the Maven dependency to 1.16.1-R0.1-SNAPSHOT rather than what it was before (still 1.15.2-R0.1-SNAPSHOT).\r\n\r\nLet me know if you think I should change anything else about this :slightly_smiling_face:",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af21d9087c4d6d376f72",
    "number": 3693,
    "body": "I thought I'd add an example Gradle implementation for the Paper API, just to help with people who choose to use Gradle over Maven. Also, I've updated the Maven dependency version in the README to 1.16.1-R0.1-SNAPSHOT as it says in the title.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af22d9087c4d6d376f73",
    "number": 3673,
    "body": "Allows getting a HoverEvent from ItemStack and Entity.\r\n\r\n`Bukkit.hoverEventOf(itemStack)`\r\n`Bukkit.hoverEventOf(entity)`\r\n\r\nTest plugin: https://github.com/yannicklamprecht/PaperPRTestPlugins/blob/master/src/main/java/com/github/yannicklamprecht/paper/pr/test/testplugins/HoverTestCommand.java\r\n\r\n\r\n",
    "head_branch": "ver/1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af23d9087c4d6d376f74",
    "number": 3671,
    "body": "Basically, there are goals, that don't have a goal type, so the api wouldn't return those goals, nor remove them.\r\nExamples are enderman pickup and placement of blocks.\r\nThis PR fixes that, by making sure all goals have a type",
    "head_branch": "fix-mobgoals-115",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[1.15] Fix MobGoals#getAllGoals not actually returning all goals (#3671)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af24d9087c4d6d376f75",
    "number": 3670,
    "body": "Basically, there are goals, that don't have a goal type, so the api wouldn't return those goals, nor remove them.\r\nExamples are enderman pickup and placement of blocks.\r\nThis PR fixes that, by making sure all goals have a type",
    "head_branch": "fix-mobgoals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[1.16] Fix MobGoals#getAllGoals not actually returning all goals (#3670)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af25d9087c4d6d376f76",
    "number": 3664,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Change 1.16 branch to show 1.16.1 API in readme (#3664)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af26d9087c4d6d376f77",
    "number": 3642,
    "body": "0383 was merged into async chunk io patch.\r\n0316 might still be needed but its unlikely.",
    "head_branch": "1.16-updates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #3642 from kickash32/1.16-updates\n\nmore patch organization"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af27d9087c4d6d376f78",
    "number": 3640,
    "body": "This moves some of Mini's \"FIX DIS SHIT\" patch into their proper location.\r\nThis limits the scanning for repelling blocks of Piglins & Hoglins to 32768 (`short` of `0` increased till overflow into negative). This is plenty of scanning, and *should probably* be lowered, but it *works* with not soo much impact on TPS.",
    "head_branch": "ver/1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af28d9087c4d6d376f79",
    "number": 3639,
    "body": "Compiles,\r\nNot tested yet!",
    "head_branch": "1.16-updates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #3639 from kickash32/1.16-updates"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af29d9087c4d6d376f7a",
    "number": 3638,
    "body": "I was working with [JITWatch](https://github.com/AdoptOpenJDK/jitwatch), a tool that allows one to easily analyze JIT behavior and found that C1 wouldn't inline `PooledBlockPosition#d(int, int, int)`. This is especially noticeable at `-XX:MaxInlineDepth=15` (the default in JDK 14 and above). Even at the default depth of 9, this method still ranks within the top 100 of methods that the JIT couldn't easily inline.\r\n\r\nHere's what it looks like before the change:\r\n![image](https://user-images.githubusercontent.com/16436212/85926283-6f35d880-b86c-11ea-95df-b36852e94903.png)\r\n\r\nAfter the change:\r\n![image](https://user-images.githubusercontent.com/16436212/85926297-807ee500-b86c-11ea-8761-ec3ba566e0e9.png)\r\n\r\n\r\n",
    "head_branch": "improve-pooledblockposition-inlining-1.15",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Manually inline PooledBlockPosition#d(int, int, int)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af2ad9087c4d6d376f7b",
    "number": 3636,
    "body": "Includes https://github.com/PaperMC/Paper/pull/3635",
    "head_branch": "ver/1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #3636 from Spottedleaf/ver/1.16"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af2bd9087c4d6d376f7c",
    "number": 3635,
    "body": "@Spottedleaf's branch was nuked, so I PR here. If you want I can also PR to @Spottedleaf. Or can you revert your Anti-Xray changes @Spottedleaf?\r\n\r\nNote that these changes will probably also slightly improve the Anti-Xray performance.",
    "head_branch": "ver/1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af2cd9087c4d6d376f7d",
    "number": 3634,
    "body": "This allows spawners to \"reprime\" themselves after being left alone for a while.\r\nThe speed is based on the paper mob-spawner-tick-rate setting.\r\nIf the setting is N, spawners with no nearby players tick at 1/N speed.",
    "head_branch": "hazerd/spawner-reprime",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af2dd9087c4d6d376f7e",
    "number": 3630,
    "body": "",
    "head_branch": "ver/1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Some fixes (#3630)\n\n* Fix block action sending\r\n\r\n* Fix chest property check"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af2ed9087c4d6d376f7f",
    "number": 3628,
    "body": "Adds an unsafe API (feel free to add a \"safe\" one like last time, Aikar) to serialize & deserialize entity data.",
    "head_branch": "unsafe-entity-serialisation-api-116",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af30d9087c4d6d376f80",
    "number": 3627,
    "body": "",
    "head_branch": "ver/1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[WIP|1.16] Misc fixes (#3627)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af31d9087c4d6d376f81",
    "number": 3626,
    "body": "",
    "head_branch": "ver/1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[1.16] Make it run (#3626)\n\n* She compiles!\r\n\r\nAlso readded the armorstand ticking patch, thanks cat\r\n\r\n* Update mob goal api\r\n\r\n* Misc fixes to make it run\r\n\r\ndrop per playing mob spawns for now"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af32d9087c4d6d376f82",
    "number": 3625,
    "body": "Creating this for myself. Various additions relating to advancements\r\n\r\n- [x] Advancement manager to edit/create advancements\r\n- [x] Expand the Advancement interface\r\n- [x] added RequirementsBuilder for building requirements 2d arrays\r\n- [x] added interfaces for all possible criteria\r\n- [x] add implementations for above interfaces\r\n- [x] add validation checks when constructing a criteria\r\n- [x] add AdvancementDisplay class\r\n- [x] add AdvancementRewards class\r\n- [x] update various advancement events\r\n- [ ] persistence through /minecraft:reload\r\n- [ ] find more bugs\r\n\r\n\r\nWill add more as I think of/remember stuff.",
    "head_branch": "feature/Advancements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af33d9087c4d6d376f83",
    "number": 3622,
    "body": "Adds an unsafe API (feel free to add a \"safe\" one like last time, Aikar) to serialize & deserialize entity data.",
    "head_branch": "unsafe-entity-serialisation-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af34d9087c4d6d376f84",
    "number": 3615,
    "body": "Added a PlayerChangeBeaconEffectEvent\r\n\r\nThis event would be a whole lot better if someone has a way to get the Beacon blockstate in the packet handler in PlayerConnection. If anyone knows a way, please let me know.",
    "head_branch": "feature/PlayerChangeBeaconEffectEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PlayerChangeBeaconEffectEvent\n\nSigned-off-by: MiniDigger <admin@minidigger.me>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af35d9087c4d6d376f85",
    "number": 3612,
    "body": "Adds 3 methods to the Beacon block state to set a custom range for the beacon. One to set the range, one to get the range, and one to reset the range (aka go back to using the default range-by-beacon-tier system).",
    "head_branch": "feature/custom-beacon-range",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add custom ranges to beacons\n\nAdds 3 methods to the Beacon block state to set a custom range for the beacon.\nOne to set the range, one to get the range, and one to reset the range\n(aka go back to using the default range-by-beacon-tier system)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af36d9087c4d6d376f86",
    "number": 3609,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af37d9087c4d6d376f87",
    "number": 3603,
    "body": "The notify flag (bitwise OR 2) must always be set. If it is only set\r\nwhen the `map.replace` call before it does something, as was suggested\r\non Discord, the issue will not change whatsoever.\r\n\r\nFixes #3593.",
    "head_branch": "fix-piston-ghost-block",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix piston dupe patch creating ghost blocks (#3603)\n\nThe 2 flag (send change to clients) must always be set. If it is only set\r\nwhen the `map.replace` call before it does something, as was suggested\r\non Discord, the issue will not change whatsoever.\r\n\r\nFixes #3593"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af38d9087c4d6d376f88",
    "number": 3601,
    "body": "Thx gitkraken too.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PrepareGrindstoneEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af39d9087c4d6d376f89",
    "number": 3600,
    "body": "Just for ease, you know.. whenever you need to know the biome of a chunk and don't want to do nms..\r\n\r\nHopefully this looks good too.",
    "head_branch": "expose-stuff",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af3ad9087c4d6d376f8a",
    "number": 3599,
    "body": "Fake players shouldn't receive chunk packets unless the author for some reason is abusing them somehow.\r\nIf a plugin author wants them, they can do something like this:\r\n\r\n```java\r\nEntityPlayer player = getFakePlayer();\r\ntry {\r\n    player.forceAcceptChunkPackets = true;\r\n} catch (NoSuchFieldError ignored) {\r\n    // Not Paper on a version recent enough to have this field.\r\n    // This state would preferably be cached somehow.\r\n}\r\n```\r\n\r\nThis has been implemented as per @Techcable's comment here: https://github.com/PaperMC/Paper/issues/3573#issuecomment-647183237\r\n\r\nProperly fixes #3573.",
    "head_branch": "toggle-chunk-sends",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af3bd9087c4d6d376f8b",
    "number": 3598,
    "body": "The setGameProfile method on TileEntitySkull is annotated with the @Nullable annotation, but the skull didn't check for null profiles before attempting to retrieve cached skin. This bug was introduced by the commit making the skull use spigot's User Cache.\r\n\r\nStacktrace\r\n```\r\n[17:07:46 FATAL]: Error executing task on Server\r\njava.lang.NullPointerException: null\r\nat net.minecraft.server.v1_15_R1.TileEntitySkull.f(TileEntitySkull.java:189) ~[patched_1.15.2.jar:git-Paper-361]\r\nat net.minecraft.server.v1_15_R1.TileEntitySkull.setGameProfile(TileEntitySkull.java:183) ~[patched_1.15.2.jar:git-Paper-361]\r\nat net.minecraft.server.v1_15_R1.BlockSkullPlayer.postPlace(SourceFile:45) ~[patched_1.15.2.jar:git-Paper-361]\r\nat net.minecraft.server.v1_15_R1.ItemBlock.a(ItemBlock.java:55) ~[patched_1.15.2.jar:git-Paper-361]\r\nat net.minecraft.server.v1_15_R1.ItemBlock.a(ItemBlock.java:24) ~[patched_1.15.2.jar:git-Paper-361]\r\nat net.minecraft.server.v1_15_R1.ItemStack.placeItem(ItemStack.java:191) ~[patched_1.15.2.jar:git-Paper-361]\r\nat net.minecraft.server.v1_15_R1.PlayerInteractManager.a(PlayerInteractManager.java:519) ~[patched_1.15.2.jar:git-Paper-361]\r\nat net.minecraft.server.v1_15_R1.PlayerConnection.a(PlayerConnection.java:1419) ~[?:git-Paper-361]\r\nat net.minecraft.server.v1_15_R1.PacketPlayInUseItem.a(PacketPlayInUseItem.java:27) ~[patched_1.15.2.jar:git-Paper-361]\r\nat net.minecraft.server.v1_15_R1.PacketPlayInUseItem.a(PacketPlayInUseItem.java:5) ~[patched_1.15.2.jar:git-Paper-361]\r\nat net.minecraft.server.v1_15_R1.PlayerConnectionUtils.lambda$ensureMainThread$0(PlayerConnectionUtils.java:23) ~[patched_1.15.2.jar:git-Paper-361]\r\nat net.minecraft.server.v1_15_R1.TickTask.run(SourceFile:18) ~[patched_1.15.2.jar:git-Paper-361]\r\nat net.minecraft.server.v1_15_R1.IAsyncTaskHandler.executeTask(IAsyncTaskHandler.java:136) ~[patched_1.15.2.jar:git-Paper-361]\r\nat net.minecraft.server.v1_15_R1.IAsyncTaskHandlerReentrant.executeTask(SourceFile:23) ~[patched_1.15.2.jar:git-Paper-361]\r\nat net.minecraft.server.v1_15_R1.IAsyncTaskHandler.executeNext(IAsyncTaskHandler.java:109) ~[patched_1.15.2.jar:git-Paper-361]\r\nat net.minecraft.server.v1_15_R1.MinecraftServer.ba(MinecraftServer.java:1105) ~[patched_1.15.2.jar:git-Paper-361]\r\nat net.minecraft.server.v1_15_R1.MinecraftServer.executeNext(MinecraftServer.java:1098) ~[patched_1.15.2.jar:git-Paper-361]\r\nat net.minecraft.server.v1_15_R1.IAsyncTaskHandler.awaitTasks(IAsyncTaskHandler.java:119) ~[patched_1.15.2.jar:git-Paper-361]\r\nat net.minecraft.server.v1_15_R1.MinecraftServer.sleepForTick(MinecraftServer.java:1059) ~[patched_1.15.2.jar:git-Paper-361]\r\nat net.minecraft.server.v1_15_R1.MinecraftServer.run(MinecraftServer.java:974) ~[patched_1.15.2.jar:git-Paper-361]\r\nat java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix NPE on TileEntitySkull (#3598)\n\nThe setGameProfile method on TileEntitySkull is annotated with the @nullable annotation,\r\nbut the skull didn't check for null profiles before attempting to retrieve cached skin.\r\nThis bug was introduced by the commit making the skull use spigot's User Cache.\r\n\r\nAdditionally, CraftMetaSkull also had the same issue with a null GameProfile, so this also\r\nensures it doesn't break.\r\n\r\nThe whole CraftPlayerProfile class is not null-safe, it requires a GameProfile that isn't\r\nnull so we add a Validation on the constructor, that way it is easier to catch this kind\r\nof issue in the future."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af3cd9087c4d6d376f8c",
    "number": 3597,
    "body": "Previously, when players were left-clicking on blocks in adventure mode PlayerInteractEvent wasn't called. This has been caught using WorldEdit's wand and navigation tools in adventure mode.",
    "head_branch": "adventure-left-click-on-block",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix interact event not being called in adventure"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af3dd9087c4d6d376f8d",
    "number": 3591,
    "body": "As it stands, one can complete from the cache if no ID is given. If\r\nthere is no ID, it will throw an NPE, as ConcurrentHashMap (which is used\r\nin UserCache) does not support null keys. This should fix any current\r\nand future issues where exceptions are thrown just because a UUID is not\r\ncurrently given on the profile due to a plugin or server bug/issue.\r\n\r\nFixes #3590.\r\n\r\nDo not merge until @osum54 or @MrEAlderson can confirm\r\nit is fixed as the issue arose with a premium plugin unavailable\r\nto the public on \"a plugin leaking site\".\r\n\r\nPaperclip with patch applied for testing:\r\nhttps://owo.whats-th.is/93GyDwP.jar",
    "head_branch": "issue-3590",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Only complete from cache if ID is given (#3591)\n\nAs it stands, one can complete from the cache if no ID is given. If\r\nthere is no ID, it will throw an NPE, as ConcurrentHashMap (which is used\r\nin UserCache) does not support null keys. This should fix any current\r\nand future issues where exceptions are thrown just because a UUID is not\r\ncurrently given on the profile due to a plugin or server bug/issue.\r\n\r\nFixes #3590."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af3ed9087c4d6d376f8e",
    "number": 3578,
    "body": "First pull request, hopefully it doesn't suck ass.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af3fd9087c4d6d376f8f",
    "number": 3571,
    "body": "Fixes #3480\r\nPreviously it only controlled whether villagers could trade treasure maps.\r\nNow it should apply to loot generated in treasure maps.\r\n\r\nWe don't unregister treasure maps from the loot table,\r\nsince this option is per-world and the table is global.\r\nInstead I just replaced the implementation with a NOP.",
    "head_branch": "fix/GH-3480",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make `enableTreasureMaps` apply to shipwreck loot generation\n\nFixes #3480\nPreviously it only controlled whether villagers could trade treasure maps.\nNow it should apply to loot generated in treasure maps.\n\nWe don't unregister treasure maps from the loot table,\nsince this option is per-world and the table is global.\nInstead I just replaced the implementation with a NOP."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af40d9087c4d6d376f90",
    "number": 3565,
    "body": "This adds a configuration option to allow tnt duplication which was recently fixed. While I wouldn't personally use it, the config option should be here for users who want to use it.\r\n\r\nThe config option adds a new `unsupported-settings` which can be used for future controversial patches like the last one. By changing anything in this section, users should expect to not receive support unless they reproduce their issues by setting options in the `unsupported-settings` section to their default values. \r\n\r\nWith that being said, there's no reason this shouldn't be added. Having multiple different forks/local forks of Paper will just cause further fragmentation and hurt Paper's market share. If you don't like this, don't use the option. \r\n\r\nTo all those that I've been disrespectful to in the issue tracker, I'm sorry as I was under the impression that Mojang had fixed this in 1.16 and that you could suck it up for the remaining 1.15 lifecycle.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add unsupported-settings section to config (piston tnt dupe config option) (#3565)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af41d9087c4d6d376f91",
    "number": 3561,
    "body": "There is no config to enable or disable the new Piston Inconsistency Fix, the fix that disabled TNT dupers. This is a vanilla mechanic until fixed by Mojang and makes it hard for my players to feel immersed in their game play. Until there is a config I must make a choice to either not update, make my player base unhappy (which is an unlikely choice), or switch back to spigot.\r\nThis fix should default true and only be disabled if admins want it to happen like the 0 tick farms.\r\n\r\nNot 100% sure how github works. This fork obviously doesn't actually implement a fix and should not be merged. ",
    "head_branch": "MissingConfig-PistonInconsistency-Fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af42d9087c4d6d376f92",
    "number": 3559,
    "body": "Sometimes the main thread wanted to create treasure maps for villages and treasures chests.\r\nIt would call `ItemWorldMap.applySepiaFilter`, which causes extreme contention with\r\nthe async chunk loading threads (which also need biome information from the cache).\r\n\r\nInstead of having a single global lock shared between all values, each value has its own independent lock.\r\nThe `LazyInt` utility class is responsible for this locking and ensures we never initialize a value more than once.\r\nLazy-loading a single chunk's biome information via `LazyInt::getOrLoad` doesn't affect any of the other entries in the cache.\r\n\r\nIn theory, this would fix PaperMC/Paper#3536\r\nHowever the AreaTransformers don't really seem to be pure functions of the area seed - they have some sort of internal state.\r\n\r\nFor various reasons (outlined in the patch file) `ConcurrentHashMap` does not work very well. It's basically just best to put a lock around all get/set operations in the map. This overhead is minuscule compared to the work done computing biome information. \r\n\r\nAfter this change, computing treasure maps is still an expensive operation. It takes a second or two before I can spawn one using my plugin. I can easily overload the server by spawning a bunch of treasure maps. Although it's much better than the situation before this patch. Chunk-generation still continues and the server no longer crashes.\r\n\r\nMaybe someone can refactor `ItemWorldMap.applySepiaFilter` to compute asynchronously? It could just wait until all the chunks are loaded instead of trying to do all the biome lookups on the main-thread.\r\n\r\n**EDIT**: Clarify the current state of the PR",
    "head_branch": "concurrent-arealazy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af43d9087c4d6d376f93",
    "number": 3558,
    "body": "Remove the choice from the zero-tick farm fix.\r\n\r\nUnsure how seriously this will actually be considered, but I personally think it\r\nwould be completely fair, especially with regards to the outcome of the\r\nargument in #3544 resulting in no choice for the bug fix.\r\n",
    "head_branch": "notick-no-choice",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af44d9087c4d6d376f94",
    "number": 3554,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af45d9087c4d6d376f95",
    "number": 3552,
    "body": "In vanilla Enderdragon is tracked for 10 chunks, however if the view distance or no-tick view distance is set higher than 10, the enderdragon can be invisible even though the chunks it is in are visible.\r\n\r\nFixes #2616",
    "head_branch": "EnderDragonTracking",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Track Ender Dragon at current (no tick) view distance"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af46d9087c4d6d376f96",
    "number": 3550,
    "body": "Properly prevents physics desyncs by setting the old pos to air and by getting the old pos after the set type call",
    "head_branch": "fix-pistons-round2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix enderdragon exp dupe\n\nProperly track death stage when unloading/loading in the dragon"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af47d9087c4d6d376f97",
    "number": 3547,
    "body": "When PlayerConnection.disconnect(String) is called,\r\n\"handleDisconnection() called twice\" warning is shown.\r\nCaller of handleDisconnect is PlayerConnection.disconnect(String) and\r\nServerConnection.b(). In ServerConnection, all NetworkManager in\r\nconnectedChannels is checked and call handleDisconnect if NetworkManager\r\nis closed. However, PlayerConnection.disconnect call handleDisconnect\r\nbut do not remove it from connectedChannels. Therefore, handleDisconnect is\r\ncalled twice by PlayerConnection and ServerConnection.\r\n\r\nSince ServerConnection check whether NetworkManager is closed for every\r\ntick, just marking it close is enough for PlayerConnection. Therefore\r\nsimply remove call of handleDisconnection from PlayerConnection.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af48d9087c4d6d376f98",
    "number": 3544,
    "body": "See patch notes",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix piston physics inconsistency (fix tnt dupers) (#3544)\n\nCo-authored-by: Spottedleaf <Spottedleaf@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af49d9087c4d6d376f99",
    "number": 3543,
    "body": "Fix CraftScheduler#runTaskTimerAsynchronously(Plugin, Consumer<BukkitTask>, long, long) scheduling a non-repeating task instead of a repeating one.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Scheduling an async task timer creates a non-repeating task (#3543)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af4ad9087c4d6d376f9a",
    "number": 3535,
    "body": "This adds a getHolder method to the Inventory interface which allows getting a the BlockState holder of it without creating a snapshot of it. This (when used) can massively improve the performance of plugins that need to often check the type or some other properties of the container an inventory belongs to e.g. in the InventoryMoveItemEvent.\r\n\r\nDoubleChests need to be handled a bit different as they aren't directly baked directly by a tile entity so there are two new snapshot methods for the left and right side of the chest.",
    "head_branch": "pr/live-inventory-holder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Inventory getHolder methods without creating new block snapshots (#3535)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af4bd9087c4d6d376f9b",
    "number": 3527,
    "body": "This patch fixes a bug in the WorldChunkManagerTheEnd class where the distance\r\nfrom 0,0 squared overflows the maximum size of an integer. The overflow leads\r\nto hard chunk borders around 370,000 blocks away from 0,0. After this cutoff there\r\nis a few hundred thousand block gap of void until end cities resume to generating around\r\n530,000 blocks from spawn. This is due to the integer flipping back and forth as it overflows.\r\n\r\nThe fix for the issue is quite simple, casting chunk coordinates to longs\r\nallows the distance calculation to avoid overflow and work as intended.\r\n\r\nThe issue is described on this Reddit post which also mentions an official Mojang issue: https://old.reddit.com/r/admincraft/comments/gyvlbt/end_islands_disappearstop_generating_after_about/\r\n\r\nMojang fixed the bug in MC 1.12.2 but appears to have re-introduced it in 1.14+.\r\n\r\nThe bug looks like this:\r\n![](https://i.imgur.com/BItnmwN.png)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix missing chunks due to integer overflow (#3527)\n\nThis patch fixes a bug in the WorldChunkManagerTheEnd class where the distance\r\nfrom 0,0 squared overflows the maximum size of an integer. The overflow leads\r\nto hard chunk borders around 370,000 blocks from 0,0. After this cutoff there\r\nis a few hundred thousand block gap before end land resuming to generate at\r\n530,000 blocks from spawn. This is due to the integer flipping back and forth.\r\n\r\nThe fix for the issue is quite simple, casting chunk coordinates to longs\r\nallows the distance calculation to avoid overflow and work as intended."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af4cd9087c4d6d376f9c",
    "number": 3520,
    "body": "Definitely needs testing.",
    "head_branch": "feature/multithreaded-anti-xray",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make Anti-Xray multithreaded (#3520)\n\nObfuscate multiple chunks at a time over the server thread pool.\r\n\r\nWill speed up chunk processing when anti xray is enabled.\r\n\r\nCo-authored-by: Aikar <aikar@aikar.co>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af4dd9087c4d6d376f9d",
    "number": 3519,
    "body": "As of now, the cost of enchantments are based on which button is pressed. The first, second, and third tier of enchantments will cost 1, 2, and 3 levels respectively. Plugins that listen for the `EnchantItemEvent` event can call `setExpLevelCost(20)` for example to, as the documentation states, set the cost of the enchantment, however that value will only be used as a threshold to enchantment; that a tier 3 enchantment that costs 30 levels will mean that you cannot enchant until you have 30 levels, but will in fact only cost you 3 levels.\r\n\r\nThis bug, for a lack of a better word, was introduced in 1.13 and has persisted, though the exact version where this was introduced remains unknown, as is the reason for the change.",
    "head_branch": "fix-enchantment-costs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix enchantment costs (#3519)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af4ed9087c4d6d376f9e",
    "number": 3518,
    "body": "Previously maps would load all chunks in a certain radius depending on their scale when trying to update their content. This would result in main thread chunk loads when they weren't really necessary, especially on low view distances or \"slow\" async chunk loads after teleports or other prioritisation.\r\n\r\nThis changes it to only try to render already loaded chunks based on the assumption that the chunks around the player will get loaded eventually and that maps will get checked for update every\r\n five ticks that movement occur in anyways.",
    "head_branch": "pr/maps-dont-load-chunks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Maps shouldn't load chunks (#3518)\n\nPreviously maps would load all chunks in a certain radius depending on\r\n their scale when trying to update their content. This would result in\r\n main thread chunk loads when they weren't really necessary, especially\r\n on low view distances or \"slow\" async chunk loads after teleports or\r\n other prioritisation.\r\n\r\n This changes it to only try to render already loaded chunks based on\r\n the assumption that the chunks around the player will get loaded\r\n eventually anyways."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af4fd9087c4d6d376f9f",
    "number": 3517,
    "body": "",
    "head_branch": "SoundBugFix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af50d9087c4d6d376fa0",
    "number": 3513,
    "body": "The deprecation is up for debate I guess",
    "head_branch": "feature/itemmeta-component",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Support components in ItemMeta (#3513)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af51d9087c4d6d376fa1",
    "number": 3511,
    "body": "This patch changes the name and uuid getters to get from the player\r\nprofile because the event's name and uuid fields won't update. This\r\npatch also removes the event's name and uuid fields.\r\n\r\nThis patch was made because when you set a new player profile, it does\r\nnot update the name and uuid in the event. This cause problems when the\r\nevent is passed to other listeners that use getName and getUniqueId\r\nwhich will return the old name and uuid.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Change name and id to get from profile in AsyncPlayerPreLoginEvent (#3511)\n\nCo-authored-by: Daniel Ennis <aikar@aikar.co>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af52d9087c4d6d376fa2",
    "number": 3509,
    "body": "The warning is pretty useless and serves a very limited purpose. I've tried to reason with md_5 on this topic and got absolutely nowhere.\r\n\r\nhttps://hub.spigotmc.org/jira/browse/SPIGOT-5546\r\n\r\ntl;dr: the warning basically makes the plugin.yml `load-before` property unusable - and the reason for adding it is \"just trying to improve the server and API\" 🤷 \r\n\r\nSome other relevant discussion here: https://github.com/lucko/LuckPerms/issues/1959\r\n\r\nThe same issue is also ran into by PlaceholderAPI (which loads from separate plugin-like expansions), spark (which loads other plugin classes to inspect for profiling), etc etc. Just incredibly spammy and annoying.\r\n\r\nThere is no sensible workaround for me here, and the only thing the warning is doing is confusing users.\r\n\r\nUntil a means for plugin authors to specifically signal \"yes this is not a mistake, stop warning me about it\" is added, removing the message seems like a sensible option.\r\n\r\nThanks for your consideration :)",
    "head_branch": "fix/remove-depend-warning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af53d9087c4d6d376fa3",
    "number": 3506,
    "body": "BETA TEST - \r\nRC5 Build: https://cdn.discordapp.com/attachments/289587909051416579/719353946749141042/light.rc5.jar\r\n(RC4 had a bad PR merged and was accidentally required Java9+)\r\n\r\nRC3 Build (no longer relevant): https://cdn.discordapp.com/attachments/289587909051416579/719050281974890506/light.rc3.jar\r\n\r\n(RC2 was a dud)\r\n\r\nRC1 Build: https://cdn.discordapp.com/attachments/289587909051416579/718542018065858653/light.rc1.jar (Don't use this unless you run into a problem that prevents you from using RC3 - RC1 has been pretty stable)\r\n\r\nPlease test on a test server before going to production! This is a high risk update, but so far no issues have been noticed.\r\n---------------------------------------------------------------\r\n\r\nOptimize Light Engine\r\n\r\nMassive update to light to improve performance and chunk loading/generation.\r\n\r\n1) Massive bit packing/unpacking optimizations and inlining.\r\n  A lot of performance has to do with constant packing and unpacking of bits.\r\n  We now inline a most bit operations, and re-use base x/y/z bits in many places.\r\n  This helps with cpu level processing to just do all the math at once instead\r\n  of having to jump in and out of function calls.\r\n\r\n  This much logic also is likely over the JVM Inline limit for JIT too.\r\n2) Applied a few of JellySquid's Phosphor mod optimizations such as\r\n  - ensuring we don't notify neighbor chunks when neighbor chunk doesn't need to be notified\r\n  - reduce hasLight checks in initializing light, and prob some more, they are tagged JellySquid where phosphor influence was used.\r\n3) Optimize hot path accesses to getting updating chunk to have less branching\r\n4) Optimize getBlock accesses to have less branching, and less unpacking\r\n5) Have a separate urgent bucket for chunk light tasks. These tasks will always cut in line over non blocking light tasks.\r\n6) Retain chunk priority while light tasks are enqueued. So if a task comes in at high priority but the queue is full\r\n   of tasks already at a lower priority, before the task was simply added to the end. Now it can cut in line to the front.\r\n   this applies for both urgent and non urgent tasks.\r\n7) Buffer non urgent tasks even if queueUpdate is called multiple times to improve efficiency.\r\n8) Fix NPE risk that crashes server in getting nibble data\r\n\r\n\r\nFixes #3489\r\nFixes #3363\r\n",
    "head_branch": "optimize-light",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Optimize Light Engine\n\nMassive update to light to improve performance and chunk loading/generation.\n\n1) Massive bit packing/unpacking optimizations and inlining.\n  A lot of performance has to do with constant packing and unpacking of bits.\n  We now inline a most bit operations, and re-use base x/y/z bits in many places.\n  This helps with cpu level processing to just do all the math at once instead\n  of having to jump in and out of function calls.\n\n  This much logic also is likely over the JVM Inline limit for JIT too.\n2) Applied a few of JellySquid's Phosphor mod optimizations such as\n  - ensuring we don't notify neighbor chunks when neighbor chunk doesn't need to be notified\n  - reduce hasLight checks in initializing light, and prob some more, they are tagged JellySquid where phosphor influence was used.\n3) Optimize hot path accesses to getting updating chunk to have less branching\n4) Optimize getBlock accesses to have less branching, and less unpacking\n5) Have a separate urgent bucket for chunk light tasks. These tasks will always cut in line over non blocking light tasks.\n6) Retain chunk priority while light tasks are enqueued. So if a task comes in at high priority but the queue is full\n   of tasks already at a lower priority, before the task was simply added to the end. Now it can cut in line to the front.\n   this applies for both urgent and non urgent tasks.\n7) Buffer non urgent tasks even if queueUpdate is called multiple times to improve efficiency.\n8) Fix NPE risk that crashes server in getting nibble data\n\nFixes #3489\nFixes #3363"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af54d9087c4d6d376fa4",
    "number": 3498,
    "body": "Prevent demand from becoming negative and creating an indefinite demand deficit\r\nThis fixes https://bugs.mojang.com/browse/MC-163962\r\nThere is nothing preventing the demand from decreasing forever. This causes the demand value to never be used. But when demand eventually negative overflows, will jump to the max value causing all prices to jump to their maximum value.",
    "head_branch": "demand",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix villager trading demand MC-163962 (#3498)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af55d9087c4d6d376fa5",
    "number": 3460,
    "body": "Update URLs to HTTPS in README.md",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update to HTTPS in README (#3460)\n\nUpdate URLs to HTTPS in README.md."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af56d9087c4d6d376fa6",
    "number": 3456,
    "body": "chunk saves can no longer be called sync either, as we only allowed that to be consistent with pre 1.15 behaviour",
    "head_branch": "cleanup-async-chunks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Cleanup async chunks (#3456)\n\nCo-authored-by: Spottedleaf <Spottedleaf@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af57d9087c4d6d376fa7",
    "number": 3454,
    "body": "This makes advancements load asynchronously upon login.\r\n\r\nThis does not optimise the speed at which they will load or be processed, but\r\nwill simply let the player move on in their login before they are all loaded.",
    "head_branch": "async-advancements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af58d9087c4d6d376fa8",
    "number": 3452,
    "body": "This adds what I would deem a fairly dangerous API which lets you remove every\r\nsingle reputation a villager stores.",
    "head_branch": "clear-rep-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add clear reputation API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af59d9087c4d6d376fa9",
    "number": 3443,
    "body": "Allows black lore to properly serialize, would solve #3440 ",
    "head_branch": "black-lore",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af5ad9087c4d6d376faa",
    "number": 3436,
    "body": "",
    "head_branch": "patch-history",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af5bd9087c4d6d376fab",
    "number": 3433,
    "body": "This PR exposes getItemStack() in AbstractArrow which I have implemented CraftArrow to return the NMS method of getItemStack(). This is currently not possible in the API without some trickery and would involve little maintenance in future versions. The only NMS change I had to make was changing the visibility of getItemStack() in EntityArrow and subclasses from protected to public.",
    "head_branch": "arrow-itemstack",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expose getItemStack in Arrows"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af5cd9087c4d6d376fac",
    "number": 3430,
    "body": "A meme turned reality. I don't expect this to be merged, but it's pretty funny\r\nregardless.\r\n\r\nThis simply disables `net.minemora.entitytrackerfixer.EntityTrackerFixer` from\r\nloading and enabling. It disables just fine afterwards, but that could be\r\nchanged if wanted.",
    "head_branch": "ban-etf",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af5dd9087c4d6d376fad",
    "number": 3423,
    "body": "pls check for minilang",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Document fixup commit way of modifing patches (#3423)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af5ed9087c4d6d376fae",
    "number": 3409,
    "body": "Resolves #3405.\r\nTested on Windows, probably works on Linux as well but needs testing!\r\nThere are probably better ways to fix this, I don't know. If you know one, just close this PR.\r\nNote that I don't delete the created `work/Temp` directory because it might be also useful for other stuff in the future.\r\nWhile fixing this, I have noticed that the `export` command is also used in other scripts for other things, so it might be a good idea to check their functionallity on Windows as well.",
    "head_branch": "hotfix/paper-edit-continue",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix ./paper edit continue for Windows"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af60d9087c4d6d376faf",
    "number": 3406,
    "body": "I think the path should be `./work/Minecraft/$MCVER/spigot/net/minecraft/server` instead of `./work/Minecraft/$MCVER/net/minecraft/server`.",
    "head_branch": "hotfix/contributing-path",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix path in CONTRIBUTING.md (#3406)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af60d9087c4d6d376fb0",
    "number": 3403,
    "body": "Changed\r\n\r\nentity.getFriends().forEach(Entity::explode());\r\n\r\nto\r\n\r\nentity.getFriends().forEach(Entity::explode);",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix a small error in CONTRIBUTING.md (#3403)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af62d9087c4d6d376fb1",
    "number": 3394,
    "body": "The expected version should be equal to or newer than the one stored.",
    "head_branch": "fix-dataversion-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix data version check for ItemStack serialization (#3394)\n\nThe expected version should be equal to or newer than the one stored.\r\n\r\nAlthough Aikar claims he did this on accident (and NOT my ligatures!), I\r\nclaim this is all a big conspiracy by followers of the Taco cult."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af63d9087c4d6d376fb2",
    "number": 3390,
    "body": "The current \"PlayerItemHeldEvent\" is misleading, it states \"Fired when a player changes their currently held item\" but in reality just fires whenever a player changes slots. While this is useful for its own purposes, not for what you would originally assume. The functionality I am trying to add is whenever an item in the player's hand changes, it fires this event which has been working perfectly in my testing. \r\n\r\nThe naming needs reworking but the perfect name is already taken by PlayerItemHeldEvent. We could either come up with a better name for this event or add this functionality to PlayerArmorChangeEvent and refactor it be something like PlayerEquipmentChangeEvent.",
    "head_branch": "HeldItemEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af64d9087c4d6d376fb3",
    "number": 3385,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow server startup for those poor people running <1G Xmx\n\nClamp logic for poolsize so we dont pass zero"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af65d9087c4d6d376fb4",
    "number": 3382,
    "body": "This fixes vanilla goals not getting activated and registering of goals with no types (thanks for that mojang...)\r\n\r\neg `Bukkit.getMobGoals().addGoal(mob, 1, new PaperVanillaGoal<>(new OpenDoorGoal(handle, false)));`",
    "head_branch": "fix-vanilla-goals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix usage of vanilla goals"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af66d9087c4d6d376fb5",
    "number": 3381,
    "body": "Allows for pathfinding that assume that a mob can open a door",
    "head_branch": "feature/pathfinding-ext",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expand Pathfinding API with more options"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af67d9087c4d6d376fb6",
    "number": 3379,
    "body": "This sets no-tick view distance to the tick view distance if the tick view\r\ndistance is changed to a value higher than the no-tick view distance.\r\n\r\nThis also throws an exception if the no-tick view distance is attempted to be\r\nset lower than the tick view distance, as that makes no sense.\r\n\r\nFixes #3372.",
    "head_branch": "fix-set-view-distance",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Ensure no-tick view is not smaller than ticking VD\n\nFixes #3372."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af68d9087c4d6d376fb7",
    "number": 3378,
    "body": "Not sure why it was changed but dupe concerns should be null due to Aikar's recent changes.\r\n\r\nFixes #3226.",
    "head_branch": "leadFix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Drop Leads from nether portals - Fixes #3226"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af69d9087c4d6d376fb8",
    "number": 3377,
    "body": "Iterates and selects the entity which passes safety checks.\r\n\r\nFixes #3297.",
    "head_branch": "EndGateFix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Check portal restrictions when entering end gateways"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af6ad9087c4d6d376fb9",
    "number": 3376,
    "body": "This restricts end gateway teleportations like normal\r\nportal teleportations are restricted.\r\n\r\nFixes #3297.",
    "head_branch": "end-gateway-limitations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af6bd9087c4d6d376fba",
    "number": 3375,
    "body": "This adds a configuration option for console always having\r\nall permissions. This applies to the \"terminal console\" as well\r\nas remote console (RCON) connections.",
    "head_branch": "console-all-permissions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add option for console having all permissions\n\nOverrides permissions set to default false (which op does not get)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af6cd9087c4d6d376fbb",
    "number": 3374,
    "body": "This adds the `minecraft.commandblock` permission node\r\nplus a lot of spaghetti because tacos suck.",
    "head_branch": "command-block-permission",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add permission for command blocks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af6dd9087c4d6d376fbc",
    "number": 3373,
    "body": "CC: @aikar ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix NPE when temp ip bans expire (#3373)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af6ed9087c4d6d376fbd",
    "number": 3367,
    "body": "This adds some goals (for bees, evokers, foxes, illusioners and phantoms) that were missing and not caught by the test due to it only checking the enclosing class of the direct super class and not the full inheritance. ",
    "head_branch": "pr/add-missing-mob-goals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing mob goals for API (#3367)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af6fd9087c4d6d376fbe",
    "number": 3366,
    "body": "This adds the server property `Paper.DisableClassPrioritization` to disable\r\nprioritization of own classes for plugins' classloaders.\r\n\r\nThis value is by default not present, and this will therefore break any\r\nplugins which abuse behaviour related to not using their own classes\r\nwhile still loading their own. This is often an issue with failing to\r\nrelocate or shade properly, such as when shading plugin APIs like Vault.\r\n\r\nA plugin's classloader will first look in the same jar as it is loading\r\nin for a requested class, then load it. It does not re-use other\r\nplugins' classes if it has the chance to avoid doing so.\r\n\r\nIf a class is not found in the same jar as it is loading for and it does\r\nfind it elsewhere, it will still choose the class elsewhere. This is\r\nintended behaviour, as it will only prioritise classes it has in its own\r\njar, no other plugins' classes will be prioritised in any other order\r\nthan the one they were registered in.\r\n\r\nThe patch in general terms just loads the class in the plugin's jar\r\nbefore it starts looking elsewhere for it.",
    "head_branch": "prioritise-own-classes-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Prioritise own classes where possible\n\nThis adds the server property `Paper.DisableClassPrioritization` to disable\nprioritization of own classes for plugins' classloaders.\n\nThis value is by default not present, and this will therefore break any\nplugins which abuse behaviour related to not using their own classes\nwhile still loading their own. This is often an issue with failing to\nrelocate or shade properly, such as when shading plugin APIs like Vault.\n\nA plugin's classloader will first look in the same jar as it is loading\nin for a requested class, then load it. It does not re-use other\nplugins' classes if it has the chance to avoid doing so.\n\nIf a class is not found in the same jar as it is loading for and it does\nfind it elsewhere, it will still choose the class elsewhere. This is\nintended behaviour, as it will only prioritise classes it has in its own\njar, no other plugins' classes will be prioritised in any other order\nthan the one they were registered in.\n\nThe patch in general terms just loads the class in the plugin's jar\nbefore it starts looking elsewhere for it."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af70d9087c4d6d376fbf",
    "number": 3365,
    "body": "This is admittedly a messy PR that should be separate pieces, but because the new event relied on the more base-level commit: https://github.com/PaperMC/Paper/commit/881052595d18bd69847206d18d764e5a34aa387f\r\n\r\nThat commit sets the groundwork for other future patches that can add Player references to events that currently do not have them. So the PR basically needed to be all-in-one.\r\n\r\n_Ultimately_, this PR exists to add the BlockBreakNaturallyEvent. This event fires whenever a block is broken due to a Physics Update propagated from another block break (Breaking vines, or a block with a torch attached, etc). This is meant to be a better way to detect block breaks than trying to evaluate the very heavy BlockPhysicsEvent.\r\n\r\nThe storage of `currentBlockEventPlayer` and `currentBlockEventBlock` is perhaps wonky but mimics other similar patterns like `capturedBlockStates` for event handling.",
    "head_branch": "blockevents",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af71d9087c4d6d376fc0",
    "number": 3360,
    "body": "To avoid rephrasing the ticket, see https://bugs.mojang.com/browse/MC-162253?focusedCommentId=695626&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-695626 for an analysis of how this issue manifests.\r\n\r\nTLDR is: A client bug is triggering the generation of multiple lightmaps at once when passing a chunk boundary causing the client to have a very notable lag spike. Since this issue is present since at least 1.14.4, someone has dug into the code to find out the conditions/problems.\r\n\r\nThis patch serves as a workaround by sending the light maps to the client, so that the generation does not happen, thus mitigating the issue.\r\n\r\nWould you like this to be behind a preference? Ultimatively it'll be removed again when/if mojang fixes 16225.\r\n\r\nUnfortunately, I've mis-added a whitespace in Line 68 of the diff, I'll fix that together with the other input you guys might have.\r\n\r\nEssentially this PR is only about sending PacketPlayOutLightUpdate packets for all 8 neighbors, but I've added some filters to reduce the sent packets, which seems to fork fine so far, but testing is encouraged.\r\n\r\nUse the conditions explained in the linked example (superflat work, placing the glass block and then moving from chunk (9 0) to (8 0) to see the effect. (Server View Distance of 7)\r\n\r\nEdit: The Patch needs to include the missing `3` at the end.",
    "head_branch": "fix-mc-162253",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Workaround for Client Lag Spikes (MC-162253)\n\nWhen crossing certain chunk boundaries, the client needlessly\ncalculates light maps for chunk neighbours. In some specific map\nconfigurations, these calculations cause a 500ms+ freeze on the Client.\n\nThis patch basically serves as a workaround by sending light maps\nto the client, so that it doesn't attempt to calculate them.\nThis mitigates the frametime impact to a minimum (but it's still there)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af72d9087c4d6d376fc1",
    "number": 3359,
    "body": "Getting the PersistentDataContainer of an ItemStack can be much slower than using NMS to get the NBT due to the use of cloning in getItemMeta(). This API patch would add a way to edit the PDC of an ItemStack directly by using its current ItemMeta.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af73d9087c4d6d376fc2",
    "number": 3351,
    "body": "Rebases #2107 \r\n\r\nthere @zachbr \r\n\r\nCloses #2107\r\nCloses #1783",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add and implement PlayerRecipeBookClickEvent (#3351)\n\nCo-authored-by: LordKorea <lk97798@posteo.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af74d9087c4d6d376fc3",
    "number": 3350,
    "body": "",
    "head_branch": "feature/legacy-stats",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add legacy plugin count to metrics"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af75d9087c4d6d376fc4",
    "number": 3348,
    "body": "I know this is a very specific pull request, but it shouldn't be hard to maintain.\r\nUnfortunately there is an issue with my replay recording plugin with Paper builds after the implementation of the \"no tick view distance\". The following change prevents my plugin from capturing chunk update packets:\r\nhttps://github.com/PaperMC/Paper/blob/b4003ef1caac4a27d56cce35c78482d484760adc/Spigot-Server-Patches/0505-No-Tick-view-distance-implementation.patch#L160-L206\r\nMy plugin captures the chunk updates by adding a dummy EntityPlayer to the Stream returned by ``PlayerChunkMap#a(ChunkCoordIntPair, boolean)`` (``this.players.a(this.location, flag)``). This method is unused in Paper now.\r\nI added a boolean that can be set by my plugin and will result in the old/vanilla method to be used. I also changed the old method to just use a Stream instead of an ArrayList + ArrayList#stream.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af76d9087c4d6d376fc5",
    "number": 3339,
    "body": "Read patch notes\r\n\r\nI'll be PR'ing a PaperLib wrapper for `getBedSpawnLocationAsync` after this PR is merged\r\n\r\nCloses #3338",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Potential bed api (#3339)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af77d9087c4d6d376fc6",
    "number": 3335,
    "body": "BlockPhysicsEvent did not provide sufficient data in all cases. The best use-case example for this PR is block-break chain reactions. For example, breaking a dirt block with a torch attached to it would provide a PhysicsEvent that indicated an AIR source block caused the Torch to break. What isn't known from the event is that the Source block used to be a dirt block. Another example is that some Redstone Torch behaviors like burnout would only tell you \"AIR is affecting this RS Torch\", but that wasn't causing it to break, merely flicker. Hopefully this grants some more control over what to do with this event.\r\n\r\nUltimately, this allows more information for players to be able to determine a Physics \"Block Break\" in the absence of a perhaps more useful \"BlockBrokenByBlockEvent\" or something.",
    "head_branch": "blockphysicsupdate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af78d9087c4d6d376fc7",
    "number": 3332,
    "body": "Fixes #3142.",
    "head_branch": "potionApiFix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix PotionEffect API Ignoring Icon bug\n\nFixes #3142"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af79d9087c4d6d376fc8",
    "number": 3331,
    "body": "Fixes #2205.\r\n\r\nNot 100% sure if the check is in the right place.\r\n\r\nI checked for all other places where these 2 checks may not have been performed and I can confirm this is the only class where it was the case.",
    "head_branch": "Fix-pillager-griefing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix EntityRaider picking up items when they shouldn't be able\n\nFixes #2205"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af7ad9087c4d6d376fc9",
    "number": 3311,
    "body": "Resolves #2940.\r\nObfuscating blocks touching lava can be disabled by setting the new config\r\noption anti-xray.lava-obscures in the paper world config to false.\r\nClearing lava with a bucket or replacing it by a transparent block already\r\ntriggers block updates for nearby blocks.",
    "head_branch": "feature/anti-xray-lava",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Anti Xray: Obfuscate blocks touching lava feature (#3311)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af7bd9087c4d6d376fca",
    "number": 3304,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Revert loaded entity list (#3304)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af7cd9087c4d6d376fcb",
    "number": 3303,
    "body": "Those poor souls running outdated ProtocolLib.\r\n\r\nShould fix https://github.com/PaperMC/Paper/issues/3302",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move another NetworkManager util into the inner class (#3303)\n\nThose poor souls running outdated ProtocolLib."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af7dd9087c4d6d376fcc",
    "number": 3301,
    "body": "When adding/removing to a chunk, we need to also look at\r\nediting the loaded entity list.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make loaded entity list logic more consistent (#3301)\n\nWhen adding/removing to a chunk, we need to also look at\r\nediting the loaded entity list.\r\n\r\nCo-authored-by: Spottedleaf <Spottedleaf@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af7ed9087c4d6d376fcd",
    "number": 3296,
    "body": "Port:\r\n - https://github.com/Spottedleaf/Tuinity/blob/master/patches/server/0004-Util-patch.patch\r\n - https://github.com/Spottedleaf/Tuinity/blob/master/patches/server/0010-No-Tick-view-distance-implementation.patch\r\n - https://github.com/Spottedleaf/Tuinity/blob/master/patches/server/0012-Optimize-isOutsideRange-to-use-distance-maps.patch\r\n - https://github.com/Spottedleaf/Tuinity/blob/master/patches/server/0014-Optimize-entity-list-iteration-requiring-entities-be.patch\r\n - https://github.com/Spottedleaf/Tuinity/blob/master/patches/server/0021-Use-distance-map-to-optimise-entity-tracker.patch\r\n - https://github.com/Spottedleaf/Tuinity/blob/master/patches/server/0040-Stop-copy-on-write-operations-for-updating-light-dat.patch",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "No-Tick view distance implementation - Closes #3196\n\nImplements world view distance getters/setters\n\nPer-Player is absent due to difficulty of maintaining\nthe diff required to make it happen."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af7fd9087c4d6d376fce",
    "number": 3281,
    "body": "**Undo the accidental renaming of a method in 0aad8bf**\r\nAikar wanted to rename DataPalette<T>#getDataBits(T object) to getOrCreateIdFor\r\nin 0aad8bf but he also accidentally renamed\r\nChunkPacketInfo<T>#getDataBitsIndex(int chunkSectionIndex) to\r\ngetOrCreateIdForIndex.\r\n\r\n**Remove chunk-edge-mode and chunk loading entirely from Anti-Xray**\r\nThe chunk-edge-mode is broken since several versions.\r\nLoading chunk neighbors for chunk edge obfuscation isn't needed anymore.\r\nUnlike in previous versions, these are under normal circumstances already loaded\r\nat the time we need them (plugins for example can bypass this).\r\n\r\n**Use the modified methods and constructors everywhere**\r\nAnti-Xray provides support for the default nms methods and constructors,\r\nwhich where modified by Anti-Xray to avoid breaking stuff (plugins)\r\nwhich somehow uses these methods.\r\nHowever, the modified versions of those methods and constructors should be used\r\nwhere possible.\r\n\r\n~~**Remove support for the default methods and constructors**\r\nActually, in all cases the modified methods and constructors should be used.\r\nThe idea behind it was, that I didn't want to break plugins for example,\r\nwhich make use of that nms stuff.\r\nOn the other hand it is bad supporting the default methods and constructors\r\nbecause this makes updating more error-prone.\r\nIn particular it's easy to miss a new method or constructor call in an update,\r\nwhich should be changed to call the modified one.~~\r\n\r\n**Improve some comments**",
    "head_branch": "hotfix/anti-xray-chunk-loading",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Anti Xray cleanup\n\nUndo the accidental renaming of a method in 0aad8bf\nAikar wanted to rename DataPalette#getDataBits(T object) to getOrCreateIdFor\nin 0aad8bf but he also accidentally renamed\nChunkPacketInfo#getDataBitsIndex(int chunkSectionIndex) to\ngetOrCreateIdForIndex.\n\nRemove chunk-edge-mode and chunk loading entirely from Anti-Xray\nThe chunk-edge-mode is broken since several versions.\nLoading chunk neighbors for chunk edge obfuscation isn't needed anymore.\nUnlike in previous versions, these are under normal circumstances already loaded\nat the time we need them (plugins for example can bypass this).\n\nUse the modified methods and constructors everywhere\nAnti-Xray provides support for the default nms methods and constructors,\nwhich where modified by Anti-Xray to avoid breaking stuff (plugins)\nwhich somehow uses these methods.\nHowever, the modified versions of those methods and constructors should be used\nwhere possible."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af80d9087c4d6d376fcf",
    "number": 3280,
    "body": "This is a hand-edited commit.\r\n\r\nTested in survival and creative for items in hotbar, inventory, and not in\r\ninventory at all.\r\n\r\nFixes https://github.com/PaperMC/Paper/issues/3277",
    "head_branch": "issue-3277",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af81d9087c4d6d376fd0",
    "number": 3276,
    "body": "The difference in compilation time is significant according to the test by @josephworks\r\nhttps://discordapp.com/channels/457932577073004550/684852205379256397/705480143191146606\r\nhttps://github.com/Akarin-project/Akarin/commit/14a36a6861c475204c0f1a1901a5dcb4fb459737\r\n> Before (1.15.2 without multithread building): 5min39sec\r\n> After (1.15.2 buildmultithread branch): 3min19sec\r\n\r\n> Build speed hasnt changed on github ci as\r\n> Using the MultiThreadedBuilder implementation with a thread count of 2\r\n> but on the jenkins server which has 4 - 16 cores per build, the speed is much quicker.",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af82d9087c4d6d376fd1",
    "number": 3274,
    "body": "patches by @mikroskeem but he has git problems. I validated the work",
    "head_branch": "expose-game-version",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expose game version (#3274)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af83d9087c4d6d376fd2",
    "number": 3266,
    "body": "Adds an unsafe API to create `HoverEvent`s for `ItemStack`s with their internal data.\r\n\r\nPlease see this conversation for why this is on `UnsafeValues`: https://canary.discordapp.com/channels/289587909051416579/555462289851940864/701751987464568973 (or search `in:#paper-dev from: marï diamandis#0001 during: 2020-04-20 hover`)",
    "head_branch": "hover-items",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af84d9087c4d6d376fd3",
    "number": 3265,
    "body": "Adds unsafe item serialization to the `UnsafeValues` interface of Bukkit.\r\n\r\nThis is useful for serializing & deserializing items without YAML.",
    "head_branch": "unsafe-item-serialization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Raw Byte ItemStack Serialization\n\nSerializes using NBT which is safer for server data migrations than bukkits format."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af85d9087c4d6d376fd4",
    "number": 3264,
    "body": "~~Had to patch ASM to make this work as they check caller class for class file version, \r\nnot the class that is being rewritten...~~\r\n\r\nedit: am dumm, asm is dummer tho",
    "head_branch": "fix-commodore",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix commodore (#3264)\n\nfixes #3262"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af86d9087c4d6d376fd5",
    "number": 3252,
    "body": "This PR adds a createVanillaChunkData (next to the createChunkData) method, that allows you to generate a chunk by vanilla chunk gen.\r\n\r\nThis allows you to create stuff like this, a chunk gen that creates a vanilla world in a plus shape with a bedrock world border\r\n![https://i.imgur.com/7KIfxj1.jpg](https://i.imgur.com/7KIfxj1.jpg)\r\nhttps://github.com/MiniDigger/worldgentest/blob/master/src/main/java/me/minidigger/worldgentest/PlusGenerator.kt\r\n\r\n",
    "head_branch": "feature/vanilla-gen",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow delegation to vanilla chunk gen"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af87d9087c4d6d376fd6",
    "number": 3240,
    "body": "It's an event that is called when a structure is generated in a world.\r\nFor anyone wondering why it doesn't extend a ChunkEvent or a WorldEvent it's because they are both sync (as well as this event being fired before the chunk generation).",
    "head_branch": "structure-gen-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af88d9087c4d6d376fd7",
    "number": 3239,
    "body": "This ports the Tuinity view distance patches for per-player view\r\ndistance and no-tick view distance from here:\r\nhttps://github.com/Spottedleaf/Tuinity\r\n\r\nThis has not been extensively tested and may bring issues.\r\nAny help in finding these before merge would be greatly\r\nappreciated.\r\n\r\nI personally would prefer it if this PR can stay unmerged until\r\nmost of the other patches required for good performance are\r\nmerged as well.\r\n\r\nCloses #3196.",
    "head_branch": "no-tick-view-distance",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af89d9087c4d6d376fd8",
    "number": 3234,
    "body": "As it stands now, the PluginClassLoader will much prefer other plugins'\r\nclasses over the plugin it is loading for. If two plugins therefore have\r\ndiffering versions of some library resulting in errors, they will not\r\nwork.\r\n\r\nIf we rather prefer the plugins use their own classes, they will never\r\nhit these differences. If one plugin depends on another and uses its\r\nclasses, it obviously does not have its own classes resulting in it\r\nstill requesting the classes from another plugin as standard, which in\r\nturn can result in library version differences creating errors, but this\r\nis at least avoidable through using the library themselves.\r\n\r\nAlthough plugins nowadays begin to become larger and larger, and not all the\r\nclasses loaded will be necessary to load, this will overall help the plugins\r\nwhich do use languages such as Scala and Kotlin in that they do not need to\r\nrelocate their dependencies (especially in the cases of stuff like\r\nKotlin/Exposed which do not enjoy relocation in any form resulting in exception\r\nhell). This will overall use more memory, but the extra memory for the safety of\r\nplugins to run properly is an okay compromise in my eyes.\r\n\r\nPlease note that this allows plugins which define the same main class paths to\r\nload and operate simultaneously and that if two plugins have the same classes,\r\nthey will NOT share them no matter them being equal.\r\n\r\nA class known as `a.b.Clazz` in Plugin1 will not be used by Plugin2 if it also\r\ndefines `a.b.Clazz`. These classes will be loaded separately resulting in double\r\nthe memory usage, but also resulting in their differences being taken into\r\naccount.",
    "head_branch": "prioritise-own-classes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af8ad9087c4d6d376fd9",
    "number": 3231,
    "body": "In relation to issue #3219",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add getter and setter for villager's numberOfRestocksToday (#3231)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af8bd9087c4d6d376fda",
    "number": 3225,
    "body": "This patch replaces the vanilla method for block collisions with a much faster one, which uses simple collision testing against full-cube block shapes and faster world border checks which do not go through the voxelsystem. It also replaces the method for getting entity collisions with a version that makes less allocations and without stream code. \r\n\r\nThe original code is written by JellySquid, and can be found [here](https://github.com/jellysquid3/lithium-fabric/blob/1.15.x/fabric/src/main/java/me/jellysquid/mods/lithium/common/shapes/LithiumEntityCollisions.java)\r\nThe code is licensed under GNU Lesser General Public License v3.0.\r\n\r\nI have implemented it in the same way as it was originally implemented in Lithium, I believe this will make it easier to update the patch in the future since you can then take the original updated yarn mapped counterpart from Lithium and remap that to spigot mappings. ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af8cd9087c4d6d376fdb",
    "number": 3222,
    "body": "Allows server admins to control whether phantoms should\r\n\r\na) not spawn on creative players\r\n\r\nb) ignore players that have slept recently\r\n\r\nThese options have been defaulted to true at the request of @aikar ",
    "head_branch": "phantoms",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add phantom creative and insomniac controls (#3222)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af8dd9087c4d6d376fdc",
    "number": 3221,
    "body": "Even though mostly obvious by counting from 0 upwards, I (and a number of other people, as sometimes popping up in the dev channels) have troubles finding methods to set specific slots in specific inventories; setting a book in the lectern, setting the lower input item of a grindstone, etc.\r\n\r\nThese few simple helper methods spare devs from guessing such magic numbers and give a bit more intuitive item setting",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add item slot helper methods for various inventories (#3221)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af8ed9087c4d6d376fdd",
    "number": 3216,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Potion#toItemStack swapping the extended and upgraded constructor values (#3216)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af8fd9087c4d6d376fde",
    "number": 3207,
    "body": "Adds new API for managing the reputation of players with villagers.\r\n\r\nNote for anyone who might be a little confused as to why I chose to do it this way: This is the same approach as with getting trades (constructing & converting `MerchantRecipe`s). I don't want to change all instances of `ReputationType` in NMS to the Paper one, thus I have no way of exposing the map directly. An `int[]` could be used instead, but that would be such marginal gains I'm unsure if it's worth doing.",
    "head_branch": "villager-rep-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add villager reputation API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af90d9087c4d6d376fdf",
    "number": 3205,
    "body": "This event should be fired when a block such as a Dispenser or a Dropper tries to dispense an item but it was empty. As KennyTV told me before, and as it also seems a good idea, this event should not be cancellable. The only reason someone could want is as cancellable would be to 'cancel' the 'click' noise produced by the empty dispenser/dropper being triggered.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af91d9087c4d6d376fe0",
    "number": 3203,
    "body": "See #3104, this patch causes issues with NPCs and it was fixed by spigot long time ago with a better workaround, so it isn't required anymore.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Revert \"Re-track players that dismount from other players\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af92d9087c4d6d376fe1",
    "number": 3202,
    "body": "This event should trigger when no item is being dispensed , but the dispenser is still being triggered.\r\nI tried my best",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af94d9087c4d6d376fe2",
    "number": 3195,
    "body": "Respawns don't happen above the bed y level. Respawns below the y level are now properly de-prioritized.\r\n\r\nFixes #3009.",
    "head_branch": "bed-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Bed respawn deviating too far from vanilla (#3195)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af95d9087c4d6d376fe3",
    "number": 3193,
    "body": "This is the start of a new module for Paper to add support for API's\r\nthat interface Mojang API's directly.\r\n\r\nThis allows us to version properly by MC version incase Mojang makes any major breaking changes.\r\n\r\nIt also lets us separate Mojang API's from Paper-API so our downstream friends at Glowstone\r\nwill not have to worry about Mojang code.\r\n\r\nAdds AsyncPlayerSendCommandsEvent\r\n  - Allows modifying on a per command basis what command data they see.\r\n\r\nAdds CommandRegisteredEvent\r\n  - Allows manipulating the CommandNode to add more children/metadata for the client",
    "head_branch": "briadier-api",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Implement Brigadier Mojang API\n\nThis is the start of a new module for Paper to add support for API's\nthat interface Mojang API's directly.\n\nThis allows us to version properly by MC version incase Mojang makes any major breaking changes.\n\nIt also lets us separate Mojang API's from Paper-API so our downstream friends at Glowstone\nwill not have to worry about Mojang code.\n\nAdds AsyncPlayerSendCommandsEvent\n  - Allows modifying on a per command basis what command data they see.\n\nAdds CommandRegisteredEvent\n  - Allows manipulating the CommandNode to add more children/metadata for the client"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af96d9087c4d6d376fe4",
    "number": 3192,
    "body": "Saves ppl who want to do stuff with brigadier from having to use reflection",
    "head_branch": "feature/expose-commanddispatcher",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af97d9087c4d6d376fe5",
    "number": 3191,
    "body": "Replaces old logic (tuinity's was first and should have been ported)\r\n\r\nOld mid tick is inferior because it refuses to run mid tick logic if we're over 50ms for current tick\r\n\r\nOld chunk map was incorrect as it failed to properly handle the chunk map downsizing",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af98d9087c4d6d376fe6",
    "number": 3189,
    "body": "",
    "head_branch": "improve-async-login",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve async login (#3189)\n\nAdd helper functions to ChunkProviderServer to make this easier\r\nfor other uses\r\n\r\nCo-authored-by: Spottedleaf <Spottedleaf@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623af99d9087c4d6d376fe7",
    "number": 3188,
    "body": "",
    "head_branch": "random-block-ticking-behaviour",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve random ticking behaviour - Fixes #3181"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af9ad9087c4d6d376fe8",
    "number": 3184,
    "body": "Fixes #3176.",
    "head_branch": "issue-3176",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow sleeping players to float\n\nThis change lets players who are in their bed have a position which is above\nground for a longer period of time. This is because of the server not setting\ntheir position to the ground/exit location when entering the bed, resulting in\nthe server believing they're still in the air."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af9bd9087c4d6d376fe9",
    "number": 3180,
    "body": "Appending to the tail of the chunk tasks leaves a\r\nwindow for the chunk to be moved to a\r\nnon-ticking status.\r\n\r\nAdditionally, use CB's callback executor so we\r\ncan ensure that we are not incorrectly\r\nscheduling.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make sure the chunk conversion task is executed immediately\n\nAppending to the tail of the chunk tasks leaves a\nwindow for the chunk to be moved to a\nnon-ticking status.\n\nAdditionally, use CB's callback executor so we\ncan ensure that we are not incorrectly\nscheduling."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af9cd9087c4d6d376fea",
    "number": 3172,
    "body": "Use a TreeMap instead of a LinkedHashMap and then manually sorting. Performance was discussed in #3154 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimize brigadier child sorting performance\n\nUse a TreeMap instead of a LinkedHashMap and then manually sorting\n\nThis will significantly reduce CPU usage on logging in and changing worlds."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af9dd9087c4d6d376feb",
    "number": 3170,
    "body": "See patch notes\r\n\r\nFixes https://github.com/PaperMC/Paper/issues/2125",
    "head_branch": "entitylist-iteration",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimize entity list iteration requiring entities be in\n loaded chunks\n\nWe retain a list of loaded entities specifically for this usage"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af9ed9087c4d6d376fec",
    "number": 3169,
    "body": "Also make the Either patch lazy init the optional, as discussed on discord yesterday",
    "head_branch": "level-helper-optimise",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimize ChunkProviderServer's chunk level checking helper methods\n\nThese can be hot functions (i.e entity ticking and block ticking),\r\nso inline where possible, and avoid the abstraction of the\r\nEither class."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623af9fd9087c4d6d376fed",
    "number": 3168,
    "body": "Fixes PaperMC#3156",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Broadcast join messages to console"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afa0d9087c4d6d376fee",
    "number": 3167,
    "body": "Fixes PaperMC#1356",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afa1d9087c4d6d376fef",
    "number": 3166,
    "body": "Fixes a minor issue on the join message not being printed to console whereas the quit message is ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afa2d9087c4d6d376ff0",
    "number": 3164,
    "body": "Before ppl yell at me: this isn't a packet api.\r\nThis is not exposing packets to the api.\r\nThis event aims to provide to fill a gap that plugins like protocollib can't fill right now: Listening to incoming packets on the main thread, so that you can validate them against world state.\r\nThis event allows you to get the packet as an object, a plugin may interact with it directly by using NMS, via reflection or via 3rd party apis such as protocollib.\r\nThis event also allows you to cancel further processing of the packet. At that time in the pipeline the server already \"wasted\" time decoding the packet, but it didnt do any gameplay logic, so its a nice interaction point for anti cheat plugins as you need to access the world in a savely manner to be able to validate the packet.",
    "head_branch": "feature/packet-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afa3d9087c4d6d376ff1",
    "number": 3153,
    "body": "Move oversleep and all task execution back into the timed area...",
    "head_branch": "correct-mspt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix incorect timing of mspt\n\nMove oversleep and all task execution back into the timed area..."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afa4d9087c4d6d376ff2",
    "number": 3152,
    "body": "See patch notes",
    "head_branch": "arraysetsorted-removeif",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimise ArraySetSorted#removeIf\n\nRemove iterator allocation and ensure the call is always O(n)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afa5d9087c4d6d376ff3",
    "number": 3151,
    "body": "See patch notes",
    "head_branch": "optimise-collision",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimise entity hard collision checking\n\nVery few entities actually hard collide, so store them in their own\nentity slices and provide a special getEntites type call just for them.\nThis reduces entity collision checking impact (in my testing) by 25%\nfor crammed entities (shove 130 cows into an 8x6 area in one chunk).\nLess crammed entities are likely to show significantly less benefit.\nEffectively, this patch optimises crammed entity situations."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623afa6d9087c4d6d376ff4",
    "number": 3144,
    "body": "While I consider this fix working, I would rather sleep once on it. As you can see I didn't remove the debug messages either - I don't expect it to get merged in its current state. Tell me what I should change or whether I should just let it go.\r\nFixes #3137 ",
    "head_branch": "pluginclassloader-threadsafe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make JavaClassLoader thread-safe (Fixes #3137) (#3144)\n\n* Make PluginClassLoader thread-safe (fixes #3137)\r\n\r\n* Clean up implementation of MT safe class loader\r\n\r\nCo-authored-by: Aikar <aikar@aikar.co>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623afa7d9087c4d6d376ff5",
    "number": 3143,
    "body": "Signs have the ability to have a `run_command` tag that allows the player to execute a command by right clicking the sign. However the game sees this as \"using a sign\" in the same way as \"using a chest\" so it doesn't allow it.\r\n\r\nI propose we do allow signs to be right clicked inside of the spawn protection. I think this will be beneficial for most servers, for example choosing team in spawn. In case some server would like only op to use the signs that can be done in other ways using scoreboards.",
    "head_branch": "sign-spawn-protection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow signs that are inside of the spawn protection to be right clicked\nto use their run_command tag"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afa8d9087c4d6d376ff6",
    "number": 3139,
    "body": "#3138 ",
    "head_branch": "firework-boost-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add player elytra boost API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623afa9d9087c4d6d376ff7",
    "number": 3136,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Port 04-Util.patch from Tuinity (#3136)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623afaad9087c4d6d376ff8",
    "number": 3134,
    "body": "This is rather experimental, haven't properly tested it yet.\r\n\r\nIt basically allows you to skip some ticks of some entities, either via config, or on demand via a command.\r\n\r\nThe impact is quite noticeable, both on the performance side:\r\n![https://i.imgur.com/QPzEh7N.png](https://i.imgur.com/QPzEh7N.png)\r\n(ticklimit for villager 1/2/3/4)\r\n\r\nbut also on the gameplay side, you can see the entities lagging:\r\nhttps://streamable.com/lc9hzh\r\n\r\nBut, at 2 it isn't that noticeable and it's still better than your whole server lagging, so server owners might take that tradeoff. \r\n\r\nAt dyescape we had great experience with setting high values for ender pearls, we use those at nametags and it eliminated the lag coming from them.\r\nThat's just one example how different setups may take use of this.",
    "head_branch": "feature/tick-limiter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afabd9087c4d6d376ff9",
    "number": 3132,
    "body": "Fixes bug #3131",
    "head_branch": "fix/3131/fix-profiler-balance",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix method profiler inbalance introduced in a2a9ffe (#3132)\n\nFixes #3131"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afacd9087c4d6d376ffa",
    "number": 3130,
    "body": "Remove ambiguity between my patches on Tuinity and here.",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "My patches are under MIT (#3130)\n\n* My patches are under MIT\r\n\r\nRemove ambiguity between my patches on Tuinity and here."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afadd9087c4d6d376ffb",
    "number": 3129,
    "body": "Exposes `MinecraftServer#isRunning` in order to allow for plugins to discern if the server is shutting down or reloading the plugins in the `onDisable` method.",
    "head_branch": "feature/isServerRunning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add API MinecraftServer#isStopping (#3129)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623afaed9087c4d6d376ffc",
    "number": 3116,
    "body": "Builds the command map async, focuses on fixing the root problem described in #2938 instead of just ignoring it. Leaf said he had a better idea but since I had this finished already.. thought might as well PR it. \r\n\r\nNeeds testing from someone who suffers from lag spikes when players connect/change worlds.\r\nShows up as CommandDispatcher.a() in sampler reports. ",
    "head_branch": "asyncCommandMapBuilding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Async command map building\n\nReduces lag created on login and world change for sending the command map to client"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afafd9087c4d6d376ffd",
    "number": 3115,
    "body": "Mojang decided to remove their usage of streams for brain AI used for Villagers, this ports that change. I am missing the serialization diff, wasn't able to figure that one out. \r\n\r\nFor reference: \r\n20w14a on left, 20w15a on right. \r\nhttps://www.diffchecker.com/3R51lUh8\r\n\r\nMaking this draft while I fix comments/formatting. ",
    "head_branch": "20w15aPathfinding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Port 20w15a Villager AI optimizations"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afb0d9087c4d6d376ffe",
    "number": 3106,
    "body": "Name says it all.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afb1d9087c4d6d376fff",
    "number": 3105,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afb2d9087c4d6d377000",
    "number": 3102,
    "body": "Exposes the server tick times and the last 5 second average to the API.\r\n\r\nAlso adds a new `/mspt` command for viewing this information, plus a bit extra.\r\n\r\n![image](https://user-images.githubusercontent.com/332527/78520976-0d466500-778e-11ea-8620-f4bd7dce8c12.png)\r\n\r\nThis supersedes #2926",
    "head_branch": "TickTimes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add tick times API and /mspt command (#3102)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623afb3d9087c4d6d377001",
    "number": 3093,
    "body": "This adds \"bungee\" to the online mode pie chart on bStats. It uses the same checks that Aikar's timings uses for this.\r\n\r\n![image](https://user-images.githubusercontent.com/332527/78420701-24167b80-7617-11ea-9663-96006a149c2a.png)\r\n\r\nNo more wondering if all those offline mode servers really are pirates, or if they are just behind a bungee proxy ^_^",
    "head_branch": "bStats",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Report proxy onlinde mode to bstats as online (#3093)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afb4d9087c4d6d377002",
    "number": 3092,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afb5d9087c4d6d377003",
    "number": 3085,
    "body": "Finally, my brothers have formed an army and done what was\r\nright. The oppression ends today.\r\n\r\n![2020-04-01_07 31 12](https://user-images.githubusercontent.com/6100722/78188485-27e2ac00-7425-11ea-99ed-fc9b8c058a13.png)\r\n![2020-04-01_07 31 34](https://user-images.githubusercontent.com/6100722/78188490-29ac6f80-7425-11ea-9ab8-0036ada157c3.png)\r\n\r\n\r\nYour blocks are forfeit.",
    "head_branch": "leaf-takeover",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afb6d9087c4d6d377004",
    "number": 3081,
    "body": "Move player to their spawn point if their previous world is unloaded on join. The current behaviour is to relocate them to the overworld at the same coordinates, which can cause them to spawn inside of blocks.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move player to spawn point if spawn in unloaded world\n\nThe code following this has better support for null worlds to move\nthem back to the world spawn."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afb7d9087c4d6d377005",
    "number": 3077,
    "body": "Ok I'll explain briefly what I've done, and why I have done it:\r\nI've improved and added a new argument to the default Spigot /tps command, which didn't look good in my opinion. First the command would take any argument and still display the tps values, which in my opinion is not right as there should be no arguments in order for the command to be executed succesfully. Second I've added the option for the user to add 'graph' as first argument after their /tps command. This will send the user an improved version of the default TPS with a graph.\r\n\r\nIn order to achieve these I had to create add more TPS averages because the graph could not be made only from 3 values. I've added a map of RollingAverage in the MinecraftServer , where each has as key its correspondent minute.\r\n\r\n\r\n## The graph:\r\n\r\nThe graph is generated this way:\r\nthe **ordinate** represents the time of the graph, which obviously goes from left to right, and on the **abscissa** we will have the TPS average value.\r\nIn order to not flood the chat , I've made 2TPS as the minimum unit on the abscissa, so the output message will be 10 rows tall.\r\nA sample of the ouput would be this:\r\n![tps graph](https://i.imgur.com/46EiPab.png)\r\n\r\nIn this photo you can see that in the last minutes the tps had dropped below 19, so the last column is 1 unit lower.\r\n\r\n---\r\nI hope you will like my commit and accept it.\r\n\r\n-- **TheViperShow**\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afb8d9087c4d6d377006",
    "number": 3076,
    "body": "Should limit build up of I/O tasks, or at least properly\r\nindicate to server owners that I/O is falling behind",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afb9d9087c4d6d377007",
    "number": 3072,
    "body": "This event is called when processing a player's attack on an entity\r\nright before their attack strength cooldown is reset, there are no existing\r\nevents that fire within this period of time so it was impossible to\r\ncapture the players attack strength via API prior to this commit.\r\n\r\nThe event is cancellable, which will just skip over the normal reset of\r\nattack strength cooldown",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PlayerAttackEntityCooldownResetEvent\nThis event is called when processing a player's attack on an entity\nright before their attack strength cd is reset, there are no existing\nevents that fire within this period of time so it was impossible to\ncapture the players attack strength via API prior to this commit.\n\nThe event is cancellable, which will just skip over the normal reset of\nattack strength cd"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623afbad9087c4d6d377008",
    "number": 3068,
    "body": "Only occured when entries were scheduled with huge tick delays\r\n\r\nAdd two flags to debug excessive tick delays:\r\n-Dpaper.ticklist-warn-on-excessive-delay=true (false by default)\r\nand -Dpaper.ticklist-excessive-delay-threshold=ticks which\r\nsets the excessive tick delay to the specified ticks (defaults to\r\n60 * 20 ticks, aka 60 seconds)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix memory leak in TickListServer (#3068)\n\nOnly occurred when entries were scheduled with huge tick delays\r\n\r\nAdd two flags to debug excessive tick delays:\r\n-Dpaper.ticklist-warn-on-excessive-delay=true (false by default)\r\nand -Dpaper.ticklist-excessive-delay-threshold=ticks which\r\nsets the excessive tick delay to the specified ticks (defaults to\r\n60 * 20 ticks, aka 60 seconds)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afbbd9087c4d6d377009",
    "number": 3054,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afbcd9087c4d6d37700a",
    "number": 3044,
    "body": "- Increment entity tick count only when an entity ticks\r\n- Remove chunk inhabited timer\r\n- Try finally entity timings",
    "head_branch": "timings-changes-part-0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Timings changes (#3044)\n\n* Timings changes\r\n\r\n- Increment entity tick count only when an entity ticks\r\n- Remove chunk inhabited timer\r\n- Try finally entity timings\r\n\r\n* Add activated entity ticks\r\n\r\nCo-authored-by: Spottedleaf <Spottedleaf@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afbdd9087c4d6d37700b",
    "number": 3038,
    "body": "git version in patches is annoying",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afbed9087c4d6d37700c",
    "number": 3031,
    "body": "Well, just a day after the fix for the issue got merged into paper, it got merged into craftbukkit as well, making the patch obsolete. I didn't expect this to happen any time soon, but it did. Apologies for the fuzz.\r\n\r\nLinks to related issues:\r\npaper bug report: https://github.com/PaperMC/Paper/issues/3025\r\npaper pull request: https://github.com/PaperMC/Paper/pull/3026\r\npaper commit that fixed the issue: https://github.com/PaperMC/Paper/commit/0ad8cf73ff1d8f5dd61354e4bc986faee996ca89\r\noriginal spigot bugreport: https://hub.spigotmc.org/jira/browse/SPIGOT-5606\r\ncraftbukkit pull request: https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/pull-requests/641/overview\r\ncraftbukkit commit that fixed the issue: https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/a6f809378ced3dd528b2f429f0391a4ad3946a2a\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afbfd9087c4d6d37700d",
    "number": 3027,
    "body": "Previous solution could still block network thread (while addPending is executing). This window is small, but removing it completely is better. This should probably also speed up concurrent adds, because no locking will be performed anymore.\r\nThe only possible downside is that adding elements one by one to synchronized list might be slower (But it's done while already locked, so maybe jvm will avoid additional locking?),",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Prevent blocking on adding a new network manager (#3027)\n\nPrevious solution could still block network thread (while addPending is executing). This window is small, but removing it completely is better. This should probably also speed up concurrent adds, because no locking will be performed anymore.\r\nThe only possible downside is that adding elements one by one to synchronized list might be slower (But it's done while already locked, so maybe jvm will avoid additional locking?),"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afc0d9087c4d6d37700e",
    "number": 3026,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/3025\r\n\r\nThe code for this patch was heavily based on the patch for BlockDoor, but I don't think there's an elegant way to share code between the two patches.\r\n\r\nI tested the patch using the example plugin described in the bugreport, everything seems to work fine. As with BlockDoor, the BlockRedstoneEvent is only called when the fence gate actually changes from an open state to a closed state or vice versa. More specifically; redstone power level changes where both the old and new power levels are above 0 are ignored for this event.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Call BlockRedstoneEvent for fence gates (#3026)\n\nCo-authored-by: Jan Boerman <Janboerman95@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afc1d9087c4d6d37700f",
    "number": 3023,
    "body": "This fixes an issues where an NPE is thrown when the mouse information is unavailable to the GUI, like when Windows Lock Screen is enabled.",
    "head_branch": "GuiFixNPE",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix NPE on GUI during Windows Lock Screen (#3023)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afc2d9087c4d6d377010",
    "number": 3021,
    "body": "Seeeeee https://github.com/PaperMC/Paper/pull/2399 (and https://github.com/PaperMC/Paper/pull/2439)\r\n\r\nThe \"proper\" fix would be to actually make Bukkit's represenation of the firework also use the projectile interface and impl, to then also fire the ProjectileCollideEvent, buuuut that's probably better to be done upstream, which won't happen, so eh.",
    "head_branch": "firework-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Pass fireworks through vanished players (#3021)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afc3d9087c4d6d377011",
    "number": 3000,
    "body": "",
    "head_branch": "Reload",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afc4d9087c4d6d377012",
    "number": 2998,
    "body": "Tested and works. Totally didn't hard reset a commit just like this one.",
    "head_branch": "BlockMultiPlaceEvent-getHand-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add hand to BlockMultiPlaceEvent (fixes #2997) (#2998)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623afc5d9087c4d6d377013",
    "number": 2994,
    "body": "",
    "head_branch": "persistent-chunk-data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afc6d9087c4d6d377014",
    "number": 2992,
    "body": "Originally, when a block was being random ticked, it was giving a mutable block position object. Whenever the next random tick was called, that same mutable block position was updated to a new block position, creating synchronization issues if the block being ticked cared about the block coordinates, such as newly hatched turtles.\r\n\r\nThis change simply forces an immutable block position to be generated whenever a random tick is scheduled, ensuring the position will be valid throughout the duration of the random tick's logic.",
    "head_branch": "fix-randomtick",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix random ticks (Fixes #2990) (#2992)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afc7d9087c4d6d377015",
    "number": 2989,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] fix avoid-hopper-search obfhelper hint type (#2989)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afc8d9087c4d6d377016",
    "number": 2982,
    "body": "This adds a config option to the Paper config that allows configuration of spawn limits per world. This can be helpful for servers that need to nerf or increase mob spawns in the end or nether for instance with gold farms or enderman farms causing lag or being too slow. The config option was placed outside of the traditional world settings as the default was unable to be placed in the config entry as the default is in Bukkit.yml like normal.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afc9d9087c4d6d377017",
    "number": 2971,
    "body": "Tested and works. This is also an issue in upstream. The details are explained in the issue: https://github.com/PaperMC/Paper/issues/2969",
    "head_branch": "tripwire-blockplaceevent-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix tripwire hook BlockPlaceEvent (fixes #2969) (#2971)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afcad9087c4d6d377018",
    "number": 2970,
    "body": "**See patch notes for full description**\r\n\r\nThis patch reduces the number of unnecessary entity tracker updates that occur when movement packets are processed by the server. In testing, it has reduced the time taken to process such packets by up to 4x. Packet processing for movement packets often show high in timings reports and are usually the cause for oversleep\r\n\r\nAlthough I have tested this on my own and on my small survival server (and noticed no issues), I haven't got the resources to test this on servers with any more than about 10 concurrent players. Although it _should_ scale well with player count, external testing would be appreciated\r\n\r\nPaperclip (based on 112): https://drive.google.com/file/d/1j2hSTpOFbGo8ioeOM7vZal9wAgzUWWra/view",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afcbd9087c4d6d377019",
    "number": 2962,
    "body": "Kept receiving timings reports with the distance map being updated in worlds where mob and animal spawning had been disabled. This patch fixes that. Have looked at what work this skips and cannot see any harm/potential for harm. Where the work skipped is used here the check is similar.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Skip distance map update when spawning is disabled"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afccd9087c4d6d37701a",
    "number": 2960,
    "body": "",
    "head_branch": "tamedWolf",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afcdd9087c4d6d37701b",
    "number": 2958,
    "body": "See commits\r\n\r\nThe patch was checked against the original\r\nThis patch should be merged after https://github.com/PaperMC/Paper/pull/2957",
    "head_branch": "per-player-viewdistance",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afced9087c4d6d37701c",
    "number": 2957,
    "body": "See patch notes",
    "head_branch": "optimise-ticklist-server",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimise ticklistserver (#2957)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623afcfd9087c4d6d37701d",
    "number": 2954,
    "body": "make itemWorldMapUpdateRenderRadiusWorldNoCeiling/HasCeiling a configuable value",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afd0d9087c4d6d37701e",
    "number": 2938,
    "body": "Continuation of #2772, wanted to speed that along...\r\nFixes #2588  ",
    "head_branch": "sendCommandMapOnWorldChange",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afd1d9087c4d6d37701f",
    "number": 2937,
    "body": "Cause why not, yeah?",
    "head_branch": "FromNetherPortal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add option to nerf pigmen from nether portals (#2937)\n\n* Add option to nerf pigmen from nether portals"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afd2d9087c4d6d377020",
    "number": 2936,
    "body": "",
    "head_branch": "SpawnerNerfRestart",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afd3d9087c4d6d377021",
    "number": 2928,
    "body": "![Fancy Graph :O](https://i.imgur.com/rG2mXkY.png)",
    "head_branch": "Fancy-Graph",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make the GUI graph fancier (#2928)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afd4d9087c4d6d377022",
    "number": 2927,
    "body": "",
    "head_branch": "Moon-Phase",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afd5d9087c4d6d377023",
    "number": 2926,
    "body": "Adds tick times and tick average API.\r\n\r\nAlso adds average tick to `/tps` command output.\r\n\r\n![Output of /tps](https://i.imgur.com/uIMN07T.png)",
    "head_branch": "Average-Tick",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afd6d9087c4d6d377024",
    "number": 2924,
    "body": "This adds config options for defining the spawn chance, spawn delay and spawn start day as well as toggles for handling the spawn delay and start day per player. (Based on the time played statistic)\r\n\r\nWhen not per player it will use the Vanilla mechanic of one delay per world and the world age for the start day.",
    "head_branch": "pr/pillager-patrol-settings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Pillager patrol spawn settings and per player options (#2924)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afd7d9087c4d6d377025",
    "number": 2917,
    "body": "Fix the issue described in #2916.",
    "head_branch": "apply-mending-npe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Player#applyMending NPE (#2917)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afd8d9087c4d6d377026",
    "number": 2915,
    "body": "",
    "head_branch": "fix-getchunkatifcached",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix getChunkAtIfCachedImmediately (#2915)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623afd9d9087c4d6d377027",
    "number": 2914,
    "body": "Massive performance improvement for random block ticking.\r\nThe performance increase comes from the fact that the vast\r\nmajority of attempted block ticks (~95% in my testing) fail\r\nbecause the randomly selected block is not tickable.\r\n\r\nNow only tickable blocks are targeted, however this means that\r\nthe maximum number of block ticks occurs per chunk. However,\r\nnot all chunks are going to be targeted. The percent chance\r\nof a chunk being targeted is based on how many tickable blocks\r\nare in the chunk.\r\nThis means that while block ticks are spread out less, the\r\ntotal number of blocks ticked per world tick remains the same.\r\nTherefore, the chance of a random tickable block being ticked\r\nremains the same.\r\n\r\nAlso rebuild patches...",
    "head_branch": "optimise-random-block-tick",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Heavily optimise random block ticking (#2914)\n\n* Optimise random block ticking\r\n\r\nMassive performance improvement for random block ticking.\r\nThe performance increase comes from the fact that the vast\r\nmajority of attempted block ticks (~95% in my testing) fail\r\nbecause the randomly selected block is not tickable.\r\n\r\nNow only tickable blocks are targeted, however this means that\r\nthe maximum number of block ticks occurs per chunk. However,\r\nnot all chunks are going to be targeted. The percent chance\r\nof a chunk being targeted is based on how many tickable blocks\r\nare in the chunk.\r\nThis means that while block ticks are spread out less, the\r\ntotal number of blocks ticked per world tick remains the same.\r\nTherefore, the chance of a random tickable block being ticked\r\nremains the same."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afdad9087c4d6d377028",
    "number": 2912,
    "body": "This PR simply applies gravity to bees after they stop navigating in the void (below Y 0).",
    "head_branch": "MC-167279",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #2906 - Bees get gravity in void - Fixes MC-167279 (#2912)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afdbd9087c4d6d377029",
    "number": 2903,
    "body": "Ok, after further investigating this turns out to be the proper solution.\r\n\r\nCause: There is a duplicate `TerminalConsole` in the log4j2.xml file.\r\n\r\nFix: Remove the duplicate.\r\n\r\nSolves: No more errors on startup when double clicking the jar, and without edge case side effects like MultiCrap not working.",
    "head_branch": "Better-GUI-Fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix startup errors when double clicking jar (#2903)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afdcd9087c4d6d37702a",
    "number": 2901,
    "body": "This fixes [the IOException](https://pastebin.com/XMBM5MuP) when starting the server without a console (aka, double clicking the jar in a graphical environment).",
    "head_branch": "GUI-Fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix errors on startup when double clicking jar (#2901)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afddd9087c4d6d37702b",
    "number": 2894,
    "body": "If the Paper configuration option \"keep-spawn-loaded\" is set to false, items entering the overworld from the end will spawn at Y = 0. This is due to logic in the getHighestBlockYAt method in World.java only searching the heightmap if the chunk is loaded. Items would often get stuck in a cave or burn in lava since they had to travel to the surface from the very bottom of the world.\r\n\r\nQuickly loading the exact world spawn chunk before searching the heightmap resolves the issue without having to load all spawn chunks. The chunk is only loaded if an entity travels through the exit end portal and the spawn chunks aren't already loaded.\r\n\r\nI prioritized 1.14.4 due to EOL concerns. If this is merged, I can easily port it to 1.15.2 (see issue #2753)",
    "head_branch": "1.14.4/fix/#2681",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix items vanishing through end portal (Resolves #2681) (#2894)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afdfd9087c4d6d37702c",
    "number": 2887,
    "body": "1.15.2 when\r\n\r\ndisable server gui until the logging is fixed for it",
    "head_branch": "1.15.2-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "1.15.2 update (#2887)\n\nFunctional GUI fix added by billygalbreath"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623afe0d9087c4d6d37702d",
    "number": 2884,
    "body": "The same fix from PR #2872 can also be applied to 1.14 too. Resolves issue #2835 for 1.14.4 players ;)\r\n\r\nSince 1.14, Mojang has added an optimization which skips checking if an item should fall every fourth tick.\r\n\r\nHowever, Spigot's entity activation range class also has an optimization which skips ticking active entities every fourth tick. This can result in a state where an item will never properly fall due to its move method never being called.\r\n\r\nThis patch resolves the conflict by offsetting checking an item's move method from Spigot's entity activation range check.",
    "head_branch": "1.14/fix/#2835",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Backport Fix items not falling correctly (Resolves #2835) (#2884)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afe1d9087c4d6d37702e",
    "number": 2883,
    "body": "https://streamable.com/uimm5\r\n\r\n```java\r\n    @EventHandler\r\n    public void onTest(PlayerClientOptionsChangeEvent event) {\r\n        Bukkit.broadcastMessage(event.getPlayer().getDisplayName() + \" just changed his settings!\");\r\n        if (event.hasLocaleChanged()) {\r\n            Bukkit.broadcastMessage(\"Locale changed from \" + event.getPlayer().getClientOption(ClientOption.LOCALE) + \" to \" + event.getLocale());\r\n        }\r\n        if (event.hasChatVisibilityChanged()) {\r\n            Bukkit.broadcastMessage(\"ChatVisibility changed from \" + event.getPlayer().getClientOption(ClientOption.CHAT_VISIBILITY) + \" to \" + event.getChatVisibility());\r\n        }\r\n        if (event.hasMainHandChanged()) {\r\n            Bukkit.broadcastMessage(\"MainHand changed from \" + event.getPlayer().getClientOption(ClientOption.MAIN_HAND) + \" to \" + event.getMainHand());\r\n        }\r\n        if (event.hasSkinPartsChanged()) {\r\n            Bukkit.broadcastMessage(\"SkinParts changed from \" + event.getPlayer().getClientOption(ClientOption.SKIN_PARTS) + \" to \" + event.getSkinParts());\r\n        }\r\n        if (event.hasViewDistanceChanged()) {\r\n            Bukkit.broadcastMessage(\"ViewDistance changed from \" + event.getPlayer().getClientOption(ClientOption.VIEW_DISTANCE) + \" to \" + event.getViewDistance());\r\n        }\r\n        if (event.hasChatColorsEnabledChanged()) {\r\n            Bukkit.broadcastMessage(\"ChatColors changed from \" + event.getPlayer().getClientOption(ClientOption.CHAT_COLORS_ENABLED) + \" to \" + event.hasChatColorsEnabled());\r\n        }\r\n    }\r\n```",
    "head_branch": "feature/settings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Player Client Options API (#2883)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623afe2d9087c4d6d37702f",
    "number": 2882,
    "body": "Hello! This is my first PR ever, so *please don't judge me* xD\r\n\r\nThis patch allows plugin developers to register commands that use [Mojang's Brigadier library](https://github.com/Mojang/brigadier) and all of its capabilities. This means that plugin developers will be able to specify the type of an argument (such as greedy strings, quoted strings, integers, booleans, etc.) and that the client is able to give real-time errors, regarding what the player has written in the input box. Also, colored syntax :)\r\n\r\nThis is achieved by, first of all, adding Brigadier as an API dependency and by creating a class (`BrigadierCommand`) that extends the normal `Command` class. Then, developers can create objects of that class and register them to the command map. By doing so, the server automatically registers the node to Brigadier's command dispatcher. After that, they need to call `Player#updateCommands`, in order to send the command node to the player's client.\r\n\r\nOf course, we require a source for the commands, so a new interface has been created, which is 'CommandSource'. It provides basic command context information and is implemented in 'CommandListenerWrapper'. \r\n\r\nCurrently, the API does not support any argument types, other than the ones provided by Brigadier.\r\n\r\nFinally, I know that Paper already supports Brigadier commands, however, there is no support on the API side, which is what this patch aims to fix.",
    "head_branch": "add-support-for-brigadier",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afe3d9087c4d6d377030",
    "number": 2877,
    "body": "Also add the create search radius mojang recently introduced\r\nto config\r\n\r\nFixes #2874",
    "head_branch": "fix-2874",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Ensure portal search radius is used when teleporting players (#2877)\n\nAlso add the create search radius mojang recently introduced\r\nto config"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afe4d9087c4d6d377031",
    "number": 2876,
    "body": "CB used the resulting item in the dispenser rather than the item\r\ndispensed. The resulting item would have size == 0 and therefore\r\nbe convertered to air, hence why the effects disappeared.\r\n\r\nFixes #2871 ",
    "head_branch": "fix-2871",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix last firework in stack not having effects when dispensed - #2871 (#2876)\n\nCB used the resulting item in the dispenser rather than the item\r\ndispensed. The resulting item would have size == 0 and therefore\r\nbe convertered to air, hence why the effects disappeared."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afe5d9087c4d6d377032",
    "number": 2873,
    "body": "This patch was originally created for Paper 1.14 from Paul Sauve <paul@burngames.net> (Github user PaulBGD), but was never backported to 1.13.\r\n\r\nThis patch aims to fix #2813 before support for Paper 1.13.2 is dropped tomorrow :1st_place_medal:",
    "head_branch": "fix/#2813",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Backport Do less work if we have a custom Bukkit generator (#2873)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afe6d9087c4d6d377033",
    "number": 2872,
    "body": "Since 1.14, Mojang has added an optimization which checks if items should fall on every fourth tick.\r\n\r\nHowever, Spigot's entity activation range class also has an optimization which ticks active entities every fourth tick. This can result in a state where an item will never properly fall due to its move method never being called.\r\n\r\nI have found 3 simple solutions that all work:\r\n1. Change item entity tick frequency\r\n2. Change activation range tick frequency\r\n3. Exclude item entities from entity activation range checks\r\n\r\nI went with solution 1, because in versions 1.13 and below, items checked if they needed to be moved every tick.\r\n\r\nI will also backport this solution to 1.14.4 if it is deemed sufficient.",
    "head_branch": "fix/#2835",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix items not falling correctly (Resolves #2835) (#2872)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afe7d9087c4d6d377034",
    "number": 2868,
    "body": "",
    "head_branch": "full-chunk-debug-on-incremental-watchdog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Full chunk debug on incremental watchdog (#2868)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afe8d9087c4d6d377035",
    "number": 2867,
    "body": "#2356",
    "head_branch": "feature/fix-eigencraft-redstone-dupe-1.13",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix dupe with Eigencraft redstone implementation (#2867)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afe9d9087c4d6d377036",
    "number": 2866,
    "body": "#2356",
    "head_branch": "feature/fix-eigencraft-redstone-dupe-1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix dupe with Eigencraft redstone implementation (#2866)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afead9087c4d6d377037",
    "number": 2864,
    "body": "Fixes #2356",
    "head_branch": "feature/fix-eigencraft-redstone-dupe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix dupe with Eigencraft redstone implementation (#2864)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afebd9087c4d6d377038",
    "number": 2863,
    "body": "setItemStack would not work and getItemStack would return the\r\nwrong item\r\n\r\ngetItemStack is defined to be the item in the player's hand after\r\nthe event, and setItemStack should update it",
    "head_branch": "fix-playerbucketfillevent-for-creative-players",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afecd9087c4d6d377039",
    "number": 2861,
    "body": "When the server is lagging, players will wait longer when eating.\r\nChange to also use a time check instead if it passes.",
    "head_branch": "lagcompensate-eating",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Lag compensate eating (#2861)\n\nWhen the server is lagging, players will wait longer when eating.\r\nChange to also use a time check instead if it passes."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afedd9087c4d6d37703a",
    "number": 2860,
    "body": "Removing the try catch and generally reducing ops should make it\r\nfaster on its own, however removing the try catch makes it\r\neasier to inline due to code size",
    "head_branch": "optimise-chunk-getfluid",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimise Chunk#getFluid (#2860)\n\nRemoving the try catch and generally reducing ops should make it\r\nfaster on its own, however removing the try catch makes it\r\neasier to inline due to code size"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afeed9087c4d6d37703b",
    "number": 2859,
    "body": "Gives a noticeable boost in performance when thousands of explosions are going off.",
    "head_branch": "optimize-explosion-getfluid",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimize call to getFluid for explosions (#2859)\n\nSigned-off-by: BrodyBeckwith <brody@beckwith.dev>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afefd9087c4d6d37703c",
    "number": 2857,
    "body": "Resolves the weird behaviour where modifications to itemStack in PlayerBucketEmptyEvent (through setItemStack in PlayerBucketEvent) are ignored.\r\n\r\nTested with #2651's code snippet and it seems to be functional with this change, things seem fine with the plugin omitted as well. ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aff0d9087c4d6d37703d",
    "number": 2856,
    "body": "",
    "head_branch": "indicate-entity-ticking-in-paper-entity-command",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Indicate ticking status in entity list command (#2856)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aff1d9087c4d6d37703e",
    "number": 2855,
    "body": "",
    "head_branch": "VillagerSleepSyncChunkLoads",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Prevent sync chunk loads when villagers try to find beds (#2855)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aff2d9087c4d6d37703f",
    "number": 2854,
    "body": "",
    "head_branch": "feature/daemon",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aff3d9087c4d6d377040",
    "number": 2852,
    "body": "This fixes the issue where the server will load surrounding chunks up to a radius of 100 chunks in order to search for features e.g. when running the /locate command or for treasure maps (issue #2312).\r\nThis is done by using the same seed checking functionality that is used by the server when generating these features before actually attempting to load the chunk to check if a feature is available in it.\r\n\r\nWhile the chunk loading itself will still be done on the main thread it should ideally only ever load a single chunk so this will be more compatible with existing usages of the feature search both in the server and the API. Theoretically this could be amended to also provide API methods to toggle this or to use the async chunk loading API but async chunk loading would require larger changes that require more looking into how to integrate into the rest of the server without breaking existing mechanics.\r\n\r\nThe only downside of this is that it breaks once the seed or generator changes but this should usually not happen. A config option to disable this improvement is added though in case that should ever be necessary.",
    "head_branch": "pr/seed-based-feature-search",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Seed based feature search (Fixes #2312) (#2852)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aff4d9087c4d6d377041",
    "number": 2851,
    "body": "print chunk holder status, useful for indicating what steps the\r\nserver has gone through after loading chunks from disk\r\n\r\nAlso rebuild patches (cat...)",
    "head_branch": "more-chunk-debug",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add more chunk debug to watchdog (#2851)\n\nprint chunk holder status, useful for indicating what steps the\r\nserver has gone through after loading chunks from disk\r\n\r\nAlso rebuild patches (cat...)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aff5d9087c4d6d377042",
    "number": 2847,
    "body": "In case you believe that the mentioned issue should be addressed here, in Paper, this is my take at doing that.",
    "head_branch": "nerfed-drowning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow nerfed blazes, endermen to take water damage (#2847)\n\nFixes GH-2841"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aff6d9087c4d6d377043",
    "number": 2846,
    "body": "Must be enabled via flag -Dpaper.strict-thread-checks=true\r\n\r\nWhen plugins disable the async catcher and do really stupid things\r\nthat eventually kill the server we have a real bad time ruling\r\nthat activity out. However, this adds a flag to override the\r\nenabled flag. Plugin developers that bypass the async catcher\r\naren't going to bypass this flag because it's off by default, so\r\nin their testing they'll never run into it, and anyone dumb enough\r\nto bypass the async catcher is also dumb enough to ignore this flag.\r\nThus this flag will be useful in finding out which plugins are being\r\nnaughty.\r\n\r\nThe flag is also off by default as to not affect performance in\r\ninserted code.",
    "head_branch": "soft-async-catcher",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aff7d9087c4d6d377044",
    "number": 2845,
    "body": "Apparently sendPacket took 50% of the timings for entity tracker\r\nupdate, so offload that to the packet flusher thread.",
    "head_branch": "flush-packets-async",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aff8d9087c4d6d377045",
    "number": 2844,
    "body": "Should help if something dumb happens",
    "head_branch": "guard-serializing-mismatch-coord",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Guard against serializing mismatching chunk coordinate (#2844)\n\nShould help if something dumb happens"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623aff9d9087c4d6d377046",
    "number": 2843,
    "body": "Chunk unloads are now delayed by a configurable amount.\r\nSpecifically, ticket level reduction is delayed by the configured amount.\r\nThis is done to allow players to teleport and have their pets follow them,\r\nas the chunks will no longer unload or have entity ticking status removed.\r\n\r\nIt's also targetted to reduce performance regressions when\r\nplugins or edge cases in code do not spam sync loads since chunks\r\nwithout tickets get unloaded immediately.",
    "head_branch": "delay-chunk-unloads",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623affad9087c4d6d377047",
    "number": 2842,
    "body": "Use the world entity map instead of iterating over all players",
    "head_branch": "optimise-getplayer-by-uuid",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimise IEntityAccess#getPlayerByUUID (#2842)\n\nUse the world entity map instead of iterating over all players"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623affbd9087c4d6d377048",
    "number": 2837,
    "body": "This PR resolves #2824 and adds a warning message with **no delay** for outdated Java versions below the latest LTS version (11). ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623affcd9087c4d6d377049",
    "number": 2836,
    "body": "Re-opened from #2319 to target `master`.\r\n\r\nThis commit adds the necessary logic so Paper can communicate with [paperd](https://github.com/PaperMC/paperd).\r\n\r\n[paperd's 1.1.0 release](https://github.com/PaperMC/paperd/tree/1.1.0) marks the first release and compatible version with this PR.\r\n\r\n[Documentation on usage can be found here.](https://github.com/PaperMC/paperd/blob/master/usage.md)\r\n\r\n[Documentation on the internals of the communication system can be found here.](https://github.com/PaperMC/paperd/blob/master/protocol.md)\r\n\r\n---\r\n### Build Changes\r\n\r\n[This change also requires updates to `paperclip-maven-plugin` which were done here.](https://github.com/PaperMC/PaperclipMavenPlugin/commit/2c36e4b16c6ab074a103c4d708aaa15791ae1bb2)\r\n\r\n[And the change to Paperclip to incorporate that Maven plugin update is here.](https://github.com/PaperMC/Paperclip/commit/707e3703cda460b069eaf04bd0294da7904890c2)\r\n\r\nBoth `paperclip-maven-plugin` and Paperclip itself were moved to the `io.papermc` package as well as a normal `SNAPSHOT` version bump.\r\n\r\n---\r\n\r\n### Necessary steps before merging:\r\n - [x] Implement a protocol versioning system\r\n - [x] Implement base command set\r\n   - [x] Start\r\n   - [x] Stop\r\n   - [x] Restart\r\n   - [x] Status\r\n   - [x] Send Command\r\n   - [x] Timings\r\n   - [x] Console\r\n - [x] Command option features (PaperMC/paperd#1 & PaperMC/paperd#2)\r\n - [x] Third party testing\r\n\r\n---\r\n\r\nCurrently on hold as there's a major bug in `paperd` that I need to fix first: PaperMC/paperd#9.",
    "head_branch": "feature/daemon",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623affdd9087c4d6d37704a",
    "number": 2833,
    "body": "Without this change skulls do not update correctly after calling setPlayerProfile, because of changes in spigot. Fixes #2830",
    "head_branch": "fix_SkullMeta_setPlayerProfile",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix SkullMeta.setPlayerProfile() (#2833)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623affed9087c4d6d37704b",
    "number": 2828,
    "body": "Fixes #2820 ",
    "head_branch": "2820",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Prevent bees loading chunks checking hive position (#2828)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623afffd9087c4d6d37704c",
    "number": 2819,
    "body": "Adds another break naturally method that enables the plugin dev to easily trigger the block break particle animation effect and sound when breaking a block.",
    "head_branch": "BreakNaturally",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add effect to block break naturally (#2819)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b000d9087c4d6d37704d",
    "number": 2817,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Update dependency version in README.md (#2817)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b001d9087c4d6d37704e",
    "number": 2814,
    "body": "Zstd using zstd-jni: https://github.com/luben/zstd-jni\r\nLZ4 using lz4-java: https://github.com/lz4/lz4-java\r\n\r\nAdded new command-line option, --forceWrite, which will forcibly write the chunk/flush to disk regardless of whether or not the chunk has actually changed in a --forceUpgrade.\r\nNew compression only happens when a chunk is saved, so running a --forceUpgrade AND --forceWrite may be desirable.\r\n\r\nNew config option for the compression method to use.\r\nThere's a new option in PaperConfig (compression level) for Zstd which defaults to 6.\r\nThere's a new option in PaperConfig (compression level) for Zlib which defaults to 5.\r\n\r\nSince the patch hooks Mojang's versioning system for new compression methods, it\r\nshould be internally consistent, easily-updatable, and reversible with a --forceUpgrade AND a --forceWrite.\r\n\r\nThis will likely conflict with plugins and programs expecting region files to be compressed using the current standard.\r\n\r\n- [X] Implementation\r\n- [X] Dictionary",
    "head_branch": "feature/zstd-1.15",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b002d9087c4d6d37704f",
    "number": 2812,
    "body": "Occurs when 1 thread retrieves a regionfile, and then the\r\nregionfile is closed due to it being thrown out of cache.",
    "head_branch": "insane-racecondition",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix race condition with regionfile being closed right after getting one (#2812)\n\nOccurs when 1 thread retrieves a regionfile, and then the\r\nregionfile is closed due to it being thrown out of cache."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b003d9087c4d6d377050",
    "number": 2805,
    "body": "",
    "head_branch": "reduce-snow-sync-loads",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b004d9087c4d6d377051",
    "number": 2802,
    "body": "Original patches:\r\nhttps://github.com/Spottedleaf/Concrete/blob/bleeding/patches/server/0004-Util-patch.patch\r\nhttps://github.com/Spottedleaf/Concrete/blob/bleeding/patches/server/0022-Improve-autosave-performance.patch\r\nhttps://github.com/Spottedleaf/Concrete/blob/bleeding/patches/server/0023-Avoid-immediately-autosaving-newly-generated-loaded-.patch\r\n\r\nSee patch notes for details\r\nThe patches aren't always 1:1 ports, they may have been changed to improve behavior or performance in some areas\r\n\r\nThey've all been dumped in this PR since they tend to have dependencies on each other (most notably the mc-util patch)",
    "head_branch": "performance-patches",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Performance patches prerequisite (#2802)\n\n\r\nPrereq changes for the coming storm of performance patches.\r\nIncludes optimising incremental saving"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b005d9087c4d6d377052",
    "number": 2783,
    "body": "i am no dumb taco hater",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b006d9087c4d6d377053",
    "number": 2778,
    "body": "Fixes #2751 \r\n\r\nThis can be ported to 1.14 as well.",
    "head_branch": "MC-145656",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "MC-145656 Fix Follow Range Initial Target (#2778)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b007d9087c4d6d377054",
    "number": 2777,
    "body": "",
    "head_branch": "dont-load-chunks-chests-PR",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update no chunk loads for hoppers and double chests patch (#2777)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b008d9087c4d6d377055",
    "number": 2776,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Passage outdated (#2776)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b009d9087c4d6d377056",
    "number": 2772,
    "body": "Step one. Unsure if this is something we should gate behind a configuration option or not. I defer to you guys to help make that determination",
    "head_branch": "remote",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b00ad9087c4d6d377057",
    "number": 2768,
    "body": "Prevents creative players from abusing disconnect exploits. Fixes the 1.13.2 side of #2747.",
    "head_branch": "fixbackport",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Backport disconnect exploit fixes to 1.13.2 (#2768)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b00bd9087c4d6d377058",
    "number": 2765,
    "body": "PR in progress",
    "head_branch": "hopperPR",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Port Optimize-Hoppers.patch to 1.15 (#2765)\n\n* port patch\r\n\r\n* fix hoppers eating items"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b00cd9087c4d6d377059",
    "number": 2763,
    "body": "Will require review and testing to verify the patch works as it is intended due to big codebase changes from 1.13 and 1.15. Patch currently compiles and seem to run without breaking the game.",
    "head_branch": "activationPR",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Port activation range improvement patch (#2763)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b00dd9087c4d6d37705a",
    "number": 2761,
    "body": "Applies cleanly, was dropped due to async chunk loading patch not being available at the time. This is my first attempt at a patch so if I messed something up, I'm sorry. ",
    "head_branch": "sync-chunk-loads",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bring back Reduce-sync-loads.patch (#2761)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b00ed9087c4d6d37705b",
    "number": 2758,
    "body": "",
    "head_branch": "projectilePR",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "port PlayerLaunchProjectileEvent patch to 1.15 (#2758)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b00fd9087c4d6d37705c",
    "number": 2757,
    "body": "",
    "head_branch": "TE-PR",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "port TE chunk lookup patch to 1.15 (#2757)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b010d9087c4d6d37705d",
    "number": 2755,
    "body": "",
    "head_branch": "plugins-1.15",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't show 1.15 plugins as legacy in plugins command (#2755)\n\n* Don't show 1.15 plugins as legacy in plugins command\r\n\r\n* Use CraftMagicNumbers.SUPPORTED_API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b011d9087c4d6d37705e",
    "number": 2753,
    "body": "I discovered that items do not vanish, but rather are teleported to Y=0 if the chunk is not loaded.\r\n\r\nThis patch simply ensures that the chunk is loaded before finding the highest block to spawn the item at. 1.13.2's code was very hard to follow (spaghetti anyone?), so I'm not sure how it was done in prior versions.\r\n\r\nIf this solution is acceptable, I also have a backported version for 1.14.4 that I would like to get in before support is dropped. :)\r\n\r\nDownload a 1.15 jar [here](https://github.com/AJMFactsheets/Paper/releases/download/V2.0/paperclip-8-fix-2681.jar)\r\nOr download a backported 1.14.4 jar [here](https://github.com/AJMFactsheets/Paper/releases/download/V2.0/paperclip-236-fix-2681.jar)",
    "head_branch": "1.15-Fix-2681",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b012d9087c4d6d37705f",
    "number": 2733,
    "body": "",
    "head_branch": "wip/1.15",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Nuke IOWorker, make stuff compile (#2733)\n\n* remove removed patch cause its not removed anymore\r\n\r\n* Nuke IOWorker, oh, and also make it compile\r\n\r\n* synchronize writes properly\r\n\r\n* Remove note about IOWorker"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b014d9087c4d6d377060",
    "number": 2732,
    "body": "",
    "head_branch": "wip/1.15",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Compile fixes (#2732)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b015d9087c4d6d377061",
    "number": 2731,
    "body": "another ~50 done\r\nnext up is oversized chunks stuff so I rather have somebody else look at that\r\n\r\n\r\nplus, my boss is yelling that he wants me at work 😂 ",
    "head_branch": "wip/1.15",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Houston, we got a patch (#2731)\n\n* Houston, we got a patch\r\n\r\n* is this the end of the beginning or the beginning of the end"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b016d9087c4d6d377062",
    "number": 2730,
    "body": "hey, im new at this patch business so i grabbed some seemingly simple patches to get the grip of it.\r\nfeedback appreciated\r\nty",
    "head_branch": "wip/1.15",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b017d9087c4d6d377063",
    "number": 2729,
    "body": "",
    "head_branch": "wip/1.15",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Patches 100-260 (#2729)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b018d9087c4d6d377064",
    "number": 2716,
    "body": "Fixes #2681\r\n\r\nThis issue does not exist in the 1.13 branch. Upon further investigation of this issue, I have found that the `entityJoinedWorld()` method in `WorldServer.java` is exactly what is missing between 1.13 and 1.14, however, I don't currently have the time to fully port it's functionality to 1.14.\r\n\r\nThis solution is simple and lightweight, but it has a few caveats:\r\n\r\n1. Not sure if this works properly with async chunks enabled.\r\n2. Not sure if I should instantly unload the chunk (potential memory leak?)\r\n3. Is any important logic missing from the `entityJoinedWorld()` method?\r\n\r\nI am unsure if I will be able to fix any issues quickly as I have been quite busy recently, so anyone else is free to build upon my findings or suggest better methods to call. I wanted to get a fix out quickly as this issue results in items being unexpectedly deleted from the world if the `keep-spawn-loaded` flag is set to `false`.",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b019d9087c4d6d377065",
    "number": 2713,
    "body": "As mentioned by someone in the Paper discord guild an empty CanPlaceOn tag causes an error to be thrown. When such an item is placed in the player's inventory, the player will be disconnected. Players who already have that item in their inventory when joining the server will be kicked upon doing so. Replicating this behaviour should be possible with executing the following command as a player `/give @s oak_leaves{CanPlaceOn:[\"\"]}`. This change should address this issue.\r\n\r\nI am completely new to working with this codebase and this is the fifth attempt at actually not destroying either all files or overriding previous commits - I didn't even manage to get through the steps as specified in the CONTRIBUTING.md file without messing up, so I have no idea if I'm doing this right. Please let me know if I messed anything up regarding the changes I made to the file or this pull request in general, cause then I'll try to fix them.",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix empty CanPlaceOn tags causing errors (#2713)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b01ad9087c4d6d377066",
    "number": 2710,
    "body": "",
    "head_branch": "fix-2696",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Shift chunk key location in the correct direction (#2710)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b01bd9087c4d6d377067",
    "number": 2702,
    "body": "Fixes #2700 ",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Backport MC-160177 fix from 1.15 (#2702)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b01cd9087c4d6d377068",
    "number": 2687,
    "body": "When you are in creative mode and right click air with non-empty hand (clicking air with empty hand is not sent to server) and server has plugin that change player's hand to new instance of air itemstack, server is crashing.\r\n```\r\non right click:\r\n\tplayer's gamemode is creative\r\n\tplayer's target block is not set\r\n\tset player's tool to 1 of air # Crash\r\n```\r\nor equivalent Java code:\r\n```java\r\n@EventHandler\r\npublic void onInteract(PlayerInteractEvent event) {\r\n    Player player = event.getPlayer();\r\n    if (player.getGameMode() != GameMode.CREATIVE || event.getAction() != Action.RIGHT_CLICK_AIR) {\r\n        return;\r\n    }\r\n\r\n    player.getInventory().setItemInMainHand(new ItemStack(Material.AIR)); // Crash\r\n}\r\n```\r\n\r\nCrash report:\r\n```\r\n---- Minecraft Crash Report ----\r\n// I just don't know what went wrong :(\r\n\r\nTime: 11.11.19 13:27\r\nDescription: Exception in server tick loop\r\n\r\njava.lang.AssertionError: TRAP\r\n\tat net.minecraft.server.v1_14_R1.ItemStack.checkEmpty(ItemStack.java:109)\r\n\tat net.minecraft.server.v1_14_R1.ItemStack.setCount(ItemStack.java:897)\r\n\tat net.minecraft.server.v1_14_R1.PlayerInteractManager.a(PlayerInteractManager.java:403)\r\n\tat net.minecraft.server.v1_14_R1.PlayerConnection.a(PlayerConnection.java:1416)\r\n\tat net.minecraft.server.v1_14_R1.PacketPlayInBlockPlace.a(PacketPlayInBlockPlace.java:28)\r\n\tat net.minecraft.server.v1_14_R1.PacketPlayInBlockPlace.a(PacketPlayInBlockPlace.java:5)\r\n\tat net.minecraft.server.v1_14_R1.PlayerConnectionUtils.lambda$ensureMainThread$0(PlayerConnectionUtils.java:23)\r\n\tat net.minecraft.server.v1_14_R1.TickTask.run(SourceFile:18)\r\n\tat net.minecraft.server.v1_14_R1.IAsyncTaskHandler.executeTask(IAsyncTaskHandler.java:136)\r\n\tat net.minecraft.server.v1_14_R1.IAsyncTaskHandlerReentrant.executeTask(SourceFile:23)\r\n\tat net.minecraft.server.v1_14_R1.IAsyncTaskHandler.executeNext(IAsyncTaskHandler.java:109)\r\n\tat net.minecraft.server.v1_14_R1.MinecraftServer.aX(MinecraftServer.java:1029)\r\n\tat net.minecraft.server.v1_14_R1.MinecraftServer.executeNext(MinecraftServer.java:1022)\r\n\tat net.minecraft.server.v1_14_R1.IAsyncTaskHandler.awaitTasks(IAsyncTaskHandler.java:119)\r\n\tat net.minecraft.server.v1_14_R1.MinecraftServer.a(MinecraftServer.java:1088)\r\n\tat net.minecraft.server.v1_14_R1.MinecraftServer.run(MinecraftServer.java:925)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\n```",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b01dd9087c4d6d377069",
    "number": 2683,
    "body": "The counter is used to distinguish entries from each other, however\r\nsince we can concurrently increment the counter we could totally\r\nscrew over the comparision of entries (see a() in NextTickListEntry),\r\nas it compares only the time when the entry will tick, the priority\r\nat which it will tick, and the counter. The block is not compared.\r\n\r\nAsync loading loads the chunk asynchronously which creates these\r\nentries asynchronously.",
    "head_branch": "fix-nextticklist-entry-loading",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix racey NextTickListEntry creation. (#2683)\n\nThe counter is used to distinguish entries from each other, however\r\nsince we can concurrently increment the counter we could totally\r\nscrew over the comparision of entries (see a() in NextTickListEntry),\r\nas it compares only the time when the entry will tick, the priority\r\nat which it will tick, and the counter. The block is not compared.\r\n\r\nAsync loading loads the chunk asynchronously which creates these\r\nentries asynchronously."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b01ed9087c4d6d37706a",
    "number": 2675,
    "body": "I went ahead and redid my #2660 pull request and added support for \"blocks\" to save persistent data as well as support for oversized chunks.",
    "head_branch": "feature/persistence",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b01fd9087c4d6d37706b",
    "number": 2672,
    "body": "this fixes saving of items with black display names in yaml configs",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix serialization of colors from components\n\nThis patch fixes the serialization of display names, item lores and\nother things which use strings with color codes. The old implementation\ndeleted the color codes at the beginning of the resulting string if it\nmatched the default color passed to the conversion function. This\nresulted in items having a black display name losing the black color\ncode in the beginning of the text when the item was serialized (e.g.\nsaving an ItemStack in a Yaml config).\n\nSpigot has now made the issue worse and expanded the scope to more places."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b020d9087c4d6d37706c",
    "number": 2671,
    "body": "This is just an idea how it could work. I`m not really sure if it works.\r\nI`m a newbie at minecraft server development.\r\n\r\nThe normal behavior:\r\nEvery tick-Call on WorldServer goes through his entitylist and execute its\r\ntick-method. This could be very laggy at a specific count of entities.\r\n\r\nMy patch or my idea changes this behaviour:\r\nAt the creating a WorldServer instance it defines a local object of the\r\nclass AsyncTickManager. This manager prepares a configurable amount of\r\nAsyncTickTasks (at least one).\r\nIf the option \"settings.async-ticks.use\" is true, every tick-Call on\r\na WorldServer instance goes through its list of entity and queue them\r\nin the instance of AsyncTickManager.\r\nThis instance distribute this entity to its AsyncTickTask instances.\r\nAfter the queueing action it calls the startTick-method of\r\nAsyncTickManager. This calls the startTick method of all tasks.\r\nAs mentioned above: I`m not really sure if it works.\r\n\r\nI meantioned configurable values. These values are:\r\n- settings.async-ticks.use (boolean): use this new tick behavior.\r\nDefault: false\r\n- settings.async-ticks.count-task (int): count of AsyncTickTasks per\r\nworld. Default: 1\r\n\r\nNot patch related note:\r\nThis is my first patch for such a huge project. I don`t know if I\r\ndid all things right.\r\nI tried to do my best according the CONTRIBUTING.md on GitHub.\r\n\r\nIf I forgot something or if you need some informations, don`t hesitate\r\nto write me a PN on GitHub.\r\nGreetings\r\nBloodrayne1995",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b021d9087c4d6d37706d",
    "number": 2667,
    "body": "Fix spawn rates and add customization options\r\n\r\nThis patch intends to fix the spawn rates for water and ambient mobs. This has been broken by Bukkit 1.13 because of unclear terminology between animals and peaceful mobs. The terminology used in this patch is that a peaceful mob is everything that is not hostile and an animal is just sheep, pigs, etc. In vanilla all mobs except animals spawn every tick, but Bukkit forced all peaceful mobs to spawn at the animal cycle, which is 400x slower than their normal tick delay per spawn, which is 1.\r\n\r\nThis patch adds obfuscation helpers to EnumCreatureType to prevent further confusion and adds configuration options to override the Bukkit \"ticks-per-spawn\" and replace them by customly definable ones.\r\n\r\nNote that this bug has already been fixed in Bukkit 1.14. ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b022d9087c4d6d37706e",
    "number": 2664,
    "body": "This patch intends to fix an issue with LeashHitchs where an exception\r\nwas thrown due EntityHanging#calculateBoundingBox not being able to\r\naccept EnumDirections UP and DOWN.\r\n\r\nThis issue was introduced in a fix for SPIGOT-4674\r\n([d65a2576e40e58c8e446b330febe6799d13a604f](https://hub.spigotmc.org/stash/users/aquazus/repos/craftbukkit/commits/d65a2576e40e58c8e446b330febe6799d13a604f))\r\n\r\nSee issue #2663 ",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[PATCH] bounding box check for hanging entities (#2664)\n\nThis patch intends to fix an issue with LeashHitchs where an exception\r\nwas thrown due EntityHanging#calculateBoundingBox not being able to\r\naccept EnumDirections UP and DOWN.\r\n\r\nThis issue was introduced in a fix for SPIGOT-4674\r\n(d65a2576e40e58c8e446b330febe6799d13a604f)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b023d9087c4d6d37706f",
    "number": 2660,
    "body": "",
    "head_branch": "feature/persistant-chunk-data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b024d9087c4d6d377070",
    "number": 2656,
    "body": "Bukkit applies it's animal spawn rates (declared in bukkit.yml) not only to animals, but to all peaceful mobs. That causes the spawn rates of water mobs and ambient mobs to be drastically lower than in vanilla. The added patch fixes the issue.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b025d9087c4d6d377071",
    "number": 2647,
    "body": "Upstream has released updates that appears to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n7554e08e Add UUID support to CraftProfileBanList\r\n3fe37460 SPIGOT-5378: Fix TileEntity fixer deadlock\r\n12386dd4 SPIGOT-5375: Add spaces to coordinates from tile fixer\r\n606c19e2 SPIGOT-5373: Simultaneous left+right click in creative mode does not work\r\n13caf848 SPIGOT-5370: Fix Block#rayTrace considering other blocks.",
    "head_branch": "update-upstream4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix server deadlock when loading some chunks (#2647)\n\nUpstream has released updates that appears to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n7554e08e Add UUID support to CraftProfileBanList\r\n3fe37460 SPIGOT-5378: Fix TileEntity fixer deadlock\r\n12386dd4 SPIGOT-5375: Add spaces to coordinates from tile fixer\r\n606c19e2 SPIGOT-5373: Simultaneous left+right click in creative mode does not work\r\n13caf848 SPIGOT-5370: Fix Block#rayTrace considering other blocks."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b026d9087c4d6d377072",
    "number": 2641,
    "body": "",
    "head_branch": "fix-syncload-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use getIfLoadedImmediately and not cached immediately for isLoa… (#2641)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b027d9087c4d6d377073",
    "number": 2639,
    "body": "If UUIDs are supported, then it will be easier and less confusing to ban or pardon players who have changed their username. Currently, the profile-based ban list only actually supports getting a profile by username, instead of both username and UUID. It seems this is caused by passing target to UserCache::getProfile as a string, which will then only find the profile if it is a username. This PR modifies CraftProfileBanList to first attempt to convert target to a UUID and get the profile. If target is not a UUID, this will fail and it will proceed as it normally would.\r\n\r\nLet me know if there's anything that needs to be fixed, as this is my first time contributing to Paper. :smile: ",
    "head_branch": "uuid-bans",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b028d9087c4d6d377074",
    "number": 2636,
    "body": "This configuration option is currently unimplemented for 1.14 and this PR should implement it.\r\n\r\nAlso, move the `enableTreasureMaps` check earlier so we don't try to find the structure if we don't need to.\r\n\r\nThe function parameter I'm setting eventually resolves to `getNearestGeneratedFeature` in `StructureGenerator.java`. If the flag boolean is true it will return the closest undiscovered location, otherwise it will return the closest location.\r\n\r\nYou can test this patch by summoning a bunch of cartographers and checking if their map trades change or not (before and after generating the chunks that their map points to).\r\n\r\nThis should resolve #2321 (at least for 1.14)",
    "head_branch": "doublej472/readd-maps-already-discovered",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Re-implement treasure-maps-return-already-discovered for 1.14 (#2636)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b029d9087c4d6d377075",
    "number": 2633,
    "body": "The history of how paths work in Win32 is a sad story and shall not be documented here.\r\nNeedless to say, Windows hates the temporary file name for jansi's native code since it\r\nincludes the version. For git builds, it includes quotes around the actual version. But\r\nalas, the issue apparently doesn't occur if you build on Windows since it removes the\r\nquotes from the git commandline that is ultimately used to build the version string,\r\nbecause of more Win32 sadness and shame.\r\n\r\nGo look at Raymond Chen's blog, The Old New Thing. It's full of Windows oddities and\r\nit will make you want to weep because almost 90% of the world uses this legacy OS from\r\nthe 1980s.\r\n\r\n**tl;dr**: fixes builds from git built on sane *nix OSes so they can actually on Windows without disabling jline.",
    "head_branch": "real-jline-windows-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Really fix JLine on Windows (#2633)\n\nThe history of how paths work in Win32 is a sad story and shall not be documented here.\r\nNeedless to say, Windows hates the temporary file name for jansi's native code since it\r\nincludes the version. For git builds, it includes quotes around the actual version. But\r\nalas, the issue apparently doesn't occur if you build on Windows since it removes the\r\nquotes from the git commandline that is ultimately used to build the version string,\r\nbecause of more Win32 sadness and shame.\r\n\r\nGo look at Raymond Chen's blog, The Old New Thing. It's full of Windows oddities and\r\nit will make you want to weep because almost 90% of the world uses this legacy OS from\r\nthe 1980s."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b02ad9087c4d6d377076",
    "number": 2632,
    "body": "Reverts PaperMC/Paper#2624\r\n\r\nAdditional work needed",
    "head_branch": "revert-2624-jline-windows-git-fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Revert \"Fix jline with git builds under Windows (#2624)\" (#2632)\n\nThis reverts commit 0c64f7b0ae77cc6539126c9008ec6ff616dee220."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b02bd9087c4d6d377077",
    "number": 2629,
    "body": "Removed an unneccessary List.toArray() call and cast checks which consumes a lot of performance when called multiple times per tick.",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "performance improvement for CraftChunk.getEntities() (#2629)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b02cd9087c4d6d377078",
    "number": 2628,
    "body": "",
    "head_branch": "ladders-cramming",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b02dd9087c4d6d377079",
    "number": 2627,
    "body": "",
    "head_branch": "mc10657",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix stuck in sneak when changing worlds (MC-10657) (#2627)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b02ed9087c4d6d37707a",
    "number": 2626,
    "body": "",
    "head_branch": "pillager-patrols",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add option to disable pillager patrols (#2626)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b02fd9087c4d6d37707b",
    "number": 2625,
    "body": "Fixes #2606 ",
    "head_branch": "pillager-outposts",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b030d9087c4d6d37707c",
    "number": 2624,
    "body": "",
    "head_branch": "jline-windows-git-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix jline with git builds under Windows (#2624)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b031d9087c4d6d37707d",
    "number": 2621,
    "body": "Solves #2538.\r\n\r\nThis is my last and probably the best attempt (as it is the smallest API I could come up with and is pretty easy to maintain) to add API that will allow developers to change thrown projectiles' display item without having to access NMS.\r\n\r\nTested with the following code:\r\n```java\r\n    @EventHandler\r\n    public void onProjectileLaunch(ProjectileLaunchEvent event) {\r\n        Projectile projectile = event.getEntity();\r\n        if (projectile instanceof Snowball) {\r\n            ((Snowball) projectile).setDisplayItem(new ItemStack(Material.ENDER_PEARL));\r\n        } else if (projectile instanceof EnderPearl) {\r\n            ((EnderPearl) projectile).setDisplayItem(new ItemStack(Material.SNOWBALL));\r\n        } else if (projectile instanceof ThrownProjectile) {\r\n            ((ThrownProjectile) projectile).setDisplayItem(new ItemStack(Material.BLUE_WOOL));\r\n        }\r\n    }\r\n```",
    "head_branch": "thrown-projectiles-display-item-methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b032d9087c4d6d37707e",
    "number": 2619,
    "body": "Implements #2617\r\n\r\nThis first MVP-PR doesn't cover handling vanilla goals as good as I would want to: you can't create vanilla goals.\r\nYou can list and remove them tho (in addition to implementing your own goals), so this is already a step in the right direction.\r\n\r\nThe VanilllaGoal class has a list of constants with namespaced keys that vanilla uses. Its generated with the unit test (that also checks its completion)\r\nThis allows you to do stuff like this:\r\n\r\n```java\r\nZombie zombie = (Zombie) me.getWorld().spawnEntity(me.getLocation(), EntityType.ZOMBIE);\r\nBukkit.getMobGoals().removeGoal(zombie, VanillaGoal.LOOK_AT_PLAYER);\r\n```\r\n",
    "head_branch": "feature/mob-ai-goals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Mob Goal API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b033d9087c4d6d37707f",
    "number": 2615,
    "body": "When the default call to fromComponent is called, sometimes the default\r\ncolor is not the correct color for the context in which it is called.\r\nChange invocations of fromComponent where this is the case to the proper\r\ncontext specific default color.\r\n\r\nOriginally reported in https://github.com/drtshock/PlayerVaults/issues/398",
    "head_branch": "dshk-pv-398",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b034d9087c4d6d377080",
    "number": 2613,
    "body": "Idea from https://www.spigotmc.org/threads/are-you-running-a-1-14-4-server-successfully.392911/#post-3534320\r\n\r\nUse faster Object2BooleanOpenHashMap in FastUtil to replace Java HashMap to optimize EntityTracker performance.\r\n\r\nBinary build(based #209): \r\nhttps://send.firefox.com/download/25554a86ee153872/#FckznmkjSL3x1cIU4AlvAg\r\n\r\n",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b035d9087c4d6d377081",
    "number": 2608,
    "body": "related to #1927 ",
    "head_branch": "armour-stands-ticking",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't save canTick of armor stands if it has not been set by API (#2608)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b036d9087c4d6d377082",
    "number": 2601,
    "body": "You need to give the opportunity to customize which items can be enchanted for a specific enchantment. This will block any enchantments that the server admin will indicate.",
    "head_branch": "ver/1.14",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b037d9087c4d6d377083",
    "number": 2600,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/2599",
    "head_branch": "fix-autosave-debug",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove debug logging for incremental saves (#2600)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b038d9087c4d6d377084",
    "number": 2595,
    "body": "Spawn loading has been changed to use getChunkAt calls to manually\r\nload chunks since watchdog can watch these calls and so we guard\r\nagainst plugins/players changing the radius of a spawn while it's\r\nloading\r\n\r\nDebug output has been improved to note the status of the currently\r\nwaiting chunk",
    "head_branch": "about-2450",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve spawn loading and debug output for waiting on a chunk (#2595)\n\nSpawn loading has been changed to use getChunkAt calls to manually\r\nload chunks since watchdog can watch these calls and so we guard\r\nagainst plugins/players changing the radius of a spawn while it's\r\nloading\r\n\r\nDebug output has been improved to note the status of the currently\r\nwaiting chunk"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b03ad9087c4d6d377085",
    "number": 2594,
    "body": "Mojang has since replicated the logic\r\n\r\nWe're also breaking the ordering with this patch due to how whoever handled it on a minor revision update\r\n\r\nnote: after merge, requires rb",
    "head_branch": "drop-0375-gamerules",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Drop Optimize-GameRules-to-use-LinkedHashMap (#2594)\n\nMojang has since replicated the logic"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b03bd9087c4d6d377086",
    "number": 2593,
    "body": "We need to check if there are workers before trying to notify\r\nthem...",
    "head_branch": "fix-2591",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Check if there are workers before trying to notify them (#2593)\n\n* Fix #2591\r\n\r\nWe need to check if there are workers before trying to notify\r\nthem..."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b03cd9087c4d6d377087",
    "number": 2587,
    "body": "Solves #2538.\r\nThis is the same as the #2585, but with corrected branch.",
    "head_branch": "expose-display-item-methods-for-possible-throwable-projectiles",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b03dd9087c4d6d377088",
    "number": 2585,
    "body": "solves #2538 ",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b03ed9087c4d6d377089",
    "number": 2584,
    "body": "See patch notes",
    "head_branch": "fix-2580",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Check horse entity validity in container interactions (#2584)\n\nFixes #2580"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b03fd9087c4d6d37708a",
    "number": 2581,
    "body": "Fix of ghost blocks entailed the appearance of a new bug, previously fixed in 1.14.4 pre-release 4: https://bugs.mojang.com/browse/MC-156013.\r\n\r\nYou also added a setting to disable this fix, but is it correct? Maybe it is worth finalizing the fix of ghost blocks so as not to cause a new error?\r\n\r\nSorry, I may be mistaken in the text. I am from another country.",
    "head_branch": "ver/1.14",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b040d9087c4d6d37708b",
    "number": 2576,
    "body": "Upstream has released updates that appears to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n6527cb58 SPIGOT-5329: Clarify isGlowing documentation\r\n5ddb414f Make Lantern extend BlockData\r\ncb888903 Fix typos in previous commits\r\n2a5e0ca2 Bring EnchantItemEvent documentation in line with EnchantmentOffer\r\n3c5fcea2 SPIGOT-5317: Create accessors for player absorption hearts\r\nc6e0d625 SPIGOT-5320: Clarify scope of ExactChoice\r\n\r\nCraftBukkit Changes:\r\na3fdef8c SPIGOT-5331: Add support for Java 13\r\n6ddeb980 SPIGOT-5317: Create accessors for player absorption hearts\r\n5d335e96 SPIGOT-5315: Cannot serialize armor stand ItemMeta\r\n\r\nSpigot Changes:\r\n94af569b SPIGOT-5319: Async catcher for getNearbyEntities",
    "head_branch": "upstream-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot) (#2576)\n\n* Updated Upstream (Bukkit/CraftBukkit/Spigot)\r\n\r\nUpstream has released updates that appears to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n6527cb58 SPIGOT-5329: Clarify isGlowing documentation\r\n5ddb414f Make Lantern extend BlockData\r\ncb888903 Fix typos in previous commits\r\n2a5e0ca2 Bring EnchantItemEvent documentation in line with EnchantmentOffer\r\n3c5fcea2 SPIGOT-5317: Create accessors for player absorption hearts\r\nc6e0d625 SPIGOT-5320: Clarify scope of ExactChoice\r\n\r\nCraftBukkit Changes:\r\na3fdef8c SPIGOT-5331: Add support for Java 13\r\n6ddeb980 SPIGOT-5317: Create accessors for player absorption hearts\r\n5d335e96 SPIGOT-5315: Cannot serialize armor stand ItemMeta\r\n\r\nSpigot Changes:\r\n94af569b SPIGOT-5319: Async catcher for getNearbyEntities"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b041d9087c4d6d37708c",
    "number": 2573,
    "body": "This time the patch should be directly edited and formatted correctly. The rest of the logic seems fine, just a simple converting a filter method to its manual counterpart.\r\n\r\nI don't know why Paperclip was updated since I only wanted to edit patch 0444.\r\n\r\nI'm still really new to all of this so any help is much appreciated.",
    "head_branch": "also-fixes-#2536",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix shulker bullets exploding immediatly (#2536)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b043d9087c4d6d37708d",
    "number": 2572,
    "body": "This PR implements the **per-player view distance API at the ticket level.**\r\n\r\nThis solution comes from the result of many complicated ones (and research).\r\n\r\nThe normal view distance value will determine how far the player can add tickets to chunks.\r\nThe tracking view distance value will determine how far the player can track/see/load chunks. \r\nOther actions such as mob spawning will naturally fallback onto each player's normal view-distance.\r\n**This allows _shared view distance_ from other players without impacting performance.**\r\n\r\n\r\nThis solution leaves the main ticket queue/throttler completely alone, meaning all other ticket-related events are 100% unaffected. It operates through a coordinate compression algorithm in order to calculate and properly update squares, attaching those update actions respectively to the default update queue. Details are inside the patch.\r\n\r\nAlso included is support for a player area map, which is simultaneously calculated from the algorithm mentioned earlier (very efficient indeed), this map may be used for some significant optimizations.\r\n\r\nedit: This patch is now largely complete - all there is left to do is to review, thoroughly test and pinpoint any edge cases. jar is below if you would like to help out :))\r\n\r\n- [x] Base logic\r\n  - [x] Implement correct & efficient logic with coordinate compression & minimal cells.\r\n    - [x] Solve overlapping (or any weird graphed case)\r\n    - [x] Solve multi-queueing (only adds/removes on non-overlapping vd/oldvd cells respectively)\r\n- [x] Add chunk tracking view distance for shared vd per player\r\n  - [x] Handle higher-level view distance management\r\n    - [x] Packet management\r\n    - [x] Trackers & special entities\r\n    - [x] Mob distance map management\r\n    - [x] PCM chunk tracking & untracking\r\n- [x] Internal Testing\r\n  - [x] Test integration in existing plugins\r\n  - [x] Test realtime view distance changes\r\n     - [x] Ticket addition on changes (implemented efficient logic)\r\n     - [x] Ticket removal and unloading\r\n  - [x] Test view distance packet handling affecting client caching\r\n  - [x] Test mob maps & spawning\r\n  - [x] Test general ticket purging (disconnect/world changes/leaves)\r\n  - [x] Trial on 15-30 player server\r\n- [ ] External Testing\r\n  - [ ] ...\r\n\r\nbuild ca3d2b1 for pl dev testers (from 209):\r\nSHA1: FCD10004F63E233A242229D71BD07A1135C46A36\r\nhttps://cdn.discordapp.com/attachments/495168945968513036/631038203180089374/paperclip.jar",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b044d9087c4d6d37708e",
    "number": 2571,
    "body": "While trying to fix #2536 I seem to have found a solution by simply inverting one logical statement. This solution seems a bit too easy and may have other unintended changes in behavior, but my testing hasn't revealed any obvious issues.\r\n\r\nThis is my first time modifying/contributing to Paper. I had issues directly modifying patch 0444 directly, so I made a new patch. I am also not very experienced with the Paper codebase, so I apologize if I didn't correctly adhere to protocol.\r\n\r\nThanks to all contributors for this wonderful project!",
    "head_branch": "fix-#2536",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b045d9087c4d6d37708f",
    "number": 2563,
    "body": "makes use of `spectatorsGenerateChunks` check.\r\nadds option `only-send-chunks-below-speed` taking in `m/s`\r\n\r\npotential caveats:\r\nwhen above set speed, entities launched from the player (such as fireworks/enderpearls/arrows) do not register properly. could be solved by adding specific cases for loading the chunk\r\n\r\nthis is very useful for limiting the performance impact of elytra flight, players in creative loading/generating too many chunks at once, etc. prevents chains of chunk generation",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b046d9087c4d6d377090",
    "number": 2562,
    "body": "makes use of `spectatorsGenerateChunks` check.\r\nadds option `only-send-chunks-below-speed` taking in `m/s`\r\n\r\nknown caveats:\r\nwhen above set speed, entities launched from the player (such as fireworks/enderpearls/arrows) do not register properly. potentially solved by adding specific cases for loading the chunk\r\n\r\nthis is very useful for limiting the performance impact of elytra flight, players in creative loading/generating too many chunks at once, etc.\r\n\r\nincomplete build, somebody bet me to the PaperWorldConfig 💯 ",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b047d9087c4d6d377091",
    "number": 2559,
    "body": "Closes #2558 ",
    "head_branch": "MC-113809",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix zero-tick instant grow farms MC-113809 (#2559)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b048d9087c4d6d377092",
    "number": 2549,
    "body": "- Misc mob spawning\r\n- Chunk range checks",
    "head_branch": "more-timings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add more timings to chunk provider tick (#2549)\n\n- Misc mob spawning\r\n- Chunk range checks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b049d9087c4d6d377093",
    "number": 2548,
    "body": "is a cause of chunks not saving on shutdown (very unlikely though)",
    "head_branch": "fix-queueexecutorthread-flush",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix race conditions in flush allowing for previously scheduled tasks to execute later than the flush call (#2548)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b04ad9087c4d6d377094",
    "number": 2546,
    "body": "Fixes creation of the portals with platform blocks, usually seen above oceans.\r\n![2019-09-09_13 29 10](https://user-images.githubusercontent.com/2089783/64501753-11002f00-d306-11e9-9396-c53d8c74b4fb.png)",
    "head_branch": "fix-nether-portal-creation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix nether portal frame creation (#2546)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b04bd9087c4d6d377095",
    "number": 2544,
    "body": "Add a flag, \"disable-ghost-block-fix\", to allow for turning off \r\nthe GhostBlockFix https://github.com/PaperMC/Paper/pull/2396\r\n\r\nThe reason for this is that this fix re-introduces\r\nthis bug https://bugs.mojang.com/browse/MC-156013\r\n\r\nThis gives server owners a way to opt out of the GhostBlockFix.\r\nIt defaults to false, which is keeping the GhostBlockFix.\r\n\r\nA friend of mine is able to reproduce this:\r\n- disableGhostBlockFix false: https://www.youtube.com/watch?v=QIuc0EBtMfc\r\n- disableGhostBlockFix true: https://www.youtube.com/watch?v=lWWHeHBkNLA",
    "head_branch": "flag-disable-ghost-block-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b04cd9087c4d6d377096",
    "number": 2543,
    "body": " the Ghost/Phantom Block Fix https://github.com/PaperMC/Paper/pull/2396\r\n\r\nThe reason for this is that this fix re-introduces\r\nthis bug https://bugs.mojang.com/browse/MC-156013\r\n\r\nThis gives server owners a way to opt out of the fix.\r\nIt defaults to false, which is keeping the fix.",
    "head_branch": "ghost_block_flag",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b04dd9087c4d6d377097",
    "number": 2542,
    "body": "There are currently 2 patches with the same number.",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b04ed9087c4d6d377098",
    "number": 2532,
    "body": "Fixes #2531 \r\n\r\nAfter further investigating, I found out you cannot damage/break an invisible armorstand in single player mode. However, breaking invisible armorstands has been a part of CraftBukkit for as long as I can remember. This PR adds an option to bring that behavior back.",
    "head_branch": "invisiblearmorstands",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b04fd9087c4d6d377099",
    "number": 2525,
    "body": "see https://github.com/PaperMC/Paper/pull/2522, as requested",
    "head_branch": "signcapping-1.13",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix sign line capping check (master) (#2525)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b050d9087c4d6d37709a",
    "number": 2523,
    "body": "see #2504 \r\n\r\n... semantically, it might be worth instead infering the event in the superclass `ItemCooldown` class (for the humanentity) and adding the human instance into the constructor there.. but then someone else would have to re(do) the pr, since (once more) I can't be bothered to go through the shitton of unnecessarily modified patches my sexy Windows system would modify on rebuilding changes in a class like the HumanEntity one 👀\r\n\r\nIf needed/wanted, I'd also add a potential cooldown cause (natural vs. plugin induced)",
    "head_branch": "itemcooldownevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b051d9087c4d6d37709b",
    "number": 2522,
    "body": "The check didn't produce a wrong outcome (unless you're funny enough to have the limit set from 0-3), but is still an error in logic\r\n\r\nI think you could even get rid of the check, since the offset would only ever become smaller when stopping at the last character before the limit (if that is a codepoint beyond the complementary start) and thus stay inside the string boundaries, but meh (Edit: yeah just understood that it'll not be smaller, but greater in those cases, so ignore that paragraph)",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix sign line capping check (#2522)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b052d9087c4d6d37709c",
    "number": 2519,
    "body": "Did not double-flush the file io thread if async = false",
    "head_branch": "fix-2511",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #2511 (#2519)\n\nDid not double-flush the file io thread if async = false"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b053d9087c4d6d37709d",
    "number": 2514,
    "body": "Before this change, entities could use nether or end portals while they were marked dead. Players could use llamas or horses with chests to copy items by killing them in lava and teleporting to different\r\ndimension in the same server tick.\r\n\r\nHere is a YouTube video showing how llama was duplicated before this change: https://www.youtube.com/watch?v=EiNw29bWlMs",
    "head_branch": "canportal-isdead",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b054d9087c4d6d37709e",
    "number": 2513,
    "body": "See patch notes\r\n\r\n\r\nFixes https://github.com/PaperMC/Paper/issues/2498",
    "head_branch": "fix-2312",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b055d9087c4d6d37709f",
    "number": 2512,
    "body": "See patch notes for details",
    "head_branch": "nuke-streams",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b056d9087c4d6d3770a0",
    "number": 2509,
    "body": "Now everything except waiting for the next tick should be included\r\nin timings",
    "head_branch": "timings-oversleep",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add server oversleep to timings (#2509)\n\nNow everything except waiting for the next tick should be included\r\nin timings"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b057d9087c4d6d3770a1",
    "number": 2502,
    "body": "",
    "head_branch": "fix-version-flag",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix flag for whether to override version check (#2502)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b058d9087c4d6d3770a2",
    "number": 2501,
    "body": "This allows you to solve an issue in vanilla behavior where:\r\n* On easy difficulty your villagers will NEVER get infected, meaning they will always die.\r\n* On normal difficulty they will have a 50% of getting infected or dying.",
    "head_branch": "zombie_infection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b059d9087c4d6d3770a3",
    "number": 2500,
    "body": "Proper scheduling if async chunks is disabled, we would execute\r\na task that is cancelled without setting its run status",
    "head_branch": "fix-2499",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #2499 (#2500)\n\nProper scheduling if async chunks is disabled, we would execute\r\na task that is cancelled without setting its run status"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b05ad9087c4d6d3770a4",
    "number": 2494,
    "body": "They should go into MCUtil\r\nThe mob distance map is replaced by the general player view distance\r\nmap, which is always maintained\r\n",
    "head_branch": "distance-map-refactor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b05bd9087c4d6d3770a5",
    "number": 2486,
    "body": "",
    "head_branch": "double-world-add-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix double world add bug (#2486)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b05cd9087c4d6d3770a6",
    "number": 2485,
    "body": "only wait for IO at the end of the save",
    "head_branch": "improve-save-logic",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve save logic (#2485)\n\nOnly wait for IO at the end of the save\r\nwe also were not force flushing async saves with /save-all flush"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b05dd9087c4d6d3770a7",
    "number": 2477,
    "body": "The change to the update inventory check is to unconditionally the update. This is intentional because it is the simplest way to prevent a client de-sync. If we wanted to check if the client had de-synced and then only send an update, it would likely be through checking incoming packets, however I'm not sure the client even sends such information.",
    "head_branch": "consume",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Prevent consuming the wrong itemstack (#2477)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b05ed9087c4d6d3770a8",
    "number": 2476,
    "body": "",
    "head_branch": "reduce-sync-loads",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Target more sync loads (#2476)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b05fd9087c4d6d3770a9",
    "number": 2475,
    "body": "- Do not unload data if world saving is disabled\r\n- Aggressively target unloading",
    "head_branch": "poi-handling",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve POI data saving logic (#2475)\n\n- Do not unload data if world saving is disabled\r\n- Aggressively target unloading"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b061d9087c4d6d3770aa",
    "number": 2459,
    "body": "Added an event for when a player places an item in or takes an item out of a flower pot.\r\n\r\nThis is a revisit to an old PR I had submitted nearly 3 years ago but wasn't able to finish because of an issue with server-side code that handles event cancellation.",
    "head_branch": "PlayerManipulateFlowerPotEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PlayerFlowerPotManipulateEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b061d9087c4d6d3770ab",
    "number": 2458,
    "body": "The problem was we were checking isExpired() on the entry, but if it\r\nwas expired at that point, then it would be null since get() will remove the entry if it expires.",
    "head_branch": "fix-tempban",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix MC-158900 (#2458)\n\nThe problem was we were checking isExpired() on the entry, but if it\r\nwas expired at that point, then it would be null."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b063d9087c4d6d3770ac",
    "number": 2457,
    "body": "/paper entity will no longer report entities in inactive chunks\r\nWorld#getEntityCount and World#getChunkCount will report only\r\nin active chunks",
    "head_branch": "fix-inactive-chunk-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix some API and commands usage of inactive chunks (#2457)\n\n* /paper entity will no longer report entities in inactive chunks\r\n* World#getEntityCount and World#getChunkCount will report only\r\nin active chunks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b064d9087c4d6d3770ad",
    "number": 2453,
    "body": "Since people here are busy and we need that, I figured I'd give it a try.\r\nAlso please don't kill me; first \"larger\" patch (even if it’s a lot of copy paste) and Windows is still bugging me 👀\r\n\r\nUpping and lowering the distance seems to work fine, also with other players around and all.\r\nWhat is not done currently is sending chunks to be unloaded when lowering the distance, only newly loaded chunks for that player will regard the distance.",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b065d9087c4d6d3770ae",
    "number": 2448,
    "body": "Added an event for when a player places an item in or takes an item out of a flower pot.\r\n\r\nThis is a revisit to an old PR I had submitted nearly 3 years ago but wasn't able to finish because of an issue with server-side code that handles event cancellation.",
    "head_branch": "PlayerFlowerPotManipulateEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b066d9087c4d6d3770af",
    "number": 2447,
    "body": "With this patch applied, you get options to save and load your worlds to and from redis instead of filesystem.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b067d9087c4d6d3770b0",
    "number": 2442,
    "body": "",
    "head_branch": "feature/RevertBlockChangeAPI",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b068d9087c4d6d3770b1",
    "number": 2441,
    "body": "This patch optimizes world searches for players, and hooks methods\r\nthat can be optimized further in future patches.\r\n\r\nIn regards to open issues, it should close #1289\r\n\r\nThe optimizations are as follows:\r\n  1. Short-circuit edge cases\r\n  2. Optimize methods in general\r\n  3. Utilize getEntities method which can be optimized in future patches",
    "head_branch": "improve/optimize-search-radius",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b069d9087c4d6d3770b2",
    "number": 2439,
    "body": "see #2399 ",
    "head_branch": "firework-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b06ad9087c4d6d3770b3",
    "number": 2438,
    "body": "",
    "head_branch": "fix-doubleadd-entity-debug",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Print entity debug stacktrace on entity double add (#2438)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b06bd9087c4d6d3770b4",
    "number": 2436,
    "body": "",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b06cd9087c4d6d3770b5",
    "number": 2433,
    "body": "This adds a Bukkit (Paper) API to get and modify info on villages and sieges in the world.\r\nThere's a fair number of changes here because this update completely changes how villages work.\r\n\r\nThis should encompass everything related to villages including sieges and raids. It should also include events where applicable.\r\n\r\n- [x] Add sieges\r\n- [ ] Add Raids\r\n- [ ] Add general village info",
    "head_branch": "feature/village-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b06dd9087c4d6d3770b6",
    "number": 2432,
    "body": "This patch detects whether or not the server is currently executing as a privileged user and spits out a warning. The warning serves as a sort-of PSA for newer server admins who don't understand the risks of running as root.\r\n\r\nWe've seen plenty of bad/malicious plugins hit markets, and there's been a few close-calls with exploits in the past. Hopefully this helps mitigate some potential damage to servers, even if it is just a warning.",
    "head_branch": "feature/root-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add root/admin user detection (#2432)\n\nThis patch detects whether or not the server is currently executing as a privileged user and spits out a warning. The warning serves as a sort-of PSA for newer server admins who don't understand the risks of running as root.\r\n\r\nWe've seen plenty of bad/malicious plugins hit markets, and there's been a few close-calls with exploits in the past. Hopefully this helps mitigate some potential damage to servers, even if it is just a warning."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b06ed9087c4d6d3770b7",
    "number": 2429,
    "body": "omg please ignore theses",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b06fd9087c4d6d3770b8",
    "number": 2428,
    "body": "This resolves the visual glitch mentioned in the [Jira report](https://bugs.mojang.com/browse/MC-12211),\r\nwhile also preventing the comparator from experiencing 0-tick falling edge\r\ntiming issues when in the bugged state mentioned in the report.\r\n\r\nThis instant 0-tick response is undesirable given the erratic and\r\nseemingly unpredictable behavior represented by a comparator in a bugged\r\nstate. It is also problematic as a comparator in a bugged state can\r\nschedule tile ticks on itself when it should not.\r\n\r\nYou can see an example of the before and after behavior here: \r\n[![IMAGE ALT TEXT HERE](https://img.youtube.com/vi/DIQez110YTw/0.jpg)](https://www.youtube.com/watch?v=DIQez110YTw)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b070d9087c4d6d3770b9",
    "number": 2425,
    "body": "cause why not",
    "head_branch": "kill_da_streams",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b071d9087c4d6d3770ba",
    "number": 2421,
    "body": "Add parallel() on some stream to make stream can be done faster to optinize the performance.",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b072d9087c4d6d3770bb",
    "number": 2418,
    "body": "I changed a method call without looking at the implications.\r\nsuper.processDeath would re-invoke the unmapped method, whereas super.d\r\nwould call the super method.\r\n\r\nFixes #2417 ",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix recursion in EntityFox (#2418)\n\nI changed a method call without looking at the implications.\r\nsuper.processDeath would re-invoke the unmapped method, whereas super.d\r\nwould call the super method."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b073d9087c4d6d3770bc",
    "number": 2415,
    "body": "Upstream has released updates that appears to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nbde198c9 SPIGOT-5246: PlayerQuitEvent.get/setQuitMessage() is incorrectly marked as NotNull\r\n24ad5a79 SPIGOT-5240: Vector.angle not valid for angles very close to each other\r\na143db9a SPIGOT-5231: ShotAtAngle API for Fireworks\r\n10db5c3d SPIGOT-5226: Update Javadoc of PlayerDeathEvent\r\n\r\nCraftBukkit Changes:\r\n1ec1b05e SPIGOT-5245: Unneeded cast to WorldNBTStorage in CraftWorld#getWorldFolder\r\ne5e8eec2 SPIGOT-5241: setAttributeModifiers does not work on untouched stack\r\n803eaa31 SPIGOT-5231: ShotAtAngle API for Fireworks\r\n7881d2ae SPIGOT-5237: Horses, pigs do not drop their inventory\r\n06efc9ec Don't accept connections until all plugins have enabled\r\nda62a66a SPIGOT-5225: World handle isn't closed if world is unloaded without saving\r\n104b3831 SPIGOT-5222: Cannot get Long values from Entity memory\r\nf0b3fe43 SPIGOT-5220: Server CPU usage reaches 100% when stdin is null\r\n\r\nSpigot Changes:\r\ne5b1b5db SPIGOT-5235: Destroy expired area effect clouds / fireworks that are inactive\r\ncbcc8e87 Make region files more reliable to write to\r\n8887c5f4 Remove redundant late-bind option\r\ndac29063 Rebuild patches",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit/Spigot)  (#2415)\n\n* fixup patch and rebuild\r\n\r\n* Updated Upstream (Bukkit/CraftBukkit/Spigot)\r\n\r\nUpstream has released updates that appears to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\nbde198c9 SPIGOT-5246: PlayerQuitEvent.get/setQuitMessage() is incorrectly marked as NotNull\r\n24ad5a79 SPIGOT-5240: Vector.angle not valid for angles very close to each other\r\na143db9a SPIGOT-5231: ShotAtAngle API for Fireworks\r\n10db5c3d SPIGOT-5226: Update Javadoc of PlayerDeathEvent\r\n\r\nCraftBukkit Changes:\r\n1ec1b05e SPIGOT-5245: Unneeded cast to WorldNBTStorage in CraftWorld#getWorldFolder\r\ne5e8eec2 SPIGOT-5241: setAttributeModifiers does not work on untouched stack\r\n803eaa31 SPIGOT-5231: ShotAtAngle API for Fireworks\r\n7881d2ae SPIGOT-5237: Horses, pigs do not drop their inventory\r\n06efc9ec Don't accept connections until all plugins have enabled\r\nda62a66a SPIGOT-5225: World handle isn't closed if world is unloaded without saving\r\n104b3831 SPIGOT-5222: Cannot get Long values from Entity memory\r\nf0b3fe43 SPIGOT-5220: Server CPU usage reaches 100% when stdin is null\r\n\r\nSpigot Changes:\r\ne5b1b5db SPIGOT-5235: Destroy expired area effect clouds / fireworks that are inactive\r\ncbcc8e87 Make region files more reliable to write to\r\n8887c5f4 Remove redundant late-bind option\r\ndac29063 Rebuild patches\r\n\r\n* Preserve old flush on save flag for reliable regionfiles\r\n\r\nOriginally this patch was in paper\r\n\r\n* Fix some issues with the death event\r\n\r\n- Entities potentially entering a glitched state to the client where\r\nthey appear to be falling over\r\n- Donkeys losing their chest if the event was cancelled (only an\r\nissue since the upstream merge)\r\n- Some wither death logic running for an entity killed by a wither"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b074d9087c4d6d3770bd",
    "number": 2413,
    "body": "",
    "head_branch": "ItemCooldownFix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix enderpearl item use cooldown (fix #2412) (#2413)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b075d9087c4d6d3770be",
    "number": 2408,
    "body": "This PR aim's to improve the performance of boats by ~~not activating them outside of the activation range and~~ by skipping their ticks when they are stacked more than a minimum amount (`min-boat-collisions-to-disable-ticking` defaults to 10).\r\n\r\nBoats are disabled when they collide with the `min-boat-collisions-to-disable-ticking` amount of entities for more than 20 ticks. ~~Once they are disabled, they cannot tick again without destroying and placing them again or unloading and then loading the chunk. Any suggestions to efficiently reenable ticking again in certain circumstances are welcome but I feel this is good enough.~~ Boats will periodically (configurable with `disabled-boat-ticking-period`) unfreeze for 20 ticks and when they are generally interacted with (excluding collisions of course).\r\n\r\nChecklist\r\n\r\n- [x] [optional] find a way to efficiently unfreeze them forcefully by a player\r\n- [x] [optional] find a way to efficiently unfreeze them when collisions are low again\r\n- [x] Test freezing mechanics in all survival circumstances\r\n~~- [ ] Test activation range changes with redstone builds~~\r\n\r\nThis aims to prevent lag from machines like the ones in this video https://www.youtube.com/watch?v=ulxM05wEN7o.",
    "head_branch": "optimize-boats",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b076d9087c4d6d3770bf",
    "number": 2399,
    "body": "As with arrows, fireworks should ignore players, that the shooter cannot see (both for when shot with a crossbow and when just placed).\r\n\r\n... I'm unsure about the world check, as nms is still kind of confusing, so I looked for checks in similar cases of getting an entity.\r\nAlso also, I didn't fire a ProjectileCollideEvent since, for some reason, a firework is no projectile 👀",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b077d9087c4d6d3770c0",
    "number": 2396,
    "body": "Fixed MC-156852\r\n\r\nThis corrects the 1.14.4 of \"phantom\" blocks that the client thinks are deleted but the server does not.\r\n\r\nIt uses the same solution that fixed the glitch that caused the same issue in 1.8-1.12.\r\n\r\nOriginally solved by Gnembon on MC-5694 at bugs.mojang.com\r\n\r\n1.14 https://bugs.mojang.com/browse/MC-156852\r\n1.12 https://bugs.mojang.com/browse/MC-5694",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "MC-156852 fix (#2396)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b078d9087c4d6d3770c1",
    "number": 2390,
    "body": "Fixes #2381 \r\nhonestly just edited the patch by hand because I couldn't be bothered to check how to edit patches and rebuilding is ugly because Windows 👀\r\n\r\n... looking a few lines above at how the collision is cancelled when the scoreboard team forbids it, the movingobjectpositionentity field should be set to null as well, resulting in a loop break a bit lower. Without, it just keeps looping, cancelling the ProjectileCollideEvent in the first check itself, new loop, ...\r\n\r\nIf this won't work without rebuilding (tho re-patching with this doesnt seem to break the classes other patches): at least you know where to fix it, yay! Just close this one and do it yourself pliz k thanks bye",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix server crash with piercing shots through vanished players (#2390)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b079d9087c4d6d3770c2",
    "number": 2388,
    "body": "Reimplements 047-Avoid-hopper-searches-if-there-are-no-items.patch which was removed due to the update to 1.14.",
    "head_branch": "hopper-optimization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Reimplement hopper optimization patch (#2388)\n\n\r\n\r\nCo-authored-by: Shane Freeder <theboyetronic@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b07ad9087c4d6d3770c3",
    "number": 2387,
    "body": "Closes #2310 ",
    "head_branch": "enderpearl-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b07bd9087c4d6d3770c4",
    "number": 2385,
    "body": "This prevents item frames from all ticking at the same time, potentially saving the server from a lagspike every 5s (or however long the item-frame-ticking-frequency is) and instead spreads this load over many ticks. Each individual item frame still have the same ticking frequency.\r\nCredit to @electronicboy for the idea.\r\nRelated: #2383 ",
    "head_branch": "itemframe-ticking",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Offset Itemframe ticking (#2385)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b07cd9087c4d6d3770c5",
    "number": 2377,
    "body": "Using zstd-jni: https://github.com/luben/zstd-jni\r\nThere's a new option in PaperConfig for this which defaults to false.\r\nSince the patch hooks Mojang's versioning system for new compression methods, it\r\nshould be internally consistent, easily-updatable, and reversible with a force-upgrade.\r\n\r\nThis will likely conflict with plugins and programs expecting region files to be compressed using the current standard.",
    "head_branch": "feature/zstd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b07dd9087c4d6d3770c6",
    "number": 2376,
    "body": "Using lz4-java: https://github.com/lz4/lz4-java\r\nThere's a new option in PaperConfig for this which defaults to false.\r\nSince the patch hooks Mojang's versioning system for new compression methods, it\r\nshould be internally consistent, easily-updatable, and reversible with a force-upgrade.\r\n\r\nThis will likely conflict with plugins and programs expecting region files to be compressed using the current standard.",
    "head_branch": "feature/lz4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b07ed9087c4d6d3770c7",
    "number": 2373,
    "body": "i have adventure mode and i can destroy painting",
    "head_branch": "ver/1.14",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b07fd9087c4d6d3770c8",
    "number": 2364,
    "body": "We were previously calling what looks like a legacy check for distance\r\naway for the inventory. Unfortunately, with our logic, we called the\r\nopen logic before the active container was set. So the legacy check\r\nwould register 0 viewers and the logic would become bugged.\r\n\r\nNote: Need to confirm that \"checkReachable\" on a player's active container is not shared across a chest.\r\n\r\nFixes #2354 ",
    "head_branch": "fix-chest-openclose",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix chest logic being weird for coordinates that sum to 0 or a… (#2364)\n\nWe were previously calling what looks like a legacy check for distance\r\naway for the inventory. Unfortunately, with our logic, we called the\r\nopen logic before the active container was set. So the legacy check\r\nwould register 0 viewers and the logic would become bugged."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b080d9087c4d6d3770c9",
    "number": 2362,
    "body": "They are MT-Safe already. These changes reduce deadlock chances\r\ngiven these calls are used in Entity#isValid(), and plugins\r\ncheck this in packet handling...",
    "head_branch": "noblock-getchunk-immediately",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Do not schedule to main for getChunkImmediately type calls (#2362)\n\nThey are MT-Safe already. These changes reduce deadlock chances\r\ngiven these calls are used in Entity#isValid(), and plugins\r\ncheck this in packet handling..."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b081d9087c4d6d3770ca",
    "number": 2361,
    "body": "MCUtil#ensureMain will only post to main if the async catcher is enabled.",
    "head_branch": "fix-xray",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Ensure xray does not perform non MT-Safe operations (#2361)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b082d9087c4d6d3770cb",
    "number": 2358,
    "body": "Fixes #2327",
    "head_branch": "firework_crossbow",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Set spawning entity for fireworks spawned by a crossbow (#2358)\n\nFixes #2327"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b083d9087c4d6d3770cc",
    "number": 2357,
    "body": "Should be able to time this now",
    "head_branch": "timing-improvements0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bring task execution into server tick timings (#2357)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b084d9087c4d6d3770cd",
    "number": 2355,
    "body": "Per @electronicboy's suggestion.\r\n\r\nStreams aren't performant with hot code and Mojang uses them quite frequently. It was suggested to try to revert stream calls in VoxelShape back to traditional for loops and Lists. Doing so seems to have increased the speed of Entity.move() from 13-22% on some cursory testing:\r\n\r\nWith 1.13.2 latest Paper (about 200.8ms per call when sampling)\r\n![image](https://user-images.githubusercontent.com/399721/61652326-45982880-ac7d-11e9-883c-eb545a9a7f1d.png)\r\n\r\n\r\n\r\nWith this patch (about 175.1ms per call when sampling)\r\n![image](https://user-images.githubusercontent.com/399721/61652312-40d37480-ac7d-11e9-94bb-a06e334e9134.png)\r\n\r\n\r\nThe testing scenario for these profilings were just a simply small pen of about 195 or so Pigs:\r\n![image](https://user-images.githubusercontent.com/399721/61652331-492baf80-ac7d-11e9-9707-9ef335097ba4.png)\r\n",
    "head_branch": "nostreams",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b086d9087c4d6d3770ce",
    "number": 2353,
    "body": "With 1.14.4, the client will now re-set its velocity if a block break\r\nwas cancelled. This change will now lie to the client, then re-send\r\nblock updates to revert to previous behaviour.\r\n\r\nCurrently this needs further testing & perhaps a config to disable this.\r\n\r\n",
    "head_branch": "avoid-new-blockbreak-logic",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b087d9087c4d6d3770cf",
    "number": 2342,
    "body": "Vanilla's sleep behaviour was to use LockSupport#parkNanos, however\r\nthey never backed off and entered a full park, so the scheduler\r\ncould potentially keep the server thread running when we really\r\ndid not want that.\r\n\r\nWe also introduce a method to wait for a completable future, which\r\nis common when waiting for sync loads to complete.\r\n\r\nThis is specifically aiming to resolve https://github.com/PaperMC/Paper/issues/2336 and https://bugs.mojang.com/browse/MC-149018.\r\n\r\n",
    "head_branch": "fix-idle-usage",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b088d9087c4d6d3770d0",
    "number": 2333,
    "body": "",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update to 1.14.4 (#2333)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b089d9087c4d6d3770d1",
    "number": 2332,
    "body": "This fixes the rare case where we could return that a chunk is not generated (when it actually is):\r\n - The chunk was freshly generated\r\n - The chunk was pending unload (a short timeframe given the chunk system)",
    "head_branch": "fix-loadchunk-round-three",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Peek the unload queue for chunk generation checks (#2332)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b08ad9087c4d6d3770d2",
    "number": 2325,
    "body": "Also print an exception if we fail to load data off disk",
    "head_branch": "write-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b08bd9087c4d6d3770d3",
    "number": 2324,
    "body": "I was looking the the `git format-patch` man page a while ago and thought these extra command line parameters might help to reduce the ugly random diff when regenerating patches.\r\n\r\nSee commit description for details.\r\nRegenerated patches with these changes: https://github.com/Minecrell/Paper/commit/410eaf85a776aaf3476aff12725897fab7ea768e\r\n\r\nEventually, some parts of [`cleanupPatches`](https://github.com/PaperMC/Paper/blob/58bc259a18b6f8f4fa0e30f6aa62db22bf0db2f8/scripts/rebuildPatches.sh#L15-L32) could be removed after this change.",
    "head_branch": "format-patch-clean",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Speed up rebuilding patches and reduce diff"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b08cd9087c4d6d3770d4",
    "number": 2319,
    "body": "This commit adds the necessary logic so Paper can communicate with [paperd](https://github.com/PaperMC/paperd).\r\n\r\n[paperd's 1.0.0 release](https://github.com/PaperMC/paperd/tree/1.0.0) marks the first release and compatible version with this PR.\r\n\r\n[Documentation on usage can be found here.](https://github.com/PaperMC/paperd/blob/master/usage.md)\r\n\r\n[Documentation on the internals of the communication system can be found here.](https://github.com/PaperMC/paperd/blob/master/protocol.md)\r\n\r\n---\r\n### Build Changes\r\n\r\n[This change also requires updates to `paperclip-maven-plugin` which were done here.](https://github.com/PaperMC/PaperclipMavenPlugin/commit/2c36e4b16c6ab074a103c4d708aaa15791ae1bb2)\r\n\r\n[And the change to Paperclip to incorporate that Maven plugin update is here.](https://github.com/PaperMC/Paperclip/commit/707e3703cda460b069eaf04bd0294da7904890c2)\r\n\r\nBoth `paperclip-maven-plugin` and Paperclip itself were moved to the `io.papermc` package as well as a normal `SNAPSHOT` version bump.\r\n\r\n---\r\n\r\n### Necessary steps before merging:\r\n - [x] Implement a protocol versioning system\r\n - [x] Implement base command set\r\n   - [x] Start\r\n   - [x] Stop\r\n   - [x] Restart\r\n   - [x] Status\r\n   - [x] Send Command\r\n   - [x] Timings\r\n   - [x] Console\r\n - [x] Command option features (PaperMC/paperd#1 & PaperMC/paperd#2)\r\n - [ ] Third party testing -- _in progress_",
    "head_branch": "feature/daemon",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b08dd9087c4d6d3770d5",
    "number": 2318,
    "body": "On my issue #2270 I investigated ways to generate worlds faster, this takes up a significant amount of time and brings the time taken to generating a skyblock-like world from 16ms to 8ms on my machine.\r\n\r\nI looked into all the methods called in the code I moved and I don't believe any of the methods have side effects, so this is a simple optimization in the case of using custom generators.",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Do less work if we have a custom Bukkit generator (#2318)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b08ed9087c4d6d3770d6",
    "number": 2317,
    "body": "On my issue #2270 I investigated ways to generate worlds faster, this takes up a significant amount of time and brings the time taken to generating a skyblock-like world from 16ms to 8ms on my machine.\r\n\r\nI looked into all the methods called in the code I moved and I don't believe any of the methods have side effects, so this is a simple optimization in the case of using custom generators.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b08fd9087c4d6d3770d7",
    "number": 2309,
    "body": "The javadoc for `PlayerInteractAtEntityEvent` is not very clear on the difference between the superclass `PlayerInteractEntityEvent` and itself. As it turns out, Armor Stands can only be interacted _at_ and not interacted _with_, and as such this class is fired and its parent is not.\r\n\r\nWe discussed in paper-dev a possible alternative that the event manager could check if the class to be fired has a valid fireable superclass, but this would break old plugins.\r\n\r\nThis PR simply adds some information to the javadoc for the _at_ interaction event to specifically call out the requirement to use this event over the parent for Armor Stands.",
    "head_branch": "amend/playerinteractatentityevent-javadoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Amend PlayerInteractAtEntityEvent javadoc for ArmorStands (#2309)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b090d9087c4d6d3770d8",
    "number": 2308,
    "body": "This patch re-adds async chunk API and IO/Loading\r\n\r\n**(For people watching this is **not** the async chunk patch you've been waiting for, that will be later)**\r\nThe primary issue will be chunk generation - I have not touched this system and as such it is not prioritized. This will come in a later patch when I've taken the proper time to fully understand how Mojang's chunk generation system works.\r\n\r\nI have performed internal testing to show that these changes work really well if you pre-generate your world (match or exceed 1.13).\r\n\r\nBefore merge:\r\n- [x] Delete the async api placeholder patch\r\n\r\nTODO list:\r\n\r\n- [x] Ready for review\r\n- [x] Review & Test\r\n~~Wait on https://github.com/PaperMC/Paper/pull/2376 to move compression/decompression to the loader threads?~~\r\n- [x] Wait on https://github.com/PaperMC/Paper/pull/2332\r\n- [x] Add detailed notes to patch header\r\n- [x] Wait on https://github.com/PaperMC/Paper/pull/2297 \r\n- [x] ~~Wait on Billy's changes~~\r\n- [x] Config\r\n- [x] Anti-Xray async load?\r\n- [x] Get https://github.com/PaperMC/Paper/pull/2296 merged and resolve the chunk status cache thread-safety issues\r\n\r\n\r\nSo after a bunch of internal testing I think it's time to start officially testing this out.\r\n\r\nYour configuration settings for async chunks will carry over except generation stuff - we don't have control of that currently. However mojang's generation system is async currently, however it lacks prioritization. This means this will work best with a pre-generated world.\r\n\r\nPlease report any issues with async chunks on this PR, the jar is below.\r\nPlease remember to backup regularly, especially before using this.\r\n\r\nCurrently this jar is based off paper build 172\r\n\r\nhttps://cdn.discordapp.com/attachments/602031644919988236/612350235594981411/paperclip.jar\r\nSHA1: b022e316542efad4771aef5d2b71e0bb579a51d1\r\n",
    "head_branch": "async-chunk-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Async chunk api/io/loading (#2308)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b091d9087c4d6d3770d9",
    "number": 2302,
    "body": "This is Yet Another Attempt at \"Threading Minecraft\". The intent here is only to try to separate Worlds in to their own ticking threads as this has far fewer problems to try to handle. \r\n\r\nThis is also a learning experience on working with Paper and as such, and and all advice/feedback/criticism is openly welcomed, encouraged, and appreciated. ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b092d9087c4d6d3770da",
    "number": 2299,
    "body": "Fixes #1734. Fixes #1690 (?)\r\n\r\nThere were a few larger changes (new JLine/JNA version, changes in implementation of colors in TCA), so I am looking for some testing before I release the new version of TCA. @zachbr asked for a new release in https://github.com/Minecrell/TerminalConsoleAppender/issues/7, so maybe you'd like to help with testing on Paper. :)\r\n\r\nIt looks fine to me in IDE+Terminal on Arch GNU/Linux, but I cannot test on macOS or Windows at the moment.",
    "head_branch": "tca-1.2.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update TerminalConsoleAppender + JLine, use Jansi instead of JNA (#2299)\n\nRemove dependency on JNA since it is no longer needed."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b093d9087c4d6d3770db",
    "number": 2297,
    "body": "This prevents us from hitting chunk loads for chunks at or less-than\r\nticket level 33 (yes getChunkIfLoaded will actually perform a chunk\r\nload in that case).",
    "head_branch": "getifloadedimmediately",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use getChunkIfLoadedImmediately in places (#2297)\n\n* Use getChunkIfLoadedImmediately in places\r\n\r\nThis prevents us from hitting chunk loads for chunks at or less-than\r\nticket level 33 (yes getChunkIfLoaded will actually perform a chunk\r\nload in that case).\r\n\r\n* Resolve issue #2301\r\n\r\n* Also target World#getChunkIfLoaded"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b094d9087c4d6d3770dc",
    "number": 2296,
    "body": "I was not correctly checking if the status was even cached.",
    "head_branch": "fix-loadchunk-again",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b095d9087c4d6d3770dd",
    "number": 2295,
    "body": "We were not correctly updating neighbour loaded when we unloaded chunks\r\nsince we were not actually retrieving neighbour chunks when unloading.\r\n\r\nThanks to @aikar to pointing this out here:\r\nhttps://github.com/PaperMC/Paper/issues/1806#issuecomment-505573519",
    "head_branch": "fix-incorrect-getchunk",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix error in patch 'Optimize getChunkIfLoaded type calls' (#2295)\n\nWe were not correctly updating neighbour loaded when we unloaded chunks\r\nsince we were not actually retrieving neighbour chunks when unloading.\r\n\r\nThanks to Aikar to pointing this out here:\r\nhttps://github.com/PaperMC/Paper/pulls#issuecomment-505573519"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b097d9087c4d6d3770de",
    "number": 2294,
    "body": "Port of https://github.com/PaperMC/Paper/pull/2212 for 1.14",
    "head_branch": "regionfile-reliability-changes1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Only write to cached header in RegionFile if write potentially succeeds (#2294)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b098d9087c4d6d3770df",
    "number": 2293,
    "body": "",
    "head_branch": "fix-entitycountgraph-timings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix entity count in timings graph (#2293)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b099d9087c4d6d3770e0",
    "number": 2292,
    "body": "Error on player.getViewDistance()\r\n\r\n`org.apache.commons.lang.NotImplementedException: Per-Player View Distance APIs need further understanding to properly implement\r\n        at org.bukkit.craftbukkit.v1_14_R1.entity.CraftPlayer.getViewDistance(CraftPlayer.java:1989) ~[patched_1.14.3.jar:git-Paper-124]\r\n        at fr.zencraft.zencore.listeners.AsyncChat.onchat(AsyncChat.java:39) ~[?:?]\r\n        at com.destroystokyo.paper.event.executor.asm.generated.GeneratedEventExecutor509.execute(Unknown Source) ~[?:?]\r\n        at org.bukkit.plugin.EventExecutor.lambda$create$1(EventExecutor.java:69) ~[patched_1.14.3.jar:git-Paper-124]\r\n        at co.aikar.timings.TimedEventExecutor.execute(TimedEventExecutor.java:76) ~[patched_1.14.3.jar:git-Paper-124]\r\n        at org.bukkit.plugin.RegisteredListener.callEvent(RegisteredListener.java:70) ~[patched_1.14.3.jar:git-Paper-124]\r\n        at org.bukkit.plugin.SimplePluginManager.callEvent(SimplePluginManager.java:536) ~[patched_1.14.3.jar:git-Paper-124]\r\n        at net.minecraft.server.v1_14_R1.PlayerConnection.chat(PlayerConnection.java:1744) ~[patched_1.14.3.jar:git-Paper-124]\r\n        at net.minecraft.server.v1_14_R1.PlayerConnection.a(PlayerConnection.java:1659) ~[patched_1.14.3.jar:git-Paper-124]\r\n        at net.minecraft.server.v1_14_R1.PacketPlayInChat$1.run(PacketPlayInChat.java:41) ~[patched_1.14.3.jar:git-Paper-124]\r\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]\r\n        at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_181]\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_181]\r\n        at java.lang.Thread.run(Thread.java:748) [?:1.8.0_181]`",
    "head_branch": "ver/1.14",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b09ad9087c4d6d3770e1",
    "number": 2277,
    "body": "`fire-physics-event-for-redstone` doesn't seem to do anything in the configuration, so this PR removes it. I think this was left over from https://github.com/PaperMC/Paper/commit/0a76e7d1aabc4d531e85251c6f6fca75524ca7d1",
    "head_branch": "doublej472/remove-redstone-fire",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove unused fire-physics-event-for-redstone config option (#2277)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b09bd9087c4d6d3770e2",
    "number": 2264,
    "body": "This should resolve out of order logs when the buffer is full\r\n\r\nhttps://github.com/PaperMC/Paper/pull/2258 for 1.12.2",
    "head_branch": "fix-logging2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2264 from Spottedleaf/fix-logging2\n\nQueue log events when log buffer is full"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b09cd9087c4d6d3770e3",
    "number": 2263,
    "body": "This should resolve out of order logs when the buffer is full\r\n\r\nhttps://github.com/PaperMC/Paper/pull/2258 for 1.13",
    "head_branch": "fix-logging1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2263 from Spottedleaf/fix-logging1\n\nQueue log events when log buffer is full"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b09dd9087c4d6d3770e4",
    "number": 2262,
    "body": "This fixes the issue where #2258 didn't actually do anything.",
    "head_branch": "fix-logging0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2262 from Spottedleaf/fix-logging0\n\nActually use our log full policy"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b09ed9087c4d6d3770e5",
    "number": 2260,
    "body": "see #2145 ",
    "head_branch": "master-bed-rework",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update 0280-Configurable-Bed-Search-Radius.patch (#2260)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b09fd9087c4d6d3770e6",
    "number": 2258,
    "body": "This should resolve out of order logs when the buffer is full",
    "head_branch": "fix-logging0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2258 from Spottedleaf/fix-logging0\n\nQueue log events when log buffer is full"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0a0d9087c4d6d3770e7",
    "number": 2253,
    "body": "",
    "head_branch": "GH2232",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #2232 - Passive mobs don't move (#2253)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0a1d9087c4d6d3770e8",
    "number": 2240,
    "body": "![2019-06-23_07 11 16](https://user-images.githubusercontent.com/6100722/60152344-f4d40380-9794-11e9-9a34-456840e3e916.png)\r\n![2019-06-23_07 11 20](https://user-images.githubusercontent.com/6100722/60152345-f4d40380-9794-11e9-8faa-125df11fe5f2.png)\r\nmode 2 as an example",
    "head_branch": "anti-xray",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2240 from Spottedleaf/anti-xray\n\nRe-Add Anti-Xray"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0a2d9087c4d6d3770e9",
    "number": 2230,
    "body": "Add a new event, BellRingEvent, to trigger whenever a player rings a village bell. Passes along the bell block and the player who rang it.\r\n\r\nFirst PR, just trying to get my feet wet and familiar with the Paper codebase. Any feedback is appreciated!",
    "head_branch": "patch/bell-ring-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add BellRingEvent for village bells (#2230)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b0a3d9087c4d6d3770ea",
    "number": 2227,
    "body": "",
    "head_branch": "anti-xray-improvement1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Anti-Xray improvements (#2227)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0a4d9087c4d6d3770eb",
    "number": 2226,
    "body": "",
    "head_branch": "anti-xray-improvement0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Anti-Xray improvements (#2226)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0a5d9087c4d6d3770ec",
    "number": 2225,
    "body": "This API was broken when paper updated to 1.14 and was replaced with a stub. This PR removes the stub API and reimplements the original patch. The patch is largely unchanged outside of the PlayerChunkMap class and PlayerList class. \r\n\r\nAll instances of the viewDistance field from PlayerChunkMap and viewDistance field from SpigotWorldConfig, were changed to use a player's view distance wherever applicable.\r\n\r\nBest View Distance view distance was used to test the API and it seems to work as expected.\r\n<img width=\"966\" alt=\"image\" src=\"https://user-images.githubusercontent.com/8919730/59990579-a8ac8600-9611-11e9-8a80-10565bc4d7d2.png\">\r\n\r\nI believe further testing is required.",
    "head_branch": "view-distance",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0a6d9087c4d6d3770ed",
    "number": 2224,
    "body": "",
    "head_branch": "fix-desync-issue",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix tracker desync issue (#2224)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0a7d9087c4d6d3770ee",
    "number": 2223,
    "body": "This puts the original check back into place, and adds a new check for negative radius. This will leave map maker's the ability to use 0.0 sized clouds intact.",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2223 from BillyGalbreath/ver/1.14\n\nRework fix for MC-114618 so not break map maker's workflow. Fixes #2221"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0a8d9087c4d6d3770ef",
    "number": 2219,
    "body": "We need to bypass ticket checks when counting.\r\n\r\nForgot to do this after spigot added that change",
    "head_branch": "fix-verified-loaded-chunkcount",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix verified-loaded-count being off for chunk debug command (#2219)\n\nWe need to bypass ticket checks when counting"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0a9d9087c4d6d3770f0",
    "number": 2218,
    "body": "Use a chunk status cache to check if we could potentially overwrite\r\na levelchunk.\r\nThe check could be entirely elided at the risk of overwriting chunk data,\r\nhowever most protochunks should have their corresponding regionfile loaded\r\nwith their chunk status.",
    "head_branch": "optimize-protochunk-save",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimize protochunk saving (#2218)\n\nUse a chunk status cache to check if we could potentially overwrite\r\na levelchunk.\r\nThe check could be entirely elided at the risk of overwriting chunk data,\r\nhowever most protochunks should have their corresponding regionfile loaded\r\nwith their chunk status."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0aad9087c4d6d3770f1",
    "number": 2216,
    "body": "",
    "head_branch": "better-datapalette-lock-fail",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2216 from Spottedleaf/better-datapalette-lock-fail\n\nLog other thread in DataPaletteBlock lock failure"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0abd9087c4d6d3770f2",
    "number": 2212,
    "body": "",
    "head_branch": "regionfile-reliability-changes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Only write to cached header in RegionFile if write potentially succeeds (#2212)\n\n* Only write to cached header in RegionFile if write potentially succeeds\r\n\r\n* Fail write if timestamp update fails\r\n\r\nThis way timestamps should be consistent with their actual last write.\r\n\r\n* Simply order the time write before the chunk write\r\n\r\notherwise we end up with an invalid offset on disk, it's better\r\nto have an invalid timestamp"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0acd9087c4d6d3770f3",
    "number": 2211,
    "body": "Resolve a regression where calling loadChunk(x, z, false) would\r\npotentially double-load chunk data (if the chunk status was not cached)",
    "head_branch": "loadchunk-changes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix performance regression in loadChunk(x, z, false) (#2211)\n\nResolve a regression where calling loadChunk(x, z, false) would\r\npotentially double-load chunk data"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0add9087c4d6d3770f4",
    "number": 2200,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2200 from Spottedleaf/patch-1\n\nAdd world name to blockstate location if we fail to read it"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0aed9087c4d6d3770f5",
    "number": 2199,
    "body": "Found this while browsing through the source code. Should be a rather trivial optimization/change.",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0afd9087c4d6d3770f6",
    "number": 2196,
    "body": "We should only set hasBeenLoaded to false potentially after saving a chunk\r\notherwise we will not save it later. The method to do this is\r\nPlayerChunk#l(), which we were potentially calling for chunks we were not saving.\r\n\r\nResolves #2194 ",
    "head_branch": "fix-save-issue",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix chunks refusing to save (#2196)\n\nWe should only set hasBeenLoaded to false potentially after saving a chunk\r\nother wise we will not save it. The method to do this is\r\nPlayerChunk#l(), which we were potentially calling for chunks we were not saving."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0b0d9087c4d6d3770f7",
    "number": 2195,
    "body": "This should resolve unloading issues.\r\n\r\nAlso rebuild patches",
    "head_branch": "fix-unload-issue",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix MC-154214 (#2195)\n\nThis should resolve unloading issues."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0b1d9087c4d6d3770f8",
    "number": 2192,
    "body": "OpenJ9 heap dumps are currently unsupported in Paper's heap dump command. This change adds support for calling into OpenJ9's diagnostic MXBean to basically do the same thing Paper already does with HotSpot.\r\n\r\nFor anyone who wants to try this, the heap dump format used by OpenJ9 is called \"Portable Heap Dump\" and you need to use [Eclipse Memory Analyzer](https://www.eclipse.org/mat/downloads.php) with [IBM's DTFJ plugin](https://help.eclipse.org/2018-09/index.jsp?topic=%2Forg.eclipse.mat.ui.help%2Ftasks%2FinstallDTFJ.html) to be able to open these dumps.",
    "head_branch": "openj9-heap",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Rebuild patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0b2d9087c4d6d3770f9",
    "number": 2187,
    "body": "",
    "head_branch": "better-blockstate-failure",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2187 from Spottedleaf/better-blockstate-failure\n\n Show blockstate location if we failed to read it"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0b3d9087c4d6d3770fa",
    "number": 2186,
    "body": "Optimize World#loadChunk() too\r\nThis patch also adds a chunk status cache on region files (note that\r\nits only purpose is to cache the status on DISK)\r\n\r\nNote that I still need to review this with a plugin, however debug reports show the concept works.\r\nThis fixes upstream issue https://hub.spigotmc.org/jira/browse/SPIGOT-4862",
    "head_branch": "fix-is-generated",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix World#isChunkGenerated calls (#2186)\n\n* Fix World#isChunkGenerated calls\r\n\r\nOptimize World#loadChunk() too\r\nThis patch also adds a chunk status cache on region files (note that\r\nits only purpose is to cache the status on DISK)\r\n\r\n* Ensure correct regionfile usage\r\n\r\nThis also bumps the minimum region file cache to 4 files given\r\nreadChunkData can load potentially 4 files.\r\n\r\n* Fix closed check\r\n\r\n* Better checks for invalid regionfile usage"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0b4d9087c4d6d3770fb",
    "number": 2184,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2184 from darbyjack/master\n\nFixed 1.13 not properly firing the PreCreatureSpawnEvent (credit to Wiz)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0b5d9087c4d6d3770fc",
    "number": 2183,
    "body": "",
    "head_branch": "WizFix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2183 from BillyGalbreath/WizFix\n\nFix Pre SpawnEvents not firing (by wizjany)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0b7d9087c4d6d3770fd",
    "number": 2181,
    "body": "Used so that server owners can tell what types of chunks are loaded\r\nwithout requiring to use a tool to analyse a debug report\r\n\r\n(Note this will not show protochunks)",
    "head_branch": "more-chunk-info",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2181 from Spottedleaf/more-chunk-info\n\nAdd chunkinfo command"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0b8d9087c4d6d3770fe",
    "number": 2178,
    "body": "Currently using ./paper clean deletes the entire work folder, however the repo expects the folder to exist with certain files and directories, making it more annoying to commit changes. This PR should make it more convenient to use the clean command.\r\n\r\nIf any new files are added to the work directory in the repo, they should also be added to the scripts/work-clean directory.",
    "head_branch": "fix-clean",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0b9d9087c4d6d3770ff",
    "number": 2177,
    "body": "Fix spawn chunks not being entity tick chunks\r\n\r\nMake all isLoaded checks consistent\r\n\r\nLoaded chunks must also now be at least border chunks, which is vanilla/spigot behavior.",
    "head_branch": "upstream-merge2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update upstream & fix some chunk related issues (#2177)\n\n* Updated Upstream (Bukkit/CraftBukkit)\r\n\r\nUpstream has released updates that appears to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\n45690fe9 SPIGOT-5047: Correct slot types for 1.14 inventories\r\n\r\nCraftBukkit Changes:\r\n4090d01f SPIGOT-5047: Correct slot types for 1.14 inventories\r\ne8c08362 SPIGOT-5046: World#getLoadedChunks returning inaccessible cached chunks.\r\nd445af3b SPIGOT-5067: Add item meta for 1.14 spawn eggs\r\n\r\n* Bring Chunk load checks in-line with spigot\r\n\r\nAs of the last upstream merge spigot now checks ticket level status\r\nwhen returning loaded chunks for a world from api. Now our checks\r\nwill respect that decision.\r\n\r\n* Fix spawn ticket levels\r\n\r\nVanilla would keep the inner chunks of spawn available for ticking,\r\nhowever my changes made all chunks non-ticking. Resolve by changing\r\nticket levels for spawn chunks inside the border to respect this\r\nbehavior.\r\n\r\n\r\n* Make World#getChunkIfLoadedImmediately return only entity ticking chunks\r\n\r\nMojang appears to be using chunks with level > 33 (non-ticking chunks)\r\nas cached chunks and not actually loaded chunks.\r\n\r\n* Bring all loaded checks in line with spigot\r\n\r\nLoaded chunks must be at least border  chunks, or level <= 33"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b0bad9087c4d6d377100",
    "number": 2174,
    "body": "This patch was removed due to changes in 1.14 MC, I have reimplemented it so it works in 1.14 MC.",
    "head_branch": "Only-count-Natural-Spawned-mobs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0bbd9087c4d6d377101",
    "number": 2171,
    "body": "Note this Patch essentially reimplements #2127 if disabled.\r\nImplements requests from #245 and #1653.\r\n\r\nIf enabled, the chunks(with range taken from spigot.yml's mob-spawn-range) around players who have the sufficient amount of mobs of a type (limit taken from bukkit.yml's mob limits), will not have chunks around them eligible to spawn mobs of the same type. Additionally the global limit is ignored (although in most circumstances the number of mobs will be the same if mob-spawn-range is 8).\r\n\r\nBenefits include more balanced/fair mob spawning, a player on the other side of the world will not be able to affect mob spawning to other players, etc. Essentially makes mob spawning behave as each player was in single player and so it includes all the additional benefits that come with that.\r\n\r\n~~It works by creating a map of player, entity type to counts which is recreated every tick and updated as mobs are spawned. For each potential chunk available for spawning, the map is queried with all the players in range to determine how many mobs should be spawned in the chunk.~~ See below.\r\n\r\n",
    "head_branch": "mob-spawning-rework",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement optional per player mobspawning (#2171)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b0bcd9087c4d6d377102",
    "number": 2164,
    "body": "Event was never called.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0bdd9087c4d6d377103",
    "number": 2163,
    "body": "",
    "head_branch": "fix-load-checks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve chunk loaded checks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0bed9087c4d6d377104",
    "number": 2156,
    "body": "The PR fixes #1927 by streamlining the `tick` method in the armorstand entity class to only 1 if statement. The dirty tick concept has been removed and instead the methods which were setting the dirty bits now directly call their respective methods to update the entity instead of waiting for the next tick.\r\n\r\nI have tested this with 1000 armor stands in the same place and it has yielded an almost 20x improvement, bringing TPS from 8-12 to a stable 20. \r\nFor reference I am running on a 2nd gen Intel Core i5 (I suspect this optimization is heavily affected by a CPU architecture's branch prediction).",
    "head_branch": "armorstand-ticks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0bfd9087c4d6d377105",
    "number": 2155,
    "body": "https://hub.spigotmc.org/jira/browse/SPIGOT-5054\r\nhttps://bugs.mojang.com/browse/MC-154239\r\n\r\n(both issues are private as this is a crash exploit)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0c0d9087c4d6d377106",
    "number": 2153,
    "body": "Continuation of #1834\r\n(Unfortunately had to create a new PR because couldn't reopen the original PR)",
    "head_branch": "damaged-item-slot",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0c1d9087c4d6d377107",
    "number": 2149,
    "body": "This PR implements #1992. It introduces the performUpgrade, which behaves similar to the forceUpgrade flag but only runs the world upgrade if the world was not upgraded in the current MC version. The information is stored inside papermeta.yml file inside each world's folder.",
    "head_branch": "performUpgrade",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0c2d9087c4d6d377108",
    "number": 2145,
    "body": "This patch update completely reworks how the valid position  is chosen (but not how determining if a position is valid). Now the closest position to the bed will be chosen (ties broken randomly). Positions on the same level of the bed will be considered closer than positions under the bed likewise these positions will be considered closer over positions above the bed. This update retains the original purpose of the patch and supports any bed spawn distance.\r\n\r\nFixes #1726",
    "head_branch": "fix-dismount-mechanics",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Rework bed dismount mechanics (#2145)\n\nFixes #1726"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0c3d9087c4d6d377109",
    "number": 2144,
    "body": "Changes the method setTypeAndData in World with an additional parameter boolean doUpdate, so that it only queues block updates if doUpdate is true. In order to not break compatibility a new method overload is added with the old signature that forwards the parameters with doUpdate=true.\r\n\r\nThe Debug Stick uses the new method instead with doUpdate=false. \r\nFixes #2134.",
    "head_branch": "Debug-stick-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0c4d9087c4d6d37710a",
    "number": 2142,
    "body": "Upstream has released updates that appears to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\n17543ecf SPIGOT-5035: Error Using Virtual Merchant GUI\r\n0fc6922b SPIGOT-5028: Villager#setVillagerExperience() doesn't work\r\nbdbdbe44 SPIGOT-5024: Fox error - Unknown target reason\r\n\r\n\r\nFixes #2069 and fixes #2139 ",
    "head_branch": "upstream-merge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (CraftBukkit)\n\nUpstream has released updates that appears to apply and compile correctly.\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\n\nCraftBukkit Changes:\n17543ecf SPIGOT-5035: Error Using Virtual Merchant GUI\n0fc6922b SPIGOT-5028: Villager#setVillagerExperience() doesn't work\nbdbdbe44 SPIGOT-5024: Fox error - Unknown target reason"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b0c5d9087c4d6d37710b",
    "number": 2140,
    "body": "Should fix #2138 ",
    "head_branch": "fix-vanish-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Rebuild patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0c6d9087c4d6d37710c",
    "number": 2136,
    "body": "`PlayerHandshakeEvent` is fired asynchronously in `net.minecraft.server.HandshakeListener` and as a result in a recent patch (#2111) listening to this event causes an IllegalStateException noting that the event may only be triggered synchronously.\r\n\r\n`/127.0.0.1:54963 lost connection: Internal Exception: java.lang.IllegalStateException: PlayerHandshakeEvent may only be triggered synchronously.`\r\n\r\nThe code testing this fails on paper 65:\r\n`@EventHandler public void onHandshakeEvent(PlayerHandshakeEvent event) {}`\r\n\r\nThis patch should restore previous behavior for any users of this event.",
    "head_branch": "fix_playerhandshakeevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make PlayerHandshakeEvent async"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0c7d9087c4d6d37710d",
    "number": 2133,
    "body": "This PR adds an API to open books in `org.bukkit.entity.Player`. The `Player#openBook` method accepts an `org.bukkit.inventory.ItemStack` and is implemented in `org.bukkit.craftbukkit.CraftPlayer#openBook`. The method expects a non-null bukkit `ItemStack` with the material type `Material.WRITTEN_BOOK`.\r\n\r\n`net.minecraft.server.EntityPlayer` was modified to include an OBFHELPER, forwarding the existing method `EntityPlayer#a(ItemStack itemstack, EnumHand enumhand)` to `EntityPlayer#openBook(...)`.\r\n\r\nThe implementation operates on the requirement for the book to be opened to be placed in the player's main hand (off hand ALSO works, but I did not include it in this PR; but can add.) Firstly, the item in the main hand is saved. Then, the requested book is placed into the Player's main hand. Thirdly, `EntityPlayer#openBook` is called with the book converted to an NMS copy. Finally, the player's original main hand is restored.\r\n\r\nAn alternative to passing in an ItemStack: the implementation could be modified to read the player's main hand and have a precondition on the `Material`.\r\n\r\nExample:\r\n```java\r\n@EventHandler\r\npublic void onClick(InventoryClickEvent event) {\r\n  Player player = (Player) event.whoClicked;\r\n  ItemStack book = new ItemStack(Material.WRITTEN_BOOK);\r\n  \r\n  BookMeta meta = (BookMeta) book.getItemMeta();\r\n  meta.spigot().addPage(\r\n    new ComponentBuilder(\"You clicked and opened a book!\")\r\n      .color(ChatColor.RED)\r\n      .bold(true)\r\n      .event(\r\n        ClickEvent.Action.OPEN_URL,\r\n        \"https://google.com\"\r\n      )).create()\r\n  );\r\n\r\n  book.setItemMeta(meta);\r\n  player.openBook(book);\r\n}\r\n```\r\nPreview:\r\nhttps://i.imgur.com/RWI6DSN.gifv",
    "head_branch": "add-more-book-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0c8d9087c4d6d37710e",
    "number": 2128,
    "body": "This implements the feature request of #1710. If enabled, the specified Materials which are dropped as items will despawn at the chose alternate rate. Materials which are not selected will be unaffected regardless.\r\n\r\nSee #1710 for config setup (in paper.yml)",
    "head_branch": "alternative-item-despawn-rate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement alternative item-despawn-rate (#2128)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0cad9087c4d6d37710f",
    "number": 2127,
    "body": "First patch PR for me... so not sure if I did this right.\r\nThis patch changes natural mob spawning so that it only spawns up to the the limit specified per world without any overshooting. This prevents the notorious vanilla bug where in 300+ fish are spawned in an ocean while the limit is supposed to be set to 15.\r\n\r\nIf this patch is accepted, we should look into advising players to increase the watermob limit so they are not surprised by lowered spawn rates.\r\n\r\nIt accomplishes this by tracking the number of mobs spawned by each chunk, and stopping spawns once the world's mob limit is reached (for that type of mob).\r\n\r\nThis is a resubmission of #2119 ",
    "head_branch": "mobspawn-limiting",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Stop natural spawning after limit has been reached (#2127)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0cbd9087c4d6d377110",
    "number": 2124,
    "body": "Also rebuild patches",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix tabcomplete firing off-main\n\nAlso rebuild patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0ccd9087c4d6d377111",
    "number": 2119,
    "body": "First patch PR for me... so not sure if I did this right.\r\nThis patch changes natural mob spawning so that it only spawns up to the the limit specified per world without any overshooting. This prevents the notorious vanilla bug where in 300+ fish are spawned in an ocean while the limit is supposed to be set to 15.\r\n\r\nIf this patch is accepted, we should look into advising players to increase the watermob limit so they are not surprised by lowered spawn rates.\r\n\r\nIt accomplishes this by tracking the number of mobs spawned by each chunk, and stopping spawns once the world's mob limit is reached (for that type of mob).",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0cdd9087c4d6d377112",
    "number": 2118,
    "body": "Prints all chunk information to a text file into the debug\r\nfolder in the root server folder. The format is in JSON, and\r\nthe data format is described in MCUtil#dumpChunks(File)\r\n\r\nThe command will output server version and all online players to the\r\nfile as well. We do not log anything but the location, world and\r\nusername of the player.\r\n\r\nAlso logs the value of these config values (note not all are paper's):\r\n- keep spawn loaded value\r\n- spawn radius\r\n- view distance\r\n\r\nEach chunk has the following logged:\r\n- Coordinate\r\n- Ticket level & its corresponding state\r\n- Whether it is queued for unload\r\n- Chunk status (may be unloaded)\r\n- All tickets on the chunk\r\n\r\nExample log:\r\nhttps://gist.githubusercontent.com/Spottedleaf/0131e7710ffd5d531e5fd246c3367380/raw/169ae1b2e240485f99bc7a6bd8e78d90e3af7397/chunks-2019-06-01_19.57.05.txt\r\n\r\nFor references on certain keywords (ticket, status, etc), please see:\r\n\r\nhttps://bugs.mojang.com/browse/MC-141484?focusedCommentId=528273&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-528273\r\nhttps://bugs.mojang.com/browse/MC-141484?focusedCommentId=528577&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-528577\r\n\r\n",
    "head_branch": "chunk-debug-command",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Chunk debug command (#2118)\n\n* Chunk debug command\r\n\r\nPrints all chunk information to a text file into the debug\r\nfolder in the root server folder.\r\n\r\nWill output server version and all online players to the\r\nfile as well. We do not log anything but the location,\r\nworld and username of the player.\r\n\r\nAlso logs the value of these config values (note not all are paper's):\r\n- keep spawn loaded value\r\n- spawn radius\r\n- view distance\r\n\r\nEach chunk has the following logged:\r\n- Coordinate\r\n- Ticket level & its corresponding state\r\n- Whether it is queued for unload\r\n- Chunk status (may be unloaded)\r\n- All tickets on the chunk\r\n\r\nExample log:\r\nhttps://gist.github.com/Spottedleaf/203bd211020a3a04da0e574fb57dab45\r\n\r\nFor references on certain keywords (ticket, status, etc), please see:\r\n\r\nhttps://bugs.mojang.com/browse/MC-141484?focusedCommentId=528273&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-528273\r\nhttps://bugs.mojang.com/browse/MC-141484?focusedCommentId=528577&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-528577\r\n\r\n* Use JSON for the chunk dump\r\n\r\n* Fix obfhelper naming\r\n\r\n* Fix incorrect JSON spec"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0ced9087c4d6d377113",
    "number": 2111,
    "body": "We need to check if we're attempting to fire a synchronous event off of the main thread.\r\nAlso make the exception message make sense\r\n\r\nServer didn't blow up in testing so it looks like this works",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix missing thread check in SimplePluginManager#callEvent (#2111)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b0cfd9087c4d6d377114",
    "number": 2109,
    "body": "Should really help with the usage of WorldBorder.",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix memory leak if the server is constantly overloaded (#2109)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0d0d9087c4d6d377115",
    "number": 2107,
    "body": "This adds and implements the event discussed in #1783. The event can be cancelled, the requested recipe can be changed, and whether or not the maximum amount of results should be attempted can be also changed.\r\n\r\nI've also created a simple example plugin using the event: https://github.com/LordKorea/test-recipeplugin\r\n\r\nThis is my first PR for Paper, so if you need more info / changes to the patch let me know :)\r\n\r\nCloses #1783",
    "head_branch": "add-playerrecipebookclickevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0d1d9087c4d6d377116",
    "number": 2105,
    "body": "",
    "head_branch": "fix-velocity-connection-throttle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2105 from mikroskeem/fix-velocity-connection-throttle\n\nSet connection thottle to -1 when Velocity IP forwarding is enabled"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0d2d9087c4d6d377117",
    "number": 2100,
    "body": "Version 1.14.X\r\nIf a player is standing still and turning the mouse, only the head and not the body is rotated.\r\n",
    "head_branch": "ver/1.14",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0d3d9087c4d6d377118",
    "number": 2097,
    "body": "This PR aims to close #2045 by creating a new `BlockSoundGroup` interface in `org.bukkit.block` which exposes five methods *getBreakSound*, *getStepSound*, *getPlaceSound*, *getHitSound*, and *getFallSound*.\r\n\r\nThe interface is implemented in `CraftBlockSoundGroup` in `org.bukkit.craftbukkit.block` which accepts the `SoundEffectType` type. The implementation uses `CraftSound#getSoundByEffect` method to retrieve the Bukkit `Sound` object corresponding to each `SoundEffect` denoted by the provided `SoundEffectType`.\r\n\r\nSome paper OBFHELPERs were added to `SoundEffectType` to clarify which methods correspond to which sound effect. Two methods, *getBreakSound* and *getHitSound*, were added, because the fields were private and no getters already existed. My IDE noted that they were unused at the current time.\r\n\r\n`CraftBlock#getBlockSoundGroup` is implemented by creating a new `CraftBlockSoundGroup` and passing the NMS block's blockdata's `SoundEffectType` to the constructor. I believe this is the correct method to call, as `CraftBlock#getStepSound` accepts a blockdata parameter. This should have no effect to API users.\r\n\r\nStill new to PRing, so would appreciate any comments/suggestions/fixups.",
    "head_branch": "add-get-step-sound",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2097 from simpleauthority/add-get-step-sound\n\nAdd BlockSoundGroup to Block & Implement"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b0d4d9087c4d6d377119",
    "number": 2096,
    "body": "Upstream has released updates that appears to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nCraftBukkit Changes:\r\nba575a5a SPIGOT-4992: Various villager issues due to broken mapping\r\n\r\n\r\n\r\nFixes #2093 ",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2096 from Spottedleaf/ver/1.14\n\nUpdated Upstream (CraftBukkit)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0d5d9087c4d6d37711a",
    "number": 2095,
    "body": "These patches add the event `PlayerRaidTriggerEvent` that is fired when a player enters a village with the *Bad Omen* effect.\r\n\r\nWhile initially working on this, I noticed that while I was able to cancel the raid that it the raid continued to attempt to start because of the Player's *Bad Omen* status. I've duplicated the effect removal upwards to the conditional which tests if the event is canceled. In this way, the event is fired once per player who enters a village with the *Bad Omen* effect.\r\n\r\nI'm having second thoughts about removing the effect and whether or not this should be deferred to an implementing plugin.\r\n\r\nSidenote: This is my first PR, so if I did something wrong or you need more information please let me know.\r\n\r\n![Screenshot+2019-05-28+02 53 34](https://user-images.githubusercontent.com/19645494/58469637-c232de80-80f4-11e9-8d3e-51f417bbd634.png)\r\n",
    "head_branch": "add-playerraidtriggerevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0d6d9087c4d6d37711b",
    "number": 2090,
    "body": "",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update to 1.14.2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0d7d9087c4d6d37711c",
    "number": 2089,
    "body": "This is a vanilla bug, https://bugs.mojang.com/browse/MC-114618\r\n\r\nAll cases of the EntityAreaEffectCloud spawning set a radius per tick to a non 0 value (they shrink over time), except for the case when a dragon is in SITTING_FLAMING phase. The EntityAreaEffectCloud itself checks for when the radius gets too small it will despawn itself, but _only_ in if the radius per tick is a non 0 value.\r\n\r\nThis change moves the radius size check outside the radius per tick check and to the top of the tick so it is despawned when it gets too small regardless of the radius per tick value.\r\n\r\n_This can be backported to 1.13, 1.12, and 1.11_\r\n\r\nFixes #2088 ",
    "head_branch": "GH2088",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2089 from BillyGalbreath/GH2088\n\nMC-114618 - Fix EntityAreaEffectCloud from going negative size"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0d8d9087c4d6d37711d",
    "number": 2086,
    "body": "Upstream has released updates that appears to apply and compile correctly.\r\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\r\n\r\nBukkit Changes:\r\ne041de28 SPIGOT-4946: Add VillagerCareerChangeEvent\r\n\r\nCraftBukkit Changes:\r\nfcb9f90b SPIGOT-4946: Add VillagerCareerChangeEvent\r\na4a2f679 SPIGOT-4987: Shulkerbox does not save empty slots",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Upstream (Bukkit/CraftBukkit)\n\nUpstream has released updates that appears to apply and compile correctly.\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\n\nBukkit Changes:\ne041de28 SPIGOT-4946: Add VillagerCareerChangeEvent\n\nCraftBukkit Changes:\nfcb9f90b SPIGOT-4946: Add VillagerCareerChangeEvent\na4a2f679 SPIGOT-4987: Shulkerbox does not save empty slots"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b0d9d9087c4d6d37711e",
    "number": 2083,
    "body": "",
    "head_branch": "fix-issue0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Revert Don-t-recheck-type-after-setting-a-block.patch"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0dad9087c4d6d37711f",
    "number": 2081,
    "body": "This patch adds an option \"disable relative projectile velocity\", which, when enabled, will cause projectiles to ignore the shooter's current velocity, like they did in Minecraft 1.8 and prior. If a player is falling, for example, their shooting range will be drastically reduced, as a downwards velocity is applied to the projectile. This prevents players from saving themselves from falling off floating islands, for example, as a thrown ender pearl will not make it back to the island, while it would have in 1.8.\r\n\r\nWhile this could easily be done with plugins, too, there are multiple problems:\r\n\r\n1. If multiple plugins cancel the velocity by subtracting the shooter's velocity from the projectile's velocity, the projectile's velocity would be different. As there's no way to detect whether the projectile's velocity has already been adjusted to ignore the player's velocity, plugins can't not do it if it's not necessary.\r\n\r\n2. I've noticed some inconsistencies, e.g. weird velocity when shooting while using an elytra. Checking for those inconsistencies is possible, but not as efficient as just not applying the velocity in the first place.\r\n\r\n3. Solutions for 1) and especially 2) might not be future-proof, while this server-internal fix makes this change future-proof.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0dbd9087c4d6d377120",
    "number": 2080,
    "body": "We were missing a synchronize on a get if cached method, however\r\nit appears that using a ConcurrentHashMap is a better solution\r\nso readers can avoid locking if they just want a cached value.\r\n\r\nExisting synchronization for writers remains untouched, the\r\nConcurrentHashMap is just so readers can safely read without\r\nsynchronization",
    "head_branch": "improve-usercache-safety",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve MT-Safety of UserCache (#2080)\n\nWe were missing a synchronize on a get if cached method, however\r\nit appears that using a ConcurrentHashMap is a better solution\r\nso readers can avoid locking if they just want a cached value.\r\n\r\nExisting synchronization for writers remains untouched, the\r\nConcurrentHashMap is just so readers can safely read without\r\nsynchronization"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0dcd9087c4d6d377121",
    "number": 2079,
    "body": "The loadChunk call was in heightmap api",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Handle gen flag for placeholder getChunkAtAsync (#2079)\n\nAlso fix a loadChunk call in heightmap api"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0ddd9087c4d6d377122",
    "number": 2077,
    "body": "Remove the world access on `Do not load chunks for pathfinding`\r\ntoo, even though it appears we could have just cast the\r\nIBlockAccess to world",
    "head_branch": "iblockaccess-ifloaded",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move getTypeIfLoaded and friends to IBlockAccess (#2077)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b0ded9087c4d6d377123",
    "number": 2072,
    "body": "The current system checks every block on `x`, `y`, `z` coords when finding a portal. But as we know (or assume) that the minimum size of portal (2x3), it's not necessary to iterate each block, but instead we can skip 1 block each time on `x` and `z` coord (checkers style) and 2 blocks each time on `y`. We'll still able to find a portal with 100% chance, but 6x times faster than usual.\r\n\r\nHow this look like (black are checked blocks):\r\n\r\nXZ:\r\n■▢■▢\r\n▢■▢■\r\n■▢■▢\r\n\r\nYZ or YX:\r\n■▢■▢\r\n▢▢▢▢\r\n▢▢▢▢\r\n■▢■▢",
    "head_branch": "fast-portal-search",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0dfd9087c4d6d377124",
    "number": 2066,
    "body": "",
    "head_branch": "fix-tps-counter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix /tps (#2066)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0e0d9087c4d6d377125",
    "number": 2062,
    "body": "also remove the pointless synchronization on\r\nRegionFileCache#getRegionFileName",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix RegionFileCache#hasRegionFile (#2062)\n\nalso remove the pointless synchronization on\r\nRegionFileCache#getRegionFileName"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0e1d9087c4d6d377126",
    "number": 2051,
    "body": "it looks to me like our changes resolve the concern on line 173 on this patch\r\n\r\nthis patch also adds proper functionality to the keep-spawn-loaded toggle patch",
    "head_branch": "add-spawn-loadchunk-config",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add configurable spawn loaded range back (#2051)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0e2d9087c4d6d377127",
    "number": 2046,
    "body": "Copied from patch notes:\r\nmd_5 also placed code in PlayerConnectionUtils that would have\r\nsolved https://bugs.mojang.com/browse/MC-142590, making the change\r\nto MinecraftServer#isMainThread irrelevant.\r\nBy reverting his change to MinecraftServer#isMainThread packet \r\nhandling that should have been handled synchronously will be handled \r\nsynchronously when the server gets shut down.",
    "head_branch": "fix-ismainthread",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      " Fix MinecraftServer#isMainThread  (#2046)\n\nSee patch notes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0e3d9087c4d6d377128",
    "number": 2044,
    "body": "",
    "head_branch": "implement-getchunk-async",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0e4d9087c4d6d377129",
    "number": 2038,
    "body": "Yes, it's yet another brain-damaged plugin preventing us from optimizing this further. The (dis)honor of the brain-damaged plugin goes to [TAB](https://www.spigotmc.org/resources/tab-1-8-x-1-14-1-reborn.57806/), which think it's a swell idea to just replace the internal DataWatcher map with whatever it wants.\r\n\r\nThis reverts a small portion of #2029, keeping the lock elision intact.\r\n\r\n[Relevant console log](https://pastebin.com/cHq65nTr)",
    "head_branch": "use-boxed-primitive-map",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0e6d9087c4d6d37712a",
    "number": 2034,
    "body": "Their chunk is set to null before removal, so we kept them around.",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Resolve memory leak involving TileEntities\n\nTheir chunk is set to null before removal, so we kept them around."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0e7d9087c4d6d37712b",
    "number": 2030,
    "body": "md_5 changed it so he could shut down the server asynchronously\r\nfrom watchdog, although we have patches that prevent that type\r\nof behavior for this exact reason.",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix CraftServer#isPrimaryThread\n\nmd_5 changed it so he could shut down the server asynchronously\nfrom watchdog, although we have patches that prevent that type\nof behavior for this exact reason."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0e8d9087c4d6d37712c",
    "number": 2029,
    "body": "The lock in DataWatcher is used to prevent concurrent modifications\r\nto the 'd' field (entries in MCP). However any modifications to\r\nthis map only occur on initialization of an Entity in its\r\nconstructor. This modification is write-locked.\r\n\r\nEvery other access is through a readlock, which allows\r\nthe threads to pass if there is no thread holding the\r\nwritelock.\r\n\r\nSince the writelock is only obtained in the constructor\r\nof the Entity, the further readlocks are actually\r\nuseless (which get obtained on set, get, etc calls).\r\n\r\nThe entries field ('d' currently) has also been declared as\r\nInt2ObjectOpenHashMap to avoid autoboxing on put(), get(), etc\r\ncalls.",
    "head_branch": "optimize-datawatcher",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2029 from Spottedleaf/optimize-datawatcher\n\nOptimize DataWatcher"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0e9d9087c4d6d37712d",
    "number": 2027,
    "body": "See individual commits for details on fixes.",
    "head_branch": "1.14-todos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix MC-151674 Close RegionFiles when they get evicted from cache\n\nhttps://bugs.mojang.com/browse/MC-151674"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0ead9087c4d6d37712e",
    "number": 2021,
    "body": "The lock in DataWatcher is used to prevent concurrent modifications\r\nto the 'd' field (entries in MCP). However any modifications to\r\nthis map only occur on initialization of an Entity in its\r\nconstructor. This modification is write-locked.\r\n\r\nEvery other access is through a readlock, which allows\r\nthe threads to pass if there is no thread holding the\r\nwritelock.\r\n\r\nSince the writelock is only obtained in the constructor\r\nof the Entity, the further readlocks are actually\r\nuseless (which get obtained on set, get, etc calls).\r\n\r\nThe entries field ('d' currently) has also been declared as\r\nInt2ObjectOpenHashMap to avoid autoboxing on put(), get(), etc\r\ncalls.",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0ebd9087c4d6d37712f",
    "number": 2014,
    "body": "Tux pointed out the patch still has O(n^2) time complexity since\r\nthe sublist class in arraylist does not override clear() from\r\nAbstractList, which uses a forward moving iterator to clear\r\nthe list.\r\n\r\nResolved by using a peek and poll from ArrayDeque.\r\n\r\nThis patch also removes the useless WeakHashMap which holds\r\nthe list (it mapped world->list) and replaces it with a\r\nfield on World.",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix patch \"Faster redstone torch rapid clock removal\" (#2014)\n\nTux pointed out the patch still has O(n^2) time complexity since\r\nthe sublist class in arraylist does not override clear() from\r\nAbstractList, which uses a forward moving iterator to clear\r\nthe list.\r\n\r\nResolved by using a peek and poll from ArrayDeque.\r\n\r\nThis patch also removes the useless WeakHashMap which holds\r\nthe list (it mapped world->list) and replaces it with a\r\nfield on World."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0ecd9087c4d6d377130",
    "number": 2010,
    "body": "Implements #2002",
    "head_branch": "feature/crossbow-draw-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0edd9087c4d6d377131",
    "number": 2006,
    "body": "",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0eed9087c4d6d377132",
    "number": 2004,
    "body": "",
    "head_branch": "1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0efd9087c4d6d377133",
    "number": 2003,
    "body": "",
    "head_branch": "1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0f0d9087c4d6d377134",
    "number": 1996,
    "body": "Previously item frames would make the item change sound when they where edited by using /data merge ([MC-123450](https://bugs.mojang.com/browse/MC-123450)) or even when the direction was changed by a plugin. This fixes that by passing false to the playSound and checking for the update flag (which doesn't get send by data merging) in order to not play that sound.",
    "head_branch": "minebench/fix-itemframe-sound",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix itemframe sound on change"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0f1d9087c4d6d377135",
    "number": 1995,
    "body": "See https://gist.github.com/Spottedleaf/212657cb39c785ede93fb5b519db6223 for list of things that should definitely be looked over after the 1.14 patching process is complete. It does not contain everything that should be reviewed though.\r\n\r\n",
    "head_branch": "ver/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "More 1.14 updates (#1995)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0f2d9087c4d6d377136",
    "number": 1987,
    "body": "I've seen this requested a number of times recently.\r\n\r\nHaving this readily available prevents plugins from having to schedule their own task just to increment their own counter.",
    "head_branch": "GetCurrentTick",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0f3d9087c4d6d377137",
    "number": 1986,
    "body": "This adds back the unused `EntityCreatePortalEvent` to the EnderDragon when it is killed and forms the exit portal in the center of the island, which was [removed in the 1.9 update](https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/diff/nms-patches/EntityEnderDragon.patch?until=aa008dff0f9bedbe88e1fe79831776b0a52eb90a) and has [never returned](https://hub.spigotmc.org/jira/browse/SPIGOT-4359).\r\n\r\nIt also adds the event for the new End Gateway creations and `PortalType` enum.\r\n\r\nI am unsure if this even was ever fired for when a Player create a nether/end portal, but I do plan on adding that soon in a different PR.\r\n\r\nTest Video: https://youtu.be/kkgvOoz_Rrs\r\n\r\nTest Plugin: https://pastebin.com/v0Yh5m6s",
    "head_branch": "EntityCreatePortalEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0f4d9087c4d6d377138",
    "number": 1984,
    "body": "**Note:** _This entire patch is weird and out of place. It was [originally created for 1.7](https://github.com/IPVP-MC/Paper-1.7/commit/3516ae34efedacaf3ddd95776a9d3b1d721070fd) before CB had its own [furnace API to modify cook times](https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/block/Furnace.html). The two do not mutually go with each other. This can be seen in the current implementation modifying the `cookTime` when a multiplier is set resulting in `Furnace#getCookTime()` reporting the wrong amount of time it's been cooking for. After this PR that will be fixed but the `cookTimeTotal` will appear to be wrong in `Furnace#getCookTimeTotal()` if a multiplier is set. Etc etc._\r\n\r\n**However, this PR does fix #1983 as reported.**\r\n\r\nAfter this PR a multiplier value of 0.5 will result in a slower cook speed by half. A value of 2.0 will result in a faster cook speed by double. Etc etc.",
    "head_branch": "FurnaceCookMultiplier",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0f5d9087c4d6d377139",
    "number": 1982,
    "body": "Adds a new event similar to PlayerEggThrowEvent, but without the Player requirement (dispensers can throw eggs to hatch them, too).",
    "head_branch": "ThrownEggHatchEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add ThrownEggHatchEvent (#1982)\n\nAdd a new event similar to PlayerEggThrowEvent but without the Player\r\nrequirement (dispensers can throw eggs to hatch as well)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b0f6d9087c4d6d37713a",
    "number": 1981,
    "body": "Adds event when entity is spawned from a spawner egg (ported from [EMC](https://github.com/starlis/empirecraft/blob/master/patches/server/0015-MonsterEggSpawn-Event.patch)).",
    "head_branch": "MonsterEggSpawnEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0f7d9087c4d6d37713b",
    "number": 1978,
    "body": "This stores integer delay values in NBT as integers instead of shorts (fixes #1977)\r\n\r\nAlso adds more API methods for plugin use.",
    "head_branch": "1977",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Mob Spawner API Enhancements"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b0f8d9087c4d6d37713c",
    "number": 1968,
    "body": "`LootableInventoryReplinishEvent` does not fire (for good reason) on the first lootable fill. This adds a new event that fires *only* on the first fill.\r\n\r\nCloses #1667 ",
    "head_branch": "1667",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0f9d9087c4d6d37713d",
    "number": 1967,
    "body": "Closes #1800 ",
    "head_branch": "1800",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0fad9087c4d6d37713e",
    "number": 1966,
    "body": "Closes #1824 \r\n\r\nVideo Example: https://youtu.be/Bi_ayeCAS6o\r\n\r\nTest Plugin from Video: https://pastebin.com/PUtuxG5K",
    "head_branch": "1824",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0fbd9087c4d6d37713f",
    "number": 1965,
    "body": "Closes #1851 ",
    "head_branch": "1851",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0fcd9087c4d6d377140",
    "number": 1964,
    "body": "This moves the event firing from CraftWorld to World.\r\n\r\nFixes #1913 ",
    "head_branch": "1913",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0fdd9087c4d6d377141",
    "number": 1963,
    "body": "This might fix more cases than just tall grass.\r\n\r\nBasically what's happening is md_5's [fix](https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/51100db8215f28accb2eeb56f9ee3e661f362d1e) for whatever is in [SPIGOT-4678](https://hub.spigotmc.org/jira/browse/SPIGOT-4678) is using the item action context to determine where the sign is placed. This works fine for most blocks because it's grabbing the block next to the block that was clicked. However, in the case of tall grass the block is replaced with a sign instead of a sign set next to it, thus there is no TE where it thinks it is and you get an NPE.\r\n\r\nThis fix is a pretty generic catch-all, as it just checks if it found a TE at the neighboring position. If it didn't it checks for a TE at the clicked position.\r\n\r\nThis has been tested and does fix #1917 as reported.",
    "head_branch": "1917",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0fed9087c4d6d377142",
    "number": 1962,
    "body": "Fixes #1924",
    "head_branch": "1924",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b0ffd9087c4d6d377143",
    "number": 1961,
    "body": "This is a simpler implementation for the specific use-case requested in #1937 than what leaf is trying to do.\r\n\r\nCloses #1937",
    "head_branch": "TridentGetItemStack",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b100d9087c4d6d377144",
    "number": 1960,
    "body": "Closes #1956",
    "head_branch": "ZombieTargetsTurtleEggs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b101d9087c4d6d377145",
    "number": 1959,
    "body": "The title says everything",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b102d9087c4d6d377146",
    "number": 1958,
    "body": "Adds the ability to test what BlockData will exist when placing a BlockData at a location.\r\n\r\nExamples:\r\n\r\n* Placing grass blockdata anywhere will return grass blockdata. If placed underneath a snow layer it will return grassy variant of snow block data.\r\n* Placing torch blockdata will return torch blockdata **only** in the places torches can be placed. Placing a floating torch will return blockdata for air. Placing torches on leaves will return air. However, placing them in water will return torch blockdata (this same behavior can be seen in the game, as the torch will survive until the next tick when water flows to destroy it).\r\n* Placing sugar cane will **only** return sugar cane block data when placed on top of grass or sand next to water source.\r\n\r\nVideo demonstration: https://youtu.be/A36Ot5Ug-0I\r\n\r\nTest plugin from video: https://pastebin.com/5MJ95YVT\r\n\r\nCloses #1921 ",
    "head_branch": "GetPlacementBlockData",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b103d9087c4d6d377147",
    "number": 1957,
    "body": "This allows for updating to a specific upstream branch and having that configured in source control.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b104d9087c4d6d377148",
    "number": 1952,
    "body": "CB will return false for everyoneDeeplySleeping() if there is a spectator\r\nonline in the world at all (unless the player is marked \"afk\" by a plugin)\r\nThere are no grounds for this change from vanilla, it's likely unintentional.\r\n\r\nCB will also return true if there is one player in deep sleep, which is\r\ndifferent from the vanilla behaviour of checking if all sleeping players\r\nare in deep sleep. The difference in behaviour is that the server will\r\nno longer wait until all players are deeply sleeping, which doesn't\r\nhave grounds for a change either.\r\n\r\nThe solution is to revert all changes CB has done except for the fauxSleeping\r\nchange.\r\n\r\nI've lightly tested to confirm the two above changes (with two players). More testing is welcome.\r\nI will test again later today.\r\nShould resolve #1719 ",
    "head_branch": "fix-sleeping",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b105d9087c4d6d377149",
    "number": 1950,
    "body": "Using MINGW64 on Win10, cp command rejects the edited line.\r\n\r\nI'm too lazy to open an issue",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Update makemcdevsrc.sh (#1950)\n\n[Aikar note] we really should figure out a way to skip CI again :("
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b106d9087c4d6d37714a",
    "number": 1942,
    "body": "The cost of a call to sync() adds up quickly and especially for\r\nHDDs. Playing around generating chunks for a while warranted a\r\n3 min save time on a HDD. This is unacceptable default behaviour\r\nand now the behaviour is hidden behind a flag for server owners\r\nwho are OK with taking a hit on saves (although SSDs will not have\r\nthis issue remotely as bad, since most of the time was spent seeking).\r\n\r\nWhile this reduces the effectiveness of the original patch, it now reduces the chance of error\r\nto the operating system and other factors (like losing power), which is still an improvement.\r\n\r\nResolves #1941 ",
    "head_branch": "regionfile-reliability-part-two",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Only flush to disk on chunk saves if paper.flush-on-save is true (#1942)\n\nThe cost of a call to sync() adds up quickly and especially for\r\nHDDs. Playing around generating chunks for a while warranted a\r\n3 min save time on a HDD. This is unacceptable default behaviour\r\nand now the behaviour is hidden behind a flag for server owners\r\nwho are OK with taking a hit on saves (although SSDs will not have\r\nthis issue remotely as bad, since most of the time was spent seeking)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b107d9087c4d6d37714b",
    "number": 1940,
    "body": "Note that we will have to watch out for new projectiles / new code to launch projectiles on updates. \r\n\r\nShould resolve #1937 ",
    "head_branch": "arrow-getlaunchitem",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b108d9087c4d6d37714c",
    "number": 1938,
    "body": "Previously TreeMap was used which has poor get(K) performance.\r\n\r\nUsing LinkedHashMap we can get the performance benefit of HashMap and the iteration order given by TreeMap.",
    "head_branch": "optimize-gamerules",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimize GameRules to use LinkedHashMap\n\nPreviously TreeMap was used which has poor get(K) performance."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b109d9087c4d6d37714d",
    "number": 1932,
    "body": "Previously we would write to header before writing our chunk data,\r\nwhich opens a window for corruption (or we would overwrite entirely).\r\nNow the saving process has been changed to follow this chain of events:\r\n\r\n1. We always allocate a new space to write so we do not potentially\r\noverwrite and corrupt the current data\r\n2. Write the chunk data first (the order of the fields in\r\nthe chunk data isn't relevant though)\r\n3. Flush to disk\r\n4. Write to the region header last\r\n5. Flush to disk\r\n6. Then we free the previous space allocated\r\n\r\nWith this chain of events it is impossible for a chunk write to corrupt\r\na region file, unless the operating system has lied and we have NOT flushed\r\nto disk.\r\n\r\nHowever server administrators are still recommended to continue performing\r\nregular backups.\r\n\r\nNote that when Mojang finally decides to change their region format\r\nto deal with oversized chunks this patch must be changed to deal with\r\nwhatever system they decide to impose.\r\n\r\nWe also make use of two flushes to disk per chunk save (to ensure\r\nordering and ensure data has gone to disk), so this will negatively\r\naffect save performance.",
    "head_branch": "regionfile-reliability",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make region files more reliable to write to\n\nPreviously we would write to header before writing our chunk data,\nwhich opens a window for corruption (or we would overwrite entirely).\nNow the saving process has been changed to follow this chain of events:\n\n1. We always allocate a new space to write so we do not potentially\noverwrite and corrupt the current data\n2. Write the chunk data first (the order of the fields in\nthe chunk data isn't relevant though)\n3. Flush to disk\n4. Write to the region header last\n5. Flush to disk\n6. Then we free the previous space allocated\n\nWith this chain of events it is impossible for a chunk write to corrupt\na region file, unless the operating system has lied and we have NOT flushed\nto disk.\n\nHowever server administrators are still recommended to continue performing\nregular backups.\n\nNote that when Mojang finally decides to change their region format\nto deal with oversized chunks this patch must be changed to deal with\nwhatever system they decide to impose.\n\nWe also make use of two flushes to disk per chunk save (to ensure\nordering and ensure data has gone to disk), so this will negatively\naffect save performance."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b10ad9087c4d6d37714e",
    "number": 1930,
    "body": "Plugins that rely on the async login event to fire can miss the event\r\nif a player tries to log in before the server has loaded.\r\n\r\nThe solution is to simply block the event threads from executing until\r\nthe server has loaded. This will not have an adverse affect on logins\r\nsince the event threads are cached and are only used for executing events\r\nasynchronously.",
    "head_branch": "lost-events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow login events to fire only after the server has loaded\n\nPlugins that rely on the async login event to fire can miss the event\nif a player tries to log in before the server has loaded.\n\nThe solution is to simply block the event threads from executing until\nthe server has loaded. This will not have an adverse affect on logins\nsince the event threads are cached and are only used for executing events\nasynchronously."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b10bd9087c4d6d37714f",
    "number": 1912,
    "body": "* The hostname and socket address was not null when the event fired, but the event does not provide the value, the change allows plugins to use the old value.\r\n* Since `proxyLogicEnabled` will be checked after the event fired, to check the config value will allow plugins to modify it during the event handling.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Emancipate more features to PlayerHandshakeEvent\n\n* The hostname and socket address was not null when the event fired, but the event does not provide the value, the change allows plugins to use the old value.\n* Since `proxyLogicEnabled` will be checked after the event fired, to check the config value will allow plugins to modify it during the event handling.\n\nSigned-off-by: MiniDigger <admin@minidigger.me>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b10cd9087c4d6d377150",
    "number": 1908,
    "body": "I want to cancel the creation of end gateways on my server after a dragon fight.\r\nCan we please implement an event for that?",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b10dd9087c4d6d377151",
    "number": 1906,
    "body": "",
    "head_branch": "feature/gs4-query-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add GS4 query event (#1906)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b10ed9087c4d6d377152",
    "number": 1899,
    "body": "Self-explanatory",
    "head_branch": "feature/whitelisttoggleevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add WhitelistToggleEvent (#1899)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b10fd9087c4d6d377153",
    "number": 1898,
    "body": "Packets are rate-limited through an interval of time to make sure latency\r\nspikes don't kill clients. The default limit is 250 packets/second, which\r\nis also far greater than the max ~70 packets/second vanilla will do according\r\nto my testing.\r\n\r\nWithout these rate limits in place I can happily send 40,000 move packets per\r\nsecond which will take down the server, as vanilla does zero rate limiting.\r\n\r\nClients violating the limit will be kicked and it will be logged to the console. The kick\r\nmessage is configurable.\r\n\r\nThe rate limit can configured in paper.yml, and it can be disabled by being set to -1.",
    "head_branch": "packet-limits",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b110d9087c4d6d377154",
    "number": 1896,
    "body": "Fixes #1415.\r\n\r\n~~Cancelling the interaction event causes a metadata packet to be sent to the player that performs the interaction, which in turn causes the \"dirty\" flag for the `DataWatcher` to be reset to `false`.\r\n\r\nI noticed that `DataWatcher#e()` clears the \"dirty\" flag. I concluded that the intent for the `flag` variable in the constructor must probably have been something to do with whether or not the dirty flag is cleared, where `true` means that it should not be cleared, and `false` meaning that it should be cleared. \r\n\r\nBy commenting out the call to `DataWatcher#e()`, the contents of the `DataWatcher` should be encoded without undirtying. When the player is sent `PacketPlayOutEntityMetadata` after the event is cancelled, the `DataWatcher` remains dirty and the metadata of the entity will then be broadcasted the next time the entity tracker runs.\r\n\r\nI'm still not exactly sure why the flag is undirtyed in the first place here, I can only assume it must be a mistake. At worst, I'd think that the entity would simply just keep being updated for the players tracking it, but otherwise I don't see any negative impacts coming from this change.~~\r\n\r\n**Demo**\r\nhttps://streamable.com/r2zsq",
    "head_branch": "patch-1415",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixes issues with player interaction preventing metadata from being updated for other players (#1896)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b111d9087c4d6d377155",
    "number": 1881,
    "body": "The blockX needs to be floored before converted to int, as float -> integer\r\noperations are truncation. (i.e -0.5 -> 0, we want -0.5 -> -1)",
    "head_branch": "fix-chunkat-async",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix World#getChunkAtAsync(Location) variants incorectly calculating chunk x\n\nThe blockX needs to be floored before converted to int, as float -> integer\noperations are truncation. (i.e -0.5 -> 0, we want -0.5 -> -1)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b112d9087c4d6d377156",
    "number": 1862,
    "body": "Update (Aug 19 2020): see #4154.\r\n\r\n---------------------\r\n\r\nOriginal:\r\n\r\nThis PR adds a patch (two, really) which creates and implements a `PlayerTradeWithVillagerEvent`, called when an `EntityVillager` trades with an `EntityPlayer`. As far as I am aware, the information offered in this event is not obtainable through other means currently available in Bukkit, Spigot, or Paper. While it is possible to listen to inventory events and piecemeal the information together, this new event mitigates the hassle by creating a streamlined object containing all information relevant to the trade.\r\n\r\nYou will notice that I chose to keep the actual `MerchantRecipe` object private due to concerns about mutability. I instead opted for a series of public getters.\r\n\r\nI recognize the upcoming 1.14 update may break or otherwise nullify the usefulness of this patch depending on the scope of internal changes.\r\n\r\nI have of course tested this patch. The following debug output shows all information contained within the event after I traded 3x emeralds for 1x shears:\r\n```\r\n    @EventHandler\r\n    protected void onVillagerTrade(PlayerTradeWithVillagerEvent e) {\r\n        log(\"[DEBUG] Caught PlayerTradeWithVillagerEvent!\");\r\n        log(\"[DEBUG] Player: \" + e.getPlayer());\r\n        log(\"[DEBUG] Villager: \" + e.getVillager());\r\n        log(\"[DEBUG] Trade ingredients: \" + e.getIngredients());\r\n        log(\"[DEBUG] Trade result: \" + e.getResult());\r\n        log(\"[DEBUG] Trade uses: \" + e.getUses());\r\n        log(\"[DEBUG] Trade max uses: \" + e.getMaxUses());\r\n        log(\"[DEBUG] Trade has exp reward: \" + e.hasExperienceReward());\r\n        log(\"[DEBUG] Trade exp reward: \" + e.getExperienceReward());\r\n    }\r\n```\r\nproduces\r\n```\r\n[16:15:02 INFO]: [DEBUG] Caught PlayerTradeWithVillagerEvent!\r\n[16:15:02 INFO]: [DEBUG] Player: CraftPlayer{name=bermudalocket}\r\n[16:15:02 INFO]: [DEBUG] Villager: CraftVillager\r\n[16:15:02 INFO]: [DEBUG] Trade ingredients: [ItemStack{EMERALD x 3}, ItemStack{AIR x 1}]\r\n[16:15:02 INFO]: [DEBUG] Trade result: ItemStack{SHEARS x 1}\r\n[16:15:02 INFO]: [DEBUG] Trade uses: 2\r\n[16:15:02 INFO]: [DEBUG] Trade max uses: 7\r\n[16:15:02 INFO]: [DEBUG] Trade has exp reward: true\r\n[16:15:02 INFO]: [DEBUG] Trade exp reward: 3\r\n```\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b113d9087c4d6d377157",
    "number": 1847,
    "body": "Synchronizing on the chunkmap has no affect since all synchronization\r\nfor chunkmap has been moved inside ChunkMap itself. Thus the only purpose\r\nthe synchronization could offer was synchronization between some other\r\nthread, but there is no corresponding thread and thus the synchronization\r\nwas unnecessary.",
    "head_branch": "chunkmap-elide-synchronization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b115d9087c4d6d377158",
    "number": 1846,
    "body": "This PR introduces the ability to delegate chunk generation (and population and stuff) to the vanilla chunk generator in a custom bukkit chunk generator.\r\n\r\nexample plugin: https://github.com/MiniDigger/worldgentest/blob/master/src/main/java/me/minidigger/worldgentest/PlusGenerator.kt\r\n![https://i.imgur.com/K2x8Idh.png](https://i.imgur.com/K2x8Idh.png)\r\n\r\nToDos:\r\n- [ ] make it work with papers async chunk generation",
    "head_branch": "feature/vanilla-gen",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b116d9087c4d6d377159",
    "number": 1834,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b117d9087c4d6d37715a",
    "number": 1805,
    "body": "It is added here: https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/438556243d976e6123308d7ef414fe246180be06",
    "head_branch": "remove-entitycombust-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove \"Fire EntityCombustEvent for phantoms\" patch as it is fixed in Spigot (#1805)\n\nIt is fixed here: https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/438556243d976e6123308d7ef414fe246180be06"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b118d9087c4d6d37715b",
    "number": 1793,
    "body": "This event is invoked when a piston has extended.\r\nThe main purpose of this event is to allow plugins to change blocks right after a piston has extended, atm this is only possible by delaying the block material change by 1 tick.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b119d9087c4d6d37715c",
    "number": 1781,
    "body": "This fixes an issue where if the player who's a passenger of another player disconnects, leaving the vehicle player to be declared as dead. With the patch that retracks the player when they dismount, this patch resolves this by calling the `stopRiding()` to correctly track the disconnected entity, ejecting itself and allow the vehicle player to continue its living state.",
    "head_branch": "ver/1.12.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Ensure the passenger player gets retracked by the vehicle player on disconnection (#1781)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b11ad9087c4d6d37715d",
    "number": 1751,
    "body": "- Updating book writing (not signing) mutated the original item, making\r\nit impossible to properly cancel the event or modify the book meta\r\n- When the event was cancelled, the client's book would keep the\r\ncancelled writing",
    "head_branch": "fix-player-edit-book-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b11bd9087c4d6d37715e",
    "number": 1738,
    "body": "Delete Me",
    "head_branch": "1.12.2-Custom",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b11cd9087c4d6d37715f",
    "number": 1735,
    "body": "Implement a simple way to store simple compile-time values in the plugin.yml description file, this could be useful to store the jar build number/date/commit without having to load additional property files from the jar.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b11dd9087c4d6d377160",
    "number": 1731,
    "body": "This way, repeatedly getting the same block state string will not cause it to parse it every time.",
    "head_branch": "cache-block-state-strings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Cache block data strings"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b11ed9087c4d6d377161",
    "number": 1724,
    "body": "Resolves #1672 \r\nThis API is intended to expose useful heightmaps found in the server to API. This exposes all of the live world heightmaps currently in the server. \r\nIf a heightmap becomes impossible to implement, api spec allows the implementation to throw UnsupportedOperationException (far better than returning some weird unexpected value).\r\n\r\nTested via:\r\nhttps://gist.github.com/Spottedleaf/5d47f67c55a9fb870251ff344bfeb6b3",
    "head_branch": "heightmap-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Heightmap API (#1724)\n\nResolves #1672 \r\nThis API is intended to expose useful heightmaps found in the server to API. This exposes all of the live world heightmaps currently in the server. \r\nIf a heightmap becomes impossible to implement, api spec allows the implementation to throw UnsupportedOperationException (far better than returning some weird unexpected value).\r\n\r\nTested via:\r\nhttps://gist.github.com/Spottedleaf/5d47f67c55a9fb870251ff344bfeb6b3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b11fd9087c4d6d377162",
    "number": 1718,
    "body": "Resolves #1381 \r\nNote that a long timeout will still crash the server, but that was not an\r\nissue in the first place. I've tested the patch with the following code:\r\n\r\nhttps://gist.github.com/Spottedleaf/2f0e7185f53c451a4485d0372393a249\r\n\r\nServer does not crash on startup (consistent with previous behaviour) and will crash on reload (consistent with previous behaviour), however without short timeout spam. ",
    "head_branch": "pause-watchdog-on-reload",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Disable watchdog early timeout for CraftServer#reload() invocations (#1718)\n\nFixes GH-1381"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b120d9087c4d6d377163",
    "number": 1712,
    "body": "Should make this API easier to use.",
    "head_branch": "long-key-changes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add static encode/decode for block long keys (#1712)\n\nShould make this API easier to use."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b121d9087c4d6d377164",
    "number": 1708,
    "body": "This PR is meant to receive feedback on API only, as I am very well aware the implementation is either broken or is not conforming to the spec laid out here (pretty sure I don't even compile). Although implementation feedback is welcome, it's not the primary focus as of right now. The documentation in the patch files do not override comments made on this PR because they are prone to error (I'm pretty sure some are broken as well) or are not up-to-date.\r\n\r\nThis patch adds BaseComponent[] to each of the events:\r\n- AsyncPlayerChatEvent\r\n- AsyncPlayerPreLoginEvent\r\n- PlayerChatEvent\r\n- PlayerJoinEvent\r\n- PlayerKickEvent\r\n- PlayerLoginEvent\r\n- PlayerPreLoginEvent\r\n- PlayerQuitEvent\r\n- ProfileWhitelistVerifyEvent\r\n- PlayerDeathEvent\r\n\r\nThis patch also fixes a bug where modifying the leave message in PlayerKickEvent\r\nwould actually have no effect.\r\nThis patch also fixes one line of javadoc (somewhere).\r\nThis patch is also fixes [this patch](https://github.com/PaperMC/Paper/blob/master/Spigot-Server-Patches/0098-Option-to-use-vanilla-per-world-scoreboard-coloring-.patch) not applying when plugins listen on PlayerChatEvent.\r\n\r\nBaseComponent[] in events are not defensively copied or the like. This is due to the fact that plugins will most likely use ComponentBuilder's create method, and that copying these things around is just wasteful. Plugins modifying BaseComponent[]'s after they have been written to or read from an event will cause undefined behaviour.\r\n\r\nIf a BaseComponent[] has a legacy variant, then the legacy and BaseComponent[] variants are kept in sync (through writes only) through converting between the format. i.e writing a legacy text will override the BaseComponent[] variant (if it exists), however reading a legacy text will not override the BaseComponent[] variant (if it exists).\r\n\r\nConverting between BaseComponent[] and legacy text is through TextComponent#fromLegacyText(String) and BaseComponent#toLegacyText(BaseComponent...) unless specified otherwise.\r\n\r\nMost of the volume of the patch is dedicated towards kick messages (PlayerKickEvent, AsyncPlayerPreLoginEvent, PlayerLoginEvent, PlayerPreLoginEvent, ProfileWhitelistVerifyEvent) or broadcasted leave messages (PlayerKickEvent, PlayerJoinEvent, PlayerQuitEvent). The API for these changes is simple, add a BaseComponent[] for the message and simple functions to read and write.\r\n\r\nThe not-so-simple changes are the ones to AsyncPlayerChatEvent and PlayerChatEvent. The changes to both these events are fundamentally identical to be consistent, and are laid out below:\r\n\r\n1. Adds a BaseComponent[] message\r\n2. Adds a BaseComponent[] display name (Note: There is no corresponding legacy display name)\r\n3. Adds a BaseComponent[] format*.\r\n\r\nThe special change is the BaseComponent[] format. The format is roughly laid out in this patch from [here](https://github.com/Spottedleaf/Concrete/commit/caa00d0c65e1fb5730bce6a3ec44cffdb232c2a0#diff-eea84f503e6786e5d9ed6bd70f5b16f1R221). There will be more flags added, however most of the core format is there.\r\n\r\nThe format is designed such that any valid String format is also valid BaseComponent[] format, but BaseComponent[] is not valid String format. However this is only due to extra flags that the BaseComponent[] format has. Thus, conversion between formats is TextComponent#fromLegacyText(String) and [BaseComponentFormatter#convertToLegacyFormat(BaseComponent[])](https://github.com/Spottedleaf/Concrete/commit/caa00d0c65e1fb5730bce6a3ec44cffdb232c2a0#diff-eea84f503e6786e5d9ed6bd70f5b16f1R434). The BaseComponent[] format also has the ability to format HoverEvents and ClickEvents. Just for the kicks I'll add a format method that takes a String format (to be interpreted as a BaseComponent[] format) and BaseComponent[] args, as this might be useful for other plugins to use and is not hard to implement.\r\n\r\nThe BaseComponent[] format also measures the length of input arguments in terms of the number of codepoints in the string versus the legacy's format of total raw characters (which included formatting characters). However I have not seen a plugin actually use format flags that rely on character length, so I doubt this would be a breaking change to anyone.\r\n\r\nI will also need to consider how to deal with KeybindComponents, SelectorComponents, and TranslatableComponents. \r\n\r\nFor now API improvements are the focus.",
    "head_branch": "add-components-to-events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b122d9087c4d6d377165",
    "number": 1695,
    "body": "Replaces the \"use-chunk-inhabited-timer\" config option with the option\r\n\"fixed-chunk-inhabited-time\".\r\n\r\nWhen using \"fixed-chunk-inhabited-time=-1\" everything will be the same like it\r\nwas with \"use-chunk-inhabited-timer=true\".\r\n\r\nWhen using \"fixed-chunk-inhabited-time=0\" everything will be the same like it\r\nwas with \"use-chunk-inhabited-timer=false\".\r\n\r\nInstead of just using 0 when all chunks should be treated equally this allows to\r\nfine-tune vanilla gameplay.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b123d9087c4d6d377166",
    "number": 1661,
    "body": "The use case for this event is for plugins to fill in the name and textures on a PlayerProfile. The implementing class CraftPlayerProfile creates a new GameProfile on every call to setName() or setId(), so the used GameProfile has to updated after the event returns.",
    "head_branch": "fix_PreFillProfileEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix PreFillProfileEvent (#1661)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b124d9087c4d6d377167",
    "number": 1652,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Update artifact information in readme (#1652)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b125d9087c4d6d377168",
    "number": 1636,
    "body": "Fix for MC-136865. Addresses #1631\r\n\r\nThe problem was that items with only one use left were not applying the silk touch/fortune enchantments. The issue is because while processing the item's last use, the item count was set to 0. After this point, NMS code ended up cloning the item stack, but because the count had already been set to 0, a null item stack was given. This was before determining the item entity to be spawned in the world once a block was broken. It is at this point that the enchantments were already discarded prior to determining the drop.\r\n\r\nThe fix was to clone the original item stack and give it a count of 1. The proper logic of checking the enchantments would then be correct.",
    "head_branch": "FortuneSilkTouchEnchantFix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "MC-136865: Pass original itemstack for enchantment checks on block break\n\nWhen an itemstack runs out of durability, the amount is reduced to\n0 which then marks the item as invalid. This causes the last unit\nof durability to not apply enchantments as the enchantment level\ncheck sees the item as a dud.\n\nkeep the clone of the item used to a non empty value so it represents\nthe item used."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b126d9087c4d6d377169",
    "number": 1627,
    "body": "A chunk load on the main thread will be added to the high priority queue, however, due to existing work on this queue, there was no guarantee that the load would occur within a reasonable amount of time, potentially causing a server to crash while waiting for a chunk in the queue\r\n\r\nIn order to counteract this, a new urgent priority has been added, allowing us to prioritize these tasks over standard chunk gen/loading\r\n\r\n(#1625 #1615 #1575 #1558 (and probably more))",
    "head_branch": "urgent-chunk-priority",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Process chunks blocking main urgently (#1627)\n\nA chunk load on the main thread will be added to the high priority queue, however, due to existing work on this queue, there was no guarantee that the load would occur within a reasonable amount of time, potentially causing a server to crash while waiting for a chunk in the queue\r\n\r\nIn order to counteract this, a new urgent priority has been added, allowing us to prioritize these tasks over standard chunk gen/loading\r\n\r\n(#1625 #1615 #1575 #1558 (and probably more))"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b127d9087c4d6d37716a",
    "number": 1622,
    "body": "It would be nice to capture the state the player is in after having respawned. Currently we can only capture them in the act of respawning. An event like this would, for example, mitigate the requirement of a 1ms timer for some things that cannot be done while the player is currently in the act of respawning. It would also mark the player as having freshly respawned.",
    "head_branch": "PlayerPostRespawnEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PlayerPostRespawnEvent (#1622)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b128d9087c4d6d37716b",
    "number": 1619,
    "body": "Adds the wololo (turns blue sheep into red sheep) target to the Evoker interface.",
    "head_branch": "EvokerAPI",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b129d9087c4d6d37716c",
    "number": 1612,
    "body": "Some flavours of grep don't like '?' in their expressions (also `.*?` means \"match zero or more times or maybe do not match at all\" as far as I know).\r\n\r\nTested on:\r\n- [x] (Arch) Linux\r\n- [x] OpenBSD\r\n- [x] FreeBSD\r\n- [x] Windows (\"git bash\" environment)\r\n- [x] OS X (tested on 10.13.6 High Sierra)\r\n\r\n~~If someone could report if it's working on OS X and Windows, it'd be great :smile:~~",
    "head_branch": "fix-grep",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Fix \"grep: repetition-operator operand invalid\" (#1612)\n\nSome flavours of grep don't like '?' in their expressions (also `.*?` means \"match zero or more times or maybe do not match at all\" as far as I know)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b12ad9087c4d6d37716d",
    "number": 1610,
    "body": "For whatever reason, Spigot blocks the registration of any channel that has \"minecraft\" in its name (funnily enough, even if it's after the namespace). This however, causes issues for plugins that want to use some of the plugin channels in the `minecraft` namespace, such as `minecraft:brand`.\r\n\r\nFor this reason, I've changed the check to only block the usage of the `register` and `unregister` channels, as those are reserved.",
    "head_branch": "channels",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Change the reserved channel check to be sensible (#1610)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b12bd9087c4d6d37716e",
    "number": 1608,
    "body": "Resolves #1551",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add option to prevent players from moving into unloaded chunks (#1608)\n\nResolves #1551"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b12cd9087c4d6d37716f",
    "number": 1605,
    "body": "Looks like this _was_ a problem afterall, @aikar ",
    "head_branch": "GH1604",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #1604 (#1605)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b12dd9087c4d6d377170",
    "number": 1600,
    "body": "I advise you don't pull this...",
    "head_branch": "feature/battery-saver",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b12ed9087c4d6d377171",
    "number": 1598,
    "body": "As mentioned in #1597, your air level did not reset if you drown.\r\n\r\nNow you get a full breath during respawn.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Reset players remainingAir on respawn (#1598)\n\nAs mentioned in #1597, your air level did not reset if you drown.\r\n\r\nNow you get a full breath during respawn."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b12fd9087c4d6d377172",
    "number": 1596,
    "body": "Fix NPE from being thrown when setting a player's spectator target. It was occurring because in #1498 the method was changed to add some events. Basically, I was trying to send the `PacketPlayOutCamera` packet to the player using `this.cv` which is the current spectator target but it had not been set yet; therefore, the NPE was thrown. I have updated the method to set the field before sending the packet. \r\n\r\nCloses #1595 \r\nCloses #1603 ",
    "head_branch": "fix-npe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix NPE when setting a player's spectator target (#1596)\n\nFix NPE when setting a player's spectator target"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b130d9087c4d6d377173",
    "number": 1589,
    "body": "The item tag is stored before executing the interaction and restored before handling the\r\nresulting events. If the event was not canceled and the ItemStack is not modified in the\r\nevent, the new tag is set back to the new one afterwards. This is similar to the handling\r\nof the item amount.\r\n\r\nThis fixes a bug where tools lose durability when the interaction is canceled and another bug\r\nwhere tools become completely repaired when they should break but the interaction was canceled.",
    "head_branch": "fix-itemstack-modification-on-canceled-interaction",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't modify item tag if interaction is canceled (#1589)\n\nThe item tag is stored before executing the interaction and restored before handling the\r\nresulting events. If the event was not canceled and the ItemStack is not modified in the\r\nevent, the new tag is set back to the new one afterwards. This is similar to the handling\r\nof the item amount.\r\n\r\nThis fixes a bug where tools lose durability when the interaction is canceled and another bug\r\nwhere tools become completely repaired when they should break but the interaction was canceled."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b131d9087c4d6d377174",
    "number": 1588,
    "body": "This change sets the correct celestial angle for The End dimension.\r\n\r\nCode analysis by @pokechu22 was spot on.",
    "head_branch": "MC93764",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1588 from BillyGalbreath/MC93764\n\nFix MC-93764"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b132d9087c4d6d377175",
    "number": 1587,
    "body": "This change exposes vanilla's jump state and add new event for when an entity jumps.\r\n\r\nWhen an entity is marked ready to jump it's jump state is set to true. On the next tick, if conditions are met (on ground or in liquid, jump tick delay is 0, etc) the entity will jump. This state is reset to false every tick.\r\n\r\nIf vanilla conditions are met, the new jump event will fire with cancellation as its last condition before the entity actually jumps.",
    "head_branch": "Jumping",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Entity Jump API (#1587)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b133d9087c4d6d377176",
    "number": 1577,
    "body": "Mojang sends a single keepalive packet out and waits eternally for it's reply. If that packet gets dropped for any reason the player will get kicked, even if they are still connected and playing with all other packets working normally.\r\n\r\nThis change will keep sending the keepalive packet every 20 ticks until a response is received or the player is kicked.",
    "head_branch": "KeepAlive",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b134d9087c4d6d377177",
    "number": 1576,
    "body": "I don't know why this had to be fixed, but there ya go",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Actually set the header (#1576)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b135d9087c4d6d377178",
    "number": 1573,
    "body": "",
    "head_branch": "entitycombust-for-phantoms",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fire EntityCombustEvent for phantoms (#1573)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b136d9087c4d6d377179",
    "number": 1568,
    "body": "I am not sure how to exactly do this. \r\n\r\nWhy should this happen?\r\nA. Class.newInstance is deprecated\r\nB. ChatColor.translateAlternateColorCodes(\"&1Is Easy :)\"); I questioned making DEFAULT_COLOR_CODE editable so it can be different depending on what the Server Owner wanted? Or you could do ChatColor.DEFAULT_COLOR_CODE = '!'; if you wanted it changed? ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b137d9087c4d6d37717a",
    "number": 1566,
    "body": "",
    "head_branch": "LlamaAPI",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b138d9087c4d6d37717b",
    "number": 1565,
    "body": "",
    "head_branch": "DolphinRideCooldown",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b139d9087c4d6d37717c",
    "number": 1564,
    "body": "",
    "head_branch": "WitchAPI",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add more Witch API (#1564)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b13ad9087c4d6d37717d",
    "number": 1563,
    "body": "",
    "head_branch": "HeresJohnny",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Here's Johnny! (#1563)\n\nAdds Johnny API to Vindicator"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b13bd9087c4d6d37717e",
    "number": 1560,
    "body": "",
    "head_branch": "FixZombieAggressiveTowardsVillagerSetting",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Check Drowned for Villager Aggression Config (#1560)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b13cd9087c4d6d37717f",
    "number": 1557,
    "body": "While Velocity already supports BungeeCord-style IP forwarding (which almost everyone supports now), it is not secure. Users have a lot of problems setting up firewalls or setting up plugins like iPWhitelist. Further, the BungeeCord IP forwarding protocol still retains essentially its original form, when there is brand new support for custom login plugin messages in 1.13.\r\n\r\nVelocity's modern IP forwarding uses an HMAC-SHA256 code to ensure authenticity of messages (users have to set up an unique secret), is packed into a binary format that is smaller than BungeeCord's forwarding, and is integrated into the Minecraft login process by using the 1.13 login plugin message packet.\r\n\r\nI have verified this with Velocity build 303 in online-mode.",
    "head_branch": "velocity-ip-forwarding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Velocity IP forwarding support (#1557)\n\nWhile Velocity supports BungeeCord-style IP forwarding, it is not secure. Users\r\nhave a lot of problems setting up firewalls or setting up plugins like IPWhitelist.\r\nFurther, the BungeeCord IP forwarding protocol still retains essentially its original\r\nform, when there is brand new support for custom login plugin messages in 1.13.\r\n\r\nVelocity's modern IP forwarding uses an HMAC-SHA256 code to ensure authenticity\r\nof messages, is packed into a binary format that is smaller than BungeeCord's\r\nforwarding, and is integrated into the Minecraft login process by using the 1.13\r\nlogin plugin message packet."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b13dd9087c4d6d377180",
    "number": 1552,
    "body": "This event is invoked when a player has disconnected. It is guaranteed that,\r\nif the server is in online-mode, that the provided uuid and username have been\r\nvalidated.\r\n\r\nThe event is invoked for players who have not yet logged into the world, whereas\r\nPlayerQuitEvent is only invoked on players who have logged into the world.\r\n\r\nThe event is invoked for players who have already logged into the world,\r\nalthough whether or not the player exists in the world at the time of\r\nfiring is undefined. (That is, whether the plugin can retrieve a Player object\r\nusing the event parameters is undefined). However, it is guaranteed that this\r\nevent is invoked AFTER PlayerQuitEvent, if the player has already logged into\r\nthe world.\r\n\r\nThis event is guaranteed to never fire unless AsyncPlayerPreLoginEvent has\r\nbe called beforehand, and this event may not be called in parallel with\r\nAsyncPlayerPreLoginEvent for the same connection.\r\n\r\nCancelling the AsyncPlayerPreLoginEvent guarantees the corresponding\r\nPlayerConnectionCloseEvent is never called.\r\n\r\nThe event may be invoked asynchronously or synchronously. As it stands,\r\nit is never invoked asynchronously. However, plugins should check\r\nEvent#isAsynchronous to be future-proof.\r\n\r\nOn purpose, the deprecated PlayerPreLoginEvent event is left out of the\r\nAPI spec for this event. Plugins should not be using that event, and\r\nhow PlayerPreLoginEvent interacts with PlayerConnectionCloseEvent\r\nis undefined.\r\n\r\n-------------------------------------\r\n\r\nAs a side note, PlayerPreLoginEvent in the current implementation is treated as if it were AsyncPlayerPreLoginEvent, as PlayerPreLoginEvent is called immediately after AsyncPlayerPreLoginEvent.\r\n\r\nFor now the changes are UNTESTED, and tomorrow I will write a plugin using the event and test it. I would appreciate any feedback on the event as it is WIP right now.\r\n\r\nFor example, add a PlayerProfile to the event?",
    "head_branch": "add-connection-close-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PlayerConnectionCloseEvent (#1552)\n\n* Add PlayerConnectionCloseEvent\r\n\r\nThis event is invoked when a player has disconnected. It is guaranteed that,\r\nif the server is in online-mode, that the provided uuid and username have been\r\nvalidated.\r\n\r\nThe event is invoked for players who have not yet logged into the world, whereas\r\nPlayerQuitEvent is only invoked on players who have logged into the world.\r\n\r\nThe event is invoked for players who have already logged into the world,\r\nalthough whether or not the player exists in the world at the time of\r\nfiring is undefined. (That is, whether the plugin can retrieve a Player object\r\nusing the event parameters is undefined). However, it is guaranteed that this\r\nevent is invoked AFTER PlayerQuitEvent, if the player has already logged into\r\nthe world.\r\n\r\nThis event is guaranteed to never fire unless AsyncPlayerPreLoginEvent has\r\nbeen invoked beforehand, and this event may not be called in parallel with\r\nAsyncPlayerPreLoginEvent for the same connection.\r\n\r\nCancelling the AsyncPlayerPreLoginEvent guarantees the corresponding\r\nPlayerConnectionCloseEvent is never called.\r\n\r\nThe event may be invoked asynchronously or synchronously. As it stands,\r\nit is never invoked asynchronously. However, plugins should check\r\nEvent#isAsynchronous to be future-proof.\r\n\r\nOn purpose, the deprecated PlayerPreLoginEvent event is left out of the\r\nAPI spec for this event. Plugins should not be using that event, and\r\nhow PlayerPreLoginEvent interacts with PlayerConnectionCloseEvent\r\nis undefined."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b13ed9087c4d6d377181",
    "number": 1548,
    "body": "Seems my original pull for this created an unseen bug where the target timer would never run out (the slime would not \"forget\" it's target over time). Went ahead and fixed that, and made the code more legible by adding the imports.",
    "head_branch": "FixSlimeAI",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix timer in slime AI (#1548)\n\nSeems my original pull for this created an unseen bug where the target timer would never run out (the slime would not \"forget\" it's target over time). Went ahead and fixed that, and made the code more legible by adding the imports."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b13fd9087c4d6d377182",
    "number": 1547,
    "body": "",
    "head_branch": "ZombieAPI",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add more Zombie API (#1547)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b140d9087c4d6d377183",
    "number": 1546,
    "body": "These methods are used internally throughout the game for things like spawning mobs during day/night only or making them burn in daylight, etc. Now exposed for plugin usage.",
    "head_branch": "SunStuffs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add sun related API (#1546)\n\nThese methods are used internally throughout the game for things like spawning mobs during day/night only or making them burn in daylight, etc. Now exposed for plugin usage."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b141d9087c4d6d377184",
    "number": 1545,
    "body": "",
    "head_branch": "VexSummoner",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow setting the vex's summoner (#1545)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b142d9087c4d6d377185",
    "number": 1543,
    "body": "Closes #1526",
    "head_branch": "EntityItemOwnerThrower",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b143d9087c4d6d377186",
    "number": 1538,
    "body": "flag = true is a force save of the whole world (for example World.save()), this should ignore the current chunk queue size.",
    "head_branch": "fix-world-save",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Sometimes World.save() did not save the whole world. (#1538)\n\nflag = true is a force save of the whole world (for example World.save()), this should ignore the current queue size."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b144d9087c4d6d377187",
    "number": 1535,
    "body": "Following this comment on PaperLib, https://github.com/PaperMC/PaperLib/pull/2#discussion_r222761017\r\n\r\nI've made non-snapshot TE's not update when they receive the update call. They still do the rest of the update, just not the applying of the TE data. This is to still allow forced physics updates etc. Also in the case of Jukeboxes, updating the properties",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't update snapshot blockstates (#1535)\n\nFollowing this comment on PaperLib, https://github.com/PaperMC/PaperLib/pull/2#discussion_r222761017\r\n\r\nI've made non-snapshot TE's not update when they receive the update call. They still do the rest of the update, just not the applying of the TE data. This is to still allow forced physics updates etc. Also in the case of Jukeboxes, updating the properties"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b145d9087c4d6d377188",
    "number": 1534,
    "body": "After further review of the ignited and state datawatchers it has become apparent the state needs to be set every tick, as it always reverts to -1.\r\n\r\nThis fix re-adds the commented out code for that, and moves the `CreeperIgniteEvent` in a more suitable spot that ensures it will not get spammed.",
    "head_branch": "FixCreeperIgniteEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix weird issues with Creeper ignite state (#1534)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b146d9087c4d6d377189",
    "number": 1533,
    "body": "",
    "head_branch": "EntityTypes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use EntityTypes for living entities (#1533)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b147d9087c4d6d37718a",
    "number": 1512,
    "body": "Fix #1484 ",
    "head_branch": "GH1484",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Dont strip explicit leading color codes in chat components (#1512)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b148d9087c4d6d37718b",
    "number": 1510,
    "body": "",
    "head_branch": "FixLootableExploit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix cancelled lootables (#1510)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b149d9087c4d6d37718c",
    "number": 1509,
    "body": "",
    "head_branch": "TurtleAPI",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Turtle API (#1509)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b14ad9087c4d6d37718d",
    "number": 1503,
    "body": "Amends #1502, to further fix #1501 ",
    "head_branch": "FixTurtleLagForReal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix turtle lag (for real this time) (#1503)\n\nAmends #1502, to further fix #1501"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b14bd9087c4d6d37718e",
    "number": 1502,
    "body": "Fix #1501\r\n\r\nI just added a condition check to not start a new pathfinder goal if the turtle already has one set.\r\n\r\nNeeds more testing.\r\n\r\n![Timings Comparison](https://i.imgur.com/p9eJQSo.png)",
    "head_branch": "LagFreeTurtles",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix turtle lag (#1502)\n\nFix #1501\r\n\r\nI just added a condition check to not start a new pathfinder goal if the turtle already has one set.\r\n\r\nNeeds more testing.\r\n\r\n![Timings Comparison](https://i.imgur.com/p9eJQSo.png)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b14cd9087c4d6d37718f",
    "number": 1500,
    "body": "This commit adds `BlockTickEvent` and `FluidTickEvent`.\r\n\r\nFrom the little testing I've done I saw no major side effects or lag from these events firing (with or without listeners). However, I felt it was necessary to have a toggle to enable/disable these events from ever firing with the default set to disabled.\r\n\r\nPlugins have API access to enable these events using `World#setBlockTickEventEnabled(boolean)` and `World#setFluidTickEventEnabled(boolean)` for a range of use cases. such use cases could include enabling the events only when needed, or to even disable the events if TPS is detected to drop below a threshold, etc.\r\n\r\nThere are 2 types of tick events, one being the random tick event and the other being a scheduled tick event. Plugins can use the `event#isRandomTick()` method to determine the difference.",
    "head_branch": "BlockTickEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b14dd9087c4d6d377190",
    "number": 1498,
    "body": "- Add PlayerStartSpectatingEntityEvent\r\n- Add PlayerStopSpectatingEntityEvent\r\n\r\nThis is my first pr here so if there is anything that should be different please let me know!",
    "head_branch": "spectator-target-events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add events for player changing spectator target (#1498)\n\n* Add events for player changing spectator target\r\n\r\n- Add PlayerStartSpectatingEntityEvent\r\n- Add PlayerStopSpectatingEntityEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b14ed9087c4d6d377191",
    "number": 1497,
    "body": "Implements (#1144)\r\n\r\nfor examples of the format, check the tests.\r\n\r\n**feedback welcome!**\r\n\r\nTODO:\r\n- [x] we need a way to convert enhanced format strings -> bungee chat components\r\n- [x] do we need a way to convert bungee chat components -> enhanced format strings too?\r\n- [x] we need a way to escape tokens (player input)\r\n- [x] we need a way to strip tokens (ChatColor.stripColors, maybe bungees toPlainText can be of use)\r\n- [ ] we need a setEnhancedFormat method in ChatEvents (with placeholders for name and msg)\r\n- [ ] we need getters and setters that use the enhanced string format for chat events\r\n- [x] we need a sendMessage method that uses the enhanced string format for players (what about console?)\r\n- [ ] we need a config option to hide the stuff behind (what exactly should it do? how should the api methods behave when the option is false?)\r\n- [ ] check that BufferedCommandSender works as expected\r\n- [ ] allow CraftBlockCommandSender, RemoteCommandSender to send actual components, not just plaintext\r\n\r\nFormat Todos (not sure if I wan to do all of them quite yet):\r\n- [x] colors\r\n- [x] decoration\r\n- [x] text\r\n- [x] click\r\n- [x] hover\r\n- [ ] insertion\r\n- [ ] translation\r\n- [ ] keybinding\r\n- [ ] selector\r\n- [ ] score",
    "head_branch": "feature/textualChatFormat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b14fd9087c4d6d377192",
    "number": 1494,
    "body": "Patch that implements theosib's redstone algorithms.\r\n\r\nTons faster, more stable, etc. Includes a config option to turn it on; off by default.",
    "head_branch": "feature/redstone",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimize redstone algorithm (#1494)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b150d9087c4d6d377193",
    "number": 1491,
    "body": "This adds a Bukkit (Paper) API to get and modify some basic info on villages in the world. I followed previous examples set by APIs created in Bukkit previously but haven't done anything like this before so hopefully it's the right way to do it.\r\n\r\nThere might be one or two places that we can optimize Mojang's code in this general area but I didn't want this patch to fall too out-of-scope and break every other version.",
    "head_branch": "feature/villages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b151d9087c4d6d377194",
    "number": 1487,
    "body": "getDimensionId() returns the dimension id - 1. So without this patch\r\nwe would reuse an existing dimension id, if some other dimension was\r\nunloaded before.\r\n\r\nIn Spigot this is nearly invisible because DimensionManager has no equals(),\r\nso dimension id collisions just create 2 worlds with the same dimension.\r\n\r\nThe PaperWorldMap (Added in\r\nhttps://github.com/PaperMC/Paper/blob/master/Spigot-Server-Patches/0376-Optimize-Server-World-Map.patch ) changes this - Now the dimension is overwritten if there is some collision,\r\nwhat causes players to teleport to incorrect worlds, World checks will no longer work\r\nand many more evil things.",
    "head_branch": "fix-dimension-id-overwrite",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Avoid dimension id collisions (#1487)\n\ngetDimensionId() returns the dimension id - 1. So without this patch\r\nwe would reuse an existing dimension id, if some other dimension was\r\nunloaded before.\r\n\r\nIn Spigot this is nearly invisible because DimensionManager has no equals(),\r\nso dimension id collisions just create 2 worlds with the same dimension.\r\n\r\nThe PaperWorldMap (Added in\r\nhttps://github.com/PaperMC/Paper/blob/master/Spigot-Server-Patches/0376-Optimize-Server-World-Map.patch ) changes this - Now the dimension is overwritten if there is some collision,\r\nwhat causes players to teleport to incorrect worlds, World checks will no longer work\r\nand many more evil things."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b152d9087c4d6d377195",
    "number": 1481,
    "body": "Fix #1459 by honoring EntityAgeable#ageLock",
    "head_branch": "GH1459",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Honor EntityAgeable#ageLock (#1481)\n\n* test\r\n\r\n* Obfuscation helper\r\n\r\n* Fix #1459"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b153d9087c4d6d377196",
    "number": 1480,
    "body": "JEP 181 brings a new bytecode format for nest mates. ASM API 7 supports\r\nthis, but API 7 is still experimental. Attempting to load a Java 11\r\nclass that contains nest mates will cause an\r\nUnsupportedOperationException, as API 6 can't handle them. This doesn't\r\nreally require any changes to the rest of the code, since this is just\r\nrelated to ASM's visitor.\r\n\r\nWe want to use the stable API 6 for all other plugins, only using the\r\nexperimental API when required, so we check the class version first.\r\n\r\nThis should be removed as soon as ASM API 7 is stable.\r\n\r\nThis PR is less for reviewing of the code (there's not really anything to review) and more of a discussion place / confirmation place to make sure everyone is happy with including this in Paper.",
    "head_branch": "feature/jdk11",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Enable experimental ASM support for Java 11 plugins (#1480)\n\nJEP 181 brings a new bytecode format for nest mates. ASM API 7 supports\r\nthis, but API 7 is still experimental. Attempting to load a Java 11\r\nclass that contains nest mates will cause an\r\nUnsupportedOperationException, as API 6 can't handle them. This doesn't\r\nreally require any changes to the rest of the code, since this is just\r\nrelated to ASM's visitor.\r\n\r\nWe want to use the stable API 6 for all other plugins, only using the\r\nexperimental API when required, so we check the class version first.\r\n\r\nThis should be removed as soon as ASM API 7 is stable."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b154d9087c4d6d377197",
    "number": 1468,
    "body": "",
    "head_branch": "obfhelper",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add obfuscation helper (aikar's request) (#1468)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b155d9087c4d6d377198",
    "number": 1467,
    "body": "",
    "head_branch": "getTargetEntity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add LivingEntity#getTargetEntity (#1467)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b157d9087c4d6d377199",
    "number": 1455,
    "body": "This event extends the PreCreatureSpawnEvent and includes the position\r\nof the spawner that spawned the entitiy. (similarly to how the\r\nSpawnerSpawnEvent contains the spawner's BlockState).\r\n\r\nThis one doesn't include the state though as getting the block and\r\ngenerating that snapshot is a bit wasteful.",
    "head_branch": "pr/pre-spawner-spawn-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add a separate PreSpawnerSpawnEvent (#1455)\n\nThis event extends the PreCreatureSpawnEvent and includes the position\r\nof the spawner that spawned the entitiy. (similarly to how the\r\nSpawnerSpawnEvent contains the spawner's BlockState).\r\n\r\nThis one doesn't include the state though as getting the block and\r\ngenerating that snapshot is a bit wasteful."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b158d9087c4d6d37719a",
    "number": 1452,
    "body": "And it was called twice, probably forgotten in the patch.",
    "head_branch": "fix-packet-spam-async-disconnect",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "The disconnect on packet spam must be called sync (#1452)\n\nAnd it was called twice, probably forgotten in the patch."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b159d9087c4d6d37719b",
    "number": 1451,
    "body": "Small fix for #1333 \r\n\r\nThis simply checks to see if the provided chunk is outside the world border and refuses to attempt to populate it if so.",
    "head_branch": "fix/1333",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b15ad9087c4d6d37719c",
    "number": 1442,
    "body": "Resolves #1436",
    "head_branch": "issue#1436",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b15bd9087c4d6d37719d",
    "number": 1437,
    "body": "Adds methods `Furnace#getCookSpeedMultiplier()` and\r\n`Furnace#setCookSpeedMultiplier(double)`.\r\n\r\nThis PR is basically https://github.com/IPVP-MC/Paper-1.7/commit/3516ae34efedacaf3ddd95776a9d3b1d721070fd for 1.13.\r\n\r\nA test plugin may be found [here](https://gist.github.com/supertassu/fade0cce946261732c6299e1ec89290e).",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement furnace cook speed multiplier API. (#1437)\n\nAdds methods `Furnace#getCookSpeedMultiplier()` and\r\n`Furnace#setCookSpeedMultiplier(double)`.\r\n\r\nThis PR is basically https://github.com/IPVP-MC/Paper-1.7/commit/3516ae34efedacaf3ddd95776a9d3b1d721070fd for 1.13.\r\n\r\nA test plugin may be found [here](https://gist.github.com/supertassu/fade0cce946261732c6299e1ec89290e)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b15cd9087c4d6d37719e",
    "number": 1427,
    "body": "Adds an API to allow plugins to instruct a Mob to Pathfind to a Location or Entity\r\n\r\nThis does not do anything to stop other AI rules from changing the location, so\r\nit is still up to the plugin to control that or override after another goal changed\r\nthe location.\r\n\r\nYou can use EntityPathfindEvent to cancel new pathfinds from overriding your current.\r\n",
    "head_branch": "pathfinding",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Rename some methods per discussion in channel"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b15dd9087c4d6d37719f",
    "number": 1425,
    "body": "~~This adds a new option to paper.yml to bring back the vanilla behavior of allowing non-op and non-creative users to place blocks with BlockEntityTag NBT data on them.~~\r\n\r\n~~This was snuffed out in CraftBukkit for being considered \"exploitable\" but I don't see any harm in letting server owners decide for themselves if they want this or not.~~\r\n\r\n~~The default option is `false` to leave it snuffed out the way CraftBukkit has it.~~\r\n\r\nThis allows chests with NBT to be placed into the world by any player regardless of op status or gamemode.",
    "head_branch": "NonOpBlockEntityTags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow chests to be placed with NBT (#1425)\n\nThis restores vanilla behavior of allowing placed chests to retain any Block Entity Tag data.\r\n\r\nUpstream added filtering to chests, breaking vanilla behavior, and preventing use of loot table chests as a reward mechanism.\r\n\r\nUpon review, we can find no security risk in allowing players to place a chest with NBT data, as Spawn Eggs, Minecarts, command blocks etc all have their own checks.\r\n\r\nAdditionally, survival mode players, non op players can not create these items anyways. If a player has Creative or Op, they already have high levels of access.\r\n\r\nPlus, Chests aren't the only inventory that could have free form items, so this filter was insufficient anyways."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b15ed9087c4d6d3771a0",
    "number": 1422,
    "body": "Spell_Mob and Spell_Mob_Ambient were to use the DustOptions data type. But that just causes redstone to be spawned when called (does not color the spell particles). I found no nms evidence that either of these support colors still in 1.13. So revert that Paper change. Issue mentioned in #1418 \r\n\r\nSimilar issue is I fixed the ParticleBuilder's color method, which did not use DustOptions, so it simply did not work anymore. \r\n\r\nThis should resolve all known 1.13 paper particle issues.",
    "head_branch": "particle-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix invalid data types for particles and fix colors in the ParticleBuilder (#1422)\n\n* Fix invalid data types for particles and fix colors in the ParticleBuilder"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b15fd9087c4d6d3771a1",
    "number": 1421,
    "body": "This fixes #1420 by skipping the `PlayerPickupArrowEvent` to match vanilla behavior of not being able to pick up fully damaged tridents.",
    "head_branch": "GH1420",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #1420 (#1421)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b160d9087c4d6d3771a2",
    "number": 1419,
    "body": "Aims to fix #1349 by properly using the view distance API in the EntityTracker.\r\nAlso removed the Math.max line which caused the (original) issue of not being able to set the distance lower than spigot's view distance, and replaced more occurrences of the spigot viewdistance with the API. (I believe I've got them all, directly or indirectly)\r\n\r\n",
    "head_branch": "ViewDistance",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix view distance API (#1419)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b161d9087c4d6d3771a3",
    "number": 1416,
    "body": "",
    "head_branch": "BlockMoistureChangeEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b162d9087c4d6d3771a4",
    "number": 1412,
    "body": "Adds #1224 \r\n\r\nI exposed 3 things:\r\n\r\n* `Player#resetCooldown()` - Will reset the cooldown counter. This happens at the *start* of a swing, so you can use this for magic spells or whatever to start the cooldown.\r\n* `Player#getCooledAttackStrength(float adjustTicks)` - Gives a percentage (0.0-1.0) of the attack power available based on the cooldown. `adjustTicks` will add to the current cooldown counter to fine tune the result of *this* calculation\r\n* `Player#getCooldownPeriod()` - The amount of ticks the cooldown will last for in total.",
    "head_branch": "AttackCooldown",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expose attack cooldown methods for Player (#1412)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b163d9087c4d6d3771a5",
    "number": 1411,
    "body": "Adds #1393 ",
    "head_branch": "GH1393",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add creative-arrow-despawn-rate (#1411)\n\n* Add creative-arrow-despawn-rate"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b164d9087c4d6d3771a6",
    "number": 1410,
    "body": "This method will return the Block a player is looking at while taking into consideration the AABB of each block in the path.\r\n\r\nFor example, you can look through the 1/4 space of air in a Stair block and get the block behind it instead of the Stair block you are looking past.",
    "head_branch": "PlayerGetTrueTargetBlock",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add ray tracing methods to LivingEntity (#1410)\n\nThis method will return the Block a player is looking at while taking into consideration the AABB of each block in the path.\r\n\r\nFor example, you can look through the 1/4 space of air in a Stair block and get the block behind it instead of the Stair block you are looking past."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b165d9087c4d6d3771a7",
    "number": 1409,
    "body": "Fixes issue #1177 \r\n\r\n`MapMaker#weakKeys()` makes the `Map` use identity comparison for the keys, while also enabling the automatical removal of dropped classes from the cache.\r\n\r\nThe changes are the same as in #1399, except now the original patch is modified instead of a new one being created.",
    "head_branch": "issue#1177",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Cached, local-class-supporting task names (#1409)\n\nFixes issue #1177 \r\n\r\n`MapMaker#weakKeys()` makes the `Map` use identity comparison for the keys, while also enabling the automatical removal of dropped classes from the cache.\r\n\r\nThe changes are the same as in #1399, except now the original patch is modified instead of a new one being created."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b166d9087c4d6d3771a8",
    "number": 1407,
    "body": "Resolves #1403\r\n\r\nCopypasta of aikar's code. Should load any chunk that is generated.",
    "head_branch": "issue-1403",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make CraftWorld#loadChunk(int, int, false) load unconverted chunks (#1407)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b167d9087c4d6d3771a9",
    "number": 1399,
    "body": "Fixes issue #1177 \r\n\r\n`MapMaker#weakKeys()` makes the `Map` use identity comparison for the keys, while also enabling the automatical removal of dropped classes from the cache.",
    "head_branch": "issue#1177",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b168d9087c4d6d3771aa",
    "number": 1397,
    "body": "# Async Chunk Loading and Generation - BETA\r\n\r\n**STAGE:**\r\nSTABLE: Should be safe for production. No known bugs at this time. Nearing ready for merge\r\nCustom World Gens are now supported. Conversion from pre 1.13 worlds is supported and async!\r\n\r\n**BETA TESTERS:** \r\nLatest builds of this will be provided (as Paperclip patchers) here: https://aikar.co/async.jar\r\n\r\n**DISCLAIMER:**\r\nAgain this is beta - please ensure you have backups.\r\n\r\nThese builds are now to the point they should be safe to run in production.\r\nThere has not been any reported issues yet of any data loss.\r\n\r\nHowever, bugs could lead to server crashes, but they should mostly be worked out now.\r\n\r\n**TODO LIST:**\r\nSEE: https://github.com/PaperMC/Paper/projects/2\r\n\r\n**DONATE:**\r\nLots of effort has went into making this happen. Want to say thanks and donate? \r\n[![Foo](http://aikar.co/donate.png)](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=payments%40starlis%2ecom&lc=US&item_name=AsyncChunksDonation&no_note=0&currency_code=USD&bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHostedGuest)",
    "head_branch": "async-chunks",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Async Chunk Loading and Generation (#1397)\n\nThis restores Asynchronous Chunk Loading to 1.13, as well as adds Asynchronous Chunk Generation..\r\n\r\nThis provides a massive boost to server performance and should bring 1.13 back closer to 1.12 performance levels for pre generated worlds.\r\n\r\nWorld Generation will now be faster overall than 1.12 since 1.12 did not have async generation.\r\n\r\n\r\n**DONATE:**\r\nLots of effort has went into making this happen. Want to say thanks and donate? \r\n\r\nhttps://donate.emc.gs/AsyncChunks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b169d9087c4d6d3771ab",
    "number": 1396,
    "body": "Haven't tested it yet but want some feedback on the actual API/interfaces as I've not yet made API before",
    "head_branch": "custom-advancements-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b16ad9087c4d6d3771ac",
    "number": 1390,
    "body": "(no i dont actually expect this to get merged)",
    "head_branch": "retarded-light-parallelism",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b16bd9087c4d6d3771ad",
    "number": 1387,
    "body": "",
    "head_branch": "api/forced-chunk",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Force-Loaded Chunk API (#1387)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b16cd9087c4d6d3771ae",
    "number": 1380,
    "body": "",
    "head_branch": "FixExplosionsNotDoingDamage",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix explosions not doing damage to entities (#1380)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b16dd9087c4d6d3771af",
    "number": 1379,
    "body": "Add support to track timings for each command function individually",
    "head_branch": "pre/1.13",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add timings support to command functions (#1379)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b16ed9087c4d6d3771b0",
    "number": 1375,
    "body": "",
    "head_branch": "PhantomSpawnEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PhantomSpawnEvent (#1375)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b16fd9087c4d6d3771b1",
    "number": 1372,
    "body": "",
    "head_branch": "CreeperStuffs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add More Creeper API (#1372)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b170d9087c4d6d3771b2",
    "number": 1371,
    "body": "#1364 in 1.13",
    "head_branch": "pre/1.13",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b171d9087c4d6d3771b3",
    "number": 1369,
    "body": "https://bugs.mojang.com/browse/MC-124320",
    "head_branch": "MC-124320",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix MC-124320 (#1369)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b172d9087c4d6d3771b4",
    "number": 1368,
    "body": "Noticed how inefficient this was, so ~~Aikar~~ I made a solution for it by using functions instead *cough*",
    "head_branch": "fix-this-stupid-reflection-crap",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Cached IBlockData to CraftBlockData conversion (#1368)\n\nAvoid using reflection to create CraftBlockData instances. \r\n\r\nComputes the class to use on IBlockData creation and clones it when needed."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b173d9087c4d6d3771b5",
    "number": 1367,
    "body": "Currently, getting BlockData from a Block does some insane checking and then reflection for instantiating every time, when it doesn't even need to be instantiated every time to begin with. This PR makes it all cached at runtime, virtually eliminating the cost of calling Block#getBlockData",
    "head_branch": "fix-this-stupid-reflection-crap",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b174d9087c4d6d3771b6",
    "number": 1366,
    "body": "Resolves #1230 \r\nProbably resolves #1183 \r\n\r\nSpecial thanks to @Spottedleaf who helped me with decompile errors. Thank you for the support on IRC and thanks to everyone who motivated me by being interested in this.\r\n\r\nhttps://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=M9XHJ5E4XNXGE",
    "head_branch": "feature/anti-xray/2.0/pre/1.13",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "1.13: Readd Anti-Xray (#1366)\n\n* Decompile fixes for ProtoChunk and DataPaletteBlock\r\n\r\n* Do changes\r\n\r\n* final change\r\n\r\n* more changes\r\n\r\n* First Anti-Xray build\r\n\r\n* Fixes and cleanups\r\n\r\n* Cleanups and renamings\r\n\r\n* Cleanups renamings and move OBFHELPERs to 0004-MC-Utils.patch\r\n\r\n* Implement obfuscation for newly generated chunks\r\n\r\n* Implement chunk edge mode\r\n\r\n* Implement block updates\r\n\r\n* Cleanups\r\n\r\n* Rebuild patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b175d9087c4d6d3771b7",
    "number": 1364,
    "body": "Resolves #1275 \r\n\r\nFor plants, the source block is itself, because the `changed` type is itself.",
    "head_branch": "source-block",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add source block to BlockPhysicsEvent (#1364)\n\nResolves #1275 \r\n\r\nFor plants, the source block is itself, because the `changed` type is itself."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b176d9087c4d6d3771b8",
    "number": 1363,
    "body": "Resolves #1329 ",
    "head_branch": "is-chunk-generated",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add isChunkGenerated API (#1363)\n\nResolves #1329"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b177d9087c4d6d3771b9",
    "number": 1362,
    "body": "This adds the ability to cancel the events and to specify the sound.\r\n\r\nIt should make handling of entity and player deaths a lot better than trying to fiddle with the damage event, especially as that has no ability to get the actual drops of an entity (or the proper death sound). There also is a method to set the health that the entity (or player) revives with (by default it will just use the maxhealth) which is also compatible with plugins that might set the health directly in the listener for whatever reason.",
    "head_branch": "pr/improve-death-events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve death events (#1362)\n\n* Improve death events\r\n\r\nThis adds the ability to cancel the events and to specify the sound."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b178d9087c4d6d3771ba",
    "number": 1344,
    "body": "",
    "head_branch": "run-forest-run",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix watchdog restarting on short timeout (#1344)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b179d9087c4d6d3771bb",
    "number": 1342,
    "body": "What I have done is bring some things back from HopperHelper (from TacoSpigot).\r\n\r\nI have made/modified hoppers to do more lookups based on it's current chunks (using getCurrentChunk()) rather than re-looking up.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b17ad9087c4d6d3771bc",
    "number": 1339,
    "body": "Resolves #1338",
    "head_branch": "issue-1338",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimize BlockPosition helper methods (#1339)\n\nResolves #1338"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b17bd9087c4d6d3771bd",
    "number": 1335,
    "body": "The key can be retrieved via methods Location#toBlockKey() and\r\nBlock#getBlockKey()\r\n\r\nWorld provides lookup for blocks by long key via method World#getBlockAtKey(long)\r\n\r\nThe formatting for the key is as follows:\r\n\r\n10 bit y|27 bit z|27 bit x\r\n\r\nThe y value is considered unsigned while z and x are considered two's complement\r\n\r\nY range: [0, 1023]\r\nX, Z range: [-67 108 864, 67 108 863]\r\n\r\n\r\nChecked encoding and decoding via https://gist.github.com/Spottedleaf/74f4e241012ca2fa67d8f1c7e8e34722",
    "head_branch": "told_you_it_fit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow Blocks to be accessed via a long key (#1335)\n\nThe key can be retrieved via methods Location#toBlockKey() and\r\nBlock#getBlockKey()\r\n\r\nWorld provides lookup for blocks by long key via method World#getBlockAtKey(long)\r\n\r\nThe formatting for the key is as follows:\r\n\r\n10 bit y|27 bit z|27 bit x\r\n\r\nThe y value is considered unsigned while z and x are considered two's complement\r\n\r\nY range: [0, 1023]\r\nX, Z range: [-67 108 864, 67 108 863]\r\n\r\n\r\nChecked encoding and decoding via https://gist.github.com/Spottedleaf/74f4e241012ca2fa67d8f1c7e8e34722"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b17cd9087c4d6d3771be",
    "number": 1334,
    "body": "Features:\r\n* Qualifying spawn chunks by count for player area.\r\n* Several optimizations to the vanilla spawn routine\r\n  * More iterations for pack spawning\r\n  * Hold off player range checks until end of check\r\n  * Chunk-based cache for creature type spawn counts\r\n  * Does player loops first, creature loops last\r\n* Tested 👍 works maybe too well. \r\n* Prevents pooling for chunks common to multiple players spawn area\r\n* Random sorting for qualified spawn chunks (less hotspots).",
    "head_branch": "mobspawn2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b17dd9087c4d6d3771bf",
    "number": 1326,
    "body": "Porting EMC's long standing API to Paper. Looking for feedback.\r\n\r\nThis is not done yet.\r\n\r\nSee in code form at https://github.com/aikar/Bukkit/commits/meta",
    "head_branch": "meta",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b17ed9087c4d6d3771c0",
    "number": 1325,
    "body": "The permissions reloading patch didn't respect the `loadPermsBeforePlugins` setting or register default perms. I have changed it to more closely match `enablePlugins`",
    "head_branch": "fix-reload-permissions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix custom permissions reloading (#1325)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b17fd9087c4d6d3771c1",
    "number": 1324,
    "body": "Fixes the nether portals that generate with the little side \"platforms\" when no other space is available, for example above an ocean.",
    "head_branch": "fix-portal-create-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix PortalCreateEvent again (#1324)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b180d9087c4d6d3771c2",
    "number": 1322,
    "body": "Particle packets contain a boolean which marks the particle to either force or show normal to the receiver.\r\nSpigot has been sending all particles with the force boolean which overrides client particle settings.\r\n\r\nRelated changes in this commit;\r\n- Add a force option to the ParticleBuilder API, which defaults to true to keep spigot consistent with existing api.\r\n- Add a new spawnParticle method to support this mode as a parameter. Of course kept existing api methods the same so as to not break them.\r\n\r\nLet me know if changes are needed.",
    "head_branch": "particle-force",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add a force option to the ParticleBuilder API (#1322)\n\nParticle packets contain a boolean which marks the particle to either force or show normal to the receiver.\r\nSpigot has been sending all particles with the force boolean which overrides client particle settings.\r\n\r\nRelated changes in this commit;\r\n- Add a force option to the ParticleBuilder API, which defaults to true to keep spigot consistent with existing api.\r\n- Add a new spawnParticle method to support this mode as a parameter. Of course kept existing api methods the same so as to not break them.\r\n\r\nLet me know if changes are needed."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b181d9087c4d6d3771c3",
    "number": 1315,
    "body": "**Cache ent counts (#1207)**\r\n* Tested and works 👍 compared counts using both methods after a bunch of chunk loads/unload and whatnot.\r\n* ~~Made it super generic... although this method is only used by SpawnerCreature.~~\r\n* ~~Can also put the \"a\" method back how it was and just change SpawnerCreature. It does have an O(n) complexity based on the number of cached counts its keeping when adding and removing ents, so if we limit it to just SpawnerCreature we'll know it only keeps 4 cached counts.~~\r\n* ~~Can also limit cache checks just to EntityCreature so we dont have to do anything special for items, xp orbs, and all that when adding or removing them to the world. ~~\r\n\r\n~~**Water over lava (#1227)**~~\r\n* ~~Works, just ported the patch over (exists in BlockFluids in 1.13)~~",
    "head_branch": "pre/1.13",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "pr changes, flat array"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b182d9087c4d6d3771c4",
    "number": 1314,
    "body": "too tired to rewrite this",
    "head_branch": "micles-MITtens-make-watchdog-print-after-5s-freeze",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b183d9087c4d6d3771c5",
    "number": 1313,
    "body": "i'm too tired to rewrite the message",
    "head_branch": "micles-MITtens-make-watchdog-print-after-5s-freeze",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b184d9087c4d6d3771c6",
    "number": 1312,
    "body": "This makes watchdog more useful by giving a more complete picture of what's freezing the main thread when it's frozen. It also helps finding the cause of short freezes without crashing the whole server whenever it freezes for 5 seconds.",
    "head_branch": "micles-mittens-making-watchdog-print-after-5min-freeze",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b185d9087c4d6d3771c7",
    "number": 1310,
    "body": "A bit changed here, but ultimately it's all optimizations Aikar suggested in #1289 \r\n\r\nRadius/search functions will now use CraftWorld.getNearbyEntities which will allow for a future patch to optimize that function's behavior and give those benefits to the functions in this one.\r\n\r\nAside from a few \"fail-fast\" edge-case optimizations that's really about it. Nothing super fancy but it's better than it was and it lays groundwork for better stuff in the future.\r\n\r\nI also took some liberties with re-naming variables to make it more readable. At least this way we can see what each function does and how it does it without running in circles around the variable names. Took me a while to figure out what exactly was going on myself, and I had some help with the mob targeting function.",
    "head_branch": "pre/1.13",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b186d9087c4d6d3771c8",
    "number": 1309,
    "body": "Fixes #471 \r\n\r\nAdded benefits of using a ConcurrentHashMap here include the ability to check bans in the async pre-login event.\r\n\r\nPretty straightforward patch, tested and seems working.\r\n\r\nUltimately the idea was to use a computeIfPresent to keep the O(1) lookup time in the get method. Since none of the methods previously relating to this specific functionality seem to actually save the new map if a value is expired I didn't bother adding anything like that either.\r\n\r\nAdditionally I modified the function that actually iterates the map to remove values to be much more efficient. Although now unused in the current class, reflection/NMS stops me from removing it entirely and leads me to simply optimizing it instead.\r\n\r\nOriginal ideas were to use an expiring map or cache of some kind, which is what I originally went with but then remembered computeIfPresent existed.\r\n\r\nI used ConcurrentMap specifically so future patches can piggyback of its thread-safe ability to do more async. The usage of the new map type, in the vast majority of cases, will not have a performance detriment due to the fact that most calls will be to the get method and not add or remove.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use ConcurrentHashMap in JsonList & Optimize (#471) (#1309)\n\n* [CI-SKIP] add .editorconfig for base code style settings\r\n\r\n* * Created patch 0349 (fixes #471)\r\n\r\n* * Made requested modifications\r\n\r\n* * Made requested modifications (x2)\r\n\r\n* * Made recommended changes (x3)\r\n\r\n* * Moved ConcurrentMap return values to Map as no functions specific to ConcurrentMap were used (backing map is still ConcurrentMap)\r\n* Removed ConcurrentMap import"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b187d9087c4d6d3771c9",
    "number": 1308,
    "body": "Adds #1307",
    "head_branch": "skull-blocks-profile-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[1.13] Skull block profile api (#1308)\n\nAdds #1307"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b188d9087c4d6d3771ca",
    "number": 1301,
    "body": ":tada: ",
    "head_branch": "fix-mc-135506",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix \"MC-135506: Experience should save as Integers\" still saving as short\" (#1301)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b189d9087c4d6d3771cb",
    "number": 1300,
    "body": "This adds the `getHand()` method to the `PlayerBucketEvent`s",
    "head_branch": "HandForBucketEvents",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[1.13] Hand for bucket events (#1300)\n\nThis adds the `getHand()` method to the `PlayerBucketEvent`s"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b18ad9087c4d6d3771cc",
    "number": 1292,
    "body": "In vanilla/CB/spigot, the obsidian portal frame is placed before the nether_portal blocks inside. The paper patch places them afterwards from a HashMap, which is causing nether_portal blocks to disappear due to physics when the obsidian blocks are placed next to them. Fixed by using a LinkedHashMap instead.",
    "head_branch": "fix-portal-create-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix nether portals (#1286)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b18bd9087c4d6d3771cd",
    "number": 1291,
    "body": "Fixes #1290\r\n\r\nThis reduces the average lookup time from ~20ms to ~5ms ([Raw Results](https://gist.github.com/willies952002/cfdee035e73466f66021ddecbb0d1841))",
    "head_branch": "pre/1.13",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "World EntityHuman Lookup Optimizations (#1291)\n\nFixes #1290"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b18cd9087c4d6d3771ce",
    "number": 1283,
    "body": "",
    "head_branch": "SkeletonHorseAdditions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "SkeletonHorse Additions (#1283)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b18ed9087c4d6d3771cf",
    "number": 1281,
    "body": "Baby steps into the doorway....\r\n\r\n> @BillyGalbreath helped me, so if it's broke blame him",
    "head_branch": "EntityDrownedEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "EntityTransformedEvent (#1281)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b18fd9087c4d6d3771d0",
    "number": 1279,
    "body": "Spigot 1.13 checks if any field (which are manually copied from the ItemStack's \"tag\" NBT tag) on the ItemMeta class of an ItemStack is set.\r\n\r\nWe could just check if the \"tag\" NBT tag is empty, albeit that would break some plugins. The only general tag added on 1.13 is \"Damage\", and we can just check if the \"tag\" NBT tag contains any other tag that's not \"Damage\" (https://minecraft.gamepedia.com/Player.dat_format#Item_structure) making the `hasItemStack` method behave as before.\r\n\r\nCheck the `ItemMetaTest#testTaggedButNotMeta` method to see how this method behaves. (I also added some extra tests).\r\n\r\n`hasItemMeta()` will return true if `ItemStack.getDamage() != 0` or it has the `Damage` tag or any other tag is set.\r\n\r\nCloses #1222",
    "head_branch": "optimize-item-meta",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimize hasItemMeta (remove getItemMeta call) (#1279)\n\nSpigot 1.13 checks if any field (which are manually copied from the ItemStack's \"tag\" NBT tag) on the ItemMeta class of an ItemStack is set.\r\n\r\nWe could just check if the \"tag\" NBT tag is empty, albeit that would break some plugins. The only general tag added on 1.13 is \"Damage\", and we can just check if the \"tag\" NBT tag contains any other tag that's not \"Damage\" (https://minecraft.gamepedia.com/Player.dat_format#Item_structure) making the `hasItemStack` method behave as before.\r\n\r\nCheck the `ItemMetaTest#testTaggedButNotMeta` method to see how this method behaves. (I also added some extra tests).\r\n\r\n`hasItemMeta()` will return true if `ItemStack.getDamage() != 0` or it has the `Damage` tag or any other tag is set.\r\n\r\nCloses #1222"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b190d9087c4d6d3771d1",
    "number": 1277,
    "body": "Add the following:\r\n- Add proper methods for getting and setting items in both hands. Deprecates old methods\r\n- Enable/Disable slot interactions",
    "head_branch": "pre/1.13",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expand ArmorStand API (#1277)\n\nAdd the following:\r\n- Add proper methods for getting and setting items in both hands. Deprecates old methods\r\n- Enable/Disable slot interactions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b191d9087c4d6d3771d2",
    "number": 1276,
    "body": "Setting the flag updates the spawner's delay which stops the spawner from trying to find a new spawn position each tick efter the event was cancelled/aborted which makes it usable for mob stackers/mergers and other plugins that don't actually want any mob to spawn in the spawner cycle but keep the overall behaviour close to vanilla.\r\n\r\nThis might slightly effect existing plugins that use this event but I doubt anyone really relied on this behaviour, the only possible use case that I can think of is cancelling the event until you find a suitable position in your plugin... and this should be handled by the plugin itself by cancelling and spawning at the position manually.",
    "head_branch": "pr/spawner-pre-spawn-delay",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Apply spawner delay for cancelled pre spawn events (#1276)\n\nSetting the flag updates the spawner's delay which stops the spawner from trying to find a new spawn position each tick efter the event was cancelled/aborted which makes it usable for mob stackers/mergers and other plugins that don't actually want any mob to spawn in the spawner cycle but keep the overall behaviour close to vanilla.\r\n\r\nThis might slightly effect existing plugins that use this event but I doubt anyone really relied on this behaviour, the only possible use case that I can think of is cancelling the event until you find a suitable position in your plugin... and this should be handled by the plugin itself by cancelling and spawning at the position manually."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b192d9087c4d6d3771d3",
    "number": 1269,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/1259 and generation of the end pillars",
    "head_branch": "fix-paper-1.13-block-iteration",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix broken block iteration (#1269)\n\nFixes https://github.com/PaperMC/Paper/issues/1259 and generation of the end pillars"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b193d9087c4d6d3771d4",
    "number": 1262,
    "body": "Apparently I wasn't already on this list..",
    "head_branch": "pre/1.13",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Add Self to MIT List (#1262)\n\nApparently I wasn't already on this list.."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b194d9087c4d6d3771d5",
    "number": 1261,
    "body": "I agree to license all of my current and future Paper changes under the MIT license.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1261 from astei/patch-1\n\nAdd myself to the MIT list"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b195d9087c4d6d3771d6",
    "number": 1258,
    "body": "Fixes falling dragon eggs in lazy chunks fall to the block below the last empty block and replacing that block with them.\r\n\r\nAlthough the original issue was resolved in 2017 (https://bugs.mojang.com/browse/MC-94186), the same FallingBlock logic is still overriden and the dragon egg can fall into the block just below the last empty block and replace it with it.",
    "head_branch": "patch/dragon-lazy-chunks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b196d9087c4d6d3771d7",
    "number": 1257,
    "body": "Fixes #1253",
    "head_branch": "pre/1.13",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Put the decompile fixes into MC Dev Fixes patch"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b197d9087c4d6d3771d8",
    "number": 1256,
    "body": "Readds patch 0177. Moves away from `AxisAlignedBB`s to `VoxelShape`s.\r\n\r\nThe `checkNoVisiblePlayerCollisions` method is similar to the `a(Entity, VoxelShape)` method.\r\n\r\nThe `defaultReturn` boolean was adapted to use the `VoxelShape` provided by `IBlockData#h(World, BlockPosition)`, which is also used in the `EntityArrow` class (which I used as inspiration). Here's the changes on that class:\r\n\r\n1.12:\r\n```java\r\nif (iblockdata.getMaterial() != Material.AIR) {\r\n        AxisAlignedBB axisalignedbb = iblockdata.d(this.world, blockposition); // Moved to VoxelShape\r\n\r\n        if (axisalignedbb != Block.k && axisalignedbb.a(blockposition).b(new Vec3D(this.locX, this.locY, this.locZ))) {\r\n            this.inGround = true;\r\n        }\r\n}\r\n```\r\n\r\n1.13:\r\n```java\r\nif (!iblockdata.isAir() && !flag) {\r\n        VoxelShape voxelshape = iblockdata.h(this.world, blockposition);\r\n\r\n        if (!voxelshape.b()) {\r\n            // Other code\r\n           }\r\n        }\r\n}\r\n```",
    "head_branch": "patch/vanished-players",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix decompile error"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b198d9087c4d6d3771d9",
    "number": 1254,
    "body": "The `getCubes(Entity, AxisAlignedBB)` method has been moved from the `World` nms class to the `IWorldReader` interface default method and the return type has been changed from a List of bouding boxes to a boolean.\r\n\r\nI've checked this is the correct method by going into a method that didn't change between 1.12 and 1.13 such as `EntityGhast.ControllerGhash#b(double, double, double, double)` and checked the same logic still applies.",
    "head_branch": "patch/readd-armorstand-ent-lookup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Re-add Option to prevent armor stands from doing entity lookups\n\nRemove old patch"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b199d9087c4d6d3771da",
    "number": 1250,
    "body": "Added code that refreshes the player's skin by sending packets with a special order, telling the client to respawn the player and re-apply the game profile",
    "head_branch": "player-refresh-profileapi",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed more stuff"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b19ad9087c4d6d3771db",
    "number": 1249,
    "body": "Replaces PR #1193 for 1.13\r\n\r\nI'm pretty sure I got all player launched projectiles (except arrows). Let me know if I missed any.\r\n\r\nThis fixes a use-case specific issue that was discovered [here](https://www.spigotmc.org/threads/projectilehitevent-doesnt-work-in-survival-mode.327097/page-2#post-3059433). I have a use-case example a few posts down, [here](https://www.spigotmc.org/threads/projectilehitevent-doesnt-work-in-survival-mode.327097/page-2#post-3060204).",
    "head_branch": "PlayerLaunchProjectileEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "1.13: Player launch projectile event (#1249)\n\nReplaces PR #1193 for 1.13\r\n\r\nI'm pretty sure I got all player launched projectiles (except arrows). Let me know if I missed any.\r\n\r\nThis fixes a use-case specific issue that was discovered [here](https://www.spigotmc.org/threads/projectilehitevent-doesnt-work-in-survival-mode.327097/page-2#post-3059433). I have a use-case example a few posts down, [here](https://www.spigotmc.org/threads/projectilehitevent-doesnt-work-in-survival-mode.327097/page-2#post-3060204)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b19bd9087c4d6d3771dc",
    "number": 1248,
    "body": "Replaces PR #1194 for 1.13\r\n\r\nTested with https://hasteb.in/ifokukik.coffeescript",
    "head_branch": "PlayerElytraBoost",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PlayerElytraBoostEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b19cd9087c4d6d3771dd",
    "number": 1247,
    "body": "Replaces PR #1185 for 1.13\r\n\r\nAdd some new cancellable enderdragon events dealing with its fireball shooting and the areaeffectcloud it spawns. Based on [talking with someone with a specific use-case](https://www.spigotmc.org/threads/cancel-projectilehitevent.326466/) this was [confirmed to work](http://i.imgur.com/ezlfpKC.png) for them in PM.",
    "head_branch": "EnderDragonEvents",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "1.13: EnderDragon Events (#1247)\n\nReplaces PR #1185 for 1.13\r\n\r\nAdd some new cancellable enderdragon events dealing with its fireball shooting and the areaeffectcloud it spawns. Based on [talking with someone with a specific use-case](https://www.spigotmc.org/threads/cancel-projectilehitevent.326466/) this was [confirmed to work](http://i.imgur.com/ezlfpKC.png) for them in PM."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b19dd9087c4d6d3771de",
    "number": 1246,
    "body": "Replaces PR #1161 for 1.13\r\n\r\nResolves #930 \r\n\r\nAdds new slime pathfinder related events. All events can be cancelled.\r\n- `SlimePathfindEvent` is the base event of all added events. Cancelling this event will cancel all pathfinders.\r\n- `SlimeWanderEvent` is called when slimes wander around by either swimming or moving/jumping forward. Cancelling this event will prevent slimes from moving around and jumping, but they will still look around and target players.\r\n- `SlimeSwimEvent`is called when slimes are swimming in water/lava. Cancelling will prevent the slimes from moving/jumping in water/lava.\r\n- `SlimeChangeDirectionEvent` is called when a slime changes directions. It contains the new `yaw` position the slime wants to change to, and it can be set to another value. Cancelling this event will prevent slimes from changing directions (except for when targeting players).\r\n- `SlimeTargetLivingEntityEvent` is called when a slime targets a player. NMS uses EntityLiving here so it is named this. Contains the LivingEntity the slime has targeted. Cancelling this event will prevent the slime from targeting the entity and will make it lose current focus.\r\n\r\nAdds `Slime#canWander()` and `Slime#setWander(boolean)` for a more persistent control (does not persist server restarts) over all 4 pathfinder types without the spammy event having to be cancelled a bajillion times a second.\r\n\r\nVideo demonstration: https://youtu.be/8hcLqazmO28\r\n\r\nTest plugin: https://pastebin.com/cFgcgdWV",
    "head_branch": "SlimeStuff",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "1.13: Slime Patherfinder Events (#1246)\n\nReplaces PR #1161 for 1.13\r\n\r\nResolves #930 \r\n\r\nAdds new slime pathfinder related events. All events can be cancelled.\r\n- `SlimePathfindEvent` is the base event of all added events. Cancelling this event will cancel all pathfinders.\r\n- `SlimeWanderEvent` is called when slimes wander around by either swimming or moving/jumping forward. Cancelling this event will prevent slimes from moving around and jumping, but they will still look around and target players.\r\n- `SlimeSwimEvent`is called when slimes are swimming in water/lava. Cancelling will prevent the slimes from moving/jumping in water/lava.\r\n- `SlimeChangeDirectionEvent` is called when a slime changes directions. It contains the new `yaw` position the slime wants to change to, and it can be set to another value. Cancelling this event will prevent slimes from changing directions (except for when targeting players).\r\n- `SlimeTargetLivingEntityEvent` is called when a slime targets a player. NMS uses EntityLiving here so it is named this. Contains the LivingEntity the slime has targeted. Cancelling this event will prevent the slime from targeting the entity and will make it lose current focus.\r\n\r\nAdds `Slime#canWander()` and `Slime#setWander(boolean)` for a more persistent control (does not persist server restarts) over all 4 pathfinder types without the spammy event having to be cancelled a bajillion times a second.\r\n\r\nVideo demonstration: https://youtu.be/8hcLqazmO28\r\n\r\nTest plugin: https://pastebin.com/cFgcgdWV"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b19ed9087c4d6d3771df",
    "number": 1245,
    "body": "Minecraft 1.13 requires resending the block for both parts of the bed",
    "head_branch": "1.13-fix-cancelled-bed-break",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "1.13: Resend bed on cancelled interaction (#1245)\n\nMinecraft 1.13 requires resending the block for both parts of the bed"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b19fd9087c4d6d3771e0",
    "number": 1244,
    "body": "Replaces PR #981 for 1.13",
    "head_branch": "AnvilDamageEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Rebuild Patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b1a0d9087c4d6d3771e1",
    "number": 1243,
    "body": "Added code that refreshes the player's skin by sending packets with a special order, telling the client to respawn the player and re-apply the game profile",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1a1d9087c4d6d3771e2",
    "number": 1240,
    "body": "Fixes empty lines in warnings/errors: https://korobi.io/network/spigot/channel/paper/logs/#L829-832\r\n\r\nSee https://github.com/Minecrell/TerminalConsoleAppender/releases/tag/1.1.1",
    "head_branch": "tca-111",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update to TerminalConsoleAppender 1.1.1 (#1240)\n\nSee https://github.com/Minecrell/TerminalConsoleAppender/releases/tag/1.1.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1a2d9087c4d6d3771e3",
    "number": 1239,
    "body": "Regenerating patches renames them because there are multiple patches with the same number.",
    "head_branch": "patch-naming",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1a3d9087c4d6d3771e4",
    "number": 1238,
    "body": "i want MITtens",
    "head_branch": "pre/1.13",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1a4d9087c4d6d3771e5",
    "number": 1221,
    "body": "Update TerminalConsoleAppender and JLine to fix a race condition that may result in `IllegalStateException`s or duplicate input prompts. Switch to async loggers as an attempt to avoid #1176 in most cases, although it will only work as long the console is only temporary blocking - otherwise the queue will fill up and it will block again.\r\n\r\nFixes #1093, Fixes #1176 \r\n\r\nRelated changes for Waterfall: https://github.com/WaterfallMC/Waterfall/pull/249",
    "head_branch": "tca-110",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use asynchronous Log4j 2 loggers"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1a5d9087c4d6d3771e6",
    "number": 1217,
    "body": "Closes #1211",
    "head_branch": "feature/skip-merge-item",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Avoid item merge if stack size above max stack size (#1217)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1a6d9087c4d6d3771e7",
    "number": 1214,
    "body": "Closes #1210 ",
    "head_branch": "feature/add-tntprimeevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add TNTPrimeEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b1a7d9087c4d6d3771e8",
    "number": 1212,
    "body": "Closes #860. When the `tickEntities` method of `World` gets called, the following methods get called:\r\n\r\n- `void Entity.B_()`\r\n- `void Entity.Y()`\r\n- `boolean Entity.au()`\r\n- `boolean World.a(AxisAlignedBB, Material)`\r\n- `IBlockData getType(BlockPosition)`\r\n- `Chunk ChunkProviderServer.getChunkAt(int, int)`\r\n\r\nThe later method will load the chunk synchronously if it isn't yet, seen on the timings report as `syncChunkLoad`.\r\n\r\nI just overrided the `au()` method on the firework entity to only check if the chunk is loaded.\r\n\r\nI'm sorry for making the change on a commit with a completely different message, this was my first time contributing and didn't know I had to manually commit the patch (after commiting on the `Paper-Server` module).",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1a8d9087c4d6d3771e9",
    "number": 1205,
    "body": "When interacting with entities with an item, the client will assume\r\nthe interaction is successful, and update the held item on the\r\nclient. However, if the interaction is cancelled on the server side,\r\nthe client will still mistakenly remove/replace the item in hand.\r\n\r\nExamples for this are milking cows with a bucket or dyeing sheep.\r\nThe bucket is replaced with milk and the dye removed from inventory.\r\n\r\nRefresh the player inventory when PlayerInteractEntityEvent is\r\ncancelled to avoid this problem.",
    "head_branch": "piee-inventory",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Refresh player inventory when cancelling PlayerInteractEntityEvent (#1205)\n\nWhen interacting with entities with an item, the client will assume\r\nthe interaction is successful, and update the held item on the\r\nclient. However, if the interaction is cancelled on the server side,\r\nthe client will still mistakenly remove/replace the item in hand.\r\n\r\nExamples for this are milking cows with a bucket or dyeing sheep.\r\nThe bucket is replaced with milk and the dye removed from inventory.\r\n\r\nRefresh the player inventory when PlayerInteractEntityEvent is\r\ncancelled to avoid this problem."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1a9d9087c4d6d3771ea",
    "number": 1201,
    "body": "Fixes #1200\r\n\r\nThe extra buffer used to decode the strings sent by the client\r\nin the legacy ping protocol was never released. However, creating\r\nan extra copy of the buffer just to decode it to a string isn't\r\nactually necessary: We can just call toString() directly on the\r\noriginal buffer.\r\n\r\nAdditionally, free the buffer in handlerRemoved() to handle cases\r\nwhere the client never sends enough bytes to form a valid legacy\r\nping request.",
    "head_branch": "avoid-legacy-ping-handler-leaks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Avoid Netty buffer leak in LegacyPingHandler. Fixes #1200 (#1201)\n\nThe extra buffer used to decode the strings sent by the client\r\nin the legacy ping protocol was never released. However, creating\r\nan extra copy of the buffer just to decode it to a string isn't\r\nactually necessary: We can just call toString() directly on the\r\noriginal buffer.\r\n\r\nAdditionally, free the buffer in handlerRemoved() to handle cases\r\nwhere the client never sends enough bytes to form a valid legacy\r\nping request."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1aad9087c4d6d3771eb",
    "number": 1198,
    "body": "The upper/lower part of doors and double plants needs to be updated manually from the server when cancelling a block break from a player, as it otherwise causes the other part to disappear on the client.\r\n\r\nThis is already done for doors but only for the `BlockBreakEvent`, not for `PlayerInteractEvent`. Move the code to a common method and also handle double plants the same way.\r\n\r\nCredits go to https://www.spigotmc.org/resources/visualfixer.58442/ for finding most of these problems and making nice GIFs for them :)\r\n\r\n@phoenix616",
    "head_branch": "double-block-cancel",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Avoid visual issues for adjacent blocks when cancelling PIE (#1198)\n\nThe adjacent blocks of doors, double plants, pistons and beds need\r\nto be updated manually from the server when cancelling a block break\r\nfrom a player, as it otherwise causes the other parts to disappear\r\non the client.\r\n\r\nThis is already done for doors but only for the BlockBreakEvent,\r\nnot for PlayerInteractEvent. Move the code to a common method\r\nand also handle the other blocks in similar ways."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1abd9087c4d6d3771ec",
    "number": 1196,
    "body": "",
    "head_branch": "send-from-world",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Send nearby packets from world list instead of server list (#1196)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1acd9087c4d6d3771ed",
    "number": 1194,
    "body": "Tested with https://hasteb.in/ifokukik.coffeescript",
    "head_branch": "PlayerElytraBoostEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1add9087c4d6d3771ee",
    "number": 1193,
    "body": "I'm pretty sure I got all player launched projectiles (except arrows). Let me know if I missed any.\r\n\r\nThis fixes a use-case specific issue that was discovered [here](https://www.spigotmc.org/threads/projectilehitevent-doesnt-work-in-survival-mode.327097/page-2#post-3059433). I have a use-case example a few posts down, [here](https://www.spigotmc.org/threads/projectilehitevent-doesnt-work-in-survival-mode.327097/page-2#post-3060204).\r\n\r\nNot sure what to do about arrows since we have an EntityShootBowEvent already.",
    "head_branch": "PlayerShootProjectileEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1aed9087c4d6d3771ef",
    "number": 1190,
    "body": "This is the best way to get an entity when the world and its UUID are known. It is faster than Server.getEntity(UUID) because it does not have to iterate all worlds",
    "head_branch": "feature-World.getEntity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1afd9087c4d6d3771f0",
    "number": 1185,
    "body": "Add some new cancellable enderdragon events dealing with its fireball shooting and the areaeffectcloud it spawns. Based on [talking with someone with a specific use-case](https://www.spigotmc.org/threads/cancel-projectilehitevent.326466/) this was [confirmed to work](http://i.imgur.com/ezlfpKC.png) for them in PM.",
    "head_branch": "DragonEvents",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1b0d9087c4d6d3771f1",
    "number": 1182,
    "body": "Improve ProjectileHitEvent to include the BlockFace where the projectile has hit",
    "head_branch": "featue-BlockFace-for-ProjectileHitEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1b1d9087c4d6d3771f2",
    "number": 1175,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1b2d9087c4d6d3771f3",
    "number": 1173,
    "body": "Fixes #1171",
    "head_branch": "jline-event-expansion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1173 from Minecrell/jline-event-expansion\n\nDisable JLine event expansion"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1b3d9087c4d6d3771f4",
    "number": 1167,
    "body": "Resolves #941 ",
    "head_branch": "DragonLegacyCheck",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1b4d9087c4d6d3771f5",
    "number": 1162,
    "body": "This event is called when an entity receives knockback by another entity. The knockback can be modified in the event. If the event is cancelled the entity is not knocked back.",
    "head_branch": "feature-entityknockbackevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add EntityKnockbackByEntityEvent (#1162)\n\nThis event is called when an entity receives knockback by another entity. The knockback can be modified in the event. If the event is cancelled the entity is not knocked back."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b1b5d9087c4d6d3771f6",
    "number": 1161,
    "body": "Resolves #930 \r\n\r\nAdds new slime pathfinder related events. All events can be cancelled.\r\n- `SlimePathfindEvent` is the base event of all added events. Cancelling this event will cancel all pathfinders.\r\n- `SlimeWanderEvent` is called when slimes wander around by either swimming or moving/jumping forward. Cancelling this event will prevent slimes from moving around and jumping, but they will still look around and target players.\r\n- `SlimeSwimEvent`is called when slimes are swimming in water/lava. Cancelling will prevent the slimes from moving/jumping in water/lava.\r\n- `SlimeChangeDirectionEvent` is called when a slime changes directions. It contains the new `yaw` position the slime wants to change to, and it can be set to another value. Cancelling this event will prevent slimes from changing directions (except for when targeting players).\r\n- `SlimeTargetLivingEntityEvent` is called when a slime targets a player. NMS uses EntityLiving here so it is named this. Contains the LivingEntity the slime has targeted. Cancelling this event will prevent the slime from targeting the entity and will make it lose current focus.\r\n\r\nAdds `Slime#canWander()` and `Slime#setWander(boolean)` for a more persistent control (does not persist server restarts) over all 4 pathfinder types without the spammy event having to be cancelled a bajillion times a second.\r\n\r\nVideo demonstration: https://youtu.be/8hcLqazmO28\r\n\r\nTest plugin: https://pastebin.com/cFgcgdWV",
    "head_branch": "SlimeStuffs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1b6d9087c4d6d3771f7",
    "number": 1160,
    "body": "Not sure how to handle all these added imports. Left them up top for readability. Will change to in-line if requested by core-team.",
    "head_branch": "nearby",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add \"getNearbyXXX\" methods to Location (#1160)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b1b7d9087c4d6d3771f8",
    "number": 1158,
    "body": "No more headaches! \\o/",
    "head_branch": "clarity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Clarify Event#callEvent() JavaDoc (#1158)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b1b8d9087c4d6d3771f9",
    "number": 1154,
    "body": "Resolves #1153 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make shield blocking delay configurable (#1154)\n\nResolves #1153"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b1b9d9087c4d6d3771fa",
    "number": 1147,
    "body": "",
    "head_branch": "call_EntityTeleportEndGatewayEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Actually call EntityTeleportEndGatewayEvent (#1147)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1bad9087c4d6d3771fb",
    "number": 1146,
    "body": "Fixes https://github.com/PaperMC/Paper/issues/1141",
    "head_branch": "fix-lootable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Avoid int overflow in lootable refill time calculations (#1146)\n\nFixes https://github.com/PaperMC/Paper/issues/1141"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1bbd9087c4d6d3771fc",
    "number": 1145,
    "body": "This should be a typo?",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1bcd9087c4d6d3771fd",
    "number": 1133,
    "body": "By default, zsh will not expand the spaces inside of the gitcmd\r\nvariable, and will attempt to execute as is, causing the git command\r\nto fail. This patch fixes this by enabling the shwordsplit option\r\nif not already enabled (and disables afterhand if it was enabled by us)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1bdd9087c4d6d3771fe",
    "number": 1132,
    "body": "Fixes #1131\r\n\r\nObviously, code should be reviewed and I think that one if statement could be omitted and `&&`/`||` trickery could be used instead.",
    "head_branch": "feature/skip-ticking-in-delayed-unload-chunks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Skip Entity and Tile Entity ticking in chunks scheduled for unload (#1132)\n\nFixes #1131"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1bed9087c4d6d3771ff",
    "number": 1130,
    "body": "Currently the PluginCommand class wraps any exceptions into a CommandException which misses the catch-all throwable which would normally send the exception to the ServerExceptionEvent.\r\n\r\nThis remove the wrapping so that the event can handle it and then wrap it like normal.",
    "head_branch": "fix-command-errors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix PluginCommand to not wrap exceptions before ServerExceptionEvent can get to it (#1130)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1bfd9087c4d6d377200",
    "number": 1128,
    "body": "https://blog.github.com/2018-05-02-issue-template-improvements/",
    "head_branch": "gh/new-issue-templates",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update issue templates (#1128)\n\nhttps://blog.github.com/2018-05-02-issue-template-improvements/"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1c0d9087c4d6d377201",
    "number": 1125,
    "body": "This enables minigame-like servers that most of the time are loading pre-made worlds\r\nto not have the extra main world(s) loaded on top of their custom ones.\r\n\r\nWhen in this mode and no world are loaded by the time the server is loaded a new\r\nwill print out to the console to make sure that people know what they are doing.",
    "head_branch": "disable-world-loading",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1c1d9087c4d6d377202",
    "number": 1123,
    "body": "Instead of checking whether it was set previously, setting it to false, then setting it back to true if it was true before, just use the command-line argument in git to override the config for that command. Using a variable makes it pretty painless to do.\r\n\r\nI have only tested on Linux, and would like others that are able to test on Windows. I won't be able to test macOS until tomorrow.\r\n\r\n- [x] Arch Linux - bash 4.4\r\n- [x] Windows 10 1803 - git-for-windows 2.17.0.windows.1 bash 4.4\r\n- [x] Ubuntu 16.04 - bash 4.3\r\n- [x] macOS 10.13 - bash 3.5 / zsh 5.5",
    "head_branch": "feature/better-gpg-handling",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Handle gpg signing better (#1123)\n\nInstead of checking whether it was set previously, setting it to false,\r\nthen setting it back to true if it was true before, just use the\r\ncommand-line argument in git to override the config for that command.\r\nUsing a variable makes it pretty painless to do."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1c2d9087c4d6d377203",
    "number": 1122,
    "body": "Supersedes GH-1095\r\n\r\nThis is not a perfect workaround but it seems to be the best solution\r\nfor the moment.\r\n\r\nOn Windows, this means that when a patch fails to apply, you would now\r\nneed to fix that patch, finish the apply (AM), then rebuild all patches,\r\nand then finally re-run the patch apply procedure in order to continue.\r\n\r\nThis adds a small amount of overhead compared to the traditional method\r\n(which will still work on *nix environments, including WSL). However, it\r\nseems preferable to the build not working on Windows at all.\r\n\r\n- [x] Arch Linux - bash 4.4\r\n- [x] Windows 10 1803 - git-for-windows 2.17.0.windows.1 bash 4.4\r\n- [x] Ubuntu 16.04 - bash 4.3\r\n- [x] macOS 10.13 - bash 3.5 / zsh 5.5",
    "head_branch": "workaround/arg_max",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Apply workaround for patch application on Windows (#1122)\n\nThis is not a perfect workaround but it seems to be the best solution\r\nfor the moment.\r\n\r\nOn Windows, this means that when a patch fails to apply, you would now\r\nneed to fix that patch, finish the apply (AM), then rebuild all patches,\r\nand then finally re-run the patch apply procedure in order to continue.\r\n\r\nThis adds a small amount of overhead compared to the traditional method\r\n(which will still work on *nix environments, including WSL). However, it\r\nseems preferable to the build not working on Windows at all."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1c3d9087c4d6d377204",
    "number": 1105,
    "body": "Resolves #1104.\r\n\r\nThe line of code which is removed by this PR most likely causes the CME when loading chunks. This still needs testing. I can't reproduce #1104.",
    "head_branch": "hotfix/anti-xray-cme",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1105 from stonar96/hotfix/anti-xray-cme\n\nFix Anti-Xray ConcurrentModificationException"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1c4d9087c4d6d377205",
    "number": 1098,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1c5d9087c4d6d377206",
    "number": 1095,
    "body": "Fixes an issue on Windows when using Git Bash which causes the build to fail at line 41 for having too many arguments.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1c7d9087c4d6d377207",
    "number": 1094,
    "body": "Resolves #987.",
    "head_branch": "feature/update-radius",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make Anti-Xray Update Radius configurable (#1094)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1c7d9087c4d6d377208",
    "number": 1091,
    "body": "#1089 was incorrectly merged by @aikar.\r\n\r\n> Any **contributor** who wants their name added below should submit a pull request to this project to add their name.\r\n\r\n:ok: \r\n\r\n> `First-time contributor`\r\n\r\n![x](https://i.imgur.com/nmdsp6T.png)\r\n\r\nSorry for the confusion.",
    "head_branch": "revert-1089-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[ci-skip] Revert \"Add Turqmelon to MIT file (#1089)\" (#1091)\n\nThis reverts commit d0134e38de2edd177ac23f8618379082bd27f975."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1c9d9087c4d6d377209",
    "number": 1090,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1cad9087c4d6d37720a",
    "number": 1089,
    "body": "Used personal details as opposed to company, this time.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Turqmelon to MIT file (#1089)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1cbd9087c4d6d37720b",
    "number": 1088,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1ccd9087c4d6d37720c",
    "number": 1086,
    "body": "",
    "head_branch": "license",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Add stonar96 to MIT list (#1086)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1cdd9087c4d6d37720d",
    "number": 1085,
    "body": "If the sprint interruption is disabled players continue sprinting when they attack entities.\r\n\r\nThis can improve pvp experience, because sprinting is mostly controlled client side and the players (most times) continue to sprint after a very short interruption, if they keep the sprint key pressed.",
    "head_branch": "configurable-sprint-interruption-on-attack",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Configurable sprint interruption on attack (#1085)\n\nIf the sprint interruption is disabled players continue sprinting when they attack entities."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1ced9087c4d6d37720e",
    "number": 1081,
    "body": "Each chunk section has a NBT tag called \"Y\", which assigns the section a vertical position within a chunk. A normal server will only write values within [0, 16) to this tag and also assume the value to be within that range. Other tools that create/edit minecraft world data may produce data though, which does not adhere to this guide line. This data will crash the server as soon as it is attempted to be loaded.\r\n\r\nThe fix to this is simply ignoring any data with invalid Y tags.\r\n\r\nMotivation for this change came from encountering one of these messed up worlds myself, which was apparently created by WorldDownloader.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1cfd9087c4d6d37720f",
    "number": 1071,
    "body": "the diff is also technically smaller due to the number of characters being reduced\r\n\r\nTimestamps also look correct to me, can anyone else verify?",
    "head_branch": "april_fools_2018",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1d0d9087c4d6d377210",
    "number": 1070,
    "body": "",
    "head_branch": "feature/open-placed-sign",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1070 from mikroskeem/feature/open-placed-sign\n\nAdd method to open already placed sign"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b1d1d9087c4d6d377211",
    "number": 1068,
    "body": "Fixes #1067",
    "head_branch": "avoid-negative-server-ping-player-sample-counts",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Avoid negative server ping player sample counts. Fixes #1067 (#1068)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1d2d9087c4d6d377212",
    "number": 1065,
    "body": "Some plugins (e.g. older builds of EssentialsX) assume that `ServerListPingEvent.getSampleText()` returns a mutable copy of the player sample list. This was the case until it was refactored on top of the new API introduced in #980.\r\n\r\nAs a result, they may run into an error when trying to modify the returned list directly. Modify `getSampleText()` to return a mutable copy (a plain `ArrayList`) to mimic the old behavior.\r\n\r\nFixes https://github.com/EssentialsX/Essentials/issues/1924 and https://github.com/EssentialsX/Essentials/issues/1926 additionally from Paper's side.",
    "head_branch": "mutable-sample-text",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve backward compatibility of deprecated player sample API (#1065)\n\nSome plugins (e.g. older builds of EssentialsX) assume that\r\nServerListPingEvent.getSampleText() returns a mutable copy of\r\nthe player sample list. This was the case until it was refactored\r\non top of the new API introduced in #980.\r\n\r\nAs a result, they may run into an error when trying to modify the\r\nreturned list directly. Modify getSampleText() to return a mutable\r\ncopy (a plain ArrayList) to mimic the old behavior."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1d3d9087c4d6d377213",
    "number": 1063,
    "body": "Closes #1062\r\n\r\nThis PR just makes player data saving disableable, but does not touch loading. I left loading part untouched as I am not completely sure what making that no-op could possibly cause (besides desired functionality).",
    "head_branch": "feature/disable-player-data-saving",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make player data saving configurable (#1063)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1d4d9087c4d6d377214",
    "number": 1057,
    "body": "This PR extends the work started in #980 to call `PaperServerListPingEvent` for old (\"legacy\") pings from old Minecraft versions (before Minecraft 1.7). The old ping protocol is still supported in newer Minecraft versions to display that the client is outdated. Right now, there is no way to modify the MOTD/player count sent to these old clients from plugins.\r\n\r\nThe first commit is a simplified version of a fix for legacy ping handling ported from Sponge (originally added in https://github.com/SpongePowered/SpongeForge/pull/143). Basically, due to the way TCP works pinging the server from a Minecraft 1.6 client would often fail because `LegacyPingHandler` is called before all bytes are received from the client. A more detailed explanation is in the commit message.\r\n\r\nCare has been taken that we don't sent invalid responses to the client. Depending on the client version, it will automatically:\r\n  - Strip the second line of the MOTD\r\n  - Remove all color codes\r\n\r\nCloses https://github.com/SpigotMC/Spigot/pull/221 (\"Fire ServerListPingEvent for legacy pings.\")\r\nI proposed a similar change to Spigot on Aug 24, 2014 shortly before the DMCA happened, then it got lost. I don't have the original changes anymore but it stayed in my active pull requests at https://github.com/pulls ever since. I guess this won't magically close it but it's worth a try. :D",
    "head_branch": "legacy-ping-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Call PaperServerListPingEvent for legacy pings (#1057)\n\n* Make the legacy ping handler more reliable\r\n\r\nThe Minecraft server often fails to respond to old (\"legacy\") pings\r\nfrom old Minecraft versions using the protocol used before the switch\r\nto Netty in Minecraft 1.7.\r\n\r\nDue to packet fragmentation[1], we might not have all needed bytes\r\navailable when the LegacyPingHandler is called. In this case, it will\r\nrun into an error, remove the handler and continue using the modern\r\nprotocol.\r\n\r\nThis is unlikely to happen for the first two revisions of the legacy\r\nping protocol (used in Minecraft 1.5.x and older) since the request\r\nconsists of only one or two bytes, but happens frequently for the\r\nlast/third revision introduced in Minecraft 1.6.\r\n\r\nIt has much larger, variable packet sizes due to the inclusion of\r\nthe virtual host (the hostname/port used to connect to the server).\r\n\r\nThe solution[2] is simple: If we find more than two matching bytes,\r\nwe buffer the remaining bytes until we have enough to fully read and\r\nrespond to the request.\r\n\r\n[1]: https://netty.io/wiki/user-guide-for-4.x.html#wiki-h3-11\r\n[2]: https://netty.io/wiki/user-guide-for-4.x.html#wiki-h4-13\r\n\r\n* Add legacy ping support to PaperServerListPingEvent\r\n\r\nAdd a new method to StatusClient check if the client is a legacy\r\nclient that does not support all of the features provided in the\r\nevent."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b1d5d9087c4d6d377215",
    "number": 1051,
    "body": "It was forgotten in the method split-up",
    "head_branch": "missing-registerPlayer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing registerPlayer in CraftPlayer.showPlayer0 (#1051)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1d6d9087c4d6d377216",
    "number": 1047,
    "body": "Not sure if this is the best way to allow canceling, feedback welcome. \r\n\r\nThe reason seems to never be called from craftbukkit, no idea why. fixes https://hub.spigotmc.org/jira/browse/SPIGOT-248\r\n\r\nif canceled, it will revert changes to the blocks which also aborts teleport.\r\nthere was a suggestion to make the server search for a new portal location, but thats more complicated (and would probably also need an api in the event to set if a new location should be searched) and should be done in a separate pr. ",
    "head_branch": "portal-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Call PortalCreateEvent for exit portals (#1047)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1d7d9087c4d6d377217",
    "number": 1043,
    "body": "Somebody pinged me on Telegram and said I should do this",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Add vemacs to MIT list (#1043)\n\nSomebody pinged me on Telegram and said I should do this"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1d8d9087c4d6d377218",
    "number": 1042,
    "body": "",
    "head_branch": "mit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Add Brokkonaut to MIT list (#1042)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1d9d9087c4d6d377219",
    "number": 1040,
    "body": "This is a port of https://github.com/PaperMC/Paper/blob/ver/1.8.8/Spigot-Server-Patches/0040-Toggleable-player-crits-helps-mitigate-hacked-client.patch\r\nAlso adds me to the MIT list.",
    "head_branch": "toggle-crit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Toggleable player crits, helps mitigate hacked clients. (#1040)\n\nThis is a port of https://github.com/PaperMC/Paper/blob/ver/1.8.8/Spigot-Server-Patches/0040-Toggleable-player-crits-helps-mitigate-hacked-client.patch\r\nAlso adds me to the MIT list."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b1dad9087c4d6d37721a",
    "number": 1038,
    "body": "\\*jumps on bandwagon\\*",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Add Techcable to MIT list (#1038)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1dbd9087c4d6d37721b",
    "number": 1037,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Add BillyGalbreath to MIT list (#1037)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1dcd9087c4d6d37721c",
    "number": 1035,
    "body": "... also change email address for some older patches to make it clear that they are MIT licensed too.",
    "head_branch": "minecrell-mit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Add Minecrell to MIT list (#1035)\n\nChange email address for some older patches to make it clear that\r\nthey are MIT licensed too."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1ddd9087c4d6d37721d",
    "number": 1034,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Add me (chickeneer) to MIT list (#1034)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1ded9087c4d6d37721e",
    "number": 1032,
    "body": "I added https://github.com/PaperMC/Paper/blob/master/Spigot-Server-Patches/0141-Toggleable-Elytra-Wall-Damage.patch\r\na while ago and I'd like to license it under MIT in case someone ever wants to use it for anything.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Add myself to the MIT List (#1032)\n\nI added https://github.com/PaperMC/Paper/blob/master/Spigot-Server-Patches/0141-Toggleable-Elytra-Wall-Damage.patch\r\na while ago and I'd like to license it under MIT in case someone ever wants to use it for anything."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1dfd9087c4d6d37721f",
    "number": 1030,
    "body": "And change my used mail address in patch",
    "head_branch": "mit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Add me (Gabscap) to MIT list\n\nAnd change my used mail address in patch"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1e0d9087c4d6d377220",
    "number": 1029,
    "body": "",
    "head_branch": "mit-license",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Add me (Mystiflow) to MIT list"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1e1d9087c4d6d377221",
    "number": 1028,
    "body": "",
    "head_branch": "feature/mark-does-mit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] I (mikroskeem) do MIT licensed contributions to Paper"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1e2d9087c4d6d377222",
    "number": 1027,
    "body": "",
    "head_branch": "mit_license",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Add me (Black Hole) to MIT list (#1027)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1e3d9087c4d6d377223",
    "number": 1023,
    "body": "This commit adds an option to fix east/west cannoning.",
    "head_branch": "ver/1.8.8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1e4d9087c4d6d377224",
    "number": 1019,
    "body": "It is often difficult to diagnose new issues server admins get when upgrading to a new server version because the only information they are able to tell us regarding the server version they are running is \"latest\". This commit attempts to mitigate this by keeping track of the previous version of Paper they were running, which is then reported by the `/version` or `/paper version` command. This gives us a better idea of the commits included in the upgrade, which may help diagnose new issues easier.\r\n\r\nThis also exposes the previous version as part of the Paper API. That could be changed if requested, but I thought it wouldn't hurt.",
    "head_branch": "feature/version-history",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Track previous version and report in command\n\nIt is often difficult to diagnose new issues server admins get when\nupgrading to a new server version because the only information they are\nable to tell us regarding the server version they are running is\n\"latest\". This commit attempts to mitigate this by keeping track of the\nprevious version of Paper they were running, which is then reported by\nthe `/version` or `/paper version` command. This gives us a better idea\nof the commits included in the upgrade, which may help diagnose new\nissues easier."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1e5d9087c4d6d377225",
    "number": 1016,
    "body": "It's all in the comments. Both OS X and FreeBSD don't have md5sum but use md5 instead. The current settings for OS X also work on FreeBSD therefor I added an extra check so that remap.sh tests both the OSTYPE environment variable as well as the uname output.\r\n\r\nHope this can help.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1016 from ShelLuser/master\n\nAllowing Paper to be build on FreeBSD"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1e6d9087c4d6d377226",
    "number": 1015,
    "body": "This feature is present since Minecraft 1.8, but was not implemented into API yet. So here is my try to add the API for these two tags :smile: ",
    "head_branch": "feature/nbt-canplaceon-and-candestroy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Create API for CanPlaceOn and CanDestroy NBT tags (#1015)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b1e7d9087c4d6d377227",
    "number": 1006,
    "body": "I had task to generate a world that would not contain any ores.\r\nFor this purpose I used a customized generator type with specific preset. However, some biomes, such as extreme hills and mesa, still contained ores.\r\nThis happened because generation of these blocks were hard coded into world generation and had no respect to worldgen preset settings\r\n\r\n> In mesa biomes, an additional 20 veins generate between layers 32 and 79 (inclusive)\r\n> Extreme hills are the only biomes where emerald ores and silverfish can be found naturally.\r\nMinecraft Wiki\r\n\r\nIn this patch, I added 3 world options to disable it\r\n```\r\n    generator-settings:\r\n       disable-extreme-hills-emeralds: false\r\n       disable-extreme-hills-monster-eggs: false\r\n       disable-mesa-additional-gold: false\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added options to disable additional ore generation in Mesa and Extreme Hills (#1006)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1e8d9087c4d6d377228",
    "number": 996,
    "body": "This patch preserves the alphabetical order when constructing and loading plugins.\r\n\r\nBackground of this patch is my attempt to load a library into the classpath of the server before constructing\r\nanother plugin.\r\nDue to how hash maps work, the iterator of one will by default not preserve the order of insertion.\r\nThis makes it impossible to reliably load classes before another plugin is constructed.\r\n\r\nThis patch makes the order of construction of plugins predictable and reliable.\r\n\r\n## Edit: This is not needed, the algorithm works, somehow my copies of Paper and Spigot didn't do what I instructed them to do :/",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1e9d9087c4d6d377229",
    "number": 995,
    "body": "The `push-hoppers` configuration option changes the behaviour of hoppers so that drops would check if hoppers are below them, rather than hoppers checking for drops on top of themselves. This commit should apply the same logic to MinecartHoppers, making drops look for MinecartHoppers entities, check if they're full and get in the hoppers inventory if they aren't.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1ead9087c4d6d37722a",
    "number": 981,
    "body": "I'm bored.",
    "head_branch": "MoreAnvilEvents",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1ebd9087c4d6d37722b",
    "number": 980,
    "body": "_I made this a few months ago, but couldn't find the time to finish it. The new PlayerProfile API reminded me that I still needed to finish this :)_\r\n\r\nBuilds on the API added in #914 and adds a new, extended version of `ServerListPingEvent` that allows full control of the response sent to the client. Right now, plugins need to rely on packet manipulation with ProtocolLib and lots of reflection to do this; with this PR this can be fully achieved with the new API.\r\n\r\nInstead of making the changes directly in `ServerListPingEvent`, I've decided to extend the original event in a new `PaperServerListPingEvent`. This keeps the new features isolated from the original event, and retains compatibility with other plugins calling `ServerListPingEvent` manually (for whatever reason). Since `PaperServerListPingEvent` doesn't have an own handler list, it will be passed to listeners of both the original, and the extended event.\r\n\r\n**Event Naming:** I wasn't entirely sure how to name the event. `PaperServerListPingEvent` might be confusing because the `Paper` prefix is also used for some of the implementation classes. I'm open to other suggestions. :)\r\n\r\nFixes #884 by restoring the old behavior of the `iterator()` method. It will iterate over all online players and eventually remove them from the player sample based on their UUID. I've re-implemented the old (deprecated) player sample API with the new APIs in `PaperServerListPingEvent`.\r\n\r\n## Test Plugin\r\n\r\nI've added support for the event in [ServerListPlus](https://minecrell.net/slp). With the changes in this PR, ProtocolLib is no longer required. All functionality is available out of the box. Yay! :)\r\n\r\n**Download:** [ServerListPlus-3.4.9-SNAPSHOT-Universal.jar](https://download.minecrell.net/minecraft/ServerListPlus-3.4.9-SNAPSHOT-Universal.jar) ([Source](https://github.com/Minecrell/ServerListPlus/commit/7c77236121ba9dcb78c2f3cdf46d971e171127bd))",
    "head_branch": "paper-slp-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add extended PaperServerListPingEvent (#980)\n\n* Drop original implementation for old player sample API\r\n\r\n* Add extended PaperServerListPingEvent\r\n\r\nAdd a new event that extends the original ServerListPingEvent\r\nand allows full control of the response sent to the client.\r\n\r\n* Implement deprecated player sample API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b1ecd9087c4d6d37722c",
    "number": 978,
    "body": "This adds a new cancellable event, PlayerAdvancementCriterionGrantEvent, that fires when a player is granted an advancement criterion (not necessarily when the advancement is done, like the upstream related event, PlayerAdvancementDoneEvent).",
    "head_branch": "PlayerAdvancementGrantEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PlayerAdvancementCriterionGrantEvent (#978)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b1edd9087c4d6d37722d",
    "number": 976,
    "body": "Optimize Hoppers\r\n\r\n- Lots of itemstack cloning removed. Only clone if the item is actually moved\r\n- Return true when a plugin cancels inventory move item event instead of false, as false causes pulls to cycle through all items.\r\n  However, pushes do not exhibit the same behavior, so this is not something plugins could of been relying on.\r\n- Add option (Default on) to cooldown hoppers when they fail to move an item due to full inventory\r\n- Skip subsequent InventoryMoveItemEvents if a plugin does not use the item after first event fire for an iteration\r\n\r\nCloses #392 ",
    "head_branch": "optimize-hoppers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Optimize Hoppers\n\n- Lots of itemstack cloning removed. Only clone if the item is actually moved\n- Return true when a plugin cancels inventory move item event instead of false, as false causes pulls to cycle through all items.\n  However, pushes do not exhibit the same behavior, so this is not something plugins could of been relying on.\n- Add option (Default on) to cooldown hoppers when they fail to move an item due to full inventory\n- Skip subsequent InventoryMoveItemEvents if a plugin does not use the item after first event fire for an iteration"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b1eed9087c4d6d37722e",
    "number": 974,
    "body": "Initial sketches at establishing a Profile API to get rid of AuthLib (#828)\r\n\r\nThis PR is focused on the Profile API in design, and we can worry about making stuff use this later.",
    "head_branch": "profiles",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add PlayerProfile API to replace GameProfile\n\nThis simply provides the base API to create the objects. Further commits will come that adds\nadds usage of this API to existing GameProfile based API's, as well as new API's."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b1efd9087c4d6d37722f",
    "number": 964,
    "body": "Fixes an issue where the \"Preparing start region for level\" message is printed without a line break resulting in many messages at once at the next proper output. Additionally, the logger is now used instead of System.out for all messages in this class.",
    "head_branch": "fix-logging-inconsistencies",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1f0d9087c4d6d377230",
    "number": 935,
    "body": "Even when cancelling the AsyncPreLoginEvent or the LoginEvent, the server proceeds to call `b()` on the next tick. This causes a `Player` object to be created and inventory data to be loaded (sync even).\r\n\r\nThis patch prevents `b()` from ever being called when `disconnect` is called first. This is safe as `g`, which usually calls `b()` to be called, is assigned *after* disconnect is called.\r\n\r\nSuggestions and/or feedback is appreciated.",
    "head_branch": "prevent-disconnected-logins",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #935 from avatarmc/prevent-disconnected-logins\n\nPrevent logins from being processed when the player has disconnected"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1f1d9087c4d6d377231",
    "number": 931,
    "body": "Update CB",
    "head_branch": "CB",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #931 from Brokkonaut/CB\n\nUpdate CB"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1f2d9087c4d6d377232",
    "number": 925,
    "body": "Currently you can hear attack sounds (even from cancelled attacks) from players that are invisible to you.",
    "head_branch": "NoAttackSoundsFromVanishedPlayers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Send attack SoundEffects only to players who can see the attacker"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1f3d9087c4d6d377233",
    "number": 923,
    "body": "HashSet sometimes uses compareTo() instead of equals() and this breaks the comparison of net.minecraft.server.NextTickListEntry (the only place where HashTreeSet is used).\r\n\r\nIn this cases duplicate entries could be added to the HashSet of HashTreeSet, because NextTickListEntry.compareTo() does not return 0, even if NextTickListEntry.equals() returns true.\r\n\r\nObjectOpenHashSet never uses compareTo(), so the inconsistencies of NextTickListEntry cause no problems.\r\n\r\nFixes https://github.com/PaperMC/Paper/issues/588",
    "head_branch": "588-NoSuchElementException-in-HashTreeSet",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1f4d9087c4d6d377234",
    "number": 922,
    "body": "1. A simple tweak at startup allows the user to add biome names to an array in the config with an alternate biome name that, upon startup, will replace the associated biome variable with a different named biome instead affecting world generation.\r\n\r\n```yml\r\nbiome-replacements:\r\n    taiga_cold: taiga # Taiga Cold will never generate, Taiga will always generate in its place\r\n```\r\n\r\n2. Allows -1 values to the flow speeds\r\n\r\n```yml\r\nlava-flow-speed:\r\n    normal: -1 # Disable lava flow in the over-world\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1f6d9087c4d6d377235",
    "number": 920,
    "body": "I did quick copypasta from my [initial try](https://github.com/mikroskeem/asynclighting) of async patch port.\r\n\r\n~~Known needed changes:~~\r\n- ~~Add configuration option for async thread amount~~\r\n- ~~Triple check the correct mappings (as code comes from MCP and... CB mappings are the best! /s)~~\r\n- ~~Remove bunch of `// MCP - ...` comments~~\r\n- ~~More OBFHELPERS (and thus imports) needed!~~\r\n- ~~Paper start/end comments need to be improved (imo)~~\r\n\r\n~~Do not merge yet, code needs review and changes listed above (atleast)~~\r\n\r\nReady for proper review now.\r\n\r\nEdit: Do not merge, code is broken for unknown reasons right now. Will take a look soon what I did wrong.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1f7d9087c4d6d377236",
    "number": 919,
    "body": "allow keepalive to wait longer for a client response and also provide a bit more information in the server logs so we can work out what is going on.",
    "head_branch": "improve-keepalive-handling",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #919 from electronicboy/improve-keepalive-handling\n\nallow keepalive to wait longer for a client response (#895)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1f8d9087c4d6d377237",
    "number": 918,
    "body": "Port of https://github.com/MinecraftForge/MinecraftForge/commit/303a775fc34f104b2374c750ef0672f0495c995e\r\n\r\nWill display a list of all entities in a world, as well as which chunks they are in. Hopefully, this will make tracking down chunks with lots of entities easier.\r\n\r\nOnly real change from the forge version is that instead of dimension IDs, we accept world names in the form of a string.\r\n\r\n```/paper entity list``` - Lists all entities in the player's current world\r\n```/paper entity list minecraft:zombie``` - Lists all zombies in the player's current world\r\n\r\n```/paper entity list * world_nether``` - Lists all entities in the nether\r\n```/paper entity list minecraft:ghast world_nether``` - Lists all ghasts in the nether",
    "head_branch": "port/entity-list-command",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #918 from Zbob750/port/entity-list-command\n\nAdd command for listing entities in a world"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1f9d9087c4d6d377238",
    "number": 914,
    "body": "Add a `NetworkClient` interface that provides access to the socket address, protocol version and virtual host of a client connected to the server (not necessarily a player). I've added it as separate interface instead of in `Player` directly because I intend to use the same for an extended `ServerListPingEvent` in a future PR.\r\n\r\n### Reason\r\nIt's already possible to obtain the protocol version and virtual host using ProtocolLib and/or NMS, however there is no standardized way in the API. Make the life easier for plugins without additional dependencies and expose it in the API.\r\n\r\nIt's often said that the protocol version is an implementation detail, but I don't think this is the case: We want to hide (breaking) changes in the protocol itself from plugins, but the protocol version is just a number that was added long ago. Essentially, an ID just like block IDs (either numerical or as string) that can be used to check which MC version a client is using.\r\n\r\nIt might not be too useful for the `Player` interface (since they will always have the same protocol version as the server), but for `ServerListPingEvent` it can be used to give players using older Minecraft versions a special warning in the MOTD (or similar). The same might be possible when using ViaVersion (e.g. to tell your players to upgrade if they're still using the old version).",
    "head_branch": "expose-client-protocol-host",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #914 from Minecrell/expose-client-protocol-host\n\nExpose client protocol version and virtual host"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b1fad9087c4d6d377239",
    "number": 913,
    "body": "As discussed on IRC, deprecate the current player sample list in `ServerListPingEvent` so we can replace it with a new version in 1.13.\r\n\r\nRelated to #884 ",
    "head_branch": "deprecate-string-player-sample",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #913 from Minecrell/deprecate-string-player-sample\n\nDeprecate player sample list that includes only the player name"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b1fbd9087c4d6d37723a",
    "number": 908,
    "body": "The offline-mode-message takes a whopping 4-5 Lines of log-output which is why we should care about only displaying it if it's necessary/fitting. If Bungee is enabled and the server is bound to a loopback-address (127.0.0.x), the warning is completely redundant.",
    "head_branch": "message-cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1fcd9087c4d6d37723b",
    "number": 904,
    "body": "PR'ing these as I'm potentially going to leave this until #903, however as it stands the removal of these patches will likely have no effect on performance and correct rendering issues in newly generated chunks.\r\n\r\nThis commit removes two patches from spigot:\r\nplease review the patch messages for more information, however;\r\n\r\n\"Allow Disabling of Random Lighting Updates\" potentially leaves chunk light maps in an invalid state, with\r\nhow often the server looks at these anyways, this patch really serves a questionable nature, the work is\r\ngoing to be done, only it's being delayed and allowing the light map to be left in a potentially outdated\r\nstate.\r\n\r\n\"Fix some chunks not being sent to the client\" sends chunks before their lighting has been calculated, this\r\nmeans that the client will recieve chunks before they lighting has been calculated which can cause rendering\r\nartifacts. The original issue around this patch appears to have already been fixed years ago.",
    "head_branch": "remove-spigot-lighting-patches",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1fdd9087c4d6d37723c",
    "number": 899,
    "body": "",
    "head_branch": "logging",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1fed9087c4d6d37723d",
    "number": 892,
    "body": "Fixes #879",
    "head_branch": "tca-1.0.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #892 from Minecrell/tca-1.0.0\n\nUpdate TerminalConsoleAppender to 1.0.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b1ffd9087c4d6d37723e",
    "number": 890,
    "body": "This is a set of 3 commits to improve the logging implementation of Paper and allow plugins to use SLF4J as alternative logging API. The exact changes and the reasoning for them is explained in the commit messages (either directly or in the patches) so I'm not going to repeat everything here.\r\n\r\nSLF4J is a commonly used abstraction for various logging frameworks and it is the easiest way to handle logging in an implementation-agnostic way. It is also used by many Java libraries as logging abstraction. I intend to create a similar PR for Waterfall so eventually, the same logging API can be used on Paper, Waterfall, Sponge and other modding APIs.\r\n\r\nThe primary difficulty to make this work was to move the plugin prefixes out of a custom JUL `PluginLogger` implementation and handle them directly in the underlying logging framework (Log4J). Otherwise, messages logged with SLF4J would be missing the plugin prefix.\r\n\r\nThe solution is pretty simple: Use the plugin name as logger name and make it visible in the log using the Log4J configuration. Hide the logger name for Minecraft and Paper log messages to make it less verbose.",
    "head_branch": "slf4j",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #890 from Minecrell/slf4j\n\nAllow plugins to use SLF4J for logging"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b200d9087c4d6d37723f",
    "number": 881,
    "body": "Includes:\r\nSPIGOT-3561: Fix selectors in SuccessCount\r\nSpigot/da4297479a847aaf2efa60ff147a44345c6bd737: Fix Javadoc typo",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b201d9087c4d6d377240",
    "number": 876,
    "body": "Includes:\r\nSPIGOT-3553: Add OfflinePlayer based methods to SkullMeta\r\nSPIGOT-3551: Recursively unrestrict advancements",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update CB & B (#876)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b202d9087c4d6d377241",
    "number": 875,
    "body": "",
    "head_branch": "feature/ban-events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b203d9087c4d6d377242",
    "number": 873,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update CB and B (#873)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b204d9087c4d6d377243",
    "number": 872,
    "body": "`DataPaletteBlock#a()` is invoked in the `PacketPlayOutMapChunk` class to count the bytes to create the packet. After counting the bytes and creating the `byte[]` with the right size `DataPaletteBlock#b(PacketDataSerializer)` is invoked in the `PacketPlayOutMapChunk` class to write the data to the `byte[]`.\r\n\r\nYou can find the line `packetdataserializer.a(this.b.a());` inside `DataPaletteBlock#b(PacketDataSerializer)` which writes the `long[]` of the `DataBits` to the packet. Inside of `DataPaletteBlock#a()` these bytes are counted with `PacketDataSerializer.a(this.b.b()) + this.b.a().length * 8` but it should be `PacketDataSerializer.a(this.b.a().length) + this.b.a().length * 8`.\r\n\r\nThis PR fixes this minor vanilla inconsistency.",
    "head_branch": "hotfix/data-palette-block",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b205d9087c4d6d377244",
    "number": 871,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update CB"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b206d9087c4d6d377245",
    "number": 870,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b207d9087c4d6d377246",
    "number": 867,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Bukkit"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b208d9087c4d6d377247",
    "number": 862,
    "body": "This PR fixes [CVE-2017-5645](https://cve.circl.lu/cve/CVE-2017-5645) & [CVE-2017-10989](https://cve.circl.lu/cve/CVE-2017-10989)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b209d9087c4d6d377248",
    "number": 861,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #861 from CDAGaming/master\n\nUpdate CB and BD"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b20ad9087c4d6d377249",
    "number": 858,
    "body": "#432 ",
    "head_branch": "anti-xray/2.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b20bd9087c4d6d37724a",
    "number": 855,
    "body": "This PR resolves #809.\r\n\r\nI'll just test it on my local system and remove the WIP then.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b20cd9087c4d6d37724b",
    "number": 853,
    "body": "",
    "head_branch": "dragon-egg-falling",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #853 from Brokkonaut/dragon-egg-falling\n\nI forgot the // Paper comment"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b20dd9087c4d6d37724c",
    "number": 849,
    "body": "Fixes falling dragon eggs in lazy chunks fall to the block below the last empty block and replacing that block with them.\r\n\r\nSee also https://bugs.mojang.com/browse/MC-94186",
    "head_branch": "dragon-egg-falling",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #849 from Brokkonaut/dragon-egg-falling\n\nMC-94186 Fix dragon egg falling in lazy chunks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b20ed9087c4d6d37724d",
    "number": 848,
    "body": "PaperMC port of https://github.com/MinecraftForge/MinecraftForge/pull/4281",
    "head_branch": "port/forge/MC-117075",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b20fd9087c4d6d37724e",
    "number": 846,
    "body": "",
    "head_branch": "irradiated-rivers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update CB (#846)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b210d9087c4d6d37724f",
    "number": 842,
    "body": "",
    "head_branch": "feature/speedup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #842 from DemonWav/feature/speedup\n\nFix this stupid bullshit"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b211d9087c4d6d377250",
    "number": 840,
    "body": "#839 \r\n#838 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #840 from electronicboy/master\n\nfix construction order in CraftBanner"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b212d9087c4d6d377251",
    "number": 837,
    "body": "#BlameZ750\r\n\r\nSpigot updated their pom and removed the parent, as well as worked up their BlockState snapshots, I'm pretty sure nothing has broke in the Lootable API from this, however, see above",
    "head_branch": "mergy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #837 from electronicboy/mergy\n\nUpdate B/CB/S"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b213d9087c4d6d377252",
    "number": 830,
    "body": "Fixes #736 ",
    "head_branch": "jline-3.4.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #830 from Minecrell/jline-3.4.0\n\nUpdate JLine to 3.4.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b214d9087c4d6d377253",
    "number": 829,
    "body": "This makes it so there is a maximum value per exp orb when performing the merge task. This effectively fixes some scenarios where an explosion of exp orbs are desired, but still gain the benefits of merging too many exp orbs together. An example would be the explosion/shower of exp orbs when killing the ender dragon. Instead of having one orb worth thousands of points or thousands of orbs worth a few points, you can effectively have hundreds of orbs with hundreds of points.\r\n\r\nThis replaces #818 which I screwed up merging commits. Found it easier to just remake the PR from scratch than try to salvage my mistake.",
    "head_branch": "Max-Exp-Merge-Value",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b215d9087c4d6d377254",
    "number": 827,
    "body": "pom.xml and 0199-Remove-the-Vanilla-Method-Profiler.patch needed some changes.\r\n0223-Fix-Recipe-Books.patch was removed.",
    "head_branch": "1.12.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #827 from Black-Hole/1.12.1\n\nUpdate to 1.12.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b216d9087c4d6d377255",
    "number": 823,
    "body": "Replaces #753 \r\n\r\nI finally figured out how to edit existing patches. ;)",
    "head_branch": "PlayerAttemptPickupItemEvent-Additions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b217d9087c4d6d377256",
    "number": 822,
    "body": "This is because I'm tired of hunting down plugins in this list...",
    "head_branch": "Plugins-list-alphabatized",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #822 from BillyGalbreath/Plugins-list-alphabatized\n\nMake /plugins list alphabetical"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b218d9087c4d6d377257",
    "number": 821,
    "body": "This makes ocelots follow standard despawning conventions like all other living entities. If they have a custom name or are leashed they should not despawn.",
    "head_branch": "Ocelot-despawn-honor-leash-name",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Ocelot despawns should honor nametags and leash (#821)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b219d9087c4d6d377258",
    "number": 820,
    "body": "Allow plugins to set the killer of a LivingEntity.\r\n\r\nThis is useful for when plugins remove entities manually but still want other plugins to register it as killed by a player, etc.",
    "head_branch": "LivingEntity-setKiller",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b21ad9087c4d6d377259",
    "number": 819,
    "body": "When cancelling the SpawnerSpawnEvent this resets the timer used to trigger the next spawn attempt instead of spamming the event every tick.",
    "head_branch": "Reset-Spawner-Timer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Reset spawner timer when spawner event is cancelled (#819)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b21bd9087c4d6d37725a",
    "number": 818,
    "body": "This makes it so there is a maximum value per exp orb when performing the merge task. This effectively fixes some scenarios where an explosion of exp orbs are desired, but still gain the benefits of merging too many exp orbs together. An example would be the explosion/shower of exp orbs when killing the ender dragon. Instead of having one orb worth thousands of points or thousands of orbs worth a few points, you can effectively have hundreds of orbs with hundreds of points.",
    "head_branch": "Max-Exp-Merge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b21cd9087c4d6d37725b",
    "number": 816,
    "body": "- Added comparisons to BlockIceFrost, BlockMycel and EntitySlime.\r\n- Added method to compare the light level with a specified value following the same system as Comparable.compare.",
    "head_branch": "light-comparison-additions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b21dd9087c4d6d37725c",
    "number": 814,
    "body": "A small, but possibly useful change. Instead of having to start the server to do ```/ver[sion]``` to see how far behind you are in versions, make it so when someone does uses the ```--version``` flag, it also does a version check.",
    "head_branch": "feature/cli-version-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b21ed9087c4d6d37725d",
    "number": 812,
    "body": "Merge Upstream - Some notes before this is accepted;\r\n\r\n- Spigot has added their own version of EntityItemPickupEvent in replacement of @BillyGalbreath's; however, their version will break ABI compat with the paper version; Entity -> EntityLiving\r\n\r\n- PlayerItemPickupEvent has been deprecated (PlayerItemPickupEvent#setFlyAtPlayer()) meaning that this will need to be migrated over - do we implement this for all entities?",
    "head_branch": "upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #812 from electronicboy/upstream\n\nUpdate B/CB"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b21fd9087c4d6d37725e",
    "number": 808,
    "body": "Thanks to @chickeneer",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b220d9087c4d6d37725f",
    "number": 797,
    "body": "while looking over #791, I noticed that this method was missing the case in order to attempt to fix issues with shulker boxes. in specific, this patch will not fix #791 which I feel is a case of a plugin modifying the world async, but will aid in recovering any potential damage to the world that has occured once the causation has been removed from the server.\r\n\r\nit's due to this logic, I cannot potentially see how #791 can even occur beyond something somehow slipping between bukkits getState() type lookup, and the type lookup that occurs in NMS while it actually grabs the TE from the world.\r\n\r\n(This is also the fixed version of the commit, not the sleep deprived commit that ended up on my repo, oops)\r\n\r\nI'm somewhat dubious on maintaining this due to the obfuscated fields, the fact that this really belongs up the stream and not down here, and the missing case for pistons which considering how long pistons have been in the game I can't see if it's just a case of \"it was missed\" or if it's intentional for some reason...",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing coverages for getTileEntity in order to attempt to avoid exeptions when calling getTileEntity (#797)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b221d9087c4d6d377260",
    "number": 793,
    "body": "Low effort updates are the best updates!~ Scary but it also didn't even change any patches... *shudders*",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #793 from electronicboy/master"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b222d9087c4d6d377261",
    "number": 785,
    "body": "#784 #783 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #785 from electronicboy/master"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b223d9087c4d6d377262",
    "number": 781,
    "body": "![resov](https://cdn.meme.am/cache/instances/folder409/500x/73581409/spongebob-patrick-bikini-bottom-we-did-it-we-resolved-the-merge-conflict.jpg \"we did it! We resolved the merge conflict!\")",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #781 from electronicboy/master\n\nMerge upstream!"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b224d9087c4d6d377263",
    "number": 771,
    "body": "Because the irony of 0052-Fix-upstream-javadoc-warnings-and-errors.patch was killing me",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #771 from electronicboy/master"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b225d9087c4d6d377264",
    "number": 764,
    "body": "",
    "head_branch": "ver/1.8.8",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b226d9087c4d6d377265",
    "number": 762,
    "body": "64 items 5 seconds to transfer.  ↓\r\n![2017-06-25 17-15-14](https://user-images.githubusercontent.com/29110074/27514908-e7a1bef6-59c9-11e7-8694-dac1782a28ae.png)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b227d9087c4d6d377266",
    "number": 759,
    "body": "Fixes #757 \r\n\r\nMessages written to System.out are automatically redirected to the root logger by CraftBukkit. However, before the messages reach the logger, they are encoded and later decoded again using the standard system encoding.\r\n\r\nOn some systems (e.g. FreeBSD), the standard system encoding is `US-ASCII` by default, which doesn't support the section sign `§` that is used for the color codes. Consequently, they will never reach the formatter that translates them into ANSI escape codes.\r\n\r\nThere is no reason to write these messages to System.out - it just adds additional overhead and the encoding problems. We can just log the messages directly with the root logger.",
    "head_branch": "fix-color-encoding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #759 from Minecrell/fix-color-encoding"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b228d9087c4d6d377267",
    "number": 753,
    "body": "",
    "head_branch": "PlayerAttemptPickupItemEvent-Additions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b229d9087c4d6d377268",
    "number": 752,
    "body": "",
    "head_branch": "Entity#fromMobSpawner",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b22ad9087c4d6d377269",
    "number": 751,
    "body": "Adds a Pre Lookup Event and a Post Lookup Event so that plugins may prefill in profile data, and cache the responses from\r\nprofiles that had to be looked up.",
    "head_branch": "profiles",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Profile Lookup Events\n\nAdds a Pre Lookup Event and a Post Lookup Event so that plugins may prefill in profile data, and cache the responses from\nprofiles that had to be looked up."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b22bd9087c4d6d37726a",
    "number": 750,
    "body": "Let's you eject the Parrot naturally and get the newly spawned Parrot.",
    "head_branch": "release-shoulder",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Shoulder Entities Release API\n\nLet's you eject the Parrot naturally and get the newly spawned Parrot."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b22cd9087c4d6d37726b",
    "number": 746,
    "body": "#692",
    "head_branch": "Add-UnknownCommandEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add UnknownCommandEvent (#746)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b22dd9087c4d6d37726c",
    "number": 743,
    "body": "There is usually no reason to stop reading from the console, so preventing console input after EOT can be extremely confusing.\r\n\r\nTo prevent this, we can simply ignore the exception thrown by JLine and continue reading normally.",
    "head_branch": "ignore-eot",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #743 from Minecrell/ignore-eot\n\nContinue reading from console input after EOT"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b22ed9087c4d6d37726d",
    "number": 742,
    "body": "In relation to #692",
    "head_branch": "Add-PlayerUnknownCommandEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b22fd9087c4d6d37726e",
    "number": 740,
    "body": "It was originally added in Bukkit/CraftBukkit@6aafe7c as a workaround for BUKKIT-4956 to fix console output on Windows.\r\n\r\nI believe the original issue was related to [LOG4J2-965](https://issues.apache.org/jira/browse/LOG4J2-965) and fixed in apache/logging-log4j2@d04659c. Minecraft 1.12 finally updated the Log4J version so this issue is no longer present.\r\n\r\nConsole output is still working fine on Windows after removing this.\r\n\r\n**Note:** I've added this to the original console improvements patch added in #728 because I'm not entirely sure if this would be still needed if we weren't using TerminalConsoleAppender. I believe it's unrelated but it might be better to keep all the log4j changes together in one patch. I can move it to a separate patch if that would be preferred.",
    "head_branch": "remove-windows-compat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove unneeded WINDOWS_COMPAT ConsoleAppender\n\nIt was originally added in Bukkit/CraftBukkit@6aafe7c5a10 as a\nworkaround for BUKKIT-4956 to fix console output on Windows.\n\nI believe the original issue was related to LOG4J2-965 and fixed\nin apache/logging-log4j2@d04659c. Minecraft 1.12 finally updated\nthe Log4J version so this issue is no longer present.\n\nConsole output is still working fine on Windows after removing this."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b230d9087c4d6d37726f",
    "number": 732,
    "body": "Replaces #684 ",
    "head_branch": "PlayerAttemptPickupItemEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PlayerAttemptPickupItemEvent (#732)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b231d9087c4d6d377270",
    "number": 731,
    "body": "#689 quite simply provides a per-world configurable option to disable the spawning of lingering effects from creepers.\r\n\r\nfigured it was a 2-minute job, and always nice to get stuff off the issues list",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #731 from electronicboy/master\n\nProvide a configurable option to disable creeper lingering effect spawns"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b232d9087c4d6d377271",
    "number": 728,
    "body": "This is a complete rewrite of CraftBukkit's implementation of  various console improvements (console colors, tab completion, persistent input line, ...) using JLine 3.x and [TerminalConsoleAppender](https://github.com/Minecrell/TerminalConsoleAppender).\r\n\r\n## Summary\r\n\r\nNew features:\r\n- Support console colors for Vanilla commands\r\n- Add console colors for warnings and errors\r\n- Server can now be turned off safely using CTRL + C. JLine catches the signal and the implementation shuts down the server cleanly.\r\n- Support console colors and persistent input line when running in IntelliJ IDEA\r\n\r\nOther changes:\r\n- Update JLine to 3.3.1 (from 2.12.1)\r\n- Server starts 1-2 seconds faster thanks to optimizations in Log4j configuration\r\n\r\n## New features\r\n#### Console colors for Vanilla commands\r\nCraftBukkit supports colors in the console for Bukkit commands, but not for the commands included with the Vanilla server. The new implementation handles both, adding colors in various situations:\r\n\r\n<details> \r\n  <summary>Click me for screenshots</summary>\r\n\r\n![screenshot_20170609_193303](https://user-images.githubusercontent.com/3035868/26987089-792c21ea-4d4a-11e7-831f-7e22e13d72bf.png) \r\n\r\n![screenshot_20170609_192958](https://user-images.githubusercontent.com/3035868/26986996-11dbfefc-4d4a-11e7-88ee-2c467ac8f8f2.png) \r\n\r\n</details>\r\n\r\n#### Add console colors for warnings and errors\r\nI guess this could be something subjective, but in my opinion it makes it much easier to spot warnings and errors in the log because they are now marked in yellow and red. It's entirely optional so I can easily disable it if you don't want it.\r\n\r\n<details> \r\n  <summary>Click me for screenshots</summary>\r\n\r\n![screenshot_20170609_194411](https://user-images.githubusercontent.com/3035868/26987507-1a6a5efe-4d4c-11e7-8d9d-a79b0010bc34.png)\r\n\r\n![screenshot_20170609_194438](https://user-images.githubusercontent.com/3035868/26987510-1d790780-4d4c-11e7-92e1-bb5c67a03fc9.png)\r\n\r\n</details>\r\n\r\n#### Server can now be turned off safely using CTRL + C\r\nPreviously this relied entirely on shutdown hooks that are often not given enough time to be able to shut down the server cleanly and save all the changes. JLine will now catch the signal which allows us to shut down the server cleanly.\r\n\r\n#### Console colors and persistent input line when running in IntelliJ IDEA\r\nIt seems like this was entirely missing in the CraftBukkit implementation. I don't know how many developers actually run servers directly in their IDE but IntelliJ IDEA has wonderful support for console colors and the persistent input line now:\r\n\r\n<details> \r\n  <summary>Click me for screenshots</summary>\r\n\r\n![screenshot_20170609_195700](https://user-images.githubusercontent.com/3035868/26987953-d35541b2-4d4d-11e7-954f-7a073219875a.png)\r\n\r\n![screenshot_20170609_195235](https://user-images.githubusercontent.com/3035868/26987956-d638b404-4d4d-11e7-9aaa-a6a4701e60d4.png)\r\n\r\n</details>\r\n\r\n## Implementation details\r\nIn my opinion, the old implementation never really survived the switch to Log4J. It was implemented with a Log4J appender included in Mojang's authlib which pushes all messages into a queue that was polled in another thread and then written to the output stream using JLine's API.\r\n\r\n[TerminalConsoleAppender](https://github.com/Minecrell/TerminalConsoleAppender) is a much more simple Log4J appender, which handles the initialization of the JLine terminal and directly writes the messages to the JLine terminal. It checks the environment to detect which features can be supported and enables them if possible. I think the documentation and Javadocs of it are quite well so I'm not going to explain it further.\r\n\r\nI've originally written it a few years ago for SpongeVanilla and improved it over the time. An older version of it is also in use by Forge since Minecraft 1.8.8. For Minecraft 1.12 I've decided to refactor it into a separate project which allows other projects to use it easily. I thought I'd try how well it would work for Paper and it seems to work great.\r\n\r\n### Server startup optimization\r\n**TL;DR Paper starts 1 or 2 seconds faster now.** This is only a very small part of the PR and yet it took the most space to document (I tried to keep it short, I guess I failed). It's not really relevant for anything above so feel free to skip if you're not interested.\r\n\r\nI've mentioned above that the server starts about 1-2 seconds faster with these changes. The reason for this is the way Log4J loads its plugins. Log4J is more or less modular, the core consists mostly out of independent plugins.\r\n\r\nThere are two ways it can find them at runtime:\r\n- By scanning the classpath. This is not really optimized so it just loads all classes in a certain package and checks if they are annotated with the plugin annotation.\r\n- For performance they have an annotation processor that writes the available plugins into a `Log4J2Plugins.dat` file.\r\n\r\nIn the old Log4J version before Minecraft 1.12 the annotation processor was not yet included, so only the log4j-core actually used the `Log4J2Plugins.dat` file. Everything was working nicely, though there was a slight performance impact because the packages specified in the log4j configuration had to be scanned for plugins. (For CraftBukkit this is only `com.mojang.util`)\r\n\r\nIn newer log4j versions the metadata file is also generated for custom plugins now, theoretically removing the need for any classpath scanning. However, Mojang run into an issue with the server JAR (see [MC-115797](https://bugs.mojang.com/browse/MC-115797)) because their shaded JAR now included `Log4J2Plugins.dat` twice, once for log4j-core and once for authlib.\r\n\r\nThe solution for that is to merge them, and there are tools available to do this for Maven and Gradle. However, Mojang chose to exclude both, even the one from log4j-core! Log4J handles that gracefully, however the consequence is that is **forced to classload literally every single of its classes to check if they are plugins**, not only a few classes from custom plugins.\r\n\r\nYou can easily see that if you enable Log4J's debug logging. It even shows several exceptions because it loads classes with missing dependencies (which are never used in Minecraft or Paper): https://gist.github.com/Minecrell/e39deb871eb63457331a012e0a53b3d1#file-gistfile1-txt-L138-L3273\r\n\r\nExcept the delay to load and check all the classes included in Log4J it doesn't start causing issues until you add the first custom appender with a `Log4J2Plugins.dat` file, which is the case for TerminalConsoleAppender. As soon as one `Log4J2Plugins.dat` is on the classpath, Log4j will no longer scan its own classes.\r\n\r\nThe solution for this in Paper is extremely simply, all we need to do is to shade log4j-core again to get its plugin map file and merge it with the one from TerminalConsoleAppender. No classpath scanning is necessary at runtime, the delay after `Loading libraries, please wait...` is reduced about 1 or 2 seconds (sometimes more).\r\n\r\n#### Profiler screenshots\r\nHere is a screenshot from a profiler without `Log4j2Plugins.dat`. In this case it takes about 3 seconds to initialize:\r\n\r\n![screenshot_20170609_203259](https://user-images.githubusercontent.com/3035868/26989310-d93a8060-4d52-11e7-9b94-ad8fc8e59b97.png)\r\n\r\nNow let's add `Log4JPlugins.dat` and disable all classpath scanning. Now it takes about 800 ms to load instead of 3000ms!:\r\n\r\n![screenshot_20170609_203711](https://user-images.githubusercontent.com/3035868/26989501-98a4f8ea-4d53-11e7-9d4a-1cb3143bb837.png)\r\n",
    "head_branch": "terminalconsoleappender",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #728 from Minecrell/terminalconsoleappender\n\nImprove console implementation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b233d9087c4d6d377272",
    "number": 722,
    "body": "#700 but actually for 1.12! Fixes #721 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #722 from electronicboy/master\n\nRe: Actually exit the JVM after stopping the server when /restart is ran"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b234d9087c4d6d377273",
    "number": 719,
    "body": "Revert spigots relocation of fastutil and remove Aikars fastutil-lite from the timings v2 patch",
    "head_branch": "pre/1.12",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #719 from electronicboy/pre/1.12\n\nDo not relocate fastutil"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b235d9087c4d6d377274",
    "number": 718,
    "body": "",
    "head_branch": "pre/1.12",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #718 from electronicboy/pre/1.12\n\nUpdate Paper to MC 1.12"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b236d9087c4d6d377275",
    "number": 700,
    "body": "Fixes #699, looks like in decluttering the RestartCommand class, a stray System.exit call lost its way.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #700 from electronicboy/master\n\nActually exit the JVM after stopping the server when /restart is ran"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b237d9087c4d6d377276",
    "number": 693,
    "body": "This PR attempts to allow the server to stop safely, as opposed to being straight up killed by the watchdog, allowing us let the server disable plugins and save worlds as normal, reducing the risk of any data corruption that could occur.\r\n\r\nWhile Spigots implementation attempted to handle this from the restart command, it had various issues should the server actually be stuck in a deadlock, or should we cause one by attempting to stop from the watchdog thread.\r\n\r\nin 99% of cases when the watchdog is triggered, the server is going to have completed a tick in a reasonable amount of time afterward, by setting the server to stop, we can allow the server to stop normally allowing for normal saving to occur.\r\n\r\nIn order to account for deadlocks, __10 seconds__ after marking the server as stopped, if we haven't actually entered the state of the server stopping, we will forcibly kill the server after, if applicable, setting the shutdown handler in order to allow the restart script to be executed.\r\n\r\nThis change does not handle cases where we actually deadlock in the middle of stopping, as this is a time where we expect plugins and the worlds to be saving, having a \"you must save before x amount of time\" is somewhat risky and has a high potential to cause corruption to any data/world files, I personally do not believe that the advantages outweigh the overall risks, especially when you consider the state of some servers.\r\n\r\nnb: 10 seconds is somewhat long in the scheme of things, however, this is a value that I believe is a somewhat sane compromise, I would probably consider making this limit, or the overall behavior change of these changes, to be configurable",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #693 from electronicboy/master\n\nAllow the watchdog to try sanely stopping the server"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b239d9087c4d6d377277",
    "number": 691,
    "body": "The title of the commit is misleading, and I decided to fix it. \r\n\r\nThe math is a little unchecked & untested but in theory from my perspective it should be precise to about plus or minus 4 hours from dawn at the worst case if dawn is at 5 am.",
    "head_branch": "dawn",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b239d9087c4d6d377278",
    "number": 684,
    "body": "This seems like something that was partially implemented (canHold still stopped full inventories) by [fieldmaster back in 2012](https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/430d352a5a3d1f8d83276f0af43065b49e3b9822#src/main/java/net/minecraft/server/EntityItem.java), but was commented out and negated by [Thinkofname in 2014](https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/24557bc2b37deb6a0edf497d547471832457b1dd#nms-patches/EntityItem.patch).\r\n\r\nThis may break some existing plugins that listen to the event and assume it isn't cancelled. If the event fires as cancelled the item amount is 0.\r\n\r\nIf this doesn't seem sane I could always just add a new event PlayerAttemptPickupItemEvent.\r\n\r\nUse-case for this would be my money drop plugin I keep talking about in my other 3 PRs this weekend. I would like for players to still be able to pick up money even when their inventory is full (since the money item isnt going to their inventory anyways). Currently there is no way to do this other than tracking all money drop locations and player locations and comparing distance in a repeating task (not very sane). Firing this event in a cancelled state (or a new \"attempt\" event) would allow plugins like mine to function correctly without laggy repeating tasks.",
    "head_branch": "PlayerPickupItemEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b23ad9087c4d6d377279",
    "number": 683,
    "body": "Not sure how practical this is at all for a PR. But, I'm bored, and I could use this in one of my plugins.\r\n\r\nMy exact use case is a money drop plugin. Killing mobs drops gold nuggets with some metadata worth a certain amount of vault money. Player picks up the item and I cancel the pickup, remove the item, and pay the player the value from metadata. The problem is, the item just disappears on the player's screen. I have to reach into NSM just to call EntityHuman.receive(EntityItem, 1) to make the item fly at the player like a normal picked up drop. An alternative to NMS would be ProtocolLib, but then I'd have to run my own tracker, because the player picking up the item isn't the only one getting sent the PacketPlayOutCollect packet.\r\n\r\nMight have other use-cases, so I kept that in mind when designing this API. Not only can you do what I mentioned, but you could also stop the item from flying at the player if you want. Etc.",
    "head_branch": "PlayerPickupItemEvent#setFlyAtPlayer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PlayerPickupItemEvent#setFlyAtPlayer (#683)\n\n* PlayerPickupItemEvent#setFlyAtPlayer"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b23cd9087c4d6d37727a",
    "number": 682,
    "body": "This will allow plugins to change what a player sees when they hover over the player count on the multiplayer server list when the `ServerListPingEvent` is fired.",
    "head_branch": "feature/set-sample-list",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b23dd9087c4d6d37727b",
    "number": 680,
    "body": "This is related to #679 due to the fact that cancelling the EntityPickupItemEvent can be somewhat spammy (~15 calls per second). I decided to put the two in different PRs because they both have separate use-cases where they do not rely on each other (event for listening, flag for blocking).\r\n\r\nWith this PR you can set an Item to not be picked up by a non-player entity, such as a money drop plugin that uses gold nuggets/ingots/blocks as dropped currency, for example. This flag is beneficial over #679 due to the fact is skips a lot of logic and does not call a spammy event which may have a listener with its own heavy logic. The flag can be set at the time the Item was created and then forgotten about.",
    "head_branch": "Item#canEntityPickup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Item#canEntityPickup (#680)\n\nItem#canEntityPickup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b23ed9087c4d6d37727c",
    "number": 679,
    "body": "I finally found a need to cancel zombie/skeleton from picking up items. Upon searching for a way to do it, I found many requests to both Spigot and Bukkit dating as far back as 2012 (maybe older) for this event. Since it's now mid-way through 2017, I figure its time we have this.\r\n\r\nTested with sample plugin:\r\n\r\n`\r\n\r\n    @EventHandler\r\n    public void onEntityPickupItem(EntityPickupItemEvent event) {\r\n        ItemStack stack = event.getItem().getItemStack();\r\n\r\n        System.out.println(event.getEntity().getType()\r\n                + \" tried to picked up \"\r\n                + stack.getAmount()\r\n                + \"x \"\r\n                + stack.getType()\r\n                + \" but event was cancelled\");\r\n\r\n        event.setCancelled(true);\r\n    }\r\n\r\n\r\n`",
    "head_branch": "EntityPickupItemEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "EntityPickupItemEvent (#679)\n\nEntityPickupItemEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b23fd9087c4d6d37727d",
    "number": 669,
    "body": "Spigot has patched this issue inside MapIcon, meaning that we no longer need to maintain this patch\r\n\r\nSpigots patch also fixes #668 in that it will verify the length of the array, as well as protect against a negative type value being retrieved from the array, thus removing the potential for a out of bounds exception in the event of an invalid ID\r\nOnly real change is that Spigots patch returns a MapIcon.Type.PLAYER, instead of the RED_MARKER as originally PR'd by @aikar",
    "head_branch": "remove-maps-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #669 from electronicboy/remove-maps-patch\n\nRemove Ignore invalid Marker Icon ID's in maps"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b240d9087c4d6d37727e",
    "number": 663,
    "body": "Currently, when a player dies they are not automatically ejected from the entity they are riding, which allows for the ridden entity to affect the players location on respawn (we're still riding it for the current tick, and potentially the next), as well as allows a dupe to occur with the ridden entity teleporting to the new world with the player.\r\n\r\nas per, #657 and in the grand scheme of trivial patches for fixing issues, This commit has been tested by me on a plain server, and doesn't really perform any behavioral changes that should cause any issues (especially as existing plugins will see the same state as before in regards to player riding entities on the death event). Would be nice for some confirmation on this, however this seems to solve the issue with no bad effects",
    "head_branch": "player-death-passenger-bug",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #663 from electronicboy/player-death-passenger-bug\n\nCall stopRiding() on a Players death"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b241d9087c4d6d37727f",
    "number": 638,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #638 from electronicboy/master\n\nEnsure that the world of a dead entity is not changed in a portal"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b242d9087c4d6d377280",
    "number": 636,
    "body": "on macOS, it's common for zsh to be installed via homebrew, which by default installs into /usr/local, this PR should fix the matching to account for that, allowing the paper script to run on macOS without any issues in such a (fairly common) setup",
    "head_branch": "paper-maczsh",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #636 from electronicboy/paper-maczsh\n\npaper tools - fix shell matching"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b243d9087c4d6d377281",
    "number": 635,
    "body": "#PushToMasterMasterRace\r\n\r\nThe following patch refines the entity transfer between worlds to only actually relocate the new entity, after testing this multiple times I achieved much more successful teleporting of entities over the world without them suffocating (in fact, I was not able to suffocate a single entity on teleporting, which seems like an improvement over the last commit where I think it was more chance based...)\r\n\r\nI can also (still) no longer replicate the dupe bug, However, I've been unable to replicate this on all commits that I've actually tested this in since my original PR.\r\n\r\n#633 \r\nhttps://keybase.pub/electronicboy/paperclip.jar",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #635 from electronicboy/master\n\nOnly set the location of the newly spawned entity"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b244d9087c4d6d377282",
    "number": 634,
    "body": "…nd world, thus preventing a dupe bug #633\r\n\r\nSetting the entity to be dead before creating a copy of it for the teleportation event prevents us from calling WorldServer#entityJoinedWorld on the existing entity (which is moved over to the new world), and then the new entity that is placed onto the destination world)\r\n\r\nIf you wish to test this and report any issues, I had a quick play and couldn't seen any, but here is a paperclip jar with the patch in this PR:\r\nhttps://keybase.pub/electronicboy/paperclip.jar",
    "head_branch": "portal-dupe-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b245d9087c4d6d377283",
    "number": 628,
    "body": "Make it so that if reloading the command aliases fails, a failure message is displayed instead of always showing the success message. Also add \"commands\" to Tab Completion\r\n\r\n**Note:** This required a signature change to Bukkit#reloadCommandAliases() so that it returns a boolean based on if the command aliases reloaded or not.",
    "head_branch": "feature/reloadCommands",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #628 from willies952002/feature/reloadCommands\n\nDon't Display Success Message on Alias Reload Fail"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b246d9087c4d6d377284",
    "number": 617,
    "body": "This PR adds an event when a player creates an armor stand.",
    "head_branch": "PlayerArmorStandCreateEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b247d9087c4d6d377285",
    "number": 611,
    "body": "Fixes #610 \r\n\r\nMethods declared in interfaces cannot be invoked with invokevirtual. Change to use invokeinterface when the method's declaring class is an interface.\r\n\r\nTested via:\r\n\r\nhttp://pastebin.com/V47TM5yd - Main class\r\nhttp://pastebin.com/C70gwjzc - Interface",
    "head_branch": "asm-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #611 from Spottedleaf/asm-fix\n\nFix #610"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b248d9087c4d6d377286",
    "number": 603,
    "body": "Figured I'd create this PR after chats yesterday (or probably the day before) in regards to the PlayerChatEvent;\r\n\r\nIt's existence after 4 years of deprecation is pretty questionable, however Spigot has decided to not remove this event in the foreseeable future. In general, this event is useless and there is no sane reason to actually keep it in existence, writing proper thread safe code is enough to remove any form of requirement for this event, especially with the BukkitScheduler in existence to allow scheduling of tasks in sync (Which, for chat; is pretty odd in itself).\r\n\r\nThe firing of the warning is placed along side the code to call this event, this is somewhat questionable, however I feel that it closes the gap of people registering their listener using a runnable to bypass the check, while this is generally something you wouldn't care about, the patch and make-do of the community does tend to form a question as to if that is a good idea in terms of ensuring that we catch everything. (Beyond hooking Listener registration and throwing messages whenever we hit a PlayerChatEvent listener).\r\n\r\nThe message is also a little plain and doesn't really stand out, so I am open to suggestions on any changes that should be made, as well as any changes to the actual english used in the messages. ",
    "head_branch": "add-sync-chat-warning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b249d9087c4d6d377287",
    "number": 600,
    "body": "Log when dum plugins register listeners for PlayerChatEvent",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b24ad9087c4d6d377288",
    "number": 584,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add fromBottle flag to Experience Orbs (#584)\n\n* Add fromBottle flag to Experience Orbs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b24bd9087c4d6d377289",
    "number": 583,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b24cd9087c4d6d37728a",
    "number": 582,
    "body": "",
    "head_branch": "player-count",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #582 from prplz/player-count\n\nAdd World.getPlayerCount"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b24dd9087c4d6d37728b",
    "number": 579,
    "body": "",
    "head_branch": "optimise-datawatcher",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b24ed9087c4d6d37728c",
    "number": 575,
    "body": "The server \"cancels\" block break packets that are more than six units away, without actually notifying the player. This can happen when mining fast or being teleported (with a little latency).",
    "head_branch": "fix-block-break-desync",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #575 from prplz/fix-block-break-desync\n\nFix block break desync"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b24fd9087c4d6d37728d",
    "number": 573,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #573 from dedicatedmemers/master\n\nDon't allow entities to become passengers of themselves"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b250d9087c4d6d37728e",
    "number": 564,
    "body": "See https://github.com/PaperMC/Paper-1.7/blob/5a0db860278e440865bc7e76fd7b583ff7e18c32/Spigot-Server-Patches/0058-Better-container-checks.patch\r\n\r\nFixes dupes and may prevent future dupes in new inventory types",
    "head_branch": "dupe1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Better container checks (#564)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b251d9087c4d6d37728f",
    "number": 558,
    "body": "",
    "head_branch": "optimise-hoppers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Further optimise hoppers"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b252d9087c4d6d377290",
    "number": 557,
    "body": "",
    "head_branch": "fix-duping-for-real",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Properly fix item duplication bug (#557)\n\nCredit to prplz for figuring out the real issue"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b253d9087c4d6d377291",
    "number": 544,
    "body": "#530 ",
    "head_branch": "feature/a-feature-crafted-just-for-my-best-friend-on-the-whole-planet-and-the-person-you-should-all-give-hugs-yes-hugs-not-just-a-hug-to",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b254d9087c4d6d377292",
    "number": 540,
    "body": "",
    "head_branch": "ver/1.10.2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b255d9087c4d6d377293",
    "number": 532,
    "body": "",
    "head_branch": "optimise-chunks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b256d9087c4d6d377294",
    "number": 525,
    "body": "",
    "head_branch": "pr/update-cb",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #525 from jamierocks/pr/update-cb\n\nUpdate upstream CB"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b257d9087c4d6d377295",
    "number": 524,
    "body": "",
    "head_branch": "pr/resolve-previous-pr",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #524 from jamierocks/pr/resolve-previous-pr\n\nResolve previous pr"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b258d9087c4d6d377296",
    "number": 520,
    "body": "",
    "head_branch": "optimise-tick-loop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b259d9087c4d6d377297",
    "number": 519,
    "body": "",
    "head_branch": "pr/update-inv",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #519 from jamierocks/pr/update-inv\n\nUpdate inventory. Fixes #505"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b25ad9087c4d6d377298",
    "number": 518,
    "body": "Use \"/reload commands\" to reload the aliases stored in commands.yml",
    "head_branch": "feature/reloadCommands",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow Reloading of Command Aliases\n\nUse \"/reload commands\" to reload the aliases stored in commands.yml"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b25bd9087c4d6d377299",
    "number": 517,
    "body": "Doesn't allow offline players/entities to drop items.",
    "head_branch": "fix-itemduping",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #517\n\nDon't process packets from offline players"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b25cd9087c4d6d37729a",
    "number": 515,
    "body": "NetworkManager#sendPacket is an extremely hot piece of code - and in one of the methods called, m(), ConcurrentLinkedQueue#isEmpty is called countlessly. We can cut down on these isEmpty() calls by simply checking if poll() is null.\r\n\r\nThis is pretty minor, but with the frequency in which sendPacket is called, will add up.",
    "head_branch": "optimise-networkmanager",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b25dd9087c4d6d37729b",
    "number": 513,
    "body": "",
    "head_branch": "fix-endcredits-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b25ed9087c4d6d37729c",
    "number": 512,
    "body": "Brings removeQueue operations back to O(n) instead of O(n^2).",
    "head_branch": "optimise-removequeue",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b25fd9087c4d6d37729d",
    "number": 509,
    "body": "",
    "head_branch": "ver/1.10.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b260d9087c4d6d37729e",
    "number": 508,
    "body": "",
    "head_branch": "uu-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b261d9087c4d6d37729f",
    "number": 504,
    "body": "Miniscule fix but it adds up",
    "head_branch": "fix-double-lock",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b262d9087c4d6d3772a0",
    "number": 503,
    "body": "1. Stops update packets being sent when no changes have occurred\r\n2. Allows plugin developers to set up scoreboards with fewer packets",
    "head_branch": "scoreboard-batch-update-optimise",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b263d9087c4d6d3772a1",
    "number": 502,
    "body": "Minimises operations and cuts out bit shifting & 2 loops.",
    "head_branch": "optimise-recalc-block-counts",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b264d9087c4d6d3772a2",
    "number": 501,
    "body": "1. Allows amount of packets sent to be reduced.\r\n2. Stops excess packets if no change actually happened.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b265d9087c4d6d3772a3",
    "number": 500,
    "body": "This reduces load on high-player count, high login frequency servers. The changed incrementAndGet() call frequency for b don't matter as it's only used for the thread number. Idea from @AlfieC.",
    "head_branch": "cachedthreadpool-login",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Cache user authenticator threads\nIdea from @AlfieC"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b266d9087c4d6d3772a4",
    "number": 499,
    "body": "I don't think contention is an issue as I am using LongAdder. This solves many scalability issues with main thread tasks in general (especially network ones at high player counts).",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Optimize network queue by making size() constant-time\nIdea from @AlfieC"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b268d9087c4d6d3772a5",
    "number": 496,
    "body": "With the Minecraft 1.11 update, the ProjectileHitEvent was called incorrectly when the fishing rod bobber hit an entity. It would call if the bobber hit the ground, but not if it hit an entity. This PR fixes that.",
    "head_branch": "ProjectileHitEventFix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Relocate bad call to ProjectileHitEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b268d9087c4d6d3772a6",
    "number": 495,
    "body": "Use \"/reload commands\" to reload the aliases stored in commands.yml",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b269d9087c4d6d3772a7",
    "number": 493,
    "body": "Added an event for when players use the \"use\" button to manipulate the contents of flower pots.\r\n\r\nUnfortunately, the server-side code that handles cancellation doesn't properly tell the client the state of the flower pot, so if the event was cancelled, the client thinks an item was removed, or the item was placed into the pot. I tried tileentityflowerpot.update() and a few other things to no avail. If I had some pointers that'd be awesome!",
    "head_branch": "PlayerFlowerPotManipulateEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b26ad9087c4d6d3772a8",
    "number": 490,
    "body": "If you try to build PaperSpigot on path where parent directory contains spaces, then you'll get \"No such file or directory\" errors. This change fixes that issue.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #490 from mikroskeem/master\n\nFix building when parent directory with spaces is used"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b26bd9087c4d6d3772a9",
    "number": 468,
    "body": "I am Godzilla, and I <3 Maratx",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b26cd9087c4d6d3772aa",
    "number": 467,
    "body": "Updated the event to be cancellable, and give it an additional create\r\nreason for the vehicle.\r\n\r\nBefore this PR, cancellation was impossible given that the event call happened inside the constructors for EntityBoat and EntityMinecartAbstract. This PR relocates the event call logic to the appropriate places.\r\n\r\nAs for the getSource() API method in VehicleCreateEvent, I wanted it to be as simple as returning a generic object that extends Object, only requiring determination from VehicleCreateReason such that you could create either a Block or Player object depending on the reason.",
    "head_branch": "VehicleCreateEventCancellable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b26dd9087c4d6d3772ab",
    "number": 449,
    "body": "This PR does 2 things. First of all, it adds a missing event for villagers getting zapped by lightning. Secondly, it creates a generalized event, EntityZapEvent, which also replaces the current PigZapEvent which has been deprecated.\n",
    "head_branch": "EntityZapEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b26ed9087c4d6d3772ac",
    "number": 445,
    "body": "This patch adds the ability to configure the behaviour of the InventoryMoveItemEvent or disable the calling of it completely. It currently tries to keep the changes to the CraftBukkit behaviour to a minimum could be implemented way better when rewriting the whole item move logic.\n\nThe main issue that this patch tries to solve is the InventoryMoveItemEvent being called even 'though the destination inventory wouldn't actually be able to receive it. That means that hoppers pointing into full chests will call this event every few as long as it has items in it. This is bad for protection plugins like LWC that do owner lockups on every attempt to move items even when they wouldn't care about items not being moved.\n\nThe default is to just call the InventoryMoveItemEvent as cancelled when Vanilla wouldn't move the item, this matches the behaviour of other Bukkit events (like the PlayerInteractEvent) and gives plugins the ability to decide whether or not they want to listen on cancelled events. (Hint: LWC doesn't listen on cancelled events and I majorly improved the impact of hoppers from [60%](https://timings.aikar.co/v2/?id=012a429778ce4d13852952f67a2a5775&start=1476314971&end=1476315059&section=lag) to only [20%](https://timings.aikar.co/v2/?id=a3e7a12374f3402fa93066c791ad341a&start=1476315767&end=1476316187&section=lag) with an extremely large sorting machine on my server, keeping the server at ~20 ticks instead of dropping down to 10)\n\nOne could also disable the calling of the event for full target inventories in the config or the whole event completely.\n",
    "head_branch": "InventoryMoveItemEvent-improvements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b26fd9087c4d6d3772ad",
    "number": 434,
    "body": "",
    "head_branch": "fix/timings-verbose",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #434 from kashike/fix/timings-verbose\n\nFix @aikar's oops with verbose timings"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b271d9087c4d6d3772ae",
    "number": 432,
    "body": "#349\n",
    "head_branch": "anti-xray/1.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b271d9087c4d6d3772af",
    "number": 430,
    "body": "We know what projectile hit something in ProjectileHitEvent but we don't know what it hit. This adds a hit entity so we can grab what was hit.\n",
    "head_branch": "ProjectileHitEventModification",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b273d9087c4d6d3772b0",
    "number": 428,
    "body": "Closes #423\n",
    "head_branch": "feature/configurable-kick-messages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #428 from kashike/feature/configurable-kick-messages\n\nConfigurable flying kick messages"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b274d9087c4d6d3772b1",
    "number": 427,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[CI-SKIP] Add javadocs to readme (#427)\n\nAdd javadocs to readme"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b275d9087c4d6d3772b2",
    "number": 417,
    "body": "Added source entity to the PlayerExpChangeEvent event to allow extra calculations based on the source of the event.\n\nA use-case of this case might be spawning in custom experience orbs and associating custom data to them by their UUID. It would be nice if the original experience orb could be retrieved and its UUID checked to make use of this custom data.\n",
    "head_branch": "PlayerExpChangeEventModification",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b276d9087c4d6d3772b3",
    "number": 408,
    "body": "",
    "head_branch": "feature/health-conversion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #408 from kashike/feature/health-conversion\n\nConvert new health to a float"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b277d9087c4d6d3772b4",
    "number": 406,
    "body": "Minecraft bug: https://bugs.mojang.com/browse/MC-88097\n\nSnow blocks do not melt under normal circumstances and do not need to be ticked.\nThis commit removes the block type specific tick function and removes the line marking the block as \"needs to be ticked\".\n\nThis patch significantly increased the TPS in a very snowy world.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Disable ticking of snow blocks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b277d9087c4d6d3772b5",
    "number": 402,
    "body": "Servers behind a bungeecord proxy in offline mode\nwill now properly pull offline mode UUIDs and data\nwhen this setting is set to false. Default is unchanged.\nPorted from Paper 1.10.2\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b278d9087c4d6d3772b6",
    "number": 400,
    "body": "Ever since I added this to my server over 2 years ago, no one has added it to Bukkit, Spigot or even Paper yet. I figured I could contribute some of my code to such a fine project such as Paper!\n",
    "head_branch": "PlayerPickupExpOrb",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b279d9087c4d6d3772b7",
    "number": 394,
    "body": "Partial solution to @oloflarsson's hopper issues.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b27ad9087c4d6d3772b8",
    "number": 385,
    "body": "Before this commit, when the server is in offline-mode and bungee-mode is enabled, the getOfflinePlayer(playername) method acts like the server is in online-mode if the player is not connected to the server.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b27bd9087c4d6d3772b9",
    "number": 369,
    "body": "The client only uses the world age (this.a) to compute banners while displaying the time of day (this.b) in the debug screen (F3). Instead of changing both values before sending it to the client, only the world age gets modified. This should fix banners and display the correct time in F3.\n",
    "head_branch": "fix-banner",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #369 from Gabscap/fix-banner\n\nFix-Banner Patch: Display correct time in F3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b27cd9087c4d6d3772ba",
    "number": 349,
    "body": "Paper inbuilt Anti-Xray. Asynchronous mode is configurable.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b27dd9087c4d6d3772bb",
    "number": 348,
    "body": "",
    "head_branch": "pom",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #348 from DemonWav/pom\n\nAdd repo to handle the bungee-cord chat dependency"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b27fd9087c4d6d3772bc",
    "number": 342,
    "body": "Instead of calculating the damage taken from hitting a wall, you can disable it in the config.\n\nThese calculations took ~40,000ns on my machine, though it reached as high as 120,000ns.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #342 from phase/master\n\nToggleable Elytra Wall Damage"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b280d9087c4d6d3772bd",
    "number": 340,
    "body": "Running `/save-all flush` would start an infinite loop that prints:\n\n```\nThreadedAnvilChunkStorage (world): All chunks are saved\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #340 from phase/master\n\nFix infinite loop when saving chunks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b281d9087c4d6d3772be",
    "number": 338,
    "body": "This patch removes ITickable from TileEntitySkull, which looks unneeded, when it is actually used for Dragon Heads. Without ITickable, Dragon Heads aren't affected by redstone like they are in Vanilla.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b282d9087c4d6d3772bf",
    "number": 327,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #327 from Brokkonaut/master\n\nUpdate upstream CB/S"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b283d9087c4d6d3772c0",
    "number": 323,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b284d9087c4d6d3772c1",
    "number": 321,
    "body": "",
    "head_branch": "falling-block-height-doEntityDrops",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #321 from MyPlayPlanet/falling-block-height-doEntityDrops\n\nMake falling block height nerf respect doEntityDrops"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b285d9087c4d6d3772c2",
    "number": 319,
    "body": "Every tick hoppers try and find an block-inventory to extract from.\nIf no tile entity is above the hopper (which there often isn't) it will do a bounding box search for minecart chests and minecart hoppers.\nIf it can't find an inventory, it will then look for a dropped item, which is another bounding box search.\nThis patch eliminates that expensive check by having dropped items and minecart hoppers/chests look for hoppers instead.\nHoppers are tile entities meaning you can do a simple tile entity lookup to find the nearest hopper in range.\nThis usually results in a net performance gain, since tile entity lookups are around a order of magnitude faster then bounding box lookups.\nPushing out of hoppers also causes a unessicary bouding box lookup, which this patch replaces with a tile entity lookup.\n\nThis patch may causes a decrease in the performance of dropped items, which is why it can be disabled in the configuration.\n# \n\nThis patch has gone through signifigant improvements since you [first saw it a year ago](https://hub.spigotmc.org/stash/projects/PAPER/repos/paperspigot/pull-requests/9/overview).\n- It is now fully compatible with `useHopperCheck` and preserves vanilla lookup behavior for items and minecarts.\n- It has survived a major mincraft update with no major changes, and multple minor updates.\n  - The only issue was that it conflicted with @Aikar 's hopper cooldown reset, but that was later fixed in TacoSpigot#TacoSpigot@577f2ec93a57c7767acbf2605ba33ffd2928ecf9\n- Should emulate vanilla behavior perfectly\n- Used in production on [over 50 servers serving over 100 players](http://mcstats.org/plugin/TacoSpigot)\n  - This includes @L4BORG, @PhanaticD and @CullanP 's servers\n- It has been refactored to use java 8's default interface methods per @0x277F 's suggestion\n- Many of its unnecessary diffs were removed (like that one with the Chunk.tileEntityMap using trove)\n",
    "head_branch": "optimize/hoppers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b286d9087c4d6d3772c3",
    "number": 317,
    "body": "Fallingblocks would previously only check, if directly beneath them a block exists. They also\nhover on top of the 1.5 block tall hitbox of fences during these check. This\nresulted in them always thinking they would be on air.\n\nWe now first check, if if we are already on the ground.\nif not, we check if the falling block is inside of the hitbox of the block at y - 1.\n\nThis Patch basicly reverts https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/616a9687a101689f8ad577446cf9caf80ee8ecd4, which introduced https://hub.spigotmc.org/jira/browse/SPIGOT-2046.\n\nProvides a (real) fix for https://hub.spigotmc.org/jira/browse/SPIGOT-1975. \nFor more information, see https://bugs.mojang.com/browse/MC-90523\n",
    "head_branch": "fix-fence-fallblock",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #317 from MyPlayPlanet/fix-fence-fallblock\n\nFix fallingblocks getting stuck on fences"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b287d9087c4d6d3772c4",
    "number": 310,
    "body": "Some plugins (e.g. Chat related once) tend to use this option, and changing it in the server.properties is not always possible without duplicating this file, or some other effort. \n",
    "head_branch": "server-name-param",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #310 from MyPlayPlanet/server-name-param\n\nAdd server-name as server parameter"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b288d9087c4d6d3772c5",
    "number": 309,
    "body": "With the new UUID API, plugins will be hitting the UserCache very heavily.\nThe UserCache has a number of disadvantages:\n1. Not designed to be thread safe\n   - Paper has modified the UserCache to be thread safe for the UUID API\n     - Due to the delicate nature of thread-safety, this is likely to break without warning if mojang ever modifies the user cache\n   - Even with mojang's changes the UserCache will lock on lookups, so if one thread is doing uuid-intensive work, it is likely to block other lookups\n2. It only clears cache entries on exit.\n   - If a plugin does a lot of UUID lookups, those entries will persist in memory until shutdown _even if not needed_\n   - There is no limit to how large this map can grow, and it may even cause an OOME\n3. It evicts entries based on when they were added, not when they were last used  - Commonly used entires may be evicted in favor of less commonly used entries _even though the entries are still valid_\n4. The UserCache isn't transparent to calling code, and often isn't used\n   - Mojang's internal UUID fetching API completly ignores the UserCache\n   - Code must explicitly use the uuid api in order to benifit from the cache\n   - Caches are reimplemented all around the codebase (for example in TileEntitySkull)\n\nHowever this reimplementation:\n1. Is designed to be thread safe\n   - Will never break across updates, since its a complete reimplementation\n   - Uses guava's Cache based on ConcurrentHashMap for fully concurrent reads and highly concurrent writes\n2. Automatically clears cache entries\n   - If a plugin does a lot of UUID lookups, the cache will intelligently cleanup  - Will automatically clear entries based on last access if low on memory\n3. It evicts cache entries based on last access, not based on when they were first added\n   - Commonly used entries will remain in the cache, while uncommonly uses entries will be cleared\n   - Invalid entries will be removed as in the previous system\n4. Transparent to calling code\n   - The UserCache now wraps the new cache, so code will automatically use the new system\n   - Mojang's internal UUID API now checks the new cache, so code will automatically check the new cache, and so now almost all code benifits from the cache\n   - Caches all around the code base are unified into the new implementation\n     - For example TileEntitySkull now uses the new cache instead of implementing its own\n\nRequires #33 \n",
    "head_branch": "optimize/uuid-cache",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b289d9087c4d6d3772c6",
    "number": 306,
    "body": "Remove all redstone torches, which are no longer being considered as \"stuck\", from the torch update list in one go.\n",
    "head_branch": "redstone-torch-opti",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b28ad9087c4d6d3772c7",
    "number": 283,
    "body": "Fixes GH-281\n",
    "head_branch": "MutableBlockPosition",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b28bd9087c4d6d3772c8",
    "number": 279,
    "body": "",
    "head_branch": "tmux",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #279 from DemonWav/tmux\n\nAdd tmux support to Paper test and add test to paper command help."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b28cd9087c4d6d3772c9",
    "number": 269,
    "body": "Fixes #268\n",
    "head_branch": "fix-entity-tracker",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #269 from Gabscap/fix-entity-tracker\n\nAdd null-check to \"Entity Tracking Improvement\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b28dd9087c4d6d3772ca",
    "number": 261,
    "body": "Not finished yet, but looking for current review.\n\nStill has many bugs.\n",
    "head_branch": "loottable",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "LootTable API & Replenishable Lootables Feature\n\nProvides an API to control the loot table for an object.\nAlso provides a feature that any Lootable Inventory (Chests in Structures)\ncan automatically replenish after a given time.\n\nThis feature is good for long term worlds so that newer players\ndo not suffer with \"Every chest has been looted\"\n\nAPI and Event added to control the Auto Replenish feature for players."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b28ed9087c4d6d3772cb",
    "number": 247,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b28fd9087c4d6d3772cc",
    "number": 234,
    "body": "",
    "head_branch": "this-is-not-the-fly-you-are-looking-for",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #234 from kashike/this-is-not-the-fly-you-are-looking-for\n\nFix wrong variable being checked. Fixes #233"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b290d9087c4d6d3772cd",
    "number": 232,
    "body": "Also have a config to enable/disable kicking on invalid data.\n",
    "head_branch": "implement/BookEditEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #232 from willies952002/implement/BookEditEvent\n\nReimplement PlayerEditBookEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b291d9087c4d6d3772ce",
    "number": 231,
    "body": "diff: https://gist.github.com/kashike/f243eca890ecfba3c459e4644a10eaa6/revisions\n",
    "head_branch": "debug/messages/are/so/annoying",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b292d9087c4d6d3772cf",
    "number": 230,
    "body": "",
    "head_branch": "feature/arrow-pickup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #230 from kashike/feature/arrow-pickup\n\nArrow pickup rule API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b293d9087c4d6d3772d0",
    "number": 229,
    "body": "Resolves #172\n",
    "head_branch": "feature/frosted-ice",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #229 from kashike/feature/frosted-ice\n\nAdd ability to disable, and to set min/max next tick delay, of frosted_ice"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b294d9087c4d6d3772d1",
    "number": 223,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b294d9087c4d6d3772d2",
    "number": 218,
    "body": "… Entity/Player/OfflinePlayer\n\nWhen referring to \"the patch\", I am actually referring to the API patch and not the implementation patch. \"the patches\" refer to all patches in this PR.\n\n**What does the patch do?**\nThe patch adds specifications to the hashCode and equals methods of Entity, Player and OfflinePlayer.\n\nNote that the following specifications can be redefined in sub-interfaces.\n\n_Entity hashCode:_\nAn Entity's hash code is defined to be the hash of an entity's id. This makes **no** changes to the current implementation.\n\n_Entity equals:_\nThe specification is defined to check for equality via:\n1. Instanceof Entity\n2. Entity id equals\n\nNote that 1 makes implementation changes.\n1. Changes a class check (thisClass == otherClass) to (other instanceof Entity)\n\nOfflinePlayer simply defines what the implementation was doing, as well as Player.\n\nThe only difference for Player is that the implementation now checks instanceof with the interface and not the implementing class.\n\n**Why is this needed?**\n\nConvention. Objects which can be mapped and/or checked for equality should clearly define the specifications for hashCode and equals. The API, in its current state, does not do that for Entity/Player/OfflinePlayer (which are probably going to be mapped commonly to avoid lookups with UUIDs).\n\n**Backwards compatible?**\nUnless something in the codebase relied on equality checking for **exact** classes, it will be compatible with the previous codebase.\n\n**Maintenance?**\nOnly when the equals or hashCode needs to be modified for an Entity interface or implementation.\nAs the Javadocs state, that is entirely legal, but it **must** be documented.\n\nYour thoughts (also, is this PR format good)?\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b295d9087c4d6d3772d3",
    "number": 216,
    "body": "The Javadocs for Bukkit.broadcast(BaseComponent) and Bukkit.broadcast(BaseComponent...) specified a **single player**. Changed to specify \"all online players\"\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #216 from Searchndstroy/master\n\nFix silly Javadocs in Bukkit.broadcast(BaseComponent) and Bukkit.broadcast(BaseComponent...)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b297d9087c4d6d3772d4",
    "number": 212,
    "body": "Reload plugin-defined permission nodes when running `/reload permissions`\nCloses GH-210\n",
    "head_branch": "feature/permReload",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #212 from willies952002/feature/permReload\n\nAlso Reload Plugin-Defined Permissions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b298d9087c4d6d3772d5",
    "number": 209,
    "body": "Tested by @PhanaticD\nBased on my findings in [SonarPets](https://github.com/TechzoneMC/SonarPet)\n",
    "head_branch": "fix/riding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b299d9087c4d6d3772d6",
    "number": 205,
    "body": "Add `PlayerHandshakeEvent` to allow plugins to handle handshaking logic themselves, without the need to perform server-side modifications.\n\nThis allows anyone running a custom proxy solution (BungeeCord, LilyPad, etc - forks included) to handle authentication themselves, without performing modifications to the server itself.\n\nHere's an example which replicates the default BungeeCord-style handshake:\n\n``` java\n    @EventHandler\n    public void playerHandshake(final PlayerHandshakeEvent event) {\n        String[] split = event.getOriginalHandshake().split(\"\\00\");\n        if (split.length == 3 || split.length == 4) {\n            event.setServerHostname(split[0]);\n            event.setSocketAddressHostname(split[1]);\n            event.setUniqueId(UUID.fromString(split[2].replaceFirst(\"(\\\\w{8})(\\\\w{4})(\\\\w{4})(\\\\w{4})(\\\\w{12})\", \"$1-$2-$3-$4-$5\")));\n\n            if (split.length == 4) {\n                event.setPropertiesJson(split[3]);\n            }\n        } else {\n            event.setFailed(true);\n        }\n    }\n```\n",
    "head_branch": "feature/handshake",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #205 from kashike/feature/handshake\n\nAdd handshake event"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b29ad9087c4d6d3772d7",
    "number": 193,
    "body": "Removes mojang's new 'DataBits', which are stupidly inneficent\n\nHopefully improve inlining\n",
    "head_branch": "optimize/getType",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b29bd9087c4d6d3772d8",
    "number": 190,
    "body": "",
    "head_branch": "docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update CONTRIBUTING.md for the new build system"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b29cd9087c4d6d3772d9",
    "number": 187,
    "body": "Thoughts on automatic plugin set?\n",
    "head_branch": "testServer",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b29dd9087c4d6d3772da",
    "number": 186,
    "body": "This probably needs more extensive testing before pulling.\n\nNew IO implementation is entirely optional.\nBetter locking.\nBetter guarantees about closing region files on world unload.\nBetter detection and handling of corrupt region files.\nRegion files can shrink as well as grow.\nBetter free space map implementation for region files.\nFairly minimal diff.\nConfigurable thread count for async chunk saving.\nConfigurable limit to the async chunk saving queue size.\n\nFuture: possibility of a plugin API to modify world persistence.\nFuture: possibility of per world disk IO stats.\n",
    "head_branch": "chunkio2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b29ed9087c4d6d3772db",
    "number": 185,
    "body": "Thanks to @willies952002 for #183\n",
    "head_branch": "feautre/shell",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #185 from kashike/feautre/shell\n\nAdd support for multiple shell types"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b29fd9087c4d6d3772dc",
    "number": 183,
    "body": "1. Move setup into it's own function\n2. Add a setup failure error if it cannot complete successfully\n3. Try to install the alias into `~/.bash_aliases` before falling back to `~/.bashrc`\n4. Actually change directory when doing `paper s[erver]`\n",
    "head_branch": "improve/paperScript",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2a0d9087c4d6d3772dd",
    "number": 182,
    "body": "https://github.com/OvercastNetwork/SportBukkit/commit/35118fbbee463426016bb56f6d6d614fa75bd516\n",
    "head_branch": "feature/unknown-use",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2a1d9087c4d6d3772de",
    "number": 181,
    "body": "https://github.com/OvercastNetwork/SportBukkit/commit/2e77255c5fc0645717fe544d3d701a94e8f761da\n",
    "head_branch": "feature/debug-info",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2a2d9087c4d6d3772df",
    "number": 177,
    "body": "Also update Paperclip, as required for the build changes. All scripts have been moved to a `scripts` directory, with a single `paper` command which now handles all Paper building and patching. It also provides a set of new useful functions to enhance the shell. All CraftBukkit, Bukkit, Spigot, and BuildData stuff is now in the work directory, keeping the main directory clean.\n",
    "head_branch": "cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #177 from DemonWav/cleanup\n\nCleanup and restructure the project"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2a3d9087c4d6d3772e0",
    "number": 176,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2a4d9087c4d6d3772e1",
    "number": 173,
    "body": "Streams -> sexier than loops\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #173 from DemonWav/master\n\n<~Z750> sex it up for me"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2a4d9087c4d6d3772e2",
    "number": 167,
    "body": "",
    "head_branch": "getentity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #167 from DemonWav/getentity\n\nAdd getEntity by UUID API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b2a6d9087c4d6d3772e3",
    "number": 163,
    "body": "",
    "head_branch": "region-file-cache",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #163 from cybertiger/region-file-cache\n\nSanitise RegionFileCache and make cache size configurable."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2a7d9087c4d6d3772e4",
    "number": 162,
    "body": "Probably needs testing, but should provide some speedup to chunk loading under some circumstances.\n",
    "head_branch": "region-file-io-ops",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #162 from cybertiger/region-file-io-ops\n\nReduce IO ops opening a new region file."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2a8d9087c4d6d3772e5",
    "number": 158,
    "body": "Currently when destroying a Minecart the drop is named \"entity.MinecartRideable.name\". This is a workaround by not setting a name for the drop if there is no custom name.\n\nThe same behavior happens to other entities/items as well, see [MC-68446](https://bugs.mojang.com/browse/MC-68446).\nI only fixed it for Minecart drops, as this is the only behavior that will happen during Survival Minecraft.\n",
    "head_branch": "fix-minecart",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2a9d9087c4d6d3772e6",
    "number": 155,
    "body": "",
    "head_branch": "otherBlockPosFix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #155 from DemonWav/otherBlockPosFix\n\nAdd same infi-loop fix to other identical block of code I missed earlier"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2aad9087c4d6d3772e7",
    "number": 153,
    "body": "",
    "head_branch": "feature/slot",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #153 from kashike/feature/slot\n\nAccess items by EquipmentSlot"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b2abd9087c4d6d3772e8",
    "number": 152,
    "body": "blockposition2 and blockposition3 were already there in the NMS code, they just didn't use them.\n",
    "head_branch": "blockPosInfLoop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #152 from DemonWav/blockPosInfLoop\n\nPrevent possible infinite loop in BlockPosition iterator"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2acd9087c4d6d3772e9",
    "number": 149,
    "body": "Load the destination chunk before teleporting the player. Fixes #147 \n",
    "head_branch": "fix-teleport",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #149 from Gabscap/fix-teleport\n\nLoad chunks before player teleport - Fixes #147"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2acd9087c4d6d3772ea",
    "number": 148,
    "body": "Additional spacing to make it easier to read.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #148 from meytro/patch-1\n\nUpdate ISSUE_TEMPLATE.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2add9087c4d6d3772eb",
    "number": 140,
    "body": "Basic issue template for the different types of issues we encounter. Hopefully, this will weed out some not-so quality issues.\n",
    "head_branch": "issue",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #140 from Ichbinjoe/issue\n\nAdd issue template"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2afd9087c4d6d3772ec",
    "number": 132,
    "body": "If the path to the Paper repository contained a space, it would fail to execute\n`dirname $PATH_WITH_SPACE`\n\nFix for #130 \n",
    "head_branch": "fix-applypatches",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #132 from Gabscap/fix-applypatches\n\nFix build error"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2b0d9087c4d6d3772ed",
    "number": 122,
    "body": "Fix issues with Paper build #544\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2b1d9087c4d6d3772ee",
    "number": 118,
    "body": "I shouldn't have assumed their api was anything other but a thin (and incomplete) wrapper over the packets.\n\nFixes #94\n",
    "head_branch": "fix/spigot-title-compatibility",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2b2d9087c4d6d3772ef",
    "number": 117,
    "body": "Remove all remaining instances of `PaperSpigot` and replace them with `Paper`\n",
    "head_branch": "correct/README",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d281b8fbc6c70bb3f0b8175c7fe6cdd95937d4c0 into 84b54438c1724ab3376263aea1e07285bb4b911e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2b3d9087c4d6d3772f0",
    "number": 116,
    "body": "[MC-63720](https://bugs.mojang.com/browse/MC-63720) causes the client not to render moving banners correctly if the full server time exceeds a certain number. This patch should work as a workaround by sending every player the lowest possible time, so that all 8 moon phases are displayed correctly.\n\nI can also add a paper config option if desired.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2b4d9087c4d6d3772f1",
    "number": 102,
    "body": "Prevents us from having to merge spigot when it changes, instead we just update submodules.\nThis seperates our history and better organizes the project.\n\nBased on TacoSpigot/TacoSpigot@cd6bc2fab25eedf767e91145795e188c5a7d2170\n",
    "head_branch": "spigot-in-submodule",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2b5d9087c4d6d3772f2",
    "number": 101,
    "body": "Fixes an issue where entities (including players) cannot die, even using the /kill command.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2b6d9087c4d6d3772f3",
    "number": 100,
    "body": "Configurable version of\nhttps://github.com/OvercastNetwork/SportBukkit/blob/rebase19/CraftBukkit/0106-Set-health-before-death-event.patch\n",
    "head_branch": "feature/health-death",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2b7d9087c4d6d3772f4",
    "number": 99,
    "body": "https://github.com/OvercastNetwork/SportBukkit/blob/rebase19/Bukkit/0044-Custom-replacement-for-eaten-items.patch\nhttps://github.com/OvercastNetwork/SportBukkit/blob/rebase19/CraftBukkit/0096-Custom-replacement-for-eaten-items.patch\n",
    "head_branch": "feature/consume",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2b8d9087c4d6d3772f5",
    "number": 91,
    "body": "Add the ability to reload the custom permissions file by doing \"/reload permissions\"\nImplements Feature Request: https://github.com/PaperMC/Paper/issues/49\n\nSorry about reposting/recreating this, but I was unable to re-open the original PR.\n",
    "head_branch": "feature/permReload",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 869ab5202ebaf76b5689acbd138bf9d680f38a3c into 48c76749336848de5653723514c0cb92c9395a4a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2b9d9087c4d6d3772f6",
    "number": 88,
    "body": "Add the ability to reload the custom permissions file by doing \"/reload perms\"\n\nhttps://github.com/PaperMC/Paper/issues/49\n",
    "head_branch": "feature/permReload",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2bad9087c4d6d3772f7",
    "number": 84,
    "body": "Fixes #83\nFix resetTitle()\n@Zbob750 shouldn't be doing these updates in the middle of the night\n",
    "head_branch": "fix/null-titles",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2bbd9087c4d6d3772f8",
    "number": 82,
    "body": "- Replace all remaining instances of `PaperSpigot` in `Contributing.md` with `Paper`\n- Fix List under \"Apply Patches\" Section\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2bcd9087c4d6d3772f9",
    "number": 78,
    "body": "",
    "head_branch": "feature/asm-executors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2bdd9087c4d6d3772fa",
    "number": 73,
    "body": "https://github.com/OvercastNetwork/SportBukkit/blob/rebase19/Bukkit/0034-Complete-resource-pack-API.patch\nhttps://github.com/OvercastNetwork/SportBukkit/blob/rebase19/CraftBukkit/0086-Complete-resource-pack-API.patch\n",
    "head_branch": "feature/you-are-very-resourceful-you-know-yes-you-are-very-resourceful-yes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2bed9087c4d6d3772fb",
    "number": 72,
    "body": "",
    "head_branch": "eventVarArg",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2bfd9087c4d6d3772fc",
    "number": 71,
    "body": "This brings in https://github.com/OvercastNetwork/SportBukkit/blob/rebase19/Bukkit/0003-Add-methods-for-working-with-arrows-stuck-in-living-.patch and https://github.com/OvercastNetwork/SportBukkit/blob/rebase19/CraftBukkit/0007-Add-methods-for-working-with-arrows-stuck-in-living-.patch from SportBukkit.\n",
    "head_branch": "feature/what-are-these-pokey-things-OH-MY-GOD-HELP-THEY-HURT",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a8ecaee65f404b82aa7254a50ea1528117551915 into 7603bda87f05b1fc713b2ee0316612c93fe3aafe"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623b2c0d9087c4d6d3772fd",
    "number": 70,
    "body": "Disable Scoreboards for non players by default\n\nEntities collision is checking for scoreboards setting.\nThis is very heavy to do map lookups for every collision to check\nthis setting.\n\nSo avoid looking up scoreboards and short circuit to the \"not on a team\"\nlogic which is most likely to be true.\n",
    "head_branch": "fixCollisionLag",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2c1d9087c4d6d3772fe",
    "number": 68,
    "body": "This script will build a folder in work/ that includes only\nnon imported NMS files. This folder can then be added to IDE as a\nsource to see unimported files without any duplicate class errors\n",
    "head_branch": "makemcdev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b81488cf5738fd395b44f76e9cdec26d6b01b009 into 24c0738aee67ee1578c5f39310daca8f1830bc0d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2c2d9087c4d6d3772ff",
    "number": 67,
    "body": "",
    "head_branch": "text-cereal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2c3d9087c4d6d377300",
    "number": 66,
    "body": "reduces diff and cleans up implementation of goals greatly.\n",
    "head_branch": "improvNav",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2c4d9087c4d6d377301",
    "number": 65,
    "body": "Check versions against github instead of CI\nWorks better with building from source\n",
    "head_branch": "improve-version-checking",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2c5d9087c4d6d377302",
    "number": 64,
    "body": "",
    "head_branch": "feature/components",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2c6d9087c4d6d377303",
    "number": 63,
    "body": "I don't know what the person who wrote that code was smoking, but I don't think it was good.\n\nGets rid of the WeakHashMap that mojang was abusing purely to be lazy\non clean up, and handles registering and deregistering navigation\nupon world add/remove operations.\n",
    "head_branch": "fixNavListener",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2c7d9087c4d6d377304",
    "number": 62,
    "body": "Reverts PaperSpigot/Paper#61\n",
    "head_branch": "revert-61-fixNavListener",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2c8d9087c4d6d377305",
    "number": 61,
    "body": "I don't know what the person who wrote that code was smoking, but I don't think it was good.\n",
    "head_branch": "fixNavListener",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2c9d9087c4d6d377306",
    "number": 60,
    "body": "I thought it would be simpler to just use wget instead of curl. Saves the need to install curl for some folks out there.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2cad9087c4d6d377307",
    "number": 52,
    "body": "Should fix #51 if it works.\n\nMojang was iterating over a copy of a key set of a map. (quite a mouthful)\nThis was very slow, since maps are slow, and copies are pretty slow.\nMojang was using maps for their weak-key functionality, which we reimplement directly.\n\nThis is untested.\n@mibby please test.\n",
    "head_branch": "fix/slow-loading",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2cbd9087c4d6d377308",
    "number": 50,
    "body": "Maps provide no benefit over arrays.\nArrays are much faster and more efficient than maps.\nRemoves locking, which is not an issue, as there are only some async reads (which are safe now that we use arrays).\n\nHardcoded to a length of 16, as thats all the length we need for 1.9.\n",
    "head_branch": "feature/array-metadata",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2ccd9087c4d6d377309",
    "number": 45,
    "body": "Reflection (although highly optimized), has noticable overhead.\nIt also creates noticable GC overhead by allocating arrays with arguments, as @Aikar has said.\n\nBased on WaterfallMC/Waterfall@1692934370735165f128fa8ece9a24fff5211094\n\nThis is formatted correctly and passes all tests.\nSince its a patch against the API, it should have 0 maintenance burden.\n",
    "head_branch": "feature/asm-executors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2cdd9087c4d6d37730a",
    "number": 43,
    "body": "People are able to abuse the way Bukkit handles teleportation across worlds since it provides a built in teleportation safety check.\n\nTo abuse the safety check, players are required to get into a location deemed unsafe by Bukkit e.g. be within a chest or door block. While they are in this block, they accept a teleport request from a player within a different world. Once the player teleports, Minecraft will recursively search upwards for a safe location, this could eventually land within a player's skybase.\n\nExample setup to perform the glitch: http://puu.sh/ng3PC/cf072dcbdb.png\nThe wanted destination was on top of the emerald block however the player ended on top of the diamond block. This only is the case if the player is teleporting between worlds.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2cfd9087c4d6d37730b",
    "number": 40,
    "body": "Adds a warning when plugins set velocities of entities higher than recommended (a maximum of 4 blocks/tick is sent to the client in a SetVelocity packet)\n",
    "head_branch": "velocityCheck",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2d0d9087c4d6d37730c",
    "number": 38,
    "body": "IRC wanted configurable portal search radius.\n",
    "head_branch": "findPortals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2d0d9087c4d6d37730d",
    "number": 37,
    "body": "Addresses #15 ~~currently without internal server exceptions (only plugin caused exceptions)~~\n\nTODO: \n- ~~Plugin Messaging Handling (I forgot...)~~\n- ~~Internal~~\n",
    "head_branch": "error-reporting",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2d1d9087c4d6d37730e",
    "number": 36,
    "body": "#30 looked like a malicious party was dragging with an illegal index. This will simply ignore the input in the future, assuming it is unintended.\n",
    "head_branch": "fix-30",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2d3d9087c4d6d37730f",
    "number": 35,
    "body": "Changes the implementation of both the tile entity as well as the entity removal lists in world. This was a mis-choice in implementation since as the amount of entities for removal grew each tick, the complexity for the .removeAll() operations grew rapidly. Using a HashSet for storing entities in which need removing reduced the complexity greatly.\n",
    "head_branch": "list-to-set",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2d4d9087c4d6d377310",
    "number": 33,
    "body": "Cache uuid/name requests.\nReroute requests in NMS through the api.\nMake online player profile access thread safe (not player entities).\nPluggable lookup implementation, similar to @geNAZt 's in #13 .\n",
    "head_branch": "feature/uuid-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2d5d9087c4d6d377311",
    "number": 32,
    "body": "Uses title objects instead of individual update methods.\n\nI haven't created a test plugin to test this, just tell me if you want me to do that.\nIt should be somewhat stable, since its based on the already tested sportbukkit api.\nI have verified this doesn't crash the server though.\n",
    "head_branch": "feature/better-title-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2d6d9087c4d6d377312",
    "number": 31,
    "body": "",
    "head_branch": "feature/better-exceptions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2d7d9087c4d6d377313",
    "number": 27,
    "body": "",
    "head_branch": "feature/commandmap",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2d8d9087c4d6d377314",
    "number": 26,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2d9d9087c4d6d377315",
    "number": 25,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2dad9087c4d6d377316",
    "number": 23,
    "body": "Usually hoppers aren't near items so we can avoid this lookup.\nAlso avoid looking for minecarts if there are none, which there usually aren't\n\nThese two lookups are the biggest cause of hopper lag, and these should help significantly.\n\nBig thanks to @CullanP for suggesting this and providing me the initial patch.\nThis patch is a very simple and very effective patch, that @CullanP claims has large improvements (even before avoiding the minecarts).\n\nI've tested, formatted and double-checked this PR.\n",
    "head_branch": "idle-hoppers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2dbd9087c4d6d377317",
    "number": 13,
    "body": "Some bigger Networks have the problem of hitting the Mojang API Limit with multiple instances at once. The solution was to implement some sort of HTTP Proxy which always has been a pain. This implementation can use caching of any sort. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2dcd9087c4d6d377318",
    "number": 9,
    "body": "Copy of [Spigot PR 57](https://hub.spigotmc.org/stash/projects/SPIGOT/repos/spigot/pull-requests/57/overview)\n\nI haven't tested this, but it seems like it won't break.\nRequested by @Spurlex.\n",
    "head_branch": "cancellable-EntityDismountEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2ddd9087c4d6d377319",
    "number": 7,
    "body": "Make block location tab completion be a per-world configurable value as well\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2ded9087c4d6d37731a",
    "number": 5,
    "body": "This is a feature in vanilla Minecraft that has somehow been missing from CraftBukkit for years.\nI wasn't sure the best way to move code from one method to another, so I decided deleting it and noting the move would be better than huge blocks of commented out code. I can change that if it's better the other way.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2dfd9087c4d6d37731b",
    "number": 4,
    "body": "I thought I got rid of these bugs >:(\nShould fix #3\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623b2e0d9087c4d6d37731c",
    "number": 2,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  }
]